<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Reflection.Emit.ILGeneration</name>
  </assembly>
  <members>
    <member name="T:System.Reflection.Emit.CustomAttributeBuilder">
      <summary vsli:raw="Helps build custom attributes.">Hilft beim Erstellen benutzerdefinierter Attribute.</summary>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[])">
      <summary vsli:raw="Initializes an instance of the &lt;see langword=&quot;CustomAttributeBuilder&quot; /&gt; class given the constructor for the custom attribute and the arguments to the constructor.">Initialisiert eine Instanz der <see langword="CustomAttributeBuilder" />-Klasse mit dem Konstruktor für das benutzerdefinierte Attribut und den Argumenten für den Konstruktor.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">Der Konstruktor für das benutzerdefinierte Attribut.</param>
      <param name="constructorArgs" vsli:raw="The arguments to the constructor of the custom attribute.">Die Argumente für den Konstruktor des benutzerdefinierten Attributs.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is static or private.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of supplied arguments does not match the number of parameters of the constructor as required by the calling convention of the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of supplied argument does not match the type of the parameter declared in the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; A supplied argument is a reference type other than &lt;see cref=&quot;T:System.String&quot; /&gt; or &lt;see cref=&quot;T:System.Type&quot; /&gt;.">
        <paramref name="con" /> ist statisch oder privat.
- oder -
Die Anzahl der bereitgestellten Argumente entspricht nicht der Anzahl der Parameter des Konstruktors, wie für die Aufrufkonvention des Konstruktors erforderlich.

oder -
Der Typ des bereitgestellten Arguments entspricht nicht dem Typ des Parameters, der im Konstruktor deklariert wurde.

- oder -
Ein bereitgestelltes Argument ist ein anderer Verweistyp als <see cref="T:System.String" /> oder <see cref="T:System.Type" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;constructorArgs&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> oder <paramref name="constructorArgs" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.FieldInfo[],System.Object[])">
      <summary vsli:raw="Initializes an instance of the &lt;see langword=&quot;CustomAttributeBuilder&quot; /&gt; class given the constructor for the custom attribute, the arguments to the constructor, and a set of named field/value pairs.">Initialisiert eine Instanz der <see langword="CustomAttributeBuilder" />-Klasse, wobei der Konstruktor für das benutzerdefinierte Attribut, die Konstruktorargumente und eine Gruppe benannter Feld-Wert-Paare angegeben sind.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">Der Konstruktor für das benutzerdefinierte Attribut.</param>
      <param name="constructorArgs" vsli:raw="The arguments to the constructor of the custom attribute.">Die Argumente für den Konstruktor des benutzerdefinierten Attributs.</param>
      <param name="namedFields" vsli:raw="Named fields of the custom attribute.">Benannte Felder des benutzerdefinierten Attributs.</param>
      <param name="fieldValues" vsli:raw="Values for the named fields of the custom attribute.">Werte für die benannten Felder des benutzerdefinierten Attributs.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The lengths of the &lt;paramref name=&quot;namedFields&quot; /&gt; and &lt;paramref name=&quot;fieldValues&quot; /&gt; arrays are different.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;con&quot; /&gt; is static or private.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of supplied arguments does not match the number of parameters of the constructor as required by the calling convention of the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of supplied argument does not match the type of the parameter declared in the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The types of the field values do not match the types of the named fields.  &#xA;  &#xA; -or-  &#xA;  &#xA; The field does not belong to the same class or base class as the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; A supplied argument or named field is a reference type other than &lt;see cref=&quot;T:System.String&quot; /&gt; or &lt;see cref=&quot;T:System.Type&quot; /&gt;.">Das <paramref name="namedFields" />-Array und das <paramref name="fieldValues" />-Array ist von unterschiedlicher Länge.
- oder -
<paramref name="con" /> ist statisch oder privat.

oder -
Die Anzahl der bereitgestellten Argumente entspricht nicht der Anzahl der Parameter des Konstruktors, wie für die Aufrufkonvention des Konstruktors erforderlich.

- oder -
Der Typ des bereitgestellten Arguments entspricht nicht dem Typ des Parameters, der im Konstruktor deklariert wurde.

oder -
Die Typen der Feldwerte stimmen nicht mit den Typen der benannten Felder überein.

oder -
Das Feld gehört nicht zu derselben Klasse oder Basisklasse wie der Konstruktor.


- oder -
Ein angegebenes Argument oder ein benanntes Feld ist von einem anderen Referenztyp als <see cref="T:System.String" /> oder <see cref="T:System.Type" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One of the parameters is &lt;see langword=&quot;null&quot; /&gt;.">Einer der Parameter ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.PropertyInfo[],System.Object[])">
      <summary vsli:raw="Initializes an instance of the &lt;see langword=&quot;CustomAttributeBuilder&quot; /&gt; class given the constructor for the custom attribute, the arguments to the constructor, and a set of named property or value pairs.">Initialisiert eine Instanz der <see langword="CustomAttributeBuilder" />-Klasse, wobei der Konstruktor für das benutzerdefinierte Attribut, die Konstruktorargumente und eine Gruppe benannter Eigenschaften- oder Wert-Paare angegeben sind.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">Der Konstruktor für das benutzerdefinierte Attribut.</param>
      <param name="constructorArgs" vsli:raw="The arguments to the constructor of the custom attribute.">Die Argumente für den Konstruktor des benutzerdefinierten Attributs.</param>
      <param name="namedProperties" vsli:raw="Named properties of the custom attribute.">Benannte Eigenschaften des benutzerdefinierten Attributs.</param>
      <param name="propertyValues" vsli:raw="Values for the named properties of the custom attribute.">Werte für die benannten Eigenschaften des benutzerdefinierten Attributs.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The lengths of the &lt;paramref name=&quot;namedProperties&quot; /&gt; and &lt;paramref name=&quot;propertyValues&quot; /&gt; arrays are different.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;con&quot; /&gt; is static or private.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of supplied arguments does not match the number of parameters of the constructor as required by the calling convention of the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of supplied argument does not match the type of the parameter declared in the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The types of the property values do not match the types of the named properties.  &#xA;  &#xA; -or-  &#xA;  &#xA; A property has no setter method.  &#xA;  &#xA; -or-  &#xA;  &#xA; The property does not belong to the same class or base class as the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; A supplied argument or named property is a reference type other than &lt;see cref=&quot;T:System.String&quot; /&gt; or &lt;see cref=&quot;T:System.Type&quot; /&gt;.">Das <paramref name="namedProperties" />-Array und das <paramref name="propertyValues" />-Array ist von unterschiedlicher Länge.
- oder -
<paramref name="con" /> ist statisch oder privat.

oder -
Die Anzahl der bereitgestellten Argumente entspricht nicht der Anzahl der Parameter des Konstruktors, wie für die Aufrufkonvention des Konstruktors erforderlich.

oder -
Der Typ des bereitgestellten Arguments entspricht nicht dem Typ des Parameters, der im Konstruktor deklariert wurde.


- oder -
Die Typen der Eigenschaftenwerte stimmen nicht mit den Typen der benannten Eigenschaften überein.

oder -
Eine Eigenschaft verfügt über keine Set-Methode.

oder -
Die Eigenschaft gehört nicht zu derselben Klasse oder Basisklasse wie der Konstruktor.


- oder -
Ein angegebenes Argument oder eine benannte Eigenschaft ist von einem anderen Referenztyp als <see cref="T:System.String" /> oder <see cref="T:System.Type" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One of the parameters is &lt;see langword=&quot;null&quot; /&gt;.">Einer der Parameter ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.PropertyInfo[],System.Object[],System.Reflection.FieldInfo[],System.Object[])">
      <summary vsli:raw="Initializes an instance of the &lt;see langword=&quot;CustomAttributeBuilder&quot; /&gt; class given the constructor for the custom attribute, the arguments to the constructor, a set of named property or value pairs, and a set of named field or value pairs.">Initialisiert eine Instanz der <see langword="CustomAttributeBuilder" />-Klasse, wobei der Konstruktor für das benutzerdefinierte Attribut, die Konstruktorargumente, eine Gruppe benannter Eigenschaften- bzw. Wert-Paare sowie eine Gruppe benannter Feld- bzw. Wert-Paare angegeben sind.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">Der Konstruktor für das benutzerdefinierte Attribut.</param>
      <param name="constructorArgs" vsli:raw="The arguments to the constructor of the custom attribute.">Die Argumente für den Konstruktor des benutzerdefinierten Attributs.</param>
      <param name="namedProperties" vsli:raw="Named properties of the custom attribute.">Benannte Eigenschaften des benutzerdefinierten Attributs.</param>
      <param name="propertyValues" vsli:raw="Values for the named properties of the custom attribute.">Werte für die benannten Eigenschaften des benutzerdefinierten Attributs.</param>
      <param name="namedFields" vsli:raw="Named fields of the custom attribute.">Benannte Felder des benutzerdefinierten Attributs.</param>
      <param name="fieldValues" vsli:raw="Values for the named fields of the custom attribute.">Werte für die benannten Felder des benutzerdefinierten Attributs.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The lengths of the &lt;paramref name=&quot;namedProperties&quot; /&gt; and &lt;paramref name=&quot;propertyValues&quot; /&gt; arrays are different.  &#xA;  &#xA; -or-  &#xA;  &#xA; The lengths of the &lt;paramref name=&quot;namedFields&quot; /&gt; and &lt;paramref name=&quot;fieldValues&quot; /&gt; arrays are different.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;con&quot; /&gt; is static or private.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of supplied arguments does not match the number of parameters of the constructor as required by the calling convention of the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of supplied argument does not match the type of the parameter declared in the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The types of the property values do not match the types of the named properties.  &#xA;  &#xA; -or-  &#xA;  &#xA; The types of the field values do not match the types of the corresponding field types.  &#xA;  &#xA; -or-  &#xA;  &#xA; A property has no setter.  &#xA;  &#xA; -or-  &#xA;  &#xA; The property or field does not belong to the same class or base class as the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; A supplied argument, named property, or named field is a reference type other than &lt;see cref=&quot;T:System.String&quot; /&gt; or &lt;see cref=&quot;T:System.Type&quot; /&gt;.">Das <paramref name="namedProperties" />-Array und das <paramref name="propertyValues" />-Array ist von unterschiedlicher Länge.

oder -
Das <paramref name="namedFields" />-Array und das <paramref name="fieldValues" />-Array ist von unterschiedlicher Länge.

- oder -
<paramref name="con" /> ist statisch oder privat.
- oder -
Die Anzahl der bereitgestellten Argumente entspricht nicht der Anzahl der Parameter des Konstruktors, wie für die Aufrufkonvention des Konstruktors erforderlich.
- oder -
Der Typ des bereitgestellten Arguments entspricht nicht dem Typ des Parameters, der im Konstruktor deklariert wurde.
- oder -
Die Typen der Eigenschaftenwerte stimmen nicht mit den Typen der benannten Eigenschaften überein.
- oder -
Die Typen der Feldwerte stimmen nicht mit den Typen der entsprechenden Feldtypen überein.

oder -
Eine Eigenschaft verfügt über keine Set-Methode.

- oder -
Die Eigenschaft oder das Feld gehört nicht zu derselben Klasse oder Basisklasse wie der Konstruktor.
- oder -
Ein angegebenes Argument, eine benannte Eigenschaft oder ein benanntes Feld ist von einem anderen Referenztyp als <see cref="T:System.String" /> oder <see cref="T:System.Type" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One of the parameters is &lt;see langword=&quot;null&quot; /&gt;.">Einer der Parameter ist <see langword="null" />.</exception>
    </member>
    <member name="T:System.Reflection.Emit.ILGenerator">
      <summary vsli:raw="Generates Microsoft intermediate language (MSIL) instructions.">Generiert MSIL-Anweisungen (Microsoft Intermediate Language).</summary>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)">
      <summary vsli:raw="Begins a catch block.">Beginnt einen Catch-Block.</summary>
      <param name="exceptionType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the exception.">Das <see cref="T:System.Type" />-Objekt, das die Ausnahme darstellt.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The catch block is within a filtered exception.">Der Catch-Block befindet sich in einer gefilterten Ausnahme.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;exceptionType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the exception filter block has not returned a value that indicates that finally blocks should be run until this catch block is located.">
        <paramref name="exceptionType" /> ist <see langword="null" />, und der Ausnahmefilterblock hat keinen Wert zurückgegeben, der anzeigt, dass Finally-Blöcke bis zum Auffinden dieses Catch-Blocks ausgeführt werden sollen.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The Microsoft intermediate language (MSIL) being generated is not currently in an exception block.">Die Microsoft Intermediate Language (MSIL), die generiert wird, befindet sich derzeit nicht in einem Ausnahmeblock.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock">
      <summary vsli:raw="Begins an exception block for a filtered exception.">Beginnt einen Ausnahmeblock für eine gefilterte Ausnahme.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The Microsoft intermediate language (MSIL) being generated is not currently in an exception block.  &#xA;  &#xA; -or-  &#xA;  &#xA; This &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; belongs to a &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt;.">Die Microsoft Intermediate Language (MSIL), die generiert wird, befindet sich derzeit nicht in einem Ausnahmeblock.
- oder -
Dieser <see cref="T:System.Reflection.Emit.ILGenerator" /> gehört zu einer <see cref="T:System.Reflection.Emit.DynamicMethod" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginExceptionBlock">
      <summary vsli:raw="Begins an exception block for a non-filtered exception.">Beginnt einen Ausnahmeblock für eine nicht gefilterte Ausnahme.</summary>
      <returns vsli:raw="The label for the end of the block. This will leave you in the correct place to execute finally blocks or to finish the try.">Die Sprungmarke für das Ende des Blocks. Durch diese befinden Sie sich an der richtigen Stelle zum Ausführen von finally-Blöcken oder zum Beenden von try.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginFaultBlock">
      <summary vsli:raw="Begins an exception fault block in the Microsoft intermediate language (MSIL) stream.">Beginnt einen Ausnahmefehlerblock im MSIL-Stream (Microsoft Intermediate Language).</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The MSIL being generated is not currently in an exception block.  &#xA;  &#xA; -or-  &#xA;  &#xA; This &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; belongs to a &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt;.">Die generierte MSIL befindet sich derzeit nicht in einem Ausnahmeblock.
- oder -
Dieser <see cref="T:System.Reflection.Emit.ILGenerator" /> gehört zu einer <see cref="T:System.Reflection.Emit.DynamicMethod" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginFinallyBlock">
      <summary vsli:raw="Begins a finally block in the Microsoft intermediate language (MSIL) instruction stream.">Beginnt einen finally-Block im MSIL-Anweisungsstream (Microsoft Intermediate Language).</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The MSIL being generated is not currently in an exception block.">Die generierte MSIL befindet sich derzeit nicht in einem Ausnahmeblock.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginScope">
      <summary vsli:raw="Begins a lexical scope.">Leitet einen lexikalischen Gültigkeitsbereich ein.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; belongs to a &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt;.">Dieser <see cref="T:System.Reflection.Emit.ILGenerator" /> gehört zu einer <see cref="T:System.Reflection.Emit.DynamicMethod" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)">
      <summary vsli:raw="Declares a local variable of the specified type.">Deklariert eine lokale Variable vom angegebenen Typ.</summary>
      <param name="localType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type of the local variable.">Ein <see cref="T:System.Type" />-Objekt, das den Typ der lokalen Variablen darstellt.</param>
      <returns vsli:raw="The declared local variable.">Die deklarierte lokale Variable.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;localType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="localType" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been created by the &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; method.">Der enthaltende Typ wurde von der <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />-Methode erstellt.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)">
      <summary vsli:raw="Declares a local variable of the specified type, optionally pinning the object referred to by the variable.">Deklariert eine lokale Variable des angegebenen Typs und fixiert optional das Objekt, auf das von der Variablen verwiesen wird.</summary>
      <param name="localType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type of the local variable.">Ein <see cref="T:System.Type" />-Objekt, das den Typ der lokalen Variablen darstellt.</param>
      <param name="pinned" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to pin the object in memory; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, um das Objekt im Arbeitsspeicher zu fixieren; andernfalls <see langword="false" />.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.LocalBuilder&quot; /&gt; object that represents the local variable.">Ein <see cref="T:System.Reflection.Emit.LocalBuilder" />-Objekt, das die lokale Variable darstellt.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;localType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="localType" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been created by the &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; method.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method body of the enclosing method has been created by the &lt;see cref=&quot;M:System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)&quot; /&gt; method.">Der enthaltende Typ wurde von der <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />-Methode erstellt.
- oder -
Der Methodentext der einschließenden Methode wurde von der <see cref="M:System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)" />-Methode erstellt.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The method with which this &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; is associated is not represented by a &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt;.">Die Methode, der dieser <see cref="T:System.Reflection.Emit.ILGenerator" /> zugeordnet ist, wird nicht von einem <see cref="T:System.Reflection.Emit.MethodBuilder" /> dargestellt.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.DefineLabel">
      <summary vsli:raw="Declares a new label.">Deklariert eine neue Sprungmarke.</summary>
      <returns vsli:raw="A new label that can be used as a token for branching.">Eine neue Bezeichnung, die als Token für Verzweigungen verwendet werden kann.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">
      <summary vsli:raw="Puts the specified instruction onto the stream of instructions.">Fügt die angegebene Anweisung in den Anweisungsstream ein.</summary>
      <param name="opcode" vsli:raw="The Microsoft Intermediate Language (MSIL) instruction to be put onto the stream.">Die in den Stream einzufügende MSIL-Anweisung (Microsoft Intermediate Language).</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)">
      <summary vsli:raw="Puts the specified instruction and character argument onto the Microsoft intermediate language (MSIL) stream of instructions.">Fügt die angegebene Anweisung und das Zeichenargument in den MSIL-Anweisungsstream (Microsoft Intermediate Language) ein.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream.">Die an den Stream auszugebende MSIL-Anweisung.</param>
      <param name="arg" vsli:raw="The character argument pushed onto the stream immediately after the instruction.">Das unmittelbar hinter der Anweisung in den Stream eingefügte Zeichenargument.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)">
      <summary vsli:raw="Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.">Fügt die angegebene Anweisung und das numerische Argument in den MSIL-Anweisungsstream (Microsoft Intermediate Language) ein.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream. Defined in the &lt;see langword=&quot;OpCodes&quot; /&gt; enumeration.">Die an den Stream auszugebende MSIL-Anweisung. In der <see langword="OpCodes" />-Enumeration definiert.</param>
      <param name="arg" vsli:raw="The numerical argument pushed onto the stream immediately after the instruction.">Das unmittelbar hinter der Anweisung in den Stream eingefügte numerische Argument.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">
      <summary vsli:raw="Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.">Fügt die angegebene Anweisung und das numerische Argument in den MSIL-Anweisungsstream (Microsoft Intermediate Language) ein.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">Die MSIL-Anweisung, die in den Datenstrom ausgegeben werden soll.</param>
      <param name="arg" vsli:raw="The &lt;see langword=&quot;Int&quot; /&gt; argument pushed onto the stream immediately after the instruction.">Das unmittelbar hinter der Anweisung in den Stream eingefügte <see langword="Int" />-Argument.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)">
      <summary vsli:raw="Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.">Fügt die angegebene Anweisung und das numerische Argument in den MSIL-Anweisungsstream (Microsoft Intermediate Language) ein.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream.">Die an den Stream auszugebende MSIL-Anweisung.</param>
      <param name="arg" vsli:raw="The numerical argument pushed onto the stream immediately after the instruction.">Das unmittelbar hinter der Anweisung in den Stream eingefügte numerische Argument.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)">
      <summary vsli:raw="Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.">Fügt die angegebene Anweisung und das numerische Argument in den MSIL-Anweisungsstream (Microsoft Intermediate Language) ein.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream.">Die an den Stream auszugebende MSIL-Anweisung.</param>
      <param name="arg" vsli:raw="The numerical argument pushed onto the stream immediately after the instruction.">Das unmittelbar hinter der Anweisung in den Stream eingefügte numerische Argument.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)">
      <summary vsli:raw="Puts the specified instruction and metadata token for the specified constructor onto the Microsoft intermediate language (MSIL) stream of instructions.">Fügt die angegebene Anweisung und das Metadatentoken für den angegebenen Konstruktor in den MSIL-Anweisungsstream (Microsoft Intermediate Language) ein.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">Die MSIL-Anweisung, die in den Datenstrom ausgegeben werden soll.</param>
      <param name="con" vsli:raw="A &lt;see langword=&quot;ConstructorInfo&quot; /&gt; representing a constructor.">Eine <see langword="ConstructorInfo" />, die einen Konstruktor darstellt.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;. This exception is new in the .NET Framework 4.">
        <paramref name="con" /> ist <see langword="null" />. Diese Ausnahme ist in .NET Framework 4 neu.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">
      <summary vsli:raw="Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream and leaves space to include a label when fixes are done.">Fügt die angegebene Anweisung in den MSIL-Stream (Microsoft Intermediate Language) ein und lässt für den Fall von Korrekturen Platz zum Einfügen einer Sprungmarke.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">Die MSIL-Anweisung, die in den Datenstrom ausgegeben werden soll.</param>
      <param name="label" vsli:raw="The label to which to branch from this location.">Die Sprungmarke, zu der von dieser Position aus verzweigt werden soll.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])">
      <summary vsli:raw="Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream and leaves space to include a label when fixes are done.">Fügt die angegebene Anweisung in den MSIL-Stream (Microsoft Intermediate Language) ein und lässt für den Fall von Korrekturen Platz zum Einfügen einer Sprungmarke.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">Die MSIL-Anweisung, die in den Datenstrom ausgegeben werden soll.</param>
      <param name="labels" vsli:raw="The array of label objects to which to branch from this location. All of the labels will be used.">Das Array von Sprungmarkenobjekten, zu denen von dieser Position aus verzweigt werden soll. Es werden alle Sprungmarken verwendet.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;. This exception is new in the .NET Framework 4.">
        <paramref name="con" /> ist <see langword="null" />. Diese Ausnahme ist in .NET Framework 4 neu.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)">
      <summary vsli:raw="Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the index of the given local variable.">Fügt die angegebene Anweisung in den MSIL-Stream (Microsoft Intermediate Language) ein, gefolgt vom Index der angegebenen lokalen Variable.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">Die MSIL-Anweisung, die in den Datenstrom ausgegeben werden soll.</param>
      <param name="local" vsli:raw="A local variable.">Eine lokale Variable.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The parent method of the &lt;paramref name=&quot;local&quot; /&gt; parameter does not match the method associated with this &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt;.">Die übergeordnete Methode des <paramref name="local" />-Parameters stimmt nicht mit der Methode überein, die diesem <see cref="T:System.Reflection.Emit.ILGenerator" /> zugeordnet ist.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;local&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="local" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;opcode&quot; /&gt; is a single-byte instruction, and &lt;paramref name=&quot;local&quot; /&gt; represents a local variable with an index greater than &lt;see langword=&quot;Byte.MaxValue&quot; /&gt;.">
        <paramref name="opcode" /> ist eine Einzelbyteanweisung, und <paramref name="local" /> stellt eine lokale Variable mit einem Index dar, der größer als <see langword="Byte.MaxValue" /> ist.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)">
      <summary vsli:raw="Puts the specified instruction and a signature token onto the Microsoft intermediate language (MSIL) stream of instructions.">Fügt die angegebene Anweisung und ein Signaturtoken in den MSIL-Anweisungsstream (Microsoft Intermediate Language) ein.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">Die MSIL-Anweisung, die in den Datenstrom ausgegeben werden soll.</param>
      <param name="signature" vsli:raw="A helper for constructing a signature token.">Ein Helper zum Erstellen eines Signaturtokens.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;signature&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="signature" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">
      <summary vsli:raw="Puts the specified instruction and metadata token for the specified field onto the Microsoft intermediate language (MSIL) stream of instructions.">Fügt die angegebene Anweisung und das Metadatentoken für das angegebene Feld in den MSIL-Anweisungsstream (Microsoft Intermediate Language) ein.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">Die MSIL-Anweisung, die in den Datenstrom ausgegeben werden soll.</param>
      <param name="field" vsli:raw="A &lt;see langword=&quot;FieldInfo&quot; /&gt; representing a field.">Eine <see langword="FieldInfo" />, die ein Feld darstellt.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">
      <summary vsli:raw="Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given method.">Fügt die angegebene Anweisung in den MSIL-Stream (Microsoft Intermediate Language) ein, gefolgt vom Metadatentoken für die angegebene Methode.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">Die MSIL-Anweisung, die in den Datenstrom ausgegeben werden soll.</param>
      <param name="meth" vsli:raw="A &lt;see langword=&quot;MethodInfo&quot; /&gt; representing a method.">Eine <see langword="MethodInfo" />, die eine Methode darstellt.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;meth&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="meth" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;meth&quot; /&gt; is a generic method for which the &lt;see cref=&quot;P:System.Reflection.MethodBase.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="meth" /> ist eine generische Methode, für die die <see cref="P:System.Reflection.MethodBase.IsGenericMethodDefinition" />-Eigenschaft <see langword="false" /> ist.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.SByte)">
      <summary vsli:raw="Puts the specified instruction and character argument onto the Microsoft intermediate language (MSIL) stream of instructions.">Fügt die angegebene Anweisung und das Zeichenargument in den MSIL-Anweisungsstream (Microsoft Intermediate Language) ein.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream.">Die an den Stream auszugebende MSIL-Anweisung.</param>
      <param name="arg" vsli:raw="The character argument pushed onto the stream immediately after the instruction.">Das unmittelbar hinter der Anweisung in den Stream eingefügte Zeichenargument.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)">
      <summary vsli:raw="Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.">Fügt die angegebene Anweisung und das numerische Argument in den MSIL-Anweisungsstream (Microsoft Intermediate Language) ein.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream.">Die an den Stream auszugebende MSIL-Anweisung.</param>
      <param name="arg" vsli:raw="The &lt;see cref=&quot;T:System.Single&quot; /&gt; argument pushed onto the stream immediately after the instruction.">Das unmittelbar hinter der Anweisung in den Stream eingefügte <see langword="Single" />-Argument.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.String)">
      <summary vsli:raw="Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given string.">Fügt die angegebene Anweisung in den MSIL-Stream (Microsoft Intermediate Language) ein, gefolgt vom Metadatentoken für die angegebene Zeichenfolge.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">Die MSIL-Anweisung, die in den Datenstrom ausgegeben werden soll.</param>
      <param name="str" vsli:raw="The &lt;see langword=&quot;String&quot; /&gt; to be emitted.">Der auszugebende <see langword="String" />.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">
      <summary vsli:raw="Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given type.">Fügt die angegebene Anweisung in den MSIL-Stream (Microsoft Intermediate Language) ein, gefolgt vom Metadatentoken für den angegebenen Typ.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream.">Die an den Stream auszugebende MSIL-Anweisung.</param>
      <param name="cls" vsli:raw="A &lt;see langword=&quot;Type&quot; /&gt;.">Ein <see langword="Type" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;cls&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="cls" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">
      <summary vsli:raw="Puts a &lt;see langword=&quot;call&quot; /&gt; or &lt;see langword=&quot;callvirt&quot; /&gt; instruction onto the Microsoft intermediate language (MSIL) stream to call a &lt;see langword=&quot;varargs&quot; /&gt; method.">Fügt eine <see langword="call" />- oder <see langword="callvirt" />-Anweisung in den MSIL-Datenstrom (Microsoft Intermediate Language) ein, um eine <see langword="varargs" />-Methode aufzurufen.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream. Must be &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Call&quot; /&gt;, &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Callvirt&quot; /&gt;, or &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Newobj&quot; /&gt;.">Die MSIL-Anweisung, die in den Datenstrom ausgegeben werden soll. Muss <see cref="F:System.Reflection.Emit.OpCodes.Call" />, <see cref="F:System.Reflection.Emit.OpCodes.Callvirt" /> oder <see cref="F:System.Reflection.Emit.OpCodes.Newobj" /> sein.</param>
      <param name="methodInfo" vsli:raw="The &lt;see langword=&quot;varargs&quot; /&gt; method to be called.">Ruft die <see langword="varargs" />-Methode ab, die aufgerufen werden soll.</param>
      <param name="optionalParameterTypes" vsli:raw="The types of the optional arguments if the method is a &lt;see langword=&quot;varargs&quot; /&gt; method; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">Die Typen der optionalen Argumente, wenn die Methode eine <see langword="varargs" />-Methode ist, andernfalls <see langword="null" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;opcode&quot; /&gt; does not specify a method call.">
        <paramref name="opcode" /> gibt keinen Methodenaufruf an.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;methodInfo&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="methodInfo" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The calling convention for the method is not &lt;see langword=&quot;varargs&quot; /&gt;, but optional parameter types are supplied. This exception is thrown in the .NET Framework versions 1.0 and 1.1, In subsequent versions, no exception is thrown.">Die Aufrufkonvention für die Methode ist nicht <see langword="varargs" />, aber es werden optionale Parametertypen bereitgestellt. Diese Ausnahme wird in .NET Framework, Version 1.0 und Version 1.1, ausgelöst. In späteren Versionen wird keine Ausnahme ausgelöst.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])">
      <summary vsli:raw="Puts a &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Calli&quot; /&gt; instruction onto the Microsoft intermediate language (MSIL) stream, specifying a managed calling convention for the indirect call.">Fügt eine <see cref="F:System.Reflection.Emit.OpCodes.Calli" />-Anweisung in den MSIL-Stream (Microsoft Intermediate Language) ein, die eine verwaltete Aufrufkonvention für den indirekten Aufruf angibt.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream. Must be &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Calli&quot; /&gt;.">Die MSIL-Anweisung, die in den Datenstrom ausgegeben werden soll. Dieser Wert muss <see cref="F:System.Reflection.Emit.OpCodes.Calli" /> sein.</param>
      <param name="callingConvention" vsli:raw="The managed calling convention to be used.">Die zu verwendende verwaltete Aufrufkonvention.</param>
      <param name="returnType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the result.">Der <see cref="T:System.Type" /> des Ergebnisses.</param>
      <param name="parameterTypes" vsli:raw="The types of the required arguments to the instruction.">Die Typen der für die Anweisung erforderlichen Argumente.</param>
      <param name="optionalParameterTypes" vsli:raw="The types of the optional arguments for &lt;see langword=&quot;varargs&quot; /&gt; calls.">Die Typen der optionalen Argumente für <see langword="varargs" />-Aufrufe.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;optionalParameterTypes&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt;, but &lt;paramref name=&quot;callingConvention&quot; /&gt; does not include the &lt;see cref=&quot;F:System.Reflection.CallingConventions.VarArgs&quot; /&gt; flag.">
        <paramref name="optionalParameterTypes" /> ist <see langword="null" />, aber <paramref name="callingConvention" /> schließt das <see cref="F:System.Reflection.CallingConventions.VarArgs" />-Flag nicht ein.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])">
      <summary vsli:raw="Puts a &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Calli&quot; /&gt; instruction onto the Microsoft intermediate language (MSIL) stream, specifying an unmanaged calling convention for the indirect call.">Fügt eine <see cref="F:System.Reflection.Emit.OpCodes.Calli" />-Anweisung in den MSIL-Stream (Microsoft Intermediate Language) ein, die eine nicht verwaltete Aufrufkonvention für den indirekten Aufruf angibt.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream. Must be &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Calli&quot; /&gt;.">Die MSIL-Anweisung, die in den Datenstrom ausgegeben werden soll. Dieser Wert muss <see cref="F:System.Reflection.Emit.OpCodes.Calli" /> sein.</param>
      <param name="unmanagedCallConv" vsli:raw="The unmanaged calling convention to be used.">Die zu verwendende nicht verwaltete Aufrufkonvention.</param>
      <param name="returnType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the result.">Der <see cref="T:System.Type" /> des Ergebnisses.</param>
      <param name="parameterTypes" vsli:raw="The types of the required arguments to the instruction.">Die Typen der für die Anweisung erforderlichen Argumente.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)">
      <summary vsli:raw="Emits the Microsoft intermediate language (MSIL) necessary to call &lt;see cref=&quot;Overload:System.Console.WriteLine&quot; /&gt; with the given local variable.">Gibt die für einen Aufruf von <see cref="Overload:System.Console.WriteLine" /> mit der angegebenen lokalen Variable benötigte Microsoft Intermediate Language (MSIL) aus.</summary>
      <param name="localBuilder" vsli:raw="The local variable whose value is to be written to the console.">Die lokale Variable, deren Wert in der Konsole ausgegeben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The type of &lt;paramref name=&quot;localBuilder&quot; /&gt; is &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.Emit.EnumBuilder&quot; /&gt;, which are not supported.  &#xA;  &#xA; -or-  &#xA;  &#xA; There is no overload of &lt;see cref=&quot;Overload:System.Console.WriteLine&quot; /&gt; that accepts the type of &lt;paramref name=&quot;localBuilder&quot; /&gt;.">Der Typ von <paramref name="localBuilder" /> ist <see cref="T:System.Reflection.Emit.TypeBuilder" /> oder <see cref="T:System.Reflection.Emit.EnumBuilder" />, die nicht unterstützt werden.
- oder -
Es gibt keine Überladung von <see cref="Overload:System.Console.WriteLine" />, die den Typ von <paramref name="localBuilder" /> akzeptiert.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;localBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="localBuilder" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)">
      <summary vsli:raw="Emits the Microsoft intermediate language (MSIL) necessary to call &lt;see cref=&quot;Overload:System.Console.WriteLine&quot; /&gt; with the given field.">Gibt die für einen Aufruf von <see cref="Overload:System.Console.WriteLine" /> mit dem angegebenen Feld benötigte Microsoft Intermediate Language (MSIL) aus.</summary>
      <param name="fld" vsli:raw="The field whose value is to be written to the console.">Das Feld, dessen Wert in der Konsole ausgegeben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There is no overload of the &lt;see cref=&quot;Overload:System.Console.WriteLine&quot; /&gt; method that accepts the type of the specified field.">Es ist keine Überladung der <see cref="Overload:System.Console.WriteLine" />-Methode vorhanden, die den Typ des angegebenen Felds akzeptiert.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;fld&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="fld" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The type of the field is &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.Emit.EnumBuilder&quot; /&gt;, which are not supported.">Der Feldtyp ist <see cref="T:System.Reflection.Emit.TypeBuilder" /> oder <see cref="T:System.Reflection.Emit.EnumBuilder" />. Beide Typen werden nicht unterstützt.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.String)">
      <summary vsli:raw="Emits the Microsoft intermediate language (MSIL) to call &lt;see cref=&quot;Overload:System.Console.WriteLine&quot; /&gt; with a string.">Gibt die Microsoft Intermediate Language (MSIL) für einen Aufruf von <see cref="Overload:System.Console.WriteLine" /> mit einer Zeichenfolge aus.</summary>
      <param name="value" vsli:raw="The string to be printed.">Die auszugebende Zeichenfolge.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EndExceptionBlock">
      <summary vsli:raw="Ends an exception block.">Beendet einen Ausnahmeblock.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The end exception block occurs in an unexpected place in the code stream.">Das Ende des Ausnahmeblocks tritt an einer unerwarteten Stelle im Codestream auf.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The Microsoft intermediate language (MSIL) being generated is not currently in an exception block.">Die Microsoft Intermediate Language (MSIL), die generiert wird, befindet sich derzeit nicht in einem Ausnahmeblock.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EndScope">
      <summary vsli:raw="Ends a lexical scope.">Beendet einen lexikalischen Gültigkeitsbereich.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; belongs to a &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt;.">Dieser <see cref="T:System.Reflection.Emit.ILGenerator" /> gehört zu einer <see cref="T:System.Reflection.Emit.DynamicMethod" />.</exception>
    </member>
    <member name="P:System.Reflection.Emit.ILGenerator.ILOffset">
      <summary vsli:raw="Gets the current offset, in bytes, in the Microsoft intermediate language (MSIL) stream that is being emitted by the &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt;.">Ruft den aktuellen Offset in Bytes im MSIL-Datenstrom (Microsoft Intermediate Language) ab, der vom <see cref="T:System.Reflection.Emit.ILGenerator" /> ausgegeben wird.</summary>
      <returns vsli:raw="The offset in the MSIL stream at which the next instruction will be emitted.">Der Offset im MSIL-Datenstrom, bei dem die nächste Anweisung ausgegeben wird.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)">
      <summary vsli:raw="Marks the Microsoft intermediate language (MSIL) stream's current position with the given label.">Markiert die aktuelle Position des MSIL-Streams (Microsoft Intermediate Language) mit der angegebenen Sprungmarke.</summary>
      <param name="loc" vsli:raw="The label for which to set an index.">Die Sprungmarke, für die ein Index festzulegen ist.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;loc&quot; /&gt; represents an invalid index into the label array.  &#xA;  &#xA; -or-  &#xA;  &#xA; An index for &lt;paramref name=&quot;loc&quot; /&gt; has already been defined.">
        <paramref name="loc" /> stellt einen unzulässigen Index im Sprungmarkenarray dar.
- oder -
Es wurde bereits ein Index für <paramref name="loc" /> definiert.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.ThrowException(System.Type)">
      <summary vsli:raw="Emits an instruction to throw an exception.">Gibt eine Anweisung zum Auslösen einer Ausnahme aus.</summary>
      <param name="excType" vsli:raw="The class of the type of exception to throw.">Die Klasse für den Typ der auszulösenden Ausnahme.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;excType&quot; /&gt; is not the &lt;see cref=&quot;T:System.Exception&quot; /&gt; class or a derived class of &lt;see cref=&quot;T:System.Exception&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type does not have a parameterless constructor.">
        <paramref name="excType" /> ist nicht die <see cref="T:System.Exception" />-Klasse oder eine von <see cref="T:System.Exception" /> abgeleitete Klasse.
- oder -
Der Typ weist keinen parameterlosen Konstruktor auf.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;excType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="excType" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)">
      <summary vsli:raw="Specifies the namespace to be used in evaluating locals and watches for the current active lexical scope.">Gibt den Namespace an, der zur Auswertung der lokalen Variablen und Überwachungen für den derzeit aktiven lexikalischen Gültigkeitsbereich verwendet werden soll.</summary>
      <param name="usingNamespace" vsli:raw="The namespace to be used in evaluating locals and watches for the current active lexical scope.">Der Namespace, der zur Auswertung der lokalen Variablen und Überwachungen für den derzeit aktiven lexikalischen Gültigkeitsbereich verwendet werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="Length of &lt;paramref name=&quot;usingNamespace&quot; /&gt; is zero.">Die Länge von <paramref name="usingNamespace" /> ist 0 (null).</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;usingNamespace&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="usingNamespace" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="This &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; belongs to a &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt;.">Dieser <see cref="T:System.Reflection.Emit.ILGenerator" /> gehört zu einer <see cref="T:System.Reflection.Emit.DynamicMethod" />.</exception>
    </member>
    <member name="T:System.Reflection.Emit.Label">
      <summary vsli:raw="Represents a label in the instruction stream. &lt;see langword=&quot;Label&quot; /&gt; is used in conjunction with the &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; class.">Stellt eine Sprungmarke im Anweisungsstream dar. <see langword="Label" /> wird in Verbindung mit der <see cref="T:System.Reflection.Emit.ILGenerator" />-Klasse verwendet.</summary>
    </member>
    <member name="M:System.Reflection.Emit.Label.Equals(System.Object)">
      <summary vsli:raw="Checks if the given object is an instance of &lt;see langword=&quot;Label&quot; /&gt; and is equal to this instance.">Überprüft, ob das angegebene Objekt eine Instanz von <see langword="Label" /> und gleich dieser Instanz ist.</summary>
      <param name="obj" vsli:raw="The object to compare with this &lt;see langword=&quot;Label&quot; /&gt; instance.">Das mit dieser <see langword="Label" />-Instanz zu vergleichende Objekt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is an instance of &lt;see langword=&quot;Label&quot; /&gt; and is equal to this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <paramref name="obj" /> eine Instanz von <see langword="Label" /> und gleich diesem Objekt ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.Label.Equals(System.Reflection.Emit.Label)">
      <summary vsli:raw="Indicates whether the current instance is equal to the specified &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt;.">Gibt an, ob die aktuelle Instanz und der angegebene <see cref="T:System.Reflection.Emit.Label" /> gleich sind.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; to compare to the current instance.">Die Struktur <see cref="T:System.Reflection.Emit.Label" />, die mit der aktuellen Instanz verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of &lt;paramref name=&quot;obj&quot; /&gt; is equal to the value of the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Wert von <paramref name="obj" /> dem Wert der aktuellen Instanz entspricht, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.Label.GetHashCode">
      <summary vsli:raw="Generates a hash code for this instance.">Generiert einen Hashcode für diese Instanz.</summary>
      <returns vsli:raw="A hash code for this instance.">Ein Hashcode für diese Instanz.</returns>
    </member>
    <member name="M:System.Reflection.Emit.Label.op_Equality(System.Reflection.Emit.Label,System.Reflection.Emit.Label)">
      <summary vsli:raw="Indicates whether two &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; structures are equal.">Gibt an, ob zwei <see cref="T:System.Reflection.Emit.Label" />-Strukturen gleich sind.</summary>
      <param name="a" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; to compare to &lt;paramref name=&quot;b&quot; /&gt;.">Das <see cref="T:System.Reflection.Emit.Label" />, das mit <paramref name="b" /> verglichen werden soll.</param>
      <param name="b" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; to compare to &lt;paramref name=&quot;a&quot; /&gt;.">Das <see cref="T:System.Reflection.Emit.Label" />, das mit <paramref name="a" /> verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;a&quot; /&gt; is equal to &lt;paramref name=&quot;b&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <paramref name="a" /> und <paramref name="b" /> gleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.Label.op_Inequality(System.Reflection.Emit.Label,System.Reflection.Emit.Label)">
      <summary vsli:raw="Indicates whether two &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; structures are not equal.">Gibt an, ob zwei <see cref="T:System.Reflection.Emit.Label" />-Strukturen ungleich sind.</summary>
      <param name="a" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; to compare to &lt;paramref name=&quot;b&quot; /&gt;.">Das <see cref="T:System.Reflection.Emit.Label" />, das mit <paramref name="b" /> verglichen werden soll.</param>
      <param name="b" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; to compare to &lt;paramref name=&quot;a&quot; /&gt;.">Das <see cref="T:System.Reflection.Emit.Label" />, das mit <paramref name="a" /> verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;a&quot; /&gt; is not equal to &lt;paramref name=&quot;b&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <paramref name="a" /> und <paramref name="b" /> ungleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.Reflection.Emit.LocalBuilder">
      <summary vsli:raw="Represents a local variable within a method or constructor.">Stellt eine lokale Variable in einer Methode oder einem Konstruktor dar.</summary>
    </member>
    <member name="P:System.Reflection.Emit.LocalBuilder.IsPinned">
      <summary vsli:raw="Gets a value indicating whether the object referred to by the local variable is pinned in memory.">Ruft einen Wert ab, der angibt, ob das Objekt, auf das die lokale Variable verweist, im Arbeitsspeicher fixiert ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object referred to by the local variable is pinned in memory; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das Objekt, auf das die lokale Variable verweist, im Arbeitsspeicher fixiert ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.LocalBuilder.LocalIndex">
      <summary vsli:raw="Gets the zero-based index of the local variable within the method body.">Ruft den nullbasierten Index der lokalen Variable innerhalb des Methodentextes ab.</summary>
      <returns vsli:raw="An integer value that represents the order of declaration of the local variable within the method body.">Ein ganzzahliger Wert, der die Reihenfolge der Deklaration der lokalen Variablen innerhalb des Methodentexts darstellt.</returns>
    </member>
    <member name="P:System.Reflection.Emit.LocalBuilder.LocalType">
      <summary vsli:raw="Gets the type of the local variable.">Ruft den Typ der lokalen Variablen ab.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the local variable.">Der <see cref="T:System.Type" /> der lokalen Variablen.</returns>
    </member>
    <member name="T:System.Reflection.Emit.ParameterBuilder">
      <summary vsli:raw="Creates or associates parameter information.">Erstellt Parameterinformationen oder ordnet diese zu.</summary>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.Attributes">
      <summary vsli:raw="Retrieves the attributes for this parameter.">Ruft die Attribute für diesen Parameter ab.</summary>
      <returns vsli:raw="Read-only. Retrieves the attributes for this parameter.">Schreibgeschützt. Ruft die Attribute für diesen Parameter ab.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.IsIn">
      <summary vsli:raw="Retrieves whether this is an input parameter.">Ruft ab, ob es sich um einen Eingabeparameter handelt.</summary>
      <returns vsli:raw="Read-only. Retrieves whether this is an input parameter.">Schreibgeschützt. Ruft ab, ob es sich um einen Eingabeparameter handelt.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.IsOptional">
      <summary vsli:raw="Retrieves whether this parameter is optional.">Ruft ab, ob dieser Parameter optional ist.</summary>
      <returns vsli:raw="Read-only. Specifies whether this parameter is optional.">Schreibgeschützt. Gibt an, ob dieser Parameter optional ist.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.IsOut">
      <summary vsli:raw="Retrieves whether this parameter is an output parameter.">Ruft ab, ob es sich bei diesem Parameter um einen Ausgabeparameter handelt.</summary>
      <returns vsli:raw="Read-only. Retrieves whether this parameter is an output parameter.">Schreibgeschützt. Ruft ab, ob es sich bei diesem Parameter um einen Ausgabeparameter handelt.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.Name">
      <summary vsli:raw="Retrieves the name of this parameter.">Ruft den Namen dieses Parameters ab.</summary>
      <returns vsli:raw="Read-only. Retrieves the name of this parameter.">Schreibgeschützt. Ruft den Namen dieses Parameters ab.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.Position">
      <summary vsli:raw="Retrieves the signature position for this parameter.">Ruft die Signaturposition für diesen Parameter ab.</summary>
      <returns vsli:raw="Read-only. Retrieves the signature position for this parameter.">Schreibgeschützt. Ruft die Signaturposition für diesen Parameter ab.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ParameterBuilder.SetConstant(System.Object)">
      <summary vsli:raw="Sets the default value of the parameter.">Legt den Standardwert des Parameters fest.</summary>
      <param name="defaultValue" vsli:raw="The default value of this parameter.">Der Standardwert dieses Parameters.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The parameter is not one of the supported types.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of &lt;paramref name=&quot;defaultValue&quot; /&gt; does not match the type of the parameter.  &#xA;  &#xA; -or-  &#xA;  &#xA; The parameter is of type &lt;see cref=&quot;T:System.Object&quot; /&gt; or other reference type, &lt;paramref name=&quot;defaultValue&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt;, and the value cannot be assigned to the reference type.">Die Parameter weist keinen unterstützten Typ auf.
- oder -
Der Typ von <paramref name="defaultValue" /> entspricht nicht dem Typ der Parameters.
- oder -
Der Parameter weist den Typ <see cref="T:System.Object" /> oder einen anderen Verweistyp auf, <paramref name="defaultValue" /> ist nicht <see langword="null" />, und der Wert kann nicht dem Verweistyp zugewiesen werden.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Set a custom attribute using a specified custom attribute blob.">Legt ein benutzerdefiniertes Attribut mithilfe eines angegebenen benutzerdefinierten Attribut-BLOBs fest.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">Der Konstruktor für das benutzerdefinierte Attribut.</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">Ein Byte-BLOB, das die Attribute darstellt.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> oder <paramref name="binaryAttribute" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Set a custom attribute using a custom attribute builder.">Legt ein benutzerdefiniertes Attribut mithilfe eines benutzerdefinierten Attribut-Generators fest.</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to define the custom attribute.">Eine Instanz einer Hilfsklasse zum Definieren des benutzerdefinierten Attributs.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> ist <see langword="null" />.</exception>
    </member>
    <member name="T:System.Reflection.Emit.SignatureHelper">
      <summary vsli:raw="Provides methods for building signatures.">Stellt Methoden zum Erstellen von Signaturen bereit.</summary>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type)">
      <summary vsli:raw="Adds an argument to the signature.">Fügt der Signatur ein Argument hinzu.</summary>
      <param name="clsArgument" vsli:raw="The type of the argument.">Der Typ des Arguments.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The signature has already been finished.">Die Signatur wurde bereits fertiggestellt.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;clsArgument&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="clsArgument" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Boolean)">
      <summary vsli:raw="Adds an argument of the specified type to the signature, specifying whether the argument is pinned.">Fügt der Signatur ein Argument vom angegebenen Typ hinzu und gibt an, ob das Argument fixiert ist.</summary>
      <param name="argument" vsli:raw="The argument type.">Der Argumenttyp.</param>
      <param name="pinned" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the argument is pinned; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das Argument fixiert ist, andernfalls <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;argument&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="argument" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Type[],System.Type[])">
      <summary vsli:raw="Adds an argument to the signature, with the specified custom modifiers.">Fügt der Signatur ein Argument mit den angegebenen benutzerdefinierten Modifizierern hinzu.</summary>
      <param name="argument" vsli:raw="The argument type.">Der Argumenttyp.</param>
      <param name="requiredCustomModifiers" vsli:raw="An array of types representing the required custom modifiers for the argument, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the argument has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Ein Array von Typen, die die erforderlichen benutzerdefinierten Modifizierer für das Argument darstellen, z. B. <see cref="T:System.Runtime.CompilerServices.IsConst" /> oder <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. Wenn das Argument über keine erforderlichen benutzerdefinierten Modifizierer verfügt, geben Sie <see langword="null" /> an.</param>
      <param name="optionalCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers for the argument, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the argument has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Ein Array von Typen, die die optionalen benutzerdefinierten Modifizierer für das Argument darstellen, z. B. <see cref="T:System.Runtime.CompilerServices.IsConst" /> oder <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. Wenn das Argument über keine optionalen benutzerdefinierten Modifizierer verfügt, geben Sie <see langword="null" /> an.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;argument&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;requiredCustomModifiers&quot; /&gt; or &lt;paramref name=&quot;optionalCustomModifiers&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="argument" /> ist <see langword="null" />.
- oder -
Ein Element von <paramref name="requiredCustomModifiers" /> oder <paramref name="optionalCustomModifiers" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The signature has already been finished.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an array type.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an open generic type. That is, the &lt;see cref=&quot;P:System.Type.ContainsGenericParameters&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt; for the custom modifier.">Die Signatur wurde bereits fertiggestellt.
- oder -
Einer der angegebenen benutzerdefinierten Modifizierer ist ein Arraytyp.
- oder -
Einer der angegebenen benutzerdefinierten Modifizierer ist ein offener generischer Typ. Das heißt, die <see cref="P:System.Type.ContainsGenericParameters" />-Eigenschaft ist für den benutzerdefinierten Modifizierer <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArguments(System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Adds a set of arguments to the signature, with the specified custom modifiers.">Fügt der Signatur einen Satz von Argumenten mit den angegebenen benutzerdefinierten Modifizierern hinzu.</summary>
      <param name="arguments" vsli:raw="The types of the arguments to be added.">Die Typen der hinzuzufügenden Argumente.</param>
      <param name="requiredCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding argument, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If a particular argument has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the arguments have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Ein Array mit Arrays von Typen. Jedes Array von Typen stellt die erforderlichen benutzerdefinierten Modifizierer für das entsprechende Argument dar, z. B. <see cref="T:System.Runtime.CompilerServices.IsConst" /> oder <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. Wenn ein bestimmtes Argument über keine erforderlichen benutzerdefinierten Modifizierer verfügt, geben Sie anstelle eines Arrays von Typen <see langword="null" /> an. Wenn keines der Argumente über erforderliche benutzerdefinierte Modifizierer verfügt, geben Sie anstelle eines Arrays von Arrays <see langword="null" /> an.</param>
      <param name="optionalCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding argument, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If a particular argument has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the arguments have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Ein Array mit Arrays von Typen. Jedes Array von Typen stellt die optionalen benutzerdefinierten Modifizierer für das entsprechende Argument dar, z. B. <see cref="T:System.Runtime.CompilerServices.IsConst" /> oder <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. Wenn ein bestimmtes Argument über keine optionalen benutzerdefinierten Modifizierer verfügt, geben Sie anstelle eines Arrays von Typen <see langword="null" /> an. Wenn keines der Argumente über optionale benutzerdefinierte Modifizierer verfügt, geben Sie anstelle eines Arrays von Arrays <see langword="null" /> an.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="An element of &lt;paramref name=&quot;arguments&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is &lt;see langword=&quot;null&quot; /&gt;. (However, &lt;see langword=&quot;null&quot; /&gt; can be specified for the array of custom modifiers for any argument.)">Ein Element von <paramref name="arguments" /> ist <see langword="null" />.
- oder -
Einer der angegebenen benutzerdefinierten Modifizierer ist <see langword="null" />. (<see langword="null" /> kann aber auch für das Array von benutzerdefinierten Modifizierern für jedes beliebige Argument angegeben werden.)</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The signature has already been finished.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an array type.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an open generic type. That is, the &lt;see cref=&quot;P:System.Type.ContainsGenericParameters&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt; for the custom modifier.  &#xA;  &#xA; -or-  &#xA;  &#xA; The size of &lt;paramref name=&quot;requiredCustomModifiers&quot; /&gt; or &lt;paramref name=&quot;optionalCustomModifiers&quot; /&gt; does not equal the size of &lt;paramref name=&quot;arguments&quot; /&gt;.">Die Signatur wurde bereits fertiggestellt.
- oder -
Einer der angegebenen benutzerdefinierten Modifizierer ist ein Arraytyp.

oder -
Einer der angegebenen benutzerdefinierten Modifizierer ist ein offener generischer Typ. Das heißt, die <see cref="P:System.Type.ContainsGenericParameters" />-Eigenschaft ist für den benutzerdefinierten Modifizierer <see langword="true" />.

- oder -
Die Größe von <paramref name="requiredCustomModifiers" /> oder <paramref name="optionalCustomModifiers" /> entspricht nicht die Größe von <paramref name="arguments" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddSentinel">
      <summary vsli:raw="Marks the end of a vararg fixed part. This is only used if the caller is creating a vararg signature call site.">Markiert das Ende eines festen Teils von Vararg. Dies wird nur verwendet, wenn der Aufrufer eine Vararg-Signaturaufrufsite erstellt.</summary>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.Equals(System.Object)">
      <summary vsli:raw="Checks if this instance is equal to the given object.">Überprüft, ob diese Instanz gleich dem angegebenen Objekt ist.</summary>
      <param name="obj" vsli:raw="The object with which this instance should be compared.">Das Objekt, mit dem diese Instanz verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the given object is a &lt;see langword=&quot;SignatureHelper&quot; /&gt; and represents the same signature; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das angegebene Objekt ein <see langword="SignatureHelper" /> ist und dieselbe Signatur darstellt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetFieldSigHelper(System.Reflection.Module)">
      <summary vsli:raw="Returns a signature helper for a field.">Gibt eine Signaturhilfe für ein Feld zurück.</summary>
      <param name="mod" vsli:raw="The dynamic module that contains the field for which the &lt;see langword=&quot;SignatureHelper&quot; /&gt; is requested.">Das dynamische Modul, das das Feld enthält, für das <see langword="SignatureHelper" /> angefordert wird.</param>
      <returns vsli:raw="The &lt;see langword=&quot;SignatureHelper&quot; /&gt; object for a field.">Das <see langword="SignatureHelper" />-Objekt für ein Feld.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetHashCode">
      <summary vsli:raw="Creates and returns a hash code for this instance.">Erstellt einen Hashcode für diese Instanz und gibt diesen zurück.</summary>
      <returns vsli:raw="The hash code based on the name.">Der auf dem Namen basierende Hash.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper">
      <summary vsli:raw="Returns a signature helper for a local variable.">Gibt eine Signaturhilfe für eine lokale Variable zurück.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; for a local variable.">Ein <see cref="T:System.Reflection.Emit.SignatureHelper" /> für eine lokale Variable.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper(System.Reflection.Module)">
      <summary vsli:raw="Returns a signature helper for a local variable.">Gibt eine Signaturhilfe für eine lokale Variable zurück.</summary>
      <param name="mod" vsli:raw="The dynamic module that contains the local variable for which the &lt;see langword=&quot;SignatureHelper&quot; /&gt; is requested.">Das dynamische Modul, das die lokale Variable enthält, für die <see langword="SignatureHelper" /> angefordert wird.</param>
      <returns vsli:raw="The &lt;see langword=&quot;SignatureHelper&quot; /&gt; object for a local variable.">Das <see langword="SignatureHelper" />-Objekt für eine lokale Variable.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.CallingConventions,System.Type)">
      <summary vsli:raw="Returns a signature helper for a method given the method's calling convention and return type.">Gibt eine Signaturhilfe für eine Methode mit der Aufrufkonvention und dem Rückgabetyp der Methode zurück.</summary>
      <param name="callingConvention" vsli:raw="The calling convention of the method.">Die Aufrufkonvention der Methode.</param>
      <param name="returnType" vsli:raw="The return type of the method, or &lt;see langword=&quot;null&quot; /&gt; for a void return type (&lt;see langword=&quot;Sub&quot; /&gt; procedure in Visual Basic).">Der Rückgabetyp der Methode, oder <see langword="null" /> für einen Void-Rückgabetyp (<see langword="Sub" />-Prozedur in Visual Basic).</param>
      <returns vsli:raw="The &lt;see langword=&quot;SignatureHelper&quot; /&gt; object for a method.">Das <see langword="SignatureHelper" />-Objekt für eine Methode.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type)">
      <summary vsli:raw="Returns a signature helper for a method given the method's module, calling convention, and return type.">Gibt eine Signaturhilfe für eine Methode zurück, wenn Modul, Aufrufkonvention und Rückgabetyp der Methode übergeben werden.</summary>
      <param name="mod" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt; that contains the method for which the &lt;see langword=&quot;SignatureHelper&quot; /&gt; is requested.">Der <see cref="T:System.Reflection.Emit.ModuleBuilder" />, der die Methode enthält. für die der <see langword="SignatureHelper" /> angefordert wird.</param>
      <param name="callingConvention" vsli:raw="The calling convention of the method.">Die Aufrufkonvention der Methode.</param>
      <param name="returnType" vsli:raw="The return type of the method, or &lt;see langword=&quot;null&quot; /&gt; for a void return type (&lt;see langword=&quot;Sub&quot; /&gt; procedure in Visual Basic).">Der Rückgabetyp der Methode, oder <see langword="null" /> für einen Void-Rückgabetyp (<see langword="Sub" />-Prozedur in Visual Basic).</param>
      <returns vsli:raw="The &lt;see langword=&quot;SignatureHelper&quot; /&gt; object for a method.">Das <see langword="SignatureHelper" />-Objekt für eine Methode.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mod" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is not a &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;.">
        <paramref name="mod" /> ist keine <see cref="T:System.Reflection.Emit.ModuleBuilder" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Type,System.Type[])">
      <summary vsli:raw="Returns a signature helper for a method with a standard calling convention, given the method's module, return type, and argument types.">Gibt eine Signaturhilfe für eine Methode mit einer Standardaufrufkonvention, den Angaben für das Modul, dem Rückgabetyp und den Argumenttypen zurück.</summary>
      <param name="mod" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt; that contains the method for which the &lt;see langword=&quot;SignatureHelper&quot; /&gt; is requested.">Der <see cref="T:System.Reflection.Emit.ModuleBuilder" />, der die Methode enthält. für die der <see langword="SignatureHelper" /> angefordert wird.</param>
      <param name="returnType" vsli:raw="The return type of the method, or &lt;see langword=&quot;null&quot; /&gt; for a void return type (&lt;see langword=&quot;Sub&quot; /&gt; procedure in Visual Basic).">Der Rückgabetyp der Methode, oder <see langword="null" /> für einen Void-Rückgabetyp (<see langword="Sub" />-Prozedur in Visual Basic).</param>
      <param name="parameterTypes" vsli:raw="The types of the arguments of the method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no arguments.">Die Typen der Argumente der Methode oder <see langword="null" />, wenn die Methode über keine Argumente verfügt.</param>
      <returns vsli:raw="The &lt;see langword=&quot;SignatureHelper&quot; /&gt; object for a method.">Das <see langword="SignatureHelper" />-Objekt für eine Methode.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mod" /> ist <see langword="null" />.
- oder -
Ein Element von <paramref name="parameterTypes" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is not a &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;.">
        <paramref name="mod" /> ist keine <see cref="T:System.Reflection.Emit.ModuleBuilder" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Returns a signature helper for a property, given the dynamic module that contains the property, the calling convention, the property type, the property arguments, and custom modifiers for the return type and arguments.">Gibt eine Signaturhilfe für eine Eigenschaft mit dem dynamischen Modul, das die Eigenschaft enthält, der Aufrufkonvention, dem Eigenschaftentyp, den Eigenschaftenargumenten und benutzerdefinierten Modifizierern für den Rückgabetyp und die Argumente zurück.</summary>
      <param name="mod" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt; that contains the property for which the &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; is requested.">Der <see cref="T:System.Reflection.Emit.ModuleBuilder" /> mit der Eigenschaft, für die <see cref="T:System.Reflection.Emit.SignatureHelper" /> angefordert wird.</param>
      <param name="callingConvention" vsli:raw="The calling convention of the property accessors.">Die Aufrufkonvention der Eigenschaftenzugriffsmethoden.</param>
      <param name="returnType" vsli:raw="The property type.">Der Eigenschaftentyp.</param>
      <param name="requiredReturnTypeCustomModifiers" vsli:raw="An array of types representing the required custom modifiers for the return type, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the return type has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Ein Array von Typen, die die erforderlichen benutzerdefinierten Modifizierer für den Rückgabetyp darstellen, z. B. <see cref="T:System.Runtime.CompilerServices.IsConst" /> oder <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. Wenn der Rückgabetyp keine erforderlichen benutzerdefinierten Modifizierer hat, geben Sie <see langword="null" /> an.</param>
      <param name="optionalReturnTypeCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers for the return type, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the return type has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Ein Array von Typen, die die optionalen benutzerdefinierten Modifizierer für den Rückgabetyp darstellen, z. B. <see cref="T:System.Runtime.CompilerServices.IsConst" /> oder <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. Wenn der Rückgabetyp keine optionalen benutzerdefinierten Modifizierer hat, geben Sie <see langword="null" /> an.</param>
      <param name="parameterTypes" vsli:raw="The types of the property's arguments, or &lt;see langword=&quot;null&quot; /&gt; if the property has no arguments.">Die Typen der Argumente der Eigenschaft oder <see langword="null" />, wenn die Eigenschaft über keine Argumente verfügt.</param>
      <param name="requiredParameterTypeCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding argument of the property. If a particular argument has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If the property has no arguments, or if none of the arguments have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Ein Array mit Arrays von Typen. Jedes Array von Typen stellt die erforderlichen benutzerdefinierten Modifizierer für das entsprechende Argument der Eigenschaft dar. Wenn ein bestimmtes Argument über keine erforderlichen benutzerdefinierten Modifizierer verfügt, geben Sie anstelle eines Arrays von Typen <see langword="null" /> an. Wenn die Eigenschaft über keine Argumente oder keines der Argumente über erforderliche benutzerdefinierte Modifizierer verfügt, geben Sie anstelle eines Arrays von Arrays <see langword="null" /> an.</param>
      <param name="optionalParameterTypeCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding argument of the property. If a particular argument has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If the property has no arguments, or if none of the arguments have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Ein Array mit Arrays von Typen. Jedes Array von Typen stellt die optionalen benutzerdefinierten Modifizierer für das entsprechende Argument der Eigenschaft dar. Wenn ein bestimmtes Argument über keine optionalen benutzerdefinierten Modifizierer verfügt, geben Sie anstelle eines Arrays von Typen <see langword="null" /> an. Wenn die Eigenschaft über keine Argumente oder keines der Argumente über optionale benutzerdefinierte Modifizierer verfügt, geben Sie anstelle eines Arrays von Arrays <see langword="null" /> an.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; object for a property.">Das <see cref="T:System.Reflection.Emit.SignatureHelper" />-Objekt für eine Eigenschaft.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is &lt;see langword=&quot;null&quot; /&gt;. (However, &lt;see langword=&quot;null&quot; /&gt; can be specified for the array of custom modifiers for any argument.)">
        <paramref name="mod" /> ist <see langword="null" />.
- oder -
Ein Element von <paramref name="parameterTypes" /> ist <see langword="null" />.

oder -
Einer der angegebenen benutzerdefinierten Modifizierer ist <see langword="null" />. (<see langword="null" /> kann aber auch für das Array von benutzerdefinierten Modifizierern für jedes beliebige Argument angegeben werden.)</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The signature has already been finished.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;mod&quot; /&gt; is not a &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an array type.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an open generic type. That is, the &lt;see cref=&quot;P:System.Type.ContainsGenericParameters&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt; for the custom modifier.  &#xA;  &#xA; -or-  &#xA;  &#xA; The size of &lt;paramref name=&quot;requiredParameterTypeCustomModifiers&quot; /&gt; or &lt;paramref name=&quot;optionalParameterTypeCustomModifiers&quot; /&gt; does not equal the size of &lt;paramref name=&quot;parameterTypes&quot; /&gt;.">Die Signatur wurde bereits fertiggestellt.
- oder -
<paramref name="mod" /> ist keine <see cref="T:System.Reflection.Emit.ModuleBuilder" />.
- oder -
Einer der angegebenen benutzerdefinierten Modifizierer ist ein Arraytyp.

oder -
Einer der angegebenen benutzerdefinierten Modifizierer ist ein offener generischer Typ. Das heißt, die <see cref="P:System.Type.ContainsGenericParameters" />-Eigenschaft ist für den benutzerdefinierten Modifizierer <see langword="true" />.

- oder -
Die Größe von <paramref name="requiredParameterTypeCustomModifiers" /> oder <paramref name="optionalParameterTypeCustomModifiers" /> entspricht nicht die Größe von <paramref name="parameterTypes" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[])">
      <summary vsli:raw="Returns a signature helper for a property, given the dynamic module that contains the property, the property type, and the property arguments.">Gibt eine Signaturhilfe für eine Eigenschaft mit dem dynamischen Modul, das die Eigenschaft enthält, dem Eigenschaftentyp und den Eigenschaftenargumenten zurück.</summary>
      <param name="mod" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt; that contains the property for which the &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; is requested.">Der <see cref="T:System.Reflection.Emit.ModuleBuilder" /> mit der Eigenschaft, für die <see cref="T:System.Reflection.Emit.SignatureHelper" /> angefordert wird.</param>
      <param name="returnType" vsli:raw="The property type.">Der Eigenschaftentyp.</param>
      <param name="parameterTypes" vsli:raw="The argument types, or &lt;see langword=&quot;null&quot; /&gt; if the property has no arguments.">Die Argumenttypen oder <see langword="null" />, wenn die Eigenschaft über keine Argumente verfügt.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; object for a property.">Das <see cref="T:System.Reflection.Emit.SignatureHelper" />-Objekt für eine Eigenschaft.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mod" /> ist <see langword="null" />.
- oder -
Ein Element von <paramref name="parameterTypes" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is not a &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;.">
        <paramref name="mod" /> ist keine <see cref="T:System.Reflection.Emit.ModuleBuilder" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Returns a signature helper for a property, given the dynamic module that contains the property, the property type, the property arguments, and custom modifiers for the return type and arguments.">Gibt eine Signaturhilfe für eine Eigenschaft mit dem dynamischen Modul, das die Eigenschaft enthält, dem Eigenschaftentyp, den Eigenschaftenargumenten und benutzerdefinierten Modifizierern für den Rückgabetyp und die Argumente zurück.</summary>
      <param name="mod" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt; that contains the property for which the &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; is requested.">Der <see cref="T:System.Reflection.Emit.ModuleBuilder" /> mit der Eigenschaft, für die <see cref="T:System.Reflection.Emit.SignatureHelper" /> angefordert wird.</param>
      <param name="returnType" vsli:raw="The property type.">Der Eigenschaftentyp.</param>
      <param name="requiredReturnTypeCustomModifiers" vsli:raw="An array of types representing the required custom modifiers for the return type, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the return type has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Ein Array von Typen, die die erforderlichen benutzerdefinierten Modifizierer für den Rückgabetyp darstellen, z. B. <see cref="T:System.Runtime.CompilerServices.IsConst" /> oder <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. Wenn der Rückgabetyp keine erforderlichen benutzerdefinierten Modifizierer hat, geben Sie <see langword="null" /> an.</param>
      <param name="optionalReturnTypeCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers for the return type, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the return type has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Ein Array von Typen, die die optionalen benutzerdefinierten Modifizierer für den Rückgabetyp darstellen, z. B. <see cref="T:System.Runtime.CompilerServices.IsConst" /> oder <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. Wenn der Rückgabetyp keine optionalen benutzerdefinierten Modifizierer hat, geben Sie <see langword="null" /> an.</param>
      <param name="parameterTypes" vsli:raw="The types of the property's arguments, or &lt;see langword=&quot;null&quot; /&gt; if the property has no arguments.">Die Typen der Argumente der Eigenschaft oder <see langword="null" />, wenn die Eigenschaft über keine Argumente verfügt.</param>
      <param name="requiredParameterTypeCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding argument of the property. If a particular argument has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If the property has no arguments, or if none of the arguments have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Ein Array mit Arrays von Typen. Jedes Array von Typen stellt die erforderlichen benutzerdefinierten Modifizierer für das entsprechende Argument der Eigenschaft dar. Wenn ein bestimmtes Argument über keine erforderlichen benutzerdefinierten Modifizierer verfügt, geben Sie anstelle eines Arrays von Typen <see langword="null" /> an. Wenn die Eigenschaft über keine Argumente oder keines der Argumente über erforderliche benutzerdefinierte Modifizierer verfügt, geben Sie anstelle eines Arrays von Arrays <see langword="null" /> an.</param>
      <param name="optionalParameterTypeCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding argument of the property. If a particular argument has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If the property has no arguments, or if none of the arguments have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Ein Array mit Arrays von Typen. Jedes Array von Typen stellt die optionalen benutzerdefinierten Modifizierer für das entsprechende Argument der Eigenschaft dar. Wenn ein bestimmtes Argument über keine optionalen benutzerdefinierten Modifizierer verfügt, geben Sie anstelle eines Arrays von Typen <see langword="null" /> an. Wenn die Eigenschaft über keine Argumente oder keines der Argumente über optionale benutzerdefinierte Modifizierer verfügt, geben Sie anstelle eines Arrays von Arrays <see langword="null" /> an.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; object for a property.">Das <see cref="T:System.Reflection.Emit.SignatureHelper" />-Objekt für eine Eigenschaft.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is &lt;see langword=&quot;null&quot; /&gt;. (However, &lt;see langword=&quot;null&quot; /&gt; can be specified for the array of custom modifiers for any argument.)">
        <paramref name="mod" /> ist <see langword="null" />.

oder -
Ein Element von <paramref name="parameterTypes" /> ist <see langword="null" />.

oder -
Einer der angegebenen benutzerdefinierten Modifizierer ist <see langword="null" />. (<see langword="null" /> kann aber auch für das Array von benutzerdefinierten Modifizierern für jedes beliebige Argument angegeben werden.)</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The signature has already been finished.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;mod&quot; /&gt; is not a &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an array type.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an open generic type. That is, the &lt;see cref=&quot;P:System.Type.ContainsGenericParameters&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt; for the custom modifier.  &#xA;  &#xA; -or-  &#xA;  &#xA; The size of &lt;paramref name=&quot;requiredParameterTypeCustomModifiers&quot; /&gt; or &lt;paramref name=&quot;optionalParameterTypeCustomModifiers&quot; /&gt; does not equal the size of &lt;paramref name=&quot;parameterTypes&quot; /&gt;.">Die Signatur wurde bereits fertiggestellt.
- oder -
<paramref name="mod" /> ist keine <see cref="T:System.Reflection.Emit.ModuleBuilder" />.
- oder -
Einer der angegebenen benutzerdefinierten Modifizierer ist ein Arraytyp.
- oder -
Einer der angegebenen benutzerdefinierten Modifizierer ist ein offener generischer Typ. Das heißt, die <see cref="P:System.Type.ContainsGenericParameters" />-Eigenschaft ist für den benutzerdefinierten Modifizierer <see langword="true" />.
- oder -
Die Größe von <paramref name="requiredParameterTypeCustomModifiers" /> oder <paramref name="optionalParameterTypeCustomModifiers" /> entspricht nicht die Größe von <paramref name="parameterTypes" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetSignature">
      <summary vsli:raw="Adds the end token to the signature and marks the signature as finished, so no further tokens can be added.">Fügt der Signatur das Endtoken hinzu und markiert die Signatur als fertig gestellt, sodass keine weiteren Token hinzugefügt werden können.</summary>
      <returns vsli:raw="A byte array made up of the full signature.">Ein Bytearray, das aus der vollständigen Signatur besteht.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.ToString">
      <summary vsli:raw="Returns a string representing the signature arguments.">Gibt eine Zeichenfolge zurück, die die Signaturargumente darstellt.</summary>
      <returns vsli:raw="A string representing the arguments of this signature.">Eine Zeichenfolge, die die Argumente dieser Signatur darstellt.</returns>
    </member>
  </members>
</doc>
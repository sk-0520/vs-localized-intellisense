<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Numerics.Vectors</name>
  </assembly>
  <members>
    <member name="T:System.Numerics.Matrix3x2">
      <summary>Stellt eine 3 x 2-Matrix dar.</summary>
    </member>
    <member name="M:System.Numerics.Matrix3x2.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Erstellt eine 4 x 2-Matrix aus den angegebenen Komponenten.</summary>
      <param name="m11">Der Wert, der dem ersten Element in der ersten Zeile zugewiesen wird.</param>
      <param name="m12">Der Wert, der dem zweiten Element in der ersten Zeile zugewiesen wird.</param>
      <param name="m21">Der Wert, der dem ersten Element in der zweiten Zeile zugewiesen wird.</param>
      <param name="m22">Der Wert, der dem zweiten Element in der zweiten Zeile zugewiesen wird.</param>
      <param name="m31">Der Wert, der dem ersten Element in der dritten Zeile zugewiesen wird.</param>
      <param name="m32">Der Wert, der dem zweiten Element in der dritten Zeile zugewiesen wird.</param>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Add(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Addiert zu jedem Element in einer Matrix das entsprechende Element in einer zweiten Matrix.</summary>
      <param name="value1">Die erste Matrix.</param>
      <param name="value2">Die zweite Matrix.</param>
      <returns>Die Matrix, die die addierten Werte von <paramref name="value1" /> und <paramref name="value2" /> enthält.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateRotation(System.Single)">
      <summary>Erstellt eine Rotationsmatrix mithilfe der angegebenen Drehung im Bogenmaß.</summary>
      <param name="radians">Das Ausmaß der Rotation im Bogenmaß.</param>
      <returns>Die Rotationsmatrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateRotation(System.Single,System.Numerics.Vector2)">
      <summary>Erstellt eine Rotationsmatrix und verwendet dazu die angegebene Rotation im Bogenmaß und einen Mittelpunkt.</summary>
      <param name="radians">Das Ausmaß der Rotation im Bogenmaß.</param>
      <param name="centerPoint">Der Mittelpunkt.</param>
      <returns>Die Rotationsmatrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Numerics.Vector2)">
      <summary>Erstellt eine Skalierungsmatrix aus der angegebenen Vektorskala.</summary>
      <param name="scales">Die zu verwendende Skala.</param>
      <returns>Die Skalierungsmatrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Erstellt eine Skalierungsmatrix aus dem angegebenen Vektormaßstab mit einem Versatz gegenüber dem angegebenen Mittelpunkt.</summary>
      <param name="scales">Die zu verwendende Skala.</param>
      <param name="centerPoint">Der Mittelpunktversatz.</param>
      <returns>Die Skalierungsmatrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Single)">
      <summary>Erstellt eine Skalierungsmatrix, die gleichmäßig mit dem angegebenen Maßstab skaliert.</summary>
      <param name="scale">Der zu verwendende einheitliche Maßstab.</param>
      <returns>Die Skalierungsmatrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Single,System.Numerics.Vector2)">
      <summary>Erstellt eine Skalierungsmatrix, die mit dem angegebenen Maßstab mit einem Versatz gegenüber dem angegebenen Mittelpunkt gleichmäßig skaliert.</summary>
      <param name="scale">Der zu verwendende einheitliche Maßstab.</param>
      <param name="centerPoint">Der Mittelpunktversatz.</param>
      <returns>Die Skalierungsmatrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Single,System.Single)">
      <summary>Erstellt eine Skalierungsmatrix aus den angegebenen X- und Y-Komponenten.</summary>
      <param name="xScale">Der Wert für die Skalierung auf der X-Achse.</param>
      <param name="yScale">Der Wert für die Skalierung auf der Y-Achse.</param>
      <returns>Die Skalierungsmatrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Single,System.Single,System.Numerics.Vector2)">
      <summary>Erstellt eine Skalierung Matrix, die um einen angegebenen Mittelpunkt versetzt ist.</summary>
      <param name="xScale">Der Wert für die Skalierung auf der X-Achse.</param>
      <param name="yScale">Der Wert für die Skalierung auf der Y-Achse.</param>
      <param name="centerPoint">Der Mittelpunkt.</param>
      <returns>Die Skalierungsmatrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateSkew(System.Single,System.Single)">
      <summary>Erstellt eine schiefsymmetrische Matrix aus den angegebenen Winkeln im Bogenmaß.</summary>
      <param name="radiansX">Der X-Winkel im Bogenmaß.</param>
      <param name="radiansY">Der Y-Winkel im Bogenmaß.</param>
      <returns>Die schiefsymmetrische Matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateSkew(System.Single,System.Single,System.Numerics.Vector2)">
      <summary>Erstellt eine schiefsymmetrische Matrix aus den angegebenen Winkeln im Bogenmaß und einem Mittelpunkt.</summary>
      <param name="radiansX">Der X-Winkel im Bogenmaß.</param>
      <param name="radiansY">Der Y-Winkel im Bogenmaß.</param>
      <param name="centerPoint">Der Mittelpunkt.</param>
      <returns>Die schiefsymmetrische Matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateTranslation(System.Numerics.Vector2)">
      <summary>Erstellt eine Translationsmatrix aus dem angegebenen zweidimensionalen Vektor.</summary>
      <param name="position">Die Translationsposition.</param>
      <returns>Die Translationsmatrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateTranslation(System.Single,System.Single)">
      <summary>Erstellt eine Translationsmatrix aus den angegebenen X- und Y-Komponenten.</summary>
      <param name="xPosition">Die X-Position.</param>
      <param name="yPosition">Die Y-Position.</param>
      <returns>Die Translationsmatrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Equals(System.Numerics.Matrix3x2)">
      <summary>Gibt einen Wert zurück, der angibt, ob diese Instanz und eine andere 3 x 2-Matrix gleich sind.</summary>
      <param name="other">Die andere Matrix.</param>
      <returns>
        <see langword="true" />, wenn die beiden Matrizen gleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Equals(System.Object)">
      <summary>Gibt einen Wert zurück, der angibt, ob diese Instanz und ein angegebenes Objekt gleich sind.</summary>
      <param name="obj">Das Objekt, das mit der aktuellen Instanz verglichen werden soll.</param>
      <returns>
        <see langword="true" />, wenn die angegebene Instanz und <paramref name="obj" /> gleich sind, andernfalls <see langword="false" />. Wenn <paramref name="obj" /> gleich <see langword="null" /> ist, gibt die Methode <see langword="false" /> zurück.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.GetDeterminant">
      <summary>Berechnet die Determinante für diese Matrix.</summary>
      <returns>Die Determinante.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.GetHashCode">
      <summary>Gibt den Hashcode für diese Instanz zurück.</summary>
      <returns>Der Hashcode.</returns>
    </member>
    <member name="P:System.Numerics.Matrix3x2.Identity">
      <summary>Ruft die multiplikative Identitätsmatrix ab.</summary>
      <returns>Ruft die multiplikative Identitätsmatrix ab.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Invert(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2@)">
      <summary>Invertiert die angegebene Matrix. Der Rückgabewert gibt an, ob der Vorgang erfolgreich abgeschlossen wurde.</summary>
      <param name="matrix">Die zu invertierende Matrix.</param>
      <param name="result">Der Rückgabewert dieser Methode enthält die invertierte Matrix, wenn der Vorgang erfolgreich abgeschlossen wurde.</param>
      <returns>Wenn <see langword="true" /> erfolgreich konvertiert wurde: <paramref name="matrix" />, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.Matrix3x2.IsIdentity">
      <summary>Gibt an, ob die aktuelle Matrix die Identitätsmatrix ist.</summary>
      <returns>
        <see langword="true" />, wenn die aktuelle Matrix Identitätsmatrix ist, anderenfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Lerp(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2,System.Single)">
      <summary>Führt eine lineare Interpolation zwischen einer Matrix und einer zweiten Matrix basierend auf einem Wert durch, der die Gewichtung er zweiten Matrix angibt.</summary>
      <param name="matrix1">Die erste Matrix.</param>
      <param name="matrix2">Die zweite Matrix.</param>
      <param name="amount">Die relative Gewichtung der <paramref name="matrix2" />.</param>
      <returns>Die interpolierte Matrix.</returns>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M11">
      <summary>Das erste Element der ersten Zeile.</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M12">
      <summary>Das zweite Element der ersten Zeile.</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M21">
      <summary>Das erste Element der zweiten Zeile.</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M22">
      <summary>Das zweite Element der zweiten Zeile.</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M31">
      <summary>Das erste Element der dritten Zeile.</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M32">
      <summary>Das zweite Element der dritten Zeile.</summary>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Multiply(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Gibt die Matrix zurück, die sich aus der Multiplikation zwei Matrizen ergibt.</summary>
      <param name="value1">Die erste Matrix.</param>
      <param name="value2">Die zweite Matrix.</param>
      <returns>Die Produktmatrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Multiply(System.Numerics.Matrix3x2,System.Single)">
      <summary>Gibt die Matrix zurück, die sich aus der Skalierung aller Elemente einer angegebenen Matrix um einen skalaren Faktor ergibt.</summary>
      <param name="value1">Die zu skalierende Matrix.</param>
      <param name="value2">Der zu verwendende Skalierungswert.</param>
      <returns>Die skalierte Matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Negate(System.Numerics.Matrix3x2)">
      <summary>Negiert die angegebene Matrix durch Multiplikation aller ihrer Werte mit -1.</summary>
      <param name="value">Die zu negierende Matrix.</param>
      <returns>Die negierte Matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Addition(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Addiert zu jedem Element in einer Matrix das entsprechende Element in einer zweiten Matrix.</summary>
      <param name="value1">Die erste Matrix.</param>
      <param name="value2">Die zweite Matrix.</param>
      <returns>Die Matrix, die die addierten Werte enthält.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Equality(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Gibt einen Wert zurück, der angibt, ob die angegebenen Matrizen gleich sind.</summary>
      <param name="value1">Die erste zu vergleichende Matrix.</param>
      <param name="value2">Die zweite zu vergleichende Matrix.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="value1" /> und <paramref name="value2" /> gleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Inequality(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Gibt einen Wert zurück, der angibt, ob die angegebenen Matrizen ungleich sind.</summary>
      <param name="value1">Die erste zu vergleichende Matrix.</param>
      <param name="value2">Die zweite zu vergleichende Matrix.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="value1" /> und <paramref name="value2" /> ungleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Multiply(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Gibt die Matrix zurück, die sich aus der Multiplikation zwei Matrizen ergibt.</summary>
      <param name="value1">Die erste Matrix.</param>
      <param name="value2">Die zweite Matrix.</param>
      <returns>Die Produktmatrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Multiply(System.Numerics.Matrix3x2,System.Single)">
      <summary>Gibt die Matrix zurück, die sich aus der Skalierung aller Elemente einer angegebenen Matrix um einen skalaren Faktor ergibt.</summary>
      <param name="value1">Die zu skalierende Matrix.</param>
      <param name="value2">Der zu verwendende Skalierungswert.</param>
      <returns>Die skalierte Matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Subtraction(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Subtrahiert jedes Element aus einer zweiten Matrix von seinem entsprechenden Element in einer ersten Matrix.</summary>
      <param name="value1">Die erste Matrix.</param>
      <param name="value2">Die zweite Matrix.</param>
      <returns>Die Matrix, die die Werte enthält, die sich aus der Subtraktion jedes Elements in <paramref name="value2" /> von seinem entsprechenden Element in <paramref name="value1" /> ergeben.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_UnaryNegation(System.Numerics.Matrix3x2)">
      <summary>Negiert die angegebene Matrix durch Multiplikation aller ihrer Werte mit -1.</summary>
      <param name="value">Die zu negierende Matrix.</param>
      <returns>Die negierte Matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Subtract(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Subtrahiert jedes Element aus einer zweiten Matrix von seinem entsprechenden Element in einer ersten Matrix.</summary>
      <param name="value1">Die erste Matrix.</param>
      <param name="value2">Die zweite Matrix.</param>
      <returns>Die Matrix, die die Werte enthält, die sich aus der Subtraktion jedes Elements in <paramref name="value2" /> von seinem entsprechenden Element in <paramref name="value1" /> ergeben.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die diese Matrix darstellt.</summary>
      <returns>Die Zeichenfolgendarstellung dieser Matrix.</returns>
    </member>
    <member name="P:System.Numerics.Matrix3x2.Translation">
      <summary>Ruft die Verschiebekomponente dieser Matrix ab oder legt sie fest.</summary>
      <returns>Die Verschiebekomponente der aktuellen Instanz.</returns>
    </member>
    <member name="T:System.Numerics.Matrix4x4">
      <summary>Stellt eine 4 x 4-Matrix dar.</summary>
    </member>
    <member name="M:System.Numerics.Matrix4x4.#ctor(System.Numerics.Matrix3x2)">
      <summary>Initialisiert ein <see cref="T:System.Numerics.Matrix4x4" />-Objekt aus einem angegebenen <see cref="T:System.Numerics.Matrix3x2" />-Objekt.</summary>
      <param name="value">Eine 3 x 2-Matrix.</param>
    </member>
    <member name="M:System.Numerics.Matrix4x4.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Erstellt eine 4 x 4-Matrix aus den angegebenen Komponenten.</summary>
      <param name="m11">Der Wert, der dem ersten Element in der ersten Zeile zugewiesen wird.</param>
      <param name="m12">Der Wert, der dem zweiten Element in der ersten Zeile zugewiesen wird.</param>
      <param name="m33">Der Wert, der dem dritten Element in der dritten Zeile zugewiesen wird.</param>
      <param name="m34">Der Wert, der dem vierten Element in der dritten Zeile zugewiesen wird.</param>
      <param name="m41">Der Wert, der dem ersten Element in der vierten Zeile zugewiesen wird.</param>
      <param name="m42">Der Wert, der dem zweiten Element in der vierten Zeile zugewiesen wird.</param>
      <param name="m43">Der Wert, der dem dritten Element in der vierten Zeile zugewiesen wird.</param>
      <param name="m44">Der Wert, der dem vierten Element in der vierten Zeile zugewiesen wird.</param>
      <param name="m13">Der Wert, der dem dritten Element in der ersten Zeile zugewiesen wird.</param>
      <param name="m14">Der Wert, der dem vierten Element in der ersten Zeile zugewiesen wird.</param>
      <param name="m21">Der Wert, der dem ersten Element in der zweiten Zeile zugewiesen wird.</param>
      <param name="m22">Der Wert, der dem zweiten Element in der zweiten Zeile zugewiesen wird.</param>
      <param name="m23">Der Wert, der dem vierten Element in der zweiten Zeile zugewiesen wird.</param>
      <param name="m24">Der Wert, der dem vierten Element in der zweiten Zeile zugewiesen wird.</param>
      <param name="m31">Der Wert, der dem ersten Element in der dritten Zeile zugewiesen wird.</param>
      <param name="m32">Der Wert, der dem zweiten Element in der dritten Zeile zugewiesen wird.</param>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Add(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Addiert zu jedem Element in einer Matrix das entsprechende Element in einer zweiten Matrix.</summary>
      <param name="value1">Die erste Matrix.</param>
      <param name="value2">Die zweite Matrix.</param>
      <returns>Die Matrix, die die addierten Werte von <paramref name="value1" /> und <paramref name="value2" /> enthält.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateBillboard(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Erstellt ein sphärisches Billboard, das um eine angegebene Objektposition rotiert.</summary>
      <param name="objectPosition">Die Position des Objekts, um das das Billboard rotiert.</param>
      <param name="cameraPosition">Die Kameraposition.</param>
      <param name="cameraUpVector">Der Aufwärtsvektor der Kamera.</param>
      <param name="cameraForwardVector">Der Vorwärtsvektor der Kamera.</param>
      <returns>Das erstellte Billboard.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateConstrainedBillboard(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Erstellt ein zylindrisches Billboard, das um eine angegebene Achse rotiert.</summary>
      <param name="objectPosition">Die Position des Objekts, um das das Billboard rotiert.</param>
      <param name="cameraPosition">Die Kameraposition.</param>
      <param name="rotateAxis">Die Rotationsachse des Billboards.</param>
      <param name="cameraForwardVector">Der Vorwärtsvektor der Kamera.</param>
      <param name="objectForwardVector">Der Vorwärtsvektor des Objekts.</param>
      <returns>Die Billboardmatrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateFromAxisAngle(System.Numerics.Vector3,System.Single)">
      <summary>Erstellt eine Matrix, die um einen beliebigen Vektor rotiert.</summary>
      <param name="axis">Die Rotationsachse.</param>
      <param name="angle">Der Winkel der Drehung um <paramref name="axis" /> im Bogenmaß.</param>
      <returns>Die Rotationsmatrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateFromQuaternion(System.Numerics.Quaternion)">
      <summary>Erstellt eine Rotationsmatrix aus dem angegebenen Quaternionrotationswert.</summary>
      <param name="quaternion">Die Quellquaternion.</param>
      <returns>Die Rotationsmatrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)">
      <summary>Erstellt eine Rotationsmatrix mit den angegebenen Werten für Gieren, Nicken und Rollen.</summary>
      <param name="yaw">Der Drehwinkel um die Y-Achse im Bogenmaß.</param>
      <param name="pitch">Der Drehwinkel um die X-Achse im Bogenmaß.</param>
      <param name="roll">Der Drehwinkel um die Z-Achse im Bogenmaß.</param>
      <returns>Die Rotationsmatrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateLookAt(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Erstellt eine Ansichtsmatrix.</summary>
      <param name="cameraPosition">Die Kameraposition.</param>
      <param name="cameraTarget">Das Ziel, auf das die Kamera zeigt.</param>
      <param name="cameraUpVector">Die Richtung, die aus der Sicht der Kamera "oben" ist.</param>
      <returns>Die Ansichtsmatrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateOrthographic(System.Single,System.Single,System.Single,System.Single)">
      <summary>Erstellt eine orthogonale Perspektivmatrix aus den angegebenen Abmessungen des Bildraums (View Volume).</summary>
      <param name="width">Die Breite des Bildraums.</param>
      <param name="height">Die Höhe des Bildraums.</param>
      <param name="zNearPlane">Der kleinste Z-Wert des Bildraums.</param>
      <param name="zFarPlane">Der größte Z-Wert des Bildraums.</param>
      <returns>Die orthogonale Projektionsmatrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Erstellt eine angepasste orthogonale Projektionsmatrix.</summary>
      <param name="left">Der kleinste X-Wert des Bildraums.</param>
      <param name="right">Der größte X-Wert des Bildraums.</param>
      <param name="bottom">Der kleinste Y-Wert des Bildraums.</param>
      <param name="top">Der größte Y-Wert des Bildraums.</param>
      <param name="zNearPlane">Der kleinste Z-Wert des Bildraums.</param>
      <param name="zFarPlane">Der größte Z-Wert des Bildraums.</param>
      <returns>Die orthogonale Projektionsmatrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreatePerspective(System.Single,System.Single,System.Single,System.Single)">
      <summary>Erstellt eine perspektivische Projektionsmatrix aus den angegebenen Abmessungen des Bildraums (View Volume).</summary>
      <param name="width">Die Breite des Bildraums auf der Nahsichtebene.</param>
      <param name="height">Die Höhe des Bildraums auf der Nahsichtebene.</param>
      <param name="nearPlaneDistance">Der Abstand zur Nahsichtebene.</param>
      <param name="farPlaneDistance">Der Abstand zur Fernsichtebene.</param>
      <returns>Die perspektivische Projektionsmatrix.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="nearPlaneDistance" /> ist kleiner gleich 0 (null).

oder -
<paramref name="farPlaneDistance" /> ist kleiner gleich 0 (null).

oder -
<paramref name="nearPlaneDistance" /> ist größer gleich <paramref name="farPlaneDistance" />.</exception>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single)">
      <summary>Erstellt eine perspektivische Projektionsmatrix basierend auf einem Sichtfeld, einem Seitenverhältnis und den Abständen für die Nah- und Fernsichtebene.</summary>
      <param name="fieldOfView">Das Blickfeld in Y-Richtung im Bogenmaß.</param>
      <param name="aspectRatio">Das Seitenverhältnis, definiert als Breite des Bildraums geteilt durch die Höhe.</param>
      <param name="nearPlaneDistance">Der Abstand zur Nahsichtebene.</param>
      <param name="farPlaneDistance">Der Abstand zur Fernsichtebene.</param>
      <returns>Die perspektivische Projektionsmatrix.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="fieldOfView" /> ist kleiner gleich 0 (null).

oder -
<paramref name="fieldOfView" /> ist größer gleich <see cref="F:System.Math.PI" />.

<paramref name="nearPlaneDistance" /> ist kleiner gleich 0 (null).

oder -
<paramref name="farPlaneDistance" /> ist kleiner gleich 0 (null).

oder -
<paramref name="nearPlaneDistance" /> ist größer gleich <paramref name="farPlaneDistance" />.</exception>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Erstellt eine angepasste perspektivische Projektionsmatrix.</summary>
      <param name="left">Der kleinste X-Wert des Bildraums auf der Nahsichtebene.</param>
      <param name="right">Der größte X-Wert des Bildraums auf der Nahsichtebene.</param>
      <param name="bottom">Der kleinste Y-Wert des Bildraums auf der Nahsichtebene.</param>
      <param name="top">Der größte Y-Wert des Bildraums auf der Nahsichtebene.</param>
      <param name="nearPlaneDistance">Der Abstand zur Nahsichtebene.</param>
      <param name="farPlaneDistance">Der Abstand zur Fernsichtebene.</param>
      <returns>Die perspektivische Projektionsmatrix.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="nearPlaneDistance" /> ist kleiner gleich 0 (null).

oder -
<paramref name="farPlaneDistance" /> ist kleiner gleich 0 (null).

oder -
<paramref name="nearPlaneDistance" /> ist größer gleich <paramref name="farPlaneDistance" />.</exception>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateReflection(System.Numerics.Plane)">
      <summary>Erstellt eine Matrix, die das Koordinatensystem auf einer angegebenen Ebene wiedergibt.</summary>
      <param name="value">Die Ebene, zu der eine Reflektion erstellt werden soll.</param>
      <returns>Eine neue Matrix, die die Reflektion ausdrückt.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationX(System.Single)">
      <summary>Erstellt eine Matrix für das Drehen von Punkten um die X-Achse.</summary>
      <param name="radians">Das Ausmaß der Drehung um die X-Achse im Bogenmaß.</param>
      <returns>Die Rotationsmatrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationX(System.Single,System.Numerics.Vector3)">
      <summary>Erstellt eine Matrix für das Drehen von Punkten um die X-Achse von einem Mittelpunkt aus.</summary>
      <param name="radians">Das Ausmaß der Drehung um die X-Achse im Bogenmaß.</param>
      <param name="centerPoint">Der Mittelpunkt.</param>
      <returns>Die Rotationsmatrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationY(System.Single)">
      <summary>Erstellt eine Matrix für das Drehen von Punkten um die Y-Achse.</summary>
      <param name="radians">Das Ausmaß der Drehung um die Y-Achse im Bogenmaß.</param>
      <returns>Die Rotationsmatrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationY(System.Single,System.Numerics.Vector3)">
      <summary>Das Ausmaß der Drehung um die Y-Achse im Bogenmaß, von einem Mittelpunkt aus.</summary>
      <param name="radians">Das Ausmaß der Drehung um die Y-Achse im Bogenmaß.</param>
      <param name="centerPoint">Der Mittelpunkt.</param>
      <returns>Die Rotationsmatrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationZ(System.Single)">
      <summary>Erstellt eine Matrix für das Drehen von Punkten um die Z-Achse.</summary>
      <param name="radians">Das Ausmaß der Drehung um die Z-Achse im Bogenmaß.</param>
      <returns>Die Rotationsmatrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationZ(System.Single,System.Numerics.Vector3)">
      <summary>Erstellt eine Matrix für das Drehen von Punkten um die Z-Achse von einem Mittelpunkt aus.</summary>
      <param name="radians">Das Ausmaß der Drehung um die Z-Achse im Bogenmaß.</param>
      <param name="centerPoint">Der Mittelpunkt.</param>
      <returns>Die Rotationsmatrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Numerics.Vector3)">
      <summary>Erstellt eine Skalierungsmatrix aus der angegebenen Vektorskala.</summary>
      <param name="scales">Die zu verwendende Skala.</param>
      <returns>Die Skalierungsmatrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Erstellt eine Skalierungsmatrix mit einem Mittelpunkt.</summary>
      <param name="scales">Der Vektor, der den Betrag der Skalierung für die einzelnen Achsen enthält.</param>
      <param name="centerPoint">Der Mittelpunkt.</param>
      <returns>Die Skalierungsmatrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Single)">
      <summary>Erstellt eine einheitliche Skalierungsmatrix, die gleichmäßig auf allen Achsen skaliert.</summary>
      <param name="scale">Der einheitliche Skalierungsfaktor.</param>
      <returns>Die Skalierungsmatrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Single,System.Numerics.Vector3)">
      <summary>Erstellt eine einheitliche Skalierungsmatrix mit einem Mittelpunkt, die gleichmäßig auf allen Achsen skaliert.</summary>
      <param name="scale">Der einheitliche Skalierungsfaktor.</param>
      <param name="centerPoint">Der Mittelpunkt.</param>
      <returns>Die Skalierungsmatrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Single,System.Single,System.Single)">
      <summary>Erstellt eine Skalierungsmatrix aus den angegebenen X-, Y- und Z-Komponenten.</summary>
      <param name="xScale">Der Wert für die Skalierung auf der X-Achse.</param>
      <param name="yScale">Der Wert für die Skalierung auf der Y-Achse.</param>
      <param name="zScale">Der Wert für die Skalierung auf der Z-Achse.</param>
      <returns>Die Skalierungsmatrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Single,System.Single,System.Single,System.Numerics.Vector3)">
      <summary>Erstellt eine Skalierung Matrix, die um einen angegebenen Mittelpunkt versetzt ist.</summary>
      <param name="xScale">Der Wert für die Skalierung auf der X-Achse.</param>
      <param name="yScale">Der Wert für die Skalierung auf der Y-Achse.</param>
      <param name="zScale">Der Wert für die Skalierung auf der Z-Achse.</param>
      <param name="centerPoint">Der Mittelpunkt.</param>
      <returns>Die Skalierungsmatrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateShadow(System.Numerics.Vector3,System.Numerics.Plane)">
      <summary>Erstellt eine Matrix, die Geometrie auf einer angegebenen Ebene flach darstellt, als ob eine angegebene Lichtquelle einen Schatten wirft.</summary>
      <param name="lightDirection">Die Richtung, aus der das Licht kommt, das den Schatten wirft.</param>
      <param name="plane">Die Ebene, auf der die neue Matrix die Geometrie flach darstellen soll, als ob ein Schatten geworfen wird.</param>
      <returns>Eine neue Matrix, die zur flachen Darstellung von Geometrie auf der angegebenen Ebene aus der angegebenen Richtung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateTranslation(System.Numerics.Vector3)">
      <summary>Erstellt eine Translationsmatrix aus dem angegebenen dreidimensionalen Vektor.</summary>
      <param name="position">Der Betrag der Verschiebung auf den einzelnen Achsen.</param>
      <returns>Die Translationsmatrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateTranslation(System.Single,System.Single,System.Single)">
      <summary>Erstellt eine Translationsmatrix aus den angegebenen X-, Y- und Z-Komponenten.</summary>
      <param name="xPosition">Der Betrag der Verschiebung auf der X-Achse.</param>
      <param name="yPosition">Der Betrag der Verschiebung auf der Y-Achse.</param>
      <param name="zPosition">Der Betrag der Verschiebung auf der Z-Achse.</param>
      <returns>Die Translationsmatrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateWorld(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Erstellt eine Weltmatrix mit den angegebenen Parametern.</summary>
      <param name="position">Die Position des Objekts.</param>
      <param name="forward">Die Vorwärtsrichtung des Objekts.</param>
      <param name="up">Die Aufwärtsrichtung des Objekts. Ihr Wert ist in der Regel <c>[0, 1, 0]</c>.</param>
      <returns>Die Weltmatrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Decompose(System.Numerics.Matrix4x4,System.Numerics.Vector3@,System.Numerics.Quaternion@,System.Numerics.Vector3@)">
      <summary>Versucht, die Skalierung, Verschiebung und Drehung aus der angegebenen Skalierungs-, Rotations- oder Translationsmatrix zu extrahieren. Der Rückgabewert gibt an, ob der Vorgang erfolgreich abgeschlossen wurde.</summary>
      <param name="matrix">Die Quellmatrix.</param>
      <param name="scale">Der Rückgabewert dieser Methode enthält die Skalierungskomponente der Transformationsmatrix, wenn der Vorgang erfolgreich abgeschlossen wird.</param>
      <param name="rotation">Der Rückgabewert dieser Methode enthält die Drehungskomponente der Transformationsmatrix, wenn der Vorgang erfolgreich abgeschlossen wird.</param>
      <param name="translation">Der Rückgabewert dieser Methode enthält die Verschiebungskomponente der Transformationsmatrix, wenn der Vorgang erfolgreich abgeschlossen wird.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="matrix" /> erfolgreich zerlegt wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Equals(System.Numerics.Matrix4x4)">
      <summary>Gibt einen Wert zurück, der angibt, ob diese Instanz und eine andere 4 x 4-Matrix gleich sind.</summary>
      <param name="other">Die andere Matrix.</param>
      <returns>
        <see langword="true" />, wenn die beiden Matrizen gleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Equals(System.Object)">
      <summary>Gibt einen Wert zurück, der angibt, ob diese Instanz und ein angegebenes Objekt gleich sind.</summary>
      <param name="obj">Das Objekt, das mit der aktuellen Instanz verglichen werden soll.</param>
      <returns>
        <see langword="true" />, wenn die angegebene Instanz und <paramref name="obj" /> gleich sind, andernfalls <see langword="false" />. Wenn <paramref name="obj" /> gleich <see langword="null" /> ist, gibt die Methode <see langword="false" /> zurück.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.GetDeterminant">
      <summary>Berechnet die Determinante der aktuellen 4 x 4-Matrix.</summary>
      <returns>Die Determinante.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.GetHashCode">
      <summary>Gibt den Hashcode für diese Instanz zurück.</summary>
      <returns>Der Hashcode.</returns>
    </member>
    <member name="P:System.Numerics.Matrix4x4.Identity">
      <summary>Ruft die multiplikative Identitätsmatrix ab.</summary>
      <returns>Ruft die multiplikative Identitätsmatrix ab.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Invert(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4@)">
      <summary>Invertiert die angegebene Matrix. Der Rückgabewert gibt an, ob der Vorgang erfolgreich abgeschlossen wurde.</summary>
      <param name="matrix">Die zu invertierende Matrix.</param>
      <param name="result">Der Rückgabewert dieser Methode enthält die invertierte Matrix, wenn der Vorgang erfolgreich abgeschlossen wurde.</param>
      <returns>Wenn <see langword="true" /> erfolgreich konvertiert wurde: <paramref name="matrix" />, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.Matrix4x4.IsIdentity">
      <summary>Gibt an, ob die aktuelle Matrix die Identitätsmatrix ist.</summary>
      <returns>
        <see langword="true" />, wenn die aktuelle Matrix Identitätsmatrix ist, anderenfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Lerp(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4,System.Single)">
      <summary>Führt eine lineare Interpolation zwischen einer Matrix und einer zweiten Matrix basierend auf einem Wert durch, der die Gewichtung er zweiten Matrix angibt.</summary>
      <param name="matrix1">Die erste Matrix.</param>
      <param name="matrix2">Die zweite Matrix.</param>
      <param name="amount">Die relative Gewichtung der <paramref name="matrix2" />.</param>
      <returns>Die interpolierte Matrix.</returns>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M11">
      <summary>Das erste Element der ersten Zeile.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M12">
      <summary>Das zweite Element der ersten Zeile.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M13">
      <summary>Das dritte Element der ersten Zeile.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M14">
      <summary>Das vierte Element der ersten Zeile.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M21">
      <summary>Das erste Element der zweiten Zeile.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M22">
      <summary>Das zweite Element der zweiten Zeile.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M23">
      <summary>Das dritte Element der zweiten Zeile.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M24">
      <summary>Das vierte Element der zweiten Zeile.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M31">
      <summary>Das erste Element der dritten Zeile.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M32">
      <summary>Das zweite Element der dritten Zeile.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M33">
      <summary>Das dritte Element der dritten Zeile.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M34">
      <summary>Das vierte Element der dritten Zeile.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M41">
      <summary>Das erste Element der vierten Zeile.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M42">
      <summary>Das zweite Element der vierten Zeile.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M43">
      <summary>Das dritte Element der vierten Zeile.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M44">
      <summary>Das vierte Element der vierten Zeile.</summary>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Multiply(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Gibt die Matrix zurück, die sich aus der Multiplikation zwei Matrizen ergibt.</summary>
      <param name="value1">Die erste Matrix.</param>
      <param name="value2">Die zweite Matrix.</param>
      <returns>Die Produktmatrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Multiply(System.Numerics.Matrix4x4,System.Single)">
      <summary>Gibt die Matrix zurück, die sich aus der Skalierung aller Elemente einer angegebenen Matrix um einen skalaren Faktor ergibt.</summary>
      <param name="value1">Die zu skalierende Matrix.</param>
      <param name="value2">Der zu verwendende Skalierungswert.</param>
      <returns>Die skalierte Matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Negate(System.Numerics.Matrix4x4)">
      <summary>Negiert die angegebene Matrix durch Multiplikation aller ihrer Werte mit -1.</summary>
      <param name="value">Die zu negierende Matrix.</param>
      <returns>Die negierte Matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Addition(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Addiert zu jedem Element in einer Matrix das entsprechende Element in einer zweiten Matrix.</summary>
      <param name="value1">Die erste Matrix.</param>
      <param name="value2">Die zweite Matrix.</param>
      <returns>Die Matrix, die die addierten Werte enthält.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Equality(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Gibt einen Wert zurück, der angibt, ob die angegebenen Matrizen gleich sind.</summary>
      <param name="value1">Die erste zu vergleichende Matrix.</param>
      <param name="value2">Die zweite zu vergleichende Matrix.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="value1" /> und <paramref name="value2" /> gleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Inequality(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Gibt einen Wert zurück, der angibt, ob die angegebenen Matrizen ungleich sind.</summary>
      <param name="value1">Die erste zu vergleichende Matrix.</param>
      <param name="value2">Die zweite zu vergleichende Matrix.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="value1" /> und <paramref name="value2" /> ungleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Multiply(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Gibt die Matrix zurück, die sich aus der Multiplikation zwei Matrizen ergibt.</summary>
      <param name="value1">Die erste Matrix.</param>
      <param name="value2">Die zweite Matrix.</param>
      <returns>Die Produktmatrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Multiply(System.Numerics.Matrix4x4,System.Single)">
      <summary>Gibt die Matrix zurück, die sich aus der Skalierung aller Elemente einer angegebenen Matrix um einen skalaren Faktor ergibt.</summary>
      <param name="value1">Die zu skalierende Matrix.</param>
      <param name="value2">Der zu verwendende Skalierungswert.</param>
      <returns>Die skalierte Matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Subtraction(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Subtrahiert jedes Element aus einer zweiten Matrix von seinem entsprechenden Element in einer ersten Matrix.</summary>
      <param name="value1">Die erste Matrix.</param>
      <param name="value2">Die zweite Matrix.</param>
      <returns>Die Matrix, die die Werte enthält, die sich aus der Subtraktion jedes Elements in <paramref name="value2" /> von seinem entsprechenden Element in <paramref name="value1" /> ergeben.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_UnaryNegation(System.Numerics.Matrix4x4)">
      <summary>Negiert die angegebene Matrix durch Multiplikation aller ihrer Werte mit -1.</summary>
      <param name="value">Die zu negierende Matrix.</param>
      <returns>Die negierte Matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Subtract(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Subtrahiert jedes Element aus einer zweiten Matrix von seinem entsprechenden Element in einer ersten Matrix.</summary>
      <param name="value1">Die erste Matrix.</param>
      <param name="value2">Die zweite Matrix.</param>
      <returns>Die Matrix, die die Werte enthält, die sich aus der Subtraktion jedes Elements in <paramref name="value2" /> von seinem entsprechenden Element in <paramref name="value1" /> ergeben.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die diese Matrix darstellt.</summary>
      <returns>Die Zeichenfolgendarstellung dieser Matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Transform(System.Numerics.Matrix4x4,System.Numerics.Quaternion)">
      <summary>Transformiert die angegebene Matrix durch Anwenden der angegebenen Quaternionrotation.</summary>
      <param name="value">Die zu transformierende Matrix.</param>
      <param name="rotation">Die anzuwendende Drehung.</param>
      <returns>Die transformierte Matrix.</returns>
    </member>
    <member name="P:System.Numerics.Matrix4x4.Translation">
      <summary>Ruft die Verschiebekomponente dieser Matrix ab oder legt sie fest.</summary>
      <returns>Die Verschiebekomponente der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Transpose(System.Numerics.Matrix4x4)">
      <summary>Vertauscht die Zeilen und Spalten einer Matrix.</summary>
      <param name="matrix">Die zu transponierende Matrix.</param>
      <returns>Die transponierte Matrix.</returns>
    </member>
    <member name="T:System.Numerics.Plane">
      <summary>Stellt eine Ebene im dreidimensionalen Raum dar.</summary>
    </member>
    <member name="M:System.Numerics.Plane.#ctor(System.Numerics.Vector3,System.Single)">
      <summary>Erstellt ein <see cref="T:System.Numerics.Plane" />-Objekt aus einer angegebenen Normalen und dem Abstand entlang der Normalen vom Ursprung.</summary>
      <param name="normal">Der Normalenvektor der Ebene.</param>
      <param name="d">Der Abstand der Ebene vom Ursprung entlang des Normalenvektors.</param>
    </member>
    <member name="M:System.Numerics.Plane.#ctor(System.Numerics.Vector4)">
      <summary>Erstellt ein <see cref="T:System.Numerics.Plane" />-Objekt aus einem angegebenen vierdimensionalen Vektor.</summary>
      <param name="value">Ein Vektor, dessen erste drei Elemente den normalen Vektor beschreiben und dessen <see cref="F:System.Numerics.Vector4.W" /> die Entfernung entlang der Normalen vom Ursprung definiert.</param>
    </member>
    <member name="M:System.Numerics.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Erstellt ein <see cref="T:System.Numerics.Plane" />-Objekt aus den X-, Y- und Z-Komponenten der Normalen und der Entfernung dieser Normalen vom Ursprung.</summary>
      <param name="x">Die X-Komponente der Normalen.</param>
      <param name="y">Die Y-Komponente der Normalen.</param>
      <param name="z">Die Z-Komponente der Normalen.</param>
      <param name="d">Der Abstand der Ebene entlang der Normalen vom Ursprung.</param>
    </member>
    <member name="M:System.Numerics.Plane.CreateFromVertices(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Erstellt ein <see cref="T:System.Numerics.Plane" />-Objekt, das drei angegebene Punkte enthält.</summary>
      <param name="point1">Der erste Punkt, der die Ebene definiert.</param>
      <param name="point2">Der zweite Punkt, der die Ebene definiert.</param>
      <param name="point3">Der dritte Punkt, der die Ebene definiert.</param>
      <returns>Die Ebene mit den drei Punkten.</returns>
    </member>
    <member name="F:System.Numerics.Plane.D">
      <summary>Der Abstand der Ebene entlang der Normalen vom Ursprung.</summary>
    </member>
    <member name="M:System.Numerics.Plane.Dot(System.Numerics.Plane,System.Numerics.Vector4)">
      <summary>Berechnet das Skalarprodukt aus einer Ebene und einem vierdimensionalen Vektor.</summary>
      <param name="plane">Die Ebene.</param>
      <param name="value">Der vierdimensionale Vektor.</param>
      <returns>Das Skalarprodukt.</returns>
    </member>
    <member name="M:System.Numerics.Plane.DotCoordinate(System.Numerics.Plane,System.Numerics.Vector3)">
      <summary>Gibt das Skalarprodukt aus einem angegebenen dreidimensionalen Vektor und dem Normalenvektor dieser Ebene plus den Abstandswert (<see cref="F:System.Numerics.Plane.D" />) der Ebene zurück.</summary>
      <param name="plane">Die Ebene.</param>
      <param name="value">Der dreidimensionale Vektor.</param>
      <returns>Das Skalarprodukt.</returns>
    </member>
    <member name="M:System.Numerics.Plane.DotNormal(System.Numerics.Plane,System.Numerics.Vector3)">
      <summary>Gibt das Skalarprodukt aus einem angegebenen dreidimensionalen Vektor und dem <see cref="F:System.Numerics.Plane.Normal" />-Vektor dieser Ebene zurück.</summary>
      <param name="plane">Die Ebene.</param>
      <param name="value">Der dreidimensionale Vektor.</param>
      <returns>Das Skalarprodukt.</returns>
    </member>
    <member name="M:System.Numerics.Plane.Equals(System.Numerics.Plane)">
      <summary>Gibt einen Wert zurück, der angibt, ob diese Instanz und ein anderes Ebenenobjekt gleich sind.</summary>
      <param name="other">Die andere Ebene.</param>
      <returns>
        <see langword="true" />, wenn die beiden Ebenen gleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Plane.Equals(System.Object)">
      <summary>Gibt einen Wert zurück, der angibt, ob diese Instanz und ein angegebenes Objekt gleich sind.</summary>
      <param name="obj">Das Objekt, das mit der aktuellen Instanz verglichen werden soll.</param>
      <returns>
        <see langword="true" />, wenn die angegebene Instanz und <paramref name="obj" /> gleich sind, andernfalls <see langword="false" />. Wenn <paramref name="obj" /> gleich <see langword="null" /> ist, gibt die Methode <see langword="false" /> zurück.</returns>
    </member>
    <member name="M:System.Numerics.Plane.GetHashCode">
      <summary>Gibt den Hashcode für diese Instanz zurück.</summary>
      <returns>Der Hashcode.</returns>
    </member>
    <member name="F:System.Numerics.Plane.Normal">
      <summary>Der Normalenvektor der Ebene.</summary>
    </member>
    <member name="M:System.Numerics.Plane.Normalize(System.Numerics.Plane)">
      <summary>Erstellt ein neues <see cref="T:System.Numerics.Plane" />-Objekt, dessen Normalenvektor dem normalisierten Normalenvektor der Quellebene entspricht.</summary>
      <param name="value">Die Quellebene.</param>
      <returns>Die normalisierte Ebene.</returns>
    </member>
    <member name="M:System.Numerics.Plane.op_Equality(System.Numerics.Plane,System.Numerics.Plane)">
      <summary>Gibt einen Wert zurück, der angibt, ob zwei Ebenen gleich sind.</summary>
      <param name="value1">Die erste zu vergleichende Ebene.</param>
      <param name="value2">Die zweite zu vergleichende Ebene.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="value1" /> und <paramref name="value2" /> gleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Plane.op_Inequality(System.Numerics.Plane,System.Numerics.Plane)">
      <summary>Gibt einen Wert zurück, der angibt, ob zwei Ebenen ungleich sind.</summary>
      <param name="value1">Die erste zu vergleichende Ebene.</param>
      <param name="value2">Die zweite zu vergleichende Ebene.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="value1" /> und <paramref name="value2" /> ungleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Plane.ToString">
      <summary>Gibt die Zeichenfolgendarstellung dieses Ebenenobjekts zurück.</summary>
      <returns>Eine Zeichenfolge, die dieses <see cref="T:System.Numerics.Plane" />-Objekt darstellt.</returns>
    </member>
    <member name="M:System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Matrix4x4)">
      <summary>Transformiert eine normalisierte Ebene anhand einer 4x4-Matrix.</summary>
      <param name="plane">Die normalisierte Ebene, die transformiert werden soll.</param>
      <param name="matrix">Die Transformationsmatrix, die auf <paramref name="plane" /> angewendet werden soll.</param>
      <returns>Die transformierte Ebene.</returns>
    </member>
    <member name="M:System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Quaternion)">
      <summary>Transformiert eine normalisierte Ebene anhand einer Quaterniondrehung.</summary>
      <param name="plane">Die normalisierte Ebene, die transformiert werden soll.</param>
      <param name="rotation">Die Quaterniondrehung, die der Ebene zugewiesen werden soll.</param>
      <returns>Eine neue Ebene, die sich aus dem Anwenden der Quaterniondrehung ergibt.</returns>
    </member>
    <member name="T:System.Numerics.Quaternion">
      <summary>Stellt einen Vektor dar, der zum Codieren von dreidimensionalen physischen Drehungen verwendet wird.</summary>
    </member>
    <member name="M:System.Numerics.Quaternion.#ctor(System.Numerics.Vector3,System.Single)">
      <summary>Erstellt eine Quaternion aus dem angegebenen Vektorteil und den Drehungsteilen.</summary>
      <param name="vectorPart">Der Vektorteil der Quaternion.</param>
      <param name="scalarPart">Der Drehungsteil der Quaternion.</param>
    </member>
    <member name="M:System.Numerics.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Erzeugt eine Quaternion aus den angegebenen Komponenten.</summary>
      <param name="x">Der Wert, der der X-Komponente der Quaternion zugewiesen werden soll.</param>
      <param name="y">Der Wert, der der Y-Komponente der Quaternion zugewiesen werden soll.</param>
      <param name="z">Der Wert, der der Z-Komponente der Quaternion zugewiesen werden soll.</param>
      <param name="w">Der Wert, der der W-Komponente der Quaternion zugewiesen werden soll.</param>
    </member>
    <member name="M:System.Numerics.Quaternion.Add(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Addiert zu jedem Element in einer Quaternion das entsprechende Element in einer zweiten Quaternion.</summary>
      <param name="value1">Die erste Quaternion.</param>
      <param name="value2">Die zweite Quaternion.</param>
      <returns>Die Quaternion, die die addierten Werte von <paramref name="value1" /> und <paramref name="value2" /> enthält.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Concatenate(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Verkettet zwei Quaternionen.</summary>
      <param name="value1">Die erste Quaterniondrehung in der Reihe.</param>
      <param name="value2">Die zweite Quaterniondrehung in der Reihe.</param>
      <returns>Eine neue Quaternion, die die Verkettung der <paramref name="value1" />-Drehung, gefolgt von der <paramref name="value2" />-Drehung, darstellt.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Conjugate(System.Numerics.Quaternion)">
      <summary>Gibt das Konjugat einer angegebenen Quaternion zurück.</summary>
      <param name="value">Die Quaternion.</param>
      <returns>Eine neue Quaternion, die das Konjugat von <see langword="value" /> ist.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.CreateFromAxisAngle(System.Numerics.Vector3,System.Single)">
      <summary>Erstellt eine Quaternion aus einem Einheitsvektor und einen Winkel für die Drehung um den Vektor.</summary>
      <param name="axis">Der Einheitsvektor, um den die Drehung erfolgt.</param>
      <param name="angle">Der Winkel im Bogenmaß für die Drehung um den Vektor.</param>
      <returns>Die neu erstellte Quaternion.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.CreateFromRotationMatrix(System.Numerics.Matrix4x4)">
      <summary>Erstellt eine Quaternion aus der angegebenen Rotationsmatrix.</summary>
      <param name="matrix">Die Rotationsmatrix.</param>
      <returns>Die neu erstellte Quaternion.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)">
      <summary>Erstellt eine neue Quaternion aus den angegebenen Werten für Gieren, Nicken und Rollen.</summary>
      <param name="yaw">Der Gierwinkel im Bogenmaß um die Y-Achse.</param>
      <param name="pitch">Der Nickwinkel im Bogenmaß um die X-Achse.</param>
      <param name="roll">Der Rollwinkel im Bogenmaß um die Z-Achse.</param>
      <returns>Die resultierende Quaternion.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Divide(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Dividiert eine Quaternion durch eine zweite Quaternion.</summary>
      <param name="value1">Der Dividend.</param>
      <param name="value2">Der Divisor.</param>
      <returns>Die Quaternion, die aus der Division von <paramref name="value1" /> durch <paramref name="value2" /> resultiert.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Dot(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Berechnet das Skalarprodukt von zwei Quaternionen.</summary>
      <param name="quaternion1">Die erste Quaternion.</param>
      <param name="quaternion2">Die zweite Quaternion.</param>
      <returns>Das Skalarprodukt.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Equals(System.Numerics.Quaternion)">
      <summary>Gibt einen Wert zurück, der angibt, ob diese Instanz und eine andere Quaternion gleich sind.</summary>
      <param name="other">Die andere Quaternion.</param>
      <returns>
        <see langword="true" />, wenn die beiden Quaternionen gleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Equals(System.Object)">
      <summary>Gibt einen Wert zurück, der angibt, ob diese Instanz und ein angegebenes Objekt gleich sind.</summary>
      <param name="obj">Das Objekt, das mit der aktuellen Instanz verglichen werden soll.</param>
      <returns>
        <see langword="true" />, wenn die angegebene Instanz und <paramref name="obj" /> gleich sind, andernfalls <see langword="false" />. Wenn <paramref name="obj" /> gleich <see langword="null" /> ist, gibt die Methode <see langword="false" /> zurück.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.GetHashCode">
      <summary>Gibt den Hashcode für diese Instanz zurück.</summary>
      <returns>Der Hashcode.</returns>
    </member>
    <member name="P:System.Numerics.Quaternion.Identity">
      <summary>Ruft eine Quaternion ab, die keine Drehung darstellt.</summary>
      <returns>Eine Quaternion, deren Werte <c>(0, 0, 0, 1)</c>sind.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Inverse(System.Numerics.Quaternion)">
      <summary>Gibt die Inverse einer Quaternion zurück.</summary>
      <param name="value">Die Quaternion.</param>
      <returns>Die inverse Quaternion.</returns>
    </member>
    <member name="P:System.Numerics.Quaternion.IsIdentity">
      <summary>Ruft einen Wert ab, der angibt, ob die aktuelle Instanz die Identitätsquaternion ist.</summary>
      <returns>
        <see langword="true" />, wenn die aktuelle Instanz die Identitätsquaternion ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Length">
      <summary>Berechnet die Länge der Quaternion.</summary>
      <returns>Die berechnete Länge der Quaternion.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.LengthSquared">
      <summary>Berechnet das Quadrat der Länge der Quaternion.</summary>
      <returns>Das Quadrat der Länge der Quaternion.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Lerp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single)">
      <summary>Führt eine lineare Interpolation zwischen zwei Quaternionen basierend auf einem Wert durch, der die Gewichtung der zweiten Quaternion angibt.</summary>
      <param name="quaternion1">Die erste Quaternion.</param>
      <param name="quaternion2">Die zweite Quaternion.</param>
      <param name="amount">Die relative Gewichtung von <paramref name="quaternion2" /> in der Interpolation.</param>
      <returns>Die interpolierte Quaternion.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Gibt die Quaternion zurück, die aus der Multiplikation zweier Quaternionen resultiert.</summary>
      <param name="value1">Die erste Quaternion.</param>
      <param name="value2">Die zweite Quaternion.</param>
      <returns>Die Produktquaternion.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Multiply(System.Numerics.Quaternion,System.Single)">
      <summary>Gibt die Quaternion zurück, die sich aus der Skalierung aller Komponenten einer angegebenen Quaternion um einen skalaren Faktor ergibt.</summary>
      <param name="value1">Die Quellquaternion.</param>
      <param name="value2">Der Skalarwert.</param>
      <returns>Die skalierte Quaternion.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Negate(System.Numerics.Quaternion)">
      <summary>Kehrt das Vorzeichen jeder Komponente der Quaternion um.</summary>
      <param name="value">Die zu negierende Quaternion.</param>
      <returns>Die negierte Quaternion.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Normalize(System.Numerics.Quaternion)">
      <summary>Teilt jede Komponente einer angegebenen <see cref="T:System.Numerics.Quaternion" /> durch ihre Länge.</summary>
      <param name="value">Die zu normalisierende Quaternion.</param>
      <returns>Die normalisierte Quaternion.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Addition(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Addiert zu jedem Element in einer Quaternion das entsprechende Element in einer zweiten Quaternion.</summary>
      <param name="value1">Die erste Quaternion.</param>
      <param name="value2">Die zweite Quaternion.</param>
      <returns>Die Quaternion, die die addierten Werte von <paramref name="value1" /> und <paramref name="value2" /> enthält.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Division(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Dividiert eine Quaternion durch eine zweite Quaternion.</summary>
      <param name="value1">Der Dividend.</param>
      <param name="value2">Der Divisor.</param>
      <returns>Die Quaternion, die aus der Division von <paramref name="value1" /> durch <paramref name="value2" /> resultiert.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Equality(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Gibt einen Wert zurück, der angibt, ob zwei Quaternionen gleich sind.</summary>
      <param name="value1">Die erste zu vergleichende Quaternion.</param>
      <param name="value2">Die zweite zu vergleichende Quaternion.</param>
      <returns>
        <see langword="true" />, wenn die beiden Quaternionen gleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Inequality(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Gibt einen Wert zurück, der angibt, ob zwei Quaternionen ungleich sind.</summary>
      <param name="value1">Die erste zu vergleichende Quaternion.</param>
      <param name="value2">Die zweite zu vergleichende Quaternion.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="value1" /> und <paramref name="value2" /> ungleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Gibt die Quaternion zurück, die aus der Multiplikation zweier Quaternionen resultiert.</summary>
      <param name="value1">Die erste Quaternion.</param>
      <param name="value2">Die zweite Quaternion.</param>
      <returns>Die Produktquaternion.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Multiply(System.Numerics.Quaternion,System.Single)">
      <summary>Gibt die Quaternion zurück, die sich aus der Skalierung aller Komponenten einer angegebenen Quaternion um einen skalaren Faktor ergibt.</summary>
      <param name="value1">Die Quellquaternion.</param>
      <param name="value2">Der Skalarwert.</param>
      <returns>Die skalierte Quaternion.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Subtraction(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Subtrahiert jedes Element aus einer zweiten Quaternion von seinem entsprechenden Element in einer ersten Quaternion.</summary>
      <param name="value1">Die erste Quaternion.</param>
      <param name="value2">Die zweite Quaternion.</param>
      <returns>Die Quaternion, die die Werte enthält, die sich aus der Subtraktion jedes Elements in <paramref name="value2" /> von seinem entsprechenden Element in <paramref name="value1" /> ergeben.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_UnaryNegation(System.Numerics.Quaternion)">
      <summary>Kehrt das Vorzeichen jeder Komponente der Quaternion um.</summary>
      <param name="value">Die zu negierende Quaternion.</param>
      <returns>Die negierte Quaternion.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Slerp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single)">
      <summary>Interpoliert zwischen zwei Quaternionen mit der Methode der sphärischen linearen Interpolation.</summary>
      <param name="quaternion1">Die erste Quaternion.</param>
      <param name="quaternion2">Die zweite Quaternion.</param>
      <param name="amount">Die relative Gewichtung der zweiten Quaternion in der Interpolation.</param>
      <returns>Die interpolierte Quaternion.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Subtract(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Subtrahiert jedes Element aus einer zweiten Quaternion von seinem entsprechenden Element in einer ersten Quaternion.</summary>
      <param name="value1">Die erste Quaternion.</param>
      <param name="value2">Die zweite Quaternion.</param>
      <returns>Die Quaternion, die die Werte enthält, die sich aus der Subtraktion jedes Elements in <paramref name="value2" /> von seinem entsprechenden Element in <paramref name="value1" /> ergeben.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.ToString">
      <summary>Gibt eine Zeichenfolge zurück, die diese Quaternion darstellt.</summary>
      <returns>Die Zeichenfolgendarstellung dieser Quaternion.</returns>
    </member>
    <member name="F:System.Numerics.Quaternion.W">
      <summary>Die Rotationskomponente der Quaternion.</summary>
    </member>
    <member name="F:System.Numerics.Quaternion.X">
      <summary>Der X-Wert der Vektorkomponente der Quaternion.</summary>
    </member>
    <member name="F:System.Numerics.Quaternion.Y">
      <summary>Der Y-Wert der Vektorkomponente der Quaternion.</summary>
    </member>
    <member name="F:System.Numerics.Quaternion.Z">
      <summary>Der Z-Wert der Vektorkomponente der Quaternion.</summary>
    </member>
    <member name="T:System.Numerics.Vector">
      <summary>Stellt eine Auflistung statischer Hilfsmethoden zum Erstellen, Bearbeiten, Kombinieren und Konvertieren generischer Vektoren bereit.</summary>
    </member>
    <member name="M:System.Numerics.Vector.Abs``1(System.Numerics.Vector{``0})">
      <summary>Gibt einen neuen Vektor zurück, dessen Elemente die absoluten Werte der Elemente des angegebenen Vektors sind.</summary>
      <param name="value">Der Quellvektor.</param>
      <typeparam name="T">Der Vektortyp. <c>T</c> kann ein beliebiger primitiver numerischer Typ sein.</typeparam>
      <returns>Der Absolutwertvektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Add``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Gibt einen neuen Vektor zurück, dessen Werte der Summe der einzelnen Elementpaare aus zwei angegebenen Vektoren entsprechen.</summary>
      <param name="left">Der erste Vektor.</param>
      <param name="right">Der zweite Vektor.</param>
      <typeparam name="T">Der Vektortyp. <c>T</c> kann ein beliebiger primitiver numerischer Typ sein.</typeparam>
      <returns>Der Summenvektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AndNot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Gibt einen neuen Vektor zurück, indem für jedes Paar entsprechender Elemente in zwei Vektoren eine bitweise "Und nicht"-Operation durchgeführt wird.</summary>
      <param name="left">Der erste Vektor.</param>
      <param name="right">Der zweite Vektor.</param>
      <typeparam name="T">Der Vektortyp. <c>T</c> kann ein beliebiger primitiver numerischer Typ sein.</typeparam>
      <returns>Der Ergebnisvektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorByte``1(System.Numerics.Vector{``0})">
      <summary>Interpretiert die Bits eines angegebenen Vektors in die eines Vektors von Bytes ohne Vorzeichen um.</summary>
      <param name="value">Der Quellvektor.</param>
      <typeparam name="T">Der Vektortyp. <c>T</c> kann ein beliebiger primitiver numerischer Typ sein.</typeparam>
      <returns>Der neu interpretierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorDouble``1(System.Numerics.Vector{``0})">
      <summary>Interpretiert die Bits eines angegebenen Vektors in die eines Vektors mit Gleitkomma und doppelter Genauigkeit um.</summary>
      <param name="value">Der Quellvektor.</param>
      <typeparam name="T">Der Vektortyp. <c>T</c> kann ein beliebiger primitiver numerischer Typ sein.</typeparam>
      <returns>Der neu interpretierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorInt16``1(System.Numerics.Vector{``0})">
      <summary>Interpretiert die Bits eines angegebenen Vektors in die eines Vektors von ganzen 16-Bit-Zahlen um.</summary>
      <param name="value">Der Quellvektor.</param>
      <typeparam name="T">Der Vektortyp. <c>T</c> kann ein beliebiger primitiver numerischer Typ sein.</typeparam>
      <returns>Der neu interpretierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorInt32``1(System.Numerics.Vector{``0})">
      <summary>Interpretiert die Bits eines angegebenen Vektors in die eines Vektors von ganzen Zahlen um.</summary>
      <param name="value">Der Quellvektor.</param>
      <typeparam name="T">Der Vektortyp. <c>T</c> kann ein beliebiger primitiver numerischer Typ sein.</typeparam>
      <returns>Der neu interpretierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorInt64``1(System.Numerics.Vector{``0})">
      <summary>Interpretiert die Bits eines angegebenen Vektors in die eines Vektors von langen ganzen Zahlen um.</summary>
      <param name="value">Der Quellvektor.</param>
      <typeparam name="T">Der Vektortyp. <c>T</c> kann ein beliebiger primitiver numerischer Typ sein.</typeparam>
      <returns>Der neu interpretierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorSByte``1(System.Numerics.Vector{``0})">
      <summary>Interpretiert die Bits eines angegebenen Vektors in die eines Vektors von Bytes mit Vorzeichen um.</summary>
      <param name="value">Der Quellvektor.</param>
      <typeparam name="T">Der Vektortyp. <c>T</c> kann ein beliebiger primitiver numerischer Typ sein.</typeparam>
      <returns>Der neu interpretierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorSingle``1(System.Numerics.Vector{``0})">
      <summary>Interpretiert die Bits eines angegebenen Vektors in die eines Vektors mit Gleitkomma und einfacher Genauigkeit um.</summary>
      <param name="value">Der Quellvektor.</param>
      <typeparam name="T">Der Vektortyp. <c>T</c> kann ein beliebiger primitiver numerischer Typ sein.</typeparam>
      <returns>Der neu interpretierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorUInt16``1(System.Numerics.Vector{``0})">
      <summary>Interpretiert die Bits eines angegebenen Vektors in die eines Vektors von ganzen 16-Bit-Zahlen ohne Vorzeichen um.</summary>
      <param name="value">Der Quellvektor.</param>
      <typeparam name="T">Der Vektortyp. <c>T</c> kann ein beliebiger primitiver numerischer Typ sein.</typeparam>
      <returns>Der neu interpretierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorUInt32``1(System.Numerics.Vector{``0})">
      <summary>Interpretiert die Bits eines angegebenen Vektors in die eines Vektors von ganzen Zahlen ohne Vorzeichen um.</summary>
      <param name="value">Der Quellvektor.</param>
      <typeparam name="T">Der Vektortyp. <c>T</c> kann ein beliebiger primitiver numerischer Typ sein.</typeparam>
      <returns>Der neu interpretierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorUInt64``1(System.Numerics.Vector{``0})">
      <summary>Interpretiert die Bits eines angegebenen Vektors in die eines Vektors von langen ganzen Zahlen ohne Vorzeichen um.</summary>
      <param name="value">Der Quellvektor.</param>
      <typeparam name="T">Der Vektortyp. <c>T</c> kann ein beliebiger primitiver numerischer Typ sein.</typeparam>
      <returns>Der neu interpretierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.BitwiseAnd``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Gibt einen neuen Vektor zurück, indem für jedes Elementpaar in zwei Vektoren eine bitweise <see langword="And" />-Operation durchgeführt wird.</summary>
      <param name="left">Der erste Vektor.</param>
      <param name="right">Der zweite Vektor.</param>
      <typeparam name="T">Der Vektortyp. <c>T</c> kann ein beliebiger primitiver numerischer Typ sein.</typeparam>
      <returns>Der Ergebnisvektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.BitwiseOr``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Gibt einen neuen Vektor zurück, indem für jedes Elementpaar in zwei Vektoren eine bitweise <see langword="Or" />-Operation durchgeführt wird.</summary>
      <param name="left">Der erste Vektor.</param>
      <param name="right">Der zweite Vektor.</param>
      <typeparam name="T">Der Vektortyp. <c>T</c> kann ein beliebiger primitiver numerischer Typ sein.</typeparam>
      <returns>Der Ergebnisvektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>Erstellt einen neuen Vektor mit einfacher Genauigkeit mit Elementen, die zwischen zwei angegebenen Quellvektoren mit einfacher Genauigkeit basierend auf einem integralen Maskierungsvektor ausgewählt wurden.</summary>
      <param name="condition">Der zum Steuern der Auswahl verwendete integrale Maskierungsvektor.</param>
      <param name="left">Der erste Quellvektor.</param>
      <param name="right">Der zweite Quellvektor.</param>
      <returns>Der neue Vektor mit Elementen, die basierend auf der Maske ausgewählt wurden.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>Erstellt einen neuen Vektor mit doppelter Genauigkeit mit Elementen, die zwischen zwei angegebenen Quellvektoren mit doppelter Genauigkeit basierend auf einem integralen Maskierungsvektor ausgewählt wurden.</summary>
      <param name="condition">Der zum Steuern der Auswahl verwendete integrale Maskierungsvektor.</param>
      <param name="left">Der erste Quellvektor.</param>
      <param name="right">Der zweite Quellvektor.</param>
      <returns>Der neue Vektor mit Elementen, die basierend auf der Maske ausgewählt wurden.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConditionalSelect``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Erstellt einen neuen Vektor eines angegebenen Typs mit Elementen, die zwischen zwei angegebenen Quellvektoren desselben Typs basierend auf einem integralen Maskierungsvektor ausgewählt wurden.</summary>
      <param name="condition">Der zum Steuern der Auswahl verwendete integrale Maskierungsvektor.</param>
      <param name="left">Der erste Quellvektor.</param>
      <param name="right">Der zweite Quellvektor.</param>
      <typeparam name="T">Der Vektortyp. <c>T</c> kann ein beliebiger primitiver numerischer Typ sein.</typeparam>
      <returns>Der neue Vektor mit Elementen, die basierend auf der Maske ausgewählt wurden.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToDouble(System.Numerics.Vector{System.Int64})">
      <summary>Konvertiert einen <c>Vector&lt;Int64&gt;</c> in einen <c>Vector&lt;Double&gt;</c>.</summary>
      <param name="value">Der Quellvektor.</param>
      <returns>Der konvertierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToDouble(System.Numerics.Vector{System.UInt64})">
      <summary>Konvertiert einen <c>Vector&lt;UInt64&gt;</c> in einen <c>Vector&lt;Double&gt;</c>.</summary>
      <param name="value">Der Quellvektor.</param>
      <returns>Der konvertierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToInt32(System.Numerics.Vector{System.Single})">
      <summary>Konvertiert einen <c>Vector&lt;Single&gt;</c> in einen <c>Vector&lt;Int32&gt;</c>.</summary>
      <param name="value">Der Quellvektor.</param>
      <returns>Der konvertierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToInt64(System.Numerics.Vector{System.Double})">
      <summary>Konvertiert einen <c>Vector&lt;Double&gt;</c> in einen <c>Vector&lt;Int64&gt;</c>.</summary>
      <param name="value">Der Quellvektor.</param>
      <returns>Der konvertierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToSingle(System.Numerics.Vector{System.Int32})">
      <summary>Konvertiert einen <c>Vector&lt;Int32&gt;</c> in einen <c>Vector&lt;Single&gt;</c>.</summary>
      <param name="value">Der Quellvektor.</param>
      <returns>Der konvertierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToSingle(System.Numerics.Vector{System.UInt32})">
      <summary>Konvertiert einen <c>Vector&lt;UInt32&gt;</c> in einen <c>Vector&lt;Single&gt;</c>.</summary>
      <param name="value">Der Quellvektor.</param>
      <returns>Der konvertierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToUInt32(System.Numerics.Vector{System.Single})">
      <summary>Konvertiert einen <c>Vector&lt;Single&gt;</c> in einen <c>Vector&lt;UInt32&gt;</c>.</summary>
      <param name="value">Der Quellvektor.</param>
      <returns>Der konvertierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToUInt64(System.Numerics.Vector{System.Double})">
      <summary>Konvertiert einen <c>Vector&lt;Double&gt;</c> in einen <c>Vector&lt;UInt64&gt;</c>.</summary>
      <param name="value">Der Quellvektor.</param>
      <returns>Der konvertierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Divide``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Gibt einen neuen Vektor zurück, dessen Werte sich aus der Division der Elemente des ersten Vektors durch die entsprechenden Elemente im zweiten Vektor ergeben.</summary>
      <param name="left">Der erste Vektor.</param>
      <param name="right">Der zweite Vektor.</param>
      <typeparam name="T">Der Vektortyp. <c>T</c> kann ein beliebiger primitiver numerischer Typ sein.</typeparam>
      <returns>Der geteilte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Dot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Gibt das Skalarprodukt zweier Vektoren zurück.</summary>
      <param name="left">Der erste Vektor.</param>
      <param name="right">Der zweite Vektor.</param>
      <typeparam name="T">Der Vektortyp. <c>T</c> kann ein beliebiger primitiver numerischer Typ sein.</typeparam>
      <returns>Das Skalarprodukt.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>Gibt einen neuen integralen Vektor zurück, dessen Elemente darauf hinweisen, ob die Elemente in zwei angegebenen Vektoren mit doppelter Genauigkeit gleich sind.</summary>
      <param name="left">Der erste zu vergleichende Vektor.</param>
      <param name="right">Der zweite zu vergleichende Vektor.</param>
      <returns>Der resultierende integrale Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>Gibt einen neuen integralen Vektor zurück, dessen Elemente darauf hinweisen, ob die Elemente in zwei angegebenen integralen Vektoren gleich sind.</summary>
      <param name="left">Der erste zu vergleichende Vektor.</param>
      <param name="right">Der zweite zu vergleichende Vektor.</param>
      <returns>Der resultierende integrale Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>Gibt einen neuen Vektor zurück, dessen Elemente darauf hinweisen, ob die Elemente in zwei angegebenen langen ganzzahligen Vektoren gleich sind.</summary>
      <param name="left">Der erste zu vergleichende Vektor.</param>
      <param name="right">Der zweite zu vergleichende Vektor.</param>
      <returns>Der resultierende lange ganzzahlige Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>Gibt einen neuen integralen Vektor zurück, dessen Elemente darauf hinweisen, ob die Elemente in zwei angegebenen Vektoren mit einfacher Genauigkeit gleich sind.</summary>
      <param name="left">Der erste zu vergleichende Vektor.</param>
      <param name="right">Der zweite zu vergleichende Vektor.</param>
      <returns>Der resultierende integrale Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Gibt einen neuen Vektor eines angegebenen Typs zurück, dessen Elemente darauf hinweisen, ob die Elemente in zwei angegebenen Vektoren desselben Typs gleich sind.</summary>
      <param name="left">Der erste zu vergleichende Vektor.</param>
      <param name="right">Der zweite zu vergleichende Vektor.</param>
      <typeparam name="T">Der Vektortyp. <c>T</c> kann ein beliebiger primitiver numerischer Typ sein.</typeparam>
      <returns>Der Ergebnisvektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.EqualsAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Gibt einen Wert zurück, der angibt, ob jedes Elementpaar in den angegebenen Vektoren gleich ist.</summary>
      <param name="left">Der erste zu vergleichende Vektor.</param>
      <param name="right">Der zweite zu vergleichende Vektor.</param>
      <typeparam name="T">Der Vektortyp. <c>T</c> kann ein beliebiger primitiver numerischer Typ sein.</typeparam>
      <returns>
        <see langword="true" />, wenn alle Elemente in <paramref name="left" /> und <paramref name="right" /> sind gleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.EqualsAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Gibt einen Wert zurück, der angibt, ob jedes einzelne Elementpaar in den angegebenen Vektoren gleich ist.</summary>
      <param name="left">Der erste zu vergleichende Vektor.</param>
      <param name="right">Der zweite zu vergleichende Vektor.</param>
      <typeparam name="T">Der Vektortyp. <c>T</c> kann ein beliebiger primitiver numerischer Typ sein.</typeparam>
      <returns>
        <see langword="true" />, wenn ein beliebiges Elementpaar in <paramref name="left" /> und <paramref name="right" /> gleich ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>Gibt einen neuen integralen Vektor zurück, dessen Elemente darauf hinweisen, ob die Elemente in einem Vektor mit Gleitkomma und doppelter Genauigkeit größer sind als die entsprechenden Elemente in einem zweiten Vektor mit Gleitkomma und doppelter Genauigkeit.</summary>
      <param name="left">Der erste zu vergleichende Vektor.</param>
      <param name="right">Der zweite zu vergleichende Vektor.</param>
      <returns>Der resultierende integrale Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>Gibt einen neuen integralen Vektor zurück, dessen Elemente darauf hinweisen, ob die Elemente in einem integralen Vektor größer sind als die entsprechenden Elemente in einem zweiten integralen Vektor.</summary>
      <param name="left">Der erste zu vergleichende Vektor.</param>
      <param name="right">Der zweite zu vergleichende Vektor.</param>
      <returns>Der resultierende integrale Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>Gibt einen neuen langen ganzzahligen Vektor zurück, dessen Elemente darauf hinweisen, ob die Elemente in einem langen ganzzahligen Vektor größer sind als die entsprechenden Elemente in einem zweiten langen ganzzahligen Vektor.</summary>
      <param name="left">Der erste zu vergleichende Vektor.</param>
      <param name="right">Der zweite zu vergleichende Vektor.</param>
      <returns>Der resultierende lange ganzzahlige Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>Gibt einen neuen integralen Vektor zurück, dessen Elemente darauf hinweisen, ob die Elemente in einem Vektor mit Gleitkomma und einfacher Genauigkeit größer sind als die entsprechenden Elemente in einem zweiten Vektor mit Gleitkomma und einfacher Genauigkeit.</summary>
      <param name="left">Der erste zu vergleichende Vektor.</param>
      <param name="right">Der zweite zu vergleichende Vektor.</param>
      <returns>Der resultierende integrale Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Gibt einen neuen Vektor zurück, dessen Elemente darauf hinweisen, ob die Elemente in einem Vektor eines angegebenen Typs größer sind als die entsprechenden Elemente im zweiten Vektor desselben Typs.</summary>
      <param name="left">Der erste zu vergleichende Vektor.</param>
      <param name="right">Der zweite zu vergleichende Vektor.</param>
      <typeparam name="T">Der Vektortyp. <c>T</c> kann ein beliebiger primitiver numerischer Typ sein.</typeparam>
      <returns>Der Ergebnisvektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Gibt einen Wert zurück, der angibt, ob alle Elemente im ersten Vektor größer sind als die entsprechenden Elemente im zweiten Vektor.</summary>
      <param name="left">Der erste zu vergleichende Vektor.</param>
      <param name="right">Der zweite zu vergleichende Vektor.</param>
      <typeparam name="T">Der Vektortyp. <c>T</c> kann ein beliebiger primitiver numerischer Typ sein.</typeparam>
      <returns>
        <see langword="true" />, wenn alle Elemente in <paramref name="left" /> größer sind als die entsprechenden Elemente in <paramref name="right" />; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Gibt einen Wert zurück, der angibt, ob ein beliebiges Element im ersten Vektor größer ist als das entsprechende Element im zweiten Vektor.</summary>
      <param name="left">Der erste zu vergleichende Vektor.</param>
      <param name="right">Der zweite zu vergleichende Vektor.</param>
      <typeparam name="T">Der Vektortyp. <c>T</c> kann ein beliebiger primitiver numerischer Typ sein.</typeparam>
      <returns>
        <see langword="true" />, wenn ein Element in <paramref name="left" /> größer ist als das entsprechende Element in <paramref name="right" />; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>Gibt einen neuen integralen Vektor zurück, dessen Elemente darauf hinweisen, ob die Elemente in einem Vektor größer oder gleich den entsprechenden Elementen im zweiten Vektor mit Gleitkomma und doppelter Genauigkeit sind.</summary>
      <param name="left">Der erste zu vergleichende Vektor.</param>
      <param name="right">Der zweite zu vergleichende Vektor.</param>
      <returns>Der resultierende integrale Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>Gibt einen neuen integralen Vektor zurück, dessen Elemente darauf hinweisen, ob die Elemente in einem integralen Vektor größer oder gleich den entsprechenden Elementen im zweiten integralen Vektor sind.</summary>
      <param name="left">Der erste zu vergleichende Vektor.</param>
      <param name="right">Der zweite zu vergleichende Vektor.</param>
      <returns>Der resultierende integrale Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>Gibt einen neuen langen ganzzahligen Vektor zurück, dessen Elemente darauf hinweisen, ob die Elemente in einem langen ganzzahligen Vektor größer oder gleich den entsprechenden Elementen in einem zweiten langen ganzzahligen Vektor sind.</summary>
      <param name="left">Der erste zu vergleichende Vektor.</param>
      <param name="right">Der zweite zu vergleichende Vektor.</param>
      <returns>Der resultierende lange ganzzahlige Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>Gibt einen neuen integralen Vektor zurück, dessen Elemente darauf hinweisen, ob die Elemente in einem Vektor größer oder gleich den entsprechenden Elementen im zweiten Vektor mit Gleitkomma und einfacher Genauigkeit sind.</summary>
      <param name="left">Der erste zu vergleichende Vektor.</param>
      <param name="right">Der zweite zu vergleichende Vektor.</param>
      <returns>Der resultierende integrale Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Gibt einen neuen Vektor zurück, dessen Elemente darauf hinweisen, ob die Elemente in einem Vektor eines angegebenen Typs größer oder gleich den entsprechenden Elementen im zweiten Vektor desselben Typs sind.</summary>
      <param name="left">Der erste zu vergleichende Vektor.</param>
      <param name="right">Der zweite zu vergleichende Vektor.</param>
      <typeparam name="T">Der Vektortyp. <c>T</c> kann ein beliebiger primitiver numerischer Typ sein.</typeparam>
      <returns>Der Ergebnisvektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Gibt einen Wert zurück, der angibt, ob alle Elemente im ersten Vektor größer oder gleich allen entsprechenden Elementen im zweiten Vektor sind.</summary>
      <param name="left">Der erste zu vergleichende Vektor.</param>
      <param name="right">Der zweite zu vergleichende Vektor.</param>
      <typeparam name="T">Der Vektortyp. <c>T</c> kann ein beliebiger primitiver numerischer Typ sein.</typeparam>
      <returns>
        <see langword="true" />, wenn alle Elemente in <paramref name="left" /> größer oder gleich den entsprechenden Elementen in <paramref name="right" /> sind; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Gibt einen Wert zurück, der angibt, ob ein beliebiges Element im ersten Vektor größer oder gleich dem entsprechenden Element im zweiten Vektor ist.</summary>
      <param name="left">Der erste zu vergleichende Vektor.</param>
      <param name="right">Der zweite zu vergleichende Vektor.</param>
      <typeparam name="T">Der Vektortyp. <c>T</c> kann ein beliebiger primitiver numerischer Typ sein.</typeparam>
      <returns>
        <see langword="true" />, wenn ein Element in <paramref name="left" /> größer oder gleich dem entsprechenden Element in <paramref name="right" /> ist; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.Vector.IsHardwareAccelerated">
      <summary>Ruft einen Wert ab, der angibt, ob die Vektoroperationen einer Hardwarebeschleunigung durch systeminterne JIT-Unterstützung unterliegen.</summary>
      <returns>
        <see langword="true" />, wenn Vektoroperationen der Hardwarebeschleunigung unterliegen; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>Gibt einen neuen integralen Vektor zurück, dessen Elemente darauf hinweisen, ob die Elemente in einem Vektor mit Gleitkomma und doppelter Genauigkeit kleiner sind als die entsprechenden Elemente in einem zweiten Vektor mit Gleitkomma und doppelter Genauigkeit.</summary>
      <param name="left">Der erste zu vergleichende Vektor.</param>
      <param name="right">Der zweite zu vergleichende Vektor.</param>
      <returns>Der resultierende integrale Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>Gibt einen neuen integralen Vektor zurück, dessen Elemente darauf hinweisen, ob die Elemente in einem integralen Vektor kleiner sind als die entsprechenden Elemente in einem zweiten integralen Vektor.</summary>
      <param name="left">Der erste zu vergleichende Vektor.</param>
      <param name="right">Der zweite zu vergleichende Vektor.</param>
      <returns>Der resultierende integrale Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>Gibt einen neuen langen ganzzahligen Vektor zurück, dessen Elemente darauf hinweisen, ob die Elemente in einem langen ganzzahligen Vektor kleiner sind als die entsprechenden Elemente in einem zweiten langen ganzzahligen Vektor.</summary>
      <param name="left">Der erste zu vergleichende Vektor.</param>
      <param name="right">Der zweite zu vergleichende Vektor.</param>
      <returns>Der resultierende lange ganzzahlige Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>Gibt einen neuen integralen Vektor zurück, dessen Elemente darauf hinweisen, ob die Elemente in einem Vektor mit einfacher Genauigkeit kleiner sind als die entsprechenden Elemente in einem zweiten Vektor mit einfacher Genauigkeit.</summary>
      <param name="left">Der erste zu vergleichende Vektor.</param>
      <param name="right">Der zweite zu vergleichende Vektor.</param>
      <returns>Der resultierende integrale Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Gibt einen neuen Vektor eines angegebenen Typs zurück, dessen Elemente darauf hinweisen, ob die Elemente in einem Vektor kleiner sind als die entsprechenden Elemente im zweiten Vektor.</summary>
      <param name="left">Der erste zu vergleichende Vektor.</param>
      <param name="right">Der zweite zu vergleichende Vektor.</param>
      <typeparam name="T">Der Vektortyp. <c>T</c> kann ein beliebiger primitiver numerischer Typ sein.</typeparam>
      <returns>Der Ergebnisvektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Gibt einen Wert zurück, der angibt, ob alle Elemente im ersten Vektor kleiner sind als die entsprechenden Elemente im zweiten Vektor.</summary>
      <param name="left">Der erste zu vergleichende Vektor.</param>
      <param name="right">Der zweite zu vergleichende Vektor.</param>
      <typeparam name="T">Der Vektortyp. <c>T</c> kann ein beliebiger primitiver numerischer Typ sein.</typeparam>
      <returns>
        <see langword="true" />, wenn alle Elemente in <paramref name="left" /> kleiner sind als die entsprechenden Elemente in <paramref name="right" />; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Gibt einen Wert zurück, der angibt, ob ein beliebiges Element im ersten Vektor kleiner ist als das entsprechende Element im zweiten Vektor.</summary>
      <param name="left">Der erste zu vergleichende Vektor.</param>
      <param name="right">Der zweite zu vergleichende Vektor.</param>
      <typeparam name="T">Der Vektortyp. <c>T</c> kann ein beliebiger primitiver numerischer Typ sein.</typeparam>
      <returns>
        <see langword="true" />, wenn ein Element in <paramref name="left" /> kleiner ist als das entsprechende Element in <paramref name="right" />; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>Gibt einen neuen integralen Vektor zurück, dessen Elemente darauf hinweisen, ob die Elemente in einem Vektor mit Gleitkomma und doppelter Genauigkeit kleiner oder gleich den entsprechenden Elementen in einem zweiten Vektor mit Gleitkomma und doppelter Genauigkeit sind.</summary>
      <param name="left">Der erste zu vergleichende Vektor.</param>
      <param name="right">Der zweite zu vergleichende Vektor.</param>
      <returns>Der resultierende integrale Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>Gibt einen neuen integralen Vektor zurück, dessen Elemente darauf hinweisen, ob die Elemente in einem integralen Vektor kleiner oder gleich den entsprechenden Elementen in einem zweiten integralen Vektor sind.</summary>
      <param name="left">Der erste zu vergleichende Vektor.</param>
      <param name="right">Der zweite zu vergleichende Vektor.</param>
      <returns>Der resultierende integrale Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>Gibt einen neuen langen ganzzahligen Vektor zurück, dessen Elemente darauf hinweisen, ob die Elemente in einem langen ganzzahligen Vektor kleiner oder gleich den entsprechenden Elementen in einem zweiten langen ganzzahligen Vektor sind.</summary>
      <param name="left">Der erste zu vergleichende Vektor.</param>
      <param name="right">Der zweite zu vergleichende Vektor.</param>
      <returns>Der resultierende lange ganzzahlige Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>Gibt einen neuen integralen Vektor zurück, dessen Elemente darauf hinweisen, ob die Elemente in einem Vektor mit Gleitkomma und einfacher Genauigkeit kleiner oder gleich den entsprechenden Elementen in einem zweiten Vektor mit Gleitkomma und einfacher Genauigkeit sind.</summary>
      <param name="left">Der erste zu vergleichende Vektor.</param>
      <param name="right">Der zweite zu vergleichende Vektor.</param>
      <returns>Der resultierende integrale Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Gibt einen neuen Vektor zurück, dessen Elemente darauf hinweisen, ob die Elemente in einem Vektor kleiner oder gleich den entsprechenden Elementen im zweiten Vektor sind.</summary>
      <param name="left">Der erste zu vergleichende Vektor.</param>
      <param name="right">Der zweite zu vergleichende Vektor.</param>
      <typeparam name="T">Der Vektortyp. <c>T</c> kann ein beliebiger primitiver numerischer Typ sein.</typeparam>
      <returns>Der Ergebnisvektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Gibt einen Wert zurück, der angibt, ob alle Elemente im ersten Vektor kleiner oder gleich den entsprechenden Elementen im zweiten Vektor sind.</summary>
      <param name="left">Der erste zu vergleichende Vektor.</param>
      <param name="right">Der zweite zu vergleichende Vektor.</param>
      <typeparam name="T">Der Vektortyp. <c>T</c> kann ein beliebiger primitiver numerischer Typ sein.</typeparam>
      <returns>
        <see langword="true" />, wenn alle Elemente in <paramref name="left" /> kleiner oder gleich den entsprechenden Elementen in <paramref name="right" /> sind; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Gibt einen Wert zurück, der angibt, ob ein beliebiges Element im ersten Vektor kleiner oder gleich dem entsprechenden Element im zweiten Vektor ist.</summary>
      <param name="left">Der erste zu vergleichende Vektor.</param>
      <param name="right">Der zweite zu vergleichende Vektor.</param>
      <typeparam name="T">Der Vektortyp. <c>T</c> kann ein beliebiger primitiver numerischer Typ sein.</typeparam>
      <returns>
        <see langword="true" />, wenn ein Element in <paramref name="left" /> kleiner oder gleich dem entsprechenden Element in <paramref name="right" /> ist; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Max``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Gibt einen neuen Vektor zurück, dessen Elemente dem Höchstwert der einzelnen Elementpaare in den beiden angegebenen Vektoren entsprechen.</summary>
      <param name="left">Der erste zu vergleichende Vektor.</param>
      <param name="right">Der zweite zu vergleichende Vektor.</param>
      <typeparam name="T">Der Vektortyp. <c>T</c> kann ein beliebiger primitiver numerischer Typ sein.</typeparam>
      <returns>Der maximale Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Min``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Gibt einen neuen Vektor zurück, dessen Elemente dem Mindestwert der einzelnen Elementpaare in den beiden angegebenen Vektoren entsprechen.</summary>
      <param name="left">Der erste zu vergleichende Vektor.</param>
      <param name="right">Der zweite zu vergleichende Vektor.</param>
      <typeparam name="T">Der Vektortyp. <c>T</c> kann ein beliebiger primitiver numerischer Typ sein.</typeparam>
      <returns>Der minimale Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Multiply``1(``0,System.Numerics.Vector{``0})">
      <summary>Gibt einen neuen Vektor zurück, dessen Werte sich aus der Multiplikation eines Skalarwerts mit jedem der Werte eines angegebenen Vektors ergeben.</summary>
      <param name="left">Der Skalarwert.</param>
      <param name="right">Der Vektor.</param>
      <typeparam name="T">Der Vektortyp. <c>T</c> kann ein beliebiger primitiver numerischer Typ sein.</typeparam>
      <returns>Der skalierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Multiply``1(System.Numerics.Vector{``0},``0)">
      <summary>Gibt einen neuen Vektor zurück, dessen Werte den jeweils mit einem Skalarwert multiplizierten Werten eines angegebenen Vektors entsprechen.</summary>
      <param name="left">Der Vektor.</param>
      <param name="right">Der Skalarwert.</param>
      <typeparam name="T">Der Vektortyp. <c>T</c> kann ein beliebiger primitiver numerischer Typ sein.</typeparam>
      <returns>Der skalierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Multiply``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Gibt einen neuen Vektor zurück, dessen Werte dem Produkt der einzelnen Elementpaare in zwei angegebenen Vektoren entsprechen.</summary>
      <param name="left">Der erste Vektor.</param>
      <param name="right">Der zweite Vektor.</param>
      <typeparam name="T">Der Vektortyp. <c>T</c> kann ein beliebiger primitiver numerischer Typ sein.</typeparam>
      <returns>Der elementweise Produktvektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>Schränkt zwei <c>Vector&lt;Double&gt;</c>-Instanzen auf einen <c>Vector&lt;Single&gt;</c> ein.</summary>
      <param name="source1">Der erste Quellvektor, dessen Elemente zu den Elementen mit niedrigerem Indexwerten des Rückgabewerts werden.</param>
      <param name="source2">Der zweite Quellvektor, dessen Elemente zu den Elementen mit höheren Indexwerten des Rückgabewerts werden.</param>
      <returns>Ein <c>Vector&lt;Single&gt;</c> mit Elementen, die von den Quellvektoren eingeschränkt wurden.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int16},System.Numerics.Vector{System.Int16})">
      <summary>Schränkt zwei <c>Vector&lt;Int16&gt;</c>-Instanzen auf einen <c>Vector&lt;SByte&gt;</c> ein.</summary>
      <param name="source1">Der erste Quellvektor, dessen Elemente zu den Elementen mit niedrigerem Indexwerten des Rückgabewerts werden.</param>
      <param name="source2">Der zweite Quellvektor, dessen Elemente zu den Elementen mit höheren Indexwerten des Rückgabewerts werden.</param>
      <returns>Ein <c>Vector&lt;SByte&gt;</c> mit Elementen, die von den Quellvektoren eingeschränkt wurden.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>Schränkt zwei <c>Vector&lt;Int32&gt;</c>-Instanzen auf einen <c>Vector&lt;Int16&gt;</c> ein.</summary>
      <param name="source1">Der erste Quellvektor, dessen Elemente zu den Elementen mit niedrigerem Indexwerten des Rückgabewerts werden.</param>
      <param name="source2">Der zweite Quellvektor, dessen Elemente zu den Elementen mit höheren Indexwerten des Rückgabewerts werden.</param>
      <returns>Ein <c>Vector&lt;Int16&gt;</c> mit Elementen, die von den Quellvektoren eingeschränkt wurden.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>Schränkt zwei <c>Vector&lt;Int64&gt;</c>-Instanzen auf einen <c>Vector&lt;Int32&gt;</c> ein.</summary>
      <param name="source1">Der erste Quellvektor, dessen Elemente zu den Elementen mit niedrigerem Indexwerten des Rückgabewerts werden.</param>
      <param name="source2">Der zweite Quellvektor, dessen Elemente zu den Elementen mit höheren Indexwerten des Rückgabewerts werden.</param>
      <returns>Ein <c>Vector&lt;Int32&gt;</c> mit Elementen, die von den Quellvektoren eingeschränkt wurden.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt16},System.Numerics.Vector{System.UInt16})">
      <summary>Schränkt zwei <c>Vector&lt;UInt16&gt;</c>-Instanzen auf einen <c>Vector&lt;Byte&gt;</c> ein.</summary>
      <param name="source1">Der erste Quellvektor, dessen Elemente zu den Elementen mit niedrigerem Indexwerten des Rückgabewerts werden.</param>
      <param name="source2">Der zweite Quellvektor, dessen Elemente zu den Elementen mit höheren Indexwerten des Rückgabewerts werden.</param>
      <returns>Ein <c>Vector&lt;Byte&gt;</c> mit Elementen, die von den Quellvektoren eingeschränkt wurden.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt32},System.Numerics.Vector{System.UInt32})">
      <summary>Schränkt zwei <c>Vector&lt;UInt32&gt;</c>-Instanzen auf einen <c>Vector&lt;UInt16&gt;</c> ein.</summary>
      <param name="source1">Der erste Quellvektor, dessen Elemente zu den Elementen mit niedrigerem Indexwerten des Rückgabewerts werden.</param>
      <param name="source2">Der zweite Quellvektor, dessen Elemente zu den Elementen mit höheren Indexwerten des Rückgabewerts werden.</param>
      <returns>Ein <c>Vector&lt;UInt16&gt;</c> mit Elementen, die von den Quellvektoren eingeschränkt wurden.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt64},System.Numerics.Vector{System.UInt64})">
      <summary>Schränkt zwei <c>Vector&lt;UInt64&gt;</c>-Instanzen auf einen <c>Vector&lt;UInt32&gt;</c> ein.</summary>
      <param name="source1">Der erste Quellvektor, dessen Elemente zu den Elementen mit niedrigerem Indexwerten des Rückgabewerts werden.</param>
      <param name="source2">Der zweite Quellvektor, dessen Elemente zu den Elementen mit höheren Indexwerten des Rückgabewerts werden.</param>
      <returns>Ein <c>Vector&lt;UInt32&gt;</c> mit Elementen, die von den Quellvektoren eingeschränkt wurden.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Negate``1(System.Numerics.Vector{``0})">
      <summary>Gibt einen neuen Vektor zurück, dessen Elemente die Negation des entsprechenden Elements im angegebenen Vektor sind.</summary>
      <param name="value">Der Quellvektor.</param>
      <typeparam name="T">Der Vektortyp. <c>T</c> kann ein beliebiger primitiver numerischer Typ sein.</typeparam>
      <returns>Der negierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.OnesComplement``1(System.Numerics.Vector{``0})">
      <summary>Gibt einen neuen Vektor zurück, dessen Elemente sich aus dem Einerkomplement der Elemente eines angegebenen Vektors ergeben.</summary>
      <param name="value">Der Quellvektor.</param>
      <typeparam name="T">Der Vektortyp. <c>T</c> kann ein beliebiger primitiver numerischer Typ sein.</typeparam>
      <returns>Der Ergebnisvektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.SquareRoot``1(System.Numerics.Vector{``0})">
      <summary>Gibt einen neuen Vektor zurück, dessen Elemente die Quadratwurzeln der Elemente eines angegebenen Vektors sind.</summary>
      <param name="value">Der Quellvektor.</param>
      <typeparam name="T">Der Vektortyp. <c>T</c> kann ein beliebiger primitiver numerischer Typ sein.</typeparam>
      <returns>Der Quadratwurzelvektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Subtract``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Gibt einen neuen Vektor zurück, dessen Werte sich aus der Differenz zwischen den Elementen im zweiten Vektor und den entsprechenden Elementen im ersten Vektor ergeben.</summary>
      <param name="left">Der erste Vektor.</param>
      <param name="right">Der zweite Vektor.</param>
      <typeparam name="T">Der Vektortyp. <c>T</c> kann ein beliebiger primitiver numerischer Typ sein.</typeparam>
      <returns>Der Differenzvektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Byte},System.Numerics.Vector{System.UInt16}@,System.Numerics.Vector{System.UInt16}@)">
      <summary>Erweitert einen <c>Vector&lt;Byte&gt;</c> auf zwei <c>Vector&lt;UInt16&gt;</c>-Instanzen.</summary>
      <param name="source">Der Quellvektor, dessen Elemente in die Ausgaben erweitert werden.</param>
      <param name="dest1">Der erste Ausgabevektor, dessen Elemente die erweiterten Elemente aus den unteren Indizes im Quellvektor enthalten.</param>
      <param name="dest2">Der zweite Ausgabevektor, dessen Elemente die erweiterten Elemente aus den oberen Indizes im Quellvektor enthalten.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Int16},System.Numerics.Vector{System.Int32}@,System.Numerics.Vector{System.Int32}@)">
      <summary>Erweitert einen <c>Vector&lt;Int16&gt;</c> auf zwei <c>Vector&lt;Int32&gt;</c>-Instanzen.</summary>
      <param name="source">Der Quellvektor, dessen Elemente in die Ausgaben erweitert werden.</param>
      <param name="dest1">Der erste Ausgabevektor, dessen Elemente die erweiterten Elemente aus den unteren Indizes im Quellvektor enthalten.</param>
      <param name="dest2">Der zweite Ausgabevektor, dessen Elemente die erweiterten Elemente aus den oberen Indizes im Quellvektor enthalten.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int64}@,System.Numerics.Vector{System.Int64}@)">
      <summary>Erweitert einen <c>Vector&lt;Int32&gt;</c> auf zwei <c>Vector&lt;Int64&gt;</c>-Instanzen.</summary>
      <param name="source">Der Quellvektor, dessen Elemente in die Ausgaben erweitert werden.</param>
      <param name="dest1">Der erste Ausgabevektor, dessen Elemente die erweiterten Elemente aus den unteren Indizes im Quellvektor enthalten.</param>
      <param name="dest2">Der zweite Ausgabevektor, dessen Elemente die erweiterten Elemente aus den oberen Indizes im Quellvektor enthalten.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.SByte},System.Numerics.Vector{System.Int16}@,System.Numerics.Vector{System.Int16}@)">
      <summary>Erweitert einen <c>Vector&lt;SByte&gt;</c> auf zwei <c>Vector&lt;Int16&gt;</c>-Instanzen.</summary>
      <param name="source">Der Quellvektor, dessen Elemente in die Ausgaben erweitert werden.</param>
      <param name="dest1">Der erste Ausgabevektor, dessen Elemente die erweiterten Elemente aus den unteren Indizes im Quellvektor enthalten.</param>
      <param name="dest2">Der zweite Ausgabevektor, dessen Elemente die erweiterten Elemente aus den oberen Indizes im Quellvektor enthalten.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Double}@,System.Numerics.Vector{System.Double}@)">
      <summary>Erweitert einen <c>Vector&lt;Single&gt;</c> auf zwei <c>Vector&lt;Double&gt;</c>-Instanzen.</summary>
      <param name="source">Der Quellvektor, dessen Elemente in die Ausgaben erweitert werden.</param>
      <param name="dest1">Der erste Ausgabevektor, dessen Elemente die erweiterten Elemente aus den unteren Indizes im Quellvektor enthalten.</param>
      <param name="dest2">Der zweite Ausgabevektor, dessen Elemente die erweiterten Elemente aus den oberen Indizes im Quellvektor enthalten.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.UInt16},System.Numerics.Vector{System.UInt32}@,System.Numerics.Vector{System.UInt32}@)">
      <summary>Erweitert einen <c>Vector&lt;UInt16&gt;</c> auf zwei <c>Vector&lt;UInt32&gt;</c>-Instanzen.</summary>
      <param name="source">Der Quellvektor, dessen Elemente in die Ausgaben erweitert werden.</param>
      <param name="dest1">Der erste Ausgabevektor, dessen Elemente die erweiterten Elemente aus den unteren Indizes im Quellvektor enthalten.</param>
      <param name="dest2">Der zweite Ausgabevektor, dessen Elemente die erweiterten Elemente aus den oberen Indizes im Quellvektor enthalten.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.UInt32},System.Numerics.Vector{System.UInt64}@,System.Numerics.Vector{System.UInt64}@)">
      <summary>Erweitert einen <c>Vector&lt;UInt32&gt;</c> auf zwei <c>Vector&lt;UInt64&gt;</c>-Instanzen.</summary>
      <param name="source">Der Quellvektor, dessen Elemente in die Ausgaben erweitert werden.</param>
      <param name="dest1">Der erste Ausgabevektor, dessen Elemente die erweiterten Elemente aus den unteren Indizes im Quellvektor enthalten.</param>
      <param name="dest2">Der zweite Ausgabevektor, dessen Elemente die erweiterten Elemente aus den oberen Indizes im Quellvektor enthalten.</param>
    </member>
    <member name="M:System.Numerics.Vector.Xor``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Gibt einen neuen Vektor zurück, indem für jedes Elementpaar in zwei Vektoren eine bitweise exklusive Oder-Operation (<see langword="XOr" />) durchgeführt wird.</summary>
      <param name="left">Der erste Vektor.</param>
      <param name="right">Der zweite Vektor.</param>
      <typeparam name="T">Der Vektortyp. <c>T</c> kann ein beliebiger primitiver numerischer Typ sein.</typeparam>
      <returns>Der Ergebnisvektor.</returns>
    </member>
    <member name="T:System.Numerics.Vector`1">
      <summary>Stellt einen einzelnen Vektor eines angegebenen numerischen Typs bereit, der für die Low-Level-Optimierung paralleler Algorithmen geeignet ist.</summary>
      <typeparam name="T">Der Vektortyp. <c>T</c> kann ein beliebiger primitiver numerischer Typ sein.</typeparam>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(`0)">
      <summary>Erstellt einen Vektor, dessen Komponenten einem bestimmten Typ entsprechen.</summary>
      <param name="value">Der numerische Typ, der den Typ der Komponenten im Vektor definiert.</param>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(`0[])">
      <summary>Erstellt einen Vektor aus einem angegebenen Array.</summary>
      <param name="values">Ein numerisches Array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(`0[],System.Int32)">
      <summary>Erstellt einen Vektor aus einem Array beginnend bei einer angegebenen Indexposition.</summary>
      <param name="values">Ein numerisches Array.</param>
      <param name="index">Die Indexanfangsposition, ab der der Vektor erstellt wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> ist kleiner als Null.

oder -
Die Länge von <paramref name="values" /> minus <paramref name="index" /> ist kleiner als <see cref="P:System.Numerics.Vector`1.Count" />.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(System.ReadOnlySpan{`0})">
      <summary>Erstellt einen Vektor aus dem angegebenen <see cref="T:System.ReadOnlySpan`1" />.</summary>
      <param name="values">Die Werte, die dem Vektor als schreibgeschützte Spanne von Objekten vom Typ T hinzugefügt werden sollen. Die Spanne muss mindestens <see cref="P:System.Numerics.Vector`1.Count" /> Elemente enthalten.</param>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(System.ReadOnlySpan{System.Byte})">
      <summary>Erstellt einen Vektor aus der angegebenen schreibgeschützten Spanne von Bytes.</summary>
      <param name="values">Eine schreibgeschützte Spanne von Bytes, die die Werte enthält, die dem Vektor hinzugefügt werden sollen. Die Spanne muss mindestens <see cref="P:System.Numerics.Vector`1.Count" /> Elemente enthalten.</param>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(System.Span{`0})">
      <summary>Erstellt einen Vektor aus dem angegebenen <see cref="T:System.Span`1" />.</summary>
      <param name="values">Die Werte, die dem Vektor als Spanne von Objekten vom Typ T hinzugefügt werden sollen. Die Spanne muss mindestens <see cref="P:System.Numerics.Vector`1.Count" /> Elemente enthalten.</param>
    </member>
    <member name="M:System.Numerics.Vector`1.CopyTo(`0[])">
      <summary>Kopiert die Vektorinstanz in ein angegebenes Zielarray.</summary>
      <param name="destination">Das Array, das eine Kopie der Vektorwerte erhalten soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Die Anzahl von Elementen im aktuellen Vektor ist größer als die Anzahl von Elementen, die im <paramref name="destination" />-Array verfügbar sind.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.CopyTo(`0[],System.Int32)">
      <summary>Kopiert die Vektorinstanz ab einer angegebenen Indexposition in ein angegebenes Zielarray.</summary>
      <param name="destination">Das Array, das eine Kopie der Vektorwerte erhalten soll.</param>
      <param name="startIndex">Der Startindex in <paramref name="destination" />, bei dem der Kopiervorgang beginnen soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Die Anzahl von Elementen in der aktuellen Instanz ist größer als die Anzahl von Elementen, die ab <paramref name="startIndex" /> bis zum Ende des <paramref name="destination" />-Arrays verfügbar sind.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> ist kleiner als 0 (null) oder größer als der letzte Index in <paramref name="destination" />.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.CopyTo(System.Span{`0})">
      <summary>Kopiert den Vektor zur angegebenen Spanne. .</summary>
      <param name="destination">Die Zielspanne, in die die Werte kopiert werden. Die Zielspanne muss mindestens die Größe <see cref="P:System.Numerics.Vector`1.Count" /> aufweisen.</param>
      <exception cref="T:System.ArgumentException">Die Anzahl der Elemente im Quellvektor ist größer als die in der Zielspanne verfügbare Anzahl.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.CopyTo(System.Span{System.Byte})">
      <summary>Kopiert den Vektor zum angegebenen <see cref="T:System.Span`1" />.</summary>
      <param name="destination">Die Zielspanne, in die die Werte kopiert werden. Die Zielspanne muss mindestens die Größe <see cref="P:System.Numerics.Vector`1.Count" /> aufweisen.</param>
      <exception cref="T:System.ArgumentException">Die Anzahl der Elemente im Quellvektor ist größer als die in der Zielspanne verfügbare Anzahl.</exception>
    </member>
    <member name="P:System.Numerics.Vector`1.Count">
      <summary>Gibt die Anzahl der im Vektor gespeicherten Elemente zurück.</summary>
      <returns>Die Anzahl der im Vektor gespeicherten Elemente.</returns>
      <exception cref="T:System.NotSupportedException">Zugriff auf den Eigenschaftengetter über Reflektion wird nicht unterstützt.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.Equals(System.Numerics.Vector{`0})">
      <summary>Gibt einen Wert zurück, der angibt, ob diese Instanz gleich einem angegebenen Vektor ist.</summary>
      <param name="other">Der mit dieser Instanz zu vergleichende Vektor.</param>
      <returns>
        <see langword="true" />, wenn die angegebene Instanz und <paramref name="other" /> gleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.Equals(System.Object)">
      <summary>Gibt einen Wert zurück, der angibt, ob diese Instanz gleich einem angegebenen Objekt ist.</summary>
      <param name="obj">Das Objekt, das mit dieser Instanz verglichen werden soll.</param>
      <returns>
        <see langword="true" />, wenn die angegebene Instanz und <paramref name="obj" /> gleich sind, andernfalls <see langword="false" />. Die Methode gibt <see langword="false" /> zurück, wenn <paramref name="obj" /> null ist oder wenn <paramref name="obj" /> ein Vektor eines anderen Typs als die aktuelle Instanz ist.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.GetHashCode">
      <summary>Gibt den Hashcode für diese Instanz zurück.</summary>
      <returns>Der Hashcode.</returns>
    </member>
    <member name="P:System.Numerics.Vector`1.Item(System.Int32)">
      <summary>Ruft das Element bei einem angegebenen Index ab.</summary>
      <param name="index">Der Index des zurückzugebenden Elements.</param>
      <returns>Das Element bei Index <paramref name="index" />.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> ist kleiner als Null.

oder -
<paramref name="index" /> ist größer gleich <see cref="P:System.Numerics.Vector`1.Count" />.</exception>
    </member>
    <member name="P:System.Numerics.Vector`1.One">
      <summary>Gibt einen Vektor zurück, der ausschließlich Einsen enthält.</summary>
      <returns>Ein Vektor, der ausschließlich Einsen enthält.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Addition(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Addiert zwei Vektoren.</summary>
      <param name="left">Der erste zu addierende Vektor.</param>
      <param name="right">Der zweite zu addierende Vektor.</param>
      <returns>Der Summenvektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_BitwiseAnd(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Gibt einen neuen Vektor zurück, indem für jedes Element in zwei Vektoren eine bitweise <see langword="And" />-Operation durchgeführt wird.</summary>
      <param name="left">Der erste Vektor.</param>
      <param name="right">Der zweite Vektor.</param>
      <returns>Der Vektor, der sich aus der bitweisen <see langword="And" />-Operation von <paramref name="left" /> und <paramref name="right" /> ergibt.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_BitwiseOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Gibt einen neuen Vektor zurück, indem für jedes Element in zwei Vektoren eine bitweise <see langword="Or" />-Operation durchgeführt wird.</summary>
      <param name="left">Der erste Vektor.</param>
      <param name="right">Der zweite Vektor.</param>
      <returns>Der Vektor, der sich aus der bitweisen <see langword="Or" />-Operation der Elemente in <paramref name="left" /> und <paramref name="right" /> ergibt.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Division(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Dividiert den ersten Vektor durch den zweiten.</summary>
      <param name="left">Der erste Vektor.</param>
      <param name="right">Der zweite Vektor.</param>
      <returns>Der Vektor, der aus der Division von <paramref name="left" /> durch <paramref name="right" /> resultiert.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Equality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Gibt einen Wert zurück, der angibt, ob jedes Elementpaar in zwei angegebenen Vektoren gleich ist.</summary>
      <param name="left">Der erste zu vergleichende Vektor.</param>
      <param name="right">Der zweite zu vergleichende Vektor.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="left" /> und <paramref name="right" /> gleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_ExclusiveOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Gibt einen neuen Vektor zurück, indem für jedes Element in zwei Vektoren eine bitweise <see langword="XOr" />-Operation durchgeführt wird.</summary>
      <param name="left">Der erste Vektor.</param>
      <param name="right">Der zweite Vektor.</param>
      <returns>Der Vektor, der sich aus der bitweisen <see langword="XOr" />-Operation der Elemente in <paramref name="left" /> und <paramref name="right" /> ergibt.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Byte}">
      <summary>Interpretiert die Bits des angegebenen Vektors in einen Vektor des Typs <see cref="T:System.Byte" /> um.</summary>
      <param name="value">Der Vektor, der neu interpretiert werden soll.</param>
      <returns>Der neu interpretierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Double}">
      <summary>Interpretiert die Bits des angegebenen Vektors in einen Vektor des Typs <see cref="T:System.Double" /> um.</summary>
      <param name="value">Der Vektor, der neu interpretiert werden soll.</param>
      <returns>Der neu interpretierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int16}">
      <summary>Interpretiert die Bits des angegebenen Vektors in einen Vektor des Typs <see cref="T:System.Int16" /> um.</summary>
      <param name="value">Der Vektor, der neu interpretiert werden soll.</param>
      <returns>Der neu interpretierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int32}">
      <summary>Interpretiert die Bits des angegebenen Vektors in einen Vektor des Typs <see cref="T:System.Int32" /> um.</summary>
      <param name="value">Der Vektor, der neu interpretiert werden soll.</param>
      <returns>Der neu interpretierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int64}">
      <summary>Interpretiert die Bits des angegebenen Vektors in einen Vektor des Typs <see cref="T:System.Int64" /> um.</summary>
      <param name="value">Der Vektor, der neu interpretiert werden soll.</param>
      <returns>Der neu interpretierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.SByte}">
      <summary>Interpretiert die Bits des angegebenen Vektors in einen Vektor des Typs <see cref="T:System.SByte" /> um.</summary>
      <param name="value">Der Vektor, der neu interpretiert werden soll.</param>
      <returns>Der neu interpretierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Single}">
      <summary>Interpretiert die Bits des angegebenen Vektors in einen Vektor des Typs <see cref="T:System.Single" /> um.</summary>
      <param name="value">Der Vektor, der neu interpretiert werden soll.</param>
      <returns>Der neu interpretierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt16}">
      <summary>Interpretiert die Bits des angegebenen Vektors in einen Vektor des Typs <see cref="T:System.UInt16" /> um.</summary>
      <param name="value">Der Vektor, der neu interpretiert werden soll.</param>
      <returns>Der neu interpretierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt32}">
      <summary>Interpretiert die Bits des angegebenen Vektors in einen Vektor des Typs <see cref="T:System.UInt32" /> um.</summary>
      <param name="value">Der Vektor, der neu interpretiert werden soll.</param>
      <returns>Der neu interpretierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt64}">
      <summary>Interpretiert die Bits des angegebenen Vektors in einen Vektor des Typs <see cref="T:System.UInt64" /> um.</summary>
      <param name="value">Der Vektor, der neu interpretiert werden soll.</param>
      <returns>Der neu interpretierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Inequality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Gibt einen Wert zurück, der angibt, ob jedes Elementpaar in den angegebenen Vektoren gleich ist.</summary>
      <param name="left">Der erste zu vergleichende Vektor.</param>
      <param name="right">Der zweite zu vergleichende Vektor.</param>
      <returns>
        <see langword="true" />, wenn alle Elementpaare in "left" und "right" gleich sind. <see langword="false" />, wenn keine Elementpaare gleich sind.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Multiply(`0,System.Numerics.Vector{`0})">
      <summary>Multipliziert einen Vektor mit einem angegebenen Skalarwert.</summary>
      <param name="factor">Der Skalarwert.</param>
      <param name="value">Der Quellvektor.</param>
      <returns>Der skalierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},`0)">
      <summary>Multipliziert einen Vektor mit einem angegebenen Skalarwert.</summary>
      <param name="value">Der Quellvektor.</param>
      <param name="factor">Ein Skalarwert.</param>
      <returns>Der skalierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Gibt einen neuen Vektor zurück, dessen Werte dem Produkt der einzelnen Elementpaare in zwei angegebenen Vektoren entsprechen.</summary>
      <param name="left">Der erste Vektor.</param>
      <param name="right">Der zweite Vektor.</param>
      <returns>Der elementweise Produktvektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_OnesComplement(System.Numerics.Vector{`0})">
      <summary>Gibt einen neuen Vektor zurück, dessen Elemente sich aus dem Einerkomplement der Elemente eines angegebenen Vektors ergeben.</summary>
      <param name="value">Der Quellvektor.</param>
      <returns>Der Einerkomplementvektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Subtraction(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Subtrahiert den zweiten Vektor vom ersten.</summary>
      <param name="left">Der erste Vektor.</param>
      <param name="right">Der zweite Vektor.</param>
      <returns>Der Vektor, der aus der Subtraktion von <paramref name="right" /> von <paramref name="left" /> resultiert.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_UnaryNegation(System.Numerics.Vector{`0})">
      <summary>Negiert einen angegebenen Vektor.</summary>
      <param name="value">Der zu negierende Vektor.</param>
      <returns>Der negierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.ToString">
      <summary>Gibt die Zeichenfolgendarstellung dieses Vektors in Standardformatierung zurück.</summary>
      <returns>Die Zeichenfolgendarstellung dieses Vektors.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.ToString(System.String)">
      <summary>Gibt die Zeichenfolgendarstellung dieses Vektors zurück und verwendet dazu die angegebene Formatierungszeichenfolge, um einzelne Elemente zu formatieren.</summary>
      <param name="format">Eine  oder , die das Format einzelner Elemente definiert.</param>
      <returns>Die Zeichenfolgendarstellung der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.ToString(System.String,System.IFormatProvider)">
      <summary>Gibt die Zeichenfolgendarstellung dieses Vektors zurück und verwendet dazu die angegebene Formatierungszeichenfolge, um einzelne Elemente zu formatieren, sowie den angegebenen Formatanbieter, um kulturspezifische Formatierung zu definieren.</summary>
      <param name="format">Eine  oder , die das Format einzelner Elemente definiert.</param>
      <param name="formatProvider">Ein Formatanbieter, der kulturspezifische Formatierungsinformationen bereitstellt.</param>
      <returns>Die Zeichenfolgendarstellung der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.TryCopyTo(System.Span{`0})">
      <summary>Versucht, den Vektor in die angegebene <see cref="T:System.Span`1" /> zu kopieren.</summary>
      <param name="destination">Die Zielspanne, in die die Werte kopiert werden. Die Zielspanne muss mindestens die Größe <see cref="P:System.Numerics.Vector`1.Count" /> aufweisen.</param>
      <returns>
        <see langword="true" />, wenn der Quellvektor erfolgreich nach <paramref name="destination" /> kopiert wurde. <see langword="false" />, wenn <paramref name="destination" /> nicht groß genug ist, um den Quellvektor aufzunehmen.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.TryCopyTo(System.Span{System.Byte})">
      <summary>Versucht, den Vektor in die angegebene Bytespanne zu kopieren.</summary>
      <param name="destination">Die Zielspanne, in die die Werte kopiert werden. Die Zielspanne muss mindestens die Größe <see cref="P:System.Numerics.Vector`1.Count" /> aufweisen.</param>
      <returns>
        <see langword="true" />, wenn der Quellvektor erfolgreich nach <paramref name="destination" /> kopiert wurde. <see langword="false" />, wenn <paramref name="destination" /> nicht groß genug ist, um den Quellvektor aufzunehmen.</returns>
    </member>
    <member name="P:System.Numerics.Vector`1.Zero">
      <summary>Gibt einen Vektor zurück, der ausschließlich Nullen enthält.</summary>
      <returns>Ein Vektor, der ausschließlich Nullen enthält.</returns>
    </member>
    <member name="T:System.Numerics.Vector2">
      <summary>Stellt einen Vektor mit zwei Gleitkommawerten mit einfacher Genauigkeit dar.</summary>
    </member>
    <member name="M:System.Numerics.Vector2.#ctor(System.Single)">
      <summary>Erstellt ein neues <see cref="T:System.Numerics.Vector2" />-Objekt, dessen zwei Elemente den gleichen Wert aufweisen.</summary>
      <param name="value">Der beiden Elementen zuzuweisende Wert.</param>
    </member>
    <member name="M:System.Numerics.Vector2.#ctor(System.Single,System.Single)">
      <summary>Erstellt einen Vektor, dessen Elemente die angegebenen Werte aufweisen.</summary>
      <param name="x">Der Wert, der dem <see cref="F:System.Numerics.Vector2.X" />-Feld zugewiesen werden soll.</param>
      <param name="y">Der Wert, der dem <see cref="F:System.Numerics.Vector2.Y" />-Feld zugewiesen werden soll.</param>
    </member>
    <member name="M:System.Numerics.Vector2.Abs(System.Numerics.Vector2)">
      <summary>Gibt einen Vektor zurück, dessen Elemente die absoluten Werte jedes der Elemente des angegebenen Vektors sind.</summary>
      <param name="value">Ein Vektor.</param>
      <returns>Der Absolutwertvektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Add(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Addiert zwei Vektoren.</summary>
      <param name="left">Der erste zu addierende Vektor.</param>
      <param name="right">Der zweite zu addierende Vektor.</param>
      <returns>Der Summenvektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Clamp(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Schränkt einen Vektor zwischen einem Minimal- und einem Maximalwert ein.</summary>
      <param name="value1">Der einzuschränkende Vektor.</param>
      <param name="min">Der Minimalwert.</param>
      <param name="max">Der Maximalwert.</param>
      <returns>Der eingeschränkte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.CopyTo(System.Single[])">
      <summary>Kopiert die Elemente des Vektors in ein angegebenes Array.</summary>
      <param name="array">Das Zielarray.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Die Anzahl von Elementen in der aktuellen Instanz ist größer als im Array.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> ist mehrdimensional.</exception>
    </member>
    <member name="M:System.Numerics.Vector2.CopyTo(System.Single[],System.Int32)">
      <summary>Kopiert die Elemente des Vektors ab der angegebenen Indexposition in das angegebene Array.</summary>
      <param name="array">Das Zielarray.</param>
      <param name="index">Der Index, an dem das erste Element des Vektors kopiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Die Anzahl von Elementen in der aktuellen Instanz ist größer als im Array.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> ist kleiner als Null.

oder -
<paramref name="index" /> ist größer gleich der Arraylänge.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> ist mehrdimensional.</exception>
    </member>
    <member name="M:System.Numerics.Vector2.Distance(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Berechnet den euklidischen Abstand zwischen den zwei angegebenen Punkten.</summary>
      <param name="value1">Der erste Punkt.</param>
      <param name="value2">Der zweite Punkt.</param>
      <returns>Der Abstand.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.DistanceSquared(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Gibt den euklidischen Abstand zwischen zwei bestimmten Punkten im Quadrat zurück.</summary>
      <param name="value1">Der erste Punkt.</param>
      <param name="value2">Der zweite Punkt.</param>
      <returns>Das Quadrat des Abstands.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Divide(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Dividiert den ersten Vektor durch den zweiten.</summary>
      <param name="left">Der erste Vektor.</param>
      <param name="right">Der zweite Vektor.</param>
      <returns>Der Vektor, der sich aus der Division ergibt.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Divide(System.Numerics.Vector2,System.Single)">
      <summary>Dividiert den angegebenen Vektor durch einen angegebenen Skalarwert.</summary>
      <param name="left">Der Vektor.</param>
      <param name="divisor">Der Skalarwert.</param>
      <returns>Der Vektor, der aus der Division resultiert.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Dot(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Gibt das Skalarprodukt zweier Vektoren zurück.</summary>
      <param name="value1">Der erste Vektor.</param>
      <param name="value2">Der zweite Vektor.</param>
      <returns>Das Skalarprodukt.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Equals(System.Numerics.Vector2)">
      <summary>Gibt einen Wert zurück, der angibt, ob diese Instanz und ein anderer Vektor gleich sind.</summary>
      <param name="other">Der andere Vektor.</param>
      <returns>
        <see langword="true" />, wenn die beiden Vektoren gleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Equals(System.Object)">
      <summary>Gibt einen Wert zurück, der angibt, ob diese Instanz und ein angegebenes Objekt gleich sind.</summary>
      <param name="obj">Das Objekt, das mit der aktuellen Instanz verglichen werden soll.</param>
      <returns>
        <see langword="true" />, wenn die angegebene Instanz und <paramref name="obj" /> gleich sind, andernfalls <see langword="false" />. Wenn <paramref name="obj" /> gleich <see langword="null" /> ist, gibt die Methode <see langword="false" /> zurück.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.GetHashCode">
      <summary>Gibt den Hashcode für diese Instanz zurück.</summary>
      <returns>Der Hashcode.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Length">
      <summary>Gibt die Länge des Vektors zurück.</summary>
      <returns>Die Länge des Vektors.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.LengthSquared">
      <summary>Gibt das Quadrat der Länge des Vektors zurück.</summary>
      <returns>Das Quadrat der Länge des Vektors.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Lerp(System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
      <summary>Führt eine lineare Interpolation zwischen beiden Vektoren aus, basierend auf der angegebenen Gewichtung.</summary>
      <param name="value1">Der erste Vektor.</param>
      <param name="value2">Der zweite Vektor.</param>
      <param name="amount">Ein Wert zwischen 0 und 1, der die Gewichtung von <paramref name="value2" /> angibt.</param>
      <returns>Der interpolierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Max(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Gibt einen Vektor zurück, dessen Elemente das Maximum jedes der Elementpaare in zwei angegebenen Vektoren sind.</summary>
      <param name="value1">Der erste Vektor.</param>
      <param name="value2">Der zweite Vektor.</param>
      <returns>Der maximierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Min(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Gibt einen Vektor zurück, dessen Elemente das Minimum jedes der Elementpaare in zwei angegebenen Vektoren sind.</summary>
      <param name="value1">Der erste Vektor.</param>
      <param name="value2">Der zweite Vektor.</param>
      <returns>Der minimierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Multiply(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Gibt einen neuen Vektor zurück, dessen Werte dem Produkt der einzelnen Elementpaare in zwei angegebenen Vektoren entsprechen.</summary>
      <param name="left">Der erste Vektor.</param>
      <param name="right">Der zweite Vektor.</param>
      <returns>Der elementweise Produktvektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Multiply(System.Numerics.Vector2,System.Single)">
      <summary>Multipliziert einen Vektor mit einem angegebenen Skalarwert.</summary>
      <param name="left">Der zu multiplizierende Vektor.</param>
      <param name="right">Der Skalarwert.</param>
      <returns>Der skalierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Multiply(System.Single,System.Numerics.Vector2)">
      <summary>Multipliziert einen Skalarwert mit einem angegebenen Vektor.</summary>
      <param name="left">Der Skalarwert.</param>
      <param name="right">Der Vektor.</param>
      <returns>Der skalierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Negate(System.Numerics.Vector2)">
      <summary>Negiert einen angegebenen Vektor.</summary>
      <param name="value">Der zu negierende Vektor.</param>
      <returns>Der negierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Normalize(System.Numerics.Vector2)">
      <summary>Gibt einen Vektor mit der gleichen Richtung wie der angegebene Vektor zurück, jedoch mit der Länge 1.</summary>
      <param name="value">Der zu normalisierende Vektor.</param>
      <returns>Der normalisierte Vektor.</returns>
    </member>
    <member name="P:System.Numerics.Vector2.One">
      <summary>Ruft einen Vektor ab, dessen 2 Elemente gleich eins sind.</summary>
      <returns>Ein Vektor, dessen zwei Elemente gleich eins sind (d. h., er gibt den Vektor zurück <c>(1, 1)</c>.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Addition(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Addiert zwei Vektoren.</summary>
      <param name="left">Der erste zu addierende Vektor.</param>
      <param name="right">Der zweite zu addierende Vektor.</param>
      <returns>Der Summenvektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Division(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Dividiert den ersten Vektor durch den zweiten.</summary>
      <param name="left">Der erste Vektor.</param>
      <param name="right">Der zweite Vektor.</param>
      <returns>Der Vektor, der aus der Division von <paramref name="left" /> durch <paramref name="right" /> resultiert.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Division(System.Numerics.Vector2,System.Single)">
      <summary>Dividiert den angegebenen Vektor durch einen angegebenen Skalarwert.</summary>
      <param name="value1">Der Vektor.</param>
      <param name="value2">Der Skalarwert.</param>
      <returns>Das Ergebnis der Division.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Equality(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Gibt einen Wert zurück, der angibt, ob jedes Elementpaar in zwei angegebenen Vektoren gleich ist.</summary>
      <param name="left">Der erste zu vergleichende Vektor.</param>
      <param name="right">Der zweite zu vergleichende Vektor.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="left" /> und <paramref name="right" /> gleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Inequality(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Gibt einen Wert zurück, der angibt, ob zwei angegebene Vektoren ungleich sind.</summary>
      <param name="left">Der erste zu vergleichende Vektor.</param>
      <param name="right">Der zweite zu vergleichende Vektor.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="left" /> und <paramref name="right" /> ungleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Multiply(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Gibt einen neuen Vektor zurück, dessen Werte dem Produkt der einzelnen Elementpaare in zwei angegebenen Vektoren entsprechen.</summary>
      <param name="left">Der erste Vektor.</param>
      <param name="right">Der zweite Vektor.</param>
      <returns>Der elementweise Produktvektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Multiply(System.Numerics.Vector2,System.Single)">
      <summary>Dividiert den angegebenen Vektor durch den angegebenen Skalarwert.</summary>
      <param name="left">Der Vektor.</param>
      <param name="right">Der Skalarwert.</param>
      <returns>Der skalierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Multiply(System.Single,System.Numerics.Vector2)">
      <summary>Multipliziert den Skalarwert mit dem angegebenen Vektor.</summary>
      <param name="left">Der Vektor.</param>
      <param name="right">Der Skalarwert.</param>
      <returns>Der skalierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Subtraction(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Subtrahiert den zweiten Vektor vom ersten.</summary>
      <param name="left">Der erste Vektor.</param>
      <param name="right">Der zweite Vektor.</param>
      <returns>Der Vektor, der aus der Subtraktion von <paramref name="right" /> von <paramref name="left" /> resultiert.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_UnaryNegation(System.Numerics.Vector2)">
      <summary>Negiert den angegebenen Vektor.</summary>
      <param name="value">Der zu negierende Vektor.</param>
      <returns>Der negierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Reflect(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Gibt die Reflektion eines Vektors an einer Oberfläche an, die das angegebene Normal aufweist.</summary>
      <param name="vector">Der Quellvektor.</param>
      <param name="normal">Das Normal der Fläche, von der reflektiert wird.</param>
      <returns>Der reflektierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.SquareRoot(System.Numerics.Vector2)">
      <summary>Gibt einen Vektor zurück, dessen Elemente die Quadratwurzel jedes der Elemente eines angegebenen Vektors sind.</summary>
      <param name="value">Ein Vektor.</param>
      <returns>Der Quadratwurzelvektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Subtract(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Subtrahiert den zweiten Vektor vom ersten.</summary>
      <param name="left">Der erste Vektor.</param>
      <param name="right">Der zweite Vektor.</param>
      <returns>Der Differenzvektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.ToString">
      <summary>Gibt die Zeichenfolgendarstellung der aktuellen Instanz in Standardformatierung zurück.</summary>
      <returns>Die Zeichenfolgendarstellung der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.ToString(System.String)">
      <summary>Gibt die Zeichenfolgendarstellung der aktuellen Instanz zurück und verwendet dazu die angegebene Formatierungszeichenfolge, um einzelne Elemente zu formatieren.</summary>
      <param name="format">Eine standardmäßige oder benutzerdefinierte numerische Formatzeichenfolge, die das Format einzelner Elemente definiert.</param>
      <returns>Die Zeichenfolgendarstellung der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.ToString(System.String,System.IFormatProvider)">
      <summary>Gibt die Zeichenfolgendarstellung der aktuellen Instanz zurück und verwendet dazu die angegebene Formatierungszeichenfolge, um einzelne Elemente zu formatieren, sowie den angegebenen Formatanbieter, um kulturspezifische Formatierung zu definieren.</summary>
      <param name="format">Eine standardmäßige oder benutzerdefinierte numerische Formatzeichenfolge, die das Format einzelner Elemente definiert.</param>
      <param name="formatProvider">Ein Formatanbieter, der kulturspezifische Formatierungsinformationen bereitstellt.</param>
      <returns>Die Zeichenfolgendarstellung der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Matrix3x2)">
      <summary>Transformiert einen Vektor mit einer angegebenen 3 x 2-Matrix.</summary>
      <param name="position">Der zu transformierende Vektor.</param>
      <param name="matrix">Die Transformationsmatrix.</param>
      <returns>Der transformierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Matrix4x4)">
      <summary>Transformiert einen Vektor mit einer angegebenen 4 x 4-Matrix.</summary>
      <param name="position">Der zu transformierende Vektor.</param>
      <param name="matrix">Die Transformationsmatrix.</param>
      <returns>Der transformierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Quaternion)">
      <summary>Transformiert einen Vektor um den angegebenen Quaternionrotationswert.</summary>
      <param name="value">Der zu drehende Vektor.</param>
      <param name="rotation">Die anzuwendende Drehung.</param>
      <returns>Der transformierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.TransformNormal(System.Numerics.Vector2,System.Numerics.Matrix3x2)">
      <summary>Transformiert ein Vektornormal mit der angegebenen 3 x 2-Matrix.</summary>
      <param name="normal">Der Quellvektor.</param>
      <param name="matrix">Die Matrix.</param>
      <returns>Der transformierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.TransformNormal(System.Numerics.Vector2,System.Numerics.Matrix4x4)">
      <summary>Transformiert ein Vektornormal mit der angegebenen 4 x 4-Matrix.</summary>
      <param name="normal">Der Quellvektor.</param>
      <param name="matrix">Die Matrix.</param>
      <returns>Der transformierte Vektor.</returns>
    </member>
    <member name="P:System.Numerics.Vector2.UnitX">
      <summary>Ruft den Vektor (1,0) ab.</summary>
      <returns>Der Vektor <c>(1, 0)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector2.UnitY">
      <summary>Ruft den Vektor (0,1) ab.</summary>
      <returns>Der Vektor <c>(0,0)</c>.</returns>
    </member>
    <member name="F:System.Numerics.Vector2.X">
      <summary>Die X-Komponente des Vektors.</summary>
    </member>
    <member name="F:System.Numerics.Vector2.Y">
      <summary>Die Y-Komponente des Vektors.</summary>
    </member>
    <member name="P:System.Numerics.Vector2.Zero">
      <summary>Gibt einen Vektor zurück, dessen 2 Elemente gleich null sind.</summary>
      <returns>Ein Vektor, dessen zwei Elemente gleich NULL sind (d. h., er gibt den Vektor zurück <c>(0,0)</c>.</returns>
    </member>
    <member name="T:System.Numerics.Vector3">
      <summary>Stellt einen Vektor mit drei Gleitkommawerten mit einfacher Genauigkeit dar.</summary>
    </member>
    <member name="M:System.Numerics.Vector3.#ctor(System.Numerics.Vector2,System.Single)">
      <summary>Erstellt ein neues <see cref="T:System.Numerics.Vector3" />-Objekt aus dem angegebenen <see cref="T:System.Numerics.Vector2" />-Objekt und dem angegebenen Wert.</summary>
      <param name="value">Der Vektor mit zwei Elementen.</param>
      <param name="z">Der zusätzliche Wert, der dem <see cref="F:System.Numerics.Vector3.Z" />-Feld zugewiesen werden soll.</param>
    </member>
    <member name="M:System.Numerics.Vector3.#ctor(System.Single)">
      <summary>Erstellt ein neues <see cref="T:System.Numerics.Vector3" />-Objekt, dessen drei Elemente den gleichen Wert aufweisen.</summary>
      <param name="value">Der allen drei Elementen zuzuweisende Wert.</param>
    </member>
    <member name="M:System.Numerics.Vector3.#ctor(System.Single,System.Single,System.Single)">
      <summary>Erstellt einen Vektor, dessen Elemente die angegebenen Werte aufweisen.</summary>
      <param name="x">Der Wert, der dem <see cref="F:System.Numerics.Vector3.X" />-Feld zugewiesen werden soll.</param>
      <param name="y">Der Wert, der dem <see cref="F:System.Numerics.Vector3.Y" />-Feld zugewiesen werden soll.</param>
      <param name="z">Der Wert, der dem <see cref="F:System.Numerics.Vector3.Z" />-Feld zugewiesen werden soll.</param>
    </member>
    <member name="M:System.Numerics.Vector3.Abs(System.Numerics.Vector3)">
      <summary>Gibt einen Vektor zurück, dessen Elemente die absoluten Werte jedes der Elemente des angegebenen Vektors sind.</summary>
      <param name="value">Ein Vektor.</param>
      <returns>Der Absolutwertvektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Add(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Addiert zwei Vektoren.</summary>
      <param name="left">Der erste zu addierende Vektor.</param>
      <param name="right">Der zweite zu addierende Vektor.</param>
      <returns>Der Summenvektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Clamp(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Schränkt einen Vektor zwischen einem Minimal- und einem Maximalwert ein.</summary>
      <param name="value1">Der einzuschränkende Vektor.</param>
      <param name="min">Der Minimalwert.</param>
      <param name="max">Der Maximalwert.</param>
      <returns>Der eingeschränkte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.CopyTo(System.Single[])">
      <summary>Kopiert die Elemente des Vektors in ein angegebenes Array.</summary>
      <param name="array">Das Zielarray.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Die Anzahl von Elementen in der aktuellen Instanz ist größer als im Array.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> ist mehrdimensional.</exception>
    </member>
    <member name="M:System.Numerics.Vector3.CopyTo(System.Single[],System.Int32)">
      <summary>Kopiert die Elemente des Vektors ab der angegebenen Indexposition in das angegebene Array.</summary>
      <param name="array">Das Zielarray.</param>
      <param name="index">Der Index, an dem das erste Element des Vektors kopiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Die Anzahl von Elementen in der aktuellen Instanz ist größer als im Array.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> ist kleiner als Null.

oder -
<paramref name="index" /> ist größer gleich der Arraylänge.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> ist mehrdimensional.</exception>
    </member>
    <member name="M:System.Numerics.Vector3.Cross(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Berechnet das Kreuzprodukt zweier Vektoren.</summary>
      <param name="vector1">Der erste Vektor.</param>
      <param name="vector2">Der zweite Vektor.</param>
      <returns>Das Kreuzprodukt.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Distance(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Berechnet den euklidischen Abstand zwischen den zwei angegebenen Punkten.</summary>
      <param name="value1">Der erste Punkt.</param>
      <param name="value2">Der zweite Punkt.</param>
      <returns>Der Abstand.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.DistanceSquared(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Gibt den euklidischen Abstand zwischen zwei bestimmten Punkten im Quadrat zurück.</summary>
      <param name="value1">Der erste Punkt.</param>
      <param name="value2">Der zweite Punkt.</param>
      <returns>Das Quadrat des Abstands.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Divide(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Dividiert den ersten Vektor durch den zweiten.</summary>
      <param name="left">Der erste Vektor.</param>
      <param name="right">Der zweite Vektor.</param>
      <returns>Der Vektor, der sich aus der Division ergibt.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Divide(System.Numerics.Vector3,System.Single)">
      <summary>Dividiert den angegebenen Vektor durch einen angegebenen Skalarwert.</summary>
      <param name="left">Der Vektor.</param>
      <param name="divisor">Der Skalarwert.</param>
      <returns>Der Vektor, der aus der Division resultiert.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Dot(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Gibt das Skalarprodukt zweier Vektoren zurück.</summary>
      <param name="vector1">Der erste Vektor.</param>
      <param name="vector2">Der zweite Vektor.</param>
      <returns>Das Skalarprodukt.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Equals(System.Numerics.Vector3)">
      <summary>Gibt einen Wert zurück, der angibt, ob diese Instanz und ein anderer Vektor gleich sind.</summary>
      <param name="other">Der andere Vektor.</param>
      <returns>
        <see langword="true" />, wenn die beiden Vektoren gleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Equals(System.Object)">
      <summary>Gibt einen Wert zurück, der angibt, ob diese Instanz und ein angegebenes Objekt gleich sind.</summary>
      <param name="obj">Das Objekt, das mit der aktuellen Instanz verglichen werden soll.</param>
      <returns>
        <see langword="true" />, wenn die angegebene Instanz und <paramref name="obj" /> gleich sind, andernfalls <see langword="false" />. Wenn <paramref name="obj" /> gleich <see langword="null" /> ist, gibt die Methode <see langword="false" /> zurück.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.GetHashCode">
      <summary>Gibt den Hashcode für diese Instanz zurück.</summary>
      <returns>Der Hashcode.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Length">
      <summary>Gibt die Länge dieses Vektorobjekts zurück.</summary>
      <returns>Die Länge des Vektors.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.LengthSquared">
      <summary>Gibt das Quadrat der Länge des Vektors zurück.</summary>
      <returns>Das Quadrat der Länge des Vektors.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Lerp(System.Numerics.Vector3,System.Numerics.Vector3,System.Single)">
      <summary>Führt eine lineare Interpolation zwischen beiden Vektoren aus, basierend auf der angegebenen Gewichtung.</summary>
      <param name="value1">Der erste Vektor.</param>
      <param name="value2">Der zweite Vektor.</param>
      <param name="amount">Ein Wert zwischen 0 und 1, der die Gewichtung von <paramref name="value2" /> angibt.</param>
      <returns>Der interpolierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Max(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Gibt einen Vektor zurück, dessen Elemente das Maximum jedes der Elementpaare in zwei angegebenen Vektoren sind.</summary>
      <param name="value1">Der erste Vektor.</param>
      <param name="value2">Der zweite Vektor.</param>
      <returns>Der maximierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Min(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Gibt einen Vektor zurück, dessen Elemente das Minimum jedes der Elementpaare in zwei angegebenen Vektoren sind.</summary>
      <param name="value1">Der erste Vektor.</param>
      <param name="value2">Der zweite Vektor.</param>
      <returns>Der minimierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Multiply(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Gibt einen neuen Vektor zurück, dessen Werte dem Produkt der einzelnen Elementpaare in zwei angegebenen Vektoren entsprechen.</summary>
      <param name="left">Der erste Vektor.</param>
      <param name="right">Der zweite Vektor.</param>
      <returns>Der elementweise Produktvektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Multiply(System.Numerics.Vector3,System.Single)">
      <summary>Multipliziert einen Vektor mit einem angegebenen Skalarwert.</summary>
      <param name="left">Der zu multiplizierende Vektor.</param>
      <param name="right">Der Skalarwert.</param>
      <returns>Der skalierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Multiply(System.Single,System.Numerics.Vector3)">
      <summary>Multipliziert einen Skalarwert mit einem angegebenen Vektor.</summary>
      <param name="left">Der Skalarwert.</param>
      <param name="right">Der Vektor.</param>
      <returns>Der skalierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Negate(System.Numerics.Vector3)">
      <summary>Negiert einen angegebenen Vektor.</summary>
      <param name="value">Der zu negierende Vektor.</param>
      <returns>Der negierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Normalize(System.Numerics.Vector3)">
      <summary>Gibt einen Vektor mit der gleichen Richtung wie der angegebene Vektor zurück, jedoch mit der Länge 1.</summary>
      <param name="value">Der zu normalisierende Vektor.</param>
      <returns>Der normalisierte Vektor.</returns>
    </member>
    <member name="P:System.Numerics.Vector3.One">
      <summary>Ruft einen Vektor ab, dessen 3 Elemente gleich eins sind.</summary>
      <returns>Ein Vektor, dessen drei Elemente gleich eins sind (d. h., er gibt den Vektor zurück <c>(1, 1, 1)</c>.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Addition(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Addiert zwei Vektoren.</summary>
      <param name="left">Der erste zu addierende Vektor.</param>
      <param name="right">Der zweite zu addierende Vektor.</param>
      <returns>Der Summenvektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Division(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Dividiert den ersten Vektor durch den zweiten.</summary>
      <param name="left">Der erste Vektor.</param>
      <param name="right">Der zweite Vektor.</param>
      <returns>Der Vektor, der aus der Division von <paramref name="left" /> durch <paramref name="right" /> resultiert.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Division(System.Numerics.Vector3,System.Single)">
      <summary>Dividiert den angegebenen Vektor durch einen angegebenen Skalarwert.</summary>
      <param name="value1">Der Vektor.</param>
      <param name="value2">Der Skalarwert.</param>
      <returns>Das Ergebnis der Division.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Equality(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Gibt einen Wert zurück, der angibt, ob jedes Elementpaar in zwei angegebenen Vektoren gleich ist.</summary>
      <param name="left">Der erste zu vergleichende Vektor.</param>
      <param name="right">Der zweite zu vergleichende Vektor.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="left" /> und <paramref name="right" /> gleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Inequality(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Gibt einen Wert zurück, der angibt, ob zwei angegebene Vektoren ungleich sind.</summary>
      <param name="left">Der erste zu vergleichende Vektor.</param>
      <param name="right">Der zweite zu vergleichende Vektor.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="left" /> und <paramref name="right" /> ungleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Multiply(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Gibt einen neuen Vektor zurück, dessen Werte dem Produkt der einzelnen Elementpaare in zwei angegebenen Vektoren entsprechen.</summary>
      <param name="left">Der erste Vektor.</param>
      <param name="right">Der zweite Vektor.</param>
      <returns>Der elementweise Produktvektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Multiply(System.Numerics.Vector3,System.Single)">
      <summary>Dividiert den angegebenen Vektor durch den angegebenen Skalarwert.</summary>
      <param name="left">Der Vektor.</param>
      <param name="right">Der Skalarwert.</param>
      <returns>Der skalierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Multiply(System.Single,System.Numerics.Vector3)">
      <summary>Multipliziert den Skalarwert mit dem angegebenen Vektor.</summary>
      <param name="left">Der Vektor.</param>
      <param name="right">Der Skalarwert.</param>
      <returns>Der skalierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Subtraction(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Subtrahiert den zweiten Vektor vom ersten.</summary>
      <param name="left">Der erste Vektor.</param>
      <param name="right">Der zweite Vektor.</param>
      <returns>Der Vektor, der aus der Subtraktion von <paramref name="right" /> von <paramref name="left" /> resultiert.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_UnaryNegation(System.Numerics.Vector3)">
      <summary>Negiert den angegebenen Vektor.</summary>
      <param name="value">Der zu negierende Vektor.</param>
      <returns>Der negierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Reflect(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Gibt die Reflektion eines Vektors an einer Oberfläche an, die das angegebene Normal aufweist.</summary>
      <param name="vector">Der Quellvektor.</param>
      <param name="normal">Das Normal der Fläche, von der reflektiert wird.</param>
      <returns>Der reflektierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.SquareRoot(System.Numerics.Vector3)">
      <summary>Gibt einen Vektor zurück, dessen Elemente die Quadratwurzel jedes der Elemente eines angegebenen Vektors sind.</summary>
      <param name="value">Ein Vektor.</param>
      <returns>Der Quadratwurzelvektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Subtract(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Subtrahiert den zweiten Vektor vom ersten.</summary>
      <param name="left">Der erste Vektor.</param>
      <param name="right">Der zweite Vektor.</param>
      <returns>Der Differenzvektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.ToString">
      <summary>Gibt die Zeichenfolgendarstellung der aktuellen Instanz in Standardformatierung zurück.</summary>
      <returns>Die Zeichenfolgendarstellung der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.ToString(System.String)">
      <summary>Gibt die Zeichenfolgendarstellung der aktuellen Instanz zurück und verwendet dazu die angegebene Formatierungszeichenfolge, um einzelne Elemente zu formatieren.</summary>
      <param name="format">Eine standardmäßige oder benutzerdefinierte numerische Formatzeichenfolge, die das Format einzelner Elemente definiert.</param>
      <returns>Die Zeichenfolgendarstellung der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.ToString(System.String,System.IFormatProvider)">
      <summary>Gibt die Zeichenfolgendarstellung der aktuellen Instanz zurück und verwendet dazu die angegebene Formatierungszeichenfolge, um einzelne Elemente zu formatieren, sowie den angegebenen Formatanbieter, um kulturspezifische Formatierung zu definieren.</summary>
      <param name="format">Eine standardmäßige oder benutzerdefinierte numerische Formatzeichenfolge, die das Format einzelner Elemente definiert.</param>
      <param name="formatProvider">Ein Formatanbieter, der kulturspezifische Formatierungsinformationen bereitstellt.</param>
      <returns>Die Zeichenfolgendarstellung der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Transform(System.Numerics.Vector3,System.Numerics.Matrix4x4)">
      <summary>Transformiert einen Vektor mit einer angegebenen 4 x 4-Matrix.</summary>
      <param name="position">Der zu transformierende Vektor.</param>
      <param name="matrix">Die Transformationsmatrix.</param>
      <returns>Der transformierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Transform(System.Numerics.Vector3,System.Numerics.Quaternion)">
      <summary>Transformiert einen Vektor um den angegebenen Quaternionrotationswert.</summary>
      <param name="value">Der zu drehende Vektor.</param>
      <param name="rotation">Die anzuwendende Drehung.</param>
      <returns>Der transformierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.TransformNormal(System.Numerics.Vector3,System.Numerics.Matrix4x4)">
      <summary>Transformiert ein Vektornormal mit der angegebenen 4 x 4-Matrix.</summary>
      <param name="normal">Der Quellvektor.</param>
      <param name="matrix">Die Matrix.</param>
      <returns>Der transformierte Vektor.</returns>
    </member>
    <member name="P:System.Numerics.Vector3.UnitX">
      <summary>Ruft den Vektor (1,0,0) ab.</summary>
      <returns>Der Vektor <c>(1, 0, 0)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector3.UnitY">
      <summary>Ruft den Vektor (0,1,0) ab.</summary>
      <returns>Der Vektor <c>(0, 1, 0)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector3.UnitZ">
      <summary>Ruft den Vektor (0,0,1) ab.</summary>
      <returns>Der Vektor <c>(0, 0, 1)</c>.</returns>
    </member>
    <member name="F:System.Numerics.Vector3.X">
      <summary>Die X-Komponente des Vektors.</summary>
    </member>
    <member name="F:System.Numerics.Vector3.Y">
      <summary>Die Y-Komponente des Vektors.</summary>
    </member>
    <member name="F:System.Numerics.Vector3.Z">
      <summary>Die Z-Komponente des Vektors.</summary>
    </member>
    <member name="P:System.Numerics.Vector3.Zero">
      <summary>Ruft einen Vektor ab, dessen 3 Elemente gleich null sind.</summary>
      <returns>Ein Vektor, dessen drei Elemente gleich NULL sind (d. h., er gibt den Vektor <c>(0, 0, 0)</c>zurück.</returns>
    </member>
    <member name="T:System.Numerics.Vector4">
      <summary>Stellt einen Vektor mit vier Gleitkommawerten mit einfacher Genauigkeit dar.</summary>
    </member>
    <member name="M:System.Numerics.Vector4.#ctor(System.Numerics.Vector2,System.Single,System.Single)">
      <summary>Erstellt ein neues <see cref="T:System.Numerics.Vector4" />-Objekt aus dem angegebenen <see cref="T:System.Numerics.Vector2" />-Objekt sowie eine Z- und eine W-Komponente.</summary>
      <param name="value">Der für die X- und Y-Komponente zu verwendende Vektor.</param>
      <param name="z">Die Z-Komponente.</param>
      <param name="w">Die W-Komponente.</param>
    </member>
    <member name="M:System.Numerics.Vector4.#ctor(System.Numerics.Vector3,System.Single)">
      <summary>Erzeugt ein neues <see cref="T:System.Numerics.Vector4" />-Objekt aus dem angegebenen <see cref="T:System.Numerics.Vector3" />-Objekt sowie eine W-Komponente.</summary>
      <param name="value">Der für die X-, Y- und Z-Komponente zu verwendende Vektor.</param>
      <param name="w">Die W-Komponente.</param>
    </member>
    <member name="M:System.Numerics.Vector4.#ctor(System.Single)">
      <summary>Erstellt ein neues <see cref="T:System.Numerics.Vector4" />-Objekt, dessen vier Elemente den gleichen Wert aufweisen.</summary>
      <param name="value">Der allen vier Elementen zuzuweisende Wert.</param>
    </member>
    <member name="M:System.Numerics.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Erstellt einen Vektor, dessen Elemente die angegebenen Werte aufweisen.</summary>
      <param name="x">Der Wert, der dem <see cref="F:System.Numerics.Vector4.X" />-Feld zugewiesen werden soll.</param>
      <param name="y">Der Wert, der dem <see cref="F:System.Numerics.Vector4.Y" />-Feld zugewiesen werden soll.</param>
      <param name="z">Der Wert, der dem <see cref="F:System.Numerics.Vector4.Z" />-Feld zugewiesen werden soll.</param>
      <param name="w">Der Wert, der dem <see cref="F:System.Numerics.Vector4.W" />-Feld zugewiesen werden soll.</param>
    </member>
    <member name="M:System.Numerics.Vector4.Abs(System.Numerics.Vector4)">
      <summary>Gibt einen Vektor zurück, dessen Elemente die absoluten Werte jedes der Elemente des angegebenen Vektors sind.</summary>
      <param name="value">Ein Vektor.</param>
      <returns>Der Absolutwertvektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Add(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Addiert zwei Vektoren.</summary>
      <param name="left">Der erste zu addierende Vektor.</param>
      <param name="right">Der zweite zu addierende Vektor.</param>
      <returns>Der Summenvektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Clamp(System.Numerics.Vector4,System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Schränkt einen Vektor zwischen einem Minimal- und einem Maximalwert ein.</summary>
      <param name="value1">Der einzuschränkende Vektor.</param>
      <param name="min">Der Minimalwert.</param>
      <param name="max">Der Maximalwert.</param>
      <returns>Der eingeschränkte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.CopyTo(System.Single[])">
      <summary>Kopiert die Elemente des Vektors in ein angegebenes Array.</summary>
      <param name="array">Das Zielarray.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Die Anzahl von Elementen in der aktuellen Instanz ist größer als im Array.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> ist mehrdimensional.</exception>
    </member>
    <member name="M:System.Numerics.Vector4.CopyTo(System.Single[],System.Int32)">
      <summary>Kopiert die Elemente des Vektors ab der angegebenen Indexposition in das angegebene Array.</summary>
      <param name="array">Das Zielarray.</param>
      <param name="index">Der Index, an dem das erste Element des Vektors kopiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Die Anzahl von Elementen in der aktuellen Instanz ist größer als im Array.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> ist kleiner als Null.

oder -
<paramref name="index" /> ist größer gleich der Arraylänge.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> ist mehrdimensional.</exception>
    </member>
    <member name="M:System.Numerics.Vector4.Distance(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Berechnet den euklidischen Abstand zwischen den zwei angegebenen Punkten.</summary>
      <param name="value1">Der erste Punkt.</param>
      <param name="value2">Der zweite Punkt.</param>
      <returns>Der Abstand.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.DistanceSquared(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Gibt den euklidischen Abstand zwischen zwei bestimmten Punkten im Quadrat zurück.</summary>
      <param name="value1">Der erste Punkt.</param>
      <param name="value2">Der zweite Punkt.</param>
      <returns>Das Quadrat des Abstands.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Divide(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Dividiert den ersten Vektor durch den zweiten.</summary>
      <param name="left">Der erste Vektor.</param>
      <param name="right">Der zweite Vektor.</param>
      <returns>Der Vektor, der sich aus der Division ergibt.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Divide(System.Numerics.Vector4,System.Single)">
      <summary>Dividiert den angegebenen Vektor durch einen angegebenen Skalarwert.</summary>
      <param name="left">Der Vektor.</param>
      <param name="divisor">Der Skalarwert.</param>
      <returns>Der Vektor, der aus der Division resultiert.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Dot(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Gibt das Skalarprodukt zweier Vektoren zurück.</summary>
      <param name="vector1">Der erste Vektor.</param>
      <param name="vector2">Der zweite Vektor.</param>
      <returns>Das Skalarprodukt.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Equals(System.Numerics.Vector4)">
      <summary>Gibt einen Wert zurück, der angibt, ob diese Instanz und ein anderer Vektor gleich sind.</summary>
      <param name="other">Der andere Vektor.</param>
      <returns>
        <see langword="true" />, wenn die beiden Vektoren gleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Equals(System.Object)">
      <summary>Gibt einen Wert zurück, der angibt, ob diese Instanz und ein angegebenes Objekt gleich sind.</summary>
      <param name="obj">Das Objekt, das mit der aktuellen Instanz verglichen werden soll.</param>
      <returns>
        <see langword="true" />, wenn die angegebene Instanz und <paramref name="obj" /> gleich sind, andernfalls <see langword="false" />. Wenn <paramref name="obj" /> gleich <see langword="null" /> ist, gibt die Methode <see langword="false" /> zurück.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.GetHashCode">
      <summary>Gibt den Hashcode für diese Instanz zurück.</summary>
      <returns>Der Hashcode.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Length">
      <summary>Gibt die Länge dieses Vektorobjekts zurück.</summary>
      <returns>Die Länge des Vektors.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.LengthSquared">
      <summary>Gibt das Quadrat der Länge des Vektors zurück.</summary>
      <returns>Das Quadrat der Länge des Vektors.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Lerp(System.Numerics.Vector4,System.Numerics.Vector4,System.Single)">
      <summary>Führt eine lineare Interpolation zwischen beiden Vektoren aus, basierend auf der angegebenen Gewichtung.</summary>
      <param name="value1">Der erste Vektor.</param>
      <param name="value2">Der zweite Vektor.</param>
      <param name="amount">Ein Wert zwischen 0 und 1, der die Gewichtung von <paramref name="value2" /> angibt.</param>
      <returns>Der interpolierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Max(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Gibt einen Vektor zurück, dessen Elemente das Maximum jedes der Elementpaare in zwei angegebenen Vektoren sind.</summary>
      <param name="value1">Der erste Vektor.</param>
      <param name="value2">Der zweite Vektor.</param>
      <returns>Der maximierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Min(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Gibt einen Vektor zurück, dessen Elemente das Minimum jedes der Elementpaare in zwei angegebenen Vektoren sind.</summary>
      <param name="value1">Der erste Vektor.</param>
      <param name="value2">Der zweite Vektor.</param>
      <returns>Der minimierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Multiply(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Gibt einen neuen Vektor zurück, dessen Werte dem Produkt der einzelnen Elementpaare in zwei angegebenen Vektoren entsprechen.</summary>
      <param name="left">Der erste Vektor.</param>
      <param name="right">Der zweite Vektor.</param>
      <returns>Der elementweise Produktvektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Multiply(System.Numerics.Vector4,System.Single)">
      <summary>Multipliziert einen Vektor mit einem angegebenen Skalarwert.</summary>
      <param name="left">Der zu multiplizierende Vektor.</param>
      <param name="right">Der Skalarwert.</param>
      <returns>Der skalierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Multiply(System.Single,System.Numerics.Vector4)">
      <summary>Multipliziert einen Skalarwert mit einem angegebenen Vektor.</summary>
      <param name="left">Der Skalarwert.</param>
      <param name="right">Der Vektor.</param>
      <returns>Der skalierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Negate(System.Numerics.Vector4)">
      <summary>Negiert einen angegebenen Vektor.</summary>
      <param name="value">Der zu negierende Vektor.</param>
      <returns>Der negierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Normalize(System.Numerics.Vector4)">
      <summary>Gibt einen Vektor mit der gleichen Richtung wie der angegebene Vektor zurück, jedoch mit der Länge 1.</summary>
      <param name="vector">Der zu normalisierende Vektor.</param>
      <returns>Der normalisierte Vektor.</returns>
    </member>
    <member name="P:System.Numerics.Vector4.One">
      <summary>Ruft einen Vektor ab, dessen 4 Elemente gleich eins sind.</summary>
      <returns>Gibt <see cref="T:System.Numerics.Vector4" />zurück.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Addition(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Addiert zwei Vektoren.</summary>
      <param name="left">Der erste zu addierende Vektor.</param>
      <param name="right">Der zweite zu addierende Vektor.</param>
      <returns>Der Summenvektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Division(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Dividiert den ersten Vektor durch den zweiten.</summary>
      <param name="left">Der erste Vektor.</param>
      <param name="right">Der zweite Vektor.</param>
      <returns>Der Vektor, der aus der Division von <paramref name="left" /> durch <paramref name="right" /> resultiert.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Division(System.Numerics.Vector4,System.Single)">
      <summary>Dividiert den angegebenen Vektor durch einen angegebenen Skalarwert.</summary>
      <param name="value1">Der Vektor.</param>
      <param name="value2">Der Skalarwert.</param>
      <returns>Das Ergebnis der Division.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Equality(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Gibt einen Wert zurück, der angibt, ob jedes Elementpaar in zwei angegebenen Vektoren gleich ist.</summary>
      <param name="left">Der erste zu vergleichende Vektor.</param>
      <param name="right">Der zweite zu vergleichende Vektor.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="left" /> und <paramref name="right" /> gleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Inequality(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Gibt einen Wert zurück, der angibt, ob zwei angegebene Vektoren ungleich sind.</summary>
      <param name="left">Der erste zu vergleichende Vektor.</param>
      <param name="right">Der zweite zu vergleichende Vektor.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="left" /> und <paramref name="right" /> ungleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Multiply(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Gibt einen neuen Vektor zurück, dessen Werte dem Produkt der einzelnen Elementpaare in zwei angegebenen Vektoren entsprechen.</summary>
      <param name="left">Der erste Vektor.</param>
      <param name="right">Der zweite Vektor.</param>
      <returns>Der elementweise Produktvektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Multiply(System.Numerics.Vector4,System.Single)">
      <summary>Dividiert den angegebenen Vektor durch den angegebenen Skalarwert.</summary>
      <param name="left">Der Vektor.</param>
      <param name="right">Der Skalarwert.</param>
      <returns>Der skalierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Multiply(System.Single,System.Numerics.Vector4)">
      <summary>Multipliziert den Skalarwert mit dem angegebenen Vektor.</summary>
      <param name="left">Der Vektor.</param>
      <param name="right">Der Skalarwert.</param>
      <returns>Der skalierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Subtraction(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Subtrahiert den zweiten Vektor vom ersten.</summary>
      <param name="left">Der erste Vektor.</param>
      <param name="right">Der zweite Vektor.</param>
      <returns>Der Vektor, der aus der Subtraktion von <paramref name="right" /> von <paramref name="left" /> resultiert.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_UnaryNegation(System.Numerics.Vector4)">
      <summary>Negiert den angegebenen Vektor.</summary>
      <param name="value">Der zu negierende Vektor.</param>
      <returns>Der negierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.SquareRoot(System.Numerics.Vector4)">
      <summary>Gibt einen Vektor zurück, dessen Elemente die Quadratwurzel jedes der Elemente eines angegebenen Vektors sind.</summary>
      <param name="value">Ein Vektor.</param>
      <returns>Der Quadratwurzelvektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Subtract(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Subtrahiert den zweiten Vektor vom ersten.</summary>
      <param name="left">Der erste Vektor.</param>
      <param name="right">Der zweite Vektor.</param>
      <returns>Der Differenzvektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.ToString">
      <summary>Gibt die Zeichenfolgendarstellung der aktuellen Instanz in Standardformatierung zurück.</summary>
      <returns>Die Zeichenfolgendarstellung der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.ToString(System.String)">
      <summary>Gibt die Zeichenfolgendarstellung der aktuellen Instanz zurück und verwendet dazu die angegebene Formatierungszeichenfolge, um einzelne Elemente zu formatieren.</summary>
      <param name="format">Eine standardmäßige oder benutzerdefinierte numerische Formatzeichenfolge, die das Format einzelner Elemente definiert.</param>
      <returns>Die Zeichenfolgendarstellung der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.ToString(System.String,System.IFormatProvider)">
      <summary>Gibt die Zeichenfolgendarstellung der aktuellen Instanz zurück und verwendet dazu die angegebene Formatierungszeichenfolge, um einzelne Elemente zu formatieren, sowie den angegebenen Formatanbieter, um kulturspezifische Formatierung zu definieren.</summary>
      <param name="format">Eine standardmäßige oder benutzerdefinierte numerische Formatzeichenfolge, die das Format einzelner Elemente definiert.</param>
      <param name="formatProvider">Ein Formatanbieter, der kulturspezifische Formatierungsinformationen bereitstellt.</param>
      <returns>Die Zeichenfolgendarstellung der aktuellen Instanz.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector2,System.Numerics.Matrix4x4)">
      <summary>Transformiert einen zweidimensionalen Vektor mit einer angegebenen 4 x 4-Matrix.</summary>
      <param name="position">Der zu transformierende Vektor.</param>
      <param name="matrix">Die Transformationsmatrix.</param>
      <returns>Der transformierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector2,System.Numerics.Quaternion)">
      <summary>Transformiert einen zweidimensionalen Vektor um den angegebenen Quaternionrotationswert.</summary>
      <param name="value">Der zu drehende Vektor.</param>
      <param name="rotation">Die anzuwendende Drehung.</param>
      <returns>Der transformierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector3,System.Numerics.Matrix4x4)">
      <summary>Transformiert einen dreidimensionalen Vektor mit einer angegebenen 4 x 4-Matrix.</summary>
      <param name="position">Der zu transformierende Vektor.</param>
      <param name="matrix">Die Transformationsmatrix.</param>
      <returns>Der transformierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector3,System.Numerics.Quaternion)">
      <summary>Transformiert einen dreidimensionalen Vektor um den angegebenen Quaternionrotationswert.</summary>
      <param name="value">Der zu drehende Vektor.</param>
      <param name="rotation">Die anzuwendende Drehung.</param>
      <returns>Der transformierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector4,System.Numerics.Matrix4x4)">
      <summary>Transformiert einen vierdimensionalen Vektor mit einer angegebenen 4 x 4-Matrix.</summary>
      <param name="vector">Der zu transformierende Vektor.</param>
      <param name="matrix">Die Transformationsmatrix.</param>
      <returns>Der transformierte Vektor.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector4,System.Numerics.Quaternion)">
      <summary>Transformiert einen vierdimensionalen Vektor um den angegebenen Quaternionrotationswert.</summary>
      <param name="value">Der zu drehende Vektor.</param>
      <param name="rotation">Die anzuwendende Drehung.</param>
      <returns>Der transformierte Vektor.</returns>
    </member>
    <member name="P:System.Numerics.Vector4.UnitW">
      <summary>Ruft den Vektor (0,0,0,1) ab.</summary>
      <returns>Der Vektor <c>(0,0,0,1)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector4.UnitX">
      <summary>Ruft den Vektor (1,0,0,0) ab.</summary>
      <returns>Der Vektor <c>(1,0,0,0)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector4.UnitY">
      <summary>Ruft den Vektor (0,1,0,0) ab.</summary>
      <returns>Der Vektor <c>(0, 1, 0, 0)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector4.UnitZ">
      <summary>Ruft den Vektor (0,0,1,0) ab.</summary>
      <returns>Der Vektor <c>(0,0,1,0)</c>.</returns>
    </member>
    <member name="F:System.Numerics.Vector4.W">
      <summary>Die W-Komponente des Vektors.</summary>
    </member>
    <member name="F:System.Numerics.Vector4.X">
      <summary>Die X-Komponente des Vektors.</summary>
    </member>
    <member name="F:System.Numerics.Vector4.Y">
      <summary>Die Y-Komponente des Vektors.</summary>
    </member>
    <member name="F:System.Numerics.Vector4.Z">
      <summary>Die Z-Komponente des Vektors.</summary>
    </member>
    <member name="P:System.Numerics.Vector4.Zero">
      <summary>Ruft einen Vektor ab, dessen 4 Elemente gleich null sind.</summary>
      <returns>Ein Vektor, dessen vier Elemente gleich null (gibt also den Vektor zurück <c>(0,0,0,0)</c>.</returns>
    </member>
  </members>
</doc>
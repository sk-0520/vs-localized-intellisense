<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Threading.ThreadPool</name>
  </assembly>
  <members>
    <member name="T:System.Threading.IThreadPoolWorkItem">
      <summary>Représente un élément de travail qui peut être exécuté par le <see cref="T:System.Threading.ThreadPool" />.</summary>
    </member>
    <member name="M:System.Threading.IThreadPoolWorkItem.Execute">
      <summary>Exécute l’élément de travail sur le pool de threads.</summary>
    </member>
    <member name="T:System.Threading.RegisteredWaitHandle">
      <summary>Représente un handle inscrit lors de l'appel à <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
      <summary>Annule une opération d'attente inscrite émise par la méthode <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />.</summary>
      <param name="waitObject">
        <see cref="T:System.Threading.WaitHandle" /> à signaler.</param>
      <returns>
        <see langword="true" /> si la fonction aboutit ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.ThreadPool">
      <summary>Fournit un pool de threads qui peuvent servir à exécuter des tâches, publier des éléments de travail, traiter des E/S asynchrones, attendre au nom d’autres threads et traiter des minuteries.</summary>
    </member>
    <member name="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)">
      <summary>Lie un handle de système d'exploitation à <see cref="T:System.Threading.ThreadPool" />.</summary>
      <param name="osHandle">
        <see cref="T:System.IntPtr" /> qui contient le handle. Il faut que le handle ait été ouvert pour des E/S avec chevauchement du côté non managé.</param>
      <returns>
        <see langword="true" /> si le handle est lié ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.Security.SecurityException">L'appelant n'a pas l'autorisation requise.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
      <summary>Lie un handle de système d'exploitation à <see cref="T:System.Threading.ThreadPool" />.</summary>
      <param name="osHandle">
        <see cref="T:System.Runtime.InteropServices.SafeHandle" /> qui contient le handle du système d'exploitation. Il faut que le handle ait été ouvert pour des E/S avec chevauchement du côté non managé.</param>
      <returns>
        <see langword="true" /> si le handle est lié ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="osHandle" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="P:System.Threading.ThreadPool.CompletedWorkItemCount">
      <summary>Obtient le nombre d’éléments de travail qui ont été traités jusqu’à présent.</summary>
      <returns>Nombre d’éléments de travail traités jusqu’à présent.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)">
      <summary>Récupère la différence entre le nombre maximal de threads du pool retourné par la méthode <see cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" /> et le nombre actuel de threads actifs.</summary>
      <param name="workerThreads">Nombre de threads de travail disponibles.</param>
      <param name="completionPortThreads">Nombre de threads d'E/S asynchrones disponibles.</param>
    </member>
    <member name="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
      <summary>Récupère le nombre de demandes au pool de threads pouvant être simultanément actives. Toutes les demandes excédant ce nombre restent dans la file d'attente jusqu'à ce que des threads du pool soient disponibles.</summary>
      <param name="workerThreads">Nombre maximal de threads de travail dans le pool de threads.</param>
      <param name="completionPortThreads">Nombre maximal de threads d'E/S asynchrones dans le pool de threads.</param>
    </member>
    <member name="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
      <summary>Récupère le nombre minimal de threads que le pool de threads crée à la demande, au fur et à mesure que de nouvelles requêtes sont effectuées, avant de basculer sur un algorithme pour la gestion de la création et de la suppression des threads.</summary>
      <param name="workerThreads">Lorsque cette méthode est retournée, contient le nombre minimal de threads de travail que le pool de threads crée à la demande.</param>
      <param name="completionPortThreads">Lorsque cette méthode est retournée, contient le nombre minimal de threads d'E/S asynchrones que le pool de threads crée à la demande.</param>
    </member>
    <member name="P:System.Threading.ThreadPool.PendingWorkItemCount">
      <summary>Obtient le nombre d’éléments de travail qui sont actuellement en file d’attente pour être traités.</summary>
      <returns>Nombre d’éléments de travail actuellement en file d’attente à traiter.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
      <summary>Place une méthode en file d'attente pour exécution. La méthode s'exécute lorsqu'un thread du pool devient disponible.</summary>
      <param name="callBack">
        <see cref="T:System.Threading.WaitCallback" /> qui représente la méthode à exécuter.</param>
      <returns>
        <see langword="true" /> si la méthode est placée en file d'attente avec succès ; <see cref="T:System.NotSupportedException" /> est levé si l'élément de travail n'a pas pu être placé en file d'attente.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callBack" /> est <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Le Common Language Runtime (CLR) est hébergé et l'hôte ne prend pas en charge cette action.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
      <summary>Place une méthode en file d'attente pour exécution et spécifie un objet contenant les données que la méthode doit utiliser. La méthode s'exécute lorsqu'un thread du pool devient disponible.</summary>
      <param name="callBack">
        <see cref="T:System.Threading.WaitCallback" /> représentant la méthode à exécuter.</param>
      <param name="state">Objet contenant les données que la méthode doit utiliser.</param>
      <returns>
        <see langword="true" /> si la méthode est placée en file d'attente avec succès ; <see cref="T:System.NotSupportedException" /> est levé si l'élément de travail n'a pas pu être placé en file d'attente.</returns>
      <exception cref="T:System.NotSupportedException">Le Common Language Runtime (CLR) est hébergé et l'hôte ne prend pas en charge cette action.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callBack" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.QueueUserWorkItem``1(System.Action{``0},``0,System.Boolean)">
      <summary>Place en file d'attente une méthode spécifiée par un délégué <see cref="T:System.Action`1" /> pour exécution et fournit les données que la méthode doit utiliser. La méthode s'exécute lorsqu'un thread du pool devient disponible.</summary>
      <param name="callBack">
        <see cref="T:System.Action`1" /> représentant la méthode à exécuter.</param>
      <param name="state">Objet contenant les données que la méthode doit utiliser.</param>
      <param name="preferLocal">
        <see langword="true" /> pour placer l’élément de travail dans une file d’attente à proximité du thread actuel ; <see langword="false" /> pour placer l’élément de travail dans la file d’attente partagée du pool de threads.</param>
      <typeparam name="TState">Le type des éléments de <paramref name="state" />.</typeparam>
      <returns>
        <see langword="true" /> si la méthode est placée en file d'attente avec succès ; <see cref="T:System.NotSupportedException" /> est levé si l'élément de travail n'a pas pu être placé en file d'attente.
.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
      <summary>Inscrit un délégué pour attendre un <see cref="T:System.Threading.WaitHandle" />, en utilisant, pour indiquer le délai en millisecondes, un entier 32 bits signé.</summary>
      <param name="waitObject">
        <see cref="T:System.Threading.WaitHandle" /> à inscrire. Utilisez un <see cref="T:System.Threading.WaitHandle" /> autre que <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack">Délégué <see cref="T:System.Threading.WaitOrTimerCallback" /> à appeler lorsque le paramètre <paramref name="waitObject" /> est signalé.</param>
      <param name="state">Objet passé au délégué.</param>
      <param name="millisecondsTimeOutInterval">Délai en millisecondes. Si le paramètre <paramref name="millisecondsTimeOutInterval" /> a la valeur zéro (0), la fonction teste l'état de l'objet et procède à un retour immédiat. Si <paramref name="millisecondsTimeOutInterval" /> a la valeur -1, le délai d'expiration de la fonction ne prend jamais fin.</param>
      <param name="executeOnlyOnce">
        <see langword="true" /> pour indiquer que le thread ne tiendra plus compte du paramètre <paramref name="waitObject" /> une fois le délégué appelé ; <see langword="false" /> pour indiquer que la minuterie sera réinitialisée à chaque achèvement d'opération d'attente, jusqu'à annulation de l'inscription de l'attente.</param>
      <returns>
        <see cref="T:System.Threading.RegisteredWaitHandle" /> qui encapsule le handle natif.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="millisecondsTimeOutInterval" /> est inférieur à -1.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
      <summary>Inscrit un délégué pour attendre un <see cref="T:System.Threading.WaitHandle" />, en utilisant, pour indiquer le délai en millisecondes, un entier 64 bits signé.</summary>
      <param name="waitObject">
        <see cref="T:System.Threading.WaitHandle" /> à inscrire. Utilisez un <see cref="T:System.Threading.WaitHandle" /> autre que <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack">Délégué <see cref="T:System.Threading.WaitOrTimerCallback" /> à appeler lorsque le paramètre <paramref name="waitObject" /> est signalé.</param>
      <param name="state">Objet passé au délégué.</param>
      <param name="millisecondsTimeOutInterval">Délai en millisecondes. Si le paramètre <paramref name="millisecondsTimeOutInterval" /> a la valeur zéro (0), la fonction teste l'état de l'objet et procède à un retour immédiat. Si <paramref name="millisecondsTimeOutInterval" /> a la valeur -1, le délai d'expiration de la fonction ne prend jamais fin.</param>
      <param name="executeOnlyOnce">
        <see langword="true" /> pour indiquer que le thread ne tiendra plus compte du paramètre <paramref name="waitObject" /> une fois le délégué appelé ; <see langword="false" /> pour indiquer que la minuterie sera réinitialisée à chaque achèvement d'opération d'attente, jusqu'à annulation de l'inscription de l'attente.</param>
      <returns>
        <see cref="T:System.Threading.RegisteredWaitHandle" /> qui encapsule le handle natif.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="millisecondsTimeOutInterval" /> est inférieur à -1.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
      <summary>Inscrit un délégué en attente de <see cref="T:System.Threading.WaitHandle" />, en spécifiant une valeur <see cref="T:System.TimeSpan" /> pour indiquer le délai.</summary>
      <param name="waitObject">
        <see cref="T:System.Threading.WaitHandle" /> à inscrire. Utilisez un <see cref="T:System.Threading.WaitHandle" /> autre que <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack">Délégué <see cref="T:System.Threading.WaitOrTimerCallback" /> à appeler lorsque le paramètre <paramref name="waitObject" /> est signalé.</param>
      <param name="state">Objet passé au délégué.</param>
      <param name="timeout">Délai représenté par <see cref="T:System.TimeSpan" />. Si le paramètre <paramref name="timeout" /> a la valeur zéro, la fonction teste l'état de l'objet et procède à un retour immédiat. Si <paramref name="timeout" /> a la valeur -1, le délai d'expiration de la fonction ne prend jamais fin.</param>
      <param name="executeOnlyOnce">
        <see langword="true" /> pour indiquer que le thread ne tiendra plus compte du paramètre <paramref name="waitObject" /> une fois le délégué appelé ; <see langword="false" /> pour indiquer que la minuterie sera réinitialisée à chaque achèvement d'opération d'attente, jusqu'à annulation de l'inscription de l'attente.</param>
      <returns>
        <see cref="T:System.Threading.RegisteredWaitHandle" /> qui encapsule le handle natif.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="timeout" /> est inférieur à -1.</exception>
      <exception cref="T:System.NotSupportedException">Le paramètre <paramref name="timeout" /> est supérieur à <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
      <summary>Inscrit un délégué pour attendre un <see cref="T:System.Threading.WaitHandle" />, en utilisant, pour indiquer le délai en millisecondes, un entier 32 bits non signé.</summary>
      <param name="waitObject">
        <see cref="T:System.Threading.WaitHandle" /> à inscrire. Utilisez un <see cref="T:System.Threading.WaitHandle" /> autre que <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack">Délégué <see cref="T:System.Threading.WaitOrTimerCallback" /> à appeler lorsque le paramètre <paramref name="waitObject" /> est signalé.</param>
      <param name="state">Objet passé au délégué.</param>
      <param name="millisecondsTimeOutInterval">Délai en millisecondes. Si le paramètre <paramref name="millisecondsTimeOutInterval" /> a la valeur zéro (0), la fonction teste l'état de l'objet et procède à un retour immédiat. Si <paramref name="millisecondsTimeOutInterval" /> a la valeur -1, le délai d'expiration de la fonction ne prend jamais fin.</param>
      <param name="executeOnlyOnce">
        <see langword="true" /> pour indiquer que le thread ne tiendra plus compte du paramètre <paramref name="waitObject" /> une fois le délégué appelé ; <see langword="false" /> pour indiquer que la minuterie sera réinitialisée à chaque achèvement d'opération d'attente, jusqu'à annulation de l'inscription de l'attente.</param>
      <returns>
        <see cref="T:System.Threading.RegisteredWaitHandle" /> pouvant être utilisé pour annuler l'opération d'attente inscrite.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="millisecondsTimeOutInterval" /> est inférieur à -1.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
      <summary>Définit le nombre de demandes au pool de threads pouvant être simultanément actives. Toutes les demandes excédant ce nombre restent dans la file d'attente jusqu'à ce que des threads du pool soient disponibles.</summary>
      <param name="workerThreads">Nombre maximal de threads de travail dans le pool de threads.</param>
      <param name="completionPortThreads">Nombre maximal de threads d'E/S asynchrones dans le pool de threads.</param>
      <returns>
        <see langword="true" /> si la modification aboutit ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
      <summary>Définit le nombre minimal de threads que le pool de threads crée à la demande, au fur et à mesure que de nouvelles requêtes sont effectuées, avant de basculer sur un algorithme pour la gestion de la création et de la suppression des threads.</summary>
      <param name="workerThreads">Nombre minimal de threads de travail que le pool de threads crée à la demande.</param>
      <param name="completionPortThreads">Nombre minimal de threads d'E/S asynchrones que le pool de threads crée à la demande.</param>
      <returns>
        <see langword="true" /> si la modification aboutit ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.ThreadPool.ThreadCount">
      <summary>Obtient le nombre de threads du pool de threads qui existent actuellement.</summary>
      <returns>Nombre de threads de pool de threads qui existent actuellement.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
      <summary>Met en file d'attente l'exécution d'une opération d'E/S avec chevauchement.</summary>
      <param name="overlapped">Structure <see cref="T:System.Threading.NativeOverlapped" /> à placer en file d'attente.</param>
      <returns>
        <see langword="true" /> si l'opération a été mise en file d'attente dans un port de terminaison d'E/S ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.IThreadPoolWorkItem,System.Boolean)">
      <summary>Met en file d’attente l’objet élément de travail spécifié dans le pool de threads.</summary>
      <param name="callBack">Élément de travail à appeler lorsqu’un thread du pool de threads sélectionne cet élément de travail.</param>
      <param name="preferLocal">
        <see langword="true" /> pour placer l’élément de travail dans une file d’attente à proximité du thread actuel ; <see langword="false" /> pour placer l’élément de travail dans la file d’attente partagée du pool de threads.</param>
      <returns>
        <see langword="true" /> si la méthode est exécutée avec succès ; <see cref="T:System.OutOfMemoryException" /> est levée si l'élément de travail n'a pas pu être placé en file d'attente.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">L’élément de travail est un <see cref="T:System.Threading.Tasks.Task" />.</exception>
      <exception cref="T:System.OutOfMemoryException">L'élément de travail n'a pas pu être placé en file d'attente.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
      <summary>Met le délégué spécifié en file d'attente dans le pool de threads, mais ne propage pas la pile d'appels vers le thread de travail.</summary>
      <param name="callBack">
        <see cref="T:System.Threading.WaitCallback" /> représentant le délégué à appeler lorsqu’un thread du pool de threads sélectionne l’élément de travail.</param>
      <param name="state">Objet passé au délégué lors de son traitement dans le pool de threads.</param>
      <returns>
        <see langword="true" /> si la méthode est exécutée avec succès ; <see cref="T:System.OutOfMemoryException" /> est levée si l'élément de travail n'a pas pu être placé en file d'attente.</returns>
      <exception cref="T:System.Security.SecurityException">L'appelant n'a pas l'autorisation requise.</exception>
      <exception cref="T:System.ApplicationException">Une condition de mémoire insuffisante a été rencontrée.</exception>
      <exception cref="T:System.OutOfMemoryException">L'élément de travail n'a pas pu être placé en file d'attente.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callBack" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem``1(System.Action{``0},``0,System.Boolean)">
      <summary>Place en file d'attente une méthode spécifiée par un délégué <see cref="T:System.Action`1" /> pour exécution et spécifie un objet contenant les données que la méthode doit utiliser. La méthode s'exécute lorsqu'un thread du pool devient disponible.</summary>
      <param name="callBack">Délégué représentant la méthode à exécuter.</param>
      <param name="state">Objet contenant les données que la méthode doit utiliser.</param>
      <param name="preferLocal">
        <see langword="true" /> pour placer l’élément de travail dans une file d’attente à proximité du thread actuel ; <see langword="false" /> pour placer l’élément de travail dans la file d’attente partagée du pool de threads.</param>
      <typeparam name="TState">Le type des éléments de <paramref name="state" />.</typeparam>
      <returns>
        <see langword="true" /> si la méthode est placée en file d'attente avec succès ; <see cref="T:System.NotSupportedException" /> est levé si l'élément de travail n'a pas pu être placé en file d'attente.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">L'élément de travail n'a pas pu être placé en file d'attente.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
      <summary>Inscrit un délégué pour attendre un <see cref="T:System.Threading.WaitHandle" />, en utilisant, pour indiquer le délai en millisecondes, un entier signé 32 bits. Cette méthode ne propage pas la pile appelante vers le thread de travail.</summary>
      <param name="waitObject">
        <see cref="T:System.Threading.WaitHandle" /> à inscrire. Utilisez un <see cref="T:System.Threading.WaitHandle" /> autre que <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack">Délégué à appeler lorsque le paramètre <paramref name="waitObject" /> est signalé.</param>
      <param name="state">Objet passé au délégué.</param>
      <param name="millisecondsTimeOutInterval">Délai en millisecondes. Si le paramètre <paramref name="millisecondsTimeOutInterval" /> a la valeur zéro (0), la fonction teste l'état de l'objet et procède à un retour immédiat. Si <paramref name="millisecondsTimeOutInterval" /> a la valeur -1, le délai d'expiration de la fonction ne prend jamais fin.</param>
      <param name="executeOnlyOnce">
        <see langword="true" /> pour indiquer que le thread ne tiendra plus compte du paramètre <paramref name="waitObject" /> une fois le délégué appelé ; <see langword="false" /> pour indiquer que la minuterie sera réinitialisée à chaque achèvement d'opération d'attente, jusqu'à annulation de l'inscription de l'attente.</param>
      <returns>Objet <see cref="T:System.Threading.RegisteredWaitHandle" /> pouvant être utilisé pour annuler l'opération d'attente inscrite.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="millisecondsTimeOutInterval" /> est inférieur à -1.</exception>
      <exception cref="T:System.Security.SecurityException">L'appelant n'a pas l'autorisation requise.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
      <summary>Inscrit un délégué pour attendre un <see cref="T:System.Threading.WaitHandle" />, en utilisant, pour indiquer le délai en millisecondes, un entier 64 bits signé. Cette méthode ne propage pas la pile appelante vers le thread de travail.</summary>
      <param name="waitObject">
        <see cref="T:System.Threading.WaitHandle" /> à inscrire. Utilisez un <see cref="T:System.Threading.WaitHandle" /> autre que <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack">Délégué à appeler lorsque le paramètre <paramref name="waitObject" /> est signalé.</param>
      <param name="state">Objet passé au délégué.</param>
      <param name="millisecondsTimeOutInterval">Délai en millisecondes. Si le paramètre <paramref name="millisecondsTimeOutInterval" /> a la valeur zéro (0), la fonction teste l'état de l'objet et procède à un retour immédiat. Si <paramref name="millisecondsTimeOutInterval" /> a la valeur -1, le délai d'expiration de la fonction ne prend jamais fin.</param>
      <param name="executeOnlyOnce">
        <see langword="true" /> pour indiquer que le thread ne tiendra plus compte du paramètre <paramref name="waitObject" /> une fois le délégué appelé ; <see langword="false" /> pour indiquer que la minuterie sera réinitialisée à chaque achèvement d'opération d'attente, jusqu'à annulation de l'inscription de l'attente.</param>
      <returns>Objet <see cref="T:System.Threading.RegisteredWaitHandle" /> pouvant être utilisé pour annuler l'opération d'attente inscrite.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="millisecondsTimeOutInterval" /> est inférieur à -1.</exception>
      <exception cref="T:System.Security.SecurityException">L'appelant n'a pas l'autorisation requise.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
      <summary>Inscrit un délégué en attente de <see cref="T:System.Threading.WaitHandle" />, en spécifiant une valeur <see cref="T:System.TimeSpan" /> pour indiquer le délai. Cette méthode ne propage pas la pile appelante vers le thread de travail.</summary>
      <param name="waitObject">
        <see cref="T:System.Threading.WaitHandle" /> à inscrire. Utilisez un <see cref="T:System.Threading.WaitHandle" /> autre que <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack">Délégué à appeler lorsque le paramètre <paramref name="waitObject" /> est signalé.</param>
      <param name="state">Objet passé au délégué.</param>
      <param name="timeout">Délai représenté par <see cref="T:System.TimeSpan" />. Si le paramètre <paramref name="timeout" /> a la valeur zéro, la fonction teste l'état de l'objet et procède à un retour immédiat. Si <paramref name="timeout" /> a la valeur -1, le délai d'expiration de la fonction ne prend jamais fin.</param>
      <param name="executeOnlyOnce">
        <see langword="true" /> pour indiquer que le thread ne tiendra plus compte du paramètre <paramref name="waitObject" /> une fois le délégué appelé ; <see langword="false" /> pour indiquer que la minuterie sera réinitialisée à chaque achèvement d'opération d'attente, jusqu'à annulation de l'inscription de l'attente.</param>
      <returns>Objet <see cref="T:System.Threading.RegisteredWaitHandle" /> pouvant être utilisé pour annuler l'opération d'attente inscrite.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="timeout" /> est inférieur à -1.</exception>
      <exception cref="T:System.NotSupportedException">Le paramètre <paramref name="timeout" /> est supérieur à <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.Security.SecurityException">L'appelant n'a pas l'autorisation requise.</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
      <summary>Inscrit un délégué pour attendre un <see cref="T:System.Threading.WaitHandle" />, en utilisant, pour indiquer le délai en millisecondes, un entier 32 bits non signé. Cette méthode ne propage pas la pile appelante vers le thread de travail.</summary>
      <param name="waitObject">
        <see cref="T:System.Threading.WaitHandle" /> à inscrire. Utilisez un <see cref="T:System.Threading.WaitHandle" /> autre que <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack">Délégué à appeler lorsque le paramètre <paramref name="waitObject" /> est signalé.</param>
      <param name="state">Objet passé au délégué.</param>
      <param name="millisecondsTimeOutInterval">Délai en millisecondes. Si le paramètre <paramref name="millisecondsTimeOutInterval" /> a la valeur zéro (0), la fonction teste l'état de l'objet et procède à un retour immédiat. Si <paramref name="millisecondsTimeOutInterval" /> a la valeur -1, le délai d'expiration de la fonction ne prend jamais fin.</param>
      <param name="executeOnlyOnce">
        <see langword="true" /> pour indiquer que le thread ne tiendra plus compte du paramètre <paramref name="waitObject" /> une fois le délégué appelé ; <see langword="false" /> pour indiquer que la minuterie sera réinitialisée à chaque achèvement d'opération d'attente, jusqu'à annulation de l'inscription de l'attente.</param>
      <returns>Objet <see cref="T:System.Threading.RegisteredWaitHandle" /> pouvant être utilisé pour annuler l'opération d'attente inscrite.</returns>
      <exception cref="T:System.Security.SecurityException">L'appelant n'a pas l'autorisation requise.</exception>
    </member>
    <member name="T:System.Threading.WaitCallback">
      <summary>Représente une méthode de rappel qu'un thread du pool doit exécuter.</summary>
      <param name="state">Objet contenant les informations que la méthode de rappel doit utiliser.</param>
    </member>
    <member name="T:System.Threading.WaitOrTimerCallback">
      <summary>Représente une méthode à appeler lorsqu'un <see cref="T:System.Threading.WaitHandle" /> est signalé ou expire.</summary>
      <param name="state">Objet contenant les informations que la méthode de rappel doit utiliser à chacune de ses exécutions.</param>
      <param name="timedOut">
        <see langword="true" /> si le <see cref="T:System.Threading.WaitHandle" /> a expiré ; <see langword="false" /> s'il a été signalé.</param>
    </member>
  </members>
</doc>
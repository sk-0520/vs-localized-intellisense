<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.ObjectModel</name>
  </assembly>
  <members>
    <member name="T:System.Collections.ObjectModel.KeyedCollection`2">
      <summary vsli:raw="Provides the abstract base class for a collection whose keys are embedded in the values.">Fournit la classe de base abstraite pour une collection dont les clés sont incorporées dans les valeurs.</summary>
      <typeparam name="TKey" vsli:raw="The type of keys in the collection.">Type de clés de la collection.</typeparam>
      <typeparam name="TItem" vsli:raw="The type of items in the collection.">Type d'éléments de la collection.</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.ObjectModel.KeyedCollection`2&quot; /&gt; class that uses the default equality comparer.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> qui utilise le comparateur d'égalité par défaut.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.ObjectModel.KeyedCollection`2&quot; /&gt; class that uses the specified equality comparer.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> qui utilise le comparateur d'égalité spécifié.</summary>
      <param name="comparer" vsli:raw="The implementation of the &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; generic interface to use when comparing keys, or &lt;see langword=&quot;null&quot; /&gt; to use the default equality comparer for the type of the key, obtained from &lt;see cref=&quot;P:System.Collections.Generic.EqualityComparer`1.Default&quot; /&gt;.">Implémentation de l'interface générique <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> à utiliser lors de la comparaison des clés, ou <see langword="null" /> pour utiliser le comparateur d'égalité par défaut pour le type de la clé provenant de <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.ObjectModel.KeyedCollection`2&quot; /&gt; class that uses the specified equality comparer and creates a lookup dictionary when the specified threshold is exceeded.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> qui utilise le comparateur d'égalité spécifié et crée un dictionnaire de recherche lorsque le seuil spécifié est dépassé.</summary>
      <param name="comparer" vsli:raw="The implementation of the &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; generic interface to use when comparing keys, or &lt;see langword=&quot;null&quot; /&gt; to use the default equality comparer for the type of the key, obtained from &lt;see cref=&quot;P:System.Collections.Generic.EqualityComparer`1.Default&quot; /&gt;.">Implémentation de l'interface générique <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> à utiliser lors de la comparaison des clés, ou <see langword="null" /> pour utiliser le comparateur d'égalité par défaut pour le type de la clé provenant de <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />.</param>
      <param name="dictionaryCreationThreshold" vsli:raw="The number of elements the collection can hold without creating a lookup dictionary (0 creates the lookup dictionary when the first item is added), or -1 to specify that a lookup dictionary is never created.">Nombre d’éléments que la collection peut contenir sans créer de dictionnaire de recherche (0 crée le dictionnaire de recherche quand le premier élément est ajouté), ou -1 pour spécifier qu’aucun dictionnaire de recherche ne doit être créé.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;dictionaryCreationThreshold&quot; /&gt; is less than -1.">
        <paramref name="dictionaryCreationThreshold" /> est inférieur à -1.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
      <summary vsli:raw="Changes the key associated with the specified element in the lookup dictionary.">Modifie la clé associée à l'élément spécifié dans le dictionnaire de recherche.</summary>
      <param name="item" vsli:raw="The element to change the key of.">Clé de l'élément à modifier.</param>
      <param name="newKey" vsli:raw="The new key for &lt;paramref name=&quot;item&quot; /&gt;.">Nouvelle clé de <paramref name="item" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;item&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="item" /> a la valeur <see langword="null" />.

ou -
<paramref name="key" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;item&quot; /&gt; is not found.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;key&quot; /&gt; already exists in the &lt;see cref=&quot;T:System.Collections.ObjectModel.KeyedCollection`2&quot; /&gt;.">
        <paramref name="item" /> est introuvable.

ou -
<paramref name="key" /> existe déjà dans le <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
      <summary vsli:raw="Removes all elements from the &lt;see cref=&quot;T:System.Collections.ObjectModel.KeyedCollection`2&quot; /&gt;.">Supprime tous les éléments de <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</summary>
    </member>
    <member name="P:System.Collections.ObjectModel.KeyedCollection`2.Comparer">
      <summary vsli:raw="Gets the generic equality comparer that is used to determine equality of keys in the collection.">Obtient le comparateur d’égalité générique utilisé pour déterminer l’égalité des clés dans la collection.</summary>
      <returns vsli:raw="The implementation of the &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; generic interface that is used to determine equality of keys in the collection.">Implémentation de l'interface générique <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> utilisée pour déterminer l'égalité des clés dans la collection.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)">
      <summary vsli:raw="Determines whether the collection contains an element with the specified key.">Détermine si la collection contient un élément avec la clé spécifiée.</summary>
      <param name="key" vsli:raw="The key to locate in the &lt;see cref=&quot;T:System.Collections.ObjectModel.KeyedCollection`2&quot; /&gt;.">Clé à rechercher dans <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.ObjectModel.KeyedCollection`2&quot; /&gt; contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> contient un élément correspondant à la clé spécifiée ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
      <summary vsli:raw="Gets the lookup dictionary of the &lt;see cref=&quot;T:System.Collections.ObjectModel.KeyedCollection`2&quot; /&gt;.">Obtient le dictionnaire de recherche du <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</summary>
      <returns vsli:raw="The lookup dictionary of the &lt;see cref=&quot;T:System.Collections.ObjectModel.KeyedCollection`2&quot; /&gt;, if it exists; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">Dictionnaire de recherche du <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />, s'il existe ; sinon, <see langword="null" />.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
      <summary vsli:raw="When implemented in a derived class, extracts the key from the specified element.">Lorsqu'il est implémenté dans une classe dérivée, il extrait la clé de l'élément spécifié.</summary>
      <param name="item" vsli:raw="The element from which to extract the key.">Élément à partir duquel extraire la clé.</param>
      <returns vsli:raw="The key for the specified element.">Clé pour l'élément spécifié.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
      <summary vsli:raw="Inserts an element into the &lt;see cref=&quot;T:System.Collections.ObjectModel.KeyedCollection`2&quot; /&gt; at the specified index.">Insère un élément dans la classe <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> au niveau de l'index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;item&quot; /&gt; should be inserted.">Index de base zéro au niveau duquel <paramref name="item" /> doit être inséré.</param>
      <param name="item" vsli:raw="The object to insert.">Objet à insérer.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is greater than &lt;see cref=&quot;P:System.Collections.ObjectModel.Collection`1.Count&quot; /&gt;.">
        <paramref name="index" /> est inférieur à 0.

ou -
<paramref name="index" /> est supérieur à <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
      <summary vsli:raw="Gets the element with the specified key.">Obtient l'élément avec la clé spécifiée.</summary>
      <param name="key" vsli:raw="The key of the element to get.">Clé de l'élément à obtenir.</param>
      <returns vsli:raw="The element with the specified key. If an element with the specified key is not found, an exception is thrown.">Élément correspondant à la clé spécifiée. Si un élément avec la clé spécifiée n'est pas trouvé, une exception est levée.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="An element with the specified key does not exist in the collection.">Il n'existe aucun élément portant la clé spécifiée dans la collection.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the &lt;see cref=&quot;T:System.Collections.ObjectModel.KeyedCollection`2&quot; /&gt;.">Supprime l'élément avec la clé spécifiée d'<see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Clé de l'élément à supprimer.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; is not found in the &lt;see cref=&quot;T:System.Collections.ObjectModel.KeyedCollection`2&quot; /&gt;.">
        <see langword="true" /> si la suppression de l'élément réussit ; sinon, <see langword="false" />.  Cette méthode retourne également <see langword="false" /> si <paramref name="key" /> est introuvable dans <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
      <summary vsli:raw="Removes the element at the specified index of the &lt;see cref=&quot;T:System.Collections.ObjectModel.KeyedCollection`2&quot; /&gt;.">Supprime l'élément au niveau de l'index spécifié de <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</summary>
      <param name="index" vsli:raw="The index of the element to remove.">Index de l'élément à supprimer.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
      <summary vsli:raw="Replaces the item at the specified index with the specified item.">Remplace l'élément à l'index spécifié par l'élément spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to be replaced.">Index de base zéro de l'élément à remplacer.</param>
      <param name="item" vsli:raw="The new item.">Nouvel élément.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.TryGetValue(`0,`1@)">
      <summary vsli:raw="Tries to get an item from the collection using the specified key.">Tente d’obtenir un élément de la collection utilisant la clé spécifiée.</summary>
      <param name="key" vsli:raw="The key of the item to search in the collection.">Clé de l’élément à rechercher dans la collection.</param>
      <param name="item" vsli:raw="When this method returns &lt;see langword=&quot;true&quot; /&gt;, the item from the collection that matches the provided key; when this method returns &lt;see langword=&quot;false&quot; /&gt;, the &lt;see langword=&quot;default&quot; /&gt; value for the type of the collection.">Quand cette méthode retourne <see langword="true" />, l’élément de la collection correspond à la clé fournie ; quand cette méthode retourne <see langword="false" />, la valeur est <see langword="default" /> pour le type de la collection.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an item for the specified key was found in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si un élément pour la clé spécifiée a été trouvé dans la collection ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="T:System.Collections.ObjectModel.ObservableCollection`1">
      <summary vsli:raw="Represents a dynamic data collection that provides notifications when items get added or removed, or when the whole list is refreshed.">Représente une collection de données dynamiques qui fournit des notifications quand des éléments sont ajoutés, supprimés ou que l’intégralité de la liste est actualisée.</summary>
      <typeparam name="T" vsli:raw="The type of elements in the collection.">Type des éléments de la collection.</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.ObjectModel.ObservableCollection`1&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.ObjectModel.ObservableCollection`1&quot; /&gt; class that contains elements copied from the specified collection.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> qui contient des éléments copiés depuis la collection spécifiée.</summary>
      <param name="collection" vsli:raw="The collection from which the elements are copied.">Collection à partir de laquelle les éléments sont copiés.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;collection&quot; /&gt; parameter cannot be &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="collection" /> ne peut pas avoir la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor(System.Collections.Generic.List{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.ObjectModel.ObservableCollection`1&quot; /&gt; class that contains elements copied from the specified list.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> qui contient des éléments copiés à partir de la liste spécifiée.</summary>
      <param name="list" vsli:raw="The list from which the elements are copied.">Liste à partir de laquelle les éléments sont copiés.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;list&quot; /&gt; parameter cannot be &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="list" /> ne peut pas avoir la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy">
      <summary vsli:raw="Disallows reentrant attempts to change this collection.">Rejette les tentatives réentrantes ayant pour but de modifier cette collection.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.IDisposable&quot; /&gt; object that can be used to dispose of the object.">Objet <see cref="T:System.IDisposable" /> qui peut être utilisé pour supprimer l’objet.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.CheckReentrancy">
      <summary vsli:raw="Checks for reentrant attempts to change this collection.">Vérifie les tentatives réentrantes ayant pour but de modifier cette collection.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="If there was a call to &lt;see cref=&quot;M:System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy&quot; /&gt; of which the &lt;see cref=&quot;T:System.IDisposable&quot; /&gt; return value has not yet been disposed of. Typically, this means when there are additional attempts to change this collection during a &lt;see cref=&quot;E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged&quot; /&gt; event. However, it depends on when derived classes choose to call &lt;see cref=&quot;M:System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy&quot; /&gt;.">S’il y a eu un appel à <see cref="M:System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy" /> dont la valeur de retour <see cref="T:System.IDisposable" /> n’a pas encore été supprimée. En règle générale, cela signifie qu’il y a des tentatives de modification de cette collection supplémentaires pendant un événement <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" />. Toutefois, cela dépend du moment où les classes dérivées choisissent d’appeler <see cref="M:System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.ClearItems">
      <summary vsli:raw="Removes all items from the collection.">Supprime tous les éléments de la collection.</summary>
    </member>
    <member name="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged">
      <summary vsli:raw="Occurs when an item is added, removed, or moved, or the entire list is refreshed.">Se produit quand un élément est ajouté, supprimé, modifié ou déplacé, ou quand la liste entière est actualisée.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.InsertItem(System.Int32,`0)">
      <summary vsli:raw="Inserts an item into the collection at the specified index.">Insère un élément dans la collection au niveau de l'index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;item&quot; /&gt; should be inserted.">Index de base zéro au niveau duquel <paramref name="item" /> doit être inséré.</param>
      <param name="item" vsli:raw="The object to insert.">Objet à insérer.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.Move(System.Int32,System.Int32)">
      <summary vsli:raw="Moves the item at the specified index to a new location in the collection.">Déplace l’élément de l’index spécifié vers un nouvel emplacement dans la collection.</summary>
      <param name="oldIndex" vsli:raw="The zero-based index specifying the location of the item to be moved.">Index de base zéro spécifiant l’emplacement de l’élément à déplacer.</param>
      <param name="newIndex" vsli:raw="The zero-based index specifying the new location of the item.">Index de base zéro spécifiant le nouvel emplacement de l’élément.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.MoveItem(System.Int32,System.Int32)">
      <summary vsli:raw="Moves the item at the specified index to a new location in the collection.">Déplace l’élément de l’index spécifié vers un nouvel emplacement dans la collection.</summary>
      <param name="oldIndex" vsli:raw="The zero-based index specifying the location of the item to be moved.">Index de base zéro spécifiant l’emplacement de l’élément à déplacer.</param>
      <param name="newIndex" vsli:raw="The zero-based index specifying the new location of the item.">Index de base zéro spécifiant le nouvel emplacement de l’élément.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged&quot; /&gt; event with the provided arguments.">Déclenche l’événement <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" /> avec les arguments fournis.</summary>
      <param name="e" vsli:raw="Arguments of the event being raised.">Arguments de l’événement déclenché.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged&quot; /&gt; event with the provided arguments.">Déclenche l’événement <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged" /> avec les arguments fournis.</summary>
      <param name="e" vsli:raw="Arguments of the event being raised.">Arguments de l’événement déclenché.</param>
    </member>
    <member name="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged">
      <summary vsli:raw="Occurs when a property value changes.">Se produit en cas de modification d'une valeur de propriété.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.RemoveItem(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index of the collection.">Supprime l’élément à l’index spécifié de la collection.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to remove.">Index de base zéro de l'élément à supprimer.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces the element at the specified index.">Remplace l'élément à l'index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to replace.">Index de base zéro de l'élément à remplacer.</param>
      <param name="item" vsli:raw="The new value for the element at the specified index.">Nouvelle valeur de l'élément à l'index spécifié.</param>
    </member>
    <member name="E:System.Collections.ObjectModel.ObservableCollection`1.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary vsli:raw="Occurs when a property value changes.">Se produit en cas de modification d'une valeur de propriété.</summary>
    </member>
    <member name="T:System.Collections.ObjectModel.ReadOnlyDictionary`2">
      <summary>Représente une collection générique en lecture seule de paires clé/valeur.</summary>
      <typeparam name="TKey">Type des clés du dictionnaire.</typeparam>
      <typeparam name="TValue">Type des valeurs du dictionnaire.</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" /> qui est un wrapper autour du dictionnaire spécifié.</summary>
      <param name="dictionary">Dictionnaire à inclure dans un wrapper.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ContainsKey(`0)">
      <summary>Détermine si le dictionnaire contient un élément avec la clé spécifiée.</summary>
      <param name="key">Clé à rechercher dans le dictionnaire.</param>
      <returns>
        <see langword="true" /> si le dictionnaire contient un élément ayant la clé spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Count">
      <summary>Obtient le nombre d'éléments dans le dictionnaire.</summary>
      <returns>Nombre d'éléments dans le dictionnaire.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Dictionary">
      <summary>Obtient le dictionnaire qui est encapsulé dans un wrapper par cet objet <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" />.</summary>
      <returns>Dictionnaire qui est inclus dans un wrapper par cet objet.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein de <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" />.</summary>
      <returns>Énumérateur permettant d'effectuer une itération au sein de la collection.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Item(`0)">
      <summary>Obtient l'élément ayant la clé spécifiée.</summary>
      <param name="key">Clé de l'élément à obtenir.</param>
      <returns>Élément qui contient la clé spécifiée.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">La propriété est récupérée et <paramref name="key" /> est introuvable.</exception>
    </member>
    <member name="T:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection">
      <summary>Représente une collection en lecture seule des clés d'un objet <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" />.</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
      <summary>Copie les éléments de la collection dans un tableau, en commençant au niveau d'un index de tableau spécifique.</summary>
      <param name="array">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir de la collection. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="arrayIndex">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> est inférieur à 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> est multidimensionnel.

ou -
Le nombre d'éléments dans la collection source est supérieur à l'espace disponible entre <paramref name="arrayIndex" /> et la fin du <paramref name="array" /> de destination.

ou
Le type <paramref name="T" /> ne peut pas être casté automatiquement en type du <paramref name="array" /> de destination.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.Count">
      <summary>Obtient le nombre d’éléments de la collection.</summary>
      <returns>Nombre d’éléments de la collection.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein de la collection.</summary>
      <returns>Énumérateur permettant d'effectuer une itération au sein de la collection.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Add(`0)">
      <summary>Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</summary>
      <param name="item">Objet à ajouter à la collection.</param>
      <exception cref="T:System.NotSupportedException">Dans tous les cas.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Clear">
      <summary>Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</summary>
      <exception cref="T:System.NotSupportedException">Dans tous les cas.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Contains(`0)">
      <summary>Détermine si la collection contient une valeur spécifique.</summary>
      <param name="item">Objet à localiser dans la collection.</param>
      <returns>
        <see langword="true" /> si <paramref name="item" /> existe dans la collection ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#IsReadOnly">
      <summary>Obtient une valeur indiquant si le dictionnaire est en lecture seule.</summary>
      <returns>
        <see langword="true" /> dans tous les cas.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Remove(`0)">
      <summary>Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</summary>
      <param name="item">Objet à supprimer de la collection.</param>
      <returns>
        <see langword="true" /> si <paramref name="item" /> a été correctement supprimé de la collection ; sinon, <see langword="false" />. Cette méthode retourne également <see langword="false" /> si <paramref name="item" /> est introuvable dans la collection d'origine.</returns>
      <exception cref="T:System.NotSupportedException">Dans tous les cas.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copie les éléments de la collection dans un tableau, en commençant au niveau d'un index de tableau spécifique.</summary>
      <param name="array">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir de la collection. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="index">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> est inférieur à 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> est multidimensionnel.

ou -
Le nombre d'éléments dans la collection source est supérieur à l'espace disponible entre <paramref name="index" /> et la fin du <paramref name="array" /> de destination.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Obtient une valeur qui indique si l'accès à la collection est synchronisé (thread safe).</summary>
      <returns>
        <see langword="true" /> si l'accès à la collection est synchronisé (thread-safe) ; sinon <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot">
      <summary>Obtient un objet qui peut être utilisé pour synchroniser l’accès à la collection.</summary>
      <returns>Objet permettant de synchroniser l’accès à la collection.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein de la collection.</summary>
      <returns>Énumérateur permettant d'effectuer une itération au sein de la collection.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Keys">
      <summary>Obtient une collection de clés qui contient les clés du dictionnaire.</summary>
      <returns>Collection de clés qui contient les clés du dictionnaire.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</summary>
      <param name="item">Objet à ajouter au dictionnaire.</param>
      <exception cref="T:System.NotSupportedException">Dans tous les cas.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear">
      <summary>Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</summary>
      <exception cref="T:System.NotSupportedException">Dans tous les cas.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Détermine si le dictionnaire contient une valeur spécifique.</summary>
      <param name="item">Objet à rechercher dans le dictionnaire.</param>
      <returns>
        <see langword="true" /> si <paramref name="item" /> se trouve dans le dictionnaire ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>Copie les éléments du dictionnaire dans un tableau, en commençant au niveau d'un index de tableau spécifié.</summary>
      <param name="array">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir du dictionnaire. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="arrayIndex">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> est inférieur à 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> est multidimensionnel.

ou -
Le nombre d'éléments dans le dictionnaire source est supérieur à l'espace disponible entre <paramref name="arrayIndex" /> et la fin de l'<paramref name="array" /> de destination.

ou -
Le type <paramref name="T" /> ne peut pas être casté automatiquement en type du <paramref name="array" /> de destination.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary>Obtient une valeur indiquant si le dictionnaire est en lecture seule.</summary>
      <returns>Retourne toujours <see langword="true" /> pour indiquer que le dictionnaire est en lecture seule.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</summary>
      <param name="item">Objet à supprimer du dictionnaire.</param>
      <returns>Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</returns>
      <exception cref="T:System.NotSupportedException">Dans tous les cas.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <summary>Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</summary>
      <param name="key">Objet à utiliser comme clé de l'élément à ajouter.</param>
      <param name="value">Objet à utiliser comme valeur de l'élément à ajouter.</param>
      <exception cref="T:System.NotSupportedException">Dans tous les cas.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Item(`0)">
      <summary>Obtient l'élément ayant la clé spécifiée.</summary>
      <param name="key">Clé de l'élément à obtenir ou définir.</param>
      <returns>Élément qui contient la clé spécifiée.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">La propriété est récupérée et <paramref name="key" /> est introuvable.</exception>
      <exception cref="T:System.NotSupportedException">La propriété est définie.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>Obtient une collection qui contient les clés du dictionnaire.</summary>
      <returns>Collection qui contient les clés de l'objet qui implémente <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <summary>Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</summary>
      <param name="key">Clé de l'élément à supprimer.</param>
      <returns>Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</returns>
      <exception cref="T:System.NotSupportedException">Dans tous les cas.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>Obtient une collection qui contient les valeurs dans le dictionnaire.</summary>
      <returns>Collection qui contient les valeurs de l'objet qui implémente <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Keys">
      <summary>Obtient une collection énumérable qui contient les clés dans dictionnaire en lecture seule.</summary>
      <returns>Collection énumérable qui contient les clés dans dictionnaire en lecture seule.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Values">
      <summary>Obtient une collection énumérable qui contient les valeurs dans dictionnaire en lecture seule.</summary>
      <returns>Collection énumérable qui contient les valeurs dans dictionnaire en lecture seule.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copie les éléments du dictionnaire dans un tableau, en commençant au niveau de l’index de tableau spécifié.</summary>
      <param name="array">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir du dictionnaire. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="index">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> est inférieur à zéro.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> est multidimensionnel.

ou -
Le nombre d'éléments dans le dictionnaire source est supérieur à l'espace disponible entre <paramref name="index" /> et la fin de l'<paramref name="array" /> de destination.

ou -
Le type du dictionnaire source ne peut pas être automatiquement casté en type d’<paramref name="array" /> de destination.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>Obtient une valeur qui indique si l'accès au dictionnaire est synchronisé (thread-safe).</summary>
      <returns>
        <see langword="true" /> si l'accès au dictionnaire est synchronisé (thread-safe) ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>Obtient un objet qui peut être utilisé pour synchroniser l'accès au dictionnaire.</summary>
      <returns>Objet qui peut être utilisé pour synchroniser l'accès au dictionnaire.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</summary>
      <param name="key">Clé de l'élément à ajouter.</param>
      <param name="value">Valeur de l'élément à ajouter.</param>
      <exception cref="T:System.NotSupportedException">Dans tous les cas.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Clear">
      <summary>Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</summary>
      <exception cref="T:System.NotSupportedException">Dans tous les cas.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>Détermine si le dictionnaire contient un élément avec la clé spécifiée.</summary>
      <param name="key">Clé à rechercher dans le dictionnaire.</param>
      <returns>
        <see langword="true" /> si le dictionnaire contient un élément ayant la clé spécifiée ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>Retourne un énumérateur pour le dictionnaire.</summary>
      <returns>Énumérateur pour le dictionnaire.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>Obtient une valeur qui indique si le dictionnaire est de taille fixe.</summary>
      <returns>
        <see langword="true" /> si le dictionnaire a une taille fixe ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>Obtient une valeur indiquant si le dictionnaire est en lecture seule.</summary>
      <returns>
        <see langword="true" /> dans tous les cas.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>Obtient l'élément ayant la clé spécifiée.</summary>
      <param name="key">Clé de l'élément à obtenir ou définir.</param>
      <returns>Élément qui contient la clé spécifiée.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">La propriété est définie.

ou -
La propriété est définie, <paramref name="key" /> n'existe pas dans la collection et le dictionnaire a une taille fixe.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Keys">
      <summary>Obtient une collection qui contient les clés du dictionnaire.</summary>
      <returns>Collection qui contient les clés du dictionnaire.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</summary>
      <param name="key">Clé de l'élément à supprimer.</param>
      <exception cref="T:System.NotSupportedException">Dans tous les cas.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Values">
      <summary>Obtient une collection qui contient les valeurs dans le dictionnaire.</summary>
      <returns>Collection qui contient les valeurs dans le dictionnaire.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein d’une collection.</summary>
      <returns>Énumérateur permettant d'effectuer une itération au sein de la collection.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
      <summary>Récupère la valeur associée à la clé spécifiée.</summary>
      <param name="key">Clé dont la valeur sera récupérée.</param>
      <param name="value">Lorsque cette méthode est retournée, la valeur associée à la clé spécifiée, si la clé est trouvée ; sinon, la valeur par défaut pour le type du paramètre <paramref name="value" />. Ce paramètre est passé sans être initialisé.</param>
      <returns>
        <see langword="true" /> si l’objet qui implémente <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" /> contient un élément correspondant à la clé spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection">
      <summary>Représente une collection en lecture seule des valeurs d'un objet <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" />.</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
      <summary>Copie les éléments de la collection dans un tableau, en commençant au niveau d'un index de tableau spécifique.</summary>
      <param name="array">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir de la collection. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="arrayIndex">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> est inférieur à 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> est multidimensionnel.

ou -
Le nombre d'éléments dans la collection source est supérieur à l'espace disponible entre <paramref name="arrayIndex" /> et la fin du <paramref name="array" /> de destination.

ou -
Le type <paramref name="T" /> ne peut pas être casté automatiquement en type du <paramref name="array" /> de destination.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.Count">
      <summary>Obtient le nombre d’éléments de la collection.</summary>
      <returns>Nombre d’éléments de la collection.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein de la collection.</summary>
      <returns>Énumérateur permettant d'effectuer une itération au sein de la collection.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Add(`1)">
      <summary>Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</summary>
      <param name="item">Objet à ajouter à la collection.</param>
      <exception cref="T:System.NotSupportedException">Dans tous les cas.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Clear">
      <summary>Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</summary>
      <exception cref="T:System.NotSupportedException">Dans tous les cas.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Contains(`1)">
      <summary>Détermine si la collection contient une valeur spécifique.</summary>
      <param name="item">Objet à localiser dans la collection.</param>
      <returns>
        <see langword="true" /> si <paramref name="item" /> existe dans la collection ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#IsReadOnly">
      <summary>Obtient une valeur qui indique si la collection est en lecture seule.</summary>
      <returns>
        <see langword="true" /> dans tous les cas.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Remove(`1)">
      <summary>Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</summary>
      <param name="item">Objet à supprimer de la collection.</param>
      <returns>
        <see langword="true" /> si <paramref name="item" /> a été correctement supprimé de la collection ; sinon, <see langword="false" />. Cette méthode retourne également <see langword="false" /> si item est introuvable dans la collection d’origine.</returns>
      <exception cref="T:System.NotSupportedException">Dans tous les cas.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copie les éléments de la collection dans un tableau, en commençant au niveau d'un index de tableau spécifique.</summary>
      <param name="array">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir de la collection. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="index">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> est inférieur à 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> est multidimensionnel.

ou -
Le nombre d'éléments dans la collection source est supérieur à l'espace disponible entre <paramref name="index" /> et la fin du <paramref name="array" /> de destination.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Obtient une valeur qui indique si l'accès à la collection est synchronisé (thread safe).</summary>
      <returns>
        <see langword="true" /> si l'accès à la collection est synchronisé (thread-safe) ; sinon <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#ICollection#SyncRoot">
      <summary>Obtient un objet qui peut être utilisé pour synchroniser l’accès à la collection.</summary>
      <returns>Objet permettant de synchroniser l’accès à la collection.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein de la collection.</summary>
      <returns>Énumérateur permettant d'effectuer une itération au sein de la collection.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Values">
      <summary>Obtient une collection qui contient les valeurs dans le dictionnaire.</summary>
      <returns>Collection qui contient les valeurs de l'objet qui implémente <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" />.</returns>
    </member>
    <member name="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1">
      <summary vsli:raw="Represents a read-only &lt;see cref=&quot;T:System.Collections.ObjectModel.ObservableCollection`1&quot; /&gt;.">Représente un <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> en lecture seule.</summary>
      <typeparam name="T" vsli:raw="The type of elements in the collection.">Type des éléments de la collection.</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.#ctor(System.Collections.ObjectModel.ObservableCollection{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1&quot; /&gt; class that serves as a wrapper around the specified &lt;see cref=&quot;T:System.Collections.ObjectModel.ObservableCollection`1&quot; /&gt;.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1" /> qui sert de wrapper autour du <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> spécifié.</summary>
      <param name="list" vsli:raw="The &lt;see cref=&quot;T:System.Collections.ObjectModel.ObservableCollection`1&quot; /&gt; with which to create this instance of the &lt;see cref=&quot;T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1&quot; /&gt; class.">
        <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> avec lequel créer cette instance de la classe <see cref="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;list&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="list" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.CollectionChanged">
      <summary vsli:raw="Occurs when an item is added or removed.">Se produit quand un élément est ajouté ou supprimé.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.CollectionChanged&quot; /&gt; event using the provided arguments.">Déclenche l’événement <see cref="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.CollectionChanged" /> en utilisant les arguments fournis.</summary>
      <param name="args" vsli:raw="Arguments of the event being raised.">Arguments de l’événement déclenché.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.PropertyChanged&quot; /&gt; event using the provided arguments.">Déclenche l’événement <see cref="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.PropertyChanged" /> en utilisant les arguments fournis.</summary>
      <param name="args" vsli:raw="Arguments of the event being raised.">Arguments de l’événement déclenché.</param>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.PropertyChanged">
      <summary vsli:raw="Occurs when a property value changes.">Se produit en cas de modification d'une valeur de propriété.</summary>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged">
      <summary vsli:raw="Occurs when the collection changes.">Se produit lorsque la collection est modifiée.</summary>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary vsli:raw="Occurs when a property value changes.">Se produit en cas de modification d'une valeur de propriété.</summary>
    </member>
    <member name="T:System.Collections.Specialized.INotifyCollectionChanged">
      <summary vsli:raw="Notifies listeners of dynamic changes, such as when an item is added and removed or the whole list is cleared.">Notifie des écouteurs de modifications dynamiques, comme quand un élément est ajouté ou supprimé, ou que l’intégralité de la liste est effacée.</summary>
    </member>
    <member name="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged">
      <summary vsli:raw="Occurs when the collection changes.">Se produit lorsque la collection est modifiée.</summary>
    </member>
    <member name="T:System.Collections.Specialized.NotifyCollectionChangedAction">
      <summary vsli:raw="Describes the action that caused a &lt;see cref=&quot;E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged&quot; /&gt; event.">Décrit l’action qui a provoqué un événement <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />.</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add">
      <summary vsli:raw="An item was added to the collection.">Un élément a été ajouté à la collection.</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move">
      <summary vsli:raw="An item was moved within the collection.">Un élément a été déplacé au sein de la collection.</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove">
      <summary vsli:raw="An item was removed from the collection.">Un élément a été supprimé de la collection.</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace">
      <summary vsli:raw="An item was replaced in the collection.">Un élément de la collection a été remplacé.</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset">
      <summary vsli:raw="The contents of the collection changed dramatically.">Le contenu de la collection a considérablement changé.</summary>
    </member>
    <member name="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged&quot; /&gt; event.">Fournit des données pour l'événement <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />.</summary>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Specialized.NotifyCollectionChangedEventArgs&quot; /&gt; class that describes a &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset&quot; /&gt; change.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> qui décrit une modification <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />.</summary>
      <param name="action" vsli:raw="The action that caused the event. This must be set to &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset&quot; /&gt;.">Action qui a déclenché l'événement. Doit avoir la valeur <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />.</param>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Specialized.NotifyCollectionChangedEventArgs&quot; /&gt; class that describes a multi-item change.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> qui décrit une modification de plusieurs éléments.</summary>
      <param name="action" vsli:raw="The action that caused the event. This can be set to &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset&quot; /&gt;, &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Add&quot; /&gt;, or &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove&quot; /&gt;.">Action qui a déclenché l'événement. Il peut s’agir de <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />, <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" />ou <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />.</param>
      <param name="changedItems" vsli:raw="The items that are affected by the change.">Éléments affectés par la modification.</param>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Specialized.NotifyCollectionChangedEventArgs&quot; /&gt; class that describes a multi-item &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace&quot; /&gt; change.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> qui décrit une modification <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> de plusieurs éléments.</summary>
      <param name="action" vsli:raw="The action that caused the event. This can only be set to &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace&quot; /&gt;.">Action qui a déclenché l'événement. Cette propriété peut uniquement avoir la valeur <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />.</param>
      <param name="newItems" vsli:raw="The new items that are replacing the original items.">Nouveaux éléments qui remplacent les éléments d'origine.</param>
      <param name="oldItems" vsli:raw="The original items that are replaced.">Éléments d'origine qui ont été remplacés.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="If &lt;paramref name=&quot;action&quot; /&gt; is not Replace.">Si <paramref name="action" /> n'est pas Replace.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="If &lt;paramref name=&quot;oldItems&quot; /&gt; or &lt;paramref name=&quot;newItems&quot; /&gt; is null.">Si <paramref name="oldItems" /> ou <paramref name="newItems" /> est Null.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Specialized.NotifyCollectionChangedEventArgs&quot; /&gt; class that describes a multi-item &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace&quot; /&gt; change.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> qui décrit une modification <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> de plusieurs éléments.</summary>
      <param name="action" vsli:raw="The action that caused the event. This can only be set to &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace&quot; /&gt;.">Action qui a déclenché l'événement. Cette propriété peut uniquement avoir la valeur <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />.</param>
      <param name="newItems" vsli:raw="The new items that are replacing the original items.">Nouveaux éléments qui remplacent les éléments d'origine.</param>
      <param name="oldItems" vsli:raw="The original items that are replaced.">Éléments d'origine qui ont été remplacés.</param>
      <param name="startingIndex" vsli:raw="The index of the first item of the items that are being replaced.">Index du premier élément des éléments remplacés.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="If &lt;paramref name=&quot;action&quot; /&gt; is not Replace.">Si <paramref name="action" /> n'est pas Replace.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="If &lt;paramref name=&quot;oldItems&quot; /&gt; or &lt;paramref name=&quot;newItems&quot; /&gt; is null.">Si <paramref name="oldItems" /> ou <paramref name="newItems" /> est Null.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Specialized.NotifyCollectionChangedEventArgs&quot; /&gt; class that describes a multi-item change or a &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset&quot; /&gt; change.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> qui décrit une modification de plusieurs éléments ou une modification <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />.</summary>
      <param name="action" vsli:raw="The action that caused the event. This can be set to &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset&quot; /&gt;, &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Add&quot; /&gt;, or &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove&quot; /&gt;.">Action qui a déclenché l'événement. Peut avoir la valeur <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />, <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" />, ou <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />.</param>
      <param name="changedItems" vsli:raw="The items affected by the change.">Éléments affectés par la modification.</param>
      <param name="startingIndex" vsli:raw="The index where the change occurred.">Index auquel la modification s'est produite.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="If &lt;paramref name=&quot;action&quot; /&gt; is not Reset, Add, or Remove, if &lt;paramref name=&quot;action&quot; /&gt; is Reset and either &lt;paramref name=&quot;changedItems&quot; /&gt; is not null or &lt;paramref name=&quot;startingIndex&quot; /&gt; is not -1, or if action is Add or Remove and &lt;paramref name=&quot;startingIndex&quot; /&gt; is less than -1.">Si <paramref name="action" /> n'est pas Reset, Add ou Remove, si <paramref name="action" /> est Reset et soit si <paramref name="changedItems" /> n'est pas Null, soit si <paramref name="startingIndex" /> n'est pas -1, ou si l'action est Add ou Remove et <paramref name="startingIndex" /> est inférieur à -1.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="If &lt;paramref name=&quot;action&quot; /&gt; is Add or Remove and &lt;paramref name=&quot;changedItems&quot; /&gt; is null.">Si <paramref name="action" /> est Add ou Remove et <paramref name="changedItems" /> est Null.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Specialized.NotifyCollectionChangedEventArgs&quot; /&gt; class that describes a multi-item &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Move&quot; /&gt; change.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> qui décrit une modification <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" /> de plusieurs éléments.</summary>
      <param name="action" vsli:raw="The action that caused the event. This can only be set to &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Move&quot; /&gt;.">Action qui a déclenché l'événement. Cette propriété peut uniquement avoir la valeur <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" />.</param>
      <param name="changedItems" vsli:raw="The items affected by the change.">Éléments affectés par la modification.</param>
      <param name="index" vsli:raw="The new index for the changed items.">Nouvel index pour les éléments modifiés.</param>
      <param name="oldIndex" vsli:raw="The old index for the changed items.">Ancien index pour les éléments modifiés.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="If &lt;paramref name=&quot;action&quot; /&gt; is not Move or &lt;paramref name=&quot;index&quot; /&gt; is less than 0.">Si <paramref name="action" /> n'est pas Move ou <paramref name="index" /> est inférieur à 0.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Specialized.NotifyCollectionChangedEventArgs&quot; /&gt; class that describes a one-item change.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> qui décrit une modification d'un élément.</summary>
      <param name="action" vsli:raw="The action that caused the event. This can be set to &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset&quot; /&gt;, &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Add&quot; /&gt;, or &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove&quot; /&gt;.">Action qui a déclenché l'événement. Peut avoir la valeur <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />, <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" />, ou <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />.</param>
      <param name="changedItem" vsli:raw="The item that is affected by the change.">Élément affecté par la modification.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="If &lt;paramref name=&quot;action&quot; /&gt; is not Reset, Add, or Remove, or if &lt;paramref name=&quot;action&quot; /&gt; is Reset and &lt;paramref name=&quot;changedItem&quot; /&gt; is not null.">Si <paramref name="action" /> n'est pas Reset, Add ou Remove, ou si <paramref name="action" /> est Reset et <paramref name="changedItem" /> n'est pas Null.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Specialized.NotifyCollectionChangedEventArgs&quot; /&gt; class that describes a one-item change.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> qui décrit une modification d'un élément.</summary>
      <param name="action" vsli:raw="The action that caused the event. This can be set to &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset&quot; /&gt;, &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Add&quot; /&gt;, or &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove&quot; /&gt;.">Action qui a déclenché l'événement. Peut avoir la valeur <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />, <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" />, ou <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />.</param>
      <param name="changedItem" vsli:raw="The item that is affected by the change.">Élément affecté par la modification.</param>
      <param name="index" vsli:raw="The index where the change occurred.">Index auquel la modification s'est produite.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="If &lt;paramref name=&quot;action&quot; /&gt; is not Reset, Add, or Remove, or if &lt;paramref name=&quot;action&quot; /&gt; is Reset and either &lt;paramref name=&quot;changedItems&quot; /&gt; is not null or &lt;paramref name=&quot;index&quot; /&gt; is not -1.">Si <paramref name="action" /> n'est pas Reset, Add ou Remove, ou si <paramref name="action" /> est Reset et soit si <paramref name="changedItems" /> n'est pas Null, soit si <paramref name="index" /> n'est pas -1.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Specialized.NotifyCollectionChangedEventArgs&quot; /&gt; class that describes a one-item &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Move&quot; /&gt; change.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> qui décrit une modification <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" /> d'un élément.</summary>
      <param name="action" vsli:raw="The action that caused the event. This can only be set to &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Move&quot; /&gt;.">Action qui a déclenché l'événement. Cette propriété peut uniquement avoir la valeur <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" />.</param>
      <param name="changedItem" vsli:raw="The item affected by the change.">Élément affecté par la modification.</param>
      <param name="index" vsli:raw="The new index for the changed item.">Nouvel index pour l'élément modifié.</param>
      <param name="oldIndex" vsli:raw="The old index for the changed item.">Ancien index pour l'élément modifié.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="If &lt;paramref name=&quot;action&quot; /&gt; is not Move or &lt;paramref name=&quot;index&quot; /&gt; is less than 0.">Si <paramref name="action" /> n'est pas Move ou <paramref name="index" /> est inférieur à 0.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Specialized.NotifyCollectionChangedEventArgs&quot; /&gt; class that describes a one-item &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace&quot; /&gt; change.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> qui décrit une modification <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> d'un élément.</summary>
      <param name="action" vsli:raw="The action that caused the event. This can only be set to &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace&quot; /&gt;.">Action qui a déclenché l'événement. Cette propriété peut uniquement avoir la valeur <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />.</param>
      <param name="newItem" vsli:raw="The new item that is replacing the original item.">Nouvel élément qui remplace l'élément d'origine.</param>
      <param name="oldItem" vsli:raw="The original item that is replaced.">Élément d'origine qui a été remplacé.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="If &lt;paramref name=&quot;action&quot; /&gt; is not Replace.">Si <paramref name="action" /> n'est pas Replace.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Specialized.NotifyCollectionChangedEventArgs&quot; /&gt; class that describes a one-item &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace&quot; /&gt; change.">Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> qui décrit une modification <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> d'un élément.</summary>
      <param name="action" vsli:raw="The action that caused the event. This can be set to &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace&quot; /&gt;.">Action qui a déclenché l'événement. Peut avoir la valeur <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />.</param>
      <param name="newItem" vsli:raw="The new item that is replacing the original item.">Nouvel élément qui remplace l'élément d'origine.</param>
      <param name="oldItem" vsli:raw="The original item that is replaced.">Élément d'origine qui a été remplacé.</param>
      <param name="index" vsli:raw="The index of the item being replaced.">Index de l'élément qui est remplacé.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="If &lt;paramref name=&quot;action&quot; /&gt; is not Replace.">Si <paramref name="action" /> n'est pas Replace.</exception>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.Action">
      <summary vsli:raw="Gets the action that caused the event.">Obtient l’action qui a provoqué l’événement.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Specialized.NotifyCollectionChangedAction&quot; /&gt; value that describes the action that caused the event.">Valeur <see cref="T:System.Collections.Specialized.NotifyCollectionChangedAction" /> qui décrit l’action qui a provoqué l’événement.</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewItems">
      <summary vsli:raw="Gets the list of new items involved in the change.">Obtient la liste des nouveaux éléments impliqués dans la modification.</summary>
      <returns vsli:raw="The list of new items involved in the change.">Liste des nouveaux éléments impliqués dans la modification.</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewStartingIndex">
      <summary vsli:raw="Gets the index at which the change occurred.">Obtient l'index auquel la modification s'est produite.</summary>
      <returns vsli:raw="The zero-based index at which the change occurred.">Index de base zéro auquel la modification s'est produite.</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldItems">
      <summary vsli:raw="Gets the list of items affected by a &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace&quot; /&gt;, Remove, or Move action.">Obtient la liste des éléments affectés par une action <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />, Remove ou Move.</summary>
      <returns vsli:raw="The list of items affected by a &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace&quot; /&gt;, Remove, or Move action.">Liste des éléments affectés par une action <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />, Remove ou Move.</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldStartingIndex">
      <summary vsli:raw="Gets the index at which a &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Move&quot; /&gt;, Remove, or Replace action occurred.">Obtient l'index sur lequel une action <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" />, Remove ou Replace s'est produite.</summary>
      <returns vsli:raw="The zero-based index at which a &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Move&quot; /&gt;, Remove, or Replace action occurred.">Index de base zéro auquel une action <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" />, Remove ou Replace s'est produite</returns>
    </member>
    <member name="T:System.Collections.Specialized.NotifyCollectionChangedEventHandler">
      <summary vsli:raw="Represents the method that handles the &lt;see cref=&quot;E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged&quot; /&gt; event.">Représente la méthode qui gère l’événement <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />.</summary>
      <param name="sender" vsli:raw="The object that raised the event.">Objet ayant déclenché l'événement.</param>
      <param name="e" vsli:raw="Information about the event.">Informations relatives à l'événement.</param>
    </member>
    <member name="T:System.ComponentModel.DataErrorsChangedEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged&quot; /&gt; event.">Fournit des données pour l'événement <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DataErrorsChangedEventArgs.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataErrorsChangedEventArgs&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DataErrorsChangedEventArgs" />.</summary>
      <param name="propertyName" vsli:raw="The name of the property that has an error.  &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; if the error is object-level.">Nom de la propriété qui rencontre une erreur.  <see langword="null" /> ou <see cref="F:System.String.Empty" /> si l'erreur se situe au niveau de l'objet.</param>
    </member>
    <member name="P:System.ComponentModel.DataErrorsChangedEventArgs.PropertyName">
      <summary vsli:raw="Gets the name of the property that has an error.">Obtient le nom de la propriété qui rencontre une erreur.</summary>
      <returns vsli:raw="The name of the property that has an error. &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; if the error is object-level.">Nom de la propriété qui rencontre une erreur. <see langword="null" /> ou <see cref="F:System.String.Empty" /> si l'erreur se situe au niveau de l'objet.</returns>
    </member>
    <member name="T:System.ComponentModel.INotifyDataErrorInfo">
      <summary vsli:raw="Defines members that data entity classes can implement to provide custom synchronous and asynchronous validation support.">Définit des membres que les classes d'entité de données peuvent implémenter pour fournir une prise en charge personnalisée de la validation synchrone et asynchrone.</summary>
    </member>
    <member name="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged">
      <summary vsli:raw="Occurs when the validation errors have changed for a property or for the entire entity.">Se produit lorsque les erreurs de validation ont été modifiées pour une propriété ou pour l'ensemble de l'entité.</summary>
    </member>
    <member name="M:System.ComponentModel.INotifyDataErrorInfo.GetErrors(System.String)">
      <summary vsli:raw="Gets the validation errors for a specified property or for the entire entity.">Obtient les erreurs de validation pour une propriété spécifiée ou pour l'ensemble de l'entité.</summary>
      <param name="propertyName" vsli:raw="The name of the property to retrieve validation errors for; or &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;F:System.String.Empty&quot; /&gt;, to retrieve entity-level errors.">Nom de la propriété pour laquelle récupérer les erreurs de validation ; ou <see langword="null" /> ou <see cref="F:System.String.Empty" /> pour récupérer les erreurs au niveau de l'entité.</param>
      <returns vsli:raw="The validation errors for the property or entity.">Erreurs de validation pour la propriété ou l'entité.</returns>
    </member>
    <member name="P:System.ComponentModel.INotifyDataErrorInfo.HasErrors">
      <summary vsli:raw="Gets a value that indicates whether the entity has validation errors.">Obtient une valeur qui indique si l'entité comporte des erreurs de validation.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entity currently has validation errors; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'entité comporte actuellement des erreurs de validation ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.INotifyPropertyChanged">
      <summary vsli:raw="Notifies clients that a property value has changed.">Notifie les clients qu'une valeur de propriété a été modifiée.</summary>
    </member>
    <member name="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged">
      <summary vsli:raw="Occurs when a property value changes.">Se produit en cas de modification d'une valeur de propriété.</summary>
    </member>
    <member name="T:System.ComponentModel.INotifyPropertyChanging">
      <summary vsli:raw="Notifies clients that a property value is changing.">Notifie les clients qu'une valeur de propriété change.</summary>
    </member>
    <member name="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging">
      <summary vsli:raw="Occurs when a property value is changing.">Se produit lorsqu'une valeur de propriété change.</summary>
    </member>
    <member name="T:System.ComponentModel.PropertyChangedEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&quot; /&gt; event.">Fournit des données pour l'événement <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventArgs.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyChangedEventArgs&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.PropertyChangedEventArgs" />.</summary>
      <param name="propertyName" vsli:raw="The name of the property that changed.">Nom de la propriété qui a été modifiée.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyChangedEventArgs.PropertyName">
      <summary vsli:raw="Gets the name of the property that changed.">Obtient le nom de la propriété qui a été modifiée.</summary>
      <returns vsli:raw="The name of the property that changed.">Nom de la propriété qui a été modifiée.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyChangedEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&quot; /&gt; event raised when a property is changed on a component.">Représente la méthode qui gérera l'événement <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> déclenché par la modification d'une propriété d'un composant.</summary>
      <param name="sender" vsli:raw="The source of the event.">Source de l'événement.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyChangedEventArgs&quot; /&gt; that contains the event data.">
        <see cref="T:System.ComponentModel.PropertyChangedEventArgs" /> qui contient les données d'événement.</param>
    </member>
    <member name="T:System.ComponentModel.PropertyChangingEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging&quot; /&gt; event.">Fournit des données pour l'événement <see cref="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging" />.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyChangingEventArgs.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyChangingEventArgs&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.PropertyChangingEventArgs" />.</summary>
      <param name="propertyName" vsli:raw="The name of the property whose value is changing.">Nom de la propriété dont la valeur change.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyChangingEventArgs.PropertyName">
      <summary vsli:raw="Gets the name of the property whose value is changing.">Obtient le nom de la propriété dont la valeur change.</summary>
      <returns vsli:raw="The name of the property whose value is changing.">Nom de la propriété dont la valeur change.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyChangingEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging&quot; /&gt; event of an &lt;see cref=&quot;T:System.ComponentModel.INotifyPropertyChanging&quot; /&gt; interface.">Représente la méthode qui gérera l'événement <see cref="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging" /> d'une interface <see cref="T:System.ComponentModel.INotifyPropertyChanging" />.</summary>
      <param name="sender" vsli:raw="The source of the event.">Source de l'événement.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyChangingEventArgs&quot; /&gt; that contains the event data.">
        <see cref="T:System.ComponentModel.PropertyChangingEventArgs" /> qui contient les données d'événement.</param>
    </member>
    <member name="T:System.ComponentModel.TypeConverterAttribute">
      <summary vsli:raw="Specifies what type to use as a converter for the object this attribute is bound to.">Spécifie le type à utiliser comme convertisseur de l'objet auquel cet attribut est lié.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeConverterAttribute&quot; /&gt; class with the default type converter, which is an empty string (&quot;&quot;).">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.TypeConverterAttribute" /> avec le convertisseur de type par défaut, qui est une chaîne vide ("").</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeConverterAttribute&quot; /&gt; class, using the specified type name as the data converter for the object this attribute is bound to.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.TypeConverterAttribute" /> en utilisant le nom de type spécifié comme étant le convertisseur de données pour l'objet auquel cet attribut est lié.</summary>
      <param name="typeName" vsli:raw="The fully qualified name of the class to use for data conversion for the object this attribute is bound to.">Nom qualifié complet de la classe à utiliser pour la conversion de données de l'objet auquel cet attribut est lié.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeConverterAttribute&quot; /&gt; class, using the specified type as the data converter for the object this attribute is bound to.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.TypeConverterAttribute" /> en utilisant le type spécifié comme convertisseur de données pour l'objet auquel cet attribut est lié.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of the converter class to use for data conversion for the object this attribute is bound to.">
        <see cref="T:System.Type" /> représentant le type de la classe de convertisseur à utiliser pour la conversion de données de l'objet auquel cet attribut est lié.</param>
    </member>
    <member name="P:System.ComponentModel.TypeConverterAttribute.ConverterTypeName">
      <summary vsli:raw="Gets the fully qualified type name of the &lt;see cref=&quot;T:System.Type&quot; /&gt; to use as a converter for the object this attribute is bound to.">Obtient le nom de type qualifié complet de <see cref="T:System.Type" /> à utiliser comme convertisseur pour l'objet auquel cet attribut est lié.</summary>
      <returns vsli:raw="The fully qualified type name of the &lt;see cref=&quot;T:System.Type&quot; /&gt; to use as a converter for the object this attribute is bound to, or an empty string (&quot;&quot;) if none exists. The default value is an empty string (&quot;&quot;).">Nom de type qualifié complet de <see cref="T:System.Type" /> à utiliser comme convertisseur pour l'objet auquel cet attribut est lié, ou une chaîne vide ("") s'il n'en existe aucun. La valeur par défaut est une chaîne vide ("").</returns>
    </member>
    <member name="F:System.ComponentModel.TypeConverterAttribute.Default">
      <summary vsli:raw="Specifies the type to use as a converter for the object this attribute is bound to.">Spécifie le type à utiliser comme convertisseur de l'objet auquel cet attribut est lié.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns whether the value of the given object is equal to the current &lt;see cref=&quot;T:System.ComponentModel.TypeConverterAttribute&quot; /&gt;.">Retourne une valeur indiquant si la valeur de l'objet donné est égale au <see cref="T:System.ComponentModel.TypeConverterAttribute" /> en cours.</summary>
      <param name="obj" vsli:raw="The object to test the value equality of.">Objet dont l'égalité des valeurs doit être vérifiée.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the given object is equal to that of the current &lt;see cref=&quot;T:System.ComponentModel.TypeConverterAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la valeur de l'objet donné est égale à celle du <see cref="T:System.ComponentModel.TypeConverterAttribute" /> en cours ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retourne le code de hachage de cette instance.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.TypeConverterAttribute&quot; /&gt;.">Code de hachage du <see cref="T:System.ComponentModel.TypeConverterAttribute" /> actuel.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptionProviderAttribute">
      <summary vsli:raw="Specifies the custom type description provider for a class. This class cannot be inherited.">Spécifie le fournisseur de description de type personnalisé pour une classe. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProviderAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProviderAttribute&quot; /&gt; class using the specified type name.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.TypeDescriptionProviderAttribute" /> à l'aide du nom du type spécifié.</summary>
      <param name="typeName" vsli:raw="The qualified name of the type.">Nom qualifié du type.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;typeName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="typeName" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProviderAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProviderAttribute&quot; /&gt; class using the specified type.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.TypeDescriptionProviderAttribute" /> à l'aide du type spécifié.</summary>
      <param name="type" vsli:raw="The type to store in the attribute.">Type à stocker dans l'attribut.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptionProviderAttribute.TypeName">
      <summary vsli:raw="Gets the type name for the type description provider.">Obtient le nom de type pour le fournisseur de description de type.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the qualified type name for the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt;.">
        <see cref="T:System.String" /> qui contient le nom de type qualifié pour <see cref="T:System.ComponentModel.TypeDescriptionProvider" />.</returns>
    </member>
    <member name="T:System.Reflection.ICustomTypeProvider">
      <summary vsli:raw="Represents an object that provides a custom type.">Représente un objet qui fournit un type personnalisé.</summary>
    </member>
    <member name="M:System.Reflection.ICustomTypeProvider.GetCustomType">
      <summary vsli:raw="Gets the custom type provided by this object.">Obtient le type personnalisé fourni par cet objet.</summary>
      <returns vsli:raw="The custom type.">Type personnalisé.</returns>
    </member>
    <member name="T:System.Windows.Input.ICommand">
      <summary vsli:raw="Defines a command.">Définit une commande.</summary>
    </member>
    <member name="M:System.Windows.Input.ICommand.CanExecute(System.Object)">
      <summary vsli:raw="Defines the method that determines whether the command can execute in its current state.">Définit la méthode qui détermine si la commande peut s'exécuter dans son état actuel.</summary>
      <param name="parameter" vsli:raw="Data used by the command.  If the command does not require data to be passed, this object can be set to &lt;see langword=&quot;null&quot; /&gt;.">Données utilisées par la commande.  Si la commande n’exige pas que des données soient passées, cet objet peut avoir la valeur <see langword="null" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this command can be executed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si cette commande peut être exécutée ; sinon <see langword="false" />.</returns>
    </member>
    <member name="E:System.Windows.Input.ICommand.CanExecuteChanged">
      <summary vsli:raw="Occurs when changes occur that affect whether or not the command should execute.">Se produit lorsque des modifications influent sur l'exécution de la commande.</summary>
    </member>
    <member name="M:System.Windows.Input.ICommand.Execute(System.Object)">
      <summary vsli:raw="Defines the method to be called when the command is invoked.">Définit la méthode à appeler lorsque la commande est invoquée.</summary>
      <param name="parameter" vsli:raw="Data used by the command.  If the command does not require data to be passed, this object can be set to &lt;see langword=&quot;null&quot; /&gt;.">Données utilisées par la commande.  Si la commande n’exige pas que des données soient passées, cet objet peut avoir la valeur <see langword="null" />.</param>
    </member>
    <member name="T:System.Windows.Markup.ValueSerializerAttribute">
      <summary vsli:raw="Identifies the &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; class that a type or property should use when it is serialized.">Identifie la classe <see cref="T:System.Windows.Markup.ValueSerializer" /> qu’un type ou une propriété doit utiliser en cas de sérialisation.</summary>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializerAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializerAttribute&quot; /&gt; class, using an assembly qualified type name string.">Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Markup.ValueSerializerAttribute" /> en utilisant une chaîne de nom de type qualifié d’assembly.</summary>
      <param name="valueSerializerTypeName" vsli:raw="The assembly qualified type name string for the &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; class to use.">Chaîne de nom de type qualifié d’assembly de la classe <see cref="T:System.Windows.Markup.ValueSerializer" /> à utiliser.</param>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializerAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializerAttribute&quot; /&gt; class, using the specified type.">Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Markup.ValueSerializerAttribute" /> à l’aide du type spécifié.</summary>
      <param name="valueSerializerType" vsli:raw="A type that represents the type of the &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; class.">Type représentant le type de la classe <see cref="T:System.Windows.Markup.ValueSerializer" />.</param>
    </member>
    <member name="P:System.Windows.Markup.ValueSerializerAttribute.ValueSerializerType">
      <summary vsli:raw="Gets the type of the &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; class reported by this attribute.">Obtient le type de la <see cref="T:System.Windows.Markup.ValueSerializer" /> classe indiquée par cet attribut.</summary>
      <returns vsli:raw="The type of the &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt;.">Type de <see cref="T:System.Windows.Markup.ValueSerializer" />.</returns>
    </member>
    <member name="P:System.Windows.Markup.ValueSerializerAttribute.ValueSerializerTypeName">
      <summary vsli:raw="Gets the assembly qualified name of the &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; type for this type or property.">Obtient le nom qualifié d’assembly du type <see cref="T:System.Windows.Markup.ValueSerializer" /> pour ce type ou cette propriété.</summary>
      <returns vsli:raw="The assembly qualified name of the type.">Nom qualifié d’assembly du type.</returns>
    </member>
  </members>
</doc>
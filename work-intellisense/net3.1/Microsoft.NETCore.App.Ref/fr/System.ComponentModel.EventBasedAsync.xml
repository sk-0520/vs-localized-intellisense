<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.ComponentModel.EventBasedAsync</name>
  </assembly>
  <members>
    <member name="T:System.ComponentModel.AsyncCompletedEventArgs">
      <summary vsli:raw="Provides data for the MethodName&lt;see langword=&quot;Completed&quot; /&gt; event.">Fournit des données pour l’événement MethodName<see langword="Completed" />.</summary>
    </member>
    <member name="M:System.ComponentModel.AsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AsyncCompletedEventArgs&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" />.</summary>
      <param name="error" vsli:raw="Any error that occurred during the asynchronous operation.">Toute erreur qui s'est produite pendant l'opération asynchrone.</param>
      <param name="cancelled" vsli:raw="A value indicating whether the asynchronous operation was canceled.">Valeur qui indique si l'opération asynchrone a été annulée.</param>
      <param name="userState" vsli:raw="The optional user-supplied state object passed to the &lt;see cref=&quot;M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)&quot; /&gt; method.">L'objet d'état fourni par l'utilisateur facultatif est passé à la méthode <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" />.</param>
    </member>
    <member name="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled">
      <summary vsli:raw="Gets a value indicating whether an asynchronous operation has been canceled.">Obtient une valeur qui indique si une opération asynchrone a été annulée.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the background operation has been canceled; otherwise &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'opération d'arrière-plan a été annulée ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.AsyncCompletedEventArgs.Error">
      <summary vsli:raw="Gets a value indicating which error occurred during an asynchronous operation.">Obtient une valeur qui indique quelle erreur s'est produite pendant une opération asynchrone.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Exception&quot; /&gt; instance, if an error occurred during an asynchronous operation; otherwise &lt;see langword=&quot;null&quot; /&gt;.">Une instance de <see cref="T:System.Exception" />, si une erreur s'est produite au cours d'une opération asynchrone ; sinon, <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary">
      <summary vsli:raw="Raises a user-supplied exception if an asynchronous operation failed.">Lève une exception fournie par l'utilisateur en cas d'échec d'une opération asynchrone.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;.">La propriété <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" /> est <see langword="true" />.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException" vsli:raw="The &lt;see cref=&quot;P:System.ComponentModel.AsyncCompletedEventArgs.Error&quot; /&gt; property has been set by the asynchronous operation. The &lt;see cref=&quot;P:System.Exception.InnerException&quot; /&gt; property holds a reference to &lt;see cref=&quot;P:System.ComponentModel.AsyncCompletedEventArgs.Error&quot; /&gt;.">La propriété <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /> a été définie par l'opération asynchrone. La propriété <see cref="P:System.Exception.InnerException" /> contient une référence à <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" />.</exception>
    </member>
    <member name="P:System.ComponentModel.AsyncCompletedEventArgs.UserState">
      <summary vsli:raw="Gets the unique identifier for the asynchronous task.">Obtient l'identificateur unique de la tâche asynchrone.</summary>
      <returns vsli:raw="An object reference that uniquely identifies the asynchronous task; otherwise, &lt;see langword=&quot;null&quot; /&gt; if no value has been set.">Référence d'objet qui identifie uniquement la tâche asynchrone ; sinon, <see langword="null" /> si aucune valeur n'a été définie.</returns>
    </member>
    <member name="T:System.ComponentModel.AsyncCompletedEventHandler">
      <summary vsli:raw="Represents the method that will handle the MethodName&lt;see langword=&quot;Completed&quot; /&gt; event of an asynchronous operation.">Représente la méthode qui gère l’événement MethodName<see langword="Completed" /> d’une opération asynchrone.</summary>
      <param name="sender" vsli:raw="The source of the event.">Source de l'événement.</param>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AsyncCompletedEventArgs&quot; /&gt; that contains the event data.">
        <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> qui contient les données d'événement.</param>
    </member>
    <member name="T:System.ComponentModel.AsyncOperation">
      <summary vsli:raw="Tracks the lifetime of an asynchronous operation.">Suit la durée de vie d'une opération asynchrone.</summary>
    </member>
    <member name="M:System.ComponentModel.AsyncOperation.Finalize">
      <summary vsli:raw="Finalizes the asynchronous operation.">Finalise l’opération asynchrone.</summary>
    </member>
    <member name="M:System.ComponentModel.AsyncOperation.OperationCompleted">
      <summary vsli:raw="Ends the lifetime of an asynchronous operation.">Termine la durée de vie d'une opération asynchrone.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.ComponentModel.AsyncOperation.OperationCompleted&quot; /&gt; has been called previously for this task.">
        <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> a été appelé précédemment pour cette tâche.</exception>
    </member>
    <member name="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
      <summary vsli:raw="Invokes a delegate on the thread or context appropriate for the application model.">Appelle un délégué sur le thread ou le contexte approprié pour le modèle d'application.</summary>
      <param name="d" vsli:raw="A &lt;see cref=&quot;T:System.Threading.SendOrPostCallback&quot; /&gt; object that wraps the delegate to be called when the operation ends.">Objet <see cref="T:System.Threading.SendOrPostCallback" /> qui inclut dans un wrapper le délégué à appeler lorsque l'opération se termine.</param>
      <param name="arg" vsli:raw="An argument for the delegate contained in the &lt;paramref name=&quot;d&quot; /&gt; parameter.">Argument pour le délégué contenu dans le paramètre <paramref name="d" />.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)&quot; /&gt; method has been called previously for this task.">La méthode <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> a été appelée précédemment pour cette tâche.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;d&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="d" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
      <summary vsli:raw="Ends the lifetime of an asynchronous operation.">Termine la durée de vie d'une opération asynchrone.</summary>
      <param name="d" vsli:raw="A &lt;see cref=&quot;T:System.Threading.SendOrPostCallback&quot; /&gt; object that wraps the delegate to be called when the operation ends.">Objet <see cref="T:System.Threading.SendOrPostCallback" /> qui inclut dans un wrapper le délégué à appeler lorsque l'opération se termine.</param>
      <param name="arg" vsli:raw="An argument for the delegate contained in the &lt;paramref name=&quot;d&quot; /&gt; parameter.">Argument pour le délégué contenu dans le paramètre <paramref name="d" />.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.ComponentModel.AsyncOperation.OperationCompleted&quot; /&gt; has been called previously for this task.">
        <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> a été appelé précédemment pour cette tâche.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;d&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="d" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.AsyncOperation.SynchronizationContext">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Threading.SynchronizationContext&quot; /&gt; object that was passed to the constructor.">Obtient l'objet <see cref="T:System.Threading.SynchronizationContext" /> passé au constructeur.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Threading.SynchronizationContext&quot; /&gt; object that was passed to the constructor.">Objet <see cref="T:System.Threading.SynchronizationContext" /> passé au constructeur.</returns>
    </member>
    <member name="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
      <summary vsli:raw="Gets or sets an object used to uniquely identify an asynchronous operation.">Obtient ou définit un objet servant à identifier de manière unique une opération asynchrone.</summary>
      <returns vsli:raw="The state object passed to the asynchronous method invocation.">Objet d'état passé à l'appel de méthode asynchrone.</returns>
    </member>
    <member name="T:System.ComponentModel.AsyncOperationManager">
      <summary vsli:raw="Provides concurrency management for classes that support asynchronous method calls. This class cannot be inherited.">Fournit la gestion de l'accès concurrentiel pour les classes qui prennent en charge des appels de méthode asynchrone. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.ComponentModel.AsyncOperation&quot; /&gt; for tracking the duration of a particular asynchronous operation.">Retourne <see cref="T:System.ComponentModel.AsyncOperation" /> permettant de suivre la durée d'une opération asynchrone particulière.</summary>
      <param name="userSuppliedState" vsli:raw="An object used to associate a piece of client state, such as a task ID, with a particular asynchronous operation.">Objet utilisé pour associer une portion d'état client, telle qu'un identificateur de tâche, à une opération asynchrone particulière.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AsyncOperation&quot; /&gt; that you can use to track the duration of an asynchronous method invocation.">
        <see cref="T:System.ComponentModel.AsyncOperation" /> que vous pouvez utiliser pour suivre la durée d'un appel de méthode asynchrone.</returns>
    </member>
    <member name="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext">
      <summary vsli:raw="Gets or sets the synchronization context for the asynchronous operation.">Obtient ou définit le contexte de synchronisation pour l'opération asynchrone.</summary>
      <returns vsli:raw="The synchronization context for the asynchronous operation.">Contexte de synchronisation pour l'opération asynchrone.</returns>
    </member>
    <member name="T:System.ComponentModel.BackgroundWorker">
      <summary vsli:raw="Executes an operation on a separate thread.">Exécute une opération sur un thread séparé.</summary>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BackgroundWorker&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.BackgroundWorker" />.</summary>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.CancelAsync">
      <summary vsli:raw="Requests cancellation of a pending background operation.">Demande l'annulation d'une opération d'arrière-plan en attente.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation" /> est <see langword="false" />.</exception>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.CancellationPending">
      <summary vsli:raw="Gets a value indicating whether the application has requested cancellation of a background operation.">Obtient une valeur qui indique si l'application a demandé l'annulation d'une opération d'arrière-plan.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the application has requested cancellation of a background operation; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'application a demandé l'annulation d'une opération d'arrière-plan ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.Dispose(System.Boolean)">
      <param name="disposing" vsli:raw="This method does not do anything." />
    </member>
    <member name="E:System.ComponentModel.BackgroundWorker.DoWork">
      <summary vsli:raw="Occurs when &lt;see cref=&quot;M:System.ComponentModel.BackgroundWorker.RunWorkerAsync&quot; /&gt; is called.">Se produit lorsque <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync" /> est appelée.</summary>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.IsBusy">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.ComponentModel.BackgroundWorker&quot; /&gt; is running an asynchronous operation.">Obtient une valeur qui indique si <see cref="T:System.ComponentModel.BackgroundWorker" /> exécute une opération asynchrone.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt;, if the &lt;see cref=&quot;T:System.ComponentModel.BackgroundWorker&quot; /&gt; is running an asynchronous operation; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, si <see cref="T:System.ComponentModel.BackgroundWorker" /> exécute une opération asynchrone ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.OnDoWork(System.ComponentModel.DoWorkEventArgs)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.BackgroundWorker.DoWork&quot; /&gt; event.">Déclenche l'événement <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" />.</summary>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.EventArgs&quot; /&gt; that contains the event data.">
        <see cref="T:System.EventArgs" /> qui contient les données d'événement.</param>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.BackgroundWorker.ProgressChanged&quot; /&gt; event.">Déclenche l'événement <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" />.</summary>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.EventArgs&quot; /&gt; that contains the event data.">
        <see cref="T:System.EventArgs" /> qui contient les données d'événement.</param>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&quot; /&gt; event.">Déclenche l'événement <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" />.</summary>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.EventArgs&quot; /&gt; that contains the event data.">
        <see cref="T:System.EventArgs" /> qui contient les données d'événement.</param>
    </member>
    <member name="E:System.ComponentModel.BackgroundWorker.ProgressChanged">
      <summary vsli:raw="Occurs when &lt;see cref=&quot;M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)&quot; /&gt; is called.">Se produit lorsque <see cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)" /> est appelée.</summary>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.BackgroundWorker.ProgressChanged&quot; /&gt; event.">Déclenche l'événement <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" />.</summary>
      <param name="percentProgress" vsli:raw="The percentage, from 0 to 100, of the background operation that is complete.">Pourcentage, de 0 à 100, de l'opération d'arrière-plan qui est terminé.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress&quot; /&gt; property is set to &lt;see langword=&quot;false&quot; /&gt;.">La propriété <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /> a la valeur <see langword="false" />.</exception>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.BackgroundWorker.ProgressChanged&quot; /&gt; event.">Déclenche l'événement <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" />.</summary>
      <param name="percentProgress" vsli:raw="The percentage, from 0 to 100, of the background operation that is complete.">Pourcentage, de 0 à 100, de l'opération d'arrière-plan qui est terminé.</param>
      <param name="userState" vsli:raw="A unique &lt;see cref=&quot;T:System.Object&quot; /&gt; indicating the user state. Returned as the &lt;see cref=&quot;P:System.ComponentModel.ProgressChangedEventArgs.UserState&quot; /&gt; property of the &lt;see cref=&quot;T:System.ComponentModel.ProgressChangedEventArgs&quot; /&gt;.">
        <see cref="T:System.Object" /> unique qui indique l'état d'utilisateur. Retourné en tant que propriété <see cref="P:System.ComponentModel.ProgressChangedEventArgs.UserState" /> de l’<see cref="T:System.ComponentModel.ProgressChangedEventArgs" />.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress&quot; /&gt; property is set to &lt;see langword=&quot;false&quot; /&gt;.">La propriété <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /> a la valeur <see langword="false" />.</exception>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync">
      <summary vsli:raw="Starts execution of a background operation.">Démarre l'exécution d'une opération d'arrière-plan.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.BackgroundWorker.IsBusy&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /> a la valeur <see langword="true" />.</exception>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
      <summary vsli:raw="Starts execution of a background operation.">Démarre l'exécution d'une opération d'arrière-plan.</summary>
      <param name="argument" vsli:raw="A parameter for use by the background operation to be executed in the &lt;see cref=&quot;E:System.ComponentModel.BackgroundWorker.DoWork&quot; /&gt; event handler.">Paramètre disponible pour une exécution par l'opération d'arrière-plan dans le gestionnaire d'événements <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" />.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.BackgroundWorker.IsBusy&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /> a la valeur <see langword="true" />.</exception>
    </member>
    <member name="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
      <summary vsli:raw="Occurs when the background operation has completed, has been canceled, or has raised an exception.">Se produit lorsque l'opération d'arrière-plan est terminée, a été annulée ou a levé une exception.</summary>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress">
      <summary vsli:raw="Gets or sets a value indicating whether the &lt;see cref=&quot;T:System.ComponentModel.BackgroundWorker&quot; /&gt; can report progress updates.">Obtient ou définit une valeur qui indique si <see cref="T:System.ComponentModel.BackgroundWorker" /> peut signaler des mises à jour de progression.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.BackgroundWorker&quot; /&gt; supports progress updates; otherwise &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.ComponentModel.BackgroundWorker" /> prend en charge les mises à jour de progression ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation">
      <summary vsli:raw="Gets or sets a value indicating whether the &lt;see cref=&quot;T:System.ComponentModel.BackgroundWorker&quot; /&gt; supports asynchronous cancellation.">Obtient ou définit une valeur qui indique si <see cref="T:System.ComponentModel.BackgroundWorker" /> prend en charge l'annulation asynchrone.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.BackgroundWorker&quot; /&gt; supports cancellation; otherwise &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.ComponentModel.BackgroundWorker" /> prend en charge l'annulation ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.DoWorkEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.BackgroundWorker.DoWork&quot; /&gt; event handler.">Fournit des données pour le gestionnaire d'événements <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DoWorkEventArgs.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DoWorkEventArgs&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DoWorkEventArgs" />.</summary>
      <param name="argument" vsli:raw="Specifies an argument for an asynchronous operation.">Spécifie un argument pour une opération asynchrone.</param>
    </member>
    <member name="P:System.ComponentModel.DoWorkEventArgs.Argument">
      <summary vsli:raw="Gets a value that represents the argument of an asynchronous operation.">Obtient une valeur qui représente l'argument d'une opération asynchrone.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the argument of an asynchronous operation.">
        <see cref="T:System.Object" /> qui représente l'argument d'une opération asynchrone.</returns>
    </member>
    <member name="P:System.ComponentModel.DoWorkEventArgs.Result">
      <summary vsli:raw="Gets or sets a value that represents the result of an asynchronous operation.">Obtient ou définit une valeur qui représente le résultat d'une opération asynchrone.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the result of an asynchronous operation.">
        <see cref="T:System.Object" /> qui représente le résultat d'une opération asynchrone.</returns>
    </member>
    <member name="T:System.ComponentModel.DoWorkEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.ComponentModel.BackgroundWorker.DoWork&quot; /&gt; event. This class cannot be inherited.">Représente la méthode qui gérera l'événement <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" />. Cette classe ne peut pas être héritée.</summary>
      <param name="sender" vsli:raw="The source of the event.">Source de l'événement.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.DoWorkEventArgs&quot; /&gt; that contains the event data.">
        <see cref="T:System.ComponentModel.DoWorkEventArgs" /> qui contient les données d'événement.</param>
    </member>
    <member name="T:System.ComponentModel.ProgressChangedEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.BackgroundWorker.ProgressChanged&quot; /&gt; event.">Fournit des données pour l'événement <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ProgressChangedEventArgs.#ctor(System.Int32,System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ProgressChangedEventArgs&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ProgressChangedEventArgs" />.</summary>
      <param name="progressPercentage" vsli:raw="The percentage of an asynchronous task that has been completed.">Pourcentage d'une tâche asynchrone terminée.</param>
      <param name="userState" vsli:raw="A unique user state.">État d'utilisateur unique.</param>
    </member>
    <member name="P:System.ComponentModel.ProgressChangedEventArgs.ProgressPercentage">
      <summary vsli:raw="Gets the asynchronous task progress percentage.">Obtient le pourcentage de la progression de la tâche asynchrone.</summary>
      <returns vsli:raw="A percentage value indicating the asynchronous task progress.">Valeur en pourcentage qui indique la progression de la tâche asynchrone.</returns>
    </member>
    <member name="P:System.ComponentModel.ProgressChangedEventArgs.UserState">
      <summary vsli:raw="Gets a unique user state.">Obtient un état d'utilisateur unique.</summary>
      <returns vsli:raw="A unique &lt;see cref=&quot;T:System.Object&quot; /&gt; indicating the user state.">
        <see cref="T:System.Object" /> unique qui indique l'état d'utilisateur.</returns>
    </member>
    <member name="T:System.ComponentModel.ProgressChangedEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.ComponentModel.BackgroundWorker.ProgressChanged&quot; /&gt; event of the &lt;see cref=&quot;T:System.ComponentModel.BackgroundWorker&quot; /&gt; class. This class cannot be inherited.">Représente la méthode qui gère l’événement <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> de la classe <see cref="T:System.ComponentModel.BackgroundWorker" />. Cette classe ne peut pas être héritée.</summary>
      <param name="sender" vsli:raw="The source of the event.">Source de l'événement.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ProgressChangedEventArgs&quot; /&gt; that contains the event data.">
        <see cref="T:System.ComponentModel.ProgressChangedEventArgs" /> qui contient les données d'événement.</param>
    </member>
    <member name="T:System.ComponentModel.RunWorkerCompletedEventArgs">
      <summary vsli:raw="Provides data for the MethodName&lt;see langword=&quot;Completed&quot; /&gt; event.">Fournit des données pour l’événement MethodName<see langword="Completed" />.</summary>
    </member>
    <member name="M:System.ComponentModel.RunWorkerCompletedEventArgs.#ctor(System.Object,System.Exception,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.RunWorkerCompletedEventArgs&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.RunWorkerCompletedEventArgs" />.</summary>
      <param name="result" vsli:raw="The result of an asynchronous operation.">Résultat d'une opération asynchrone.</param>
      <param name="error" vsli:raw="Any error that occurred during the asynchronous operation.">Toute erreur qui s'est produite pendant l'opération asynchrone.</param>
      <param name="cancelled" vsli:raw="A value indicating whether the asynchronous operation was canceled.">Valeur qui indique si l'opération asynchrone a été annulée.</param>
    </member>
    <member name="P:System.ComponentModel.RunWorkerCompletedEventArgs.Result">
      <summary vsli:raw="Gets a value that represents the result of an asynchronous operation.">Obtient une valeur qui représente le résultat d'une opération asynchrone.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the result of an asynchronous operation.">
        <see cref="T:System.Object" /> qui représente le résultat d'une opération asynchrone.</returns>
      <exception cref="T:System.Reflection.TargetInvocationException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.AsyncCompletedEventArgs.Error&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt;. The &lt;see cref=&quot;P:System.Exception.InnerException&quot; /&gt; property holds a reference to &lt;see cref=&quot;P:System.ComponentModel.AsyncCompletedEventArgs.Error&quot; /&gt;.">
        <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /> n’est pas un <see langword="null" />. La propriété <see cref="P:System.Exception.InnerException" /> contient une référence à <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" /> a la valeur <see langword="true" />.</exception>
    </member>
    <member name="P:System.ComponentModel.RunWorkerCompletedEventArgs.UserState">
      <summary vsli:raw="Gets a value that represents the user state.">Obtient une valeur qui représente l'état d'utilisateur.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the user state.">
        <see cref="T:System.Object" /> qui représente l'état d'utilisateur.</returns>
    </member>
    <member name="T:System.ComponentModel.RunWorkerCompletedEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&quot; /&gt; event of a &lt;see cref=&quot;T:System.ComponentModel.BackgroundWorker&quot; /&gt; class.">Représente la méthode destinée à gérer l’événement <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" /> d’une classe <see cref="T:System.ComponentModel.BackgroundWorker" />.</summary>
      <param name="sender" vsli:raw="The source of the event.">Source de l'événement.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.RunWorkerCompletedEventArgs&quot; /&gt; that contains the event data.">
        <see cref="T:System.ComponentModel.RunWorkerCompletedEventArgs" /> qui contient les données d'événement.</param>
    </member>
  </members>
</doc>
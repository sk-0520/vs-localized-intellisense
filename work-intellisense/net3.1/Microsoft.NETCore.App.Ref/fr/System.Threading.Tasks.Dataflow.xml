<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Threading.Tasks.Dataflow</name>
  </assembly>
  <members>
    <member name="T:System.Threading.Tasks.Dataflow.ActionBlock`1">
      <summary>Fournit un bloc de flux de données qui appelle un délégué <see cref="T:System.Action`1" /> fourni pour chaque élément de données reçu.</summary>
      <typeparam name="TInput">Type de données sur lequel ce <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> intervient.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Action{`0})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> avec l'action spécifiée.</summary>
      <param name="action">Action à appeler à chaque élément de données reçu.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Action{`0},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> avec l'action et les options de configuration spécifiées.</summary>
      <param name="action">Action à appeler à chaque élément de données reçu.</param>
      <param name="dataflowBlockOptions">Options permettant de configurer ce <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> construit par défaut est <see langword="null" />.

ou -
<paramref name="dataflowBlockOptions" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Func{`0,System.Threading.Tasks.Task})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> avec l'action spécifiée.</summary>
      <param name="action">Action à appeler à chaque élément de données reçu.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Func{`0,System.Threading.Tasks.Task},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> avec l'action et les options de configuration spécifiées.</summary>
      <param name="action">Action à appeler à chaque élément de données reçu.</param>
      <param name="dataflowBlockOptions">Options permettant de configurer ce <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> est <see langword="null" />.

ou -
<paramref name="dataflowBlockOptions" /> construit par défaut est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.Complete">
      <summary>Signale au bloc de flux de données qu’il ne doit plus recevoir ni produire de messages ou utiliser des messages différés.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.ActionBlock`1.Completion">
      <summary>Obtient un objet <see cref="T:System.Threading.Tasks.Task" /> qui représente l’opération asynchrone et l’achèvement du bloc de flux de données.</summary>
      <returns>Tâche terminée.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.ActionBlock`1.InputCount">
      <summary>Obtient le nombre d'éléments d'entrée en attente de traitement par ce bloc.</summary>
      <returns>Nombre d'éléments d'entrée en attente de traitement par ce bloc.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.Post(`0)">
      <summary>Publie un élément dans le bloc cible de flux de données.</summary>
      <param name="item">Élément qui est proposé à la cible.</param>
      <returns>
        <see langword="true" /> si l'élément est publié dans le bloc de flux de données ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>Provoque la fin du bloc de flux de données avec un état d'erreur.</summary>
      <param name="exception">Exception ayant provoqué l'erreur.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>Offre un message au bloc de flux de données et lui donne la possibilité de le consommer ou le différer.</summary>
      <param name="messageHeader">En-tête du message proposé.</param>
      <param name="messageValue">Valeur du message proposé.</param>
      <param name="source">Bloc de flux de données qui offre le message. Celui-ci peut être <see langword="null" />.</param>
      <param name="consumeToAccept">
        <see langword="true" /> pour indiquer à la cible d’appeler <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> de façon synchrone pendant l’appel à <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />, avant de retourner <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />, pour consommer le message ; sinon, <see langword="false" />.</param>
      <returns>État du message proposé.  Si le message a été accepté par la cible, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> est retourné, et la source ne doit plus utiliser le message envoyé, car elle est désormais la propriété de la cible. Si le message a été différé par la cible, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> est retournée comme notification que la cible peut ensuite essayer d'utiliser ou de réserver un message ; parallèlement, la source possède le message et peut toujours le proposer à d'autres blocs.
Si la cible avait autrement différé le message alors que la source avait la valeur <see langword="null" />, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> aurait été retourné.
Si la cible a tenté de recevoir le message mais a échoué en raison de la source fournissant un message à une autre cible ou en l'ignorant simplement, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" /> est retourné.
Si la cible a choisi de ne pas recevoir le message, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> est retourné. Si la cible a choisi de ne pas recevoir le message et ne recevra jamais un autre message de cette source, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" /> est retourné.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> n'est pas valide.
ou <paramref name="consumeToAccept" /> peut avoir la valeur <see langword="true" /> uniquement s’il est fourni avec un <paramref name="source" /> différent de Null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.ToString">
      <summary>Retourne une chaîne qui représente le nom mis en forme de cette instance <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</summary>
      <returns>Chaîne qui représente le nom mis en forme de cette instance <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BatchBlock`1">
      <summary>Fournit un bloc de flux de données qui traite par lot les entrées dans les tableaux.</summary>
      <typeparam name="T">Spécifie le type de données mis en lots.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.#ctor(System.Int32)">
      <summary>Initialise un nouveau <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" /> avec la taille de lot spécifiée.</summary>
      <param name="batchSize">Nombre d'éléments à regrouper en un lot.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">La <paramref name="batchSize" /> doit être positive.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.#ctor(System.Int32,System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary>Initialise un nouveau <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" /> avec la taille de lot, l'option de refus et les options de bloc spécifiées.</summary>
      <param name="batchSize">Nombre d'éléments à regrouper en un lot.</param>
      <param name="dataflowBlockOptions">Options permettant de configurer ce <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">La <paramref name="batchSize" /> doit être positive.

ou -
La <paramref name="batchSize" /> doit être inférieure à la valeur de l'option <see cref="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.BoundedCapacity" /> si une valeur autre que la valeur par défaut a été définie.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataflowBlockOptions" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchSize">
      <summary>Obtient la taille des lots générés par ce <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" />.</summary>
      <returns>Taille du lot</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.Complete">
      <summary>Signale à <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> qu'il ne doit plus recevoir ni produire de messages ou utiliser des messages différés.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.Completion">
      <summary>Obtient une <see cref="T:System.Threading.Tasks.Task" /> qui représente l'opération asynchrone et l'achèvement du bloc de flux de données.</summary>
      <returns>Tâche.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0[]},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Lie le <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> au <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> spécifié.</summary>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> auquel connecter cette source.</param>
      <param name="linkOptions">Instance <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> qui configure le lien.</param>
      <returns>IDisposable qui, en appelant Dispose, dissocie la source de la cible.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> est Null (Nothing en Visual Basic) ou <paramref name="linkOptions" /> est Null (Nothing en Visual Basic).</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.OutputCount">
      <summary>Obtient le nombre d'éléments de sortie disponibles en provenance de ce bloc.</summary>
      <returns>Nombre d'éléments de sortie.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>Provoque l’achèvement du <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> à l’état <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.</summary>
      <param name="exception">
        <see cref="T:System.Exception" /> ayant provoqué l'erreur.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T[]}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0[]},System.Boolean@)">
      <summary>Appelé par un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> lié pour recevoir et consommer un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> précédemment proposé par ce <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> du message en cours d'utilisation.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> absorbant le message.</param>
      <param name="messageConsumed">
        <see langword="true" /> si le message a été consommé avec succès ; sinon <see langword="false" />.</param>
      <returns>Valeur du message consommé. Cela peut correspondre à une autre instance <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> qui a été précédemment réservée et transmise comme <paramref name="messageHeader" /> à <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />. Le <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> consommateur doit utiliser la valeur retournée au lieu de la valeur passée comme messageValue via <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />.
Si le message demandé n'est pas disponible, la valeur de retour est <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> n’est pas valide.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T[]}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0[]})">
      <summary>Appelé par un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> lié pour libérer un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> précédemment réservé par ce <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> du message réservé en cours de libération.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> libérant le message précédemment réservé.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> n'est pas valide.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">La <paramref name="target" /> ne contient pas le message réservé.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T[]}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0[]})">
      <summary>Appelé par un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> lié pour réserver un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> précédemment proposé par ce <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> du message en cours de réservation.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> réservant le message.</param>
      <returns>
        <see langword="true" /> si le message a été réservé avec succès ; sinon <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> n'est pas valide.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>Offre un message au <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, donnant à la cible la possibilité d'utiliser ou de différer le message.</summary>
      <param name="messageHeader">Instance <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> qui représente l'en-tête du message qui est proposé.</param>
      <param name="messageValue">Valeur du message proposé.</param>
      <param name="source">
        <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> qui transmet le message. Il peut s'agir d'une valeur null.</param>
      <param name="consumeToAccept">Définit sur <see langword="true" /> pour indiquer à la cible d'appeler <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> de façon synchrone pendant l'appel à <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />, avant de renvoyer <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> pour utiliser le message.</param>
      <returns>État du message proposé. Si le message a été accepté par la cible, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> est retourné, et la source ne doit plus utiliser le message envoyé, car elle est désormais la propriété de la cible. Si le message a été différé par la cible, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> est retournée comme notification que la cible peut ensuite essayer d'utiliser ou de réserver un message ; parallèlement, la source possède le message et peut toujours le proposer à d'autres blocs.
Si la cible avait par contre un message différé mais que la <paramref name="source" /> avait la valeur <see langword="null" />, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> serait retourné à la place.
Si la cible a tenté de recevoir le message mais a échoué en raison de la source fournissant un message à une autre cible ou en l'ignorant simplement, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" /> est retourné.
Si la cible a choisi de ne pas recevoir le message, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> est retourné. Si la cible a choisi de ne pas recevoir le message et ne recevra jamais un autre message de cette source, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" /> est retourné.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> n’est pas valide.
ou <paramref name="consumeToAccept" /> peut avoir la valeur true uniquement s’il est fourni avec une <paramref name="source" /> non Null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.ToString">
      <summary>Retourne une chaîne qui représente le nom mis en forme de cette instance de <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</summary>
      <returns>Chaîne qui représente le nom mis en forme de cette instance de <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.TriggerBatch">
      <summary>Déclenche <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" /> pour démarrer une opération de traitement par lots, même si le nombre d'éléments actuellement en file d'attente ou différés est inférieur à <see cref="P:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchSize" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.TryReceive(System.Predicate{`0[]},`0[]@)">
      <summary>Tente de recevoir de façon synchrone un élément de sortie disponible de <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="filter">Attribut qu'une valeur doit passer avec succès pour sa réception.  <paramref name="filter" /> peut être <see langword="null" />, dans ce cas, tous les éléments aboutissent.</param>
      <param name="item">Élément envoyé à partir de la source.</param>
      <returns>
        <see langword="true" /> si un élément peut être reçu ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.TryReceiveAll(System.Collections.Generic.IList{`0[]}@)">
      <summary>Tente de recevoir de façon synchrone tous les éléments disponibles de <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="items">Éléments reçus de la source.</param>
      <returns>
        <see langword="true" /> si un ou plusieurs éléments peuvent être reçus ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2">
      <summary>Fournit un bloc de flux de données qui traite par lot un nombre spécifié d'entrées de types potentiellement différents fournis à une ou plusieurs de ses cibles.</summary>
      <typeparam name="T1">Spécifie le type de données accepté par la première cible du bloc.</typeparam>
      <typeparam name="T2">Spécifie le type de données accepté par la deuxième cible du bloc.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.#ctor(System.Int32)">
      <summary>Initialise un nouveau <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" /> avec la configuration spécifiée.</summary>
      <param name="batchSize">Nombre d'éléments à regrouper en un lot.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">La <paramref name="batchSize" /> doit être positive.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.#ctor(System.Int32,System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary>Initialise un nouveau <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" /> avec la configuration spécifiée.</summary>
      <param name="batchSize">Nombre d'éléments à regrouper en un lot.</param>
      <param name="dataflowBlockOptions">Options permettant de configurer ce <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataflowBlockOptions" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="batchSize" /> est inférieur à un.</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.BatchSize">
      <summary>Obtient la taille des lots générés par ce <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" />.</summary>
      <returns>Taille du lot</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.Complete">
      <summary>Signale à <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> qu'il ne doit plus recevoir ni produire de messages ou utiliser des messages différés.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.Completion">
      <summary>Obtient une <see cref="T:System.Threading.Tasks.Task" /> qui représente l'opération asynchrone et l'achèvement du bloc de flux de données.</summary>
      <returns>Tâche.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Lie le <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> au <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> spécifié.</summary>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> auquel connecter cette source.</param>
      <param name="linkOptions">Instance <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> qui configure le lien.</param>
      <returns>IDisposable qui, en appelant Dispose, dissocie la source de la cible.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> est Null (Nothing en Visual Basic) ou <paramref name="linkOptions" /> est Null (Nothing en Visual Basic).</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.OutputCount">
      <summary>Obtient le nombre d'éléments de sortie disponibles en provenance de ce bloc.</summary>
      <returns>Nombre d'éléments de sortie.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>Provoque l’achèvement du <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> à l’état <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.</summary>
      <param name="exception">
        <see cref="T:System.Exception" /> ayant provoqué l'erreur.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}}}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}},System.Boolean@)">
      <param name="messageHeader" />
      <param name="target" />
      <param name="messageConsumed" />
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}}}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}})">
      <param name="messageHeader" />
      <param name="target" />
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}}}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}})">
      <param name="messageHeader" />
      <param name="target" />
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.Target1">
      <summary>Obtient une cible qui peut être utilisée pour offrir des messages du premier type.</summary>
      <returns>Cible.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.Target2">
      <summary>Obtient une cible qui peut être utilisée pour offrir des messages du deuxième type.</summary>
      <returns>Cible.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.ToString">
      <summary>Retourne une chaîne qui représente le nom mis en forme de cette instance de <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</summary>
      <returns>Chaîne qui représente le nom mis en forme de cette instance de <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.TryReceive(System.Predicate{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}},System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}@)">
      <summary>Tente de recevoir de façon synchrone un élément de sortie disponible de <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="filter">Attribut qu'une valeur doit passer avec succès pour sa réception.  <paramref name="filter" /> peut être <see langword="null" />, dans ce cas, tous les éléments aboutissent.</param>
      <param name="item">Élément envoyé à partir de la source.</param>
      <returns>
        <see langword="true" /> si un élément peut être reçu ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}}@)">
      <summary>Tente de recevoir de façon synchrone tous les éléments disponibles de <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="items">Éléments reçus de la source.</param>
      <returns>
        <see langword="true" /> si un ou plusieurs éléments peuvent être reçus ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3">
      <summary>Fournit un bloc de flux de données qui traite par lot un nombre spécifié d'entrées de types potentiellement différents fournis à une ou plusieurs de ses cibles.</summary>
      <typeparam name="T1">Spécifie le type de données accepté par la première cible du bloc.</typeparam>
      <typeparam name="T2">Spécifie le type de données accepté par la deuxième cible du bloc.</typeparam>
      <typeparam name="T3">Spécifie le type de données accepté par la troisième cible du bloc.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.#ctor(System.Int32)">
      <summary>Initialise un nouveau <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3" /> avec la configuration spécifiée.</summary>
      <param name="batchSize">Nombre d'éléments à regrouper en un lot.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">La <paramref name="batchSize" /> doit être positive.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.#ctor(System.Int32,System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary>Initialise un nouveau <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3" /> avec la configuration spécifiée.</summary>
      <param name="batchSize">Nombre d'éléments à regrouper en un lot.</param>
      <param name="dataflowBlockOptions">Options avec lesquelles configurer ce <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">La <paramref name="batchSize" /> doit être positive.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataflowBlockOptions" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.BatchSize">
      <summary>Obtient la taille des lots générés par ce <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3" />.</summary>
      <returns>Taille du lot</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Complete">
      <summary>Signale à <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> qu'il ne doit plus recevoir ni produire de messages ou utiliser des messages différés.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Completion">
      <summary>Obtient une <see cref="T:System.Threading.Tasks.Task" /> qui représente l'opération asynchrone et l'achèvement du bloc de flux de données.</summary>
      <returns>Tâche.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Lie le <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> au <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> spécifié.</summary>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> auquel connecter cette source.</param>
      <param name="linkOptions">
        <see langword="true" /> si le lien entre la source et la cible doit être supprimé après la propagation effective d'un message unique ; <see langword="false" /> pour rester connecté même après la propagation du message unique.</param>
      <returns>IDisposable qui, en appelant Dispose, dissocie la source de la cible.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> est Null (Nothing en Visual Basic) ou <paramref name="linkOptions" /> est Null (Nothing en Visual Basic).</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.OutputCount">
      <summary>Obtient le nombre d'éléments de sortie disponibles en provenance de ce bloc.</summary>
      <returns>Nombre d'éléments de sortie.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>Provoque l’achèvement du <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> à l’état <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.</summary>
      <param name="exception">
        <see cref="T:System.Exception" /> ayant provoqué l'erreur.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}@System#Collections#Generic#IList{T3}}}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}},System.Boolean@)">
      <param name="messageHeader" />
      <param name="target" />
      <param name="messageConsumed" />
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}@System#Collections#Generic#IList{T3}}}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}})">
      <param name="messageHeader" />
      <param name="target" />
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}@System#Collections#Generic#IList{T3}}}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}})">
      <param name="messageHeader" />
      <param name="target" />
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Target1">
      <summary>Obtient une cible qui peut être utilisée pour offrir des messages du premier type.</summary>
      <returns>Cible.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Target2">
      <summary>Obtient une cible qui peut être utilisée pour offrir des messages du deuxième type.</summary>
      <returns>Cible.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Target3">
      <summary>Obtient une cible qui peut être utilisée pour offrir des messages du troisième type.</summary>
      <returns>Cible.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.ToString">
      <summary>Retourne une chaîne qui représente le nom mis en forme de cette instance de <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</summary>
      <returns>Chaîne qui représente le nom mis en forme de cette instance de <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.TryReceive(System.Predicate{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}},System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}@)">
      <summary>Tente de recevoir de façon synchrone un élément de sortie disponible de <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="filter">Attribut qu'une valeur doit passer avec succès pour sa réception.  <paramref name="filter" /> peut être <see langword="null" /> dans ce cas, tous les éléments aboutissent.</param>
      <param name="item">Élément envoyé à partir de la source.</param>
      <returns>
        <see langword="true" /> si un élément peut être reçu ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}}@)">
      <summary>Tente de recevoir de façon synchrone tous les éléments disponibles de <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="items">Éléments reçus de la source.</param>
      <returns>
        <see langword="true" /> si un ou plusieurs éléments peuvent être reçus ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1">
      <summary>Fournit une mémoire tampon pour stocker au plus un élément à la fois, en remplaçant chaque message par le suivant lorsque ce dernier arrive.</summary>
      <typeparam name="T">Spécifie le type des données mises en mémoire tampon par ce bloc de flux de données.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.#ctor(System.Func{`0,`0})">
      <summary>Initialise <see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1" /> avec la fonction de clonage spécifiée.</summary>
      <param name="cloningFunction">Fonction à utiliser pour cloner des données après envoi à d'autres blocs.</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.#ctor(System.Func{`0,`0},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary>Initialise <see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1" /> avec la fonction de clonage et le <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" /> spécifiés.</summary>
      <param name="cloningFunction">Fonction à utiliser pour cloner des données après envoi à d'autres blocs.</param>
      <param name="dataflowBlockOptions">Options avec lesquelles configurer ce <see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataflowBlockOptions" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.Complete">
      <summary>Signale à <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> qu'il ne doit plus recevoir ni produire de messages ou utiliser des messages différés.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BroadcastBlock`1.Completion">
      <summary>Obtient une <see cref="T:System.Threading.Tasks.Task" /> qui représente l'opération asynchrone et l'achèvement du bloc de flux de données.</summary>
      <returns>Tâche.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Lie le <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> au <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> spécifié.</summary>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> auquel connecter cette source.</param>
      <param name="linkOptions">Instance <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> qui configure le lien.</param>
      <returns>IDisposable qui, en appelant Dispose, dissocie la source de la cible.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> est Null (Nothing en Visual Basic) ou <paramref name="linkOptions" /> est Null (Nothing en Visual Basic).</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>Provoque l'achèvement du <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> à l'état <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.</summary>
      <param name="exception">
        <see cref="T:System.Exception" /> ayant provoqué l’erreur.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#IReceivableSourceBlock{T}#TryReceiveAll(System.Collections.Generic.IList{`0}@)">
      <summary>Tente de recevoir de façon synchrone tous les éléments disponibles de <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="items">Éléments reçus de la source.</param>
      <returns>
        <see langword="true" /> si un ou plusieurs éléments peuvent être reçus ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
      <summary>Appelé par un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> lié pour recevoir et utiliser un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> précédemment proposé par ce <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> du message en cours d'utilisation.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> absorbant le message.</param>
      <param name="messageConsumed">
        <see langword="true" /> si le message a été consommé avec succès ; sinon <see langword="false" />.</param>
      <returns>Valeur du message consommé. Cela peut correspondre à une instance de <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> différente de celle qui a été précédemment réservée et transmise comme <paramref name="messageHeader" /> à <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />. Le <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> consommateur doit utiliser la valeur retournée au lieu de la valeur passée comme <paramref name="messageValue" /> via <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />.
Si le message demandé n'est pas disponible, la valeur de retour est <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> n'est pas valide.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>Appelé par un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> lié pour libérer un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> précédemment réservé par ce <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> du message réservé en cours de libération.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> libérant le message précédemment réservé.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> n'est pas valide.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">La <paramref name="target" /> ne contient pas le message réservé.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>Appelé par un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> lié pour réserver un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> précédemment proposé par ce <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> du message en cours de réservation.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> réservant le message.</param>
      <returns>
        <see langword="true" /> si le message a été réservé avec succès ; sinon <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> n'est pas valide.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>Offre un message au <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, donnant à la cible la possibilité d'utiliser ou de différer le message.</summary>
      <param name="messageHeader">Instance <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> qui représente l'en-tête du message qui est proposé.</param>
      <param name="messageValue">Valeur du message proposé.</param>
      <param name="source">
        <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> qui transmet le message. Il peut s'agir d'une valeur null.</param>
      <param name="consumeToAccept">Définit sur <see langword="true" /> pour indiquer à la cible d'appeler <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> de façon synchrone pendant l'appel à <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />, avant de renvoyer <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> pour utiliser le message.</param>
      <returns>État du message proposé. Si le message a été accepté par la cible, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> est retourné, et la source ne doit plus utiliser le message envoyé, car elle est désormais la propriété de la cible. Si le message a été différé par la cible, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> est retournée comme notification que la cible peut ensuite essayer d'utiliser ou de réserver un message ; parallèlement, la source possède le message et peut toujours le proposer à d'autres blocs.
Si la cible avait par contre un message différé mais que la <paramref name="source" /> avait la valeur <see langword="null" />, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> serait retourné à la place.
Si la cible a tenté de recevoir le message mais a échoué en raison de la source fournissant un message à une autre cible ou en l'ignorant simplement, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" /> est retourné.
Si la cible a choisi de ne pas recevoir le message, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> est retourné. Si la cible a choisi de ne pas recevoir le message et ne recevra jamais un autre message de cette source, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" /> est retourné.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> n’est pas valide.
ou <paramref name="consumeToAccept" /> peut avoir la valeur true uniquement s’il est fourni avec une <paramref name="source" /> non Null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.ToString">
      <summary>Retourne une chaîne qui représente le nom mis en forme de cette instance de <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</summary>
      <returns>Chaîne qui représente le nom mis en forme de cette instance <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.TryReceive(System.Predicate{`0},`0@)">
      <summary>Tente de recevoir de façon synchrone un élément de sortie disponible de <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="filter">Attribut qu'une valeur doit passer avec succès pour sa réception.  <paramref name="filter" /> peut être <see langword="null" />, dans ce cas, tous les éléments aboutissent.</param>
      <param name="item">Élément envoyé à partir de la source.</param>
      <returns>
        <see langword="true" /> si un élément peut être reçu ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BufferBlock`1">
      <summary>Fournit une mémoire tampon pour stocker des données pour un flux de données.</summary>
      <typeparam name="T">Spécifie le type des données mises en mémoire tampon par ce bloc de flux de données.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.#ctor">
      <summary>Initialise un nouveau <see cref="T:System.Threading.Tasks.Dataflow.BufferBlock`1" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.#ctor(System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary>Initialise un nouveau <see cref="T:System.Threading.Tasks.Dataflow.BufferBlock`1" /> avec le <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" /> spécifié.</summary>
      <param name="dataflowBlockOptions">Options avec lesquelles configurer ce <see cref="T:System.Threading.Tasks.Dataflow.BufferBlock`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataflowBlockOptions" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.Complete">
      <summary>Signale à <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> qu'il ne doit plus recevoir ni produire de messages ou utiliser des messages différés.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BufferBlock`1.Completion">
      <summary>Obtient une <see cref="T:System.Threading.Tasks.Task" /> qui représente l'opération asynchrone et l'achèvement du bloc de flux de données.</summary>
      <returns>Tâche.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BufferBlock`1.Count">
      <summary>Obtient le nombre d'éléments actuellement stockés dans la mémoire tampon.</summary>
      <returns>Nombre d'éléments.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Lie le <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> au <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> spécifié.</summary>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> auquel connecter cette source.</param>
      <param name="linkOptions">Instance <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> qui configure le lien.</param>
      <returns>IDisposable qui, en appelant Dispose, dissocie la source de la cible.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> est Null (Nothing en Visual Basic) ou <paramref name="linkOptions" /> est Null (Nothing en Visual Basic).</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>Provoque l’achèvement du <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> à l’état <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.</summary>
      <param name="exception">
        <see cref="T:System.Exception" /> ayant provoqué l’erreur.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
      <summary>Appelé par un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> lié pour recevoir et utiliser un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> précédemment proposé par ce <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> du message en cours d'utilisation.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> absorbant le message.</param>
      <param name="messageConsumed">
        <see langword="true" /> si le message a été consommé avec succès ; sinon <see langword="false" />.</param>
      <returns>Valeur du message consommé. Cela peut correspondre à une instance de <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> différente de celle qui a été précédemment réservée et transmise comme <paramref name="messageHeader" /> à <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />. Le <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> consommateur doit utiliser la valeur retournée au lieu de la valeur passée comme <paramref name="messageValue" /> via <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />.
Si le message demandé n'est pas disponible, la valeur de retour est <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> n'est pas valide.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>Appelé par un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> lié pour libérer un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> précédemment réservé par ce <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> du message réservé en cours de libération.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> libérant le message précédemment réservé.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> n'est pas valide.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">La <paramref name="target" /> ne contient pas le message réservé.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>Appelé par un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> lié pour réserver un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> précédemment proposé par ce <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> du message en cours de réservation.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> réservant le message.</param>
      <returns>
        <see langword="true" /> si le message a été réservé avec succès ; sinon <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> n'est pas valide.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>Offre un message au <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, donnant à la cible la possibilité d'utiliser ou de différer le message.</summary>
      <param name="messageHeader">Instance <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> qui représente l'en-tête du message qui est proposé.</param>
      <param name="messageValue">Valeur du message proposé.</param>
      <param name="source">
        <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> qui transmet le message. Celui-ci peut être <see langword="null" />.</param>
      <param name="consumeToAccept">Définit sur true pour indiquer à la cible d’appeler <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> de façon synchrone pendant l’appel à <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />, avant de retourner <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />, pour consommer le message.</param>
      <returns>État du message proposé. Si le message a été accepté par la cible, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> est retourné, et la source ne doit plus utiliser le message envoyé, car elle est désormais la propriété de la cible. Si le message a été différé par la cible, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> est retournée comme notification que la cible peut ensuite essayer d'utiliser ou de réserver un message ; parallèlement, la source possède le message et peut toujours le proposer à d'autres blocs.
Si la cible avait par contre un message différé mais que la <paramref name="source" /> avait la valeur <see langword="null" />, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> serait retourné à la place.
Si la cible a tenté de recevoir le message mais a échoué en raison de la source fournissant un message à une autre cible ou en l'ignorant simplement, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" /> est retourné.
Si la cible a choisi de ne pas recevoir le message, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> est retourné. Si la cible a choisi de ne pas recevoir le message et ne recevra jamais un autre message de cette source, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" /> est retourné.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> n’est pas valide.
ou <paramref name="consumeToAccept" /> peut avoir la valeur true uniquement s’il est fourni avec une <paramref name="source" /> non Null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.ToString">
      <summary>Retourne une chaîne qui représente le nom mis en forme de cette instance de <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</summary>
      <returns>Chaîne qui représente le nom mis en forme de cette instance de <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.TryReceive(System.Predicate{`0},`0@)">
      <summary>Tente de recevoir de façon synchrone un élément de sortie disponible de <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="filter">Attribut qu'une valeur doit passer avec succès pour sa réception. <paramref name="filter" /> peut être <see langword="null" />, dans ce cas, tous les éléments aboutissent.</param>
      <param name="item">Élément envoyé à partir de la source.</param>
      <returns>
        <see langword="true" /> si un élément peut être reçu ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.TryReceiveAll(System.Collections.Generic.IList{`0}@)">
      <summary>Tente de recevoir de façon synchrone tous les éléments disponibles de <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="items">Éléments reçus de la source.</param>
      <returns>
        <see langword="true" /> si un ou plusieurs éléments peuvent être reçus ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowBlock">
      <summary>Fournit un ensemble de méthodes statiques (Shared en Visual Basic) pour utiliser des blocs de flux de données.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.AsObservable``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})">
      <summary>Crée une abstraction <see cref="T:System.IObservable`1" /> sur <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="source">Source à inclure dans un wrapper.</param>
      <typeparam name="TOutput">Spécifie le type de données contenu dans la source.</typeparam>
      <returns>
        <see cref="T:System.IObservable`1" /> qui permet aux observateurs de s'abonner à la source.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.AsObserver``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0})">
      <summary>Crée une abstraction <see cref="T:System.IObserver`1" /> sur <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</summary>
      <param name="target">Cible à encapsuler.</param>
      <typeparam name="TInput">Spécifie le type d'entrée accepté par le bloc cible.</typeparam>
      <returns>Observateur qui encapsule le bloc cible.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1})">
      <summary>Surveille deux sources de flux de données, en appelant le gestionnaire fourni pour toute source qui rend les données disponibles en premier.</summary>
      <param name="source1">Première source.</param>
      <param name="action1">Gestionnaire à exécuter sur les données de la première source.</param>
      <param name="source2">Deuxième source.</param>
      <param name="action2">Gestionnaire à exécuter sur les données de la deuxième source.</param>
      <typeparam name="T1">Spécifie le type de données contenu dans la première source.</typeparam>
      <typeparam name="T2">Spécifie le type de données contenu dans la deuxième source.</typeparam>
      <returns>
        <see cref="T:System.Threading.Tasks.Task`1" /> qui représente le choix asynchrone. Si les deux sources sont terminées avant d'avoir effectué un choix, la tâche résultante est annulée. Lorsque l'une des sources a des données disponibles et les propage avec succès au choix, la tâche résultante s'achève lorsque le gestionnaire se termine. Si le gestionnaire lève une exception, la tâche se termine à l'état <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> et contiendra l'exception non gérée. Sinon, la tâche se termine avec son <see cref="P:System.Threading.Tasks.Task`1.Result" /> défini sur 0 ou 1 pour représenter la première ou la deuxième source, respectivement.
Cette méthode consommera un seul élément de l'une des deux sources de données, jamais les deux.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> a la valeur <see langword="null" />.

ou -
<paramref name="action1" /> a la valeur <see langword="null" />.

ou -
<paramref name="source2" /> a la valeur <see langword="null" />.

ou -
<paramref name="action2" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary>Surveille deux sources de flux de données, en appelant le gestionnaire fourni pour toute source qui rend les données disponibles en premier.</summary>
      <param name="source1">Première source.</param>
      <param name="action1">Gestionnaire à exécuter sur les données de la première source.</param>
      <param name="source2">Deuxième source.</param>
      <param name="action2">Gestionnaire à exécuter sur les données de la deuxième source.</param>
      <param name="dataflowBlockOptions">Options permettant de configurer ce choix.</param>
      <typeparam name="T1">Spécifie le type de données contenu dans la première source.</typeparam>
      <typeparam name="T2">Spécifie le type de données contenu dans la deuxième source.</typeparam>
      <returns>
        <see cref="T:System.Threading.Tasks.Task`1" /> qui représente le choix asynchrone. Si les deux sources sont terminées avant d'avoir effectué un choix, ou si le <see cref="T:System.Threading.CancellationToken" /> fourni dans le cadre des <paramref name="dataflowBlockOptions" /> est annulé avant d'avoir effectué un choix, la tâche résultante est annulée. Lorsque l'une des sources a des données disponibles et les propage avec succès au choix, la tâche résultante s'achève lorsque le gestionnaire se termine. Si le gestionnaire lève une exception, la tâche se termine à l'état <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> et contiendra l'exception non gérée. Sinon, la tâche se termine avec son <see cref="P:System.Threading.Tasks.Task`1.Result" /> défini sur 0 ou 1 pour représenter la première ou la deuxième source, respectivement.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> a la valeur <see langword="null" />.

ou -
<paramref name="action1" /> a la valeur <see langword="null" />.

ou -
<paramref name="source2" /> a la valeur <see langword="null" />.

ou -
<paramref name="action2" /> a la valeur <see langword="null" />.

ou -
<paramref name="dataflowBlockOptions" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2})">
      <summary>Surveille trois sources de flux de données, en appelant le gestionnaire fourni pour toute source qui rend les données disponibles en premier.</summary>
      <param name="source1">Première source.</param>
      <param name="action1">Gestionnaire à exécuter sur les données de la première source.</param>
      <param name="source2">Deuxième source.</param>
      <param name="action2">Gestionnaire à exécuter sur les données de la deuxième source.</param>
      <param name="source3">Troisième source.</param>
      <param name="action3">Gestionnaire à exécuter sur les données de la troisième source.</param>
      <typeparam name="T1">Spécifie le type de données contenu dans la première source.</typeparam>
      <typeparam name="T2">Spécifie le type de données contenu dans la deuxième source.</typeparam>
      <typeparam name="T3">Spécifie le type de données contenu dans la troisième source.</typeparam>
      <returns>
        <see cref="T:System.Threading.Tasks.Task`1" /> qui représente le choix asynchrone. Si toutes les sources sont terminées avant d'avoir effectué un choix, la tâche résultante est annulée. Lorsque l'une des sources a des données disponibles et les propage avec succès au choix, la tâche résultante s'achève lorsque le gestionnaire se termine. Si le gestionnaire lève une exception, la tâche se termine à l'état <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> et contiendra l'exception non gérée. Sinon, la tâche se termine avec son <see cref="P:System.Threading.Tasks.Task`1.Result" /> défini sur l'index de base 0 de la source.
Cette méthode consommera un seul élément de l'une des sources de données, jamais plusieurs.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> a la valeur <see langword="null" />.

ou -
<paramref name="action1" /> a la valeur <see langword="null" />.

ou -
<paramref name="source2" /> a la valeur <see langword="null" />.

ou -
<paramref name="action2" /> a la valeur <see langword="null" />.

ou -
<paramref name="source3" /> a la valeur <see langword="null" />.

ou -
<paramref name="action3" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary>Surveille trois sources de flux de données, en appelant le gestionnaire fourni pour toute source qui rend les données disponibles en premier.</summary>
      <param name="source1">Première source.</param>
      <param name="action1">Gestionnaire à exécuter sur les données de la première source.</param>
      <param name="source2">Deuxième source.</param>
      <param name="action2">Gestionnaire à exécuter sur les données de la deuxième source.</param>
      <param name="source3">Troisième source.</param>
      <param name="action3">Gestionnaire à exécuter sur les données de la troisième source.</param>
      <param name="dataflowBlockOptions">Options permettant de configurer ce choix.</param>
      <typeparam name="T1">Spécifie le type de données contenu dans la première source.</typeparam>
      <typeparam name="T2">Spécifie le type de données contenu dans la deuxième source.</typeparam>
      <typeparam name="T3">Spécifie le type de données contenu dans la troisième source.</typeparam>
      <returns>
        <see cref="T:System.Threading.Tasks.Task`1" /> qui représente le choix asynchrone. Si toutes les sources sont terminées avant d'avoir effectué un choix, ou si le <see cref="T:System.Threading.CancellationToken" /> fourni dans le cadre des <paramref name="dataflowBlockOptions" /> est annulé avant d'avoir effectué un choix, la tâche résultante est annulée. Lorsque l'une des sources a des données disponibles et les propage avec succès au choix, la tâche résultante s'achève lorsque le gestionnaire se termine. Si le gestionnaire lève une exception, la tâche se termine à l'état <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> et contiendra l'exception non gérée. Sinon, la tâche se termine avec son <see cref="P:System.Threading.Tasks.Task`1.Result" /> défini sur l'index de base 0 de la source.
Cette méthode consommera un seul élément de l'une des sources de données, jamais plusieurs. Si l'annulation est demandée une fois qu'un élément a été reçu, la demande d'annulation est ignorée, et le gestionnaire approprié est autorisé à s'exécuter.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> a la valeur <see langword="null" />.

ou -
<paramref name="action1" /> a la valeur <see langword="null" />.

ou -
<paramref name="source2" /> a la valeur <see langword="null" />.

ou -
<paramref name="action2" /> a la valeur <see langword="null" />.

ou -
<paramref name="source3" /> a la valeur <see langword="null" />.

ou -
<paramref name="action3" /> a la valeur <see langword="null" />.

ou -
<paramref name="dataflowBlockOptions" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate``2(System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1})">
      <summary>Encapsule une cible et une source dans un propagateur unique.</summary>
      <param name="target">Cible à encapsuler.</param>
      <param name="source">Source à encapsuler.</param>
      <typeparam name="TInput">Spécifie le type d'entrée attendu par la cible.</typeparam>
      <typeparam name="TOutput">Spécifie le type de sortie produit par la source.</typeparam>
      <returns>Cible et source encapsulées.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0})">
      <summary>Lie le <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> au <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> spécifié.</summary>
      <param name="source">Source à partir de laquelle effectuer la liaison.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> auquel connecter la source.</param>
      <typeparam name="TOutput">Spécifie le type de données contenu dans la source.</typeparam>
      <returns>
        <see cref="T:System.IDisposable" /> qui, en appelant <see langword="Dispose" />, dissocie la source de la cible.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur <see langword="null" />.

ou -
<paramref name="target" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Predicate{``0})">
      <summary>Lie le <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> au <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> spécifié à l’aide du filtre spécifié.</summary>
      <param name="source">Source à partir de laquelle effectuer la liaison.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> auquel connecter la source.</param>
      <param name="predicate">Filtre qu'un message doit respecter pour être propagé de la source à la cible.</param>
      <typeparam name="TOutput">Spécifie le type de données contenu dans la source.</typeparam>
      <returns>
        <see cref="T:System.IDisposable" /> qui, en appelant <see langword="Dispose" />, dissocie la source de la cible.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur <see langword="null" />.

ou -
<paramref name="target" /> a la valeur <see langword="null" />.

ou -
<paramref name="predicate" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Predicate{``0})">
      <summary>Lie le <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> au <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> spécifié à l’aide du filtre spécifié.</summary>
      <param name="source">Source à partir de laquelle effectuer la liaison.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> auquel connecter la source.</param>
      <param name="linkOptions">L'une des valeurs d'énumération qui spécifie comment configurer un lien entre les blocs de flux de données.</param>
      <param name="predicate">Filtre qu'un message doit respecter pour être propagé de la source à la cible.</param>
      <typeparam name="TOutput">Spécifie le type de données contenu dans la source.</typeparam>
      <returns>
        <see cref="T:System.IDisposable" /> qui, en appelant <see langword="Dispose" />, dissocie la source de la cible.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est Null (Nothing en Visual Basic).

ou -
<paramref name="target" /> est Null (Nothing en Visual Basic).

ou -
<paramref name="linkOptions" /> est Null (Nothing en Visual Basic).

ou -
<paramref name="predicate" /> est Null (Nothing en Visual Basic).</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.NullTarget``1">
      <summary>Obtient un bloc cible qui reçoit de façon synchrone tous les messages fournis à ce dernier et les supprime.</summary>
      <typeparam name="TInput">Type des messages que ce bloc peut accepter.</typeparam>
      <returns>
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> qui reçoit et dépose ensuite tous les messages transmis.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})">
      <summary>Fournit un <see cref="T:System.Threading.Tasks.Task`1" /> qui surveille de façon asynchrone la source de la sortie disponible.</summary>
      <param name="source">Source à surveiller.</param>
      <typeparam name="TOutput">Spécifie le type de données contenu dans la source.</typeparam>
      <returns>
        <see cref="T:System.Threading.Tasks.Task`1" /> qui avertit si une sortie supplémentaire sera disponible et quand. Si, lorsque la tâche se termine, son <see cref="P:System.Threading.Tasks.Task`1.Result" /> a la valeur <see langword="true" />, une sortie supplémentaire sera disponible dans la source (même si un autre consommateur de la source peut récupérer les données).
Si elle retourne <see langword="false" />, une sortie supplémentaire n'est pas et ne sera jamais disponible, en raison d'une source qui se termine avant la disponibilité de la sortie.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)">
      <summary>Fournit un <see cref="T:System.Threading.Tasks.Task`1" /> qui surveille de façon asynchrone la source de la sortie disponible.</summary>
      <param name="source">Source à surveiller.</param>
      <param name="cancellationToken">Jeton d'annulation utilisé pour annuler l'opération asynchrone.</param>
      <typeparam name="TOutput">Spécifie le type de données contenu dans la source.</typeparam>
      <returns>
        <see cref="T:System.Threading.Tasks.Task`1" /> qui avertit si une sortie supplémentaire sera disponible et quand. Si, lorsque la tâche se termine, son <see cref="P:System.Threading.Tasks.Task`1.Result" /> a la valeur <see langword="true" />, une sortie supplémentaire sera disponible dans la source (même si un autre consommateur de la source peut récupérer les données). Si elle retourne <see langword="false" />, une sortie supplémentaire n'est pas et ne sera jamais disponible, en raison d'une source qui se termine avant la disponibilité de la sortie.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Post``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)">
      <summary>Publie un élément à <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</summary>
      <param name="target">Bloc cible.</param>
      <param name="item">Élément qui est proposé à la cible.</param>
      <typeparam name="TInput">Spécifie le type de données accepté par le bloc cible.</typeparam>
      <returns>
        <see langword="true" /> si l'élément a été accepté par le bloc cible ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})">
      <summary>Reçoit de façon synchrone une valeur d'une source spécifiée.</summary>
      <param name="source">La source à partir de laquelle recevoir la valeur.</param>
      <typeparam name="TOutput">Le type des données contenues dans la source.</typeparam>
      <returns>La valeur reçue.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Aucun élément n'a pu être accepté par la source.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)">
      <summary>Reçoit de façon synchrone une valeur d'une source spécifiée et fournit un jeton pour annuler l'opération.</summary>
      <param name="source">La source à partir de laquelle recevoir la valeur.</param>
      <param name="cancellationToken">Le jeton à utiliser pour annuler l'opération de réception.</param>
      <typeparam name="TOutput">Le type des données contenues dans la source.</typeparam>
      <returns>La valeur reçue.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Aucun élément n'a pu être accepté par la source.</exception>
      <exception cref="T:System.OperationCanceledException">L'opération a été annulée avant la réception d'un élément depuis la source.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)">
      <summary>Reçoit de façon synchrone une valeur d'une source spécifiée, en observant un délai d'attente facultatif.</summary>
      <param name="source">La source à partir de laquelle recevoir la valeur.</param>
      <param name="timeout">Intervalle de temps maximum, en millisecondes, à attendre pour que l'exécution synchrone se termine, ou intervalle qui représente -1 milliseconde pour attendre indéfiniment.</param>
      <typeparam name="TOutput">Le type des données contenues dans la source.</typeparam>
      <returns>La valeur reçue.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> est un nombre négatif autre que -1 milliseconde, qui représente un délai d'attente infini.

ou -
<paramref name="timeout" /> est supérieur à <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Aucun élément n'a pu être accepté par la source.</exception>
      <exception cref="T:System.TimeoutException">Le délai d'attente spécifié a expiré avant la réception d'un élément en provenance de la source.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)">
      <summary>Reçoit de façon synchrone une valeur d'une source spécifiée, en fournissant un jeton pour annuler l'opération et en observant un délai d'attente facultatif.</summary>
      <param name="source">La source à partir de laquelle recevoir la valeur.</param>
      <param name="timeout">Intervalle de temps maximum, en millisecondes, à attendre pour que l'exécution synchrone se termine, ou intervalle qui représente -1 milliseconde pour attendre indéfiniment.</param>
      <param name="cancellationToken">Le jeton à utiliser pour annuler l'opération de réception.</param>
      <typeparam name="TOutput">Le type des données contenues dans la source.</typeparam>
      <returns>La valeur reçue.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> est un nombre négatif autre que -1 milliseconde, qui représente un délai d'attente infini.

ou -
<paramref name="timeout" /> est supérieur à <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.InvalidOperationException">Aucun élément n'a pu être accepté par la source.</exception>
      <exception cref="T:System.TimeoutException">Le délai d'attente spécifié a expiré avant la réception d'un élément en provenance de la source.</exception>
      <exception cref="T:System.OperationCanceledException">L'opération a été annulée avant la réception d'un élément depuis la source.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})">
      <summary>Reçoit de façon asynchrone une valeur d'une source spécifiée.</summary>
      <param name="source">La source à partir de laquelle recevoir la valeur.</param>
      <typeparam name="TOutput">Le type des données contenues dans la source.</typeparam>
      <returns>Tâche qui représente l'opération de réception asynchrone. Lorsqu'une valeur d'élément est reçue avec succès depuis la source, la tâche retournée est exécutée et son <see cref="P:System.Threading.Tasks.Task`1.Result" /> retourne la valeur reçue. Si la valeur d’un élément ne peut pas être récupérée car la source est vide et terminée, une exception <see cref="T:System.InvalidOperationException" /> est levée dans la tâche retournée.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)">
      <summary>Accepte de façon asynchrone une valeur d'une source spécifiée et fournit un jeton pour annuler l'opération.</summary>
      <param name="source">La source à partir de laquelle recevoir la valeur.</param>
      <param name="cancellationToken">Le jeton à utiliser pour annuler l'opération de réception.</param>
      <typeparam name="TOutput">Spécifie le type de données contenu dans la source.</typeparam>
      <returns>Tâche qui représente l'opération de réception asynchrone. Lorsqu'une valeur est correctement reçue de la source, la tâche retournée est terminée et son <see cref="P:System.Threading.Tasks.Task`1.Result" /> retourne la valeur. Si une valeur ne peut pas être récupérée parce que l'annulation a été demandée, la tâche retournée est annulée. Si la valeur ne peut pas être récupérée car la source est vide et terminée, une exception <see cref="T:System.InvalidOperationException" /> est levée dans la tâche retournée.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)">
      <summary>Reçoit de façon asynchrone une valeur d'une source spécifiée, en observant un délai d'attente facultatif.</summary>
      <param name="source">La source à partir de laquelle recevoir la valeur.</param>
      <param name="timeout">Intervalle de temps maximum, en millisecondes, à attendre pour que l'exécution synchrone se termine, ou intervalle qui représente -1 milliseconde pour attendre indéfiniment.</param>
      <typeparam name="TOutput">Le type des données contenues dans la source.</typeparam>
      <returns>Tâche qui représente l'opération de réception asynchrone. Lorsqu'une valeur est correctement reçue de la source, la tâche retournée est terminée et son <see cref="P:System.Threading.Tasks.Task`1.Result" /> retourne la valeur. Si une valeur ne peut pas être récupérée car le délai d'attente a expiré, la tâche retournée est annulée. Si la valeur ne peut pas être récupérée car la source est vide et terminée, une exception <see cref="T:System.InvalidOperationException" /> est levée dans la tâche retournée.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> est un nombre négatif autre que -1 milliseconde, qui représente un délai d'attente infini.

ou -
<paramref name="timeout" /> est supérieur à <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)">
      <summary>Reçoit de façon asynchrone une valeur d'une source spécifiée, en fournissant un jeton pour annuler l'opération et en observant un délai d'attente facultatif.</summary>
      <param name="source">La source à partir de laquelle recevoir la valeur.</param>
      <param name="timeout">Intervalle de temps maximum, en millisecondes, à attendre pour que l'exécution synchrone se termine, ou intervalle qui représente -1 milliseconde pour attendre indéfiniment.</param>
      <param name="cancellationToken">Le jeton pouvant être utilisé pour annuler l'opération de réception.</param>
      <typeparam name="TOutput">Le type des données contenues dans la source.</typeparam>
      <returns>Tâche qui représente l'opération de réception asynchrone. Lorsqu'une valeur est correctement reçue de la source, la tâche retournée est terminée et son <see cref="P:System.Threading.Tasks.Task`1.Result" /> retourne la valeur. Si une valeur ne peut pas être récupérée parce que le délai d'attente a expiré ou l'annulation a été demandée, la tâche retournée est annulée. Si la valeur ne peut pas être récupérée parce que la source est vide et terminée, une exception <see cref="T:System.InvalidOperationException" /> est levée dans la tâche retournée.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> est un nombre négatif autre que -1 milliseconde, qui représente un délai d'attente infini.

ou -
<paramref name="timeout" /> est supérieur à <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)">
      <summary>Propose de façon asynchrone un message au bloc de message cible, en autorisant l'ajournement.</summary>
      <param name="target">Cible dans laquelle publier les données.</param>
      <param name="item">Élément qui est proposé à la cible.</param>
      <typeparam name="TInput">Spécifie le type des données à publier sur la cible.</typeparam>
      <returns>
        <see cref="T:System.Threading.Tasks.Task`1" /> qui représente l'envoi asynchrone. Si la cible accepte et consomme l'élément proposé pendant l'appel à <see cref="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)" />, au retour de l'appel la <see cref="T:System.Threading.Tasks.Task`1" /> résultante sera terminée et sa propriété <see cref="P:System.Threading.Tasks.Task`1.Result" /> retournera la valeur <see langword="true" />. Si la cible refuse l'élément proposé pendant l'appel, au retour de l'appel la <see cref="T:System.Threading.Tasks.Task`1" /> résultante sera terminée et sa propriété <see cref="P:System.Threading.Tasks.Task`1.Result" /> retournera la valeur <see langword="false" />. Si la cible diffère l'élément proposé, l'élément sera mis en mémoire tampon jusqu'au moment où la cible le consomme ou le libère. À ce moment-là, la tâche se terminera, avec son <see cref="P:System.Threading.Tasks.Task`1.Result" /> indiquant si le message a été consommé. Si la cible n'essaie jamais de consommer ou de libérer le message, la tâche retournée ne se terminera jamais.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0,System.Threading.CancellationToken)">
      <summary>Propose de façon asynchrone un message au bloc de message cible, en autorisant l'ajournement.</summary>
      <param name="target">Cible dans laquelle publier les données.</param>
      <param name="item">Élément qui est proposé à la cible.</param>
      <param name="cancellationToken">Jeton d'annulation utilisé pour demander l'annulation de l'opération d'envoi.</param>
      <typeparam name="TInput">Spécifie le type des données à publier sur la cible.</typeparam>
      <returns>
        <see cref="T:System.Threading.Tasks.Task`1" /> qui représente l'envoi asynchrone.  Si la cible accepte et consomme l’élément proposé pendant l’appel à SendAsync, au retour de l’appel la <see cref="T:System.Threading.Tasks.Task`1" /> résultante est terminée et sa propriété <c>Result</c> retourne la valeur true.  Si la cible refuse l’élément proposé pendant l’appel, au retour de l’appel la <see cref="T:System.Threading.Tasks.Task`1" /> résultante est terminée et sa propriété <c>Result</c> retourne la valeur false. Si la cible diffère l’élément proposé, l’élément est mis en mémoire tampon jusqu’au moment où la cible le consomme ou le libère. À ce moment-là, la tâche se termine, avec son <c>Result</c> indiquant si le message a été consommé. Si la cible n'essaie jamais de consommer ou de libérer le message, la tâche retournée ne se terminera jamais.
Si l'annulation est demandée avant que la cible n'ait consommé avec succès les données envoyées, la tâche retournée se terminera à l'état d'annulation et les données ne seront plus disponibles pour la cible.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> est Null (Nothing en Visual Basic).</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.TryReceive``1(System.Threading.Tasks.Dataflow.IReceivableSourceBlock{``0},``0@)">
      <summary>Tente de recevoir de façon synchrone un élément de <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="source">Source de réception.</param>
      <param name="item">Élément envoyé à partir de la source.</param>
      <typeparam name="TOutput">Spécifie le type de données contenu dans la source.</typeparam>
      <returns>
        <see langword="true" /> si un élément peut être reçu ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions">
      <summary>Fournit les options utilisées pour configurer le traitement exécuté par les blocs de flux de données.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockOptions.#ctor">
      <summary>Initialise un nouveau <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" />.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.BoundedCapacity">
      <summary>Obtient ou définit le nombre maximal de messages reçus qui peuvent être mis en mémoire tampon par le bloc.</summary>
      <returns>Nombre maximal de messages. La valeur par défaut est -1, qui indique le nombre de messages illimité.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.CancellationToken">
      <summary>Obtient ou définit le <see cref="T:System.Threading.CancellationToken" /> pour lequel il faut surveiller les demandes d’annulation.</summary>
      <returns>Jeton.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.EnsureOrdered">
      <summary>Obtient ou définit une valeur qui indique si le traitement ordonné doit être appliqué sur la gestion des messages d’un bloc.</summary>
      <returns>
        <see langword="true" />Si le traitement ordonné doit être appliqué ; Sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.MaxMessagesPerTask">
      <summary>Obtient ou définit le nombre maximal de messages qui peuvent être traités par tâche.</summary>
      <returns>Nombre maximal de messages. La valeur par défaut est -1, qui indique le nombre de messages illimité.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.NameFormat">
      <summary>Obtient ou définit la chaîne de format à utiliser lorsqu'un bloc est interrogé pour son nom.</summary>
      <returns>Chaîne de format à utiliser lorsqu'un bloc est interrogé pour obtenir son nom.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.TaskScheduler">
      <summary>Obtient ou définit le <see cref="T:System.Threading.Tasks.TaskScheduler" /> à utiliser pour la planification des tâches.</summary>
      <returns>Planificateur de tâches.</returns>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowBlockOptions.Unbounded">
      <summary>Constante utilisée pour spécifier une quantité illimitée pour les membres de <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" /> qui fournissent une limite supérieure. Ce champ est constant.</summary>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions">
      <summary>Fournit les options utilisées pour configurer un lien entre des blocs de flux de données.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowLinkOptions.#ctor">
      <summary>Initialise la <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" />.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowLinkOptions.Append">
      <summary>Obtient ou définit une valeur indiquant si le lien doit être ajouté à la suite de la liste de liens de la source, ou s’il doit être ajouté au début.</summary>
      <returns>Retourne <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowLinkOptions.MaxMessages">
      <summary>Obtient ou définit le nombre maximal de messages pouvant être utilisés sur le lien.</summary>
      <returns>Retourne <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowLinkOptions.PropagateCompletion">
      <summary>Obtient ou définit une valeur indiquant si la cible liée disposera des fonctions de progression et de notification d'erreurs propagées automatiquement à son actif.</summary>
      <returns>Retourne <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader">
      <summary>Fournit un conteneur d'attributs de données pour passer ces attributs de données entre les blocs de flux de données.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.#ctor(System.Int64)">
      <summary>Initialise un nouveau <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> avec les attributs spécifiés.</summary>
      <param name="id">ID du message. Doit être unique dans le bloc source d'origine. Il ne doit pas nécessairement être global unique.</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.Equals(System.Object)">
      <summary>Contrôle les instances <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> boxed pour l'égalité par ID.</summary>
      <param name="obj">Instance boxed de <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> .</param>
      <returns>
        <see langword="true" /> si les instances sont égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.Equals(System.Threading.Tasks.Dataflow.DataflowMessageHeader)">
      <summary>Contrôle deux instances <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> pour l’égalité par ID sans conversion boxing.</summary>
      <param name="other">Autre instance de <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />.</param>
      <returns>
        <see langword="true" /> si les instances sont égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.GetHashCode">
      <summary>Génère un code de hachage pour l'instance <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />.</summary>
      <returns>Code de hachage.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowMessageHeader.Id">
      <summary>Obtient l'ID du message à l'intérieur de la source.</summary>
      <returns>ID contenu dans l' <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> instance.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowMessageHeader.IsValid">
      <summary>Obtient la validité du message.</summary>
      <returns>
        <see langword="true" /> si l'ID du message est différente de 0. <see langword="false" /> si l'ID du message est 0.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.op_Equality(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.DataflowMessageHeader)">
      <summary>Contrôle deux instances <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> pour l’égalité par ID.</summary>
      <param name="left">Instance de <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />.</param>
      <param name="right">Instance de <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />.</param>
      <returns>
        <see langword="true" /> si les instances sont égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.op_Inequality(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.DataflowMessageHeader)">
      <summary>Contrôle deux instances <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> pour la non égalité par ID.</summary>
      <param name="left">Instance de <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />.</param>
      <param name="right">Instance de <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />.</param>
      <returns>
        <see langword="true" /> si les instances ne sont pas égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowMessageStatus">
      <summary>Représente l'état d'un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> lorsqu'il est passé entre les blocs de flux de données.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted">
      <summary>Indique que le <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> a accepté le message. Une fois qu'une cible a reçu un message, il est totalement possédé par celle-ci.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined">
      <summary>Indique que le <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> a refusé le message. <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> possède toujours le message.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently">
      <summary>Indique que le <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> a refusé le message. <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> possède toujours le message.
En outre, <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> refuse tous futurs messages envoyés par la source.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable">
      <summary>Indique que le <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> a essayé d'accepter le message d'un <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />, mais que le message n'était plus disponible.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed">
      <summary>Indique que le <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> a différé le message en vue d'une utilisation potentielle ultérieurement.
<see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> possède toujours le message.</summary>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions">
      <summary>Fournit les options utilisées pour configurer le traitement effectué par les blocs de flux de données qui traitent chaque message via l'appel d'un délégué fourni par l'utilisateur. Il s’agit de blocs de flux de données tels que <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> et <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions.#ctor">
      <summary>Initialise un nouveau <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" />.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions.MaxDegreeOfParallelism">
      <summary>Obtient le nombre maximal de messages reçus qui peuvent être traités par le bloc simultanément.</summary>
      <returns>Nombre maximal de messages.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions.SingleProducerConstrained">
      <summary>Obtient une valeur indiquant si le code utilisant le bloc de flux de données est limité à un producteur à la fois.</summary>
      <returns>Retourne <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions">
      <summary>Fournit les options utilisées pour configurer le traitement effectué par les blocs de flux de données qui regroupent plusieurs messages. Il s’agit de blocs de flux de données tels que <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" /> et <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions.#ctor">
      <summary>Initialise un nouveau <see cref="T:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions" />.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions.Greedy">
      <summary>Obtient ou définit la valeur booléenne à utiliser pour déterminer si des messages proposés peuvent être utilisés au maximum.</summary>
      <returns>
        <see langword="true" /> pour une consommation maximale des messages transmis ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions.MaxNumberOfGroups">
      <summary>Obtient ou définit le nombre maximal de groupes qui doivent être générés par le bloc.</summary>
      <returns>Nombre maximal de groupes.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.IDataflowBlock">
      <summary>Représente un bloc de flux de données.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.IDataflowBlock.Complete">
      <summary>Signale à <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> qu'il ne doit plus recevoir ni produire de messages ou utiliser des messages différés.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.IDataflowBlock.Completion">
      <summary>Obtient une <see cref="T:System.Threading.Tasks.Task" /> qui représente l’opération asynchrone et l’achèvement du bloc de flux de données.</summary>
      <returns>Tâche.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.IDataflowBlock.Fault(System.Exception)">
      <summary>Provoque l’achèvement du <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> à l’état <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.</summary>
      <param name="exception">
        <see cref="T:System.Exception" /> ayant provoqué l’erreur.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.IPropagatorBlock`2">
      <summary>Représente un bloc de flux de données qui est une cible pour les données et une source de données.</summary>
      <typeparam name="TInput">Spécifie le type de données accepté par <see cref="T:System.Threading.Tasks.Dataflow.IPropagatorBlock`2" />.</typeparam>
      <typeparam name="TOutput">Spécifie le type de données fourni par <see cref="T:System.Threading.Tasks.Dataflow.IPropagatorBlock`2" />le.</typeparam>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1">
      <summary>Représente un bloc de flux de données qui prend en charge la réception des messages sans liaison.</summary>
      <typeparam name="TOutput">Spécifie le type des données fourni par le <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1.TryReceive(System.Predicate{`0},`0@)">
      <summary>Tente de recevoir de façon synchrone un élément de sortie disponible de <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="filter">Attribut qu'une valeur doit passer avec succès pour sa réception.  <paramref name="filter" /> peut être <see langword="null" />, dans ce cas, tous les éléments aboutissent.</param>
      <param name="item">Élément envoyé à partir de la source.</param>
      <returns>
        <see langword="true" /> si un élément peut être reçu ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1.TryReceiveAll(System.Collections.Generic.IList{`0}@)">
      <summary>Tente de recevoir de façon synchrone tous les éléments disponibles de <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="items">Éléments reçus de la source.</param>
      <returns>
        <see langword="true" /> si un ou plusieurs éléments peuvent être reçus ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.ISourceBlock`1">
      <summary>Représente un bloc de flux de données qui est une source de données.</summary>
      <typeparam name="TOutput">Spécifie le type de données fourni par le <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
      <summary>Appelé par un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> lié pour recevoir et utiliser un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> précédemment proposé par ce <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> du message en cours d'utilisation.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> absorbant le message.</param>
      <param name="messageConsumed">
        <see langword="true" /> si le message a été consommé avec succès ; sinon <see langword="false" />.</param>
      <returns>Valeur du message consommé. Cela peut correspondre à une instance de <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> différente de celle qui a été précédemment réservée et transmise comme <paramref name="messageHeader" /> à <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />. Le <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> consommateur doit utiliser la valeur retournée au lieu de la valeur passée comme <paramref name="messageValue" /> via <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />.
Si le message demandé n’est pas disponible, la valeur de retour est Null.</returns>
      <exception cref="T:System.ArgumentException">Le messageHeader n’est pas valide.</exception>
      <exception cref="T:System.ArgumentNullException">La cible est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Lie le <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> au <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> spécifié.</summary>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> auquel connecter cette source.</param>
      <param name="linkOptions">Instance <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> qui configure le lien.</param>
      <returns>IDisposable qui, en appelant Dispose, dissocie la source de la cible.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> est Null (Nothing en Visual Basic) ou <paramref name="linkOptions" /> est Null (Nothing en Visual Basic).</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>Appelé par un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> lié pour libérer un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> précédemment réservé par ce <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> du message réservé en cours de libération.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> libérant le message précédemment réservé.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> n'est pas valide.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">La <paramref name="target" /> ne contient pas le message réservé.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>Appelé par un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> lié pour réserver un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> précédemment proposé par ce <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> du message en cours de réservation.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> réservant le message.</param>
      <returns>
        <see langword="true" /> si le message a été réservé avec succès ; sinon <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> n'est pas valide.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.ITargetBlock`1">
      <summary>Représente un bloc de flux de données qui est une cible pour les données.</summary>
      <typeparam name="TInput">Spécifie le type des données accepté par le <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>Offre un message au <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, donnant à la cible la possibilité d'utiliser ou de différer le message.</summary>
      <param name="messageHeader">Instance <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> qui représente l'en-tête du message qui est proposé.</param>
      <param name="messageValue">Valeur du message proposé.</param>
      <param name="source">
        <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> qui transmet le message. Il peut s'agir d'une valeur null.</param>
      <param name="consumeToAccept">Définit sur <see langword="true" /> pour indiquer à la cible d'appeler <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> de façon synchrone pendant l'appel à <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />, avant de renvoyer <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> pour utiliser le message.</param>
      <returns>État du message proposé. Si le message a été accepté par la cible, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> est retourné, et la source ne doit plus utiliser le message envoyé, car elle est désormais la propriété de la cible. Si le message a été différé par la cible, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> est retournée comme notification que la cible peut ensuite essayer d'utiliser ou de réserver un message ; parallèlement, la source possède le message et peut toujours le proposer à d'autres blocs.
Si la cible avait autrement différé le message alors que la source avait la valeur <see langword="null" />, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> aurait été retourné à la place.
Si la cible a tenté de recevoir le message mais a échoué en raison de la source fournissant un message à une autre cible ou en l'ignorant simplement, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" /> est retourné.
Si la cible a choisi de ne pas recevoir le message, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> est retourné. Si la cible a choisi de ne pas recevoir le message et ne recevra jamais un autre message de cette source, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" /> est retourné.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> n’est pas valide.
ou <paramref name="consumeToAccept" /> peut avoir la valeur true uniquement s’il est fourni avec une <paramref name="source" /> non Null.</exception>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.JoinBlock`2">
      <summary>Fournit un bloc de flux de données qui se connecte à plusieurs sources de flux de données, pas nécessairement du même type, et attend l’arrivée d’un élément pour chaque type avant qu’ils ne soient libérés tous ensemble sous forme de tuple composé d’un élément par type.</summary>
      <typeparam name="T1">Spécifie le type de données accepté par la première cible du bloc.</typeparam>
      <typeparam name="T2">Spécifie le type de données accepté par la deuxième cible du bloc.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.#ctor">
      <summary>Initialise un nouveau <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.#ctor(System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary>Initialise un nouveau <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" />.</summary>
      <param name="dataflowBlockOptions">Options permettant de configurer ce <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataflowBlockOptions" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.Complete">
      <summary>Signale à <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> qu'il ne doit plus recevoir ni produire de messages ou utiliser des messages différés.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.Completion">
      <summary>Obtient une <see cref="T:System.Threading.Tasks.Task" /> qui représente l'opération asynchrone et l'achèvement du bloc de flux de données.</summary>
      <returns>Tâche.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1}},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Lie le <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> au <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> spécifié.</summary>
      <param name="target">Lie le <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> au <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> spécifié.</param>
      <param name="linkOptions">Instance <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> qui configure le lien.</param>
      <returns>IDisposable qui, en appelant Dispose, dissocie la source de la cible.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> est Null (Nothing en Visual Basic) ou <paramref name="linkOptions" /> est Null (Nothing en Visual Basic).</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.OutputCount">
      <summary>Obtient le nombre d'éléments de sortie disponibles en provenance de ce bloc.</summary>
      <returns>Nombre d'éléments de sortie.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>Provoque l'achèvement du <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> à l'état <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.</summary>
      <param name="exception">
        <see cref="T:System.Exception" /> ayant provoqué l’erreur.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2}}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1}},System.Boolean@)">
      <param name="messageHeader" />
      <param name="target" />
      <param name="messageConsumed" />
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2}}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1}})">
      <param name="messageHeader" />
      <param name="target" />
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2}}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1}})">
      <param name="messageHeader" />
      <param name="target" />
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.Target1">
      <summary>Obtient une cible qui peut être utilisée pour offrir des messages du premier type.</summary>
      <returns>Cible.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.Target2">
      <summary>Obtient une cible qui peut être utilisée pour offrir des messages du deuxième type.</summary>
      <returns>Cible.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.ToString">
      <summary>Retourne une chaîne qui représente le nom mis en forme de cette instance de <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</summary>
      <returns>Chaîne qui représente le nom mis en forme de cette instance <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.TryReceive(System.Predicate{System.Tuple{`0,`1}},System.Tuple{`0,`1}@)">
      <summary>Tente de recevoir de façon synchrone un élément de sortie disponible de <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="filter">Attribut qu'une valeur doit passer avec succès pour sa réception.  <paramref name="filter" /> peut être <see langword="null" />, dans ce cas, tous les éléments aboutissent.</param>
      <param name="item">Élément envoyé à partir de la source.</param>
      <returns>
        <see langword="true" /> si un élément peut être reçu ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{`0,`1}}@)">
      <summary>Tente de recevoir de façon synchrone tous les éléments disponibles de <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="items">Éléments reçus de la source.</param>
      <returns>
        <see langword="true" /> si un ou plusieurs éléments peuvent être reçus ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.JoinBlock`3">
      <summary>Fournit un bloc de flux de données qui se connecte à plusieurs sources de flux de données, qui ne sont pas nécessairement du même type, et attend l’arrivée d’un élément pour chaque type avant qu’ils ne soient libérés tous ensemble sous forme de tuple contenant un élément par type.</summary>
      <typeparam name="T1">Spécifie le type de données accepté par la première cible du bloc.</typeparam>
      <typeparam name="T2">Spécifie le type de données accepté par la deuxième cible du bloc.</typeparam>
      <typeparam name="T3">Spécifie le type de données accepté par la troisième cible du bloc.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.#ctor">
      <summary>Initialise un nouveau <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`3" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.#ctor(System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary>Initialise un nouveau <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`3" />.</summary>
      <param name="dataflowBlockOptions">Options permettant de configurer ce <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataflowBlockOptions" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.Complete">
      <summary>Signale à <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> qu'il ne doit plus recevoir ni produire de messages ou utiliser des messages différés.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.Completion">
      <summary>Obtient une <see cref="T:System.Threading.Tasks.Task" /> qui représente l'opération asynchrone et l'achèvement du bloc de flux de données.</summary>
      <returns>Tâche.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1,`2}},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Lie le bloc source au bloc cible spécifié.</summary>
      <param name="target">Bloc cible auquel connecter cette source.</param>
      <param name="linkOptions">Objet qui configure le lien.</param>
      <returns>Objet supprimable qui annule le lien entre la source et la cible quand sa méthode <see cref="M:System.IDisposable.Dispose" /> est appelée.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> est <see langword="null" />.

ou -
<paramref name="linkOptions" /> est <see langword="null" />.</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.OutputCount">
      <summary>Obtient le nombre d'éléments de sortie disponibles en provenance de ce bloc.</summary>
      <returns>Nombre d'éléments de sortie.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>Provoque l’achèvement du <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> à l’état <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.</summary>
      <param name="exception">
        <see cref="T:System.Exception" /> ayant provoqué l’erreur.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2@T3}}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1,`2}},System.Boolean@)">
      <param name="messageHeader" />
      <param name="target" />
      <param name="messageConsumed" />
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2@T3}}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1,`2}})">
      <param name="messageHeader" />
      <param name="target" />
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2@T3}}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1,`2}})">
      <param name="messageHeader" />
      <param name="target" />
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.Target1">
      <summary>Obtient une cible qui peut être utilisée pour offrir des messages du premier type.</summary>
      <returns>Cible.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.Target2">
      <summary>Obtient une cible qui peut être utilisée pour offrir des messages du deuxième type.</summary>
      <returns>Cible.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.Target3">
      <summary>Obtient une cible qui peut être utilisée pour offrir des messages du troisième type.</summary>
      <returns>Cible.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.ToString">
      <summary>Retourne une chaîne qui représente le nom mis en forme de cette instance de <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</summary>
      <returns>Chaîne qui représente le nom mis en forme de cette instance <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.TryReceive(System.Predicate{System.Tuple{`0,`1,`2}},System.Tuple{`0,`1,`2}@)">
      <summary>Tente de recevoir de façon synchrone un élément de sortie disponible de <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="filter">Attribut qu'une valeur doit passer avec succès pour sa réception.  <paramref name="filter" /> peut être <see langword="null" />, dans ce cas, tous les éléments aboutissent.</param>
      <param name="item">Élément envoyé à partir de la source.</param>
      <returns>
        <see langword="true" /> si un élément peut être reçu ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{`0,`1,`2}}@)">
      <summary>Tente de recevoir de façon synchrone tous les éléments disponibles de <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="items">Éléments reçus de la source.</param>
      <returns>
        <see langword="true" /> si un ou plusieurs éléments peuvent être reçus ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.TransformBlock`2">
      <summary>Fournit un bloc de flux de données qui appelle un délégué <see cref="T:System.Func`2" /> fourni pour chaque élément de données reçu.</summary>
      <typeparam name="TInput">Spécifie le type de données reçu et traité par ce <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" />.</typeparam>
      <typeparam name="TOutput">Spécifie le type de sortie de données par cette <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" />.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Func{`0,`1})">
      <summary>Initialise un nouveau <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> avec le <see cref="T:System.Func`2" /> spécifié.</summary>
      <param name="transform">Fonction à appeler à chaque élément de données reçu.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="transform" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Func{`0,`1},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary>Initialise un nouveau <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> avec les <see cref="T:System.Func`2" /> et <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" /> spécifiés.</summary>
      <param name="transform">Fonction à appeler à chaque élément de données reçu.</param>
      <param name="dataflowBlockOptions">Options avec lesquelles configurer ce <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="transform" /> a la valeur <see langword="null" />.

ou -
<paramref name="dataflowBlockOptions" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{`1}})">
      <summary>Initialise un nouveau <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> avec le <see cref="T:System.Func`2" /> spécifié.</summary>
      <param name="transform">Fonction à appeler à chaque élément de données reçu.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="transform" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{`1}},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary>Initialise un nouveau <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> avec les <see cref="T:System.Func`2" /> et <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" /> spécifiés.</summary>
      <param name="transform">Fonction à appeler à chaque élément de données reçu.</param>
      <param name="dataflowBlockOptions">Options avec lesquelles configurer ce <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="transform" /> a la valeur <see langword="null" />.

ou -
<paramref name="dataflowBlockOptions" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.Complete">
      <summary>Signale à <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> qu'il ne doit plus recevoir ni produire de messages ou utiliser des messages différés.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformBlock`2.Completion">
      <summary>Obtient une <see cref="T:System.Threading.Tasks.Task" /> qui représente l'opération asynchrone et l'achèvement du bloc de flux de données.</summary>
      <returns>Tâche.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformBlock`2.InputCount">
      <summary>Obtient le nombre d'éléments d'entrée en attente de traitement par ce bloc.</summary>
      <returns>Nombre d'éléments d'entrée.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Lie le <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> au <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> spécifié.</summary>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> auquel connecter cette source.</param>
      <param name="linkOptions">Instance <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> qui configure le lien.</param>
      <returns>IDisposable qui, en appelant Dispose, dissocie la source de la cible.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> est Null (Nothing en Visual Basic) ou <paramref name="linkOptions" /> est Null (Nothing en Visual Basic).</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformBlock`2.OutputCount">
      <summary>Obtient le nombre d'éléments de sortie disponibles en provenance de ce bloc.</summary>
      <returns>Nombre d'éléments de sortie.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>Provoque l’achèvement du <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> à l’état <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.</summary>
      <param name="exception">
        <see cref="T:System.Exception" /> ayant provoqué l'erreur.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Boolean@)">
      <summary>Appelé par un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> lié pour recevoir et utiliser un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> précédemment proposé par ce <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> du message en cours d'utilisation.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> absorbant le message.</param>
      <param name="messageConsumed">
        <see langword="true" /> si le message a été consommé avec succès ; sinon <see langword="false" />.</param>
      <returns>Valeur du message consommé. Cela peut correspondre à une autre instance <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> qui a été précédemment réservée et transmise comme <paramref name="messageHeader" /> à <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />. Le <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> consommateur doit utiliser la valeur retournée au lieu de la valeur passée comme <paramref name="messageValue" /> via <see cref="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />.
Si le message demandé n'est pas disponible, la valeur de retour est <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> n'est pas valide.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
      <summary>Appelé par un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> lié pour libérer un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> précédemment réservé par ce <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> du message réservé en cours de libération.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> libérant le message précédemment réservé.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> n'est pas valide.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">La <paramref name="target" /> ne contient pas le message réservé.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
      <summary>Appelé par un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> lié pour réserver un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> précédemment proposé par ce <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> du message en cours de réservation.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> réservant le message.</param>
      <returns>
        <see langword="true" /> si le message a été réservé avec succès ; sinon <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> n'est pas valide.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>Offre un message au <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, donnant à la cible la possibilité d'utiliser ou de différer le message.</summary>
      <param name="messageHeader">Instance <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> qui représente l'en-tête du message qui est proposé.</param>
      <param name="messageValue">Valeur du message proposé.</param>
      <param name="source">
        <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> qui transmet le message. Celui-ci peut être <see langword="null" />.</param>
      <param name="consumeToAccept">
        <see langword="true" /> si la cible doit appeler <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> de façon synchrone pendant l'appel à <see cref="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />, avant de renvoyer <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> pour utiliser le message.</param>
      <returns>État du message proposé. Si le message a été accepté par la cible, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> est retourné, et la source ne doit plus utiliser le message envoyé, car elle est désormais la propriété de la cible. Si le message a été différé par la cible, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> est retournée comme notification que la cible peut ensuite essayer d'utiliser ou de réserver un message ; parallèlement, la source possède le message et peut toujours le proposer à d'autres blocs.
Si la cible avait par contre différé mais que la source avait la valeur <see langword="null" />, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> est retourné à la place.
Si la cible a tenté de recevoir le message mais a échoué en raison de la source fournissant un message à une autre cible ou en l'ignorant simplement, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" /> est retourné.
Si la cible a choisi de ne pas recevoir le message, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> est retourné. Si la cible a choisi de ne pas recevoir le message et ne recevra jamais un autre message de cette source, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" /> est retourné.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> n'est pas valide.
ou <paramref name="consumeToAccept" /> peut avoir la valeur true uniquement s’il est fourni avec une <paramref name="source" /> non Null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.ToString">
      <summary>Retourne une chaîne qui représente le nom mis en forme de cette instance de <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</summary>
      <returns>Chaîne qui représente le nom mis en forme de cette instance de <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.TryReceive(System.Predicate{`1},`1@)">
      <summary>Tente de recevoir de façon synchrone un élément de sortie disponible de <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="filter">Attribut qu'une valeur doit passer avec succès pour sa réception.  <paramref name="filter" /> peut être <see langword="null" />, dans ce cas, tous les éléments aboutissent.</param>
      <param name="item">Élément envoyé à partir de la source.</param>
      <returns>
        <see langword="true" /> si un élément peut être reçu ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.TryReceiveAll(System.Collections.Generic.IList{`1}@)">
      <summary>Tente de recevoir de façon synchrone tous les éléments disponibles de <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="items">Éléments reçus de la source.</param>
      <returns>
        <see langword="true" /> si un ou plusieurs éléments peuvent être reçus ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2">
      <summary>Fournit un bloc de flux de données qui appelle un délégué <see cref="T:System.Func`2" /> fourni pour chaque élément de données reçu.</summary>
      <typeparam name="TInput">Spécifie le type de données reçu et traité par ce <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</typeparam>
      <typeparam name="TOutput">Spécifie le type de données généré par le <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Collections.Generic.IEnumerable{`1}})">
      <summary>Initialise une nouvelle <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> avec la fonction spécifiée.</summary>
      <param name="transform">Fonction à appeler à chaque élément de données reçu. Toutes les données retournées de <see cref="T:System.Collections.Generic.IEnumerable`1" /> sont rendues disponibles en tant que sortie de ce <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="transform" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Collections.Generic.IEnumerable{`1}},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary>Initialise un nouveau <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> avec la fonction et <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" /> spécifiés.</summary>
      <param name="transform">Fonction à appeler à chaque élément de données reçu. Toutes les données retournées de l’élément de manière asynchrone dans <see cref="T:System.Collections.Generic.IEnumerable`1" /> sont rendues disponibles en tant que sortie de ce <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</param>
      <param name="dataflowBlockOptions">Options permettant de configurer ce <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="transform" /> a la valeur <see langword="null" />.

ou -
<paramref name="dataflowBlockOptions" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`1}}})">
      <summary>Initialise une nouvelle <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> avec la fonction spécifiée.</summary>
      <param name="transform">Fonction à appeler à chaque élément de données reçu. Toutes les données retournées de manière asynchrone dans <see cref="T:System.Collections.Generic.IEnumerable`1" /> sont rendues disponibles en tant que sortie de ce <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="transform" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`1}}},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary>Initialise un nouveau <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> avec la fonction et <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" /> spécifiés.</summary>
      <param name="transform">Fonction à appeler à chaque élément de données reçu. Toutes les données retournées de manière asynchrone dans <see cref="T:System.Collections.Generic.IEnumerable`1" /> sont rendues disponibles en tant que sortie de ce <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</param>
      <param name="dataflowBlockOptions">Options permettant de configurer ce <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="transform" /> a la valeur <see langword="null" />.

ou -
<paramref name="dataflowBlockOptions" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.Complete">
      <summary>Signale à <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> qu'il ne doit plus recevoir ni produire de messages ou utiliser des messages différés.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.Completion">
      <summary>Obtient une <see cref="T:System.Threading.Tasks.Task" /> qui représente l'opération asynchrone et l'achèvement du bloc de flux de données.</summary>
      <returns>Tâche.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.InputCount">
      <summary>Obtient le nombre d'éléments d'entrée en attente de traitement par ce bloc.</summary>
      <returns>Nombre d'éléments d'entrée.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Lie le <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> au <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> spécifié.</summary>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> auquel connecter cette source.</param>
      <param name="linkOptions">Instance <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> qui configure le lien.</param>
      <returns>IDisposable qui, en appelant Dispose, dissocie la source de la cible.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> est Null (Nothing en Visual Basic) ou <paramref name="linkOptions" /> est Null (Nothing en Visual Basic).</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.OutputCount">
      <summary>Obtient le nombre d'éléments de sortie disponibles en provenance de ce bloc.</summary>
      <returns>Nombre d'éléments de sortie.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>Provoque l’achèvement du <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> à l’état <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.</summary>
      <param name="exception">
        <see cref="T:System.Exception" /> ayant provoqué l'erreur.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Boolean@)">
      <summary>Appelé par un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> lié pour recevoir et utiliser un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> précédemment proposé par ce <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> du message en cours d'utilisation.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> absorbant le message.</param>
      <param name="messageConsumed">
        <see langword="true" /> si le message a été consommé avec succès ; sinon <see langword="false" />.</param>
      <returns>Valeur du message consommé. Cela peut correspondre à une autre instance <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> qui a été précédemment réservée et transmise comme <paramref name="messageHeader" /> à <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />. Le <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> consommateur doit utiliser la valeur retournée au lieu de la valeur passée comme <paramref name="messageValue" /> via OfferMessage <see cref="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />
Si le message demandé n'est pas disponible, la valeur de retour est <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> n'est pas valide.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
      <summary>Appelé par un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> lié pour libérer un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> précédemment réservé par ce <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> du message réservé en cours de libération.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> libérant le message précédemment réservé.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> n'est pas valide.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">La <paramref name="target" /> ne contient pas le message réservé.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
      <summary>Appelé par un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> lié pour réserver un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> précédemment proposé par ce <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> du message en cours de réservation.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> réservant le message.</param>
      <returns>
        <see langword="true" /> si le message a été réservé avec succès ; sinon <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> n'est pas valide.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>Offre un message au <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, donnant à la cible la possibilité d'utiliser ou de différer le message.</summary>
      <param name="messageHeader">Instance <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> qui représente l'en-tête du message qui est proposé.</param>
      <param name="messageValue">Valeur du message proposé.</param>
      <param name="source">
        <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> qui transmet le message. Celui-ci peut être <see langword="null" />.</param>
      <param name="consumeToAccept">
        <see langword="true" /> si la cible doit appeler <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> de façon synchrone pendant l'appel à <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, avant de renvoyer <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> pour utiliser le message.</param>
      <returns>État du message proposé. Si le message a été accepté par la cible, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> est retourné, et la source ne doit plus utiliser le message envoyé, car elle est désormais la propriété de la cible. Si le message a été différé par la cible, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> est retournée comme notification que la cible peut ensuite essayer d'utiliser ou de réserver un message ; parallèlement, la source possède le message et peut toujours le proposer à d'autres blocs.
Si la cible avait par contre différé mais que la source avait la valeur <see langword="null" />, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> est retourné à la place.
Si la cible a tenté de recevoir le message mais a échoué en raison de la source fournissant un message à une autre cible ou en l'ignorant simplement, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" /> est retourné.
Si la cible a choisi de ne pas recevoir le message, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> est retourné. Si la cible a choisi de ne pas recevoir le message et ne recevra jamais un autre message de cette source, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" /> est retourné.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> n'est pas valide.

ou -
<paramref name="consumeToAccept" /> peut avoir la valeur true uniquement s'il est fourni avec une <paramref name="source" /> différente de null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.ToString">
      <summary>Retourne une chaîne qui représente le nom mis en forme de cette instance de <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</summary>
      <returns>Chaîne qui représente le nom mis en forme de cette instance de <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.TryReceive(System.Predicate{`1},`1@)">
      <summary>Tente de recevoir de façon synchrone un élément de sortie disponible de <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="filter">Attribut qu'une valeur doit passer avec succès pour sa réception.  <paramref name="filter" /> peut être <see langword="null" />, dans ce cas, tous les éléments aboutissent.</param>
      <param name="item">Élément envoyé à partir de la source.</param>
      <returns>
        <see langword="true" /> si un élément peut être reçu ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.TryReceiveAll(System.Collections.Generic.IList{`1}@)">
      <summary>Tente de recevoir de façon synchrone tous les éléments disponibles de <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="items">Éléments reçus de la source.</param>
      <returns>
        <see langword="true" /> si un ou plusieurs éléments peuvent être reçus ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1">
      <summary>Fournit une mémoire tampon pour recevoir et stocker au plus un élément dans un réseau de blocs de flux de données.</summary>
      <typeparam name="T">Spécifie le type des données mises en mémoire tampon par ce bloc de flux de données.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.#ctor(System.Func{`0,`0})">
      <summary>Initialise un nouveau <see cref="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1" />.</summary>
      <param name="cloningFunction">Fonction à utiliser pour cloner des données après envoi à d'autres blocs.</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.#ctor(System.Func{`0,`0},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary>Initialise un nouveau <see cref="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1" /> avec le <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" /> spécifié.</summary>
      <param name="cloningFunction">Fonction à utiliser pour cloner des données après envoi à d'autres blocs.</param>
      <param name="dataflowBlockOptions">Options permettant de configurer ce <see cref="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataflowBlockOptions" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.Complete">
      <summary>Signale à <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> qu'il ne doit plus recevoir ni produire de messages ou utiliser des messages différés.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.Completion">
      <summary>Obtient une <see cref="T:System.Threading.Tasks.Task" /> qui représente l'opération asynchrone et l'achèvement du bloc de flux de données.</summary>
      <returns>Tâche.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Lie le <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> au <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> spécifié.</summary>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> auquel connecter cette source.</param>
      <param name="linkOptions">Instance <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> qui configure le lien.</param>
      <returns>IDisposable qui, en appelant Dispose, dissocie la source de la cible.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> est Null (Nothing en Visual Basic) ou <paramref name="linkOptions" /> est Null (Nothing en Visual Basic).</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>Provoque l'achèvement du <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> à l'état <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.</summary>
      <param name="exception">
        <see cref="T:System.Exception" /> ayant provoqué l’erreur.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#IReceivableSourceBlock{T}#TryReceiveAll(System.Collections.Generic.IList{`0}@)">
      <summary>Tente de recevoir de façon synchrone tous les éléments disponibles de <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="items">Éléments reçus de la source.</param>
      <returns>
        <see langword="true" /> si un ou plusieurs éléments peuvent être reçus ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
      <summary>Appelé par un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> lié pour recevoir et utiliser un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> précédemment proposé par ce <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> du message en cours d'utilisation.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> absorbant le message.</param>
      <param name="messageConsumed">
        <see langword="true" /> si le message a été consommé avec succès ; sinon <see langword="false" />.</param>
      <returns>Valeur du message consommé. Cela peut correspondre à une instance de <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> différente de celle qui a été précédemment réservée et transmise comme <paramref name="messageHeader" /> à <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />. Le <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> consommateur doit utiliser la valeur retournée au lieu de la valeur passée comme <paramref name="messageValue" /> via <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />.
Si le message demandé n'est pas disponible, la valeur de retour est <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> n'est pas valide.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>Appelé par un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> lié pour libérer un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> précédemment réservé par ce <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> du message réservé en cours de libération.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> libérant le message précédemment réservé.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> n'est pas valide.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">La <paramref name="target" /> ne contient pas le message réservé.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>Appelé par un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> lié pour réserver un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> précédemment proposé par ce <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> du message en cours de réservation.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> réservant le message.</param>
      <returns>
        <see langword="true" /> si le message a été réservé avec succès ; sinon <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> n'est pas valide.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>Offre un message au <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, donnant à la cible la possibilité d'utiliser ou de différer le message.</summary>
      <param name="messageHeader">Instance <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> qui représente l'en-tête du message qui est proposé.</param>
      <param name="messageValue">Valeur du message proposé.</param>
      <param name="source">
        <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> qui transmet le message. Celui-ci peut être <see langword="null" />.</param>
      <param name="consumeToAccept">Définit sur <see langword="true" /> pour indiquer à la cible d'appeler <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> de façon synchrone pendant l'appel à <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />, avant de renvoyer <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> pour utiliser le message.</param>
      <returns>État du message proposé. Si le message a été accepté par la cible, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> est retourné, et la source ne doit plus utiliser le message envoyé, car elle est désormais la propriété de la cible. Si le message a été différé par la cible, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> est retournée comme notification que la cible peut ensuite essayer d'utiliser ou de réserver un message ; parallèlement, la source possède le message et peut toujours le proposer à d'autres blocs.
Si la cible avait par contre un message différé mais que la <paramref name="source" /> avait la valeur <see langword="null" />, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> serait retourné à la place.
Si la cible a tenté de recevoir le message mais a échoué en raison de la source fournissant un message à une autre cible ou en l'ignorant simplement, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" /> est retourné.
Si la cible a choisi de ne pas recevoir le message, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> est retourné. Si la cible a choisi de ne pas recevoir le message et ne recevra jamais un autre message de cette source, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" /> est retourné.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> n’est pas valide.
ou <paramref name="consumeToAccept" /> peut avoir la valeur true uniquement s’il est fourni avec une <paramref name="source" /> non Null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.ToString">
      <summary>Retourne une chaîne qui représente le nom mis en forme de cette instance de <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</summary>
      <returns>Chaîne qui représente le nom mis en forme de cette instance de <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.TryReceive(System.Predicate{`0},`0@)">
      <summary>Tente de recevoir de façon synchrone un élément de sortie disponible de <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="filter">Attribut qu'une valeur doit passer avec succès pour sa réception.  <paramref name="filter" /> peut être <see langword="null" />, dans ce cas, tous les éléments aboutissent.</param>
      <param name="item">Élément envoyé à partir de la source.</param>
      <returns>
        <see langword="true" /> si un élément peut être reçu ; sinon, <see langword="false" />.</returns>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Text.Json</name>
  </assembly>
  <members>
    <member name="T:System.Text.Json.JsonCommentHandling">
      <summary vsli:raw="Defines how the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; struct handles comments.">Définit comment le struct <see cref="T:System.Text.Json.Utf8JsonReader" /> gère les commentaires.</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Allow">
      <summary vsli:raw="Allows comments within the JSON input and treats them as valid tokens. While reading, the caller can access the comment values.">Autorise les commentaires dans l’entrée JSON et les considère comme des jetons valides. Lors de la lecture, l’appelant peut accéder aux valeurs de commentaire.</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Disallow">
      <summary vsli:raw="Doesn't allow comments within the JSON input. Comments are treated as invalid JSON if found, and a &lt;see cref=&quot;T:System.Text.Json.JsonException&quot; /&gt; is thrown. This is the default value.">N’autorise pas les commentaires dans l’entrée JSON. Les commentaires sont considérés comme du code JSON non valide le cas échéant et une <see cref="T:System.Text.Json.JsonException" /> est levée. Valeur par défaut.</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Skip">
      <summary vsli:raw="Allows comments within the JSON input and ignores them. The &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; behaves as if no comments are present.">Autorise les commentaires dans l’entrée JSON et les ignore. Le <see cref="T:System.Text.Json.Utf8JsonReader" /> se comporte comme si aucun commentaire n’était présent.</summary>
    </member>
    <member name="T:System.Text.Json.JsonDocument">
      <summary vsli:raw="Provides a mechanism for examining the structural content of a JSON value without automatically instantiating data values.">Fournit un mécanisme permettant d’examiner le contenu structurel d’une valeur JSON sans instancier automatiquement des valeurs de données.</summary>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Dispose">
      <summary vsli:raw="Releases the resources used by this &lt;xref data-throw-if-not-resolved=&quot;true&quot; uid=&quot;System.Text.Json.JsonDocument&quot;&gt;&lt;/xref&gt; instance.">Libère les ressources utilisées par cette instance de <see cref="T:System.Text.Json.JsonDocument" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
      <summary vsli:raw="Parses a sequence as UTF-8-encoded text representing a single JSON value into a JsonDocument.">Analyse une séquence sous forme de texte encodé en UTF-8 qui représente une valeur de type octet JSON unique dans un JsonDocument.</summary>
      <param name="utf8Json" vsli:raw="The JSON text to parse.">Texte JSON à analyser.</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">Options permettant de contrôler le comportement du lecteur lors de l’analyse.</param>
      <returns vsli:raw="A JsonDocument representation of the JSON value.">Représentation JsonDocument de la valeur JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="utf8Json" /> ne représente pas une valeur JSON unique valide.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="readerOptions" /> contient des options non prises en charge.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; as UTF-8-encoded data representing a single JSON value into a JsonDocument. The stream is read to completion.">Analyse un <see cref="T:System.IO.Stream" /> sous forme de données encodées en UTF-8 qui représente une valeur JSON unique dans un JsonDocument. Le flux est lu dans son intégralité.</summary>
      <param name="utf8Json" vsli:raw="The JSON data to parse.">Données JSON à analyser.</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">Options permettant de contrôler le comportement du lecteur lors de l’analyse.</param>
      <returns vsli:raw="A JsonDocument representation of the JSON value.">Représentation JsonDocument de la valeur JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="utf8Json" /> ne représente pas une valeur JSON unique valide.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="readerOptions" /> contient des options non prises en charge.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
      <summary vsli:raw="Parses memory as UTF-8-encoded text representing a single JSON value into a JsonDocument.">Analyse la mémoire sous forme de texte encodé en UTF-8 qui représente une valeur de type octet JSON unique dans un JsonDocument.</summary>
      <param name="utf8Json" vsli:raw="The JSON text to parse.">Texte JSON à analyser.</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">Options permettant de contrôler le comportement du lecteur lors de l’analyse.</param>
      <returns vsli:raw="A JsonDocument representation of the JSON value.">Représentation JsonDocument de la valeur JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="utf8Json" /> ne représente pas une valeur JSON unique valide.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="readerOptions" /> contient des options non prises en charge.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
      <summary vsli:raw="Parses text representing a single JSON value into a JsonDocument.">Analyse du texte qui représente une valeur de caractère JSON unique dans un JsonDocument.</summary>
      <param name="json" vsli:raw="The JSON text to parse.">Texte JSON à analyser.</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">Options permettant de contrôler le comportement du lecteur lors de l’analyse.</param>
      <returns vsli:raw="A JsonDocument representation of the JSON value.">Représentation JsonDocument de la valeur JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="json" /> ne représente pas une valeur JSON unique valide.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="readerOptions" /> contient des options non prises en charge.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
      <summary vsli:raw="Parses text representing a single JSON string value into a JsonDocument.">Analyse du texte qui représente une valeur de chaîne JSON unique dans un JsonDocument.</summary>
      <param name="json" vsli:raw="The JSON text to parse.">Texte JSON à analyser.</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">Options permettant de contrôler le comportement du lecteur lors de l’analyse.</param>
      <returns vsli:raw="A JsonDocument representation of the JSON value.">Représentation JsonDocument de la valeur JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="json" /> ne représente pas une valeur JSON unique valide.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="readerOptions" /> contient des options non prises en charge.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.ParseAsync(System.IO.Stream,System.Text.Json.JsonDocumentOptions,System.Threading.CancellationToken)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; as UTF-8-encoded data representing a single JSON value into a JsonDocument. The stream is read to completion.">Analyse un <see cref="T:System.IO.Stream" /> sous forme de données encodées en UTF-8 qui représente une valeur JSON unique dans un JsonDocument. Le flux est lu dans son intégralité.</summary>
      <param name="utf8Json" vsli:raw="The JSON data to parse.">Données JSON à analyser.</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">Options permettant de contrôler le comportement du lecteur lors de l’analyse.</param>
      <param name="cancellationToken" vsli:raw="The token to monitor for cancellation requests.">Jeton pour surveiller les requêtes d'annulation.</param>
      <returns vsli:raw="A task to produce a JsonDocument representation of the JSON value.">Tâche destinée à produire une représentation JsonDocument de la valeur JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="utf8Json" /> ne représente pas une valeur JSON unique valide.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="readerOptions" /> contient des options non prises en charge.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.ParseValue(System.Text.Json.Utf8JsonReader@)">
      <summary vsli:raw="Parses one JSON value (including objects or arrays) from the provided reader.">Analyse une valeur JSON (notamment des objets ou des tableaux) à partir du lecteur fourni.</summary>
      <param name="reader" vsli:raw="The reader to read.">Lecteur à partir duquel effectuer la lecture.</param>
      <returns vsli:raw="A JsonDocument representing the value (and nested values) read from the reader.">Un JsonDocument représentant la valeur (et les valeurs imbriquées) lues par le lecteur.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;reader&quot; /&gt; contains unsupported options.&#xA;&#xA;-or-&#xA;&#xA;The current &lt;paramref name=&quot;reader&quot; /&gt; token does not start or represent a value.">
        <paramref name="reader" /> contient des options non prises en charge.
-ou-
Le jeton <paramref name="reader" /> actuel ne démarre pas et ne représente pas une valeur.</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="A value could not be read from the reader.">Une valeur n’a pas pu être lue par le lecteur.</exception>
    </member>
    <member name="P:System.Text.Json.JsonDocument.RootElement">
      <summary vsli:raw="Gets the root element of this JSON document.">Obtient l’élément racine de ce document JSON.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of the document.">
        <see cref="T:System.Text.Json.JsonElement" /> représentant la valeur du document.</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.TryParseValue(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonDocument@)">
      <summary vsli:raw="Attempts to parse one JSON value (including objects or arrays) from the provided reader.">Tente d’analyser une valeur JSON (notamment des objets ou des tableaux) à partir du lecteur fourni.</summary>
      <param name="reader" vsli:raw="The reader to read.">Lecteur à partir duquel effectuer la lecture.</param>
      <param name="document" vsli:raw="When the method returns, contains the parsed document.">Quand la méthode retourne une valeur, contient le document analysé.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a value was read and parsed into a JsonDocument; &lt;see langword=&quot;false&quot; /&gt; if the reader ran out of data while parsing. All other situations result in an exception being thrown.">
        <see langword="true" /> si une valeur a été lue et analysée dans un JsonDocument ; <see langword="false" /> si le lecteur a manqué de données lors de l’analyse. Toutes les autres situations entraînent la levée d’une exception.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;reader&quot; /&gt; contains unsupported options.&#xA;&#xA;-or-&#xA;&#xA;The current &lt;paramref name=&quot;reader&quot; /&gt; token does not start or represent a value.">
        <paramref name="reader" /> contient des options non prises en charge.
-ou-
Le jeton <paramref name="reader" /> actuel ne démarre pas et ne représente pas une valeur.</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="A value could not be read from the reader.">Une valeur n’a pas pu être lue par le lecteur.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary vsli:raw="Writes the document to the provided writer as a JSON value.">Écrit le document dans l’enregistreur fourni sous la forme d’une valeur JSON.</summary>
      <param name="writer" vsli:raw="The writer to which to write the document.">Enregistreur dans lequel écrire le document.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;writer&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="writer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; of this &lt;see cref=&quot;P:System.Text.Json.JsonDocument.RootElement&quot; /&gt; would result in invalid JSON.">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de ce <see cref="P:System.Text.Json.JsonDocument.RootElement" /> aboutit à du code JSON non valide.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="T:System.Text.Json.JsonDocumentOptions">
      <summary vsli:raw="Provides the ability for the user to define custom behavior when parsing JSON to create a &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt;.">Offre la possibilité à l’utilisateur de définir un comportement personnalisé lors de l’analyse de JSON pour créer un <see cref="T:System.Text.Json.JsonDocument" />.</summary>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.AllowTrailingCommas">
      <summary vsli:raw="Gets or sets a value that indicates whether an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored) within the JSON payload being read.">Obtient ou définit une valeur qui indique si une virgule supplémentaire à la fin d’une liste de valeurs JSON dans un objet ou un tableau est autorisée (et ignorée) dans la charge utile JSON en cours de lecture.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an extra comma at the end of a list of JSON values in an object or array is allowed; otherwise, &lt;see langword=&quot;false&quot; /&gt;. Default is &lt;see langword=&quot;false&quot; /&gt;">
        <see langword="true" /> si une virgule supplémentaire à la fin d’une liste de valeurs JSON dans un objet ou un tableau est autorisée ; Sinon, <see langword="false" />. La valeur par défaut est <see langword="false" /></returns>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.CommentHandling">
      <summary vsli:raw="Gets or sets a value that determines how the &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; handles comments when reading through the JSON data.">Obtient ou définit une valeur qui détermine comment <see cref="T:System.Text.Json.JsonDocument" /> gère les commentaires lors de la lecture des données JSON.</summary>
      <returns vsli:raw="One of the enumeration values that indicates how comments are handled.">L’une des valeurs d’énumération qui indique comment les commentaires sont gérés.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The comment handling enum is set to a value that is not supported (or not within the &lt;see cref=&quot;T:System.Text.Json.JsonCommentHandling&quot; /&gt; enum range).">L’énum de gestion des commentaires est définie avec une valeur qui n’est pas prise en charge (ou qui n’est pas dans la plage d’énums <see cref="T:System.Text.Json.JsonCommentHandling" />).</exception>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.MaxDepth">
      <summary vsli:raw="Gets or sets the maximum depth allowed when parsing JSON data, with the default (that is, 0) indicating a maximum depth of 64.">Obtient ou définit la profondeur maximale autorisée lors de l’analyse de données JSON, avec la valeur par défaut (c’est-à-dire 0) indiquant une profondeur maximale de 64.</summary>
      <returns vsli:raw="The maximum depth allowed when parsing JSON data.">Profondeur maximale autorisée lors de l’analyse des données JSON.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The max depth is set to a negative value.">La profondeur maximale est définie avec une valeur négative.</exception>
    </member>
    <member name="T:System.Text.Json.JsonElement">
      <summary vsli:raw="Represents a specific JSON value within a &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt;.">Représente une valeur JSON spécifique dans un <see cref="T:System.Text.Json.JsonDocument" />.</summary>
    </member>
    <member name="T:System.Text.Json.JsonElement.ArrayEnumerator">
      <summary vsli:raw="Represents an enumerator for the contents of a JSON array.">Représente un énumérateur pour le contenu d’un tableau JSON.</summary>
    </member>
    <member name="P:System.Text.Json.JsonElement.ArrayEnumerator.Current">
      <summary vsli:raw="Gets the element in the collection at the current position of the enumerator.">Obtient l’élément de la collection situé à la position actuelle de l’énumérateur.</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">Élément dans la collection à la position actuelle de l'énumérateur.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.Dispose">
      <summary vsli:raw="Releases the resources used by this &lt;xref data-throw-if-not-resolved=&quot;true&quot; uid=&quot;System.Text.Json.JsonElement.ArrayEnumerator&quot;&gt;&lt;/xref&gt; instance.">Libère les ressources utilisées par cette instance de <see cref="T:System.Text.Json.JsonElement.ArrayEnumerator" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Retourne un énumérateur qui itère au sein d’une collection.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the array.">Énumérateur permettant d’effectuer une itération au sein du tableau.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the collection.">Avance l’énumérateur à l’élément suivant de la collection.</summary>
      <returns vsli:raw="&lt;code data-dev-comment-type=&quot;langword&quot;&gt;true&lt;/code&gt; if the enumerator was successfully advanced to the next element; &lt;code data-dev-comment-type=&quot;langword&quot;&gt;false&lt;/code&gt; if the enumerator has passed the end of the collection.">
        <see langword="true" /> si l'énumérateur a pu avancer jusqu'à l'élément suivant ; <see langword="false" /> si l'énumérateur a dépassé la fin de la collection.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">Rétablit l'énumérateur à sa position initiale, qui précède le premier élément de la collection.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#Generic#IEnumerable{System#Text#Json#JsonElement}#GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein d’une collection.</summary>
      <returns>Énumérateur pour un tableau de <see cref="T:System.Text.Json.JsonElement" /> permettant d’effectuer une itération au sein de la collection.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Retourne un énumérateur qui itère au sein d’une collection.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Énumérateur permettant d'effectuer une itération au sein de la collection.</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element in the collection at the current position of the enumerator.">Obtient l’élément de la collection situé à la position actuelle de l’énumérateur.</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">Élément dans la collection à la position actuelle de l'énumérateur.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.Clone">
      <summary vsli:raw="Gets a JsonElement that can be safely stored beyond the lifetime of the original &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt;.">Obtient un JsonElement qui peut être stocké de manière sécurisée au-delà de la durée de vie du <see cref="T:System.Text.Json.JsonDocument" /> d’origine.</summary>
      <returns vsli:raw="A JsonElement that can be safely stored beyond the lifetime of the original &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt;.">JsonElement pouvant être stocké de manière sécurisée au-delà de la durée de vie du <see cref="T:System.Text.Json.JsonDocument" /> d’origine.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.EnumerateArray">
      <summary vsli:raw="Gets an enumerator to enumerate the values in the JSON array represented by this JsonElement.">Obtient un énumérateur pour énumérer les valeurs du tableau JSON représenté par ce JsonElement.</summary>
      <returns vsli:raw="An enumerator to enumerate the values in the JSON array represented by this JsonElement.">Énumérateur permettant d’énumérer les valeurs du tableau JSON représenté par ce JsonElement.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Array&quot; /&gt;.">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Array" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.EnumerateObject">
      <summary vsli:raw="Gets an enumerator to enumerate the properties in the JSON object represented by this JsonElement.">Obtient un énumérateur pour énumérer les propriétés de l’objet JSON représenté par ce JsonElement.</summary>
      <returns vsli:raw="An enumerator to enumerate the properties in the JSON object represented by this JsonElement.">Énumérateur permettant d’énumérer les propriétés de l’objet JSON représenté par ce JsonElement.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetArrayLength">
      <summary vsli:raw="Gets the number of values contained within the current array value.">Obtient le nombre de valeurs contenues dans la valeur de tableau actuelle.</summary>
      <returns vsli:raw="The number of values contained within the current array value.">Nombre de valeurs contenues dans la valeur de tableau actuelle.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Array&quot; /&gt;.">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Array" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetBoolean">
      <summary vsli:raw="Gets the value of the element as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">Obtient la valeur de l’élément sous la forme <see cref="T:System.Boolean" />.</summary>
      <returns vsli:raw="The value of the element as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">Valeur de l’élément sous la forme <see cref="T:System.Boolean" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is neither &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.True&quot; /&gt; nor &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.False&quot; /&gt;.">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est ni <see cref="F:System.Text.Json.JsonValueKind.True" /> ni <see cref="F:System.Text.Json.JsonValueKind.False" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetByte">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">Obtient le nombre JSON actuel sous la forme <see cref="T:System.Byte" />.</summary>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">Nombre JSON actuel sous la forme <see cref="T:System.Byte" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">La valeur ne peut pas être représentée sous la forme <see cref="T:System.Byte" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetBytesFromBase64">
      <summary vsli:raw="Gets the value of the element as a byte array.">Obtient la valeur de l’élément sous forme d’un tableau d’octets.</summary>
      <returns vsli:raw="The value decoded as a byte array.">Valeur décodée sous la forme d’un tableau d’octets.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value is not encoded as Base64 text and hence cannot be decoded to bytes.">La valeur n’est pas encodée en texte en Base64 et donc ne peut pas être décodée en octets.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDateTime">
      <summary vsli:raw="Gets the value of the element as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">Obtient la valeur de l’élément sous la forme <see cref="T:System.DateTime" />.</summary>
      <returns vsli:raw="The value of the element as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">Valeur de l’élément sous la forme <see cref="T:System.DateTime" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be read as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">La valeur ne peut pas être lue comme <see cref="T:System.DateTime" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDateTimeOffset">
      <summary vsli:raw="Gets the value of the element as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">Obtient la valeur de l’élément sous la forme <see cref="T:System.DateTimeOffset" />.</summary>
      <returns vsli:raw="The value of the element as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">Valeur de l’élément sous la forme <see cref="T:System.DateTimeOffset" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be read as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">La valeur ne peut pas être lue comme <see cref="T:System.DateTimeOffset" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDecimal">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">Obtient le nombre JSON actuel sous la forme <see cref="T:System.Decimal" />.</summary>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">Nombre JSON actuel sous la forme <see cref="T:System.Decimal" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">La valeur ne peut pas être représentée sous la forme <see cref="T:System.Decimal" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDouble">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">Obtient le nombre JSON actuel sous la forme <see cref="T:System.Double" />.</summary>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">Nombre JSON actuel sous la forme <see cref="T:System.Double" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">La valeur ne peut pas être représentée sous la forme <see cref="T:System.Double" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetGuid">
      <summary vsli:raw="Gets the value of the element as a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">Obtient la valeur de l’élément sous la forme <see cref="T:System.Guid" />.</summary>
      <returns vsli:raw="The value of the element as a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">Valeur de l’élément sous la forme <see cref="T:System.Guid" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">La valeur ne peut pas être représentée sous la forme <see cref="T:System.Guid" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt16">
      <summary vsli:raw="Gets the current JSON number as an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">Obtient le nombre JSON actuel sous la forme <see cref="T:System.Int16" />.</summary>
      <returns vsli:raw="The current JSON number as an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">Nombre JSON actuel sous la forme <see cref="T:System.Int16" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">La valeur ne peut pas être représentée sous la forme <see cref="T:System.Int16" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt32">
      <summary vsli:raw="Gets the current JSON number as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">Obtient le nombre JSON actuel sous la forme <see cref="T:System.Int32" />.</summary>
      <returns vsli:raw="The current JSON number as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">Nombre JSON actuel sous la forme <see cref="T:System.Int32" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">La valeur ne peut pas être représentée sous la forme <see cref="T:System.Int32" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt64">
      <summary vsli:raw="Gets the current JSON number as an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">Obtient le nombre JSON actuel sous la forme <see cref="T:System.Int64" />.</summary>
      <returns vsli:raw="The current JSON number as an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">Nombre JSON actuel sous la forme <see cref="T:System.Int64" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">La valeur ne peut pas être représentée sous la forme <see cref="T:System.Int64" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of a required property identified by &lt;paramref name=&quot;utf8PropertyName&quot; /&gt;.">Obtient un <see cref="T:System.Text.Json.JsonElement" /> représentant la valeur d’une propriété obligatoire identifiée par <paramref name="utf8PropertyName" />.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 representation (with no Byte-Order-Mark (BOM)) of the name of the property to return.">Représentation UTF-8 (sans marque d’ordre d’octet) du nom de la propriété à retourner.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of the requested property.">
        <see cref="T:System.Text.Json.JsonElement" /> représentant la valeur de la propriété demandée.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="No property was found with the requested name.">Aucune propriété n’a été trouvée avec le nom demandé.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of a required property identified by &lt;paramref name=&quot;propertyName&quot; /&gt;.">Obtient un <see cref="T:System.Text.Json.JsonElement" /> représentant la valeur d’une propriété obligatoire identifiée par <paramref name="propertyName" />.</summary>
      <param name="propertyName" vsli:raw="The name of the property whose value is to be returned.">Nom de la propriété dont la valeur doit être retournée.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of the requested property.">
        <see cref="T:System.Text.Json.JsonElement" /> représentant la valeur de la propriété demandée.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="No property was found with the requested name.">Aucune propriété n’a été trouvée avec le nom demandé.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.String)">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of a required property identified by &lt;paramref name=&quot;propertyName&quot; /&gt;.">Obtient un <see cref="T:System.Text.Json.JsonElement" /> représentant la valeur d’une propriété obligatoire identifiée par <paramref name="propertyName" />.</summary>
      <param name="propertyName" vsli:raw="The name of the property whose value is to be returned.">Nom de la propriété dont la valeur doit être retournée.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of the requested property.">
        <see cref="T:System.Text.Json.JsonElement" /> représentant la valeur de la propriété demandée.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="No property was found with the requested name.">Aucune propriété n’a été trouvée avec le nom demandé.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetRawText">
      <summary vsli:raw="Gets a string that represents the original input data backing this value.">Obtient une chaîne qui représente les données d’entrée d’origine associées à cette valeur.</summary>
      <returns vsli:raw="The original input data backing this value.">Données d’entrée d’origine associées à cette valeur.</returns>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetSByte">
      <summary vsli:raw="Gets the current JSON number as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">Obtient le nombre JSON actuel sous la forme <see cref="T:System.SByte" />.</summary>
      <returns vsli:raw="The current JSON number as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">Nombre JSON actuel sous la forme <see cref="T:System.SByte" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">La valeur ne peut pas être représentée sous la forme <see cref="T:System.SByte" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetSingle">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">Obtient le nombre JSON actuel sous la forme <see cref="T:System.Single" />.</summary>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">Nombre JSON actuel sous la forme <see cref="T:System.Single" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">La valeur ne peut pas être représentée sous la forme <see cref="T:System.Single" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetString">
      <summary vsli:raw="Gets the value of the element as a &lt;see cref=&quot;T:System.String&quot; /&gt;.">Obtient la valeur de l’élément sous la forme <see cref="T:System.String" />.</summary>
      <returns vsli:raw="The value of the element as a &lt;see cref=&quot;T:System.String&quot; /&gt;.">Valeur de l’élément sous la forme <see cref="T:System.String" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is neither &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt; nor &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Null&quot; /&gt;.">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est ni <see cref="F:System.Text.Json.JsonValueKind.String" /> ni <see cref="F:System.Text.Json.JsonValueKind.Null" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt16">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">Obtient le nombre JSON actuel sous la forme <see cref="T:System.UInt16" />.</summary>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">Nombre JSON actuel sous la forme <see cref="T:System.UInt16" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">La valeur ne peut pas être représentée sous la forme <see cref="T:System.UInt16" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt32">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">Obtient le nombre JSON actuel sous la forme <see cref="T:System.UInt32" />.</summary>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">Nombre JSON actuel sous la forme <see cref="T:System.UInt32" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">La valeur ne peut pas être représentée sous la forme <see cref="T:System.UInt32" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt64">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">Obtient le nombre JSON actuel sous la forme <see cref="T:System.UInt64" />.</summary>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">Nombre JSON actuel sous la forme <see cref="T:System.UInt64" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">La valeur ne peut pas être représentée sous la forme <see cref="T:System.UInt64" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="P:System.Text.Json.JsonElement.Item(System.Int32)">
      <summary vsli:raw="Gets the value at the specified index if the current value is an &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Array&quot; /&gt;.">Obtient la valeur à l’index spécifié si la valeur actuelle est un <see cref="F:System.Text.Json.JsonValueKind.Array" />.</summary>
      <param name="index" vsli:raw="The item index.">Index d'élément.</param>
      <returns vsli:raw="The value at the specified index.">Valeur à l’index spécifié.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Array&quot; /&gt;.">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Array" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is not in the range [0, &lt;see cref=&quot;M:System.Text.Json.JsonElement.GetArrayLength&quot; /&gt;()).">
        <paramref name="index" /> n’est pas dans la plage [0, <see cref="M:System.Text.Json.JsonElement.GetArrayLength" />()).</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="T:System.Text.Json.JsonElement.ObjectEnumerator">
      <summary vsli:raw="Represents an enumerator for the properties of a JSON object.">Représente un énumérateur pour les propriétés d’un objet JSON.</summary>
    </member>
    <member name="P:System.Text.Json.JsonElement.ObjectEnumerator.Current">
      <summary vsli:raw="Gets the element in the collection at the current position of the enumerator.">Obtient l’élément de la collection situé à la position actuelle de l’énumérateur.</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">Élément dans la collection à la position actuelle de l'énumérateur.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.Dispose">
      <summary vsli:raw="Releases the resources used by this &lt;xref data-throw-if-not-resolved=&quot;true&quot; uid=&quot;System.Text.Json.JsonElement.ObjectEnumerator&quot;&gt;&lt;/xref&gt; instance.">Libère les ressources utilisées par cette instance de <see cref="T:System.Text.Json.JsonElement.ObjectEnumerator" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates the properties of an object.">Retourne un énumérateur qui effectue une itération des propriétés d’un objet.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the object.">Énumérateur permettant d’effectuer une itération au sein de l’objet.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the collection.">Avance l’énumérateur à l’élément suivant de la collection.</summary>
      <returns vsli:raw="&lt;code data-dev-comment-type=&quot;langword&quot;&gt;true&lt;/code&gt; if the enumerator was successfully advanced to the next element; &lt;code data-dev-comment-type=&quot;langword&quot;&gt;false&lt;/code&gt; if the enumerator has passed the end of the collection.">
        <see langword="true" /> si l'énumérateur a pu avancer jusqu'à l'élément suivant ; <see langword="false" /> si l'énumérateur a dépassé la fin de la collection.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">Rétablit l'énumérateur à sa position initiale, qui précède le premier élément de la collection.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#Generic#IEnumerable{System#Text#Json#JsonProperty}#GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein d’une collection.</summary>
      <returns>Énumérateur pour des objets <see cref="T:System.Text.Json.JsonProperty" /> permettant d’effectuer une itération au sein de la collection.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Retourne un énumérateur qui itère au sein d’une collection.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Énumérateur permettant d'effectuer une itération au sein de la collection.</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element in the collection at the current position of the enumerator.">Obtient l’élément de la collection situé à la position actuelle de l’énumérateur.</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">Élément dans la collection à la position actuelle de l'énumérateur.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ToString">
      <summary vsli:raw="Gets a string representation for the current value appropriate to the value type.">Obtient une représentation sous forme de chaîne de la valeur actuelle adaptée au type valeur.</summary>
      <returns vsli:raw="A string representation for the current value appropriate to the value type.">Représentation sous forme de chaîne de la valeur actuelle adaptée au type valeur.</returns>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetByte(System.Byte@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">Tente de représenter le nombre JSON actuel sous la forme <see cref="T:System.Byte" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the byte equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quand la méthode est retournée, contient l’équivalent en octet du nombre JSON actuel si la conversion a réussi.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le nombre peut être représenté sous la forme <see cref="T:System.Byte" /> ; sinon <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetBytesFromBase64(System.Byte[]@)">
      <summary vsli:raw="Attempts to represent the current JSON string as a byte array, assuming that it is Base64 encoded.">Tente de représenter la chaîne JSON actuelle sous la forme d’un tableau d’octets, en supposant qu’elle est encodée en Base64.</summary>
      <param name="value" vsli:raw="If the method succeeds, contains the decoded binary representation of the Base64 text.">Si la méthode réussit, contient la représentation binaire décodée du texte en Base64.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire token value is encoded as valid Base64 text and can be successfully decoded to bytes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la totalité de la valeur de jeton est encodée en texte en Base64 valide et peut être décodée en octets ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDateTime(System.DateTime@)">
      <summary vsli:raw="Attempts to represent the current JSON string as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">Tente de représenter la chaîne JSON actuelle sous la forme <see cref="T:System.DateTime" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the date and time value equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.DateTime.MinValue&quot; /&gt; if the conversion failed.">Quand cette méthode est retournée, contient la valeur de date et heure équivalant à la chaîne JSON actuelle.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string can be represented as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la chaîne peut être représentée sous la forme <see cref="T:System.DateTime" /> ; sinon <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDateTimeOffset(System.DateTimeOffset@)">
      <summary vsli:raw="Attempts to represent the current JSON string as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">Tente de représenter la chaîne JSON actuelle sous la forme <see cref="T:System.DateTimeOffset" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the date and time value equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.DateTimeOffset.MinValue&quot; /&gt; if the conversion failed.">Quand cette méthode est retournée, contient la date et l’heure équivalant à la chaîne JSON actuelle.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string can be represented as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la chaîne peut être représentée sous la forme <see cref="T:System.DateTimeOffset" /> ; sinon <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDecimal(System.Decimal@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">Tente de représenter le nombre JSON actuel sous la forme <see cref="T:System.Decimal" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the decimal equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quand cette méthode est retournée, contient la valeur décimale équivalant au nombre JSON actuel.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le nombre peut être représenté sous la forme <see cref="T:System.Decimal" /> ; sinon <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDouble(System.Double@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">Tente de représenter le nombre JSON actuel sous la forme <see cref="T:System.Double" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains a double-precision floating point value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quand cette méthode est retournée, contient une valeur à virgule flottante double précision équivalant au nombre JSON actuel.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.Double&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le nombre peut être représenté sous la forme <see cref="T:System.Double" /> ; sinon <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetGuid(System.Guid@)">
      <summary vsli:raw="Attempts to represent the current JSON string as a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">Tente de représenter la chaîne JSON actuelle sous la forme <see cref="T:System.Guid" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the GUID equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.Guid.Empty&quot; /&gt; if the conversion failed.">Quand cette méthode est retournée, contient le GUID équivalant à la chaîne JSON actuelle.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string can be represented as a &lt;see cref=&quot;T:System.Guid&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la chaîne peut être représentée sous la forme <see cref="T:System.Guid" /> ; sinon <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt16(System.Int16@)">
      <summary vsli:raw="Attempts to represent the current JSON number as an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">Tente de représenter le nombre JSON actuel sous la forme <see cref="T:System.Int16" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the 16-bit integer value equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quand la méthode est retournée, contient l’équivalent en entier 16 bits du nombre JSON actuel si la conversion a réussi.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as an &lt;see cref=&quot;T:System.Int16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le nombre peut être représenté sous la forme <see cref="T:System.Int16" /> ; sinon <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt32(System.Int32@)">
      <summary vsli:raw="Attempts to represent the current JSON number as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">Tente de représenter le nombre JSON actuel sous la forme <see cref="T:System.Int32" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the 32-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quand cette méthode est retournée, contient la valeur entière 32 bits équivalant au nombre JSON actuel.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le nombre peut être représenté sous la forme <see cref="T:System.Int32" /> ; sinon <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt64(System.Int64@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">Tente de représenter le nombre JSON actuel sous la forme <see cref="T:System.Int64" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the 64-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quand cette méthode est retournée, contient la valeur entière 64 bits équivalant au nombre JSON actuel.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.Int64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le nombre peut être représenté sous la forme <see cref="T:System.Int64" /> ; sinon <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonElement@)">
      <summary vsli:raw="Looks for a property named &lt;paramref name=&quot;utf8PropertyName&quot; /&gt; in the current object, returning a value that indicates whether or not such a property exists. When the property exists, the method assigns its value to the &lt;paramref name=&quot;value&quot; /&gt; argument.">Recherche une propriété nommée <paramref name="utf8PropertyName" /> dans l’objet actuel et retourne une valeur indiquant si cette propriété existe ou non. Si la propriété existe, la méthode affecte sa valeur à l’argument <paramref name="value" />.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 (with no Byte-Order-Mark (BOM)) representation of the name of the property to return.">Représentation UTF-8 (sans marque d’ordre d’octet) du nom de la propriété à retourner.</param>
      <param name="value" vsli:raw="Receives the value of the located property.">Reçoit la valeur de la propriété trouvée.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la propriété a été trouvée ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.ReadOnlySpan{System.Char},System.Text.Json.JsonElement@)">
      <summary vsli:raw="Looks for a property named &lt;paramref name=&quot;propertyName&quot; /&gt; in the current object, returning a value that indicates whether or not such a property exists. When the property exists, the method assigns its value to the &lt;paramref name=&quot;value&quot; /&gt; argument.">Recherche une propriété nommée <paramref name="propertyName" /> dans l’objet actuel et retourne une valeur indiquant si cette propriété existe ou non. Si la propriété existe, la méthode affecte sa valeur à l’argument <paramref name="value" />.</summary>
      <param name="propertyName" vsli:raw="The name of the property to find.">Nom de la propriété à rechercher.</param>
      <param name="value" vsli:raw="When this method returns, contains the value of the specified property.">Quand cette méthode est retournée, contient la valeur de la propriété spécifiée.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la propriété a été trouvée ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.String,System.Text.Json.JsonElement@)">
      <summary vsli:raw="Looks for a property named &lt;paramref name=&quot;propertyName&quot; /&gt; in the current object, returning a value that indicates whether or not such a property exists. When the property exists, its value is assigned to the &lt;paramref name=&quot;value&quot; /&gt; argument.">Recherche une propriété nommée <paramref name="propertyName" /> dans l’objet actuel et retourne une valeur indiquant si cette propriété existe ou non. Si la propriété existe, sa valeur est affectée à l’argument <paramref name="value" />.</summary>
      <param name="propertyName" vsli:raw="The name of the property to find.">Nom de la propriété à rechercher.</param>
      <param name="value" vsli:raw="When this method returns, contains the value of the specified property.">Quand cette méthode est retournée, contient la valeur de la propriété spécifiée.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la propriété a été trouvée ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetSByte(System.SByte@)">
      <summary vsli:raw="Attempts to represent the current JSON number as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">Tente de représenter le nombre JSON actuel sous la forme <see cref="T:System.SByte" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the signed byte equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quand la méthode est retournée, contient l’équivalent en octet signé du nombre JSON actuel si la conversion a réussi.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le nombre peut être représenté sous la forme <see cref="T:System.SByte" /> ; sinon <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetSingle(System.Single@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">Tente de représenter le nombre JSON actuel sous la forme <see cref="T:System.Single" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the single-precision floating point value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quand cette méthode est retournée, contient une valeur à virgule flottante simple précision équivalant au nombre JSON actuel.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.Single&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le nombre peut être représenté sous la forme <see cref="T:System.Single" /> ; sinon <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt16(System.UInt16@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">Tente de représenter le nombre JSON actuel sous la forme <see cref="T:System.UInt16" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the unsigned 16-bit integer value equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quand la méthode est retournée, contient l’équivalent en entier 16 bits non signé du nombre JSON actuel si la conversion a réussi.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le nombre peut être représenté sous la forme <see cref="T:System.UInt16" /> ; sinon <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt32(System.UInt32@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">Tente de représenter le nombre JSON actuel sous la forme <see cref="T:System.UInt32" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains unsigned 32-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quand cette méthode est retournée, contient la valeur entière 32 bits non signée équivalant au nombre JSON actuel.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le nombre peut être représenté sous la forme <see cref="T:System.UInt32" /> ; sinon <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt64(System.UInt64@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">Tente de représenter le nombre JSON actuel sous la forme <see cref="T:System.UInt64" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains unsigned 64-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quand cette méthode est retournée, contient la valeur entière 64 bits non signée équivalant au nombre JSON actuel.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le nombre peut être représenté sous la forme <see cref="T:System.UInt64" /> ; sinon <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Compares the text represented by a UTF8-encoded byte span to the string value of this element.">Compare le texte représenté par une étendue d’octets encodée en UTF8 avec la valeur de chaîne de cet élément.</summary>
      <param name="utf8Text" vsli:raw="The UTF-8 encoded text to compare against.">Texte encodé en UTF-8 avec lequel effectuer la comparaison.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string value of this element has the same UTF-8 encoding as&#xA;              &lt;paramref name=&quot;utf8Text&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la valeur de chaîne de cet élément a le même encodage UTF-8 que <paramref name="utf8Text" /> ; sinon <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Compares a specified read-only character span to the string value of this element.">Compare une étendue de caractères en lecture seule spécifiée avec la valeur de chaîne de cet élément.</summary>
      <param name="text" vsli:raw="The text to compare against.">Texte avec lequel comparer.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string value of this element matches &lt;paramref name=&quot;text&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la valeur de chaîne de cet élément correspond à <paramref name="text" /> ; sinon <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.String)">
      <summary vsli:raw="Compares a specified string to the string value of this element.">Compare une chaîne spécifiée avec la valeur de chaîne de cet élément.</summary>
      <param name="text" vsli:raw="The text to compare against.">Texte avec lequel comparer.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string value of this element matches &lt;paramref name=&quot;text&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la valeur de chaîne de cet élément correspond à <paramref name="text" /> ; sinon <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
    </member>
    <member name="P:System.Text.Json.JsonElement.ValueKind">
      <summary vsli:raw="Gets the type of the current JSON value.">Obtient le type de la valeur JSON actuelle.</summary>
      <returns vsli:raw="The type of the current JSON value.">Type de la valeur JSON actuelle.</returns>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary vsli:raw="Writes the element to the specified writer as a JSON value.">Écrit l’élément dans l’enregistreur fourni sous la forme d’une valeur JSON.</summary>
      <param name="writer" vsli:raw="The writer to which to write the element.">Enregistreur dans lequel écrire le message.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;writer&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="writer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; of this value is &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Undefined&quot; /&gt;.">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur est <see cref="F:System.Text.Json.JsonValueKind.Undefined" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="T:System.Text.Json.JsonEncodedText">
      <summary vsli:raw="Provides methods to transform UTF-8 or UTF-16 encoded text into a form that is suitable for JSON.">Fournit des méthodes pour transformer du texte encodé en UTF-8 ou UTF-16 dans un format approprié pour JSON.</summary>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.ReadOnlySpan{System.Byte},System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary vsli:raw="Encodes a UTF-8 text value as a JSON string.">Encode une valeur texte UTF-8 sous la forme d’une chaîne JSON.</summary>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded text to convert to JSON encoded text.">Texte encodé en UTF-8 à convertir en texte encodé en JSON.</param>
      <param name="encoder" vsli:raw="The encoder to use when escaping the string, or &lt;see langword=&quot;null&quot; /&gt; to use the default encoder.">Encodeur à utiliser lors de l’échappement de la chaîne, ou <see langword="null" /> pour utiliser l’encodeur par défaut.</param>
      <returns vsli:raw="The encoded JSON text.">Texte JSON encodé.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;utf8Value&quot; /&gt; is too large.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;utf8Value&quot; /&gt; contains invalid UTF-8 bytes.">
        <paramref name="utf8Value" /> est trop grand.
ou
<paramref name="utf8Value" /> contient des octets UTF-8 non valides.</exception>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.ReadOnlySpan{System.Char},System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary vsli:raw="Encodes a specified text value as a JSON string.">Encode une valeur texte spécifiée en chaîne JSON.</summary>
      <param name="value" vsli:raw="The value to convert to JSON encoded text.">Valeur à convertir en texte encodé en JSON.</param>
      <param name="encoder" vsli:raw="The encoder to use when escaping the string, or &lt;see langword=&quot;null&quot; /&gt; to use the default encoder.">Encodeur à utiliser lors de l’échappement de la chaîne, ou <see langword="null" /> pour utiliser l’encodeur par défaut.</param>
      <returns vsli:raw="The encoded JSON text.">Texte JSON encodé.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is too large.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;value&quot; /&gt; contains invalid UTF-16 characters.">
        <paramref name="value" /> est trop grand.

ou -

<paramref name="value" /> contient des caractères UTF-16 non valides.</exception>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.String,System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary vsli:raw="Encodes the string text value as a JSON string.">Encode la valeur texte de la chaîne en chaîne JSON.</summary>
      <param name="value" vsli:raw="The value to convert to JSON encoded text.">Valeur à convertir en texte encodé en JSON.</param>
      <param name="encoder" vsli:raw="The encoder to use when escaping the string, or &lt;see langword=&quot;null&quot; /&gt; to use the default encoder.">Encodeur à utiliser lors de l’échappement de la chaîne, ou <see langword="null" /> pour utiliser l’encodeur par défaut.</param>
      <returns vsli:raw="The encoded JSON text.">Texte JSON encodé.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is too large.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;value&quot; /&gt; contains invalid UTF-16 characters.">
        <paramref name="value" /> est trop grand.

ou -

<paramref name="value" /> contient des caractères UTF-16 non valides.</exception>
    </member>
    <member name="P:System.Text.Json.JsonEncodedText.EncodedUtf8Bytes">
      <summary vsli:raw="Gets the UTF-8 encoded representation of the pre-encoded JSON text.">Obtient la représentation encodée en UTF-8 du texte JSON préencodé.</summary>
      <returns vsli:raw="The UTF-8 encoded representation of the pre-encoded JSON text.">Représentation encodée en UTF-8 du texte JSON pré-encodé.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Equals(System.Object)">
      <summary vsli:raw="Determines whether this instance and a specified object, which must also be a &lt;see cref=&quot;T:System.Text.Json.JsonEncodedText&quot; /&gt; instance, have the same value.">Détermine si cette instance et un objet spécifié, qui doit aussi être une instance <see cref="T:System.Text.Json.JsonEncodedText" />, ont la même valeur.</summary>
      <param name="obj" vsli:raw="The object to compare to this instance.">Objet à comparer à cette instance.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current instance and &lt;paramref name=&quot;obj&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'instance actuelle et <paramref name="obj" /> sont égaux ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Equals(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Determines whether this instance and another specified &lt;see cref=&quot;T:System.Text.Json.JsonEncodedText&quot; /&gt; instance have the same value.">Détermine si cette instance et une autre instance <see cref="T:System.Text.Json.JsonEncodedText" /> spécifiée ont la même valeur.</summary>
      <param name="other" vsli:raw="The object to compare to this instance.">Objet à comparer à cette instance.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance and &lt;paramref name=&quot;other&quot; /&gt; have the same value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si cette instance et <paramref name="other" /> ont la même valeur ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.GetHashCode">
      <summary vsli:raw="Returns the hash code for this &lt;see cref=&quot;T:System.Text.Json.JsonEncodedText&quot; /&gt;.">Retourne le code de hachage pour ce <see cref="T:System.Text.Json.JsonEncodedText" />.</summary>
      <returns vsli:raw="The hash code for this instance.">Code de hachage de cette instance.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.ToString">
      <summary vsli:raw="Converts the value of this instance to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">Convertit la valeur de cette instance en <see cref="T:System.String" />.</summary>
      <returns vsli:raw="The underlying UTF-16 encoded string.">Chaîne encodée en UTF-16 sous-jacente.</returns>
    </member>
    <member name="T:System.Text.Json.JsonException">
      <summary vsli:raw="Defines a custom exception object that is thrown when invalid JSON text is encountered, the defined maximum depth is passed, or the JSON text is not compatible with the type of a property on an object.">Définit un objet exception personnalisé qui est levé lorsque du texte JSON non valide a été trouvé, que la profondeur maximale définie est passée ou que le texte JSON n’est pas compatible avec le type d’une propriété sur un objet.</summary>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.JsonException&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.Text.Json.JsonException" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Creates a new exception object with serialized data.">Crée un objet exception avec des données sérialisées.</summary>
      <param name="info" vsli:raw="The serialized object data about the exception being thrown.">Données d'objet sérialisées sur l'exception levée.</param>
      <param name="context" vsli:raw="An object that contains contextual information about the source or destination.">Objet qui contient des informations contextuelles sur la source ou la destination.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.JsonException&quot; /&gt; class with a specified error message.">Initialise une nouvelle instance de la classe <see cref="T:System.Text.Json.JsonException" /> avec un message d'erreur spécifié.</summary>
      <param name="message" vsli:raw="The context-specific error message.">Message d’erreur spécifique au contexte.</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.JsonException&quot; /&gt; class, with a specified error message and a reference to the inner exception that is the cause of this exception.">Initialise une nouvelle instance de la classe <see cref="T:System.Text.Json.JsonException" /> avec un message d'erreur spécifié et une référence à l'exception interne ayant provoqué cette exception.</summary>
      <param name="message" vsli:raw="The context-specific error message.">Message d’erreur spécifique au contexte.</param>
      <param name="innerException" vsli:raw="The exception that caused the current exception.">Exception à l'origine de l'exception actuelle.</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
      <summary vsli:raw="Creates a new exception object to relay error information to the user.">Crée un nouvel objet d’exception pour relayer les informations de l’erreur à l’utilisateur.</summary>
      <param name="message" vsli:raw="The context-specific error message.">Message d’erreur spécifique au contexte.</param>
      <param name="path" vsli:raw="The path where the invalid JSON was encountered.">Chemin où le texte JSON non valide a été trouvé.</param>
      <param name="lineNumber" vsli:raw="The line number (starting at 0) at which the invalid JSON was encountered when deserializing.">Numéro de ligne (commençant à 0) auquel le texte JSON non valide a été trouvé lors de la désérialisation.</param>
      <param name="bytePositionInLine" vsli:raw="The byte count within the current line (starting at 0) where the invalid JSON was encountered.">Nombre d’octets dans la ligne actuelle (commençant à 0) où le texte JSON non valide a été trouvé.</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Exception)">
      <summary vsli:raw="Creates a new exception object to relay error information to the user that includes a specified inner exception.">Crée un objet exception pour relayer les informations de l’erreur à l’utilisateur, qui incluent une exception interne spécifiée.</summary>
      <param name="message" vsli:raw="The context-specific error message.">Message d’erreur spécifique au contexte.</param>
      <param name="path" vsli:raw="The path where the invalid JSON was encountered.">Chemin où le texte JSON non valide a été trouvé.</param>
      <param name="lineNumber" vsli:raw="The line number (starting at 0) at which the invalid JSON was encountered when deserializing.">Numéro de ligne (commençant à 0) auquel le texte JSON non valide a été trouvé lors de la désérialisation.</param>
      <param name="bytePositionInLine" vsli:raw="The byte count (starting at 0) within the current line where the invalid JSON was encountered.">Nombre d’octets (commençant à 0) dans la ligne actuelle où le texte JSON non valide a été trouvé.</param>
      <param name="innerException" vsli:raw="The exception that caused the current exception.">Exception à l'origine de l'exception actuelle.</param>
    </member>
    <member name="P:System.Text.Json.JsonException.BytePositionInLine">
      <summary vsli:raw="Gets the zero-based number of bytes read within the current line before the exception.">Obtient le nombre d’octets de base zéro lus dans la ligne actuelle avant l’exception.</summary>
      <returns vsli:raw="The zero-based number of bytes read within the current line before the exception.">Nombre d’octets de base zéro lus dans la ligne active avant l’exception.</returns>
    </member>
    <member name="M:System.Text.Json.JsonException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Sets the &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; with information about the exception.">Définit <see cref="T:System.Runtime.Serialization.SerializationInfo" /> avec des informations concernant l'exception.</summary>
      <param name="info" vsli:raw="The serialized object data about the exception being thrown.">Données d'objet sérialisées sur l'exception levée.</param>
      <param name="context" vsli:raw="An object that contains contextual information about the source or destination.">Objet qui contient des informations contextuelles sur la source ou la destination.</param>
    </member>
    <member name="P:System.Text.Json.JsonException.LineNumber">
      <summary vsli:raw="Gets the zero-based number of lines read before the exception.">Obtient le nombre de lignes de base zéro lues avant l’exception.</summary>
      <returns vsli:raw="The zero-based number of lines read before the exception.">Nombre de lignes de base zéro lues avant l’exception.</returns>
    </member>
    <member name="P:System.Text.Json.JsonException.Message">
      <summary vsli:raw="Gets a message that describes the current exception.">Obtient un message qui décrit l'exception actuelle.</summary>
      <returns vsli:raw="The error message that describes the current exception.">Message d'erreur qui décri l'exception actuelle.</returns>
    </member>
    <member name="P:System.Text.Json.JsonException.Path">
      <summary vsli:raw="Gets The path within the JSON where the exception was encountered.">Obtient le chemin dans le texte JSON où l’exception a été trouvée.</summary>
      <returns vsli:raw="The path within the JSON where the exception was encountered.">Chemin d’accès dans le JSON où l’exception a été rencontrée.</returns>
    </member>
    <member name="T:System.Text.Json.JsonNamingPolicy">
      <summary vsli:raw="Determines the naming policy used to convert a string-based name to another format, such as a camel-casing format.">Détermine la stratégie de nommage utilisée pour convertir un nom basé sur une chaîne en un autre format, tel qu’un format de casse mixte.</summary>
    </member>
    <member name="M:System.Text.Json.JsonNamingPolicy.#ctor">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.JsonNamingPolicy&quot; /&gt;.">Initialise une nouvelle instance de <see cref="T:System.Text.Json.JsonNamingPolicy" />.</summary>
    </member>
    <member name="P:System.Text.Json.JsonNamingPolicy.CamelCase">
      <summary vsli:raw="Gets the naming policy for camel-casing.">Obtient la stratégie de nommage pour la casse mixte.</summary>
      <returns vsli:raw="The naming policy for camel-casing.">Stratégie de nommage pour la casse mixte.</returns>
    </member>
    <member name="M:System.Text.Json.JsonNamingPolicy.ConvertName(System.String)">
      <summary vsli:raw="When overridden in a derived class, converts the specified name according to the policy.">En cas de substitution dans une classe dérivée, convertit le nom spécifié en fonction de la stratégie.</summary>
      <param name="name" vsli:raw="The name to convert.">Nom à convertir.</param>
      <returns vsli:raw="The converted name.">Nom converti.</returns>
    </member>
    <member name="T:System.Text.Json.JsonProperty">
      <summary vsli:raw="Represents a single property for a JSON object.">Représente une propriété unique pour un objet JSON.</summary>
    </member>
    <member name="P:System.Text.Json.JsonProperty.Name">
      <summary vsli:raw="Gets the name of this property.">Obtient le nom de cette propriété.</summary>
      <returns vsli:raw="The name of this property.">Nom de cette propriété.</returns>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Compares the specified UTF-8 encoded text to the name of this property.">Compare le texte encodé en UTF-8 spécifié en nom de cette propriété.</summary>
      <param name="utf8Text" vsli:raw="The UTF-8 encoded text to compare against.">Texte encodé en UTF-8 avec lequel effectuer la comparaison.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the name of this property has the same UTF-8 encoding as &lt;paramref name=&quot;utf8Text&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le nom de cette propriété a le même encodage UTF-8 que <paramref name="utf8Text" /> ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;T:System.Type&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;.">Le <see cref="T:System.Type" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Compares the specified text as a character span to the name of this property.">Compare le texte spécifié comme étendue de caractères avec le nom de cette propriété.</summary>
      <param name="text" vsli:raw="The text to compare against.">Texte avec lequel comparer.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the name of this property matches &lt;paramref name=&quot;text&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le nom de cette propriété correspond à <paramref name="text" /> ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;T:System.Type&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;.">Le <see cref="T:System.Type" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.String)">
      <summary vsli:raw="Compares the specified string to the name of this property.">Compare la chaîne spécifiée en nom de cette propriété.</summary>
      <param name="text" vsli:raw="The text to compare against.">Texte avec lequel comparer.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the name of this property matches &lt;paramref name=&quot;text&quot; /&gt;; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le nom de cette propriété correspond à <paramref name="text" /> ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;T:System.Type&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;.">Le <see cref="T:System.Type" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonProperty.ToString">
      <summary vsli:raw="Provides a string representation of the property for debugging purposes.">Fournit une représentation sous forme de chaîne de la propriété à des fins de débogage.</summary>
      <returns vsli:raw="A string containing the uninterpreted value of the property, beginning at the declaring open-quote and ending at the last character that is part of the value.">Chaîne contenant la valeur non interprétée de la propriété, qui commence à l’open-quote de déclaration et qui se termine au dernier caractère de la valeur.</returns>
    </member>
    <member name="P:System.Text.Json.JsonProperty.Value">
      <summary vsli:raw="Gets the value of this property.">Obtient la valeur de cette propriété.</summary>
      <returns vsli:raw="The value of this property.">Valeur de cette propriété.</returns>
    </member>
    <member name="M:System.Text.Json.JsonProperty.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary vsli:raw="Writes the property to the provided writer as a named JSON object property.">Écrit la propriété dans l’enregistreur fourni en tant que propriété nommée d’objet JSON.</summary>
      <param name="writer" vsli:raw="The writer to which to write the property.">Enregistreur dans lequel écrire la propriété.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;writer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="writer" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;see cref=&quot;P:System.Text.Json.JsonProperty.Name&quot; /&gt; is too large to be a JSON object property.">
        <see cref="P:System.Text.Json.JsonProperty.Name" /> est trop grande pour être une propriété d’objet JSON.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; of this JSON property's &lt;see cref=&quot;P:System.Text.Json.JsonProperty.Value&quot; /&gt; would result in invalid JSON.">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de <see cref="P:System.Text.Json.JsonProperty.Value" /> de cette propriété JSON aboutit à du code JSON non valide.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="T:System.Text.Json.JsonReaderOptions">
      <summary vsli:raw="Provides the ability for the user to define custom behavior when reading JSON.">Offre la possibilité à l’utilisateur de définir un comportement personnalisé lors de la lecture de JSON.</summary>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.AllowTrailingCommas">
      <summary vsli:raw="Gets or sets a value that defines whether an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored) within the JSON payload being read.">Obtient ou définit une valeur qui définit si une virgule supplémentaire à la fin d’une liste de valeurs JSON dans un objet ou un tableau est autorisée (et ignorée) dans la charge utile JSON en cours de lecture.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an extra comma is allowed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si une virgule supplémentaire est autorisée ; Sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.CommentHandling">
      <summary vsli:raw="Gets or sets a value that determines how the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; handles comments when reading through the JSON data.">Obtient ou définit une valeur qui détermine comment <see cref="T:System.Text.Json.Utf8JsonReader" /> gère les commentaires lors de la lecture des données JSON.</summary>
      <returns vsli:raw="One of the enumeration values that indicates how comments are handled.">L’une des valeurs d’énumération qui indique comment les commentaires sont gérés.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The property is being set to a value that is not a member of the &lt;see cref=&quot;T:System.Text.Json.JsonCommentHandling&quot; /&gt; enumeration.">La propriété est actuellement définie avec une valeur qui n’est pas membre de l’énumération <see cref="T:System.Text.Json.JsonCommentHandling" />.</exception>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.MaxDepth">
      <summary vsli:raw="Gets or sets the maximum depth allowed when reading JSON, with the default (that is, 0) indicating a maximum depth of 64.">Obtient ou définit la profondeur maximale autorisée lors de la lecture de code JSON, avec la valeur par défaut (c’est-à-dire 0) indiquant une profondeur maximale de 64.</summary>
      <returns vsli:raw="The maximum depth allowed when reading JSON.">Profondeur maximale autorisée lors de la lecture de JSON.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The maximum depth is being set to a negative value.">La profondeur maximale est actuellement définie sur une valeur négative.</exception>
    </member>
    <member name="T:System.Text.Json.JsonReaderState">
      <summary vsli:raw="Defines an opaque type that holds and saves all the relevant state information, which must be provided to the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; to continue reading after processing incomplete data.">Définit un type opaque qui détient et enregistre toutes les informations d’état pertinentes qui doivent être fournies au <see cref="T:System.Text.Json.Utf8JsonReader" /> pour continuer la lecture après avoir traité les données incomplètes.</summary>
    </member>
    <member name="M:System.Text.Json.JsonReaderState.#ctor(System.Text.Json.JsonReaderOptions)">
      <summary vsli:raw="Constructs a new &lt;see cref=&quot;T:System.Text.Json.JsonReaderState&quot; /&gt; instance.">Construit une nouvelle instance de <see cref="T:System.Text.Json.JsonReaderState" />.</summary>
      <param name="options" vsli:raw="Defines the customized behavior of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; that is different from the JSON RFC (for example how to handle comments, or the maximum depth allowed when reading). By default, the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; follows the JSON RFC strictly (comments within the JSON are invalid) and reads up to a maximum depth of 64.">Définit le comportement personnalisé du <see cref="T:System.Text.Json.Utf8JsonReader" /> qui diffère de la RFC JSON (par exemple, la façon de gérer les commentaires ou la profondeur maximale autorisée lors de la lecture). Par défaut, <see cref="T:System.Text.Json.Utf8JsonReader" /> suit strictement la RFC JSON (les commentaires dans le code JSON ne sont pas valides) et lit jusqu’à une profondeur maximale de 64.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The maximum depth is set to a non-positive value (&amp;lt; 0).">La profondeur maximale est définie sur une valeur non positive (&lt; 0).</exception>
    </member>
    <member name="P:System.Text.Json.JsonReaderState.Options">
      <summary vsli:raw="Gets the custom behavior to use when reading JSON data using the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; struct that may deviate from strict adherence to the JSON specification, which is the default behavior.">Obtient le comportement personnalisé à utiliser lors de la lecture des données JSON avec le struct <see cref="T:System.Text.Json.Utf8JsonReader" /> qui peut dévier du respect strict de la spécification JSON, qui est le comportement par défaut.</summary>
      <returns vsli:raw="The custom behavior to use when reading JSON data.">Comportement personnalisé à utiliser lors de la lecture de données JSON.</returns>
    </member>
    <member name="T:System.Text.Json.JsonSerializer">
      <summary vsli:raw="Provides functionality to serialize objects or value types to JSON and to deserialize JSON into objects or value types.">Fournit les fonctionnalités permettant de sérialiser des objets ou des types valeur en JSON et de désérialiser JSON en objets ou types valeur.</summary>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.ReadOnlySpan{System.Byte},System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Parses the UTF-8 encoded text representing a single JSON value into an instance of a specified type.">Analyse le texte encodé en UTF-8 représentant une valeur JSON unique dans une instance d’un type spécifié.</summary>
      <param name="utf8Json" vsli:raw="The JSON text to parse.">Texte JSON à analyser.</param>
      <param name="returnType" vsli:raw="The type of the object to convert to and return.">Type de l’objet à convertir et à retourner.</param>
      <param name="options" vsli:raw="Options to control the behavior during parsing.">Options permettant de contrôler le comportement lors de l’analyse.</param>
      <returns vsli:raw="A &lt;paramref name=&quot;returnType&quot; /&gt; representation of the JSON value.">Représentation <paramref name="returnType" /> de la valeur JSON.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;returnType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="returnType" /> est <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;returnType&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the span beyond a single JSON value.">Le JSON n’est pas valide.
-ou-
<typeparamref name="returnType" /> n’est pas compatible avec le JSON.
-ou-
Données restantes au-delà d’une seule valeur JSON.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.String,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Parses the text representing a single JSON value into an instance of a specified type.">Analyse le texte représentant une valeur JSON unique dans une instance d’un type spécifié.</summary>
      <param name="json" vsli:raw="The JSON text to parse.">Texte JSON à analyser.</param>
      <param name="returnType" vsli:raw="The type of the object to convert to and return.">Type de l’objet à convertir et à retourner.</param>
      <param name="options" vsli:raw="Options to control the behavior during parsing.">Options permettant de contrôler le comportement lors de l’analyse.</param>
      <returns vsli:raw="A &lt;paramref name=&quot;returnType&quot; /&gt; representation of the JSON value.">Représentation <paramref name="returnType" /> de la valeur JSON.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;json&quot; /&gt; or &lt;paramref name=&quot;returnType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="json" /> ou <paramref name="returnType" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the string beyond a single JSON value.">Le JSON n’est pas valide.
-ou-
<typeparamref name="TValue" /> n’est pas compatible avec le JSON.
-ou-
Données restantes dans la chaîne au-delà d’une seule valeur JSON.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Reads one JSON value (including objects or arrays) from the provided reader and converts it into an instance of  a specified type.">Lit une valeur JSON (notamment des objets ou des tableaux) à partir du lecteur fourni et la convertit en une instance d’un type spécifié.</summary>
      <param name="reader" vsli:raw="The reader to read the JSON from.">Lecteur à partir duquel lire le JSON.</param>
      <param name="returnType" vsli:raw="The type of the object to convert to and return.">Type de l’objet à convertir et à retourner.</param>
      <param name="options" vsli:raw="Options to control the serializer behavior during reading.">Options permettant de contrôler le comportement du sérialiseur lors de la lecture.</param>
      <returns vsli:raw="A &lt;paramref name=&quot;returnType&quot; /&gt; representation of the JSON value.">Représentation <paramref name="returnType" /> de la valeur JSON.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;returnType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="returnType" /> est <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;returnType&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;A value could not be read from the reader.">Le JSON n’est pas valide.
-ou-
<typeparamref name="returnType" /> n’est pas compatible avec le JSON.
-ou-
Une valeur n’a pas pu être lue par le lecteur.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;reader&quot; /&gt; is using unsupported options.">
        <paramref name="reader" /> utilise des options non prises en charge.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Parses the UTF-8 encoded text representing a single JSON value into an instance of the type specified by a generic type parameter.">Analyse le texte encodé en UTF-8 représentant une valeur JSON unique dans une instance du type spécifié par un paramètre de type générique.</summary>
      <param name="utf8Json" vsli:raw="The JSON text to parse.">Texte JSON à analyser.</param>
      <param name="options" vsli:raw="Options to control the behavior during parsing.">Options permettant de contrôler le comportement lors de l’analyse.</param>
      <typeparam name="TValue" vsli:raw="The target type of the UTF-8 encoded text.">Type de cible du texte encodé en UTF-8.</typeparam>
      <returns vsli:raw="A &lt;typeparamref name=&quot;TValue&quot; /&gt; representation of the JSON value.">Représentation <typeparamref name="TValue" /> de la valeur JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the span beyond a single JSON value.">Le JSON n’est pas valide.
-ou-
<typeparamref name="TValue" /> n’est pas compatible avec le JSON.
-ou-
Données restantes au-delà d’une seule valeur JSON.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.String,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Parses the text representing a single JSON value into an instance of the type specified by a generic type parameter.">Analyse le texte représentant une valeur JSON unique dans une instance du type spécifié par un paramètre de type générique.</summary>
      <param name="json" vsli:raw="The JSON text to parse.">Texte JSON à analyser.</param>
      <param name="options" vsli:raw="Options to control the behavior during parsing.">Options permettant de contrôler le comportement lors de l’analyse.</param>
      <typeparam name="TValue" vsli:raw="The target type of the JSON value.">Type de cible de la valeur JSON.</typeparam>
      <returns vsli:raw="A &lt;typeparamref name=&quot;TValue&quot; /&gt; representation of the JSON value.">Représentation <typeparamref name="TValue" /> de la valeur JSON.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;json&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="json" /> est <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the string beyond a single JSON value.">Le JSON n’est pas valide.
-ou-
<typeparamref name="TValue" /> n’est pas compatible avec le JSON.
-ou-
Données restantes dans la chaîne au-delà d’une seule valeur JSON.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Reads one JSON value (including objects or arrays) from the provided reader into an instance of the type specified by a generic type parameter.">Lit une valeur JSON (notamment des objets ou des tableaux) à partir du lecteur fourni dans une instance du type spécifié par un paramètre de type générique.</summary>
      <param name="reader" vsli:raw="The reader to read the JSON from.">Lecteur à partir duquel lire le JSON.</param>
      <param name="options" vsli:raw="Options to control serializer behavior during reading.">Options permettant de contrôler le comportement du sérialiseur lors de la lecture.</param>
      <typeparam name="TValue" vsli:raw="The target type of the JSON value.">Type de cible de la valeur JSON.</typeparam>
      <returns vsli:raw="A &lt;typeparamref name=&quot;TValue&quot; /&gt; representation of the JSON value.">Représentation <typeparamref name="TValue" /> de la valeur JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;A value could not be read from the reader.">Le JSON n’est pas valide.
-ou-
<typeparamref name="TValue" /> n’est pas compatible avec le JSON.
-ou-
Une valeur n’a pas pu être lue par le lecteur.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;reader&quot; /&gt; uses unsupported options.">
        <paramref name="reader" /> utilise des options non prises en charge.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.DeserializeAsync(System.IO.Stream,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously reads the UTF-8 encoded text representing a single JSON value into an instance of a specified type. The stream will be read to completion.">Lit de manière asynchrone le texte encodé en UTF-8 représentant une valeur JSON unique dans une instance d’un type spécifié. Le flux sera lu dans son intégralité.</summary>
      <param name="utf8Json" vsli:raw="The JSON data to parse.">Données JSON à analyser.</param>
      <param name="returnType" vsli:raw="The type of the object to convert to and return.">Type de l’objet à convertir et à retourner.</param>
      <param name="options" vsli:raw="Options to control the behavior during reading.">Options permettant de contrôler le comportement lors de la lecture.</param>
      <param name="cancellationToken" vsli:raw="A cancellation token that may be used to cancel the read operation.">Jeton d’annulation pouvant être utilisé pour annuler l’opération de lecture.</param>
      <returns vsli:raw="A &lt;paramref name=&quot;returnType&quot; /&gt; representation of the JSON value.">Représentation <paramref name="returnType" /> de la valeur JSON.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; or &lt;paramref name=&quot;returnType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="utf8Json" /> ou <paramref name="returnType" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the stream.">Le JSON n’est pas valide.
-ou-
<typeparamref name="TValue" /> n’est pas compatible avec le JSON.
-ou-
Il reste des données dans le flux.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.DeserializeAsync``1(System.IO.Stream,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously reads the UTF-8 encoded text representing a single JSON value into an instance of a type specified by a generic type parameter. The stream will be read to completion.">Lit de façon asynchrone le texte encodé en UTF-8 représentant une valeur JSON unique dans une instance d’un type spécifié par un paramètre de type générique. Le flux sera lu dans son intégralité.</summary>
      <param name="utf8Json" vsli:raw="The JSON data to parse.">Données JSON à analyser.</param>
      <param name="options" vsli:raw="Options to control the behavior during reading.">Options permettant de contrôler le comportement lors de la lecture.</param>
      <param name="cancellationToken" vsli:raw="A token that may be used to cancel the read operation.">Jeton pouvant être utilisé pour annuler l’opération de lecture.</param>
      <typeparam name="TValue" vsli:raw="The target type of the JSON value.">Type de cible de la valeur JSON.</typeparam>
      <returns vsli:raw="A &lt;typeparamref name=&quot;TValue&quot; /&gt; representation of the JSON value.">Représentation <typeparamref name="TValue" /> de la valeur JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the stream.">Le JSON n’est pas valide.
-ou-
<typeparamref name="TValue" /> n’est pas compatible avec le JSON.
-ou-
Il reste des données dans le flux.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Converts the value of a specified type into a JSON string.">Convertit la valeur d’un type spécifié en chaîne JSON.</summary>
      <param name="value" vsli:raw="The value to convert.">Valeur à convertir.</param>
      <param name="inputType" vsli:raw="The type of the &lt;paramref name=&quot;value&quot; /&gt; to convert.">Type de <paramref name="value" /> à convertir.</param>
      <param name="options" vsli:raw="Options to control the conversion behavior.">Options pour contrôler le comportement de conversion.</param>
      <returns vsli:raw="The JSON string representation of the value.">Représentation sous forme de chaîne JSON de la valeur.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize(System.Text.Json.Utf8JsonWriter,System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Writes the JSON representation of the specified type to the provided writer.">Écrit la représentation JSON du type spécifié dans l’enregistreur fourni.</summary>
      <param name="writer" vsli:raw="The JSON writer to write to.">Enregistreur JSON dans lequel écrire.</param>
      <param name="value" vsli:raw="The value to convert and write.">Valeur à convertir et à écrire.</param>
      <param name="inputType" vsli:raw="The type of the &lt;paramref name=&quot;value&quot; /&gt; to convert.">Type de <paramref name="value" /> à convertir.</param>
      <param name="options" vsli:raw="Options to control serialization behavior.">Options pour contrôler le comportement de sérialisation.</param>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize``1(``0,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Converts the value of a type specified by a generic type parameter into a JSON string.">Convertit la valeur d’un type spécifié par un paramètre de type générique en chaîne JSON.</summary>
      <param name="value" vsli:raw="The value to convert.">Valeur à convertir.</param>
      <param name="options" vsli:raw="Options to control serialization behavior.">Options pour contrôler le comportement de sérialisation.</param>
      <typeparam name="TValue" vsli:raw="The type of the value to serialize.">Type de la valeur à sérialiser.</typeparam>
      <returns vsli:raw="A JSON string representation of the value.">Représentation sous forme de chaîne JSON de la valeur.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize``1(System.Text.Json.Utf8JsonWriter,``0,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Writes the JSON representation of a type specified by a generic type parameter to the provided writer.">Écrit la représentation JSON d’un type spécifié par un paramètre de type générique dans l’enregistreur fourni.</summary>
      <param name="writer" vsli:raw="A JSON writer to write to.">Enregistreur JSON dans lequel écrire.</param>
      <param name="value" vsli:raw="The value to convert and write.">Valeur à convertir et à écrire.</param>
      <param name="options" vsli:raw="Options to control serialization behavior.">Options pour contrôler le comportement de sérialisation.</param>
      <typeparam name="TValue" vsli:raw="The type of the value to serialize.">Type de la valeur à sérialiser.</typeparam>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously converts the value of a specified type to UTF-8 encoded JSON text and writes it to the specified stream.">Convertit de façon asynchrone la valeur d’un type spécifié en texte JSON encodé en UTF-8 et l’écrit dans le flux spécifié.</summary>
      <param name="utf8Json" vsli:raw="The UTF-8 stream to write to.">Flux UTF-8 dans lequel écrire.</param>
      <param name="value" vsli:raw="The value to convert.">Valeur à convertir.</param>
      <param name="inputType" vsli:raw="The type of the &lt;paramref name=&quot;value&quot; /&gt; to convert.">Type de <paramref name="value" /> à convertir.</param>
      <param name="options" vsli:raw="Options to control serialization behavior.">Options pour contrôler le comportement de sérialisation.</param>
      <param name="cancellationToken" vsli:raw="A token that may be used to cancel the write operation.">Jeton pouvant être utilisé pour annuler l’opération d’écriture.</param>
      <returns vsli:raw="A task that represents the asynchronous write operation.">Tâche qui représente l’opération d’écriture asynchrone.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeAsync``1(System.IO.Stream,``0,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously converts a value of a type specified by a generic type parameter to UTF-8 encoded JSON text and writes it to a stream.">Convertit de façon asynchrone une valeur d’un type spécifié par un paramètre de type générique en texte JSON encodé en UTF-8 et l’écrit dans un flux.</summary>
      <param name="utf8Json" vsli:raw="The UTF-8 stream to write to.">Flux UTF-8 dans lequel écrire.</param>
      <param name="value" vsli:raw="The value to convert.">Valeur à convertir.</param>
      <param name="options" vsli:raw="Options to control serialization behavior.">Options pour contrôler le comportement de sérialisation.</param>
      <param name="cancellationToken" vsli:raw="A token that may be used to cancel the write operation.">Jeton pouvant être utilisé pour annuler l’opération d’écriture.</param>
      <typeparam name="TValue" vsli:raw="The type of the value to serialize.">Type de la valeur à sérialiser.</typeparam>
      <returns vsli:raw="A task that represents the asynchronous write operation.">Tâche qui représente l’opération d’écriture asynchrone.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Converts a value of the specified type into a JSON string, encoded as UTF-8 bytes.">Convertit une valeur du type spécifié en chaîne JSON, encodée en octets UTF-8.</summary>
      <param name="value" vsli:raw="The value to convert.">Valeur à convertir.</param>
      <param name="inputType" vsli:raw="The type of the &lt;paramref name=&quot;value&quot; /&gt; to convert.">Type de <paramref name="value" /> à convertir.</param>
      <param name="options" vsli:raw="Options to control the conversion behavior.">Options pour contrôler le comportement de conversion.</param>
      <returns vsli:raw="A JSON string representation of the value, encoded as UTF-8 bytes.">Représentation sous forme de chaîne JSON de la valeur, encodée en octets UTF-8.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes``1(``0,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Converts the value of a type specified by a generic type parameter into a JSON string, encoded as UTF-8 bytes.">Convertit la valeur d’un type spécifié par un paramètre de type générique en chaîne JSON encodée en octets UTF-8.</summary>
      <param name="value" vsli:raw="The value to convert.">Valeur à convertir.</param>
      <param name="options" vsli:raw="Options to control the conversion behavior.">Options pour contrôler le comportement de conversion.</param>
      <typeparam name="TValue" vsli:raw="The type of the value.">Type de la valeur.</typeparam>
      <returns vsli:raw="A JSON string representation of the value, encoded as UTF-8 bytes.">Représentation sous forme de chaîne JSON de la valeur, encodée en octets UTF-8.</returns>
    </member>
    <member name="T:System.Text.Json.JsonSerializerOptions">
      <summary vsli:raw="Provides options to be used with &lt;see cref=&quot;T:System.Text.Json.JsonSerializer&quot; /&gt;.">Fournit des options à utiliser avec <see cref="T:System.Text.Json.JsonSerializer" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonSerializerOptions.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.JsonSerializerOptions&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.Text.Json.JsonSerializerOptions" /> .</summary>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.AllowTrailingCommas">
      <summary vsli:raw="Get or sets a value that indicates whether an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored) within the JSON payload being deserialized.">Obtient ou définit une valeur qui indique si une virgule supplémentaire à la fin d’une liste de valeurs JSON dans un objet ou un tableau est autorisée (et ignorée) dans la charge utile JSON en cours de désérialisation.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored); &lt;see langword=&quot;false&quot; /&gt; otherwise.">
        <see langword="true" /> si une virgule supplémentaire à la fin d’une liste de valeurs JSON dans un objet ou un tableau est autorisée (et ignorée); Sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">Cette propriété a été définie après la sérialisation ou la désérialisation.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.Converters">
      <summary vsli:raw="Gets the list of user-defined converters that were registered.">Obtient la liste des convertisseurs définis par l’utilisateur qui ont été inscrits.</summary>
      <returns vsli:raw="The list of custom converters.">Liste des convertisseurs personnalisés.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.DefaultBufferSize">
      <summary vsli:raw="Gets or sets the default buffer size, in bytes, to use when creating temporary buffers.">Obtient ou définit la taille de la mémoire tampon par défaut, en octets, à utiliser lors de la création de mémoires tampons temporaires.</summary>
      <returns vsli:raw="The default buffer size in bytes.">Taille de la mémoire tampon par défaut, en octets.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The buffer size is less than 1.">La taille de la mémoire tampon est inférieure à 1.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">Cette propriété a été définie après la sérialisation ou la désérialisation.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.DictionaryKeyPolicy">
      <summary vsli:raw="Gets or sets the policy used to convert a &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; key's name to another format, such as camel-casing.">Obtient ou définit la stratégie utilisée pour convertir le nom de clé de <see cref="T:System.Collections.IDictionary" /> dans un autre format, tel que la casse mixte.</summary>
      <returns vsli:raw="The policy used to convert a &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; key's name to another format.">Stratégie utilisée pour convertir le nom d’une clé de <see cref="T:System.Collections.IDictionary" /> dans un autre format.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.Encoder">
      <summary vsli:raw="Gets or sets the encoder to use when escaping strings, or &lt;see langword=&quot;null&quot; /&gt; to use the default encoder.">Obtient ou définit l’encodeur à utiliser lors de l’échappement de chaînes, ou <see langword="null" /> pour utiliser l’encodeur par défaut.</summary>
      <returns vsli:raw="The JavaScript character encoding.">Encodage de caractères JavaScript.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializerOptions.GetConverter(System.Type)">
      <summary vsli:raw="Returns the converter for the specified type.">Retourne le convertisseur pour le type spécifié.</summary>
      <param name="typeToConvert" vsli:raw="The type to return a converter for.">Type pour lequel retourner un convertisseur.</param>
      <returns vsli:raw="The first converter that supports the given type.">Premier convertisseur qui prend en charge le type donné, ou <see langword="null" /> s’il n’existe aucun convertisseur.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues">
      <summary vsli:raw="Gets or sets a value that indicates whether &lt;see langword=&quot;null&quot; /&gt; values are ignored during serialization and deserialization. The default value is &lt;see langword=&quot;false&quot; /&gt;.">Obtient ou définit une valeur qui détermine si des valeurs <see langword="null" /> sont ignorées pendant la sérialisation et la désérialisation. La valeur par défaut est <see langword="false" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if null values are ignored during serialization and deserialization; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> d’ignorer les valeurs null lors de la sérialisation et de la désérialisation ; Sinon, consultez langword = "false"/&gt;.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.&#xA;&#xA;-or-&#xA;&#xA;&lt;see cref=&quot;P:System.Text.Json.JsonSerializerOptions.DefaultIgnoreCondition&quot; /&gt; has been set to a non-default value. These properties cannot be used together.">Cette propriété a été définie après la sérialisation ou la désérialisation.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreReadOnlyProperties">
      <summary vsli:raw="Gets a value that indicates whether read-only properties are ignored during serialization. The default value is &lt;see langword=&quot;false&quot; /&gt;.">Obtient une valeur qui détermine si des propriétés en lecture seule sont ignorées pendant la sérialisation. La valeur par défaut est <see langword="false" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if read-only properties are ignored during serialization; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> d’ignorer les propriétés en lecture seule lors de la sérialisation ; Sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">Cette propriété a été définie après la sérialisation ou la désérialisation.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.MaxDepth">
      <summary vsli:raw="Gets or sets the maximum depth allowed when serializing or deserializing JSON, with the default value of 0 indicating a maximum depth of 64.">Obtient ou définit la profondeur maximale autorisée lors de la sérialisation ou de la désérialisation de code JSON, avec la valeur par défaut de 0 indiquant une profondeur maximale de 64.</summary>
      <returns vsli:raw="The maximum depth allowed when serializing or deserializing JSON.">Profondeur maximale autorisée lors de la sérialisation ou de la désérialisation de JSON.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">Cette propriété a été définie après la sérialisation ou la désérialisation.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The max depth is set to a negative value.">La profondeur maximale est définie avec une valeur négative.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.PropertyNameCaseInsensitive">
      <summary vsli:raw="Gets or sets a value that indicates whether a property's name uses a case-insensitive comparison during deserialization. The default value is &lt;see langword=&quot;false&quot; /&gt;.">Obtient ou définit une valeur qui détermine si le nom d’une propriété utilise une comparaison qui ne respecte pas la casse pendant la désérialisation. La valeur par défaut est <see langword="false" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if property names are compared case-insensitively; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> comparer des noms de propriétés à l’aide d’une comparaison qui ne respecte pas la casse ; Sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.PropertyNamingPolicy">
      <summary vsli:raw="Gets or sets a value that specifies the policy used to convert a property's name on an object to another format, such as camel-casing, or &lt;see langword=&quot;null&quot; /&gt; to leave property names unchanged.">Obtient ou définit une valeur qui spécifie la stratégie utilisée pour convertir le nom d’une propriété d’un objet dans un autre format, par exemple, la casse mixte. Sinon, <see langword="null" /> pour laisser inchangés les noms de propriété.</summary>
      <returns vsli:raw="A property naming policy, or &lt;see langword=&quot;null&quot; /&gt; to leave property names unchanged.">Une stratégie d’attribution de noms de propriété ou <see langword="null" /> pour ne pas modifier les noms de propriété.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.ReadCommentHandling">
      <summary vsli:raw="Gets or sets a value that defines how comments are handled during deserialization.">Obtient ou définit une valeur qui définit la façon dont les commentaires sont gérés pendant la désérialisation.</summary>
      <returns vsli:raw="A value that indicates whether comments are allowed, disallowed, or skipped.">Valeur qui indique si les commentaires sont autorisés, interdits ou ignorés.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">Cette propriété a été définie après la sérialisation ou la désérialisation.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The comment handling enum is set to a value that is not supported (or not within the &lt;see cref=&quot;T:System.Text.Json.JsonCommentHandling&quot; /&gt; enum range).">L’énum de gestion des commentaires est définie avec une valeur qui n’est pas prise en charge (ou qui n’est pas dans la plage d’énums <see cref="T:System.Text.Json.JsonCommentHandling" />).</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.WriteIndented">
      <summary vsli:raw="Gets or sets a value that indicates whether JSON should use pretty printing. By default, JSON is serialized without any extra white space.">Obtient ou définit une valeur qui définit si JSON doit utiliser l’impression en mode Pretty. Par défaut, JSON est sérialisé sans espace blanc supplémentaire.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if JSON is pretty printed on serialization; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si JSON doit être assez imprimé sur la sérialisation ; Sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">Cette propriété a été définie après la sérialisation ou la désérialisation.</exception>
    </member>
    <member name="T:System.Text.Json.JsonTokenType">
      <summary vsli:raw="Defines the various JSON tokens that make up a JSON text.">Définit les différents jetons JSON qui composent un texte JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Comment">
      <summary vsli:raw="The token type is a comment string.">Le type de jeton est une chaîne de commentaire.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.EndArray">
      <summary vsli:raw="The token type is the end of a JSON array.">Le type de jeton est la fin d’un tableau JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.EndObject">
      <summary vsli:raw="The token type is the end of a JSON object.">Le type de jeton est la fin d’un objet JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.False">
      <summary vsli:raw="The token type is the JSON literal false.">Le type de jeton est le littéral JSON false.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.None">
      <summary vsli:raw="There is no value (as distinct from &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Null&quot; /&gt;). This is the default token type if no data has been read by the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt;.">Il n’existe aucune valeur (contrairement à <see cref="F:System.Text.Json.JsonTokenType.Null" />).</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Null">
      <summary vsli:raw="The token type is the JSON literal null.">Le type de jeton est le littéral JSON null.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Number">
      <summary vsli:raw="The token type is a JSON number.">Le type de jeton est un nombre JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.PropertyName">
      <summary vsli:raw="The token type is a JSON property name.">Le type de jeton est un nom de propriété JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.StartArray">
      <summary vsli:raw="The token type is the start of a JSON array.">Le type de jeton est le début d’un tableau JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.StartObject">
      <summary vsli:raw="The token type is the start of a JSON object.">Le type de jeton est le début d’un objet JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.String">
      <summary vsli:raw="The token type is a JSON string.">Le type de jeton est une chaîne JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.True">
      <summary vsli:raw="The token type is the JSON literal true.">Le type de jeton est le littéral JSON true.</summary>
    </member>
    <member name="T:System.Text.Json.JsonValueKind">
      <summary vsli:raw="Specifies the data type of a JSON value.">Spécifie le type de données d’une valeur JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Array">
      <summary vsli:raw="A JSON array.">Tableau JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.False">
      <summary vsli:raw="The JSON value false.">La valeur JSON false.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Null">
      <summary vsli:raw="The JSON value null.">La valeur JSON null.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Number">
      <summary vsli:raw="A JSON number.">Nombre JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Object">
      <summary vsli:raw="A JSON object.">Objet JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.String">
      <summary vsli:raw="A JSON string.">Chaîne JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.True">
      <summary vsli:raw="The JSON value true.">La valeur JSON true.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Undefined">
      <summary vsli:raw="There is no value (as distinct from &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Null&quot; /&gt;).">Il n’existe aucune valeur (contrairement à <see cref="F:System.Text.Json.JsonValueKind.Null" />).</summary>
    </member>
    <member name="T:System.Text.Json.JsonWriterOptions">
      <summary vsli:raw="Allows the user to define custom behavior when writing JSON using the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt;.">Autorise l’utilisateur à définir un comportement personnalisé lors de l’écriture de code JSON en utilisant le <see cref="T:System.Text.Json.Utf8JsonWriter" />.</summary>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.Encoder">
      <summary vsli:raw="Gets or sets the encoder to use when escaping strings, or &lt;see langword=&quot;null&quot; /&gt; to use the default encoder.">Obtient ou définit l’encodeur à utiliser lors de l’échappement de chaînes, ou <see langword="null" /> pour utiliser l’encodeur par défaut.</summary>
      <returns vsli:raw="The JavaScript character encoder used to override the escaping behavior.">Encodeur de caractère JavaScript utilisé pour substituer le comportement d’échappement.</returns>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.Indented">
      <summary vsli:raw="Gets or sets a value that indicates whether the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; should format the JSON output, which includes indenting nested JSON tokens, adding new lines, and adding white space between property names and values.">Obtient ou définit une valeur qui indique si le <see cref="T:System.Text.Json.Utf8JsonWriter" /> doit mettre en forme la sortie JSON, qui inclut la mise en retrait des jetons JSON imbriqués, l’ajout de nouvelles lignes et l’ajout d’espaces blancs entre les noms et les valeur de propriété.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the JSON output is formatted; &lt;see langword=&quot;false&quot; /&gt; if the JSON is written without any extra white space. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour mettre en forme la sortie JSON ; <see langword="false" /> à écrire sans espace blanc supplémentaire. La valeur par défaut est <see langword="false" />.</returns>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.SkipValidation">
      <summary vsli:raw="Gets or sets a value that indicates whether the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; should skip structural validation and allow the user to write invalid JSON.">Obtient ou définit une valeur qui indique si le <see cref="T:System.Text.Json.Utf8JsonWriter" /> doit ignorer la validation structurelle et autoriser l’utilisateur à écrire du code JSON non valide.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if structural validation is skipped and invalid JSON is allowed; &lt;see langword=&quot;false&quot; /&gt; if an &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown on any attempt to write invalid JSON.">
        <see langword="true" /> d’ignorer la validation structurelle et d’autoriser le JSON non valide ; <see langword="false" /> pour lever une <see cref="T:System.InvalidOperationException" /> lors d’une tentative d’écriture de JSON non valide.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonAttribute">
      <summary vsli:raw="Provides the base class for serialization attributes.">Fournit la classe de base pour les attributs de sérialisation.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonAttribute.#ctor">
      <summary vsli:raw="Creates a new instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonAttribute&quot; /&gt;.">Crée une nouvelle instance de <see cref="T:System.Text.Json.Serialization.JsonAttribute" />.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverter">
      <summary vsli:raw="Converts an object or value to or from JSON.">Convertit un objet ou une valeur vers ou depuis JSON.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter.CanConvert(System.Type)">
      <summary vsli:raw="When overridden in a derived class, determines whether the converter instance can convert the specified object type.">En cas de remplacement dans une classe dérivée, détermine si l’instance de convertisseur peut convertir le type d’objet spécifié.</summary>
      <param name="typeToConvert" vsli:raw="The type of the object to check whether it can be converted by this converter instance.">Type de l’objet pour vérifier s’il peut être converti par cette instance de convertisseur.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the instance can convert the specified object type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’instance peut convertir le type d’objet spécifié ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverter`1">
      <summary vsli:raw="Converts an object or value to or from JSON.">Convertit un objet ou une valeur vers ou depuis JSON.</summary>
      <typeparam name="T" vsli:raw="The type of object or value handled by the converter.">Type de l’objet ou de la valeur géré par le convertisseur.</typeparam>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.#ctor">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverter`1&quot; /&gt; instance.">Initialise une nouvelle instance de <see cref="T:System.Text.Json.Serialization.JsonConverter`1" />.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.CanConvert(System.Type)">
      <summary vsli:raw="Determines whether the specified type can be converted.">Détermine si le type spécifié peut être converti.</summary>
      <param name="typeToConvert" vsli:raw="The type to compare against.">Type avec lequel effectuer la comparaison.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type can be converted; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le type peut être converti ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Reads and converts the JSON to type &lt;typeparamref name=&quot;T&quot; /&gt;.">Lit et convertit le code JSON en type <typeparamref name="T" />.</summary>
      <param name="reader" vsli:raw="The reader.">Lecteur.</param>
      <param name="typeToConvert" vsli:raw="The type to convert.">Type à convertir.</param>
      <param name="options" vsli:raw="An object that specifies serialization options to use.">Objet qui spécifie les options de sérialisation à utiliser.</param>
      <returns vsli:raw="The converted value.">Valeur convertie.</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Writes a specified value as JSON.">Écrit une valeur spécifiée au format JSON.</summary>
      <param name="writer" vsli:raw="The writer to write to.">Enregistreur dans lequel écrire.</param>
      <param name="value" vsli:raw="The value to convert to JSON.">Valeur à convertir en JSON.</param>
      <param name="options" vsli:raw="An object that specifies serialization options to use.">Objet qui spécifie les options de sérialisation à utiliser.</param>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverterAttribute">
      <summary vsli:raw="When placed on a property or type, specifies the converter type to use.">En cas de placement sur une propriété ou un type, spécifie le type de convertisseur à utiliser.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverterAttribute&quot; /&gt;.">Initialise une nouvelle instance de <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" />.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverterAttribute&quot; /&gt; with the specified converter type.">Initialise une nouvelle instance de <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" /> avec le type de convertisseur spécifié.</summary>
      <param name="converterType" vsli:raw="The type of the converter.">Type du convertisseur.</param>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonConverterAttribute.ConverterType">
      <summary vsli:raw="Gets the type of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverterAttribute&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if it was created without a type.">Obtient le type de <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" />, ou <see langword="null" /> s’il a été créé sans type.</summary>
      <returns vsli:raw="The type of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverterAttribute&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if it was created without a type.">Type de l' <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" />ou <see langword="null" /> s’il a été créé sans type.</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.CreateConverter(System.Type)">
      <summary vsli:raw="When overridden in a derived class and &lt;see cref=&quot;P:System.Text.Json.Serialization.JsonConverterAttribute.ConverterType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, allows the derived class to create a &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverter&quot; /&gt; in order to pass additional state.">En cas de substitution dans une classe dérivée et si <see cref="P:System.Text.Json.Serialization.JsonConverterAttribute.ConverterType" /> est <see langword="null" />, permet à la classe dérivée de créer un <see cref="T:System.Text.Json.Serialization.JsonConverter" /> afin de passer un état supplémentaire.</summary>
      <param name="typeToConvert" vsli:raw="The type of the converter.">Type du convertisseur.</param>
      <returns vsli:raw="The custom converter.">Convertisseur personnalisé.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverterFactory">
      <summary vsli:raw="Supports converting several types by using a factory pattern.">Prend en charge la conversion de plusieurs types en utilisant un modèle de fabrique.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterFactory.#ctor">
      <summary vsli:raw="When overridden in a derived class, initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverterFactory&quot; /&gt; class.">En cas de substitution dans une classe dérivée, initialise une nouvelle instance de la classe <see cref="T:System.Text.Json.Serialization.JsonConverterFactory" />.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterFactory.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Creates a converter for a specified type.">Crée un convertisseur pour un type spécifié.</summary>
      <param name="typeToConvert" vsli:raw="The type handled by the converter.">Type géré par le convertisseur.</param>
      <param name="options" vsli:raw="The serialization options to use.">Options de sérialisation à utiliser.</param>
      <returns vsli:raw="A converter for which &lt;typeparamref name=&quot;T&quot; /&gt; is compatible with &lt;paramref name=&quot;typeToConvert&quot; /&gt;.">Convertisseur pour lequel <typeparamref name="T" /> est compatible avec <paramref name="typeToConvert" />.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonExtensionDataAttribute">
      <summary vsli:raw="When placed on a property of type &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;, any properties that do not have a matching member are added to that dictionary during deserialization and written during serialization.">Lorsqu’elles sont placées sur une propriété de type <see cref="T:System.Collections.Generic.IDictionary`2" />, toutes les propriétés qui n’ont pas de membre correspondant sont ajoutées à ce dictionnaire pendant la désérialisation et écrites pendant la sérialisation.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonExtensionDataAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonExtensionDataAttribute&quot; /&gt; class.">Instancie une nouvelle instance de la classe <see cref="T:System.Text.Json.Serialization.JsonExtensionDataAttribute" />.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonIgnoreAttribute">
      <summary vsli:raw="Prevents a property from being serialized or deserialized.">Empêche une propriété d’être sérialisée ou désérialisée.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonIgnoreAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonIgnoreAttribute&quot; /&gt;.">Initialise une nouvelle instance de <see cref="T:System.Text.Json.Serialization.JsonIgnoreAttribute" />.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonPropertyNameAttribute">
      <summary vsli:raw="Specifies the property name that is present in the JSON when serializing and deserializing. This overrides any naming policy specified by &lt;see cref=&quot;T:System.Text.Json.JsonNamingPolicy&quot; /&gt;.">Spécifie le nom de la propriété qui est présent dans le JSON lors de la sérialisation et de la désérialisation. Cela remplace toute stratégie de nommage spécifiée par <see cref="T:System.Text.Json.JsonNamingPolicy" />.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonPropertyNameAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonPropertyNameAttribute&quot; /&gt; with the specified property name.">Initialise une nouvelle instance de <see cref="T:System.Text.Json.Serialization.JsonPropertyNameAttribute" /> avec le nom de la propriété spécifié.</summary>
      <param name="name" vsli:raw="The name of the property.">Nom de la propriété.</param>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonPropertyNameAttribute.Name">
      <summary vsli:raw="Gets the name of the property.">Obtient le nom de la propriété.</summary>
      <returns vsli:raw="The name of the property.">Nom de la propriété.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonStringEnumConverter">
      <summary vsli:raw="Converts enumeration values to and from strings.">Convertit les valeurs d’énumération en chaînes et inversement.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.#ctor">
      <summary vsli:raw="Initializes an instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonStringEnumConverter&quot; /&gt; class with the default naming policy that allows integer values.">Initialise une instance de la classe <see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter" /> avec la stratégie de nommage par défaut qui autorise les entiers.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.#ctor(System.Text.Json.JsonNamingPolicy,System.Boolean)">
      <summary vsli:raw="Initializes an instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonStringEnumConverter&quot; /&gt; class with a specified naming policy and a value that indicates whether undefined enumeration values are allowed.">Initialise une instance de la classe <see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter" /> avec une stratégie de nommage spécifiée et une valeur qui indique si les valeurs d’énumération non définies sont autorisées.</summary>
      <param name="namingPolicy" vsli:raw="The optional naming policy for writing enum values.">Stratégie de nommage facultative pour l’écriture de valeurs enum.</param>
      <param name="allowIntegerValues" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to allow undefined enum values; otherwise, &lt;see langword=&quot;false&quot; /&gt;. When &lt;see langword=&quot;true&quot; /&gt;, if an enum value isn't defined, it will output as a number rather than a string.">
        <see langword="true" /> pour autoriser les valeurs enum non définies ; sinon, <see langword="false" />. Quand la valeur est <see langword="true" />, si une valeur enum n’est pas définie, elle est générée sous forme de nombre plutôt que sous forme de chaîne.</param>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.CanConvert(System.Type)">
      <summary vsli:raw="Determines whether the specified type can be converted to an enum.">Détermine si le type spécifié peut être converti en enum.</summary>
      <param name="typeToConvert" vsli:raw="The type to be checked.">Type à vérifier.</param>
      <returns vsli:raw="&lt;code data-dev-comment-type=&quot;langword&quot;&gt;true&lt;/code&gt; if the type can be converted; otherwise, &lt;code data-dev-comment-type=&quot;langword&quot;&gt;false&lt;/code&gt;.">
        <see langword="true" /> si le type peut être converti ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Creates a converter for the specified type.">Crée un convertisseur pour le type spécifié.</summary>
      <param name="typeToConvert" vsli:raw="The type handled by the converter.">Type géré par le convertisseur.</param>
      <param name="options" vsli:raw="The serialization options to use.">Options de sérialisation à utiliser.</param>
      <returns vsli:raw="A converter for which &lt;code data-dev-comment-type=&quot;typeparamref&quot;&gt;T&lt;/code&gt; is compatible with &lt;code data-dev-comment-type=&quot;paramref&quot;&gt;typeToConvert&lt;/code&gt;.">Convertisseur pour lequel <typeparamref name="T" /> est compatible avec <paramref name="typeToConvert" />.</returns>
    </member>
    <member name="T:System.Text.Json.Utf8JsonReader">
      <summary vsli:raw="Provides a high-performance API for forward-only, read-only access to UTF-8 encoded JSON text.">Fournit une API hautes performances pour un accès en transfert seul et en lecture seule à du texte JSON encodé en UTF-8.</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; structure that processes a read-only sequence of UTF-8 encoded text and indicates whether the input contains all the text to process.">Initialise une nouvelle instance de la structure <see cref="T:System.Text.Json.Utf8JsonReader" /> qui traite une séquence en lecture seule de texte encodé en UTF-8 et indique si l’entrée contient tout le texte à traiter.</summary>
      <param name="jsonData" vsli:raw="The UTF-8 encoded JSON text to process.">Texte JSON encodé en UTF-8 à traiter.</param>
      <param name="isFinalBlock" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the input sequence contains the entire data to process; &lt;see langword=&quot;false&quot; /&gt; to indicate that the input span contains partial data with more data to follow.">
        <see langword="true" /> pour indiquer que la séquence d’entrée contient l’ensemble des données à traiter ; <see langword="false" /> pour indiquer que l’étendue d’entrée contient des données partielles avec davantage de données à suivre.</param>
      <param name="state" vsli:raw="The reader state. If this is the first call to the constructor, pass the default state; otherwise, pass the value of the &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.CurrentState&quot; /&gt; property from the previous instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt;.">Objet qui contient l’état du lecteur. S’il s’agit du premier appel au constructeur, passe l’état par défaut ; sinon, transmet la valeur de la propriété <see cref="P:System.Text.Json.Utf8JsonReader.CurrentState" /> à partir de l’instance précédente du <see cref="T:System.Text.Json.Utf8JsonReader" />.</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonReaderOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; structure that processes a read-only sequence of UTF-8 encoded text using the specified options.">Initialise une nouvelle instance de la structure <see cref="T:System.Text.Json.Utf8JsonReader" /> qui traite une séquence en lecture seule de texte encodé en UTF-8 à l’aide des options spécifiées.</summary>
      <param name="jsonData" vsli:raw="The UTF-8 encoded JSON text to process.">Texte JSON encodé en UTF-8 à traiter.</param>
      <param name="options" vsli:raw="Options that define customized behavior of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; that differs from the JSON RFC (for example, how to handle comments or maximum depth allowed when reading). By default, the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; follows the JSON RFC strictly; comments within the JSON are invalid, and the maximum depth is 64.">Définit le comportement personnalisé du <see cref="T:System.Text.Json.Utf8JsonReader" /> qui diffère de la RFC JSON (par exemple, la façon de gérer les commentaires ou la profondeur maximale autorisée lors de la lecture). Par défaut, <see cref="T:System.Text.Json.Utf8JsonReader" /> suit strictement la RFC JSON ; les commentaires dans le code JSON ne sont pas valides, et la profondeur maximale est de 64.</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; structure that processes a read-only span of UTF-8 encoded text and indicates whether the input contains all the text to process.">Initialise une nouvelle instance de la structure <see cref="T:System.Text.Json.Utf8JsonReader" /> qui traite une étendue en lecture seule de texte encodé en UTF-8 et indique si l’entrée contient tout le texte à traiter.</summary>
      <param name="jsonData" vsli:raw="The UTF-8 encoded JSON text to process.">Texte JSON encodé en UTF-8 à traiter.</param>
      <param name="isFinalBlock" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the input sequence contains the entire data to process; &lt;see langword=&quot;false&quot; /&gt; to indicate that the input span contains partial data with more data to follow.">
        <see langword="true" /> pour indiquer que la séquence d’entrée contient l’ensemble des données à traiter ; <see langword="false" /> pour indiquer que l’étendue d’entrée contient des données partielles avec davantage de données à suivre.</param>
      <param name="state" vsli:raw="The reader state. If this is the first call to the constructor, pass the default state; otherwise, pass the value of the &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.CurrentState&quot; /&gt; property from the previous instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt;.">Objet qui contient l’état du lecteur. S’il s’agit du premier appel au constructeur, passe l’état par défaut ; sinon, transmet la valeur de la propriété <see cref="P:System.Text.Json.Utf8JsonReader.CurrentState" /> à partir de l’instance précédente du <see cref="T:System.Text.Json.Utf8JsonReader" />.</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonReaderOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; structure that processes a read-only span of UTF-8 encoded text using the specified options.">Initialise une nouvelle instance de la structure <see cref="T:System.Text.Json.Utf8JsonReader" /> qui traite une étendue en lecture seule de texte encodé en UTF-8 à l’aide des options spécifiées.</summary>
      <param name="jsonData" vsli:raw="The UTF-8 encoded JSON text to process.">Texte JSON encodé en UTF-8 à traiter.</param>
      <param name="options" vsli:raw="Options that define customized behavior of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; that differs from the JSON RFC (for example, how to handle comments or maximum depth allowed when reading). By default, the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; follows the JSON RFC strictly; comments within the JSON are invalid, and the maximum depth is 64.">Définit le comportement personnalisé du <see cref="T:System.Text.Json.Utf8JsonReader" /> qui diffère de la RFC JSON (par exemple, la façon de gérer les commentaires ou la profondeur maximale autorisée lors de la lecture). Par défaut, <see cref="T:System.Text.Json.Utf8JsonReader" /> suit strictement la RFC JSON ; les commentaires dans le code JSON ne sont pas valides, et la profondeur maximale est de 64.</param>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.BytesConsumed">
      <summary vsli:raw="Gets the total number of bytes consumed so far by this instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt;.">Obtient le nombre total d’octets consommés jusqu’à présent par cette instance du <see cref="T:System.Text.Json.Utf8JsonReader" />.</summary>
      <returns vsli:raw="The total number of bytes consumed so far.">Nombre total d’octets consommés jusqu’à présent.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.CurrentDepth">
      <summary vsli:raw="Gets the depth of the current token.">Obtient la profondeur du jeton actuel.</summary>
      <returns vsli:raw="The depth of the current token.">Profondeur du jeton actuel.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.CurrentState">
      <summary vsli:raw="Gets the current &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; state to pass to a &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; constructor with more data.">Obtient l’état <see cref="T:System.Text.Json.Utf8JsonReader" /> actuel à passer à un constructeur <see cref="T:System.Text.Json.Utf8JsonReader" /> avec davantage de données.</summary>
      <returns vsli:raw="The current reader state.">État actuel du lecteur.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetBoolean">
      <summary vsli:raw="Reads the next JSON token value from the source as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">Lit la prochaine valeur du jeton JSON de la source comme <see cref="T:System.Boolean" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.TokenType&quot; /&gt; is &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.True&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; if the &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.TokenType&quot; /&gt; is &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.False&quot; /&gt;.">
        <see langword="true" /> si <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> est <see cref="F:System.Text.Json.JsonTokenType.True" /> ; <see langword="false" /> si <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> est <see cref="F:System.Text.Json.JsonTokenType.False" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a Boolean value (that is, &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.True&quot; /&gt; or &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.False&quot; /&gt;).">La valeur du jeton JSON n’est pas une valeur booléenne (autrement dit, <see cref="F:System.Text.Json.JsonTokenType.True" /> ou <see cref="F:System.Text.Json.JsonTokenType.False" />).</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetByte">
      <summary vsli:raw="Parses the current JSON token value from the source as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">Analyse la valeur du jeton JSON actuelle de la source comme <see cref="T:System.Byte" />.</summary>
      <returns vsli:raw="The value of the UTF-8 encoded token.">Valeur du jeton encodé en UTF-8.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation).&#xA;          &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.Byte.MinValue&quot;&gt;Byte.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Byte.MaxValue&quot;&gt;Byte.MaxValue&lt;/see&gt;.">Le format numérique de la valeur du jeton JSON est incorrect (par exemple, il contient une valeur fractionnaire ou est écrit en notation scientifique).
-ou-
La valeur du jeton JSON représente un nombre inférieur à <see cref="F:System.Byte.MinValue" /> ou supérieur à <see cref="F:System.Byte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetBytesFromBase64">
      <summary vsli:raw="Parses the current JSON token value from the source and decodes the Base64 encoded JSON string as a byte array.">Analyse la valeur actuelle du jeton JSON à partir de la source et décode la chaîne JSON encodée en Base64 en tant que tableau d’octets.</summary>
      <returns vsli:raw="The byte array that represents the current JSON token value.">Tableau d’octets qui représente la valeur actuelle du jeton JSON.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type of the JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">Le type du jeton JSON n’est pas une <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value is not encoded as Base64 text, so it can't be decoded to bytes.&#xA;&#xA;-or-&#xA;&#xA;The value contains invalid or more than two padding characters.&#xA;&#xA;-or-&#xA;&#xA;The value is incomplete. That is, the JSON string length is not a multiple of 4.">La valeur n’est pas encodée en texte en Base64 et ne peut donc pas être décodée en octets.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetComment">
      <summary vsli:raw="Parses the current JSON token value from the source as a comment and transcodes it as a &lt;see cref=&quot;T:System.String&quot; /&gt;.">Analyse la valeur actuelle du jeton JSON à partir de la source en tant que commentaire, transcodé en <see cref="T:System.String" />.</summary>
      <returns vsli:raw="The comment that represents the current JSON token value.">Commentaire qui représente la valeur actuelle du jeton JSON.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token is not a comment.">Le jeton JSON n’est pas un commentaire.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDateTime">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">Lit la prochaine valeur du jeton JSON de la source et l’analyse pour obtenir une valeur <see cref="T:System.DateTime" />.</summary>
      <returns vsli:raw="The date and time value, if the entire UTF-8 encoded token value can be successfully parsed.">La valeur de date et heure, si l’intégralité de la valeur du jeton encodé en UTF-8 peut être correctement analysée.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value cannot be read as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.&#xA;        &#xA;-or-&#xA;        &#xA;The entire UTF-8 encoded token value cannot be parsed to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value.&#xA;&#xA;-or-&#xA;&#xA;The JSON token value is of an unsupported format.">La valeur du jeton JSON ne peut pas être lue comme <see cref="T:System.DateTime" />.
-ou-
L’intégralité de la valeur du jeton encodé UTF-8 ne peut pas être analysée pour obtenir une valeur <see cref="T:System.DateTime" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDateTimeOffset">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">Lit la prochaine valeur du jeton JSON de la source et l’analyse pour obtenir une valeur <see cref="T:System.DateTimeOffset" />.</summary>
      <returns vsli:raw="The date and time offset, if the entire UTF-8 encoded token value can be successfully parsed.">L’offset de date et heure, si l’intégralité de la valeur du jeton encodé en UTF-8 peut être correctement analysée.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value cannot be read as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.&#xA;&#xA;-or-&#xA;        &#xA;The entire UTF-8 encoded token value cannot be parsed to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value.&#xA;&#xA;-or-&#xA;&#xA;The JSON token value is of an unsupported format.">La valeur du jeton JSON ne peut pas être lue comme <see cref="T:System.DateTimeOffset" />.
-ou-
L’intégralité de la valeur du jeton encodé UTF-8 ne peut pas être analysée pour obtenir une valeur <see cref="T:System.DateTimeOffset" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDecimal">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">Lit la prochaine valeur du jeton JSON de la source et l’analyse pour obtenir une valeur <see cref="T:System.Decimal" />.</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">Valeur du jeton encodé en UTF-8 analysée pour obtenir une valeur <see cref="T:System.Decimal" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value represents a number less than &lt;see cref=&quot;F:System.Decimal.MinValue&quot;&gt;Decimal.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Decimal.MaxValue&quot;&gt;Decimal.MaxValue&lt;/see&gt;.">La valeur du jeton JSON représente un nombre inférieur à <see cref="F:System.Decimal.MinValue" /> ou supérieur à <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDouble">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">Lit la prochaine valeur du jeton JSON de la source et l’analyse pour obtenir une valeur <see cref="T:System.Double" />.</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">Valeur du jeton encodé en UTF-8 analysée pour obtenir une valeur <see cref="T:System.Double" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value represents a number less than &lt;see cref=&quot;F:System.Double.MinValue&quot;&gt;Double.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Double.MaxValue&quot;&gt;Double.MaxValue&lt;/see&gt;.">La valeur du jeton JSON représente un nombre inférieur à <see cref="F:System.Double.MinValue" /> ou supérieur à <see cref="F:System.Double.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetGuid">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">Lit la prochaine valeur du jeton JSON de la source et l’analyse pour obtenir une valeur <see cref="T:System.Guid" />.</summary>
      <returns vsli:raw="The GUID value, if the entire UTF-8 encoded token value can be successfully parsed.">La valeur GUID, si l’intégralité de la valeur du jeton encodé en UTF-8 peut être correctement analysée.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value is in an unsupported format for a Guid.&#xA;        &#xA;-or-&#xA;&#xA;The entire UTF-8 encoded token value cannot be parsed to a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value.">La valeur du jeton JSON est dans un format non pris en charge pour un GUID.
-ou-
L’intégralité de la valeur du jeton encodé UTF-8 ne peut pas être analysée pour obtenir une valeur <see cref="T:System.Guid" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt16">
      <summary vsli:raw="Parses the current JSON token value from the source as a &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">Analyse la valeur du jeton JSON actuelle de la source comme <see cref="T:System.Int16" />.</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">Valeur du jeton encodé en UTF-8 analysée pour obtenir une valeur <see cref="T:System.Int16" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation).&#xA;          &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.Int16.MinValue&quot;&gt;Int16.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Int16.MaxValue&quot;&gt;Int16.MaxValue&lt;/see&gt;.">Le format numérique de la valeur du jeton JSON est incorrect (par exemple, il contient une valeur fractionnaire ou est écrit en notation scientifique).
-ou-
La valeur du jeton JSON représente un nombre inférieur à <see cref="F:System.Int16.MinValue" /> ou supérieur à <see cref="F:System.Int16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt32">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">Lit la prochaine valeur du jeton JSON de la source et l’analyse pour obtenir une valeur <see cref="T:System.Int32" />.</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">Valeur du jeton encodé en UTF-8 analysée pour obtenir une valeur <see cref="T:System.Int32" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value is of the incorrect numeric format. For example, it contains a decimal or is written in scientific notation.&#xA;            &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.Int32.MinValue&quot;&gt;Int32.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">La valeur du jeton JSON est dans un format numérique incorrect. Par exemple, elle contient un nombre décimal ou est écrite en notation scientifique.
-ou-
La valeur du jeton JSON représente un nombre inférieur à <see cref="F:System.Int32.MinValue" /> ou supérieur à <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt64">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">Lit la prochaine valeur du jeton JSON de la source et l’analyse pour obtenir une valeur <see cref="T:System.Int64" />.</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">Valeur du jeton encodé en UTF-8 analysée pour obtenir une valeur <see cref="T:System.Int64" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value is of the incorrect numeric format. For example, it contains a decimal or is written in scientific notation.&#xA;            &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.Int64.MinValue&quot;&gt;Int64.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">La valeur du jeton JSON est dans un format numérique incorrect. Par exemple, elle contient un nombre décimal ou est écrite en notation scientifique.
-ou-
La valeur du jeton JSON représente un nombre inférieur à <see cref="F:System.Int64.MinValue" /> ou supérieur à <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetSByte">
      <summary vsli:raw="Parses the current JSON token value from the source as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">Analyse la valeur du jeton JSON actuelle de la source comme <see cref="T:System.SByte" />.</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">Valeur du jeton encodé en UTF-8 analysée pour obtenir une valeur <see cref="T:System.SByte" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation).&#xA;          &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.SByte.MinValue&quot;&gt;SByte.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.SByte.MaxValue&quot;&gt;SByte.MaxValue&lt;/see&gt;.">Le format numérique de la valeur du jeton JSON est incorrect (par exemple, il contient une valeur fractionnaire ou est écrit en notation scientifique).
-ou-
La valeur du jeton JSON représente un nombre inférieur à <see cref="F:System.SByte.MinValue" /> ou supérieur à <see cref="F:System.SByte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetSingle">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">Lit la prochaine valeur du jeton JSON de la source et l’analyse pour obtenir une valeur <see cref="T:System.Single" />.</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">Valeur du jeton encodé en UTF-8 analysée pour obtenir une valeur <see cref="T:System.Single" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value represents a number less than &lt;see cref=&quot;F:System.Single.MinValue&quot;&gt;Single.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Single.MaxValue&quot;&gt;Single.MaxValue&lt;/see&gt;.">La valeur du jeton JSON représente un nombre inférieur à <see cref="F:System.Single.MinValue" /> ou supérieur à <see cref="F:System.Single.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetString">
      <summary vsli:raw="Reads the next JSON token value from the source unescaped and transcodes it as a string.">Lit la prochaine valeur du jeton JSON de la source, non échappée et transcodée, comme une chaîne.</summary>
      <returns vsli:raw="The token value parsed to a string, or &lt;see langword=&quot;null&quot; /&gt; if &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.TokenType&quot; /&gt; is &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Null&quot; /&gt;.">Valeur du jeton analysée comme une chaîne, ou <see langword="null" /> si <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> est <see cref="F:System.Text.Json.JsonTokenType.Null" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a string (that is, not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;, &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;, or &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Null&quot; /&gt;).&#xA;&#xA;-or-&#xA;&#xA;The JSON string contains invalid UTF-8 bytes or invalid UTF-16 surrogates.">La valeur du jeton JSON n’est pas une chaîne (autrement dit, ni <see cref="F:System.Text.Json.JsonTokenType.String" />, ni <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />, ni <see cref="F:System.Text.Json.JsonTokenType.Null" />).
-ou-
La chaîne JSON contient des octets UTF-8 non valides ou des substituts UTF-16 non valides.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt16">
      <summary vsli:raw="Parses the current JSON token value from the source as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">Analyse la valeur du jeton JSON actuelle de la source comme <see cref="T:System.UInt16" />.</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">Valeur du jeton encodé en UTF-8 analysée pour obtenir une valeur <see cref="T:System.UInt16" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation).&#xA;          &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.UInt16.MinValue&quot;&gt;UInt16.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.UInt16.MaxValue&quot;&gt;UInt16.MaxValue&lt;/see&gt;.">Le format numérique de la valeur du jeton JSON est incorrect (par exemple, il contient une valeur fractionnaire ou est écrit en notation scientifique).
-ou-
La valeur du jeton JSON représente un nombre inférieur à <see cref="F:System.UInt16.MinValue" /> ou supérieur à <see cref="F:System.UInt16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt32">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">Lit la prochaine valeur du jeton JSON de la source et l’analyse pour obtenir une valeur <see cref="T:System.UInt32" />.</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">Valeur du jeton encodé en UTF-8 analysée pour obtenir une valeur <see cref="T:System.UInt32" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value is of the incorrect numeric format. For example, it contains a decimal or is written in scientific notation.&#xA;&#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.UInt32.MinValue&quot;&gt;UInt32.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.UInt32.MaxValue&quot;&gt;UInt32.MaxValue&lt;/see&gt;.">La valeur du jeton JSON est dans un format numérique incorrect. Par exemple, elle contient un nombre décimal ou est écrite en notation scientifique.
-ou-
La valeur du jeton JSON représente un nombre inférieur à <see cref="F:System.UInt32.MinValue" /> ou supérieur à <see cref="F:System.UInt32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt64">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">Lit la prochaine valeur du jeton JSON de la source et l’analyse pour obtenir une valeur <see cref="T:System.UInt64" />.</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">Valeur du jeton encodé en UTF-8 analysée pour obtenir une valeur <see cref="T:System.UInt64" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value is of the incorrect numeric format. For example, it contains a decimal or is written in scientific notation.&#xA;            &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.UInt64.MinValue&quot;&gt;UInt64.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.UInt64.MaxValue&quot;&gt;UInt64.MaxValue&lt;/see&gt;.">La valeur du jeton JSON est dans un format numérique incorrect. Par exemple, elle contient un nombre décimal ou est écrite en notation scientifique.
-ou-
La valeur du jeton JSON représente un nombre inférieur à <see cref="F:System.UInt64.MinValue" /> ou supérieur à <see cref="F:System.UInt64.MaxValue" />.</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.HasValueSequence">
      <summary vsli:raw="Gets a value that indicates which &lt;c&gt;Value&lt;/c&gt; property to use to get the token value.">Obtient une valeur qui indique quelle propriété <c>Value</c> utiliser pour obtenir la valeur du jeton.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.ValueSequence&quot; /&gt; should be used to get the token value; &lt;see langword=&quot;false&quot; /&gt; if &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.ValueSpan&quot; /&gt; should be used instead.">
        <see langword="true" /> si <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" /> doit être utilisé pour récupérer la valeur de jeton ; <see langword="false" /> si <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" /> doit être utilisé à la place.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.IsFinalBlock">
      <summary vsli:raw="Gets a value that indicates whether all the JSON data was provided or there is more data to come.">Obtient le mode de cette instance du <see cref="T:System.Text.Json.Utf8JsonReader" /> qui indique si toutes les données JSON ont été fournies ou s’il y a d’autres données à venir.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader was constructed with the input span or sequence containing the entire JSON data to process; &lt;see langword=&quot;false&quot; /&gt; if the reader was constructed with an input span or sequence that may contain partial JSON data with more data to follow.">
        <see langword="true" /> si le lecteur a été construit avec l’étendue d’entrée ou la séquence contenant l’ensemble des données JSON à traiter ; <see langword="false" /> si le lecteur a été construit avec une plage d’entrée ou une séquence qui peut contenir des données JSON partielles avec davantage de données à suivre.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.Position">
      <summary vsli:raw="Gets the current &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; within the provided UTF-8 encoded input ReadOnlySequence&amp;lt;byte&amp;gt; or a default &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; if the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; struct was constructed with a ReadOnlySpan&amp;lt;byte&amp;gt;.">Obtient la <see cref="T:System.SequencePosition" /> actuelle dans la ReadOnlySequence&lt;byte&gt; de l’entrée encodée en UTF-8 fournie ou la <see cref="T:System.SequencePosition" /> par défaut si le struct <see cref="T:System.Text.Json.Utf8JsonReader" /> a été construit avec un ReadOnlySpan&lt;byte&gt;.</summary>
      <returns vsli:raw="The current &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; within the provided UTF-8 encoded input ReadOnlySequence&amp;lt;byte&amp;gt; or a default &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; if the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; struct was constructed with a ReadOnlySpan&amp;lt;byte&amp;gt;.">Le <see cref="T:System.SequencePosition" /> actuel dans le ReadOnlySequence d’entrée encodé UTF-8 fourni&lt;octet&gt; ou un <see cref="T:System.SequencePosition" /> par défaut si le struct <see cref="T:System.Text.Json.Utf8JsonReader" /> a été construit avec un&lt;d’octets ReadOnlySpan&gt;.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.Read">
      <summary vsli:raw="Reads the next JSON token from the input source.">Lit le prochain jeton JSON de la source d’entrée.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the token was read successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le jeton a été correctement lu ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="An invalid JSON token according to the JSON RFC is encountered.&#xA;        &#xA;-or-&#xA;&#xA;The current depth exceeds the recursive limit set by the maximum depth.">Un jeton JSON non valide selon la RFC JSON est détecté.
-ou-
La profondeur actuelle dépasse la limite récursive définie par la profondeur maximale.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.Skip">
      <summary vsli:raw="Skips the children of the current JSON token.">Ignore les enfants du jeton JSON actuel.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The reader was given partial data with more data to follow (that is, &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.IsFinalBlock&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;).">Le lecteur s’est vu donner des données partielles avec d’autres données à suivre (c’est-à-dire, <see cref="P:System.Text.Json.Utf8JsonReader.IsFinalBlock" /> est <see langword="false" />).</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="An invalid JSON token was encountered while skipping, according to the JSON RFC.&#xA;&#xA;-or-&#xA;&#xA;The current depth exceeds the recursive limit set by the maximum depth.">Un jeton JSON non valide a été trouvé en ignorant, selon la RFC JSON.
-ou-
La profondeur actuelle dépasse la limite récursive définie par la profondeur maximale.</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.TokenStartIndex">
      <summary vsli:raw="Gets the index that the last processed JSON token starts at (within the given UTF-8 encoded input text), skipping any white space.">Obtient l’index à partir duquel commence le dernier jeton JSON traité (dans le texte d’entrée encodé en UTF-8 donné), en ignorant tout espace blanc.</summary>
      <returns vsli:raw="The starting index of the last processed JSON token within the given UTF-8 encoded input text.">Index de départ du dernier jeton JSON traité dans le texte d’entrée encodé UTF-8 donné.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.TokenType">
      <summary vsli:raw="Gets the type of the last processed JSON token in the UTF-8 encoded JSON text.">Obtient le type du dernier jeton JSON traité dans le texte JSON encodé en UTF-8.</summary>
      <returns vsli:raw="The type of the last processed JSON token.">Type du dernier jeton JSON traité.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetByte(System.Byte@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.Byte&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Tente d’analyser la valeur du jeton JSON actuelle de la source en tant que <see cref="T:System.Byte" /> et retourne une valeur qui indique si l’opération a réussi.</summary>
      <param name="value" vsli:raw="When this method returns, contains the byte equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quand cette méthode est retournée, contient la valeur analysée.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.Byte&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la valeur du jeton encodé en UTF-8 toute entière peut être analysée correctement pour obtenir une valeur <see cref="T:System.Byte" /> ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetBytesFromBase64(System.Byte[]@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source and decodes the Base64 encoded JSON string as a byte array and returns a value that indicates whether the operation succeeded.">Tente d’analyser la valeur du jeton JSON actuelle de la source et décode la chaîne JSON encodée en Base64 en tant que tableau d’octets et retourne une valeur qui indique si l’opération a réussi.</summary>
      <param name="value" vsli:raw="When this method returns, contains the decoded binary representation of the Base64 text.">Lorsque cette méthode est retournée, contient la représentation binaire décodée du texte en Base64.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire token value is encoded as valid Base64 text and can be successfully decoded to bytes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la totalité de la valeur de jeton est encodée en texte en Base64 valide et peut être décodée en octets ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">Le jeton JSON n’est pas une <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDateTime(System.DateTime@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Tente d’analyser la valeur du jeton JSON actuelle de la source en tant que <see cref="T:System.DateTime" /> et retourne une valeur qui indique si l’opération a réussi.</summary>
      <param name="value" vsli:raw="When this method returns, contains the date and time value equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.DateTime.MinValue&quot; /&gt; if the conversion failed.">Quand cette méthode est retournée, contient la valeur analysée.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la valeur du jeton encodé en UTF-8 toute entière peut être analysée correctement pour obtenir une valeur <see cref="T:System.DateTime" /> ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDateTimeOffset(System.DateTimeOffset@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Tente d’analyser la valeur du jeton JSON actuelle de la source en tant que <see cref="T:System.DateTimeOffset" /> et retourne une valeur qui indique si l’opération a réussi.</summary>
      <param name="value" vsli:raw="When this method returns, contains the date and time value equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.DateTimeOffset.MinValue&quot; /&gt; if the conversion failed.">Quand cette méthode est retournée, contient la valeur analysée.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la valeur du jeton encodé en UTF-8 toute entière peut être analysée correctement pour obtenir une valeur <see cref="T:System.DateTimeOffset" /> ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDecimal(System.Decimal@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Tente d’analyser la valeur du jeton JSON actuelle de la source en tant que <see cref="T:System.Decimal" /> et retourne une valeur qui indique si l’opération a réussi.</summary>
      <param name="value" vsli:raw="When this method returns, contains the decimal equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quand cette méthode est retournée, contient la valeur analysée.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la valeur du jeton encodé en UTF-8 toute entière peut être analysée correctement pour obtenir une valeur <see cref="T:System.Decimal" /> ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDouble(System.Double@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.Double&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Tente d’analyser la valeur du jeton JSON actuelle de la source en tant que <see cref="T:System.Double" /> et retourne une valeur qui indique si l’opération a réussi.</summary>
      <param name="value" vsli:raw="When this method returns, contains a double-precision floating point value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quand cette méthode est retournée, contient la valeur analysée.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.Double&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la valeur du jeton encodé en UTF-8 toute entière peut être analysée correctement pour obtenir une valeur <see cref="T:System.Double" /> ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetGuid(System.Guid@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.Guid&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Tente d’analyser la valeur du jeton JSON actuelle de la source en tant que <see cref="T:System.Guid" /> et retourne une valeur qui indique si l’opération a réussi.</summary>
      <param name="value" vsli:raw="When this method returns, contains the GUID equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.Guid.Empty&quot; /&gt; if the conversion failed.">Quand cette méthode est retournée, contient la valeur analysée.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la valeur du jeton encodé en UTF-8 toute entière peut être analysée correctement pour obtenir une valeur <see cref="T:System.Guid" /> ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt16(System.Int16@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as an &lt;see cref=&quot;T:System.Int16&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Tente d’analyser la valeur du jeton JSON actuelle de la source en tant que <see cref="T:System.Int16" /> et retourne une valeur qui indique si l’opération a réussi.</summary>
      <param name="value" vsli:raw="When this method returns, contains the 16-bit integer value equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quand cette méthode est retournée, contient la valeur analysée.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.Int16&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la valeur du jeton encodé en UTF-8 toute entière peut être analysée correctement pour obtenir une valeur <see cref="T:System.Int16" /> ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt32(System.Int32@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as an &lt;see cref=&quot;T:System.Int32&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Tente d’analyser la valeur du jeton JSON actuelle de la source en tant que <see cref="T:System.Int32" /> et retourne une valeur qui indique si l’opération a réussi.</summary>
      <param name="value" vsli:raw="When this method returns, contains the 32-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quand cette méthode est retournée, contient la valeur analysée.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to an &lt;see cref=&quot;T:System.Int32&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la valeur du jeton encodé en UTF-8 toute entière peut être analysée correctement pour obtenir une valeur <see cref="T:System.Int32" /> ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt64(System.Int64@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as an &lt;see cref=&quot;T:System.Int64&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Tente d’analyser la valeur du jeton JSON actuelle de la source en tant que <see cref="T:System.Int64" /> et retourne une valeur qui indique si l’opération a réussi.</summary>
      <param name="value" vsli:raw="When this method returns, contains the 64-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quand cette méthode est retournée, contient la valeur analysée.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to an &lt;see cref=&quot;T:System.Int64&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la valeur du jeton encodé en UTF-8 toute entière peut être analysée correctement pour obtenir une valeur <see cref="T:System.Int64" /> ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetSByte(System.SByte@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as an &lt;see cref=&quot;T:System.SByte&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Tente d’analyser la valeur du jeton JSON actuelle de la source en tant que <see cref="T:System.SByte" /> et retourne une valeur qui indique si l’opération a réussi.</summary>
      <param name="value" vsli:raw="When this method returns, contains the signed byte equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quand cette méthode est retournée, contient la valeur analysée.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to an &lt;see cref=&quot;T:System.SByte&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la valeur du jeton encodé en UTF-8 toute entière peut être analysée correctement pour obtenir une valeur <see cref="T:System.SByte" /> ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetSingle(System.Single@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.Single&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Tente d’analyser la valeur du jeton JSON actuelle de la source en tant que <see cref="T:System.Single" /> et retourne une valeur qui indique si l’opération a réussi.</summary>
      <param name="value" vsli:raw="When this method returns, contains the single-precision floating point value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quand cette méthode est retournée, contient la valeur analysée.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to an &lt;see cref=&quot;T:System.Single&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la valeur du jeton encodé en UTF-8 toute entière peut être analysée correctement pour obtenir une valeur <see cref="T:System.Single" /> ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt16(System.UInt16@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Tente d’analyser la valeur du jeton JSON actuelle de la source en tant que <see cref="T:System.UInt16" /> et retourne une valeur qui indique si l’opération a réussi.</summary>
      <param name="value" vsli:raw="When this method returns, contains the unsigned 16-bit integer value equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quand cette méthode est retournée, contient la valeur analysée.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la valeur du jeton encodé en UTF-8 toute entière peut être analysée correctement pour obtenir une valeur <see cref="T:System.UInt16" /> ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt32(System.UInt32@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Tente d’analyser la valeur du jeton JSON actuelle de la source en tant que <see cref="T:System.UInt32" /> et retourne une valeur qui indique si l’opération a réussi.</summary>
      <param name="value" vsli:raw="When this method returns, contains unsigned 32-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quand cette méthode est retournée, contient la valeur analysée.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la valeur du jeton encodé en UTF-8 toute entière peut être analysée correctement pour obtenir une valeur <see cref="T:System.UInt32" /> ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt64(System.UInt64@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Tente d’analyser la valeur du jeton JSON actuelle de la source en tant que <see cref="T:System.UInt64" /> et retourne une valeur qui indique si l’opération a réussi.</summary>
      <param name="value" vsli:raw="When this method returns, contains unsigned 64-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quand cette méthode est retournée, contient la valeur analysée.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la valeur du jeton encodé en UTF-8 toute entière peut être analysée correctement pour obtenir une valeur <see cref="T:System.UInt64" /> ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TrySkip">
      <summary vsli:raw="Tries to skip the children of the current JSON token.">Tente d’ignorer les enfants du jeton JSON actuel.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there was enough data for the children to be skipped successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> s’il y a suffisamment de données pour que les enfants soient ignorés ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="An invalid JSON token was encountered while skipping, according to the JSON RFC.&#xA;          &#xA;-or -&#xA;&#xA;The current depth exceeds the recursive limit set by the maximum depth.">Un jeton JSON non valide a été trouvé en ignorant, selon la RFC JSON.
ou
La profondeur actuelle dépasse la limite récursive définie par la profondeur maximale.</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.ValueSequence">
      <summary vsli:raw="Gets the raw value of the last processed token as a ReadOnlySequence&amp;lt;byte&amp;gt; slice of the input payload, only if the token is contained within multiple segments.">Obtient la valeur brute du dernier jeton traité en tant que section ReadOnlySequence&lt;byte&gt; de la charge utile d’entrée, uniquement si le jeton est contenu dans plusieurs segments.</summary>
      <returns vsli:raw="A byte read-only sequence.">Séquence en lecture seule d’octets.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.ValueSpan">
      <summary vsli:raw="Gets the raw value of the last processed token as a ReadOnlySpan&amp;lt;byte&amp;gt; slice of the input payload, if the token fits in a single segment or if the reader was constructed with a JSON payload contained in a ReadOnlySpan&amp;lt;byte&amp;gt;.">Obtient la valeur brute du dernier jeton traité en tant que section ReadOnlySpan&lt;byte&gt; de la charge utile d’entrée, si le jeton entre dans un seul segment ou si le lecteur a été construit avec une charge utile JSON contenue dans un ReadOnlySpan&lt;byte&gt;.</summary>
      <returns vsli:raw="A read-only span of bytes.">Étendue d’octets en lecture seule.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Compares the UTF-8 encoded text in a read-only byte span to the unescaped JSON token value in the source and returns a value that indicates whether they match.">Compare le texte encodé en UTF-8 dans une étendue en lecture seule d’octets à la valeur du jeton JSON sans séquence d’échappement dans la source et retourne une valeur qui indique s’ils correspondent.</summary>
      <param name="utf8Text" vsli:raw="The UTF-8 encoded text to compare against.">Texte encodé en UTF-8 avec lequel effectuer la comparaison.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the JSON token value in the source matches the UTF-8 encoded lookup text; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la valeur du jeton JSON dans la source correspond au texte de recherche encodé en UTF-8 ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token is not a JSON string (that is, it is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt; or &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;).">Le jeton JSON n’est pas une chaîne JSON (autrement dit, n’est ni <see cref="F:System.Text.Json.JsonTokenType.String" /> ni <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />).</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Compares the text in a read-only character span to the unescaped JSON token value in the source and returns a value that indicates whether they match.">Compare le texte dans une étendue en lecture seule de caractères en lecture seule à la valeur du jeton JSON sans séquence d’échappement dans la source et retourne une valeur qui indique s’ils correspondent.</summary>
      <param name="text" vsli:raw="The text to compare against.">Texte avec lequel comparer.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the JSON token value in the source matches the lookup text; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la valeur du jeton JSON dans la source correspond au texte de recherche ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token is not a JSON string (that is, it is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt; or &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;).">Le jeton JSON n’est pas une chaîne JSON (autrement dit, n’est ni <see cref="F:System.Text.Json.JsonTokenType.String" /> ni <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />).</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.String)">
      <summary vsli:raw="Compares the string text to the unescaped JSON token value in the source and returns a value that indicates whether they match.">Compare le texte de chaîne à la valeur du jeton JSON sans séquence d’échappement dans la source et retourne une valeur qui indique s’ils correspondent.</summary>
      <param name="text" vsli:raw="The text to compare against.">Texte avec lequel comparer.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the JSON token value in the source matches the lookup text; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la valeur du jeton JSON dans la source correspond au texte de recherche ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token is not a JSON string (that is, it is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt; or &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;).">Le jeton JSON n’est pas une chaîne JSON (autrement dit, n’est ni <see cref="F:System.Text.Json.JsonTokenType.String" /> ni <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />).</exception>
    </member>
    <member name="T:System.Text.Json.Utf8JsonWriter">
      <summary vsli:raw="Provides a high-performance API for forward-only, non-cached writing of UTF-8 encoded JSON text.">Fournit une API hautes performances pour l’écriture en transfert seul et non mise en cache de texte JSON encodé en UTF-8.</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.#ctor(System.Buffers.IBufferWriter{System.Byte},System.Text.Json.JsonWriterOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; class using the specified &lt;see cref=&quot;T:System.Buffers.IBufferWriter`1&quot; /&gt; to write the output to and customization options.">Initialise une nouvelle instance de la classe <see cref="T:System.Text.Json.Utf8JsonWriter" /> à l’aide du <see cref="T:System.Buffers.IBufferWriter`1" /> spécifié pour écrire les options de sortie et de personnalisation.</summary>
      <param name="bufferWriter" vsli:raw="The destination for writing JSON text.">Destination du texte JSON écrit.</param>
      <param name="options" vsli:raw="Defines the customized behavior of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt;. By default, it writes minimized JSON (with no extra white space) and validates that the JSON being written is structurally valid according to the JSON RFC.">Définit le comportement personnalisé de <see cref="T:System.Text.Json.Utf8JsonWriter" />. Par défaut, il écrit le texte JSON au format réduit (aucun espace blanc) et vérifie que le texte JSON en cours d’écriture est structurellement valide, conformément à la RFC JSON.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;bufferWriter&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="bufferWriter" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.#ctor(System.IO.Stream,System.Text.Json.JsonWriterOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; class using the specified stream to write the output to and customization options.">Initialise une nouvelle instance de la classe <see cref="T:System.Text.Json.Utf8JsonWriter" /> à l’aide du flux spécifié pour écrire les options de sortie et de personnalisation.</summary>
      <param name="utf8Json" vsli:raw="The destination for writing JSON text.">Destination du texte JSON écrit.</param>
      <param name="options" vsli:raw="Defines the customized behavior of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt;. By default, it writes minimized JSON (with no extra white space) and validates that the JSON being written is structurally valid according to the JSON RFC.">Définit le comportement personnalisé de <see cref="T:System.Text.Json.Utf8JsonWriter" />. Par défaut, il écrit le texte JSON au format réduit (aucun espace blanc) et vérifie que le texte JSON en cours d’écriture est structurellement valide, conformément à la RFC JSON.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="utf8Json" /> est <see langword="null" />.</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.BytesCommitted">
      <summary vsli:raw="Gets the total number of bytes committed to the output by the current instance so far.">Obtient le nombre total d’octets validés dans la sortie par l’instance actuelle jusqu’ici.</summary>
      <returns vsli:raw="The total number of bytes committed to the output by the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; so far.">Nombre total d’octets validés à la sortie par le <see cref="T:System.Text.Json.Utf8JsonWriter" /> jusqu’à présent.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.BytesPending">
      <summary vsli:raw="Gets the number of bytes written by the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; so far that have not yet been flushed to the output and committed.">Obtient le nombre d’octets écrits par <see cref="T:System.Text.Json.Utf8JsonWriter" /> jusqu’ici qui n’ont pas encore été vidés dans la sortie ni validés.</summary>
      <returns vsli:raw="The number of bytes written so far by the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; that have not yet been flushed to the output and committed.">Nombre d’octets écrits jusqu’à présent par le <see cref="T:System.Text.Json.Utf8JsonWriter" /> qui n’ont pas encore été vidés dans la sortie et validés.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.CurrentDepth">
      <summary vsli:raw="Gets the depth of the current token.">Obtient la profondeur du jeton actuel.</summary>
      <returns vsli:raw="The depth of the current token.">Profondeur du jeton actuel.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Dispose">
      <summary vsli:raw="Commits any leftover JSON text that has not yet been flushed and releases all resources used by the current instance.">Valide tout texte JSON restant qui n’a pas encore été vidé et libère toutes les ressources utilisées par l’instance actuelle.</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.DisposeAsync">
      <summary vsli:raw="Asynchronously commits any leftover JSON text that has not yet been flushed and releases all resources used by the current instance.">Valide de manière asynchrone tout texte JSON restant qui n’a pas encore été vidé et libère toutes les ressources utilisées par l’instance actuelle.</summary>
      <returns vsli:raw="A task representing the asynchronous dispose operation.">Tâche représentant l’opération de suppression asynchrone.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Flush">
      <summary vsli:raw="Commits the JSON text written so far, which makes it visible to the output destination.">Valide le texte JSON écrit jusqu’ici, ce qui le rend visible pour la destination de sortie.</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This instance has been disposed.">L’instance a été supprimée.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.FlushAsync(System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously commits the JSON text written so far, which makes it visible to the output destination.">Valide de manière asynchrone le texte JSON écrit jusqu’ici, ce qui le rend visible pour la destination de sortie.</summary>
      <param name="cancellationToken" vsli:raw="The token to monitor for cancellation requests. The default value is &lt;see cref=&quot;P:System.Threading.CancellationToken.None&quot; /&gt;.">Jeton pour surveiller les requêtes d'annulation. La valeur par défaut est <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns vsli:raw="A task representing the asynchronous flush operation.">Tâche représentant l’opération de vidage asynchrone.</returns>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This instance has been disposed.">L’instance a été supprimée.</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.Options">
      <summary vsli:raw="Gets the custom behavior when writing JSON using this instance, which indicates whether to format the output while writing, whether to skip structural JSON validation, and which characters to escape.">Obtient le comportement personnalisé lors de l’écriture de texte JSON à l’aide de cette instance. Indique s’il faut mettre en forme la sortie lors de l’écriture, s’il faut ignorer la validation structurelle du texte JSON, et les caractères d’échappement.</summary>
      <returns vsli:raw="The custom behavior of this instance of the writer for formatting, validating, and escaping.">Comportement personnalisé de cette instance du writer pour la mise en forme, la validation et l’échappement.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset">
      <summary vsli:raw="Resets the internal state of this instance so that it can be reused.">Réinitialise l’état interne de cette instance en vue de sa réutilisation.</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This instance has been disposed.">L’instance a été supprimée.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset(System.Buffers.IBufferWriter{System.Byte})">
      <summary vsli:raw="Resets the internal state of this instance so that it can be reused with a new instance of &lt;see cref=&quot;T:System.Buffers.IBufferWriter`1&quot; /&gt;.">Réinitialise l’état interne de cette instance en vue de sa réutilisation avec une nouvelle instance de <see cref="T:System.Buffers.IBufferWriter`1" />.</summary>
      <param name="bufferWriter" vsli:raw="The destination for writing JSON text.">Destination du texte JSON écrit.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;bufferWriter&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="bufferWriter" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This instance has been disposed.">L’instance a été supprimée.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset(System.IO.Stream)">
      <summary vsli:raw="Resets the internal state of this instance so that it can be reused with a new instance of &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt;.">Réinitialise l’état interne de cette instance en vue de sa réutilisation avec une nouvelle instance de <see cref="T:System.IO.Stream" />.</summary>
      <param name="utf8Json" vsli:raw="The destination for writing JSON text.">Destination du texte JSON écrit.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="utf8Json" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This instance has been disposed.">L’instance a été supprimée.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.">Écrit le nom de propriété et la valeur d’octets bruts (sous forme de chaîne JSON encodée en base 64) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded name of the property to write.">Nom encodé en UTF-8 de la propriété à écrire.</param>
      <param name="bytes" vsli:raw="The binary data to write as Base64 encoded text.">Données binaires à écrire sous forme de texte encodé Base64.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">La taille du nom ou de la valeur de la propriété spécifiée est trop grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">La validation est activée, mais cette méthode entraînerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.">Écrit le nom de propriété et la valeur d’octets bruts (sous forme de chaîne JSON encodée en base 64) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="bytes" vsli:raw="The binary data to write as Base64 encoded text.">Données binaires à écrire sous forme de texte encodé Base64.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">La taille du nom ou de la valeur de la propriété spécifiée est trop grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">La validation est activée, mais cette méthode entraînerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.String,System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.">Écrit le nom de propriété et la valeur d’octets bruts (sous forme de chaîne JSON encodée en base 64) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="bytes" vsli:raw="The binary data to write as Base64 encoded text.">Données binaires à écrire sous forme de texte encodé Base64.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">La taille du nom ou de la valeur de la propriété spécifiée est trop grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">La validation est activée, mais cette méthode entraînerait l’écriture d’un JSON non valide.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="propertyName" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the pre-encoded property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.">Écrit le nom de propriété préencodé et la valeur d’octets bruts (sous forme de chaîne JSON encodée en Base64) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON-encoded name of the property to write.">Nom encodé en JSON de la propriété à écrire.</param>
      <param name="bytes" vsli:raw="The binary data to write as Base64 encoded text.">Données binaires à écrire sous forme de texte encodé Base64.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">La valeur spécifiée est trop grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">La validation est activée, mais cette méthode entraînerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64StringValue(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the raw bytes value as a Base64 encoded JSON string as an element of a JSON array.">Écrit la valeur d’octets bruts sous forme de chaîne JSON encodée en Base64 comme élément d’un tableau JSON.</summary>
      <param name="bytes" vsli:raw="The binary data to be written as a Base64 encoded JSON string element of a JSON array.">Données binaires à écrire sous forme d’un élément de chaîne JSON encodé en Base64 d’un tableau JSON.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">La valeur spécifiée est trop grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">La validation est activée, mais cette méthode entraînerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Byte},System.Boolean)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value (as a JSON literal true or false) as part of a name/value pair of a JSON object.">Écrit un nom de propriété spécifié sous la forme d’une étendue en lecture seule d’octets et une valeur <see cref="T:System.Boolean" /> (sous la forme d’un littéral JSON true ou false) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</param>
      <param name="value" vsli:raw="The value to be written as a JSON literal true or false as part of the name/value pair.">Valeur à écrire sous forme d’un littéral JSON true ou false dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Char},System.Boolean)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value (as a JSON literal true or false) as part of a name/value pair of a JSON object.">Écrit un nom de propriété spécifié sous la forme d’une étendue de caractères en lecture seule et une valeur <see cref="T:System.Boolean" /> (sous la forme d’un littéral JSON true ou false) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON literal true or false as part of the name/value pair.">Valeur à écrire sous forme d’un littéral JSON true ou false dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.String,System.Boolean)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value (as a JSON literal true or false) as part of a name/value pair of a JSON object.">Écrit un nom de propriété spécifié sous la forme d’une chaîne et une valeur <see cref="T:System.Boolean" /> (sous la forme d’un littéral JSON true ou false) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON literal true or false as part of the name/value pair.">Valeur à écrire sous forme d’un littéral JSON true ou false dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="propertyName" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.Text.Json.JsonEncodedText,System.Boolean)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value (as a JSON literal true or false) as part of a name/value pair of a JSON object.">Écrit le nom de propriété préencodé et la valeur <see cref="T:System.Boolean" /> (sous la forme d’un littéral JSON true ou false) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété encodé en JSON de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON literal true or false as part of the name/value pair.">Valeur à écrire sous forme d’un littéral JSON true ou false dans la paire nom/valeur.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">La validation est activée, mais cette méthode entraînerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBooleanValue(System.Boolean)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value (as a JSON literal true or false) as an element of a JSON array.">Écrit une valeur <see cref="T:System.Boolean" /> (sous la forme d’un littéral JSON true ou false) comme élément d’un tableau JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON literal true or false as an element of a JSON array.">Valeur à écrire sous la forme d’un littéral JSON true ou false comme élément d’un tableau JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a UTF-8 text value as a JSON comment.">Écrit une valeur texte UTF-8 sous la forme d’un commentaire JSON.</summary>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON comment within &lt;c&gt;/*..*/&lt;/c&gt;.">Valeur encodée au format UTF-8 à écrire sous la forme d’un commentaire JSON dans /*..*/.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.&#xA;        &#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;utf8Value&quot; /&gt; contains a comment delimiter (that is, &lt;c&gt;*/&lt;/c&gt;).">La valeur spécifiée est trop grande.
-ou-
<paramref name="utf8Value" /> contient un délimiteur de commentaire (c.-à-d. */).</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a UTF-16 text value as a JSON comment.">Écrit une valeur texte UTF-16 sous la forme d’un commentaire JSON.</summary>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within &lt;c&gt;/*..*/&lt;/c&gt;.">Valeur encodée au format UTF-16 à écrire sous la forme d’un commentaire JSON transcodé au format UTF-8 dans /*..*/.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.&#xA;        &#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;value&quot; /&gt; contains a comment delimiter (that is, &lt;c&gt;*/&lt;/c&gt;).">La valeur spécifiée est trop grande.
-ou-
<paramref name="value" /> contient un délimiteur de commentaire (c.-à-d. */).</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.String)">
      <summary vsli:raw="Writes a string text value as a JSON comment.">Écrit la valeur texte de chaîne sous la forme d’un commentaire JSON.</summary>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within &lt;c&gt;/*..*/&lt;/c&gt;.">Valeur encodée au format UTF-16 à écrire sous la forme d’un commentaire JSON transcodé au format UTF-8 dans /*..*/.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.&#xA;        &#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;value&quot; /&gt; contains a comment delimiter (that is, &lt;c&gt;*/&lt;/c&gt;).">La valeur spécifiée est trop grande.
-ou-
<paramref name="value" /> contient un délimiteur de commentaire (c.-à-d. */).</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;value&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteEndArray">
      <summary vsli:raw="Writes the end of a JSON array.">Écrit la fin d’un tableau JSON.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteEndObject">
      <summary vsli:raw="Writes the end of a JSON object.">Écrit la fin d’un objet JSON.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and the JSON literal null as part of a name/value pair of a JSON object.">Écrit un nom de propriété spécifié sous la forme d’une étendue en lecture seule d’octets et le littéral null JSON dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a property name specified as a read-only character span and the JSON literal null as part of a name/value pair of a JSON object.">Écrit un nom de propriété spécifié sous la forme d’une étendue de caractères en lecture seule et le littéral JSON null dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.String)">
      <summary vsli:raw="Writes a property name specified as a string and the JSON literal null as part of a name/value pair of a JSON object.">Écrit un nom de propriété spécifié sous la forme d’une chaîne et le littéral JSON null dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="propertyName" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the pre-encoded property name and the JSON literal null as part of a name/value pair of a JSON object.">Écrit le nom de propriété préencodé et le littéral JSON null dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété encodé en JSON de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">La validation est activée, mais cette méthode entraînerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNullValue">
      <summary vsli:raw="Writes the JSON literal null as an element of a JSON array.">Écrit le littéral JSON null comme élément d’un tableau JSON.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Decimal)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Écrit un nom de propriété spécifié sous la forme d’une étendue en lecture seule d’octets et une valeur <see cref="T:System.Decimal" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Double)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.Double&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Écrit un nom de propriété spécifié sous la forme d’une étendue en lecture seule d’octets et une valeur <see cref="T:System.Double" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int32)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and an &lt;see cref=&quot;T:System.Int32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Écrit un nom de propriété spécifié sous la forme d’une étendue en lecture seule d’octets et une valeur <see cref="T:System.Int32" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int64)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and an &lt;see cref=&quot;T:System.Int64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Écrit un nom de propriété spécifié sous la forme d’une étendue en lecture seule d’octets et une valeur <see cref="T:System.Int64" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Single)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.Single&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Écrit un nom de propriété spécifié sous la forme d’une étendue en lecture seule d’octets et une valeur <see cref="T:System.Single" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt32)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Écrit un nom de propriété spécifié sous la forme d’une étendue en lecture seule d’octets et une valeur <see cref="T:System.UInt32" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt64)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Écrit un nom de propriété spécifié sous la forme d’une étendue en lecture seule d’octets et une valeur <see cref="T:System.UInt64" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Decimal)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Écrit un nom de propriété spécifié sous la forme d’une étendue de caractères en lecture seule et une valeur <see cref="T:System.Decimal" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Double)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.Double&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Écrit un nom de propriété spécifié sous la forme d’une étendue de caractères en lecture seule et une valeur <see cref="T:System.Double" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int32)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and an &lt;see cref=&quot;T:System.Int32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Écrit un nom de propriété spécifié sous la forme d’une étendue de caractères en lecture seule et une valeur <see cref="T:System.Int32" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int64)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and an &lt;see cref=&quot;T:System.Int64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Écrit un nom de propriété spécifié sous la forme d’une étendue de caractères en lecture seule et une valeur <see cref="T:System.Int64" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Single)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.Single&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Écrit un nom de propriété spécifié sous la forme d’une étendue de caractères en lecture seule et une valeur <see cref="T:System.Single" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt32)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Écrit un nom de propriété spécifié sous la forme d’une étendue de caractères en lecture seule et une valeur <see cref="T:System.UInt32" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt64)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Écrit un nom de propriété spécifié sous la forme d’une étendue de caractères en lecture seule et une valeur <see cref="T:System.UInt64" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Decimal)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Écrit un nom de propriété spécifié sous la forme d’une chaîne et une valeur <see cref="T:System.Decimal" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="propertyName" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Double)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.Double&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Écrit un nom de propriété spécifié sous la forme d’une chaîne et une valeur <see cref="T:System.Double" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="propertyName" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int32)">
      <summary vsli:raw="Writes a property name specified as a string and an &lt;see cref=&quot;T:System.Int32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Écrit un nom de propriété spécifié sous la forme d’une chaîne et une valeur <see cref="T:System.Int32" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="propertyName" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int64)">
      <summary vsli:raw="Writes a property name specified as a string and an &lt;see cref=&quot;T:System.Int64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Écrit un nom de propriété spécifié sous la forme d’une chaîne et une valeur <see cref="T:System.Int64" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="propertyName" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Single)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.Single&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Écrit un nom de propriété spécifié sous la forme d’une chaîne et une valeur <see cref="T:System.Single" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="propertyName" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt32)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Écrit un nom de propriété spécifié sous la forme d’une chaîne et une valeur <see cref="T:System.UInt32" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="propertyName" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt64)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Écrit un nom de propriété spécifié sous la forme d’une chaîne et une valeur <see cref="T:System.UInt64" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="propertyName" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Decimal)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Écrit le nom de propriété préencodé et la valeur <see cref="T:System.Decimal" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété encodé en JSON de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">La validation est activée, mais cette méthode entraînerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Double)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Double&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Écrit le nom de propriété préencodé et la valeur <see cref="T:System.Double" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété encodé en JSON de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">La validation est activée, mais cette méthode entraînerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int32)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Int32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Écrit le nom de propriété préencodé et la valeur <see cref="T:System.Int32" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété encodé en JSON de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">La validation est activée, mais cette méthode entraînerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int64)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Int64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Écrit le nom de propriété préencodé et la valeur <see cref="T:System.Int64" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété encodé en JSON de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">La validation est activée, mais cette méthode entraînerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Single)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Single&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Écrit le nom de propriété préencodé et la valeur <see cref="T:System.Single" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété encodé en JSON de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">La validation est activée, mais cette méthode entraînerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt32)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Écrit le nom de propriété préencodé et la valeur <see cref="T:System.UInt32" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété encodé en JSON de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">La validation est activée, mais cette méthode entraînerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt64)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Écrit le nom de propriété préencodé et la valeur <see cref="T:System.UInt64" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété encodé en JSON de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">La validation est activée, mais cette méthode entraînerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Decimal)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value (as a JSON number) as an element of a JSON array.">Écrit une valeur <see cref="T:System.Decimal" /> (sous la forme d’un nombre JSON) comme élément d’un tableau JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">Valeur à écrire sous la forme d’un nombre JSON comme élément d’un tableau JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Double)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Double&quot; /&gt; value (as a JSON number) as an element of a JSON array.">Écrit une valeur <see cref="T:System.Double" /> (sous la forme d’un nombre JSON) comme élément d’un tableau JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">Valeur à écrire sous la forme d’un nombre JSON comme élément d’un tableau JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int32)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int32&quot; /&gt; value (as a JSON number) as an element of a JSON array.">Écrit une valeur <see cref="T:System.Int32" /> (sous la forme d’un nombre JSON) comme élément d’un tableau JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">Valeur à écrire sous la forme d’un nombre JSON comme élément d’un tableau JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int64)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int64&quot; /&gt; value (as a JSON number) as an element of a JSON array.">Écrit une valeur <see cref="T:System.Int64" /> (sous la forme d’un nombre JSON) comme élément d’un tableau JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">Valeur à écrire sous la forme d’un nombre JSON comme élément d’un tableau JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Single)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Single&quot; /&gt; value (as a JSON number) as an element of a JSON array.">Écrit une valeur <see cref="T:System.Single" /> (sous la forme d’un nombre JSON) comme élément d’un tableau JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">Valeur à écrire sous la forme d’un nombre JSON comme élément d’un tableau JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt32)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value (as a JSON number) as an element of a JSON array.">Écrit une valeur <see cref="T:System.UInt32" /> (sous la forme d’un nombre JSON) comme élément d’un tableau JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">Valeur à écrire sous la forme d’un nombre JSON comme élément d’un tableau JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt64)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value (as a JSON number) as an element of a JSON array.">Écrit une valeur <see cref="T:System.UInt64" /> (sous la forme d’un nombre JSON) comme élément d’un tableau JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">Valeur à écrire sous la forme d’un nombre JSON comme élément d’un tableau JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the UTF-8 property name (as a JSON string) as the first part of a name/value pair of a JSON object.">Écrit le nom de propriété UTF-8 (sous la forme d’une chaîne JSON) dans la première partie d’une paire nom/valeur d’un objet JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this write operation would produce invalid JSON.">La validation est activée, et cette opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes the property name (as a JSON string) as the first part of a name/value pair of a JSON object.">Écrit le nom de propriété (sous la forme d’une chaîne JSON) dans la première partie d’une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this write operation would produce invalid JSON.">La validation est activée, et cette opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.String)">
      <summary vsli:raw="Writes the property name (as a JSON string) as the first part of a name/value pair of a JSON object.">Écrit le nom de propriété (sous la forme d’une chaîne JSON) dans la première partie d’une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this write operation would produce invalid JSON.">La validation est activée, et cette opération d’écriture produirait un JSON non valide.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the pre-encoded property name (as a JSON string) as the first part of a name/value pair of a JSON object.">Écrit le nom de propriété préencodé (sous la forme d’une chaîne JSON) dans la première partie d’une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété encodé en JSON de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this write operation would produce invalid JSON.">La validation est activée, et cette opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray">
      <summary vsli:raw="Writes the beginning of a JSON array.">Écrit le début d’un tableau JSON.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000.&#xA;&#xA;-or-&#xA;&#xA;Validation is enabled, and this write operation would produce invalid JSON.">La profondeur du JSON dépasse la profondeur maximale de 1 000.
-ou-
La validation est activée, et cette opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the beginning of a JSON array with a property name specified as a read-only span of bytes as the key.">Écrit le début d’un tableau JSON avec un nom de propriété spécifié sous la forme d’une étendue en lecture seule d’octets comme clé.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON array to be written.">Nom de propriété encodé en UTF-8 du tableau JSON à écrire.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000.&#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">La profondeur du JSON dépasse la profondeur maximale de 1 000.
-ou-
La validation est activée, et cette opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes the beginning of a JSON array with a property name specified as a read-only character span as the key.">Écrit le début d’un tableau JSON avec un nom de propriété spécifié sous la forme d’une étendue de caractères en lecture seule comme clé.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.">Nom de propriété encodé en UTF-16 du tableau JSON à transcoder et à écrire au format UTF-8.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000.&#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">La profondeur du JSON dépasse la profondeur maximale de 1 000.
-ou-
La validation est activée, et cette opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.String)">
      <summary vsli:raw="Writes the beginning of a JSON array with a property name specified as a string as the key.">Écrit le début d’un tableau JSON avec un nom de propriété spécifié sous la forme d’une chaîne comme clé.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.">Nom de propriété encodé en UTF-16 du tableau JSON à transcoder et à écrire au format UTF-8.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000.&#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">La profondeur du JSON dépasse la profondeur maximale de 1 000.
-ou-
La validation est activée, et cette opération d’écriture produirait un JSON non valide.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="propertyName" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the beginning of a JSON array with a pre-encoded property name as the key.">Écrit le début d’un tableau JSON avec un nom de propriété préencodé comme clé.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON array to be transcoded and written as UTF-8.">Nom de propriété encodé en JSON du tableau JSON à transcoder et à écrire au format UTF-8.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON has exceeded the maximum depth of 1,000.&#xA;    &#xA;-or-&#xA;&#xA;Validation is enabled, and this method would result in writing invalid JSON.">La profondeur du texte JSON a dépassé la profondeur maximale de 1 000.
-ou-
La validation est activée, mais cette méthode entraînerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject">
      <summary vsli:raw="Writes the beginning of a JSON object.">Écrit le début d’un objet JSON.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000.&#xA;&#xA;-or-&#xA;&#xA;Validation is enabled, and the operation would result in writing invalid JSON.">La profondeur du JSON dépasse la profondeur maximale de 1 000.
-ou-
La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the beginning of a JSON object with a property name specified as a read-only span of bytes as the key.">Écrit le début d’un objet JSON avec un nom de propriété spécifié sous la forme d’une étendue en lecture seule d’octets comme clé.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000. &#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">La profondeur du JSON dépasse la profondeur maximale de 1 000.
-ou-
La validation est activée, et cette opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes the beginning of a JSON object with a property name specified as a read-only character span as the key.">Écrit le début d’un objet JSON avec un nom de propriété spécifié sous la forme d’une étendue de caractères en lecture seule comme clé.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000. &#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">La profondeur du JSON dépasse la profondeur maximale de 1 000.
-ou-
La validation est activée, et cette opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.String)">
      <summary vsli:raw="Writes the beginning of a JSON object with a property name specified as a string as the key.">Écrit le début d’un objet JSON avec un nom de propriété spécifié sous la forme d’une chaîne comme clé.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000. &#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">La profondeur du JSON dépasse la profondeur maximale de 1 000.
-ou-
La validation est activée, et cette opération d’écriture produirait un JSON non valide.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="propertyName" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the beginning of a JSON object with a pre-encoded property name as the key.">Écrit le début d’un objet JSON avec un nom de propriété préencodé comme clé.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété encodé en JSON de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON has exceeded the maximum depth of 1,000.&#xA;          &#xA;-or-&#xA;&#xA;Validation is enabled, and this method would result in writing invalid JSON.">La profondeur du texte JSON a dépassé la profondeur maximale de 1 000.
-ou-
La validation est activée, mais cette méthode entraînerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTime)">
      <summary vsli:raw="Writes a UTF-8 property name and a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Écrit un nom de propriété UTF-8 et une valeur <see cref="T:System.DateTime" /> (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Valeur à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTimeOffset)">
      <summary vsli:raw="Writes a UTF-8 property name and a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Écrit un nom de propriété UTF-8 et une valeur <see cref="T:System.DateTimeOffset" /> (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Valeur à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Guid)">
      <summary vsli:raw="Writes a UTF-8 property name and a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Écrit un nom de propriété UTF-8 et une valeur <see cref="T:System.Guid" /> (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Valeur à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a UTF-8 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.">Écrit un nom de propriété UTF-8 et une valeur texte UTF-8 (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</param>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.">Valeur encodée en UTF-8 à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">La taille du nom ou de la valeur de la propriété spécifiée est trop grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a UTF-8 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.">Écrit un nom de propriété UTF-8 et une valeur texte UTF-16 (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Valeur encodée en UTF-16 à écrire sous la forme d’une chaîne JSON transcodée en UTF-8 dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">La taille du nom ou de la valeur de la propriété spécifiée est trop grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.String)">
      <summary vsli:raw="Writes a UTF-8 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.">Écrit un nom de propriété UTF-8 et une valeur texte de chaîne (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Valeur encodée en UTF-16 à écrire sous la forme d’une chaîne JSON transcodée en UTF-8 dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">La taille du nom ou de la valeur de la propriété spécifiée est trop grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the UTF-8 property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.">Écrit le nom de propriété UTF-8 et la valeur préencodée (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</param>
      <param name="value" vsli:raw="The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Valeur encodée en JSON à écrire sous forme de chaîne JSON transcodée en UTF-8 dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">La validation est activée, mais cette méthode entraînerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTime)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Écrit un nom de propriété spécifié sous la forme d’une étendue de caractères en lecture seule et une valeur <see cref="T:System.DateTime" /> (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Valeur à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTimeOffset)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Écrit un nom de propriété spécifié sous la forme d’une étendue de caractères en lecture seule et une valeur <see cref="T:System.DateTimeOffset" /> (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Valeur à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Guid)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Écrit un nom de propriété spécifié sous la forme d’une étendue de caractères en lecture seule et une valeur <see cref="T:System.Guid" /> (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Valeur à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a UTF-16 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.">Écrit un nom de propriété UTF-16 et une valeur texte UTF-8 (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.">Valeur encodée en UTF-8 à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">La taille du nom ou de la valeur de la propriété spécifiée est trop grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a UTF-16 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.">Écrit un nom de propriété UTF-16 et une valeur texte UTF-16 (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Valeur encodée en UTF-16 à écrire sous la forme d’une chaîne JSON transcodée en UTF-8 dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">La taille du nom ou de la valeur de la propriété spécifiée est trop grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.String)">
      <summary vsli:raw="Writes a UTF-16 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.">Écrit un nom de propriété UTF-16 et une valeur texte de chaîne (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Valeur encodée en UTF-16 à écrire sous la forme d’une chaîne JSON transcodée en UTF-8 dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">La taille du nom ou de la valeur de la propriété spécifiée est trop grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.">Écrit le nom de propriété et la valeur préencodée (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value" vsli:raw="The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Valeur encodée en JSON à écrire sous forme de chaîne JSON transcodée en UTF-8 dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTime)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Écrit un nom de propriété spécifié sous la forme d’une chaîne et une valeur <see cref="T:System.DateTime" /> (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Valeur à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="propertyName" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTimeOffset)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Écrit un nom de propriété spécifié sous la forme d’une chaîne et une valeur <see cref="T:System.DateTimeOffset" /> (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Valeur à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="propertyName" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Guid)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Écrit un nom de propriété spécifié sous la forme d’une chaîne et une valeur <see cref="T:System.Guid" /> (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Valeur à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="propertyName" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a property name specified as a string and a UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.">Écrit un nom de propriété spécifié sous la forme d’une chaîne et une valeur texte UTF-8 (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.">Valeur encodée en UTF-8 à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">La taille du nom ou de la valeur de la propriété spécifiée est trop grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="propertyName" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a property name specified as a string and a UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.">Écrit un nom de propriété spécifié sous la forme d’une chaîne et une valeur texte UTF-16 (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Valeur encodée en UTF-16 à écrire sous la forme d’une chaîne JSON transcodée en UTF-8 dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">La taille du nom ou de la valeur de la propriété spécifiée est trop grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="propertyName" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.String)">
      <summary vsli:raw="Writes a property name specified as a string and a string text value (as a JSON string) as part of a name/value pair of a JSON object.">Écrit un nom de propriété spécifié sous la forme d’une chaîne et une valeur texte de chaîne (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Valeur encodée en UTF-16 à écrire sous la forme d’une chaîne JSON transcodée en UTF-8 dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">La taille du nom ou de la valeur de la propriété spécifiée est trop grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="propertyName" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.">Écrit le nom de propriété et la valeur préencodée (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value" vsli:raw="The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Valeur encodée en JSON à écrire sous forme de chaîne JSON transcodée en UTF-8 dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="propertyName" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTime)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Écrit le nom de propriété préencodé et la valeur <see cref="T:System.DateTime" /> (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété encodé en JSON de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Valeur à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTimeOffset)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Écrit le nom de propriété préencodé et la valeur <see cref="T:System.DateTimeOffset" /> (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété encodé en JSON de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Valeur à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Guid)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Guid&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Écrit le nom de propriété préencodé et la valeur <see cref="T:System.Guid" /> (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété encodé en JSON de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">Valeur à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the pre-encoded property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.">Écrit le nom de propriété préencodé et la valeur texte UTF-8 (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété encodé en JSON de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.">Valeur encodée en UTF-8 à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">La valeur spécifiée est trop grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes the pre-encoded property name and text value (as a JSON string) as part of a name/value pair of a JSON object.">Écrit le nom de propriété préencodé et la valeur texte (sous forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété encodé en JSON de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Valeur à écrire sous forme de chaîne JSON transcodée en UTF-8 dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">La valeur spécifiée est trop grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.String)">
      <summary vsli:raw="Writes the pre-encoded property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.">Écrit le nom de propriété préencodé et la valeur texte de chaîne (sous forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété encodé en JSON de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Valeur à écrire sous forme de chaîne JSON transcodée en UTF-8 dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">La valeur spécifiée est trop grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the pre-encoded property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.">Écrit le nom de propriété préencodé et la valeur préencodée (sous forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">Nom de propriété encodé en JSON de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value" vsli:raw="The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">Valeur encodée en JSON à écrire sous forme de chaîne JSON transcodée en UTF-8 dans la paire nom/valeur.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTime)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value (as a JSON string) as an element of a JSON array.">Écrit une valeur <see cref="T:System.DateTime" /> (sous la forme d’une chaîne JSON) comme élément d’un tableau JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON string as an element of a JSON array.">Valeur à écrire sous la forme d’une chaîne JSON comme élément d’un tableau JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTimeOffset)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value (as a JSON string) as an element of a JSON array.">Écrit une valeur <see cref="T:System.DateTimeOffset" /> (sous la forme d’une chaîne JSON) comme élément d’un tableau JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON string as an element of a JSON array.">Valeur à écrire sous la forme d’une chaîne JSON comme élément d’un tableau JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Guid)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value (as a JSON string) as an element of a JSON array.">Écrit une valeur <see cref="T:System.Guid" /> (sous la forme d’une chaîne JSON) comme élément d’un tableau JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON string as an element of a JSON array.">Valeur à écrire sous la forme d’une chaîne JSON comme élément d’un tableau JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a UTF-8 text value (as a JSON string) as an element of a JSON array.">Écrit une valeur texte UTF-8 (sous la forme d’une chaîne JSON) comme élément d’un tableau JSON.</summary>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON string element of a JSON array.">Valeur encodée en UTF-8 à écrire sous la forme d’un élément de chaîne JSON d’un tableau JSON.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">La valeur spécifiée est trop grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a UTF-16 text value (as a JSON string) as an element of a JSON array.">Écrit une valeur texte UTF-16 (sous la forme d’une chaîne JSON) comme élément d’un tableau JSON.</summary>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.">Valeur encodée en UTF-16 à écrire sous la forme d’un élément de chaîne JSON encodé en UTF-8 d’un tableau JSON.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">La valeur spécifiée est trop grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.String)">
      <summary vsli:raw="Writes a string text value (as a JSON string) as an element of a JSON array.">Écrit une valeur texte de chaîne (sous la forme d’une chaîne JSON) comme élément d’un tableau JSON.</summary>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.">Valeur encodée en UTF-16 à écrire sous la forme d’un élément de chaîne JSON encodé en UTF-8 d’un tableau JSON.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">La valeur spécifiée est trop grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the pre-encoded text value (as a JSON string) as an element of a JSON array.">Écrit la valeur texte préencodée (sous la forme d’une chaîne JSON) comme élément d’un tableau JSON.</summary>
      <param name="value" vsli:raw="The JSON encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.">Valeur encodée en JSON à écrire sous la forme d’un élément de chaîne JSON encodé en UTF-8 d’un tableau JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
  </members>
</doc>
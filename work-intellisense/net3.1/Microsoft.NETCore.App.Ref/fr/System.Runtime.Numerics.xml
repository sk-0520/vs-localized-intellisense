<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime.Numerics</name>
  </assembly>
  <members>
    <member name="T:System.Numerics.BigInteger">
      <summary>Représente un entier signé arbitrairement grand.</summary>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Byte[])">
      <summary>Initialise une nouvelle instance de la structure <see cref="T:System.Numerics.BigInteger" /> à l'aide des valeurs d'un tableau d'octets.</summary>
      <param name="value">Tableau de valeurs d'octets respectant un ordre avec primauté des octets de poids faible (little-endian).</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Decimal)">
      <summary>Initialise une nouvelle instance de la structure <see cref="T:System.Numerics.BigInteger" /> à l'aide d'une valeur <see cref="T:System.Decimal" />.</summary>
      <param name="value">Nombre décimal.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Double)">
      <summary>Initialise une nouvelle instance de la structure <see cref="T:System.Numerics.BigInteger" /> à l'aide d'une valeur à virgule flottante double précision.</summary>
      <param name="value">Valeur à virgule flottante double précision.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> a la valeur <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" /> ou <see cref="F:System.Double.PositiveInfinity" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Int32)">
      <summary>Initialise une nouvelle instance de la structure <see cref="T:System.Numerics.BigInteger" /> à l'aide d'une valeur d'entier 32 bits signé.</summary>
      <param name="value">Entier signé 32 bits.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Int64)">
      <summary>Initialise une nouvelle instance de la structure <see cref="T:System.Numerics.BigInteger" /> à l’aide d’une valeur d’entier 64 bits signé.</summary>
      <param name="value">Entier signé 64 bits.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.ReadOnlySpan{System.Byte},System.Boolean,System.Boolean)">
      <summary>Initialise une nouvelle instance de la structure <see cref="T:System.Numerics.BigInteger" /> à l’aide des valeurs d’une étendue en lecture seule d’octets et indique éventuellement l’encodage de signature et l’ordre d’octet en mode Endian.</summary>
      <param name="value">Étendue en lecture seule d’octets représentant l’entier très grand.</param>
      <param name="isUnsigned">
        <see langword="true" /> pour indiquer que <paramref name="value" /> utilise l’encodage non signé ; sinon, <see langword="false" /> (valeur par défaut).</param>
      <param name="isBigEndian">
        <see langword="true" /> pour indiquer que <paramref name="value" /> est dans un ordre d’octet de poids fort (big-endian) ; sinon, <see langword="false" /> (valeur par défaut).</param>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Single)">
      <summary>Initialise une nouvelle instance de la structure <see cref="T:System.Numerics.BigInteger" /> à l'aide d'une valeur à virgule flottante simple précision.</summary>
      <param name="value">Valeur à virgule flottante simple précision.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> a la valeur <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NegativeInfinity" /> ou <see cref="F:System.Single.PositiveInfinity" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.UInt32)">
      <summary>Initialise une nouvelle instance de la structure <see cref="T:System.Numerics.BigInteger" /> à l'aide d'une valeur entière 32 bits non signée.</summary>
      <param name="value">Valeur d'entier 32 bits non signé.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.UInt64)">
      <summary>Initialise une nouvelle instance de la structure <see cref="T:System.Numerics.BigInteger" /> à l'aide d'une valeur entière 64 bits non signée.</summary>
      <param name="value">Entier 64 bits non signé.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.Abs(System.Numerics.BigInteger)">
      <summary>Obtient la valeur absolue d'un objet <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value">Nombre.</param>
      <returns>Valeur absolue de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Add(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Ajoute deux valeurs <see cref="T:System.Numerics.BigInteger" /> et retourne le résultat.</summary>
      <param name="left">Première valeur à ajouter.</param>
      <param name="right">Seconde valeur à ajouter.</param>
      <returns>Somme de <paramref name="left" /> et <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Compare deux valeurs <see cref="T:System.Numerics.BigInteger" /> et retourne un entier qui indique si la première valeur est inférieure, égale ou supérieure à la seconde valeur.</summary>
      <param name="left">Première valeur à comparer.</param>
      <param name="right">Deuxième valeur à comparer.</param>
      <returns>Entier signé qui indique les valeurs relatives de <paramref name="left" /> et <paramref name="right" />, comme indiqué dans le tableau suivant.
  Value 
  Condition 
  Inférieure à zéro 
 <paramref name="left" /> est inférieur à <paramref name="right" />.  
  
  Zéro 
 <paramref name="left" /> est égal à <paramref name="right" />.  
  
  Supérieure à zéro 
 <paramref name="left" /> est supérieur à <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.CompareTo(System.Int64)">
      <summary>Compare cette instance à un entier 64 bits signé et retourne un entier qui indique si la valeur de cette instance est inférieure, égale ou supérieure à la valeur de l'entier 64 bits signé.</summary>
      <param name="other">Entier 64 bits signé à comparer.</param>
      <returns>Valeur entière signée qui indique la relation de cette instance par rapport à <paramref name="other" />, comme indiqué dans le tableau suivant.
  Valeur de retour 
  Description 
  Inférieure à zéro 
  L'instance actuelle est inférieure à <paramref name="other" />.  
  
  Zéro 
  L'instance actuelle est égale à <paramref name="other" />.  
  
  Supérieure à zéro 
  L'instance actuelle est supérieure à <paramref name="other" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)">
      <summary>Compare cette instance à un second <see cref="T:System.Numerics.BigInteger" /> et retourne un entier qui indique si la valeur de l'instance est inférieure, égale ou supérieure à la valeur de l'objet spécifié.</summary>
      <param name="other">Objet à comparer.</param>
      <returns>Valeur entière signée qui indique la relation de cette instance par rapport à <paramref name="other" />, comme indiqué dans le tableau suivant.
  Valeur de retour 
  Description 
  Inférieure à zéro 
  L'instance actuelle est inférieure à <paramref name="other" />.  
  
  Zéro 
  L'instance actuelle est égale à <paramref name="other" />.  
  
  Supérieure à zéro 
  L'instance actuelle est supérieure à <paramref name="other" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.CompareTo(System.Object)">
      <summary>Compare cette instance à un objet spécifié et retourne un entier qui indique si la valeur de cette instance est inférieure, égale ou supérieure à la valeur de l'objet spécifié.</summary>
      <param name="obj">Objet à comparer.</param>
      <returns>Entier signé qui indique la relation de l'instance actuelle par rapport au paramètre <paramref name="obj" />, comme indiqué dans le tableau suivant.
  Valeur de retour 
  Description 
  Inférieure à zéro 
  L'instance actuelle est inférieure à <paramref name="obj" />.  
  
  Zéro 
  L'instance actuelle est égale à <paramref name="obj" />.  
  
  Supérieure à zéro 
  L'instance actuelle est supérieure à <paramref name="obj" /> ou le paramètre <paramref name="obj" /> est <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> n’est pas un <see cref="T:System.Numerics.BigInteger" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.CompareTo(System.UInt64)">
      <summary>Compare cette instance à un entier 64 bits non signé et retourne un entier qui indique si la valeur de cette instance est inférieure, égale ou supérieure à la valeur de l'entier 64 bits non signé.</summary>
      <param name="other">Entier 64 bits non signé à comparer.</param>
      <returns>Entier signé qui indique la valeur relative de cette instance et de <paramref name="other" />, comme indiqué dans le tableau suivant.
Valeur de retourDescriptionInférieure à zéroL'instance actuelle est inférieure à <paramref name="other" />.ZéroL'instance actuelle est égale à <paramref name="other" />.Supérieure à zéroL'instance actuelle est supérieure à <paramref name="other" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Divise une valeur <see cref="T:System.Numerics.BigInteger" /> par une autre et retourne le résultat.</summary>
      <param name="dividend">Valeur à diviser.</param>
      <param name="divisor">Valeur par laquelle diviser.</param>
      <returns>Quotient de la division.</returns>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="divisor" /> est égal à 0 (zéro).</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)">
      <summary>Divise une valeur <see cref="T:System.Numerics.BigInteger" /> par une autre, retourne le résultat, puis retourne le modulo dans un paramètre de sortie.</summary>
      <param name="dividend">Valeur à diviser.</param>
      <param name="divisor">Valeur par laquelle diviser.</param>
      <param name="remainder">Lorsque cette méthode est retournée, contient une valeur <see cref="T:System.Numerics.BigInteger" /> qui représente le modulo de la division. Ce paramètre est passé sans être initialisé.</param>
      <returns>Quotient de la division.</returns>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="divisor" /> est égal à 0 (zéro).</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Equals(System.Int64)">
      <summary>Retourne une valeur qui indique si l'instance actuelle et un entier 64 bits signé ont la même valeur.</summary>
      <param name="other">Valeur entière 64 bits signée à comparer.</param>
      <returns>
        <see langword="true" /> si l'entier 64 bits signé et l'instance actuelle ont la même valeur ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)">
      <summary>Retourne une valeur qui indique si l'instance actuelle et un objet <see cref="T:System.Numerics.BigInteger" /> spécifié ont la même valeur.</summary>
      <param name="other">Objet à comparer.</param>
      <returns>
        <see langword="true" /> si cet objet <see cref="T:System.Numerics.BigInteger" /> et <paramref name="other" /> ont la même valeur ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Equals(System.Object)">
      <summary>Retourne une valeur qui indique si l'instance actuelle et un objet spécifié ont la même valeur.</summary>
      <param name="obj">Objet à comparer.</param>
      <returns>
        <see langword="true" /> si l’argument <paramref name="obj" /> est un objet <see cref="T:System.Numerics.BigInteger" /> et si sa valeur est égale à la valeur de l’instance <see cref="T:System.Numerics.BigInteger" /> actuelle ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Equals(System.UInt64)">
      <summary>Retourne une valeur qui indique si l'instance actuelle et un entier 64 bits non signé ont la même valeur.</summary>
      <param name="other">Entier 64 bits non signé à comparer.</param>
      <returns>
        <see langword="true" /> si l'instance actuelle et l'entier 64 bits non signé ont la même valeur ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.GetByteCount(System.Boolean)">
      <summary>Obtient le nombre d’octets qui seront générés par <see cref="M:System.Numerics.BigInteger.ToByteArray(System.Boolean,System.Boolean)" /> et <see cref="M:System.Numerics.BigInteger.TryWriteBytes(System.Span{System.Byte},System.Int32@,System.Boolean,System.Boolean)" />.</summary>
      <param name="isUnsigned">
        <see langword="true" /> pour utiliser l’encodage non signé ; sinon, <see langword="false" />.</param>
      <returns>Nombre d’octets.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.GetHashCode">
      <summary>Retourne le code de hachage pour l'objet <see cref="T:System.Numerics.BigInteger" /> actuel.</summary>
      <returns>Code de hachage d'un entier signé 32 bits.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.GreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Recherche le plus grand commun diviseur de deux valeurs <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">Première valeur.</param>
      <param name="right">Seconde valeur.</param>
      <returns>Plus grand dénominateur commun de <paramref name="left" /> et <paramref name="right" />.</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.IsEven">
      <summary>Indique si la valeur de l'objet <see cref="T:System.Numerics.BigInteger" /> actif est un nombre pair.</summary>
      <returns>
        <see langword="true" /> si la valeur de l'objet <see cref="T:System.Numerics.BigInteger" /> est un nombre pair ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.IsOne">
      <summary>Indique si la valeur de l'objet <see cref="T:System.Numerics.BigInteger" /> actif est <see cref="P:System.Numerics.BigInteger.One" />.</summary>
      <returns>
        <see langword="true" /> si la valeur de l'objet <see cref="T:System.Numerics.BigInteger" /> est <see cref="P:System.Numerics.BigInteger.One" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.IsPowerOfTwo">
      <summary>Indique si la valeur de l'objet <see cref="T:System.Numerics.BigInteger" /> actif est une puissance de deux.</summary>
      <returns>
        <see langword="true" /> si la valeur de l'objet <see cref="T:System.Numerics.BigInteger" /> est une puissance de deux ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.IsZero">
      <summary>Indique si la valeur de l'objet <see cref="T:System.Numerics.BigInteger" /> actif est <see cref="P:System.Numerics.BigInteger.Zero" />.</summary>
      <returns>
        <see langword="true" /> si la valeur de l'objet <see cref="T:System.Numerics.BigInteger" /> est <see cref="P:System.Numerics.BigInteger.Zero" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Log(System.Numerics.BigInteger)">
      <summary>Retourne le logarithme naturel (base <see langword="e" />) d'un nombre spécifié.</summary>
      <param name="value">Nombre dont le logarithme doit être recherché.</param>
      <returns>Logarithme népérien (de base <see langword="e" />) de <paramref name="value" />, comme indiqué dans le tableau de la section Notes.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Le logarithme népérien de <paramref name="value" /> est hors des limites du type de données <see cref="T:System.Double" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Log(System.Numerics.BigInteger,System.Double)">
      <summary>Retourne le logarithme d'un nombre spécifié dans une base spécifiée.</summary>
      <param name="value">Nombre dont le logarithme doit être recherché.</param>
      <param name="baseValue">Base du logarithme.</param>
      <returns>Logarithme de base <paramref name="baseValue" /> de <paramref name="value" />, comme indiqué dans le tableau de la section Notes.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Le logarithme de <paramref name="value" /> est hors des limites du type de données <see cref="T:System.Double" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)">
      <summary>Retourne le logarithme de base 10 d'un nombre spécifié.</summary>
      <param name="value">Nombre dont le logarithme doit être recherché.</param>
      <returns>Logarithme de base 10 de <paramref name="value" />, comme indiqué dans le tableau de la section Notes.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Le logarithme de base 10 de <paramref name="value" /> est hors des limites du type de données <see cref="T:System.Double" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Max(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Retourne la plus grande des deux valeurs <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">Première valeur à comparer.</param>
      <param name="right">Deuxième valeur à comparer.</param>
      <returns>Paramètre <paramref name="left" /> ou <paramref name="right" /> (selon celui qui est le plus grand).</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Min(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Retourne la plus petite des deux valeurs <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">Première valeur à comparer.</param>
      <param name="right">Deuxième valeur à comparer.</param>
      <returns>Paramètre <paramref name="left" /> ou <paramref name="right" /> (selon celui qui est le plus petit).</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.MinusOne">
      <summary>Obtient une valeur qui représente le nombre moins un (-1).</summary>
      <returns>Entier dont la valeur est moins un (-1).</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ModPow(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Effectue une division avec coefficient sur un nombre élevé à la puissance d'un autre nombre.</summary>
      <param name="value">Nombre à élever à la puissance <paramref name="exponent" />.</param>
      <param name="exponent">Exposant de <paramref name="value" />.</param>
      <param name="modulus">Nombre par lequel diviser <paramref name="value" /> élevé à la puissance <paramref name="exponent" />.</param>
      <returns>Reste de la division de <paramref name="value" />exposant par <paramref name="modulus" />.</returns>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="modulus" /> est égal à zéro.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="exponent" /> est un nombre négatif.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Retourne le produit de deux valeurs <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">Premier nombre à multiplier.</param>
      <param name="right">Second nombre à multiplier.</param>
      <returns>Produit des paramètres <paramref name="left" /> et <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Negate(System.Numerics.BigInteger)">
      <summary>Rend négative la valeur <see cref="T:System.Numerics.BigInteger" /> spécifiée.</summary>
      <param name="value">Valeur à rendre négative.</param>
      <returns>Résultat de la multiplication du paramètre <paramref name="value" /> par moins un (-1).</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.One">
      <summary>Obtient une valeur qui représente le nombre un (1).</summary>
      <returns>Objet dont la valeur est un (1).</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Ajoute les valeurs des deux objets <see cref="T:System.Numerics.BigInteger" /> spécifiés.</summary>
      <param name="left">Première valeur à ajouter.</param>
      <param name="right">Seconde valeur à ajouter.</param>
      <returns>Somme de <paramref name="left" /> et <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_BitwiseAnd(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Effectue une opération de bits <see langword="And" /> sur deux valeurs <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">Première valeur.</param>
      <param name="right">Seconde valeur.</param>
      <returns>Résultat de l'opération de bits <see langword="And" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_BitwiseOr(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Effectue une opération de bits <see langword="Or" /> sur deux valeurs <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">Première valeur.</param>
      <param name="right">Seconde valeur.</param>
      <returns>Résultat de l'opération de bits <see langword="Or" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Decrement(System.Numerics.BigInteger)">
      <summary>Décrémente une valeur <see cref="T:System.Numerics.BigInteger" /> de 1.</summary>
      <param name="value">Valeur à décrémenter.</param>
      <returns>Valeur du paramètre <paramref name="value" /> décrémenté de 1.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Divise une valeur <see cref="T:System.Numerics.BigInteger" /> spécifique par une autre valeur <see cref="T:System.Numerics.BigInteger" /> spécifique à l'aide d'une division entière.</summary>
      <param name="dividend">Valeur à diviser.</param>
      <param name="divisor">Valeur par laquelle diviser.</param>
      <returns>Résultat intégral de la division.</returns>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="divisor" /> est égal à 0 (zéro).</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.Int64,System.Numerics.BigInteger)">
      <summary>Retourne une valeur qui indique si la valeur d'un entier long signé et la valeur <see cref="T:System.Numerics.BigInteger" /> sont égales.</summary>
      <param name="left">Première valeur à comparer.</param>
      <param name="right">Deuxième valeur à comparer.</param>
      <returns>
        <see langword="true" /> si les paramètres <paramref name="left" /> et <paramref name="right" /> ont la même valeur ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Int64)">
      <summary>Retourne une valeur qui indique si la valeur <see cref="T:System.Numerics.BigInteger" /> et la valeur d'un entier long signé sont égales.</summary>
      <param name="left">Première valeur à comparer.</param>
      <param name="right">Deuxième valeur à comparer.</param>
      <returns>
        <see langword="true" /> si les paramètres <paramref name="left" /> et <paramref name="right" /> ont la même valeur ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Retourne une valeur qui indique si les valeurs de deux objets <see cref="T:System.Numerics.BigInteger" /> sont égales.</summary>
      <param name="left">Première valeur à comparer.</param>
      <param name="right">Deuxième valeur à comparer.</param>
      <returns>
        <see langword="true" /> si les paramètres <paramref name="left" /> et <paramref name="right" /> ont la même valeur ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.UInt64)">
      <summary>Retourne une valeur qui indique si la valeur <see cref="T:System.Numerics.BigInteger" /> et la valeur d'un entier long non signé sont égales.</summary>
      <param name="left">Première valeur à comparer.</param>
      <param name="right">Deuxième valeur à comparer.</param>
      <returns>
        <see langword="true" /> si les paramètres <paramref name="left" /> et <paramref name="right" /> ont la même valeur ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.UInt64,System.Numerics.BigInteger)">
      <summary>Retourne une valeur qui indique si la valeur d'un entier long non signé et la valeur <see cref="T:System.Numerics.BigInteger" /> sont égales.</summary>
      <param name="left">Première valeur à comparer.</param>
      <param name="right">Deuxième valeur à comparer.</param>
      <returns>
        <see langword="true" /> si les paramètres <paramref name="left" /> et <paramref name="right" /> ont la même valeur ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_ExclusiveOr(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Effectue une opération de bits <see langword="Or" /> (<see langword="XOr" />) exclusive sur deux valeurs <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">Première valeur.</param>
      <param name="right">Seconde valeur.</param>
      <returns>Résultat de l'opération de bits <see langword="Or" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger">
      <summary>Définit une conversion explicite d'un objet <see cref="T:System.Decimal" /> en valeur <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value">Valeur à convertir en <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns>Objet qui contient la valeur du paramètre <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Double)~System.Numerics.BigInteger">
      <summary>Définit une conversion explicite d'une valeur <see cref="T:System.Double" /> en valeur <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value">Valeur à convertir en <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns>Objet qui contient la valeur du paramètre <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> a la valeur <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.PositiveInfinity" /> ou <see cref="F:System.Double.NegativeInfinity" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Byte">
      <summary>Définit une conversion explicite d'un objet <see cref="T:System.Numerics.BigInteger" /> en valeur d'octet non signée.</summary>
      <param name="value">Valeur à convertir en <see cref="T:System.Byte" />.</param>
      <returns>Objet qui contient la valeur du paramètre <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est inférieur à <see cref="F:System.Byte.MinValue" /> ou supérieur à <see cref="F:System.Byte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Decimal">
      <summary>Définit une conversion explicite d'un objet <see cref="T:System.Numerics.BigInteger" /> en valeur <see cref="T:System.Decimal" />.</summary>
      <param name="value">Valeur à convertir en <see cref="T:System.Decimal" />.</param>
      <returns>Objet qui contient la valeur du paramètre <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est inférieur à <see cref="F:System.Decimal.MinValue" /> ou supérieur à <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Double">
      <summary>Définit une conversion explicite d'un objet <see cref="T:System.Numerics.BigInteger" /> en valeur <see cref="T:System.Double" />.</summary>
      <param name="value">Valeur à convertir en <see cref="T:System.Double" />.</param>
      <returns>Objet qui contient la valeur du paramètre <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int16">
      <summary>Définit une conversion explicite d'un objet <see cref="T:System.Numerics.BigInteger" /> en valeur d'entier 16 bits signé.</summary>
      <param name="value">Valeur à convertir en entier 16 bits signé.</param>
      <returns>Objet qui contient la valeur du paramètre <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est inférieur à <see cref="F:System.Int16.MinValue" /> ou supérieur à <see cref="F:System.Int16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int32">
      <summary>Définit une conversion explicite d’un objet <see cref="T:System.Numerics.BigInteger" /> en valeur d’entier 32 bits signé.</summary>
      <param name="value">Valeur à convertir en entier 32 bits signé.</param>
      <returns>Objet qui contient la valeur du paramètre <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est inférieur à <see cref="F:System.Int32.MinValue" /> ou supérieur à <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int64">
      <summary>Définit une conversion explicite d’un objet <see cref="T:System.Numerics.BigInteger" /> en valeur d’entier 64 bits signé.</summary>
      <param name="value">Valeur à convertir en entier 64 bits signé.</param>
      <returns>Objet qui contient la valeur du paramètre <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est inférieur à <see cref="F:System.Int64.MinValue" /> ou supérieur à <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.SByte">
      <summary>Définit une conversion explicite d'un objet <see cref="T:System.Numerics.BigInteger" /> en valeur 8 bits signée.
Cette API n'est pas conforme CLS. L’alternative conforme est <see cref="T:System.Int16" />.</summary>
      <param name="value">Valeur à convertir en valeur 8 bits signée.</param>
      <returns>Objet qui contient la valeur du paramètre <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est inférieur à <see cref="F:System.SByte.MinValue" /> ou supérieur à <see cref="F:System.SByte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Single">
      <summary>Définit une conversion explicite d'un objet <see cref="T:System.Numerics.BigInteger" /> en valeur à virgule flottante simple précision.</summary>
      <param name="value">Valeur à convertir en valeur à virgule flottante simple précision.</param>
      <returns>Objet qui contient la représentation la plus proche possible du paramètre <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt16">
      <summary>Définit une conversion explicite d'un objet <see cref="T:System.Numerics.BigInteger" /> en valeur entière 16 bits non signée.
Cette API n'est pas conforme CLS. L’alternative conforme est <see cref="T:System.Int32" />.</summary>
      <param name="value">Valeur à convertir en entier 16 bits non signé.</param>
      <returns>Objet qui contient la valeur du paramètre <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est inférieur à <see cref="F:System.UInt16.MinValue" /> ou supérieur à <see cref="F:System.UInt16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt32">
      <summary>Définit une conversion explicite d’un objet <see cref="T:System.Numerics.BigInteger" /> en valeur d’entier 32 bits non signé.
Cette API n'est pas conforme CLS. L’alternative conforme est <see cref="T:System.Int64" />.</summary>
      <param name="value">Valeur à convertir en entier 32 bits non signé.</param>
      <returns>Objet qui contient la valeur du paramètre <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est inférieur à <see cref="F:System.UInt32.MinValue" /> ou supérieur à <see cref="F:System.UInt32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt64">
      <summary>Définit une conversion explicite d’un objet <see cref="T:System.Numerics.BigInteger" /> en valeur d’entier 64 bits non signé.
Cette API n'est pas conforme CLS. L’alternative conforme est <see cref="T:System.Double" />.</summary>
      <param name="value">Valeur à convertir en entier 64 bits non signé.</param>
      <returns>Objet qui contient la valeur du paramètre <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est inférieur à <see cref="F:System.UInt64.MinValue" /> ou supérieur à <see cref="F:System.UInt64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Single)~System.Numerics.BigInteger">
      <summary>Définit une conversion explicite d'une valeur <see cref="T:System.Single" /> en valeur <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value">Valeur à convertir en <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns>Objet qui contient la valeur du paramètre <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> a la valeur <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.PositiveInfinity" /> ou <see cref="F:System.Single.NegativeInfinity" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.Int64,System.Numerics.BigInteger)">
      <summary>Retourne une valeur qui indique si un entier 64 bits signé est supérieur à une valeur <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">Première valeur à comparer.</param>
      <param name="right">Deuxième valeur à comparer.</param>
      <returns>
        <see langword="true" /> si <paramref name="left" /> est supérieur à <paramref name="right" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Int64)">
      <summary>Retourne une valeur qui indique si <see cref="T:System.Numerics.BigInteger" /> est supérieur à une valeur d'entier 64 bits signé.</summary>
      <param name="left">Première valeur à comparer.</param>
      <param name="right">Deuxième valeur à comparer.</param>
      <returns>
        <see langword="true" /> si <paramref name="left" /> est supérieur à <paramref name="right" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Retourne une valeur qui indique si une valeur <see cref="T:System.Numerics.BigInteger" /> est supérieure à une autre valeur <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">Première valeur à comparer.</param>
      <param name="right">Deuxième valeur à comparer.</param>
      <returns>
        <see langword="true" /> si <paramref name="left" /> est supérieur à <paramref name="right" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.UInt64)">
      <summary>Retourne une valeur qui indique si une valeur <see cref="T:System.Numerics.BigInteger" /> est supérieure à un entier 64 bits non signé.</summary>
      <param name="left">Première valeur à comparer.</param>
      <param name="right">Deuxième valeur à comparer.</param>
      <returns>
        <see langword="true" /> si <paramref name="left" /> est supérieur à <paramref name="right" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.UInt64,System.Numerics.BigInteger)">
      <summary>Retourne une valeur qui indique si une valeur <see cref="T:System.Numerics.BigInteger" /> est supérieure à un entier 64 bits non signé.</summary>
      <param name="left">Première valeur à comparer.</param>
      <param name="right">Deuxième valeur à comparer.</param>
      <returns>
        <see langword="true" /> si <paramref name="left" /> est supérieur à <paramref name="right" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Int64,System.Numerics.BigInteger)">
      <summary>Retourne une valeur qui indique si un entier 64 bits signé est supérieur ou égal à une valeur <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">Première valeur à comparer.</param>
      <param name="right">Deuxième valeur à comparer.</param>
      <returns>
        <see langword="true" /> si <paramref name="left" /> est supérieur à <paramref name="right" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Int64)">
      <summary>Retourne une valeur qui indique si une valeur <see cref="T:System.Numerics.BigInteger" /> est supérieure ou égale à une valeur d'entier 64 bits signé.</summary>
      <param name="left">Première valeur à comparer.</param>
      <param name="right">Deuxième valeur à comparer.</param>
      <returns>
        <see langword="true" /> si <paramref name="left" /> est supérieur à <paramref name="right" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Retourne une valeur qui indique si une valeur <see cref="T:System.Numerics.BigInteger" /> est supérieure ou égale à une autre valeur <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">Première valeur à comparer.</param>
      <param name="right">Deuxième valeur à comparer.</param>
      <returns>
        <see langword="true" /> si <paramref name="left" /> est supérieur à <paramref name="right" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.UInt64)">
      <summary>Retourne une valeur qui indique si une valeur <see cref="T:System.Numerics.BigInteger" /> est supérieure ou égale à une valeur entière 64 bits non signée.</summary>
      <param name="left">Première valeur à comparer.</param>
      <param name="right">Deuxième valeur à comparer.</param>
      <returns>
        <see langword="true" /> si <paramref name="left" /> est supérieur à <paramref name="right" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.UInt64,System.Numerics.BigInteger)">
      <summary>Retourne une valeur qui indique si un entier 64 bits non signé est supérieur ou égal à une valeur <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">Première valeur à comparer.</param>
      <param name="right">Deuxième valeur à comparer.</param>
      <returns>
        <see langword="true" /> si <paramref name="left" /> est supérieur à <paramref name="right" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger">
      <summary>Définit une conversion implicite d'un octet non signé en valeur <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value">Valeur à convertir en <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns>Objet qui contient la valeur du paramètre <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.Int16)~System.Numerics.BigInteger">
      <summary>Définit une conversion implicite d'un entier 16 bits signé en valeur <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value">Valeur à convertir en <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns>Objet qui contient la valeur du paramètre <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger">
      <summary>Définit une conversion implicite d’un entier 32 bits signé en valeur <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value">Valeur à convertir en <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns>Objet qui contient la valeur du paramètre <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger">
      <summary>Définit une conversion implicite d’un entier 64 bits signé en valeur <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value">Valeur à convertir en <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns>Objet qui contient la valeur du paramètre <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.SByte)~System.Numerics.BigInteger">
      <summary>Définit une conversion implicite d'un entier 8 bits signé en valeur <see cref="T:System.Numerics.BigInteger" />.
Cette API n'est pas conforme CLS. L’alternative conforme est <see cref="M:System.Numerics.BigInteger.#ctor(System.Int32)" />.</summary>
      <param name="value">Valeur à convertir en <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns>Objet qui contient la valeur du paramètre <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.UInt16)~System.Numerics.BigInteger">
      <summary>Définit une conversion implicite d'un entier 16 bits non signé en valeur <see cref="T:System.Numerics.BigInteger" />.
Cette API n'est pas conforme CLS. L’alternative conforme est <see cref="M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger" />.</summary>
      <param name="value">Valeur à convertir en <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns>Objet qui contient la valeur du paramètre <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.UInt32)~System.Numerics.BigInteger">
      <summary>Définit une conversion implicite d’un entier 32 bits non signé en valeur <see cref="T:System.Numerics.BigInteger" />.
Cette API n'est pas conforme CLS. L’alternative conforme est <see cref="M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger" />.</summary>
      <param name="value">Valeur à convertir en <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns>Objet qui contient la valeur du paramètre <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.UInt64)~System.Numerics.BigInteger">
      <summary>Définit une conversion implicite d’un entier 64 bits non signé en valeur <see cref="T:System.Numerics.BigInteger" />.
Cette API n'est pas conforme CLS. L’alternative conforme est <see cref="T:System.Double" />.</summary>
      <param name="value">Valeur à convertir en <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns>Objet qui contient la valeur du paramètre <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)">
      <summary>Incrémente une valeur <see cref="T:System.Numerics.BigInteger" /> de 1.</summary>
      <param name="value">Valeur à incrémenter.</param>
      <returns>Valeur du paramètre <paramref name="value" /> incrémenté de 1.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.Int64,System.Numerics.BigInteger)">
      <summary>Retourne une valeur qui indique si un entier 64 bits signé et une valeur <see cref="T:System.Numerics.BigInteger" /> ne sont pas égaux.</summary>
      <param name="left">Première valeur à comparer.</param>
      <param name="right">Deuxième valeur à comparer.</param>
      <returns>
        <see langword="true" /> si <paramref name="left" /> et <paramref name="right" /> ne sont pas égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Int64)">
      <summary>Retourne une valeur qui indique si une valeur <see cref="T:System.Numerics.BigInteger" /> et un entier 64 bits signé ne sont pas égaux.</summary>
      <param name="left">Première valeur à comparer.</param>
      <param name="right">Deuxième valeur à comparer.</param>
      <returns>
        <see langword="true" /> si <paramref name="left" /> et <paramref name="right" /> ne sont pas égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Retourne une valeur qui indique si deux objets <see cref="T:System.Numerics.BigInteger" /> ont des valeurs différentes.</summary>
      <param name="left">Première valeur à comparer.</param>
      <param name="right">Deuxième valeur à comparer.</param>
      <returns>
        <see langword="true" /> si <paramref name="left" /> et <paramref name="right" /> ne sont pas égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.UInt64)">
      <summary>Retourne une valeur qui indique si une valeur <see cref="T:System.Numerics.BigInteger" /> et un entier 64 bits non signé ne sont pas égaux.</summary>
      <param name="left">Première valeur à comparer.</param>
      <param name="right">Deuxième valeur à comparer.</param>
      <returns>
        <see langword="true" /> si <paramref name="left" /> et <paramref name="right" /> ne sont pas égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.UInt64,System.Numerics.BigInteger)">
      <summary>Retourne une valeur qui indique si un entier 64 bits non signé et une valeur <see cref="T:System.Numerics.BigInteger" /> ne sont pas égaux.</summary>
      <param name="left">Première valeur à comparer.</param>
      <param name="right">Deuxième valeur à comparer.</param>
      <returns>
        <see langword="true" /> si <paramref name="left" /> et <paramref name="right" /> ne sont pas égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LeftShift(System.Numerics.BigInteger,System.Int32)">
      <summary>Décale une valeur <see cref="T:System.Numerics.BigInteger" /> d'un certain nombre de bits vers la gauche.</summary>
      <param name="value">Valeur dont les bits doivent être décalés.</param>
      <param name="shift">Nombre de bits de décalage vers la gauche de <paramref name="value" />.</param>
      <returns>Valeur décalée vers la gauche en fonction du nombre de bits spécifié.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.Int64,System.Numerics.BigInteger)">
      <summary>Retourne une valeur qui indique si un entier 64 bits signé est inférieur à une valeur <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">Première valeur à comparer.</param>
      <param name="right">Deuxième valeur à comparer.</param>
      <returns>
        <see langword="true" /> si <paramref name="left" /> est inférieur à <paramref name="right" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Int64)">
      <summary>Retourne une valeur qui indique si une valeur <see cref="T:System.Numerics.BigInteger" /> est inférieure à un entier 64 bits signé.</summary>
      <param name="left">Première valeur à comparer.</param>
      <param name="right">Deuxième valeur à comparer.</param>
      <returns>
        <see langword="true" /> si <paramref name="left" /> est inférieur à <paramref name="right" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Retourne une valeur qui indique si une valeur <see cref="T:System.Numerics.BigInteger" /> est inférieure à une autre valeur <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">Première valeur à comparer.</param>
      <param name="right">Deuxième valeur à comparer.</param>
      <returns>
        <see langword="true" /> si <paramref name="left" /> est inférieur à <paramref name="right" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.UInt64)">
      <summary>Retourne une valeur qui indique si une valeur <see cref="T:System.Numerics.BigInteger" /> est inférieure à un entier 64 bits non signé.</summary>
      <param name="left">Première valeur à comparer.</param>
      <param name="right">Deuxième valeur à comparer.</param>
      <returns>
        <see langword="true" /> si <paramref name="left" /> est inférieur à <paramref name="right" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.UInt64,System.Numerics.BigInteger)">
      <summary>Retourne une valeur qui indique si un entier 64 bits non signé est inférieur à une valeur <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">Première valeur à comparer.</param>
      <param name="right">Deuxième valeur à comparer.</param>
      <returns>
        <see langword="true" /> si <paramref name="left" /> est inférieur à <paramref name="right" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)">
      <summary>Retourne une valeur qui indique si un entier 64 bits signé est inférieur ou égal à une valeur <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">Première valeur à comparer.</param>
      <param name="right">Deuxième valeur à comparer.</param>
      <returns>
        <see langword="true" /> si <paramref name="left" /> est inférieur ou égal à <paramref name="right" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Int64)">
      <summary>Retourne une valeur qui indique si une valeur <see cref="T:System.Numerics.BigInteger" /> est inférieure ou égale à un entier 64 bits signé.</summary>
      <param name="left">Première valeur à comparer.</param>
      <param name="right">Deuxième valeur à comparer.</param>
      <returns>
        <see langword="true" /> si <paramref name="left" /> est inférieur ou égal à <paramref name="right" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Retourne une valeur qui indique si une valeur <see cref="T:System.Numerics.BigInteger" /> est inférieure ou égale à une autre valeur <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">Première valeur à comparer.</param>
      <param name="right">Deuxième valeur à comparer.</param>
      <returns>
        <see langword="true" /> si <paramref name="left" /> est inférieur ou égal à <paramref name="right" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.UInt64)">
      <summary>Retourne une valeur qui indique si une valeur <see cref="T:System.Numerics.BigInteger" /> est inférieure ou égale à un entier 64 bits non signé.</summary>
      <param name="left">Première valeur à comparer.</param>
      <param name="right">Deuxième valeur à comparer.</param>
      <returns>
        <see langword="true" /> si <paramref name="left" /> est inférieur ou égal à <paramref name="right" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.UInt64,System.Numerics.BigInteger)">
      <summary>Retourne une valeur qui indique si un entier 64 bits non signé est inférieur ou égal à une valeur <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">Première valeur à comparer.</param>
      <param name="right">Deuxième valeur à comparer.</param>
      <returns>
        <see langword="true" /> si <paramref name="left" /> est inférieur ou égal à <paramref name="right" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Retourne le modulo de la division de deux valeurs <see cref="T:System.Numerics.BigInteger" /> spécifiques.</summary>
      <param name="dividend">Valeur à diviser.</param>
      <param name="divisor">Valeur par laquelle diviser.</param>
      <returns>Reste de la division.</returns>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="divisor" /> est égal à 0 (zéro).</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Multiplie deux valeurs <see cref="T:System.Numerics.BigInteger" /> spécifiées.</summary>
      <param name="left">Première valeur à multiplier.</param>
      <param name="right">Seconde valeur à multiplier.</param>
      <returns>Produit de <paramref name="left" /> et <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_OnesComplement(System.Numerics.BigInteger)">
      <summary>Retourne le complément à un au niveau du bit d'une valeur <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value">Valeur entière.</param>
      <returns>Complément à un au niveau du bit de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_RightShift(System.Numerics.BigInteger,System.Int32)">
      <summary>Décale une valeur <see cref="T:System.Numerics.BigInteger" /> d’un certain nombre de bits vers la droite.</summary>
      <param name="value">Valeur dont les bits doivent être décalés.</param>
      <param name="shift">Nombre de bits de décalage de <paramref name="value" /> vers la droite.</param>
      <returns>Valeur décalée vers la droite en fonction du nombre de bits spécifié.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Soustrait une valeur <see cref="T:System.Numerics.BigInteger" /> d'une autre valeur <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">Valeur à laquelle appliquer la soustraction (diminuende).</param>
      <param name="right">Valeur à soustraire (diminuteur).</param>
      <returns>Résultat de la soustraction de <paramref name="right" /> de <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_UnaryNegation(System.Numerics.BigInteger)">
      <summary>Rend négative la valeur BigInteger spécifiée.</summary>
      <param name="value">Valeur à rendre négative.</param>
      <returns>Résultat de la multiplication du paramètre <paramref name="value" /> par moins un (-1).</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_UnaryPlus(System.Numerics.BigInteger)">
      <summary>Retourne la valeur de l'opérande <see cref="T:System.Numerics.BigInteger" />. (Le signe de l’opérande est inchangé.)</summary>
      <param name="value">Valeur entière.</param>
      <returns>Valeur de l'opérande <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Convertit la représentation d’un nombre, contenue dans l’étendue en lecture seule de caractères indiquée, dans un style spécifié en son équivalent <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value">Étendue en lecture seule de caractères qui contient le nombre à convertir.</param>
      <param name="style">Combinaison de bits de valeurs d'énumération qui spécifie le format autorisé de <paramref name="value" />.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture concernant <paramref name="value" />.</param>
      <returns>Valeur équivalente au nombre spécifié dans le paramètre <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> n’est pas une valeur <see cref="T:System.Globalization.NumberStyles" />.

ou -
<paramref name="style" /> inclut l'indicateur <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> ou <see cref="F:System.Globalization.NumberStyles.HexNumber" /> avec une autre valeur.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> est <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> ne se conforme pas avec le modèle d'entrée spécifié par <paramref name="style" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Parse(System.String)">
      <summary>Convertit la représentation sous forme de chaîne d'un nombre en sa représentation <see cref="T:System.Numerics.BigInteger" /> équivalente.</summary>
      <param name="value">Chaîne contenant le nombre à convertir.</param>
      <returns>Valeur équivalente au nombre spécifié dans le paramètre <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">Le format de <paramref name="value" /> est incorrect.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Convertit la représentation d'un nombre sous forme de chaîne dans un style spécifié en son équivalent <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value">Chaîne contenant un nombre à convertir.</param>
      <param name="style">Combinaison de bits de valeurs d'énumération qui spécifie le format autorisé de <paramref name="value" />.</param>
      <returns>Valeur équivalente au nombre spécifié dans le paramètre <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> n’est pas une valeur <see cref="T:System.Globalization.NumberStyles" />.

ou -
<paramref name="style" /> inclut l'indicateur <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> ou <see cref="F:System.Globalization.NumberStyles.HexNumber" /> avec une autre valeur.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> ne se conforme pas avec le modèle d'entrée spécifié par <see cref="T:System.Globalization.NumberStyles" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Convertit la représentation sous forme de chaîne d'un nombre, ayant un style et un format propre à la culture spécifiés, en sa représentation <see cref="T:System.Numerics.BigInteger" /> équivalente.</summary>
      <param name="value">Chaîne contenant un nombre à convertir.</param>
      <param name="style">Combinaison de bits de valeurs d'énumération qui spécifie le format autorisé de <paramref name="value" />.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture concernant <paramref name="value" />.</param>
      <returns>Valeur équivalente au nombre spécifié dans le paramètre <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> n’est pas une valeur <see cref="T:System.Globalization.NumberStyles" />.

ou -
<paramref name="style" /> inclut l'indicateur <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> ou <see cref="F:System.Globalization.NumberStyles.HexNumber" /> avec une autre valeur.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> ne se conforme pas avec le modèle d'entrée spécifié par <paramref name="style" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Parse(System.String,System.IFormatProvider)">
      <summary>Convertit la représentation sous forme de chaîne d'un nombre, ayant un format spécifique à la culture spécifié, en sa représentation <see cref="T:System.Numerics.BigInteger" /> équivalente.</summary>
      <param name="value">Chaîne contenant un nombre à convertir.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture concernant <paramref name="value" />.</param>
      <returns>Valeur équivalente au nombre spécifié dans le paramètre <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> est <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">Le format de <paramref name="value" /> est incorrect.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,System.Int32)">
      <summary>Élève une valeur <see cref="T:System.Numerics.BigInteger" /> à la puissance de la valeur spécifiée.</summary>
      <param name="value">Nombre à élever à la puissance <paramref name="exponent" />.</param>
      <param name="exponent">Exposant de <paramref name="value" />.</param>
      <returns>Résultat de l'élévation de <paramref name="value" /> à la puissance représentée par <paramref name="exponent" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="exponent" /> est un nombre négatif.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Effectue une division entière sur deux valeurs <see cref="T:System.Numerics.BigInteger" /> et retourne le modulo.</summary>
      <param name="dividend">Valeur à diviser.</param>
      <param name="divisor">Valeur par laquelle diviser.</param>
      <returns>Reste de la division de <paramref name="dividend" /> par <paramref name="divisor" />.</returns>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="divisor" /> est égal à 0 (zéro).</exception>
    </member>
    <member name="P:System.Numerics.BigInteger.Sign">
      <summary>Obtient un nombre qui indique le signe (négatif, positif ou zéro) de l'objet <see cref="T:System.Numerics.BigInteger" /> actif.</summary>
      <returns>Nombre qui indique le signe de l'objet <see cref="T:System.Numerics.BigInteger" />, comme indiqué dans le tableau suivant.
  nombre 
  Description 
  -1 
  La valeur de cet objet est négative.  
  
  0 
  La valeur de cet objet est 0 (zéro).  
  
  1 
  La valeur de cet objet est positive.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Soustrait une valeur <see cref="T:System.Numerics.BigInteger" /> d'une autre valeur et retourne le résultat.</summary>
      <param name="left">Valeur à laquelle appliquer la soustraction (diminuende).</param>
      <param name="right">Valeur à soustraire (diminuteur).</param>
      <returns>Résultat de la soustraction de <paramref name="right" /> de <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ToByteArray">
      <summary>Convertit une valeur <see cref="T:System.Numerics.BigInteger" /> en tableau d'octets.</summary>
      <returns>Valeur de l'objet <see cref="T:System.Numerics.BigInteger" /> actif convertie en tableau d'octets.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ToByteArray(System.Boolean,System.Boolean)">
      <summary>Retourne la valeur de ce <see cref="T:System.Numerics.BigInteger" /> sous la forme d’un tableau d’octets en utilisant le plus petit nombre d’octets possible. Si la valeur est égale à zéro, retourne un tableau d’un octet dont l’élément est 0x00.</summary>
      <param name="isUnsigned">
        <see langword="true" /> pour utiliser l’encodage non signé ; sinon, <see langword="false" />.</param>
      <param name="isBigEndian">
        <see langword="true" /> pour écrire les octets dans un ordre d’octet de poids fort (big-endian) ; sinon, <see langword="false" />.</param>
      <returns>Valeur de l'objet <see cref="T:System.Numerics.BigInteger" /> actif convertie en tableau d'octets.</returns>
      <exception cref="T:System.OverflowException">Si <paramref name="isUnsigned" /> est <see langword="true" /> et <see cref="P:System.Numerics.BigInteger.Sign" /> est un nombre négatif.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.ToString">
      <summary>Convertit la valeur numérique de l'objet <see cref="T:System.Numerics.BigInteger" /> actuel dans sa représentation sous forme chaîne équivalente.</summary>
      <returns>Représentation sous forme de chaîne de la valeur actuelle de <see cref="T:System.Numerics.BigInteger" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ToString(System.IFormatProvider)">
      <summary>Convertit la valeur numérique de l’objet <see cref="T:System.Numerics.BigInteger" /> actuel en sa représentation sous forme de chaîne équivalente à l’aide des informations spécifiées de mise en forme spécifiques à la culture.</summary>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
      <returns>Représentation sous forme de chaîne de la valeur actuelle de <see cref="T:System.Numerics.BigInteger" /> au format spécifié par le paramètre <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ToString(System.String)">
      <summary>Convertit la valeur numérique de l’objet <see cref="T:System.Numerics.BigInteger" /> actuel en sa représentation sous forme de chaîne équivalente en utilisant le format spécifié.</summary>
      <param name="format">Chaîne de format numérique standard ou personnalisée.</param>
      <returns>Représentation sous forme de chaîne de la valeur actuelle de <see cref="T:System.Numerics.BigInteger" /> au format spécifié par le paramètre <paramref name="format" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> n’est pas une chaîne de format valide.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.ToString(System.String,System.IFormatProvider)">
      <summary>Convertit la valeur numérique de l’objet <see cref="T:System.Numerics.BigInteger" /> actuel en sa représentation sous forme de chaîne équivalente à l’aide du format spécifié et des informations de mise en forme spécifiques à la culture.</summary>
      <param name="format">Chaîne de format numérique standard ou personnalisée.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
      <returns>La représentation sous forme de chaîne de la valeur <see cref="T:System.Numerics.BigInteger" /> actuelle spécifiée par les paramètres <paramref name="format" /> et <paramref name="provider" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> n’est pas une chaîne de format valide.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <summary>Met en forme cette instance d’entier très grand dans une étendue de caractères.</summary>
      <param name="destination">Étendue de caractères dans laquelle cette instance sera écrite.</param>
      <param name="charsWritten">Lorsque la méthode est retournée, contient la longueur de l’étendue en nombre de caractères.</param>
      <param name="format">Étendue en lecture seule de caractères qui spécifie le format de l’opération de mise en forme.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture sur <paramref name="value" />.</param>
      <returns>
        <see langword="true" /> si l’opération de mise en forme réussit ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)">
      <summary>Essaie de convertir la représentation sous forme de chaîne d'un nombre en son équivalent <see cref="T:System.Numerics.BigInteger" /> et retourne une valeur indiquant si la conversion a réussi.</summary>
      <param name="value">Représentation d’un nombre sous la forme d’une étendue en lecture seule de caractères.</param>
      <param name="style">Combinaison de bits de valeurs d'énumération qui indique les éléments de style qui peuvent être présents dans <paramref name="value" />. Une valeur typique à spécifier est <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture sur <paramref name="value" />.</param>
      <param name="result">Lorsque cette méthode est retournée, contient la valeur <see cref="T:System.Numerics.BigInteger" /> équivalente au nombre contenu dans <paramref name="value" />, ou <see cref="P:System.Numerics.BigInteger.Zero" />, en cas d'échec de la conversion. La conversion échoue si le paramètre <paramref name="value" /> est une étendue de caractères vide ou n’est pas dans un format conforme à <paramref name="style" />. Ce paramètre est passé sans être initialisé.</param>
      <returns>
        <see langword="true" /> si la conversion de <paramref name="value" /> est réussie ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> n’est pas une valeur <see cref="T:System.Globalization.NumberStyles" />.

ou -
<paramref name="style" /> inclut l'indicateur <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> ou <see cref="F:System.Globalization.NumberStyles.HexNumber" /> avec une autre valeur.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.TryParse(System.ReadOnlySpan{System.Char},System.Numerics.BigInteger@)">
      <summary>Tente de convertir la représentation d’un nombre contenu dans l’étendue en lecture seule de caractères spécifiée en son équivalent <see cref="T:System.Numerics.BigInteger" /> et retourne une valeur qui indique si la conversion a réussi.</summary>
      <param name="value">Représentation d’un nombre sous la forme d’une étendue en lecture seule de caractères.</param>
      <param name="result">Lorsque cette méthode est retournée, contient la valeur <see cref="T:System.Numerics.BigInteger" /> équivalente au nombre contenu dans <paramref name="value" />, ou zéro (0), en cas d'échec de la conversion. La conversion échoue si le paramètre <paramref name="value" /> est une étendue de caractères vide ou n’est pas au format approprié. Ce paramètre est passé sans être initialisé.</param>
      <returns>
        <see langword="true" /> si la conversion de <paramref name="value" /> est réussie ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)">
      <summary>Essaie de convertir la représentation sous forme de chaîne d'un nombre ayant un style et un format spécifique à la culture spécifiés en son équivalent <see cref="T:System.Numerics.BigInteger" /> et retourne une valeur qui indique si la conversion a réussi.</summary>
      <param name="value">Représentation sous forme de chaîne d'un nombre. La chaîne est interprétée à l'aide du style spécifié par <paramref name="style" />.</param>
      <param name="style">Combinaison de bits de valeurs d'énumération qui indique les éléments de style qui peuvent être présents dans <paramref name="value" />. Une valeur typique à spécifier est <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture sur <paramref name="value" />.</param>
      <param name="result">Lorsque cette méthode est retournée, contient la valeur <see cref="T:System.Numerics.BigInteger" /> équivalente au nombre contenu dans <paramref name="value" />, ou <see cref="P:System.Numerics.BigInteger.Zero" />, en cas d'échec de la conversion. La conversion échoue si le paramètre <paramref name="value" /> est <see langword="null" /> ou s'il n'est pas dans un format compatible avec <paramref name="style" />. Ce paramètre est passé sans être initialisé.</param>
      <returns>
        <see langword="true" /> si la conversion du paramètre <paramref name="value" /> a réussi ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> n’est pas une valeur <see cref="T:System.Globalization.NumberStyles" />.

ou -
<paramref name="style" /> inclut l'indicateur <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> ou <see cref="F:System.Globalization.NumberStyles.HexNumber" /> avec une autre valeur.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.TryParse(System.String,System.Numerics.BigInteger@)">
      <summary>Essaie de convertir la représentation sous forme de chaîne d'un nombre en son équivalent <see cref="T:System.Numerics.BigInteger" /> et retourne une valeur indiquant si la conversion a réussi.</summary>
      <param name="value">Représentation sous forme de chaîne d'un nombre.</param>
      <param name="result">Lorsque cette méthode est retournée, contient la valeur <see cref="T:System.Numerics.BigInteger" /> équivalente au nombre contenu dans <paramref name="value" />, ou zéro (0), en cas d'échec de la conversion. La conversion échoue si le paramètre <paramref name="value" /> est <see langword="null" /> ou s'il n'est pas au format approprié. Ce paramètre est passé sans être initialisé.</param>
      <returns>
        <see langword="true" /> si la conversion de <paramref name="value" /> est réussie ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.TryWriteBytes(System.Span{System.Byte},System.Int32@,System.Boolean,System.Boolean)">
      <summary>Copie la valeur de ce <see cref="T:System.Numerics.BigInteger" /> en tant qu’octets de complément à deux de poids faible (little-endian), en utilisant le plus petit nombre d’octets possible. Si la valeur est égale à zéro, génère un octet dont l’élément est 0x00.</summary>
      <param name="destination">Plage de destination dans laquelle les octets résultants doivent être écrits.</param>
      <param name="bytesWritten">Nombre d’octets écrits dans <paramref name="destination" />.</param>
      <param name="isUnsigned">
        <see langword="true" /> pour utiliser l’encodage non signé ; sinon, <see langword="false" />.</param>
      <param name="isBigEndian">
        <see langword="true" /> pour écrire les octets dans un ordre d’octet de poids fort (big-endian) ; sinon, <see langword="false" />.</param>
      <returns>
        <see langword="true" /> si les octets rentrent dans <paramref name="destination" /> ; <see langword="false" /> si les octets n’ont pas tous pu être écrits en raison d’un manque d’espace.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="isUnsigned" /> est <see langword="true" /> et <see cref="P:System.Numerics.BigInteger.Sign" /> est un nombre négatif.</exception>
    </member>
    <member name="P:System.Numerics.BigInteger.Zero">
      <summary>Obtient une valeur qui représente le nombre 0 (zéro).</summary>
      <returns>Entier dont la valeur est 0 (zéro).</returns>
    </member>
    <member name="T:System.Numerics.Complex">
      <summary>Représente un nombre complexe.</summary>
    </member>
    <member name="M:System.Numerics.Complex.#ctor(System.Double,System.Double)">
      <summary>Initialise une nouvelle instance de la structure <see cref="T:System.Numerics.Complex" /> à l'aide des valeurs réelles et imaginaires spécifiées.</summary>
      <param name="real">Partie réelle du nombre complexe.</param>
      <param name="imaginary">Partie imaginaire du nombre complexe.</param>
    </member>
    <member name="M:System.Numerics.Complex.Abs(System.Numerics.Complex)">
      <summary>Obtient la valeur absolue (ou ordre de grandeur) d'un nombre complexe.</summary>
      <param name="value">Nombre complexe.</param>
      <returns>Valeur absolue de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Acos(System.Numerics.Complex)">
      <summary>Retourne l'angle qui correspond au cosinus d'arc du nombre complexe spécifié.</summary>
      <param name="value">Nombre complexe qui représente un cosinus.</param>
      <returns>L'angle, mesuré en radians, qui correspond au cosinus d'arc de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Add(System.Double,System.Numerics.Complex)">
      <summary>Ajoute un nombre réel à double précision à un nombre complexe et retourne le résultat.</summary>
      <param name="left">Valeur réelle à double précision à ajouter.</param>
      <param name="right">Valeur complexe à ajouter.</param>
      <returns>Somme de <paramref name="left" /> et <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Add(System.Numerics.Complex,System.Double)">
      <summary>Ajoute un nombre complexe à un nombre réel à double précision et retourne le résultat.</summary>
      <param name="left">Valeur complexe à ajouter.</param>
      <param name="right">Valeur réelle à double précision à ajouter.</param>
      <returns>Somme de <paramref name="left" /> et <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Add(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Ajoute deux nombres complexes et retourne le résultat.</summary>
      <param name="left">Premier nombre complexe à ajouter.</param>
      <param name="right">Deuxième nombre complexe à ajouter.</param>
      <returns>Somme de <paramref name="left" /> et <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Asin(System.Numerics.Complex)">
      <summary>Retourne l'angle qui correspond au sinus d'arc du nombre complexe spécifié.</summary>
      <param name="value">Nombre complexe.</param>
      <returns>Angle qui correspond au sinus d'arc de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Atan(System.Numerics.Complex)">
      <summary>Retourne l'angle qui correspond à la tangente d'arc du nombre complexe spécifié.</summary>
      <param name="value">Nombre complexe.</param>
      <returns>Angle qui correspond à la tangente d'arc de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Conjugate(System.Numerics.Complex)">
      <summary>Calcule le conjugué d'un nombre complexe et retourne le résultat.</summary>
      <param name="value">Nombre complexe.</param>
      <returns>Conjugué de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Cos(System.Numerics.Complex)">
      <summary>Retourne le cosinus du nombre complexe spécifié.</summary>
      <param name="value">Nombre complexe.</param>
      <returns>Cosinus de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Cosh(System.Numerics.Complex)">
      <summary>Retourne le cosinus hyperbolique du nombre complexe spécifié.</summary>
      <param name="value">Nombre complexe.</param>
      <returns>Cosinus hyperbolique de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Divide(System.Double,System.Numerics.Complex)">
      <summary>Divise un nombre réel à double précision par un nombre complexe et retourne le résultat.</summary>
      <param name="dividend">Nombre réel à double précision à diviser.</param>
      <param name="divisor">Nombre complexe par lequel diviser.</param>
      <returns>Quotient de la division.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Divide(System.Numerics.Complex,System.Double)">
      <summary>Divise un nombre complexe par un nombre réel à double précision et retourne le résultat.</summary>
      <param name="dividend">Nombre complexe à diviser.</param>
      <param name="divisor">Nombre réel à double précision par lequel diviser.</param>
      <returns>Quotient de la division.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Divide(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Divise un nombre complexe par un autre et retourne le résultat.</summary>
      <param name="dividend">Nombre complexe à diviser.</param>
      <param name="divisor">Nombre complexe par lequel diviser.</param>
      <returns>Quotient de la division.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Equals(System.Numerics.Complex)">
      <summary>Retourne une valeur qui indique si l'instance actuelle et un nombre complexe spécifié ont la même valeur.</summary>
      <param name="value">Nombre complexe à comparer.</param>
      <returns>
        <see langword="true" /> si ce nombre complexe et <paramref name="value" /> ont la même valeur ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Equals(System.Object)">
      <summary>Retourne une valeur qui indique si l'instance actuelle et un objet spécifié ont la même valeur.</summary>
      <param name="obj">Objet à comparer.</param>
      <returns>
        <see langword="true" /> si le paramètre <paramref name="obj" /> est un objet <see cref="T:System.Numerics.Complex" /> ou un type capable d'effectuer une conversion implicite en objet <see cref="T:System.Numerics.Complex" /> et que sa valeur est égale à l'objet <see cref="T:System.Numerics.Complex" /> actuel ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Exp(System.Numerics.Complex)">
      <summary>Retourne <see langword="e" /> élevé à la puissance spécifiée par un nombre complexe.</summary>
      <param name="value">Nombre complexe qui spécifie une puissance.</param>
      <returns>Nombre <see langword="e" /> élevé à la puissance <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.FromPolarCoordinates(System.Double,System.Double)">
      <summary>Crée un nombre complexe à partir des coordonnées polaires d'un point.</summary>
      <param name="magnitude">Grandeur, à savoir la distance entre l'origine (intersection de l'axe des abscisses et de l'axe des ordonnées) et le nombre.</param>
      <param name="phase">Phase, à savoir l'angle de la ligne par rapport à l'axe horizontal, mesurée en radians.</param>
      <returns>Nombre complexe.</returns>
    </member>
    <member name="M:System.Numerics.Complex.GetHashCode">
      <summary>Retourne le code de hachage pour l'objet <see cref="T:System.Numerics.Complex" /> actuel.</summary>
      <returns>Code de hachage d'un entier signé 32 bits.</returns>
    </member>
    <member name="P:System.Numerics.Complex.Imaginary">
      <summary>Obtient le composant imaginaire de l'objet <see cref="T:System.Numerics.Complex" /> actuel.</summary>
      <returns>Composant imaginaire d'un nombre complexe.</returns>
    </member>
    <member name="F:System.Numerics.Complex.ImaginaryOne">
      <summary>Retourne une nouvelle instance <see cref="T:System.Numerics.Complex" /> avec un nombre réel égal à zéro et un nombre imaginaire égal à un.</summary>
    </member>
    <member name="F:System.Numerics.Complex.Infinity">
      <summary>Représente l’infini sous la forme d’un nombre complexe.</summary>
    </member>
    <member name="M:System.Numerics.Complex.IsFinite(System.Numerics.Complex)">
      <summary>Détermine si le nombre complexe spécifié est infini.</summary>
      <param name="value">Nombre complexe.</param>
      <returns>
        <see langword="true" /> si les deux, les parties imaginaires et réelles sont finies (zéro, sous la normale ou normale) ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.IsInfinity(System.Numerics.Complex)">
      <summary>Retourne une valeur indiquant si le nombre complexe spécifié est évalué comme infini.</summary>
      <param name="value">Nombre complexe.</param>
      <returns>
        <see langword="true" /> si une, la partie réelle ou imaginaire sont <see cref="F:System.Double.PositiveInfinity" /> ou <see cref="F:System.Double.NegativeInfinity" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.IsNaN(System.Numerics.Complex)">
      <summary>Retourne une valeur qui indique si l’instance complexe spécifiée n'est pas un nombre (NaN).</summary>
      <param name="value">Nombre complexe.</param>
      <returns>
        <see langword="true" /> si la valeur spécifiée n’est pas finie ou infinie ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Log(System.Numerics.Complex)">
      <summary>Retourne le logarithme naturel (base <see langword="e" />) d'un nombre complexe spécifié.</summary>
      <param name="value">Nombre complexe.</param>
      <returns>Logarithme naturel (base <see langword="e" />) de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Log(System.Numerics.Complex,System.Double)">
      <summary>Retourne le logarithme d'un nombre complexe spécifié dans une base spécifiée.</summary>
      <param name="value">Nombre complexe.</param>
      <param name="baseValue">Base du logarithme.</param>
      <returns>Logarithme de <paramref name="value" /> en base <paramref name="baseValue" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Log10(System.Numerics.Complex)">
      <summary>Retourne le logarithme de base 10 d'un nombre complexe spécifié.</summary>
      <param name="value">Nombre complexe.</param>
      <returns>Logarithme de base 10 de <paramref name="value" />.</returns>
    </member>
    <member name="P:System.Numerics.Complex.Magnitude">
      <summary>Obtient l'ordre de grandeur (ou valeur absolue) d'un nombre complexe.</summary>
      <returns>Grandeur de l'instance actuelle.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Multiply(System.Double,System.Numerics.Complex)">
      <summary>Retourne le produit d’un nombre réel à double précision et d’un nombre complexe.</summary>
      <param name="left">Nombre réel à double précision à multiplier.</param>
      <param name="right">Nombre complexe à multiplier.</param>
      <returns>Produit des paramètres <paramref name="left" /> et <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Double)">
      <summary>Retourne le produit d’un nombre complexe et d’un nombre réel à double précision.</summary>
      <param name="left">Nombre complexe à multiplier.</param>
      <param name="right">Nombre réel à double précision à multiplier.</param>
      <returns>Produit des paramètres <paramref name="left" /> et <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Retourne le produit de deux nombres complexes.</summary>
      <param name="left">Premier nombre complexe à multiplier.</param>
      <param name="right">Second nombre complexe à multiplier.</param>
      <returns>Produit des paramètres <paramref name="left" /> et <paramref name="right" />.</returns>
    </member>
    <member name="F:System.Numerics.Complex.NaN">
      <summary>Représente une instance complexe qui n’est pas un nombre (NaN).</summary>
    </member>
    <member name="M:System.Numerics.Complex.Negate(System.Numerics.Complex)">
      <summary>Retourne l'inverse additif d'un nombre complexe spécifié.</summary>
      <param name="value">Nombre complexe.</param>
      <returns>Résultat des composants <see cref="P:System.Numerics.Complex.Real" /> et <see cref="P:System.Numerics.Complex.Imaginary" /> du paramètre <paramref name="value" /> multiplié par -1.</returns>
    </member>
    <member name="F:System.Numerics.Complex.One">
      <summary>Retourne une nouvelle instance <see cref="T:System.Numerics.Complex" /> avec un nombre réel égal à un et un nombre imaginaire égal à zéro.</summary>
    </member>
    <member name="M:System.Numerics.Complex.op_Addition(System.Double,System.Numerics.Complex)">
      <summary>Ajoute un nombre réel à double précision à un nombre complexe.</summary>
      <param name="left">Valeur réelle à double précision à ajouter.</param>
      <param name="right">Valeur complexe à ajouter.</param>
      <returns>Somme de <paramref name="left" /> et <paramref name="right" /> sous la forme d’un nombre complexe.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Double)">
      <summary>Ajoute un nombre complexe à un nombre réel à double précision.</summary>
      <param name="left">Valeur complexe à ajouter.</param>
      <param name="right">Valeur réelle à double précision à ajouter.</param>
      <returns>Somme de <paramref name="left" /> et <paramref name="right" /> sous la forme d’un nombre complexe.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Ajoute deux nombres complexes.</summary>
      <param name="left">Première valeur complexe à ajouter.</param>
      <param name="right">Deuxième valeur complexe à ajouter.</param>
      <returns>Somme de <paramref name="left" /> et <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Division(System.Double,System.Numerics.Complex)">
      <summary>Divise un nombre réel à double précision spécifié par un nombre complexe spécifié.</summary>
      <param name="left">Valeur réelle à double précision à diviser.</param>
      <param name="right">Valeur complexe par laquelle diviser.</param>
      <returns>Résultat de la division de <paramref name="left" /> par <paramref name="right" />, sous la forme d’un nombre complexe.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Double)">
      <summary>Divise un nombre complexe spécifié par un nombre réel à double précision spécifié.</summary>
      <param name="left">Valeur complexe à diviser.</param>
      <param name="right">Valeur réelle à double précision par laquelle diviser.</param>
      <returns>Résultat de la division de <paramref name="left" /> par <paramref name="right" />, sous la forme d’un nombre complexe.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Divise un nombre complexe spécifié par un autre nombre complexe spécifié.</summary>
      <param name="left">Valeur complexe à diviser.</param>
      <param name="right">Valeur complexe par laquelle diviser.</param>
      <returns>Résultat de la division de <paramref name="left" /> par <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Equality(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Retourne une valeur qui indique si deux nombres complexes sont égaux.</summary>
      <param name="left">Premier nombre complexe à comparer.</param>
      <param name="right">Deuxième nombre complexe à comparer.</param>
      <returns>
        <see langword="true" /> si les paramètres <paramref name="left" /> et <paramref name="right" /> ont la même valeur ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Explicit(System.Decimal)~System.Numerics.Complex">
      <summary>Définit une conversion explicite d'une valeur <see cref="T:System.Decimal" /> en nombre complexe.</summary>
      <param name="value">Valeur à convertir en nombre complexe.</param>
      <returns>Nombre complexe ayant un composant réel égal à <paramref name="value" /> et un composant imaginaire égal à zéro.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Explicit(System.Numerics.BigInteger)~System.Numerics.Complex">
      <summary>Définit une conversion explicite d'une valeur <see cref="T:System.Numerics.BigInteger" /> en nombre complexe.</summary>
      <param name="value">Valeur à convertir en nombre complexe.</param>
      <returns>Nombre complexe ayant un composant réel égal à <paramref name="value" /> et un composant imaginaire égal à zéro.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Byte)~System.Numerics.Complex">
      <summary>Définit une conversion implicite d'un octet non signé en nombre complexe.</summary>
      <param name="value">Valeur à convertir en nombre complexe.</param>
      <returns>Objet qui contient la valeur du paramètre <paramref name="value" /> comme partie réelle et zéro comme partie imaginaire.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Double)~System.Numerics.Complex">
      <summary>Définit une conversion implicite d'un nombre à virgule flottante double précision en un nombre complexe.</summary>
      <param name="value">Valeur à convertir en nombre complexe.</param>
      <returns>Objet qui contient la valeur du paramètre <paramref name="value" /> comme partie réelle et zéro comme partie imaginaire.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Int16)~System.Numerics.Complex">
      <summary>Définit une conversion implicite d'un entier 16 bits signé en nombre complexe.</summary>
      <param name="value">Valeur à convertir en nombre complexe.</param>
      <returns>Objet qui contient la valeur du paramètre <paramref name="value" /> comme partie réelle et zéro comme partie imaginaire.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Int32)~System.Numerics.Complex">
      <summary>Définit une conversion implicite d'un entier 32 bits signé en nombre complexe.</summary>
      <param name="value">Valeur à convertir en nombre complexe.</param>
      <returns>Objet qui contient la valeur du paramètre <paramref name="value" /> comme partie réelle et zéro comme partie imaginaire.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Int64)~System.Numerics.Complex">
      <summary>Définit une conversion implicite d'un entier 64 bits signé en nombre complexe.</summary>
      <param name="value">Valeur à convertir en nombre complexe.</param>
      <returns>Objet qui contient la valeur du paramètre <paramref name="value" /> comme partie réelle et zéro comme partie imaginaire.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.SByte)~System.Numerics.Complex">
      <summary>Définit une conversion implicite d'un octet signé en nombre complexe.
Cette API n'est pas conforme CLS.</summary>
      <param name="value">Valeur à convertir en nombre complexe.</param>
      <returns>Objet qui contient la valeur du paramètre <paramref name="value" /> comme partie réelle et zéro comme partie imaginaire.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Single)~System.Numerics.Complex">
      <summary>Définit une conversion implicite d'un nombre à virgule flottante simple précision en un nombre complexe.</summary>
      <param name="value">Valeur à convertir en nombre complexe.</param>
      <returns>Objet qui contient la valeur du paramètre <paramref name="value" /> comme partie réelle et zéro comme partie imaginaire.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.UInt16)~System.Numerics.Complex">
      <summary>Définit une conversion implicite d'un entier 16 bits non signé en nombre complexe.
Cette API n'est pas conforme CLS.</summary>
      <param name="value">Valeur à convertir en nombre complexe.</param>
      <returns>Objet qui contient la valeur du paramètre <paramref name="value" /> comme partie réelle et zéro comme partie imaginaire.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.UInt32)~System.Numerics.Complex">
      <summary>Définit une conversion implicite d'un entier 32 bits non signé en nombre complexe.
Cette API n'est pas conforme CLS.</summary>
      <param name="value">Valeur à convertir en nombre complexe.</param>
      <returns>Objet qui contient la valeur du paramètre <paramref name="value" /> comme partie réelle et zéro comme partie imaginaire.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.UInt64)~System.Numerics.Complex">
      <summary>Définit une conversion implicite d'un entier 64 bits non signé en nombre complexe.
Cette API n'est pas conforme CLS.</summary>
      <param name="value">Valeur à convertir en nombre complexe.</param>
      <returns>Objet qui contient la valeur du paramètre <paramref name="value" /> comme partie réelle et zéro comme partie imaginaire.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Inequality(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Retourne une valeur qui indique si deux nombres complexes sont différents.</summary>
      <param name="left">Première valeur à comparer.</param>
      <param name="right">Deuxième valeur à comparer.</param>
      <returns>
        <see langword="true" /> si <paramref name="left" /> et <paramref name="right" /> ne sont pas égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Multiply(System.Double,System.Numerics.Complex)">
      <summary>Multiplie un nombre réel à double précision spécifié par un nombre complexe spécifié.</summary>
      <param name="left">Valeur réelle à double précision à multiplier.</param>
      <param name="right">Valeur complexe à multiplier.</param>
      <returns>Produit de <paramref name="left" /> et <paramref name="right" />, sous la forme d’un nombre complexe.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Double)">
      <summary>Multiplie le nombre complexe spécifié par un nombre réel à double précision spécifié.</summary>
      <param name="left">Valeur complexe à multiplier.</param>
      <param name="right">Valeur réelle à double précision à multiplier.</param>
      <returns>Produit de <paramref name="left" /> et <paramref name="right" />, sous la forme d’un nombre complexe.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Multiplie deux nombres complexes spécifiés.</summary>
      <param name="left">Première valeur complexe à multiplier.</param>
      <param name="right">Deuxième valeur complexe à multiplier.</param>
      <returns>Produit de <paramref name="left" /> et <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Subtraction(System.Double,System.Numerics.Complex)">
      <summary>Soustrait un nombre complexe d’un nombre réel à double précision.</summary>
      <param name="left">Valeur réelle à double précision à laquelle appliquer la soustraction (le terme dont on soustrait).</param>
      <param name="right">Valeur complexe à soustraire (le terme qu’on soustrait).</param>
      <returns>Résultat de la soustraction de <paramref name="right" /> de <paramref name="left" />, sous la forme d’un nombre complexe.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Double)">
      <summary>Soustrait un nombre réel à double précision d’un nombre complexe.</summary>
      <param name="left">Valeur complexe à laquelle appliquer la soustraction (le terme dont on soustrait).</param>
      <param name="right">Valeur réelle à double précision à soustraire (le terme qu’on soustrait).</param>
      <returns>Résultat de la soustraction de <paramref name="right" /> de <paramref name="left" />, sous la forme d’un nombre complexe.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Soustrait un nombre complexe d'un autre nombre complexe.</summary>
      <param name="left">Valeur à laquelle appliquer la soustraction (diminuende).</param>
      <param name="right">Valeur à soustraire (diminuteur).</param>
      <returns>Résultat de la soustraction de <paramref name="right" /> de <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_UnaryNegation(System.Numerics.Complex)">
      <summary>Retourne l'inverse additif d'un nombre complexe spécifié.</summary>
      <param name="value">Valeur à rendre négative.</param>
      <returns>Résultat des composants <see cref="P:System.Numerics.Complex.Real" /> et <see cref="P:System.Numerics.Complex.Imaginary" /> du paramètre <paramref name="value" /> multiplié par -1.</returns>
    </member>
    <member name="P:System.Numerics.Complex.Phase">
      <summary>Obtient la phase d'un nombre complexe.</summary>
      <returns>Phase d'un nombre complexe, en radians.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Pow(System.Numerics.Complex,System.Double)">
      <summary>Retourne un nombre complexe spécifié élevé à une puissance spécifiée par un nombre à virgule flottante double précision.</summary>
      <param name="value">Nombre complexe à élever à une puissance.</param>
      <param name="power">Nombre à virgule flottante double précision. qui spécifie une puissance.</param>
      <returns>Nombre complexe <paramref name="value" /> élevé à la puissance <paramref name="power" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Pow(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Retourne un nombre complexe spécifié élevé à une puissance spécifiée par un nombre complexe.</summary>
      <param name="value">Nombre complexe à élever à une puissance.</param>
      <param name="power">Nombre complexe qui spécifie une puissance.</param>
      <returns>Nombre complexe <paramref name="value" /> élevé à la puissance <paramref name="power" />.</returns>
    </member>
    <member name="P:System.Numerics.Complex.Real">
      <summary>Obtient le composant réel de l'objet <see cref="T:System.Numerics.Complex" /> actuel.</summary>
      <returns>Composant réel d'un nombre complexe.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Reciprocal(System.Numerics.Complex)">
      <summary>Retourne l'inverse multiplicatif d'un nombre complexe.</summary>
      <param name="value">Nombre complexe.</param>
      <returns>Réciproque de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Sin(System.Numerics.Complex)">
      <summary>Retourne le sinus du nombre complexe spécifié.</summary>
      <param name="value">Nombre complexe.</param>
      <returns>Sinus de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Sinh(System.Numerics.Complex)">
      <summary>Retourne le sinus hyperbolique du nombre complexe spécifié.</summary>
      <param name="value">Nombre complexe.</param>
      <returns>Sinus hyperbolique de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Sqrt(System.Numerics.Complex)">
      <summary>Retourne la racine carrée d'un nombre complexe spécifié.</summary>
      <param name="value">Nombre complexe.</param>
      <returns>Racine carrée de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Subtract(System.Double,System.Numerics.Complex)">
      <summary>Soustrait un nombre complexe d’un nombre réel à double précision et retourne le résultat.</summary>
      <param name="left">Valeur réelle à double précision à laquelle appliquer la soustraction (le terme dont on soustrait).</param>
      <param name="right">Valeur complexe à soustraire (le terme qu’on soustrait).</param>
      <returns>Résultat de la soustraction de <paramref name="right" /> de <paramref name="left" />, sous la forme d’un nombre complexe.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Double)">
      <summary>Soustrait un nombre réel à double précision d’un nombre complexe et retourne le résultat.</summary>
      <param name="left">Valeur complexe à laquelle appliquer la soustraction (le terme dont on soustrait).</param>
      <param name="right">Valeur réelle à double précision à soustraire (le terme qu’on soustrait).</param>
      <returns>Résultat de la soustraction de <paramref name="right" /> de <paramref name="left" />, sous la forme d’un nombre complexe.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Soustrait un nombre complexe d'un autre et retourne le résultat.</summary>
      <param name="left">Valeur à laquelle appliquer la soustraction (diminuende).</param>
      <param name="right">Valeur à soustraire (diminuteur).</param>
      <returns>Résultat de la soustraction de <paramref name="right" /> de <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Tan(System.Numerics.Complex)">
      <summary>Retourne la tangente du nombre complexe spécifié.</summary>
      <param name="value">Nombre complexe.</param>
      <returns>Tangente de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Tanh(System.Numerics.Complex)">
      <summary>Retourne la tangente hyperbolique du nombre complexe spécifié.</summary>
      <param name="value">Nombre complexe.</param>
      <returns>Tangente hyperbolique de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.ToString">
      <summary>Convertit la valeur du nombre complexe actuel en sa représentation sous forme de chaîne équivalente au format cartésien.</summary>
      <returns>Représentation sous forme de chaîne de l'instance actuelle au format cartésien.</returns>
    </member>
    <member name="M:System.Numerics.Complex.ToString(System.IFormatProvider)">
      <summary>Convertit la valeur du nombre complexe actuel en sa représentation sous forme de chaîne équivalente au format cartésien à l'aide des informations de mise en forme propres à la culture spécifiées.</summary>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
      <returns>Représentation sous forme de chaîne de l'instance actuelle au format cartésien, telle que spécifiée par <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.ToString(System.String)">
      <summary>Convertit la valeur du nombre complexe actuel en sa représentation sous forme de chaîne équivalente au format cartésien en utilisant le format spécifié pour ses parties imaginaire et réelle.</summary>
      <param name="format">Chaîne de format numérique standard ou personnalisée.</param>
      <returns>Représentation sous forme de chaîne de l'instance actuelle au format cartésien.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> n’est pas une chaîne de format valide.</exception>
    </member>
    <member name="M:System.Numerics.Complex.ToString(System.String,System.IFormatProvider)">
      <summary>Convertit la valeur du nombre complexe actuel en sa représentation sous forme de chaîne équivalente au format cartésien en utilisant le format et les informations de mise en forme spécifiques à la culture spécifiés pour ses parties imaginaire et réelle.</summary>
      <param name="format">Chaîne de format numérique standard ou personnalisée.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
      <returns>Représentation sous forme de chaîne de l'instance actuelle au format cartésien, telle que spécifiée par <paramref name="format" /> et <paramref name="provider" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> n’est pas une chaîne de format valide.</exception>
    </member>
    <member name="F:System.Numerics.Complex.Zero">
      <summary>Retourne une nouvelle instance <see cref="T:System.Numerics.Complex" /> avec un nombre réel égal à zéro et un nombre imaginaire égal à zéro.</summary>
    </member>
  </members>
</doc>
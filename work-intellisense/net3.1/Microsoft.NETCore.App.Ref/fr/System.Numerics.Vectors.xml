<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Numerics.Vectors</name>
  </assembly>
  <members>
    <member name="T:System.Numerics.Matrix3x2">
      <summary vsli:raw="Represents a 3x2 matrix.">Représente une matrice 3 x 2.</summary>
    </member>
    <member name="M:System.Numerics.Matrix3x2.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary vsli:raw="Creates a 3x2 matrix from the specified components.">Crée une matrice 3 x 2 à partir des composants spécifiés.</summary>
      <param name="m11" vsli:raw="The value to assign to the first element in the first row.">Valeur à affecter au premier élément de la première ligne.</param>
      <param name="m12" vsli:raw="The value to assign to the second element in the first row.">Valeur à affecter au deuxième élément de la première ligne.</param>
      <param name="m21" vsli:raw="The value to assign to the first element in the second row.">Valeur à affecter au premier élément de la deuxième ligne.</param>
      <param name="m22" vsli:raw="The value to assign to the second element in the second row.">Valeur à affecter au deuxième élément de la deuxième ligne.</param>
      <param name="m31" vsli:raw="The value to assign to the first element in the third row.">Valeur à affecter au premier élément de la troisième ligne.</param>
      <param name="m32" vsli:raw="The value to assign to the second element in the third row.">Valeur à affecter au deuxième élément de la troisième ligne.</param>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Add(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary vsli:raw="Adds each element in one matrix with its corresponding element in a second matrix.">Additionne chaque élément d'une matrice à son élément correspondant dans une deuxième matrice.</summary>
      <param name="value1" vsli:raw="The first matrix.">Première matrice.</param>
      <param name="value2" vsli:raw="The second matrix.">Deuxième matrice.</param>
      <returns vsli:raw="The matrix that contains the summed values of &lt;paramref name=&quot;value1&quot; /&gt; and &lt;paramref name=&quot;value2&quot; /&gt;.">Matrice qui contient les valeurs additionnées de <paramref name="value1" /> et de <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateRotation(System.Single)">
      <summary vsli:raw="Creates a rotation matrix using the given rotation in radians.">Crée une matrice de rotation en utilisant la rotation donnée en radians.</summary>
      <param name="radians" vsli:raw="The amount of rotation, in radians.">Quantité de rotation, en radians.</param>
      <returns vsli:raw="The rotation matrix.">Matrice de rotation.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateRotation(System.Single,System.Numerics.Vector2)">
      <summary vsli:raw="Creates a rotation matrix using the specified rotation in radians and a center point.">Crée une matrice de rotation en utilisant la rotation spécifiée en radians et un point central.</summary>
      <param name="radians" vsli:raw="The amount of rotation, in radians.">Quantité de rotation, en radians.</param>
      <param name="centerPoint" vsli:raw="The center point.">Point central.</param>
      <returns vsli:raw="The rotation matrix.">Matrice de rotation.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Numerics.Vector2)">
      <summary vsli:raw="Creates a scaling matrix from the specified vector scale.">Crée une matrice de mise à l'échelle à partir de l'échelle du vecteur spécifié.</summary>
      <param name="scales" vsli:raw="The scale to use.">Échelle à utiliser.</param>
      <returns vsli:raw="The scaling matrix.">Matrice de mise à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary vsli:raw="Creates a scaling matrix from the specified vector scale with an offset from the specified center point.">Crée une matrice de mise à l'échelle à partir de l'échelle de vecteur spécifié, avec un décalage à partir du point central spécifié.</summary>
      <param name="scales" vsli:raw="The scale to use.">Échelle à utiliser.</param>
      <param name="centerPoint" vsli:raw="The center offset.">Décalage par rapport au centre.</param>
      <returns vsli:raw="The scaling matrix.">Matrice de mise à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Single)">
      <summary vsli:raw="Creates a scaling matrix that scales uniformly with the given scale.">Crée une matrice de mise à l'échelle qui se met à l'échelle de façon uniforme avec l'échelle donnée.</summary>
      <param name="scale" vsli:raw="The uniform scale to use.">Échelle uniforme à utiliser.</param>
      <returns vsli:raw="The scaling matrix.">Matrice de mise à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Single,System.Numerics.Vector2)">
      <summary vsli:raw="Creates a scaling matrix that scales uniformly with the specified scale with an offset from the specified center.">Crée une matrice de mise à l'échelle qui se met à l'échelle de façon uniforme avec l'échelle spécifiée, avec un décalage à partir du point central spécifié.</summary>
      <param name="scale" vsli:raw="The uniform scale to use.">Échelle uniforme à utiliser.</param>
      <param name="centerPoint" vsli:raw="The center offset.">Décalage par rapport au centre.</param>
      <returns vsli:raw="The scaling matrix.">Matrice de mise à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Single,System.Single)">
      <summary vsli:raw="Creates a scaling matrix from the specified X and Y components.">Crée une matrice de mise à l'échelle à partir des composants X et Y spécifiés.</summary>
      <param name="xScale" vsli:raw="The value to scale by on the X axis.">Valeur selon laquelle mettre à l'échelle sur l'axe X.</param>
      <param name="yScale" vsli:raw="The value to scale by on the Y axis.">Valeur selon laquelle mettre à l'échelle sur l'axe Y.</param>
      <returns vsli:raw="The scaling matrix.">Matrice de mise à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Single,System.Single,System.Numerics.Vector2)">
      <summary vsli:raw="Creates a scaling matrix that is offset by a given center point.">Crée une matrice de mise à l'échelle qui est décalée par rapport à un point central donné.</summary>
      <param name="xScale" vsli:raw="The value to scale by on the X axis.">Valeur selon laquelle mettre à l'échelle sur l'axe X.</param>
      <param name="yScale" vsli:raw="The value to scale by on the Y axis.">Valeur selon laquelle mettre à l'échelle sur l'axe Y.</param>
      <param name="centerPoint" vsli:raw="The center point.">Point central.</param>
      <returns vsli:raw="The scaling matrix.">Matrice de mise à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateSkew(System.Single,System.Single)">
      <summary vsli:raw="Creates a skew matrix from the specified angles in radians.">Crée une matrice antisymétrique à partir des angles spécifiés en radians.</summary>
      <param name="radiansX" vsli:raw="The X angle, in radians.">Angle de X, en radians.</param>
      <param name="radiansY" vsli:raw="The Y angle, in radians.">Angle de Y, en radians.</param>
      <returns vsli:raw="The skew matrix.">Matrice antisymétrique.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateSkew(System.Single,System.Single,System.Numerics.Vector2)">
      <summary vsli:raw="Creates a skew matrix from the specified angles in radians and a center point.">Crée une matrice antisymétrique à partir des angles spécifiés en radians.</summary>
      <param name="radiansX" vsli:raw="The X angle, in radians.">Angle de X, en radians.</param>
      <param name="radiansY" vsli:raw="The Y angle, in radians.">Angle de Y, en radians.</param>
      <param name="centerPoint" vsli:raw="The center point.">Point central.</param>
      <returns vsli:raw="The skew matrix.">Matrice antisymétrique.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateTranslation(System.Numerics.Vector2)">
      <summary vsli:raw="Creates a translation matrix from the specified 2-dimensional vector.">Crée une matrice de translation à partir du vecteur à deux dimensions spécifié.</summary>
      <param name="position" vsli:raw="The translation position.">Position de translation.</param>
      <returns vsli:raw="The translation matrix.">Matrice de translation.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateTranslation(System.Single,System.Single)">
      <summary vsli:raw="Creates a translation matrix from the specified X and Y components.">Crée une matrice de translation à partir des composants X et Y spécifiés.</summary>
      <param name="xPosition" vsli:raw="The X position.">Position X.</param>
      <param name="yPosition" vsli:raw="The Y position.">Position Y.</param>
      <returns vsli:raw="The translation matrix.">Matrice de translation.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Equals(System.Numerics.Matrix3x2)">
      <summary vsli:raw="Returns a value that indicates whether this instance and another 3x2 matrix are equal.">Retourne une valeur qui indique si cette instance et une autre matrice 3 x 2 sont égales.</summary>
      <param name="other" vsli:raw="The other matrix.">L'autre matrice.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two matrices are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si les deux matrices sont égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance and a specified object are equal.">Retourne une valeur qui indique si cette instance et un objet spécifié sont égaux.</summary>
      <param name="obj" vsli:raw="The object to compare with the current instance.">Objet à comparer à l'instance actuelle.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current instance and &lt;paramref name=&quot;obj&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;paramref name=&quot;obj&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, the method returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'instance actuelle et <paramref name="obj" /> sont égaux ; sinon, <see langword="false" />. Si <paramref name="obj" /> est <see langword="null" />, la méthode retourne <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.GetDeterminant">
      <summary vsli:raw="Calculates the determinant for this matrix.">Calcule le déterminant pour cette matrice.</summary>
      <returns vsli:raw="The determinant.">Déterminant.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retourne le code de hachage de cette instance.</summary>
      <returns vsli:raw="The hash code.">Code de hachage.</returns>
    </member>
    <member name="P:System.Numerics.Matrix3x2.Identity">
      <summary vsli:raw="Gets the multiplicative identity matrix.">Obtient la matrice identité multiplicative.</summary>
      <returns vsli:raw="The multiplicative identify matrix.">Matrice identité multiplicative.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Invert(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2@)">
      <summary vsli:raw="Inverts the specified matrix. The return value indicates whether the operation succeeded.">Inverse la matrice spécifiée. La valeur de retour indique si l'opération a réussi.</summary>
      <param name="matrix" vsli:raw="The matrix to invert.">Matrice à inverser.</param>
      <param name="result" vsli:raw="When this method returns, contains the inverted matrix if the operation succeeded.">Quand cette méthode se termine, contient la matrice inversée si l'opération a réussi.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;matrix&quot; /&gt; was converted successfully; otherwise,  &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="matrix" /> a été convertie correctement ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.Matrix3x2.IsIdentity">
      <summary vsli:raw="Indicates whether the current matrix is the identity matrix.">Indique si la matrice actuelle est la matrice identité.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current matrix is the identity matrix; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la matrice actuelle est la matrice identité ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Lerp(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2,System.Single)">
      <summary vsli:raw="Performs a linear interpolation from one matrix to a second matrix based on a value that specifies the weighting of the second matrix.">Effectue une interpolation linéaire d'une matrice à une deuxième matrice selon une valeur qui spécifie la pondération de la deuxième matrice.</summary>
      <param name="matrix1" vsli:raw="The first matrix.">Première matrice.</param>
      <param name="matrix2" vsli:raw="The second matrix.">Deuxième matrice.</param>
      <param name="amount" vsli:raw="The relative weighting of &lt;paramref name=&quot;matrix2&quot; /&gt;.">Pondération relative de <paramref name="matrix2" />.</param>
      <returns vsli:raw="The interpolated matrix.">Matrice interpolée.</returns>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M11">
      <summary vsli:raw="The first element of the first row.">Premier élément de la première ligne.</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M12">
      <summary vsli:raw="The second element of the first row.">Deuxième élément de la première ligne.</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M21">
      <summary vsli:raw="The first element of the second row.">Premier élément de la deuxième ligne.</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M22">
      <summary vsli:raw="The second element of the second row.">Deuxième élément de la deuxième ligne.</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M31">
      <summary vsli:raw="The first element of the third row.">Premier élément de la troisième ligne.</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M32">
      <summary vsli:raw="The second element of the third row.">Deuxième élément de la troisième ligne.</summary>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Multiply(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary vsli:raw="Returns the matrix that results from multiplying two matrices together.">Retourne la matrice qui résulte de la multiplication de deux matrices entre elles.</summary>
      <param name="value1" vsli:raw="The first matrix.">Première matrice.</param>
      <param name="value2" vsli:raw="The second matrix.">Deuxième matrice.</param>
      <returns vsli:raw="The product matrix.">La matrice produit.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Multiply(System.Numerics.Matrix3x2,System.Single)">
      <summary vsli:raw="Returns the matrix that results from scaling all the elements of a specified matrix by a scalar factor.">Retourne la matrice qui résulte de la mise à l'échelle de tous les éléments d'une matrice spécifiée selon un facteur scalaire.</summary>
      <param name="value1" vsli:raw="The matrix to scale.">Matrice à mettre à l'échelle.</param>
      <param name="value2" vsli:raw="The scaling value to use.">Valeur de mise à l'échelle à utiliser.</param>
      <returns vsli:raw="The scaled matrix.">Matrice mise à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Negate(System.Numerics.Matrix3x2)">
      <summary vsli:raw="Negates the specified matrix by multiplying all its values by -1.">Inverse le signe de la matrice spécifiée en multipliant toutes ses valeurs par -1.</summary>
      <param name="value" vsli:raw="The matrix to negate.">Matrice dont il faut inverser le signe.</param>
      <returns vsli:raw="The negated matrix.">Matrice dont le signe a été inversé.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Addition(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary vsli:raw="Adds each element in one matrix with its corresponding element in a second matrix.">Additionne chaque élément d'une matrice à son élément correspondant dans une deuxième matrice.</summary>
      <param name="value1" vsli:raw="The first matrix.">Première matrice.</param>
      <param name="value2" vsli:raw="The second matrix.">Deuxième matrice.</param>
      <returns vsli:raw="The matrix that contains the summed values.">Matrice qui contient les valeurs additionnées.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Equality(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary vsli:raw="Returns a value that indicates whether the specified matrices are equal.">Retourne une valeur qui indique si les matrices spécifiées sont égales.</summary>
      <param name="value1" vsli:raw="The first matrix to compare.">Première matrice à comparer.</param>
      <param name="value2" vsli:raw="The second matrix to compare.">Deuxième matrice à comparer.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value1&quot; /&gt; and &lt;paramref name=&quot;value2&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="value1" /> et <paramref name="value2" /> sont égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Inequality(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary vsli:raw="Returns a value that indicates whether the specified matrices are not equal.">Retourne une valeur qui indique si les matrices spécifiées ne sont pas égales.</summary>
      <param name="value1" vsli:raw="The first matrix to compare.">Première matrice à comparer.</param>
      <param name="value2" vsli:raw="The second matrix to compare.">Deuxième matrice à comparer.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value1&quot; /&gt; and &lt;paramref name=&quot;value2&quot; /&gt; are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="value1" /> et <paramref name="value2" /> ne sont pas égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Multiply(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary vsli:raw="Returns the matrix that results from multiplying two matrices together.">Retourne la matrice qui résulte de la multiplication de deux matrices entre elles.</summary>
      <param name="value1" vsli:raw="The first matrix.">Première matrice.</param>
      <param name="value2" vsli:raw="The second matrix.">Deuxième matrice.</param>
      <returns vsli:raw="The product matrix.">La matrice produit.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Multiply(System.Numerics.Matrix3x2,System.Single)">
      <summary vsli:raw="Returns the matrix that results from scaling all the elements of a specified matrix by a scalar factor.">Retourne la matrice qui résulte de la mise à l'échelle de tous les éléments d'une matrice spécifiée selon un facteur scalaire.</summary>
      <param name="value1" vsli:raw="The matrix to scale.">Matrice à mettre à l'échelle.</param>
      <param name="value2" vsli:raw="The scaling value to use.">Valeur de mise à l'échelle à utiliser.</param>
      <returns vsli:raw="The scaled matrix.">Matrice mise à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Subtraction(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary vsli:raw="Subtracts each element in a second matrix from its corresponding element in a first matrix.">Soustrait chaque élément d'une deuxième matrice de son élément correspondant dans une première matrice.</summary>
      <param name="value1" vsli:raw="The first matrix.">Première matrice.</param>
      <param name="value2" vsli:raw="The second matrix.">Deuxième matrice.</param>
      <returns vsli:raw="The matrix containing the values that result from subtracting each element in &lt;paramref name=&quot;value2&quot; /&gt; from its corresponding element in &lt;paramref name=&quot;value1&quot; /&gt;.">Matrice qui contient les valeurs qui résultent de la soustraction de chaque élément dans <paramref name="value2" /> de son élément correspondant dans <paramref name="value1" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_UnaryNegation(System.Numerics.Matrix3x2)">
      <summary vsli:raw="Negates the specified matrix by multiplying all its values by -1.">Inverse le signe de la matrice spécifiée en multipliant toutes ses valeurs par -1.</summary>
      <param name="value" vsli:raw="The matrix to negate.">Matrice dont il faut inverser le signe.</param>
      <returns vsli:raw="The negated matrix.">Matrice dont le signe a été inversé.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Subtract(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary vsli:raw="Subtracts each element in a second matrix from its corresponding element in a first matrix.">Soustrait chaque élément d'une deuxième matrice de son élément correspondant dans une première matrice.</summary>
      <param name="value1" vsli:raw="The first matrix.">Première matrice.</param>
      <param name="value2" vsli:raw="The second matrix.">Deuxième matrice.</param>
      <returns vsli:raw="The matrix containing the values that result from subtracting each element in &lt;paramref name=&quot;value2&quot; /&gt; from its corresponding element in &lt;paramref name=&quot;value1&quot; /&gt;.">Matrice qui contient les valeurs qui résultent de la soustraction de chaque élément dans <paramref name="value2" /> de son élément correspondant dans <paramref name="value1" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.ToString">
      <summary vsli:raw="Returns a string that represents this matrix.">Retourne une chaîne qui représente cette matrice.</summary>
      <returns vsli:raw="The string representation of this matrix.">Représentation sous forme de chaîne de cette matrice.</returns>
    </member>
    <member name="P:System.Numerics.Matrix3x2.Translation">
      <summary vsli:raw="Gets or sets the translation component of this matrix.">Obtient ou définit le composant de translation de cette matrice.</summary>
      <returns vsli:raw="The translation component of the current instance.">Composant de translation de l'instance actuelle.</returns>
    </member>
    <member name="T:System.Numerics.Matrix4x4">
      <summary vsli:raw="Represents a 4x4 matrix.">Représente une matrice 4 x 4.</summary>
    </member>
    <member name="M:System.Numerics.Matrix4x4.#ctor(System.Numerics.Matrix3x2)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Numerics.Matrix4x4&quot; /&gt; object from a specified &lt;see cref=&quot;T:System.Numerics.Matrix3x2&quot; /&gt; object.">Crée un objet <see cref="T:System.Numerics.Matrix4x4" /> à partir d'un objet <see cref="T:System.Numerics.Matrix3x2" /> spécifié.</summary>
      <param name="value" vsli:raw="A 3x2 matrix.">Matrice 3 x 2.</param>
    </member>
    <member name="M:System.Numerics.Matrix4x4.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary vsli:raw="Creates a 4x4 matrix from the specified components.">Crée une matrice 4 x 4 à partir des composants spécifiés.</summary>
      <param name="m11" vsli:raw="The value to assign to the first element in the first row.">Valeur à affecter au premier élément de la première ligne.</param>
      <param name="m12" vsli:raw="The value to assign to the second element in the first row.">Valeur à affecter au deuxième élément de la première ligne.</param>
      <param name="m33" vsli:raw="The value to assign to the third element in the third row.">Valeur à affecter au troisième élément de la troisième ligne.</param>
      <param name="m34" vsli:raw="The value to assign to the fourth element in the third row.">Valeur à affecter au quatrième élément de la troisième ligne.</param>
      <param name="m41" vsli:raw="The value to assign to the first element in the fourth row.">Valeur à affecter au premier élément de la quatrième ligne.</param>
      <param name="m42" vsli:raw="The value to assign to the second element in the fourth row.">Valeur à affecter au deuxième élément de la quatrième ligne.</param>
      <param name="m43" vsli:raw="The value to assign to the third element in the fourth row.">Valeur à affecter au troisième élément de la quatrième ligne.</param>
      <param name="m44" vsli:raw="The value to assign to the fourth element in the fourth row.">Valeur à affecter au quatrième élément de la quatrième ligne.</param>
      <param name="m13" vsli:raw="The value to assign to the third element in the first row.">Valeur à affecter au troisième élément de la première ligne.</param>
      <param name="m14" vsli:raw="The value to assign to the fourth element in the first row.">Valeur à affecter au quatrième élément de la première ligne.</param>
      <param name="m21" vsli:raw="The value to assign to the first element in the second row.">Valeur à affecter au premier élément de la deuxième ligne.</param>
      <param name="m22" vsli:raw="The value to assign to the second element in the second row.">Valeur à affecter au deuxième élément de la deuxième ligne.</param>
      <param name="m23" vsli:raw="The value to assign to the third element in the second row.">Valeur à affecter au troisième élément de la deuxième ligne.</param>
      <param name="m24" vsli:raw="The value to assign to the fourth element in the second row.">Valeur à affecter au troisième élément de la deuxième ligne.</param>
      <param name="m31" vsli:raw="The value to assign to the first element in the third row.">Valeur à affecter au premier élément de la troisième ligne.</param>
      <param name="m32" vsli:raw="The value to assign to the second element in the third row.">Valeur à affecter au deuxième élément de la troisième ligne.</param>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Add(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary vsli:raw="Adds each element in one matrix with its corresponding element in a second matrix.">Additionne chaque élément d'une matrice à son élément correspondant dans une deuxième matrice.</summary>
      <param name="value1" vsli:raw="The first matrix.">Première matrice.</param>
      <param name="value2" vsli:raw="The second matrix.">Deuxième matrice.</param>
      <returns vsli:raw="The matrix that contains the summed values of &lt;paramref name=&quot;value1&quot; /&gt; and &lt;paramref name=&quot;value2&quot; /&gt;.">Matrice qui contient les valeurs additionnées de <paramref name="value1" /> et de <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateBillboard(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary vsli:raw="Creates a spherical billboard that rotates around a specified object position.">Crée un billboard sphérique qui pivoter autour de la position d'un objet spécifié.</summary>
      <param name="objectPosition" vsli:raw="The position of the object that the billboard will rotate around.">Position de l'objet autour duquel va pivoter le billboard.</param>
      <param name="cameraPosition" vsli:raw="The position of the camera.">Position de la caméra.</param>
      <param name="cameraUpVector" vsli:raw="The up vector of the camera.">Vecteur de déplacement vers le haut de la caméra.</param>
      <param name="cameraForwardVector" vsli:raw="The forward vector of the camera.">Vecteur de déplacement vers l'avant de la caméra.</param>
      <returns vsli:raw="The created billboard.">Billboard créé.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateConstrainedBillboard(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary vsli:raw="Creates a cylindrical billboard that rotates around a specified axis.">Crée un billboard cylindrique qui pivote autour d'un axe spécifié.</summary>
      <param name="objectPosition" vsli:raw="The position of the object that the billboard will rotate around.">Position de l'objet autour duquel va pivoter le billboard.</param>
      <param name="cameraPosition" vsli:raw="The position of the camera.">Position de la caméra.</param>
      <param name="rotateAxis" vsli:raw="The axis to rotate the billboard around.">L'axe autour duquel le billboard va pivoter.</param>
      <param name="cameraForwardVector" vsli:raw="The forward vector of the camera.">Vecteur de déplacement vers l'avant de la caméra.</param>
      <param name="objectForwardVector" vsli:raw="The forward vector of the object.">Vecteur de déplacement vers l'avant de l'objet.</param>
      <returns vsli:raw="The billboard matrix.">Matrice du billboard.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateFromAxisAngle(System.Numerics.Vector3,System.Single)">
      <summary vsli:raw="Creates a matrix that rotates around an arbitrary vector.">Crée une matrice qui pivote autour d'un vecteur arbitraire.</summary>
      <param name="axis" vsli:raw="The axis to rotate around.">L'axe autour duquel pivoter.</param>
      <param name="angle" vsli:raw="The angle to rotate around &lt;paramref name=&quot;axis&quot; /&gt;, in radians.">Angle selon lequel pivoter autour de <paramref name="axis" />, en radians.</param>
      <returns vsli:raw="The rotation matrix.">Matrice de rotation.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateFromQuaternion(System.Numerics.Quaternion)">
      <summary vsli:raw="Creates a rotation matrix from the specified Quaternion rotation value.">Crée une matrice de rotation à partir de la valeur de rotation du quaternion spécifié.</summary>
      <param name="quaternion" vsli:raw="The source Quaternion.">Quaternion source.</param>
      <returns vsli:raw="The rotation matrix.">Matrice de rotation.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)">
      <summary vsli:raw="Creates a rotation matrix from the specified yaw, pitch, and roll.">Crée une matrice de rotation à partir du lacet, du tangage et du roulis spécifiés.</summary>
      <param name="yaw" vsli:raw="The angle of rotation, in radians, around the Y axis.">Angle de rotation, en radians, autour de l'axe Y.</param>
      <param name="pitch" vsli:raw="The angle of rotation, in radians, around the X axis.">Angle de rotation, en radians, autour de l'axe X.</param>
      <param name="roll" vsli:raw="The angle of rotation, in radians, around the Z axis.">Angle de rotation, en radians, autour de l'axe Z.</param>
      <returns vsli:raw="The rotation matrix.">Matrice de rotation.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateLookAt(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary vsli:raw="Creates a view matrix.">Crée une matrice de vue.</summary>
      <param name="cameraPosition" vsli:raw="The position of the camera.">Position de la caméra.</param>
      <param name="cameraTarget" vsli:raw="The target towards which the camera is pointing.">Cible vers laquelle pointe la caméra.</param>
      <param name="cameraUpVector" vsli:raw="The direction that is &quot;up&quot; from the camera's point of view.">La direction « vers le haut » du point de vue de la caméra.</param>
      <returns vsli:raw="The view matrix.">Matrice de vue.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateOrthographic(System.Single,System.Single,System.Single,System.Single)">
      <summary vsli:raw="Creates an orthographic perspective matrix from the given view volume dimensions.">Crée une matrice de perspective orthographique à partir des dimensions du volume de la vue spécifiée.</summary>
      <param name="width" vsli:raw="The width of the view volume.">Largeur du volume de la vue.</param>
      <param name="height" vsli:raw="The height of the view volume.">Hauteur du volume de la vue.</param>
      <param name="zNearPlane" vsli:raw="The minimum Z-value of the view volume.">Valeur Z minimale du volume de la vue.</param>
      <param name="zFarPlane" vsli:raw="The maximum Z-value of the view volume.">Valeur Z maximale du volume de la vue.</param>
      <returns vsli:raw="The orthographic projection matrix.">Matrice de projection orthographique.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary vsli:raw="Creates a customized orthographic projection matrix.">Crée une matrice de projection orthographique personnalisée.</summary>
      <param name="left" vsli:raw="The minimum X-value of the view volume.">Valeur X minimale du volume de la vue.</param>
      <param name="right" vsli:raw="The maximum X-value of the view volume.">Valeur X maximale du volume de la vue.</param>
      <param name="bottom" vsli:raw="The minimum Y-value of the view volume.">Valeur Y minimale du volume de la vue.</param>
      <param name="top" vsli:raw="The maximum Y-value of the view volume.">Valeur Y maximale du volume de la vue.</param>
      <param name="zNearPlane" vsli:raw="The minimum Z-value of the view volume.">Valeur Z minimale du volume de la vue.</param>
      <param name="zFarPlane" vsli:raw="The maximum Z-value of the view volume.">Valeur Z maximale du volume de la vue.</param>
      <returns vsli:raw="The orthographic projection matrix.">Matrice de projection orthographique.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreatePerspective(System.Single,System.Single,System.Single,System.Single)">
      <summary vsli:raw="Creates a perspective projection matrix from the given view volume dimensions.">Crée une matrice de projection de perspective à partir des dimensions du volume de la vue donnée.</summary>
      <param name="width" vsli:raw="The width of the view volume at the near view plane.">Largeur du volume de la vue au niveau du plan de la vue rapprochée.</param>
      <param name="height" vsli:raw="The height of the view volume at the near view plane.">Hauteur du volume de la vue au niveau du plan de la vue rapprochée.</param>
      <param name="nearPlaneDistance" vsli:raw="The distance to the near view plane.">Distance au plan de la vue rapprochée.</param>
      <param name="farPlaneDistance" vsli:raw="The distance to the far view plane.">Distance au plan de la vue éloignée.</param>
      <returns vsli:raw="The perspective projection matrix.">Matrice de projection de perspective.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;nearPlaneDistance&quot; /&gt; is less than or equal to zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;farPlaneDistance&quot; /&gt; is less than or equal to zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;nearPlaneDistance&quot; /&gt; is greater than or equal to &lt;paramref name=&quot;farPlaneDistance&quot; /&gt;.">
        <paramref name="nearPlaneDistance" /> est inférieur ou égal à zéro.

ou -
<paramref name="farPlaneDistance" /> est inférieur ou égal à zéro.

ou -
<paramref name="nearPlaneDistance" /> est supérieur ou égal à <paramref name="farPlaneDistance" />.</exception>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single)">
      <summary vsli:raw="Creates a perspective projection matrix based on a field of view, aspect ratio, and near and far view plane distances.">Crée une matrice de projection de perspective basée sur un champ de vue, une proportion, et des distances au plan de la vue rapprochée et éloignée.</summary>
      <param name="fieldOfView" vsli:raw="The field of view in the y direction, in radians.">Champ de vue sur l'axe Y, en radians.</param>
      <param name="aspectRatio" vsli:raw="The aspect ratio, defined as view space width divided by height.">La proportion, définie comme étant la largeur de l'espace de la vue divisée par sa hauteur.</param>
      <param name="nearPlaneDistance" vsli:raw="The distance to the near view plane.">Distance au plan de la vue rapprochée.</param>
      <param name="farPlaneDistance" vsli:raw="The distance to the far view plane.">Distance au plan de la vue éloignée.</param>
      <returns vsli:raw="The perspective projection matrix.">Matrice de projection de perspective.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;fieldOfView&quot; /&gt; is less than or equal to zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;fieldOfView&quot; /&gt; is greater than or equal to &lt;see cref=&quot;F:System.Math.PI&quot; /&gt;.  &#xA;  &#xA; &lt;paramref name=&quot;nearPlaneDistance&quot; /&gt; is less than or equal to zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;farPlaneDistance&quot; /&gt; is less than or equal to zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;nearPlaneDistance&quot; /&gt; is greater than or equal to &lt;paramref name=&quot;farPlaneDistance&quot; /&gt;.">
        <paramref name="fieldOfView" /> est inférieur ou égal à zéro.

ou -
<paramref name="fieldOfView" /> est supérieur ou égal à <see cref="F:System.Math.PI" />.

<paramref name="nearPlaneDistance" /> est inférieur ou égal à zéro.

ou -
<paramref name="farPlaneDistance" /> est inférieur ou égal à zéro.

ou -
<paramref name="nearPlaneDistance" /> est supérieur ou égal à <paramref name="farPlaneDistance" />.</exception>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary vsli:raw="Creates a customized perspective projection matrix.">Crée une matrice de projection de perspective personnalisée.</summary>
      <param name="left" vsli:raw="The minimum x-value of the view volume at the near view plane.">Valeur X minimale du volume de la vue au niveau du plan de la vue rapprochée.</param>
      <param name="right" vsli:raw="The maximum x-value of the view volume at the near view plane.">Valeur X maximale du volume de la vue au niveau du plan de la vue rapprochée.</param>
      <param name="bottom" vsli:raw="The minimum y-value of the view volume at the near view plane.">Valeur Y minimale du volume de la vue au niveau du plan de la vue rapprochée.</param>
      <param name="top" vsli:raw="The maximum y-value of the view volume at the near view plane.">Valeur Y maximale du volume de la vue au niveau du plan de la vue rapprochée.</param>
      <param name="nearPlaneDistance" vsli:raw="The distance to the near view plane.">Distance au plan de la vue rapprochée.</param>
      <param name="farPlaneDistance" vsli:raw="The distance to the far view plane.">Distance au plan de la vue éloignée.</param>
      <returns vsli:raw="The perspective projection matrix.">Matrice de projection de perspective.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;nearPlaneDistance&quot; /&gt; is less than or equal to zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;farPlaneDistance&quot; /&gt; is less than or equal to zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;nearPlaneDistance&quot; /&gt; is greater than or equal to &lt;paramref name=&quot;farPlaneDistance&quot; /&gt;.">
        <paramref name="nearPlaneDistance" /> est inférieur ou égal à zéro.

ou -
<paramref name="farPlaneDistance" /> est inférieur ou égal à zéro.

ou -
<paramref name="nearPlaneDistance" /> est supérieur ou égal à <paramref name="farPlaneDistance" />.</exception>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateReflection(System.Numerics.Plane)">
      <summary vsli:raw="Creates a matrix that reflects the coordinate system about a specified plane.">Crée une matrice qui reflète le système de coordonnées pour un plan spécifié.</summary>
      <param name="value" vsli:raw="The plane about which to create a reflection.">Le plan pour lequel créer une réflexion.</param>
      <returns vsli:raw="A new matrix expressing the reflection.">Une nouvelle matrice exprimant la réflexion.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationX(System.Single)">
      <summary vsli:raw="Creates a matrix for rotating points around the X axis.">Crée une matrice pour faire pivoter des points autour de l'axe X.</summary>
      <param name="radians" vsli:raw="The amount, in radians, by which to rotate around the X axis.">Quantité, en radians, selon laquelle faire pivoter autour de l'axe X.</param>
      <returns vsli:raw="The rotation matrix.">Matrice de rotation.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationX(System.Single,System.Numerics.Vector3)">
      <summary vsli:raw="Creates a matrix for rotating points around the X axis from a center point.">Crée une matrice pour faire pivoter des points autour de l'axe X à partir d'un point central.</summary>
      <param name="radians" vsli:raw="The amount, in radians, by which to rotate around the X axis.">Quantité, en radians, selon laquelle faire pivoter autour de l'axe X.</param>
      <param name="centerPoint" vsli:raw="The center point.">Point central.</param>
      <returns vsli:raw="The rotation matrix.">Matrice de rotation.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationY(System.Single)">
      <summary vsli:raw="Creates a matrix for rotating points around the Y axis.">Crée une matrice pour faire pivoter des points autour de l'axe Y.</summary>
      <param name="radians" vsli:raw="The amount, in radians, by which to rotate around the Y-axis.">Quantité, en radians, selon laquelle faire pivoter autour de l'axe Y.</param>
      <returns vsli:raw="The rotation matrix.">Matrice de rotation.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationY(System.Single,System.Numerics.Vector3)">
      <summary vsli:raw="The amount, in radians, by which to rotate around the Y axis from a center point.">Quantité, en radians, selon laquelle faire pivoter autour de l'axe Y.</summary>
      <param name="radians" vsli:raw="The amount, in radians, by which to rotate around the Y-axis.">Quantité, en radians, selon laquelle faire pivoter autour de l'axe Y.</param>
      <param name="centerPoint" vsli:raw="The center point.">Point central.</param>
      <returns vsli:raw="The rotation matrix.">Matrice de rotation.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationZ(System.Single)">
      <summary vsli:raw="Creates a matrix for rotating points around the Z axis.">Crée une matrice pour faire pivoter des points autour de l'axe Z.</summary>
      <param name="radians" vsli:raw="The amount, in radians, by which to rotate around the Z-axis.">Quantité, en radians, selon laquelle faire pivoter autour de l'axe Z.</param>
      <returns vsli:raw="The rotation matrix.">Matrice de rotation.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationZ(System.Single,System.Numerics.Vector3)">
      <summary vsli:raw="Creates a matrix for rotating points around the Z axis from a center point.">Crée une matrice pour faire pivoter des points autour de l'axe Z à partir d'un point central.</summary>
      <param name="radians" vsli:raw="The amount, in radians, by which to rotate around the Z-axis.">Quantité, en radians, selon laquelle faire pivoter autour de l'axe Z.</param>
      <param name="centerPoint" vsli:raw="The center point.">Point central.</param>
      <returns vsli:raw="The rotation matrix.">Matrice de rotation.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Numerics.Vector3)">
      <summary vsli:raw="Creates a scaling matrix from the specified vector scale.">Crée une matrice de mise à l'échelle à partir de l'échelle du vecteur spécifié.</summary>
      <param name="scales" vsli:raw="The scale to use.">Échelle à utiliser.</param>
      <returns vsli:raw="The scaling matrix.">Matrice de mise à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary vsli:raw="Creates a scaling matrix with a center point.">Crée une matrice de mise à l'échelle avec un point central.</summary>
      <param name="scales" vsli:raw="The vector that contains the amount to scale on each axis.">Le vecteur qui contient la quantité selon laquelle mettre à l'échelle sur chaque axe.</param>
      <param name="centerPoint" vsli:raw="The center point.">Point central.</param>
      <returns vsli:raw="The scaling matrix.">Matrice de mise à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Single)">
      <summary vsli:raw="Creates a uniform scaling matrix that scale equally on each axis.">Crée une matrice de mise à l'échelle uniforme qui met à l'échelle de façon égale sur chaque axe.</summary>
      <param name="scale" vsli:raw="The uniform scaling factor.">Facteur de mise à l'échelle uniforme.</param>
      <returns vsli:raw="The scaling matrix.">Matrice de mise à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Single,System.Numerics.Vector3)">
      <summary vsli:raw="Creates a uniform scaling matrix that scales equally on each axis with a center point.">Crée une matrice de mise à l'échelle uniforme qui met à l'échelle de façon uniforme sur chaque axe avec un point central.</summary>
      <param name="scale" vsli:raw="The uniform scaling factor.">Facteur de mise à l'échelle uniforme.</param>
      <param name="centerPoint" vsli:raw="The center point.">Point central.</param>
      <returns vsli:raw="The scaling matrix.">Matrice de mise à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Single,System.Single,System.Single)">
      <summary vsli:raw="Creates a scaling matrix from the specified X, Y, and Z components.">Crée une matrice de mise à l'échelle à partir des composants X, Y et Z spécifiés.</summary>
      <param name="xScale" vsli:raw="The value to scale by on the X axis.">Valeur selon laquelle mettre à l'échelle sur l'axe X.</param>
      <param name="yScale" vsli:raw="The value to scale by on the Y axis.">Valeur selon laquelle mettre à l'échelle sur l'axe Y.</param>
      <param name="zScale" vsli:raw="The value to scale by on the Z axis.">Valeur selon laquelle mettre à l'échelle sur l'axe Z.</param>
      <returns vsli:raw="The scaling matrix.">Matrice de mise à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Single,System.Single,System.Single,System.Numerics.Vector3)">
      <summary vsli:raw="Creates a scaling matrix that is offset by a given center point.">Crée une matrice de mise à l'échelle qui est décalée par rapport à un point central donné.</summary>
      <param name="xScale" vsli:raw="The value to scale by on the X axis.">Valeur selon laquelle mettre à l'échelle sur l'axe X.</param>
      <param name="yScale" vsli:raw="The value to scale by on the Y axis.">Valeur selon laquelle mettre à l'échelle sur l'axe Y.</param>
      <param name="zScale" vsli:raw="The value to scale by on the Z axis.">Valeur selon laquelle mettre à l'échelle sur l'axe Z.</param>
      <param name="centerPoint" vsli:raw="The center point.">Point central.</param>
      <returns vsli:raw="The scaling matrix.">Matrice de mise à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateShadow(System.Numerics.Vector3,System.Numerics.Plane)">
      <summary vsli:raw="Creates a matrix that flattens geometry into a specified plane as if casting a shadow from a specified light source.">Crée une matrice qui aplanit la géométrie dans un plan spécifié en la faisant correspondre à une ombre provenant d'une source de lumière spécifiée.</summary>
      <param name="lightDirection" vsli:raw="The direction from which the light that will cast the shadow is coming.">Direction d'où provient la lumière à l'origine de l'ombre.</param>
      <param name="plane" vsli:raw="The plane onto which the new matrix should flatten geometry so as to cast a shadow.">Plan sur lequel la nouvelle matrice doit aplanir la géométrie pour la faire correspondre à une ombre.</param>
      <returns vsli:raw="A new matrix that can be used to flatten geometry onto the specified plane from the specified direction.">Une nouvelle matrice qui peut être utilisée pour aplanir la géométrie sur le plan spécifié depuis la direction spécifiée.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateTranslation(System.Numerics.Vector3)">
      <summary vsli:raw="Creates a translation matrix from the specified 3-dimensional vector.">Crée une matrice de traduction à partir du vecteur à trois dimensions spécifié.</summary>
      <param name="position" vsli:raw="The amount to translate in each axis.">Quantité de laquelle translater dans chaque axe.</param>
      <returns vsli:raw="The translation matrix.">Matrice de translation.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateTranslation(System.Single,System.Single,System.Single)">
      <summary vsli:raw="Creates a translation matrix from the specified X, Y, and Z components.">Crée une matrice de translation à partir des composants X, Y et Z spécifiés.</summary>
      <param name="xPosition" vsli:raw="The amount to translate on the X axis.">Quantité de laquelle translater sur l'axe X.</param>
      <param name="yPosition" vsli:raw="The amount to translate on the Y axis.">Quantité de laquelle translater sur l'axe Y.</param>
      <param name="zPosition" vsli:raw="The amount to translate on the Z axis.">Quantité de laquelle translater sur l'axe Z.</param>
      <returns vsli:raw="The translation matrix.">Matrice de translation.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateWorld(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary vsli:raw="Creates a world matrix with the specified parameters.">Crée une matrice du monde avec les paramètres spécifiés.</summary>
      <param name="position" vsli:raw="The position of the object.">Position de l'objet.</param>
      <param name="forward" vsli:raw="The forward direction of the object.">Direction vers l'avant de l'objet.</param>
      <param name="up" vsli:raw="The upward direction of the object. Its value is usually &lt;c&gt;[0, 1, 0]&lt;/c&gt;.">Direction vers le haut de l'objet. Sa valeur est généralement <c>[0, 1, 0]</c>.</param>
      <returns vsli:raw="The world matrix.">Matrice du monde.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Decompose(System.Numerics.Matrix4x4,System.Numerics.Vector3@,System.Numerics.Quaternion@,System.Numerics.Vector3@)">
      <summary vsli:raw="Attempts to extract the scale, translation, and rotation components from the given scale, rotation, or translation matrix. The return value indicates whether the operation succeeded.">Tente d'extraire les composants d'échelle, de translation et de rotation de la matrice de mise à l'échelle, de rotation ou de translation donnée. La valeur de retour indique si l'opération a réussi.</summary>
      <param name="matrix" vsli:raw="The source matrix.">Matrice source.</param>
      <param name="scale" vsli:raw="When this method returns, contains the scaling component of the transformation matrix if the operation succeeded.">Quand cette méthode se termine, contient le composant de mise à l'échelle de la matrice de transformation si l'opération a réussi.</param>
      <param name="rotation" vsli:raw="When this method returns, contains the rotation component of the transformation matrix if the operation succeeded.">Quand cette méthode se termine, contient le composant de rotation de la matrice de transformation si l'opération a réussi.</param>
      <param name="translation" vsli:raw="When the method returns, contains the translation component of the transformation matrix if the operation succeeded.">Quand cette méthode se termine, contient le composant de translation de la matrice de transformation si l'opération a réussi.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;matrix&quot; /&gt; was decomposed successfully; otherwise,  &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="matrix" /> a été décomposée correctement ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Equals(System.Numerics.Matrix4x4)">
      <summary vsli:raw="Returns a value that indicates whether this instance and another 4x4 matrix are equal.">Retourne une valeur qui indique si cette instance et une autre matrice 4 x 4 sont égales.</summary>
      <param name="other" vsli:raw="The other matrix.">L'autre matrice.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two matrices are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si les deux matrices sont égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance and a specified object are equal.">Retourne une valeur qui indique si cette instance et un objet spécifié sont égaux.</summary>
      <param name="obj" vsli:raw="The object to compare with the current instance.">Objet à comparer à l'instance actuelle.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current instance and &lt;paramref name=&quot;obj&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;paramref name=&quot;obj&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, the method returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'instance actuelle et <paramref name="obj" /> sont égaux ; sinon, <see langword="false" />. Si <paramref name="obj" /> est <see langword="null" />, la méthode retourne <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.GetDeterminant">
      <summary vsli:raw="Calculates the determinant of the current 4x4 matrix.">Calcule le déterminant de la matrice 4 x 4 actuelle.</summary>
      <returns vsli:raw="The determinant.">Déterminant.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retourne le code de hachage de cette instance.</summary>
      <returns vsli:raw="The hash code.">Code de hachage.</returns>
    </member>
    <member name="P:System.Numerics.Matrix4x4.Identity">
      <summary vsli:raw="Gets the multiplicative identity matrix.">Obtient la matrice identité multiplicative.</summary>
      <returns vsli:raw="Gets the multiplicative identity matrix.">Obtient la matrice identité multiplicative.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Invert(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4@)">
      <summary vsli:raw="Inverts the specified matrix. The return value indicates whether the operation succeeded.">Inverse la matrice spécifiée. La valeur de retour indique si l'opération a réussi.</summary>
      <param name="matrix" vsli:raw="The matrix to invert.">Matrice à inverser.</param>
      <param name="result" vsli:raw="When this method returns, contains the inverted matrix if the operation succeeded.">Quand cette méthode se termine, contient la matrice inversée si l'opération a réussi.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;matrix&quot; /&gt; was converted successfully; otherwise,  &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="matrix" /> a été convertie correctement ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.Matrix4x4.IsIdentity">
      <summary vsli:raw="Indicates whether the current matrix is the identity matrix.">Indique si la matrice actuelle est la matrice identité.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current matrix is the identity matrix; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la matrice actuelle est la matrice identité ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Lerp(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4,System.Single)">
      <summary vsli:raw="Performs a linear interpolation from one matrix to a second matrix based on a value that specifies the weighting of the second matrix.">Effectue une interpolation linéaire d'une matrice à une deuxième matrice selon une valeur qui spécifie la pondération de la deuxième matrice.</summary>
      <param name="matrix1" vsli:raw="The first matrix.">Première matrice.</param>
      <param name="matrix2" vsli:raw="The second matrix.">Deuxième matrice.</param>
      <param name="amount" vsli:raw="The relative weighting of &lt;paramref name=&quot;matrix2&quot; /&gt;.">Pondération relative de <paramref name="matrix2" />.</param>
      <returns vsli:raw="The interpolated matrix.">Matrice interpolée.</returns>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M11">
      <summary vsli:raw="The first element of the first row.">Premier élément de la première ligne.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M12">
      <summary vsli:raw="The second element of the first row.">Deuxième élément de la première ligne.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M13">
      <summary vsli:raw="The third element of the first row.">Troisième élément de la première ligne.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M14">
      <summary vsli:raw="The fourth element of the first row.">Quatrième élément de la première ligne.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M21">
      <summary vsli:raw="The first element of the second row.">Premier élément de la deuxième ligne.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M22">
      <summary vsli:raw="The second element of the second row.">Deuxième élément de la deuxième ligne.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M23">
      <summary vsli:raw="The third element of the second row.">Troisième élément de la deuxième ligne.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M24">
      <summary vsli:raw="The fourth element of the second row.">Quatrième élément de la deuxième ligne.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M31">
      <summary vsli:raw="The first element of the third row.">Premier élément de la troisième ligne.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M32">
      <summary vsli:raw="The second element of the third row.">Deuxième élément de la troisième ligne.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M33">
      <summary vsli:raw="The third element of the third row.">Troisième élément de la troisième ligne.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M34">
      <summary vsli:raw="The fourth element of the third row.">Quatrième élément de la troisième ligne.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M41">
      <summary vsli:raw="The first element of the fourth row.">Premier élément de la quatrième ligne.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M42">
      <summary vsli:raw="The second element of the fourth row.">Deuxième élément de la quatrième ligne.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M43">
      <summary vsli:raw="The third element of the fourth row.">Troisième élément de la quatrième ligne.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M44">
      <summary vsli:raw="The fourth element of the fourth row.">Quatrième élément de la quatrième ligne.</summary>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Multiply(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary vsli:raw="Returns the matrix that results from multiplying two matrices together.">Retourne la matrice qui résulte de la multiplication de deux matrices entre elles.</summary>
      <param name="value1" vsli:raw="The first matrix.">Première matrice.</param>
      <param name="value2" vsli:raw="The second matrix.">Deuxième matrice.</param>
      <returns vsli:raw="The product matrix.">La matrice produit.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Multiply(System.Numerics.Matrix4x4,System.Single)">
      <summary vsli:raw="Returns the matrix that results from scaling all the elements of a specified matrix by a scalar factor.">Retourne la matrice qui résulte de la mise à l'échelle de tous les éléments d'une matrice spécifiée selon un facteur scalaire.</summary>
      <param name="value1" vsli:raw="The matrix to scale.">Matrice à mettre à l'échelle.</param>
      <param name="value2" vsli:raw="The scaling value to use.">Valeur de mise à l'échelle à utiliser.</param>
      <returns vsli:raw="The scaled matrix.">Matrice mise à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Negate(System.Numerics.Matrix4x4)">
      <summary vsli:raw="Negates the specified matrix by multiplying all its values by -1.">Inverse le signe de la matrice spécifiée en multipliant toutes ses valeurs par -1.</summary>
      <param name="value" vsli:raw="The matrix to negate.">Matrice dont il faut inverser le signe.</param>
      <returns vsli:raw="The negated matrix.">Matrice dont le signe a été inversé.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Addition(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary vsli:raw="Adds each element in one matrix with its corresponding element in a second matrix.">Additionne chaque élément d'une matrice à son élément correspondant dans une deuxième matrice.</summary>
      <param name="value1" vsli:raw="The first matrix.">Première matrice.</param>
      <param name="value2" vsli:raw="The second matrix.">Deuxième matrice.</param>
      <returns vsli:raw="The matrix that contains the summed values.">Matrice qui contient les valeurs additionnées.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Equality(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary vsli:raw="Returns a value that indicates whether the specified matrices are equal.">Retourne une valeur qui indique si les matrices spécifiées sont égales.</summary>
      <param name="value1" vsli:raw="The first matrix to compare.">Première matrice à comparer.</param>
      <param name="value2" vsli:raw="The second matrix to care.">Deuxième matrice à comparer.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value1&quot; /&gt; and &lt;paramref name=&quot;value2&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="value1" /> et <paramref name="value2" /> sont égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Inequality(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary vsli:raw="Returns a value that indicates whether the specified matrices are not equal.">Retourne une valeur qui indique si les matrices spécifiées ne sont pas égales.</summary>
      <param name="value1" vsli:raw="The first matrix to compare.">Première matrice à comparer.</param>
      <param name="value2" vsli:raw="The second matrix to compare.">Deuxième matrice à comparer.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value1&quot; /&gt; and &lt;paramref name=&quot;value2&quot; /&gt; are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="value1" /> et <paramref name="value2" /> ne sont pas égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Multiply(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary vsli:raw="Returns the matrix that results from multiplying two matrices together.">Retourne la matrice qui résulte de la multiplication de deux matrices entre elles.</summary>
      <param name="value1" vsli:raw="The first matrix.">Première matrice.</param>
      <param name="value2" vsli:raw="The second matrix.">Deuxième matrice.</param>
      <returns vsli:raw="The product matrix.">La matrice produit.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Multiply(System.Numerics.Matrix4x4,System.Single)">
      <summary vsli:raw="Returns the matrix that results from scaling all the elements of a specified matrix by a scalar factor.">Retourne la matrice qui résulte de la mise à l'échelle de tous les éléments d'une matrice spécifiée selon un facteur scalaire.</summary>
      <param name="value1" vsli:raw="The matrix to scale.">Matrice à mettre à l'échelle.</param>
      <param name="value2" vsli:raw="The scaling value to use.">Valeur de mise à l'échelle à utiliser.</param>
      <returns vsli:raw="The scaled matrix.">Matrice mise à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Subtraction(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary vsli:raw="Subtracts each element in a second matrix from its corresponding element in a first matrix.">Soustrait chaque élément d'une deuxième matrice de son élément correspondant dans une première matrice.</summary>
      <param name="value1" vsli:raw="The first matrix.">Première matrice.</param>
      <param name="value2" vsli:raw="The second matrix.">Deuxième matrice.</param>
      <returns vsli:raw="The matrix containing the values that result from subtracting each element in &lt;paramref name=&quot;value2&quot; /&gt; from its corresponding element in &lt;paramref name=&quot;value1&quot; /&gt;.">Matrice qui contient les valeurs qui résultent de la soustraction de chaque élément dans <paramref name="value2" /> de son élément correspondant dans <paramref name="value1" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_UnaryNegation(System.Numerics.Matrix4x4)">
      <summary vsli:raw="Negates the specified matrix by multiplying all its values by -1.">Inverse le signe de la matrice spécifiée en multipliant toutes ses valeurs par -1.</summary>
      <param name="value" vsli:raw="The matrix to negate.">Matrice dont il faut inverser le signe.</param>
      <returns vsli:raw="The negated matrix.">Matrice dont le signe a été inversé.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Subtract(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary vsli:raw="Subtracts each element in a second matrix from its corresponding element in a first matrix.">Soustrait chaque élément d'une deuxième matrice de son élément correspondant dans une première matrice.</summary>
      <param name="value1" vsli:raw="The first matrix.">Première matrice.</param>
      <param name="value2" vsli:raw="The second matrix.">Deuxième matrice.</param>
      <returns vsli:raw="The matrix containing the values that result from subtracting each element in &lt;paramref name=&quot;value2&quot; /&gt; from its corresponding element in &lt;paramref name=&quot;value1&quot; /&gt;.">Matrice qui contient les valeurs qui résultent de la soustraction de chaque élément dans <paramref name="value2" /> de son élément correspondant dans <paramref name="value1" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.ToString">
      <summary vsli:raw="Returns a string that represents this matrix.">Retourne une chaîne qui représente cette matrice.</summary>
      <returns vsli:raw="The string representation of this matrix.">Représentation sous forme de chaîne de cette matrice.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Transform(System.Numerics.Matrix4x4,System.Numerics.Quaternion)">
      <summary vsli:raw="Transforms the specified matrix by applying the specified Quaternion rotation.">Transforme la matrice spécifiée en appliquant la rotation du quaternion spécifié.</summary>
      <param name="value" vsli:raw="The matrix to transform.">Matrice à transformer.</param>
      <param name="rotation" vsli:raw="The rotation t apply.">Rotation à appliquer.</param>
      <returns vsli:raw="The transformed matrix.">Matrice transformée.</returns>
    </member>
    <member name="P:System.Numerics.Matrix4x4.Translation">
      <summary vsli:raw="Gets or sets the translation component of this matrix.">Obtient ou définit le composant de translation de cette matrice.</summary>
      <returns vsli:raw="The translation component of the current instance.">Composant de translation de l'instance actuelle.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Transpose(System.Numerics.Matrix4x4)">
      <summary vsli:raw="Transposes the rows and columns of a matrix.">Transpose les lignes et les colonnes d'une matrice.</summary>
      <param name="matrix" vsli:raw="The matrix to transpose.">Matrice à transposer.</param>
      <returns vsli:raw="The transposed matrix.">Matrice transposée.</returns>
    </member>
    <member name="T:System.Numerics.Plane">
      <summary vsli:raw="Represents a plane in three-dimensional space.">Représente un plan dans un espace à trois dimensions.</summary>
    </member>
    <member name="M:System.Numerics.Plane.#ctor(System.Numerics.Vector3,System.Single)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Numerics.Plane&quot; /&gt; object from a specified normal and the distance along the normal from the origin.">Crée un objet <see cref="T:System.Numerics.Plane" /> à partir d'un vecteur normal spécifié et de la distance le long du vecteur normal à partir de l'origine.</summary>
      <param name="normal" vsli:raw="The plane's normal vector.">Vecteur normal du plan.</param>
      <param name="d" vsli:raw="The plane's distance from the origin along its normal vector.">Distance du plan à partir de l'origine le long de son vecteur normal.</param>
    </member>
    <member name="M:System.Numerics.Plane.#ctor(System.Numerics.Vector4)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Numerics.Plane&quot; /&gt; object from a specified four-dimensional vector.">Crée un objet <see cref="T:System.Numerics.Plane" /> à partir d'un vecteur à quatre dimensions spécifié.</summary>
      <param name="value" vsli:raw="A vector whose first three elements describe the normal vector, and whose &lt;see cref=&quot;F:System.Numerics.Vector4.W&quot; /&gt; defines the distance along that normal from the origin.">Vecteur dont les trois premiers éléments décrivent le vecteur normal et dont la valeur <see cref="F:System.Numerics.Vector4.W" /> définit la distance le long de ce vecteur normal à partir de l'origine.</param>
    </member>
    <member name="M:System.Numerics.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Numerics.Plane&quot; /&gt; object from the X, Y, and Z components of its normal, and its distance from the origin on that normal.">Crée un objet <see cref="T:System.Numerics.Plane" /> à partir des composants X, Y et Z de son vecteur normal et de sa distance à partir de l'origine sur ce vecteur normal.</summary>
      <param name="x" vsli:raw="The X component of the normal.">Composant X du vecteur normal.</param>
      <param name="y" vsli:raw="The Y component of the normal.">Composant Y du vecteur normal.</param>
      <param name="z" vsli:raw="The Z component of the normal.">Composant Z du vecteur normal.</param>
      <param name="d" vsli:raw="The distance of the plane along its normal from the origin.">Distance du plan le long de son vecteur normal à partir de l'origine.</param>
    </member>
    <member name="M:System.Numerics.Plane.CreateFromVertices(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Numerics.Plane&quot; /&gt; object that contains three specified points.">Crée un objet <see cref="T:System.Numerics.Plane" /> qui contient trois points spécifiés.</summary>
      <param name="point1" vsli:raw="The first point defining the plane.">Premier point définissant le plan.</param>
      <param name="point2" vsli:raw="The second point defining the plane.">Second point définissant le plan.</param>
      <param name="point3" vsli:raw="The third point defining the plane.">Troisième point définissant le plan.</param>
      <returns vsli:raw="The plane containing the three points.">Plan contenant les trois points.</returns>
    </member>
    <member name="F:System.Numerics.Plane.D">
      <summary vsli:raw="The distance of the plane along its normal from the origin.">Distance du plan le long de son vecteur normal à partir de l'origine.</summary>
    </member>
    <member name="M:System.Numerics.Plane.Dot(System.Numerics.Plane,System.Numerics.Vector4)">
      <summary vsli:raw="Calculates the dot product of a plane and a 4-dimensional vector.">Calcule le produit scalaire d'un plan et d'un vecteur à quatre dimensions.</summary>
      <param name="plane" vsli:raw="The plane.">Plan.</param>
      <param name="value" vsli:raw="The four-dimensional vector.">Vecteur à quatre dimensions.</param>
      <returns vsli:raw="The dot product.">Produit scalaire.</returns>
    </member>
    <member name="M:System.Numerics.Plane.DotCoordinate(System.Numerics.Plane,System.Numerics.Vector3)">
      <summary vsli:raw="Returns the dot product of a specified three-dimensional vector and the normal vector of this plane plus the distance (&lt;see cref=&quot;F:System.Numerics.Plane.D&quot; /&gt;) value of the plane.">Retourne le produit scalaire d'un vecteur à trois dimensions spécifié et du vecteur normal de ce plan plus la valeur de distance (<see cref="F:System.Numerics.Plane.D" />) du plan.</summary>
      <param name="plane" vsli:raw="The plane.">Plan.</param>
      <param name="value" vsli:raw="The 3-dimensional vector.">Vecteur à trois dimensions.</param>
      <returns vsli:raw="The dot product.">Produit scalaire.</returns>
    </member>
    <member name="M:System.Numerics.Plane.DotNormal(System.Numerics.Plane,System.Numerics.Vector3)">
      <summary vsli:raw="Returns the dot product of a specified three-dimensional vector and the &lt;see cref=&quot;F:System.Numerics.Plane.Normal&quot; /&gt; vector of this plane.">Retourne le produit scalaire d'un vecteur à trois dimensions spécifié et du vecteur <see cref="F:System.Numerics.Plane.Normal" /> de ce plan.</summary>
      <param name="plane" vsli:raw="The plane.">Plan.</param>
      <param name="value" vsli:raw="The three-dimensional vector.">Vecteur à trois dimensions.</param>
      <returns vsli:raw="The dot product.">Produit scalaire.</returns>
    </member>
    <member name="M:System.Numerics.Plane.Equals(System.Numerics.Plane)">
      <summary vsli:raw="Returns a value that indicates whether this instance and another plane object are equal.">Retourne une valeur qui indique si cette instance et un autre objet plan sont égaux.</summary>
      <param name="other" vsli:raw="The other plane.">Autre plan.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two planes are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si les deux plans sont égaux ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Plane.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance and a specified object are equal.">Retourne une valeur qui indique si cette instance et un objet spécifié sont égaux.</summary>
      <param name="obj" vsli:raw="The object to compare with the current instance.">Objet à comparer à l'instance actuelle.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current instance and &lt;paramref name=&quot;obj&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;paramref name=&quot;obj&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, the method returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'instance actuelle et <paramref name="obj" /> sont égaux ; sinon, <see langword="false" />. Si <paramref name="obj" /> est <see langword="null" />, la méthode retourne <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Plane.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retourne le code de hachage de cette instance.</summary>
      <returns vsli:raw="The hash code.">Code de hachage.</returns>
    </member>
    <member name="F:System.Numerics.Plane.Normal">
      <summary vsli:raw="The normal vector of the plane.">Vecteur normal du plan.</summary>
    </member>
    <member name="M:System.Numerics.Plane.Normalize(System.Numerics.Plane)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Numerics.Plane&quot; /&gt; object whose normal vector is the source plane's normal vector normalized.">Crée un objet <see cref="T:System.Numerics.Plane" /> dont le vecteur normal est le vecteur normal du plan source normalisé.</summary>
      <param name="value" vsli:raw="The source plane.">Plan source.</param>
      <returns vsli:raw="The normalized plane.">Plan normalisé.</returns>
    </member>
    <member name="M:System.Numerics.Plane.op_Equality(System.Numerics.Plane,System.Numerics.Plane)">
      <summary vsli:raw="Returns a value that indicates whether two planes are equal.">Retourne une valeur qui indique si deux plans sont égaux.</summary>
      <param name="value1" vsli:raw="The first plane to compare.">Premier plan à comparer.</param>
      <param name="value2" vsli:raw="The second plane to compare.">Second plan à comparer.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value1&quot; /&gt; and &lt;paramref name=&quot;value2&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="value1" /> et <paramref name="value2" /> sont égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Plane.op_Inequality(System.Numerics.Plane,System.Numerics.Plane)">
      <summary vsli:raw="Returns a value that indicates whether two planes are not equal.">Retourne une valeur qui indique si deux plans ne sont pas égaux.</summary>
      <param name="value1" vsli:raw="The first plane to compare.">Premier plan à comparer.</param>
      <param name="value2" vsli:raw="The second plane to compare.">Second plan à comparer.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value1&quot; /&gt; and &lt;paramref name=&quot;value2&quot; /&gt; are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="value1" /> et <paramref name="value2" /> ne sont pas égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Plane.ToString">
      <summary vsli:raw="Returns the string representation of this plane object.">Retourne la représentation sous forme de chaîne de cet objet plan.</summary>
      <returns vsli:raw="A string that represents this &lt;see cref=&quot;T:System.Numerics.Plane&quot; /&gt; object.">Chaîne qui représente cet objet <see cref="T:System.Numerics.Plane" />.</returns>
    </member>
    <member name="M:System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Matrix4x4)">
      <summary vsli:raw="Transforms a normalized plane by a 4x4 matrix.">Transforme un plan normalisé par une matrice 4x4.</summary>
      <param name="plane" vsli:raw="The normalized plane to transform.">Plan normalisé à transformer.</param>
      <param name="matrix" vsli:raw="The transformation matrix to apply to &lt;paramref name=&quot;plane&quot; /&gt;.">Matrice de transformation à appliquer à <paramref name="plane" />.</param>
      <returns vsli:raw="The transformed plane.">Plan transformé.</returns>
    </member>
    <member name="M:System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Quaternion)">
      <summary vsli:raw="Transforms a normalized plane by a Quaternion rotation.">Transforme un plan normalisé par une rotation de quaternion.</summary>
      <param name="plane" vsli:raw="The normalized plane to transform.">Plan normalisé à transformer.</param>
      <param name="rotation" vsli:raw="The Quaternion rotation to apply to the plane.">Rotation de quaternion à appliquer au plan.</param>
      <returns vsli:raw="A new plane that results from applying the Quaternion rotation.">Nouveau plan résultant de l'application de la rotation de quaternion.</returns>
    </member>
    <member name="T:System.Numerics.Quaternion">
      <summary vsli:raw="Represents a vector that is used to encode three-dimensional physical rotations.">Représente un vecteur qui est utilisé pour encoder des rotations physiques en trois dimensions.</summary>
    </member>
    <member name="M:System.Numerics.Quaternion.#ctor(System.Numerics.Vector3,System.Single)">
      <summary vsli:raw="Creates a quaternion from the specified vector and rotation parts.">Crée un quaternion à partir des parties vecteur et rotation spécifiées.</summary>
      <param name="vectorPart" vsli:raw="The vector part of the quaternion.">Partie de vecteur de quaternion.</param>
      <param name="scalarPart" vsli:raw="The rotation part of the quaternion.">Partie rotation du quaternion.</param>
    </member>
    <member name="M:System.Numerics.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary vsli:raw="Constructs a quaternion from the specified components.">Construit un quaternion à partir des composants spécifiés.</summary>
      <param name="x" vsli:raw="The value to assign to the X component of the quaternion.">Valeur à affecter au composant X du quaternion.</param>
      <param name="y" vsli:raw="The value to assign to the Y component of the quaternion.">Valeur à affecter au composant Y du quaternion.</param>
      <param name="z" vsli:raw="The value to assign to the Z component of the quaternion.">Valeur à affecter au composant Z du quaternion.</param>
      <param name="w" vsli:raw="The value to assign to the W component of the quaternion.">Valeur à affecter au composant W du quaternion.</param>
    </member>
    <member name="M:System.Numerics.Quaternion.Add(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary vsli:raw="Adds each element in one quaternion with its corresponding element in a second quaternion.">Additionne chaque élément d'un quaternion à son élément correspondant dans un deuxième quaternion.</summary>
      <param name="value1" vsli:raw="The first quaternion.">Premier quaternion.</param>
      <param name="value2" vsli:raw="The second quaternion.">Deuxième quaternion.</param>
      <returns vsli:raw="The quaternion that contains the summed values of &lt;paramref name=&quot;value1&quot; /&gt; and &lt;paramref name=&quot;value2&quot; /&gt;.">Quaternion qui contient les valeurs additionnées de <paramref name="value1" /> et de <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Concatenate(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary vsli:raw="Concatenates two quaternions.">Concatène deux quaternions.</summary>
      <param name="value1" vsli:raw="The first quaternion rotation in the series.">Rotation du premier quaternion de la série.</param>
      <param name="value2" vsli:raw="The second quaternion rotation in the series.">Rotation du deuxième quaternion de la série.</param>
      <returns vsli:raw="A new quaternion representing the concatenation of the &lt;paramref name=&quot;value1&quot; /&gt; rotation followed by the &lt;paramref name=&quot;value2&quot; /&gt; rotation.">Un nouveau quaternion représentant la concaténation de la rotation de  <paramref name="value1" /> suivie de la rotation de <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Conjugate(System.Numerics.Quaternion)">
      <summary vsli:raw="Returns the conjugate of a specified quaternion.">Retourne le conjugué d'un quaternion spécifié.</summary>
      <param name="value" vsli:raw="The quaternion.">Quaternion.</param>
      <returns vsli:raw="A new quaternion that is the conjugate of &lt;see langword=&quot;value&quot; /&gt;.">Nouveau quaternion qui est le conjugué de <see langword="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.CreateFromAxisAngle(System.Numerics.Vector3,System.Single)">
      <summary vsli:raw="Creates a quaternion from a unit vector and an angle to rotate around the vector.">Crée un quaternion à partir d’un vecteur d’unité et d’un angle de rotation autour du vecteur.</summary>
      <param name="axis" vsli:raw="The unit vector to rotate around.">Vecteur d’unité autour duquel pivoter.</param>
      <param name="angle" vsli:raw="The angle, in radians, to rotate around the vector.">L'angle, en radians, dont il faut pivoter autour du vecteur.</param>
      <returns vsli:raw="The newly created quaternion.">Quaternion nouvellement créé.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.CreateFromRotationMatrix(System.Numerics.Matrix4x4)">
      <summary vsli:raw="Creates a quaternion from the specified rotation matrix.">Crée un quaternion à partir de la matrice de rotation spécifiée.</summary>
      <param name="matrix" vsli:raw="The rotation matrix.">Matrice de rotation.</param>
      <returns vsli:raw="The newly created quaternion.">Quaternion nouvellement créé.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)">
      <summary vsli:raw="Creates a new quaternion from the given yaw, pitch, and roll.">Crée un quaternion à partir du lacet, du tangage et du roulis donnés.</summary>
      <param name="yaw" vsli:raw="The yaw angle, in radians, around the Y axis.">L'angle du lacet, en radians, autour de l'axe Y.</param>
      <param name="pitch" vsli:raw="The pitch angle, in radians, around the X axis.">L'angle du tangage, en radians, autour de l'axe X.</param>
      <param name="roll" vsli:raw="The roll angle, in radians, around the Z axis.">L'angle du roulis, en radians, autour de l'axe Z.</param>
      <returns vsli:raw="The resulting quaternion.">Quaternion résultant.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Divide(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary vsli:raw="Divides one quaternion by a second quaternion.">Divise un quaternion par un deuxième quaternion.</summary>
      <param name="value1" vsli:raw="The dividend.">Dividende.</param>
      <param name="value2" vsli:raw="The divisor.">Diviseur.</param>
      <returns vsli:raw="The quaternion that results from dividing &lt;paramref name=&quot;value1&quot; /&gt; by &lt;paramref name=&quot;value2&quot; /&gt;.">Quaternion résultant de la division de <paramref name="value1" /> par <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Dot(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary vsli:raw="Calculates the dot product of two quaternions.">Calcule le produit scalaire de deux quaternions.</summary>
      <param name="quaternion1" vsli:raw="The first quaternion.">Premier quaternion.</param>
      <param name="quaternion2" vsli:raw="The second quaternion.">Deuxième quaternion.</param>
      <returns vsli:raw="The dot product.">Produit scalaire.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Equals(System.Numerics.Quaternion)">
      <summary vsli:raw="Returns a value that indicates whether this instance and another quaternion are equal.">Retourne une valeur qui indique si cette instance et un autre quaternion sont égaux.</summary>
      <param name="other" vsli:raw="The other quaternion.">L'autre quaternion.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two quaternions are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si les deux quaternions sont égaux ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance and a specified object are equal.">Retourne une valeur qui indique si cette instance et un objet spécifié sont égaux.</summary>
      <param name="obj" vsli:raw="The object to compare with the current instance.">Objet à comparer à l'instance actuelle.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current instance and &lt;paramref name=&quot;obj&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;paramref name=&quot;obj&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, the method returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'instance actuelle et <paramref name="obj" /> sont égaux ; sinon, <see langword="false" />. Si <paramref name="obj" /> est <see langword="null" />, la méthode retourne <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retourne le code de hachage de cette instance.</summary>
      <returns vsli:raw="The hash code.">Code de hachage.</returns>
    </member>
    <member name="P:System.Numerics.Quaternion.Identity">
      <summary vsli:raw="Gets a quaternion that represents no rotation.">Obtient un quaternion qui ne représente pas de rotation.</summary>
      <returns vsli:raw="A quaternion whose values are &lt;c&gt;(0, 0, 0, 1)&lt;/c&gt;.">Quaternion dont les valeurs sont <c>(0, 0, 0, 1)</c>.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Inverse(System.Numerics.Quaternion)">
      <summary vsli:raw="Returns the inverse of a quaternion.">Retourne l'inverse d'un quaternion.</summary>
      <param name="value" vsli:raw="The quaternion.">Quaternion.</param>
      <returns vsli:raw="The inverted quaternion.">Quaternion inversé.</returns>
    </member>
    <member name="P:System.Numerics.Quaternion.IsIdentity">
      <summary vsli:raw="Gets a value that indicates whether the current instance is the identity quaternion.">Obtient une valeur qui indique si l'instance actuelle est le quaternion identité.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current instance is the identity quaternion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'instance actuelle est le quaternion identité ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Length">
      <summary vsli:raw="Calculates the length of the quaternion.">Calcule la longueur du quaternion.</summary>
      <returns vsli:raw="The computed length of the quaternion.">Longueur calculée du quaternion.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.LengthSquared">
      <summary vsli:raw="Calculates the squared length of the quaternion.">Calcule le carré de la longueur du quaternion.</summary>
      <returns vsli:raw="The length squared of the quaternion.">Carré de la longueur du quaternion.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Lerp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single)">
      <summary vsli:raw="Performs a linear interpolation between two quaternions based on a value that specifies the weighting of the second quaternion.">Effectue une interpolation linéaire entre deux quaternions selon une valeur qui spécifie la pondération du deuxième quaternion.</summary>
      <param name="quaternion1" vsli:raw="The first quaternion.">Premier quaternion.</param>
      <param name="quaternion2" vsli:raw="The second quaternion.">Deuxième quaternion.</param>
      <param name="amount" vsli:raw="The relative weight of &lt;paramref name=&quot;quaternion2&quot; /&gt; in the interpolation.">Pondération relative de <paramref name="quaternion2" /> dans l'interpolation.</param>
      <returns vsli:raw="The interpolated quaternion.">Quaternion interpolé.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary vsli:raw="Returns the quaternion that results from multiplying two quaternions together.">Retourne le quaternion qui résulte de la multiplication de deux quaternions entre eux.</summary>
      <param name="value1" vsli:raw="The first quaternion.">Premier quaternion.</param>
      <param name="value2" vsli:raw="The second quaternion.">Deuxième quaternion.</param>
      <returns vsli:raw="The product quaternion.">Quaternion résultant du produit.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Multiply(System.Numerics.Quaternion,System.Single)">
      <summary vsli:raw="Returns the quaternion that results from scaling all the components of a specified quaternion by a scalar factor.">Retourne le quaternion qui résulte de la mise à l'échelle de tous les composants d'un quaternion spécifié selon un facteur scalaire.</summary>
      <param name="value1" vsli:raw="The source quaternion.">Quaternion source.</param>
      <param name="value2" vsli:raw="The scalar value.">Valeur scalaire.</param>
      <returns vsli:raw="The scaled quaternion.">Quaternion mis à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Negate(System.Numerics.Quaternion)">
      <summary vsli:raw="Reverses the sign of each component of the quaternion.">Inverse le signe de chaque composant du quaternion.</summary>
      <param name="value" vsli:raw="The quaternion to negate.">Quaternion dont le signe doit être inversé.</param>
      <returns vsli:raw="The negated quaternion.">Quaternion dont le signe a été inversé.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Normalize(System.Numerics.Quaternion)">
      <summary vsli:raw="Divides each component of a specified &lt;see cref=&quot;T:System.Numerics.Quaternion&quot; /&gt; by its length.">Divise chaque composant d'un <see cref="T:System.Numerics.Quaternion" /> spécifié par sa longueur.</summary>
      <param name="value" vsli:raw="The quaternion to normalize.">Quaternion à normaliser.</param>
      <returns vsli:raw="The normalized quaternion.">Quaternion normalisé.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Addition(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary vsli:raw="Adds each element in one quaternion with its corresponding element in a second quaternion.">Additionne chaque élément d'un quaternion à son élément correspondant dans un deuxième quaternion.</summary>
      <param name="value1" vsli:raw="The first quaternion.">Premier quaternion.</param>
      <param name="value2" vsli:raw="The second quaternion.">Deuxième quaternion.</param>
      <returns vsli:raw="The quaternion that contains the summed values of &lt;paramref name=&quot;value1&quot; /&gt; and &lt;paramref name=&quot;value2&quot; /&gt;.">Quaternion qui contient les valeurs additionnées de <paramref name="value1" /> et de <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Division(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary vsli:raw="Divides one quaternion by a second quaternion.">Divise un quaternion par un deuxième quaternion.</summary>
      <param name="value1" vsli:raw="The dividend.">Dividende.</param>
      <param name="value2" vsli:raw="The divisor.">Diviseur.</param>
      <returns vsli:raw="The quaternion that results from dividing &lt;paramref name=&quot;value1&quot; /&gt; by &lt;paramref name=&quot;value2&quot; /&gt;.">Quaternion résultant de la division de <paramref name="value1" /> par <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Equality(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary vsli:raw="Returns a value that indicates whether two quaternions are equal.">Retourne une valeur qui indique si deux quaternions sont égaux.</summary>
      <param name="value1" vsli:raw="The first quaternion to compare.">Premier quaternion à comparer.</param>
      <param name="value2" vsli:raw="The second quaternion to compare.">Deuxième quaternion à comparer.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two quaternions are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si les deux quaternions sont égaux ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Inequality(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary vsli:raw="Returns a value that indicates whether two quaternions are not equal.">Retourne une valeur qui indique si deux quaternions ne sont pas égaux.</summary>
      <param name="value1" vsli:raw="The first quaternion to compare.">Premier quaternion à comparer.</param>
      <param name="value2" vsli:raw="The second quaternion to compare.">Deuxième quaternion à comparer.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value1&quot; /&gt; and &lt;paramref name=&quot;value2&quot; /&gt; are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="value1" /> et <paramref name="value2" /> ne sont pas égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary vsli:raw="Returns the quaternion that results from multiplying two quaternions together.">Retourne le quaternion qui résulte de la multiplication de deux quaternions entre eux.</summary>
      <param name="value1" vsli:raw="The first quaternion.">Premier quaternion.</param>
      <param name="value2" vsli:raw="The second quaternion.">Deuxième quaternion.</param>
      <returns vsli:raw="The product quaternion.">Quaternion résultant du produit.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Multiply(System.Numerics.Quaternion,System.Single)">
      <summary vsli:raw="Returns the quaternion that results from scaling all the components of a specified quaternion by a scalar factor.">Retourne le quaternion qui résulte de la mise à l'échelle de tous les composants d'un quaternion spécifié selon un facteur scalaire.</summary>
      <param name="value1" vsli:raw="The source quaternion.">Quaternion source.</param>
      <param name="value2" vsli:raw="The scalar value.">Valeur scalaire.</param>
      <returns vsli:raw="The scaled quaternion.">Quaternion mis à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Subtraction(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary vsli:raw="Subtracts each element in a second quaternion from its corresponding element in a first quaternion.">Soustrait chaque élément d'un deuxième quaternion de son élément correspondant dans un premier quaternion.</summary>
      <param name="value1" vsli:raw="The first quaternion.">Premier quaternion.</param>
      <param name="value2" vsli:raw="The second quaternion.">Deuxième quaternion.</param>
      <returns vsli:raw="The quaternion containing the values that result from subtracting each element in &lt;paramref name=&quot;value2&quot; /&gt; from its corresponding element in &lt;paramref name=&quot;value1&quot; /&gt;.">Quaternion qui contient les valeurs qui résultent de la soustraction de chaque élément dans <paramref name="value2" /> de son élément correspondant dans <paramref name="value1" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_UnaryNegation(System.Numerics.Quaternion)">
      <summary vsli:raw="Reverses the sign of each component of the quaternion.">Inverse le signe de chaque composant du quaternion.</summary>
      <param name="value" vsli:raw="The quaternion to negate.">Quaternion dont le signe doit être inversé.</param>
      <returns vsli:raw="The negated quaternion.">Quaternion dont le signe a été inversé.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Slerp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single)">
      <summary vsli:raw="Interpolates between two quaternions, using spherical linear interpolation.">Effectue une interpolation entre deux quaternions, en utilisant une interpolation linéaire sphérique.</summary>
      <param name="quaternion1" vsli:raw="The first quaternion.">Premier quaternion.</param>
      <param name="quaternion2" vsli:raw="The second quaternion.">Deuxième quaternion.</param>
      <param name="amount" vsli:raw="The relative weight of the second quaternion in the interpolation.">La pondération relative du deuxième quaternion dans l'interpolation.</param>
      <returns vsli:raw="The interpolated quaternion.">Quaternion interpolé.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Subtract(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary vsli:raw="Subtracts each element in a second quaternion from its corresponding element in a first quaternion.">Soustrait chaque élément d'un deuxième quaternion de son élément correspondant dans un premier quaternion.</summary>
      <param name="value1" vsli:raw="The first quaternion.">Premier quaternion.</param>
      <param name="value2" vsli:raw="The second quaternion.">Deuxième quaternion.</param>
      <returns vsli:raw="The quaternion containing the values that result from subtracting each element in &lt;paramref name=&quot;value2&quot; /&gt; from its corresponding element in &lt;paramref name=&quot;value1&quot; /&gt;.">Quaternion qui contient les valeurs qui résultent de la soustraction de chaque élément dans <paramref name="value2" /> de son élément correspondant dans <paramref name="value1" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.ToString">
      <summary vsli:raw="Returns a string that represents this quaternion.">Retourne une chaîne qui représente ce quaternion.</summary>
      <returns vsli:raw="The string representation of this quaternion.">Représentation sous forme de chaîne de ce quaternion.</returns>
    </member>
    <member name="F:System.Numerics.Quaternion.W">
      <summary vsli:raw="The rotation component of the quaternion.">Composant de rotation du quaternion.</summary>
    </member>
    <member name="F:System.Numerics.Quaternion.X">
      <summary vsli:raw="The X value of the vector component of the quaternion.">Valeur X du composant vecteur du quaternion.</summary>
    </member>
    <member name="F:System.Numerics.Quaternion.Y">
      <summary vsli:raw="The Y value of the vector component of the quaternion.">Valeur Y du composant vecteur du quaternion.</summary>
    </member>
    <member name="F:System.Numerics.Quaternion.Z">
      <summary vsli:raw="The Z value of the vector component of the quaternion.">Valeur Z du composant vecteur du quaternion.</summary>
    </member>
    <member name="T:System.Numerics.Vector">
      <summary vsli:raw="Provides a collection of static methods for creating, manipulating, and otherwise operating on generic vectors.">Fournit une collection de méthodes d’usage statiques pour créer, manipuler, combiner et convertir des vecteurs génériques.</summary>
    </member>
    <member name="M:System.Numerics.Vector.Abs``1(System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a new vector whose elements are the absolute values of the given vector's elements.">Retourne un nouveau vecteur dont les éléments sont les valeurs absolues des éléments du vecteur spécifié.</summary>
      <param name="value" vsli:raw="The source vector.">Vecteur source.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns vsli:raw="The absolute value vector.">Vecteur de valeurs absolues.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Add``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a new vector whose values are the sum of each pair of elements from two given vectors.">Retourne un nouveau vecteur dont les valeurs correspondent à la somme de chaque paire d'éléments de deux vecteurs donnés.</summary>
      <param name="left" vsli:raw="The first vector.">Premier vecteur.</param>
      <param name="right" vsli:raw="The second vector.">Deuxième vecteur.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns vsli:raw="The summed vector.">Vecteur résultant de l'addition.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AndNot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a new vector by performing a bitwise And Not operation on each pair of corresponding elements in two vectors.">Retourne un nouveau vecteur en effectuant une opération Et Pas au niveau du bit sur chaque paire d'éléments correspondants dans deux vecteurs.</summary>
      <param name="left" vsli:raw="The first vector.">Premier vecteur.</param>
      <param name="right" vsli:raw="The second vector.">Deuxième vecteur.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns vsli:raw="The resulting vector.">Vecteur résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorByte``1(System.Numerics.Vector{``0})">
      <summary vsli:raw="Reinterprets the bits of a specified vector into those of a vector of unsigned bytes.">Réinterprète les bits d'un vecteur spécifié dans ceux d'un vecteur d'octets non signés.</summary>
      <param name="value" vsli:raw="The source vector.">Vecteur source.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns vsli:raw="The reinterpreted vector.">Vecteur réinterprété.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorDouble``1(System.Numerics.Vector{``0})">
      <summary vsli:raw="Reinterprets the bits of a specified vector into those of a double-precision floating-point vector.">Réinterprète les bits d'un vecteur spécifié dans ceux d'un vecteur à virgule flottante double précision.</summary>
      <param name="value" vsli:raw="The source vector.">Vecteur source.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns vsli:raw="The reinterpreted vector.">Vecteur réinterprété.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorInt16``1(System.Numerics.Vector{``0})">
      <summary vsli:raw="Reinterprets the bits of a specified vector into those of a vector of 16-bit integers.">Réinterprète les bits d'un vecteur spécifié dans ceux d'un vecteur d'entiers 16 bits.</summary>
      <param name="value" vsli:raw="The source vector.">Vecteur source.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns vsli:raw="The reinterpreted vector.">Vecteur réinterprété.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorInt32``1(System.Numerics.Vector{``0})">
      <summary vsli:raw="Reinterprets the bits of a specified vector into those of a vector of integers.">Réinterprète les bits d'un vecteur spécifié dans ceux d'un vecteur d'entiers.</summary>
      <param name="value" vsli:raw="The source vector.">Vecteur source.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns vsli:raw="The reinterpreted vector.">Vecteur réinterprété.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorInt64``1(System.Numerics.Vector{``0})">
      <summary vsli:raw="Reinterprets the bits of a specified vector into those of a vector of long integers.">Réinterprète les bits d'un vecteur spécifié dans ceux d'un vecteur d'entiers longs.</summary>
      <param name="value" vsli:raw="The source vector.">Vecteur source.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns vsli:raw="The reinterpreted vector.">Vecteur réinterprété.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorSByte``1(System.Numerics.Vector{``0})">
      <summary vsli:raw="Reinterprets the bits of a specified vector into those of a vector of signed bytes.">Réinterprète les bits d'un vecteur spécifié dans ceux d'un vecteur d'octets signés.</summary>
      <param name="value" vsli:raw="The source vector.">Vecteur source.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns vsli:raw="The reinterpreted vector.">Vecteur réinterprété.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorSingle``1(System.Numerics.Vector{``0})">
      <summary vsli:raw="Reinterprets the bits of a specified vector into those of a single-precision floating-point vector.">Réinterprète les bits d'un vecteur spécifié dans ceux d'un vecteur à virgule flottante simple précision.</summary>
      <param name="value" vsli:raw="The source vector.">Vecteur source.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns vsli:raw="The reinterpreted vector.">Vecteur réinterprété.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorUInt16``1(System.Numerics.Vector{``0})">
      <summary vsli:raw="Reinterprets the bits of a specified vector into those of a vector of unsigned 16-bit integers.">Réinterprète les bits d'un vecteur spécifié dans ceux d'un vecteur d'entiers 16 bits non signés.</summary>
      <param name="value" vsli:raw="The source vector.">Vecteur source.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns vsli:raw="The reinterpreted vector.">Vecteur réinterprété.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorUInt32``1(System.Numerics.Vector{``0})">
      <summary vsli:raw="Reinterprets the bits of a specified vector into those of a vector of unsigned integers.">Réinterprète les bits d'un vecteur spécifié dans ceux d'un vecteur d'entiers non signés.</summary>
      <param name="value" vsli:raw="The source vector.">Vecteur source.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns vsli:raw="The reinterpreted vector.">Vecteur réinterprété.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorUInt64``1(System.Numerics.Vector{``0})">
      <summary vsli:raw="Reinterprets the bits of a specified vector into those of a vector of unsigned long integers.">Réinterprète les bits d'un vecteur spécifié dans ceux d'un vecteur d'entiers longs non signés.</summary>
      <param name="value" vsli:raw="The source vector.">Vecteur source.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns vsli:raw="The reinterpreted vector.">Vecteur réinterprété.</returns>
    </member>
    <member name="M:System.Numerics.Vector.BitwiseAnd``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a new vector by performing a bitwise &lt;see langword=&quot;And&quot; /&gt; operation on each pair of elements in two vectors.">Retourne un nouveau vecteur en effectuant une opération <see langword="And" /> au niveau du bit sur chaque paire d'éléments dans deux vecteurs.</summary>
      <param name="left" vsli:raw="The first vector.">Premier vecteur.</param>
      <param name="right" vsli:raw="The second vector.">Deuxième vecteur.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns vsli:raw="The resulting vector.">Vecteur résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.BitwiseOr``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a new vector by performing a bitwise &lt;see langword=&quot;Or&quot; /&gt; operation on each pair of elements in two vectors.">Retourne un nouveau vecteur en effectuant une opération <see langword="Or" /> au niveau du bit sur chaque paire d'éléments dans deux vecteurs.</summary>
      <param name="left" vsli:raw="The first vector.">Premier vecteur.</param>
      <param name="right" vsli:raw="The second vector.">Deuxième vecteur.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns vsli:raw="The resulting vector.">Vecteur résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary vsli:raw="Creates a new single-precision vector with elements selected between two specified single-precision source vectors based on an integral mask vector.">Crée un vecteur simple précision avec des éléments sélectionnés parmi deux vecteurs sources simple précision spécifiés sur la base d'un vecteur de masque intégral.</summary>
      <param name="condition" vsli:raw="The integral mask vector used to drive selection.">Vecteur de masque intégral utilisé pour gérer la sélection.</param>
      <param name="left" vsli:raw="The first source vector.">Premier vecteur source.</param>
      <param name="right" vsli:raw="The second source vector.">Deuxième vecteur source.</param>
      <returns vsli:raw="The new vector with elements selected based on the mask.">Nouveau vecteur avec des éléments sélectionnés en fonction du masque.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary vsli:raw="Creates a new double-precision vector with elements selected between two specified double-precision source vectors based on an integral mask vector.">Crée un vecteur double précision avec des éléments sélectionnés parmi deux vecteurs sources double précision spécifiés sur la base d'un vecteur de masque intégral.</summary>
      <param name="condition" vsli:raw="The integral mask vector used to drive selection.">Vecteur de masque intégral utilisé pour gérer la sélection.</param>
      <param name="left" vsli:raw="The first source vector.">Premier vecteur source.</param>
      <param name="right" vsli:raw="The second source vector.">Deuxième vecteur source.</param>
      <returns vsli:raw="The new vector with elements selected based on the mask.">Nouveau vecteur avec des éléments sélectionnés en fonction du masque.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConditionalSelect``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Creates a new vector of a specified type with elements selected between two specified source vectors of the same type based on an integral mask vector.">Crée un vecteur d'un type spécifié avec des éléments sélectionnés parmi deux vecteurs sources spécifiés du même type sur la base d'un vecteur de masque intégral.</summary>
      <param name="condition" vsli:raw="The integral mask vector used to drive selection.">Vecteur de masque intégral utilisé pour gérer la sélection.</param>
      <param name="left" vsli:raw="The first source vector.">Premier vecteur source.</param>
      <param name="right" vsli:raw="The second source vector.">Deuxième vecteur source.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns vsli:raw="The new vector with elements selected based on the mask.">Nouveau vecteur avec des éléments sélectionnés en fonction du masque.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToDouble(System.Numerics.Vector{System.Int64})">
      <summary vsli:raw="Converts a &lt;c&gt;Vector&amp;lt;Int64&amp;gt;&lt;/c&gt; to a &lt;c&gt;Vector&amp;lt;Double&amp;gt;&lt;/c&gt;.">Convertit un <c>Vector&lt;Int64&gt;</c> en <c>Vector&lt;Double&gt;</c>.</summary>
      <param name="value" vsli:raw="The source vector.">Vecteur source.</param>
      <returns vsli:raw="The converted vector.">Vecteur converti.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToDouble(System.Numerics.Vector{System.UInt64})">
      <summary vsli:raw="Converts a &lt;c&gt;Vector&amp;lt;UInt64&amp;gt;&lt;/c&gt; to a &lt;c&gt;Vector&amp;lt;Double&amp;gt;&lt;/c&gt;.">Convertit un <c>Vector&lt;UInt64&gt;</c> en <c>Vector&lt;Double&gt;</c>.</summary>
      <param name="value" vsli:raw="The source vector.">Vecteur source.</param>
      <returns vsli:raw="The converted vector.">Vecteur converti.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToInt32(System.Numerics.Vector{System.Single})">
      <summary vsli:raw="Converts a &lt;c&gt;Vector&amp;lt;Single&amp;gt;&lt;/c&gt; to a &lt;c&gt;Vector&amp;lt;Int32&amp;gt;&lt;/c&gt;.">Convertit un <c>Vector&lt;Single&gt;</c> en <c>Vector&lt;Int32&gt;</c>.</summary>
      <param name="value" vsli:raw="The source vector.">Vecteur source.</param>
      <returns vsli:raw="The converted vector.">Vecteur converti.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToInt64(System.Numerics.Vector{System.Double})">
      <summary vsli:raw="Converts a &lt;c&gt;Vector&amp;lt;Double&amp;gt;&lt;/c&gt; to a &lt;c&gt;Vector&amp;lt;Int64&amp;gt;&lt;/c&gt;.">Convertit un <c>Vector&lt;Double&gt;</c> en <c>Vector&lt;Int64&gt;</c>.</summary>
      <param name="value" vsli:raw="The source vector.">Vecteur source.</param>
      <returns vsli:raw="The converted vector.">Vecteur converti.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToSingle(System.Numerics.Vector{System.Int32})">
      <summary vsli:raw="Converts a &lt;c&gt;Vector&amp;lt;Int32&amp;gt;&lt;/c&gt; to a &lt;c&gt;Vector&amp;lt;Single&amp;gt;&lt;/c&gt;.">Convertit un <c>Vector&lt;Int32&gt;</c> en <c>Vector&lt;Single&gt;</c>.</summary>
      <param name="value" vsli:raw="The source vector.">Vecteur source.</param>
      <returns vsli:raw="The converted vector.">Vecteur converti.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToSingle(System.Numerics.Vector{System.UInt32})">
      <summary vsli:raw="Converts a &lt;c&gt;Vector&amp;lt;UInt32&amp;gt;&lt;/c&gt; to a &lt;c&gt;Vector&amp;lt;Single&amp;gt;&lt;/c&gt;.">Convertit un <c>Vector&lt;UInt32&gt;</c> en <c>Vector&lt;Single&gt;</c>.</summary>
      <param name="value" vsli:raw="The source vector.">Vecteur source.</param>
      <returns vsli:raw="The converted vector.">Vecteur converti.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToUInt32(System.Numerics.Vector{System.Single})">
      <summary vsli:raw="Converts a &lt;c&gt;Vector&amp;lt;Single&amp;gt;&lt;/c&gt; to a &lt;c&gt;Vector&amp;lt;UInt32&amp;gt;&lt;/c&gt;.">Convertit un <c>Vector&lt;Single&gt;</c> en <c>Vector&lt;UInt32&gt;</c>.</summary>
      <param name="value" vsli:raw="The source vector.">Vecteur source.</param>
      <returns vsli:raw="The converted vector.">Vecteur converti.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToUInt64(System.Numerics.Vector{System.Double})">
      <summary vsli:raw="Converts a &lt;c&gt;Vector&amp;lt;Double&amp;gt;&lt;/c&gt; to a &lt;c&gt;Vector&amp;lt;UInt64&amp;gt;&lt;/c&gt;.">Convertit un <c>Vector&lt;Double&gt;</c> en <c>Vector&lt;UInt64&gt;</c>.</summary>
      <param name="value" vsli:raw="The source vector.">Vecteur source.</param>
      <returns vsli:raw="The converted vector.">Vecteur converti.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Divide``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a new vector whose values are the result of dividing the first vector's elements by the corresponding elements in the second vector.">Retourne un nouveau vecteur dont les valeurs sont le résultat de la division des éléments du premier vecteur par les éléments correspondants du second vecteur.</summary>
      <param name="left" vsli:raw="The first vector.">Premier vecteur.</param>
      <param name="right" vsli:raw="The second vector.">Deuxième vecteur.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns vsli:raw="The divided vector.">Vecteur divisé.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Dot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns the dot product of two vectors.">Retourne le produit scalaire de deux vecteurs.</summary>
      <param name="left" vsli:raw="The first vector.">Premier vecteur.</param>
      <param name="right" vsli:raw="The second vector.">Deuxième vecteur.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns vsli:raw="The dot product.">Produit scalaire.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary vsli:raw="Returns a new integral vector whose elements signal whether the elements in two specified double-precision vectors are equal.">Retourne un nouveau vecteur intégral dont les éléments indiquent si les éléments de deux vecteurs double précision spécifiés sont égaux.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Premier vecteur à comparer.</param>
      <param name="right" vsli:raw="The second vector to compare.">Deuxième vecteur à comparer.</param>
      <returns vsli:raw="The resulting integral vector.">Vecteur intégral résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary vsli:raw="Returns a new integral vector whose elements signal whether the elements in two specified integral vectors are equal.">Retourne un nouveau vecteur intégral dont les éléments indiquent si les éléments de deux vecteurs intégraux spécifiés sont égaux.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Premier vecteur à comparer.</param>
      <param name="right" vsli:raw="The second vector to compare.">Deuxième vecteur à comparer.</param>
      <returns vsli:raw="The resulting integral vector.">Vecteur intégral résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary vsli:raw="Returns a new vector whose elements signal whether the elements in two specified long integer vectors are equal.">Retourne un nouveau vecteur dont les éléments indiquent si les éléments de deux vecteurs entiers longs spécifiés sont égaux.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Premier vecteur à comparer.</param>
      <param name="right" vsli:raw="The second vector to compare.">Deuxième vecteur à comparer.</param>
      <returns vsli:raw="The resulting long integer vector.">Vecteur entier long résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary vsli:raw="Returns a new integral vector whose elements signal whether the elements in two specified single-precision vectors are equal.">Retourne un nouveau vecteur intégral dont les éléments indiquent si les éléments de deux vecteurs simple précision spécifiés sont égaux.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Premier vecteur à comparer.</param>
      <param name="right" vsli:raw="The second vector to compare.">Deuxième vecteur à comparer.</param>
      <returns vsli:raw="The resulting integral vector.">Vecteur intégral résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a new vector of a specified type whose elements signal whether the elements in two specified vectors of the same type are equal.">Retourne un nouveau vecteur d'un type spécifié dont les éléments indiquent si les éléments de deux vecteurs spécifiés du même type sont égaux.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Premier vecteur à comparer.</param>
      <param name="right" vsli:raw="The second vector to compare.">Deuxième vecteur à comparer.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns vsli:raw="The resulting vector.">Vecteur résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.EqualsAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a value that indicates whether each pair of elements in the given vectors is equal.">Retourne une valeur qui indique si chaque paire d'éléments dans les vecteurs spécifiés est égale.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Premier vecteur à comparer.</param>
      <param name="right" vsli:raw="The second vector to compare.">Deuxième vecteur à comparer.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all elements in &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si tous les éléments dans <paramref name="left" /> et <paramref name="right" /> sont égaux ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.EqualsAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a value that indicates whether any single pair of elements in the given vectors is equal.">Retourne une valeur qui indique si au moins deux paires d'éléments dans les vecteurs spécifiés sont égales.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Premier vecteur à comparer.</param>
      <param name="right" vsli:raw="The second vector to compare.">Deuxième vecteur à comparer.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if any element pair in &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; is equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si des paires d'éléments dans <paramref name="left" /> et <paramref name="right" /> sont égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary vsli:raw="Returns a new integral vector whose elements signal whether the elements in one double-precision floating-point vector are greater than their corresponding elements in a second double-precision floating-point vector.">Retourne un nouveau vecteur intégral dont les éléments indiquent si les éléments d'un vecteur à virgule flottante double précision sont supérieurs à leurs éléments correspondants dans un second vecteur à virgule flottante double précision.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Premier vecteur à comparer.</param>
      <param name="right" vsli:raw="The second vector to compare.">Deuxième vecteur à comparer.</param>
      <returns vsli:raw="The resulting integral vector.">Vecteur intégral résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary vsli:raw="Returns a new integral vector whose elements signal whether the elements in one integral vector are greater than their corresponding elements in a second integral vector.">Retourne un nouveau vecteur intégral dont les éléments indiquent si les éléments d'un vecteur intégral sont supérieurs à leurs éléments correspondants dans un second vecteur intégral.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Premier vecteur à comparer.</param>
      <param name="right" vsli:raw="The second vector to compare.">Deuxième vecteur à comparer.</param>
      <returns vsli:raw="The resulting integral vector.">Vecteur intégral résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary vsli:raw="Returns a new long integer vector whose elements signal whether the elements in one long integer vector are greater than their corresponding elements in a second long integer vector.">Retourne un nouveau vecteur entier long dont les éléments indiquent si les éléments d'un vecteur entier long sont supérieurs à leurs éléments correspondants dans un second vecteur entier long.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Premier vecteur à comparer.</param>
      <param name="right" vsli:raw="The second vector to compare.">Deuxième vecteur à comparer.</param>
      <returns vsli:raw="The resulting long integer vector.">Vecteur entier long résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary vsli:raw="Returns a new integral vector whose elements signal whether the elements in one single-precision floating-point vector are greater than their corresponding elements in a second single-precision floating-point vector.">Retourne un nouveau vecteur intégral dont les éléments indiquent si les éléments d'un vecteur à virgule flottante simple précision sont supérieurs à leurs éléments correspondants dans un second vecteur à virgule flottante simple précision.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Premier vecteur à comparer.</param>
      <param name="right" vsli:raw="The second vector to compare.">Deuxième vecteur à comparer.</param>
      <returns vsli:raw="The resulting integral vector.">Vecteur intégral résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a new vector whose elements signal whether the elements in one vector of a specified type are greater than their corresponding elements in the second vector of the same time.">Retourne un nouveau vecteur dont les éléments indiquent si les éléments d'un vecteur d'un type spécifié sont supérieurs à leurs éléments correspondants dans le second vecteur du même type.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Premier vecteur à comparer.</param>
      <param name="right" vsli:raw="The second vector to compare.">Deuxième vecteur à comparer.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns vsli:raw="The resulting vector.">Vecteur résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a value that indicates whether all elements in the first vector are greater than the corresponding elements in the second vector.">Retourne une valeur qui indique si tous les éléments du premier vecteur sont supérieurs aux éléments correspondants dans le second vecteur.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Premier vecteur à comparer.</param>
      <param name="right" vsli:raw="The second vector to compare.">Deuxième vecteur à comparer.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all elements in &lt;paramref name=&quot;left&quot; /&gt; are greater than the corresponding elements in &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si tous les éléments dans <paramref name="left" /> sont supérieurs aux éléments correspondants dans <paramref name="right" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a value that indicates whether any element in the first vector is greater than the corresponding element in the second vector.">Retourne une valeur qui indique si un élément du premier vecteur est supérieur à l'élément correspondant dans le second vecteur.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Premier vecteur à comparer.</param>
      <param name="right" vsli:raw="The second vector to compare.">Deuxième vecteur à comparer.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if any element in &lt;paramref name=&quot;left&quot; /&gt; is greater than the corresponding element in &lt;paramref name=&quot;right&quot; /&gt;; otherwise,  &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si un élément de <paramref name="left" /> est supérieur à l'élément correspondant dans <paramref name="right" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary vsli:raw="Returns a new integral vector whose elements signal whether the elements in one vector are greater than or equal to their corresponding elements in the second double-precision floating-point vector.">Retourne un nouveau vecteur intégral dont les éléments indiquent si les éléments d'un vecteur sont supérieurs ou égaux à leurs éléments correspondants dans le second vecteur à virgule flottante double précision.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Premier vecteur à comparer.</param>
      <param name="right" vsli:raw="The second vector to compare.">Deuxième vecteur à comparer.</param>
      <returns vsli:raw="The resulting integral vector.">Vecteur intégral résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary vsli:raw="Returns a new integral vector whose elements signal whether the elements in one integral vector are greater than or equal to their corresponding elements in the second integral vector.">Retourne un nouveau vecteur intégral dont les éléments indiquent si les éléments d'un vecteur intégral sont supérieurs ou égaux à leurs éléments correspondants dans le second vecteur intégral.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Premier vecteur à comparer.</param>
      <param name="right" vsli:raw="The second vector to compare.">Deuxième vecteur à comparer.</param>
      <returns vsli:raw="The resulting integral vector.">Vecteur intégral résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary vsli:raw="Returns a new long integer vector whose elements signal whether the elements in one long integer vector are greater than or equal to their corresponding elements in the second long integer vector.">Retourne un nouveau vecteur entier long dont les éléments indiquent si les éléments d'un vecteur entier long sont supérieurs ou égaux à leurs éléments correspondants dans le second vecteur entier long.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Premier vecteur à comparer.</param>
      <param name="right" vsli:raw="The second vector to compare.">Deuxième vecteur à comparer.</param>
      <returns vsli:raw="The resulting long integer vector.">Vecteur entier long résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary vsli:raw="Returns a new integral vector whose elements signal whether the elements in one vector are greater than or equal to their corresponding elements in the single-precision floating-point second vector.">Retourne un nouveau vecteur intégral dont les éléments indiquent si les éléments d'un vecteur sont supérieurs ou égaux à leurs éléments correspondants dans le second vecteur à virgule flottante simple précision.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Premier vecteur à comparer.</param>
      <param name="right" vsli:raw="The second vector to compare.">Deuxième vecteur à comparer.</param>
      <returns vsli:raw="The resulting integral vector.">Vecteur intégral résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a new vector whose elements signal whether the elements in one vector of a specified type are greater than or equal to their corresponding elements in the second vector of the same type.">Retourne un nouveau vecteur dont les éléments indiquent si les éléments d'un vecteur d'un type spécifié sont supérieurs ou égaux à leurs éléments correspondants dans le second vecteur du même type.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Premier vecteur à comparer.</param>
      <param name="right" vsli:raw="The second vector to compare.">Deuxième vecteur à comparer.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns vsli:raw="The resulting vector.">Vecteur résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a value that indicates whether all elements in the first vector are greater than or equal to all the corresponding elements in the second vector.">Retourne une valeur qui indique si tous les éléments du premier vecteur sont supérieurs ou égaux à tous les éléments correspondants dans le second vecteur.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Premier vecteur à comparer.</param>
      <param name="right" vsli:raw="The second vector to compare.">Deuxième vecteur à comparer.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all elements in &lt;paramref name=&quot;left&quot; /&gt; are greater than or equal to the corresponding elements in &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si tous les éléments dans <paramref name="left" /> sont supérieurs ou égaux aux éléments correspondants dans <paramref name="right" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a value that indicates whether any element in the first vector is greater than or equal to the corresponding element in the second vector.">Retourne une valeur qui indique si un élément du premier vecteur est supérieur ou égal à l'élément correspondant dans le second vecteur.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Premier vecteur à comparer.</param>
      <param name="right" vsli:raw="The second vector to compare.">Deuxième vecteur à comparer.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if any element in &lt;paramref name=&quot;left&quot; /&gt; is greater than or equal to the corresponding element in &lt;paramref name=&quot;right&quot; /&gt;; otherwise,  &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si un élément de <paramref name="left" /> est supérieur ou égal à l'élément correspondant dans <paramref name="right" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.Vector.IsHardwareAccelerated">
      <summary vsli:raw="Gets a value that indicates whether vector operations are subject to hardware acceleration through JIT intrinsic support.">Obtient une valeur qui indique si les opérations de vecteur sont soumises à l'accélération matérielle via la prise en charge intrinsèque JIT.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if vector operations are subject to hardware acceleration; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si les opérations de vecteur sont soumises à l'accélération matérielle ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary vsli:raw="Returns a new integral vector whose elements signal whether the elements in one double-precision floating-point vector are less than their corresponding elements in a second double-precision floating-point vector.">Retourne un nouveau vecteur intégral dont les éléments indiquent si les éléments d'un vecteur à virgule flottante double précision sont inférieurs à leurs éléments correspondants dans un second vecteur à virgule flottante double précision.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Premier vecteur à comparer.</param>
      <param name="right" vsli:raw="The second vector to compare.">Deuxième vecteur à comparer.</param>
      <returns vsli:raw="The resulting integral vector.">Vecteur intégral résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary vsli:raw="Returns a new integral vector whose elements signal whether the elements in one integral vector are less than their corresponding elements in a second integral vector.">Retourne un nouveau vecteur intégral dont les éléments indiquent si les éléments d'un vecteur intégral sont inférieurs à leurs éléments correspondants dans un second vecteur intégral.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Premier vecteur à comparer.</param>
      <param name="right" vsli:raw="The second vector to compare.">Deuxième vecteur à comparer.</param>
      <returns vsli:raw="The resulting integral vector.">Vecteur intégral résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary vsli:raw="Returns a new long integer vector whose elements signal whether the elements in one long integer vector are less than their corresponding elements in a second long integer vector.">Retourne un nouveau vecteur entier long dont les éléments indiquent si les éléments d'un vecteur entier long sont inférieurs à leurs éléments correspondants dans un second vecteur entier long.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Premier vecteur à comparer.</param>
      <param name="right" vsli:raw="The second vector to compare.">Deuxième vecteur à comparer.</param>
      <returns vsli:raw="The resulting long integer vector.">Vecteur entier long résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary vsli:raw="Returns a new integral vector whose elements signal whether the elements in one single-precision vector are less than their corresponding elements in a second single-precision vector.">Retourne un nouveau vecteur intégral dont les éléments indiquent si les éléments d'un vecteur simple précision sont inférieurs à leurs éléments correspondants dans un second vecteur simple précision.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Premier vecteur à comparer.</param>
      <param name="right" vsli:raw="The second vector to compare.">Deuxième vecteur à comparer.</param>
      <returns vsli:raw="The resulting integral vector.">Vecteur intégral résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a new vector of a specified type whose elements signal whether the elements in one vector are less than their corresponding elements in the second vector.">Retourne un nouveau vecteur d'un type spécifié dont les éléments indiquent si les éléments d'un vecteur sont inférieurs à leurs éléments correspondants dans le second vecteur.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Premier vecteur à comparer.</param>
      <param name="right" vsli:raw="The second vector to compare.">Deuxième vecteur à comparer.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns vsli:raw="The resulting vector.">Vecteur résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a value that indicates whether all of the elements in the first vector are less than their corresponding elements in the second vector.">Retourne une valeur qui indique si tous les éléments du premier vecteur sont inférieurs à leurs éléments correspondants dans le second vecteur.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Premier vecteur à comparer.</param>
      <param name="right" vsli:raw="The second vector to compare.">Deuxième vecteur à comparer.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all of the elements in &lt;paramref name=&quot;left&quot; /&gt; are less than the corresponding elements in &lt;paramref name=&quot;right&quot; /&gt;; otherwise,  &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si tous les éléments dans <paramref name="left" /> sont inférieurs aux éléments correspondants dans <paramref name="right" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a value that indicates whether any element in the first vector is less than the corresponding element in the second vector.">Retourne une valeur qui indique si un élément du premier vecteur est inférieur à l'élément correspondant dans le second vecteur.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Premier vecteur à comparer.</param>
      <param name="right" vsli:raw="The second vector to compare.">Deuxième vecteur à comparer.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if any element in &lt;paramref name=&quot;left&quot; /&gt; is less than the corresponding element in &lt;paramref name=&quot;right&quot; /&gt;; otherwise,  &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si un élément de <paramref name="left" /> est inférieur à l'élément correspondant dans <paramref name="right" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary vsli:raw="Returns a new integral vector whose elements signal whether the elements in one double-precision floating-point vector are less than or equal to their corresponding elements in a second double-precision floating-point vector.">Retourne un nouveau vecteur intégral dont les éléments indiquent si les éléments d'un vecteur à virgule flottante double précision sont inférieurs ou égaux à leurs éléments correspondants dans un second vecteur à virgule flottante double précision.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Premier vecteur à comparer.</param>
      <param name="right" vsli:raw="The second vector to compare.">Deuxième vecteur à comparer.</param>
      <returns vsli:raw="The resulting integral vector.">Vecteur intégral résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary vsli:raw="Returns a new integral vector whose elements signal whether the elements in one integral vector are less than or equal to their corresponding elements in a second integral vector.">Retourne un nouveau vecteur intégral dont les éléments indiquent si les éléments d'un vecteur intégral sont inférieurs ou égaux à leurs éléments correspondants dans un second vecteur intégral.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Premier vecteur à comparer.</param>
      <param name="right" vsli:raw="The second vector to compare.">Deuxième vecteur à comparer.</param>
      <returns vsli:raw="The resulting integral vector.">Vecteur intégral résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary vsli:raw="Returns a new long integer vector whose elements signal whether the elements in one long integer vector are less or equal to their corresponding elements in a second long integer vector.">Retourne un nouveau vecteur entier long dont les éléments indiquent si les éléments d'un vecteur entier long sont inférieurs ou égaux à leurs éléments correspondants dans un second vecteur entier long.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Premier vecteur à comparer.</param>
      <param name="right" vsli:raw="The second vector to compare.">Deuxième vecteur à comparer.</param>
      <returns vsli:raw="The resulting long integer vector.">Vecteur entier long résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary vsli:raw="Returns a new integral vector whose elements signal whether the elements in one single-precision floating-point vector are less than or equal to their corresponding elements in a second single-precision floating-point vector.">Retourne un nouveau vecteur intégral dont les éléments indiquent si les éléments d'un vecteur à virgule flottante simple précision sont inférieurs ou égaux à leurs éléments correspondants dans un second vecteur à virgule flottante simple précision.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Premier vecteur à comparer.</param>
      <param name="right" vsli:raw="The second vector to compare.">Deuxième vecteur à comparer.</param>
      <returns vsli:raw="The resulting integral vector.">Vecteur intégral résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a new vector whose elements signal whether the elements in one vector are less than or equal to their corresponding elements in the second vector.">Retourne un nouveau vecteur dont les éléments indiquent si les éléments d'un vecteur sont inférieurs ou égaux à leurs éléments correspondants dans le second vecteur.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Premier vecteur à comparer.</param>
      <param name="right" vsli:raw="The second vector to compare.">Deuxième vecteur à comparer.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns vsli:raw="The resulting vector.">Vecteur résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a value that indicates whether all elements in the first vector are less than or equal to their corresponding elements in the second vector.">Retourne une valeur qui indique si tous les éléments du premier vecteur sont inférieurs ou égaux à leurs éléments correspondants dans le second vecteur.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Premier vecteur à comparer.</param>
      <param name="right" vsli:raw="The second vector to compare.">Deuxième vecteur à comparer.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all of the elements in &lt;paramref name=&quot;left&quot; /&gt; are less than or equal to the corresponding elements in &lt;paramref name=&quot;right&quot; /&gt;; otherwise,  &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si tous les éléments dans <paramref name="left" /> sont inférieurs ou égaux aux éléments correspondants dans <paramref name="right" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a value that indicates whether any element in the first vector is less than or equal to the corresponding element in the second vector.">Retourne une valeur qui indique si un élément du premier vecteur est inférieur ou égal à l'élément correspondant dans le second vecteur.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Premier vecteur à comparer.</param>
      <param name="right" vsli:raw="The second vector to compare.">Deuxième vecteur à comparer.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if any element in &lt;paramref name=&quot;left&quot; /&gt; is less than or equal to the corresponding element in &lt;paramref name=&quot;right&quot; /&gt;; otherwise,  &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si un élément de <paramref name="left" /> est inférieur ou égal à l'élément correspondant dans <paramref name="right" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Max``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a new vector whose elements are the maximum of each pair of elements in the two given vectors.">Retourne un nouveau vecteur dont les valeurs sont le maximum de chaque paire d'éléments dans deux vecteurs donnés.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Premier vecteur à comparer.</param>
      <param name="right" vsli:raw="The second vector to compare.">Deuxième vecteur à comparer.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns vsli:raw="The maximum vector.">Vecteur maximal.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Min``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a new vector whose elements are the minimum of each pair of elements in the two given vectors.">Retourne un nouveau vecteur dont les valeurs sont le minimum de chaque paire d'éléments dans deux vecteurs donnés.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Premier vecteur à comparer.</param>
      <param name="right" vsli:raw="The second vector to compare.">Deuxième vecteur à comparer.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns vsli:raw="The minimum vector.">Vecteur minimal.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Multiply``1(``0,System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a new vector whose values are a scalar value multiplied by each of the values of a specified vector.">Retourne un nouveau vecteur dont les valeurs sont une valeur scalaire multipliée par chacune des valeurs d'un vecteur spécifié.</summary>
      <param name="left" vsli:raw="The scalar value.">Valeur scalaire.</param>
      <param name="right" vsli:raw="The vector.">Vecteur.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns vsli:raw="The scaled vector.">Vecteur mis à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Multiply``1(System.Numerics.Vector{``0},``0)">
      <summary vsli:raw="Returns a new vector whose values are the values of a specified vector each multiplied by a scalar value.">Retourne un nouveau vecteur dont les valeurs sont les valeurs d'un vecteur spécifié multipliées chacune par une valeur scalaire.</summary>
      <param name="left" vsli:raw="The vector.">Vecteur.</param>
      <param name="right" vsli:raw="The scalar value.">Valeur scalaire.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns vsli:raw="The scaled vector.">Vecteur mis à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Multiply``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a new vector whose values are the product of each pair of elements in two specified vectors.">Retourne un nouveau vecteur dont les valeurs sont le produit de chaque paire d'éléments dans deux vecteurs spécifiés.</summary>
      <param name="left" vsli:raw="The first vector.">Premier vecteur.</param>
      <param name="right" vsli:raw="The second vector.">Deuxième vecteur.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns vsli:raw="The element-wise product vector.">Vecteur résultant du produit d’éléments.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary vsli:raw="Narrows two &lt;c&gt;Vector&amp;lt;Double&amp;gt;&lt;/c&gt; instances into one &lt;c&gt;Vector&amp;lt;Single&amp;gt;&lt;/c&gt;.">Réduit deux instances de <c>Vector&lt;Double&gt;</c> en un <c>Vector&lt;Single&gt;</c>.</summary>
      <param name="source1">Premier vecteur source, dont les éléments deviennent les éléments d’index inférieur de la valeur de retour.</param>
      <param name="source2">Second vecteur source, dont les éléments deviennent les éléments d’index supérieur de la valeur de retour.</param>
      <returns vsli:raw="A &lt;c&gt;Vector&amp;lt;Single&amp;gt;&lt;/c&gt; containing elements narrowed from the source vectors.">
        <c>Vector&lt;Single&gt;</c> contenant les éléments réduits des vecteurs sources.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int16},System.Numerics.Vector{System.Int16})">
      <summary vsli:raw="Narrows two &lt;c&gt;Vector&amp;lt;Int16&amp;gt;&lt;/c&gt; instances into one &lt;c&gt;Vector&amp;lt;SByte&amp;gt;&lt;/c&gt;.">Réduit deux instances de <c>Vector&lt;Int16&gt;</c> en un <c>Vector&lt;SByte&gt;</c>.</summary>
      <param name="source1">Premier vecteur source, dont les éléments deviennent les éléments d’index inférieur de la valeur de retour.</param>
      <param name="source2">Second vecteur source, dont les éléments deviennent les éléments d’index supérieur de la valeur de retour.</param>
      <returns vsli:raw="A &lt;c&gt;Vector&amp;lt;SByte&amp;gt;&lt;/c&gt; containing elements narrowed from the source vectors.">
        <c>Vector&lt;SByte&gt;</c> contenant les éléments réduits des vecteurs sources.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary vsli:raw="Narrows two &lt;c&gt;Vector&amp;lt;Int32&amp;gt;&lt;/c&gt; instances into one &lt;c&gt;Vector&amp;lt;Int16&amp;gt;&lt;/c&gt;.">Réduit deux instances de <c>Vector&lt;Int32&gt;</c> en un <c>Vector&lt;Int16&gt;</c>.</summary>
      <param name="source1">Premier vecteur source, dont les éléments deviennent les éléments d’index inférieur de la valeur de retour.</param>
      <param name="source2">Second vecteur source, dont les éléments deviennent les éléments d’index supérieur de la valeur de retour.</param>
      <returns vsli:raw="A &lt;c&gt;Vector&amp;lt;Int16&amp;gt;&lt;/c&gt; containing elements narrowed from the source vectors.">
        <c>Vector&lt;Int16&gt;</c> contenant les éléments réduits des vecteurs sources.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary vsli:raw="Narrows two &lt;c&gt;Vector&amp;lt;Int64&amp;gt;&lt;/c&gt; instances into one &lt;c&gt;Vector&amp;lt;Int32&amp;gt;&lt;/c&gt;.">Réduit deux instances de <c>Vector&lt;Int64&gt;</c> en un <c>Vector&lt;Int32&gt;</c>.</summary>
      <param name="source1">Premier vecteur source, dont les éléments deviennent les éléments d’index inférieur de la valeur de retour.</param>
      <param name="source2">Second vecteur source, dont les éléments deviennent les éléments d’index supérieur de la valeur de retour.</param>
      <returns vsli:raw="A &lt;c&gt;Vector&amp;lt;Int32&amp;gt;&lt;/c&gt; containing elements narrowed from the source vectors.">
        <c>Vector&lt;Int32&gt;</c> contenant les éléments réduits des vecteurs sources.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt16},System.Numerics.Vector{System.UInt16})">
      <summary vsli:raw="Narrows two &lt;c&gt;Vector&amp;lt;UInt16&amp;gt;&lt;/c&gt; instances into one &lt;c&gt;Vector&amp;lt;Byte&amp;gt;&lt;/c&gt;.">Réduit deux instances de <c>Vector&lt;UInt16&gt;</c> en un <c>Vector&lt;Byte&gt;</c>.</summary>
      <param name="source1">Premier vecteur source, dont les éléments deviennent les éléments d’index inférieur de la valeur de retour.</param>
      <param name="source2">Second vecteur source, dont les éléments deviennent les éléments d’index supérieur de la valeur de retour.</param>
      <returns vsli:raw="A &lt;c&gt;Vector&amp;lt;Byte&amp;gt;&lt;/c&gt; containing elements narrowed from the source vectors.">
        <c>Vector&lt;Byte&gt;</c> contenant les éléments réduits des vecteurs sources.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt32},System.Numerics.Vector{System.UInt32})">
      <summary vsli:raw="Narrows two &lt;c&gt;Vector&amp;lt;UInt32&amp;gt;&lt;/c&gt; instances into one &lt;c&gt;Vector&amp;lt;UInt16&amp;gt;&lt;/c&gt;.">Réduit deux instances de <c>Vector&lt;UInt32&gt;</c> en un <c>Vector&lt;UInt16&gt;</c>.</summary>
      <param name="source1">Premier vecteur source, dont les éléments deviennent les éléments d’index inférieur de la valeur de retour.</param>
      <param name="source2">Second vecteur source, dont les éléments deviennent les éléments d’index supérieur de la valeur de retour.</param>
      <returns vsli:raw="A &lt;c&gt;Vector&amp;lt;UInt16&amp;gt;&lt;/c&gt; containing elements narrowed from the source vectors.">
        <c>Vector&lt;UInt16&gt;</c> contenant les éléments réduits des vecteurs sources.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt64},System.Numerics.Vector{System.UInt64})">
      <summary vsli:raw="Narrows two &lt;c&gt;Vector&amp;lt;UInt64&amp;gt;&lt;/c&gt; instances into one &lt;c&gt;Vector&amp;lt;UInt32&amp;gt;&lt;/c&gt;.">Réduit deux instances de <c>Vector&lt;UInt64&gt;</c> en un <c>Vector&lt;UInt32&gt;</c>.</summary>
      <param name="source1">Premier vecteur source, dont les éléments deviennent les éléments d’index inférieur de la valeur de retour.</param>
      <param name="source2">Second vecteur source, dont les éléments deviennent les éléments d’index supérieur de la valeur de retour.</param>
      <returns vsli:raw="A &lt;c&gt;Vector&amp;lt;UInt32&amp;gt;&lt;/c&gt; containing elements narrowed from the source vectors.">
        <c>Vector&lt;UInt32&gt;</c> contenant les éléments réduits des vecteurs sources.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Negate``1(System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a new vector whose elements are the negation of the corresponding element in the specified vector.">Retourne un nouveau vecteur dont les éléments sont l'opposé de l'élément correspondant dans le vecteur spécifié.</summary>
      <param name="value" vsli:raw="The source vector.">Vecteur source.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns vsli:raw="The negated vector.">Vecteur dont le signe a été inversé.</returns>
    </member>
    <member name="M:System.Numerics.Vector.OnesComplement``1(System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a new vector whose elements are obtained by taking the one's complement of a specified vector's elements.">Retourne un nouveau vecteur dont les éléments sont obtenus en prenant le complément des éléments d'un vecteur spécifié.</summary>
      <param name="value" vsli:raw="The source vector.">Vecteur source.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns vsli:raw="The resulting vector.">Vecteur résultant.</returns>
    </member>
    <member name="M:System.Numerics.Vector.SquareRoot``1(System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a new vector whose elements are the square roots of a specified vector's elements.">Retourne un nouveau vecteur dont les éléments sont la racine carrée des éléments d'un vecteur spécifié.</summary>
      <param name="value" vsli:raw="The source vector.">Vecteur source.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns vsli:raw="The square root vector.">Racine carrée du vecteur.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Subtract``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a new vector whose values are the difference between the elements in the second vector and their corresponding elements in the first vector.">Retourne un nouveau vecteur dont les valeurs correspondent à la différence entre les éléments du second vecteur et leurs éléments correspondants dans le premier vecteur.</summary>
      <param name="left" vsli:raw="The first vector.">Premier vecteur.</param>
      <param name="right" vsli:raw="The second vector.">Deuxième vecteur.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns vsli:raw="The difference vector.">Vecteur de différence.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Byte},System.Numerics.Vector{System.UInt16}@,System.Numerics.Vector{System.UInt16}@)">
      <summary vsli:raw="Widens a &lt;c&gt;Vector&amp;lt;Byte&amp;gt;&lt;/c&gt; into two &lt;c&gt;Vector&amp;lt;UInt16&amp;gt;&lt;/c&gt; instances.">Étend un <c>Vector&lt;Byte&gt;</c> dans deux instances <c>Vector&lt;UInt16&gt;</c>.</summary>
      <param name="source" vsli:raw="The source vector whose elements are widened into the outputs.">Vecteur source dont les éléments sont étendus dans les sorties.</param>
      <param name="dest1">Premier vecteur de sortie, dont les éléments contiendront les éléments étendus des index inférieurs dans le vecteur source.</param>
      <param name="dest2">Second vecteur de sortie, dont les éléments contiendront les éléments étendus des index supérieurs dans le vecteur source.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Int16},System.Numerics.Vector{System.Int32}@,System.Numerics.Vector{System.Int32}@)">
      <summary vsli:raw="Widens a &lt;c&gt;Vector&amp;lt;Int16&amp;gt;&lt;/c&gt; into two &lt;c&gt;Vector&amp;lt;Int32&amp;gt;&lt;/c&gt; instances.">Étend un <c>Vector&lt;Int16&gt;</c> dans deux instances <c>Vector&lt;Int32&gt;</c>.</summary>
      <param name="source" vsli:raw="The source vector whose elements are widened into the outputs.">Vecteur source dont les éléments sont étendus dans les sorties.</param>
      <param name="dest1">Premier vecteur de sortie, dont les éléments contiendront les éléments étendus des index inférieurs dans le vecteur source.</param>
      <param name="dest2">Second vecteur de sortie, dont les éléments contiendront les éléments étendus des index supérieurs dans le vecteur source.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int64}@,System.Numerics.Vector{System.Int64}@)">
      <summary vsli:raw="Widens a &lt;c&gt;Vector&amp;lt;Int32&amp;gt;&lt;/c&gt; into two &lt;c&gt;Vector&amp;lt;Int64&amp;gt;&lt;/c&gt; instances.">Étend un <c>Vector&lt;Int32&gt;</c> dans deux instances <c>Vector&lt;Int64&gt;</c>.</summary>
      <param name="source" vsli:raw="The source vector whose elements are widened into the outputs.">Vecteur source dont les éléments sont étendus dans les sorties.</param>
      <param name="dest1">Premier vecteur de sortie, dont les éléments contiendront les éléments étendus des index inférieurs dans le vecteur source.</param>
      <param name="dest2">Second vecteur de sortie, dont les éléments contiendront les éléments étendus des index supérieurs dans le vecteur source.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.SByte},System.Numerics.Vector{System.Int16}@,System.Numerics.Vector{System.Int16}@)">
      <summary vsli:raw="Widens a &lt;c&gt;Vector&amp;lt;SByte&amp;gt;&lt;/c&gt; into two &lt;c&gt;Vector&amp;lt;Int16&amp;gt;&lt;/c&gt; instances.">Étend un <c>Vector&lt;SByte&gt;</c> dans deux instances <c>Vector&lt;Int16&gt;</c>.</summary>
      <param name="source" vsli:raw="The source vector whose elements are widened into the outputs.">Vecteur source dont les éléments sont étendus dans les sorties.</param>
      <param name="dest1">Premier vecteur de sortie, dont les éléments contiendront les éléments étendus des index inférieurs dans le vecteur source.</param>
      <param name="dest2">Second vecteur de sortie, dont les éléments contiendront les éléments étendus des index supérieurs dans le vecteur source.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Double}@,System.Numerics.Vector{System.Double}@)">
      <summary vsli:raw="Widens a &lt;c&gt;Vector&amp;lt;Single&amp;gt;&lt;/c&gt; into two &lt;c&gt;Vector&amp;lt;Double&amp;gt;&lt;/c&gt; instances.">Étend un <c>Vector&lt;Single&gt;</c> dans deux instances <c>Vector&lt;Double&gt;</c>.</summary>
      <param name="source" vsli:raw="The source vector whose elements are widened into the outputs.">Vecteur source dont les éléments sont étendus dans les sorties.</param>
      <param name="dest1">Premier vecteur de sortie, dont les éléments contiendront les éléments étendus des index inférieurs dans le vecteur source.</param>
      <param name="dest2">Second vecteur de sortie, dont les éléments contiendront les éléments étendus des index supérieurs dans le vecteur source.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.UInt16},System.Numerics.Vector{System.UInt32}@,System.Numerics.Vector{System.UInt32}@)">
      <summary vsli:raw="Widens a &lt;c&gt;Vector&amp;lt;UInt16&amp;gt;&lt;/c&gt; into two &lt;c&gt;Vector&amp;lt;UInt32&amp;gt;&lt;/c&gt; instances.">Étend un <c>Vector&lt;UInt16&gt;</c> dans deux instances <c>Vector&lt;UInt32&gt;</c>.</summary>
      <param name="source" vsli:raw="The source vector whose elements are widened into the outputs.">Vecteur source dont les éléments sont étendus dans les sorties.</param>
      <param name="dest1">Premier vecteur de sortie, dont les éléments contiendront les éléments étendus des index inférieurs dans le vecteur source.</param>
      <param name="dest2">Second vecteur de sortie, dont les éléments contiendront les éléments étendus des index supérieurs dans le vecteur source.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.UInt32},System.Numerics.Vector{System.UInt64}@,System.Numerics.Vector{System.UInt64}@)">
      <summary vsli:raw="Widens a &lt;c&gt;Vector&amp;lt;UInt32&amp;gt;&lt;/c&gt; into two &lt;c&gt;Vector&amp;lt;UInt64&amp;gt;&lt;/c&gt; instances.">Étend un <c>Vector&lt;UInt32&gt;</c> dans deux instances <c>Vector&lt;UInt64&gt;</c>.</summary>
      <param name="source" vsli:raw="The source vector whose elements are widened into the outputs.">Vecteur source dont les éléments sont étendus dans les sorties.</param>
      <param name="dest1">Premier vecteur de sortie, dont les éléments contiendront les éléments étendus des index inférieurs dans le vecteur source.</param>
      <param name="dest2">Second vecteur de sortie, dont les éléments contiendront les éléments étendus des index supérieurs dans le vecteur source.</param>
    </member>
    <member name="M:System.Numerics.Vector.Xor``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a new vector by performing a bitwise exclusive Or (&lt;see langword=&quot;XOr&quot; /&gt;) operation on each pair of elements in two vectors.">Retourne un nouveau vecteur en effectuant une opération Ou Exclusif au niveau du bit (<see langword="XOr" />) sur chaque paire d'éléments dans deux vecteurs.</summary>
      <param name="left" vsli:raw="The first vector.">Premier vecteur.</param>
      <param name="right" vsli:raw="The second vector.">Deuxième vecteur.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
      <returns vsli:raw="The resulting vector.">Vecteur résultant.</returns>
    </member>
    <member name="T:System.Numerics.Vector`1">
      <summary vsli:raw="Represents a single vector of a specified numeric type that is suitable for low-level optimization of parallel algorithms.">Représente un vecteur unique d'un type numérique spécifié qui convient à l'optimisation de bas niveau des algorithmes parallèles.</summary>
      <typeparam name="T" vsli:raw="The type of the elements in the vector. &lt;typeparamref name=&quot;T&quot; /&gt; can be any primitive numeric type.">Type de vecteur. <c>T</c> peut être n’importe quel type numérique primitif.</typeparam>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(`0)">
      <summary vsli:raw="Creates a vector whose components are of a specified type.">Crée un vecteur dont les composants sont d'un type spécifié.</summary>
      <param name="value" vsli:raw="The numeric type that defines the type of the components in the vector.">Type numérique qui définit le type des composants dans le vecteur.</param>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(`0[])">
      <summary vsli:raw="Creates a vector from a specified array.">Crée un vecteur à partir d'un tableau spécifié.</summary>
      <param name="values" vsli:raw="The values to add to the vector, as an array of objects of type T. The array must contain at least &lt;see cref=&quot;P:System.Numerics.Vector`1.Count&quot; /&gt; elements and only the first &lt;see cref=&quot;P:System.Numerics.Vector`1.Count&quot; /&gt; elements are used.">Tableau numérique.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;values&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="values" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(`0[],System.Int32)">
      <summary vsli:raw="Creates a vector from a specified array starting at a specified index position.">Crée un vecteur à partir d'un tableau spécifié en commençant à la position d'index spécifiée.</summary>
      <param name="values" vsli:raw="The values to add to the vector, as an array of objects of type T. The array must contain at least &lt;see cref=&quot;P:System.Numerics.Vector`1.Count&quot; /&gt; elements from the specified index and only the first &lt;see cref=&quot;P:System.Numerics.Vector`1.Count&quot; /&gt; elements are used.">Tableau numérique.</param>
      <param name="index" vsli:raw="The starting index position from which to create the vector.">Position d'index de départ à partir de laquelle créer le vecteur.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;values&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="values" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of &lt;paramref name=&quot;values&quot; /&gt; minus &lt;paramref name=&quot;index&quot; /&gt; is less than &lt;see cref=&quot;P:System.Numerics.Vector`1.Count&quot; /&gt;.">
        <paramref name="index" /> est inférieur à zéro.

ou -
La longueur de <paramref name="values" /> moins <paramref name="index" /> est inférieure à <see cref="P:System.Numerics.Vector`1.Count" />.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(System.ReadOnlySpan{`0})">
      <summary vsli:raw="Constructs a vector from the given &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt;.">Construit un vecteur à partir de la <see cref="T:System.ReadOnlySpan`1" /> donnée.</summary>
      <param name="values" vsli:raw="The values to add to the vector, as a read-only span of objects of type &lt;see langword=&quot;T&quot; /&gt;. The span must contain at least &lt;see cref=&quot;P:System.Numerics.Vector`1.Count&quot; /&gt; elements and only the first &lt;see cref=&quot;P:System.Numerics.Vector`1.Count&quot; /&gt; elements are used.">Valeurs à ajouter au vecteur, sous la forme d’une plage d’objets en lecture seule de type T. La plage doit contenir au moins les éléments <see cref="P:System.Numerics.Vector`1.Count" />.</param>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Constructs a vector from the given read-only span of bytes.">Construit un vecteur à partir de la plage d’octets en lecture seule donnée.</summary>
      <param name="values" vsli:raw="A read-only span of bytes that contains the values to add to the vector. The span must contain at least &lt;see cref=&quot;P:System.Numerics.Vector`1.Count&quot; /&gt; elements and only the first &lt;see cref=&quot;P:System.Numerics.Vector`1.Count&quot; /&gt; elements are used.">Plage d’octets en lecture seule qui contient les valeurs à ajouter au vecteur. La plage doit contenir au moins les éléments <see cref="P:System.Numerics.Vector`1.Count" />.</param>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(System.Span{`0})">
      <summary vsli:raw="Constructs a vector from the given &lt;see cref=&quot;T:System.Span`1&quot; /&gt;.">Construit un vecteur à partir de la <see cref="T:System.Span`1" /> donnée.</summary>
      <param name="values" vsli:raw="The values to add to the vector, as a span of objects of type T. The span must contain at least &lt;see cref=&quot;P:System.Numerics.Vector`1.Count&quot; /&gt; elements and only the first &lt;see cref=&quot;P:System.Numerics.Vector`1.Count&quot; /&gt; elements are used.">Valeurs à ajouter au vecteur, sous la forme d’une plage d’objets de type T. La plage doit contenir au moins les éléments <see cref="P:System.Numerics.Vector`1.Count" />.</param>
    </member>
    <member name="M:System.Numerics.Vector`1.CopyTo(`0[])">
      <summary vsli:raw="Copies the vector instance to a specified destination array.">Copie l'instance de vecteur dans un tableau de destination spécifié.</summary>
      <param name="destination" vsli:raw="The array to receive a copy of the vector values.">Tableau devant recevoir une copie des valeurs de vecteur.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destination" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the current vector is greater than the number of elements available in the &lt;paramref name=&quot;destination&quot; /&gt; array.">Le nombre d’éléments dans le vecteur actuel est supérieur au nombre d’éléments disponibles dans le tableau <paramref name="destination" />.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the vector instance to a specified destination array starting at a specified index position.">Copie l'instance de vecteur dans un tableau de destination spécifié, en commençant à une position d'index spécifiée.</summary>
      <param name="destination" vsli:raw="The array to receive a copy of the vector values.">Tableau devant recevoir une copie des valeurs de vecteur.</param>
      <param name="startIndex" vsli:raw="The starting index in &lt;paramref name=&quot;destination&quot; /&gt; at which to begin the copy operation.">Index de départ dans <paramref name="destination" /> auquel commencer l'opération de copie.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destination" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the current instance is greater than the number of elements available from &lt;paramref name=&quot;startIndex&quot; /&gt; to the end of the &lt;paramref name=&quot;destination&quot; /&gt; array.">Le nombre d’éléments dans l’instance actuelle est supérieur au nombre d’éléments disponibles entre <paramref name="startIndex" /> et la fin du tableau <paramref name="destination" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero or greater than the last index in &lt;paramref name=&quot;destination&quot; /&gt;.">
        <paramref name="index" /> est inférieur à zéro ou supérieur au dernier index dans <paramref name="destination" />.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.CopyTo(System.Span{`0})">
      <summary vsli:raw="Copies the vector to the given span. .">Copie le vecteur dans la plage donnée. .</summary>
      <param name="destination" vsli:raw="The destination span to which the values are copied. The destination span must be at least size &lt;see cref=&quot;P:System.Numerics.Vector`1.Count&quot; /&gt;.">Plage de destination dans laquelle les valeurs sont copiées. La taille de la plage de destination doit être au moins de <see cref="P:System.Numerics.Vector`1.Count" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source vector is greater than those available in the destination span.">Le nombre d’éléments dans le vecteur source est supérieur au nombre disponible dans la plage de destination.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.CopyTo(System.Span{System.Byte})">
      <summary vsli:raw="Copies the vector to the given &lt;see cref=&quot;T:System.Span`1&quot; /&gt;.">Copie le vecteur dans la <see cref="T:System.Span`1" /> donnée.</summary>
      <param name="destination" vsli:raw="The destination span to which the values are copied. The destination span must be at least size &lt;see cref=&quot;P:System.Numerics.Vector`1.Count&quot; /&gt;.">Plage de destination dans laquelle les valeurs sont copiées. La taille de la plage de destination doit être au moins de <see cref="P:System.Numerics.Vector`1.Count" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source vector is greater than those available in the destination span.">Le nombre d’éléments dans le vecteur source est supérieur au nombre disponible dans la plage de destination.</exception>
    </member>
    <member name="P:System.Numerics.Vector`1.Count">
      <summary vsli:raw="Returns the number of elements stored in the vector.">Retourne le nombre d'éléments stockés dans le vecteur.</summary>
      <returns vsli:raw="The number of elements stored in the vector.">Nombre d'éléments stockés dans le vecteur.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Access to the property getter via reflection is not supported.&#xA;        &#xA;-or-&#xA;        &#xA;.NET 5 and later: Type &lt;see langword=&quot;T&quot; /&gt; is not supported.">L’accès à la méthode getter de propriété via réflexion n’est pas pris en charge.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.Equals(System.Numerics.Vector{`0})">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to a specified vector.">Retourne une valeur qui indique si cette instance est égale à un vecteur spécifié.</summary>
      <param name="other" vsli:raw="The vector to compare with this instance.">Vecteur à comparer à cette instance.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current instance and &lt;paramref name=&quot;other&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'instance actuelle et <paramref name="other" /> sont égaux ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to a specified object.">Retourne une valeur qui indique si cette instance est égale à un objet spécifié.</summary>
      <param name="obj" vsli:raw="The object to compare with this instance.">Objet à comparer avec cette instance.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current instance and &lt;paramref name=&quot;obj&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The method returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is null, or if &lt;paramref name=&quot;obj&quot; /&gt; is a vector of a different type than the current instance.">
        <see langword="true" /> si l'instance actuelle et <paramref name="obj" /> sont égaux ; sinon, <see langword="false" />. La méthode retourne <see langword="false" /> si <paramref name="obj" /> a la valeur null ou si <paramref name="obj" /> est un vecteur d'un type différent de l'instance actuelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retourne le code de hachage de cette instance.</summary>
      <returns vsli:raw="The hash code.">Code de hachage.</returns>
    </member>
    <member name="P:System.Numerics.Vector`1.Item(System.Int32)">
      <summary vsli:raw="Gets the element at a specified index.">Obtient l'élément au niveau d'un index spécifié.</summary>
      <param name="index" vsli:raw="The index of the element to return.">Index de l'élément à retourner.</param>
      <returns vsli:raw="The element at index &lt;paramref name=&quot;index&quot; /&gt;.">Élément à l'index <paramref name="index" />.</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is greater than or equal to &lt;see cref=&quot;P:System.Numerics.Vector`1.Count&quot; /&gt;.">
        <paramref name="index" /> est inférieur à zéro.

ou -
<paramref name="index" /> est supérieur ou égal à <see cref="P:System.Numerics.Vector`1.Count" />.</exception>
    </member>
    <member name="P:System.Numerics.Vector`1.One">
      <summary vsli:raw="Returns a vector containing all ones.">Retourne un vecteur contenant uniquement des 1.</summary>
      <returns vsli:raw="A vector containing all ones.">Vecteur contenant uniquement des 1.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Addition(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary vsli:raw="Adds two vectors together.">Additionne deux vecteurs.</summary>
      <param name="left" vsli:raw="The first vector to add.">Premier vecteur à additionner.</param>
      <param name="right" vsli:raw="The second vector to add.">Deuxième vecteur à additionner.</param>
      <returns vsli:raw="The summed vector.">Vecteur résultant de l'addition.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_BitwiseAnd(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary vsli:raw="Returns a new vector by performing a bitwise &lt;see langword=&quot;And&quot; /&gt; operation on each of the elements in two vectors.">Retourne un nouveau vecteur en effectuant une opération <see langword="And" /> au niveau du bit sur chacun des éléments dans deux vecteurs.</summary>
      <param name="left" vsli:raw="The first vector.">Premier vecteur.</param>
      <param name="right" vsli:raw="The second vector.">Deuxième vecteur.</param>
      <returns vsli:raw="The vector that results from the bitwise &lt;see langword=&quot;And&quot; /&gt; of &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt;.">Vecteur qui résulte de l'opération <see langword="And" /> sur <paramref name="left" /> et <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_BitwiseOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary vsli:raw="Returns a new vector by performing a bitwise &lt;see langword=&quot;Or&quot; /&gt; operation on each of the elements in two vectors.">Retourne un nouveau vecteur en effectuant une opération <see langword="Or" /> au niveau du bit sur chacun des éléments dans deux vecteurs.</summary>
      <param name="left" vsli:raw="The first vector.">Premier vecteur.</param>
      <param name="right" vsli:raw="The second vector.">Deuxième vecteur.</param>
      <returns vsli:raw="The vector that results from the bitwise &lt;see langword=&quot;Or&quot; /&gt; of the elements in &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt;.">Vecteur qui résulte de l'opération <see langword="Or" /> au niveau du bit sur les éléments dans <paramref name="left" /> et <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Division(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary vsli:raw="Divides the first vector by the second.">Divise le premier vecteur par le deuxième.</summary>
      <param name="left" vsli:raw="The first vector.">Premier vecteur.</param>
      <param name="right" vsli:raw="The second vector.">Deuxième vecteur.</param>
      <returns vsli:raw="The vector that results from dividing &lt;paramref name=&quot;left&quot; /&gt; by &lt;paramref name=&quot;right&quot; /&gt;.">Vecteur résultant de la division de <paramref name="left" /> par <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Equality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary vsli:raw="Returns a value that indicates whether each pair of elements in two specified vectors are equal.">Retourne une valeur qui indique si chacune des paires d'éléments dans deux vecteurs spécifiés sont égales.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Premier vecteur à comparer.</param>
      <param name="right" vsli:raw="The second vector to compare.">Deuxième vecteur à comparer.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="left" /> et <paramref name="right" /> sont égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_ExclusiveOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary vsli:raw="Returns a new vector by performing a bitwise &lt;see langword=&quot;XOr&quot; /&gt; operation on each of the elements in two vectors.">Retourne un nouveau vecteur en effectuant une opération <see langword="XOr" /> au niveau du bit sur chacun des éléments dans deux vecteurs.</summary>
      <param name="left" vsli:raw="The first vector.">Premier vecteur.</param>
      <param name="right" vsli:raw="The second vector.">Deuxième vecteur.</param>
      <returns vsli:raw="The vector that results from the bitwise &lt;see langword=&quot;XOr&quot; /&gt; of the elements in &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt;.">Vecteur qui résulte de l'opération <see langword="XOr" /> au niveau du bit sur les éléments dans <paramref name="left" /> et <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Byte}">
      <summary vsli:raw="Reinterprets the bits of the specified vector into a vector of type &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">Réinterprète les bits du vecteur spécifié dans un vecteur de type <see cref="T:System.Byte" />.</summary>
      <param name="value" vsli:raw="The vector to reinterpret.">Vecteur à réinterpréter.</param>
      <returns vsli:raw="The reinterpreted vector.">Vecteur réinterprété.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Double}">
      <summary vsli:raw="Reinterprets the bits of the specified vector into a vector of type &lt;see cref=&quot;T:System.Double&quot; /&gt;.">Réinterprète les bits du vecteur spécifié dans un vecteur de type <see cref="T:System.Double" />.</summary>
      <param name="value" vsli:raw="The vector to reinterpret.">Vecteur à réinterpréter.</param>
      <returns vsli:raw="The reinterpreted vector.">Vecteur réinterprété.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int16}">
      <summary vsli:raw="Reinterprets the bits of the specified vector into a vector of type &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">Réinterprète les bits du vecteur spécifié dans un vecteur de type <see cref="T:System.Int16" />.</summary>
      <param name="value" vsli:raw="The vector to reinterpret.">Vecteur à réinterpréter.</param>
      <returns vsli:raw="The reinterpreted vector.">Vecteur réinterprété.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int32}">
      <summary vsli:raw="Reinterprets the bits of the specified vector into a vector of type &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">Réinterprète les bits du vecteur spécifié dans un vecteur de type <see cref="T:System.Int32" />.</summary>
      <param name="value" vsli:raw="The vector to reinterpret.">Vecteur à réinterpréter.</param>
      <returns vsli:raw="The reinterpreted vector.">Vecteur réinterprété.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int64}">
      <summary vsli:raw="Reinterprets the bits of the specified vector into a vector of type &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">Réinterprète les bits du vecteur spécifié dans un vecteur de type <see cref="T:System.Int64" />.</summary>
      <param name="value" vsli:raw="The vector to reinterpret.">Vecteur à réinterpréter.</param>
      <returns vsli:raw="The reinterpreted vector.">Vecteur réinterprété.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.SByte}">
      <summary vsli:raw="Reinterprets the bits of the specified vector into a vector of type &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">Réinterprète les bits du vecteur spécifié dans un vecteur de type <see cref="T:System.SByte" />.</summary>
      <param name="value" vsli:raw="The vector to reinterpret.">Vecteur à réinterpréter.</param>
      <returns vsli:raw="The reinterpreted vector.">Vecteur réinterprété.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Single}">
      <summary vsli:raw="Reinterprets the bits of the specified vector into a vector of type &lt;see cref=&quot;T:System.Single&quot; /&gt;.">Réinterprète les bits du vecteur spécifié dans un vecteur de type <see cref="T:System.Single" />.</summary>
      <param name="value" vsli:raw="The vector to reinterpret.">Vecteur à réinterpréter.</param>
      <returns vsli:raw="The reinterpreted vector.">Vecteur réinterprété.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt16}">
      <summary vsli:raw="Reinterprets the bits of the specified vector into a vector of type &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">Réinterprète les bits du vecteur spécifié dans un vecteur de type <see cref="T:System.UInt16" />.</summary>
      <param name="value" vsli:raw="The vector to reinterpret.">Vecteur à réinterpréter.</param>
      <returns vsli:raw="The reinterpreted vector.">Vecteur réinterprété.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt32}">
      <summary vsli:raw="Reinterprets the bits of the specified vector into a vector of type &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">Réinterprète les bits du vecteur spécifié dans un vecteur de type <see cref="T:System.UInt32" />.</summary>
      <param name="value" vsli:raw="The vector to reinterpret.">Vecteur à réinterpréter.</param>
      <returns vsli:raw="The reinterpreted vector.">Vecteur réinterprété.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt64}">
      <summary vsli:raw="Reinterprets the bits of the specified vector into a vector of type &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">Réinterprète les bits du vecteur spécifié dans un vecteur de type <see cref="T:System.UInt64" />.</summary>
      <param name="value" vsli:raw="The vector to reinterpret.">Vecteur à réinterpréter.</param>
      <returns vsli:raw="The reinterpreted vector.">Vecteur réinterprété.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Inequality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary vsli:raw="Returns a value that indicates whether any single pair of elements in the specified vectors is equal.">Retourne une valeur qui indique si au moins deux paires d'éléments dans les vecteurs spécifiés sont égales.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Premier vecteur à comparer.</param>
      <param name="right" vsli:raw="The second vector to compare.">Deuxième vecteur à comparer.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if any element pairs in left and right are equal. &lt;see langword=&quot;false&quot; /&gt; if no element pairs are equal.">
        <see langword="true" /> si des paires d'éléments left et right sont égales. <see langword="false" /> si aucune paire d'éléments n'est égale à une autre.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Multiply(`0,System.Numerics.Vector{`0})">
      <summary vsli:raw="Multiplies a vector by a specified scalar value.">Multiplie un vecteur par une valeur scalaire spécifiée.</summary>
      <param name="factor" vsli:raw="The scalar value.">Valeur scalaire.</param>
      <param name="value" vsli:raw="The source vector.">Vecteur source.</param>
      <returns vsli:raw="The scaled vector.">Vecteur mis à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},`0)">
      <summary vsli:raw="Multiplies a vector by a specified scalar value.">Multiplie un vecteur par une valeur scalaire spécifiée.</summary>
      <param name="value" vsli:raw="The source vector.">Vecteur source.</param>
      <param name="factor" vsli:raw="A scalar value.">Valeur scalaire.</param>
      <returns vsli:raw="The scaled vector.">Vecteur mis à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary vsli:raw="Returns a new vector whose values are the product of each pair of elements in two specified vectors.">Retourne un nouveau vecteur dont les valeurs sont le produit de chaque paire d'éléments dans deux vecteurs spécifiés.</summary>
      <param name="left" vsli:raw="The first vector.">Premier vecteur.</param>
      <param name="right" vsli:raw="The second vector.">Deuxième vecteur.</param>
      <returns vsli:raw="The element-wise product vector.">Vecteur résultant du produit d’éléments.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_OnesComplement(System.Numerics.Vector{`0})">
      <summary vsli:raw="Returns a new vector whose elements are obtained by taking the one's complement of a specified vector's elements.">Retourne un nouveau vecteur dont les éléments sont obtenus en prenant le complément des éléments d'un vecteur spécifié.</summary>
      <param name="value" vsli:raw="The source vector.">Vecteur source.</param>
      <returns vsli:raw="The one's complement vector.">Vecteur complément d'un autre.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Subtraction(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary vsli:raw="Subtracts the second vector from the first.">Soustrait le deuxième vecteur du premier.</summary>
      <param name="left" vsli:raw="The first vector.">Premier vecteur.</param>
      <param name="right" vsli:raw="The second vector.">Deuxième vecteur.</param>
      <returns vsli:raw="The vector that results from subtracting &lt;paramref name=&quot;right&quot; /&gt; from &lt;paramref name=&quot;left&quot; /&gt;.">Vecteur résultant de la soustraction de <paramref name="right" /> de <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_UnaryNegation(System.Numerics.Vector{`0})">
      <summary vsli:raw="Negates a given vector.">Inverse un vecteur donné.</summary>
      <param name="value" vsli:raw="The vector to negate.">Vecteur dont le signe doit être inversé.</param>
      <returns vsli:raw="The negated vector.">Vecteur dont le signe a été inversé.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.ToString">
      <summary vsli:raw="Returns the string representation of this vector using default formatting.">Retourne la représentation sous forme de chaîne de ce vecteur en utilisant la mise en forme par défaut.</summary>
      <returns vsli:raw="The string representation of this vector.">Représentation sous forme de chaîne de ce vecteur.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.ToString(System.String)">
      <summary vsli:raw="Returns the string representation of this vector using the specified format string to format individual elements.">Retourne la représentation sous forme de chaîne de ce vecteur en utilisant la chaîne de format spécifiée pour mettre en forme les éléments individuels.</summary>
      <param name="format" vsli:raw="The format of individual elements.">Un  ou  qui définit le format d’éléments individuels.</param>
      <returns vsli:raw="The string representation of the current instance.">Représentation sous forme de chaîne de l'instance actuelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.ToString(System.String,System.IFormatProvider)">
      <summary vsli:raw="Returns the string representation of this vector using the specified format string to format individual elements and the specified format provider to define culture-specific formatting.">Retourne la représentation sous forme de chaîne de ce vecteur en utilisant la chaîne de format spécifiée pour mettre en forme les éléments individuels et le fournisseur de format spécifié pour définir la mise en forme spécifique à la culture.</summary>
      <param name="format" vsli:raw="The format of individual elements.">Un  ou  qui définit le format d’éléments individuels.</param>
      <param name="formatProvider" vsli:raw="A format provider that supplies culture-specific formatting information.">Fournisseur de format qui fournit les informations de mise en forme spécifiques à la culture.</param>
      <returns vsli:raw="The string representation of the current instance.">Représentation sous forme de chaîne de l'instance actuelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.TryCopyTo(System.Span{`0})">
      <summary vsli:raw="Attempts to copy the vector to the given &lt;see cref=&quot;T:System.Span`1&quot; /&gt;.">Tente de copier le vecteur vers la <see cref="T:System.Span`1" /> donnée.</summary>
      <param name="destination" vsli:raw="The destination span to which the values are copied. The destination span must be at least size &lt;see cref=&quot;P:System.Numerics.Vector`1.Count&quot; /&gt;.">Plage de destination dans laquelle les valeurs sont copiées. La taille de la plage de destination doit être au moins de <see cref="P:System.Numerics.Vector`1.Count" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the source vector was successfully copied to &lt;paramref name=&quot;destination&quot; /&gt;. &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is not large enough to hold the source vector.">
        <see langword="true" /> si le vecteur source a été correctement copié vers <paramref name="destination" />. <see langword="false" /> si <paramref name="destination" /> n’est pas assez grand pour contenir le vecteur source.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.TryCopyTo(System.Span{System.Byte})">
      <summary vsli:raw="Attempts to copy the vector to the given byte span.">Tente de copier le vecteur vers la plage d’octets donnée.</summary>
      <param name="destination" vsli:raw="The destination span to which the values are copied. The destination span must be at least size &lt;see cref=&quot;P:System.Numerics.Vector`1.Count&quot; /&gt;.">Plage de destination dans laquelle les valeurs sont copiées. La taille de la plage de destination doit être au moins de <see cref="P:System.Numerics.Vector`1.Count" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the source vector was successfully copied to &lt;paramref name=&quot;destination&quot; /&gt;. &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is not large enough to hold the source vector.">
        <see langword="true" /> si le vecteur source a été correctement copié vers <paramref name="destination" />. <see langword="false" /> si <paramref name="destination" /> n’est pas assez grand pour contenir le vecteur source.</returns>
    </member>
    <member name="P:System.Numerics.Vector`1.Zero">
      <summary vsli:raw="Returns a vector containing all zeroes.">Retourne un vecteur contenant uniquement des 0.</summary>
      <returns vsli:raw="A vector containing all zeroes.">Vecteur contenant uniquement des 0.</returns>
    </member>
    <member name="T:System.Numerics.Vector2">
      <summary vsli:raw="Represents a vector with two single-precision floating-point values.">Représente un vecteur de deux valeurs en virgule flottante à simple précision.</summary>
    </member>
    <member name="M:System.Numerics.Vector2.#ctor(System.Single)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Numerics.Vector2&quot; /&gt; object whose two elements have the same value.">Crée un objet <see cref="T:System.Numerics.Vector2" /> dont les deux éléments ont la même valeur.</summary>
      <param name="value" vsli:raw="The value to assign to both elements.">Valeur à affecter aux deux éléments.</param>
    </member>
    <member name="M:System.Numerics.Vector2.#ctor(System.Single,System.Single)">
      <summary vsli:raw="Creates a vector whose elements have the specified values.">Crée un vecteur dont les éléments ont les valeurs spécifiées.</summary>
      <param name="x" vsli:raw="The value to assign to the &lt;see cref=&quot;F:System.Numerics.Vector2.X&quot; /&gt; field.">Valeur à affecter au champ <see cref="F:System.Numerics.Vector2.X" />.</param>
      <param name="y" vsli:raw="The value to assign to the &lt;see cref=&quot;F:System.Numerics.Vector2.Y&quot; /&gt; field.">Valeur à affecter au champ <see cref="F:System.Numerics.Vector2.Y" />.</param>
    </member>
    <member name="M:System.Numerics.Vector2.Abs(System.Numerics.Vector2)">
      <summary vsli:raw="Returns a vector whose elements are the absolute values of each of the specified vector's elements.">Retourne un vecteur dont les éléments sont les valeurs absolues de chacun des éléments du vecteur spécifié.</summary>
      <param name="value" vsli:raw="A vector.">Un vecteur.</param>
      <returns vsli:raw="The absolute value vector.">Vecteur de valeurs absolues.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Add(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary vsli:raw="Adds two vectors together.">Additionne deux vecteurs.</summary>
      <param name="left" vsli:raw="The first vector to add.">Premier vecteur à additionner.</param>
      <param name="right" vsli:raw="The second vector to add.">Deuxième vecteur à additionner.</param>
      <returns vsli:raw="The summed vector.">Vecteur résultant de l'addition.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Clamp(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary vsli:raw="Restricts a vector between a minimum and a maximum value.">Limite un vecteur entre une valeur minimale et une valeur maximale.</summary>
      <param name="value1" vsli:raw="The vector to restrict.">Vecteur à limiter.</param>
      <param name="min" vsli:raw="The minimum value.">Valeur minimale.</param>
      <param name="max" vsli:raw="The maximum value.">Valeur maximale.</param>
      <returns vsli:raw="The restricted vector.">Vecteur limité.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.CopyTo(System.Single[])">
      <summary vsli:raw="Copies the elements of the vector to a specified array.">Copie les éléments du vecteur dans un tableau spécifié.</summary>
      <param name="array" vsli:raw="The destination array.">Tableau de destination.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the current instance is greater than in the array.">Le nombre d’éléments dans l’instance actuelle est supérieur à celui dans le tableau.</exception>
      <exception cref="T:System.RankException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.">
        <paramref name="array" /> est multidimensionnel.</exception>
    </member>
    <member name="M:System.Numerics.Vector2.CopyTo(System.Single[],System.Int32)">
      <summary vsli:raw="Copies the elements of the vector to a specified array starting at a specified index position.">Copie les éléments du vecteur dans un tableau spécifié, en commençant à une position d'index spécifiée.</summary>
      <param name="array" vsli:raw="The destination array.">Tableau de destination.</param>
      <param name="index" vsli:raw="The index at which to copy the first element of the vector.">Index auquel copier le premier élément du vecteur.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the current instance is greater than in the array.">Le nombre d’éléments dans l’instance actuelle est supérieur à celui dans le tableau.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is greater than or equal to the array length.">
        <paramref name="index" /> est inférieur à zéro.

ou -
<paramref name="index" /> est supérieur ou égal à la longueur du tableau.</exception>
      <exception cref="T:System.RankException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.">
        <paramref name="array" /> est multidimensionnel.</exception>
    </member>
    <member name="M:System.Numerics.Vector2.Distance(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary vsli:raw="Computes the Euclidean distance between the two given points.">Calcule la distance euclidienne entre les deux points donnés.</summary>
      <param name="value1" vsli:raw="The first point.">Premier point.</param>
      <param name="value2" vsli:raw="The second point.">Deuxième point.</param>
      <returns vsli:raw="The distance.">Distance.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.DistanceSquared(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary vsli:raw="Returns the Euclidean distance squared between two specified points.">Retourne le carré de la distance euclidienne entre deux points spécifiés.</summary>
      <param name="value1" vsli:raw="The first point.">Premier point.</param>
      <param name="value2" vsli:raw="The second point.">Deuxième point.</param>
      <returns vsli:raw="The distance squared.">Carré de la distance.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Divide(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary vsli:raw="Divides the first vector by the second.">Divise le premier vecteur par le deuxième.</summary>
      <param name="left" vsli:raw="The first vector.">Premier vecteur.</param>
      <param name="right" vsli:raw="The second vector.">Deuxième vecteur.</param>
      <returns vsli:raw="The vector resulting from the division.">Vecteur résultant de la division.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Divide(System.Numerics.Vector2,System.Single)">
      <summary vsli:raw="Divides the specified vector by a specified scalar value.">Divise le vecteur spécifié par une valeur scalaire spécifiée.</summary>
      <param name="left" vsli:raw="The vector.">Le vecteur.</param>
      <param name="divisor" vsli:raw="The scalar value.">Valeur scalaire.</param>
      <returns vsli:raw="The vector that results from the division.">Vecteur résultant de la division.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Dot(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary vsli:raw="Returns the dot product of two vectors.">Retourne le produit scalaire de deux vecteurs.</summary>
      <param name="value1" vsli:raw="The first vector.">Premier vecteur.</param>
      <param name="value2" vsli:raw="The second vector.">Deuxième vecteur.</param>
      <returns vsli:raw="The dot product.">Produit scalaire.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Equals(System.Numerics.Vector2)">
      <summary vsli:raw="Returns a value that indicates whether this instance and another vector are equal.">Retourne une valeur qui indique si cette instance et un autre vecteur sont égaux.</summary>
      <param name="other" vsli:raw="The other vector.">L'autre vecteur.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two vectors are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si les deux vecteurs sont égaux ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance and a specified object are equal.">Retourne une valeur qui indique si cette instance et un objet spécifié sont égaux.</summary>
      <param name="obj" vsli:raw="The object to compare with the current instance.">Objet à comparer à l'instance actuelle.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current instance and &lt;paramref name=&quot;obj&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;paramref name=&quot;obj&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, the method returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'instance actuelle et <paramref name="obj" /> sont égaux ; sinon, <see langword="false" />. Si <paramref name="obj" /> est <see langword="null" />, la méthode retourne <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retourne le code de hachage de cette instance.</summary>
      <returns vsli:raw="The hash code.">Code de hachage.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Length">
      <summary vsli:raw="Returns the length of the vector.">Retourne la longueur du vecteur.</summary>
      <returns vsli:raw="The vector's length.">Longueur du vecteur.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.LengthSquared">
      <summary vsli:raw="Returns the length of the vector squared.">Retourne le carré de la longueur du vecteur.</summary>
      <returns vsli:raw="The vector's length squared.">Carré de la longueur du vecteur.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Lerp(System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
      <summary vsli:raw="Performs a linear interpolation between two vectors based on the given weighting.">Effectue une interpolation linéaire entre deux vecteurs en fonction de la pondération donnée.</summary>
      <param name="value1" vsli:raw="The first vector.">Premier vecteur.</param>
      <param name="value2" vsli:raw="The second vector.">Deuxième vecteur.</param>
      <param name="amount" vsli:raw="A value between 0 and 1 that indicates the weight of &lt;paramref name=&quot;value2&quot; /&gt;.">Valeur comprise entre 0 et 1, qui indique la pondération de <paramref name="value2" />.</param>
      <returns vsli:raw="The interpolated vector.">Vecteur interpolé.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Max(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary vsli:raw="Returns a vector whose elements are the maximum of each of the pairs of elements in two specified vectors.">Retourne un vecteur dont les éléments sont la valeur maximale de chacune des paires d'éléments de deux vecteurs spécifiés.</summary>
      <param name="value1" vsli:raw="The first vector.">Premier vecteur.</param>
      <param name="value2" vsli:raw="The second vector.">Deuxième vecteur.</param>
      <returns vsli:raw="The maximized vector.">Vecteur constitué des maximums.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Min(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary vsli:raw="Returns a vector whose elements are the minimum of each of the pairs of elements in two specified vectors.">Retourne un vecteur dont les éléments sont la valeur minimale de chacune des paires d'éléments de deux vecteurs spécifiés.</summary>
      <param name="value1" vsli:raw="The first vector.">Premier vecteur.</param>
      <param name="value2" vsli:raw="The second vector.">Deuxième vecteur.</param>
      <returns vsli:raw="The minimized vector.">Vecteur constitué des minimums.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Multiply(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary vsli:raw="Returns a new vector whose values are the product of each pair of elements in two specified vectors.">Retourne un nouveau vecteur dont les valeurs sont le produit de chaque paire d'éléments dans deux vecteurs spécifiés.</summary>
      <param name="left" vsli:raw="The first vector.">Premier vecteur.</param>
      <param name="right" vsli:raw="The second vector.">Deuxième vecteur.</param>
      <returns vsli:raw="The element-wise product vector.">Vecteur résultant du produit d’éléments.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Multiply(System.Numerics.Vector2,System.Single)">
      <summary vsli:raw="Multiplies a vector by a specified scalar.">Multiplie un vecteur par un scalaire spécifié.</summary>
      <param name="left" vsli:raw="The vector to multiply.">Vecteur à multiplier.</param>
      <param name="right" vsli:raw="The scalar value.">Valeur scalaire.</param>
      <returns vsli:raw="The scaled vector.">Vecteur mis à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Multiply(System.Single,System.Numerics.Vector2)">
      <summary vsli:raw="Multiplies a scalar value by a specified vector.">Multiplie une valeur scalaire par un vecteur spécifié.</summary>
      <param name="left" vsli:raw="The scaled value.">Valeur mise à l'échelle.</param>
      <param name="right" vsli:raw="The vector.">Le vecteur.</param>
      <returns vsli:raw="The scaled vector.">Vecteur mis à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Negate(System.Numerics.Vector2)">
      <summary vsli:raw="Negates a specified vector.">Inverse le signe d'un vecteur spécifié.</summary>
      <param name="value" vsli:raw="The vector to negate.">Vecteur dont le signe doit être inversé.</param>
      <returns vsli:raw="The negated vector.">Vecteur dont le signe a été inversé.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Normalize(System.Numerics.Vector2)">
      <summary vsli:raw="Returns a vector with the same direction as the specified vector, but with a length of one.">Retourne un vecteur avec la même direction que le vecteur spécifié, mais avec une longueur de 1.</summary>
      <param name="value" vsli:raw="The vector to normalize.">Vecteur à normaliser.</param>
      <returns vsli:raw="The normalized vector.">Vecteur normalisé.</returns>
    </member>
    <member name="P:System.Numerics.Vector2.One">
      <summary vsli:raw="Gets a vector whose 2 elements are equal to one.">Obtient un vecteur dont les 2 éléments valent 1.</summary>
      <returns vsli:raw="A vector whose two elements are equal to one (that is, it returns the vector &lt;c&gt;(1,1)&lt;/c&gt;).">Vecteur dont les deux éléments sont égaux à un (autrement dit, il retourne le vecteur <c>(1,1)</c>.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Addition(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary vsli:raw="Adds two vectors together.">Additionne deux vecteurs.</summary>
      <param name="left" vsli:raw="The first vector to add.">Premier vecteur à additionner.</param>
      <param name="right" vsli:raw="The second vector to add.">Deuxième vecteur à additionner.</param>
      <returns vsli:raw="The summed vector.">Vecteur résultant de l'addition.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Division(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary vsli:raw="Divides the first vector by the second.">Divise le premier vecteur par le deuxième.</summary>
      <param name="left" vsli:raw="The first vector.">Premier vecteur.</param>
      <param name="right" vsli:raw="The second vector.">Deuxième vecteur.</param>
      <returns vsli:raw="The vector that results from dividing &lt;paramref name=&quot;left&quot; /&gt; by &lt;paramref name=&quot;right&quot; /&gt;.">Vecteur résultant de la division de <paramref name="left" /> par <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Division(System.Numerics.Vector2,System.Single)">
      <summary vsli:raw="Divides the specified vector by a specified scalar value.">Divise le vecteur spécifié par une valeur scalaire spécifiée.</summary>
      <param name="value1" vsli:raw="The vector.">Le vecteur.</param>
      <param name="value2" vsli:raw="The scalar value.">Valeur scalaire.</param>
      <returns vsli:raw="The result of the division.">Résultat de la division.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Equality(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary vsli:raw="Returns a value that indicates whether each pair of elements in two specified vectors is equal.">Retourne une valeur qui indique si chacune des paires d'éléments dans deux vecteurs spécifiés sont égales.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Premier vecteur à comparer.</param>
      <param name="right" vsli:raw="The second vector to compare.">Deuxième vecteur à comparer.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="left" /> et <paramref name="right" /> sont égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Inequality(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary vsli:raw="Returns a value that indicates whether two specified vectors are not equal.">Retourne une valeur qui indique si deux vecteurs spécifiés ne sont pas égaux.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Premier vecteur à comparer.</param>
      <param name="right" vsli:raw="The second vector to compare.">Deuxième vecteur à comparer.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="left" /> et <paramref name="right" /> ne sont pas égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Multiply(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary vsli:raw="Returns a new vector whose values are the product of each pair of elements in two specified vectors.">Retourne un nouveau vecteur dont les valeurs sont le produit de chaque paire d'éléments dans deux vecteurs spécifiés.</summary>
      <param name="left" vsli:raw="The first vector.">Premier vecteur.</param>
      <param name="right" vsli:raw="The second vector.">Deuxième vecteur.</param>
      <returns vsli:raw="The element-wise product vector.">Vecteur résultant du produit d’éléments.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Multiply(System.Numerics.Vector2,System.Single)">
      <summary vsli:raw="Multiples the specified vector by the specified scalar value.">Multiplie le vecteur spécifié par la valeur scalaire spécifiée.</summary>
      <param name="left" vsli:raw="The vector.">Le vecteur.</param>
      <param name="right" vsli:raw="The scalar value.">Valeur scalaire.</param>
      <returns vsli:raw="The scaled vector.">Vecteur mis à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Multiply(System.Single,System.Numerics.Vector2)">
      <summary vsli:raw="Multiples the scalar value by the specified vector.">Multiplie la valeur scalaire par le vecteur spécifié.</summary>
      <param name="left" vsli:raw="The vector.">Le vecteur.</param>
      <param name="right" vsli:raw="The scalar value.">Valeur scalaire.</param>
      <returns vsli:raw="The scaled vector.">Vecteur mis à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Subtraction(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary vsli:raw="Subtracts the second vector from the first.">Soustrait le deuxième vecteur du premier.</summary>
      <param name="left" vsli:raw="The first vector.">Premier vecteur.</param>
      <param name="right" vsli:raw="The second vector.">Deuxième vecteur.</param>
      <returns vsli:raw="The vector that results from subtracting &lt;paramref name=&quot;right&quot; /&gt; from &lt;paramref name=&quot;left&quot; /&gt;.">Vecteur résultant de la soustraction de <paramref name="right" /> de <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_UnaryNegation(System.Numerics.Vector2)">
      <summary vsli:raw="Negates the specified vector.">Inverse le signe du vecteur spécifié.</summary>
      <param name="value" vsli:raw="The vector to negate.">Vecteur dont le signe doit être inversé.</param>
      <returns vsli:raw="The negated vector.">Vecteur dont le signe a été inversé.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Reflect(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary vsli:raw="Returns the reflection of a vector off a surface that has the specified normal.">Retourne la réflexion d'un vecteur depuis une surface qui a la normale spécifiée.</summary>
      <param name="vector" vsli:raw="The source vector.">Vecteur source.</param>
      <param name="normal" vsli:raw="The normal of the surface being reflected off.">Normale de la surface depuis laquelle la réflexion est effectuée.</param>
      <returns vsli:raw="The reflected vector.">Vecteur reflété.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.SquareRoot(System.Numerics.Vector2)">
      <summary vsli:raw="Returns a vector whose elements are the square root of each of a specified vector's elements.">Retourne un vecteur dont les éléments sont la racine carrée de chacun des éléments d'un vecteur spécifié.</summary>
      <param name="value" vsli:raw="A vector.">Un vecteur.</param>
      <returns vsli:raw="The square root vector.">Racine carrée du vecteur.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Subtract(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary vsli:raw="Subtracts the second vector from the first.">Soustrait le deuxième vecteur du premier.</summary>
      <param name="left" vsli:raw="The first vector.">Premier vecteur.</param>
      <param name="right" vsli:raw="The second vector.">Deuxième vecteur.</param>
      <returns vsli:raw="The difference vector.">Vecteur de différence.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.ToString">
      <summary vsli:raw="Returns the string representation of the current instance using default formatting.">Retourne la représentation sous forme de chaîne de l'instance actuelle en utilisant la mise en forme par défaut.</summary>
      <returns vsli:raw="The string representation of the current instance.">Représentation sous forme de chaîne de l'instance actuelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.ToString(System.String)">
      <summary vsli:raw="Returns the string representation of the current instance using the specified format string to format individual elements.">Retourne la représentation sous forme de chaîne de l'instance actuelle, en utilisant la chaîne de format spécifiée pour mettre en forme les éléments individuels.</summary>
      <param name="format" vsli:raw="A standard or custom numeric format string that defines the format of individual elements.">Une chaîne de format numérique standard ou personnalisée, qui définit le format des éléments individuels.</param>
      <returns vsli:raw="The string representation of the current instance.">Représentation sous forme de chaîne de l'instance actuelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.ToString(System.String,System.IFormatProvider)">
      <summary vsli:raw="Returns the string representation of the current instance using the specified format string to format individual elements and the specified format provider to define culture-specific formatting.">Retourne la représentation sous forme de chaîne de l'instance actuelle, en utilisant la chaîne de format spécifiée pour mettre en forme les éléments individuels et le fournisseur de format spécifié pour définir la mise en forme spécifique à la culture.</summary>
      <param name="format" vsli:raw="A standard or custom numeric format string that defines the format of individual elements.">Une chaîne de format numérique standard ou personnalisée, qui définit le format des éléments individuels.</param>
      <param name="formatProvider" vsli:raw="A format provider that supplies culture-specific formatting information.">Fournisseur de format qui fournit les informations de mise en forme spécifiques à la culture.</param>
      <returns vsli:raw="The string representation of the current instance.">Représentation sous forme de chaîne de l'instance actuelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Matrix3x2)">
      <summary vsli:raw="Transforms a vector by a specified 3x2 matrix.">Transforme un vecteur par une matrice 3 x 2 spécifiée.</summary>
      <param name="position" vsli:raw="The vector to transform.">Vecteur à transformer.</param>
      <param name="matrix" vsli:raw="The transformation matrix.">Matrice de transformation.</param>
      <returns vsli:raw="The transformed vector.">Vecteur transformé.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Matrix4x4)">
      <summary vsli:raw="Transforms a vector by a specified 4x4 matrix.">Transforme un vecteur par une matrice 3 x 2 spécifiée.</summary>
      <param name="position" vsli:raw="The vector to transform.">Vecteur à transformer.</param>
      <param name="matrix" vsli:raw="The transformation matrix.">Matrice de transformation.</param>
      <returns vsli:raw="The transformed vector.">Vecteur transformé.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Quaternion)">
      <summary vsli:raw="Transforms a vector by the specified Quaternion rotation value.">Transforme un vecteur par la valeur de rotation du quaternion spécifié.</summary>
      <param name="value" vsli:raw="The vector to rotate.">Vecteur à faire pivoter.</param>
      <param name="rotation" vsli:raw="The rotation to apply.">Rotation à appliquer.</param>
      <returns vsli:raw="The transformed vector.">Vecteur transformé.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.TransformNormal(System.Numerics.Vector2,System.Numerics.Matrix3x2)">
      <summary vsli:raw="Transforms a vector normal by the given 3x2 matrix.">Transforme un vecteur normal par la matrice 3 x 2 donnée.</summary>
      <param name="normal" vsli:raw="The source vector.">Vecteur source.</param>
      <param name="matrix" vsli:raw="The matrix.">Matrice.</param>
      <returns vsli:raw="The transformed vector.">Vecteur transformé.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.TransformNormal(System.Numerics.Vector2,System.Numerics.Matrix4x4)">
      <summary vsli:raw="Transforms a vector normal by the given 4x4 matrix.">Transforme un vecteur normal par la matrice 4 x 4 donnée.</summary>
      <param name="normal" vsli:raw="The source vector.">Vecteur source.</param>
      <param name="matrix" vsli:raw="The matrix.">Matrice.</param>
      <returns vsli:raw="The transformed vector.">Vecteur transformé.</returns>
    </member>
    <member name="P:System.Numerics.Vector2.UnitX">
      <summary vsli:raw="Gets the vector (1,0).">Obtient le vecteur (1,0).</summary>
      <returns vsli:raw="The vector &lt;c&gt;(1,0)&lt;/c&gt;.">Vecteur <c>(1,0)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector2.UnitY">
      <summary vsli:raw="Gets the vector (0,1).">Obtient le vecteur (0,1).</summary>
      <returns vsli:raw="The vector &lt;c&gt;(0,1)&lt;/c&gt;.">Vecteur <c>(0, 1)</c>.</returns>
    </member>
    <member name="F:System.Numerics.Vector2.X">
      <summary vsli:raw="The X component of the vector.">Composant X du vecteur.</summary>
    </member>
    <member name="F:System.Numerics.Vector2.Y">
      <summary vsli:raw="The Y component of the vector.">Composant Y du vecteur.</summary>
    </member>
    <member name="P:System.Numerics.Vector2.Zero">
      <summary vsli:raw="Returns a vector whose 2 elements are equal to zero.">Obtient un vecteur dont les 2 éléments valent zéro.</summary>
      <returns vsli:raw="A vector whose two elements are equal to zero (that is, it returns the vector &lt;c&gt;(0,0)&lt;/c&gt;).">Vecteur dont les deux éléments sont égaux à zéro (autrement dit, il retourne le vecteur <c>(0, 0)</c>.</returns>
    </member>
    <member name="T:System.Numerics.Vector3">
      <summary vsli:raw="Represents a vector with three  single-precision floating-point values.">Représente un vecteur de trois valeurs en virgule flottante à simple précision.</summary>
    </member>
    <member name="M:System.Numerics.Vector3.#ctor(System.Numerics.Vector2,System.Single)">
      <summary vsli:raw="Creates a   new &lt;see cref=&quot;T:System.Numerics.Vector3&quot; /&gt; object from the specified &lt;see cref=&quot;T:System.Numerics.Vector2&quot; /&gt; object and the specified value.">Crée un objet <see cref="T:System.Numerics.Vector3" /> à partir de l'objet <see cref="T:System.Numerics.Vector2" /> spécifié et de la valeur spécifiée.</summary>
      <param name="value" vsli:raw="The vector with two elements.">Vecteur avec deux éléments.</param>
      <param name="z" vsli:raw="The additional value to assign to the &lt;see cref=&quot;F:System.Numerics.Vector3.Z&quot; /&gt; field.">Valeur supplémentaire à affecter au champ <see cref="F:System.Numerics.Vector3.Z" />.</param>
    </member>
    <member name="M:System.Numerics.Vector3.#ctor(System.Single)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Numerics.Vector3&quot; /&gt; object whose three elements have the same value.">Crée un objet <see cref="T:System.Numerics.Vector3" /> dont les trois éléments ont la même valeur.</summary>
      <param name="value" vsli:raw="The value to assign to all three elements.">Valeur à affecter aux trois éléments.</param>
    </member>
    <member name="M:System.Numerics.Vector3.#ctor(System.Single,System.Single,System.Single)">
      <summary vsli:raw="Creates a vector whose elements have the specified values.">Crée un vecteur dont les éléments ont les valeurs spécifiées.</summary>
      <param name="x" vsli:raw="The value to assign to the &lt;see cref=&quot;F:System.Numerics.Vector3.X&quot; /&gt; field.">Valeur à affecter au champ <see cref="F:System.Numerics.Vector3.X" />.</param>
      <param name="y" vsli:raw="The value to assign to the &lt;see cref=&quot;F:System.Numerics.Vector3.Y&quot; /&gt; field.">Valeur à affecter au champ <see cref="F:System.Numerics.Vector3.Y" />.</param>
      <param name="z" vsli:raw="The value to assign to the &lt;see cref=&quot;F:System.Numerics.Vector3.Z&quot; /&gt; field.">Valeur à affecter au champ <see cref="F:System.Numerics.Vector3.Z" />.</param>
    </member>
    <member name="M:System.Numerics.Vector3.Abs(System.Numerics.Vector3)">
      <summary vsli:raw="Returns a vector whose elements are the absolute values of each of the specified vector's elements.">Retourne un vecteur dont les éléments sont les valeurs absolues de chacun des éléments du vecteur spécifié.</summary>
      <param name="value" vsli:raw="A vector.">Un vecteur.</param>
      <returns vsli:raw="The absolute value vector.">Vecteur de valeurs absolues.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Add(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary vsli:raw="Adds two vectors together.">Additionne deux vecteurs.</summary>
      <param name="left" vsli:raw="The first vector to add.">Premier vecteur à additionner.</param>
      <param name="right" vsli:raw="The second vector to add.">Deuxième vecteur à additionner.</param>
      <returns vsli:raw="The summed vector.">Vecteur résultant de l'addition.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Clamp(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary vsli:raw="Restricts a vector between a minimum and a maximum value.">Limite un vecteur entre une valeur minimale et une valeur maximale.</summary>
      <param name="value1" vsli:raw="The vector to restrict.">Vecteur à limiter.</param>
      <param name="min" vsli:raw="The minimum value.">Valeur minimale.</param>
      <param name="max" vsli:raw="The maximum value.">Valeur maximale.</param>
      <returns vsli:raw="The restricted vector.">Vecteur limité.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.CopyTo(System.Single[])">
      <summary vsli:raw="Copies the elements of the vector to a specified array.">Copie les éléments du vecteur dans un tableau spécifié.</summary>
      <param name="array" vsli:raw="The destination array.">Tableau de destination.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the current instance is greater than in the array.">Le nombre d’éléments dans l’instance actuelle est supérieur à celui dans le tableau.</exception>
      <exception cref="T:System.RankException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.">
        <paramref name="array" /> est multidimensionnel.</exception>
    </member>
    <member name="M:System.Numerics.Vector3.CopyTo(System.Single[],System.Int32)">
      <summary vsli:raw="Copies the elements of the vector to a specified array starting at a specified index position.">Copie les éléments du vecteur dans un tableau spécifié, en commençant à une position d'index spécifiée.</summary>
      <param name="array" vsli:raw="The destination array.">Tableau de destination.</param>
      <param name="index" vsli:raw="The index at which to copy the first element of the vector.">Index auquel copier le premier élément du vecteur.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the current instance is greater than in the array.">Le nombre d’éléments dans l’instance actuelle est supérieur à celui dans le tableau.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is greater than or equal to the array length.">
        <paramref name="index" /> est inférieur à zéro.

ou -
<paramref name="index" /> est supérieur ou égal à la longueur du tableau.</exception>
      <exception cref="T:System.RankException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.">
        <paramref name="array" /> est multidimensionnel.</exception>
    </member>
    <member name="M:System.Numerics.Vector3.Cross(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary vsli:raw="Computes the cross product of two vectors.">Calcule le produit croisé de deux vecteurs.</summary>
      <param name="vector1" vsli:raw="The first vector.">Premier vecteur.</param>
      <param name="vector2" vsli:raw="The second vector.">Deuxième vecteur.</param>
      <returns vsli:raw="The cross product.">Produit croisé.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Distance(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary vsli:raw="Computes the Euclidean distance between the two given points.">Calcule la distance euclidienne entre les deux points donnés.</summary>
      <param name="value1" vsli:raw="The first point.">Premier point.</param>
      <param name="value2" vsli:raw="The second point.">Deuxième point.</param>
      <returns vsli:raw="The distance.">Distance.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.DistanceSquared(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary vsli:raw="Returns the Euclidean distance squared between two specified points.">Retourne le carré de la distance euclidienne entre deux points spécifiés.</summary>
      <param name="value1" vsli:raw="The first point.">Premier point.</param>
      <param name="value2" vsli:raw="The second point.">Deuxième point.</param>
      <returns vsli:raw="The distance squared.">Carré de la distance.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Divide(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary vsli:raw="Divides the first vector by the second.">Divise le premier vecteur par le deuxième.</summary>
      <param name="left" vsli:raw="The first vector.">Premier vecteur.</param>
      <param name="right" vsli:raw="The second vector.">Deuxième vecteur.</param>
      <returns vsli:raw="The vector resulting from the division.">Vecteur résultant de la division.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Divide(System.Numerics.Vector3,System.Single)">
      <summary vsli:raw="Divides the specified vector by a specified scalar value.">Divise le vecteur spécifié par une valeur scalaire spécifiée.</summary>
      <param name="left" vsli:raw="The vector.">Le vecteur.</param>
      <param name="divisor" vsli:raw="The scalar value.">Valeur scalaire.</param>
      <returns vsli:raw="The vector that results from the division.">Vecteur résultant de la division.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Dot(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary vsli:raw="Returns the dot product of two vectors.">Retourne le produit scalaire de deux vecteurs.</summary>
      <param name="vector1" vsli:raw="The first vector.">Premier vecteur.</param>
      <param name="vector2" vsli:raw="The second vector.">Deuxième vecteur.</param>
      <returns vsli:raw="The dot product.">Produit scalaire.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Equals(System.Numerics.Vector3)">
      <summary vsli:raw="Returns a value that indicates whether this instance and another vector are equal.">Retourne une valeur qui indique si cette instance et un autre vecteur sont égaux.</summary>
      <param name="other" vsli:raw="The other vector.">L'autre vecteur.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two vectors are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si les deux vecteurs sont égaux ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance and a specified object are equal.">Retourne une valeur qui indique si cette instance et un objet spécifié sont égaux.</summary>
      <param name="obj" vsli:raw="The object to compare with the current instance.">Objet à comparer à l'instance actuelle.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current instance and &lt;paramref name=&quot;obj&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;paramref name=&quot;obj&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, the method returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'instance actuelle et <paramref name="obj" /> sont égaux ; sinon, <see langword="false" />. Si <paramref name="obj" /> est <see langword="null" />, la méthode retourne <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retourne le code de hachage de cette instance.</summary>
      <returns vsli:raw="The hash code.">Code de hachage.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Length">
      <summary vsli:raw="Returns the length of this vector object.">Retourne la longueur de cet objet vecteur.</summary>
      <returns vsli:raw="The vector's length.">Longueur du vecteur.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.LengthSquared">
      <summary vsli:raw="Returns the length of the vector squared.">Retourne le carré de la longueur du vecteur.</summary>
      <returns vsli:raw="The vector's length squared.">Carré de la longueur du vecteur.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Lerp(System.Numerics.Vector3,System.Numerics.Vector3,System.Single)">
      <summary vsli:raw="Performs a linear interpolation between two vectors based on the given weighting.">Effectue une interpolation linéaire entre deux vecteurs en fonction de la pondération donnée.</summary>
      <param name="value1" vsli:raw="The first vector.">Premier vecteur.</param>
      <param name="value2" vsli:raw="The second vector.">Deuxième vecteur.</param>
      <param name="amount" vsli:raw="A value between 0 and 1 that indicates the weight of &lt;paramref name=&quot;value2&quot; /&gt;.">Valeur comprise entre 0 et 1, qui indique la pondération de <paramref name="value2" />.</param>
      <returns vsli:raw="The interpolated vector.">Vecteur interpolé.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Max(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary vsli:raw="Returns a vector whose elements are the maximum of each of the pairs of elements in two specified vectors.">Retourne un vecteur dont les éléments sont la valeur maximale de chacune des paires d'éléments de deux vecteurs spécifiés.</summary>
      <param name="value1" vsli:raw="The first vector.">Premier vecteur.</param>
      <param name="value2" vsli:raw="The second vector.">Deuxième vecteur.</param>
      <returns vsli:raw="The maximized vector.">Vecteur constitué des maximums.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Min(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary vsli:raw="Returns a vector whose elements are the minimum of each of the pairs of elements in two specified vectors.">Retourne un vecteur dont les éléments sont la valeur minimale de chacune des paires d'éléments de deux vecteurs spécifiés.</summary>
      <param name="value1" vsli:raw="The first vector.">Premier vecteur.</param>
      <param name="value2" vsli:raw="The second vector.">Deuxième vecteur.</param>
      <returns vsli:raw="The minimized vector.">Vecteur constitué des minimums.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Multiply(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary vsli:raw="Returns a new vector whose values are the product of each pair of elements in two specified vectors.">Retourne un nouveau vecteur dont les valeurs sont le produit de chaque paire d'éléments dans deux vecteurs spécifiés.</summary>
      <param name="left" vsli:raw="The first vector.">Premier vecteur.</param>
      <param name="right" vsli:raw="The second vector.">Deuxième vecteur.</param>
      <returns vsli:raw="The element-wise product vector.">Vecteur résultant du produit d’éléments.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Multiply(System.Numerics.Vector3,System.Single)">
      <summary vsli:raw="Multiplies a vector by a specified scalar.">Multiplie un vecteur par un scalaire spécifié.</summary>
      <param name="left" vsli:raw="The vector to multiply.">Vecteur à multiplier.</param>
      <param name="right" vsli:raw="The scalar value.">Valeur scalaire.</param>
      <returns vsli:raw="The scaled vector.">Vecteur mis à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Multiply(System.Single,System.Numerics.Vector3)">
      <summary vsli:raw="Multiplies a scalar value by a specified vector.">Multiplie une valeur scalaire par un vecteur spécifié.</summary>
      <param name="left" vsli:raw="The scaled value.">Valeur mise à l'échelle.</param>
      <param name="right" vsli:raw="The vector.">Le vecteur.</param>
      <returns vsli:raw="The scaled vector.">Vecteur mis à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Negate(System.Numerics.Vector3)">
      <summary vsli:raw="Negates a specified vector.">Inverse le signe d'un vecteur spécifié.</summary>
      <param name="value" vsli:raw="The vector to negate.">Vecteur dont le signe doit être inversé.</param>
      <returns vsli:raw="The negated vector.">Vecteur dont le signe a été inversé.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Normalize(System.Numerics.Vector3)">
      <summary vsli:raw="Returns a vector with the same direction as the specified vector, but with a length of one.">Retourne un vecteur avec la même direction que le vecteur spécifié, mais avec une longueur de 1.</summary>
      <param name="value" vsli:raw="The vector to normalize.">Vecteur à normaliser.</param>
      <returns vsli:raw="The normalized vector.">Vecteur normalisé.</returns>
    </member>
    <member name="P:System.Numerics.Vector3.One">
      <summary vsli:raw="Gets a vector whose 3 elements are equal to one.">Obtient un vecteur dont les 3 éléments valent 1.</summary>
      <returns vsli:raw="A vector whose three elements are equal to one (that is, it returns the vector &lt;c&gt;(1,1,1)&lt;/c&gt;).">Vecteur dont les trois éléments sont égaux à un (autrement dit, il retourne le vecteur <c>(1, 1, 1)</c>.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Addition(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary vsli:raw="Adds two vectors together.">Additionne deux vecteurs.</summary>
      <param name="left" vsli:raw="The first vector to add.">Premier vecteur à additionner.</param>
      <param name="right" vsli:raw="The second vector to add.">Deuxième vecteur à additionner.</param>
      <returns vsli:raw="The summed vector.">Vecteur résultant de l'addition.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Division(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary vsli:raw="Divides the first vector by the second.">Divise le premier vecteur par le deuxième.</summary>
      <param name="left" vsli:raw="The first vector.">Premier vecteur.</param>
      <param name="right" vsli:raw="The second vector.">Deuxième vecteur.</param>
      <returns vsli:raw="The vector that results from dividing &lt;paramref name=&quot;left&quot; /&gt; by &lt;paramref name=&quot;right&quot; /&gt;.">Vecteur résultant de la division de <paramref name="left" /> par <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Division(System.Numerics.Vector3,System.Single)">
      <summary vsli:raw="Divides the specified vector by a specified scalar value.">Divise le vecteur spécifié par une valeur scalaire spécifiée.</summary>
      <param name="value1" vsli:raw="The vector.">Le vecteur.</param>
      <param name="value2" vsli:raw="The scalar value.">Valeur scalaire.</param>
      <returns vsli:raw="The result of the division.">Résultat de la division.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Equality(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary vsli:raw="Returns a value that indicates whether each pair of elements in two specified vectors is equal.">Retourne une valeur qui indique si chacune des paires d'éléments dans deux vecteurs spécifiés sont égales.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Premier vecteur à comparer.</param>
      <param name="right" vsli:raw="The second vector to compare.">Deuxième vecteur à comparer.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="left" /> et <paramref name="right" /> sont égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Inequality(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary vsli:raw="Returns a value that indicates whether two specified vectors are not equal.">Retourne une valeur qui indique si deux vecteurs spécifiés ne sont pas égaux.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Premier vecteur à comparer.</param>
      <param name="right" vsli:raw="The second vector to compare.">Deuxième vecteur à comparer.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="left" /> et <paramref name="right" /> ne sont pas égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Multiply(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary vsli:raw="Returns a new vector whose values are the product of each pair of elements in two specified vectors.">Retourne un nouveau vecteur dont les valeurs sont le produit de chaque paire d'éléments dans deux vecteurs spécifiés.</summary>
      <param name="left" vsli:raw="The first vector.">Premier vecteur.</param>
      <param name="right" vsli:raw="The second vector.">Deuxième vecteur.</param>
      <returns vsli:raw="The element-wise product vector.">Vecteur résultant du produit d’éléments.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Multiply(System.Numerics.Vector3,System.Single)">
      <summary vsli:raw="Multiples the specified vector by the specified scalar value.">Multiplie le vecteur spécifié par la valeur scalaire spécifiée.</summary>
      <param name="left" vsli:raw="The vector.">Le vecteur.</param>
      <param name="right" vsli:raw="The scalar value.">Valeur scalaire.</param>
      <returns vsli:raw="The scaled vector.">Vecteur mis à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Multiply(System.Single,System.Numerics.Vector3)">
      <summary vsli:raw="Multiples the scalar value by the specified vector.">Multiplie la valeur scalaire par le vecteur spécifié.</summary>
      <param name="left" vsli:raw="The vector.">Le vecteur.</param>
      <param name="right" vsli:raw="The scalar value.">Valeur scalaire.</param>
      <returns vsli:raw="The scaled vector.">Vecteur mis à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Subtraction(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary vsli:raw="Subtracts the second vector from the first.">Soustrait le deuxième vecteur du premier.</summary>
      <param name="left" vsli:raw="The first vector.">Premier vecteur.</param>
      <param name="right" vsli:raw="The second vector.">Deuxième vecteur.</param>
      <returns vsli:raw="The vector that results from subtracting &lt;paramref name=&quot;right&quot; /&gt; from &lt;paramref name=&quot;left&quot; /&gt;.">Vecteur résultant de la soustraction de <paramref name="right" /> de <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_UnaryNegation(System.Numerics.Vector3)">
      <summary vsli:raw="Negates the specified vector.">Inverse le signe du vecteur spécifié.</summary>
      <param name="value" vsli:raw="The vector to negate.">Vecteur dont le signe doit être inversé.</param>
      <returns vsli:raw="The negated vector.">Vecteur dont le signe a été inversé.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Reflect(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary vsli:raw="Returns the reflection of a vector off a surface that has the specified normal.">Retourne la réflexion d'un vecteur depuis une surface qui a la normale spécifiée.</summary>
      <param name="vector" vsli:raw="The source vector.">Vecteur source.</param>
      <param name="normal" vsli:raw="The normal of the surface being reflected off.">Normale de la surface depuis laquelle la réflexion est effectuée.</param>
      <returns vsli:raw="The reflected vector.">Vecteur reflété.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.SquareRoot(System.Numerics.Vector3)">
      <summary vsli:raw="Returns a vector whose elements are the square root of each of a specified vector's elements.">Retourne un vecteur dont les éléments sont la racine carrée de chacun des éléments d'un vecteur spécifié.</summary>
      <param name="value" vsli:raw="A vector.">Un vecteur.</param>
      <returns vsli:raw="The square root vector.">Racine carrée du vecteur.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Subtract(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary vsli:raw="Subtracts the second vector from the first.">Soustrait le deuxième vecteur du premier.</summary>
      <param name="left" vsli:raw="The first vector.">Premier vecteur.</param>
      <param name="right" vsli:raw="The second vector.">Deuxième vecteur.</param>
      <returns vsli:raw="The difference vector.">Vecteur de différence.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.ToString">
      <summary vsli:raw="Returns the string representation of the current instance using default formatting.">Retourne la représentation sous forme de chaîne de l'instance actuelle en utilisant la mise en forme par défaut.</summary>
      <returns vsli:raw="The string representation of the current instance.">Représentation sous forme de chaîne de l'instance actuelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.ToString(System.String)">
      <summary vsli:raw="Returns the string representation of the current instance using the specified format string to format individual elements.">Retourne la représentation sous forme de chaîne de l'instance actuelle, en utilisant la chaîne de format spécifiée pour mettre en forme les éléments individuels.</summary>
      <param name="format" vsli:raw="A standard or custom numeric format string that defines the format of individual elements.">Une chaîne de format numérique standard ou personnalisée, qui définit le format des éléments individuels.</param>
      <returns vsli:raw="The string representation of the current instance.">Représentation sous forme de chaîne de l'instance actuelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.ToString(System.String,System.IFormatProvider)">
      <summary vsli:raw="Returns the string representation of the current instance using the specified format string to format individual elements and the specified format provider to define culture-specific formatting.">Retourne la représentation sous forme de chaîne de l'instance actuelle, en utilisant la chaîne de format spécifiée pour mettre en forme les éléments individuels et le fournisseur de format spécifié pour définir la mise en forme spécifique à la culture.</summary>
      <param name="format" vsli:raw="A standard or custom numeric format string that defines the format of individual elements.">Une chaîne de format numérique standard ou personnalisée, qui définit le format des éléments individuels.</param>
      <param name="formatProvider" vsli:raw="A format provider that supplies culture-specific formatting information.">Fournisseur de format qui fournit les informations de mise en forme spécifiques à la culture.</param>
      <returns vsli:raw="The string representation of the current instance.">Représentation sous forme de chaîne de l'instance actuelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Transform(System.Numerics.Vector3,System.Numerics.Matrix4x4)">
      <summary vsli:raw="Transforms a vector by a specified 4x4 matrix.">Transforme un vecteur par une matrice 3 x 2 spécifiée.</summary>
      <param name="position" vsli:raw="The vector to transform.">Vecteur à transformer.</param>
      <param name="matrix" vsli:raw="The transformation matrix.">Matrice de transformation.</param>
      <returns vsli:raw="The transformed vector.">Vecteur transformé.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Transform(System.Numerics.Vector3,System.Numerics.Quaternion)">
      <summary vsli:raw="Transforms a vector by the specified Quaternion rotation value.">Transforme un vecteur par la valeur de rotation du quaternion spécifié.</summary>
      <param name="value" vsli:raw="The vector to rotate.">Vecteur à faire pivoter.</param>
      <param name="rotation" vsli:raw="The rotation to apply.">Rotation à appliquer.</param>
      <returns vsli:raw="The transformed vector.">Vecteur transformé.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.TransformNormal(System.Numerics.Vector3,System.Numerics.Matrix4x4)">
      <summary vsli:raw="Transforms a vector normal by the given 4x4 matrix.">Transforme un vecteur normal par la matrice 4 x 4 donnée.</summary>
      <param name="normal" vsli:raw="The source vector.">Vecteur source.</param>
      <param name="matrix" vsli:raw="The matrix.">Matrice.</param>
      <returns vsli:raw="The transformed vector.">Vecteur transformé.</returns>
    </member>
    <member name="P:System.Numerics.Vector3.UnitX">
      <summary vsli:raw="Gets the vector (1,0,0).">Obtient le vecteur (1,0,0).</summary>
      <returns vsli:raw="The vector &lt;c&gt;(1,0,0)&lt;/c&gt;.">Vecteur <c>(1, 0, 0)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector3.UnitY">
      <summary vsli:raw="Gets the vector (0,1,0).">Obtient le vecteur (0,1,0).</summary>
      <returns vsli:raw="The vector &lt;c&gt;(0,1,0)&lt;/c&gt;.">Vecteur <c>(0, 1, 0)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector3.UnitZ">
      <summary vsli:raw="Gets the vector (0,0,1).">Obtient le vecteur (0,0,1).</summary>
      <returns vsli:raw="The vector &lt;c&gt;(0,0,1)&lt;/c&gt;.">Vecteur <c>(0, 0, 1)</c>.</returns>
    </member>
    <member name="F:System.Numerics.Vector3.X">
      <summary vsli:raw="The X component of the vector.">Composant X du vecteur.</summary>
    </member>
    <member name="F:System.Numerics.Vector3.Y">
      <summary vsli:raw="The Y component of the vector.">Composant Y du vecteur.</summary>
    </member>
    <member name="F:System.Numerics.Vector3.Z">
      <summary vsli:raw="The Z component of the vector.">Composant Z du vecteur.</summary>
    </member>
    <member name="P:System.Numerics.Vector3.Zero">
      <summary vsli:raw="Gets a vector whose 3 elements are equal to zero.">Obtient un vecteur dont les 3 éléments valent zéro.</summary>
      <returns vsli:raw="A vector whose three elements are equal to zero (that is, it returns the vector &lt;c&gt;(0,0,0)&lt;/c&gt;).">Vecteur dont les trois éléments sont égaux à zéro (autrement dit, il retourne le vecteur <c>(0, 0, 0)</c>.</returns>
    </member>
    <member name="T:System.Numerics.Vector4">
      <summary vsli:raw="Represents a vector with four single-precision floating-point values.">Représente un vecteur de quatre valeurs en virgule flottante à simple précision.</summary>
    </member>
    <member name="M:System.Numerics.Vector4.#ctor(System.Numerics.Vector2,System.Single,System.Single)">
      <summary vsli:raw="Creates a   new &lt;see cref=&quot;T:System.Numerics.Vector4&quot; /&gt; object from the specified &lt;see cref=&quot;T:System.Numerics.Vector2&quot; /&gt; object and a Z and a W component.">Crée un objet <see cref="T:System.Numerics.Vector4" /> à partir de l'objet <see cref="T:System.Numerics.Vector2" /> spécifié et d'un composant Z et W.</summary>
      <param name="value" vsli:raw="The vector to use for the X and Y components.">Vecteur à utiliser pour les composants X et Y.</param>
      <param name="z" vsli:raw="The Z component.">Composant Z.</param>
      <param name="w" vsli:raw="The W component.">Composant W.</param>
    </member>
    <member name="M:System.Numerics.Vector4.#ctor(System.Numerics.Vector3,System.Single)">
      <summary vsli:raw="Constructs a new &lt;see cref=&quot;T:System.Numerics.Vector4&quot; /&gt; object from the specified &lt;see cref=&quot;T:System.Numerics.Vector3&quot; /&gt; object and a W component.">Crée un objet <see cref="T:System.Numerics.Vector4" /> à partir de l'objet <see cref="T:System.Numerics.Vector3" /> spécifié et d'un composant W.</summary>
      <param name="value" vsli:raw="The vector to use for the X, Y, and Z components.">Vecteur à utiliser pour les composants X, Y et Z.</param>
      <param name="w" vsli:raw="The W component.">Composant W.</param>
    </member>
    <member name="M:System.Numerics.Vector4.#ctor(System.Single)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Numerics.Vector4&quot; /&gt; object whose four elements have the same value.">Crée un objet <see cref="T:System.Numerics.Vector4" /> dont les quatre éléments ont la même valeur.</summary>
      <param name="value" vsli:raw="The value to assign to all four elements.">Valeur à affecter aux quatre éléments.</param>
    </member>
    <member name="M:System.Numerics.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary vsli:raw="Creates a vector whose elements have the specified values.">Crée un vecteur dont les éléments ont les valeurs spécifiées.</summary>
      <param name="x" vsli:raw="The value to assign to the &lt;see cref=&quot;F:System.Numerics.Vector4.X&quot; /&gt; field.">Valeur à affecter au champ <see cref="F:System.Numerics.Vector4.X" />.</param>
      <param name="y" vsli:raw="The value to assign to the &lt;see cref=&quot;F:System.Numerics.Vector4.Y&quot; /&gt; field.">Valeur à affecter au champ <see cref="F:System.Numerics.Vector4.Y" />.</param>
      <param name="z" vsli:raw="The value to assign to the &lt;see cref=&quot;F:System.Numerics.Vector4.Z&quot; /&gt; field.">Valeur à affecter au champ <see cref="F:System.Numerics.Vector4.Z" />.</param>
      <param name="w" vsli:raw="The value to assign to the &lt;see cref=&quot;F:System.Numerics.Vector4.W&quot; /&gt; field.">Valeur à affecter au champ <see cref="F:System.Numerics.Vector4.W" />.</param>
    </member>
    <member name="M:System.Numerics.Vector4.Abs(System.Numerics.Vector4)">
      <summary vsli:raw="Returns a vector whose elements are the absolute values of each of the specified vector's elements.">Retourne un vecteur dont les éléments sont les valeurs absolues de chacun des éléments du vecteur spécifié.</summary>
      <param name="value" vsli:raw="A vector.">Un vecteur.</param>
      <returns vsli:raw="The absolute value vector.">Vecteur de valeurs absolues.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Add(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary vsli:raw="Adds two vectors together.">Additionne deux vecteurs.</summary>
      <param name="left" vsli:raw="The first vector to add.">Premier vecteur à additionner.</param>
      <param name="right" vsli:raw="The second vector to add.">Deuxième vecteur à additionner.</param>
      <returns vsli:raw="The summed vector.">Vecteur résultant de l'addition.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Clamp(System.Numerics.Vector4,System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary vsli:raw="Restricts a vector between a minimum and a maximum value.">Limite un vecteur entre une valeur minimale et une valeur maximale.</summary>
      <param name="value1" vsli:raw="The vector to restrict.">Vecteur à limiter.</param>
      <param name="min" vsli:raw="The minimum value.">Valeur minimale.</param>
      <param name="max" vsli:raw="The maximum value.">Valeur maximale.</param>
      <returns vsli:raw="The restricted vector.">Vecteur limité.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.CopyTo(System.Single[])">
      <summary vsli:raw="Copies the elements of the vector to a specified array.">Copie les éléments du vecteur dans un tableau spécifié.</summary>
      <param name="array" vsli:raw="The destination array.">Tableau de destination.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the current instance is greater than in the array.">Le nombre d’éléments dans l’instance actuelle est supérieur à celui dans le tableau.</exception>
      <exception cref="T:System.RankException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.">
        <paramref name="array" /> est multidimensionnel.</exception>
    </member>
    <member name="M:System.Numerics.Vector4.CopyTo(System.Single[],System.Int32)">
      <summary vsli:raw="Copies the elements of the vector to a specified array starting at a specified index position.">Copie les éléments du vecteur dans un tableau spécifié, en commençant à une position d'index spécifiée.</summary>
      <param name="array" vsli:raw="The destination array.">Tableau de destination.</param>
      <param name="index" vsli:raw="The index at which to copy the first element of the vector.">Index auquel copier le premier élément du vecteur.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the current instance is greater than in the array.">Le nombre d’éléments dans l’instance actuelle est supérieur à celui dans le tableau.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is greater than or equal to the array length.">
        <paramref name="index" /> est inférieur à zéro.

ou -
<paramref name="index" /> est supérieur ou égal à la longueur du tableau.</exception>
      <exception cref="T:System.RankException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.">
        <paramref name="array" /> est multidimensionnel.</exception>
    </member>
    <member name="M:System.Numerics.Vector4.Distance(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary vsli:raw="Computes the Euclidean distance between the two given points.">Calcule la distance euclidienne entre les deux points donnés.</summary>
      <param name="value1" vsli:raw="The first point.">Premier point.</param>
      <param name="value2" vsli:raw="The second point.">Deuxième point.</param>
      <returns vsli:raw="The distance.">Distance.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.DistanceSquared(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary vsli:raw="Returns the Euclidean distance squared between two specified points.">Retourne le carré de la distance euclidienne entre deux points spécifiés.</summary>
      <param name="value1" vsli:raw="The first point.">Premier point.</param>
      <param name="value2" vsli:raw="The second point.">Deuxième point.</param>
      <returns vsli:raw="The distance squared.">Carré de la distance.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Divide(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary vsli:raw="Divides the first vector by the second.">Divise le premier vecteur par le deuxième.</summary>
      <param name="left" vsli:raw="The first vector.">Premier vecteur.</param>
      <param name="right" vsli:raw="The second vector.">Deuxième vecteur.</param>
      <returns vsli:raw="The vector resulting from the division.">Vecteur résultant de la division.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Divide(System.Numerics.Vector4,System.Single)">
      <summary vsli:raw="Divides the specified vector by a specified scalar value.">Divise le vecteur spécifié par une valeur scalaire spécifiée.</summary>
      <param name="left" vsli:raw="The vector.">Le vecteur.</param>
      <param name="divisor" vsli:raw="The scalar value.">Valeur scalaire.</param>
      <returns vsli:raw="The vector that results from the division.">Vecteur résultant de la division.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Dot(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary vsli:raw="Returns the dot product of two vectors.">Retourne le produit scalaire de deux vecteurs.</summary>
      <param name="vector1" vsli:raw="The first vector.">Premier vecteur.</param>
      <param name="vector2" vsli:raw="The second vector.">Deuxième vecteur.</param>
      <returns vsli:raw="The dot product.">Produit scalaire.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Equals(System.Numerics.Vector4)">
      <summary vsli:raw="Returns a value that indicates whether this instance and another vector are equal.">Retourne une valeur qui indique si cette instance et un autre vecteur sont égaux.</summary>
      <param name="other" vsli:raw="The other vector.">L'autre vecteur.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two vectors are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si les deux vecteurs sont égaux ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance and a specified object are equal.">Retourne une valeur qui indique si cette instance et un objet spécifié sont égaux.</summary>
      <param name="obj" vsli:raw="The object to compare with the current instance.">Objet à comparer à l'instance actuelle.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current instance and &lt;paramref name=&quot;obj&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;paramref name=&quot;obj&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, the method returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'instance actuelle et <paramref name="obj" /> sont égaux ; sinon, <see langword="false" />. Si <paramref name="obj" /> est <see langword="null" />, la méthode retourne <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retourne le code de hachage de cette instance.</summary>
      <returns vsli:raw="The hash code.">Code de hachage.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Length">
      <summary vsli:raw="Returns the length of this vector object.">Retourne la longueur de cet objet vecteur.</summary>
      <returns vsli:raw="The vector's length.">Longueur du vecteur.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.LengthSquared">
      <summary vsli:raw="Returns the length of the vector squared.">Retourne le carré de la longueur du vecteur.</summary>
      <returns vsli:raw="The vector's length squared.">Carré de la longueur du vecteur.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Lerp(System.Numerics.Vector4,System.Numerics.Vector4,System.Single)">
      <summary vsli:raw="Performs a linear interpolation between two vectors based on the given weighting.">Effectue une interpolation linéaire entre deux vecteurs en fonction de la pondération donnée.</summary>
      <param name="value1" vsli:raw="The first vector.">Premier vecteur.</param>
      <param name="value2" vsli:raw="The second vector.">Deuxième vecteur.</param>
      <param name="amount" vsli:raw="A value between 0 and 1 that indicates the weight of &lt;paramref name=&quot;value2&quot; /&gt;.">Valeur comprise entre 0 et 1, qui indique la pondération de <paramref name="value2" />.</param>
      <returns vsli:raw="The interpolated vector.">Vecteur interpolé.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Max(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary vsli:raw="Returns a vector whose elements are the maximum of each of the pairs of elements in two specified vectors.">Retourne un vecteur dont les éléments sont la valeur maximale de chacune des paires d'éléments de deux vecteurs spécifiés.</summary>
      <param name="value1" vsli:raw="The first vector.">Premier vecteur.</param>
      <param name="value2" vsli:raw="The second vector.">Deuxième vecteur.</param>
      <returns vsli:raw="The maximized vector.">Vecteur constitué des maximums.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Min(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary vsli:raw="Returns a vector whose elements are the minimum of each of the pairs of elements in two specified vectors.">Retourne un vecteur dont les éléments sont la valeur minimale de chacune des paires d'éléments de deux vecteurs spécifiés.</summary>
      <param name="value1" vsli:raw="The first vector.">Premier vecteur.</param>
      <param name="value2" vsli:raw="The second vector.">Deuxième vecteur.</param>
      <returns vsli:raw="The minimized vector.">Vecteur constitué des minimums.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Multiply(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary vsli:raw="Returns a new vector whose values are the product of each pair of elements in two specified vectors.">Retourne un nouveau vecteur dont les valeurs sont le produit de chaque paire d'éléments dans deux vecteurs spécifiés.</summary>
      <param name="left" vsli:raw="The first vector.">Premier vecteur.</param>
      <param name="right" vsli:raw="The second vector.">Deuxième vecteur.</param>
      <returns vsli:raw="The element-wise product vector.">Vecteur résultant du produit d’éléments.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Multiply(System.Numerics.Vector4,System.Single)">
      <summary vsli:raw="Multiplies a vector by a specified scalar.">Multiplie un vecteur par un scalaire spécifié.</summary>
      <param name="left" vsli:raw="The vector to multiply.">Vecteur à multiplier.</param>
      <param name="right" vsli:raw="The scalar value.">Valeur scalaire.</param>
      <returns vsli:raw="The scaled vector.">Vecteur mis à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Multiply(System.Single,System.Numerics.Vector4)">
      <summary vsli:raw="Multiplies a scalar value by a specified vector.">Multiplie une valeur scalaire par un vecteur spécifié.</summary>
      <param name="left" vsli:raw="The scaled value.">Valeur mise à l'échelle.</param>
      <param name="right" vsli:raw="The vector.">Le vecteur.</param>
      <returns vsli:raw="The scaled vector.">Vecteur mis à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Negate(System.Numerics.Vector4)">
      <summary vsli:raw="Negates a specified vector.">Inverse le signe d'un vecteur spécifié.</summary>
      <param name="value" vsli:raw="The vector to negate.">Vecteur dont le signe doit être inversé.</param>
      <returns vsli:raw="The negated vector.">Vecteur dont le signe a été inversé.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Normalize(System.Numerics.Vector4)">
      <summary vsli:raw="Returns a vector with the same direction as the specified vector, but with a length of one.">Retourne un vecteur avec la même direction que le vecteur spécifié, mais avec une longueur de 1.</summary>
      <param name="vector" vsli:raw="The vector to normalize.">Vecteur à normaliser.</param>
      <returns vsli:raw="The normalized vector.">Vecteur normalisé.</returns>
    </member>
    <member name="P:System.Numerics.Vector4.One">
      <summary vsli:raw="Gets a vector whose 4 elements are equal to one.">Obtient un vecteur dont les 4 éléments valent 1.</summary>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Numerics.Vector4&quot; /&gt;.">Retourne <see cref="T:System.Numerics.Vector4" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Addition(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary vsli:raw="Adds two vectors together.">Additionne deux vecteurs.</summary>
      <param name="left" vsli:raw="The first vector to add.">Premier vecteur à additionner.</param>
      <param name="right" vsli:raw="The second vector to add.">Deuxième vecteur à additionner.</param>
      <returns vsli:raw="The summed vector.">Vecteur résultant de l'addition.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Division(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary vsli:raw="Divides the first vector by the second.">Divise le premier vecteur par le deuxième.</summary>
      <param name="left" vsli:raw="The first vector.">Premier vecteur.</param>
      <param name="right" vsli:raw="The second vector.">Deuxième vecteur.</param>
      <returns vsli:raw="The vector that results from dividing &lt;paramref name=&quot;left&quot; /&gt; by &lt;paramref name=&quot;right&quot; /&gt;.">Vecteur résultant de la division de <paramref name="left" /> par <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Division(System.Numerics.Vector4,System.Single)">
      <summary vsli:raw="Divides the specified vector by a specified scalar value.">Divise le vecteur spécifié par une valeur scalaire spécifiée.</summary>
      <param name="value1" vsli:raw="The vector.">Le vecteur.</param>
      <param name="value2" vsli:raw="The scalar value.">Valeur scalaire.</param>
      <returns vsli:raw="The result of the division.">Résultat de la division.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Equality(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary vsli:raw="Returns a value that indicates whether each pair of elements in two specified vectors is equal.">Retourne une valeur qui indique si chacune des paires d'éléments dans deux vecteurs spécifiés sont égales.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Premier vecteur à comparer.</param>
      <param name="right" vsli:raw="The second vector to compare.">Deuxième vecteur à comparer.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="left" /> et <paramref name="right" /> sont égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Inequality(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary vsli:raw="Returns a value that indicates whether two specified vectors are not equal.">Retourne une valeur qui indique si deux vecteurs spécifiés ne sont pas égaux.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Premier vecteur à comparer.</param>
      <param name="right" vsli:raw="The second vector to compare.">Deuxième vecteur à comparer.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="left" /> et <paramref name="right" /> ne sont pas égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Multiply(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary vsli:raw="Returns a new vector whose values are the product of each pair of elements in two specified vectors.">Retourne un nouveau vecteur dont les valeurs sont le produit de chaque paire d'éléments dans deux vecteurs spécifiés.</summary>
      <param name="left" vsli:raw="The first vector.">Premier vecteur.</param>
      <param name="right" vsli:raw="The second vector.">Deuxième vecteur.</param>
      <returns vsli:raw="The element-wise product vector.">Vecteur résultant du produit d’éléments.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Multiply(System.Numerics.Vector4,System.Single)">
      <summary vsli:raw="Multiples the specified vector by the specified scalar value.">Multiplie le vecteur spécifié par la valeur scalaire spécifiée.</summary>
      <param name="left" vsli:raw="The vector.">Le vecteur.</param>
      <param name="right" vsli:raw="The scalar value.">Valeur scalaire.</param>
      <returns vsli:raw="The scaled vector.">Vecteur mis à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Multiply(System.Single,System.Numerics.Vector4)">
      <summary vsli:raw="Multiples the scalar value by the specified vector.">Multiplie la valeur scalaire par le vecteur spécifié.</summary>
      <param name="left" vsli:raw="The vector.">Le vecteur.</param>
      <param name="right" vsli:raw="The scalar value.">Valeur scalaire.</param>
      <returns vsli:raw="The scaled vector.">Vecteur mis à l'échelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Subtraction(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary vsli:raw="Subtracts the second vector from the first.">Soustrait le deuxième vecteur du premier.</summary>
      <param name="left" vsli:raw="The first vector.">Premier vecteur.</param>
      <param name="right" vsli:raw="The second vector.">Deuxième vecteur.</param>
      <returns vsli:raw="The vector that results from subtracting &lt;paramref name=&quot;right&quot; /&gt; from &lt;paramref name=&quot;left&quot; /&gt;.">Vecteur résultant de la soustraction de <paramref name="right" /> de <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_UnaryNegation(System.Numerics.Vector4)">
      <summary vsli:raw="Negates the specified vector.">Inverse le signe du vecteur spécifié.</summary>
      <param name="value" vsli:raw="The vector to negate.">Vecteur dont le signe doit être inversé.</param>
      <returns vsli:raw="The negated vector.">Vecteur dont le signe a été inversé.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.SquareRoot(System.Numerics.Vector4)">
      <summary vsli:raw="Returns a vector whose elements are the square root of each of a specified vector's elements.">Retourne un vecteur dont les éléments sont la racine carrée de chacun des éléments d'un vecteur spécifié.</summary>
      <param name="value" vsli:raw="A vector.">Un vecteur.</param>
      <returns vsli:raw="The square root vector.">Racine carrée du vecteur.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Subtract(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary vsli:raw="Subtracts the second vector from the first.">Soustrait le deuxième vecteur du premier.</summary>
      <param name="left" vsli:raw="The first vector.">Premier vecteur.</param>
      <param name="right" vsli:raw="The second vector.">Deuxième vecteur.</param>
      <returns vsli:raw="The difference vector.">Vecteur de différence.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.ToString">
      <summary vsli:raw="Returns the string representation of the current instance using default formatting.">Retourne la représentation sous forme de chaîne de l'instance actuelle en utilisant la mise en forme par défaut.</summary>
      <returns vsli:raw="The string representation of the current instance.">Représentation sous forme de chaîne de l'instance actuelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.ToString(System.String)">
      <summary vsli:raw="Returns the string representation of the current instance using the specified format string to format individual elements.">Retourne la représentation sous forme de chaîne de l'instance actuelle, en utilisant la chaîne de format spécifiée pour mettre en forme les éléments individuels.</summary>
      <param name="format" vsli:raw="A standard or custom numeric format string that defines the format of individual elements.">Une chaîne de format numérique standard ou personnalisée, qui définit le format des éléments individuels.</param>
      <returns vsli:raw="The string representation of the current instance.">Représentation sous forme de chaîne de l'instance actuelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.ToString(System.String,System.IFormatProvider)">
      <summary vsli:raw="Returns the string representation of the current instance using the specified format string to format individual elements and the specified format provider to define culture-specific formatting.">Retourne la représentation sous forme de chaîne de l'instance actuelle, en utilisant la chaîne de format spécifiée pour mettre en forme les éléments individuels et le fournisseur de format spécifié pour définir la mise en forme spécifique à la culture.</summary>
      <param name="format" vsli:raw="A standard or custom numeric format string that defines the format of individual elements.">Une chaîne de format numérique standard ou personnalisée, qui définit le format des éléments individuels.</param>
      <param name="formatProvider" vsli:raw="A format provider that supplies culture-specific formatting information.">Fournisseur de format qui fournit les informations de mise en forme spécifiques à la culture.</param>
      <returns vsli:raw="The string representation of the current instance.">Représentation sous forme de chaîne de l'instance actuelle.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector2,System.Numerics.Matrix4x4)">
      <summary vsli:raw="Transforms a two-dimensional vector by a specified 4x4 matrix.">Transforme un vecteur à deux dimensions par une matrice 4 x 4 spécifiée.</summary>
      <param name="position" vsli:raw="The vector to transform.">Vecteur à transformer.</param>
      <param name="matrix" vsli:raw="The transformation matrix.">Matrice de transformation.</param>
      <returns vsli:raw="The transformed vector.">Vecteur transformé.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector2,System.Numerics.Quaternion)">
      <summary vsli:raw="Transforms a two-dimensional vector by the specified Quaternion rotation value.">Transforme un vecteur à deux dimensions par la valeur de rotation du quaternion spécifié.</summary>
      <param name="value" vsli:raw="The vector to rotate.">Vecteur à faire pivoter.</param>
      <param name="rotation" vsli:raw="The rotation to apply.">Rotation à appliquer.</param>
      <returns vsli:raw="The transformed vector.">Vecteur transformé.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector3,System.Numerics.Matrix4x4)">
      <summary vsli:raw="Transforms a three-dimensional vector by a specified 4x4 matrix.">Transforme un vecteur à trois dimensions par une matrice 4 x 4 spécifiée.</summary>
      <param name="position" vsli:raw="The vector to transform.">Vecteur à transformer.</param>
      <param name="matrix" vsli:raw="The transformation matrix.">Matrice de transformation.</param>
      <returns vsli:raw="The transformed vector.">Vecteur transformé.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector3,System.Numerics.Quaternion)">
      <summary vsli:raw="Transforms a three-dimensional vector by the specified Quaternion rotation value.">Transforme un vecteur à trois dimensions par la valeur de rotation du quaternion spécifié.</summary>
      <param name="value" vsli:raw="The vector to rotate.">Vecteur à faire pivoter.</param>
      <param name="rotation" vsli:raw="The rotation to apply.">Rotation à appliquer.</param>
      <returns vsli:raw="The transformed vector.">Vecteur transformé.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector4,System.Numerics.Matrix4x4)">
      <summary vsli:raw="Transforms a four-dimensional vector by a specified 4x4 matrix.">Transforme un vecteur à quatre dimensions par une matrice 4 x 4 spécifiée.</summary>
      <param name="vector" vsli:raw="The vector to transform.">Vecteur à transformer.</param>
      <param name="matrix" vsli:raw="The transformation matrix.">Matrice de transformation.</param>
      <returns vsli:raw="The transformed vector.">Vecteur transformé.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector4,System.Numerics.Quaternion)">
      <summary vsli:raw="Transforms a four-dimensional vector by the specified Quaternion rotation value.">Transforme un vecteur à quatre dimensions par la valeur de rotation du quaternion spécifié.</summary>
      <param name="value" vsli:raw="The vector to rotate.">Vecteur à faire pivoter.</param>
      <param name="rotation" vsli:raw="The rotation to apply.">Rotation à appliquer.</param>
      <returns vsli:raw="The transformed vector.">Vecteur transformé.</returns>
    </member>
    <member name="P:System.Numerics.Vector4.UnitW">
      <summary vsli:raw="Gets the vector (0,0,0,1).">Obtient le vecteur (0,0,0,1).</summary>
      <returns vsli:raw="The vector &lt;c&gt;(0,0,0,1)&lt;/c&gt;.">Vecteur (0, 0, <c>0, 1)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector4.UnitX">
      <summary vsli:raw="Gets the vector (1,0,0,0).">Obtient le vecteur (1,0,0,0).</summary>
      <returns vsli:raw="The vector &lt;c&gt;(1,0,0,0)&lt;/c&gt;.">Vecteur <c>(1, 0, 0, 0)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector4.UnitY">
      <summary vsli:raw="Gets the vector (0,1,0,0).">Obtient le vecteur (0,1,0,0).</summary>
      <returns vsli:raw="The vector &lt;c&gt;(0,1,0,0)&lt;/c&gt;.">Vecteur <c>(0, 1, 0, 0)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector4.UnitZ">
      <summary vsli:raw="Gets the vector (0,0,1,0).">Obtient le vecteur (0,0,1,0).</summary>
      <returns vsli:raw="The vector &lt;c&gt;(0,0,1,0)&lt;/c&gt;.">Vecteur <c>(0, 0, 1, 0)</c>.</returns>
    </member>
    <member name="F:System.Numerics.Vector4.W">
      <summary vsli:raw="The W component of the vector.">Composant W du vecteur.</summary>
    </member>
    <member name="F:System.Numerics.Vector4.X">
      <summary vsli:raw="The X component of the vector.">Composant X du vecteur.</summary>
    </member>
    <member name="F:System.Numerics.Vector4.Y">
      <summary vsli:raw="The Y component of the vector.">Composant Y du vecteur.</summary>
    </member>
    <member name="F:System.Numerics.Vector4.Z">
      <summary vsli:raw="The Z component of the vector.">Composant Z du vecteur.</summary>
    </member>
    <member name="P:System.Numerics.Vector4.Zero">
      <summary vsli:raw="Gets a vector whose 4 elements are equal to zero.">Obtient un vecteur dont les 4 éléments valent zéro.</summary>
      <returns vsli:raw="A vector whose four elements are equal to zero (that is, it returns the vector &lt;c&gt;(0,0,0,0)&lt;/c&gt;).">Vecteur dont les quatre éléments sont égaux à zéro (autrement dit, il retourne le vecteur <c>(0</c>, 0, 0, 0).</returns>
    </member>
  </members>
</doc>
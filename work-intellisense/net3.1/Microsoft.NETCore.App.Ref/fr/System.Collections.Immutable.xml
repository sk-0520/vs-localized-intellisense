<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Collections.Immutable</name>
  </assembly>
  <members>
    <member name="T:System.Collections.Immutable.IImmutableDictionary`2">
      <summary>Représente une collection immuable de paires clé/valeur.
NuGet package: System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="TKey">Type des clés du dictionnaire.</typeparam>
      <typeparam name="TValue">Type des valeurs du dictionnaire.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Add(`0,`1)">
      <summary>Ajoute un élément avec la clé et la valeur spécifiées dans le dictionnaire.</summary>
      <param name="key">Clé de l'élément à ajouter.</param>
      <param name="value">Valeur de l'élément à ajouter.</param>
      <returns>Nouveau dictionnaire immuable qui contient la paire clé/valeur supplémentaire.</returns>
      <exception cref="T:System.ArgumentException">La clé donnée existe déjà dans le dictionnaire, mais a une valeur différente.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Ajoute les paires clé/valeur spécifiées au dictionnaire.</summary>
      <param name="pairs">Paires clé/valeur à ajouter.</param>
      <returns>Nouveau dictionnaire immuable qui contient les paires clé/valeur supplémentaires.</returns>
      <exception cref="T:System.ArgumentException">Une des clés données existe déjà dans le dictionnaire, mais a une valeur différente.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Clear">
      <summary>Récupère un dictionnaire vide qui possède les mêmes règles de comparaison de classement et de clé/valeur que cette instance du dictionnaire.</summary>
      <returns>Dictionnaire vide avec des règles de comparaison de classement et de clé/valeur équivalentes.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Détermine si le dictionnaire immuable contient la paire clé/valeur spécifiée.</summary>
      <param name="pair">Paire clé/valeur à rechercher.</param>
      <returns>
        <see langword="true" /> si la paire clé/valeur spécifiée est trouvée dans le dictionnaire ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Remove(`0)">
      <summary>Supprime l’élément avec la clé spécifiée du dictionnaire immuable.</summary>
      <param name="key">Clé de l'élément à supprimer.</param>
      <returns>Nouveau dictionnaire immuable avec l’élément spécifié supprimé ; ou cette instance si la clé spécifiée est introuvable dans le dictionnaire.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Supprime les éléments avec les clés spécifiées du dictionnaire immuable.</summary>
      <param name="keys">Clés des éléments à supprimer.</param>
      <returns>Nouveau dictionnaire immuable avec les clés spécifiées supprimées ; ou cette instance si les clés spécifiées sont introuvables dans le dictionnaire.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.SetItem(`0,`1)">
      <summary>Définit la clé et la valeur spécifiées dans le dictionnaire immuable, en remplaçant éventuellement une valeur existante pour la clé.</summary>
      <param name="key">Clé de l'entrée à ajouter.</param>
      <param name="value">Valeur de clé à définir.</param>
      <returns>Nouveau dictionnaire immuable qui contient la paire clé/valeur spécifiée.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Définit les paires clé/valeur spécifiées dans le dictionnaire immuable, en remplaçant éventuellement des valeurs existantes pour les clés.</summary>
      <param name="items">Paires clé/valeur à définir dans le dictionnaire. Si une clé existe déjà dans le dictionnaire, cette méthode remplace leurs valeurs précédentes.</param>
      <returns>Nouveau dictionnaire immuable qui contient les paires clé/valeur spécifiées.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.TryGetKey(`0,`0@)">
      <summary>Détermine si ce dictionnaire contient la clé spécifiée.</summary>
      <param name="equalKey">Clé à rechercher.</param>
      <param name="actualKey">Clé correspondante située dans le dictionnaire, le cas échéant, ou <c>equalkey</c> si aucune correspondance n’est trouvée.</param>
      <returns>
        <see langword="true" /> si une correspondance pour <paramref name="equalKey" /> est trouvée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableList`1">
      <summary>Représente une liste d’éléments qui ne peuvent pas être modifiés.
Package NuGet : System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="T">Type d'éléments de la liste.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Add(`0)">
      <summary>Effectue une copie de la liste et ajoute l’objet spécifié à la fin de la liste copiée.</summary>
      <param name="value">Objet à ajouter à la liste.</param>
      <returns>Nouvelle liste contenant l'objet ajouté.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Effectue une copie de la liste et ajoute les objets spécifiés à la fin de la liste copiée.</summary>
      <param name="items">Objet à ajouter à la liste.</param>
      <returns>Nouvelle liste contenant les éléments ajoutés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Clear">
      <summary>Crée une liste de tous les éléments supprimés, mais avec la même sémantique de tri et de classement que cette liste.</summary>
      <returns>Une liste vide avec la même sémantique de tri et de classement que cette instance.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Recherche l'objet spécifié et retourne l'index de base zéro de la première occurrence trouvée dans la plage d'éléments de <see cref="T:System.Collections.Immutable.IImmutableList`1" /> qui commence à l'index spécifié et qui contient le nombre d'éléments spécifié.</summary>
      <param name="item">Objet à rechercher dans <see cref="T:System.Collections.Immutable.IImmutableList`1" />. Cette valeur peut être null pour les types référence.</param>
      <param name="index">Index de début de base zéro de la recherche. 0 (zéro) est valide dans une liste vide.</param>
      <param name="count">Nombre d'éléments contenus dans la section où la recherche doit être effectuée.</param>
      <param name="equalityComparer">Comparateur d’égalité à utiliser pour rechercher <paramref name="item" />.</param>
      <returns>Index de base zéro de la première occurrence de <paramref name="item" /> trouvée dans la plage d’éléments de <see cref="T:System.Collections.Immutable.IImmutableList`1" /> qui commence à <paramref name="index" /> et contient le nombre <paramref name="count" /> d’éléments, le cas échéant ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Insert(System.Int32,`0)">
      <summary>Insère l’élément spécifié à l’index spécifié dans la liste immuable.</summary>
      <param name="index">Index de base zéro au niveau duquel insérer la valeur.</param>
      <param name="element">Objet à insérer.</param>
      <returns>Nouvelle liste immuable qui inclut l’élément spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>Insère les éléments spécifiés à l’index spécifié dans la liste immuable.</summary>
      <param name="index">Index de base zéro au niveau duquel les nouveaux éléments devraient être insérés.</param>
      <param name="items">Éléments à insérer.</param>
      <returns>Nouvelle liste immuable qui inclut les éléments spécifiés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Recherche l'objet spécifié et retourne l'index de base zéro de la dernière occurrence trouvée dans la plage d'éléments de <see cref="T:System.Collections.Immutable.IImmutableList`1" /> qui contient le nombre spécifié d'éléments et se termine à l'index spécifié.</summary>
      <param name="item">Objet à localiser dans la liste. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <param name="index">Index de début de base zéro de la recherche. 0 (zéro) est valide dans une liste vide.</param>
      <param name="count">Nombre d'éléments contenus dans la section où la recherche doit être effectuée.</param>
      <param name="equalityComparer">Comparateur d’égalité pour correspondre à <paramref name="item" />.</param>
      <returns>retourne <see cref="T:System.Int32" /> ;</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Supprime la première occurrence de l’objet spécifié de cette liste immuable.</summary>
      <param name="value">Objet à supprimer de la liste.</param>
      <param name="equalityComparer">Comparateur d’égalité à utiliser pour rechercher <paramref name="value" />.</param>
      <returns>Nouvelle liste avec l’objet spécifié supprimé.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveAll(System.Predicate{`0})">
      <summary>Supprime tous les éléments qui correspondent aux conditions définies par le prédicat spécifié.</summary>
      <param name="match">Délégué qui définit les conditions des éléments à supprimer.</param>
      <returns>Nouvelle liste immuable avec les éléments supprimés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveAt(System.Int32)">
      <summary>Supprime l’élément à l’index spécifié de la liste immuable.</summary>
      <param name="index">Index de l'élément à supprimer.</param>
      <returns>Nouvelle liste avec l’élément supprimé.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Supprime l’objet spécifié de la liste.</summary>
      <param name="items">Objets à supprimer de la liste.</param>
      <param name="equalityComparer">Comparateur d’égalité à utiliser pour déterminer si <paramref name="items" /> correspond à tous les objets de la liste.</param>
      <returns>Nouvelle liste immuable avec les objets spécifiés supprimés, si <paramref name="items" /> correspond aux objets de la liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Int32,System.Int32)">
      <summary>Supprime une plage d'éléments de <see cref="T:System.Collections.Immutable.IImmutableList`1" />.</summary>
      <param name="index">Index de début de base zéro de la plage d'éléments à supprimer.</param>
      <param name="count">Nombre d'éléments à supprimer.</param>
      <returns>Nouvelle liste immuable avec les éléments supprimés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Retourne une nouvelle liste avec le premier élément correspondant de la liste remplacé par l’élément spécifié.</summary>
      <param name="oldValue">Élément à remplacer.</param>
      <param name="newValue">Élément par lequel remplacer par la première occurrence de <paramref name="oldValue" />.</param>
      <param name="equalityComparer">Comparateur d’égalité à utiliser pour la correspondance <paramref name="oldValue" />.</param>
      <returns>Nouvelle liste contenant <paramref name="newValue" />, même si <paramref name="oldvalue" /> est identique à <paramref name="newValue" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> n’existe pas dans la liste.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.SetItem(System.Int32,`0)">
      <summary>Remplace un élément de la liste à une position donnée par l’élément spécifié.</summary>
      <param name="index">Position dans la liste de l’élément à remplacer.</param>
      <param name="value">Élément avec lequel remplacer l’ancien élément.</param>
      <returns>Nouvelle liste qui contient le nouvel élément, même si l’élément à l’emplacement spécifié est le même que le nouvel élément.</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableQueue`1">
      <summary>Représente une collection d’objets premier entré, premier sorti immuable.
NuGet package: System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="T">Type des éléments dans la file d’attente.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Clear">
      <summary>Retourne une nouvelle file d’attente avec tous les éléments supprimés.</summary>
      <returns>File d’attente immuable vide.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Dequeue">
      <summary>Supprime le premier élément de la file d’attente immuable et retourne la nouvelle file d’attente.</summary>
      <returns>Nouvelle file d’attente immuable avec l’élément de début supprimé. Cette valeur n’est jamais <see langword="null" />.</returns>
      <exception cref="T:System.InvalidOperationException">La file d’attente est vide.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Enqueue(`0)">
      <summary>Ajoute un élément à la fin de la file d’attente immuable et retourne la nouvelle file d’attente.</summary>
      <param name="value">Élément à ajouter.</param>
      <returns>Nouvelle file d’attente immuable avec l’élément spécifié ajouté.</returns>
    </member>
    <member name="P:System.Collections.Immutable.IImmutableQueue`1.IsEmpty">
      <summary>Obtient une valeur qui indique si cette file d’attente immuable est vide.</summary>
      <returns>
        <see langword="true" /> si cette file d’attente est vide ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Peek">
      <summary>Retourne l’élément au début de la file d’attente immuable sans le supprimer.</summary>
      <returns>Élément au début de la file d’attente.</returns>
      <exception cref="T:System.InvalidOperationException">La file d’attente est vide.</exception>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableSet`1">
      <summary>Représente un ensemble d’éléments qui ne peut être modifié en créant une nouvelle instance de l’ensemble.
NuGet package: System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="T">Type d’élément stocké dans l’ensemble.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Add(`0)">
      <summary>Ajoute l’élément spécifié à cet ensemble immuable.</summary>
      <param name="value">Élément à ajouter.</param>
      <returns>Nouvel l’ensemble avec l’élément ajouté ou cet ensemble si l’élément est déjà dans cet ensemble.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Clear">
      <summary>Récupère un ensemble immuable vide qui a la même sémantique de tri et de classement que cette instance.</summary>
      <returns>Ensemble vide qui a la même sémantique de tri et de classement que cette instance.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Contains(`0)">
      <summary>Détermine si cet ensemble immuable contient un élément spécifié.</summary>
      <param name="value">Élément à rechercher dans l'ensemble.</param>
      <returns>
        <see langword="true" /> si l’ensemble contient la valeur spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>Supprime les éléments de la collection spécifiée de l’ensemble actuel immuable.</summary>
      <param name="other">Collection d’éléments à supprimer de cet ensemble.</param>
      <returns>Nouvel ensemble avec les éléments supprimés ; ou ensemble d’origine si aucun des éléments ne se trouvaient dans l’ensemble.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>Crée un ensemble immuable qui contient uniquement les éléments qui existent dans cet ensemble et l’ensemble spécifié.</summary>
      <param name="other">Collection à comparer à l’<see cref="T:System.Collections.Immutable.IImmutableSet`1" /> actuel.</param>
      <returns>Nouvel ensemble immuable qui contient des éléments qui existent dans les deux ensembles.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Détermine si l’ensemble immuable actuel est un sous-ensemble approprié (strict) de la collection spécifiée.</summary>
      <param name="other">Collection à comparer à l’ensemble actuel.</param>
      <returns>
        <see langword="true" /> si l’ensemble actuel est un sous-ensemble approprié de la collection spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Détermine si l’ensemble immuable actuel est un sur-ensemble (strict) de la collection spécifiée.</summary>
      <param name="other">Collection à comparer à l’ensemble actuel.</param>
      <returns>
        <see langword="true" /> si l’ensemble actuel est un sur-ensemble approprié de la collection spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Détermine si l’ensemble immuable actuel est un sous-ensemble d’une collection spécifiée.</summary>
      <param name="other">Collection à comparer à l’ensemble actuel.</param>
      <returns>
        <see langword="true" /> si l’ensemble actuel est un sous-ensemble de la collection spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Détermine si l’ensemble immuable actuel est un sur-ensemble de la collection spécifiée.</summary>
      <param name="other">Collection à comparer à l’ensemble actuel.</param>
      <returns>
        <see langword="true" /> si l’ensemble actuel est un sur-ensemble de la collection spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Détermine si l’ensemble immuable actuel chevauche la collection spécifiée.</summary>
      <param name="other">Collection à comparer à l’ensemble actuel.</param>
      <returns>
        <see langword="true" /> si l’ensemble actuel et la collection spécifiée partagent au moins un élément commun ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Remove(`0)">
      <summary>Supprime l’élément spécifié de cet ensemble immuable.</summary>
      <param name="value">Élément à supprimer.</param>
      <returns>Nouvel ensemble avec l’élément spécifié supprimé, ou ensemble actuel si l’élément est introuvable dans l’ensemble.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Détermine si l’ensemble immuable actuel et la collection spécifiée contiennent les mêmes éléments.</summary>
      <param name="other">Collection à comparer à l’ensemble actuel.</param>
      <returns>
        <see langword="true" /> si les ensemble sont égaux ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>Crée un ensemble immuable qui contient uniquement les éléments qui sont présents dans l’ensemble actuel ou dans la collection spécifiée, mais pas dans les deux.</summary>
      <param name="other">Collection à comparer à l’ensemble actuel.</param>
      <returns>Nouvel ensemble qui contient les éléments qui sont présents uniquement dans l’ensemble actuel ou dans la collection spécifiée, mais pas dans les deux.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.TryGetValue(`0,`0@)">
      <summary>Détermine si l’ensemble contient une valeur spécifiée.</summary>
      <param name="equalValue">La valeur à rechercher.</param>
      <param name="actualValue">Valeur correspondante provenant de l’ensemble, le cas échéant, ou <c>equalvalue</c> s’il n’existe aucune correspondance.</param>
      <returns>
        <see langword="true" /> si une valeur correspondante a été trouvée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>Crée un nouvel ensemble immuable qui contient tous les éléments qui sont présents dans l’ensemble actuel ou dans la collection spécifiée.</summary>
      <param name="other">Collection à partir de laquelle ajouter des éléments.</param>
      <returns>Nouvel ensemble immuable avec les éléments ajoutés ; ou ensemble d’origine si tous les éléments étaient déjà présents dans le jeu.</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableStack`1">
      <summary>Représente une collection de type dernier entré, premier sorti (LIFO) immuable.
NuGet package: System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="T">Type des éléments dans la pile.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Clear">
      <summary>Supprime tous les objets de la pile immuable.</summary>
      <returns>Pile immuable vide.</returns>
    </member>
    <member name="P:System.Collections.Immutable.IImmutableStack`1.IsEmpty">
      <summary>Obtient une valeur qui indique si cette pile immuable est vide.</summary>
      <returns>
        <see langword="true" /> si cette pile est vide ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Peek">
      <summary>Retourne l’élément en haut de la pile immuable sans le supprimer.</summary>
      <returns>Élément en haut de la pile.</returns>
      <exception cref="T:System.InvalidOperationException">La pile est vide.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Pop">
      <summary>Supprime l’élément en haut de la pile immuable et retourne la nouvelle pile.</summary>
      <returns>Nouvelle pile ; jamais <see langword="null" /></returns>
      <exception cref="T:System.InvalidOperationException">La pile est vide.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Push(`0)">
      <summary>Insère un élément en haut de la pile immuable et retourne la nouvelle pile.</summary>
      <param name="value">Élément à pousser vers la pile.</param>
      <returns>Nouvelle pile.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray">
      <summary>Fournit des méthodes pour la création d’un tableau immuable ; ce qui signifie qu’il ne peut pas être modifié une fois créé.
NuGet package: System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0)">
      <summary>Recherche un élément spécifié dans le tableau immuable trié à l’aide du comparateur par défaut et retourne l’index de base zéro de l’élément, s’il est trouvé.</summary>
      <param name="array">Tableau trié à rechercher.</param>
      <param name="value">Objet à rechercher.</param>
      <typeparam name="T">Type d’élément stocké dans le tableau.</typeparam>
      <returns>Index de base zéro de l’élément dans le tableau, si l’élément est trouvé ; sinon, un nombre négatif qui est le complément de bits de l’index de l’élément suivant est supérieur à <paramref name="value" /> ou, s’il n’existe aucun élément supérieur, le complément de bits de <see cref="P:System.Collections.Generic.ICollection`1.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> n’implémente pas <see cref="T:System.IComparable" /> ou la recherche rencontre un élément qui n’implémente pas <see cref="T:System.IComparable" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0,System.Collections.Generic.IComparer{``0})">
      <summary>Recherche un élément spécifié dans un tableau immuable trié et retourne l’index de base zéro de l’élément, s’il est trouvé.</summary>
      <param name="array">Tableau trié à rechercher.</param>
      <param name="value">Objet à rechercher.</param>
      <param name="comparer">Implémentation du comparateur à utiliser lors de la comparaison d’éléments, ou null pour utiliser le comparateur par défaut.</param>
      <typeparam name="T">Type d’élément stocké dans le tableau.</typeparam>
      <returns>Index de base zéro de l’élément dans le tableau, si l’élément est trouvé ; sinon, un nombre négatif qui est le complément de bits de l’index de l’élément suivant est supérieur à <paramref name="value" /> ou, s’il n’existe aucun élément supérieur, le complément de bits de <see cref="P:System.Collections.Generic.ICollection`1.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> a la valeur null et <paramref name="value" /> n’implémente pas <see cref="T:System.IComparable" /> ou la recherche rencontre un élément qui n’implémente pas <see cref="T:System.IComparable" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0)">
      <summary>Recherche un élément spécifié dans un tableau immuable trié et retourne l’index de base zéro de l’élément, s’il est trouvé.</summary>
      <param name="array">Tableau trié à rechercher.</param>
      <param name="index">Index de départ de la plage dans laquelle effectuer la recherche.</param>
      <param name="length">Longueur de la plage dans laquelle effectuer la recherche.</param>
      <param name="value">Objet à rechercher.</param>
      <typeparam name="T">Type d’élément stocké dans le tableau.</typeparam>
      <returns>Index de base zéro de l’élément dans le tableau, si l’élément est trouvé ; sinon, un nombre négatif qui est le complément de bits de l’index de l’élément suivant est supérieur à <paramref name="value" /> ou, s’il n’existe aucun élément supérieur, le complément de bits de <see cref="P:System.Collections.Generic.ICollection`1.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> n’implémente pas <see cref="T:System.IComparable" /> ou la recherche rencontre un élément qui n’implémente pas <see cref="T:System.IComparable" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> et <paramref name="length" /> ne spécifient pas une plage valide dans <paramref name="array" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> est inférieur à la limite inférieure d’<paramref name="array" />.
-ou-
<paramref name="length" /> est inférieur à zéro.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
      <summary>Recherche dans un tableau immuable trié d’un élément spécifié et retourne l’index de base zéro de l’élément.</summary>
      <param name="array">Tableau trié à rechercher.</param>
      <param name="index">Index de départ de la plage dans laquelle effectuer la recherche.</param>
      <param name="length">Longueur de la plage dans laquelle effectuer la recherche.</param>
      <param name="value">Objet à rechercher.</param>
      <param name="comparer">Comparateur à utiliser lors de la comparaison d’éléments pour l’égalité ou <see langword="null" /> pour utiliser le comparateur par défaut.</param>
      <typeparam name="T">Type d’élément stocké dans le tableau.</typeparam>
      <returns>Index de base zéro de l’élément dans le tableau, si l’élément est trouvé ; sinon, un nombre négatif qui est le complément de bits de l’index de l’élément suivant est supérieur à <paramref name="value" /> ou, s’il n’existe aucun élément supérieur, le complément de bits de <see cref="P:System.Collections.Generic.ICollection`1.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> a la valeur null et <paramref name="value" /> n’implémente pas <see cref="T:System.IComparable" /> ou la recherche rencontre un élément qui n’implémente pas <see cref="T:System.IComparable" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> et <paramref name="length" /> ne spécifient pas une plage valide dans <paramref name="array" />.
-ou-
<paramref name="comparer" /> a la valeur <see langword="null" /> et <paramref name="value" /> est d’un type qui n’est pas compatible avec les éléments de <paramref name="array" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> est inférieur à la limite inférieure d’<paramref name="array" />.
-ou-
<paramref name="length" /> est inférieur à zéro.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1">
      <summary>Crée un tableau immuable vide.</summary>
      <typeparam name="T">Type des éléments stockés dans le tableau.</typeparam>
      <returns>Tableau immuable vide.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0)">
      <summary>Crée un tableau immuable qui contient l’objet spécifié.</summary>
      <param name="item">Objet à stocker dans le tableau.</param>
      <typeparam name="T">Type des éléments stockés dans le tableau.</typeparam>
      <returns>Tableau immuable qui contient l’objet spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0)">
      <summary>Crée un tableau immuable qui contient les objets spécifiés.</summary>
      <param name="item1">Premier objet à stocker dans le tableau.</param>
      <param name="item2">Deuxième objet à stocker dans le tableau.</param>
      <typeparam name="T">Type des éléments stockés dans le tableau.</typeparam>
      <returns>Tableau immuable qui contient les objets spécifiés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0)">
      <summary>Crée un tableau immuable qui contient les objets spécifiés.</summary>
      <param name="item1">Premier objet à stocker dans le tableau.</param>
      <param name="item2">Deuxième objet à stocker dans le tableau.</param>
      <param name="item3">Troisième objet à stocker dans le tableau.</param>
      <typeparam name="T">Type des éléments stockés dans le tableau.</typeparam>
      <returns>Tableau immuable qui contient les objets spécifiés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0,``0)">
      <summary>Crée un tableau immuable qui contient les objets spécifiés.</summary>
      <param name="item1">Premier objet à stocker dans le tableau.</param>
      <param name="item2">Deuxième objet à stocker dans le tableau.</param>
      <param name="item3">Troisième objet à stocker dans le tableau.</param>
      <param name="item4">Quatrième objet à stocker dans le tableau.</param>
      <typeparam name="T">Type des éléments stockés dans le tableau.</typeparam>
      <returns>Tableau immuable qui contient les objets spécifiés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0[])">
      <summary>Crée un tableau immuable à partir du tableau spécifié d’objets.</summary>
      <param name="items">Tableau d’objets à utiliser pour remplir le tableau.</param>
      <typeparam name="T">Type des éléments stockés dans le tableau.</typeparam>
      <returns>Tableau immuable qui contient le tableau d’éléments.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0[],System.Int32,System.Int32)">
      <summary>Crée un tableau immuable avec les objets spécifiés à partir d’un autre tableau.</summary>
      <param name="items">Tableau d’objets source.</param>
      <param name="start">Index du premier élément à copier à partir de <paramref name="items" />.</param>
      <param name="length">Nombre d’éléments à partir de <paramref name="items" /> à inclure dans ce tableau immuable.</param>
      <typeparam name="T">Type des éléments stockés dans le tableau.</typeparam>
      <returns>Tableau immuable qui contient les objets spécifiés à partir du tableau source.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32)">
      <summary>Crée un tableau immuable avec les objets spécifiés à partir d’un autre tableau immuable.</summary>
      <param name="items">Tableau d’objets source.</param>
      <param name="start">Index du premier élément à copier à partir de <paramref name="items" />.</param>
      <param name="length">Nombre d’éléments à partir de <paramref name="items" /> à inclure dans ce tableau immuable.</param>
      <typeparam name="T">Type des éléments stockés dans le tableau.</typeparam>
      <returns>Tableau immuable qui contient les objets spécifiés à partir du tableau source.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateBuilder``1">
      <summary>Crée un tableau mutable qui peut être converti en un <see cref="T:System.Collections.Immutable.ImmutableArray" /> sans allouer de nouveaux modules de mémoire.</summary>
      <typeparam name="T">Type des éléments stockés dans le générateur.</typeparam>
      <returns>Tableau mutable du type spécifié qui peut être efficacement converti en un tableau immuable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateBuilder``1(System.Int32)">
      <summary>Crée un tableau mutable qui peut être converti en un <see cref="T:System.Collections.Immutable.ImmutableArray" /> sans allouer de nouveaux modules de mémoire.</summary>
      <param name="initialCapacity">Capacité initiale du générateur.</param>
      <typeparam name="T">Type des éléments stockés dans le générateur.</typeparam>
      <returns>Tableau mutable du type spécifié qui peut être efficacement converti en un tableau immuable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Crée un nouveau <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> rempli avec les éléments spécifiés.</summary>
      <param name="items">Éléments à ajouter au tableau.</param>
      <typeparam name="T">Type d’élément stocké dans le tableau.</typeparam>
      <returns>Tableau immuable qui contient les éléments spécifiés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})">
      <summary>Initialise une nouvelle instance du struct <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</summary>
      <param name="items">Tableau source avec lequel initialiser le tableau obtenant.</param>
      <param name="selector">Fonction à appliquer à chaque élément du tableau source.</param>
      <typeparam name="TSource" />
      <typeparam name="TResult" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1})">
      <summary>Initialise une nouvelle instance du struct <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</summary>
      <param name="items">Tableau source avec lequel initialiser le tableau obtenant.</param>
      <param name="start">Index du premier élément du tableau source à inclure dans le tableau obtenu.</param>
      <param name="length">Nombre d’éléments provenant du tableau source à inclure dans le tableau obtenu.</param>
      <param name="selector">Fonction à appliquer à chaque élément du tableau source inclus dans le tableau obtenu.</param>
      <typeparam name="TSource" />
      <typeparam name="TResult" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1,``2},``1)">
      <summary>Initialise une nouvelle instance du struct <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</summary>
      <param name="items">Tableau source avec lequel initialiser le tableau obtenant.</param>
      <param name="selector">Fonction à appliquer à chaque élément du tableau source.</param>
      <param name="arg">Argument à passer à la fonction de mappage de sélecteur.</param>
      <typeparam name="TSource" />
      <typeparam name="TArg" />
      <typeparam name="TResult" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1,``2},``1)">
      <summary>Initialise une nouvelle instance du struct <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</summary>
      <param name="items">Tableau source avec lequel initialiser le tableau obtenant.</param>
      <param name="start">Index du premier élément du tableau source à inclure dans le tableau obtenu.</param>
      <param name="length">Nombre d’éléments provenant du tableau source à inclure dans le tableau obtenu.</param>
      <param name="selector">Fonction à appliquer à chaque élément du tableau source inclus dans le tableau obtenu.</param>
      <param name="arg">Argument à passer à la fonction de mappage de sélecteur.</param>
      <typeparam name="TSource" />
      <typeparam name="TArg" />
      <typeparam name="TResult" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Crée un tableau immuable à partir de la collection spécifiée.</summary>
      <param name="items">Collection d’objets à copier dans le tableau immuable.</param>
      <typeparam name="TSource">Type d’éléments contenus dans <paramref name="items" />.</typeparam>
      <returns>Tableau immuable qui contient la collection d’objets spécifiée.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Crée un tableau immuable à partir du contenu actuel du tableau du générateur.</summary>
      <param name="builder">Générateur à partir duquel créer le tableau immuable.</param>
      <typeparam name="TSource">Type des éléments contenus dans le tableau immuable.</typeparam>
      <returns>Tableau immuable qui contient le contenu actuel du tableau du générateur.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1">
      <summary>Représente un tableau qui est immuable ; ce qui signifie qu’il ne peut pas être modifié une fois créé.
Package NuGet : System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="T">Type d’élément stocké par le tableau.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Add(`0)">
      <summary>Retourne une copie du tableau d’origine avec l’élément spécifié ajouté à la fin.</summary>
      <param name="item">Élément à ajouter à la fin du tableau.</param>
      <returns>Nouveau tableau avec l’élément spécifié ajouté à la fin.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Retourne une copie du tableau d’origine avec les éléments spécifiés ajoutés à la fin du tableau.</summary>
      <param name="items">Éléments à ajouter au tableau.</param>
      <returns>Nouveau tableau avec les éléments ajoutés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary>Retourne une copie du tableau d’origine avec les éléments spécifiés ajoutés à la fin du tableau.</summary>
      <param name="items">Éléments à ajouter au tableau.</param>
      <returns>Nouveau tableau avec les éléments ajoutés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.As``1">
      <summary>Retourne un nouveau tableau immuable qui contient les éléments de ce cast de tableau d’un type différent.</summary>
      <typeparam name="TOther">Type d’élément de tableau à retourner.</typeparam>
      <returns>Tableau immuable qui contient les éléments de ce cast de tableau d’un type différent. Si le cast échoue, retourne un tableau dont la propriété <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> renvoie <see langword="true" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AsMemory">
      <summary>Crée une région de mémoire en lecture seule sur ce tableau immuable.</summary>
      <returns>Représentation sous forme de mémoire en lecture seule de ce tableau immuable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AsSpan">
      <summary>Crée une étendue en lecture seule sur ce tableau immuable.</summary>
      <returns>Représentation sous forme d’étendue en lecture seule de ce tableau immuable.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1.Builder">
      <summary>Accesseur de tableau accessible en écriture qui peut être converti en une instance <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> sans allouer de mémoire supplémentaire.
Package NuGet : System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Add(`0)">
      <summary>Ajoute l’élément spécifié au tableau.</summary>
      <param name="item">Objet à ajouter au tableau.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(`0[])">
      <summary>Ajoute les éléments spécifiés à la fin du tableau.</summary>
      <param name="items">Éléments à ajouter au tableau.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(`0[],System.Int32)">
      <summary>Ajoute les éléments spécifiés à la fin du tableau.</summary>
      <param name="items">Éléments à ajouter au tableau.</param>
      <param name="length">Nombre d’éléments du tableau source à ajouter.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Ajoute les éléments spécifiés à la fin du tableau.</summary>
      <param name="items">Éléments à ajouter au tableau.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary>Ajoute les éléments spécifiés à la fin du tableau.</summary>
      <param name="items">Éléments à ajouter au tableau.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0},System.Int32)">
      <summary>Ajoute les éléments spécifiés à la fin du tableau.</summary>
      <param name="items">Éléments à ajouter au tableau.</param>
      <param name="length">Nombre d’éléments du tableau source à ajouter.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0}.Builder)">
      <summary>Ajoute les éléments spécifiés à la fin du tableau.</summary>
      <param name="items">Éléments à ajouter au tableau.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(``0[])">
      <summary>Ajoute les éléments spécifiés qui dérivent du type actuellement dans le tableau, à la fin du tableau.</summary>
      <param name="items">Éléments à ajouter à la fin du tableau.</param>
      <typeparam name="TDerived">Type qui dérive du type d’élément déjà dans le tableau.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Ajoute les éléments spécifiés qui dérivent du type actuellement dans le tableau, à la fin du tableau.</summary>
      <param name="items">Éléments à ajouter à la fin du tableau.</param>
      <typeparam name="TDerived">Type qui dérive du type d’élément déjà dans le tableau.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Ajoute les éléments spécifiés qui dérivent du type actuellement dans le tableau, à la fin du tableau.</summary>
      <param name="items">Éléments à ajouter à la fin du tableau.</param>
      <typeparam name="TDerived">Type qui dérive du type d’élément déjà dans le tableau.</typeparam>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity">
      <summary>Obtient ou définit la longueur du tableau interne. Quand cette propriété est définie, le tableau interne est réalloué à la capacité donnée s’il n’a pas déjà la longueur spécifiée.</summary>
      <returns>Longueur du tableau interne.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Clear">
      <summary>Supprime tous les éléments du tableau.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Contains(`0)">
      <summary>Détermine si le tableau contient une valeur spécifique.</summary>
      <param name="item">Objet à localiser dans le tableau.</param>
      <returns>
        <see langword="true" /> si l’objet est trouvé ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.CopyTo(`0[],System.Int32)">
      <summary>Copie le contenu actuel dans le tableau spécifié.</summary>
      <param name="array">Tableau dans lequel effectuer la copie.</param>
      <param name="index">Index pour démarrer l’opération de copie.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count">
      <summary>Obtient ou définit le nombre d’éléments du tableau.</summary>
      <returns>Nombre d’éléments dans le tableau.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.GetEnumerator">
      <summary>Obtient un objet pouvant être utilisé pour itérer au sein de la collection.</summary>
      <returns>Objet pouvant être utilisé pour itérer au sein de la collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0)">
      <summary>Détermine l’index d’un élément spécifique du tableau.</summary>
      <param name="item">Élément à rechercher dans le tableau.</param>
      <returns>Index de <paramref name="item" /> s’il est trouvé dans la liste ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32)">
      <summary>Détermine l’index de l’élément spécifié.</summary>
      <param name="item">Élément à rechercher dans le tableau.</param>
      <param name="startIndex">Position de départ de la recherche.</param>
      <returns>Index de <paramref name="item" /> s’il est trouvé dans la liste ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32)">
      <summary>Détermine l’index de l’élément spécifié.</summary>
      <param name="item">Élément à rechercher dans le tableau.</param>
      <param name="startIndex">Position de départ de la recherche.</param>
      <param name="count">Nombre d'éléments à explorer.</param>
      <returns>Index de <paramref name="item" /> s’il est trouvé dans la liste ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Détermine l’index de l’élément spécifié.</summary>
      <param name="item">Élément à rechercher dans le tableau.</param>
      <param name="startIndex">Index à partir duquel commence la recherche.</param>
      <param name="count">Position de départ de la recherche.</param>
      <param name="equalityComparer">Comparateur d’égalité à utiliser dans la recherche</param>
      <returns>Index de <paramref name="item" /> s’il est trouvé dans la liste ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Insert(System.Int32,`0)">
      <summary>Insère un élément dans le tableau à l’index spécifié.</summary>
      <param name="index">Index de base zéro au niveau duquel insérer l’élément.</param>
      <param name="item">Objet à insérer dans le tableau.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Item(System.Int32)">
      <summary>Obtient ou définit l’élément à l’index spécifié.</summary>
      <param name="index">Index de l’élément à obtenir ou à définir.</param>
      <returns>Élément situé à l'index spécifié.</returns>
      <exception cref="T:System.IndexOutOfRangeException">L’index spécifié ne se trouve pas dans le tableau.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ItemRef(System.Int32)">
      <summary>Obtient une référence en lecture seule à l’élément qui se trouve à l’index spécifié.</summary>
      <param name="index">Index d'élément.</param>
      <returns>Référence en lecture seule à l’élément qui se trouve à l’index spécifié.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> est supérieur ou égal au nombre d’éléments du tableau.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0)">
      <summary>Détermine l’index de base 0 de la dernière occurrence de l’élément spécifié dans ce tableau.</summary>
      <param name="item">Élément à rechercher.</param>
      <returns>Index de base 0 où l’élément a été trouvé ; ou -1 s’il est introuvable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32)">
      <summary>Détermine l’index de base 0 de la dernière occurrence de l’élément spécifié dans ce tableau.</summary>
      <param name="item">Élément à rechercher.</param>
      <param name="startIndex">Position de départ de la recherche.</param>
      <returns>Index de base 0 dans le tableau dans lequel l’élément a été trouvé ; ou -1 s’il est introuvable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary>Détermine l’index de base 0 de la dernière occurrence de l’élément spécifié dans ce tableau.</summary>
      <param name="item">Élément à rechercher.</param>
      <param name="startIndex">Position de départ de la recherche.</param>
      <param name="count">Nombre d'éléments à explorer.</param>
      <returns>Index de base 0 dans le tableau dans lequel l’élément a été trouvé ; ou -1 s’il est introuvable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Détermine l’index de base 0 de la dernière occurrence de l’élément spécifié dans ce tableau.</summary>
      <param name="item">Élément à rechercher.</param>
      <param name="startIndex">Position de départ de la recherche.</param>
      <param name="count">Nombre d'éléments à explorer.</param>
      <param name="equalityComparer">Comparateur d’égalité à utiliser dans la recherche.</param>
      <returns>Index de base 0 dans le tableau dans lequel l’élément a été trouvé ; ou -1 s’il est introuvable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.MoveToImmutable">
      <summary>Extrait le tableau interne sous la forme d’un <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> et le remplace par un tableau de longueur nulle.</summary>
      <exception cref="T:System.InvalidOperationException">Quand <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count" /> n’est pas égal <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Remove(`0)">
      <summary>Supprime l’élément spécifié.</summary>
      <param name="element">Élément à supprimer.</param>
      <returns>
        <see langword="true" /> si <paramref name="element" /> a été trouvé et supprimé ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.RemoveAt(System.Int32)">
      <summary>Supprime l’élément à l’index spécifié du tableau.</summary>
      <param name="index">Index de base zéro de l'élément à supprimer.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Reverse">
      <summary>Inverse l’ordre des éléments dans la collection.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort">
      <summary>Trie le contenu du tableau.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>Trie le contenu du tableau.</summary>
      <param name="comparer">Comparateur à utiliser pour le tri. Si le comparateur est <see langword="null" />, le comparateur par défaut pour le type d’éléments du tableau est utilisé.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Comparison{`0})">
      <summary>Trie les éléments dans l’ensemble du tableau à l’aide du <see cref="T:System.Comparison`1" /> spécifié.</summary>
      <param name="comparison">
        <see cref="T:System.Comparison`1" /> à utiliser pendant la comparaison d'éléments.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparison" /> a la valeur null.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>Trie le contenu du tableau.</summary>
      <param name="index">Index de départ pour le tri.</param>
      <param name="count">Nombre d’éléments à inclure dans l’ordre de tri.</param>
      <param name="comparer">Comparateur à utiliser pour le tri. Si le comparateur est <see langword="null" />, le comparateur par défaut pour le type d’éléments du tableau est utilisé.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Obtient une valeur qui indique si l'objet <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule.</summary>
      <returns>
        <see langword="true" /> si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein du tableau.</summary>
      <returns>Énumérateur qui itère au sein du tableau.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein du tableau.</summary>
      <returns>Énumérateur qui itère au sein du tableau.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ToArray">
      <summary>Crée un nouveau tableau avec le contenu actuel de ce <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />.</summary>
      <returns>Nouveau tableau avec le contenu de ce <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ToImmutable">
      <summary>Retourne un tableau immuable qui contient le contenu actuel de ce <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />.</summary>
      <returns>Tableau immuable qui contient le contenu actuel de ce <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CastArray``1">
      <summary>Initialise une nouvelle instance du struct <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> en effectuant un cast du tableau sous-jacent vers un tableau de type <typeparamref name="TOther" />.</summary>
      <typeparam name="TOther" />
      <exception cref="T:System.InvalidCastException">Levé si le cast est non conforme.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CastUp``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Initialise une nouvelle instance du struct <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> en fonction du contenu d’une instance existante, ce qui permet à un cast statique covariant de réutiliser efficacement le tableau existant.</summary>
      <param name="items">Tableau avec lequel initialiser le tableau. Aucune copie n'est effectuée.</param>
      <typeparam name="TDerived" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Clear">
      <summary>Retourne un tableau avec tous les éléments supprimés.</summary>
      <returns>Tableau avec tous les éléments supprimés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Contains(`0)">
      <summary>Détermine si l’élément spécifié existe dans le tableau.</summary>
      <param name="item">Élément à rechercher.</param>
      <returns>
        <see langword="true" /> si l’élément spécifié a été trouvé dans le tableau ; dans le cas contraire <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[])">
      <summary>Copie le contenu de ce tableau dans le tableau spécifié.</summary>
      <param name="destination">Tableau dans lequel effectuer la copie.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[],System.Int32)">
      <summary>Copie le contenu de ce tableau dans le tableau spécifié en commençant à l’index de destination spécifié.</summary>
      <param name="destination">Tableau dans lequel effectuer la copie.</param>
      <param name="destinationIndex">L'index dans <paramref name="array" /> où commence la copie.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary>Copie les éléments spécifiés de ce tableau dans le tableau spécifié à l’index de début.</summary>
      <param name="sourceIndex">Index de ce tableau où la copie commence.</param>
      <param name="destination">Tableau dans lequel effectuer la copie.</param>
      <param name="destinationIndex">L'index dans <paramref name="array" /> où commence la copie.</param>
      <param name="length">Nombre d’éléments à copier à partir de ce tableau.</param>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableArray`1.Empty">
      <summary>Obtient un tableau immuable vide.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1.Enumerator">
      <summary>Énumérateur sous forme de tableau.
Package NuGet : System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Enumerator.Current">
      <summary>Obtient l’élément actuel.</summary>
      <returns>Élément actuel.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Enumerator.MoveNext">
      <summary>Avance à la valeur suivante dans le tableau.</summary>
      <returns>
        <see langword="true" /> si un autre élément existe dans le tableau ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Equals(System.Collections.Immutable.ImmutableArray{`0})">
      <summary>Indique si le tableau spécifié est égal à ce tableau.</summary>
      <param name="other">Objet à comparer à cet objet.</param>
      <returns>
        <see langword="true" /> si <paramref name="other" /> est égal à ce tableau ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Equals(System.Object)">
      <summary>Détermine si ce tableau est égal à l’objet spécifié.</summary>
      <param name="obj">Le <see cref="T:System.Object" /> à comparer à ce tableau.</param>
      <returns>
        <see langword="true" /> si ce tableau est égal à <paramref name="obj" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein du contenu du tableau.</summary>
      <returns>Énumérateur.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.GetHashCode">
      <summary>Retourne un code de hachage pour cette instance.</summary>
      <returns>Code de hachage pour cette instance, convient à une utilisation dans des algorithmes de hachage et des structures de données telles qu'une table de hachage.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0)">
      <summary>Recherche l’élément spécifié dans le tableau.</summary>
      <param name="item">Élément à rechercher.</param>
      <returns>Position d’index de base zéro de l’élément s’il est trouvé, ou -1 s’il est introuvable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32)">
      <summary>Recherche l’élément spécifié dans le tableau.</summary>
      <param name="item">Élément à rechercher.</param>
      <param name="startIndex">Index à partir duquel commence la recherche.</param>
      <returns>Position d’index de base zéro de l’élément s’il est trouvé, ou -1 s’il est introuvable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Recherche l’élément spécifié dans le tableau.</summary>
      <param name="item">Élément à rechercher.</param>
      <param name="startIndex">Index à partir duquel commence la recherche.</param>
      <param name="equalityComparer">Comparateur d’égalité à utiliser dans la recherche.</param>
      <returns>Position d’index de base zéro de l’élément s’il est trouvé, ou -1 s’il est introuvable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32)">
      <summary>Recherche l’élément spécifié dans le tableau.</summary>
      <param name="item">Élément à rechercher.</param>
      <param name="startIndex">Index à partir duquel commence la recherche.</param>
      <param name="count">Nombre d'éléments à explorer.</param>
      <returns>Position d’index de base zéro de l’élément s’il est trouvé, ou -1 s’il est introuvable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Recherche l’élément spécifié dans le tableau.</summary>
      <param name="item">Élément à rechercher.</param>
      <param name="startIndex">Index à partir duquel commence la recherche.</param>
      <param name="count">Nombre d'éléments à explorer.</param>
      <param name="equalityComparer">Comparateur d’égalité à utiliser dans la recherche.</param>
      <returns>Position d’index de base zéro de l’élément s’il est trouvé, ou -1 s’il est introuvable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Insert(System.Int32,`0)">
      <summary>Retourne un nouveau tableau avec la valeur spécifiée à la position spécifiée.</summary>
      <param name="index">Index 0 dans le tableau auquel le nouvel élément doit être ajouté.</param>
      <param name="item">Élément à insérer au début du tableau.</param>
      <returns>Nouveau tableau avec l’élément inséré à l’index spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>Insère les valeurs spécifiées à l’index spécifié.</summary>
      <param name="index">Index auquel insérer la valeur.</param>
      <param name="items">Éléments à insérer.</param>
      <returns>Nouveau tableau immuable avec les éléments insérés à l’index spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Immutable.ImmutableArray{`0})">
      <summary>Insère les valeurs spécifiées à l’index spécifié.</summary>
      <param name="index">Index auquel insérer la valeur.</param>
      <param name="items">Éléments à insérer.</param>
      <returns>Nouveau tableau immuable avec les éléments insérés à l’index spécifié.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsDefault">
      <summary>Obtient une valeur qui indique si ce tableau a été déclaré mais non initialisé.</summary>
      <returns>
        <see langword="true" /> si <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> a la valeur <see langword="null" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsDefaultOrEmpty">
      <summary>Obtient une valeur indiquant si ce <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> est vide ou n’est pas initialisé.</summary>
      <returns>
        <see langword="true" /> si la <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> est <see langword="null" /> ou <see cref="F:System.Collections.Immutable.ImmutableArray`1.Empty" /> ; dans le cas contraire, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsEmpty">
      <summary>Obtient une valeur indiquant si ce <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> est vide.</summary>
      <returns>
        <see langword="true" /> si le <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> est vide ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Item(System.Int32)">
      <summary>Obtient l’élément à l’index spécifié dans le tableau immuable.</summary>
      <param name="index">Index de base zéro de l'élément à obtenir.</param>
      <returns>Élément à l’index spécifié dans le tableau immuable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.ItemRef(System.Int32)">
      <summary>Obtient une référence en lecture seule pour l’élément dans le <paramref name="index" /> spécifié dans la liste de lecture seule.</summary>
      <param name="index">Index de base zéro de l'élément auquel donner une référence.</param>
      <returns>Une référence en lecture seule pour l’élément dans le <paramref name="index" /> spécifié dans la liste de lecture seule.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0)">
      <summary>Recherche l’élément spécifié dans le tableau ; en commençant à la fin du tableau.</summary>
      <param name="item">Élément à rechercher.</param>
      <returns>Index de base 0 dans le tableau dans lequel l’élément a été trouvé ; ou -1 s’il est introuvable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32)">
      <summary>Recherche l’élément spécifié dans le tableau ; en commençant à la fin du tableau.</summary>
      <param name="item">Élément à rechercher.</param>
      <param name="startIndex">Index à partir duquel commence la recherche.</param>
      <returns>Index de base 0 dans le tableau dans lequel l’élément a été trouvé ; ou -1 s’il est introuvable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary>Recherche l’élément spécifié dans le tableau ; en commençant à la fin du tableau.</summary>
      <param name="item">Élément à rechercher.</param>
      <param name="startIndex">Index à partir duquel commence la recherche.</param>
      <param name="count">Nombre d'éléments à explorer.</param>
      <returns>Index de base 0 dans le tableau dans lequel l’élément a été trouvé ; ou -1 s’il est introuvable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Recherche l’élément spécifié dans le tableau ; en commençant à la fin du tableau.</summary>
      <param name="item">Élément à rechercher.</param>
      <param name="startIndex">Index à partir duquel commence la recherche.</param>
      <param name="count">Nombre d'éléments à explorer.</param>
      <param name="equalityComparer">Comparateur d’égalité à utiliser dans la recherche.</param>
      <returns>Index de base 0 dans le tableau dans lequel l’élément a été trouvé ; ou -1 s’il est introuvable.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Length">
      <summary>Obtient le nombre d’éléments contenus dans le tableau.</summary>
      <returns>Nombre d’éléments dans le tableau.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.OfType``1">
      <summary>Filtre les éléments de ce tableau pour les éléments qui sont attribuables au type spécifié.</summary>
      <typeparam name="TResult">Type en fonction duquel filtrer les éléments de la séquence.</typeparam>
      <returns>Un <see cref="T:System.Collections.IEnumerable" /> qui contient des éléments de la séquence d’entrée de type <paramref name="TResult" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})">
      <summary>Retourne une valeur qui indique si les deux tableaux sont égaux.</summary>
      <param name="left">Tableau à gauche de l’opérateur.</param>
      <param name="right">Tableau à droite de l’opérateur.</param>
      <returns>
        <see langword="true" /> si les tableaux sont égaux ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})">
      <summary>Retourne une valeur qui indique si les deux tableaux sont égaux.</summary>
      <param name="left">Tableau à gauche de l’opérateur.</param>
      <param name="right">Tableau à droite de l’opérateur.</param>
      <returns>
        <see langword="true" /> si les tableaux sont égaux ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})">
      <summary>Retourne une valeur qui indique si les deux tableaux ne sont pas égaux.</summary>
      <param name="left">Tableau à gauche de l’opérateur.</param>
      <param name="right">Tableau à droite de l’opérateur.</param>
      <returns>
        <see langword="true" /> si ces tableaux ne sont pas égaux ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})">
      <summary>Vérifie l’inégalité entre deux tableaux.</summary>
      <param name="left">Objet à gauche de l’opérateur.</param>
      <param name="right">Objet à droite de l’opérateur.</param>
      <returns>
        <see langword="true" /> si les deux tableaux ne sont pas égaux ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Remove(`0)">
      <summary>Retourne un tableau avec la première occurrence de l’élément spécifié supprimée du tableau. Si aucune correspondance n’est trouvée, le tableau actuel est retourné.</summary>
      <param name="item">Élément à supprimer.</param>
      <returns>Nouveau tableau avec l’élément supprimé.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Retourne un tableau avec la première occurrence de l’élément spécifié supprimée du tableau.
Si aucune correspondance n’est trouvée, le tableau actuel est retourné.</summary>
      <param name="item">Élément à supprimer.</param>
      <param name="equalityComparer">Comparateur d’égalité à utiliser dans la recherche.</param>
      <returns>Nouveau tableau avec l’élément spécifié supprimé.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveAll(System.Predicate{`0})">
      <summary>Supprime tous les éléments du tableau qui remplissent les conditions spécifiées.</summary>
      <param name="match">Délégué qui définit les conditions des éléments à supprimer.</param>
      <returns>Nouveau tableau avec des éléments qui répondent au critère spécifié supprimé.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveAt(System.Int32)">
      <summary>Retourne un tableau avec l’élément à la position spécifiée supprimée.</summary>
      <param name="index">Index de base 0 de l’élément à supprimer du tableau retourné.</param>
      <returns>Nouveau tableau avec l’élément à l’index spécifié supprimé.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Supprime les éléments spécifiés du tableau.</summary>
      <param name="items">Éléments à supprimer si des correspondances sont trouvées dans cette liste.</param>
      <returns>Nouveau tableau avec les éléments supprimés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Supprime les éléments spécifiés du tableau.</summary>
      <param name="items">Éléments à supprimer si des correspondances sont trouvées dans cette liste.</param>
      <param name="equalityComparer">Comparateur d’égalité à utiliser dans la recherche.</param>
      <returns>Nouveau tableau avec les éléments supprimés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary>Supprime les valeurs spécifiées de cette liste.</summary>
      <param name="items">Éléments à supprimer si des correspondances sont trouvées dans cette liste.</param>
      <returns>Nouvelle liste avec les éléments supprimés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Supprime les éléments spécifiés de cette liste.</summary>
      <param name="items">Éléments à supprimer si des correspondances sont trouvées dans cette liste.</param>
      <param name="equalityComparer">Comparateur d’égalité à utiliser dans la recherche.</param>
      <returns>Nouveau tableau avec les éléments supprimés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Int32,System.Int32)">
      <summary>Retourne un tableau avec les éléments à la position spécifiée supprimée.</summary>
      <param name="index">Index de base 0 de l’élément de départ à supprimer du tableau.</param>
      <param name="length">Nombre d’éléments à supprimer du tableau.</param>
      <returns>Nouveau tableau avec les éléments spécifiés supprimés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0)">
      <summary>Recherche le premier élément dans le tableau égal à la valeur spécifiée et remplace la valeur par la nouvelle valeur spécifiée.</summary>
      <param name="oldValue">Valeur à rechercher et remplacer dans le tableau.</param>
      <param name="newValue">Valeur par laquelle remplacer <c>oldvalue</c>.</param>
      <returns>Tableau qui contient <paramref name="newValue" /> même si les valeurs nouvelles et anciennes sont identiques.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> est introuvable dans le tableau.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Recherche le premier élément dans le tableau égal à la valeur spécifiée et remplace la valeur par la nouvelle valeur spécifiée.</summary>
      <param name="oldValue">Valeur à rechercher et remplacer dans le tableau.</param>
      <param name="newValue">Valeur par laquelle remplacer <c>oldvalue</c>.</param>
      <param name="equalityComparer">Comparateur d’égalité à utiliser pour comparer des valeurs.</param>
      <returns>Tableau qui contient <paramref name="newValue" /> même si les valeurs nouvelles et anciennes sont identiques.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> est introuvable dans le tableau.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.SetItem(System.Int32,`0)">
      <summary>Remplace l'élément à l'index spécifié par l'élément spécifié.</summary>
      <param name="index">Index de l’élément à remplacer.</param>
      <param name="item">Élément à ajouter à la liste.</param>
      <returns>Tableau qui contient <paramref name="item" /> à l’index spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort">
      <summary>Trie les éléments dans le tableau immuable à l’aide du comparateur par défaut.</summary>
      <returns>Nouveau tableau immuable qui contient les éléments de ce tableau, dans l’ordre de tri.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>Trie les éléments dans le tableau immuable à l’aide du comparateur spécifié.</summary>
      <param name="comparer">Implémentation à utiliser pendant la comparaison d’éléments, ou <see langword="null" /> pour utiliser le comparateur par défaut.</param>
      <returns>Nouveau tableau immuable qui contient les éléments de ce tableau, dans l’ordre de tri.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Comparison{`0})">
      <summary>Trie les éléments dans l’ensemble de <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> à l’aide du <see cref="T:System.Comparison`1" /> spécifié.</summary>
      <param name="comparison">
        <see cref="T:System.Comparison`1" /> à utiliser pendant la comparaison d'éléments.</param>
      <returns>Liste triée.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparison" /> a la valeur null.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>Trie les éléments spécifiés dans le tableau immuable à l’aide du comparateur spécifié.</summary>
      <param name="index">Index du premier élément à trier.</param>
      <param name="count">Nombre d’éléments à inclure dans l’ordre de tri.</param>
      <param name="comparer">Implémentation à utiliser pendant la comparaison d’éléments, ou <see langword="null" /> pour utiliser le comparateur par défaut.</param>
      <returns>Nouveau tableau immuable qui contient les éléments de ce tableau, dans l’ordre de tri.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</summary>
      <param name="item">Élément à ajouter à la fin du tableau.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Count">
      <summary>Obtient le nombre de tableaux dans la collection.</summary>
      <exception cref="T:System.InvalidOperationException">Levé si la propriété <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> retourne la valeur true.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Obtient une valeur indiquant si cette instance est en lecture seule.</summary>
      <returns>
        <see langword="true" /> si cette instance est en lecture seule ; dans le cas contraire, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</summary>
      <param name="item">Objet à supprimer du tableau.</param>
      <returns>Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein du tableau.</summary>
      <returns>Énumérateur permettant d’effectuer une itération au sein du tableau.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</summary>
      <param name="index">Index de l’emplacement où insérer l’élément.</param>
      <param name="item">Élément à insérer.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>Obtient ou définit l’élément à l’index spécifié dans la liste en lecture seule.</summary>
      <param name="index">Index de base zéro de l'élément à obtenir.</param>
      <returns>Élément à l'index spécifié dans la liste en lecture seule.</returns>
      <exception cref="T:System.NotSupportedException">Toujours levé à partir du setter.</exception>
      <exception cref="T:System.InvalidOperationException">Levé si la propriété <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> retourne la valeur true.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</summary>
      <param name="index">Index.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyCollection{T}#Count">
      <summary>Obtient le nombre de tableaux dans la collection.</summary>
      <exception cref="T:System.InvalidOperationException">Levé si la propriété <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> retourne la valeur true.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)">
      <summary>Obtient l'élément au niveau de l'index spécifié.</summary>
      <param name="index">Index.</param>
      <returns>Élément.</returns>
      <exception cref="T:System.InvalidOperationException">Levé si la propriété <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> retourne la valeur true.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copie ce tableau dans un autre tableau en commençant à l’index spécifié.</summary>
      <param name="array">Tableau dans lequel copier ce tableau.</param>
      <param name="index">Index dans le tableau de destination auquel commencer l’opération de copie.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#Count">
      <summary>Obtient la taille du tableau.</summary>
      <exception cref="T:System.InvalidOperationException">Levé si la propriété <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> retourne la valeur true.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#IsSynchronized">
      <summary>Consultez l’interface <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#SyncRoot">
      <summary>Obtient la racine de synchronisation.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retourne un énumérateur qui effectue une itération au sein du tableau immuable.</summary>
      <returns>Énumérateur qui itère au sein du tableau immuable.</returns>
      <exception cref="T:System.InvalidOperationException">La propriété <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> retourne la valeur <see langword="true" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Add(System.Object)">
      <summary>Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</summary>
      <param name="value">Valeur à ajouter au tableau.</param>
      <returns>Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</returns>
      <exception cref="T:System.NotSupportedException">Levé dans tous les cas.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Clear">
      <summary>Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</summary>
      <exception cref="T:System.NotSupportedException">Levé dans tous les cas.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Contains(System.Object)">
      <summary>Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</summary>
      <param name="value">Valeur à vérifier.</param>
      <returns>Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>Obtient la valeur de l'index spécifié.</summary>
      <param name="value">Valeur à laquelle l’index doit être retourné.</param>
      <returns>Valeur de l’élément à l’index spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</summary>
      <param name="index">Index qui indique où insérer l’élément.</param>
      <param name="value">Valeur à insérer.</param>
      <exception cref="T:System.NotSupportedException">Levé dans tous les cas.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsFixedSize">
      <summary>Obtient une valeur qui indique si cette instance est de taille fixe.</summary>
      <returns>
        <see langword="true" /> si cette instance est de taille fixe ; dans le cas contraire, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsReadOnly">
      <summary>Obtient une valeur indiquant si cette instance est en lecture seule.</summary>
      <returns>
        <see langword="true" /> si cette instance est en lecture seule ; dans le cas contraire, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Item(System.Int32)">
      <summary>Obtient ou définit le <see cref="T:System.Object" /> à l'index spécifié.</summary>
      <param name="index">Index.</param>
      <returns>Objet au niveau de l’index spécifié.</returns>
      <exception cref="T:System.NotSupportedException">Toujours levé à partir du setter.</exception>
      <exception cref="T:System.InvalidOperationException">Levé si la propriété <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> retourne la valeur true.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Remove(System.Object)">
      <summary>Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</summary>
      <param name="value">Valeur à supprimer du tableau.</param>
      <exception cref="T:System.NotSupportedException">Levé dans tous les cas.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</summary>
      <param name="index">Index de l'élément à supprimer.</param>
      <exception cref="T:System.NotSupportedException">Levé dans tous les cas.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)">
      <summary>Retourne une copie du tableau d’origine avec l’élément spécifié ajouté à la fin.</summary>
      <param name="value">Valeur à ajouter à la fin du tableau.</param>
      <returns>Nouveau tableau avec l’élément spécifié ajouté à la fin.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Retourne une copie du tableau d’origine avec les éléments spécifiés ajoutés à la fin du tableau.</summary>
      <param name="items">Éléments à ajouter à la fin du tableau.</param>
      <returns>Nouveau tableau avec les éléments ajoutés à la fin.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Clear">
      <summary>Retourne un tableau avec tous les éléments supprimés.</summary>
      <returns>Tableau avec tous les éléments supprimés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)">
      <summary>Retourne un nouveau tableau avec la valeur spécifiée à la position spécifiée.</summary>
      <param name="index">Index 0 dans le tableau auquel le nouvel élément doit être ajouté.</param>
      <param name="element">Élément à insérer au début du tableau.</param>
      <returns>Nouveau tableau avec la valeur spécifiée insérée.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>Insère les valeurs spécifiées à l’index spécifié.</summary>
      <param name="index">Index auquel insérer la valeur.</param>
      <param name="items">Éléments à insérer.</param>
      <returns>Nouveau tableau avec les valeurs spécifiées insérées.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Retourne un tableau avec la première occurrence de l’élément spécifié supprimé du tableau ; si aucune correspondance n’est trouvée, le tableau actuel est retourné.</summary>
      <param name="value">Valeur à supprimer du tableau.</param>
      <param name="equalityComparer">Comparateur d’égalité à utiliser dans la recherche.</param>
      <returns>Nouveau tableau avec la valeur supprimée.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})">
      <summary>Supprime tous les éléments du tableau qui remplissent les conditions spécifiées.</summary>
      <param name="match">Délégué qui définit les conditions des éléments à supprimer.</param>
      <returns>Nouveau tableau avec des éléments qui répondent au critère spécifié supprimé.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)">
      <summary>Retourne un tableau avec l’élément à la position spécifiée supprimée.</summary>
      <param name="index">Index de base 0 de l’élément à supprimer du tableau retourné.</param>
      <returns>Nouveau tableau avec l’élément spécifié supprimé.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Supprime les éléments spécifiés du tableau.</summary>
      <param name="items">Éléments à supprimer si des correspondances sont trouvées dans cette liste.</param>
      <param name="equalityComparer">Comparateur d’égalité à utiliser dans la recherche.</param>
      <returns>Nouveau tableau avec les éléments supprimés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)">
      <summary>Retourne un tableau avec les éléments à la position spécifiée supprimée.</summary>
      <param name="index">Index de base 0 de l’élément de départ à supprimer du tableau.</param>
      <param name="count">Nombre d’éléments à supprimer du tableau.</param>
      <returns>Nouveau tableau avec les éléments spécifiés supprimés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Recherche le premier élément dans le tableau égal à la valeur spécifiée et remplace la valeur par la nouvelle valeur spécifiée.</summary>
      <param name="oldValue">Valeur à rechercher et remplacer dans le tableau.</param>
      <param name="newValue">Valeur par laquelle remplacer <c>oldvalue</c>.</param>
      <param name="equalityComparer">Comparateur d’égalité à utiliser pour comparer des valeurs.</param>
      <returns>Tableau qui contient <paramref name="newValue" /> même si les valeurs nouvelles et anciennes sont identiques.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> est introuvable dans le tableau.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)">
      <summary>Remplace l'élément à l'index spécifié par l'élément spécifié.</summary>
      <param name="index">Index de l’élément à remplacer.</param>
      <param name="value">Valeur à ajouter à la liste.</param>
      <returns>Tableau qui contient <paramref name="item" /> à l’index spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Détermine si l’élément de collection actuel précède, se situe à la même position que, ou suit un autre élément dans l’ordre de tri.</summary>
      <param name="other">Élément à comparer avec l’instance actuelle.</param>
      <param name="comparer">Objet utilisé pour comparer les membres du tableau actuel aux membres correspondants de l’autre tableau.</param>
      <returns>Entier qui indique si l’élément actuel précède, se situe à la même position ou suit l’autre élément.</returns>
      <exception cref="T:System.ArgumentException">Les tableaux ne sont pas de la même longueur.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Détermine si ce tableau est structurellement identique au tableau spécifié.</summary>
      <param name="other">Tableau à comparer à l’instance actuelle.</param>
      <param name="comparer">Objet qui détermine si l’instance actuelle et les autres sont structurellement identiques.</param>
      <returns>
        <see langword="true" /> si les deux tableaux sont structurellement égaux ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Retourne un code de hachage pour l'instance actuelle.</summary>
      <param name="comparer">Objet qui calcule le code de hachage de l'objet actif.</param>
      <returns>Code de hachage de l'instance actuelle.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.ToBuilder">
      <summary>Crée un tableau mutable qui a le même contenu que ce tableau et peut être muté efficacement entre plusieurs opérations à l’aide des interfaces standard mutables.</summary>
      <returns>Nouveau générateur avec le même contenu que ce tableau.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary">
      <summary>Fournit un ensemble de méthodes d’initialisation pour les instances de la classe <see cref="T:System.Collections.Immutable.ImmutableDictionary`2" />.
Package NuGet : System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Contains``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0,``1)">
      <summary>Détermine si le dictionnaire immuable spécifié contient la paire clé/valeur spécifiée.</summary>
      <param name="map">Dictionnaire immuable à rechercher.</param>
      <param name="key">Clé à rechercher dans le dictionnaire immuable.</param>
      <param name="value">Valeur à localiser sur la clé spécifiée, si la clé est trouvée.</param>
      <typeparam name="TKey">Type des clés dans le dictionnaire immuable.</typeparam>
      <typeparam name="TValue">Type des valeurs dans le dictionnaire immuable.</typeparam>
      <returns>
        <see langword="true" /> si ce mappage contient la paire clé/valeur spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2">
      <summary>Crée un dictionnaire immuable vide.</summary>
      <typeparam name="TKey">Type des clés stockées par le dictionnaire.</typeparam>
      <typeparam name="TValue">Type des valeurs stockées par le dictionnaire.</typeparam>
      <returns>Dictionnaire vide immuable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2(System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Crée un dictionnaire immuable vide qui utilise le comparateur de clé spécifié.</summary>
      <param name="keyComparer">Implémentation à utiliser pour déterminer l’égalité des clés dans le dictionnaire.</param>
      <typeparam name="TKey">Type des clés stockées par le dictionnaire.</typeparam>
      <typeparam name="TValue">Type des valeurs stockées par le dictionnaire.</typeparam>
      <returns>Dictionnaire vide immuable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Crée un dictionnaire immuable vide qui utilise les comparateurs de clé et de valeur spécifiés.</summary>
      <param name="keyComparer">Implémentation à utiliser pour déterminer l’égalité des clés dans le dictionnaire.</param>
      <param name="valueComparer">Implémentation à utiliser pour déterminer l’égalité des valeurs dans le dictionnaire.</param>
      <typeparam name="TKey">Type des clés stockées par le dictionnaire.</typeparam>
      <typeparam name="TValue">Type des valeurs stockées par le dictionnaire.</typeparam>
      <returns>Dictionnaire vide immuable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2">
      <summary>Crée un générateur de dictionnaire immuable.</summary>
      <typeparam name="TKey">Type des clés stockées par le dictionnaire.</typeparam>
      <typeparam name="TValue">Type des valeurs stockées par le dictionnaire.</typeparam>
      <returns>Nouveau générateur.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2(System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Crée un générateur de dictionnaire immuable.</summary>
      <param name="keyComparer">Comparateur de clé.</param>
      <typeparam name="TKey">Type des clés stockées par le dictionnaire.</typeparam>
      <typeparam name="TValue">Type des valeurs stockées par le dictionnaire.</typeparam>
      <returns>Nouveau générateur.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Crée un générateur de dictionnaire immuable.</summary>
      <param name="keyComparer">Comparateur de clé.</param>
      <param name="valueComparer">Comparateur de valeur.</param>
      <typeparam name="TKey">Type des clés stockées par le dictionnaire.</typeparam>
      <typeparam name="TValue">Type des valeurs stockées par le dictionnaire.</typeparam>
      <returns>Nouveau générateur.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Crée un dictionnaire immuable qui contient les éléments spécifiés.</summary>
      <param name="items">Éléments utilisés pour remplir le dictionnaire avant qu’il soit immuable.</param>
      <typeparam name="TKey">Type des clés du dictionnaire.</typeparam>
      <typeparam name="TValue">Type des valeurs du dictionnaire.</typeparam>
      <returns>Nouveau dictionnaire immuable qui contient les éléments spécifiés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Crée un dictionnaire immuable qui contient les éléments spécifiés et utilise le comparateur de clé spécifié.</summary>
      <param name="keyComparer">Implémentation du comparateur à utiliser pour comparer des clés pour l’égalité.</param>
      <param name="items">Éléments à ajouter au dictionnaire avant qu’il soit immuable.</param>
      <typeparam name="TKey">Type des clés du dictionnaire.</typeparam>
      <typeparam name="TValue">Type des valeurs du dictionnaire.</typeparam>
      <returns>Nouveau dictionnaire immuable qui contient les éléments spécifiés et utilise le comparateur spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Crée un dictionnaire immuable qui contient les éléments spécifiés et utilise le comparateur de clé spécifié.</summary>
      <param name="keyComparer">Implémentation du comparateur à utiliser pour comparer des clés pour l’égalité.</param>
      <param name="valueComparer">Implémentation du comparateur à utiliser pour comparer l’égalité des valeurs.</param>
      <param name="items">Éléments à ajouter au dictionnaire avant qu’il soit immuable.</param>
      <typeparam name="TKey">Type des clés du dictionnaire.</typeparam>
      <typeparam name="TValue">Type des valeurs du dictionnaire.</typeparam>
      <returns>Nouveau dictionnaire immuable qui contient les éléments spécifiés et utilise le comparateur spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.GetValueOrDefault``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0)">
      <summary>Obtient la valeur d’une clé spécifique, si une clé correspondante existe dans le dictionnaire.</summary>
      <param name="dictionary">Dictionnaire permettant de récupérer la valeur.</param>
      <param name="key">Clé à rechercher.</param>
      <typeparam name="TKey">Type de la clé.</typeparam>
      <typeparam name="TValue">Type de la valeur.</typeparam>
      <returns>Valeur de la clé, ou <c>default(TValue)</c> si aucune clé correspondante n’a été trouvée.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.GetValueOrDefault``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0,``1)">
      <summary>Obtient la valeur d’une clé spécifique, si une clé correspondante existe dans le dictionnaire.</summary>
      <param name="dictionary">Dictionnaire permettant de récupérer la valeur.</param>
      <param name="key">Clé à rechercher.</param>
      <param name="defaultValue">Valeur par défaut à retourner si aucune clé correspondante n’est trouvée dans le dictionnaire.</param>
      <typeparam name="TKey">Type de la clé.</typeparam>
      <typeparam name="TValue">Type de la valeur.</typeparam>
      <returns>Valeur de la clé, ou <paramref name="defaultValue" /> si aucune clé n’a été trouvée.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Construit un dictionnaire immuable à partir de la collection d’éléments existante, en appliquant une fonction de transformation aux clés source.</summary>
      <param name="source">Collection source utilisée pour générer le dictionnaire immuable.</param>
      <param name="keySelector">Fonction utilisée pour transformer des clés pour le dictionnaire immuable.</param>
      <typeparam name="TSource">Type d’élément de la collection source.</typeparam>
      <typeparam name="TKey">Type de clé dans le dictionnaire immuable qui en résulte.</typeparam>
      <returns>Dictionnaire immuable qui contient les éléments de <paramref name="source" />, avec des clés transformés en appliquant <paramref name="keySelector" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Construit un dictionnaire immuable basé sur une transformation d’une séquence.</summary>
      <param name="source">Collection source utilisée pour générer le dictionnaire immuable.</param>
      <param name="keySelector">Fonction utilisée pour transformer des clés pour le dictionnaire immuable.</param>
      <param name="keyComparer">Comparateur de clé à utiliser pour le dictionnaire.</param>
      <typeparam name="TSource">Type d’élément de la collection source.</typeparam>
      <typeparam name="TKey">Type de clé dans le dictionnaire immuable qui en résulte.</typeparam>
      <returns>Dictionnaire immuable qui contient les éléments de <paramref name="source" />, avec des clés transformés en appliquant <paramref name="keySelector" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Énumère une séquence de paires clé/valeur et produit un dictionnaire immuable de son contenu.</summary>
      <param name="source">Séquence de paires clé/valeur à énumérer.</param>
      <typeparam name="TKey">Type des clés dans le dictionnaire.</typeparam>
      <typeparam name="TValue">Type des valeurs dans le dictionnaire.</typeparam>
      <returns>Dictionnaire immuable qui contient les paires clé/valeur dans l’ordre spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Énumère une séquence de paires clé/valeur et produit un dictionnaire immuable de son contenu à l’aide du comparateur de clé spécifié.</summary>
      <param name="source">Séquence de paires clé/valeur à énumérer.</param>
      <param name="keyComparer">Comparateur de clés à utiliser lors de la création du dictionnaire immuable.</param>
      <typeparam name="TKey">Type des clés dans le dictionnaire.</typeparam>
      <typeparam name="TValue">Type des valeurs dans le dictionnaire.</typeparam>
      <returns>Dictionnaire immuable qui contient les paires clé/valeur dans l’ordre spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Énumère une séquence de paires clé/valeur et produit un dictionnaire immuable de son contenu à l’aide de la des comparateurs de clé et de valeur spécifiés.</summary>
      <param name="source">Séquence de paires clé/valeur à énumérer.</param>
      <param name="keyComparer">Comparateur de clés à utiliser lors de la création du dictionnaire immuable.</param>
      <param name="valueComparer">Comparateur de valeur à utiliser pour le dictionnaire immuable.</param>
      <typeparam name="TKey">Type des clés dans le dictionnaire.</typeparam>
      <typeparam name="TValue">Type des valeurs dans le dictionnaire.</typeparam>
      <returns>Dictionnaire immuable qui contient les paires clé/valeur dans l’ordre spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}.Builder)">
      <summary>Crée un dictionnaire immuable à partir du contenu actuel du dictionnaire du générateur.</summary>
      <param name="builder">Générateur à partir duquel créer le dictionnaire immuable.</param>
      <typeparam name="TKey">Type des clés dans le dictionnaire.</typeparam>
      <typeparam name="TValue">Type des valeurs dans le dictionnaire.</typeparam>
      <returns>Dictionnaire immuable qui contient le contenu actuel du dictionnaire du générateur.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Énumère et transforme une séquence et produit un dictionnaire immuable de son contenu.</summary>
      <param name="source">Séquence à énumérer pour générer le dictionnaire.</param>
      <param name="keySelector">Fonction qui génère la clé de dictionnaire à partir de chaque élément de la séquence.</param>
      <param name="elementSelector">Fonction qui génère la valeur de dictionnaire à partir de chaque élément de la séquence.</param>
      <typeparam name="TSource">Type des éléments de la séquence.</typeparam>
      <typeparam name="TKey">Type des clés dans le dictionnaire qui en résulte.</typeparam>
      <typeparam name="TValue">Type des valeurs dans le dictionnaire qui en résulte.</typeparam>
      <returns>Dictionnaire immuable qui contient les éléments dans l’ordre spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Énumère et transforme une séquence et produit un dictionnaire immuable de son contenu à l’aide du comparateur de clé spécifié.</summary>
      <param name="source">Séquence à énumérer pour générer le dictionnaire.</param>
      <param name="keySelector">Fonction qui génère la clé de dictionnaire à partir de chaque élément de la séquence.</param>
      <param name="elementSelector">Fonction qui génère la valeur de dictionnaire à partir de chaque élément de la séquence.</param>
      <param name="keyComparer">Comparateur de clé à utiliser pour le dictionnaire.</param>
      <typeparam name="TSource">Type des éléments de la séquence.</typeparam>
      <typeparam name="TKey">Type des clés dans le dictionnaire qui en résulte.</typeparam>
      <typeparam name="TValue">Type des valeurs dans le dictionnaire qui en résulte.</typeparam>
      <returns>Dictionnaire immuable qui contient les éléments dans l’ordre spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Énumère et transforme une séquence et produit un dictionnaire immuable de son contenu à l’aide des comparateurs de clé et de valeur spécifiés.</summary>
      <param name="source">Séquence à énumérer pour générer le dictionnaire.</param>
      <param name="keySelector">Fonction qui génère la clé de dictionnaire à partir de chaque élément de la séquence.</param>
      <param name="elementSelector">Fonction qui génère la valeur de dictionnaire à partir de chaque élément de la séquence.</param>
      <param name="keyComparer">Comparateur de clé à utiliser pour le dictionnaire.</param>
      <param name="valueComparer">Comparateur de valeur à utiliser pour le dictionnaire.</param>
      <typeparam name="TSource">Type des éléments de la séquence.</typeparam>
      <typeparam name="TKey">Type des clés dans le dictionnaire qui en résulte.</typeparam>
      <typeparam name="TValue">Type des valeurs dans le dictionnaire qui en résulte.</typeparam>
      <returns>Dictionnaire immuable qui contient les éléments dans l’ordre spécifié.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2">
      <summary>Représente une collection immuable et non triée de clés et valeurs.
Package NuGet : System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="TKey">Type des clés dans le dictionnaire.</typeparam>
      <typeparam name="TValue">Type des valeurs dans le dictionnaire.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Add(`0,`1)">
      <summary>Ajoute un élément avec la clé et la valeur spécifiées au dictionnaire immuable.</summary>
      <param name="key">Clé de l'élément à ajouter.</param>
      <param name="value">Valeur de l'élément à ajouter.</param>
      <returns>Nouveau dictionnaire immuable qui contient la paire clé/valeur supplémentaire.</returns>
      <exception cref="T:System.ArgumentException">La clé donnée existe déjà dans le dictionnaire, mais a une valeur différente.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Ajoute les paires clé/valeur spécifiées au dictionnaire immuable.</summary>
      <param name="pairs">Paires clé/valeur à ajouter.</param>
      <returns>Nouveau dictionnaire immuable qui contient les paires clé/valeur supplémentaires.</returns>
      <exception cref="T:System.ArgumentException">Une des clés données existe déjà dans le dictionnaire, mais a une valeur différente.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2.Builder">
      <summary>Représente une table de hachage qui mute, avec peu ou pas d’allocations de mémoire, et qui peut produire ou créer efficacement sur des instances de table de hachage.
NuGet package: System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Add(`0,`1)">
      <summary>Ajoute un élément avec la clé et la valeur spécifiées au dictionnaire immuable.</summary>
      <param name="key">Clé de l'élément à ajouter.</param>
      <param name="value">Valeur de l'élément à ajouter.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException">Un élément possédant la même clé existe déjà dans le dictionnaire.</exception>
      <exception cref="T:System.NotSupportedException">Le dictionnaire est en lecture seule.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Ajoute l’élément spécifié au dictionnaire immuable.</summary>
      <param name="item">Objet à ajouter au dictionnaire.</param>
      <exception cref="T:System.NotSupportedException">Le dictionnaire est en lecture seule.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Ajoute une séquence de valeurs à cette collection.</summary>
      <param name="items">Éléments à ajouter à cette collection.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Clear">
      <summary>Supprime tous les éléments du dictionnaire immuable.</summary>
      <exception cref="T:System.NotSupportedException">Le dictionnaire est en lecture seule.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Détermine si le dictionnaire immuable contient une valeur spécifique.</summary>
      <param name="item">Objet à rechercher dans le dictionnaire.</param>
      <returns>
        <see langword="true" /> si <paramref name="item" /> se trouve dans le dictionnaire ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ContainsKey(`0)">
      <summary>Détermine si le dictionnaire immuable contient un élément qui possède la clé spécifiée.</summary>
      <param name="key">Clé à rechercher dans le dictionnaire.</param>
      <returns>
        <see langword="true" /> si le dictionnaire contient un élément avec la clé ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> a la valeur null.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ContainsValue(`1)">
      <summary>Détermine si le dictionnaire immuable contient un élément qui possède la valeur spécifiée.</summary>
      <param name="value">Valeur à rechercher dans le dictionnaire immuable. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <returns>
        <see langword="true" /> si le dictionnaire contient un élément qui possède la valeur spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Count">
      <summary>Obtient le nombre d’éléments contenus dans le dictionnaire immuable.</summary>
      <returns>Nombre d’éléments contenus dans le dictionnaire immuable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein du dictionnaire immuable.</summary>
      <returns>Énumérateur permettant d'effectuer une itération au sein de la collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetValueOrDefault(`0)">
      <summary>Obtient la valeur d’une clé spécifique, si une clé correspondante existe dans le dictionnaire.</summary>
      <param name="key">Clé à rechercher.</param>
      <returns>Valeur de la clé, ou <c>default(TValue)</c> si aucune clé correspondante n’a été trouvée.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetValueOrDefault(`0,`1)">
      <summary>Obtient la valeur d’une clé spécifique, si une clé correspondante existe dans le dictionnaire.</summary>
      <param name="key">Clé à rechercher.</param>
      <param name="defaultValue">Valeur par défaut à retourner si aucune clé correspondante n’est trouvée dans le dictionnaire.</param>
      <returns>Valeur de la clé, ou <paramref name="defaultValue" /> si aucune clé n’a été trouvée.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Item(`0)">
      <summary>Obtient ou définit l'élément à l'aide de la clé spécifiée.</summary>
      <param name="key">Élément à obtenir ou définir.</param>
      <returns>Élément qui contient la clé spécifiée.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">La propriété est récupérée et <paramref name="key" /> est introuvable.</exception>
      <exception cref="T:System.NotSupportedException">La propriété est définie et <see cref="T:System.Collections.Generic.IDictionary`2" /> est en lecture seule.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.KeyComparer">
      <summary>Obtient ou définit le comparateur de clé.</summary>
      <returns>Comparateur de clé.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Keys">
      <summary>Obtient une collection qui contient les clés du dictionnaire immuable.</summary>
      <returns>Collection qui contient les clés de l’objet qui implémente le dictionnaire immuable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Remove(`0)">
      <summary>Supprime l’élément avec la clé spécifiée du dictionnaire immuable.</summary>
      <param name="key">Clé de l'élément à supprimer.</param>
      <returns>
        <see langword="true" /> si la suppression de l'élément réussit ; sinon, <see langword="false" />.  Cette méthode retourne également <see langword="false" /> si <paramref name="key" /> est introuvable dans le dictionnaire.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> a la valeur null.</exception>
      <exception cref="T:System.NotSupportedException">Le dictionnaire est en lecture seule.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Supprime la première occurrence d’un objet spécifique du dictionnaire immuable.</summary>
      <param name="item">Objet à supprimer du dictionnaire.</param>
      <returns>
        <see langword="true" /> si <paramref name="item" /> a été correctement supprimé du dictionnaire ; sinon, <see langword="false" />. Cette méthode retourne également false si <paramref name="item" /> est introuvable dans le dictionnaire.</returns>
      <exception cref="T:System.NotSupportedException">Le dictionnaire est en lecture seule.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Supprime toutes les entrées avec des clés qui correspondent à celles de la séquence spécifiée du dictionnaire immuable.</summary>
      <param name="keys">Clés pour les entrées à supprimer du dictionnaire.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" />
      <param name="arrayIndex" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copie les éléments du dictionnaire dans un tableau de type <see cref="T:System.Collections.Generic.KeyValuePair`2" />, en commençant à l’index de tableau spécifié.</summary>
      <param name="array">Tableau unidimensionnel de type <see cref="T:System.Collections.Generic.KeyValuePair`2" /> qui constitue la destination des éléments copiés à partir du dictionnaire. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="arrayIndex">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#IsSynchronized">
      <summary>Obtient une valeur qui indique si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread safe).</summary>
      <returns>
        <see langword="true" /> si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe) ; sinon <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#SyncRoot">
      <summary>Obtient un objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>Ajoute un élément avec la valeur et la clé fournies à l’objet dictionary.</summary>
      <param name="key">Clé de l'élément à ajouter.</param>
      <param name="value">Valeur de l'élément à ajouter.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Contains(System.Object)">
      <summary>Détermine si l’objet dictionary contient un élément avec la clé spécifiée.</summary>
      <param name="key">Clé à rechercher.</param>
      <returns>
        <see langword="true" /> si le dictionnaire contient un élément avec la clé ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#GetEnumerator">
      <summary>Retourne un objet <see cref="T:System.Collections.IDictionaryEnumerator" /> pour le dictionnaire.</summary>
      <returns>Objet <see cref="T:System.Collections.IDictionaryEnumerator" /> pour le dictionnaire.</returns>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#IsFixedSize">
      <summary>Obtient une valeur qui indique si l'objet <see cref="T:System.Collections.IDictionary" /> est de taille fixe.</summary>
      <returns>
        <see langword="true" /> si l’objet <see cref="T:System.Collections.IDictionary" /> a une taille fixe ; dans le cas contraire, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#IsReadOnly">
      <summary>Obtient une valeur qui indique si l'objet <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule.</summary>
      <returns>
        <see langword="true" /> si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Item(System.Object)">
      <summary>Obtient ou définit l'élément à l'aide de la clé spécifiée.</summary>
      <param name="key">Clé.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Keys">
      <summary>Obtient un <see cref="T:System.Collections.Generic.ICollection`1" /> contenant les clés de <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> contenant les clés de l’objet qui implémente <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Remove(System.Object)">
      <summary>Supprime l’élément avec la clé spécifiée du dictionnaire.</summary>
      <param name="key">Clé de l'élément à supprimer.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Values">
      <summary>Obtient <see cref="T:System.Collections.Generic.ICollection`1" /> contenant les valeurs de <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> contenant les valeurs de l’objet qui implémente <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein d’une collection.</summary>
      <returns>Objet enumerator qui peut servir à effectuer une itération dans la collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ToImmutable">
      <summary>Crée un dictionnaire immuable en fonction du contenu de cette instance.</summary>
      <returns>Dictionnaire immuable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.TryGetKey(`0,`0@)">
      <summary>Détermine si ce dictionnaire contient la clé spécifiée.</summary>
      <param name="equalKey">Clé à rechercher.</param>
      <param name="actualKey">Clé correspondante située dans le dictionnaire, le cas échéant, ou <c>equalkey</c> si aucune correspondance n’est trouvée.</param>
      <returns>
        <see langword="true" /> si une correspondance pour <paramref name="equalKey" /> est trouvée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.TryGetValue(`0,`1@)">
      <summary>Retourne la valeur associée à la clé spécifiée.</summary>
      <param name="key">Clé dont la valeur sera récupérée.</param>
      <param name="value">Lorsque cette méthode est retournée, contient la valeur associée à la clé spécifiée, si la clé est trouvée ; sinon, retourne la valeur par défaut pour le type de paramètre <paramref name="value" />. Ce paramètre est passé sans être initialisé.</param>
      <returns>
        <see langword="true" /> si l’objet qui implémente le dictionnaire immuable contient un élément avec la clé spécifiée ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> a la valeur null.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.ValueComparer">
      <summary>Obtient ou définit le comparateur de valeur.</summary>
      <returns>Comparateur de valeur.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Values">
      <summary>Obtient une collection qui contient les valeurs du dictionnaire immuable.</summary>
      <returns>Collection qui contient les valeurs de l’objet qui implémente le dictionnaire.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Clear">
      <summary>Récupère un dictionnaire immuable vide qui possède les mêmes règles de comparaison de classement et de clé/valeur que cette instance du dictionnaire.</summary>
      <returns>Dictionnaire vide avec des règles de comparaison de classement et de clé/valeur équivalentes.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Détermine si ce dictionnaire immuable contient la paire clé/valeur spécifiée.</summary>
      <param name="pair">Paire clé/valeur à rechercher.</param>
      <returns>
        <see langword="true" /> si la paire clé/valeur spécifiée est trouvée dans le dictionnaire ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ContainsKey(`0)">
      <summary>Détermine si le dictionnaire immuable contient un élément avec la clé spécifiée.</summary>
      <param name="key">Clé à rechercher.</param>
      <returns>
        <see langword="true" /> si le dictionnaire immuable contient un élément avec la clé spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ContainsValue(`1)">
      <summary>Détermine si le dictionnaire immuable contient un élément avec la valeur spécifiée.</summary>
      <param name="value">Valeur à rechercher. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <returns>
        <see langword="true" /> si le dictionnaire contient un élément qui possède la valeur spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Count">
      <summary>Obtient le nombre de paires clé/valeur dans le dictionnaire immuable.</summary>
      <returns>Nombre de paires clé/valeur dans le dictionnaire.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableDictionary`2.Empty">
      <summary>Obtient un dictionnaire vide immuable.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator">
      <summary>Énumère le contenu du dictionnaire immuable sans allouer de mémoire.
Package NuGet : System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Current">
      <summary>Obtient l'élément situé à la position actuelle de l'énumérateur.</summary>
      <returns>Élément dans le dictionnaire à la position actuelle de l’énumérateur.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Dispose">
      <summary>Libère les ressources utilisées par l'instance actuelle de la classe <see cref="T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.MoveNext">
      <summary>Avance l’énumérateur à l’élément suivant du dictionnaire immuable.</summary>
      <returns>
        <see langword="true" /> si l’énumérateur a pu avancer jusqu’à l’élément suivant ; <see langword="false" /> si l’énumérateur a dépassé la fin du dictionnaire.</returns>
      <exception cref="T:System.InvalidOperationException">Le dictionnaire a été modifié après la création de l’énumérateur.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Reset">
      <summary>Rétablit l’énumérateur à sa position initiale, qui précède le premier élément du dictionnaire.</summary>
      <exception cref="T:System.InvalidOperationException">Le dictionnaire a été modifié après la création de l’énumérateur.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Obtient l’élément actuel.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein du dictionnaire immuable.</summary>
      <returns>Énumérateur qui peut être utilisé pour itérer au sein du dictionnaire.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.IsEmpty">
      <summary>Obtient une valeur qui indique si cette instance du dictionnaire immuable est vide.</summary>
      <returns>
        <see langword="true" /> si cette instance est valide ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Item(`0)">
      <summary>Obtient le <paramref name="TValue" /> associé à la clé spécifiée.</summary>
      <param name="key">Type de la clé.</param>
      <returns>Valeur associée à la clé spécifiée. Si aucun résultat n’est trouvé, l’opération lève une exception.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.KeyComparer">
      <summary>Obtient le comparateur de clé pour le dictionnaire immuable.</summary>
      <returns>Comparateur de clé.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Keys">
      <summary>Obtient les clés dans le dictionnaire immuable.</summary>
      <returns>Clés dans le dictionnaire immuable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Remove(`0)">
      <summary>Supprime l’élément avec la clé spécifiée du dictionnaire immuable.</summary>
      <param name="key">Clé de l'élément à supprimer.</param>
      <returns>Nouveau dictionnaire immuable avec l’élément spécifié supprimé ; ou cette instance si la clé spécifiée est introuvable dans le dictionnaire.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Supprime les éléments avec les clés spécifiées du dictionnaire immuable.</summary>
      <param name="keys">Clés des éléments à supprimer.</param>
      <returns>Nouveau dictionnaire immuable avec les clés spécifiées supprimées ; ou cette instance si les clés spécifiées sont introuvables dans le dictionnaire.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.SetItem(`0,`1)">
      <summary>Définit la clé et la valeur spécifiées dans le dictionnaire immuable, en remplaçant éventuellement une valeur existante pour la clé.</summary>
      <param name="key">Clé de l'entrée à ajouter.</param>
      <param name="value">Valeur de clé à définir.</param>
      <returns>Nouveau dictionnaire immuable qui contient la paire clé/valeur spécifiée.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Définit les paires clé/valeur spécifiées dans le dictionnaire immuable, en remplaçant éventuellement des valeurs existantes pour les clés.</summary>
      <param name="items">Paires clé/valeur à définir dans le dictionnaire. Si une clé existe déjà dans le dictionnaire, cette méthode remplace leurs valeurs précédentes.</param>
      <returns>Nouveau dictionnaire immuable qui contient les paires clé/valeur spécifiées.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" />
      <param name="arrayIndex" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" />
      <param name="value" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Item(`0)">
      <param name="key" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copie les éléments du dictionnaire dans un tableau, en commençant à un index de tableau particulier.</summary>
      <param name="array">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir du dictionnaire. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="arrayIndex">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>Obtient une valeur indiquant si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe).</summary>
      <returns>
        <see langword="true" /> si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe) ; sinon <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>Obtient un objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>Ajoute un élément avec la valeur et la clé fournies à l’objet dictionary immuable.</summary>
      <param name="key">Objet à utiliser comme clé de l'élément à ajouter.</param>
      <param name="value">Objet à utiliser comme valeur de l'élément à ajouter.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Clear">
      <summary>Supprime cette instance.</summary>
      <exception cref="T:System.NotSupportedException">L’objet dictionary est en lecture seule.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>Détermine si l’objet dictionary immuable contient un élément avec la clé spécifiée.</summary>
      <param name="key">Clé à rechercher dans l’objet dictionary.</param>
      <returns>
        <see langword="true" /> si le dictionnaire contient un élément avec la clé ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>Retourne un objet <see cref="T:System.Collections.IDictionaryEnumerator" /> pour l’objet dictionary immuable.</summary>
      <returns>Objet enumerator pour l’objet dictionary.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>Obtient une valeur indiquant si l'objet <see cref="T:System.Collections.IDictionary" /> est de taille fixe.</summary>
      <returns>
        <see langword="true" /> si l'objet <see cref="T:System.Collections.IDictionary" /> est de taille fixe ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>Obtient une valeur indiquant si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule.</summary>
      <returns>
        <see langword="true" /> si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>Obtient ou définit l'élément à l'aide de la clé spécifiée.</summary>
      <param name="key">Clé.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Keys">
      <summary>Obtient un <see cref="T:System.Collections.Generic.ICollection`1" /> contenant les clés de <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> contenant les clés de l'objet qui implémente <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>Supprime l’élément avec la clé spécifiée de l’objet dictionary immuable.</summary>
      <param name="key">Clé de l'élément à supprimer.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Values">
      <summary>Obtient <see cref="T:System.Collections.Generic.ICollection`1" /> contenant les valeurs de <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> contenant les valeurs de l'objet qui implémente <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein d’une collection.</summary>
      <returns>Objet enumerator qui peut servir à effectuer une itération dans la collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" />
      <param name="value" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="pairs" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <param name="keys" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItem(`0,`1)">
      <param name="key" />
      <param name="value" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="items" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ToBuilder">
      <summary>Crée un dictionnaire immuable avec le même contenu que ce dictionnaire qui peut être efficacement muté entre plusieurs opérations à l’aide des interfaces standard mutables.</summary>
      <returns>Une collection avec le même contenu que ce dictionnaire qui peut être efficacement mutée entre plusieurs opérations à l’aide des interfaces standard mutables.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.TryGetKey(`0,`0@)">
      <summary>Détermine si ce dictionnaire contient la clé spécifiée.</summary>
      <param name="equalKey">Clé à rechercher.</param>
      <param name="actualKey">Clé correspondante située dans le dictionnaire, le cas échéant, ou <c>equalkey</c> si aucune correspondance n’est trouvée.</param>
      <returns>
        <see langword="true" /> si une correspondance pour <paramref name="equalKey" /> est trouvée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.TryGetValue(`0,`1@)">
      <summary>Obtient la valeur associée à la clé spécifiée.</summary>
      <param name="key">Clé dont la valeur sera récupérée.</param>
      <param name="value">Cette méthode retourne la valeur associée à la clé spécifiée, si la clé est trouvée ; sinon, retourne la valeur par défaut pour le type du paramètre <paramref name="value" />. Ce paramètre est passé sans être initialisé.</param>
      <returns>
        <see langword="true" /> si l’objet qui implémente le dictionnaire contient un élément avec la clé spécifiée ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> a la valeur null.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.ValueComparer">
      <summary>Obtient le comparateur de valeur utilisé pour déterminer si les valeurs sont égales.</summary>
      <returns>Comparateur de valeur utilisé pour déterminer si les valeurs sont égales.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Values">
      <summary>Obtient les valeurs dans le dictionnaire immuable.</summary>
      <returns>Valeurs dans le dictionnaire immuable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Obtient une instance du dictionnaire immuable qui utilise le comparateur de clé spécifié.</summary>
      <param name="keyComparer">Comparateur de clé à utiliser.</param>
      <returns>Une instance du dictionnaire immuable qui utilise le comparateur donné.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
      <summary>Obtient une instance du dictionnaire immuable qui utilise les comparateurs de clé et de valeur spécifiées.</summary>
      <param name="keyComparer">Comparateur de clé à utiliser.</param>
      <param name="valueComparer">Comparateur de valeur à utiliser.</param>
      <returns>Une instance du dictionnaire immuable qui utilise les comparateurs donnés.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet">
      <summary>Fournit un ensemble de méthodes d’initialisation pour les instances de la classe <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" />.
Package NuGet : System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1">
      <summary>Crée un ensemble immuable de hachage vide.</summary>
      <typeparam name="T">Type des éléments à stocker dans l’ensemble immuable de hachage.</typeparam>
      <returns>Ensemble immuable de hachage vide.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(``0)">
      <summary>Crée un ensemble immuable de hachage qui contient l’élément spécifié.</summary>
      <param name="item">Élément avec lequel préremplir l’ensemble de hachage.</param>
      <typeparam name="T">Type des éléments de l’ensemble immuable de hachage.</typeparam>
      <returns>Crée un ensemble immuable de hachage qui contient l’élément spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(``0[])">
      <summary>Crée un ensemble immuable de hachage qui contient le tableau spécifié d’éléments.</summary>
      <param name="items">Tableau qui contient les éléments avec lesquels préremplir l’ensemble de hachage.</param>
      <typeparam name="T">Type des éléments de l’ensemble immuable de hachage.</typeparam>
      <returns>Crée un ensemble immuable de hachage qui contient les éléments spécifiés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Crée un ensemble immuable de hachage vide qui utilise le comparateur d’égalité spécifié.</summary>
      <param name="equalityComparer">Objet à utiliser pour comparer des objets dans l’ensemble pour égalité.</param>
      <typeparam name="T">Type des éléments de l’ensemble immuable de hachage.</typeparam>
      <returns>Ensemble immuable de hachage vide.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0},``0)">
      <summary>Crée un ensemble immuable de hachage qui contient l’élément spécifié et utilise le comparateur d’égalité spécifié pour le type d’ensemble.</summary>
      <param name="equalityComparer">Objet à utiliser pour comparer des objets dans l’ensemble pour égalité.</param>
      <param name="item">Élément avec lequel préremplir l’ensemble de hachage.</param>
      <typeparam name="T">Type des éléments de l’ensemble immuable de hachage.</typeparam>
      <returns>Crée un ensemble immuable de hachage qui contient l’élément spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0},``0[])">
      <summary>Crée un ensemble immuable de hachage qui contient les éléments de la collection spécifiée et utilise le comparateur d’égalité spécifié pour le type d’ensemble.</summary>
      <param name="equalityComparer">Objet à utiliser pour comparer des objets dans l’ensemble pour égalité.</param>
      <param name="items">Tableau qui contient les éléments avec lesquels préremplir l’ensemble de hachage.</param>
      <typeparam name="T">Type des éléments stockés dans l’ensemble immuable de hachage.</typeparam>
      <returns>Crée un ensemble immuable de hachage qui contient les éléments spécifiés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateBuilder``1">
      <summary>Crée un générateur d’ensemble immuable de hachage.</summary>
      <typeparam name="T">Type des éléments stockés dans la collection.</typeparam>
      <returns>Générateur d’ensemble immuable de hachage.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateBuilder``1(System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Crée un générateur d’ensemble immuable de hachage.</summary>
      <param name="equalityComparer">Objet à utiliser pour comparer des objets dans l’ensemble pour égalité.</param>
      <typeparam name="T">Type des éléments stockés dans la collection.</typeparam>
      <returns>Nouveau générateur d’ensemble immuable de hachage.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Crée un ensemble immuable de hachage prérempli avec les éléments spécifiés.</summary>
      <param name="items">Éléments à ajouter à ensemble de hachage.</param>
      <typeparam name="T">Type des éléments stockés dans la collection.</typeparam>
      <returns>Nouvel ensemble immuable de hachage qui contient les éléments spécifiés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateRange``1(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Crée un ensemble immuable de hachage qui contient les éléments spécifiés et utilise le comparateur d’égalité spécifié pour le type d’ensemble.</summary>
      <param name="equalityComparer">Objet à utiliser pour comparer des objets dans l’ensemble pour égalité.</param>
      <param name="items">Éléments à ajouter à la collection avant que l’immuabilité soit appliquée.</param>
      <typeparam name="T">Type des éléments stockés dans la collection.</typeparam>
      <returns>Nouvel ensemble immuable de hachage.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Énumère une séquence et produit un ensemble immuable de hachage de son contenu.</summary>
      <param name="source">Séquence à énumérer.</param>
      <typeparam name="TSource">Type des éléments de la séquence.</typeparam>
      <returns>Ensemble immuable de hachage qui contient les éléments dans l’ordre spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Énumère une séquence, produit un ensemble immuable de hachage de son contenu et utilise le comparateur d’égalité spécifié pour le type d’ensemble.</summary>
      <param name="source">Séquence à énumérer.</param>
      <param name="equalityComparer">Objet à utiliser pour comparer des objets dans l’ensemble pour égalité.</param>
      <typeparam name="TSource">Type des éléments de la séquence.</typeparam>
      <returns>Ensemble immuable de hachage qui contient les éléments dans l’ordre spécifié et utilise le comparateur d’égalité spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Immutable.ImmutableHashSet{``0}.Builder)">
      <summary>Crée un ensemble de hachage immuable à partir du contenu actuel de l’ensemble du générateur.</summary>
      <param name="builder">Générateur à partir duquel créer l’ensemble de hachage immuable.</param>
      <typeparam name="TSource">Type des éléments de l’ensemble de hachage.</typeparam>
      <returns>Ensemble de hachage immuable qui contient le contenu actuel de l’ensemble du générateur.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1">
      <summary>Représente un ensemble immuable de hachage, non trié.
NuGet package: System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="T">Type d'éléments de l'ensemble de hachages.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Add(`0)">
      <summary>Ajoute l’élément spécifié à l’ensemble de hachage.</summary>
      <param name="item">Élément à ajouter à l'ensemble.</param>
      <returns>Ensemble de hachage qui contient la valeur ajoutée et toutes les valeurs précédemment détenues par l’objet <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" />.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1.Builder">
      <summary>Représente un ensemble de hachage qui mute, avec peu ou pas d’allocations de mémoire, et qui peut produire ou créer très efficacement sur des instances de l’ensemble immuable de hachage.
Package NuGet : System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Add(`0)">
      <summary>Ajoute l’élément spécifié à l’ensemble immuable de hachage.</summary>
      <param name="item">Élément à ajouter.</param>
      <returns>
        <see langword="true" /> si l’élément n’appartient pas déjà à la collection ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Clear">
      <summary>Supprime tous les éléments de l’ensemble immuable de hachage.</summary>
      <exception cref="T:System.NotSupportedException">Le jeu de hachage est en lecture seule.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Contains(`0)">
      <summary>Détermine si l’ensemble immuable de hachage contient une valeur spécifique.</summary>
      <param name="item">Objet à localiser dans l’ensemble de hachage.</param>
      <returns>
        <see langword="true" /> si <paramref name="item" /> se trouve dans l’ensemble  de hachage ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.Count">
      <summary>Obtient le nombre d’éléments contenus dans l’ensemble immuable de hachage.</summary>
      <returns>Nombre d’éléments contenus dans l’ensemble immuable de hachage défini.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Supprime tous les éléments de la collection spécifiée de l’ensemble actuel de hachage.</summary>
      <param name="other">Collection d'éléments à supprimer de l'ensemble.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein de l’ensemble immuable de hachage.</summary>
      <returns>Énumérateur qui peut être utilisé pour itérer via l’ensemble.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifie l'ensemble actuel pour qu'il contienne uniquement les éléments qui figurent également dans une collection spécifiée.</summary>
      <param name="other">Collection à comparer à l’ensemble actuel.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Détermine si l'ensemble actuel est un sous-ensemble (strict) approprié d'une collection spécifiée.</summary>
      <param name="other">Collection à comparer à l’ensemble actuel.</param>
      <returns>
        <see langword="true" /> si l’ensemble actuel est un sous-ensemble approprié de <paramref name="other" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Détermine si l'ensemble actuel est un sur-ensemble de propriété (strict) approprié d'une collection spécifiée.</summary>
      <param name="other">Collection à comparer à l’ensemble actuel.</param>
      <returns>
        <see langword="true" /> si l’ensemble actuel est un sur-ensemble approprié de <paramref name="other" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Détermine si l’ensemble actuel est un sous-ensemble d’une collection spécifiée.</summary>
      <param name="other">Collection à comparer à l’ensemble actuel.</param>
      <returns>
        <see langword="true" /> si l’ensemble actuel est un sous-ensemble de <paramref name="other" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Détermine si l'ensemble actuel est un super-ensemble d'une collection spécifiée.</summary>
      <param name="other">Collection à comparer à l’ensemble actuel.</param>
      <returns>
        <see langword="true" /> si l’ensemble actuel est un sur-ensemble de <paramref name="other" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.KeyComparer">
      <summary>Obtient ou définit le comparateur de clé.</summary>
      <returns>Comparateur de clé.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Détermine si l’ensemble actuel recoupe la collection spécifiée.</summary>
      <param name="other">Collection à comparer à l’ensemble actuel.</param>
      <returns>
        <see langword="true" /> si l’ensemble actuel et <paramref name="other" /> partagent au moins un élément commun ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Remove(`0)">
      <summary>Supprime la première occurrence d’un objet spécifique de l’ensemble de hachage immuable.</summary>
      <param name="item">Objet à supprimer de l’ensemble.</param>
      <returns>
        <see langword="true" /> si <paramref name="item" /> a été correctement supprimé de l’ensemble ; sinon, <see langword="false" />. Cette méthode retourne également <see langword="false" /> si <paramref name="item" /> est introuvable dans l’ensemble d’origine.</returns>
      <exception cref="T:System.NotSupportedException">Le jeu est en lecture seule.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Détermine si l'ensemble actuel et la collection spécifiée contiennent les mêmes éléments.</summary>
      <param name="other">Collection à comparer à l’ensemble actuel.</param>
      <returns>
        <see langword="true" /> si l’ensemble actuel est égal à <paramref name="other" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifie l’ensemble actuel pour qu’il contienne uniquement les éléments présents dans l’ensemble actuel ou dans la collection spécifiée, mais pas dans les deux à la fois.</summary>
      <param name="other">Collection à comparer à l’ensemble actuel.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Ajoute un élément à l’ensemble de hachage.</summary>
      <param name="item">Objet à ajouter à l’ensemble.</param>
      <exception cref="T:System.NotSupportedException">Le jeu est en lecture seule.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary>Copie les éléments de l’ensemble de hachage défini dans un tableau, en commençant à un index de tableau particulier.</summary>
      <param name="array">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir de l’ensemble de hachage. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="arrayIndex">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Obtient une valeur indiquant si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule.</summary>
      <returns>
        <see langword="true" /> si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein de la collection.</summary>
      <returns>Énumérateur permettant d'effectuer une itération au sein de la collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein d’une collection.</summary>
      <returns>Énumérateur permettant d'effectuer une itération au sein de la collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.ToImmutable">
      <summary>Crée un ensemble immuable de hachage en fonction du contenu de cette instance.</summary>
      <returns>Ensemble immuable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifie l’ensemble actuel pour qu’il contienne tous les éléments présents dans l’ensemble actuel, dans la collection spécifiée ou dans les deux.</summary>
      <param name="other">Collection à comparer à l’ensemble actuel.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Clear">
      <summary>Récupère un ensemble immuable de hachage vide qui a la même sémantique de tri et de classement que cette instance.</summary>
      <returns>Ensemble de hachage vide qui a la même sémantique de tri et de classement que cette instance.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Contains(`0)">
      <summary>Détermine si cet ensemble immuable de hachage contient l’élément spécifié.</summary>
      <param name="item">Objet à localiser dans l’ensemble immuable de hachage.</param>
      <returns>
        <see langword="true" /> si <paramref name="item" /> existe dans <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Count">
      <summary>Obtient le nombre d’éléments de l’ensemble immuable de hachage.</summary>
      <returns>Nombre d’éléments de l’ensemble de hachage.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableHashSet`1.Empty">
      <summary>Obtient un ensemble immuable de hachage pour ce type qui utilise la valeur par défaut <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator">
      <summary>Énumère le contenu de l’ensemble immuable de hachage sans allouer de mémoire.
Package NuGet : System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Current">
      <summary>Obtient l'élément situé à la position actuelle de l'énumérateur.</summary>
      <returns>Élément situé à la position actuelle de l’énumérateur.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Dispose">
      <summary>Libère les ressources utilisées par l'instance actuelle de la classe <see cref="T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.MoveNext">
      <summary>Avance l’énumérateur à l’élément suivant de l’ensemble immuable de hachage.</summary>
      <returns>
        <see langword="true" /> si l’énumérateur a pu avancer jusqu’à l’élément suivant ; <see langword="false" /> si l’énumérateur a dépassé la fin de l’ensemble de hachage.</returns>
      <exception cref="T:System.InvalidOperationException">Le jeu de hachage a été modifié après la création de l’énumérateur.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Reset">
      <summary>Rétablit l’énumérateur à sa position initiale, qui précède le premier élément de l’ensemble de hachage.</summary>
      <exception cref="T:System.InvalidOperationException">Le jeu de hachage a été modifié après la création de l’énumérateur.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Obtient l’élément actuel.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>Supprime les éléments de la collection spécifiée de l’ensemble actuel immuable de hachage.</summary>
      <param name="other">Collection d’éléments à supprimer de cet ensemble.</param>
      <returns>Nouvel ensemble avec les éléments supprimés ; ou ensemble d’origine si aucun des éléments ne se trouvaient dans l’ensemble.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein de la collection.</summary>
      <returns>Énumérateur permettant d'effectuer une itération au sein de la collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>Crée un ensemble immuable de hachage qui contient des éléments qui existent dans cet ensemble et l’ensemble spécifié.</summary>
      <param name="other">Collection à comparer à l’ensemble actuel.</param>
      <returns>Nouvel ensemble immuable qui contient des éléments qui existent dans les deux ensembles.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.IsEmpty">
      <summary>Obtient une valeur qui indique si l’ensemble actuel immuable de hachage  est vide.</summary>
      <returns>
        <see langword="true" /> si cette instance est valide ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Détermine si l’ensemble de hachage immuable actuel est un sous-ensemble approprié (strict) d’une collection spécifiée.</summary>
      <param name="other">Collection à comparer à l’ensemble actuel.</param>
      <returns>
        <see langword="true" /> si l’ensemble actuel est un sous-ensemble approprié de la collection spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Détermine si l’ensemble actuel immuable de hachage est un sur-ensemble (strict) d’une collection spécifiée.</summary>
      <param name="other">Collection à comparer à l’ensemble actuel.</param>
      <returns>
        <see langword="true" /> si l’ensemble actuel est un sur-ensemble approprié de la collection spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Détermine si l’ensemble immuable actuel de hachage est un sous-ensemble d’une collection spécifiée.</summary>
      <param name="other">Collection à comparer à l’ensemble actuel.</param>
      <returns>
        <see langword="true" /> si l’ensemble actuel est un sous-ensemble de la collection spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Détermine si l’ensemble immuable actuel de hachage est un sur-ensemble de la collection spécifiée.</summary>
      <param name="other">Collection à comparer à l’ensemble actuel.</param>
      <returns>
        <see langword="true" /> si l’ensemble actuel est un sur-ensemble de la collection spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.KeyComparer">
      <summary>Obtient l’objet utilisé pour obtenir les codes de hachage pour les clés et pour vérifier l’égalité des valeurs dans l’ensemble immuable de hachage.</summary>
      <returns>Comparateur utilisé pour obtenir les codes de hachage pour les clés et vérifier l’égalité.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Détermine si l’ensemble immuable actuel de hachage chevauche avec la collection spécifiée.</summary>
      <param name="other">Collection à comparer à l’ensemble actuel.</param>
      <returns>
        <see langword="true" /> si l’ensemble actuel et la collection spécifiée partagent au moins un élément commun ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Remove(`0)">
      <summary>Supprime l’élément spécifié de cet ensemble immuable de hachage.</summary>
      <param name="item">Élément à supprimer.</param>
      <returns>Nouvel ensemble avec l’élément spécifié supprimé, ou ensemble actuel si l’élément est introuvable dans l’ensemble.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Détermine si l’ensemble immuable actuel de hachage et la collection spécifiée contiennent les mêmes éléments.</summary>
      <param name="other">Collection à comparer à l’ensemble actuel.</param>
      <returns>
        <see langword="true" /> si les ensemble sont égaux ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>Crée un ensemble immuable de hachage qui contient uniquement les éléments qui sont présents dans l’ensemble actuel ou dans la collection spécifiée, mais pas dans les deux.</summary>
      <param name="other">Collection à comparer à l’ensemble actuel.</param>
      <returns>Nouvel ensemble qui contient les éléments qui sont présents uniquement dans l’ensemble actuel ou dans la collection spécifiée, mais pas dans les deux.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Ajoute un élément à l’ensemble.</summary>
      <param name="item">Objet à ajouter à l’ensemble.</param>
      <exception cref="T:System.NotSupportedException">Le jeu est en lecture seule.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Supprime tous les éléments de cet ensemble.</summary>
      <exception cref="T:System.NotSupportedException">Le jeu est en lecture seule.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary>Copie les éléments de l’ensemble dans un tableau, en commençant à un index particulier.</summary>
      <param name="array">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir de l’ensemble. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="arrayIndex">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Consultez l’interface <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>Supprime la première occurrence d’un objet spécifique de l’ensemble.</summary>
      <param name="item">Objet à supprimer de l’ensemble.</param>
      <returns>
        <see langword="true" /> si la suppression de l'élément réussit ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein de la collection.</summary>
      <returns>Énumérateur qui itère la collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#Add(`0)">
      <summary>Ajoute un élément à l’ensemble actuel et retourne une valeur qui indique si l’élément a été ajouté avec succès.</summary>
      <param name="item">Élément à ajouter à la collection.</param>
      <returns>
        <see langword="true" /> si l’élément est ajouté à l’ensemble ; <see langword="false" /> si l’élément figure déjà dans l’ensemble.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Supprime de l’ensemble actuel tous les éléments de la collection spécifiée.</summary>
      <param name="other">Collection d’éléments à supprimer.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifie l'ensemble actuel pour qu'il contienne uniquement les éléments qui figurent également dans une collection spécifiée.</summary>
      <param name="other">Collection à comparer à la collection actuelle.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifie l’ensemble actuel pour qu’il contienne uniquement les éléments présents dans l’ensemble actuel ou dans la collection spécifiée, mais pas dans les deux à la fois.</summary>
      <param name="other">Collection à comparer à l’ensemble actuel.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifie l’ensemble actuel afin qu’il contienne tous les éléments présents dans l’ensemble actuel ou dans la collection spécifiée.</summary>
      <param name="other">Collection à comparer à l’ensemble actuel.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copie les éléments de l’ensemble dans un tableau, en commençant à un index particulier.</summary>
      <param name="array">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir de l’ensemble. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="arrayIndex">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#IsSynchronized">
      <summary>Consultez l’interface <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#SyncRoot">
      <summary>Consultez <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retourne un énumérateur qui itère sur un ensemble.</summary>
      <returns>Énumérateur qui peut être utilisé pour itérer via l’ensemble.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Add(`0)">
      <summary>Ajoute l’élément spécifié à cet ensemble immuable.</summary>
      <param name="item">Élément à ajouter.</param>
      <returns>Nouvel l’ensemble avec l’élément ajouté ou cet ensemble si l’élément est déjà dans cet ensemble.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Clear">
      <summary>Récupère un ensemble vide qui a la même sémantique de tri et de classement que cette instance.</summary>
      <returns>Un ensemble vide qui a la même sémantique de tri et de classement que cette instance.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>Supprime les éléments de la collection spécifiée de l’ensemble actuel.</summary>
      <param name="other">Collection d’éléments à supprimer de cet ensemble.</param>
      <returns>Nouvel ensemble avec les éléments supprimés ; ou ensemble d’origine si aucun des éléments ne se trouvaient dans l’ensemble.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>Crée un ensemble immuable qui contient des éléments qui existent dans cet ensemble et l’ensemble spécifié.</summary>
      <param name="other">Collection à comparer à l’ensemble actuel.</param>
      <returns>Nouvel ensemble immuable qui contient des éléments qui existent dans les deux ensembles.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Remove(`0)">
      <summary>Supprime l’élément spécifié de cet ensemble immuable.</summary>
      <param name="item">Élément à supprimer.</param>
      <returns>Nouvel ensemble avec l’élément spécifié supprimé, ou ensemble actuel si l’élément est introuvable dans l’ensemble.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>Crée un ensemble immuable qui contient uniquement les éléments qui sont présents dans l’ensemble actuel ou dans la collection spécifiée, mais pas dans les deux.</summary>
      <param name="other">Collection à comparer à l’ensemble actuel.</param>
      <returns>Nouvel ensemble qui contient les éléments qui sont présents uniquement dans l’ensemble actuel ou dans la collection spécifiée, mais pas dans les deux.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>Crée un nouvel ensemble immuable qui contient tous les éléments qui sont présents dans l’ensemble actuel ou dans la collection spécifiée.</summary>
      <param name="other">Collection à partir de laquelle ajouter des éléments.</param>
      <returns>Nouvel ensemble immuable avec les éléments ajoutés ; ou ensemble d’origine si tous les éléments étaient déjà présents dans le jeu.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.ToBuilder">
      <summary>Crée un ensemble immuable de hachage qui a le même contenu que cet ensemble et peut être efficacement muté entre plusieurs opérations à l’aide des interfaces standard mutables.</summary>
      <returns>Un ensemble avec le même contenu que cet ensemble peut être efficacement muté entre plusieurs opérations à l’aide des interfaces standard mutables.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.TryGetValue(`0,`0@)">
      <summary>Recherche dans l’ensemble une valeur donnée et retourne la valeur égale qu’il trouve, le cas échéant.</summary>
      <param name="equalValue">La valeur à rechercher.</param>
      <param name="actualValue">Valeur de l’ensemble que la recherche a trouvée, ou valeur d’origine si la recherche n’a trouvé aucune correspondance.</param>
      <returns>Valeur qui indique si la recherche a réussi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>Crée un nouvel ensemble immuable de hachage qui contient tous les éléments qui sont présents dans l’ensemble actuel ou dans la collection spécifiée.</summary>
      <param name="other">Collection à partir de laquelle ajouter des éléments.</param>
      <returns>Nouvel ensemble immuable de hachage avec les éléments ajoutés ; ou ensemble d’origine si tous les éléments étaient déjà présents dans l’ensemble.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.WithComparer(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Obtient une instance de l’ensemble  immuable de hachage qui utilise le comparateur d’égalité spécifié pour ses méthodes de recherche.</summary>
      <param name="equalityComparer">Comparateur d’égalité à utiliser.</param>
      <returns>Instance de cet ensemble immuable de hachage qui utilise le comparateur donné.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableInterlocked">
      <summary>Contient des mécanismes d’échange verrouillés pour les collections immuables.
NuGet package: System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,System.Func{``0,``1,``1})">
      <summary>Obtient la valeur d’un dictionnaire après l’avoir ajoutée ou mis à jour une entrée existante.</summary>
      <param name="location">Variable ou champ à mettre à jour atomiquement si l’élément spécifié ne figure pas dans le dictionnaire.</param>
      <param name="key">Clé pour la valeur à ajouter ou mettre à jour.</param>
      <param name="addValue">Valeur à utiliser si aucune valeur précédente n’existe.</param>
      <param name="updateValueFactory">Fonction qui reçoit la clé et la valeur précédente et retourne la nouvelle valeur avec laquelle mettre à jour le dictionnaire.</param>
      <typeparam name="TKey">Type de clé stockée par le dictionnaire.</typeparam>
      <typeparam name="TValue">Type de valeur stocké par le dictionnaire.</typeparam>
      <returns>Valeur ajoutée ou miss à jour.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1},System.Func{``0,``1,``1})">
      <summary>Obtient la valeur d’un dictionnaire après l’avoir ajoutée ou mis à jour une entrée existante.</summary>
      <param name="location">Variable ou champ à mettre à jour atomiquement si l’élément spécifié ne figure pas dans le dictionnaire.</param>
      <param name="key">Clé pour la valeur à ajouter ou mettre à jour.</param>
      <param name="addValueFactory">Fonction qui reçoit la clé et retourne une nouvelle valeur à ajouter au dictionnaire lorsqu’aucune valeur n’existe déjà.</param>
      <param name="updateValueFactory">Fonction qui reçoit la clé et la valeur précédente et retourne la nouvelle valeur avec laquelle mettre à jour le dictionnaire.</param>
      <typeparam name="TKey">Type de clé stockée par le dictionnaire.</typeparam>
      <typeparam name="TValue">Type de valeur stocké par le dictionnaire.</typeparam>
      <returns>Valeur ajoutée ou miss à jour.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Enqueue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0)">
      <summary>Met atomiquement en file d’attente un élément à la fin d’une file d’attente.</summary>
      <param name="location">Variable ou champ à mettre à jour atomiquement.</param>
      <param name="value">Valeur à mettre en file d’attente.</param>
      <typeparam name="T">Type des éléments contenus dans la collection</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)">
      <summary>Obtient la valeur de la clé spécifiée à partir du dictionnaire, ou si la clé est introuvable, ajoute une nouvelle valeur au dictionnaire.</summary>
      <param name="location">Variable ou champ à mettre à jour atomiquement si la clé spécifiée ne figure pas dans le dictionnaire.</param>
      <param name="key">Clé pour la valeur à obtenir ou à ajouter.</param>
      <param name="value">Valeur à ajouter au dictionnaire si la clé est introuvable.</param>
      <typeparam name="TKey">Type des clés contenues dans la collection.</typeparam>
      <typeparam name="TValue">Type des valeurs contenues dans la collection.</typeparam>
      <returns>Valeur à la clé spécifiée ou <paramref name="valueFactory" /> si la clé n’était pas présente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1})">
      <summary>Obtient la valeur de la clé spécifiée à partir du dictionnaire, ou si la clé est introuvable, ajoute une nouvelle valeur au dictionnaire.</summary>
      <param name="location">Variable ou champ à mettre à jour atomiquement si l’élément spécifié ne figure pas dans le dictionnaire.</param>
      <param name="key">Clé pour la valeur à récupérer ou à ajouter.</param>
      <param name="valueFactory">Fonction à exécuter pour obtenir la valeur à insérer dans le dictionnaire si la clé est introuvable. Ce délégué n’est pas appelé plusieurs fois.</param>
      <typeparam name="TKey">Type des clés contenues dans la collection.</typeparam>
      <typeparam name="TValue">Type des valeurs contenues dans la collection.</typeparam>
      <returns>Valeur à la clé spécifiée ou <paramref name="valueFactory" /> si la clé n’était pas présente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``3(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``2,``1},``2)">
      <summary>Obtient la valeur de la clé spécifiée à partir du dictionnaire, ou si la clé est introuvable, ajoute une nouvelle valeur au dictionnaire.</summary>
      <param name="location">Variable ou champ à mettre à jour si l’élément spécifié ne figure pas dans le dictionnaire.</param>
      <param name="key">Clé pour la valeur à récupérer ou à ajouter.</param>
      <param name="valueFactory">Fonction à exécuter pour obtenir la valeur à insérer dans le dictionnaire si la clé est introuvable.</param>
      <param name="factoryArgument">Argument à passer à la fabrique de valeurs.</param>
      <typeparam name="TKey">Type des clés contenues dans la collection.</typeparam>
      <typeparam name="TValue">Type des valeurs contenues dans la collection.</typeparam>
      <typeparam name="TArg">Type de l’argument fourni à la fabrique de valeurs.</typeparam>
      <returns>Valeur à la clé spécifiée ou <paramref name="valueFactory" /> si la clé n’était pas présente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedCompareExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0},System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Compare deux tableaux immuables pour l’égalité et, s’ils sont égaux, remplace un des tableaux.</summary>
      <param name="location">Destination, dont la valeur est comparée avec <paramref name="comparand" /> et qui peut être remplacée.</param>
      <param name="value">Valeur qui remplace la valeur de destination si la comparaison conclut à une égalité.</param>
      <param name="comparand">Valeur comparée à celle de <paramref name="location" />.</param>
      <typeparam name="T">Type d’élément stocké par le tableau.</typeparam>
      <returns>Valeur d’origine dans <paramref name="location" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Définit un tableau dans le tableau spécifié et retourne une référence au tableau d’origine, comme une opération atomique.</summary>
      <param name="location">Tableau à définir à la valeur spécifiée.</param>
      <param name="value">Valeur affectée au paramètre <paramref name="location" />.</param>
      <typeparam name="T">Type d’élément stocké par le tableau.</typeparam>
      <returns>Valeur d’origine de <paramref name="location" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedInitialize``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Définit un tableau au tableau spécifié si le tableau n’a pas été initialisé.</summary>
      <param name="location">Tableau à définir à la valeur spécifiée.</param>
      <param name="value">Valeur à laquelle le paramètre <paramref name="location" /> est défini, si elle n’est pas initialisée.</param>
      <typeparam name="T">Type d’élément stocké par le tableau.</typeparam>
      <returns>
        <see langword="true" /> si le tableau a été assigné à la valeur spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Push``1(System.Collections.Immutable.ImmutableStack{``0}@,``0)">
      <summary>Exécute un push d’un nouvel élément dans la pile.</summary>
      <param name="location">Pile à mettre à jour.</param>
      <param name="value">Valeur de push dans la pile.</param>
      <typeparam name="T">Type des éléments dans la pile.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)">
      <summary>Ajoute la clé et la valeur spécifiées au dictionnaire si la clé n’est pas dans le dictionnaire.</summary>
      <param name="location">Dictionnaire à mettre à jour avec la valeur et la clé spécifiées.</param>
      <param name="key">Clé à ajouter, si elle n’est pas déjà définie dans le dictionnaire</param>
      <param name="value">Valeur à ajouter.</param>
      <typeparam name="TKey">Type des clés contenues dans la collection.</typeparam>
      <typeparam name="TValue">Type des valeurs contenues dans la collection.</typeparam>
      <returns>
        <see langword="true" /> si la clé n’est pas dans le dictionnaire ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryDequeue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0@)">
      <summary>Supprime atomiquement et retourne l’élément spécifié à la tête de la file d’attente si la file d’attente n’est pas vide.</summary>
      <param name="location">Variable ou champ à mettre à jour atomiquement.</param>
      <param name="value">Si la file d’attente n’est pas vide, définissez sur la valeur de la tête de la file d’attente.</param>
      <typeparam name="T">Type d’éléments dans la file d’attente.</typeparam>
      <returns>
        <see langword="true" /> si la file d’attente n’est pas vide et que l’élément head a été supprimé ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryPop``1(System.Collections.Immutable.ImmutableStack{``0}@,``0@)">
      <summary>Supprime un élément du haut de la pile, s’il existe un élément à supprimer.</summary>
      <param name="location">Pile à mettre à jour.</param>
      <param name="value">Reçoit la valeur supprimée de la pile, si la pile n’est pas vide.</param>
      <typeparam name="T">Type des éléments dans la pile.</typeparam>
      <returns>
        <see langword="true" /> si un élément est supprimé de la pile ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryRemove``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1@)">
      <summary>Supprime l’élément avec la clé spécifiée, si la clé existe.</summary>
      <param name="location">Dictionnaire à mettre à jour.</param>
      <param name="key">Clé à supprimer.</param>
      <param name="value">Reçoit la valeur de l’élément supprimé, si le dictionnaire n’est pas vide.</param>
      <typeparam name="TKey">Type des clés contenues dans la collection.</typeparam>
      <typeparam name="TValue">Type des valeurs contenues dans la collection.</typeparam>
      <returns>
        <see langword="true" /> si la clé a été trouvée et supprimée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,``1)">
      <summary>Définit la clé spécifiée à la valeur spécifiée si la clé spécifiée est déjà définie sur une valeur spécifique.</summary>
      <param name="location">Dictionnaire à mettre à jour.</param>
      <param name="key">Clé à mettre à jour.</param>
      <param name="newValue">Nouvelle valeur à définir.</param>
      <param name="comparisonValue">Valeur actuelle de <paramref name="key" /> pour que la mise à jour réussisse.</param>
      <typeparam name="TKey">Type des clés contenues dans la collection.</typeparam>
      <typeparam name="TValue">Type des valeurs contenues dans la collection.</typeparam>
      <returns>
        <see langword="true" /> si <paramref name="key" /> et <paramref name="comparisonValue" /> sont présents dans le dictionnaire et que la comparaison a été mise à jour vers <paramref name="newValue" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Update``1(``0@,System.Func{``0,``0})">
      <summary>Transforme une valeur sur place avec la sémantique de transaction de verrouillage optimiste à l’aide d’une fonction de transformation spécifiée.             La transformation est retentée autant de fois que nécessaire pour remporter la concurrence de verrouillage optimiste.</summary>
      <param name="location">Variable ou champ à modifier, lesquels sont accessibles par plusieurs threads.</param>
      <param name="transformer">Fonction qui transforme la valeur. Cette fonction doit être sans effet secondaire, car elle peut s’exécuter plusieurs fois quand des concurrences se produisent avec d’autres threads.</param>
      <typeparam name="T">Type de données.</typeparam>
      <returns>
        <see langword="true" /> si la valeur de l’emplacement est modifiée en appliquant le résultat de la fonction <paramref name="transformer" /> ; <see langword="false" /> si la valeur de l’emplacement reste la même car le dernier appel de <paramref name="transformer" /> a retourné la valeur existante.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Update``2(``0@,System.Func{``0,``1,``0},``1)">
      <summary>Transforme une valeur sur place avec la sémantique de transaction de verrouillage optimiste à l’aide d’une fonction de transformation spécifiée.             La transformation est retentée autant de fois que nécessaire pour remporter la concurrence de verrouillage optimiste.</summary>
      <param name="location">Variable ou champ à modifier, lesquels sont accessibles par plusieurs threads.</param>
      <param name="transformer">Fonction qui transforme la valeur. Cette fonction doit être sans effet secondaire, car elle peut s’exécuter plusieurs fois quand des concurrences se produisent avec d’autres threads.</param>
      <param name="transformerArgument">Argument à passer à <paramref name="transformer" />.</param>
      <typeparam name="T">Type de données.</typeparam>
      <typeparam name="TArg">Type d’argument passé à l' <paramref name="transformer" />.</typeparam>
      <returns>
        <see langword="true" /> si la valeur de l’emplacement est modifiée en appliquant le résultat de la fonction <paramref name="transformer" /> ; <see langword="false" /> si la valeur de l’emplacement reste la même car le dernier appel de <paramref name="transformer" /> a retourné la valeur existante.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList">
      <summary>Fournit un ensemble de méthodes d’initialisation pour les instances de la classe <see cref="T:System.Collections.Immutable.ImmutableList`1" />.
Package NuGet : System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1">
      <summary>Crée une liste immuable vide.</summary>
      <typeparam name="T">Type des éléments à stocker dans le .</typeparam>
      <returns>Liste immuable vide.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1(``0)">
      <summary>Crée une liste immuable qui contient l’élément spécifié.</summary>
      <param name="item">Élément avec lequel préremplir la liste.</param>
      <typeparam name="T">Type des éléments dans le .</typeparam>
      <returns>Nouvelle liste qui contient l’élément spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1(``0[])">
      <summary>Crée une liste immuable qui contient le tableau spécifié d’éléments.</summary>
      <param name="items">Tableau qui contient les éléments avec lesquels préremplir la liste.</param>
      <typeparam name="T">Type des éléments dans le .</typeparam>
      <returns>Nouvelle liste immuable qui contient les éléments spécifiés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.CreateBuilder``1">
      <summary>Crée un générateur de listes immuables.</summary>
      <typeparam name="T">Type des éléments stockés dans la collection.</typeparam>
      <returns>Générateur de collections immuables.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Crée une liste immuable qui contient les éléments spécifiés.</summary>
      <param name="items">Éléments à ajouter à la liste.</param>
      <typeparam name="T">Type des éléments dans le .</typeparam>
      <returns>Liste immuable qui contient les éléments spécifiés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary>Recherche l’objet spécifié et retourne l’index de base zéro de la première occurrence trouvée dans la liste.</summary>
      <param name="list">Liste à rechercher.</param>
      <param name="item">Objet à localiser dans la liste. La valeur peut être null pour les types référence.</param>
      <typeparam name="T">Type des éléments de la liste.</typeparam>
      <returns>Index de base zéro de la première occurrence de l’élément dans la plage d’éléments de la liste qui s’étend de l’index au dernier élément, si elle est trouvée ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Recherche l’objet spécifié et retourne l’index de base zéro de la première occurrence trouvée dans la liste.</summary>
      <param name="list">Liste à rechercher.</param>
      <param name="item">Objet à localiser dans la liste immuable. La valeur peut être null pour les types référence.</param>
      <param name="equalityComparer">Comparateur d’égalité à utiliser dans la recherche.</param>
      <typeparam name="T">Type des éléments de la liste.</typeparam>
      <returns>Index de base zéro de la première occurrence de l’élément dans la plage d’éléments de la liste immuable qui s’étend de l’index au dernier élément, si elle est trouvée ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)">
      <summary>Recherche l’objet spécifié et retourne l’index de base zéro de la première occurrence trouvée dans la plage d’éléments de la liste immuable qui s’étend de l’index spécifié au dernier élément.</summary>
      <param name="list">Liste à rechercher.</param>
      <param name="item">Objet à localiser dans la liste immuable. La valeur peut être null pour les types référence.</param>
      <param name="startIndex">Index de début de base zéro de la recherche. 0 (zéro) est valide dans une liste vide.</param>
      <typeparam name="T">Type des éléments de la liste.</typeparam>
      <returns>Index de base zéro de la première occurrence de l’élément dans la plage d’éléments de la liste immuable qui s’étend de l’index au dernier élément, si elle est trouvée ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)">
      <summary>Recherche l’objet spécifié et retourne l’index de base zéro de la première occurrence trouvée dans la plage d’éléments de la liste immuable qui s’étend de l’index spécifié au dernier élément.</summary>
      <param name="list">Liste à rechercher.</param>
      <param name="item">Objet à localiser dans la liste immuable. La valeur peut être null pour les types référence.</param>
      <param name="startIndex">Index de début de base zéro de la recherche. 0 (zéro) est valide dans une liste vide.</param>
      <param name="count">Nombre d'éléments contenus dans la section où la recherche doit être effectuée.</param>
      <typeparam name="T">Type des éléments de la liste.</typeparam>
      <returns>Index de base zéro de la première occurrence de l’élément dans la plage d’éléments de la liste immuable qui s’étend de l’index au dernier élément, si elle est trouvée ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary>Recherche l’objet spécifié et retourne l’index de base zéro de la dernière occurrence trouvée dans l’intégralité de la liste immuable.</summary>
      <param name="list">Liste à rechercher.</param>
      <param name="item">Objet à localiser dans la liste immuable. La valeur peut être null pour les types référence.</param>
      <typeparam name="T">Type des éléments de la liste.</typeparam>
      <returns>Index de base zéro de la dernière occurrence de l’élément dans la liste immuable entière, si elle est trouvée ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Recherche l’objet spécifié et retourne l’index de base zéro de la dernière occurrence trouvée dans l’intégralité de la liste immuable.</summary>
      <param name="list">Liste à rechercher.</param>
      <param name="item">Objet à localiser dans la liste immuable. La valeur peut être null pour les types référence.</param>
      <param name="equalityComparer">Comparateur d’égalité à utiliser dans la recherche.</param>
      <typeparam name="T">Type des éléments de la liste.</typeparam>
      <returns>Index de base zéro de la dernière occurrence de l’élément dans la liste immuable entière, si elle est trouvée ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)">
      <summary>Recherche l’objet spécifié et retourne l’index de base zéro de la dernière occurrence dans la plage d’éléments de la liste immuable qui s’étend du premier élément à l’index spécifié.</summary>
      <param name="list">Liste à rechercher.</param>
      <param name="item">Objet à localiser dans la liste immuable. La valeur peut être null pour les types référence.</param>
      <param name="startIndex">Index de début de base zéro de la recherche vers le haut.</param>
      <typeparam name="T">Type des éléments de la liste.</typeparam>
      <returns>Index de base zéro de la dernière occurrence de l’élément dans la plage d’éléments de la liste immuable qui s’étend du premier élément à l’index, si elle est trouvée ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)">
      <summary>Recherche l’objet spécifié et retourne l’index de base zéro de la dernière occurrence dans la plage d’éléments de la liste immuable qui s’étend du premier élément à l’index spécifié.</summary>
      <param name="list">Liste à rechercher.</param>
      <param name="item">Objet à localiser dans la liste immuable. La valeur peut être null pour les types référence.</param>
      <param name="startIndex">Index de début de base zéro de la recherche vers le haut.</param>
      <param name="count">Nombre d'éléments contenus dans la section où la recherche doit être effectuée.</param>
      <typeparam name="T">Type des éléments de la liste.</typeparam>
      <returns>Index de base zéro de la dernière occurrence de l’élément dans la plage d’éléments de la liste immuable qui s’étend du premier élément à l’index, si elle est trouvée ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Remove``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary>Supprime la valeur spécifiée dans cette liste.</summary>
      <param name="list">Liste à rechercher.</param>
      <param name="value">Valeur à supprimer.</param>
      <typeparam name="T">Type des éléments de la liste.</typeparam>
      <returns>Nouvelle liste immuable avec l’élément supprimé, ou cette liste si l’élément n’est pas dans cette liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.RemoveRange``1(System.Collections.Immutable.IImmutableList{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Supprime les valeurs spécifiées de cette liste.</summary>
      <param name="list">Liste à rechercher.</param>
      <param name="items">Éléments à supprimer si des correspondances sont trouvées dans cette liste.</param>
      <typeparam name="T">Type des éléments de la liste.</typeparam>
      <returns>Nouvelle liste immuable avec les éléments supprimés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Replace``1(System.Collections.Immutable.IImmutableList{``0},``0,``0)">
      <summary>Remplace le premier élément égal dans la liste par l’élément spécifié.</summary>
      <param name="list">Liste à rechercher.</param>
      <param name="oldValue">Élément à remplacer.</param>
      <param name="newValue">Élément avec lequel remplacer l’ancien élément.</param>
      <typeparam name="T">Type des éléments de la liste.</typeparam>
      <returns>Nouvelle liste, même si la valeur en cours de remplacement est égale à la nouvelle valeur de cette position.</returns>
      <exception cref="T:System.ArgumentException">Levé quand l’ancienne valeur n’existe pas dans la liste.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Énumère une séquence et produit une liste immuable de son contenu.</summary>
      <param name="source">Séquence à énumérer.</param>
      <typeparam name="TSource">Type des éléments de la séquence.</typeparam>
      <returns>Liste immuable qui contient les éléments dans l’ordre spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Immutable.ImmutableList{``0}.Builder)">
      <summary>Crée une liste immuable à partir du contenu actuel de la collection du générateur.</summary>
      <param name="builder">Générateur à partir duquel créer la liste immuable.</param>
      <typeparam name="TSource">Type des éléments de la liste.</typeparam>
      <returns>Liste immuable qui contient le contenu actuel de la collection du générateur.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1">
      <summary>Représente une liste immuable, qui est une liste fortement typée d’objets accessibles par index.
NuGet package: System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="T">Type d'éléments de la liste.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Add(`0)">
      <summary>Ajoute l’objet spécifié à la fin de la liste immuable.</summary>
      <param name="value">Objet à ajouter.</param>
      <returns>Nouvelle liste immuable contenant l'objet ajouté.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Ajoute les éléments de la collection spécifiée à la fin de la liste immuable.</summary>
      <param name="items">Collection dont les éléments seront ajoutés à la fin de la liste.</param>
      <returns>Nouvelle liste immuable contenant les éléments ajoutés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(`0)">
      <summary>Recherche toute la liste triée d’un élément à l’aide du comparateur par défaut et retourne l’index de base zéro de l’élément.</summary>
      <param name="item">Objet à trouver. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <returns>Index de base zéro de l’élément dans la liste triée, si l’élément est trouvé ; sinon, un nombre négatif qui est le complément de bits de l’index de l’élément suivant qui est supérieur à l’élément ou, s’il n’existe aucun élément supérieur, le complément de bits de <see cref="P:System.Collections.ICollection.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException">Le comparateur par défaut ne peut pas trouver d’implémentation du comparateur de type T.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary>Recherche toute la liste triée d’un élément à l’aide du comparateur spécifié et retourne l’index de base zéro de l’élément.</summary>
      <param name="item">Objet à trouver. La valeur peut être null pour les types référence.</param>
      <param name="comparer">Implémentation du comparateur à utiliser lors de la comparaison d’éléments, ou null pour utiliser le comparateur par défaut.</param>
      <returns>Index de base zéro de l’élément dans la liste triée, si l’élément est trouvé ; sinon, un nombre négatif qui est le complément de bits de l’index de l’élément suivant qui est supérieur à l’élément ou, s’il n’existe aucun élément supérieur, le complément de bits de <see cref="P:System.Collections.ICollection.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException">Le paramètre comparer a la valeur <see langword="null" />, et le comparateur par défaut ne peut pas trouver d’implémentation du comparateur de type T.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary>Recherche une plage d’éléments dans la liste triée d’un élément à l’aide du comparateur spécifié et retourne l’index de base zéro de l’élément.</summary>
      <param name="index">Index de début de base zéro de la plage dans laquelle effectuer la recherche.</param>
      <param name="count">Longueur de la plage dans laquelle effectuer la recherche.</param>
      <param name="item">Objet à trouver. La valeur peut être null pour les types référence.</param>
      <param name="comparer">Implémentation du comparateur à utiliser lors de la comparaison d’éléments, ou <see langword="null" /> pour utiliser le comparateur par défaut.</param>
      <returns>Index de base zéro de l’élément dans la liste triée, si l’élément est trouvé ; sinon, un nombre négatif qui est le complément de bits de l’index de l’élément suivant qui est supérieur à l’élément ou, s’il n’existe aucun élément supérieur, le complément de bits de <paramref name="count" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre index est inférieur à 0 ou <paramref name="count" /> est inférieur à 0.</exception>
      <exception cref="T:System.ArgumentException">index et <paramref name="count" /> ne désignent pas une plage valide dans la liste.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> a la valeur <see langword="null" />, et le comparateur par défaut ne peut pas trouver d’implémentation du comparateur de type T.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1.Builder">
      <summary>Représente une liste qui mute, avec peu ou pas d’allocations de mémoire, et qui peut produire ou créer très efficacement sur les instances de liste immuable.
NuGet package: System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Add(`0)">
      <summary>Ajoute un élément à la liste immuable.</summary>
      <param name="item">Élément à ajouter à la liste.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Ajoute une série d’éléments à la fin de cette liste.</summary>
      <param name="items">Éléments à ajouter à la fin de la liste.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0)">
      <summary>Recherche l’ensemble de la <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> pour un élément en utilisant le comparateur par défaut et retourne l’index de base zéro de l’élément.</summary>
      <param name="item">Objet à trouver. La valeur peut être null pour les types référence.</param>
      <returns>Index de base zéro de l’élément dans le <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />, si l’élément est trouvé ; sinon, un nombre négatif qui est le complément de bits de l’index de l’élément suivant est supérieur à <paramref name="item" />.</returns>
      <exception cref="T:System.InvalidOperationException">Le comparateur par défaut <see cref="P:System.Collections.Generic.Comparer`1.Default" /> ne peut pas trouver d’implémentation de l’interface générique <see cref="T:System.IComparable`1" /> ou de l’interface <see cref="T:System.IComparable" /> pour le type T.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary>Recherche dans l’ensemble de la <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> d’un élément à l’aide du comparateur spécifié et retourne l’index de base zéro de l’élément.</summary>
      <param name="item">Objet à trouver. Cette valeur peut être null pour les types référence.</param>
      <param name="comparer">Implémentation à utiliser lors de la comparaison d’éléments, ou <see langword="null" /> pour le comparateur par défaut.</param>
      <returns>Index de base zéro de l’élément dans le <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />, si l’élément est trouvé ; sinon, un nombre négatif qui est le complément de bits de l’index de l’élément suivant est supérieur à <paramref name="item" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> est <see langword="null" />, et le comparateur par défaut <see cref="P:System.Collections.Generic.Comparer`1.Default" /> ne peut pas trouver d’implémentation de l’interface générique <see cref="T:System.IComparable`1" /> ou de l’interface <see cref="T:System.IComparable" /> pour le type T.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary>Recherche dans la plage spécifiée de la <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> d’un élément à l’aide du comparateur spécifié et retourne l’index de base zéro de l’élément.</summary>
      <param name="index">Index de début de base zéro de la plage dans laquelle effectuer la recherche.</param>
      <param name="count">Longueur de la plage dans laquelle effectuer la recherche.</param>
      <param name="item">Objet à trouver. Cette valeur peut être null pour les types référence.</param>
      <param name="comparer">Implémentation à utiliser lors de la comparaison d’éléments, ou <see langword="null" /> pour le comparateur par défaut.</param>
      <returns>Index de base zéro de l’élément dans le <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />, si l’élément est trouvé ; sinon, un nombre négatif qui est le complément de bits de l’index de l’élément suivant est supérieur à <paramref name="item" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> est inférieur à 0.

ou -

<paramref name="count" /> est inférieur à 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> et <paramref name="count" /> ne désignent pas une plage valide dans <see cref="T:System.Collections.Generic.List`1" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> est <see langword="null" />, et le comparateur par défaut <see cref="P:System.Collections.Generic.Comparer`1.Default" /> ne peut pas trouver d’implémentation de l’interface générique <see cref="T:System.IComparable`1" /> ou de l’interface <see cref="T:System.IComparable" /> pour le type T.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Clear">
      <summary>Supprime tous les éléments de la liste immuable.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Contains(`0)">
      <summary>Détermine si la liste immuable contient une valeur spécifique.</summary>
      <param name="item">Objet à localiser dans la liste.</param>
      <returns>
        <see langword="true" /> si l’élément est trouvé dans la liste ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ConvertAll``1(System.Func{`0,``0})">
      <summary>Crée une nouvelle liste immuable à partir de la liste représentée par ce générateur à l’aide de la fonction de convertisseur.</summary>
      <param name="converter">Fonction de convertisseur.</param>
      <typeparam name="TOutput">Type de la sortie de la fonction de conversion déléguée.</typeparam>
      <returns>Nouvelle liste immuable provenant de la liste représentée par ce générateur.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(`0[])">
      <summary>Copie l’intégralité de la liste immuable dans un tableau unidimensionnel compatible, en commençant au début du tableau cible.</summary>
      <param name="array">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir de la liste immuable. Ce tableau doit avoir une indexation de base zéro.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(`0[],System.Int32)">
      <summary>Copie l’intégralité de la liste immuable dans un tableau unidimensionnel compatible, en commençant à l’index spécifié du tableau cible.</summary>
      <param name="array">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir de la liste immuable. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="arrayIndex">Index de base zéro dans un tableau au niveau duquel commencer la copie.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary>Copie l’intégralité de la liste immuable dans un tableau unidimensionnel compatible, en commençant à l’index spécifié du tableau cible.</summary>
      <param name="index">Index de base zéro dans la liste immuable source auquel la copie commence.</param>
      <param name="array">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir de la liste immuable. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="arrayIndex">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
      <param name="count">Nombre d'éléments à copier.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.Count">
      <summary>Obtient le nombre d’éléments dans cette liste immuable.</summary>
      <returns>Nombre d’éléments dans cette liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Exists(System.Predicate{`0})">
      <summary>Détermine si la liste immuable contient des éléments qui correspondent aux conditions définies par le prédicat spécifié.</summary>
      <param name="match">Délégué qui définit les conditions des éléments à rechercher.</param>
      <returns>
        <see langword="true" /> si la liste immuable contient un ou plusieurs éléments qui correspondent aux conditions définies par le prédicat spécifié ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Find(System.Predicate{`0})">
      <summary>Recherche un élément qui correspond aux conditions définies par le prédicat spécifié et retourne la première occurrence de l’intégralité de la liste immuable.</summary>
      <param name="match">Délégué qui définit les conditions de l’élément à rechercher.</param>
      <returns>Premier élément qui correspond aux conditions définies par le prédicat spécifié, s'il est trouvé ; sinon, valeur par défaut du type <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindAll(System.Predicate{`0})">
      <summary>Récupère tous les éléments qui correspondent aux conditions définies par le prédicat spécifié.</summary>
      <param name="match">Délégué qui définit les conditions des éléments à rechercher.</param>
      <returns>Liste immuable contenant tous les éléments qui correspondent aux conditions définies par le prédicat spécifié, le cas échéant ; sinon, une liste immuable vide.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>Recherche un élément qui correspond aux conditions définies par le prédicat spécifié et retourne l’index de base zéro de la première occurrence trouvée dans la plage d’éléments de la liste immuable qui commence à l’index spécifié et contient le nombre spécifié d’éléments.</summary>
      <param name="startIndex">Index de début de base zéro de la recherche.</param>
      <param name="count">Nombre d'éléments contenus dans la section où la recherche doit être effectuée.</param>
      <param name="match">Délégué qui définit les conditions de l’élément à rechercher.</param>
      <returns>Index de base zéro de la première occurrence d’un élément qui répond aux conditions définies par <paramref name="match" />, si cette occurrence est trouvée ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Predicate{`0})">
      <summary>Recherche un élément qui correspond aux conditions définies par le prédicat spécifié et retourne l’index de base zéro de la première occurrence trouvée dans la plage d’éléments de la liste immuable qui s’étend de l’index spécifié au dernier élément.</summary>
      <param name="startIndex">Index de début de base zéro de la recherche.</param>
      <param name="match">Délégué qui définit les conditions de l’élément à rechercher.</param>
      <returns>Index de base zéro de la première occurrence d’un élément qui répond aux conditions définies par <paramref name="match" />, si cette occurrence est trouvée ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Predicate{`0})">
      <summary>Recherche un élément qui correspond aux conditions définies par le prédicat spécifié et retourne l’index de base zéro de la première occurrence de l’intégralité de la liste immuable.</summary>
      <param name="match">Délégué qui définit les conditions de l’élément à rechercher.</param>
      <returns>Index de base zéro de la première occurrence d’un élément qui répond aux conditions définies par <paramref name="match" />, si cette occurrence est trouvée ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLast(System.Predicate{`0})">
      <summary>Recherche un élément qui correspond aux conditions définies par le prédicat spécifié et retourne la dernière occurrence de l’intégralité de la liste immuable</summary>
      <param name="match">Délégué qui définit les conditions de l’élément à rechercher.</param>
      <returns>Dernier élément qui correspond aux conditions définies par le prédicat spécifié, s’il est trouvé ; sinon, valeur par défaut du type <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>Recherche un élément qui correspond aux conditions définies par le prédicat spécifié et retourne l’index de base zéro de la dernière occurrence trouvée dans la plage d’éléments de la liste immuable qui contient le nombre d’éléments spécifié et se termine à l’index spécifié.</summary>
      <param name="startIndex">Index de début de base zéro de la recherche vers le haut.</param>
      <param name="count">Nombre d'éléments contenus dans la section où la recherche doit être effectuée.</param>
      <param name="match">Délégué qui définit les conditions de l’élément à rechercher.</param>
      <returns>Index de base zéro de la dernière occurrence d’un élément qui correspond aux conditions définies par <paramref name="match" />, si cette occurrence est trouvée ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary>Recherche un élément qui correspond aux conditions définies par le prédicat spécifié et retourne l’index de base zéro de la dernière occurrence dans la plage d’éléments de la liste immuable qui s’étend du premier élément à l’index spécifié.</summary>
      <param name="startIndex">Index de début de base zéro de la recherche vers le haut.</param>
      <param name="match">Délégué qui définit les conditions de l’élément à rechercher.</param>
      <returns>Index de base zéro de la dernière occurrence d’un élément qui correspond aux conditions définies par <paramref name="match" />, si cette occurrence est trouvée ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Predicate{`0})">
      <summary>Recherche un élément qui correspond aux conditions définies par le prédicat spécifié et retourne l’index de base zéro de la dernière occurrence de l’intégralité de la liste immuable.</summary>
      <param name="match">Délégué qui définit les conditions de l’élément à rechercher.</param>
      <returns>Index de base zéro de la dernière occurrence d’un élément qui correspond aux conditions définies par <paramref name="match" />, si cette occurrence est trouvée ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ForEach(System.Action{`0})">
      <summary>Exécute l’action spécifiée sur chaque élément de la liste.</summary>
      <param name="action">Délégué à exécuter sur chaque élément de la liste.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein de la collection.</summary>
      <returns>Énumérateur permettant d’effectuer une itération au sein de la liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.GetRange(System.Int32,System.Int32)">
      <summary>Crée une copie superficielle d’une plage d’éléments dans la liste immuable source.</summary>
      <param name="index">Index de base zéro auquel la plage commence.</param>
      <param name="count">Nombre d'éléments dans la plage.</param>
      <returns>Copie superficielle d’une plage d’éléments dans la liste immuable source.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0)">
      <summary>Recherche l’objet spécifié et retourne l’index de base zéro de la première occurrence dans la plage d’éléments de la liste immuable.</summary>
      <param name="item">Objet à localiser dans la liste immuable. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <returns>Index de base zéro de la première occurrence de <paramref name="item" /> dans la plage d’éléments de la liste immuable, le cas échéant ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32)">
      <summary>Recherche l’objet spécifié et retourne l’index de base zéro de la première occurrence trouvée dans la plage d’éléments de la liste immuable qui s’étend de l’index spécifié au dernier élément.</summary>
      <param name="item">Objet à localiser dans la liste immuable. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <param name="index">Index de début de base zéro de la recherche. 0 (zéro) est valide dans une liste vide.</param>
      <returns>Index de base zéro de la première occurrence de l’élément dans la plage d’éléments de la liste immuable qui s’étend de <paramref name="index" /> jusqu’au dernier élément, le cas échéant ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32)">
      <summary>Recherche l’objet spécifié et retourne l’index de base zéro de la première occurrence trouvée dans la plage d’éléments de la liste immuable qui commence à l’index spécifié et qui contient le nombre spécifié d’éléments.</summary>
      <param name="item">Objet à localiser dans la liste immuable. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <param name="index">Index de début de base zéro de la recherche. 0 (zéro) est valide dans une liste vide.</param>
      <param name="count">Nombre d'éléments contenus dans la section où la recherche doit être effectuée.</param>
      <returns>Index de base zéro de la première occurrence de l’élément dans la plage d’éléments de la liste immuable qui commence à <paramref name="index" /> et contient le nombre <paramref name="count" /> d’éléments, le cas échéant ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Recherche l'objet spécifié et retourne l'index de base zéro de la première occurrence trouvée dans la plage d'éléments de <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> qui commence à l'index spécifié et qui contient le nombre d'éléments spécifié.</summary>
      <param name="item">Objet à localiser dans la liste immuable. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <param name="index">Index de début de base zéro de la recherche. 0 (zéro) est valide dans une liste vide.</param>
      <param name="count">Nombre d'éléments à explorer.</param>
      <param name="equalityComparer">Comparateur de valeur à utiliser pour comparer les éléments en termes d’égalité.</param>
      <returns>Index de base zéro de la première occurrence de l’élément dans la plage d’éléments de la liste immuable qui commence à <paramref name="index" /> et contient le nombre <paramref name="count" /> d’éléments, le cas échéant ; sinon, -1</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Insert(System.Int32,`0)">
      <summary>Insère un élément dans la liste immuable à l’index spécifié.</summary>
      <param name="index">Index de base zéro au niveau duquel <paramref name="item" /> doit être inséré.</param>
      <param name="item">Objet à insérer dans la liste immuable.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>Insère les éléments d’une collection dans la liste immuable à l’index spécifié.</summary>
      <param name="index">Index de base zéro au niveau duquel les nouveaux éléments devraient être insérés.</param>
      <param name="items">Collection dont les éléments doivent être insérés dans la liste immuable. La collection elle-même ne peut pas avoir la valeur <see langword="null" />, mais elle peut contenir des éléments qui sont null, si le type <c>T</c> est un type référence.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.Item(System.Int32)">
      <summary>Obtient ou définit la valeur d’un index donné dans la liste.</summary>
      <param name="index">Index de l’élément à obtenir ou à définir.</param>
      <returns>Valeur à l’index spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ItemRef(System.Int32)">
      <summary>Obtient une référence en lecture seule à la valeur pour un <paramref name="index" /> donné dans la liste.</summary>
      <param name="index">Index de l’élément souhaité.</param>
      <returns>Référence en lecture seule à la valeur au niveau de l’<paramref name="index" /> spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0)">
      <summary>Recherche l’objet spécifié et retourne l’index de base zéro de la dernière occurrence trouvée dans l’intégralité de la liste immuable.</summary>
      <param name="item">Objet à localiser dans la liste immuable. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <returns>Index de base zéro de la dernière occurrence de <paramref name="item" /> dans l’intégralité de la liste immuable, le cas échéant ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32)">
      <summary>Recherche l’objet spécifié et retourne l’index de base zéro de la dernière occurrence dans la plage d’éléments de la liste immuable qui s’étend du premier élément à l’index spécifié.</summary>
      <param name="item">Objet à localiser dans la liste immuable. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <param name="startIndex">Index de début de base zéro de la recherche vers le haut.</param>
      <returns>Index de base zéro de la dernière occurrence de <paramref name="item" /> dans la plage d’éléments de la liste immuable qui s’étend du premier élément à <paramref name="index" />, le cas échéant ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary>Recherche l’objet spécifié et retourne l’index de base zéro de la dernière occurrence trouvée dans la plage d’éléments de la liste immuable qui contient le nombre spécifié d’éléments et se termine à l’index spécifié.</summary>
      <param name="item">Objet à localiser dans la liste immuable. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <param name="startIndex">Index de début de base zéro de la recherche vers le haut.</param>
      <param name="count">Nombre d'éléments contenus dans la section où la recherche doit être effectuée.</param>
      <returns>Index de base zéro de la dernière occurrence de <paramref name="item" /> dans la plage d’éléments de la liste immuable qui contient le nombre d’éléments <paramref name="count" /> et se termine à <paramref name="index" />, le cas échéant ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Recherche l’objet spécifié et retourne l’index de base zéro de la dernière occurrence trouvée dans la plage d’éléments de la liste immuable qui contient le nombre spécifié d’éléments et se termine à l’index spécifié.</summary>
      <param name="item">Objet à localiser dans la liste immuable. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <param name="startIndex">Index de début de base zéro de la recherche. 0 (zéro) est valide dans une liste vide.</param>
      <param name="count">Nombre d'éléments à explorer.</param>
      <param name="equalityComparer">Comparateur de valeur à utiliser pour comparer les éléments en termes d’égalité.</param>
      <returns>Index de base zéro de la première occurrence de l’élément dans la plage d’éléments de la liste immuable qui commence à <paramref name="index" /> et contient le nombre <paramref name="count" /> d’éléments, le cas échéant ; sinon, -1</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Remove(`0)">
      <summary>Supprime la première occurrence d’un objet spécifique de la liste immuable.</summary>
      <param name="item">Objet à supprimer de la liste.</param>
      <returns>
        <see langword="true" /> si l’élément a été correctement supprimé de la liste ; sinon, <see langword="false" />. Cette méthode retourne également <see langword="false" /> si l’élément est introuvable dans la liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.RemoveAll(System.Predicate{`0})">
      <summary>Supprime tous les éléments qui correspondent aux conditions définies par le prédicat spécifié.</summary>
      <param name="match">Délégué qui définit les conditions des éléments à supprimer.</param>
      <returns>Nombre d’éléments supprimés de la liste immuable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.RemoveAt(System.Int32)">
      <summary>Supprime l’élément à l’index spécifié de la liste immuable.</summary>
      <param name="index">Index de base zéro de l’élément à supprimer de la liste.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Reverse">
      <summary>Inverse l’ordre des éléments dans l’intégralité de la liste immuable.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Reverse(System.Int32,System.Int32)">
      <summary>Inverse l’ordre des éléments dans la plage spécifiée de la liste immuable.</summary>
      <param name="index">Index de début de base zéro de la plage à inverser.</param>
      <param name="count">Nombre d'éléments à inverser dans la plage.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort">
      <summary>Trie les éléments dans l’intégralité de la liste immuable à l’aide du comparateur par défaut.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>Trie les éléments dans l’intégralité de la liste immuable à l’aide du comparateur spécifié.</summary>
      <param name="comparer">L’implémentation à utiliser lors de la comparaison d’éléments, ou <see langword="null" /> pour utiliser le comparateur par défaut (<see cref="P:System.Collections.Generic.Comparer`1.Default" />).</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Comparison{`0})">
      <summary>Trie les éléments dans l’intégralité de la liste immuable à l’aide de l’objet de comparaison spécifié.</summary>
      <param name="comparison">Objet à utiliser lors de la comparaison d’éléments.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparison" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>Trie les éléments dans une plage d’éléments de la liste immuable à l’aide du comparateur spécifié.</summary>
      <param name="index">Index de début de base zéro de la plage à trier.</param>
      <param name="count">Longueur de la plage à trier.</param>
      <param name="comparer">L’implémentation à utiliser lors de la comparaison d’éléments, ou <see langword="null" /> pour utiliser le comparateur par défaut (<see cref="P:System.Collections.Generic.Comparer`1.Default" />).</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Obtient une valeur qui indique si cette instance est en lecture seule.</summary>
      <returns>Toujours <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein de la collection.</summary>
      <returns>Énumérateur permettant d'effectuer une itération au sein de la collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copie les éléments de la liste dans un tableau, en commençant à un index de tableau particulier.</summary>
      <param name="array">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir de la liste. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="arrayIndex">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#IsSynchronized">
      <summary>Obtient une valeur qui indique si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread safe).</summary>
      <returns>
        <see langword="true" /> si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe) ; sinon <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#SyncRoot">
      <summary>Obtient un objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein de la collection.</summary>
      <returns>Énumérateur permettant d'effectuer une itération au sein de la collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Add(System.Object)">
      <summary>Ajoute un élément à la liste.</summary>
      <param name="value">Objet à ajouter à la liste.</param>
      <returns>Position à laquelle le nouvel élément a été inséré, ou -1 pour indiquer que l'élément n'a pas été inséré dans la collection.</returns>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Clear">
      <summary>Supprime tous les éléments de la liste.</summary>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Contains(System.Object)">
      <summary>Détermine si la liste contient une valeur spécifique.</summary>
      <param name="value">Objet à localiser dans la liste.</param>
      <returns>
        <see langword="true" /> si l’<see cref="T:System.Object" /> se trouve dans la liste ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IndexOf(System.Object)">
      <summary>Détermine l’index d’un élément spécifique de la liste.</summary>
      <param name="value">Objet à localiser dans la liste.</param>
      <returns>Index de <paramref name="value" /> s'il figure dans la liste ; sinon, -1.</returns>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Insère un élément dans la liste à l’index spécifié.</summary>
      <param name="index">Index de base zéro au niveau duquel <paramref name="value" /> doit être inséré.</param>
      <param name="value">Objet à insérer dans la liste.</param>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IsFixedSize">
      <summary>Obtient une valeur qui indique si <see cref="T:System.Collections.IList" /> est de taille fixe.</summary>
      <returns>
        <see langword="true" /> si <see cref="T:System.Collections.IList" /> est de taille fixe ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IsReadOnly">
      <summary>Obtient une valeur qui indique si l'objet <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule.</summary>
      <returns>
        <see langword="true" /> si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Item(System.Int32)">
      <summary>Obtient ou définit le <see cref="T:System.Object" /> à l'index spécifié.</summary>
      <param name="index">Index.</param>
      <returns>Objet au niveau de l’index spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Remove(System.Object)">
      <summary>Supprime la première occurrence d’un objet spécifique de la liste.</summary>
      <param name="value">Objet à supprimer de la liste.</param>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ToImmutable">
      <summary>Crée une liste immuable en fonction du contenu de cette instance.</summary>
      <returns>Liste immuable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.TrueForAll(System.Predicate{`0})">
      <summary>Détermine si chaque élément de la liste immuable correspond aux conditions définies par le prédicat spécifié.</summary>
      <param name="match">Délégué qui définit les conditions à vérifier par rapport aux éléments.</param>
      <returns>
        <see langword="true" /> si chaque élément de la liste immuable correspond aux conditions définies par le prédicat spécifié ; sinon, <see langword="false" />. Si la liste ne comporte pas d'éléments, la valeur de retour est <see langword="true" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Clear">
      <summary>Supprime tous les éléments de la liste immuable.</summary>
      <returns>Une liste vide qui conserve la même sémantique de tri ou sans tri que l’instance possède.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Contains(`0)">
      <summary>Détermine si cette liste immuable contient la valeur spécifiée.</summary>
      <param name="value">Valeur à rechercher.</param>
      <returns>
        <see langword="true" /> si la liste contient la valeur spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ConvertAll``1(System.Func{`0,``0})">
      <summary>Convertit les éléments dans la liste immuable actuelle vers un autre type et retourne une liste contenant les éléments convertis.</summary>
      <param name="converter">Délégué qui convertit chaque élément d’un type en un autre type.</param>
      <typeparam name="TOutput">Type des éléments du tableau cible.</typeparam>
      <returns>Liste du type cible contenant les éléments convertis à partir du <see cref="T:System.Collections.Immutable.ImmutableList`1" /> actif.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(`0[])">
      <summary>Copie l’intégralité de la liste immuable dans un tableau unidimensionnel compatible, en commençant au début du tableau cible.</summary>
      <param name="array">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir de la liste immuable. Ce tableau doit avoir une indexation de base zéro.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(`0[],System.Int32)">
      <summary>Copie l’intégralité de la liste immuable dans un tableau unidimensionnel compatible, en commençant à l’index spécifié du tableau cible.</summary>
      <param name="array">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir de la liste immuable. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="arrayIndex">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary>Copie une plage d’éléments de la liste immuable dans un tableau unidimensionnel compatible, en commençant à l’index spécifié du tableau cible.</summary>
      <param name="index">Index de base zéro dans la liste immuable source auquel la copie commence.</param>
      <param name="array">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir de la liste immuable. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="arrayIndex">Index de base zéro dans un tableau au niveau duquel commencer la copie.</param>
      <param name="count">Nombre d'éléments à copier.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Count">
      <summary>Obtient le nombre d’éléments contenus dans la liste.</summary>
      <returns>Nombre d'éléments dans la liste.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableList`1.Empty">
      <summary>Obtient un jeu vide avec le comparateur de tri par défaut.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1.Enumerator">
      <summary>Énumère le contenu d’une arborescence binaire.
Package NuGet : System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Enumerator.Current">
      <summary>Obtient l'élément situé à la position actuelle de l'énumérateur.</summary>
      <returns>Élément situé à la position actuelle de l’énumérateur.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.Dispose">
      <summary>Libère les ressources utilisées par l'instance actuelle de la classe <see cref="T:System.Collections.Immutable.ImmutableList`1.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.MoveNext">
      <summary>Avance l’énumération à l’élément suivant de la liste immuable.</summary>
      <returns>
        <see langword="true" /> si l’énumérateur a pu avancer jusqu’à l’élément suivant ; <see langword="false" /> si l’énumérateur a dépassé la fin de la liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.Reset">
      <summary>Rétablit l’énumérateur à sa position initiale, qui précède le premier élément de la liste immuable.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Élément actuel.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Exists(System.Predicate{`0})">
      <summary>Détermine si la liste immuable contient des éléments qui correspondent aux conditions définies par le prédicat spécifié.</summary>
      <param name="match">Délégué qui définit les conditions des éléments à rechercher.</param>
      <returns>
        <see langword="true" /> si la liste immuable contient un ou plusieurs éléments qui correspondent aux conditions définies par le prédicat spécifié ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Find(System.Predicate{`0})">
      <summary>Recherche un élément qui correspond aux conditions définies par le prédicat spécifié et retourne la première occurrence de l’intégralité de la liste immuable.</summary>
      <param name="match">Délégué qui définit les conditions de l’élément à rechercher.</param>
      <returns>Premier élément qui correspond aux conditions définies par le prédicat spécifié, s'il est trouvé ; sinon, valeur par défaut du type <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindAll(System.Predicate{`0})">
      <summary>Récupère tous les éléments qui correspondent aux conditions définies par le prédicat spécifié.</summary>
      <param name="match">Délégué qui définit les conditions des éléments à rechercher.</param>
      <returns>Liste immuable qui contient tous les éléments qui correspondent aux conditions définies par le prédicat spécifié, le cas échéant ; sinon, une liste immuable vide.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>Recherche un élément qui correspond aux conditions définies par le prédicat spécifié et retourne l’index de base zéro de la première occurrence trouvée dans la plage d’éléments de la liste immuable qui commence à l’index spécifié et contient le nombre spécifié d’éléments.</summary>
      <param name="startIndex">Index de début de base zéro de la recherche.</param>
      <param name="count">Nombre d'éléments contenus dans la section où la recherche doit être effectuée.</param>
      <param name="match">Délégué qui définit les conditions de l’élément à rechercher.</param>
      <returns>Index de base zéro de la première occurrence d’un élément qui répond aux conditions définies par la correspondance, le cas échéant ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Predicate{`0})">
      <summary>Recherche un élément qui correspond aux conditions définies par le prédicat spécifié et retourne l’index de base zéro de la première occurrence trouvée dans la plage d’éléments de la liste immuable qui s’étend de l’index spécifié au dernier élément.</summary>
      <param name="startIndex">Index de début de base zéro de la recherche.</param>
      <param name="match">Délégué qui définit les conditions de l’élément à rechercher.</param>
      <returns>Index de base zéro de la première occurrence d’un élément qui répond aux conditions définies par la correspondance, le cas échéant ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Predicate{`0})">
      <summary>Recherche un élément qui correspond aux conditions définies par le prédicat spécifié et retourne l’index de base zéro de la première occurrence de l’intégralité de la liste immuable.</summary>
      <param name="match">Délégué qui définit les conditions de l’élément à rechercher.</param>
      <returns>Index de base zéro de la première occurrence d’un élément qui répond aux conditions définies par la correspondance, le cas échéant ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLast(System.Predicate{`0})">
      <summary>Recherche un élément qui correspond aux conditions définies par le prédicat spécifié et retourne la dernière occurrence de l’intégralité de la liste immuable</summary>
      <param name="match">Délégué qui définit les conditions de l’élément à rechercher.</param>
      <returns>Dernier élément qui correspond aux conditions définies par le prédicat spécifié, le cas échéant ; sinon, valeur par défaut du type <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>Recherche un élément qui correspond aux conditions définies par le prédicat spécifié et retourne l’index de base zéro de la dernière occurrence trouvée dans la plage d’éléments de la liste immuable qui contient le nombre d’éléments spécifié et se termine à l’index spécifié.</summary>
      <param name="startIndex">Index de début de base zéro de la recherche vers le haut.</param>
      <param name="count">Nombre d'éléments contenus dans la section où la recherche doit être effectuée.</param>
      <param name="match">Délégué qui définit les conditions de l’élément à rechercher.</param>
      <returns>Index de base zéro de la dernière occurrence d’un élément qui correspond aux conditions définies par <paramref name="match" />, le cas échéant ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary>Recherche un élément qui correspond aux conditions définies par le prédicat spécifié et retourne l’index de base zéro de la dernière occurrence dans la plage d’éléments de la liste immuable qui s’étend du premier élément à l’index spécifié.</summary>
      <param name="startIndex">Index de début de base zéro de la recherche vers le haut.</param>
      <param name="match">Délégué qui définit les conditions de l’élément à rechercher.</param>
      <returns>Index de base zéro de la dernière occurrence d’un élément qui correspond aux conditions définies par <paramref name="match" />, le cas échéant ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Predicate{`0})">
      <summary>Recherche un élément qui correspond aux conditions définies par le prédicat spécifié et retourne l’index de base zéro de la dernière occurrence de l’intégralité de la liste immuable.</summary>
      <param name="match">Délégué qui définit les conditions de l’élément à rechercher.</param>
      <returns>Index de base zéro de la dernière occurrence d’un élément qui correspond aux conditions définies par <paramref name="match" />, le cas échéant ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ForEach(System.Action{`0})">
      <summary>Exécute l’action spécifiée sur chaque élément de la liste immuable.</summary>
      <param name="action">Délégué à exécuter sur chaque élément de la liste immuable.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.GetEnumerator">
      <summary>Retourne un énumérateur qui effectue une itération au sein de la liste immuable.</summary>
      <returns>Énumérateur qui peut être utilisé pour itérer la liste immuable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.GetRange(System.Int32,System.Int32)">
      <summary>Crée une copie superficielle d’une plage d’éléments dans la liste immuable source.</summary>
      <param name="index">Index de base zéro auquel la plage commence.</param>
      <param name="count">Nombre d'éléments dans la plage.</param>
      <returns>Copie superficielle d’une plage d’éléments dans la liste immuable source.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.IndexOf(`0)">
      <summary>Recherche l’objet spécifié et retourne l’index de base zéro de la première occurrence trouvée dans l’intégralité de la liste immuable.</summary>
      <param name="value">Objet à localiser dans la liste immuable. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <returns>Index de base zéro de la première occurrence de <paramref name="value" /> dans l’intégralité de la liste immuable, le cas échéant ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Recherche l’objet spécifié et retourne l’index de base zéro de la première occurrence trouvée dans la plage d’éléments de la liste qui commence à l’index spécifié et qui contient le nombre d’éléments spécifié.</summary>
      <param name="item">Objet à localiser dans la liste, la valeur peut être null pour les types référence.</param>
      <param name="index">Index de début de base zéro de la recherche. 0 (zéro) est valide dans une liste vide.</param>
      <param name="count">Nombre d'éléments contenus dans la section où la recherche doit être effectuée.</param>
      <param name="equalityComparer">Comparateur d’égalité à utiliser dans la recherche.</param>
      <returns>Index de base zéro de la première occurrence de l’élément dans la plage d’éléments de la liste qui commence à l’index et qui contient le nombre d’éléments, si elle est trouvée ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Insert(System.Int32,`0)">
      <summary>Insère l’objet spécifié dans la liste immuable à l’index spécifié.</summary>
      <param name="index">Index de base zéro au niveau duquel insérer l’objet.</param>
      <param name="item">Objet à insérer.</param>
      <returns>Nouvelle liste immuable une fois que l’objet est inséré.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>Insère les éléments d’une collection dans la liste immuable à l’index spécifié.</summary>
      <param name="index">Index de base zéro au niveau duquel insérer les éléments.</param>
      <param name="items">Collection dont les éléments doivent être insérés.</param>
      <returns>Nouvelle liste immuable une fois que les éléments ont été insérés.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.IsEmpty">
      <summary>Obtient une valeur qui indique si cette liste est vide.</summary>
      <returns>
        <see langword="true" /> si la liste est vide ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Item(System.Int32)">
      <summary>Obtient l’élément à l’index spécifié de la liste.</summary>
      <param name="index">Index de l'élément à récupérer.</param>
      <returns>Élément au niveau de l'index spécifié.</returns>
      <exception cref="T:System.IndexOutOfRangeException">Dans une opération Get, <paramref name="index" /> est négatif ou inférieur à <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ItemRef(System.Int32)">
      <summary>Obtient une référence en lecture seule à l’élément de l’ensemble au niveau de l’<paramref name="index" /> donné.</summary>
      <param name="index">Index de base zéro de l’élément de l’ensemble à retourner.</param>
      <returns>Référence en lecture seule à l’élément à la position donnée.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> est négatif ou inférieur à <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Recherche l’objet spécifié et retourne l’index de base zéro de la dernière occurrence trouvée dans la plage d’éléments de la liste qui contient le nombre spécifié d’éléments et se termine à l’index spécifié.</summary>
      <param name="item">Objet à localiser dans la liste. La valeur peut être null pour les types référence.</param>
      <param name="index">Index de début de base zéro de la recherche vers le haut.</param>
      <param name="count">Nombre d'éléments contenus dans la section où la recherche doit être effectuée.</param>
      <param name="equalityComparer">Comparateur d’égalité à utiliser dans la recherche.</param>
      <returns>Index de base zéro de la dernière occurrence de l’élément dans la plage d’éléments de la liste qui contient le nombre d’éléments et se termine à l’index, si elle est trouvée ; sinon, valeur -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Remove(`0)">
      <summary>Supprime la première occurrence de l’objet spécifié de cette liste immuable.</summary>
      <param name="value">Objet à supprimer.</param>
      <returns>Nouvelle liste avec l’objet supprimé, ou cette liste si l’objet spécifié n’est pas dans cette liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Supprime la première occurrence de l’objet qui correspond à la valeur spécifiée dans cette liste immuable.</summary>
      <param name="value">Valeur de l’élément à supprimer de la liste.</param>
      <param name="equalityComparer">Comparateur d’égalité à utiliser dans la recherche.</param>
      <returns>Nouvelle liste avec l’objet supprimé, ou cette liste si l’objet spécifié n’est pas dans cette liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveAll(System.Predicate{`0})">
      <summary>Supprime tous les éléments qui correspondent aux conditions définies par le prédicat spécifié.</summary>
      <param name="match">Délégué qui définit les conditions des éléments à supprimer.</param>
      <returns>Nouvelle liste avec les éléments supprimés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveAt(System.Int32)">
      <summary>Supprime l'élément au niveau de l'index spécifié.</summary>
      <param name="index">Index de base zéro de l'élément à supprimer.</param>
      <returns>Nouvelle liste avec l’élément supprimé.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Supprime une plage d’éléments de cette liste immuable.</summary>
      <param name="items">Collection dont les éléments doivent être supprimés si des correspondances sont trouvées dans cette liste.</param>
      <returns>Nouvelle liste avec les éléments supprimés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Supprime les valeurs spécifiées de cette liste.</summary>
      <param name="items">Éléments à supprimer si des correspondances sont trouvées dans cette liste.</param>
      <param name="equalityComparer">Comparateur d’égalité à utiliser dans la recherche.</param>
      <returns>Nouvelle liste avec les éléments supprimés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Int32,System.Int32)">
      <summary>Supprime une plage d’éléments, en commençant à l’index spécifié et contenant le nombre spécifié d’éléments, à partir de cette liste immuable.</summary>
      <param name="index">Index de départ pour commencer la suppression.</param>
      <param name="count">Nombre d'éléments à supprimer.</param>
      <returns>Nouvelle liste avec les éléments supprimés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Replace(`0,`0)">
      <summary>Remplace l’élément spécifié dans la liste immuable par un nouvel élément.</summary>
      <param name="oldValue">Élément à remplacer.</param>
      <param name="newValue">Élément à remplacer <paramref name="oldValue" /> avec.</param>
      <returns>Nouvelle liste avec l’élément remplacé, même s’il est identique à l’ancien élément.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> n’existe pas dans la liste immuable.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Remplace l’élément spécifié dans la liste immuable par un nouvel élément.</summary>
      <param name="oldValue">Élément à remplacer dans la liste.</param>
      <param name="newValue">Élément à remplacer <paramref name="oldValue" /> avec.</param>
      <param name="equalityComparer">Comparateur à utiliser pour vérifier l’égalité.</param>
      <returns>Nouvelle liste avec l’objet remplacé, ou cette liste si l’objet spécifié n’est pas dans cette liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Reverse">
      <summary>Inverse l’ordre des éléments dans l’intégralité de la liste immuable.</summary>
      <returns>Liste inversée.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Reverse(System.Int32,System.Int32)">
      <summary>Inverse l’ordre des éléments dans la plage spécifiée de la liste immuable.</summary>
      <param name="index">Index de début de base zéro de la plage à inverser.</param>
      <param name="count">Nombre d'éléments à inverser dans la plage.</param>
      <returns>Liste inversée.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.SetItem(System.Int32,`0)">
      <summary>Remplace un élément à une position donnée dans la liste immuable par l’élément spécifié.</summary>
      <param name="index">Position dans la liste de l’élément à remplacer.</param>
      <param name="value">Élément avec lequel remplacer l’ancien élément.</param>
      <returns>Nouvelle liste avec l’élément remplacé, même s’il est identique à l’ancien élément à cette position.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort">
      <summary>Trie les éléments dans l’intégralité de la liste immuable à l’aide du comparateur par défaut.</summary>
      <returns>Liste triée.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>Trie les éléments dans l’intégralité de la liste immuable à l’aide du comparateur spécifié.</summary>
      <param name="comparer">Implémentation à utiliser lors de la comparaison d’éléments, ou <see langword="null" /> pour utiliser le comparateur par défaut (<see cref="P:System.Collections.Generic.Comparer`1.Default" />).</param>
      <returns>Liste triée.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Comparison{`0})">
      <summary>Trie les éléments dans l’intégralité de la liste immuable à l’aide du comparateur spécifié.</summary>
      <param name="comparison">Délégué à utiliser lors de la comparaison d’éléments.</param>
      <returns>Liste triée.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparison" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>Trie une plage d’éléments de la liste immuable à l’aide du comparateur spécifié.</summary>
      <param name="index">Index de début de base zéro de la plage à trier.</param>
      <param name="count">Longueur de la plage à trier.</param>
      <param name="comparer">L’implémentation à utiliser lors de la comparaison d’éléments, ou <see langword="null" /> pour utiliser le comparateur par défaut (<see cref="P:System.Collections.Generic.Comparer`1.Default" />).</param>
      <returns>Liste triée.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Ajoute l’élément spécifié à la liste immuable.</summary>
      <param name="item">Élément à ajouter.</param>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Supprime tous les éléments de la liste immuable.</summary>
      <exception cref="T:System.NotSupportedException" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Obtient une valeur indiquant si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule.</summary>
      <returns>
        <see langword="true" /> si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>Supprime la première occurrence d’un objet spécifique de la liste immuable.</summary>
      <param name="item">Objet à supprimer.</param>
      <returns>
        <see langword="true" /> si <paramref name="item" /> a été correctement supprimé de la liste ; sinon, <see langword="false" />. Cette méthode retourne également <see langword="false" /> si <paramref name="item" /> est introuvable dans la liste d’origine.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Retourne un énumérateur qui effectue une itération au sein de la liste immuable.</summary>
      <returns>Énumérateur permettant d’effectuer une itération au sein de la liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>Insère un objet dans la liste immuable à l’index spécifié.</summary>
      <param name="index">Index de base zéro au niveau duquel <paramref name="item" /> doit être inséré.</param>
      <param name="item">Objet à insérer.</param>
      <exception cref="T:System.NotSupportedException" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>Obtient ou définit la valeur à l'index spécifié.</summary>
      <param name="index" />
      <exception cref="T:System.IndexOutOfRangeException">Levé à partir du getter quand <paramref name="index" /> est négatif ou n’est pas inférieur à <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />.</exception>
      <exception cref="T:System.NotSupportedException">Toujours levé à partir du setter.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>Supprime la valeur à l’index spécifié.</summary>
      <param name="index">Index de base zéro de l'élément à supprimer.</param>
      <exception cref="T:System.NotSupportedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copie l’intégralité de la liste immuable dans un tableau unidimensionnel compatible, en commençant à l’index de tableau spécifié.</summary>
      <param name="array">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir de la liste immuable.</param>
      <param name="arrayIndex">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#IsSynchronized">
      <summary>Consultez l’interface <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#SyncRoot">
      <summary>Consultez <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retourne un énumérateur qui effectue une itération au sein de la liste immuable.</summary>
      <returns>Énumérateur permettant d’effectuer une itération au sein de la liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Add(System.Object)">
      <summary>Ajoute un élément à la liste immuable.</summary>
      <param name="value">Objet à ajouter à la liste.</param>
      <returns>Position à laquelle le nouvel élément a été inséré, ou -1 pour indiquer que l’élément n’a pas été inséré dans la liste.</returns>
      <exception cref="T:System.NotSupportedException">Toujours levée.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Clear">
      <summary>Supprime tous les éléments de la liste immuable.</summary>
      <exception cref="T:System.NotSupportedException">Toujours levée.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Contains(System.Object)">
      <summary>Détermine si la liste immuable contient une valeur spécifique.</summary>
      <param name="value">Objet à localiser dans la liste.</param>
      <returns>
        <see langword="true" /> si l’objet se trouve dans la liste ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>Détermine l’index d’un élément spécifique dans la liste immuable.</summary>
      <param name="value">Objet à localiser dans la liste.</param>
      <returns>Index de <paramref name="value" /> s'il figure dans la liste ; sinon, -1.</returns>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Insère un élément dans la liste à l’index spécifié.</summary>
      <param name="index">Index de base zéro au niveau duquel <paramref name="value" /> doit être inséré.</param>
      <param name="value">Objet à insérer dans la liste.</param>
      <exception cref="T:System.NotSupportedException">Toujours levée.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IsFixedSize">
      <summary>Obtient une valeur indiquant si <see cref="T:System.Collections.IList" /> est de taille fixe.</summary>
      <returns>
        <see langword="true" /> si <see cref="T:System.Collections.IList" /> est de taille fixe ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IsReadOnly">
      <summary>Obtient une valeur indiquant si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule.</summary>
      <returns>
        <see langword="true" /> si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Item(System.Int32)">
      <summary>Obtient ou définit le <see cref="T:System.Object" /> à l'index spécifié.</summary>
      <param name="index">Index.</param>
      <returns>Valeur à l’index spécifié.</returns>
      <exception cref="T:System.IndexOutOfRangeException">Levé à partir du getter quand <paramref name="index" /> est négatif ou n’est pas inférieur à <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />.</exception>
      <exception cref="T:System.NotSupportedException">Toujours levé à partir du setter.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Remove(System.Object)">
      <summary>Supprime la première occurrence d’un objet spécifique de la liste immuable.</summary>
      <param name="value">Objet à supprimer de la liste.</param>
      <exception cref="T:System.NotSupportedException">Toujours levée.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Supprime l’élément à l’index spécifié de la liste immuable.</summary>
      <param name="index">Index de base zéro de l'élément à supprimer.</param>
      <exception cref="T:System.NotSupportedException">Toujours levée.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)">
      <summary>Ajoute la valeur spécifiée à cette liste immuable.</summary>
      <param name="value">Valeur à ajouter.</param>
      <returns>Nouvelle liste contenant l'élément ajouté.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Ajoute les valeurs spécifiées à cette liste immuable.</summary>
      <param name="items">Valeur à ajouter.</param>
      <returns>Nouvelle liste contenant les éléments ajoutés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Clear">
      <summary>Récupère une liste vide qui a la même sémantique de tri et de classement que cette instance.</summary>
      <returns>Une liste vide avec la même sémantique de tri et de classement que cette instance.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)">
      <summary>Insère l’élément spécifié à l’index spécifié dans la liste immuable.</summary>
      <param name="index">Index auquel insérer la valeur.</param>
      <param name="item">Élément à insérer.</param>
      <returns>Nouvelle liste immuable qui inclut l’élément spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>Insère les éléments spécifiés à l’index spécifié dans la liste immuable.</summary>
      <param name="index">Index au niveau duquel insérer les éléments.</param>
      <param name="items">Éléments à insérer.</param>
      <returns>Nouvelle liste immuable qui inclut les éléments spécifiés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Supprime l’élément avec la valeur spécifiée de la liste.</summary>
      <param name="value">Valeur de l’élément à supprimer de la liste.</param>
      <param name="equalityComparer">Comparateur à utiliser pour comparer les éléments pour égalité.</param>
      <returns>Nouvel <see cref="T:System.Collections.Immutable.ImmutableList`1" /> avec l’élément spécifié supprimé.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})">
      <summary>Supprime tous les éléments qui correspondent aux conditions définies par le prédicat spécifié.</summary>
      <param name="match">Délégué qui définit les conditions des éléments à supprimer.</param>
      <returns>Nouvelle liste immuable avec les éléments supprimés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)">
      <summary>Supprime l’élément à l’index spécifié de la liste immuable.</summary>
      <param name="index">Index de l'élément à supprimer.</param>
      <returns>Nouvelle liste avec l’élément supprimé.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Supprime une plage d’éléments de cette liste immuable qui correspondent aux éléments spécifiés.</summary>
      <param name="items">Plage d’éléments à supprimer de la liste, le cas échéant.</param>
      <param name="equalityComparer">Comparateur d’égalité à utiliser pour comparer les éléments.</param>
      <returns>Liste immuable avec les éléments supprimés.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="items" /> ou <paramref name="equalityComparer" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)">
      <summary>Supprime de cette liste le nombre spécifié d’éléments à l’emplacement spécifié.</summary>
      <param name="index">Index de départ de la plage d’éléments à supprimer.</param>
      <param name="count">Nombre d'éléments à supprimer.</param>
      <returns>Nouvelle liste avec les éléments supprimés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Remplace un élément de la liste par l’élément spécifié.</summary>
      <param name="oldValue">Élément à remplacer.</param>
      <param name="newValue">Élément avec lequel remplacer l’ancien élément.</param>
      <param name="equalityComparer">Comparateur d’égalité à utiliser dans la recherche.</param>
      <returns>Nouvelle liste.</returns>
      <exception cref="T:System.ArgumentException">Levé quand l’ancienne valeur n’existe pas dans la liste.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)">
      <summary>Remplace un élément de la liste à une position donnée par l’élément spécifié.</summary>
      <param name="index">Position dans la liste de l’élément à remplacer.</param>
      <param name="value">Élément avec lequel remplacer l’ancien élément.</param>
      <returns>Nouvelle liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ToBuilder">
      <summary>Crée une liste qui a le même contenu que cette liste et peut être mutée efficacement entre plusieurs opérations à l’aide des interfaces standard mutables.</summary>
      <returns>Liste créée avec le même contenu que cette liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.TrueForAll(System.Predicate{`0})">
      <summary>Détermine si chaque élément de la liste immuable correspond aux conditions définies par le prédicat spécifié.</summary>
      <param name="match">Délégué qui définit les conditions à vérifier par rapport aux éléments.</param>
      <returns>
        <see langword="true" /> si chaque élément de la liste immuable correspond aux conditions définies par le prédicat spécifié ; sinon, <see langword="false" />. Si la liste ne comporte pas d'éléments, la valeur de retour est <see langword="true" />.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue">
      <summary>Fournit un ensemble de méthodes d’initialisation pour les instances de la classe <see cref="T:System.Collections.Immutable.ImmutableQueue`1" />.
NuGet package: System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1">
      <summary>Crée une file d’attente immuable vide.</summary>
      <typeparam name="T">Type des éléments à stocker dans la file d’attente immuable.</typeparam>
      <returns>File d’attente immuable vide.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1(``0)">
      <summary>Crée une file d’attente immuable qui contient l’élément spécifié.</summary>
      <param name="item">Élément avec lequel préremplir la file d’attente.</param>
      <typeparam name="T">Type des éléments dans la file d’attente immuable.</typeparam>
      <returns>Nouvelle file d’attente immuable qui contient l’élément spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1(``0[])">
      <summary>Crée une file d’attente immuable qui contient le tableau spécifié d’éléments.</summary>
      <param name="items">Tableau qui contient les éléments avec lesquels préremplir la file d’attente.</param>
      <typeparam name="T">Type des éléments dans la file d’attente immuable.</typeparam>
      <returns>Nouvelle file d’attente immuable qui contient les éléments spécifiés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Crée une file d’attente immuable qui contient les éléments spécifiés.</summary>
      <param name="items">Éléments à ajouter à la file d’attente avant que l’immuabilité soit appliquée.</param>
      <typeparam name="T">Type des éléments dans la file d’attente.</typeparam>
      <returns>File d’attente immuable qui contient les éléments spécifiés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Dequeue``1(System.Collections.Immutable.IImmutableQueue{``0},``0@)">
      <summary>Supprime l’élément au début de la file d’attente immuable et retourne la nouvelle file d’attente.</summary>
      <param name="queue">File d’attente de laquelle supprimer l’élément.</param>
      <param name="value">Lorsque cette méthode retourne, contient l’élément de début de la file d’attente.</param>
      <typeparam name="T">Type des éléments dans la file d’attente immuable.</typeparam>
      <returns>Nouvel file d’attente avec l’élément supprimé.</returns>
      <exception cref="T:System.InvalidOperationException">La pile est vide.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue`1">
      <summary>Représente une file d’attente immuable.
NuGet package: System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="T">Type des éléments dans la file d’attente.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Clear">
      <summary>Supprime tous les objets de la file d’attente immuable.</summary>
      <returns>File d’attente immuable vide.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Dequeue">
      <summary>Supprime l’élément au début de la file d’attente immuable et retourne la nouvelle file d’attente.</summary>
      <returns>Nouvelle file d’attente immuable ; jamais <see langword="null" />.</returns>
      <exception cref="T:System.InvalidOperationException">La file d’attente est vide.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Dequeue(`0@)">
      <summary>Supprime l’élément au début de la file d’attente immuable et retourne la nouvelle file d’attente.</summary>
      <param name="value">Lorsque cette méthode retourne, contient l’élément de début de la file d’attente.</param>
      <returns>Nouvelle file d’attente immuable avec l’élément de début supprimé.</returns>
      <exception cref="T:System.InvalidOperationException">La file d’attente est vide.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.Empty">
      <summary>Obtient une file d’attente vide immuable.</summary>
      <returns>File d’attente immuable vide.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Enqueue(`0)">
      <summary>Ajoute un élément à la fin de la file d’attente immuable et retourne la nouvelle file d’attente.</summary>
      <param name="value">Élément à ajouter.</param>
      <returns>Nouvelle file d’attente immuable.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue`1.Enumerator">
      <summary>Énumère le contenu d’une file d’attente immuable sans allouer de mémoire.
Package NuGet : System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.Enumerator.Current">
      <summary>Obtient l'élément situé à la position actuelle de l'énumérateur.</summary>
      <returns>Élément situé à la position actuelle de l’énumérateur.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Enumerator.MoveNext">
      <summary>Avance l’énumérateur à l’élément suivant de la file d’attente immuable.</summary>
      <returns>
        <see langword="true" /> si l’énumérateur a pu avancer jusqu’à l’élément suivant ; <see langword="false" /> si l’énumérateur a dépassé la fin de la file d’attente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.GetEnumerator">
      <summary>Retourne un énumérateur qui itère dans la file d’attente immuable.</summary>
      <returns>Énumérateur permettant d’effectuer une itération via la file d’attente.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.IsEmpty">
      <summary>Obtient une valeur qui indique si cette file d’attente immuable est vide.
NuGet package: System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <returns>
        <see langword="true" /> si cette file d’attente est vide ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Peek">
      <summary>Retourne l’élément au début de la file d’attente immuable sans le supprimer.</summary>
      <returns>Élément au début de la file d’attente.</returns>
      <exception cref="T:System.InvalidOperationException">La file d’attente est vide.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.PeekRef">
      <summary>Obtient une référence en lecture seule à l’élément situé à l’avant de la file d’attente.</summary>
      <exception cref="T:System.InvalidOperationException">La file d’attente est vide.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein de la collection.</summary>
      <returns>Énumérateur permettant d’effectuer une itération au sein de la collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein d’une collection.</summary>
      <returns>Objet <see cref="T:System.Collections.IEnumerator" /> pouvant être utilisé pour itérer au sein de la collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Clear">
      <summary>Supprime tous les éléments de la file d’attente immuable.</summary>
      <returns>File d’attente immuable vide.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Dequeue">
      <summary>Supprime l’élément au début de la file d’attente immuable et retourne la nouvelle file d’attente.</summary>
      <returns>Nouvelle file d’attente immuable ; jamais <see langword="null" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Enqueue(`0)">
      <summary>Ajoute un élément à la fin de la file d’attente immuable et retourne la nouvelle file d’attente.</summary>
      <param name="value">Élément à ajouter.</param>
      <returns>Nouvelle file d’attente immuable.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary">
      <summary>Fournit un ensemble de méthodes d’initialisation pour les instances de la classe <see cref="T:System.Collections.Immutable.ImmutableSortedDictionary`2" />.
Package NuGet : System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2">
      <summary>Crée un dictionnaire trié immuable vide.</summary>
      <typeparam name="TKey">Type des clés stockées par le dictionnaire.</typeparam>
      <typeparam name="TValue">Type des valeurs stockées par le dictionnaire.</typeparam>
      <returns>Dictionnaire trié immuable vide.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2(System.Collections.Generic.IComparer{``0})">
      <summary>Crée un dictionnaire trié immuable vide qui utilise le comparateur de clé spécifié.</summary>
      <param name="keyComparer">Implémentation à utiliser pour déterminer l’égalité des clés dans le dictionnaire.</param>
      <typeparam name="TKey">Type des clés stockées par le dictionnaire.</typeparam>
      <typeparam name="TValue">Type des valeurs stockées par le dictionnaire.</typeparam>
      <returns>Dictionnaire trié immuable vide.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Crée un dictionnaire trié immuable vide qui utilise les comparateurs de clé et de valeur spécifiés.</summary>
      <param name="keyComparer">Implémentation à utiliser pour déterminer l’égalité des clés dans le dictionnaire.</param>
      <param name="valueComparer">Implémentation à utiliser pour déterminer l’égalité des valeurs dans le dictionnaire.</param>
      <typeparam name="TKey">Type des clés stockées par le dictionnaire.</typeparam>
      <typeparam name="TValue">Type des valeurs stockées par le dictionnaire.</typeparam>
      <returns>Dictionnaire trié immuable vide.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2">
      <summary>Crée un générateur de dictionnaire trié immuable.</summary>
      <typeparam name="TKey">Type des clés stockées par le dictionnaire.</typeparam>
      <typeparam name="TValue">Type des valeurs stockées par le dictionnaire.</typeparam>
      <returns>Générateur de collections immuables.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2(System.Collections.Generic.IComparer{``0})">
      <summary>Crée un générateur de dictionnaire trié immuable.</summary>
      <param name="keyComparer">Comparateur de clé.</param>
      <typeparam name="TKey">Type des clés stockées par le dictionnaire.</typeparam>
      <typeparam name="TValue">Type des valeurs stockées par le dictionnaire.</typeparam>
      <returns>Générateur de collections immuables.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Crée un générateur de dictionnaire trié immuable.</summary>
      <param name="keyComparer">Comparateur de clé.</param>
      <param name="valueComparer">Comparateur de valeur.</param>
      <typeparam name="TKey">Type des clés stockées par le dictionnaire.</typeparam>
      <typeparam name="TValue">Type des valeurs stockées par le dictionnaire.</typeparam>
      <returns>Générateur de collections immuables.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Crée un dictionnaire trié immuable à partir de la plage d’éléments spécifiée avec le comparateur de clé spécifié.</summary>
      <param name="keyComparer">Implémentation du comparateur à utiliser pour évaluer les clés pour l’égalité et le tri.</param>
      <param name="items">Éléments à ajouter au dictionnaire trié.</param>
      <typeparam name="TKey">Type des clés stockées dans le dictionnaire.</typeparam>
      <typeparam name="TValue">Type des valeurs stockées dans le dictionnaire.</typeparam>
      <returns>Nouveau dictionnaire trié immuable qui contient les éléments spécifiés et utilise le comparateur de clé spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Crée un dictionnaire trié immuable à partir de la plage d’éléments spécifiée avec les comparateurs de clé et de valeur spécifiés.</summary>
      <param name="keyComparer">Implémentation du comparateur à utiliser pour comparer des clés pour l’égalité et le tri.</param>
      <param name="valueComparer">Implémentation du comparateur à utiliser pour comparer des valeurs pour l’égalité et le tri.</param>
      <param name="items">Éléments à ajouter au dictionnaire trié avant qu’il soit immuable.</param>
      <typeparam name="TKey">Type des clés stockées dans le dictionnaire.</typeparam>
      <typeparam name="TValue">Type des valeurs stockées dans le dictionnaire.</typeparam>
      <returns>Dictionnaire trié immuable qui contient les éléments spécifiés et utilise les comparateurs spécifiés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Crée un dictionnaire trié immuable qui contient les éléments spécifiés et utilise le comparateur par défaut.</summary>
      <param name="items">Éléments à ajouter au dictionnaire trié avant qu’il soit immuable.</param>
      <typeparam name="TKey">Type des clés stockées dans le dictionnaire.</typeparam>
      <typeparam name="TValue">Type des valeurs stockées dans le dictionnaire.</typeparam>
      <returns>Dictionnaire trié immuable qui contient les éléments spécifiés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Énumère une séquence de paires clé/valeur et produit un dictionnaire trié immuable de son contenu.</summary>
      <param name="source">Séquence de paires clé/valeur à énumérer.</param>
      <typeparam name="TKey">Type des clés dans le dictionnaire.</typeparam>
      <typeparam name="TValue">Type des valeurs dans le dictionnaire.</typeparam>
      <returns>Dictionnaire trié immuable qui contient les paires clé/valeur dans l’ordre spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0})">
      <summary>Énumère une séquence de paires clé/valeur et produit un dictionnaire immuable de son contenu à l’aide du comparateur de clé spécifié.</summary>
      <param name="source">Séquence de paires clé/valeur à énumérer.</param>
      <param name="keyComparer">Comparateur de clés à utiliser lors de la création du dictionnaire immuable.</param>
      <typeparam name="TKey">Type des clés dans le dictionnaire.</typeparam>
      <typeparam name="TValue">Type des valeurs dans le dictionnaire.</typeparam>
      <returns>Dictionnaire trié immuable qui contient les paires clé/valeur dans l’ordre spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Énumère une séquence de paires clé/valeur et produit un dictionnaire trié immuable de son contenu à l’aide de la des comparateurs de clé et de valeur spécifiés.</summary>
      <param name="source">Séquence de paires clé/valeur à énumérer.</param>
      <param name="keyComparer">Comparateur de clés à utiliser lors de la création du dictionnaire immuable.</param>
      <param name="valueComparer">Comparateur de valeur à utiliser pour le dictionnaire immuable.</param>
      <typeparam name="TKey">Type des clés dans le dictionnaire.</typeparam>
      <typeparam name="TValue">Type des valeurs dans le dictionnaire.</typeparam>
      <returns>Dictionnaire trié immuable qui contient les paires clé/valeur dans l’ordre spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Immutable.ImmutableSortedDictionary{``0,``1}.Builder)">
      <summary>Crée un dictionnaire trié immuable à partir du contenu actuel du dictionnaire du générateur.</summary>
      <param name="builder">Générateur à partir duquel créer le dictionnaire trié immuable.</param>
      <typeparam name="TKey">Type des clés dans le dictionnaire.</typeparam>
      <typeparam name="TValue">Type des valeurs dans le dictionnaire.</typeparam>
      <returns>Dictionnaire trié immuable qui contient le contenu actuel du dictionnaire du générateur.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Énumère et transforme une séquence et produit un dictionnaire trié immuable de son contenu.</summary>
      <param name="source">Séquence à énumérer pour générer le dictionnaire.</param>
      <param name="keySelector">Fonction qui génère la clé de dictionnaire à partir de chaque élément de la séquence.</param>
      <param name="elementSelector">Fonction qui génère la valeur de dictionnaire à partir de chaque élément de la séquence.</param>
      <typeparam name="TSource">Type des éléments de la séquence.</typeparam>
      <typeparam name="TKey">Type des clés dans le dictionnaire qui en résulte.</typeparam>
      <typeparam name="TValue">Type des valeurs dans le dictionnaire qui en résulte.</typeparam>
      <returns>Dictionnaire trié immuable qui contient les éléments dans l’ordre spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1})">
      <summary>Énumère et transforme une séquence et produit un dictionnaire trié immuable de son contenu à l’aide du comparateur de clé spécifié.</summary>
      <param name="source">Séquence à énumérer pour générer le dictionnaire.</param>
      <param name="keySelector">Fonction qui génère la clé de dictionnaire à partir de chaque élément de la séquence.</param>
      <param name="elementSelector">Fonction qui génère la valeur de dictionnaire à partir de chaque élément de la séquence.</param>
      <param name="keyComparer">Comparateur de clé à utiliser pour le dictionnaire.</param>
      <typeparam name="TSource">Type des éléments de la séquence.</typeparam>
      <typeparam name="TKey">Type des clés dans le dictionnaire qui en résulte.</typeparam>
      <typeparam name="TValue">Type des valeurs dans le dictionnaire qui en résulte.</typeparam>
      <returns>Dictionnaire immuable qui contient les éléments dans l’ordre spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Énumère et transforme une séquence et produit un dictionnaire trié immuable de son contenu à l’aide des comparateurs de clé et de valeur spécifiés.</summary>
      <param name="source">Séquence à énumérer pour générer le dictionnaire.</param>
      <param name="keySelector">Fonction qui génère la clé de dictionnaire à partir de chaque élément de la séquence.</param>
      <param name="elementSelector">Fonction qui génère la valeur de dictionnaire à partir de chaque élément de la séquence.</param>
      <param name="keyComparer">Comparateur de clé à utiliser pour le dictionnaire.</param>
      <param name="valueComparer">Comparateur de valeur à utiliser pour le dictionnaire.</param>
      <typeparam name="TSource">Type des éléments de la séquence.</typeparam>
      <typeparam name="TKey">Type des clés dans le dictionnaire qui en résulte.</typeparam>
      <typeparam name="TValue">Type des valeurs dans le dictionnaire qui en résulte.</typeparam>
      <returns>Dictionnaire trié immuable qui contient les éléments dans l’ordre spécifié.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2">
      <summary>Représente un dictionnaire trié immuable.
NuGet package: System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="TKey">Type de la clé contenue dans le dictionnaire.</typeparam>
      <typeparam name="TValue">Type de la valeur contenue dans le dictionnaire.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Add(`0,`1)">
      <summary>Ajoute un élément avec la clé spécifiée et la valeur au dictionnaire trié immuable.</summary>
      <param name="key">Clé de l'entrée à ajouter.</param>
      <param name="value">Valeur de l’entrée à ajouter.</param>
      <returns>Nouveau dictionnaire trié immuable qui contient la paire clé/valeur supplémentaire.</returns>
      <exception cref="T:System.ArgumentException">La clé donnée existe déjà dans le dictionnaire, mais a une valeur différente.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Ajoute les paires clé/valeur spécifique au dictionnaire trié immuable.</summary>
      <param name="items">Paires clé/valeur à ajouter.</param>
      <returns>Nouveau dictionnaire immuable qui contient les paires clé/valeur supplémentaires.</returns>
      <exception cref="T:System.ArgumentException">Une des clés données existe déjà dans le dictionnaire, mais a une valeur différente.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder">
      <summary>Représente un dictionnaire trié qui mute, avec peu ou pas d’allocations de mémoire, et qui peut produire ou créer efficacement sur des instances de dictionnaire trié.
NuGet package: System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Add(`0,`1)">
      <summary>Ajoute un élément avec la clé et la valeur spécifiées au dictionnaire trié immuable.</summary>
      <param name="key">Clé de l'élément à ajouter.</param>
      <param name="value">Valeur de l'élément à ajouter.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Ajoute l’élément spécifié au dictionnaire trié immuable.</summary>
      <param name="item">Objet à ajouter au dictionnaire.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Ajoute une séquence de valeurs au dictionnaire trié immuable.</summary>
      <param name="items">Éléments à ajouter au dictionnaire.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Clear">
      <summary>Supprime tous les éléments du dictionnaire trié immuable.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Détermine si le dictionnaire trié immuable contient une valeur spécifique.</summary>
      <param name="item">Objet à rechercher dans le dictionnaire.</param>
      <returns>
        <see langword="true" /> si <paramref name="item" /> se trouve dans le dictionnaire ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ContainsKey(`0)">
      <summary>Détermine si le dictionnaire trié immuable contient un élément avec la clé spécifiée.</summary>
      <param name="key">Clé à rechercher dans le dictionnaire.</param>
      <returns>
        <see langword="true" /> si le dictionnaire contient un élément avec la clé ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ContainsValue(`1)">
      <summary>Détermine si le dictionnaire trié immuable contient un élément avec la valeur spécifiée.</summary>
      <param name="value">Valeur à rechercher dans le dictionnaire. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <returns>
        <see langword="true" /> si le dictionnaire trié immuable contient un élément avec la valeur spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Count">
      <summary>Obtient le nombre d’éléments dans ce dictionnaire trié immuable.</summary>
      <returns>Nombre d’éléments dans ce dictionnaire.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein du dictionnaire trié immuable.</summary>
      <returns>Énumérateur qui peut être utilisé pour itérer au sein du dictionnaire.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetValueOrDefault(`0)">
      <summary>Obtient la valeur d’une clé spécifique, si une clé correspondante existe dans le dictionnaire ; sinon, la valeur par défaut.</summary>
      <param name="key">Clé à rechercher.</param>
      <returns>Valeur de la clé, ou <c>default(TValue)</c> si aucune clé correspondante n’a été trouvée.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetValueOrDefault(`0,`1)">
      <summary>Obtient la valeur d’une clé spécifique, si une clé correspondante existe dans le dictionnaire ; sinon, la valeur par défaut.</summary>
      <param name="key">Clé à rechercher.</param>
      <param name="defaultValue">Valeur par défaut à retourner si aucune clé correspondante n’est trouvée dans le dictionnaire.</param>
      <returns>Valeur de la clé, ou <paramref name="defaultValue" /> si aucune clé n’a été trouvée.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Item(`0)">
      <summary>Obtient ou définit la valeur d’une clé spécifiée dans le dictionnaire trié immuable.</summary>
      <param name="key">Clé permettant de récupérer la valeur.</param>
      <returns>Valeur associée à la clé donnée.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.KeyComparer">
      <summary>Obtient ou définit le comparateur de clé.</summary>
      <returns>Comparateur de clé.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Keys">
      <summary>Obtient une collection fortement typée, en lecture seule, des éléments.</summary>
      <returns>Collection fortement typée, en lecture seule, des éléments.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Remove(`0)">
      <summary>Supprime l’élément avec la clé spécifiée du dictionnaire trié immuable.</summary>
      <param name="key">Clé de l'élément à supprimer.</param>
      <returns>
        <see langword="true" /> si la suppression de l'élément réussit ; sinon, <see langword="false" />. Cette méthode retourne également <see langword="false" /> si <paramref name="key" /> est introuvable dans le dictionnaire d’origine.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Supprime la première occurrence d’un objet spécifique à partir du dictionnaire trié immuable.</summary>
      <param name="item">Objet à supprimer du dictionnaire.</param>
      <returns>
        <see langword="true" /> si <paramref name="item" /> a été correctement supprimé du dictionnaire ; sinon, <see langword="false" />. Cette méthode retourne également <see langword="false" /> si <paramref name="item" /> est introuvable dans le dictionnaire.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Supprime toutes les entrées avec des clés qui correspondent à ceux de la séquence spécifiée du dictionnaire trié immuable.</summary>
      <param name="keys">Clés pour les entrées à supprimer du dictionnaire.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" />
      <param name="arrayIndex" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copie les éléments du dictionnaire dans un tableau, en commençant à un index de tableau particulier.
NuGet package: System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <param name="array">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir du dictionnaire. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="index">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#IsSynchronized">
      <summary>Obtient une valeur qui indique si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread safe).</summary>
      <returns>
        <see langword="true" /> si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe) ; sinon <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#SyncRoot">
      <summary>Obtient un objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>Ajoute un élément avec la valeur et la clé fournies à l’objet dictionary.</summary>
      <param name="key">Clé de l'élément à ajouter.</param>
      <param name="value">Valeur de l'élément à ajouter.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Contains(System.Object)">
      <summary>Détermine si l’objet dictionary contient un élément avec la clé spécifiée.</summary>
      <param name="key">Clé à rechercher.</param>
      <returns>
        <see langword="true" /> si le dictionnaire contient un élément avec la clé ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#GetEnumerator">
      <summary>Retourne un objet <see cref="T:System.Collections.IDictionaryEnumerator" /> pour le dictionnaire.</summary>
      <returns>Objet <see cref="T:System.Collections.IDictionaryEnumerator" /> pour le dictionnaire.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#IsFixedSize">
      <summary>Obtient une valeur qui indique si l'objet <see cref="T:System.Collections.IDictionary" /> est de taille fixe.</summary>
      <returns>
        <see langword="true" /> si l’objet <see cref="T:System.Collections.IDictionary" /> a une taille fixe ; dans le cas contraire, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#IsReadOnly">
      <summary>Obtient une valeur qui indique si l'objet <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule.</summary>
      <returns>
        <see langword="true" /> si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Item(System.Object)">
      <summary>Obtient ou définit l'élément à l'aide de la clé spécifiée.</summary>
      <param name="key">Clé.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Keys">
      <summary>Obtient un <see cref="T:System.Collections.Generic.ICollection`1" /> contenant les clés de <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> contenant les clés de l’objet qui implémente <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Remove(System.Object)">
      <summary>Supprime l’élément avec la clé spécifiée du dictionnaire.</summary>
      <param name="key">Clé de l'élément à supprimer.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Values">
      <summary>Obtient <see cref="T:System.Collections.Generic.ICollection`1" /> contenant les valeurs de <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> contenant les valeurs de l’objet qui implémente <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein d’une collection.</summary>
      <returns>Objet enumerator qui peut servir à effectuer une itération dans la collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ToImmutable">
      <summary>Crée un dictionnaire trié immuable en fonction du contenu de cette instance.</summary>
      <returns>Dictionnaire trié immuable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.TryGetKey(`0,`0@)">
      <summary>Détermine si ce dictionnaire contient la clé spécifiée.</summary>
      <param name="equalKey">Clé à rechercher.</param>
      <param name="actualKey">Clé correspondante située dans le dictionnaire, le cas échéant, ou <c>equalkey</c> si aucune correspondance n’est trouvée.</param>
      <returns>
        <see langword="true" /> si une correspondance pour <paramref name="equalKey" /> est trouvée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.TryGetValue(`0,`1@)">
      <summary>Obtient la valeur associée à la clé spécifiée.</summary>
      <param name="key">Clé dont la valeur sera récupérée.</param>
      <param name="value">Cette méthode retourne la valeur associée à la clé spécifiée, si la clé est trouvée ; sinon, retourne la valeur par défaut pour le type du paramètre <paramref name="value" />. Ce paramètre est passé sans être initialisé.</param>
      <returns>
        <see langword="true" /> si l’objet qui implémente le dictionnaire contient un élément avec la clé spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ValueComparer">
      <summary>Obtient ou définit le comparateur de valeur.</summary>
      <returns>Comparateur de valeur.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ValueRef(`0)">
      <summary>Retourne une référence en lecture seule à la valeur associée au <paramref name="key" /> fourni.</summary>
      <param name="key" />
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
        <paramref name="key" /> n’est pas présent.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Values">
      <summary>Obtient une collection qui contient les valeurs du dictionnaire trié immuable.</summary>
      <returns>Collection qui contient les valeurs de l’objet qui implémente le dictionnaire.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Clear">
      <summary>Récupère un dictionnaire trié immuable vide qui possède les mêmes règles de comparaison de classement et de clé/valeur que cette instance du dictionnaire.</summary>
      <returns>Dictionnaire vide avec des règles de comparaison de classement et de clé/valeur équivalentes.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Détermine si ce dictionnaire trié immuable contient la paire clé/valeur spécifiée.</summary>
      <param name="pair">Paire clé/valeur à rechercher.</param>
      <returns>
        <see langword="true" /> si la paire clé/valeur spécifiée est trouvée dans le dictionnaire ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ContainsKey(`0)">
      <summary>Détermine si cette table triée immuable contient la clé spécifiée.</summary>
      <param name="key">Clé à rechercher.</param>
      <returns>
        <see langword="true" /> si le dictionnaire immuable contient la clé spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ContainsValue(`1)">
      <summary>Détermine si le dictionnaire trié immuable contient un élément avec la valeur spécifiée.</summary>
      <param name="value">Valeur à rechercher. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <returns>
        <see langword="true" /> si le dictionnaire contient un élément qui possède la valeur spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Count">
      <summary>Obtient le nombre de paires clé/valeur dans le dictionnaire trié immuable.</summary>
      <returns>Nombre de paires clé/valeur dans le dictionnaire.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableSortedDictionary`2.Empty">
      <summary>Obtient un dictionnaire trié immuable vide.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator">
      <summary>Énumère le contenu d’une arborescence binaire.
Package NuGet : System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Current">
      <summary>Obtient l'élément situé à la position actuelle de l'énumérateur.</summary>
      <returns>Élément situé à la position actuelle de l’énumérateur.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Dispose">
      <summary>Libère les ressources utilisées par l'instance actuelle de la classe <see cref="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.MoveNext">
      <summary>Avance l’énumérateur à l’élément suivant du dictionnaire trié immuable.</summary>
      <returns>
        <see langword="true" /> si l’énumérateur a pu avancer jusqu’à l’élément suivant ; <see langword="false" /> si l’énumérateur a dépassé la fin du dictionnaire trié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Reset">
      <summary>Rétablit l’énumérateur à sa position initiale, qui précède le premier élément du dictionnaire trié immuable.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Élément actuel.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein du dictionnaire trié immuable.</summary>
      <returns>Énumérateur qui peut être utilisé pour itérer au sein du dictionnaire.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.IsEmpty">
      <summary>Obtient une valeur qui indique si cette instance du dictionnaire trié immuable est vide.</summary>
      <returns>
        <see langword="true" /> si cette instance est valide ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Item(`0)">
      <summary>Obtient le <paramref name="TValue" /> associé à la clé spécifiée.</summary>
      <param name="key">Clé permettant de récupérer la valeur.</param>
      <returns>Valeur associée à la clé spécifiée. Si aucun résultat n’est trouvé, l’opération lève une exception.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.KeyComparer">
      <summary>Obtient le comparateur de clé pour le dictionnaire trié immuable.</summary>
      <returns>Comparateur de clé pour le dictionnaire.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Keys">
      <summary>Obtient les clés dans le dictionnaire trié immuable.</summary>
      <returns>Clés dans le dictionnaire immuable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Remove(`0)">
      <summary>Supprime l’élément avec la valeur spécifiée du dictionnaire trié immuable.</summary>
      <param name="value">Valeur de l’élément à supprimer.</param>
      <returns>Nouveau dictionnaire immuable avec l’élément spécifié supprimé ; ou cette instance si la valeur spécifiée est introuvable dans le dictionnaire.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Supprime les éléments avec les clés spécifiées du dictionnaire trié immuable.</summary>
      <param name="keys">Clés des éléments à supprimer.</param>
      <returns>Nouveau dictionnaire immuable avec les clés spécifiées supprimées ; ou cette instance si les clés spécifiées sont introuvables dans le dictionnaire.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.SetItem(`0,`1)">
      <summary>Définit la clé et la valeur spécifiées dans le dictionnaire trié immuable, en remplaçant éventuellement une valeur existante pour la clé donnée.</summary>
      <param name="key">Clé de l'entrée à ajouter.</param>
      <param name="value">Valeur de clé à définir.</param>
      <returns>Nouveau dictionnaire trié immuable qui contient la paire clé/valeur spécifiée.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Définit les paires clé/valeur spécifiées dans le dictionnaire trié immuable, en remplaçant éventuellement des valeurs existantes pour les clés.</summary>
      <param name="items">Paires clé/valeur à définir dans le dictionnaire. Si une clé existe déjà dans le dictionnaire, cette méthode remplace leurs valeurs précédentes.</param>
      <returns>Dictionnaire immuable qui contient les paires clé/valeur spécifiées.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" />
      <param name="arrayIndex" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" />
      <param name="value" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Item(`0)">
      <param name="key" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copie les éléments du dictionnaire dans un tableau, en commençant à un index de tableau particulier.</summary>
      <param name="array">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir du dictionnaire. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="index">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>Obtient une valeur indiquant si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe).</summary>
      <returns>
        <see langword="true" /> si l’accès à la <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe); dans le cas contraire, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>Obtient un objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>Ajoute un élément avec la valeur et la clé fournies à l’objet dictionary.</summary>
      <param name="key">Objet à utiliser comme clé de l'élément à ajouter.</param>
      <param name="value">Objet à utiliser comme valeur de l'élément à ajouter.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Clear">
      <summary>Supprime cette instance.</summary>
      <exception cref="T:System.NotSupportedException">L’objet dictionary est en lecture seule.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>Détermine si l’objet dictionary immuable contient un élément avec la clé spécifiée.</summary>
      <param name="key">Clé à rechercher dans l’objet dictionary.</param>
      <returns>
        <see langword="true" /> si le dictionnaire contient un élément avec la clé ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>Retourne un objet <see cref="T:System.Collections.IDictionaryEnumerator" /> pour l’objet dictionary immuable.</summary>
      <returns>Objet enumerator pour l’objet dictionary.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>Obtient une valeur indiquant si l'objet <see cref="T:System.Collections.IDictionary" /> est de taille fixe.</summary>
      <returns>
        <see langword="true" /> si l’objet <see cref="T:System.Collections.IDictionary" /> a une taille fixe ; dans le cas contraire, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>Obtient une valeur indiquant si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule.</summary>
      <returns>
        <see langword="true" /> si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>Obtient ou définit l'élément à l'aide de la clé spécifiée.</summary>
      <param name="key">Clé.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Keys">
      <summary>Obtient un <see cref="T:System.Collections.Generic.ICollection`1" /> contenant les clés de <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> contenant les clés de l’objet qui implémente <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>Supprime l’élément avec la clé spécifiée de l’objet dictionary immuable.</summary>
      <param name="key">Clé de l'élément à supprimer.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Values">
      <summary>Obtient <see cref="T:System.Collections.Generic.ICollection`1" /> contenant les valeurs de <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> contenant les valeurs de l’objet qui implémente <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein d’une collection.</summary>
      <returns>Objet enumerator qui peut servir à effectuer une itération dans la collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" />
      <param name="value" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="pairs" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <param name="keys" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItem(`0,`1)">
      <param name="key" />
      <param name="value" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="items" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ToBuilder">
      <summary>Crée un dictionnaire trié immuable avec le même contenu que ce dictionnaire qui peut être efficacement muté entre plusieurs opérations à l’aide des interfaces standard mutables.</summary>
      <returns>Collection avec le même contenu que ce dictionnaire.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.TryGetKey(`0,`0@)">
      <summary>Détermine si ce dictionnaire contient la clé spécifiée.</summary>
      <param name="equalKey">Clé à rechercher.</param>
      <param name="actualKey">Clé correspondante située dans le dictionnaire, le cas échéant, ou <c>equalkey</c> si aucune correspondance n’est trouvée.</param>
      <returns>
        <see langword="true" /> si une correspondance pour <paramref name="equalKey" /> est trouvée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.TryGetValue(`0,`1@)">
      <summary>Obtient la valeur associée à la clé spécifiée.</summary>
      <param name="key">Clé dont la valeur sera récupérée.</param>
      <param name="value">Cette méthode retourne la valeur associée à la clé spécifiée, si la clé est trouvée ; sinon, retourne la valeur par défaut pour le type du paramètre <paramref name="value" />.</param>
      <returns>
        <see langword="true" /> si le dictionnaire contient un élément avec la clé spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.ValueComparer">
      <summary>Obtient le comparateur de valeur utilisé pour déterminer si les valeurs sont égales.</summary>
      <returns>Comparateur de valeur utilisé pour déterminer si les valeurs sont égales.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ValueRef(`0)">
      <summary>Retourne une référence en lecture seule à la valeur associée au <paramref name="key" /> fourni.</summary>
      <param name="key" />
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
        <paramref name="key" /> n’est pas présent.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Values">
      <summary>Obtient les valeurs dans le dictionnaire trié immuable.</summary>
      <returns>Valeurs du dictionnaire.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.WithComparers(System.Collections.Generic.IComparer{`0})">
      <summary>Obtient une instance du dictionnaire trié immuable qui utilise le comparateur de clé spécifié.</summary>
      <param name="keyComparer">Comparateur de clé à utiliser.</param>
      <returns>Une instance du dictionnaire immuable qui utilise le comparateur donné.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.WithComparers(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
      <summary>Obtient une instance du dictionnaire trié immuable qui utilise les comparateurs de clé et de valeur spécifiées.</summary>
      <param name="keyComparer">Comparateur de clé à utiliser.</param>
      <param name="valueComparer">Comparateur de valeur à utiliser.</param>
      <returns>Une instance du dictionnaire immuable qui utilise les comparateurs donnés.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet">
      <summary>Fournit un ensemble de méthodes d’initialisation pour les instances de la classe <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1" />.
Package NuGet : System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1">
      <summary>Crée un nouvel ensemble trié immuable vide.</summary>
      <typeparam name="T">Type des éléments à stocker dans l’ensemble immuable.</typeparam>
      <returns>Ensemble trié immuable vide.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(``0)">
      <summary>Crée un ensemble trié immuable qui contient l’élément spécifié.</summary>
      <param name="item">Élément avec lequel préremplir l’ensemble.</param>
      <typeparam name="T">Type des éléments de l’ensemble immuable.</typeparam>
      <returns>Nouvel ensemble immuable qui contient l’élément spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(``0[])">
      <summary>Crée un ensemble trié immuable qui contient le tableau spécifié d’éléments.</summary>
      <param name="items">Tableau qui contient les éléments avec lesquels préremplir l’ensemble.</param>
      <typeparam name="T">Type des éléments de l’ensemble immuable.</typeparam>
      <returns>Nouvel ensemble immuable qui contient l’élément spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0})">
      <summary>Crée un ensemble trié immuable vide qui utilise le comparateur spécifié.</summary>
      <param name="comparer">Implémentation à utiliser pendant la comparaison d’éléments de l’ensemble.</param>
      <typeparam name="T">Type des éléments de l’ensemble immuable.</typeparam>
      <returns>Ensemble immuable vide.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0)">
      <summary>Crée un ensemble trié immuable qui contient l’élément spécifié et utilise le comparateur spécifié.</summary>
      <param name="comparer">Implémentation à utiliser pendant la comparaison d’éléments de l’ensemble.</param>
      <param name="item">Élément avec lequel préremplir l’ensemble.</param>
      <typeparam name="T">Type des éléments stockés dans l’ensemble immuable.</typeparam>
      <returns>Nouvel ensemble immuable qui contient l’élément spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0[])">
      <summary>Crée un ensemble trié immuable qui contient le tableau spécifié d’éléments et utilise le comparateur spécifié.</summary>
      <param name="comparer">Implémentation à utiliser pendant la comparaison d’éléments de l’ensemble.</param>
      <param name="items">Tableau qui contient les éléments avec lesquels préremplir l’ensemble.</param>
      <typeparam name="T">Type des éléments de l’ensemble immuable.</typeparam>
      <returns>Nouvel ensemble immuable qui contient l’élément spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1">
      <summary>Retourne une collection qui peut être utilisée pour générer un ensemble trié immuable.</summary>
      <typeparam name="T">Type des éléments stockés dans la collection.</typeparam>
      <returns>Générateur de collections immuables.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1(System.Collections.Generic.IComparer{``0})">
      <summary>Retourne une collection qui peut être utilisée pour générer un ensemble trié immuable.</summary>
      <param name="comparer">Comparateur utilisé pour comparer des éléments dans l’ensemble d’égalité.</param>
      <typeparam name="T">Type des éléments stockés dans la collection.</typeparam>
      <returns>Collections immuables.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Crée une collection immuable qui contient les éléments spécifiés.</summary>
      <param name="comparer">Comparateur à utiliser pour comparer les éléments de cet ensemble.</param>
      <param name="items">Éléments à ajouter à l’ensemble avant qu’il soit immuable.</param>
      <typeparam name="T">Type des éléments stockés dans la collection.</typeparam>
      <returns>Nouvel ensemble immuable qui contient l’élément spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Crée une collection immuable qui contient les éléments spécifiés.</summary>
      <param name="items">Éléments à ajouter à l’ensemble avant qu’il soit immuable.</param>
      <typeparam name="T">Type des éléments stockés dans la collection.</typeparam>
      <returns>Nouvel ensemble immuable qui contient l’élément spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Énumère une séquence et produit un ensemble trié immuable de son contenu.</summary>
      <param name="source">Séquence à énumérer.</param>
      <typeparam name="TSource">Type des éléments de la séquence.</typeparam>
      <returns>Ensemble trié immuable qui contient les éléments dans l’ordre spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
      <summary>Énumère une séquence, produit un ensemble trié immuable de son contenu et utilise le comparateur spécifié.</summary>
      <param name="source">Séquence à énumérer.</param>
      <param name="comparer">Comparateur à utiliser pour l’initialisation et l’ajout de membres à l’ensemble trié.</param>
      <typeparam name="TSource">Type des éléments de la séquence.</typeparam>
      <returns>Ensemble trié immuable qui contient les éléments dans l’ordre spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Immutable.ImmutableSortedSet{``0}.Builder)">
      <summary>Crée un ensemble trié immuable à partir du contenu actuel de l’ensemble du générateur.</summary>
      <param name="builder">Générateur à partir duquel créer l’ensemble trié immuable.</param>
      <typeparam name="TSource">Type des éléments dans l’ensemble trié immuable.</typeparam>
      <returns>Ensemble trié immuable qui contient le contenu actuel de l’ensemble du générateur.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1">
      <summary>Représente une implémentation de l’ensemble trié immuable.
Package NuGet : System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="T">Type d'éléments de l'ensemble.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Add(`0)">
      <summary>Ajoute la valeur spécifiée à cet ensemble trié immuable.</summary>
      <param name="value">Valeur à ajouter.</param>
      <returns>Nouveau jeu avec l’élément ajouté ou ce jeu si l’élément est déjà dans ce jeu.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1.Builder">
      <summary>Représente un ensemble trié qui permet des modifications, avec peu ou pas d’allocations de mémoire, et manipule ou génère efficacement des ensembles triés immuables.
NuGet package: System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Add(`0)">
      <summary>Ajoute un élément à l’ensemble actuel et retourne une valeur qui indique si l’ajout a réussi.</summary>
      <param name="item">Élément à ajouter à l'ensemble.</param>
      <returns>
        <see langword="true" /> si l’élément est ajouté à l’ensemble ; <see langword="false" /> si l’élément figure déjà dans l’ensemble</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Clear">
      <summary>Supprime tous les éléments de cet ensemble.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Contains(`0)">
      <summary>Détermine si l’ensemble contient l’objet spécifié.</summary>
      <param name="item">Objet à trouver dans l’ensemble.</param>
      <returns>
        <see langword="true" /> si <paramref name="item" /> existe dans l’ensemble ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Count">
      <summary>Obtient le nombre d’éléments dans l’ensemble trié immuable.</summary>
      <returns>Nombre d’éléments dans cet ensemble.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Supprime l’ensemble d’éléments spécifié de l’ensemble actuel.</summary>
      <param name="other">Collection d'éléments à supprimer de l'ensemble.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein de l’ensemble.</summary>
      <returns>Énumérateur permettant d’effectuer une itération au sein de l’ensemble.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifie l'ensemble actuel pour qu'il contienne uniquement les éléments qui figurent également dans une collection spécifiée.</summary>
      <param name="other">Collection à comparer à l’ensemble actuel.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Détermine si l'ensemble actuel est un sous-ensemble (strict) approprié d'une collection spécifiée.</summary>
      <param name="other">Collection à comparer à l’ensemble actuel.</param>
      <returns>
        <see langword="true" /> si l’ensemble actuel est un sous-ensemble approprié de <paramref name="other" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Détermine si l'ensemble actuel est un sur-ensemble de propriété (strict) approprié d'une collection spécifiée.</summary>
      <param name="other">Collection à comparer à l’ensemble actuel.</param>
      <returns>
        <see langword="true" /> si l’ensemble actuel est un sur-ensemble approprié de <paramref name="other" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Détermine si l’ensemble actuel est un sous-ensemble d’une collection spécifiée.</summary>
      <param name="other">Collection à comparer à l’ensemble actuel.</param>
      <returns>
        <see langword="true" /> si l’ensemble actuel est un sous-ensemble de <paramref name="other" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Détermine si l'ensemble actuel est un super-ensemble d'une collection spécifiée.</summary>
      <param name="other">Collection à comparer à l’ensemble actuel.</param>
      <returns>
        <see langword="true" /> si l’ensemble actuel est un sur-ensemble de <paramref name="other" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Item(System.Int32)">
      <summary>Obtient l’élément de l’ensemble à l’index spécifié.</summary>
      <param name="index">Index de base zéro de l’élément de l’ensemble à retourner.</param>
      <returns>Élément à la position donnée.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ItemRef(System.Int32)">
      <summary>Obtient une référence en lecture seule à l’élément de l’ensemble au niveau de l’<paramref name="index" /> donné.</summary>
      <param name="index">Index de base zéro de l’élément de l’ensemble à retourner.</param>
      <returns>Référence en lecture seule à l’élément à la position donnée.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.KeyComparer">
      <summary>Obtient ou définit l’objet qui est utilisé pour déterminer l’égalité des valeurs dans l’ensemble trié immuable.</summary>
      <returns>Comparateur utilisé pour déterminer l’égalité des valeurs dans l’ensemble.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Max">
      <summary>Obtient la valeur maximale de l’ensemble trié immuable, telle que définie par le comparateur.</summary>
      <returns>Valeur maximale dans l'ensemble.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Min">
      <summary>Obtient la valeur minimale de l’ensemble trié immuable, telle que définie par le comparateur.</summary>
      <returns>Valeur minimale dans l'ensemble.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Détermine si l’ensemble actuel recoupe la collection spécifiée.</summary>
      <param name="other">Collection à comparer à l’ensemble actuel.</param>
      <returns>
        <see langword="true" /> si l’ensemble actuel et <paramref name="other" /> partagent au moins un élément commun ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Remove(`0)">
      <summary>Supprime la première occurrence de l’objet spécifié de l’ensemble.</summary>
      <param name="item">Objet à supprimer de l’ensemble.</param>
      <returns>
        <see langword="true" /> si <paramref name="item" /> a été supprimé de l’ensemble ; <see langword="false" /> si <paramref name="item" /> est introuvable dans l’ensemble.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Reverse">
      <summary>Retourne un énumérateur qui itère dans l’ordre inverse de l’ensemble trié immuable.</summary>
      <returns>Énumérateur qui itère au sein de l’ensemble dans l’ordre inverse.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Détermine si l'ensemble actuel et la collection spécifiée contiennent les mêmes éléments.</summary>
      <param name="other">Collection à comparer à l’ensemble actuel.</param>
      <returns>
        <see langword="true" /> si l’ensemble actuel est égal à <paramref name="other" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifie l’ensemble actuel pour qu’il contienne uniquement les éléments présents dans l’ensemble actuel ou dans la collection spécifiée, mais pas dans les deux à la fois.</summary>
      <param name="other">Collection à comparer à l’ensemble actuel.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Ajoute un élément à l’ensemble actuel et retourne une valeur qui indique si l’ajout a réussi.</summary>
      <param name="item">Élément à ajouter à l'ensemble.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary>Copie les éléments de la collection dans un tableau, en commençant au niveau d’un index de tableau particulier.</summary>
      <param name="array">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir de la collection. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="arrayIndex">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Obtient une valeur qui indique si cette instance est en lecture seule.</summary>
      <returns>Toujours <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein de la collection.</summary>
      <returns>Énumérateur permettant d’effectuer une itération au sein de la collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copie les éléments de l’ensemble dans un tableau, en commençant au niveau d’un index de tableau particulier.</summary>
      <param name="array">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir de l’ensemble. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="arrayIndex">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#IsSynchronized">
      <summary>Obtient une valeur qui indique si l’accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe).</summary>
      <returns>
        <see langword="true" /> si l’accès à la <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe); dans le cas contraire, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#SyncRoot">
      <summary>Obtient un objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein de la collection.</summary>
      <returns>Énumérateur permettant d’effectuer une itération au sein de la collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ToImmutable">
      <summary>Crée un ensemble trié immuable en fonction du contenu de cette instance.</summary>
      <returns>Ensemble immuable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifie l’ensemble actuel pour qu’il contienne tous les éléments présents dans l’ensemble actuel, dans la collection spécifiée ou dans les deux.</summary>
      <param name="other">Collection à comparer à l’état actuel.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Clear">
      <summary>Supprime tous les éléments de l’ensemble trié immuable.</summary>
      <returns>Ensemble vide avec les éléments supprimés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Contains(`0)">
      <summary>Détermine si cet ensemble trié immuable contient la valeur spécifiée.</summary>
      <param name="value">Valeur à vérifier.</param>
      <returns>
        <see langword="true" /> si l’ensemble contient la valeur spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Count">
      <summary>Obtient le nombre d’éléments dans l’ensemble trié immuable.</summary>
      <returns>Nombre d’éléments dans l’ensemble trié immuable.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableSortedSet`1.Empty">
      <summary>Obtient un ensemble trié immuable vide.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator">
      <summary>Énumère le contenu d’une arborescence binaire.
Package NuGet : System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Current">
      <summary>Obtient l'élément situé à la position actuelle de l'énumérateur.
Package NuGet : System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <returns>Élément situé à la position actuelle de l’énumérateur.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Dispose">
      <summary>Libère les ressources utilisées par l'instance actuelle de la classe <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator" />.
Package NuGet : System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.MoveNext">
      <summary>Avance l’énumérateur à l’élément suivant de l’ensemble trié immuable.
Package NuGet : System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <returns>
        <see langword="true" /> si l’énumérateur a pu avancer jusqu’à l’élément suivant ; <see langword="false" /> si l’énumérateur a dépassé la fin de l’ensemble trié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Reset">
      <summary>Rétablit l’énumérateur à sa position initiale, qui précède le premier élément de l’ensemble trié immuable.
Package NuGet : System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Élément actuel.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>Supprime un ensemble d’éléments spécifié de cet ensemble trié immuable.</summary>
      <param name="other">Éléments à supprimer de cet ensemble.</param>
      <returns>Nouvel ensemble avec les éléments supprimés ; ou ensemble d’origine si aucun des éléments ne se trouvaient dans l’ensemble.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.GetEnumerator">
      <summary>Retourne un énumérateur qui itère sur l’ensemble trié immuable.</summary>
      <returns>Énumérateur qui peut être utilisé pour itérer via l’ensemble.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IndexOf(`0)">
      <summary>Obtient la position dans cet ensemble trié immuable dans lequel la valeur spécifiée apparaît.</summary>
      <param name="item">Valeur dont la position est demandée.</param>
      <returns>Index du <paramref name="item" /> spécifié dans l’ensemble trié, si <paramref name="item" /> est trouvé. Si <paramref name="item" /> est introuvable et est inférieur à un ou plusieurs éléments de cet ensemble, cette méthode retourne un nombre négatif qui est le complément de bits de l’index du premier élément supérieur à la valeur. Si <paramref name="item" /> est introuvable et est supérieur à un des éléments de l’ensemble, cette méthode retourne un nombre négatif qui est le complément de bits de l’index du dernier élément plus 1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>Crée un ensemble trié immuable qui contient des éléments qui existent dans cet ensemble et dans l’ensemble spécifié.</summary>
      <param name="other">Jeu en intersection avec celui-ci.</param>
      <returns>Nouvel ensemble trié immuable qui contient des éléments qui existent dans les deux ensembles.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.IsEmpty">
      <summary>Obtient une valeur qui indique si cet ensemble trié immuable est vide.</summary>
      <returns>
        <see langword="true" /> si cet ensemble est vide ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Détermine si l’ensemble trié immuable actuel est un sous-ensemble approprié (strict) de la collection spécifiée.</summary>
      <param name="other">Collection à comparer à l’ensemble actuel.</param>
      <returns>
        <see langword="true" /> si l’ensemble actuel est un sous-ensemble approprié de <paramref name="other" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Détermine si l’ensemble trié immuable actuel est un sur-ensemble approprié de la collection spécifiée.</summary>
      <param name="other">Collection à comparer à l’ensemble actuel.</param>
      <returns>
        <see langword="true" /> si l’ensemble actuel est un sur-ensemble approprié de <paramref name="other" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Détermine si l’ensemble trié immuable actuel est un sous-ensemble d’une collection spécifiée.</summary>
      <param name="other">Collection à comparer à l’ensemble actuel.</param>
      <returns>
        <see langword="true" /> si l’ensemble actuel est un sous-ensemble de <paramref name="other" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Détermine si l’ensemble trié immuable actuel est un sur-ensemble de la collection spécifiée.</summary>
      <param name="other">Collection à comparer à l’ensemble actuel.</param>
      <returns>
        <see langword="true" /> si l’ensemble actuel est un sur-ensemble de <paramref name="other" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Item(System.Int32)">
      <summary>Obtient l’élément de l’ensemble trié immuable à l’index donné.</summary>
      <param name="index">Index de l’élément à récupérer à partir de l’ensemble trié.</param>
      <returns>Élément à l’index donné.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.ItemRef(System.Int32)">
      <summary>Obtient une référence en lecture seule à l’élément de l’ensemble au niveau de l’<paramref name="index" /> donné.</summary>
      <param name="index">Index de base zéro de l’élément de l’ensemble à retourner.</param>
      <returns>Obtient une référence en lecture seule à l’élément de l’ensemble à la position donnée.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.KeyComparer">
      <summary>Obtient le comparateur utilisé pour trier les clés dans l’ensemble trié immuable.</summary>
      <returns>Comparateur utilisé pour trier les clés.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Max">
      <summary>Obtient la valeur maximale de l’ensemble trié immuable, telle que définie par le comparateur.</summary>
      <returns>Valeur maximale dans l'ensemble.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Min">
      <summary>Obtient la valeur minimale de l’ensemble trié immuable, telle que définie par le comparateur.</summary>
      <returns>Valeur minimale dans l'ensemble.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Détermine si l’ensemble trié immuable actuel et une collection spécifiée partagent des éléments communs.</summary>
      <param name="other">Collection à comparer à l’ensemble actuel.</param>
      <returns>
        <see langword="true" /> si l’ensemble actuel et <paramref name="other" /> partagent au moins un élément commun ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Remove(`0)">
      <summary>Supprime la valeur spécifiée de cet ensemble trié immuable.</summary>
      <param name="value">Élément à supprimer.</param>
      <returns>Nouvel ensemble trié immuable avec l’élément supprimé, ou cet ensemble si l’élément est introuvable dans l’ensemble.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Reverse">
      <summary>Retourne un <see cref="T:System.Collections.Generic.IEnumerable`1" /> qui effectue une itération sur cet ensemble trié immuable dans l’ordre inverse.</summary>
      <returns>Énumérateur qui itère dans l’ordre inverse de l’ensemble trié immuable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Détermine si l’ensemble trié immuable actuel et la collection spécifiée contiennent les mêmes éléments.</summary>
      <param name="other">Collection à comparer à l’ensemble actuel.</param>
      <returns>
        <see langword="true" /> si les ensemble sont égaux ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>Crée un ensemble trié immuable qui contient des éléments qui existent dans cet ensemble ou dans une séquence donnée, mais pas dans les deux.</summary>
      <param name="other">Autre séquence d’éléments.</param>
      <returns>Nouvel ensemble trié immuable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Ajoute la valeur spécifiée à la collection.</summary>
      <param name="item">Valeur à ajouter.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Supprime tous les éléments de la collection.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary>Copie les éléments de la collection dans un tableau, en commençant au niveau d’un index de tableau particulier.</summary>
      <param name="array">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir de la collection. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="arrayIndex">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Consultez l’interface <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>Supprime la première occurrence d’un objet spécifique dans la collection.</summary>
      <param name="item">Objet à supprimer de la collection.</param>
      <returns>
        <see langword="true" /> si <paramref name="item" /> a été correctement supprimé de la collection ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein de la collection.</summary>
      <returns>Énumérateur permettant d'effectuer une itération au sein de la collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>Insère un élément dans l’ensemble à l’index spécifié.</summary>
      <param name="index">Index de base zéro au niveau duquel <paramref name="item" /> doit être inséré.</param>
      <param name="item">Objet à insérer dans l’ensemble.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>Consultez l’interface <see cref="T:System.Collections.Generic.IList`1" />.</summary>
      <param name="index" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>Supprime l’élément au niveau de l’index spécifié.</summary>
      <param name="index">Index de base zéro de l'élément à supprimer.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#Add(`0)">
      <summary>Ajoute un élément à l’ensemble actuel et retourne une valeur qui indique si l’ajout a réussi.</summary>
      <param name="item">Élément à ajouter à l'ensemble.</param>
      <returns>
        <see langword="true" /> si l’élément est ajouté à l’ensemble ; <see langword="false" /> si l’élément figure déjà dans l’ensemble.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Supprime de l’ensemble actuel tous les éléments de la collection spécifiée.</summary>
      <param name="other">Collection d'éléments à supprimer de l'ensemble.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifie l'ensemble actuel pour qu'il contienne uniquement les éléments qui figurent également dans une collection spécifiée.</summary>
      <param name="other">Collection à comparer à l’ensemble actuel.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifie l’ensemble actuel pour qu’il contienne uniquement les éléments présents dans l’ensemble actuel ou dans la collection spécifiée, mais pas dans les deux à la fois.</summary>
      <param name="other">Collection à comparer à l’ensemble actuel.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifie l’ensemble actuel afin qu’il contienne tous les éléments présents dans l’ensemble actuel ou dans la collection spécifiée.</summary>
      <param name="other">Collection à comparer à l’ensemble actuel.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copie les éléments de l’ensemble dans un tableau, en commençant au niveau d’un index de tableau particulier.</summary>
      <param name="array">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir de l’ensemble. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="index">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#IsSynchronized">
      <summary>Consultez l’interface <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#SyncRoot">
      <summary>Consultez <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein d’une collection.</summary>
      <returns>Objet enumerator qui peut servir à effectuer une itération dans la collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Add(System.Object)">
      <summary>Ajoute un élément à l’ensemble.</summary>
      <param name="value">Objet à ajouter à l’ensemble.</param>
      <returns>Position à laquelle le nouvel élément a été inséré, ou -1 pour indiquer que l’élément n’a pas été inséré dans la collection.</returns>
      <exception cref="T:System.NotSupportedException">L’ensemble est en lecture seule ou a une taille fixe.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Clear">
      <summary>Supprime tous les éléments à l’ensemble.</summary>
      <exception cref="T:System.NotSupportedException">Levé dans tous les cas.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Contains(System.Object)">
      <summary>Détermine si l’ensemble contient une valeur spécifique.</summary>
      <param name="value">Objet à trouver dans l’ensemble.</param>
      <returns>
        <see langword="true" /> si l’objet se trouve dans l’ensemble, sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>Détermine l’index d’un élément spécifique dans l’ensemble.</summary>
      <param name="value">Objet à trouver dans l’ensemble.</param>
      <returns>Index de <paramref name="value" /> s'il figure dans la liste ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Insère un élément dans l’ensemble à l’index spécifié.</summary>
      <param name="index">Index de base zéro au niveau duquel <paramref name="value" /> doit être inséré.</param>
      <param name="value">Objet à insérer dans l’ensemble.</param>
      <exception cref="T:System.NotSupportedException">L’ensemble est en lecture seule ou a une taille fixe.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IsFixedSize">
      <summary>Obtient une valeur qui indique si <see cref="T:System.Collections.IList" /> est de taille fixe.</summary>
      <returns>
        <see langword="true" /> si <see cref="T:System.Collections.IList" /> est de taille fixe ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IsReadOnly">
      <summary>Obtient une valeur qui indique si l'objet <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule.</summary>
      <returns>
        <see langword="true" /> si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Item(System.Int32)">
      <summary>Obtient ou définit le <see cref="T:System.Object" /> à l'index spécifié.</summary>
      <param name="index">Index.</param>
      <returns>
        <see cref="T:System.Object" />.</returns>
      <exception cref="T:System.NotSupportedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Remove(System.Object)">
      <summary>Supprime la première occurrence d’un objet spécifique de l’ensemble.</summary>
      <param name="value">Objet à supprimer de l’ensemble.</param>
      <exception cref="T:System.NotSupportedException">L’ensemble est en lecture seule ou a une taille fixe.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Supprime l’élément au niveau de l’index spécifié dans l’ensemble.</summary>
      <param name="index">Index de base zéro de l'élément à supprimer.</param>
      <exception cref="T:System.NotSupportedException">L’ensemble est en lecture seule ou a une taille fixe.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Add(`0)">
      <summary>Ajoute l’élément spécifié à cet ensemble immuable.</summary>
      <param name="value">Élément à ajouter.</param>
      <returns>Nouvel l’ensemble avec l’élément ajouté ou cet ensemble si l’élément est déjà dans cet ensemble.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Clear">
      <summary>Récupère un ensemble immuable vide qui a la même sémantique de tri et de classement que cette instance.</summary>
      <returns>Ensemble vide qui a la même sémantique de tri et de classement que cette instance.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>Supprime les éléments de la collection spécifiée de l’ensemble actuel immuable.</summary>
      <param name="other">Éléments à supprimer de cet ensemble.</param>
      <returns>Nouvel ensemble avec les éléments supprimés ; ou ensemble d’origine si aucun des éléments ne se trouvaient dans l’ensemble.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>Crée un ensemble immuable qui contient des éléments qui existent dans cet ensemble et l’ensemble spécifié.</summary>
      <param name="other">Collection à comparer à l’ensemble actuel.</param>
      <returns>Nouvel ensemble immuable qui contient des éléments qui existent dans les deux ensembles.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Remove(`0)">
      <summary>Supprime l’élément spécifié de cet ensemble immuable.</summary>
      <param name="value">Élément à supprimer.</param>
      <returns>Nouvel ensemble avec l’élément spécifié supprimé, ou ensemble actuel si l’élément est introuvable dans l’ensemble.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>Crée un ensemble immuable qui contient uniquement les éléments qui sont présents dans l’ensemble actuel ou dans la collection spécifiée, mais pas dans les deux.</summary>
      <param name="other">Collection à comparer à l’ensemble actuel.</param>
      <returns>Nouvel ensemble qui contient les éléments qui sont présents uniquement dans l’ensemble actuel ou dans la collection spécifiée, mais pas dans les deux.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>Crée un nouvel ensemble immuable qui contient tous les éléments qui sont présents dans l’ensemble actuel ou dans la collection spécifiée.</summary>
      <param name="other">Collection à partir de laquelle ajouter des éléments.</param>
      <returns>Nouvel ensemble immuable avec les éléments ajoutés ; ou ensemble d’origine si tous les éléments étaient déjà présents dans le jeu.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.ToBuilder">
      <summary>Crée une collection qui a le même contenu que cet ensemble trié immuable pouvant être manipulée efficacement à l’aide des interfaces standard mutables.</summary>
      <returns>Générateur d’ensembles triés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.TryGetValue(`0,`0@)">
      <summary>Recherche dans l’ensemble une valeur donnée et retourne la valeur égale qu’il trouve, le cas échéant.</summary>
      <param name="equalValue">La valeur à rechercher.</param>
      <param name="actualValue">Valeur de l’ensemble que la recherche a trouvée, ou valeur d’origine si la recherche n’a trouvé aucune correspondance.</param>
      <returns>Valeur qui indique si la recherche a réussi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>Ajoute un ensemble donné d’éléments à cet ensemble trié immuable.</summary>
      <param name="other">Éléments à ajouter.</param>
      <returns>Nouvel ensemble d’éléments ajoutés ; ou ensemble d’origine si tous les éléments étaient déjà présents dans le jeu.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.WithComparer(System.Collections.Generic.IComparer{`0})">
      <summary>Retourne l’ensemble trié immuable ayant le comparateur de clé spécifié.</summary>
      <param name="comparer">Comparateur à vérifier.</param>
      <returns>Ensemble trié immuable doté du comparateur de clé spécifié.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack">
      <summary>Fournit un ensemble de méthodes d’initialisation pour les instances de la classe <see cref="T:System.Collections.Immutable.ImmutableStack`1" />.
NuGet package: System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1">
      <summary>Crée une pile immuable vide.</summary>
      <typeparam name="T">Type des éléments à stocker dans la pile immuable.</typeparam>
      <returns>Pile immuable vide.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1(``0)">
      <summary>Crée une nouvelle pile immuable qui contient l’élément spécifié.</summary>
      <param name="item">Élément avec lequel préremplir la pile.</param>
      <typeparam name="T">Type d’éléments dans la pile immuable.</typeparam>
      <returns>Nouvelle collection immuable qui contient l’élément spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1(``0[])">
      <summary>Crée une nouvelle pile immuable qui contient le tableau spécifié d’éléments.</summary>
      <param name="items">Tableau qui contient les éléments avec lesquels préremplir la pile.</param>
      <typeparam name="T">Type d’éléments dans la pile immuable.</typeparam>
      <returns>Nouvelle pile immuable qui contient les éléments spécifiés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Crée une nouvelle pile immuable qui contient les éléments spécifiés.</summary>
      <param name="items">Éléments à ajouter à la pile avant qu’elle soit immuable.</param>
      <typeparam name="T">Type des éléments dans la pile.</typeparam>
      <returns>Pile immuable qui contient les éléments spécifiés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Pop``1(System.Collections.Immutable.IImmutableStack{``0},``0@)">
      <summary>Supprime l’élément spécifié d’une pile immuable.</summary>
      <param name="stack">Pile à modifier.</param>
      <param name="value">Élément à supprimer de la pile.</param>
      <typeparam name="T">Type d’éléments contenus dans la pile.</typeparam>
      <returns>Une pile ; jamais <see langword="null" />.</returns>
      <exception cref="T:System.InvalidOperationException">La pile est vide.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack`1">
      <summary>Représente une pile immuable.
NuGet package: System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="T">Type d’élément sur la pile.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Clear">
      <summary>Supprime tous les objets de la pile immuable.</summary>
      <returns>Pile immuable vide.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.Empty">
      <summary>Obtient une pile immuable vide.</summary>
      <returns>Pile immuable vide.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack`1.Enumerator">
      <summary>Énumère le contenu d’une pile immuable sans allouer de mémoire.
Package NuGet : System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.Enumerator.Current">
      <summary>Obtient l'élément situé à la position actuelle de l'énumérateur.</summary>
      <returns>Élément situé à la position actuelle de l’énumérateur.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Enumerator.MoveNext">
      <summary>Avance l’énumérateur à l’élément suivant de la pile immuable.</summary>
      <returns>
        <see langword="true" /> si l’énumérateur a pu avancer jusqu’à l’élément suivant ; <see langword="false" /> si l’énumérateur a atteint la fin de la pile.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.GetEnumerator">
      <summary>Retourne un énumérateur qui itère sur la pile immuable.</summary>
      <returns>Énumérateur qui peut être utilisé pour itérer via la pile.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.IsEmpty">
      <summary>Obtient une valeur qui indique si cette instance de la pile immuable est vide.</summary>
      <returns>
        <see langword="true" /> si cette instance est valide ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Peek">
      <summary>Retourne l’objet en haut de la pile sans le supprimer.</summary>
      <returns>Objet en haut de la pile.</returns>
      <exception cref="T:System.InvalidOperationException">La pile est vide.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.PeekRef">
      <summary>Obtient une référence en lecture seule à l’élément situé en haut de la pile.</summary>
      <returns>Référence en lecture seule à l’élément situé en haut de la pile.</returns>
      <exception cref="T:System.InvalidOperationException">Levée quand la liste est vide.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Pop">
      <summary>Supprime l’élément en haut de la pile immuable et retourne la pile après la suppression.</summary>
      <returns>Une pile ; jamais <see langword="null" />.</returns>
      <exception cref="T:System.InvalidOperationException">La pile est vide.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Pop(`0@)">
      <summary>Supprime l’élément spécifié de la pile immuable et retourne la pile après la suppression.</summary>
      <param name="value">Valeur à supprimer de la pile.</param>
      <returns>Une pile ; jamais <see langword="null" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Push(`0)">
      <summary>Insère un objet en haut de la pile immuable et retourne la nouvelle pile.</summary>
      <param name="value">Objet à pousser vers la pile.</param>
      <returns>Nouvelle pile.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein de la collection.</summary>
      <returns>Énumérateur permettant d’effectuer une itération au sein de la collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein d’une collection.</summary>
      <returns>Objet <see cref="T:System.Collections.IEnumerator" /> pouvant être utilisé pour itérer au sein de la collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Clear">
      <summary>Supprime tous les éléments de la pile immuable.</summary>
      <returns>Pile immuable vide.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Pop">
      <summary>Supprime l’élément en haut de la pile immuable et retourne la nouvelle pile.</summary>
      <returns>Nouvelle pile ; jamais <see langword="null" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Push(`0)">
      <summary>Insère un élément en haut de la pile immuable et retourne la nouvelle pile.</summary>
      <param name="value">Élément à pousser vers la pile.</param>
      <returns>Nouvelle pile.</returns>
    </member>
    <member name="T:System.Linq.ImmutableArrayExtensions">
      <summary>Substitutions de méthode d’extension LINQ qui offrent une plus grande efficacité pour <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> que les méthodes LINQ standard
Package NuGet : System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``0,``0})">
      <summary>Applique une fonction à une séquence d’éléments de manière cumulative.</summary>
      <param name="immutableArray">Collection à laquelle appliquer la fonction.</param>
      <param name="func">Fonction à appeler sur chaque élément, de manière cumulative.</param>
      <typeparam name="T">Type d’élément contenu dans la collection.</typeparam>
      <returns>Valeur finale une fois que la fonction cumulative a été appliquée à tous les éléments.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``2(System.Collections.Immutable.ImmutableArray{``1},``0,System.Func{``0,``1,``0})">
      <summary>Applique une fonction à une séquence d’éléments de manière cumulative.</summary>
      <param name="immutableArray">Collection à laquelle appliquer la fonction.</param>
      <param name="seed">Valeur d'accumulation initiale.</param>
      <param name="func">Fonction à appeler sur chaque élément, de manière cumulative.</param>
      <typeparam name="TAccumulate">Type de la valeur cumulée.</typeparam>
      <typeparam name="T">Type d’élément contenu dans la collection.</typeparam>
      <returns>Valeur d'accumulation finale.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``3(System.Collections.Immutable.ImmutableArray{``2},``0,System.Func{``0,``2,``0},System.Func{``0,``1})">
      <summary>Applique une fonction à une séquence d’éléments de manière cumulative.</summary>
      <param name="immutableArray">Collection à laquelle appliquer la fonction.</param>
      <param name="seed">Valeur d'accumulation initiale.</param>
      <param name="func">Fonction à appeler sur chaque élément, de manière cumulative.</param>
      <param name="resultSelector" />
      <typeparam name="TAccumulate">Type de la valeur cumulée.</typeparam>
      <typeparam name="TResult">Type de résultat retourné par le sélecteur de résultat.</typeparam>
      <typeparam name="T">Type d’élément contenu dans la collection.</typeparam>
      <returns>Valeur d'accumulation finale.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.All``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Obtient une valeur indiquant si tous les éléments de ce tableau correspondent à une condition donnée.</summary>
      <param name="immutableArray">Tableau pour rechercher les correspondances.</param>
      <param name="predicate">Prédicat.</param>
      <typeparam name="T">Type d’élément contenu dans la collection.</typeparam>
      <returns>
        <see langword="true" /> si chaque élément de la séquence source réussit le test dans le prédicat spécifié ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Obtient une valeur qui indique si le tableau contient des éléments.</summary>
      <param name="immutableArray">Tableau pour rechercher les éléments.</param>
      <typeparam name="T">Type d’élément contenu dans la collection.</typeparam>
      <returns>
        <see langword="true" /> si le tableau contient des éléments ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Obtient une valeur qui indique si le tableau contient des éléments qui correspondent à une condition spécifiée.</summary>
      <param name="immutableArray">Tableau pour rechercher les éléments.</param>
      <param name="predicate">Délégué qui définit la condition de correspondance d’un élément.</param>
      <typeparam name="T">Type d’élément contenu dans la collection.</typeparam>
      <returns>
        <see langword="true" /> si un élément correspond à la condition spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Retourne une valeur qui indique si cette collection contient des éléments.</summary>
      <param name="builder">Générateur pour rechercher les correspondances.</param>
      <typeparam name="T">Type des éléments dans le tableau.</typeparam>
      <returns>
        <see langword="true" /> Si le générateur de tableaux contient des éléments ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ElementAt``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)">
      <summary>Retourne l’élément à l’index spécifié dans le tableau.</summary>
      <param name="immutableArray">Tableau dans lequel rechercher un élément.</param>
      <param name="index">Index de l’élément à récupérer.</param>
      <typeparam name="T">Type d’élément contenu dans la collection.</typeparam>
      <returns>Élément situé à l'index spécifié.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ElementAtOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)">
      <summary>Retourne l’élément situé à un index spécifié dans une séquence ou une valeur par défaut si l’index est hors limites.</summary>
      <param name="immutableArray">Tableau dans lequel rechercher un élément.</param>
      <param name="index">Index de l’élément à récupérer.</param>
      <typeparam name="T">Type d’élément contenu dans la collection.</typeparam>
      <returns>Élément à l’index spécifié ou la valeur par défaut si l’index est introuvable.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Retourne le premier élément d’un tableau.</summary>
      <param name="immutableArray">Tableau auprès duquel obtenir un élément.</param>
      <typeparam name="T">Type d’élément contenu dans la collection.</typeparam>
      <returns>Premier élément du tableau.</returns>
      <exception cref="T:System.InvalidOperationException">Si le tableau est vide.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Retourne le premier élément d’une séquence à satisfaire à la condition spécifiée.</summary>
      <param name="immutableArray">Tableau auprès duquel obtenir un élément.</param>
      <param name="predicate">Délégué qui définit les conditions de l’élément à rechercher.</param>
      <typeparam name="T">Type d’élément contenu dans la collection.</typeparam>
      <returns>Premier élément de la liste s’il satisfait la condition spécifiée par <paramref name="predicate" />.</returns>
      <exception cref="T:System.InvalidOperationException">Si le tableau est vide.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Retourne le premier élément de la collection.</summary>
      <param name="builder">Générateur auprès duquel récupérer un élément.</param>
      <typeparam name="T">Type des éléments du tableau.</typeparam>
      <returns>Premier élément de la liste.</returns>
      <exception cref="T:System.InvalidOperationException">Si le tableau est vide.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Retourne le premier élément d’une séquence ou une valeur par défaut si la séquence ne contient aucun élément.</summary>
      <param name="immutableArray">Tableau auprès duquel récupérer des éléments.</param>
      <typeparam name="T">Type d’élément contenu dans la collection.</typeparam>
      <returns>Premier élément de la liste, le cas échéant ; sinon, la valeur par défaut pour le type d’élément.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Retourne le premier élément de la séquence à satisfaire à une condition ou une valeur par défaut si aucun élément correspondant n’est trouvé.</summary>
      <param name="immutableArray">Tableau auprès duquel récupérer des éléments.</param>
      <param name="predicate">Délégué qui définit les conditions de l’élément à rechercher.</param>
      <typeparam name="T">Type d’élément contenu dans la collection.</typeparam>
      <returns>Premier élément de la liste, le cas échéant ; sinon, la valeur par défaut pour le type d’élément.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Retourne le premier élément de la collection, ou la valeur par défaut si la collection est vide.</summary>
      <param name="builder">Générateur auprès duquel récupérer un élément.</param>
      <typeparam name="T">Type d’élément dans le générateur.</typeparam>
      <returns>Premier élément de la liste, le cas échéant ; sinon, la valeur par défaut pour le type d’élément.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Retourne le dernier élément du tableau.</summary>
      <param name="immutableArray">Tableau auprès duquel récupérer des éléments.</param>
      <typeparam name="T">Type d’élément contenu dans le tableau.</typeparam>
      <returns>Dernier élément du tableau.</returns>
      <exception cref="T:System.InvalidOperationException">Levé si la collection est vide.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Retourne le dernier élément d’une séquence à satisfaire à la condition spécifiée.</summary>
      <param name="immutableArray">Tableau auprès duquel récupérer des éléments.</param>
      <param name="predicate">Délégué qui définit les conditions de l’élément à récupérer.</param>
      <typeparam name="T">Type d’élément contenu dans la collection.</typeparam>
      <returns>Dernier élément du tableau qui satisfait à la condition <paramref name="predicate" />.</returns>
      <exception cref="T:System.InvalidOperationException">Levé si la collection est vide.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Retourne le dernier élément de la collection.</summary>
      <param name="builder">Générateur auprès duquel récupérer des éléments.</param>
      <typeparam name="T">Type d’élément dans le générateur.</typeparam>
      <returns>Dernier élément dans le générateur.</returns>
      <exception cref="T:System.InvalidOperationException">Levé si la collection est vide.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Retourne le dernier élément d’une séquence ou une valeur par défaut si la séquence ne contient aucun élément.</summary>
      <param name="immutableArray">Tableau auprès duquel récupérer des éléments.</param>
      <typeparam name="T">Type d’élément contenu dans la collection.</typeparam>
      <returns>Dernier élément d’une séquence, ou valeur par défaut si la séquence ne contient aucun élément.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Retourne le dernier élément d’une séquence à satisfaire à une condition ou une valeur par défaut si aucun élément correspondant n’est trouvé.</summary>
      <param name="immutableArray">Tableau auprès duquel récupérer un élément.</param>
      <param name="predicate">Délégué qui définit les conditions de l’élément à rechercher.</param>
      <typeparam name="T">Type d’élément contenu dans la collection.</typeparam>
      <returns>Dernier élément d’une séquence, ou valeur par défaut si la séquence ne contient aucun élément.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Retourne le dernier élément de la collection, ou la valeur par défaut si la collection est vide.</summary>
      <param name="builder">Générateur auprès duquel récupérer un élément.</param>
      <typeparam name="T">Type d’élément dans le générateur.</typeparam>
      <returns>Dernier élément d’une séquence, ou valeur par défaut si la séquence ne contient aucun élément.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Select``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})">
      <summary>Projette chaque élément d’une séquence dans un nouveau formulaire.</summary>
      <param name="immutableArray">Tableau immuable à partir duquel sélectionner des éléments.</param>
      <param name="selector">Fonction de transformation à appliquer à chaque élément.</param>
      <typeparam name="T">Type d’élément contenu dans la collection.</typeparam>
      <typeparam name="TResult">Type de l’élément de résultat.</typeparam>
      <returns>Une <see cref="T:System.Collections.Generic.IEnumerable`1" /> dont les éléments résultent d’un appel de la fonction de transformation sur chaque élément de source.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SelectMany``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>Projette chaque élément d’une séquence sur un <see cref="T:System.Collections.Generic.IEnumerable`1" />, aplatit les séquences résultantes en une seule séquence, puis appelle une fonction de sélection de résultat sur chaque élément inclus.</summary>
      <param name="immutableArray">Tableau immuable.</param>
      <param name="collectionSelector">Fonction de transformation à appliquer à chaque élément de la séquence d'entrée.</param>
      <param name="resultSelector">Fonction de transformation à appliquer à chaque élément de la séquence intermédiaire.</param>
      <typeparam name="TSource">Le type des éléments de <paramref name="immutableArray" />.</typeparam>
      <typeparam name="TCollection">Type des éléments intermédiaires collectés par <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult">Type des éléments de la séquence résultante.</typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> dont les éléments résultent d’un appel de la fonction de transformation <paramref name="collectionSelector" /> de type un-à-plusieurs sur chaque élément de <paramref name="immutableArray" /> et du mappage de chacun de ces éléments de séquence ainsi que de leur élément source correspondant à un élément de résultat.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Détermine si deux séquences sont égales selon un comparateur d’égalité.</summary>
      <param name="immutableArray">Tableau à utiliser pour la comparaison.</param>
      <param name="items">Éléments à utiliser pour la comparaison.</param>
      <param name="comparer">Comparateur à utiliser pour vérifier l’égalité.</param>
      <typeparam name="TDerived">Type d’élément dans le tableau de comparaison.</typeparam>
      <typeparam name="TBase">Type d’élément contenu dans la collection.</typeparam>
      <returns>
        <see langword="true" /> pour indiquer que les séquences sont égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Détermine si deux séquences sont égales selon un comparateur d’égalité.</summary>
      <param name="immutableArray">Tableau à utiliser pour la comparaison.</param>
      <param name="items">Éléments à utiliser pour la comparaison.</param>
      <param name="comparer">Comparateur à utiliser pour vérifier l’égalité.</param>
      <typeparam name="TDerived">Type d’élément dans le tableau de comparaison.</typeparam>
      <typeparam name="TBase">Type d’élément contenu dans la collection.</typeparam>
      <returns>
        <see langword="true" /> pour indiquer que les séquences sont égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Func{``1,``1,System.Boolean})">
      <summary>Détermine si deux séquences sont égales selon un comparateur d’égalité.</summary>
      <param name="immutableArray">Tableau à utiliser pour la comparaison.</param>
      <param name="items">Éléments à utiliser pour la comparaison.</param>
      <param name="predicate">Comparateur à utiliser pour vérifier l’égalité.</param>
      <typeparam name="TDerived">Type d’élément dans le tableau de comparaison.</typeparam>
      <typeparam name="TBase">Type d’élément contenu dans la collection.</typeparam>
      <returns>
        <see langword="true" /> pour indiquer que les séquences sont égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Retourne l’élément unique d’une séquence ou lève une exception si cette séquence ne contient pas un seul élément.</summary>
      <param name="immutableArray">Tableau à partir duquel récupérer l’élément.</param>
      <typeparam name="T">Type d’élément contenu dans la collection.</typeparam>
      <returns>Élément dans la séquence.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Retourne le seul élément d’une séquence qui satisfait à une condition spécifique ou lève une exception si cette séquence contient plusieurs éléments respectant cette condition.</summary>
      <param name="immutableArray" />
      <param name="predicate" />
      <typeparam name="T">Type d’élément contenu dans la collection.</typeparam>
      <returns>retourne <see cref="T:System.Boolean" /> ;</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Retourne l’élément unique d’un tableau ou une valeur par défaut. Cette méthode lève une exception si cette séquence contient plusieurs éléments.</summary>
      <param name="immutableArray">Tableau.</param>
      <typeparam name="T">Type d’élément contenu dans la collection.</typeparam>
      <returns>Élément dans le tableau ou la valeur par défaut si le tableau est vide.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contient plusieurs éléments.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Retourne l’élément unique d’une séquence ou une valeur par défaut si cette séquence ne contient pas d’élément respectant cette condition. Cette méthode lève une exception si cette séquence contient plusieurs éléments satisfaisant à cette condition.</summary>
      <param name="immutableArray">Tableau à partir duquel récupérer l’élément.</param>
      <param name="predicate">Condition que l’élément doit satisfaire.</param>
      <typeparam name="T">Type d’élément contenu dans la collection.</typeparam>
      <returns>Élément s’il satisfait la condition spécifiée ; sinon, l’élément par défaut.</returns>
      <exception cref="T:System.InvalidOperationException">Plusieurs éléments satisfont à la condition dans <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToArray``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Copie le contenu de ce tableau dans un tableau mutable.</summary>
      <param name="immutableArray" />
      <typeparam name="T">Type d’élément contenu dans la collection.</typeparam>
      <returns>Tableau nouvellement instancié.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0})">
      <summary>Crée un dictionnaire basé sur le contenu de ce tableau.</summary>
      <param name="immutableArray">Tableau à partir duquel créer un dictionnaire.</param>
      <param name="keySelector">Sélecteur de clé.</param>
      <typeparam name="TKey">Type de la clé.</typeparam>
      <typeparam name="T">Type d’élément contenu dans la collection.</typeparam>
      <returns>Dictionnaire qui vient d’être initialisé.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Crée un dictionnaire basé sur le contenu de ce tableau.</summary>
      <param name="immutableArray">Tableau à partir duquel créer un dictionnaire.</param>
      <param name="keySelector">Sélecteur de clé.</param>
      <param name="comparer">Comparateur permettant d’initialiser le dictionnaire.</param>
      <typeparam name="TKey">Type de la clé.</typeparam>
      <typeparam name="T">Type d’élément contenu dans la collection.</typeparam>
      <returns>Dictionnaire qui vient d’être initialisé.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1})">
      <summary>Crée un dictionnaire basé sur le contenu de ce tableau.</summary>
      <param name="immutableArray">Tableau à partir duquel créer un dictionnaire.</param>
      <param name="keySelector">Sélecteur de clé.</param>
      <param name="elementSelector">Sélecteur d’élément.</param>
      <typeparam name="TKey">Type de la clé.</typeparam>
      <typeparam name="TElement">Type de l'élément.</typeparam>
      <typeparam name="T">Type d’élément contenu dans la collection.</typeparam>
      <returns>Dictionnaire qui vient d’être initialisé.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Crée un dictionnaire basé sur le contenu de ce tableau.</summary>
      <param name="immutableArray">Tableau à partir duquel créer un dictionnaire.</param>
      <param name="keySelector">Sélecteur de clé.</param>
      <param name="elementSelector">Sélecteur d’élément.</param>
      <param name="comparer">Comparateur permettant d’initialiser le dictionnaire.</param>
      <typeparam name="TKey">Type de la clé.</typeparam>
      <typeparam name="TElement">Type de l'élément.</typeparam>
      <typeparam name="T">Type d’élément contenu dans la collection.</typeparam>
      <returns>Dictionnaire qui vient d’être initialisé.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Where``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Filtre une séquence de valeurs selon un prédicat.</summary>
      <param name="immutableArray">Tableau à filtrer.</param>
      <param name="predicate">Condition à utiliser pour filtrer le contenu du tableau.</param>
      <typeparam name="T">Type d’élément contenu dans la collection.</typeparam>
      <returns>Retourne <see cref="T:System.Collections.Generic.IEnumerable`1" /> qui contient les éléments qui répondent à la condition.</returns>
    </member>
  </members>
</doc>
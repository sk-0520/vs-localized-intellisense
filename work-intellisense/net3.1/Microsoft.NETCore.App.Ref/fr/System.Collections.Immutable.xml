<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Collections.Immutable</name>
  </assembly>
  <members>
    <member name="T:System.Collections.Immutable.IImmutableDictionary`2">
      <summary vsli:raw="Represents an immutable collection of key/value pairs.  &#xA;&#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Représente une collection immuable de paires clé/valeur.
NuGet package: System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="TKey" vsli:raw="The type of keys in the dictionary.">Type des clés du dictionnaire.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values in the dictionary.">Type des valeurs du dictionnaire.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Add(`0,`1)">
      <summary vsli:raw="Adds an element with the specified key and value to the dictionary.">Ajoute un élément avec la clé et la valeur spécifiées dans le dictionnaire.</summary>
      <param name="key" vsli:raw="The key of the element to add.">Clé de l'élément à ajouter.</param>
      <param name="value" vsli:raw="The value of the element to add.">Valeur de l'élément à ajouter.</param>
      <returns vsli:raw="A new immutable dictionary that contains the additional key/value pair.">Nouveau dictionnaire immuable qui contient la paire clé/valeur supplémentaire.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The given key already exists in the dictionary but has a different value.">La clé donnée existe déjà dans le dictionnaire, mais a une valeur différente.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Adds the specified key/value pairs to the dictionary.">Ajoute les paires clé/valeur spécifiées au dictionnaire.</summary>
      <param name="pairs" vsli:raw="The key/value pairs to add.">Paires clé/valeur à ajouter.</param>
      <returns vsli:raw="A new immutable dictionary that contains the additional key/value pairs.">Nouveau dictionnaire immuable qui contient les paires clé/valeur supplémentaires.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="One of the given keys already exists in the dictionary but has a different value.">Une des clés données existe déjà dans le dictionnaire, mais a une valeur différente.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Clear">
      <summary vsli:raw="Retrieves an empty dictionary that has the same ordering and key/value comparison rules as this dictionary instance.">Récupère un dictionnaire vide qui possède les mêmes règles de comparaison de classement et de clé/valeur que cette instance du dictionnaire.</summary>
      <returns vsli:raw="An empty dictionary with equivalent ordering and key/value comparison rules.">Dictionnaire vide avec des règles de comparaison de classement et de clé/valeur équivalentes.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether the immutable dictionary contains the specified key/value pair.">Détermine si le dictionnaire immuable contient la paire clé/valeur spécifiée.</summary>
      <param name="pair" vsli:raw="The key/value pair to locate.">Paire clé/valeur à rechercher.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified key/value pair is found in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la paire clé/valeur spécifiée est trouvée dans le dictionnaire ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the immutable dictionary.">Supprime l’élément avec la clé spécifiée du dictionnaire immuable.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Clé de l'élément à supprimer.</param>
      <returns vsli:raw="A new immutable dictionary with the specified element removed; or this instance if the specified key cannot be found in the dictionary.">Nouveau dictionnaire immuable avec l’élément spécifié supprimé ; ou cette instance si la clé spécifiée est introuvable dans le dictionnaire.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements with the specified keys from the immutable dictionary.">Supprime les éléments avec les clés spécifiées du dictionnaire immuable.</summary>
      <param name="keys" vsli:raw="The keys of the elements to remove.">Clés des éléments à supprimer.</param>
      <returns vsli:raw="A new immutable dictionary with the specified keys removed; or this instance if the specified keys cannot be found in the dictionary.">Nouveau dictionnaire immuable avec les clés spécifiées supprimées ; ou cette instance si les clés spécifiées sont introuvables dans le dictionnaire.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.SetItem(`0,`1)">
      <summary vsli:raw="Sets the specified key and value in the immutable dictionary, possibly overwriting an existing value for the key.">Définit la clé et la valeur spécifiées dans le dictionnaire immuable, en remplaçant éventuellement une valeur existante pour la clé.</summary>
      <param name="key" vsli:raw="The key of the entry to add.">Clé de l'entrée à ajouter.</param>
      <param name="value" vsli:raw="The key value to set.">Valeur de clé à définir.</param>
      <returns vsli:raw="A new immutable dictionary that contains the specified key/value pair.">Nouveau dictionnaire immuable qui contient la paire clé/valeur spécifiée.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Sets the specified key/value pairs in the immutable dictionary, possibly overwriting existing values for the keys.">Définit les paires clé/valeur spécifiées dans le dictionnaire immuable, en remplaçant éventuellement des valeurs existantes pour les clés.</summary>
      <param name="items" vsli:raw="The key/value pairs to set in the dictionary. If any of the keys already exist in the dictionary, this method will overwrite their previous values.">Paires clé/valeur à définir dans le dictionnaire. Si une clé existe déjà dans le dictionnaire, cette méthode remplace leurs valeurs précédentes.</param>
      <returns vsli:raw="A new immutable dictionary that contains the specified key/value pairs.">Nouveau dictionnaire immuable qui contient les paires clé/valeur spécifiées.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.TryGetKey(`0,`0@)">
      <summary vsli:raw="Determines whether this dictionary contains a specified key.">Détermine si ce dictionnaire contient la clé spécifiée.</summary>
      <param name="equalKey" vsli:raw="The key to search for.">Clé à rechercher.</param>
      <param name="actualKey" vsli:raw="The matching key located in the dictionary if found, or &lt;c&gt;equalkey&lt;/c&gt; if no match is found.">Clé correspondante située dans le dictionnaire, le cas échéant, ou <c>equalkey</c> si aucune correspondance n’est trouvée.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a match for &lt;paramref name=&quot;equalKey&quot; /&gt; is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si une correspondance pour <paramref name="equalKey" /> est trouvée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableList`1">
      <summary vsli:raw="Represents a list of elements that cannot be modified.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Représente une liste d’éléments qui ne peuvent pas être modifiés.
Package NuGet : System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the list.">Type d'éléments de la liste.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Add(`0)">
      <summary vsli:raw="Makes a copy of the list, and adds the specified object to the end of the copied list.">Effectue une copie de la liste et ajoute l’objet spécifié à la fin de la liste copiée.</summary>
      <param name="value" vsli:raw="The object to add to the list.">Objet à ajouter à la liste.</param>
      <returns vsli:raw="A new list with the object added.">Nouvelle liste contenant l'objet ajouté.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Makes a copy of the list and adds the specified objects to the end of the copied list.">Effectue une copie de la liste et ajoute les objets spécifiés à la fin de la liste copiée.</summary>
      <param name="items" vsli:raw="The objects to add to the list.">Objet à ajouter à la liste.</param>
      <returns vsli:raw="A new list with the elements added.">Nouvelle liste contenant les éléments ajoutés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Clear">
      <summary vsli:raw="Creates  a list with all the items removed, but with the same sorting and ordering semantics as this list.">Crée une liste de tous les éléments supprimés, mais avec la même sémantique de tri et de classement que cette liste.</summary>
      <returns vsli:raw="An empty list that has the same sorting and ordering semantics as this instance.">Une liste vide avec la même sémantique de tri et de classement que cette instance.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableList`1&quot; /&gt; that starts at the specified index and contains the specified number of elements.">Recherche l'objet spécifié et retourne l'index de base zéro de la première occurrence trouvée dans la plage d'éléments de <see cref="T:System.Collections.Immutable.IImmutableList`1" /> qui commence à l'index spécifié et qui contient le nombre d'éléments spécifié.</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableList`1&quot; /&gt;. This value can be null for reference types.">Objet à rechercher dans <see cref="T:System.Collections.Immutable.IImmutableList`1" />. Cette valeur peut être null pour les types référence.</param>
      <param name="index" vsli:raw="The zero-based starting indexes of the search. 0 (zero) is valid in an empty list.">Index de début de base zéro de la recherche. 0 (zéro) est valide dans une liste vide.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Nombre d'éléments contenus dans la section où la recherche doit être effectuée.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to locate &lt;paramref name=&quot;item&quot; /&gt;.">Comparateur d’égalité à utiliser pour rechercher <paramref name="item" />.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableList`1&quot; /&gt; that starts at &lt;paramref name=&quot;index&quot; /&gt; and contains &lt;paramref name=&quot;count&quot; /&gt; number of elements if found; otherwise -1.">Index de base zéro de la première occurrence de <paramref name="item" /> trouvée dans la plage d’éléments de <see cref="T:System.Collections.Immutable.IImmutableList`1" /> qui commence à <paramref name="index" /> et contient le nombre <paramref name="count" /> d’éléments, le cas échéant ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts the specified element at the specified index in the immutable list.">Insère l’élément spécifié à l’index spécifié dans la liste immuable.</summary>
      <param name="index" vsli:raw="The zero-based index at which to insert the value.">Index de base zéro au niveau duquel insérer la valeur.</param>
      <param name="element" vsli:raw="The object to insert.">Objet à insérer.</param>
      <returns vsli:raw="A new immutable list that includes the specified element.">Nouvelle liste immuable qui inclut l’élément spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the specified elements at the specified index in the immutable list.">Insère les éléments spécifiés à l’index spécifié dans la liste immuable.</summary>
      <param name="index" vsli:raw="The zero-based index at which the new elements should be inserted.">Index de base zéro au niveau duquel les nouveaux éléments devraient être insérés.</param>
      <param name="items" vsli:raw="The elements to insert.">Éléments à insérer.</param>
      <returns vsli:raw="A new immutable list that includes the specified elements.">Nouvelle liste immuable qui inclut les éléments spécifiés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableList`1&quot; /&gt; that contains the specified number of elements and ends at the specified index.">Recherche l'objet spécifié et retourne l'index de base zéro de la dernière occurrence trouvée dans la plage d'éléments de <see cref="T:System.Collections.Immutable.IImmutableList`1" /> qui contient le nombre spécifié d'éléments et se termine à l'index spécifié.</summary>
      <param name="item" vsli:raw="The object to locate in the list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objet à localiser dans la liste. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">Index de début de base zéro de la recherche. 0 (zéro) est valide dans une liste vide.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Nombre d'éléments contenus dans la section où la recherche doit être effectuée.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to match &lt;paramref name=&quot;item&quot; /&gt;.">Comparateur d’égalité pour correspondre à <paramref name="item" />.</param>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">retourne <see cref="T:System.Int32" /> ;</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the first occurrence of a specified object from this immutable list.">Supprime la première occurrence de l’objet spécifié de cette liste immuable.</summary>
      <param name="value" vsli:raw="The object to remove from the list.">Objet à supprimer de la liste.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to locate &lt;paramref name=&quot;value&quot; /&gt;.">Comparateur d’égalité à utiliser pour rechercher <paramref name="value" />.</param>
      <returns vsli:raw="A new list with the specified object removed.">Nouvelle liste avec l’objet spécifié supprimé.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the elements that match the conditions defined by the specified predicate.">Supprime tous les éléments qui correspondent aux conditions définies par le prédicat spécifié.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">Délégué qui définit les conditions des éléments à supprimer.</param>
      <returns vsli:raw="A new immutable list with the elements removed.">Nouvelle liste immuable avec les éléments supprimés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the element at the specified index of the immutable list.">Supprime l’élément à l’index spécifié de la liste immuable.</summary>
      <param name="index" vsli:raw="The index of the element to remove.">Index de l'élément à supprimer.</param>
      <returns vsli:raw="A new list with the element removed.">Nouvelle liste avec l’élément supprimé.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the specified object from the list.">Supprime l’objet spécifié de la liste.</summary>
      <param name="items" vsli:raw="The objects to remove from the list.">Objets à supprimer de la liste.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to determine if &lt;paramref name=&quot;items&quot; /&gt; match any objects in the list.">Comparateur d’égalité à utiliser pour déterminer si <paramref name="items" /> correspond à tous les objets de la liste.</param>
      <returns vsli:raw="A new immutable list with the specified objects removed, if &lt;paramref name=&quot;items&quot; /&gt; matched objects in the list.">Nouvelle liste immuable avec les objets spécifiés supprimés, si <paramref name="items" /> correspond aux objets de la liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Removes a range of elements from the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableList`1&quot; /&gt;.">Supprime une plage d'éléments de <see cref="T:System.Collections.Immutable.IImmutableList`1" />.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range of elements to remove.">Index de début de base zéro de la plage d'éléments à supprimer.</param>
      <param name="count" vsli:raw="The number of elements to remove.">Nombre d'éléments à supprimer.</param>
      <returns vsli:raw="A new immutable list with the elements removed.">Nouvelle liste immuable avec les éléments supprimés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Returns a new list with the first matching element in the list replaced with the specified element.">Retourne une nouvelle liste avec le premier élément correspondant de la liste remplacé par l’élément spécifié.</summary>
      <param name="oldValue" vsli:raw="The element to be replaced.">Élément à remplacer.</param>
      <param name="newValue" vsli:raw="The element to replace the first occurrence of &lt;paramref name=&quot;oldValue&quot; /&gt; with.">Élément par lequel remplacer par la première occurrence de <paramref name="oldValue" />.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use for matching &lt;paramref name=&quot;oldValue&quot; /&gt;.">Comparateur d’égalité à utiliser pour la correspondance <paramref name="oldValue" />.</param>
      <returns vsli:raw="A new list that contains &lt;paramref name=&quot;newValue&quot; /&gt;, even if &lt;paramref name=&quot;oldvalue&quot; /&gt; is the same as &lt;paramref name=&quot;newValue&quot; /&gt;.">Nouvelle liste contenant <paramref name="newValue" />, même si <paramref name="oldvalue" /> est identique à <paramref name="newValue" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; does not exist in the list.">
        <paramref name="oldValue" /> n’existe pas dans la liste.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces an element in the list at a given position with the specified element.">Remplace un élément de la liste à une position donnée par l’élément spécifié.</summary>
      <param name="index" vsli:raw="The position in the list of the element to replace.">Position dans la liste de l’élément à remplacer.</param>
      <param name="value" vsli:raw="The element to replace the old element with.">Élément avec lequel remplacer l’ancien élément.</param>
      <returns vsli:raw="A new list that contains the new element, even if the element at the specified location is the same as the new element.">Nouvelle liste qui contient le nouvel élément, même si l’élément à l’emplacement spécifié est le même que le nouvel élément.</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableQueue`1">
      <summary vsli:raw="Represents an immutable first-in, first-out collection of objects.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Représente une collection d’objets premier entré, premier sorti immuable.
NuGet package: System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the queue.">Type des éléments dans la file d’attente.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Clear">
      <summary vsli:raw="Returns a new queue with all the elements removed.">Retourne une nouvelle file d’attente avec tous les éléments supprimés.</summary>
      <returns vsli:raw="An empty immutable queue.">File d’attente immuable vide.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Dequeue">
      <summary vsli:raw="Removes the first element in the immutable queue, and returns the new queue.">Supprime le premier élément de la file d’attente immuable et retourne la nouvelle file d’attente.</summary>
      <returns vsli:raw="The new immutable queue with the first element removed. This value is never &lt;see langword=&quot;null&quot; /&gt;.">Nouvelle file d’attente immuable avec l’élément de début supprimé. Cette valeur n’est jamais <see langword="null" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">La file d’attente est vide.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Enqueue(`0)">
      <summary vsli:raw="Adds an element to the end of the immutable queue, and returns the new queue.">Ajoute un élément à la fin de la file d’attente immuable et retourne la nouvelle file d’attente.</summary>
      <param name="value" vsli:raw="The element to add.">Élément à ajouter.</param>
      <returns vsli:raw="The new immutable queue with the specified element added.">Nouvelle file d’attente immuable avec l’élément spécifié ajouté.</returns>
    </member>
    <member name="P:System.Collections.Immutable.IImmutableQueue`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this immutable queue is empty.">Obtient une valeur qui indique si cette file d’attente immuable est vide.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this queue is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si cette file d’attente est vide ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Peek">
      <summary vsli:raw="Returns the element at the beginning of the immutable queue without removing it.">Retourne l’élément au début de la file d’attente immuable sans le supprimer.</summary>
      <returns vsli:raw="The element at the beginning of the queue.">Élément au début de la file d’attente.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">La file d’attente est vide.</exception>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableSet`1">
      <summary vsli:raw="Represents a set of elements that can only be modified by creating a new instance of the set.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Représente un ensemble d’éléments qui ne peut être modifié en créant une nouvelle instance de l’ensemble.
NuGet package: System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="T" vsli:raw="The type of element stored in the set.">Type d’élément stocké dans l’ensemble.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Add(`0)">
      <summary vsli:raw="Adds the specified element to this immutable set.">Ajoute l’élément spécifié à cet ensemble immuable.</summary>
      <param name="value" vsli:raw="The element to add.">Élément à ajouter.</param>
      <returns vsli:raw="A new set with the element added, or this set if the element is already in the set.">Nouvel l’ensemble avec l’élément ajouté ou cet ensemble si l’élément est déjà dans cet ensemble.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Clear">
      <summary vsli:raw="Retrieves an empty immutable set that has the same sorting and ordering semantics as this instance.">Récupère un ensemble immuable vide qui a la même sémantique de tri et de classement que cette instance.</summary>
      <returns vsli:raw="An empty set that has the same sorting and ordering semantics as this instance.">Ensemble vide qui a la même sémantique de tri et de classement que cette instance.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Contains(`0)">
      <summary vsli:raw="Determines whether this immutable set contains a specified element.">Détermine si cet ensemble immuable contient un élément spécifié.</summary>
      <param name="value" vsli:raw="The element to locate in the set.">Élément à rechercher dans l'ensemble.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the set contains the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’ensemble contient la valeur spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements in the specified collection from the current immutable set.">Supprime les éléments de la collection spécifiée de l’ensemble actuel immuable.</summary>
      <param name="other" vsli:raw="The collection of items to remove from this set.">Collection d’éléments à supprimer de cet ensemble.</param>
      <returns vsli:raw="A new set with the items removed; or the original set if none of the items were in the set.">Nouvel ensemble avec les éléments supprimés ; ou ensemble d’origine si aucun des éléments ne se trouvaient dans l’ensemble.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains only elements that exist in this set and the specified set.">Crée un ensemble immuable qui contient uniquement les éléments qui existent dans cet ensemble et l’ensemble spécifié.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableSet`1&quot; /&gt;.">Collection à comparer à l’<see cref="T:System.Collections.Immutable.IImmutableSet`1" /> actuel.</param>
      <returns vsli:raw="A new immutable set that contains elements that exist in both sets.">Nouvel ensemble immuable qui contient des éléments qui existent dans les deux ensembles.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set is a proper (strict) subset of the specified collection.">Détermine si l’ensemble immuable actuel est un sous-ensemble approprié (strict) de la collection spécifiée.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Collection à comparer à l’ensemble actuel.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper subset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’ensemble actuel est un sous-ensemble approprié de la collection spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set is a proper (strict) superset of the specified collection.">Détermine si l’ensemble immuable actuel est un sur-ensemble (strict) de la collection spécifiée.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Collection à comparer à l’ensemble actuel.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper superset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’ensemble actuel est un sur-ensemble approprié de la collection spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set is a subset of a specified collection.">Détermine si l’ensemble immuable actuel est un sous-ensemble d’une collection spécifiée.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Collection à comparer à l’ensemble actuel.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a subset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’ensemble actuel est un sous-ensemble de la collection spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set is a superset of a specified collection.">Détermine si l’ensemble immuable actuel est un sur-ensemble de la collection spécifiée.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Collection à comparer à l’ensemble actuel.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a superset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’ensemble actuel est un sur-ensemble de la collection spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set overlaps with the specified collection.">Détermine si l’ensemble immuable actuel chevauche la collection spécifiée.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Collection à comparer à l’ensemble actuel.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set and the specified collection share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’ensemble actuel et la collection spécifiée partagent au moins un élément commun ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Remove(`0)">
      <summary vsli:raw="Removes the specified element from this immutable set.">Supprime l’élément spécifié de cet ensemble immuable.</summary>
      <param name="value" vsli:raw="The element to remove.">Élément à supprimer.</param>
      <returns vsli:raw="A new set with the specified element removed, or the current set if the element cannot be found in the set.">Nouvel ensemble avec l’élément spécifié supprimé, ou ensemble actuel si l’élément est introuvable dans l’ensemble.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set and the specified collection contain the same elements.">Détermine si l’ensemble immuable actuel et la collection spécifiée contiennent les mêmes éléments.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Collection à comparer à l’ensemble actuel.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the sets are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si les ensemble sont égaux ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains only elements that are present either in the current set or in the specified collection, but not both.">Crée un ensemble immuable qui contient uniquement les éléments qui sont présents dans l’ensemble actuel ou dans la collection spécifiée, mais pas dans les deux.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Collection à comparer à l’ensemble actuel.</param>
      <returns vsli:raw="A new set that contains the elements that are present only in the current set or in the specified collection, but not both.">Nouvel ensemble qui contient les éléments qui sont présents uniquement dans l’ensemble actuel ou dans la collection spécifiée, mais pas dans les deux.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.TryGetValue(`0,`0@)">
      <summary vsli:raw="Determines whether the set contains a specified value.">Détermine si l’ensemble contient une valeur spécifiée.</summary>
      <param name="equalValue" vsli:raw="The value to search for.">La valeur à rechercher.</param>
      <param name="actualValue" vsli:raw="The matching value from the set, if found, or &lt;c&gt;equalvalue&lt;/c&gt; if there are no matches.">Valeur correspondante provenant de l’ensemble, le cas échéant, ou <c>equalvalue</c> s’il n’existe aucune correspondance.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a matching value was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si une valeur correspondante a été trouvée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates a new immutable set that contains all elements that are present in either the current set or in the specified collection.">Crée un nouvel ensemble immuable qui contient tous les éléments qui sont présents dans l’ensemble actuel ou dans la collection spécifiée.</summary>
      <param name="other" vsli:raw="The collection to add elements from.">Collection à partir de laquelle ajouter des éléments.</param>
      <returns vsli:raw="A new immutable set with the items added; or the original set if all the items were already in the set.">Nouvel ensemble immuable avec les éléments ajoutés ; ou ensemble d’origine si tous les éléments étaient déjà présents dans le jeu.</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableStack`1">
      <summary vsli:raw="Represents an immutable last-in-first-out (LIFO) collection.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Représente une collection de type dernier entré, premier sorti (LIFO) immuable.
NuGet package: System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the stack.">Type des éléments dans la pile.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Clear">
      <summary vsli:raw="Removes all objects from the immutable stack.">Supprime tous les objets de la pile immuable.</summary>
      <returns vsli:raw="An empty immutable stack.">Pile immuable vide.</returns>
    </member>
    <member name="P:System.Collections.Immutable.IImmutableStack`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this immutable stack is empty.">Obtient une valeur qui indique si cette pile immuable est vide.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this stack is empty; otherwise,&lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si cette pile est vide ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Peek">
      <summary vsli:raw="Returns the element at the top of the immutable stack without removing it.">Retourne l’élément en haut de la pile immuable sans le supprimer.</summary>
      <returns vsli:raw="The element at the top of the stack.">Élément en haut de la pile.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">La pile est vide.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Pop">
      <summary vsli:raw="Removes the element at the top of the immutable stack and returns the new stack.">Supprime l’élément en haut de la pile immuable et retourne la nouvelle pile.</summary>
      <returns vsli:raw="The new stack; never &lt;see langword=&quot;null&quot; /&gt;.">Nouvelle pile ; jamais <see langword="null" /></returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">La pile est vide.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Push(`0)">
      <summary vsli:raw="Inserts an element at the top of the immutable stack and returns the new stack.">Insère un élément en haut de la pile immuable et retourne la nouvelle pile.</summary>
      <param name="value" vsli:raw="The element to push onto the stack.">Élément à pousser vers la pile.</param>
      <returns vsli:raw="The new stack.">Nouvelle pile.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray">
      <summary vsli:raw="Provides methods for creating an array that is immutable; meaning it cannot be changed once it is created.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Fournit des méthodes pour la création d’un tableau immuable ; ce qui signifie qu’il ne peut pas être modifié une fois créé.
NuGet package: System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0)">
      <summary vsli:raw="Searches the sorted immutable array for a specified element using the default comparer and returns the zero-based index of the element, if it's found.">Recherche un élément spécifié dans le tableau immuable trié à l’aide du comparateur par défaut et retourne l’index de base zéro de l’élément, s’il est trouvé.</summary>
      <param name="array" vsli:raw="The sorted array to search.">Tableau trié à rechercher.</param>
      <param name="value" vsli:raw="The object to search for.">Objet à rechercher.</param>
      <typeparam name="T" vsli:raw="The type of element stored in the array.">Type d’élément stocké dans le tableau.</typeparam>
      <returns vsli:raw="The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;value&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.Generic.ICollection`1.Count&quot; /&gt;.">Index de base zéro de l’élément dans le tableau, si l’élément est trouvé ; sinon, un nombre négatif qui est le complément de bits de l’index de l’élément suivant est supérieur à <paramref name="value" /> ou, s’il n’existe aucun élément supérieur, le complément de bits de <see cref="P:System.Collections.Generic.ICollection`1.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt; or the search encounters an element that does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt;.">
        <paramref name="value" /> n’implémente pas <see cref="T:System.IComparable" /> ou la recherche rencontre un élément qui n’implémente pas <see cref="T:System.IComparable" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0,System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Searches a sorted immutable array for a specified element and returns the zero-based index of the element, if it's found.">Recherche un élément spécifié dans un tableau immuable trié et retourne l’index de base zéro de l’élément, s’il est trouvé.</summary>
      <param name="array" vsli:raw="The sorted array to search.">Tableau trié à rechercher.</param>
      <param name="value" vsli:raw="The object to search for.">Objet à rechercher.</param>
      <param name="comparer" vsli:raw="The comparer implementation to use when comparing elements, or null to use the default comparer.">Implémentation du comparateur à utiliser lors de la comparaison d’éléments, ou null pour utiliser le comparateur par défaut.</param>
      <typeparam name="T" vsli:raw="The type of element stored in the array.">Type d’élément stocké dans le tableau.</typeparam>
      <returns vsli:raw="The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;value&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.Generic.ICollection`1.Count&quot; /&gt;.">Index de base zéro de l’élément dans le tableau, si l’élément est trouvé ; sinon, un nombre négatif qui est le complément de bits de l’index de l’élément suivant est supérieur à <paramref name="value" /> ou, s’il n’existe aucun élément supérieur, le complément de bits de <see cref="P:System.Collections.Generic.ICollection`1.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is null and &lt;paramref name=&quot;value&quot; /&gt; does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt; or the search encounters an element that does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt;.">
        <paramref name="comparer" /> a la valeur null et <paramref name="value" /> n’implémente pas <see cref="T:System.IComparable" /> ou la recherche rencontre un élément qui n’implémente pas <see cref="T:System.IComparable" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0)">
      <summary vsli:raw="Searches a sorted immutable array for a specified element and returns the zero-based index of the element, if it's found.">Recherche un élément spécifié dans un tableau immuable trié et retourne l’index de base zéro de l’élément, s’il est trouvé.</summary>
      <param name="array" vsli:raw="The sorted array to search.">Tableau trié à rechercher.</param>
      <param name="index" vsli:raw="The starting index of the range to search.">Index de départ de la plage dans laquelle effectuer la recherche.</param>
      <param name="length" vsli:raw="The length of the range to search.">Longueur de la plage dans laquelle effectuer la recherche.</param>
      <param name="value" vsli:raw="The object to search for.">Objet à rechercher.</param>
      <typeparam name="T" vsli:raw="The type of element stored in the array.">Type d’élément stocké dans le tableau.</typeparam>
      <returns vsli:raw="The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;value&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.Generic.ICollection`1.Count&quot; /&gt;.">Index de base zéro de l’élément dans le tableau, si l’élément est trouvé ; sinon, un nombre négatif qui est le complément de bits de l’index de l’élément suivant est supérieur à <paramref name="value" /> ou, s’il n’existe aucun élément supérieur, le complément de bits de <see cref="P:System.Collections.Generic.ICollection`1.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt; or the search encounters an element that does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt;.">
        <paramref name="value" /> n’implémente pas <see cref="T:System.IComparable" /> ou la recherche rencontre un élément qui n’implémente pas <see cref="T:System.IComparable" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; do not specify a valid range in &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="index" /> et <paramref name="length" /> ne spécifient pas une plage valide dans <paramref name="array" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than the lower bound of &lt;paramref name=&quot;array&quot; /&gt;.&#xA;        &#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;length&quot; /&gt; is less than zero.">
        <paramref name="index" /> est inférieur à la limite inférieure d’<paramref name="array" />.
-ou-
<paramref name="length" /> est inférieur à zéro.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Searches a sorted immutable array for a specified element and returns the zero-based index of the element.">Recherche dans un tableau immuable trié d’un élément spécifié et retourne l’index de base zéro de l’élément.</summary>
      <param name="array" vsli:raw="The sorted array to search.">Tableau trié à rechercher.</param>
      <param name="index" vsli:raw="The starting index of the range to search.">Index de départ de la plage dans laquelle effectuer la recherche.</param>
      <param name="length" vsli:raw="The length of the range to search.">Longueur de la plage dans laquelle effectuer la recherche.</param>
      <param name="value" vsli:raw="The object to search for.">Objet à rechercher.</param>
      <param name="comparer" vsli:raw="The comparer to use when comparing elements for equality or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer.">Comparateur à utiliser lors de la comparaison d’éléments pour l’égalité ou <see langword="null" /> pour utiliser le comparateur par défaut.</param>
      <typeparam name="T" vsli:raw="The type of element stored in the array.">Type d’élément stocké dans le tableau.</typeparam>
      <returns vsli:raw="The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;value&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.Generic.ICollection`1.Count&quot; /&gt;.">Index de base zéro de l’élément dans le tableau, si l’élément est trouvé ; sinon, un nombre négatif qui est le complément de bits de l’index de l’élément suivant est supérieur à <paramref name="value" /> ou, s’il n’existe aucun élément supérieur, le complément de bits de <see cref="P:System.Collections.Generic.ICollection`1.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is null and &lt;paramref name=&quot;value&quot; /&gt; does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt; or the search encounters an element that does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt;.">
        <paramref name="comparer" /> a la valeur null et <paramref name="value" /> n’implémente pas <see cref="T:System.IComparable" /> ou la recherche rencontre un élément qui n’implémente pas <see cref="T:System.IComparable" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; do not specify a valid range in &lt;paramref name=&quot;array&quot; /&gt;.&#xA;        &#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and &lt;paramref name=&quot;value&quot; /&gt; is of a type that is not compatible with the elements of &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="index" /> et <paramref name="length" /> ne spécifient pas une plage valide dans <paramref name="array" />.
-ou-
<paramref name="comparer" /> a la valeur <see langword="null" /> et <paramref name="value" /> est d’un type qui n’est pas compatible avec les éléments de <paramref name="array" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than the lower bound of &lt;paramref name=&quot;array&quot; /&gt;.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;length&quot; /&gt; is less than zero.">
        <paramref name="index" /> est inférieur à la limite inférieure d’<paramref name="array" />.
-ou-
<paramref name="length" /> est inférieur à zéro.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1">
      <summary vsli:raw="Creates an empty immutable array.">Crée un tableau immuable vide.</summary>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">Type des éléments stockés dans le tableau.</typeparam>
      <returns vsli:raw="An empty immutable array.">Tableau immuable vide.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0)">
      <summary vsli:raw="Creates an immutable array that contains the specified object.">Crée un tableau immuable qui contient l’objet spécifié.</summary>
      <param name="item" vsli:raw="The object to store in the array.">Objet à stocker dans le tableau.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">Type des éléments stockés dans le tableau.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified object.">Tableau immuable qui contient l’objet spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0)">
      <summary vsli:raw="Creates an immutable array that contains the specified objects.">Crée un tableau immuable qui contient les objets spécifiés.</summary>
      <param name="item1" vsli:raw="The first object to store in the array.">Premier objet à stocker dans le tableau.</param>
      <param name="item2" vsli:raw="The second object to store in the array.">Deuxième objet à stocker dans le tableau.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">Type des éléments stockés dans le tableau.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified objects.">Tableau immuable qui contient les objets spécifiés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0)">
      <summary vsli:raw="Creates an immutable array that contains the specified objects.">Crée un tableau immuable qui contient les objets spécifiés.</summary>
      <param name="item1" vsli:raw="The first object to store in the array.">Premier objet à stocker dans le tableau.</param>
      <param name="item2" vsli:raw="The second object to store in the array.">Deuxième objet à stocker dans le tableau.</param>
      <param name="item3" vsli:raw="The third object to store in the array.">Troisième objet à stocker dans le tableau.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">Type des éléments stockés dans le tableau.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified objects.">Tableau immuable qui contient les objets spécifiés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0,``0)">
      <summary vsli:raw="Creates an immutable array that contains the specified objects.">Crée un tableau immuable qui contient les objets spécifiés.</summary>
      <param name="item1" vsli:raw="The first object to store in the array.">Premier objet à stocker dans le tableau.</param>
      <param name="item2" vsli:raw="The second object to store in the array.">Deuxième objet à stocker dans le tableau.</param>
      <param name="item3" vsli:raw="The third object to store in the array.">Troisième objet à stocker dans le tableau.</param>
      <param name="item4" vsli:raw="The fourth object to store in the array.">Quatrième objet à stocker dans le tableau.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">Type des éléments stockés dans le tableau.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified objects.">Tableau immuable qui contient les objets spécifiés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0[])">
      <summary vsli:raw="Creates an immutable array from the specified array of objects.">Crée un tableau immuable à partir du tableau spécifié d’objets.</summary>
      <param name="items" vsli:raw="The array of objects to populate the array with.">Tableau d’objets à utiliser pour remplir le tableau.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">Type des éléments stockés dans le tableau.</typeparam>
      <returns vsli:raw="An immutable array that contains the array of items.">Tableau immuable qui contient le tableau d’éléments.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0[],System.Int32,System.Int32)">
      <summary vsli:raw="Creates an immutable array with specified objects from another array.">Crée un tableau immuable avec les objets spécifiés à partir d’un autre tableau.</summary>
      <param name="items" vsli:raw="The source array of objects.">Tableau d’objets source.</param>
      <param name="start" vsli:raw="The index of the first element to copy from &lt;paramref name=&quot;items&quot; /&gt;.">Index du premier élément à copier à partir de <paramref name="items" />.</param>
      <param name="length" vsli:raw="The number of elements from &lt;paramref name=&quot;items&quot; /&gt; to include in this immutable array.">Nombre d’éléments à partir de <paramref name="items" /> à inclure dans ce tableau immuable.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">Type des éléments stockés dans le tableau.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified objects from the source array.">Tableau immuable qui contient les objets spécifiés à partir du tableau source.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32)">
      <summary vsli:raw="Creates an immutable array with the specified objects from another immutable array.">Crée un tableau immuable avec les objets spécifiés à partir d’un autre tableau immuable.</summary>
      <param name="items" vsli:raw="The source array of objects.">Tableau d’objets source.</param>
      <param name="start" vsli:raw="The index of the first element to copy from &lt;paramref name=&quot;items&quot; /&gt;.">Index du premier élément à copier à partir de <paramref name="items" />.</param>
      <param name="length" vsli:raw="The number of elements from &lt;paramref name=&quot;items&quot; /&gt; to include in this immutable array.">Nombre d’éléments à partir de <paramref name="items" /> à inclure dans ce tableau immuable.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">Type des éléments stockés dans le tableau.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified objects from the source array.">Tableau immuable qui contient les objets spécifiés à partir du tableau source.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateBuilder``1">
      <summary vsli:raw="Creates a mutable array that can be converted to an &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray&quot; /&gt; without allocating new memory.">Crée un tableau mutable qui peut être converti en un <see cref="T:System.Collections.Immutable.ImmutableArray" /> sans allouer de nouveaux modules de mémoire.</summary>
      <typeparam name="T" vsli:raw="The type of elements stored in the builder.">Type des éléments stockés dans le générateur.</typeparam>
      <returns vsli:raw="A mutable array of the specified type that can be efficiently converted to an immutable array.">Tableau mutable du type spécifié qui peut être efficacement converti en un tableau immuable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateBuilder``1(System.Int32)">
      <summary vsli:raw="Creates a mutable array that can be converted to an &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray&quot; /&gt; without allocating new memory.">Crée un tableau mutable qui peut être converti en un <see cref="T:System.Collections.Immutable.ImmutableArray" /> sans allouer de nouveaux modules de mémoire.</summary>
      <param name="initialCapacity" vsli:raw="The initial capacity of the builder.">Capacité initiale du générateur.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the builder.">Type des éléments stockés dans le générateur.</typeparam>
      <returns vsli:raw="A mutable array of the specified type that can be efficiently converted to an immutable array.">Tableau mutable du type spécifié qui peut être efficacement converti en un tableau immuable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; populated with the specified items.">Crée un nouveau <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> rempli avec les éléments spécifiés.</summary>
      <param name="items" vsli:raw="The elements to add to the array.">Éléments à ajouter au tableau.</param>
      <typeparam name="T" vsli:raw="The type of element stored in the array.">Type d’élément stocké dans le tableau.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified items.">Tableau immuable qui contient les éléments spécifiés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct.">Initialise une nouvelle instance du struct <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</summary>
      <param name="items" vsli:raw="The source array to initialize the resulting array with.">Tableau source avec lequel initialiser le tableau obtenant.</param>
      <param name="selector" vsli:raw="The function to apply to each element from the source array.">Fonction à appliquer à chaque élément du tableau source.</param>
      <typeparam name="TSource" vsli:raw="The type of element stored in the source array." />
      <typeparam name="TResult" vsli:raw="The type of element to store in the target array." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct.">Initialise une nouvelle instance du struct <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</summary>
      <param name="items" vsli:raw="The source array to initialize the resulting array with.">Tableau source avec lequel initialiser le tableau obtenant.</param>
      <param name="start" vsli:raw="The index of the first element in the source array to include in the resulting array.">Index du premier élément du tableau source à inclure dans le tableau obtenu.</param>
      <param name="length" vsli:raw="The number of elements from the source array to include in the resulting array.">Nombre d’éléments provenant du tableau source à inclure dans le tableau obtenu.</param>
      <param name="selector" vsli:raw="The function to apply to each element from the source array included in the resulting array.">Fonction à appliquer à chaque élément du tableau source inclus dans le tableau obtenu.</param>
      <typeparam name="TSource" vsli:raw="The type of element stored in the source array." />
      <typeparam name="TResult" vsli:raw="The type of element to store in the target array." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1,``2},``1)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct.">Initialise une nouvelle instance du struct <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</summary>
      <param name="items" vsli:raw="The source array to initialize the resulting array with.">Tableau source avec lequel initialiser le tableau obtenant.</param>
      <param name="selector" vsli:raw="The function to apply to each element from the source array.">Fonction à appliquer à chaque élément du tableau source.</param>
      <param name="arg" vsli:raw="An argument to be passed to the selector mapping function.">Argument à passer à la fonction de mappage de sélecteur.</param>
      <typeparam name="TSource" vsli:raw="The type of element stored in the source array." />
      <typeparam name="TArg" vsli:raw="The type of argument to pass to the selector mapping function." />
      <typeparam name="TResult" vsli:raw="The type of element to store in the target array." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1,``2},``1)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct.">Initialise une nouvelle instance du struct <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</summary>
      <param name="items" vsli:raw="The source array to initialize the resulting array with.">Tableau source avec lequel initialiser le tableau obtenant.</param>
      <param name="start" vsli:raw="The index of the first element in the source array to include in the resulting array.">Index du premier élément du tableau source à inclure dans le tableau obtenu.</param>
      <param name="length" vsli:raw="The number of elements from the source array to include in the resulting array.">Nombre d’éléments provenant du tableau source à inclure dans le tableau obtenu.</param>
      <param name="selector" vsli:raw="The function to apply to each element from the source array included in the resulting array.">Fonction à appliquer à chaque élément du tableau source inclus dans le tableau obtenu.</param>
      <param name="arg" vsli:raw="An argument to be passed to the selector mapping function.">Argument à passer à la fonction de mappage de sélecteur.</param>
      <typeparam name="TSource" vsli:raw="The type of element stored in the source array." />
      <typeparam name="TArg" vsli:raw="The type of argument to be passed to the selector mapping function." />
      <typeparam name="TResult" vsli:raw="The type of element to be stored in the target array." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates an immutable array from the specified collection.">Crée un tableau immuable à partir de la collection spécifiée.</summary>
      <param name="items" vsli:raw="The collection of objects to copy to the immutable array.">Collection d’objets à copier dans le tableau immuable.</param>
      <typeparam name="TSource" vsli:raw="The type of elements contained in &lt;paramref name=&quot;items&quot; /&gt;.">Type d’éléments contenus dans <paramref name="items" />.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified collection of objects.">Tableau immuable qui contient la collection d’objets spécifiée.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Creates an immutable array from the current contents of the builder's array.">Crée un tableau immuable à partir du contenu actuel du tableau du générateur.</summary>
      <param name="builder" vsli:raw="The builder to create the immutable array from.">Générateur à partir duquel créer le tableau immuable.</param>
      <typeparam name="TSource" vsli:raw="The type of elements contained in the immutable array.">Type des éléments contenus dans le tableau immuable.</typeparam>
      <returns vsli:raw="An immutable array that contains the current contents of the builder's array.">Tableau immuable qui contient le contenu actuel du tableau du générateur.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1">
      <summary vsli:raw="Represents an array that is immutable; meaning it cannot be changed once it is created.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Représente un tableau qui est immuable ; ce qui signifie qu’il ne peut pas être modifié une fois créé.
Package NuGet : System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="T" vsli:raw="The type of element stored by the array.">Type d’élément stocké par le tableau.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Add(`0)">
      <summary vsli:raw="Returns a copy of the original array with the specified item added to the end.">Retourne une copie du tableau d’origine avec l’élément spécifié ajouté à la fin.</summary>
      <param name="item" vsli:raw="The item to be added to the end of the array.">Élément à ajouter à la fin du tableau.</param>
      <returns vsli:raw="A new array with the specified item added to the end.">Nouveau tableau avec l’élément spécifié ajouté à la fin.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Returns a copy of the original array with the specified elements added to the end of the array.">Retourne une copie du tableau d’origine avec les éléments spécifiés ajoutés à la fin du tableau.</summary>
      <param name="items" vsli:raw="The elements to add to the array.">Éléments à ajouter au tableau.</param>
      <returns vsli:raw="A new array with the elements added.">Nouveau tableau avec les éléments ajoutés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Returns a copy of the original array with the specified elements added to the end of the array.">Retourne une copie du tableau d’origine avec les éléments spécifiés ajoutés à la fin du tableau.</summary>
      <param name="items" vsli:raw="The elements to add to the array.">Éléments à ajouter au tableau.</param>
      <returns vsli:raw="A new array with the elements added.">Nouveau tableau avec les éléments ajoutés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.As``1">
      <summary vsli:raw="Returns a new immutable array that contains the elements of this array cast to a different type.">Retourne un nouveau tableau immuable qui contient les éléments de ce cast de tableau d’un type différent.</summary>
      <typeparam name="TOther" vsli:raw="The type of array element to return.">Type d’élément de tableau à retourner.</typeparam>
      <returns vsli:raw="An immutable array that contains the elements of this array, cast to a different type. If the cast fails, returns an array whose &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">Tableau immuable qui contient les éléments de ce cast de tableau d’un type différent. Si le cast échoue, retourne un tableau dont la propriété <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> renvoie <see langword="true" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AsMemory">
      <summary vsli:raw="Creates a new read-only memory region over this immutable array.">Crée une région de mémoire en lecture seule sur ce tableau immuable.</summary>
      <returns vsli:raw="The read-only memory representation of this immutable array.">Représentation sous forme de mémoire en lecture seule de ce tableau immuable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AsSpan">
      <summary vsli:raw="Creates a new read-only span over this immutable array.">Crée une étendue en lecture seule sur ce tableau immuable.</summary>
      <returns vsli:raw="The read-only span representation of this immutable array.">Représentation sous forme d’étendue en lecture seule de ce tableau immuable.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1.Builder">
      <summary vsli:raw="A writable array accessor that can be converted into an &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; instance without allocating extra memory.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Accesseur de tableau accessible en écriture qui peut être converti en une instance <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> sans allouer de mémoire supplémentaire.
Package NuGet : System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Add(`0)">
      <summary vsli:raw="Adds the specified item to the array.">Ajoute l’élément spécifié au tableau.</summary>
      <param name="item" vsli:raw="The object to add to the array.">Objet à ajouter au tableau.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(`0[])">
      <summary vsli:raw="Adds the specified items to the end of the array.">Ajoute les éléments spécifiés à la fin du tableau.</summary>
      <param name="items" vsli:raw="The items to add to the array.">Éléments à ajouter au tableau.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(`0[],System.Int32)">
      <summary vsli:raw="Adds the specified items to the end of the array.">Ajoute les éléments spécifiés à la fin du tableau.</summary>
      <param name="items" vsli:raw="The items to add to the array.">Éléments à ajouter au tableau.</param>
      <param name="length" vsli:raw="The number of elements from the source array to add.">Nombre d’éléments du tableau source à ajouter.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds the specified items to the end of the array.">Ajoute les éléments spécifiés à la fin du tableau.</summary>
      <param name="items" vsli:raw="The items to add to the array.">Éléments à ajouter au tableau.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Adds the specified items to the end of the array.">Ajoute les éléments spécifiés à la fin du tableau.</summary>
      <param name="items" vsli:raw="The items to add to the array.">Éléments à ajouter au tableau.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0},System.Int32)">
      <summary vsli:raw="Adds the specified items to the end of the array.">Ajoute les éléments spécifiés à la fin du tableau.</summary>
      <param name="items" vsli:raw="The items to add to the array.">Éléments à ajouter au tableau.</param>
      <param name="length" vsli:raw="The number of elements from the source array to add.">Nombre d’éléments du tableau source à ajouter.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0}.Builder)">
      <summary vsli:raw="Adds the specified items to the end of the array.">Ajoute les éléments spécifiés à la fin du tableau.</summary>
      <param name="items" vsli:raw="The items to add to the array.">Éléments à ajouter au tableau.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(``0[])">
      <summary vsli:raw="Adds the specified items that derive from the type currently in the array, to the end of the array.">Ajoute les éléments spécifiés qui dérivent du type actuellement dans le tableau, à la fin du tableau.</summary>
      <param name="items" vsli:raw="The items to add to end of the array.">Éléments à ajouter à la fin du tableau.</param>
      <typeparam name="TDerived" vsli:raw="The type that derives from the type of item already in the array.">Type qui dérive du type d’élément déjà dans le tableau.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Adds the specified items that derive from the type currently in the array, to the end of the array.">Ajoute les éléments spécifiés qui dérivent du type actuellement dans le tableau, à la fin du tableau.</summary>
      <param name="items" vsli:raw="The items to add to the end of the array.">Éléments à ajouter à la fin du tableau.</param>
      <typeparam name="TDerived" vsli:raw="The type that derives from the type of item already in the array.">Type qui dérive du type d’élément déjà dans le tableau.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Adds the specified items that derive from the type currently in the array, to the end of the array.">Ajoute les éléments spécifiés qui dérivent du type actuellement dans le tableau, à la fin du tableau.</summary>
      <param name="items" vsli:raw="The items to add to the end of the array.">Éléments à ajouter à la fin du tableau.</param>
      <typeparam name="TDerived" vsli:raw="The type that derives from the type of item already in the array.">Type qui dérive du type d’élément déjà dans le tableau.</typeparam>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity">
      <summary vsli:raw="Gets or sets the length of the internal array. When set, the internal array is reallocated to the given capacity if it is not already the specified length.">Obtient ou définit la longueur du tableau interne. Quand cette propriété est définie, le tableau interne est réalloué à la capacité donnée s’il n’a pas déjà la longueur spécifiée.</summary>
      <returns vsli:raw="The length of the internal array.">Longueur du tableau interne.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Clear">
      <summary vsli:raw="Removes all items from the array.">Supprime tous les éléments du tableau.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Contains(`0)">
      <summary vsli:raw="Determines whether the array contains a specific value.">Détermine si le tableau contient une valeur spécifique.</summary>
      <param name="item" vsli:raw="The object to locate in the array.">Objet à localiser dans le tableau.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’objet est trouvé ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the current contents to the specified array.">Copie le contenu actuel dans le tableau spécifié.</summary>
      <param name="array" vsli:raw="The array to copy to.">Tableau dans lequel effectuer la copie.</param>
      <param name="index" vsli:raw="The index to start the copy operation.">Index pour démarrer l’opération de copie.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count">
      <summary vsli:raw="Gets or sets the number of items in the array.">Obtient ou définit le nombre d’éléments du tableau.</summary>
      <returns vsli:raw="The number of items in the array.">Nombre d’éléments dans le tableau.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.GetEnumerator">
      <summary vsli:raw="Gets an object that can be used to iterate through the collection.">Obtient un objet pouvant être utilisé pour itérer au sein de la collection.</summary>
      <returns vsli:raw="An object that can be used to iterate through the collection.">Objet pouvant être utilisé pour itérer au sein de la collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0)">
      <summary vsli:raw="Determines the index of a specific item in the array.">Détermine l’index d’un élément spécifique du tableau.</summary>
      <param name="item" vsli:raw="The item to locate in the array.">Élément à rechercher dans le tableau.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;item&quot; /&gt; if it's found in the list; otherwise, -1.">Index de <paramref name="item" /> s’il est trouvé dans la liste ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32)">
      <summary vsli:raw="Determines the index of the specified item.">Détermine l’index de l’élément spécifié.</summary>
      <param name="item" vsli:raw="The item to locate in the array.">Élément à rechercher dans le tableau.</param>
      <param name="startIndex" vsli:raw="The starting position of the search.">Position de départ de la recherche.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;item&quot; /&gt; if it's found in the list; otherwise, -1.">Index de <paramref name="item" /> s’il est trouvé dans la liste ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Determines the index of the specified item.">Détermine l’index de l’élément spécifié.</summary>
      <param name="item" vsli:raw="The item to locate in the array.">Élément à rechercher dans le tableau.</param>
      <param name="startIndex" vsli:raw="The starting position of the search.">Position de départ de la recherche.</param>
      <param name="count" vsli:raw="The number of elements to search.">Nombre d'éléments à explorer.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;item&quot; /&gt; if it's found in the list; otherwise, -1.">Index de <paramref name="item" /> s’il est trouvé dans la liste ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Determines the index for the specified item.">Détermine l’index de l’élément spécifié.</summary>
      <param name="item" vsli:raw="The item to locate in the array.">Élément à rechercher dans le tableau.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">Index à partir duquel commence la recherche.</param>
      <param name="count" vsli:raw="The starting position of the search.">Position de départ de la recherche.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Comparateur d’égalité à utiliser dans la recherche</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;item&quot; /&gt; if it's found in the list; otherwise, -1.">Index de <paramref name="item" /> s’il est trouvé dans la liste ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts an item in the array at the specified index.">Insère un élément dans le tableau à l’index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index at which to insert the item.">Index de base zéro au niveau duquel insérer l’élément.</param>
      <param name="item" vsli:raw="The object to insert into the array.">Objet à insérer dans le tableau.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the item at the specified index.">Obtient ou définit l’élément à l’index spécifié.</summary>
      <param name="index" vsli:raw="The index of the item to get or set.">Index de l’élément à obtenir ou à définir.</param>
      <returns vsli:raw="The item at the specified index.">Élément situé à l'index spécifié.</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="The specified index is not in the array.">L’index spécifié ne se trouve pas dans le tableau.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference to the element at the specified index.">Obtient une référence en lecture seule à l’élément qui se trouve à l’index spécifié.</summary>
      <param name="index" vsli:raw="The item index.">Index d'élément.</param>
      <returns vsli:raw="The read-only reference to the element at the specified index.">Référence en lecture seule à l’élément qui se trouve à l’index spécifié.</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is greater or equal to the array count.">
        <paramref name="index" /> est supérieur ou égal au nombre d’éléments du tableau.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0)">
      <summary vsli:raw="Determines the 0-based index of the last occurrence of the specified item in this array.">Détermine l’index de base 0 de la dernière occurrence de l’élément spécifié dans ce tableau.</summary>
      <param name="item" vsli:raw="The item to search for.">Élément à rechercher.</param>
      <returns vsli:raw="The 0-based index where the item was found; or -1 if it could not be found.">Index de base 0 où l’élément a été trouvé ; ou -1 s’il est introuvable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32)">
      <summary vsli:raw="Determines the 0-based index of the last occurrence of the specified item in this array.">Détermine l’index de base 0 de la dernière occurrence de l’élément spécifié dans ce tableau.</summary>
      <param name="item" vsli:raw="The item to search for.">Élément à rechercher.</param>
      <param name="startIndex" vsli:raw="The starting position of the search.">Position de départ de la recherche.</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">Index de base 0 dans le tableau dans lequel l’élément a été trouvé ; ou -1 s’il est introuvable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Determines the 0-based index of the last occurrence of the specified item in this array.">Détermine l’index de base 0 de la dernière occurrence de l’élément spécifié dans ce tableau.</summary>
      <param name="item" vsli:raw="The item to search for.">Élément à rechercher.</param>
      <param name="startIndex" vsli:raw="The starting position of the search.">Position de départ de la recherche.</param>
      <param name="count" vsli:raw="The number of elements to search.">Nombre d'éléments à explorer.</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">Index de base 0 dans le tableau dans lequel l’élément a été trouvé ; ou -1 s’il est introuvable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Determines the 0-based index of the last occurrence of the specified item in this array.">Détermine l’index de base 0 de la dernière occurrence de l’élément spécifié dans ce tableau.</summary>
      <param name="item" vsli:raw="The item to search for.">Élément à rechercher.</param>
      <param name="startIndex" vsli:raw="The starting position of the search.">Position de départ de la recherche.</param>
      <param name="count" vsli:raw="The number of elements to search.">Nombre d'éléments à explorer.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Comparateur d’égalité à utiliser dans la recherche.</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">Index de base 0 dans le tableau dans lequel l’élément a été trouvé ; ou -1 s’il est introuvable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.MoveToImmutable">
      <summary vsli:raw="Extracts the internal array as an &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; and replaces it              with a zero length array.">Extrait le tableau interne sous la forme d’un <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> et le remplace par un tableau de longueur nulle.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="When &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.Builder.Count&quot; /&gt; doesn't              equal &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity&quot; /&gt;.">Quand <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count" /> n’est pas égal <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Remove(`0)">
      <summary vsli:raw="Removes the specified element.">Supprime l’élément spécifié.</summary>
      <param name="element" vsli:raw="The item to remove.">Élément à supprimer.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;element&quot; /&gt; was found and removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="element" /> a été trouvé et supprimé ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index from the array.">Supprime l’élément à l’index spécifié du tableau.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">Index de base zéro de l'élément à supprimer.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Reverse">
      <summary vsli:raw="Reverses the order of elements in the collection.">Inverse l’ordre des éléments dans la collection.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort">
      <summary vsli:raw="Sorts the contents of the array.">Trie le contenu du tableau.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the contents of the array.">Trie le contenu du tableau.</summary>
      <param name="comparer" vsli:raw="The comparer to use for sorting. If comparer is &lt;see langword=&quot;null&quot; /&gt;, the default comparer for the elements type in the array is used.">Comparateur à utiliser pour le tri. Si le comparateur est <see langword="null" />, le comparateur par défaut pour le type d’éléments du tableau est utilisé.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Comparison{`0})">
      <summary vsli:raw="Sorts the elements in the entire array using the specified &lt;see cref=&quot;T:System.Comparison`1&quot; /&gt;.">Trie les éléments dans l’ensemble du tableau à l’aide du <see cref="T:System.Comparison`1" /> spécifié.</summary>
      <param name="comparison" vsli:raw="The &lt;see cref=&quot;T:System.Comparison`1&quot; /&gt; to use when comparing elements.">
        <see cref="T:System.Comparison`1" /> à utiliser pendant la comparaison d'éléments.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparison&quot; /&gt; is null.">
        <paramref name="comparison" /> a la valeur null.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the contents of the array.">Trie le contenu du tableau.</summary>
      <param name="index" vsli:raw="The starting index for the sort.">Index de départ pour le tri.</param>
      <param name="count" vsli:raw="The number of elements to include in the sort.">Nombre d’éléments à inclure dans l’ordre de tri.</param>
      <param name="comparer" vsli:raw="The comparer to use for sorting. If comparer is &lt;see langword=&quot;null&quot; /&gt;, the default comparer for the elements type in the array is used.">Comparateur à utiliser pour le tri. Si le comparateur est <see langword="null" />, le comparateur par défaut pour le type d’éléments du tableau est utilisé.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Obtient une valeur qui indique si l'objet <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the array.">Retourne un énumérateur qui itère au sein du tableau.</summary>
      <returns vsli:raw="An enumerator that iterates through the array.">Énumérateur qui itère au sein du tableau.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the array.">Retourne un énumérateur qui itère au sein du tableau.</summary>
      <returns vsli:raw="An enumerator that iterates through the array.">Énumérateur qui itère au sein du tableau.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ToArray">
      <summary vsli:raw="Creates a new array with the current contents of this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1.Builder&quot; /&gt;.">Crée un nouveau tableau avec le contenu actuel de ce <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />.</summary>
      <returns vsli:raw="A new array with the contents of this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1.Builder&quot; /&gt;.">Nouveau tableau avec le contenu de ce <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ToImmutable">
      <summary vsli:raw="Returns an immutable array that contains the current contents of this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1.Builder&quot; /&gt;.">Retourne un tableau immuable qui contient le contenu actuel de ce <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />.</summary>
      <returns vsli:raw="An immutable array that contains the current contents of this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1.Builder&quot; /&gt;.">Tableau immuable qui contient le contenu actuel de ce <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CastArray``1">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct by casting the underlying array to an array of type &lt;typeparamref name=&quot;TOther&quot; /&gt;.">Initialise une nouvelle instance du struct <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> en effectuant un cast du tableau sous-jacent vers un tableau de type <typeparamref name="TOther" />.</summary>
      <typeparam name="TOther" vsli:raw="The type of array element to return." />
      <exception cref="T:System.InvalidCastException" vsli:raw="The cast is illegal.">Levé si le cast est non conforme.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CastUp``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct based on the contents of an existing instance, allowing a covariant static cast to efficiently reuse the existing array.">Initialise une nouvelle instance du struct <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> en fonction du contenu d’une instance existante, ce qui permet à un cast statique covariant de réutiliser efficacement le tableau existant.</summary>
      <param name="items" vsli:raw="The array to initialize the array with. No copy is made.">Tableau avec lequel initialiser le tableau. Aucune copie n'est effectuée.</param>
      <typeparam name="TDerived" vsli:raw="The type of array element to return." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Clear">
      <summary vsli:raw="Returns an array with all the elements removed.">Retourne un tableau avec tous les éléments supprimés.</summary>
      <returns vsli:raw="An array with all of the elements removed.">Tableau avec tous les éléments supprimés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Contains(`0)">
      <summary vsli:raw="Determines whether the specified item exists in the array.">Détermine si l’élément spécifié existe dans le tableau.</summary>
      <param name="item" vsli:raw="The item to search for.">Élément à rechercher.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified item was found in the array; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’élément spécifié a été trouvé dans le tableau ; dans le cas contraire <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[])">
      <summary vsli:raw="Copies the contents of this array to the specified array.">Copie le contenu de ce tableau dans le tableau spécifié.</summary>
      <param name="destination" vsli:raw="The array to copy to.">Tableau dans lequel effectuer la copie.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the contents of this array to the specified array starting at the specified destination index.">Copie le contenu de ce tableau dans le tableau spécifié en commençant à l’index de destination spécifié.</summary>
      <param name="destination" vsli:raw="The array to copy to.">Tableau dans lequel effectuer la copie.</param>
      <param name="destinationIndex" vsli:raw="The index in &lt;paramref name=&quot;array&quot; /&gt; where copying begins.">L'index dans <paramref name="array" /> où commence la copie.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies the specified items in this array to the specified array at the specified starting index.">Copie les éléments spécifiés de ce tableau dans le tableau spécifié à l’index de début.</summary>
      <param name="sourceIndex" vsli:raw="The index of this array where copying begins.">Index de ce tableau où la copie commence.</param>
      <param name="destination" vsli:raw="The array to copy to.">Tableau dans lequel effectuer la copie.</param>
      <param name="destinationIndex" vsli:raw="The index in &lt;paramref name=&quot;array&quot; /&gt; where copying begins.">L'index dans <paramref name="array" /> où commence la copie.</param>
      <param name="length" vsli:raw="The number of elements to copy from this array.">Nombre d’éléments à copier à partir de ce tableau.</param>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableArray`1.Empty">
      <summary vsli:raw="Gets an empty immutable array.">Obtient un tableau immuable vide.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1.Enumerator">
      <summary vsli:raw="An array enumerator.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Énumérateur sous forme de tableau.
Package NuGet : System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Enumerator.Current">
      <summary vsli:raw="Gets the current item.">Obtient l’élément actuel.</summary>
      <returns vsli:raw="The current item.">Élément actuel.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances to the next value in the array.">Avance à la valeur suivante dans le tableau.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if another item exists in the array; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si un autre élément existe dans le tableau ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Equals(System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Indicates whether specified array is equal to this array.">Indique si le tableau spécifié est égal à ce tableau.</summary>
      <param name="other" vsli:raw="An object to compare with this object.">Objet à comparer à cet objet.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;other&quot; /&gt; is equal to this array; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="other" /> est égal à ce tableau ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Equals(System.Object)">
      <summary vsli:raw="Determines if this array is equal to the specified object.">Détermine si ce tableau est égal à l’objet spécifié.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with this array.">Le <see cref="T:System.Object" /> à comparer à ce tableau.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this array is equal to &lt;paramref name=&quot;obj&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si ce tableau est égal à <paramref name="obj" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the contents of the array.">Retourne un énumérateur qui itère au sein du contenu du tableau.</summary>
      <returns vsli:raw="An enumerator.">Énumérateur.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.GetHashCode">
      <summary vsli:raw="Returns a hash code for this instance.">Retourne un code de hachage pour cette instance.</summary>
      <returns vsli:raw="A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.">Code de hachage pour cette instance, convient à une utilisation dans des algorithmes de hachage et des structures de données telles qu'une table de hachage.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0)">
      <summary vsli:raw="Searches the array for the specified item.">Recherche l’élément spécifié dans le tableau.</summary>
      <param name="item" vsli:raw="The item to search for.">Élément à rechercher.</param>
      <returns vsli:raw="The zero-based index position of the item if it is found, or -1 if it is not.">Position d’index de base zéro de l’élément s’il est trouvé, ou -1 s’il est introuvable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32)">
      <summary vsli:raw="Searches the array for the specified item.">Recherche l’élément spécifié dans le tableau.</summary>
      <param name="item" vsli:raw="The item to search for.">Élément à rechercher.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">Index à partir duquel commence la recherche.</param>
      <returns vsli:raw="The zero-based index position of the item if it is found, or -1 if it is not.">Position d’index de base zéro de l’élément s’il est trouvé, ou -1 s’il est introuvable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches the array for the specified item.">Recherche l’élément spécifié dans le tableau.</summary>
      <param name="item" vsli:raw="The item to search for.">Élément à rechercher.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">Index à partir duquel commence la recherche.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Comparateur d’égalité à utiliser dans la recherche.</param>
      <returns vsli:raw="The zero-based index position of the item if it is found, or -1 if it is not.">Position d’index de base zéro de l’élément s’il est trouvé, ou -1 s’il est introuvable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches the array for the specified item.">Recherche l’élément spécifié dans le tableau.</summary>
      <param name="item" vsli:raw="The item to search for.">Élément à rechercher.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">Index à partir duquel commence la recherche.</param>
      <param name="count" vsli:raw="The number of elements to search.">Nombre d'éléments à explorer.</param>
      <returns vsli:raw="The zero-based index position of the item if it is found, or -1 if it is not.">Position d’index de base zéro de l’élément s’il est trouvé, ou -1 s’il est introuvable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches the array for the specified item.">Recherche l’élément spécifié dans le tableau.</summary>
      <param name="item" vsli:raw="The item to search for.">Élément à rechercher.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">Index à partir duquel commence la recherche.</param>
      <param name="count" vsli:raw="The number of elements to search.">Nombre d'éléments à explorer.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Comparateur d’égalité à utiliser dans la recherche.</param>
      <returns vsli:raw="The zero-based index position of the item if it is found, or -1 if it is not.">Position d’index de base zéro de l’élément s’il est trouvé, ou -1 s’il est introuvable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Insert(System.Int32,`0)">
      <summary vsli:raw="Returns a new array with the specified value inserted at the specified position.">Retourne un nouveau tableau avec la valeur spécifiée à la position spécifiée.</summary>
      <param name="index" vsli:raw="The 0-based index into the array at which the new item should be added.">Index 0 dans le tableau auquel le nouvel élément doit être ajouté.</param>
      <param name="item" vsli:raw="The item to insert at the start of the array.">Élément à insérer au début du tableau.</param>
      <returns vsli:raw="A new array with the item inserted at the specified index.">Nouveau tableau avec l’élément inséré à l’index spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the specified values at the specified index.">Insère les valeurs spécifiées à l’index spécifié.</summary>
      <param name="index" vsli:raw="The index at which to insert the value.">Index auquel insérer la valeur.</param>
      <param name="items" vsli:raw="The elements to insert.">Éléments à insérer.</param>
      <returns vsli:raw="A new immutable array with the items inserted at the specified index.">Nouveau tableau immuable avec les éléments insérés à l’index spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Inserts the specified values at the specified index.">Insère les valeurs spécifiées à l’index spécifié.</summary>
      <param name="index" vsli:raw="The index at which to insert the value.">Index auquel insérer la valeur.</param>
      <param name="items" vsli:raw="The elements to insert.">Éléments à insérer.</param>
      <returns vsli:raw="A new immutable array with the items inserted at the specified index.">Nouveau tableau immuable avec les éléments insérés à l’index spécifié.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsDefault">
      <summary vsli:raw="Gets a value indicating whether this array was declared but not initialized.">Obtient une valeur qui indique si ce tableau a été déclaré mais non initialisé.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> a la valeur <see langword="null" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsDefaultOrEmpty">
      <summary vsli:raw="Gets a value indicating whether this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; is empty or is not initialized.">Obtient une valeur indiquant si ce <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> est vide ou n’est pas initialisé.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;F:System.Collections.Immutable.ImmutableArray`1.Empty&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> est <see langword="null" /> ou <see cref="F:System.Collections.Immutable.ImmutableArray`1.Empty" /> ; dans le cas contraire, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsEmpty">
      <summary vsli:raw="Gets a value indicating whether this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; is empty.">Obtient une valeur indiquant si ce <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> est vide.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> est vide ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Item(System.Int32)">
      <summary vsli:raw="Gets the element at the specified index in the immutable array.">Obtient l’élément à l’index spécifié dans le tableau immuable.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get.">Index de base zéro de l'élément à obtenir.</param>
      <returns vsli:raw="The element at the specified index in the immutable array.">Élément à l’index spécifié dans le tableau immuable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference to the element at the specified &lt;paramref name=&quot;index&quot; /&gt; in the read-only list.">Obtient une référence en lecture seule pour l’élément dans le <paramref name="index" /> spécifié dans la liste de lecture seule.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get a reference to.">Index de base zéro de l'élément auquel donner une référence.</param>
      <returns vsli:raw="A read-only reference to the element at the specified &lt;paramref name=&quot;index&quot; /&gt; in the read-only list.">Une référence en lecture seule pour l’élément dans le <paramref name="index" /> spécifié dans la liste de lecture seule.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0)">
      <summary vsli:raw="Searches the array for the specified item; starting at the end of the array.">Recherche l’élément spécifié dans le tableau ; en commençant à la fin du tableau.</summary>
      <param name="item" vsli:raw="The item to search for.">Élément à rechercher.</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">Index de base 0 dans le tableau dans lequel l’élément a été trouvé ; ou -1 s’il est introuvable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32)">
      <summary vsli:raw="Searches the array for the specified item; starting at the end of the array.">Recherche l’élément spécifié dans le tableau ; en commençant à la fin du tableau.</summary>
      <param name="item" vsli:raw="The item to search for.">Élément à rechercher.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">Index à partir duquel commence la recherche.</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">Index de base 0 dans le tableau dans lequel l’élément a été trouvé ; ou -1 s’il est introuvable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches the array for the specified item; starting at the end of the array.">Recherche l’élément spécifié dans le tableau ; en commençant à la fin du tableau.</summary>
      <param name="item" vsli:raw="The item to search for.">Élément à rechercher.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">Index à partir duquel commence la recherche.</param>
      <param name="count" vsli:raw="The number of elements to search.">Nombre d'éléments à explorer.</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">Index de base 0 dans le tableau dans lequel l’élément a été trouvé ; ou -1 s’il est introuvable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches the array for the specified item; starting at the end of the array.">Recherche l’élément spécifié dans le tableau ; en commençant à la fin du tableau.</summary>
      <param name="item" vsli:raw="The item to search for.">Élément à rechercher.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">Index à partir duquel commence la recherche.</param>
      <param name="count" vsli:raw="The number of elements to search.">Nombre d'éléments à explorer.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Comparateur d’égalité à utiliser dans la recherche.</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">Index de base 0 dans le tableau dans lequel l’élément a été trouvé ; ou -1 s’il est introuvable.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Length">
      <summary vsli:raw="Gets the number of elements in the array.">Obtient le nombre d’éléments contenus dans le tableau.</summary>
      <returns vsli:raw="The number of elements in the array.">Nombre d’éléments dans le tableau.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.OfType``1">
      <summary vsli:raw="Filters the elements of this array to those assignable to the specified type.">Filtre les éléments de ce tableau pour les éléments qui sont attribuables au type spécifié.</summary>
      <typeparam name="TResult" vsli:raw="The type to filter the elements of the sequence on.">Type en fonction duquel filtrer les éléments de la séquence.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt; that contains elements from the input sequence of type of &lt;paramref name=&quot;TResult&quot; /&gt;.">Un <see cref="T:System.Collections.IEnumerable" /> qui contient des éléments de la séquence d’entrée de type <paramref name="TResult" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Returns a value that indicates if two arrays are equal.">Retourne une valeur qui indique si les deux tableaux sont égaux.</summary>
      <param name="left" vsli:raw="The array to the left of the operator.">Tableau à gauche de l’opérateur.</param>
      <param name="right" vsli:raw="The array to the right of the operator.">Tableau à droite de l’opérateur.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the arrays are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si les tableaux sont égaux ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})">
      <summary vsli:raw="Returns a value that indicates if two arrays are equal.">Retourne une valeur qui indique si les deux tableaux sont égaux.</summary>
      <param name="left" vsli:raw="The array to the left of the operator.">Tableau à gauche de l’opérateur.</param>
      <param name="right" vsli:raw="The array to the right of the operator.">Tableau à droite de l’opérateur.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the arrays are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si les tableaux sont égaux ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Returns a value that indicates whether two arrays are not equal.">Retourne une valeur qui indique si les deux tableaux ne sont pas égaux.</summary>
      <param name="left" vsli:raw="The array to the left of the operator.">Tableau à gauche de l’opérateur.</param>
      <param name="right" vsli:raw="The array to the right of the operator.">Tableau à droite de l’opérateur.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the arrays are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si ces tableaux ne sont pas égaux ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})">
      <summary vsli:raw="Checks for inequality between two array.">Vérifie l’inégalité entre deux tableaux.</summary>
      <param name="left" vsli:raw="The object to the left of the operator.">Objet à gauche de l’opérateur.</param>
      <param name="right" vsli:raw="The object to the right of the operator.">Objet à droite de l’opérateur.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two arrays are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si les deux tableaux ne sont pas égaux ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Remove(`0)">
      <summary vsli:raw="Returns an array with the first occurrence of the specified element removed from the array. If no match is found, the current array is returned.">Retourne un tableau avec la première occurrence de l’élément spécifié supprimée du tableau. Si aucune correspondance n’est trouvée, le tableau actuel est retourné.</summary>
      <param name="item" vsli:raw="The item to remove.">Élément à supprimer.</param>
      <returns vsli:raw="A new array with the item removed.">Nouveau tableau avec l’élément supprimé.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Returns an array with the first occurrence of the specified element removed from the array.  &#xA;  &#xA; If no match is found, the current array is returned.">Retourne un tableau avec la première occurrence de l’élément spécifié supprimée du tableau.
Si aucune correspondance n’est trouvée, le tableau actuel est retourné.</summary>
      <param name="item" vsli:raw="The item to remove.">Élément à supprimer.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Comparateur d’égalité à utiliser dans la recherche.</param>
      <returns vsli:raw="A new array with the specified item removed.">Nouveau tableau avec l’élément spécifié supprimé.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the items from the array that meet the specified condition.">Supprime tous les éléments du tableau qui remplissent les conditions spécifiées.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">Délégué qui définit les conditions des éléments à supprimer.</param>
      <returns vsli:raw="A new array with items that meet the specified condition removed.">Nouveau tableau avec des éléments qui répondent au critère spécifié supprimé.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveAt(System.Int32)">
      <summary vsli:raw="Returns an array with the element at the specified position removed.">Retourne un tableau avec l’élément à la position spécifiée supprimée.</summary>
      <param name="index" vsli:raw="The 0-based index of the element to remove from the returned array.">Index de base 0 de l’élément à supprimer du tableau retourné.</param>
      <returns vsli:raw="A new array with the item at the specified index removed.">Nouveau tableau avec l’élément à l’index spécifié supprimé.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the specified items from this array.">Supprime les éléments spécifiés du tableau.</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">Éléments à supprimer si des correspondances sont trouvées dans cette liste.</param>
      <returns vsli:raw="A new array with the elements removed.">Nouveau tableau avec les éléments supprimés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the specified items from this array.">Supprime les éléments spécifiés du tableau.</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">Éléments à supprimer si des correspondances sont trouvées dans cette liste.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Comparateur d’égalité à utiliser dans la recherche.</param>
      <returns vsli:raw="A new array with the elements removed.">Nouveau tableau avec les éléments supprimés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Removes the specified values from this list.">Supprime les valeurs spécifiées de cette liste.</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">Éléments à supprimer si des correspondances sont trouvées dans cette liste.</param>
      <returns vsli:raw="A new list with the elements removed.">Nouvelle liste avec les éléments supprimés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the specified items from this list.">Supprime les éléments spécifiés de cette liste.</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">Éléments à supprimer si des correspondances sont trouvées dans cette liste.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Comparateur d’égalité à utiliser dans la recherche.</param>
      <returns vsli:raw="A new array with the elements removed.">Nouveau tableau avec les éléments supprimés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Returns an array with the elements at the specified position removed.">Retourne un tableau avec les éléments à la position spécifiée supprimée.</summary>
      <param name="index" vsli:raw="The 0-based index of the starting element to remove from the array.">Index de base 0 de l’élément de départ à supprimer du tableau.</param>
      <param name="length" vsli:raw="The number of elements to remove from the array.">Nombre d’éléments à supprimer du tableau.</param>
      <returns vsli:raw="The new array with the specified elements removed.">Nouveau tableau avec les éléments spécifiés supprimés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0)">
      <summary vsli:raw="Finds the first element in the array equal to the specified value and replaces the value with the specified new value.">Recherche le premier élément dans le tableau égal à la valeur spécifiée et remplace la valeur par la nouvelle valeur spécifiée.</summary>
      <param name="oldValue" vsli:raw="The value to find and replace in the array.">Valeur à rechercher et remplacer dans le tableau.</param>
      <param name="newValue" vsli:raw="The value to replace the &lt;c&gt;oldvalue&lt;/c&gt; with.">Valeur par laquelle remplacer <c>oldvalue</c>.</param>
      <returns vsli:raw="A new array that contains &lt;paramref name=&quot;newValue&quot; /&gt; even if the new and old values are the same.">Tableau qui contient <paramref name="newValue" /> même si les valeurs nouvelles et anciennes sont identiques.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; is not found in the array.">
        <paramref name="oldValue" /> est introuvable dans le tableau.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Finds the first element in the array equal to the specified value and replaces the value with the specified new value.">Recherche le premier élément dans le tableau égal à la valeur spécifiée et remplace la valeur par la nouvelle valeur spécifiée.</summary>
      <param name="oldValue" vsli:raw="The value to find and replace in the array.">Valeur à rechercher et remplacer dans le tableau.</param>
      <param name="newValue" vsli:raw="The value to replace the &lt;c&gt;oldvalue&lt;/c&gt; with.">Valeur par laquelle remplacer <c>oldvalue</c>.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to compare values.">Comparateur d’égalité à utiliser pour comparer des valeurs.</param>
      <returns vsli:raw="A new array that contains &lt;paramref name=&quot;newValue&quot; /&gt; even if the new and old values are the same.">Tableau qui contient <paramref name="newValue" /> même si les valeurs nouvelles et anciennes sont identiques.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; is not found in the array.">
        <paramref name="oldValue" /> est introuvable dans le tableau.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces the item at the specified index with the specified item.">Remplace l'élément à l'index spécifié par l'élément spécifié.</summary>
      <param name="index" vsli:raw="The index of the item to replace.">Index de l’élément à remplacer.</param>
      <param name="item" vsli:raw="The item to add to the list.">Élément à ajouter à la liste.</param>
      <returns vsli:raw="The new array that contains &lt;paramref name=&quot;item&quot; /&gt; at the specified index.">Tableau qui contient <paramref name="item" /> à l’index spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort">
      <summary vsli:raw="Sorts the elements in the immutable array using the default comparer.">Trie les éléments dans le tableau immuable à l’aide du comparateur par défaut.</summary>
      <returns vsli:raw="A new immutable array that contains the items in this array, in sorted order.">Nouveau tableau immuable qui contient les éléments de ce tableau, dans l’ordre de tri.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the elements in the immutable array using the specified comparer.">Trie les éléments dans le tableau immuable à l’aide du comparateur spécifié.</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer.">Implémentation à utiliser pendant la comparaison d’éléments, ou <see langword="null" /> pour utiliser le comparateur par défaut.</param>
      <returns vsli:raw="A new immutable array that contains the items in this array, in sorted order.">Nouveau tableau immuable qui contient les éléments de ce tableau, dans l’ordre de tri.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Comparison{`0})">
      <summary vsli:raw="Sorts the elements in the entire &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; using             the specified &lt;see cref=&quot;T:System.Comparison`1&quot; /&gt;.">Trie les éléments dans l’ensemble de <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> à l’aide du <see cref="T:System.Comparison`1" /> spécifié.</summary>
      <param name="comparison" vsli:raw="The &lt;see cref=&quot;T:System.Comparison`1&quot; /&gt; to use when comparing elements.">
        <see cref="T:System.Comparison`1" /> à utiliser pendant la comparaison d'éléments.</param>
      <returns vsli:raw="The sorted list.">Liste triée.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparison&quot; /&gt; is null.">
        <paramref name="comparison" /> a la valeur null.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the specified elements in the immutable array using the specified comparer.">Trie les éléments spécifiés dans le tableau immuable à l’aide du comparateur spécifié.</summary>
      <param name="index" vsli:raw="The index of the first element to sort.">Index du premier élément à trier.</param>
      <param name="count" vsli:raw="The number of elements to include in the sort.">Nombre d’éléments à inclure dans l’ordre de tri.</param>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer.">Implémentation à utiliser pendant la comparaison d’éléments, ou <see langword="null" /> pour utiliser le comparateur par défaut.</param>
      <returns vsli:raw="A new immutable array that contains the items in this array, in sorted order.">Nouveau tableau immuable qui contient les éléments de ce tableau, dans l’ordre de tri.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</summary>
      <param name="item" vsli:raw="The item to add to the end of the array.">Élément à ajouter à la fin du tableau.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Count">
      <summary vsli:raw="Gets the number of items in the collection.">Obtient le nombre de tableaux dans la collection.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">Levé si la propriété <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> retourne la valeur true.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether this instance is read only.">Obtient une valeur indiquant si cette instance est en lecture seule.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is read only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si cette instance est en lecture seule ; dans le cas contraire, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</summary>
      <param name="item" vsli:raw="The object to remove from the array.">Objet à supprimer du tableau.</param>
      <returns vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the array.">Retourne un énumérateur qui itère au sein du tableau.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the array.">Énumérateur permettant d’effectuer une itération au sein du tableau.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</summary>
      <param name="index" vsli:raw="The index of the location to insert the item.">Index de l’emplacement où insérer l’élément.</param>
      <param name="item" vsli:raw="The item to insert.">Élément à insérer.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the element at the specified index in the read-only list.">Obtient ou définit l’élément à l’index spécifié dans la liste en lecture seule.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get.">Index de base zéro de l'élément à obtenir.</param>
      <returns vsli:raw="The element at the specified index in the read-only list.">Élément à l'index spécifié dans la liste en lecture seule.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown from the setter.">Toujours levé à partir du setter.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">Levé si la propriété <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> retourne la valeur true.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</summary>
      <param name="index" vsli:raw="The index.">Index.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyCollection{T}#Count">
      <summary vsli:raw="Gets the number of items in the collection.">Obtient le nombre de tableaux dans la collection.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">Levé si la propriété <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> retourne la valeur true.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)">
      <summary vsli:raw="Gets the element at the specified index.">Obtient l'élément au niveau de l'index spécifié.</summary>
      <param name="index" vsli:raw="The index.">Index.</param>
      <returns vsli:raw="The element.">Élément.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">Levé si la propriété <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> retourne la valeur true.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies this array to another array starting at the specified index.">Copie ce tableau dans un autre tableau en commençant à l’index spécifié.</summary>
      <param name="array" vsli:raw="The array to copy this array to.">Tableau dans lequel copier ce tableau.</param>
      <param name="index" vsli:raw="The index in the destination array to start the copy operation.">Index dans le tableau de destination auquel commencer l’opération de copie.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the size of the array.">Obtient la taille du tableau.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">Levé si la propriété <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> retourne la valeur true.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="See the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; interface. Always returns &lt;see langword=&quot;true&quot; /&gt; since since immutable collections are thread-safe.">Consultez l’interface <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets the sync root.">Obtient la racine de synchronisation.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable array.">Retourne un énumérateur qui effectue une itération au sein du tableau immuable.</summary>
      <returns vsli:raw="An enumerator that iterates through the immutable array.">Énumérateur qui itère au sein du tableau immuable.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">La propriété <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> retourne la valeur <see langword="true" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</summary>
      <param name="value" vsli:raw="The value to add to the array.">Valeur à ajouter au tableau.</param>
      <returns vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">Levé dans tous les cas.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Clear">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">Levé dans tous les cas.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</summary>
      <param name="value" vsli:raw="The value to check for.">Valeur à vérifier.</param>
      <returns vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Gets the value at the specified index.">Obtient la valeur de l'index spécifié.</summary>
      <param name="value" vsli:raw="The value to return the index of.">Valeur à laquelle l’index doit être retourné.</param>
      <returns vsli:raw="The value of the element at the specified index.">Valeur de l’élément à l’index spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</summary>
      <param name="index" vsli:raw="Index that indicates where to insert the item.">Index qui indique où insérer l’élément.</param>
      <param name="value" vsli:raw="The value to insert.">Valeur à insérer.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">Levé dans tous les cas.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether this instance is fixed size.">Obtient une valeur qui indique si cette instance est de taille fixe.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si cette instance est de taille fixe ; dans le cas contraire, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether this instance is read only.">Obtient une valeur indiquant si cette instance est en lecture seule.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is read only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si cette instance est en lecture seule ; dans le cas contraire, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Object&quot; /&gt; at the specified index.">Obtient ou définit le <see cref="T:System.Object" /> à l'index spécifié.</summary>
      <param name="index" vsli:raw="The index.">Index.</param>
      <returns vsli:raw="The object at the specified index.">Objet au niveau de l’index spécifié.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown from the setter.">Toujours levé à partir du setter.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">Levé si la propriété <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> retourne la valeur true.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</summary>
      <param name="value" vsli:raw="The value to remove from the array.">Valeur à supprimer du tableau.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">Levé dans tous les cas.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</summary>
      <param name="index" vsli:raw="The index of the item to remove.">Index de l'élément à supprimer.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">Levé dans tous les cas.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)">
      <summary vsli:raw="Returns a copy of the original array with the specified item added to the end.">Retourne une copie du tableau d’origine avec l’élément spécifié ajouté à la fin.</summary>
      <param name="value" vsli:raw="The value to add to the end of the array.">Valeur à ajouter à la fin du tableau.</param>
      <returns vsli:raw="A new array with the specified item added to the end.">Nouveau tableau avec l’élément spécifié ajouté à la fin.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Returns a copy of the original array with the specified elements added to the end of the array.">Retourne une copie du tableau d’origine avec les éléments spécifiés ajoutés à la fin du tableau.</summary>
      <param name="items" vsli:raw="The elements to add to the end of the array.">Éléments à ajouter à la fin du tableau.</param>
      <returns vsli:raw="A new array with the elements added to the end.">Nouveau tableau avec les éléments ajoutés à la fin.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Clear">
      <summary vsli:raw="Returns an array with all the elements removed.">Retourne un tableau avec tous les éléments supprimés.</summary>
      <returns vsli:raw="An array with all the elements removed.">Tableau avec tous les éléments supprimés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)">
      <summary vsli:raw="Returns a new array with the specified value inserted at the specified position.">Retourne un nouveau tableau avec la valeur spécifiée à la position spécifiée.</summary>
      <param name="index" vsli:raw="The 0-based index into the array at which the new item should be added.">Index 0 dans le tableau auquel le nouvel élément doit être ajouté.</param>
      <param name="element" vsli:raw="The item to insert at the start of the array.">Élément à insérer au début du tableau.</param>
      <returns vsli:raw="A new array with the specified value inserted.">Nouveau tableau avec la valeur spécifiée insérée.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the specified values at the specified index.">Insère les valeurs spécifiées à l’index spécifié.</summary>
      <param name="index" vsli:raw="The index at which to insert the value.">Index auquel insérer la valeur.</param>
      <param name="items" vsli:raw="The elements to insert.">Éléments à insérer.</param>
      <returns vsli:raw="A new array with the specified values inserted.">Nouveau tableau avec les valeurs spécifiées insérées.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Returns an array with the first occurrence of the specified element removed from the array; if no match is found, the current array is returned.">Retourne un tableau avec la première occurrence de l’élément spécifié supprimé du tableau ; si aucune correspondance n’est trouvée, le tableau actuel est retourné.</summary>
      <param name="value" vsli:raw="The value to remove from the array.">Valeur à supprimer du tableau.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Comparateur d’égalité à utiliser dans la recherche.</param>
      <returns vsli:raw="A new array with the value removed.">Nouveau tableau avec la valeur supprimée.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the items from the array that meet the specified condition.">Supprime tous les éléments du tableau qui remplissent les conditions spécifiées.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">Délégué qui définit les conditions des éléments à supprimer.</param>
      <returns vsli:raw="A new array with items that meet the specified condition removed.">Nouveau tableau avec des éléments qui répondent au critère spécifié supprimé.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)">
      <summary vsli:raw="Returns an array with the element at the specified position removed.">Retourne un tableau avec l’élément à la position spécifiée supprimée.</summary>
      <param name="index" vsli:raw="The 0-based index of the element to remove from the returned array.">Index de base 0 de l’élément à supprimer du tableau retourné.</param>
      <returns vsli:raw="A new array with the specified item removed.">Nouveau tableau avec l’élément spécifié supprimé.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the specified items from this array.">Supprime les éléments spécifiés du tableau.</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">Éléments à supprimer si des correspondances sont trouvées dans cette liste.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Comparateur d’égalité à utiliser dans la recherche.</param>
      <returns vsli:raw="A new array with the elements removed.">Nouveau tableau avec les éléments supprimés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Returns an array with the elements at the specified position removed.">Retourne un tableau avec les éléments à la position spécifiée supprimée.</summary>
      <param name="index" vsli:raw="The 0-based index of the starting element to remove from the array.">Index de base 0 de l’élément de départ à supprimer du tableau.</param>
      <param name="count" vsli:raw="The number of elements to remove from the array.">Nombre d’éléments à supprimer du tableau.</param>
      <returns vsli:raw="The new array with the specified elements removed.">Nouveau tableau avec les éléments spécifiés supprimés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Finds the first element in the array equal to the specified value and replaces the value with the specified new value.">Recherche le premier élément dans le tableau égal à la valeur spécifiée et remplace la valeur par la nouvelle valeur spécifiée.</summary>
      <param name="oldValue" vsli:raw="The value to find and replace in the array.">Valeur à rechercher et remplacer dans le tableau.</param>
      <param name="newValue" vsli:raw="The value to replace the &lt;c&gt;oldvalue&lt;/c&gt; with.">Valeur par laquelle remplacer <c>oldvalue</c>.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to compare values.">Comparateur d’égalité à utiliser pour comparer des valeurs.</param>
      <returns vsli:raw="A new array that contains &lt;paramref name=&quot;newValue&quot; /&gt; even if the new and old values are the same.">Tableau qui contient <paramref name="newValue" /> même si les valeurs nouvelles et anciennes sont identiques.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; is not found in the array.">
        <paramref name="oldValue" /> est introuvable dans le tableau.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces the item at the specified index with the specified item.">Remplace l'élément à l'index spécifié par l'élément spécifié.</summary>
      <param name="index" vsli:raw="The index of the item to replace.">Index de l’élément à remplacer.</param>
      <param name="value" vsli:raw="The value to add to the list.">Valeur à ajouter à la liste.</param>
      <returns vsli:raw="The new array that contains &lt;paramref name=&quot;item&quot; /&gt; at the specified index.">Tableau qui contient <paramref name="item" /> à l’index spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary vsli:raw="Determines whether the current collection element precedes, occurs in the same position as, or follows another element in the sort order.">Détermine si l’élément de collection actuel précède, se situe à la même position que, ou suit un autre élément dans l’ordre de tri.</summary>
      <param name="other" vsli:raw="The element to compare with the current instance.">Élément à comparer avec l’instance actuelle.</param>
      <param name="comparer" vsli:raw="The object used to compare members of the current array with the corresponding members of other array.">Objet utilisé pour comparer les membres du tableau actuel aux membres correspondants de l’autre tableau.</param>
      <returns vsli:raw="An integer that indicates whether the current element precedes, is in the same position or follows the other element.">Entier qui indique si l’élément actuel précède, se situe à la même position ou suit l’autre élément.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The arrays are not the same length.">Les tableaux ne sont pas de la même longueur.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary vsli:raw="Determines whether this array is structurally equal to the specified array.">Détermine si ce tableau est structurellement identique au tableau spécifié.</summary>
      <param name="other" vsli:raw="The array to compare with the current instance.">Tableau à comparer à l’instance actuelle.</param>
      <param name="comparer" vsli:raw="An object that determines whether the current instance and other are structurally equal.">Objet qui détermine si l’instance actuelle et les autres sont structurellement identiques.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two arrays are structurally equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si les deux tableaux sont structurellement égaux ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary vsli:raw="Returns a hash code for the current instance.">Retourne un code de hachage pour l'instance actuelle.</summary>
      <param name="comparer" vsli:raw="An object that computes the hash code of the current object.">Objet qui calcule le code de hachage de l'objet actif.</param>
      <returns vsli:raw="The hash code for the current instance.">Code de hachage de l'instance actuelle.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.ToBuilder">
      <summary vsli:raw="Creates a mutable array that has the same contents as this array and can be efficiently mutated across multiple operations using standard mutable interfaces.">Crée un tableau mutable qui a le même contenu que ce tableau et peut être muté efficacement entre plusieurs opérations à l’aide des interfaces standard mutables.</summary>
      <returns vsli:raw="The new builder with the same contents as this array.">Nouveau générateur avec le même contenu que ce tableau.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableDictionary`2&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Fournit un ensemble de méthodes d’initialisation pour les instances de la classe <see cref="T:System.Collections.Immutable.ImmutableDictionary`2" />.
Package NuGet : System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Contains``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0,``1)">
      <summary vsli:raw="Determines whether the specified immutable dictionary contains the specified key/value pair.">Détermine si le dictionnaire immuable spécifié contient la paire clé/valeur spécifiée.</summary>
      <param name="map" vsli:raw="The immutable dictionary to search.">Dictionnaire immuable à rechercher.</param>
      <param name="key" vsli:raw="The key to locate in the immutable dictionary.">Clé à rechercher dans le dictionnaire immuable.</param>
      <param name="value" vsli:raw="The value to locate on the specified key, if the key is found.">Valeur à localiser sur la clé spécifiée, si la clé est trouvée.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the immutable dictionary.">Type des clés dans le dictionnaire immuable.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the immutable dictionary.">Type des valeurs dans le dictionnaire immuable.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this map contains the specified key/value pair; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si ce mappage contient la paire clé/valeur spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2">
      <summary vsli:raw="Creates an empty immutable dictionary.">Crée un dictionnaire immuable vide.</summary>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Type des clés stockées par le dictionnaire.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Type des valeurs stockées par le dictionnaire.</typeparam>
      <returns vsli:raw="An empty immutable dictionary.">Dictionnaire vide immuable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2(System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates an empty immutable dictionary that uses the specified key comparer.">Crée un dictionnaire immuable vide qui utilise le comparateur de clé spécifié.</summary>
      <param name="keyComparer" vsli:raw="The implementation to use to determine the equality of keys in the dictionary.">Implémentation à utiliser pour déterminer l’égalité des clés dans le dictionnaire.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Type des clés stockées par le dictionnaire.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Type des valeurs stockées par le dictionnaire.</typeparam>
      <returns vsli:raw="An empty immutable dictionary.">Dictionnaire vide immuable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Creates an empty immutable dictionary that uses the specified key and value comparers.">Crée un dictionnaire immuable vide qui utilise les comparateurs de clé et de valeur spécifiés.</summary>
      <param name="keyComparer" vsli:raw="The implementation to use to determine the equality of keys in the dictionary.">Implémentation à utiliser pour déterminer l’égalité des clés dans le dictionnaire.</param>
      <param name="valueComparer" vsli:raw="The implementation to use to determine the equality of values in the dictionary.">Implémentation à utiliser pour déterminer l’égalité des valeurs dans le dictionnaire.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Type des clés stockées par le dictionnaire.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Type des valeurs stockées par le dictionnaire.</typeparam>
      <returns vsli:raw="An empty immutable dictionary.">Dictionnaire vide immuable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2">
      <summary vsli:raw="Creates a new immutable dictionary builder.">Crée un générateur de dictionnaire immuable.</summary>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Type des clés stockées par le dictionnaire.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Type des valeurs stockées par le dictionnaire.</typeparam>
      <returns vsli:raw="The new builder.">Nouveau générateur.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2(System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates a new immutable dictionary builder.">Crée un générateur de dictionnaire immuable.</summary>
      <param name="keyComparer" vsli:raw="The key comparer.">Comparateur de clé.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Type des clés stockées par le dictionnaire.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Type des valeurs stockées par le dictionnaire.</typeparam>
      <returns vsli:raw="The new builder.">Nouveau générateur.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Creates a new immutable dictionary builder.">Crée un générateur de dictionnaire immuable.</summary>
      <param name="keyComparer" vsli:raw="The key comparer.">Comparateur de clé.</param>
      <param name="valueComparer" vsli:raw="The value comparer.">Comparateur de valeur.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Type des clés stockées par le dictionnaire.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Type des valeurs stockées par le dictionnaire.</typeparam>
      <returns vsli:raw="The new builder.">Nouveau générateur.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates a new immutable dictionary that contains the specified items.">Crée un dictionnaire immuable qui contient les éléments spécifiés.</summary>
      <param name="items" vsli:raw="The items used to populate the dictionary before it's immutable.">Éléments utilisés pour remplir le dictionnaire avant qu’il soit immuable.</param>
      <typeparam name="TKey" vsli:raw="The type of keys in the dictionary.">Type des clés du dictionnaire.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values in the dictionary.">Type des valeurs du dictionnaire.</typeparam>
      <returns vsli:raw="A new immutable dictionary that contains the specified items.">Nouveau dictionnaire immuable qui contient les éléments spécifiés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates a new immutable dictionary that contains the specified items and uses the specified key comparer.">Crée un dictionnaire immuable qui contient les éléments spécifiés et utilise le comparateur de clé spécifié.</summary>
      <param name="keyComparer" vsli:raw="The comparer implementation to use to compare keys for equality.">Implémentation du comparateur à utiliser pour comparer des clés pour l’égalité.</param>
      <param name="items" vsli:raw="The items to add to the dictionary before it's immutable.">Éléments à ajouter au dictionnaire avant qu’il soit immuable.</param>
      <typeparam name="TKey" vsli:raw="The type of keys in the dictionary.">Type des clés du dictionnaire.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values in the dictionary.">Type des valeurs du dictionnaire.</typeparam>
      <returns vsli:raw="A new immutable dictionary that contains the specified items and uses the specified comparer.">Nouveau dictionnaire immuable qui contient les éléments spécifiés et utilise le comparateur spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates a new immutable dictionary that contains the specified items and uses the specified key comparer.">Crée un dictionnaire immuable qui contient les éléments spécifiés et utilise le comparateur de clé spécifié.</summary>
      <param name="keyComparer" vsli:raw="The comparer implementation to use to compare keys for equality.">Implémentation du comparateur à utiliser pour comparer des clés pour l’égalité.</param>
      <param name="valueComparer" vsli:raw="The comparer implementation to use to compare values for equality.">Implémentation du comparateur à utiliser pour comparer l’égalité des valeurs.</param>
      <param name="items" vsli:raw="The items to add to the dictionary before it's immutable.">Éléments à ajouter au dictionnaire avant qu’il soit immuable.</param>
      <typeparam name="TKey" vsli:raw="The type of keys in the dictionary.">Type des clés du dictionnaire.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values in the dictionary.">Type des valeurs du dictionnaire.</typeparam>
      <returns vsli:raw="A new immutable dictionary that contains the specified items and uses the specified comparer.">Nouveau dictionnaire immuable qui contient les éléments spécifiés et utilise le comparateur spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.GetValueOrDefault``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary.">Obtient la valeur d’une clé spécifique, si une clé correspondante existe dans le dictionnaire.</summary>
      <param name="dictionary" vsli:raw="The dictionary to retrieve the value from.">Dictionnaire permettant de récupérer la valeur.</param>
      <param name="key" vsli:raw="The key to search for.">Clé à rechercher.</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">Type de la clé.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the value.">Type de la valeur.</typeparam>
      <returns vsli:raw="The value for the key, or &lt;c&gt;default(TValue)&lt;/c&gt; if no matching key was found.">Valeur de la clé, ou <c>default(TValue)</c> si aucune clé correspondante n’a été trouvée.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.GetValueOrDefault``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0,``1)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary.">Obtient la valeur d’une clé spécifique, si une clé correspondante existe dans le dictionnaire.</summary>
      <param name="dictionary" vsli:raw="The dictionary to retrieve the value from.">Dictionnaire permettant de récupérer la valeur.</param>
      <param name="key" vsli:raw="The key to search for.">Clé à rechercher.</param>
      <param name="defaultValue" vsli:raw="The default value to return if no matching key is found in the dictionary.">Valeur par défaut à retourner si aucune clé correspondante n’est trouvée dans le dictionnaire.</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">Type de la clé.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the value.">Type de la valeur.</typeparam>
      <returns vsli:raw="The value for the key, or &lt;paramref name=&quot;defaultValue&quot; /&gt; if no matching key was found.">Valeur de la clé, ou <paramref name="defaultValue" /> si aucune clé n’a été trouvée.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary vsli:raw="Constructs an immutable dictionary from an existing collection of elements, applying a transformation function to the source keys.">Construit un dictionnaire immuable à partir de la collection d’éléments existante, en appliquant une fonction de transformation aux clés source.</summary>
      <param name="source" vsli:raw="The source collection used to generate the immutable dictionary.">Collection source utilisée pour générer le dictionnaire immuable.</param>
      <param name="keySelector" vsli:raw="The function used to transform keys for the immutable dictionary.">Fonction utilisée pour transformer des clés pour le dictionnaire immuable.</param>
      <typeparam name="TSource" vsli:raw="The type of element in the source collection.">Type d’élément de la collection source.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of key in the resulting immutable dictionary.">Type de clé dans le dictionnaire immuable qui en résulte.</typeparam>
      <returns vsli:raw="The immutable dictionary that contains elements from &lt;paramref name=&quot;source&quot; /&gt;, with keys transformed by applying &lt;paramref name=&quot;keySelector&quot; /&gt;.">Dictionnaire immuable qui contient les éléments de <paramref name="source" />, avec des clés transformés en appliquant <paramref name="keySelector" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Constructs an immutable dictionary based on some transformation of a sequence.">Construit un dictionnaire immuable basé sur une transformation d’une séquence.</summary>
      <param name="source" vsli:raw="The source collection used to generate the immutable dictionary.">Collection source utilisée pour générer le dictionnaire immuable.</param>
      <param name="keySelector" vsli:raw="The function used to transform keys for the immutable dictionary.">Fonction utilisée pour transformer des clés pour le dictionnaire immuable.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use for the dictionary.">Comparateur de clé à utiliser pour le dictionnaire.</param>
      <typeparam name="TSource" vsli:raw="The type of element in the source collection.">Type d’élément de la collection source.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of key in the resulting immutable dictionary.">Type de clé dans le dictionnaire immuable qui en résulte.</typeparam>
      <returns vsli:raw="The immutable dictionary that contains elements from &lt;paramref name=&quot;source&quot; /&gt;, with keys transformed by applying &lt;paramref name=&quot;keySelector&quot; /&gt;.">Dictionnaire immuable qui contient les éléments de <paramref name="source" />, avec des clés transformés en appliquant <paramref name="keySelector" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents.">Énumère une séquence de paires clé/valeur et produit un dictionnaire immuable de son contenu.</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">Séquence de paires clé/valeur à énumérer.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Type des clés dans le dictionnaire.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Type des valeurs dans le dictionnaire.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the key/value pairs in the specified sequence.">Dictionnaire immuable qui contient les paires clé/valeur dans l’ordre spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents by using the specified key comparer.">Énumère une séquence de paires clé/valeur et produit un dictionnaire immuable de son contenu à l’aide du comparateur de clé spécifié.</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">Séquence de paires clé/valeur à énumérer.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use when building the immutable dictionary.">Comparateur de clés à utiliser lors de la création du dictionnaire immuable.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Type des clés dans le dictionnaire.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Type des valeurs dans le dictionnaire.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the key/value pairs in the specified sequence.">Dictionnaire immuable qui contient les paires clé/valeur dans l’ordre spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents by using the specified key and value comparers.">Énumère une séquence de paires clé/valeur et produit un dictionnaire immuable de son contenu à l’aide de la des comparateurs de clé et de valeur spécifiés.</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">Séquence de paires clé/valeur à énumérer.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use when building the immutable dictionary.">Comparateur de clés à utiliser lors de la création du dictionnaire immuable.</param>
      <param name="valueComparer" vsli:raw="The value comparer to use for the immutable dictionary.">Comparateur de valeur à utiliser pour le dictionnaire immuable.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Type des clés dans le dictionnaire.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Type des valeurs dans le dictionnaire.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the key/value pairs in the specified sequence.">Dictionnaire immuable qui contient les paires clé/valeur dans l’ordre spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}.Builder)">
      <summary vsli:raw="Creates an immutable dictionary from the current contents of the builder's dictionary.">Crée un dictionnaire immuable à partir du contenu actuel du dictionnaire du générateur.</summary>
      <param name="builder" vsli:raw="The builder to create the immutable dictionary from.">Générateur à partir duquel créer le dictionnaire immuable.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Type des clés dans le dictionnaire.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Type des valeurs dans le dictionnaire.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the current contents in the builder's dictionary.">Dictionnaire immuable qui contient le contenu actuel du dictionnaire du générateur.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable dictionary of its contents.">Énumère et transforme une séquence et produit un dictionnaire immuable de son contenu.</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">Séquence à énumérer pour générer le dictionnaire.</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">Fonction qui génère la clé de dictionnaire à partir de chaque élément de la séquence.</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">Fonction qui génère la valeur de dictionnaire à partir de chaque élément de la séquence.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Type des éléments de la séquence.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">Type des clés dans le dictionnaire qui en résulte.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">Type des valeurs dans le dictionnaire qui en résulte.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the items in the specified sequence.">Dictionnaire immuable qui contient les éléments dans l’ordre spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable dictionary of its contents by using the specified key comparer.">Énumère et transforme une séquence et produit un dictionnaire immuable de son contenu à l’aide du comparateur de clé spécifié.</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">Séquence à énumérer pour générer le dictionnaire.</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">Fonction qui génère la clé de dictionnaire à partir de chaque élément de la séquence.</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">Fonction qui génère la valeur de dictionnaire à partir de chaque élément de la séquence.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use for the dictionary.">Comparateur de clé à utiliser pour le dictionnaire.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Type des éléments de la séquence.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">Type des clés dans le dictionnaire qui en résulte.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">Type des valeurs dans le dictionnaire qui en résulte.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the items in the specified sequence.">Dictionnaire immuable qui contient les éléments dans l’ordre spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable dictionary of its contents by using the specified key and value comparers.">Énumère et transforme une séquence et produit un dictionnaire immuable de son contenu à l’aide des comparateurs de clé et de valeur spécifiés.</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">Séquence à énumérer pour générer le dictionnaire.</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">Fonction qui génère la clé de dictionnaire à partir de chaque élément de la séquence.</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">Fonction qui génère la valeur de dictionnaire à partir de chaque élément de la séquence.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use for the dictionary.">Comparateur de clé à utiliser pour le dictionnaire.</param>
      <param name="valueComparer" vsli:raw="The value comparer to use for the dictionary.">Comparateur de valeur à utiliser pour le dictionnaire.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Type des éléments de la séquence.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">Type des clés dans le dictionnaire qui en résulte.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">Type des valeurs dans le dictionnaire qui en résulte.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the items in the specified sequence.">Dictionnaire immuable qui contient les éléments dans l’ordre spécifié.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2">
      <summary vsli:raw="Represents an immutable, unordered collection of keys and values.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Représente une collection immuable et non triée de clés et valeurs.
Package NuGet : System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Type des clés dans le dictionnaire.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Type des valeurs dans le dictionnaire.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Add(`0,`1)">
      <summary vsli:raw="Adds an element with the specified key and value to the immutable dictionary.">Ajoute un élément avec la clé et la valeur spécifiées au dictionnaire immuable.</summary>
      <param name="key" vsli:raw="The key of the element to add.">Clé de l'élément à ajouter.</param>
      <param name="value" vsli:raw="The value of the element to add.">Valeur de l'élément à ajouter.</param>
      <returns vsli:raw="A new immutable dictionary that contains the additional key/value pair.">Nouveau dictionnaire immuable qui contient la paire clé/valeur supplémentaire.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The given key already exists in the dictionary but has a different value.">La clé donnée existe déjà dans le dictionnaire, mais a une valeur différente.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Adds the specified key/value pairs to the immutable dictionary.">Ajoute les paires clé/valeur spécifiées au dictionnaire immuable.</summary>
      <param name="pairs" vsli:raw="The key/value pairs to add.">Paires clé/valeur à ajouter.</param>
      <returns vsli:raw="A new immutable dictionary that contains the additional key/value pairs.">Nouveau dictionnaire immuable qui contient les paires clé/valeur supplémentaires.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="One of the given keys already exists in the dictionary but has a different value.">Une des clés données existe déjà dans le dictionnaire, mais a une valeur différente.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2.Builder">
      <summary vsli:raw="Represents a hash map that mutates with little or no memory allocations and that can produce or build on immutable hash map instances very efficiently.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Représente une table de hachage qui mute, avec peu ou pas d’allocations de mémoire, et qui peut produire ou créer efficacement sur des instances de table de hachage.
NuGet package: System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Add(`0,`1)">
      <summary vsli:raw="Adds an element that has the specified key and value to the immutable dictionary.">Ajoute un élément avec la clé et la valeur spécifiées au dictionnaire immuable.</summary>
      <param name="key" vsli:raw="The key of the element to add.">Clé de l'élément à ajouter.</param>
      <param name="value" vsli:raw="The value of the element to add.">Valeur de l'élément à ajouter.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is null.">
        <paramref name="key" /> a la valeur null.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="An element with the same key already exists in the dictionary.">Un élément possédant la même clé existe déjà dans le dictionnaire.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary is read-only.">Le dictionnaire est en lecture seule.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Adds the specified item to the immutable dictionary.">Ajoute l’élément spécifié au dictionnaire immuable.</summary>
      <param name="item" vsli:raw="The object to add to the dictionary.">Objet à ajouter au dictionnaire.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary is read-only.">Le dictionnaire est en lecture seule.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Adds a sequence of values to this collection.">Ajoute une séquence de valeurs à cette collection.</summary>
      <param name="items" vsli:raw="The items to add to this collection.">Éléments à ajouter à cette collection.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Clear">
      <summary vsli:raw="Removes all items from the immutable dictionary.">Supprime tous les éléments du dictionnaire immuable.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary is read-only.">Le dictionnaire est en lecture seule.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether the immutable dictionary contains a specific value.">Détermine si le dictionnaire immuable contient une valeur spécifique.</summary>
      <param name="item" vsli:raw="The object to locate in the dictionary.">Objet à rechercher dans le dictionnaire.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="item" /> se trouve dans le dictionnaire ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ContainsKey(`0)">
      <summary vsli:raw="Determines whether the immutable dictionary contains an element that has the specified key.">Détermine si le dictionnaire immuable contient un élément qui possède la clé spécifiée.</summary>
      <param name="key" vsli:raw="The key to locate in the dictionary.">Clé à rechercher dans le dictionnaire.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le dictionnaire contient un élément avec la clé ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is null.">
        <paramref name="key" /> a la valeur null.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ContainsValue(`1)">
      <summary vsli:raw="Determines whether the immutable dictionary contains an element that has the specified value.">Détermine si le dictionnaire immuable contient un élément qui possède la valeur spécifiée.</summary>
      <param name="value" vsli:raw="The value to locate in the immutable dictionary. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Valeur à rechercher dans le dictionnaire immuable. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le dictionnaire contient un élément qui possède la valeur spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Count">
      <summary vsli:raw="Gets the number of elements contained in the immutable dictionary.">Obtient le nombre d’éléments contenus dans le dictionnaire immuable.</summary>
      <returns vsli:raw="The number of elements contained in the immutable dictionary.">Nombre d’éléments contenus dans le dictionnaire immuable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable dictionary.">Retourne un énumérateur qui itère au sein du dictionnaire immuable.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Énumérateur permettant d'effectuer une itération au sein de la collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetValueOrDefault(`0)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary.">Obtient la valeur d’une clé spécifique, si une clé correspondante existe dans le dictionnaire.</summary>
      <param name="key" vsli:raw="The key to search for.">Clé à rechercher.</param>
      <returns vsli:raw="The value for the key, or &lt;c&gt;default(TValue)&lt;/c&gt; if no matching key was found.">Valeur de la clé, ou <c>default(TValue)</c> si aucune clé correspondante n’a été trouvée.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetValueOrDefault(`0,`1)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary.">Obtient la valeur d’une clé spécifique, si une clé correspondante existe dans le dictionnaire.</summary>
      <param name="key" vsli:raw="The key to search for.">Clé à rechercher.</param>
      <param name="defaultValue" vsli:raw="The default value to return if no matching key is found in the dictionary.">Valeur par défaut à retourner si aucune clé correspondante n’est trouvée dans le dictionnaire.</param>
      <returns vsli:raw="The value for the key, or &lt;paramref name=&quot;defaultValue&quot; /&gt; if no matching key was found.">Valeur de la clé, ou <paramref name="defaultValue" /> si aucune clé n’a été trouvée.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Item(`0)">
      <summary vsli:raw="Gets or sets the element with the specified key.">Obtient ou définit l'élément à l'aide de la clé spécifiée.</summary>
      <param name="key" vsli:raw="The element to get or set.">Élément à obtenir ou définir.</param>
      <returns vsli:raw="The element that has the specified key.">Élément qui contient la clé spécifiée.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="The property is being retrieved, and &lt;paramref name=&quot;key&quot; /&gt; is not found.">La propriété est récupérée et <paramref name="key" /> est introuvable.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The property is being set, and the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; is read-only.">La propriété est définie et <see cref="T:System.Collections.Generic.IDictionary`2" /> est en lecture seule.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.KeyComparer">
      <summary vsli:raw="Gets or sets the key comparer.">Obtient ou définit le comparateur de clé.</summary>
      <returns vsli:raw="The key comparer.">Comparateur de clé.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Keys">
      <summary vsli:raw="Gets a collection that contains the keys of the immutable dictionary.">Obtient une collection qui contient les clés du dictionnaire immuable.</summary>
      <returns vsli:raw="A collection that contains the keys of the object that implements the immutable dictionary.">Collection qui contient les clés de l’objet qui implémente le dictionnaire immuable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the immutable dictionary.">Supprime l’élément avec la clé spécifiée du dictionnaire immuable.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Clé de l'élément à supprimer.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; was not found in the dictionary.">
        <see langword="true" /> si la suppression de l'élément réussit ; sinon, <see langword="false" />.  Cette méthode retourne également <see langword="false" /> si <paramref name="key" /> est introuvable dans le dictionnaire.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is null.">
        <paramref name="key" /> a la valeur null.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary is read-only.">Le dictionnaire est en lecture seule.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable dictionary.">Supprime la première occurrence d’un objet spécifique du dictionnaire immuable.</summary>
      <param name="item" vsli:raw="The object to remove from the dictionary.">Objet à supprimer du dictionnaire.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns false if &lt;paramref name=&quot;item&quot; /&gt; is not found in the dictionary.">
        <see langword="true" /> si <paramref name="item" /> a été correctement supprimé du dictionnaire ; sinon, <see langword="false" />. Cette méthode retourne également false si <paramref name="item" /> est introuvable dans le dictionnaire.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary is read-only.">Le dictionnaire est en lecture seule.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes any entries with keys that match those found in the specified sequence from the immutable dictionary.">Supprime toutes les entrées avec des clés qui correspondent à celles de la séquence spécifiée du dictionnaire immuable.</summary>
      <param name="keys" vsli:raw="The keys for entries to remove from the dictionary.">Clés pour les entrées à supprimer du dictionnaire.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing." />
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the dictionary to an array of type &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt;, starting at the specified array index.">Copie les éléments du dictionnaire dans un tableau de type <see cref="T:System.Collections.Generic.KeyValuePair`2" />, en commençant à l’index de tableau spécifié.</summary>
      <param name="array" vsli:raw="The one-dimensional array of type &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; that is the destination of the elements copied from the dictionary. The array must have zero-based indexing.">Tableau unidimensionnel de type <see cref="T:System.Collections.Generic.KeyValuePair`2" /> qui constitue la destination des éléments copiés à partir du dictionnaire. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value that indicates whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Obtient une valeur qui indique si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread safe).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe) ; sinon <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Obtient un objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the dictionary object.">Ajoute un élément avec la valeur et la clé fournies à l’objet dictionary.</summary>
      <param name="key" vsli:raw="The key of the element to add.">Clé de l'élément à ajouter.</param>
      <param name="value" vsli:raw="The value of the element to add.">Valeur de l'élément à ajouter.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the dictionary object contains an element with the specified key.">Détermine si l’objet dictionary contient un élément avec la clé spécifiée.</summary>
      <param name="key" vsli:raw="The key to locate.">Clé à rechercher.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le dictionnaire contient un élément avec la clé ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the dictionary.">Retourne un objet <see cref="T:System.Collections.IDictionaryEnumerator" /> pour le dictionnaire.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the dictionary.">Objet <see cref="T:System.Collections.IDictionaryEnumerator" /> pour le dictionnaire.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size.">Obtient une valeur qui indique si l'objet <see cref="T:System.Collections.IDictionary" /> est de taille fixe.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’objet <see cref="T:System.Collections.IDictionary" /> a une taille fixe ; dans le cas contraire, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Obtient une valeur qui indique si l'objet <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">Obtient ou définit l'élément à l'aide de la clé spécifiée.</summary>
      <param name="key" vsli:raw="The key.">Clé.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Obtient un <see cref="T:System.Collections.Generic.ICollection`1" /> contenant les clés de <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> contenant les clés de l’objet qui implémente <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the dictionary.">Supprime l’élément avec la clé spécifiée du dictionnaire.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Clé de l'élément à supprimer.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Obtient <see cref="T:System.Collections.Generic.ICollection`1" /> contenant les valeurs de <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> contenant les valeurs de l’objet qui implémente <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Retourne un énumérateur qui itère au sein d’une collection.</summary>
      <returns vsli:raw="An enumerator object that can be used to iterate through the collection.">Objet enumerator qui peut servir à effectuer une itération dans la collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ToImmutable">
      <summary vsli:raw="Creates an immutable dictionary based on the contents of this instance.">Crée un dictionnaire immuable en fonction du contenu de cette instance.</summary>
      <returns vsli:raw="An immutable dictionary.">Dictionnaire immuable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.TryGetKey(`0,`0@)">
      <summary vsli:raw="Determines whether this dictionary contains a specified key.">Détermine si ce dictionnaire contient la clé spécifiée.</summary>
      <param name="equalKey" vsli:raw="The key to search for.">Clé à rechercher.</param>
      <param name="actualKey" vsli:raw="The matching key located in the dictionary if found, or &lt;c&gt;equalkey&lt;/c&gt; if no match is found.">Clé correspondante située dans le dictionnaire, le cas échéant, ou <c>equalkey</c> si aucune correspondance n’est trouvée.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a match for &lt;paramref name=&quot;equalKey&quot; /&gt; is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si une correspondance pour <paramref name="equalKey" /> est trouvée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.TryGetValue(`0,`1@)">
      <summary vsli:raw="Returns the value associated with the specified key.">Retourne la valeur associée à la clé spécifiée.</summary>
      <param name="key" vsli:raw="The key whose value will be retrieved.">Clé dont la valeur sera récupérée.</param>
      <param name="value" vsli:raw="When this method returns, contains the value associated with the specified key, if the key is found; otherwise, returns the default value for the type of the &lt;paramref name=&quot;value&quot; /&gt; parameter. This parameter is passed uninitialized.">Lorsque cette méthode est retournée, contient la valeur associée à la clé spécifiée, si la clé est trouvée ; sinon, retourne la valeur par défaut pour le type de paramètre <paramref name="value" />. Ce paramètre est passé sans être initialisé.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object that implements the immutable dictionary contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’objet qui implémente le dictionnaire immuable contient un élément avec la clé spécifiée ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is null.">
        <paramref name="key" /> a la valeur null.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.ValueComparer">
      <summary vsli:raw="Gets or sets the value comparer.">Obtient ou définit le comparateur de valeur.</summary>
      <returns vsli:raw="The value comparer.">Comparateur de valeur.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Values">
      <summary vsli:raw="Gets a collection that contains the values of the immutable dictionary.">Obtient une collection qui contient les valeurs du dictionnaire immuable.</summary>
      <returns vsli:raw="A collection that contains the values of the object that implements the dictionary.">Collection qui contient les valeurs de l’objet qui implémente le dictionnaire.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Clear">
      <summary vsli:raw="Retrieves an empty immutable dictionary that has the same ordering and key/value comparison rules as this dictionary instance.">Récupère un dictionnaire immuable vide qui possède les mêmes règles de comparaison de classement et de clé/valeur que cette instance du dictionnaire.</summary>
      <returns vsli:raw="An empty dictionary with equivalent ordering and key/value comparison rules.">Dictionnaire vide avec des règles de comparaison de classement et de clé/valeur équivalentes.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether this immutable dictionary contains the specified key/value pair.">Détermine si ce dictionnaire immuable contient la paire clé/valeur spécifiée.</summary>
      <param name="pair" vsli:raw="The key/value pair to locate.">Paire clé/valeur à rechercher.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified key/value pair is found in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la paire clé/valeur spécifiée est trouvée dans le dictionnaire ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ContainsKey(`0)">
      <summary vsli:raw="Determines whether the immutable dictionary contains an element with the specified key.">Détermine si le dictionnaire immuable contient un élément avec la clé spécifiée.</summary>
      <param name="key" vsli:raw="The key to locate.">Clé à rechercher.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the immutable dictionary contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le dictionnaire immuable contient un élément avec la clé spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ContainsValue(`1)">
      <summary vsli:raw="Determines whether the immutable dictionary contains an element with the specified value.">Détermine si le dictionnaire immuable contient un élément avec la valeur spécifiée.</summary>
      <param name="value" vsli:raw="The value to locate. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Valeur à rechercher. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le dictionnaire contient un élément qui possède la valeur spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Count">
      <summary vsli:raw="Gets the number of key/value pairs in the immutable dictionary.">Obtient le nombre de paires clé/valeur dans le dictionnaire immuable.</summary>
      <returns vsli:raw="The number of key/value pairs in the dictionary.">Nombre de paires clé/valeur dans le dictionnaire.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableDictionary`2.Empty">
      <summary vsli:raw="Gets an empty immutable dictionary.">Obtient un dictionnaire vide immuable.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator">
      <summary vsli:raw="Enumerates the contents of the immutable dictionary without allocating any memory.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Énumère le contenu du dictionnaire immuable sans allouer de mémoire.
Package NuGet : System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtient l'élément situé à la position actuelle de l'énumérateur.</summary>
      <returns vsli:raw="The element in the dictionary at the current position of the enumerator.">Élément dans le dictionnaire à la position actuelle de l’énumérateur.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Dispose">
      <summary vsli:raw="Releases the resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator&quot; /&gt; class.">Libère les ressources utilisées par l'instance actuelle de la classe <see cref="T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable dictionary.">Avance l’énumérateur à l’élément suivant du dictionnaire immuable.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the dictionary.">
        <see langword="true" /> si l’énumérateur a pu avancer jusqu’à l’élément suivant ; <see langword="false" /> si l’énumérateur a dépassé la fin du dictionnaire.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The dictionary was modified after the enumerator was created.">Le dictionnaire a été modifié après la création de l’énumérateur.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the dictionary.">Rétablit l’énumérateur à sa position initiale, qui précède le premier élément du dictionnaire.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The dictionary was modified after the enumerator was created.">Le dictionnaire a été modifié après la création de l’énumérateur.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the current element.">Obtient l’élément actuel.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable dictionary.">Retourne un énumérateur qui itère au sein du dictionnaire immuable.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the dictionary.">Énumérateur qui peut être utilisé pour itérer au sein du dictionnaire.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this instance of the immutable dictionary is empty.">Obtient une valeur qui indique si cette instance du dictionnaire immuable est vide.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si cette instance est valide ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Item(`0)">
      <summary vsli:raw="Gets the &lt;paramref name=&quot;TValue&quot; /&gt; associated with the specified key.">Obtient le <paramref name="TValue" /> associé à la clé spécifiée.</summary>
      <param name="key" vsli:raw="The type of the key.">Type de la clé.</param>
      <returns vsli:raw="The value associated with the specified key. If no results are found, the operation throws an exception.">Valeur associée à la clé spécifiée. Si aucun résultat n’est trouvé, l’opération lève une exception.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.KeyComparer">
      <summary vsli:raw="Gets the key comparer for the immutable dictionary.">Obtient le comparateur de clé pour le dictionnaire immuable.</summary>
      <returns vsli:raw="The key comparer.">Comparateur de clé.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Keys">
      <summary vsli:raw="Gets the keys in the immutable dictionary.">Obtient les clés dans le dictionnaire immuable.</summary>
      <returns vsli:raw="The keys in the immutable dictionary.">Clés dans le dictionnaire immuable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the immutable dictionary.">Supprime l’élément avec la clé spécifiée du dictionnaire immuable.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Clé de l'élément à supprimer.</param>
      <returns vsli:raw="A new immutable dictionary with the specified element removed; or this instance if the specified key cannot be found in the dictionary.">Nouveau dictionnaire immuable avec l’élément spécifié supprimé ; ou cette instance si la clé spécifiée est introuvable dans le dictionnaire.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements with the specified keys from the immutable dictionary.">Supprime les éléments avec les clés spécifiées du dictionnaire immuable.</summary>
      <param name="keys" vsli:raw="The keys of the elements to remove.">Clés des éléments à supprimer.</param>
      <returns vsli:raw="A new immutable dictionary with the specified keys removed; or this instance if the specified keys cannot be found in the dictionary.">Nouveau dictionnaire immuable avec les clés spécifiées supprimées ; ou cette instance si les clés spécifiées sont introuvables dans le dictionnaire.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.SetItem(`0,`1)">
      <summary vsli:raw="Sets the specified key and value in the immutable dictionary, possibly overwriting an existing value for the key.">Définit la clé et la valeur spécifiées dans le dictionnaire immuable, en remplaçant éventuellement une valeur existante pour la clé.</summary>
      <param name="key" vsli:raw="The key of the entry to add.">Clé de l'entrée à ajouter.</param>
      <param name="value" vsli:raw="The key value to set.">Valeur de clé à définir.</param>
      <returns vsli:raw="A new immutable dictionary that contains the specified key/value pair.">Nouveau dictionnaire immuable qui contient la paire clé/valeur spécifiée.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Sets the specified key/value pairs in the immutable dictionary, possibly overwriting existing values for the keys.">Définit les paires clé/valeur spécifiées dans le dictionnaire immuable, en remplaçant éventuellement des valeurs existantes pour les clés.</summary>
      <param name="items" vsli:raw="The key/value pairs to set in the dictionary. If any of the keys already exist in the dictionary, this method will overwrite their previous values.">Paires clé/valeur à définir dans le dictionnaire. Si une clé existe déjà dans le dictionnaire, cette méthode remplace leurs valeurs précédentes.</param>
      <returns vsli:raw="A new immutable dictionary that contains the specified key/value pairs.">Nouveau dictionnaire immuable qui contient les paires clé/valeur spécifiées.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing." />
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" vsli:raw="The object to remove from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" vsli:raw="The object to use as the key of the element to add." />
      <param name="value" vsli:raw="The object to use as the value of the element to add." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Item(`0)">
      <param name="key" vsli:raw="The type of the key." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" vsli:raw="The key of the element to remove." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the dictionary to an array, starting at a particular array index.">Copie les éléments du dictionnaire dans un tableau, en commençant à un index de tableau particulier.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing.">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir du dictionnaire. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Obtient une valeur indiquant si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe) ; sinon <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Obtient un objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the immutable dictionary object.">Ajoute un élément avec la valeur et la clé fournies à l’objet dictionary immuable.</summary>
      <param name="key" vsli:raw="The object to use as the key of the element to add.">Objet à utiliser comme clé de l'élément à ajouter.</param>
      <param name="value" vsli:raw="The object to use as the value of the element to add.">Objet à utiliser comme valeur de l'élément à ajouter.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Clear">
      <summary vsli:raw="Clears this instance.">Supprime cette instance.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary object is read-only.">L’objet dictionary est en lecture seule.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the immutable dictionary object contains an element with the specified key.">Détermine si l’objet dictionary immuable contient un élément avec la clé spécifiée.</summary>
      <param name="key" vsli:raw="The key to locate in the dictionary object.">Clé à rechercher dans l’objet dictionary.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le dictionnaire contient un élément avec la clé ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the immutable dictionary object.">Retourne un objet <see cref="T:System.Collections.IDictionaryEnumerator" /> pour l’objet dictionary immuable.</summary>
      <returns vsli:raw="An enumerator object for the dictionary object.">Objet enumerator pour l’objet dictionary.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size.">Obtient une valeur indiquant si l'objet <see cref="T:System.Collections.IDictionary" /> est de taille fixe.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'objet <see cref="T:System.Collections.IDictionary" /> est de taille fixe ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Obtient une valeur indiquant si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">Obtient ou définit l'élément à l'aide de la clé spécifiée.</summary>
      <param name="key" vsli:raw="The key.">Clé.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Obtient un <see cref="T:System.Collections.Generic.ICollection`1" /> contenant les clés de <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> contenant les clés de l'objet qui implémente <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the immutable dictionary object.">Supprime l’élément avec la clé spécifiée de l’objet dictionary immuable.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Clé de l'élément à supprimer.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Obtient <see cref="T:System.Collections.Generic.ICollection`1" /> contenant les valeurs de <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> contenant les valeurs de l'objet qui implémente <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Retourne un énumérateur qui itère au sein d’une collection.</summary>
      <returns vsli:raw="An enumerator object that can be used to iterate through the collection.">Objet enumerator qui peut servir à effectuer une itération dans la collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" vsli:raw="Key of the entry to be added." />
      <param name="value" vsli:raw="Value of the entry to be added." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="pairs" vsli:raw="Sequence of key/value pairs to be added to the dictionary." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" vsli:raw="Key of the entry to be removed." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <param name="keys" vsli:raw="Sequence of keys to be removed." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItem(`0,`1)">
      <param name="key" vsli:raw="Key of entry to be added." />
      <param name="value" vsli:raw="Value of the entry to be added." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="items" vsli:raw="The key-value pairs to set on the map. Any keys that conflict with existing keys will replace the previous values." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ToBuilder">
      <summary vsli:raw="Creates an immutable dictionary with the same contents as this dictionary that can be efficiently mutated across multiple operations by using standard mutable interfaces.">Crée un dictionnaire immuable avec le même contenu que ce dictionnaire qui peut être efficacement muté entre plusieurs opérations à l’aide des interfaces standard mutables.</summary>
      <returns vsli:raw="A collection with the same contents as this dictionary that can be efficiently mutated across multiple operations by using standard mutable interfaces.">Une collection avec le même contenu que ce dictionnaire qui peut être efficacement mutée entre plusieurs opérations à l’aide des interfaces standard mutables.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.TryGetKey(`0,`0@)">
      <summary vsli:raw="Determines whether this dictionary contains a specified key.">Détermine si ce dictionnaire contient la clé spécifiée.</summary>
      <param name="equalKey" vsli:raw="The key to search for.">Clé à rechercher.</param>
      <param name="actualKey" vsli:raw="The matching key located in the dictionary if found, or &lt;c&gt;equalkey&lt;/c&gt; if no match is found.">Clé correspondante située dans le dictionnaire, le cas échéant, ou <c>equalkey</c> si aucune correspondance n’est trouvée.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a match for &lt;paramref name=&quot;equalKey&quot; /&gt; is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si une correspondance pour <paramref name="equalKey" /> est trouvée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.TryGetValue(`0,`1@)">
      <summary vsli:raw="Gets the value associated with the specified key.">Obtient la valeur associée à la clé spécifiée.</summary>
      <param name="key" vsli:raw="The key whose value will be retrieved.">Clé dont la valeur sera récupérée.</param>
      <param name="value" vsli:raw="When this method returns, contains the value associated with the specified key, if the key is found; otherwise, contains the default value for the type of the &lt;paramref name=&quot;value&quot; /&gt; parameter. This parameter is passed uninitialized.">Cette méthode retourne la valeur associée à la clé spécifiée, si la clé est trouvée ; sinon, retourne la valeur par défaut pour le type du paramètre <paramref name="value" />. Ce paramètre est passé sans être initialisé.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object that implements the dictionary contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’objet qui implémente le dictionnaire contient un élément avec la clé spécifiée ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is null.">
        <paramref name="key" /> a la valeur null.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.ValueComparer">
      <summary vsli:raw="Gets the value comparer used to determine whether values are equal.">Obtient le comparateur de valeur utilisé pour déterminer si les valeurs sont égales.</summary>
      <returns vsli:raw="The value comparer used to determine whether values are equal.">Comparateur de valeur utilisé pour déterminer si les valeurs sont égales.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Values">
      <summary vsli:raw="Gets the values in the immutable dictionary.">Obtient les valeurs dans le dictionnaire immuable.</summary>
      <returns vsli:raw="The values in the immutable dictionary.">Valeurs dans le dictionnaire immuable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Gets an instance of the immutable dictionary that uses the specified key comparer.">Obtient une instance du dictionnaire immuable qui utilise le comparateur de clé spécifié.</summary>
      <param name="keyComparer" vsli:raw="The key comparer to use.">Comparateur de clé à utiliser.</param>
      <returns vsli:raw="An instance of the immutable dictionary that uses the given comparer.">Une instance du dictionnaire immuable qui utilise le comparateur donné.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
      <summary vsli:raw="Gets an instance of the immutable dictionary that uses the specified key and value comparers.">Obtient une instance du dictionnaire immuable qui utilise les comparateurs de clé et de valeur spécifiées.</summary>
      <param name="keyComparer" vsli:raw="The key comparer to use.">Comparateur de clé à utiliser.</param>
      <param name="valueComparer" vsli:raw="The value comparer to use.">Comparateur de valeur à utiliser.</param>
      <returns vsli:raw="An instance of the immutable dictionary that uses the given comparers.">Une instance du dictionnaire immuable qui utilise les comparateurs donnés.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableHashSet`1&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Fournit un ensemble de méthodes d’initialisation pour les instances de la classe <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" />.
Package NuGet : System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1">
      <summary vsli:raw="Creates an empty immutable hash set.">Crée un ensemble immuable de hachage vide.</summary>
      <typeparam name="T" vsli:raw="The type of items to be stored in the immutable hash set.">Type des éléments à stocker dans l’ensemble immuable de hachage.</typeparam>
      <returns vsli:raw="An empty immutable hash set.">Ensemble immuable de hachage vide.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(``0)">
      <summary vsli:raw="Creates a new immutable hash set that contains the specified item.">Crée un ensemble immuable de hachage qui contient l’élément spécifié.</summary>
      <param name="item" vsli:raw="The item to prepopulate the hash set with.">Élément avec lequel préremplir l’ensemble de hachage.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable hash set.">Type des éléments de l’ensemble immuable de hachage.</typeparam>
      <returns vsli:raw="A new immutable hash set that contains the specified item.">Crée un ensemble immuable de hachage qui contient l’élément spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(``0[])">
      <summary vsli:raw="Creates a new immutable hash set that contains the specified array of items.">Crée un ensemble immuable de hachage qui contient le tableau spécifié d’éléments.</summary>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the hash set with.">Tableau qui contient les éléments avec lesquels préremplir l’ensemble de hachage.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable hash set.">Type des éléments de l’ensemble immuable de hachage.</typeparam>
      <returns vsli:raw="A new immutable hash set that contains the specified items.">Crée un ensemble immuable de hachage qui contient les éléments spécifiés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates an empty immutable hash set that uses the specified equality comparer.">Crée un ensemble immuable de hachage vide qui utilise le comparateur d’égalité spécifié.</summary>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">Objet à utiliser pour comparer des objets dans l’ensemble pour égalité.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable hash set.">Type des éléments de l’ensemble immuable de hachage.</typeparam>
      <returns vsli:raw="An empty immutable hash set.">Ensemble immuable de hachage vide.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0},``0)">
      <summary vsli:raw="Creates a new immutable hash set that contains the specified item and uses the specified equality comparer for the set type.">Crée un ensemble immuable de hachage qui contient l’élément spécifié et utilise le comparateur d’égalité spécifié pour le type d’ensemble.</summary>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">Objet à utiliser pour comparer des objets dans l’ensemble pour égalité.</param>
      <param name="item" vsli:raw="The item to prepopulate the hash set with.">Élément avec lequel préremplir l’ensemble de hachage.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable hash set.">Type des éléments de l’ensemble immuable de hachage.</typeparam>
      <returns vsli:raw="A new immutable hash set that contains the specified item.">Crée un ensemble immuable de hachage qui contient l’élément spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0},``0[])">
      <summary vsli:raw="Creates a new immutable hash set that contains the items in the specified collection and uses the specified equality comparer for the set type.">Crée un ensemble immuable de hachage qui contient les éléments de la collection spécifiée et utilise le comparateur d’égalité spécifié pour le type d’ensemble.</summary>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">Objet à utiliser pour comparer des objets dans l’ensemble pour égalité.</param>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the hash set with.">Tableau qui contient les éléments avec lesquels préremplir l’ensemble de hachage.</param>
      <typeparam name="T" vsli:raw="The type of items stored in the immutable hash set.">Type des éléments stockés dans l’ensemble immuable de hachage.</typeparam>
      <returns vsli:raw="A new immutable hash set that contains the specified items.">Crée un ensemble immuable de hachage qui contient les éléments spécifiés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateBuilder``1">
      <summary vsli:raw="Creates a new immutable hash set builder.">Crée un générateur d’ensemble immuable de hachage.</summary>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">Type des éléments stockés dans la collection.</typeparam>
      <returns vsli:raw="The immutable hash set builder.">Générateur d’ensemble immuable de hachage.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateBuilder``1(System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates a new immutable hash set builder.">Crée un générateur d’ensemble immuable de hachage.</summary>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">Objet à utiliser pour comparer des objets dans l’ensemble pour égalité.</param>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">Type des éléments stockés dans la collection.</typeparam>
      <returns vsli:raw="The new immutable hash set builder.">Nouveau générateur d’ensemble immuable de hachage.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable hash set prefilled with the specified items.">Crée un ensemble immuable de hachage prérempli avec les éléments spécifiés.</summary>
      <param name="items" vsli:raw="The items to add to the hash set.">Éléments à ajouter à ensemble de hachage.</param>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">Type des éléments stockés dans la collection.</typeparam>
      <returns vsli:raw="The new immutable hash set that contains the specified items.">Nouvel ensemble immuable de hachage qui contient les éléments spécifiés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateRange``1(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable hash set that contains the specified items and uses the specified equality comparer for the set type.">Crée un ensemble immuable de hachage qui contient les éléments spécifiés et utilise le comparateur d’égalité spécifié pour le type d’ensemble.</summary>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">Objet à utiliser pour comparer des objets dans l’ensemble pour égalité.</param>
      <param name="items" vsli:raw="The items add to the collection before immutability is applied.">Éléments à ajouter à la collection avant que l’immuabilité soit appliquée.</param>
      <typeparam name="T" vsli:raw="The type of items stored in the collection.">Type des éléments stockés dans la collection.</typeparam>
      <returns vsli:raw="The new immutable hash set.">Nouvel ensemble immuable de hachage.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Enumerates a sequence and produces an immutable hash set of its contents.">Énumère une séquence et produit un ensemble immuable de hachage de son contenu.</summary>
      <param name="source" vsli:raw="The sequence to enumerate.">Séquence à énumérer.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Type des éléments de la séquence.</typeparam>
      <returns vsli:raw="An immutable hash set that contains the items in the specified sequence.">Ensemble immuable de hachage qui contient les éléments dans l’ordre spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Enumerates a sequence, produces an immutable hash set of its contents, and uses the specified equality comparer for the set type.">Énumère une séquence, produit un ensemble immuable de hachage de son contenu et utilise le comparateur d’égalité spécifié pour le type d’ensemble.</summary>
      <param name="source" vsli:raw="The sequence to enumerate.">Séquence à énumérer.</param>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">Objet à utiliser pour comparer des objets dans l’ensemble pour égalité.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Type des éléments de la séquence.</typeparam>
      <returns vsli:raw="An immutable hash set that contains the items in the specified sequence and uses the specified equality comparer.">Ensemble immuable de hachage qui contient les éléments dans l’ordre spécifié et utilise le comparateur d’égalité spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Immutable.ImmutableHashSet{``0}.Builder)">
      <summary vsli:raw="Creates an immutable hash set from the current contents of the builder's set.">Crée un ensemble de hachage immuable à partir du contenu actuel de l’ensemble du générateur.</summary>
      <param name="builder" vsli:raw="The builder to create the immutable hash set from.">Générateur à partir duquel créer l’ensemble de hachage immuable.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the hash set.">Type des éléments de l’ensemble de hachage.</typeparam>
      <returns vsli:raw="An immutable hash set that contains the current contents in the builder's set.">Ensemble de hachage immuable qui contient le contenu actuel de l’ensemble du générateur.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1">
      <summary vsli:raw="Represents an immutable, unordered hash set.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Représente un ensemble immuable de hachage, non trié.
NuGet package: System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the hash set.">Type d'éléments de l'ensemble de hachages.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Add(`0)">
      <summary vsli:raw="Adds the specified element to the hash set.">Ajoute l’élément spécifié à l’ensemble de hachage.</summary>
      <param name="item" vsli:raw="The element to add to the set.">Élément à ajouter à l'ensemble.</param>
      <returns vsli:raw="A hash set that contains the added value and any values previously held by the  &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableHashSet`1&quot; /&gt; object.">Ensemble de hachage qui contient la valeur ajoutée et toutes les valeurs précédemment détenues par l’objet <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" />.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1.Builder">
      <summary vsli:raw="Represents a hash set that mutates with little or no memory allocations and that can produce or build on immutable hash set instances very efficiently.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Représente un ensemble de hachage qui mute, avec peu ou pas d’allocations de mémoire, et qui peut produire ou créer très efficacement sur des instances de l’ensemble immuable de hachage.
Package NuGet : System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Add(`0)">
      <summary vsli:raw="Adds the specified item to the immutable hash set.">Ajoute l’élément spécifié à l’ensemble immuable de hachage.</summary>
      <param name="item" vsli:raw="The item to add.">Élément à ajouter.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item did not already belong to the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’élément n’appartient pas déjà à la collection ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Clear">
      <summary vsli:raw="Removes all items from the immutable hash set.">Supprime tous les éléments de l’ensemble immuable de hachage.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The hash set is read-only.">Le jeu de hachage est en lecture seule.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Contains(`0)">
      <summary vsli:raw="Determines whether the immutable hash set contains a specific value.">Détermine si l’ensemble immuable de hachage contient une valeur spécifique.</summary>
      <param name="item" vsli:raw="The object to locate in the hash set.">Objet à localiser dans l’ensemble de hachage.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the hash set ; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="item" /> se trouve dans l’ensemble  de hachage ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.Count">
      <summary vsli:raw="Gets the number of elements contained in the immutable hash set.">Obtient le nombre d’éléments contenus dans l’ensemble immuable de hachage.</summary>
      <returns vsli:raw="The number of elements contained in the immutable hash set.">Nombre d’éléments contenus dans l’ensemble immuable de hachage défini.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes all elements in the specified collection from the current hash set.">Supprime tous les éléments de la collection spécifiée de l’ensemble actuel de hachage.</summary>
      <param name="other" vsli:raw="The collection of items to remove from the set.">Collection d'éléments à supprimer de l'ensemble.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable hash set.">Retourne un énumérateur qui itère au sein de l’ensemble immuable de hachage.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the set.">Énumérateur qui peut être utilisé pour itérer via l’ensemble.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are also in a specified collection.">Modifie l'ensemble actuel pour qu'il contienne uniquement les éléments qui figurent également dans une collection spécifiée.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Collection à comparer à l’ensemble actuel.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a proper (strict) subset of a specified collection.">Détermine si l'ensemble actuel est un sous-ensemble (strict) approprié d'une collection spécifiée.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Collection à comparer à l’ensemble actuel.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’ensemble actuel est un sous-ensemble approprié de <paramref name="other" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a proper (strict) superset of a specified collection.">Détermine si l'ensemble actuel est un sur-ensemble de propriété (strict) approprié d'une collection spécifiée.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Collection à comparer à l’ensemble actuel.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’ensemble actuel est un sur-ensemble approprié de <paramref name="other" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a subset of a specified collection.">Détermine si l’ensemble actuel est un sous-ensemble d’une collection spécifiée.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Collection à comparer à l’ensemble actuel.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’ensemble actuel est un sous-ensemble de <paramref name="other" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a superset of a specified collection.">Détermine si l'ensemble actuel est un super-ensemble d'une collection spécifiée.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Collection à comparer à l’ensemble actuel.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’ensemble actuel est un sur-ensemble de <paramref name="other" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.KeyComparer">
      <summary vsli:raw="Gets or sets the key comparer.">Obtient ou définit le comparateur de clé.</summary>
      <returns vsli:raw="The key comparer.">Comparateur de clé.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set overlaps with the specified collection.">Détermine si l’ensemble actuel recoupe la collection spécifiée.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Collection à comparer à l’ensemble actuel.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set and &lt;paramref name=&quot;other&quot; /&gt; share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’ensemble actuel et <paramref name="other" /> partagent au moins un élément commun ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable hash set.">Supprime la première occurrence d’un objet spécifique de l’ensemble de hachage immuable.</summary>
      <param name="item" vsli:raw="The object to remove from the set.">Objet à supprimer de l’ensemble.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the set ; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is not found in the original set.">
        <see langword="true" /> si <paramref name="item" /> a été correctement supprimé de l’ensemble ; sinon, <see langword="false" />. Cette méthode retourne également <see langword="false" /> si <paramref name="item" /> est introuvable dans l’ensemble d’origine.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only.">Le jeu est en lecture seule.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set and the specified collection contain the same elements.">Détermine si l'ensemble actuel et la collection spécifiée contiennent les mêmes éléments.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Collection à comparer à l’ensemble actuel.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is equal to &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’ensemble actuel est égal à <paramref name="other" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.">Modifie l’ensemble actuel pour qu’il contienne uniquement les éléments présents dans l’ensemble actuel ou dans la collection spécifiée, mais pas dans les deux à la fois.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Collection à comparer à l’ensemble actuel.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds an item to the hash set.">Ajoute un élément à l’ensemble de hachage.</summary>
      <param name="item" vsli:raw="The object to add to the set.">Objet à ajouter à l’ensemble.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only.">Le jeu est en lecture seule.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the elements of the hash set to an array, starting at a particular array index.">Copie les éléments de l’ensemble de hachage défini dans un tableau, en commençant à un index de tableau particulier.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the hash set. The array must have zero-based indexing.">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir de l’ensemble de hachage. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Obtient une valeur indiquant si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Retourne un énumérateur qui itère au sein de la collection.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Énumérateur permettant d'effectuer une itération au sein de la collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Retourne un énumérateur qui itère au sein d’une collection.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Énumérateur permettant d'effectuer une itération au sein de la collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.ToImmutable">
      <summary vsli:raw="Creates an immutable hash set based on the contents of this instance.">Crée un ensemble immuable de hachage en fonction du contenu de cette instance.</summary>
      <returns vsli:raw="An immutable set.">Ensemble immuable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains all elements that are present in both the current set and in the specified collection.">Modifie l’ensemble actuel pour qu’il contienne tous les éléments présents dans l’ensemble actuel, dans la collection spécifiée ou dans les deux.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Collection à comparer à l’ensemble actuel.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Clear">
      <summary vsli:raw="Retrieves an empty immutable hash set that has the same sorting and ordering semantics as this instance.">Récupère un ensemble immuable de hachage vide qui a la même sémantique de tri et de classement que cette instance.</summary>
      <returns vsli:raw="An empty hash set that has the same sorting and ordering semantics as this instance.">Ensemble de hachage vide qui a la même sémantique de tri et de classement que cette instance.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Contains(`0)">
      <summary vsli:raw="Determines whether this immutable hash set contains the specified element.">Détermine si cet ensemble immuable de hachage contient l’élément spécifié.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable hash set.">Objet à localiser dans l’ensemble immuable de hachage.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableHashSet`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="item" /> existe dans <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Count">
      <summary vsli:raw="Gets the number of elements in the immutable hash set.">Obtient le nombre d’éléments de l’ensemble immuable de hachage.</summary>
      <returns vsli:raw="The number of elements in the hash set.">Nombre d’éléments de l’ensemble de hachage.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableHashSet`1.Empty">
      <summary vsli:raw="Gets an immutable hash set for this type that uses the default &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt;.">Obtient un ensemble immuable de hachage pour ce type qui utilise la valeur par défaut <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator">
      <summary vsli:raw="Enumerates the contents of the immutable hash set without allocating any memory.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Énumère le contenu de l’ensemble immuable de hachage sans allouer de mémoire.
Package NuGet : System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtient l'élément situé à la position actuelle de l'énumérateur.</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">Élément situé à la position actuelle de l’énumérateur.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Dispose">
      <summary vsli:raw="Releases the resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator&quot; /&gt; class.">Libère les ressources utilisées par l'instance actuelle de la classe <see cref="T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable hash set.">Avance l’énumérateur à l’élément suivant de l’ensemble immuable de hachage.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the hash set.">
        <see langword="true" /> si l’énumérateur a pu avancer jusqu’à l’élément suivant ; <see langword="false" /> si l’énumérateur a dépassé la fin de l’ensemble de hachage.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The hash set was modified after the enumerator was created.">Le jeu de hachage a été modifié après la création de l’énumérateur.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the hash set.">Rétablit l’énumérateur à sa position initiale, qui précède le premier élément de l’ensemble de hachage.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The hash set was modified after the enumerator was created.">Le jeu de hachage a été modifié après la création de l’énumérateur.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the current element.">Obtient l’élément actuel.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements in the specified collection from the current immutable hash set.">Supprime les éléments de la collection spécifiée de l’ensemble actuel immuable de hachage.</summary>
      <param name="other" vsli:raw="The collection of items to remove from this set.">Collection d’éléments à supprimer de cet ensemble.</param>
      <returns vsli:raw="A new set with the items removed; or the original set if none of the items were in the set.">Nouvel ensemble avec les éléments supprimés ; ou ensemble d’origine si aucun des éléments ne se trouvaient dans l’ensemble.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Retourne un énumérateur qui itère au sein de la collection.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Énumérateur permettant d'effectuer une itération au sein de la collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable hash set that contains elements that exist in both this set and the specified set.">Crée un ensemble immuable de hachage qui contient des éléments qui existent dans cet ensemble et l’ensemble spécifié.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Collection à comparer à l’ensemble actuel.</param>
      <returns vsli:raw="A new immutable set that contains any elements that exist in both sets.">Nouvel ensemble immuable qui contient des éléments qui existent dans les deux ensembles.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether the current immutable hash set is empty.">Obtient une valeur qui indique si l’ensemble actuel immuable de hachage  est vide.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si cette instance est valide ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set is a proper (strict) subset of a specified collection.">Détermine si l’ensemble de hachage immuable actuel est un sous-ensemble approprié (strict) d’une collection spécifiée.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Collection à comparer à l’ensemble actuel.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper subset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’ensemble actuel est un sous-ensemble approprié de la collection spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set is a proper (strict) superset of a specified collection.">Détermine si l’ensemble actuel immuable de hachage est un sur-ensemble (strict) d’une collection spécifiée.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Collection à comparer à l’ensemble actuel.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper superset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’ensemble actuel est un sur-ensemble approprié de la collection spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set is a subset of a specified collection.">Détermine si l’ensemble immuable actuel de hachage est un sous-ensemble d’une collection spécifiée.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Collection à comparer à l’ensemble actuel.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a subset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’ensemble actuel est un sous-ensemble de la collection spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set is a superset of a specified collection.">Détermine si l’ensemble immuable actuel de hachage est un sur-ensemble de la collection spécifiée.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Collection à comparer à l’ensemble actuel.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a superset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’ensemble actuel est un sur-ensemble de la collection spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.KeyComparer">
      <summary vsli:raw="Gets the object that is used to obtain hash codes for the keys and to check the equality of values in the immutable hash set.">Obtient l’objet utilisé pour obtenir les codes de hachage pour les clés et pour vérifier l’égalité des valeurs dans l’ensemble immuable de hachage.</summary>
      <returns vsli:raw="The comparer used to obtain hash codes for the keys and check equality.">Comparateur utilisé pour obtenir les codes de hachage pour les clés et vérifier l’égalité.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set overlaps with the specified collection.">Détermine si l’ensemble immuable actuel de hachage chevauche avec la collection spécifiée.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Collection à comparer à l’ensemble actuel.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set and the specified collection share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’ensemble actuel et la collection spécifiée partagent au moins un élément commun ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Remove(`0)">
      <summary vsli:raw="Removes the specified element from this immutable hash set.">Supprime l’élément spécifié de cet ensemble immuable de hachage.</summary>
      <param name="item" vsli:raw="The element to remove.">Élément à supprimer.</param>
      <returns vsli:raw="A new set with the specified element removed, or the current set if the element cannot be found in the set.">Nouvel ensemble avec l’élément spécifié supprimé, ou ensemble actuel si l’élément est introuvable dans l’ensemble.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set and the specified collection contain the same elements.">Détermine si l’ensemble immuable actuel de hachage et la collection spécifiée contiennent les mêmes éléments.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Collection à comparer à l’ensemble actuel.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the sets are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si les ensemble sont égaux ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable hash set that contains only elements that are present either in the current set or in the specified collection, but not both.">Crée un ensemble immuable de hachage qui contient uniquement les éléments qui sont présents dans l’ensemble actuel ou dans la collection spécifiée, mais pas dans les deux.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Collection à comparer à l’ensemble actuel.</param>
      <returns vsli:raw="A new set that contains the elements that are present only in the current set or in the specified collection, but not both.">Nouvel ensemble qui contient les éléments qui sont présents uniquement dans l’ensemble actuel ou dans la collection spécifiée, mais pas dans les deux.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds an item to the set.">Ajoute un élément à l’ensemble.</summary>
      <param name="item" vsli:raw="The object to add to the set.">Objet à ajouter à l’ensemble.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only.">Le jeu est en lecture seule.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary vsli:raw="Removes all items from this set.">Supprime tous les éléments de cet ensemble.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only.">Le jeu est en lecture seule.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the elements of the set to an array, starting at a particular index.">Copie les éléments de l’ensemble dans un tableau, en commençant à un index particulier.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the set. The array must have zero-based indexing.">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir de l’ensemble. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="See the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; interface.">Consultez l’interface <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the set.">Supprime la première occurrence d’un objet spécifique de l’ensemble.</summary>
      <param name="item" vsli:raw="The object to remove from the set.">Objet à supprimer de l’ensemble.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la suppression de l'élément réussit ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Retourne un énumérateur qui itère au sein de la collection.</summary>
      <returns vsli:raw="An enumerator that iterates through the collection.">Énumérateur qui itère la collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#Add(`0)">
      <summary vsli:raw="Adds an element to the current set and returns a value that indicates whether the element was successfully added.">Ajoute un élément à l’ensemble actuel et retourne une valeur qui indique si l’élément a été ajouté avec succès.</summary>
      <param name="item" vsli:raw="The element to add to the collection.">Élément à ajouter à la collection.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is added to the set; &lt;see langword=&quot;false&quot; /&gt; if the element is already in the set.">
        <see langword="true" /> si l’élément est ajouté à l’ensemble ; <see langword="false" /> si l’élément figure déjà dans l’ensemble.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes all elements in the specified collection from the current set.">Supprime de l’ensemble actuel tous les éléments de la collection spécifiée.</summary>
      <param name="other" vsli:raw="The collection of items to remove.">Collection d’éléments à supprimer.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are also in a specified collection.">Modifie l'ensemble actuel pour qu'il contienne uniquement les éléments qui figurent également dans une collection spécifiée.</summary>
      <param name="other" vsli:raw="The collection to compare to the current collection.">Collection à comparer à la collection actuelle.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.">Modifie l’ensemble actuel pour qu’il contienne uniquement les éléments présents dans l’ensemble actuel ou dans la collection spécifiée, mais pas dans les deux à la fois.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Collection à comparer à l’ensemble actuel.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains all elements that are present in either the current set or in the specified collection.">Modifie l’ensemble actuel afin qu’il contienne tous les éléments présents dans l’ensemble actuel ou dans la collection spécifiée.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Collection à comparer à l’ensemble actuel.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the set to an array, starting at a particular index.">Copie les éléments de l’ensemble dans un tableau, en commençant à un index particulier.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the set. The array must have zero-based indexing.">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir de l’ensemble. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="See the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; interface.">Consultez l’interface <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="See &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Consultez <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a set.">Retourne un énumérateur qui itère sur un ensemble.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the set.">Énumérateur qui peut être utilisé pour itérer via l’ensemble.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Add(`0)">
      <summary vsli:raw="Adds the specified element to this immutable set.">Ajoute l’élément spécifié à cet ensemble immuable.</summary>
      <param name="item" vsli:raw="The element to add.">Élément à ajouter.</param>
      <returns vsli:raw="A new set with the element added, or this set if the element is already in the set.">Nouvel l’ensemble avec l’élément ajouté ou cet ensemble si l’élément est déjà dans cet ensemble.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Clear">
      <summary vsli:raw="Retrieves an empty set that has the same sorting and ordering semantics as this instance.">Récupère un ensemble vide qui a la même sémantique de tri et de classement que cette instance.</summary>
      <returns vsli:raw="An empty set that has the same sorting or ordering semantics as this instance.">Un ensemble vide qui a la même sémantique de tri et de classement que cette instance.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Except(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements in the specified collection from the current set.">Supprime les éléments de la collection spécifiée de l’ensemble actuel.</summary>
      <param name="other" vsli:raw="The collection of items to remove from this set.">Collection d’éléments à supprimer de cet ensemble.</param>
      <returns vsli:raw="A new set with the items removed; or the original set if none of the items were in the set.">Nouvel ensemble avec les éléments supprimés ; ou ensemble d’origine si aucun des éléments ne se trouvaient dans l’ensemble.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains elements that exist in both this set and the specified set.">Crée un ensemble immuable qui contient des éléments qui existent dans cet ensemble et l’ensemble spécifié.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Collection à comparer à l’ensemble actuel.</param>
      <returns vsli:raw="A new immutable set that contains any elements that exist in both sets.">Nouvel ensemble immuable qui contient des éléments qui existent dans les deux ensembles.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Remove(`0)">
      <summary vsli:raw="Removes the specified element from this immutable set.">Supprime l’élément spécifié de cet ensemble immuable.</summary>
      <param name="item" vsli:raw="The element to remove.">Élément à supprimer.</param>
      <returns vsli:raw="A new set with the specified element removed, or the current set if the element cannot be found in the set.">Nouvel ensemble avec l’élément spécifié supprimé, ou ensemble actuel si l’élément est introuvable dans l’ensemble.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains only elements that are present either in the current set or in the specified collection, but not both.">Crée un ensemble immuable qui contient uniquement les éléments qui sont présents dans l’ensemble actuel ou dans la collection spécifiée, mais pas dans les deux.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Collection à comparer à l’ensemble actuel.</param>
      <returns vsli:raw="A new set that contains the elements that are present only in the current set or in the specified collection, but not both.">Nouvel ensemble qui contient les éléments qui sont présents uniquement dans l’ensemble actuel ou dans la collection spécifiée, mais pas dans les deux.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Union(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates a new immutable set that contains all elements that are present in either the current set or in the specified collection.">Crée un nouvel ensemble immuable qui contient tous les éléments qui sont présents dans l’ensemble actuel ou dans la collection spécifiée.</summary>
      <param name="other" vsli:raw="The collection to add elements from.">Collection à partir de laquelle ajouter des éléments.</param>
      <returns vsli:raw="A new immutable set with the items added; or the original set if all the items were already in the set.">Nouvel ensemble immuable avec les éléments ajoutés ; ou ensemble d’origine si tous les éléments étaient déjà présents dans le jeu.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.ToBuilder">
      <summary vsli:raw="Creates an immutable hash set that has the same contents as this set and can be efficiently mutated across multiple operations by using standard mutable interfaces.">Crée un ensemble immuable de hachage qui a le même contenu que cet ensemble et peut être efficacement muté entre plusieurs opérations à l’aide des interfaces standard mutables.</summary>
      <returns vsli:raw="A set with the same contents as this set that can be efficiently mutated across multiple operations by using standard mutable interfaces.">Un ensemble avec le même contenu que cet ensemble peut être efficacement muté entre plusieurs opérations à l’aide des interfaces standard mutables.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.TryGetValue(`0,`0@)">
      <summary vsli:raw="Searches the set for a given value and returns the equal value it finds, if any.">Recherche dans l’ensemble une valeur donnée et retourne la valeur égale qu’il trouve, le cas échéant.</summary>
      <param name="equalValue" vsli:raw="The value to search for.">La valeur à rechercher.</param>
      <param name="actualValue" vsli:raw="The value from the set that the search found, or the original value if the search yielded no match.">Valeur de l’ensemble que la recherche a trouvée, ou valeur d’origine si la recherche n’a trouvé aucune correspondance.</param>
      <returns vsli:raw="A value indicating whether the search was successful.">Valeur qui indique si la recherche a réussi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates a new immutable hash set that contains all elements that are present in either the current set or in the specified collection.">Crée un nouvel ensemble immuable de hachage qui contient tous les éléments qui sont présents dans l’ensemble actuel ou dans la collection spécifiée.</summary>
      <param name="other" vsli:raw="The collection to add elements from.">Collection à partir de laquelle ajouter des éléments.</param>
      <returns vsli:raw="A new immutable hash set with the items added; or the original set if all the items were already in the set.">Nouvel ensemble immuable de hachage avec les éléments ajoutés ; ou ensemble d’origine si tous les éléments étaient déjà présents dans l’ensemble.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.WithComparer(System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Gets an instance of the immutable hash set that uses the specified equality comparer for its search methods.">Obtient une instance de l’ensemble  immuable de hachage qui utilise le comparateur d’égalité spécifié pour ses méthodes de recherche.</summary>
      <param name="equalityComparer" vsli:raw="The equality comparer to use.">Comparateur d’égalité à utiliser.</param>
      <returns vsli:raw="An instance of this immutable hash set that uses the given comparer.">Instance de cet ensemble immuable de hachage qui utilise le comparateur donné.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableInterlocked">
      <summary vsli:raw="Contains interlocked exchange mechanisms for immutable collections.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Contient des mécanismes d’échange verrouillés pour les collections immuables.
NuGet package: System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,System.Func{``0,``1,``1})">
      <summary vsli:raw="Obtains the value from a dictionary after having added it or updated an existing entry.">Obtient la valeur d’un dictionnaire après l’avoir ajoutée ou mis à jour une entrée existante.</summary>
      <param name="location" vsli:raw="The variable or field to atomically update if the specified  is not in the dictionary.">Variable ou champ à mettre à jour atomiquement si l’élément spécifié ne figure pas dans le dictionnaire.</param>
      <param name="key" vsli:raw="The key for the value to add or update.">Clé pour la valeur à ajouter ou mettre à jour.</param>
      <param name="addValue" vsli:raw="The value to use if no previous value exists.">Valeur à utiliser si aucune valeur précédente n’existe.</param>
      <param name="updateValueFactory" vsli:raw="The function that receives the key and prior value and returns the new value with which to update the dictionary.">Fonction qui reçoit la clé et la valeur précédente et retourne la nouvelle valeur avec laquelle mettre à jour le dictionnaire.</param>
      <typeparam name="TKey" vsli:raw="The type of key stored by the dictionary.">Type de clé stockée par le dictionnaire.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of value stored by the dictionary.">Type de valeur stocké par le dictionnaire.</typeparam>
      <returns vsli:raw="The added or updated value.">Valeur ajoutée ou miss à jour.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1},System.Func{``0,``1,``1})">
      <summary vsli:raw="Obtains the value from a dictionary after having added it or updated an existing entry.">Obtient la valeur d’un dictionnaire après l’avoir ajoutée ou mis à jour une entrée existante.</summary>
      <param name="location" vsli:raw="The variable or field to atomically update if the specified  is not in the dictionary.">Variable ou champ à mettre à jour atomiquement si l’élément spécifié ne figure pas dans le dictionnaire.</param>
      <param name="key" vsli:raw="The key for the value to add or update.">Clé pour la valeur à ajouter ou mettre à jour.</param>
      <param name="addValueFactory" vsli:raw="The function that receives the key and returns a new value to add to the dictionary when no value previously exists.">Fonction qui reçoit la clé et retourne une nouvelle valeur à ajouter au dictionnaire lorsqu’aucune valeur n’existe déjà.</param>
      <param name="updateValueFactory" vsli:raw="The function that receives the key and prior value and returns the new value with which to update the dictionary.">Fonction qui reçoit la clé et la valeur précédente et retourne la nouvelle valeur avec laquelle mettre à jour le dictionnaire.</param>
      <typeparam name="TKey" vsli:raw="The type of key stored by the dictionary.">Type de clé stockée par le dictionnaire.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of value stored by the dictionary.">Type de valeur stocké par le dictionnaire.</typeparam>
      <returns vsli:raw="The added or updated value.">Valeur ajoutée ou miss à jour.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Enqueue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0)">
      <summary vsli:raw="Atomically enqueues an element to the end of a queue.">Met atomiquement en file d’attente un élément à la fin d’une file d’attente.</summary>
      <param name="location" vsli:raw="The variable or field to atomically update.">Variable ou champ à mettre à jour atomiquement.</param>
      <param name="value" vsli:raw="The value to enqueue.">Valeur à mettre en file d’attente.</param>
      <typeparam name="T" vsli:raw="The type of items contained in the collection.">Type des éléments contenus dans la collection</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)">
      <summary vsli:raw="Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.">Obtient la valeur de la clé spécifiée à partir du dictionnaire, ou si la clé est introuvable, ajoute une nouvelle valeur au dictionnaire.</summary>
      <param name="location" vsli:raw="The variable or field to atomically update if the specified key is not in the dictionary.">Variable ou champ à mettre à jour atomiquement si la clé spécifiée ne figure pas dans le dictionnaire.</param>
      <param name="key" vsli:raw="The key for the value to get or add.">Clé pour la valeur à obtenir ou à ajouter.</param>
      <param name="value" vsli:raw="The value to add to the dictionary the key is not found.">Valeur à ajouter au dictionnaire si la clé est introuvable.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">Type des clés contenues dans la collection.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">Type des valeurs contenues dans la collection.</typeparam>
      <returns vsli:raw="The value at the specified key or &lt;paramref name=&quot;valueFactory&quot; /&gt; if the key was not present.">Valeur à la clé spécifiée ou <paramref name="valueFactory" /> si la clé n’était pas présente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1})">
      <summary vsli:raw="Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.">Obtient la valeur de la clé spécifiée à partir du dictionnaire, ou si la clé est introuvable, ajoute une nouvelle valeur au dictionnaire.</summary>
      <param name="location" vsli:raw="The variable or field to atomically update if the specified  is not in the dictionary.">Variable ou champ à mettre à jour atomiquement si l’élément spécifié ne figure pas dans le dictionnaire.</param>
      <param name="key" vsli:raw="The key for the value to retrieve or add.">Clé pour la valeur à récupérer ou à ajouter.</param>
      <param name="valueFactory" vsli:raw="The function to execute to obtain the value to insert into the dictionary if the key is not found. This delegate will not be invoked more than once.">Fonction à exécuter pour obtenir la valeur à insérer dans le dictionnaire si la clé est introuvable. Ce délégué n’est pas appelé plusieurs fois.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">Type des clés contenues dans la collection.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">Type des valeurs contenues dans la collection.</typeparam>
      <returns vsli:raw="The value at the specified key or &lt;paramref name=&quot;valueFactory&quot; /&gt; if the key was not present.">Valeur à la clé spécifiée ou <paramref name="valueFactory" /> si la clé n’était pas présente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``3(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``2,``1},``2)">
      <summary vsli:raw="Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.">Obtient la valeur de la clé spécifiée à partir du dictionnaire, ou si la clé est introuvable, ajoute une nouvelle valeur au dictionnaire.</summary>
      <param name="location" vsli:raw="The variable or field to update if the specified is not in the dictionary.">Variable ou champ à mettre à jour si l’élément spécifié ne figure pas dans le dictionnaire.</param>
      <param name="key" vsli:raw="The key for the value to retrieve or add.">Clé pour la valeur à récupérer ou à ajouter.</param>
      <param name="valueFactory" vsli:raw="The function to execute to obtain the value to insert into the dictionary if the key is not found.">Fonction à exécuter pour obtenir la valeur à insérer dans le dictionnaire si la clé est introuvable.</param>
      <param name="factoryArgument" vsli:raw="The argument to pass to the value factory.">Argument à passer à la fabrique de valeurs.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">Type des clés contenues dans la collection.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">Type des valeurs contenues dans la collection.</typeparam>
      <typeparam name="TArg" vsli:raw="The type of the argument supplied to the value factory.">Type de l’argument fourni à la fabrique de valeurs.</typeparam>
      <returns vsli:raw="The value at the specified key or &lt;paramref name=&quot;valueFactory&quot; /&gt; if the key was not present.">Valeur à la clé spécifiée ou <paramref name="valueFactory" /> si la clé n’était pas présente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedCompareExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0},System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Compares two immutable arrays for equality and, if they are equal, replaces one of the arrays.">Compare deux tableaux immuables pour l’égalité et, s’ils sont égaux, remplace un des tableaux.</summary>
      <param name="location" vsli:raw="The destination, whose value is compared with &lt;paramref name=&quot;comparand&quot; /&gt; and possibly replaced.">Destination, dont la valeur est comparée avec <paramref name="comparand" /> et qui peut être remplacée.</param>
      <param name="value" vsli:raw="The value that replaces the destination value if the comparison results in equality.">Valeur qui remplace la valeur de destination si la comparaison conclut à une égalité.</param>
      <param name="comparand" vsli:raw="The value that is compared to the value at &lt;paramref name=&quot;location&quot; /&gt;.">Valeur comparée à celle de <paramref name="location" />.</param>
      <typeparam name="T" vsli:raw="The type of element stored by the array.">Type d’élément stocké par le tableau.</typeparam>
      <returns vsli:raw="The original value in &lt;paramref name=&quot;location&quot; /&gt;.">Valeur d’origine dans <paramref name="location" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Sets an array to the specified array and returns a reference to the original array, as an atomic operation.">Définit un tableau dans le tableau spécifié et retourne une référence au tableau d’origine, comme une opération atomique.</summary>
      <param name="location" vsli:raw="The array to set to the specified value.">Tableau à définir à la valeur spécifiée.</param>
      <param name="value" vsli:raw="The value to which the &lt;paramref name=&quot;location&quot; /&gt; parameter is set.">Valeur affectée au paramètre <paramref name="location" />.</param>
      <typeparam name="T" vsli:raw="The type of element stored by the array.">Type d’élément stocké par le tableau.</typeparam>
      <returns vsli:raw="The original value of &lt;paramref name=&quot;location&quot; /&gt;.">Valeur d’origine de <paramref name="location" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedInitialize``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Sets an array to the specified array if the array has not been initialized.">Définit un tableau au tableau spécifié si le tableau n’a pas été initialisé.</summary>
      <param name="location" vsli:raw="The array to set to the specified value.">Tableau à définir à la valeur spécifiée.</param>
      <param name="value" vsli:raw="The value to which the &lt;paramref name=&quot;location&quot; /&gt; parameter is set, if it's not initialized.">Valeur à laquelle le paramètre <paramref name="location" /> est défini, si elle n’est pas initialisée.</param>
      <typeparam name="T" vsli:raw="The type of element stored by the array.">Type d’élément stocké par le tableau.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the array was assigned the specified value;  otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le tableau a été assigné à la valeur spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Push``1(System.Collections.Immutable.ImmutableStack{``0}@,``0)">
      <summary vsli:raw="Pushes a new element onto the stack.">Exécute un push d’un nouvel élément dans la pile.</summary>
      <param name="location" vsli:raw="The stack to update.">Pile à mettre à jour.</param>
      <param name="value" vsli:raw="The value to push on the stack.">Valeur de push dans la pile.</param>
      <typeparam name="T" vsli:raw="The type of items in the stack.">Type des éléments dans la pile.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)">
      <summary vsli:raw="Adds the specified key and value to the dictionary if the key is not in the dictionary.">Ajoute la clé et la valeur spécifiées au dictionnaire si la clé n’est pas dans le dictionnaire.</summary>
      <param name="location" vsli:raw="The dictionary to update with the specified key and value.">Dictionnaire à mettre à jour avec la valeur et la clé spécifiées.</param>
      <param name="key" vsli:raw="The key to add, if is not already defined in the dictionary.">Clé à ajouter, si elle n’est pas déjà définie dans le dictionnaire</param>
      <param name="value" vsli:raw="The value to add.">Valeur à ajouter.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">Type des clés contenues dans la collection.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">Type des valeurs contenues dans la collection.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the key is not in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la clé n’est pas dans le dictionnaire ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryDequeue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0@)">
      <summary vsli:raw="Atomically removes and returns the specified element at the head of the queue, if the queue is not empty.">Supprime atomiquement et retourne l’élément spécifié à la tête de la file d’attente si la file d’attente n’est pas vide.</summary>
      <param name="location" vsli:raw="The variable or field to atomically update.">Variable ou champ à mettre à jour atomiquement.</param>
      <param name="value" vsli:raw="Set to the value from the head of the queue, if the queue not empty.">Si la file d’attente n’est pas vide, définissez sur la valeur de la tête de la file d’attente.</param>
      <typeparam name="T" vsli:raw="The type of items in the queue.">Type d’éléments dans la file d’attente.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the queue is not empty and the head element is removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la file d’attente n’est pas vide et que l’élément head a été supprimé ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryPop``1(System.Collections.Immutable.ImmutableStack{``0}@,``0@)">
      <summary vsli:raw="Removes an element from the top of the stack, if there is an element to remove.">Supprime un élément du haut de la pile, s’il existe un élément à supprimer.</summary>
      <param name="location" vsli:raw="The stack to update.">Pile à mettre à jour.</param>
      <param name="value" vsli:raw="Receives the value removed from the stack, if the stack is not empty.">Reçoit la valeur supprimée de la pile, si la pile n’est pas vide.</param>
      <typeparam name="T" vsli:raw="The type of items in the stack.">Type des éléments dans la pile.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an element is removed from the stack; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si un élément est supprimé de la pile ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryRemove``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1@)">
      <summary vsli:raw="Removes the element with the specified key, if the key exists.">Supprime l’élément avec la clé spécifiée, si la clé existe.</summary>
      <param name="location" vsli:raw="The dictionary to update.">Dictionnaire à mettre à jour.</param>
      <param name="key" vsli:raw="The key to remove.">Clé à supprimer.</param>
      <param name="value" vsli:raw="Receives the value of the removed item, if the dictionary is not empty.">Reçoit la valeur de l’élément supprimé, si le dictionnaire n’est pas vide.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">Type des clés contenues dans la collection.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">Type des valeurs contenues dans la collection.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the key was found and removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la clé a été trouvée et supprimée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,``1)">
      <summary vsli:raw="Sets the specified key to the specified value if the specified key already is set to a specific value.">Définit la clé spécifiée à la valeur spécifiée si la clé spécifiée est déjà définie sur une valeur spécifique.</summary>
      <param name="location" vsli:raw="The dictionary to update.">Dictionnaire à mettre à jour.</param>
      <param name="key" vsli:raw="The key to update.">Clé à mettre à jour.</param>
      <param name="newValue" vsli:raw="The new value to set.">Nouvelle valeur à définir.</param>
      <param name="comparisonValue" vsli:raw="The current value for &lt;paramref name=&quot;key&quot; /&gt; in order for the update to succeed.">Valeur actuelle de <paramref name="key" /> pour que la mise à jour réussisse.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">Type des clés contenues dans la collection.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">Type des valeurs contenues dans la collection.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; and &lt;paramref name=&quot;comparisonValue&quot; /&gt; are present in the dictionary and comparison was updated to &lt;paramref name=&quot;newValue&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="key" /> et <paramref name="comparisonValue" /> sont présents dans le dictionnaire et que la comparaison a été mise à jour vers <paramref name="newValue" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Update``1(``0@,System.Func{``0,``0})">
      <summary vsli:raw="Mutates a value in-place with optimistic locking transaction semantics             via a specified transformation function.             The transformation is retried as many times as necessary to win the optimistic locking race.">Transforme une valeur sur place avec la sémantique de transaction de verrouillage optimiste à l’aide d’une fonction de transformation spécifiée.             La transformation est retentée autant de fois que nécessaire pour remporter la concurrence de verrouillage optimiste.</summary>
      <param name="location" vsli:raw="The variable or field to be changed, which may be accessed by multiple threads.">Variable ou champ à modifier, lesquels sont accessibles par plusieurs threads.</param>
      <param name="transformer" vsli:raw="A function that mutates the value. This function should be side-effect free,              as it may run multiple times when races occur with other threads.">Fonction qui transforme la valeur. Cette fonction doit être sans effet secondaire, car elle peut s’exécuter plusieurs fois quand des concurrences se produisent avec d’autres threads.</param>
      <typeparam name="T" vsli:raw="The type of data.">Type de données.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the location's value is changed by applying the result of the &lt;paramref name=&quot;transformer&quot; /&gt; function; &lt;see langword=&quot;false&quot; /&gt; if the location's value remained the same because the last invocation of &lt;paramref name=&quot;transformer&quot; /&gt; returned the existing value.">
        <see langword="true" /> si la valeur de l’emplacement est modifiée en appliquant le résultat de la fonction <paramref name="transformer" /> ; <see langword="false" /> si la valeur de l’emplacement reste la même car le dernier appel de <paramref name="transformer" /> a retourné la valeur existante.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Update``2(``0@,System.Func{``0,``1,``0},``1)">
      <summary vsli:raw="Mutates a value in-place with optimistic locking transaction semantics             via a specified transformation function.             The transformation is retried as many times as necessary to win the optimistic locking race.">Transforme une valeur sur place avec la sémantique de transaction de verrouillage optimiste à l’aide d’une fonction de transformation spécifiée.             La transformation est retentée autant de fois que nécessaire pour remporter la concurrence de verrouillage optimiste.</summary>
      <param name="location" vsli:raw="The variable or field to be changed, which may be accessed by multiple threads.">Variable ou champ à modifier, lesquels sont accessibles par plusieurs threads.</param>
      <param name="transformer" vsli:raw="A function that mutates the value. This function should be side-effect free,              as it may run multiple times when races occur with other threads.">Fonction qui transforme la valeur. Cette fonction doit être sans effet secondaire, car elle peut s’exécuter plusieurs fois quand des concurrences se produisent avec d’autres threads.</param>
      <param name="transformerArgument" vsli:raw="The argument to pass to &lt;paramref name=&quot;transformer&quot; /&gt;.">Argument à passer à <paramref name="transformer" />.</param>
      <typeparam name="T" vsli:raw="The type of data.">Type de données.</typeparam>
      <typeparam name="TArg" vsli:raw="The type of argument passed to the &lt;paramref name=&quot;transformer&quot; /&gt;.">Type d’argument passé à l' <paramref name="transformer" />.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the location's value is changed by applying the result of the &lt;paramref name=&quot;transformer&quot; /&gt; function; &lt;see langword=&quot;false&quot; /&gt; if the location's value remained the same because the last invocation of &lt;paramref name=&quot;transformer&quot; /&gt; returned the existing value.">
        <see langword="true" /> si la valeur de l’emplacement est modifiée en appliquant le résultat de la fonction <paramref name="transformer" /> ; <see langword="false" /> si la valeur de l’emplacement reste la même car le dernier appel de <paramref name="transformer" /> a retourné la valeur existante.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Fournit un ensemble de méthodes d’initialisation pour les instances de la classe <see cref="T:System.Collections.Immutable.ImmutableList`1" />.
Package NuGet : System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1">
      <summary vsli:raw="Creates an empty immutable list.">Crée une liste immuable vide.</summary>
      <typeparam name="T" vsli:raw="The type of items to be stored in the .">Type des éléments à stocker dans le .</typeparam>
      <returns vsli:raw="An empty immutable list.">Liste immuable vide.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1(``0)">
      <summary vsli:raw="Creates a new immutable list that contains the specified item.">Crée une liste immuable qui contient l’élément spécifié.</summary>
      <param name="item" vsli:raw="The item to prepopulate the list with.">Élément avec lequel préremplir la liste.</param>
      <typeparam name="T" vsli:raw="The type of items in the .">Type des éléments dans le .</typeparam>
      <returns vsli:raw="A new  that contains the specified item.">Nouvelle liste qui contient l’élément spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1(``0[])">
      <summary vsli:raw="Creates a new immutable list that contains the specified array of items.">Crée une liste immuable qui contient le tableau spécifié d’éléments.</summary>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the list with.">Tableau qui contient les éléments avec lesquels préremplir la liste.</param>
      <typeparam name="T" vsli:raw="The type of items in the .">Type des éléments dans le .</typeparam>
      <returns vsli:raw="A new immutable list that contains the specified items.">Nouvelle liste immuable qui contient les éléments spécifiés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.CreateBuilder``1">
      <summary vsli:raw="Creates a new immutable list builder.">Crée un générateur de listes immuables.</summary>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">Type des éléments stockés dans la collection.</typeparam>
      <returns vsli:raw="The immutable collection builder.">Générateur de collections immuables.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable list that contains the specified items.">Crée une liste immuable qui contient les éléments spécifiés.</summary>
      <param name="items" vsli:raw="The items to add to the list.">Éléments à ajouter à la liste.</param>
      <typeparam name="T" vsli:raw="The type of items in the .">Type des éléments dans le .</typeparam>
      <returns vsli:raw="An immutable list that contains the specified items.">Liste immuable qui contient les éléments spécifiés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the list.">Recherche l’objet spécifié et retourne l’index de base zéro de la première occurrence trouvée dans la liste.</summary>
      <param name="list" vsli:raw="The list to search.">Liste à rechercher.</param>
      <param name="item" vsli:raw="The object to locate in the list. The value can be null for reference types.">Objet à localiser dans la liste. La valeur peut être null pour les types référence.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Type des éléments de la liste.</typeparam>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the list that extends from index to the last element, if found; otherwise, -1.">Index de base zéro de la première occurrence de l’élément dans la plage d’éléments de la liste qui s’étend de l’index au dernier élément, si elle est trouvée ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the list.">Recherche l’objet spécifié et retourne l’index de base zéro de la première occurrence trouvée dans la liste.</summary>
      <param name="list" vsli:raw="The list to search.">Liste à rechercher.</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">Objet à localiser dans la liste immuable. La valeur peut être null pour les types référence.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Comparateur d’égalité à utiliser dans la recherche.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Type des éléments de la liste.</typeparam>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the immutable list that extends from index to the last element, if found; otherwise, -1.">Index de base zéro de la première occurrence de l’élément dans la plage d’éléments de la liste immuable qui s’étend de l’index au dernier élément, si elle est trouvée ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.">Recherche l’objet spécifié et retourne l’index de base zéro de la première occurrence trouvée dans la plage d’éléments de la liste immuable qui s’étend de l’index spécifié au dernier élément.</summary>
      <param name="list" vsli:raw="The list to search.">Liste à rechercher.</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">Objet à localiser dans la liste immuable. La valeur peut être null pour les types référence.</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">Index de début de base zéro de la recherche. 0 (zéro) est valide dans une liste vide.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Type des éléments de la liste.</typeparam>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the Immutable list that extends from index to the last element, if found; otherwise, -1.">Index de base zéro de la première occurrence de l’élément dans la plage d’éléments de la liste immuable qui s’étend de l’index au dernier élément, si elle est trouvée ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.">Recherche l’objet spécifié et retourne l’index de base zéro de la première occurrence trouvée dans la plage d’éléments de la liste immuable qui s’étend de l’index spécifié au dernier élément.</summary>
      <param name="list" vsli:raw="The list to search.">Liste à rechercher.</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">Objet à localiser dans la liste immuable. La valeur peut être null pour les types référence.</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">Index de début de base zéro de la recherche. 0 (zéro) est valide dans une liste vide.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Nombre d'éléments contenus dans la section où la recherche doit être effectuée.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Type des éléments de la liste.</typeparam>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the Immutable list that extends from index to the last element, if found; otherwise, -1.">Index de base zéro de la première occurrence de l’élément dans la plage d’éléments de la liste immuable qui s’étend de l’index au dernier élément, si elle est trouvée ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the entire immutable list.">Recherche l’objet spécifié et retourne l’index de base zéro de la dernière occurrence trouvée dans l’intégralité de la liste immuable.</summary>
      <param name="list" vsli:raw="The list to search.">Liste à rechercher.</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">Objet à localiser dans la liste immuable. La valeur peut être null pour les types référence.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Type des éléments de la liste.</typeparam>
      <returns vsli:raw="The zero-based index of the last occurrence of item within the entire the Immutable list, if found; otherwise, -1.">Index de base zéro de la dernière occurrence de l’élément dans la liste immuable entière, si elle est trouvée ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the entire immutable list.">Recherche l’objet spécifié et retourne l’index de base zéro de la dernière occurrence trouvée dans l’intégralité de la liste immuable.</summary>
      <param name="list" vsli:raw="The list to search.">Liste à rechercher.</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">Objet à localiser dans la liste immuable. La valeur peut être null pour les types référence.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Comparateur d’égalité à utiliser dans la recherche.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Type des éléments de la liste.</typeparam>
      <returns vsli:raw="The zero-based index of the last occurrence of item within the entire the Immutable list, if found; otherwise, -1.">Index de base zéro de la dernière occurrence de l’élément dans la liste immuable entière, si elle est trouvée ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.">Recherche l’objet spécifié et retourne l’index de base zéro de la dernière occurrence dans la plage d’éléments de la liste immuable qui s’étend du premier élément à l’index spécifié.</summary>
      <param name="list" vsli:raw="The list to search.">Liste à rechercher.</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">Objet à localiser dans la liste immuable. La valeur peut être null pour les types référence.</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">Index de début de base zéro de la recherche vers le haut.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Type des éléments de la liste.</typeparam>
      <returns vsli:raw="The zero-based index of the last occurrence of item within the range of elements in the Immutable list that extends from the first element to index, if found; otherwise, -1.">Index de base zéro de la dernière occurrence de l’élément dans la plage d’éléments de la liste immuable qui s’étend du premier élément à l’index, si elle est trouvée ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.">Recherche l’objet spécifié et retourne l’index de base zéro de la dernière occurrence dans la plage d’éléments de la liste immuable qui s’étend du premier élément à l’index spécifié.</summary>
      <param name="list" vsli:raw="The list to search.">Liste à rechercher.</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">Objet à localiser dans la liste immuable. La valeur peut être null pour les types référence.</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">Index de début de base zéro de la recherche vers le haut.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Nombre d'éléments contenus dans la section où la recherche doit être effectuée.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Type des éléments de la liste.</typeparam>
      <returns vsli:raw="The zero-based index of the last occurrence of item within the range of elements in the Immutable list that extends from the first element to index, if found; otherwise, -1.">Index de base zéro de la dernière occurrence de l’élément dans la plage d’éléments de la liste immuable qui s’étend du premier élément à l’index, si elle est trouvée ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Remove``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary vsli:raw="Removes the specified value from this list.">Supprime la valeur spécifiée dans cette liste.</summary>
      <param name="list" vsli:raw="The list to search.">Liste à rechercher.</param>
      <param name="value" vsli:raw="The value to remove.">Valeur à supprimer.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Type des éléments de la liste.</typeparam>
      <returns vsli:raw="A new immutable list with the element removed, or this list if the element is not in this list.">Nouvelle liste immuable avec l’élément supprimé, ou cette liste si l’élément n’est pas dans cette liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.RemoveRange``1(System.Collections.Immutable.IImmutableList{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Removes the specified values from this list.">Supprime les valeurs spécifiées de cette liste.</summary>
      <param name="list" vsli:raw="The list to search.">Liste à rechercher.</param>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">Éléments à supprimer si des correspondances sont trouvées dans cette liste.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Type des éléments de la liste.</typeparam>
      <returns vsli:raw="A new immutable list with the elements removed.">Nouvelle liste immuable avec les éléments supprimés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Replace``1(System.Collections.Immutable.IImmutableList{``0},``0,``0)">
      <summary vsli:raw="Replaces the first equal element in the list with the specified element.">Remplace le premier élément égal dans la liste par l’élément spécifié.</summary>
      <param name="list" vsli:raw="The list to search.">Liste à rechercher.</param>
      <param name="oldValue" vsli:raw="The element to replace.">Élément à remplacer.</param>
      <param name="newValue" vsli:raw="The element to replace the old element with.">Élément avec lequel remplacer l’ancien élément.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Type des éléments de la liste.</typeparam>
      <returns vsli:raw="The new list -- even if the value being replaced is equal to the new value for that position.">Nouvelle liste, même si la valeur en cours de remplacement est égale à la nouvelle valeur de cette position.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; does not exist in the list.">Levé quand l’ancienne valeur n’existe pas dans la liste.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Enumerates a sequence and produces an immutable list of its contents.">Énumère une séquence et produit une liste immuable de son contenu.</summary>
      <param name="source" vsli:raw="The sequence to enumerate.">Séquence à énumérer.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Type des éléments de la séquence.</typeparam>
      <returns vsli:raw="An immutable list that contains the items in the specified sequence.">Liste immuable qui contient les éléments dans l’ordre spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Immutable.ImmutableList{``0}.Builder)">
      <summary vsli:raw="Creates an immutable list from the current contents of the builder's collection.">Crée une liste immuable à partir du contenu actuel de la collection du générateur.</summary>
      <param name="builder" vsli:raw="The builder to create the immutable list from.">Générateur à partir duquel créer la liste immuable.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the list.">Type des éléments de la liste.</typeparam>
      <returns vsli:raw="An immutable list that contains the current contents in the builder's collection.">Liste immuable qui contient le contenu actuel de la collection du générateur.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1">
      <summary vsli:raw="Represents an immutable list, which is a strongly typed list of objects that can be accessed by index.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Représente une liste immuable, qui est une liste fortement typée d’objets accessibles par index.
NuGet package: System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the list.">Type d'éléments de la liste.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Add(`0)">
      <summary vsli:raw="Adds the specified object to the end of the immutable list.">Ajoute l’objet spécifié à la fin de la liste immuable.</summary>
      <param name="value" vsli:raw="The object to add.">Objet à ajouter.</param>
      <returns vsli:raw="A new immutable list with the object added.">Nouvelle liste immuable contenant l'objet ajouté.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds the elements of the specified collection to the end of the immutable list.">Ajoute les éléments de la collection spécifiée à la fin de la liste immuable.</summary>
      <param name="items" vsli:raw="The collection whose elements will be added to the end of the list.">Collection dont les éléments seront ajoutés à la fin de la liste.</param>
      <returns vsli:raw="A new immutable list with the elements added.">Nouvelle liste immuable contenant les éléments ajoutés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(`0)">
      <summary vsli:raw="Searches the entire sorted list for an element using the default comparer and returns the zero-based index of the element.">Recherche toute la liste triée d’un élément à l’aide du comparateur par défaut et retourne l’index de base zéro de l’élément.</summary>
      <param name="item" vsli:raw="The object to locate. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objet à trouver. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <returns vsli:raw="The zero-based index of item in the sorted List, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.ICollection.Count&quot; /&gt;.">Index de base zéro de l’élément dans la liste triée, si l’élément est trouvé ; sinon, un nombre négatif qui est le complément de bits de l’index de l’élément suivant qui est supérieur à l’élément ou, s’il n’existe aucun élément supérieur, le complément de bits de <see cref="P:System.Collections.ICollection.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The default comparer cannot find a comparer implementation of the for type T.">Le comparateur par défaut ne peut pas trouver d’implémentation du comparateur de type T.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Searches the entire sorted list for an element using the specified comparer and returns the zero-based index of the element.">Recherche toute la liste triée d’un élément à l’aide du comparateur spécifié et retourne l’index de base zéro de l’élément.</summary>
      <param name="item" vsli:raw="The object to locate. The value can be null for reference types.">Objet à trouver. La valeur peut être null pour les types référence.</param>
      <param name="comparer" vsli:raw="The comparer implementation to use when comparing elements or null to use the default comparer.">Implémentation du comparateur à utiliser lors de la comparaison d’éléments, ou null pour utiliser le comparateur par défaut.</param>
      <returns vsli:raw="The zero-based index of item in the sorted List, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.ICollection.Count&quot; /&gt;.">Index de base zéro de l’élément dans la liste triée, si l’élément est trouvé ; sinon, un nombre négatif qui est le complément de bits de l’index de l’élément suivant qui est supérieur à l’élément ou, s’il n’existe aucun élément supérieur, le complément de bits de <see cref="P:System.Collections.ICollection.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="comparer is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer cannot find an comparer implementation for type T.">Le paramètre comparer a la valeur <see langword="null" />, et le comparateur par défaut ne peut pas trouver d’implémentation du comparateur de type T.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Searches a range of elements in the sorted list for an element using the specified comparer and returns the zero-based index of the element.">Recherche une plage d’éléments dans la liste triée d’un élément à l’aide du comparateur spécifié et retourne l’index de base zéro de l’élément.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to search.">Index de début de base zéro de la plage dans laquelle effectuer la recherche.</param>
      <param name="count" vsli:raw="The length of the range to search.">Longueur de la plage dans laquelle effectuer la recherche.</param>
      <param name="item" vsli:raw="The object to locate. The value can be null for reference types.">Objet à trouver. La valeur peut être null pour les types référence.</param>
      <param name="comparer" vsli:raw="The comparer implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer.">Implémentation du comparateur à utiliser lors de la comparaison d’éléments, ou <see langword="null" /> pour utiliser le comparateur par défaut.</param>
      <returns vsli:raw="The zero-based index of item in the sorted list, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of &lt;paramref name=&quot;count&quot; /&gt;.">Index de base zéro de l’élément dans la liste triée, si l’élément est trouvé ; sinon, un nombre négatif qui est le complément de bits de l’index de l’élément suivant qui est supérieur à l’élément ou, s’il n’existe aucun élément supérieur, le complément de bits de <paramref name="count" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="index is less than 0 or &lt;paramref name=&quot;count&quot; /&gt; is less than 0.">Le paramètre index est inférieur à 0 ou <paramref name="count" /> est inférieur à 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="index and &lt;paramref name=&quot;count&quot; /&gt; do not denote a valid range in the list.">index et <paramref name="count" /> ne désignent pas une plage valide dans la liste.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer cannot find an comparer implementation for type T.">
        <paramref name="comparer" /> a la valeur <see langword="null" />, et le comparateur par défaut ne peut pas trouver d’implémentation du comparateur de type T.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1.Builder">
      <summary vsli:raw="Represents a list that mutates with little or no memory allocations and that can produce or build on immutable list instances very efficiently.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Représente une liste qui mute, avec peu ou pas d’allocations de mémoire, et qui peut produire ou créer très efficacement sur les instances de liste immuable.
NuGet package: System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Add(`0)">
      <summary vsli:raw="Adds an item to the immutable list.">Ajoute un élément à la liste immuable.</summary>
      <param name="item" vsli:raw="The item to add to the list.">Élément à ajouter à la liste.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds a series of elements to the end of this list.">Ajoute une série d’éléments à la fin de cette liste.</summary>
      <param name="items" vsli:raw="The elements to add to the end of the list.">Éléments à ajouter à la fin de la liste.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0)">
      <summary vsli:raw="Searches the entire &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt; for an element using the default comparer and returns the zero-based index of the element.">Recherche l’ensemble de la <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> pour un élément en utilisant le comparateur par défaut et retourne l’index de base zéro de l’élément.</summary>
      <param name="item" vsli:raw="The object to locate. The value can be null for reference types.">Objet à trouver. La valeur peut être null pour les types référence.</param>
      <returns vsli:raw="The zero-based index of item in the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt;, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;item&quot; /&gt;.">Index de base zéro de l’élément dans le <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />, si l’élément est trouvé ; sinon, un nombre négatif qui est le complément de bits de l’index de l’élément suivant est supérieur à <paramref name="item" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find an implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type T.">Le comparateur par défaut <see cref="P:System.Collections.Generic.Comparer`1.Default" /> ne peut pas trouver d’implémentation de l’interface générique <see cref="T:System.IComparable`1" /> ou de l’interface <see cref="T:System.IComparable" /> pour le type T.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Searches the entire &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt; for an element using the specified comparer and returns the zero-based index of the element.">Recherche dans l’ensemble de la <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> d’un élément à l’aide du comparateur spécifié et retourne l’index de base zéro de l’élément.</summary>
      <param name="item" vsli:raw="The object to locate. This value can be null for reference types.">Objet à trouver. Cette valeur peut être null pour les types référence.</param>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; for the default comparer.">Implémentation à utiliser lors de la comparaison d’éléments, ou <see langword="null" /> pour le comparateur par défaut.</param>
      <returns vsli:raw="The zero-based index of item in the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt;, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;item&quot; /&gt;.">Index de base zéro de l’élément dans le <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />, si l’élément est trouvé ; sinon, un nombre négatif qui est le complément de bits de l’index de l’élément suivant est supérieur à <paramref name="item" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find an implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type T.">
        <paramref name="comparer" /> est <see langword="null" />, et le comparateur par défaut <see cref="P:System.Collections.Generic.Comparer`1.Default" /> ne peut pas trouver d’implémentation de l’interface générique <see cref="T:System.IComparable`1" /> ou de l’interface <see cref="T:System.IComparable" /> pour le type T.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Searches the specified range of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt; for an element using the specified comparer and returns the zero-based index of the element.">Recherche dans la plage spécifiée de la <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> d’un élément à l’aide du comparateur spécifié et retourne l’index de base zéro de l’élément.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to search.">Index de début de base zéro de la plage dans laquelle effectuer la recherche.</param>
      <param name="count" vsli:raw="The length of the range to search.">Longueur de la plage dans laquelle effectuer la recherche.</param>
      <param name="item" vsli:raw="The object to locate. This value can be null for reference types.">Objet à trouver. Cette valeur peut être null pour les types référence.</param>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; for the default comparer.">Implémentation à utiliser lors de la comparaison d’éléments, ou <see langword="null" /> pour le comparateur par défaut.</param>
      <returns vsli:raw="The zero-based index of item in the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt;, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;item&quot; /&gt;.">Index de base zéro de l’élément dans le <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />, si l’élément est trouvé ; sinon, un nombre négatif qui est le complément de bits de l’index de l’élément suivant est supérieur à <paramref name="item" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;count&quot; /&gt; is less than 0.">
        <paramref name="index" /> est inférieur à 0.

ou -

<paramref name="count" /> est inférieur à 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;count&quot; /&gt; do not denote a valid range in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="index" /> et <paramref name="count" /> ne désignent pas une plage valide dans <see cref="T:System.Collections.Generic.List`1" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find an implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type T.">
        <paramref name="comparer" /> est <see langword="null" />, et le comparateur par défaut <see cref="P:System.Collections.Generic.Comparer`1.Default" /> ne peut pas trouver d’implémentation de l’interface générique <see cref="T:System.IComparable`1" /> ou de l’interface <see cref="T:System.IComparable" /> pour le type T.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Clear">
      <summary vsli:raw="Removes all items from the immutable list.">Supprime tous les éléments de la liste immuable.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Contains(`0)">
      <summary vsli:raw="Determines whether the immutable list contains a specific value.">Détermine si la liste immuable contient une valeur spécifique.</summary>
      <param name="item" vsli:raw="The object to locate in the list.">Objet à localiser dans la liste.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if item is found in the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’élément est trouvé dans la liste ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ConvertAll``1(System.Func{`0,``0})">
      <summary vsli:raw="Creates a new immutable list from the list represented by this builder by using the converter function.">Crée une nouvelle liste immuable à partir de la liste représentée par ce générateur à l’aide de la fonction de convertisseur.</summary>
      <param name="converter" vsli:raw="The converter function.">Fonction de convertisseur.</param>
      <typeparam name="TOutput" vsli:raw="The type of the output of the delegate converter function.">Type de la sortie de la fonction de conversion déléguée.</typeparam>
      <returns vsli:raw="A new immutable list from the list represented by this builder.">Nouvelle liste immuable provenant de la liste représentée par ce générateur.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(`0[])">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the beginning of the target array.">Copie l’intégralité de la liste immuable dans un tableau unidimensionnel compatible, en commençant au début du tableau cible.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir de la liste immuable. Ce tableau doit avoir une indexation de base zéro.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the specified index of the target array.">Copie l’intégralité de la liste immuable dans un tableau unidimensionnel compatible, en commençant à l’index spécifié du tableau cible.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir de la liste immuable. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in array at which copying begins.">Index de base zéro dans un tableau au niveau duquel commencer la copie.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the specified index of the target array.">Copie l’intégralité de la liste immuable dans un tableau unidimensionnel compatible, en commençant à l’index spécifié du tableau cible.</summary>
      <param name="index" vsli:raw="The zero-based index in the source immutable list at which copying begins.">Index de base zéro dans la liste immuable source auquel la copie commence.</param>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir de la liste immuable. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
      <param name="count" vsli:raw="The number of elements to copy.">Nombre d'éléments à copier.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.Count">
      <summary vsli:raw="Gets the number of elements in this immutable list.">Obtient le nombre d’éléments dans cette liste immuable.</summary>
      <returns vsli:raw="The number of elements in this list.">Nombre d’éléments dans cette liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Exists(System.Predicate{`0})">
      <summary vsli:raw="Determines whether the immutable list contains elements that match the conditions defined by the specified predicate.">Détermine si la liste immuable contient des éléments qui correspondent aux conditions définies par le prédicat spécifié.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to search for.">Délégué qui définit les conditions des éléments à rechercher.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the immutable list contains one or more elements that match the conditions defined by the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la liste immuable contient un ou plusieurs éléments qui correspondent aux conditions définies par le prédicat spécifié ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Find(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire immutable list.">Recherche un élément qui correspond aux conditions définies par le prédicat spécifié et retourne la première occurrence de l’intégralité de la liste immuable.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Délégué qui définit les conditions de l’élément à rechercher.</param>
      <returns vsli:raw="The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type &lt;paramref name=&quot;T&quot; /&gt;.">Premier élément qui correspond aux conditions définies par le prédicat spécifié, s'il est trouvé ; sinon, valeur par défaut du type <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindAll(System.Predicate{`0})">
      <summary vsli:raw="Retrieves all the elements that match the conditions defined by the specified predicate.">Récupère tous les éléments qui correspondent aux conditions définies par le prédicat spécifié.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to search for.">Délégué qui définit les conditions des éléments à rechercher.</param>
      <returns vsli:raw="An immutable list containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty immutable list.">Liste immuable contenant tous les éléments qui correspondent aux conditions définies par le prédicat spécifié, le cas échéant ; sinon, une liste immuable vide.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that starts at the specified index and contains the specified number of elements.">Recherche un élément qui correspond aux conditions définies par le prédicat spécifié et retourne l’index de base zéro de la première occurrence trouvée dans la plage d’éléments de la liste immuable qui commence à l’index spécifié et contient le nombre spécifié d’éléments.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search.">Index de début de base zéro de la recherche.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Nombre d'éléments contenus dans la section où la recherche doit être effectuée.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Délégué qui définit les conditions de l’élément à rechercher.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">Index de base zéro de la première occurrence d’un élément qui répond aux conditions définies par <paramref name="match" />, si cette occurrence est trouvée ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.">Recherche un élément qui correspond aux conditions définies par le prédicat spécifié et retourne l’index de base zéro de la première occurrence trouvée dans la plage d’éléments de la liste immuable qui s’étend de l’index spécifié au dernier élément.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search.">Index de début de base zéro de la recherche.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Délégué qui définit les conditions de l’élément à rechercher.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">Index de base zéro de la première occurrence d’un élément qui répond aux conditions définies par <paramref name="match" />, si cette occurrence est trouvée ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire immutable list.">Recherche un élément qui correspond aux conditions définies par le prédicat spécifié et retourne l’index de base zéro de la première occurrence de l’intégralité de la liste immuable.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Délégué qui définit les conditions de l’élément à rechercher.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">Index de base zéro de la première occurrence d’un élément qui répond aux conditions définies par <paramref name="match" />, si cette occurrence est trouvée ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLast(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire immutable list.">Recherche un élément qui correspond aux conditions définies par le prédicat spécifié et retourne la dernière occurrence de l’intégralité de la liste immuable</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Délégué qui définit les conditions de l’élément à rechercher.</param>
      <returns vsli:raw="The last element that matches the conditions defined by the specified predicate, found; otherwise, the default value for type &lt;paramref name=&quot;T&quot; /&gt;.">Dernier élément qui correspond aux conditions définies par le prédicat spécifié, s’il est trouvé ; sinon, valeur par défaut du type <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index.">Recherche un élément qui correspond aux conditions définies par le prédicat spécifié et retourne l’index de base zéro de la dernière occurrence trouvée dans la plage d’éléments de la liste immuable qui contient le nombre d’éléments spécifié et se termine à l’index spécifié.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">Index de début de base zéro de la recherche vers le haut.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Nombre d'éléments contenus dans la section où la recherche doit être effectuée.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Délégué qui définit les conditions de l’élément à rechercher.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">Index de base zéro de la dernière occurrence d’un élément qui correspond aux conditions définies par <paramref name="match" />, si cette occurrence est trouvée ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.">Recherche un élément qui correspond aux conditions définies par le prédicat spécifié et retourne l’index de base zéro de la dernière occurrence dans la plage d’éléments de la liste immuable qui s’étend du premier élément à l’index spécifié.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">Index de début de base zéro de la recherche vers le haut.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Délégué qui définit les conditions de l’élément à rechercher.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">Index de base zéro de la dernière occurrence d’un élément qui correspond aux conditions définies par <paramref name="match" />, si cette occurrence est trouvée ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire immutable list.">Recherche un élément qui correspond aux conditions définies par le prédicat spécifié et retourne l’index de base zéro de la dernière occurrence de l’intégralité de la liste immuable.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Délégué qui définit les conditions de l’élément à rechercher.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">Index de base zéro de la dernière occurrence d’un élément qui correspond aux conditions définies par <paramref name="match" />, si cette occurrence est trouvée ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ForEach(System.Action{`0})">
      <summary vsli:raw="Performs the specified action on each element of the list.">Exécute l’action spécifiée sur chaque élément de la liste.</summary>
      <param name="action" vsli:raw="The delegate to perform on each element of the list.">Délégué à exécuter sur chaque élément de la liste.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Retourne un énumérateur qui itère au sein de la collection.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the list.">Énumérateur permettant d’effectuer une itération au sein de la liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.GetRange(System.Int32,System.Int32)">
      <summary vsli:raw="Creates a shallow copy of a range of elements in the source immutable list.">Crée une copie superficielle d’une plage d’éléments dans la liste immuable source.</summary>
      <param name="index" vsli:raw="The zero-based index at which the range starts.">Index de base zéro auquel la plage commence.</param>
      <param name="count" vsli:raw="The number of elements in the range.">Nombre d'éléments dans la plage.</param>
      <returns vsli:raw="A shallow copy of a range of elements in the source immutable list.">Copie superficielle d’une plage d’éléments dans la liste immuable source.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list.">Recherche l’objet spécifié et retourne l’index de base zéro de la première occurrence dans la plage d’éléments de la liste immuable.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objet à localiser dans la liste immuable. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the immutable list, if found; otherwise, -1.">Index de base zéro de la première occurrence de <paramref name="item" /> dans la plage d’éléments de la liste immuable, le cas échéant ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.">Recherche l’objet spécifié et retourne l’index de base zéro de la première occurrence trouvée dans la plage d’éléments de la liste immuable qui s’étend de l’index spécifié au dernier élément.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objet à localiser dans la liste immuable. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">Index de début de base zéro de la recherche. 0 (zéro) est valide dans une liste vide.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the immutable list that extends from &lt;paramref name=&quot;index&quot; /&gt; to the last element, if found; otherwise, -1.">Index de base zéro de la première occurrence de l’élément dans la plage d’éléments de la liste immuable qui s’étend de <paramref name="index" /> jusqu’au dernier élément, le cas échéant ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that starts at the specified index and contains the specified number of elements.">Recherche l’objet spécifié et retourne l’index de base zéro de la première occurrence trouvée dans la plage d’éléments de la liste immuable qui commence à l’index spécifié et qui contient le nombre spécifié d’éléments.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objet à localiser dans la liste immuable. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">Index de début de base zéro de la recherche. 0 (zéro) est valide dans une liste vide.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Nombre d'éléments contenus dans la section où la recherche doit être effectuée.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the immutable list that starts at &lt;paramref name=&quot;index&quot; /&gt; and contains &lt;paramref name=&quot;count&quot; /&gt; number of elements, if found; otherwise, -1.">Index de base zéro de la première occurrence de l’élément dans la plage d’éléments de la liste immuable qui commence à <paramref name="index" /> et contient le nombre <paramref name="count" /> d’éléments, le cas échéant ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt; that starts at the specified index and contains the specified number of elements.">Recherche l'objet spécifié et retourne l'index de base zéro de la première occurrence trouvée dans la plage d'éléments de <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> qui commence à l'index spécifié et qui contient le nombre d'éléments spécifié.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objet à localiser dans la liste immuable. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">Index de début de base zéro de la recherche. 0 (zéro) est valide dans une liste vide.</param>
      <param name="count" vsli:raw="The number of elements to search.">Nombre d'éléments à explorer.</param>
      <param name="equalityComparer" vsli:raw="The value comparer to use for comparing elements for equality.">Comparateur de valeur à utiliser pour comparer les éléments en termes d’égalité.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the immutable list that starts at &lt;paramref name=&quot;index&quot; /&gt; and contains &lt;paramref name=&quot;count&quot; /&gt; number of elements, if found; otherwise, -1">Index de base zéro de la première occurrence de l’élément dans la plage d’éléments de la liste immuable qui commence à <paramref name="index" /> et contient le nombre <paramref name="count" /> d’éléments, le cas échéant ; sinon, -1</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts an item to the immutable list at the specified index.">Insère un élément dans la liste immuable à l’index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;item&quot; /&gt; should be inserted.">Index de base zéro au niveau duquel <paramref name="item" /> doit être inséré.</param>
      <param name="item" vsli:raw="The object to insert into the immutable list.">Objet à insérer dans la liste immuable.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the elements of a collection into the immutable list at the specified index.">Insère les éléments d’une collection dans la liste immuable à l’index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index at which the new elements should be inserted.">Index de base zéro au niveau duquel les nouveaux éléments devraient être insérés.</param>
      <param name="items" vsli:raw="The collection whose elements should be inserted into the immutable list. The collection itself cannot be &lt;see langword=&quot;null&quot; /&gt;, but it can contain elements that are null, if type &lt;c&gt;T&lt;/c&gt; is a reference type.">Collection dont les éléments doivent être insérés dans la liste immuable. La collection elle-même ne peut pas avoir la valeur <see langword="null" />, mais elle peut contenir des éléments qui sont null, si le type <c>T</c> est un type référence.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the value for a given index in the list.">Obtient ou définit la valeur d’un index donné dans la liste.</summary>
      <param name="index" vsli:raw="The index of the item to get or set.">Index de l’élément à obtenir ou à définir.</param>
      <returns vsli:raw="The value at the specified index.">Valeur à l’index spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference to the value for a given &lt;paramref name=&quot;index&quot; /&gt; into the list.">Obtient une référence en lecture seule à la valeur pour un <paramref name="index" /> donné dans la liste.</summary>
      <param name="index" vsli:raw="The index of the desired element.">Index de l’élément souhaité.</param>
      <returns vsli:raw="A read-only reference to the value at the specified &lt;paramref name=&quot;index&quot; /&gt;.">Référence en lecture seule à la valeur au niveau de l’<paramref name="index" /> spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the entire immutable list.">Recherche l’objet spécifié et retourne l’index de base zéro de la dernière occurrence trouvée dans l’intégralité de la liste immuable.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objet à localiser dans la liste immuable. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the entire immutable list, if found; otherwise, -1.">Index de base zéro de la dernière occurrence de <paramref name="item" /> dans l’intégralité de la liste immuable, le cas échéant ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.">Recherche l’objet spécifié et retourne l’index de base zéro de la dernière occurrence dans la plage d’éléments de la liste immuable qui s’étend du premier élément à l’index spécifié.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objet à localiser dans la liste immuable. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">Index de début de base zéro de la recherche vers le haut.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the immutable list that extends from the first element to &lt;paramref name=&quot;index&quot; /&gt;, if found; otherwise, -1.">Index de base zéro de la dernière occurrence de <paramref name="item" /> dans la plage d’éléments de la liste immuable qui s’étend du premier élément à <paramref name="index" />, le cas échéant ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index.">Recherche l’objet spécifié et retourne l’index de base zéro de la dernière occurrence trouvée dans la plage d’éléments de la liste immuable qui contient le nombre spécifié d’éléments et se termine à l’index spécifié.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objet à localiser dans la liste immuable. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">Index de début de base zéro de la recherche vers le haut.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Nombre d'éléments contenus dans la section où la recherche doit être effectuée.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the immutable list that contains &lt;paramref name=&quot;count&quot; /&gt; number of elements and ends at &lt;paramref name=&quot;index&quot; /&gt;, if found; otherwise, -1.">Index de base zéro de la dernière occurrence de <paramref name="item" /> dans la plage d’éléments de la liste immuable qui contient le nombre d’éléments <paramref name="count" /> et se termine à <paramref name="index" />, le cas échéant ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index.">Recherche l’objet spécifié et retourne l’index de base zéro de la dernière occurrence trouvée dans la plage d’éléments de la liste immuable qui contient le nombre spécifié d’éléments et se termine à l’index spécifié.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objet à localiser dans la liste immuable. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">Index de début de base zéro de la recherche. 0 (zéro) est valide dans une liste vide.</param>
      <param name="count" vsli:raw="The number of elements to search.">Nombre d'éléments à explorer.</param>
      <param name="equalityComparer" vsli:raw="The value comparer to use for comparing elements for equality.">Comparateur de valeur à utiliser pour comparer les éléments en termes d’égalité.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the immutable list that starts at &lt;paramref name=&quot;index&quot; /&gt; and contains &lt;paramref name=&quot;count&quot; /&gt; number of elements, if found; otherwise, -1">Index de base zéro de la première occurrence de l’élément dans la plage d’éléments de la liste immuable qui commence à <paramref name="index" /> et contient le nombre <paramref name="count" /> d’éléments, le cas échéant ; sinon, -1</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable list.">Supprime la première occurrence d’un objet spécifique de la liste immuable.</summary>
      <param name="item" vsli:raw="The object to remove from the list.">Objet à supprimer de la liste.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if item was successfully removed from the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if item is not found in the list.">
        <see langword="true" /> si l’élément a été correctement supprimé de la liste ; sinon, <see langword="false" />. Cette méthode retourne également <see langword="false" /> si l’élément est introuvable dans la liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the elements that match the conditions defined by the specified predicate.">Supprime tous les éléments qui correspondent aux conditions définies par le prédicat spécifié.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">Délégué qui définit les conditions des éléments à supprimer.</param>
      <returns vsli:raw="The number of elements removed from the immutable list.">Nombre d’éléments supprimés de la liste immuable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index of the immutable list.">Supprime l’élément à l’index spécifié de la liste immuable.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove from the list.">Index de base zéro de l’élément à supprimer de la liste.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Reverse">
      <summary vsli:raw="Reverses the order of the elements in the entire immutable list.">Inverse l’ordre des éléments dans l’intégralité de la liste immuable.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Reverse(System.Int32,System.Int32)">
      <summary vsli:raw="Reverses the order of the elements in the specified range of the immutable list.">Inverse l’ordre des éléments dans la plage spécifiée de la liste immuable.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to reverse.">Index de début de base zéro de la plage à inverser.</param>
      <param name="count" vsli:raw="The number of elements in the range to reverse.">Nombre d'éléments à inverser dans la plage.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort">
      <summary vsli:raw="Sorts the elements in the entire immutable list by using the default comparer.">Trie les éléments dans l’intégralité de la liste immuable à l’aide du comparateur par défaut.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the elements in the entire immutable list by using the specified comparer.">Trie les éléments dans l’intégralité de la liste immuable à l’aide du comparateur spécifié.</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer (&lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;).">L’implémentation à utiliser lors de la comparaison d’éléments, ou <see langword="null" /> pour utiliser le comparateur par défaut (<see cref="P:System.Collections.Generic.Comparer`1.Default" />).</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Comparison{`0})">
      <summary vsli:raw="Sorts the elements in the entire immutable list by using the specified comparison object.">Trie les éléments dans l’intégralité de la liste immuable à l’aide de l’objet de comparaison spécifié.</summary>
      <param name="comparison" vsli:raw="The object to use when comparing elements.">Objet à utiliser lors de la comparaison d’éléments.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparison&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparison" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the elements in a range of elements in the immutable list  by using the specified comparer.">Trie les éléments dans une plage d’éléments de la liste immuable à l’aide du comparateur spécifié.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to sort.">Index de début de base zéro de la plage à trier.</param>
      <param name="count" vsli:raw="The length of the range to sort.">Longueur de la plage à trier.</param>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer (&lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;).">L’implémentation à utiliser lors de la comparaison d’éléments, ou <see langword="null" /> pour utiliser le comparateur par défaut (<see cref="P:System.Collections.Generic.Comparer`1.Default" />).</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether this instance is read-only.">Obtient une valeur qui indique si cette instance est en lecture seule.</summary>
      <returns vsli:raw="Always &lt;see langword=&quot;false&quot; /&gt;.">Toujours <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Retourne un énumérateur qui itère au sein de la collection.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Énumérateur permettant d'effectuer une itération au sein de la collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the list to an array, starting at a particular array index.">Copie les éléments de la liste dans un tableau, en commençant à un index de tableau particulier.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the list. The array must have zero-based indexing.">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir de la liste. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value that indicates whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Obtient une valeur qui indique si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread safe).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe) ; sinon <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Obtient un objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Retourne un énumérateur qui itère au sein de la collection.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Énumérateur permettant d'effectuer une itération au sein de la collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the list.">Ajoute un élément à la liste.</summary>
      <param name="value" vsli:raw="The object to add to the list.">Objet à ajouter à la liste.</param>
      <returns vsli:raw="The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection.">Position à laquelle le nouvel élément a été inséré, ou -1 pour indiquer que l'élément n'a pas été inséré dans la collection.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the list.">Supprime tous les éléments de la liste.</summary>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the list contains a specific value.">Détermine si la liste contient une valeur spécifique.</summary>
      <param name="value" vsli:raw="The object to locate in the list.">Objet à localiser dans la liste.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Object&quot; /&gt; is found in the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’<see cref="T:System.Object" /> se trouve dans la liste ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the list.">Détermine l’index d’un élément spécifique de la liste.</summary>
      <param name="value" vsli:raw="The object to locate in the list.">Objet à localiser dans la liste.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">Index de <paramref name="value" /> s'il figure dans la liste ; sinon, -1.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item to the list at the specified index.">Insère un élément dans la liste à l’index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">Index de base zéro au niveau duquel <paramref name="value" /> doit être inséré.</param>
      <param name="value" vsli:raw="The object to insert into the list.">Objet à insérer dans la liste.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size.">Obtient une valeur qui indique si <see cref="T:System.Collections.IList" /> est de taille fixe.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Collections.IList" /> est de taille fixe ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Obtient une valeur qui indique si l'objet <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Object&quot; /&gt; at the specified index.">Obtient ou définit le <see cref="T:System.Object" /> à l'index spécifié.</summary>
      <param name="index" vsli:raw="The index.">Index.</param>
      <returns vsli:raw="The object at the specified index.">Objet au niveau de l’index spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the list.">Supprime la première occurrence d’un objet spécifique de la liste.</summary>
      <param name="value" vsli:raw="The object to remove from the list.">Objet à supprimer de la liste.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ToImmutable">
      <summary vsli:raw="Creates an immutable list based on the contents of this instance.">Crée une liste immuable en fonction du contenu de cette instance.</summary>
      <returns vsli:raw="An immutable list.">Liste immuable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.TrueForAll(System.Predicate{`0})">
      <summary vsli:raw="Determines whether every element in the immutable list matches the conditions defined by the specified predicate.">Détermine si chaque élément de la liste immuable correspond aux conditions définies par le prédicat spécifié.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions to check against the elements.">Délégué qui définit les conditions à vérifier par rapport aux éléments.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if every element in the immutable list matches the conditions defined by the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If the list has no elements, the return value is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> si chaque élément de la liste immuable correspond aux conditions définies par le prédicat spécifié ; sinon, <see langword="false" />. Si la liste ne comporte pas d'éléments, la valeur de retour est <see langword="true" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Clear">
      <summary vsli:raw="Removes all elements from the immutable list.">Supprime tous les éléments de la liste immuable.</summary>
      <returns vsli:raw="An empty list that retains the same sort or unordered semantics that this instance has.">Une liste vide qui conserve la même sémantique de tri ou sans tri que l’instance possède.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Contains(`0)">
      <summary vsli:raw="Determines whether this immutable list contains the specified value.">Détermine si cette liste immuable contient la valeur spécifiée.</summary>
      <param name="value" vsli:raw="The value to locate.">Valeur à rechercher.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list contains the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la liste contient la valeur spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ConvertAll``1(System.Func{`0,``0})">
      <summary vsli:raw="Converts the elements in the current immutable list to another type, and returns a list containing the converted elements.">Convertit les éléments dans la liste immuable actuelle vers un autre type et retourne une liste contenant les éléments convertis.</summary>
      <param name="converter" vsli:raw="A delegate that converts each element from one type to another type.">Délégué qui convertit chaque élément d’un type en un autre type.</param>
      <typeparam name="TOutput" vsli:raw="The type of the elements of the target array.">Type des éléments du tableau cible.</typeparam>
      <returns vsli:raw="A list of the target type containing the converted elements from the current &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1&quot; /&gt;.">Liste du type cible contenant les éléments convertis à partir du <see cref="T:System.Collections.Immutable.ImmutableList`1" /> actif.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(`0[])">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the beginning of the target array.">Copie l’intégralité de la liste immuable dans un tableau unidimensionnel compatible, en commençant au début du tableau cible.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir de la liste immuable. Ce tableau doit avoir une indexation de base zéro.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the specified index of the target array.">Copie l’intégralité de la liste immuable dans un tableau unidimensionnel compatible, en commençant à l’index spécifié du tableau cible.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir de la liste immuable. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies a range of elements from the immutable list to a compatible one-dimensional array, starting at the specified index of the target array.">Copie une plage d’éléments de la liste immuable dans un tableau unidimensionnel compatible, en commençant à l’index spécifié du tableau cible.</summary>
      <param name="index" vsli:raw="The zero-based index in the source immutable list at which copying begins.">Index de base zéro dans la liste immuable source auquel la copie commence.</param>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir de la liste immuable. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in array at which copying begins.">Index de base zéro dans un tableau au niveau duquel commencer la copie.</param>
      <param name="count" vsli:raw="The number of elements to copy.">Nombre d'éléments à copier.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Count">
      <summary vsli:raw="Gets the number of elements contained in the list.">Obtient le nombre d’éléments contenus dans la liste.</summary>
      <returns vsli:raw="The number of elements in the list.">Nombre d'éléments dans la liste.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableList`1.Empty">
      <summary vsli:raw="Gets an empty immutable list.">Obtient un jeu vide avec le comparateur de tri par défaut.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1.Enumerator">
      <summary vsli:raw="Enumerates the contents of a binary tree.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Énumère le contenu d’une arborescence binaire.
Package NuGet : System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtient l'élément situé à la position actuelle de l'énumérateur.</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">Élément situé à la position actuelle de l’énumérateur.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.Dispose">
      <summary vsli:raw="Releases the resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Enumerator&quot; /&gt; class.">Libère les ressources utilisées par l'instance actuelle de la classe <see cref="T:System.Collections.Immutable.ImmutableList`1.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances enumeration to the next element of the immutable list.">Avance l’énumération à l’élément suivant de la liste immuable.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the list.">
        <see langword="true" /> si l’énumérateur a pu avancer jusqu’à l’élément suivant ; <see langword="false" /> si l’énumérateur a dépassé la fin de la liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the immutable list.">Rétablit l’énumérateur à sa position initiale, qui précède le premier élément de la liste immuable.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="The current element.">Élément actuel.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Exists(System.Predicate{`0})">
      <summary vsli:raw="Determines whether the immutable list contains elements that match the conditions defined by the specified predicate.">Détermine si la liste immuable contient des éléments qui correspondent aux conditions définies par le prédicat spécifié.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to search for.">Délégué qui définit les conditions des éléments à rechercher.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the immutable list contains one or more elements that match the conditions defined by the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la liste immuable contient un ou plusieurs éléments qui correspondent aux conditions définies par le prédicat spécifié ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Find(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire immutable list.">Recherche un élément qui correspond aux conditions définies par le prédicat spécifié et retourne la première occurrence de l’intégralité de la liste immuable.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Délégué qui définit les conditions de l’élément à rechercher.</param>
      <returns vsli:raw="The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type &lt;paramref name=&quot;T&quot; /&gt;.">Premier élément qui correspond aux conditions définies par le prédicat spécifié, s'il est trouvé ; sinon, valeur par défaut du type <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindAll(System.Predicate{`0})">
      <summary vsli:raw="Retrieves all the elements that match the conditions defined by the specified predicate.">Récupère tous les éléments qui correspondent aux conditions définies par le prédicat spécifié.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to search for.">Délégué qui définit les conditions des éléments à rechercher.</param>
      <returns vsli:raw="An immutable list that contains all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty immutable list.">Liste immuable qui contient tous les éléments qui correspondent aux conditions définies par le prédicat spécifié, le cas échéant ; sinon, une liste immuable vide.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that starts at the specified index and contains the specified number of elements.">Recherche un élément qui correspond aux conditions définies par le prédicat spécifié et retourne l’index de base zéro de la première occurrence trouvée dans la plage d’éléments de la liste immuable qui commence à l’index spécifié et contient le nombre spécifié d’éléments.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search.">Index de début de base zéro de la recherche.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Nombre d'éléments contenus dans la section où la recherche doit être effectuée.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Délégué qui définit les conditions de l’élément à rechercher.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, ?1.">Index de base zéro de la première occurrence d’un élément qui répond aux conditions définies par la correspondance, le cas échéant ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.">Recherche un élément qui correspond aux conditions définies par le prédicat spécifié et retourne l’index de base zéro de la première occurrence trouvée dans la plage d’éléments de la liste immuable qui s’étend de l’index spécifié au dernier élément.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search.">Index de début de base zéro de la recherche.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Délégué qui définit les conditions de l’élément à rechercher.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, ?1.">Index de base zéro de la première occurrence d’un élément qui répond aux conditions définies par la correspondance, le cas échéant ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire immutable list.">Recherche un élément qui correspond aux conditions définies par le prédicat spécifié et retourne l’index de base zéro de la première occurrence de l’intégralité de la liste immuable.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Délégué qui définit les conditions de l’élément à rechercher.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, -1.">Index de base zéro de la première occurrence d’un élément qui répond aux conditions définies par la correspondance, le cas échéant ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLast(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire immutable list.">Recherche un élément qui correspond aux conditions définies par le prédicat spécifié et retourne la dernière occurrence de l’intégralité de la liste immuable</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Délégué qui définit les conditions de l’élément à rechercher.</param>
      <returns vsli:raw="The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type &lt;paramref name=&quot;T&quot; /&gt;.">Dernier élément qui correspond aux conditions définies par le prédicat spécifié, le cas échéant ; sinon, valeur par défaut du type <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index.">Recherche un élément qui correspond aux conditions définies par le prédicat spécifié et retourne l’index de base zéro de la dernière occurrence trouvée dans la plage d’éléments de la liste immuable qui contient le nombre d’éléments spécifié et se termine à l’index spécifié.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">Index de début de base zéro de la recherche vers le haut.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Nombre d'éléments contenus dans la section où la recherche doit être effectuée.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Délégué qui définit les conditions de l’élément à rechercher.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, ?1.">Index de base zéro de la dernière occurrence d’un élément qui correspond aux conditions définies par <paramref name="match" />, le cas échéant ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.">Recherche un élément qui correspond aux conditions définies par le prédicat spécifié et retourne l’index de base zéro de la dernière occurrence dans la plage d’éléments de la liste immuable qui s’étend du premier élément à l’index spécifié.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">Index de début de base zéro de la recherche vers le haut.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Délégué qui définit les conditions de l’élément à rechercher.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, ?1.">Index de base zéro de la dernière occurrence d’un élément qui correspond aux conditions définies par <paramref name="match" />, le cas échéant ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire immutable list.">Recherche un élément qui correspond aux conditions définies par le prédicat spécifié et retourne l’index de base zéro de la dernière occurrence de l’intégralité de la liste immuable.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Délégué qui définit les conditions de l’élément à rechercher.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, ?1.">Index de base zéro de la dernière occurrence d’un élément qui correspond aux conditions définies par <paramref name="match" />, le cas échéant ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ForEach(System.Action{`0})">
      <summary vsli:raw="Performs the specified action on each element of the immutable list.">Exécute l’action spécifiée sur chaque élément de la liste immuable.</summary>
      <param name="action" vsli:raw="The delegate to perform on each element of the immutable list.">Délégué à exécuter sur chaque élément de la liste immuable.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable list.">Retourne un énumérateur qui effectue une itération au sein de la liste immuable.</summary>
      <returns vsli:raw="An enumerator  that can be used to iterate through the immutable list.">Énumérateur qui peut être utilisé pour itérer la liste immuable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.GetRange(System.Int32,System.Int32)">
      <summary vsli:raw="Creates a shallow copy of a range of elements in the source immutable list.">Crée une copie superficielle d’une plage d’éléments dans la liste immuable source.</summary>
      <param name="index" vsli:raw="The zero-based index at which the range starts.">Index de base zéro auquel la plage commence.</param>
      <param name="count" vsli:raw="The number of elements in the range.">Nombre d'éléments dans la plage.</param>
      <returns vsli:raw="A shallow copy of a range of elements in the source immutable list.">Copie superficielle d’une plage d’éléments dans la liste immuable source.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.IndexOf(`0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the entire immutable list.">Recherche l’objet spécifié et retourne l’index de base zéro de la première occurrence trouvée dans l’intégralité de la liste immuable.</summary>
      <param name="value" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Objet à localiser dans la liste immuable. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of &lt;paramref name=&quot;value&quot; /&gt; within the entire immutable list, if found; otherwise, ?1.">Index de base zéro de la première occurrence de <paramref name="value" /> dans l’intégralité de la liste immuable, le cas échéant ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the list that starts at the specified index and contains the specified number of elements.">Recherche l’objet spécifié et retourne l’index de base zéro de la première occurrence trouvée dans la plage d’éléments de la liste qui commence à l’index spécifié et qui contient le nombre d’éléments spécifié.</summary>
      <param name="item" vsli:raw="The object to locate in the list The value can be null for reference types.">Objet à localiser dans la liste, la valeur peut être null pour les types référence.</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">Index de début de base zéro de la recherche. 0 (zéro) est valide dans une liste vide.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Nombre d'éléments contenus dans la section où la recherche doit être effectuée.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Comparateur d’égalité à utiliser dans la recherche.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the list that starts at index and contains count number of elements, if found; otherwise, -1.">Index de base zéro de la première occurrence de l’élément dans la plage d’éléments de la liste qui commence à l’index et qui contient le nombre d’éléments, si elle est trouvée ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts the specified object into the immutable list at the specified index.">Insère l’objet spécifié dans la liste immuable à l’index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index at which to insert the object.">Index de base zéro au niveau duquel insérer l’objet.</param>
      <param name="item" vsli:raw="The object to insert.">Objet à insérer.</param>
      <returns vsli:raw="The new immutable list after the object is inserted.">Nouvelle liste immuable une fois que l’objet est inséré.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the elements of a collection into the immutable list at the specified index.">Insère les éléments d’une collection dans la liste immuable à l’index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index at which to insert the elements.">Index de base zéro au niveau duquel insérer les éléments.</param>
      <param name="items" vsli:raw="The collection whose elements should be inserted.">Collection dont les éléments doivent être insérés.</param>
      <returns vsli:raw="The new immutable list after the elements are inserted.">Nouvelle liste immuable une fois que les éléments ont été insérés.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this list is empty.">Obtient une valeur qui indique si cette liste est vide.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la liste est vide ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Item(System.Int32)">
      <summary vsli:raw="Gets the element at the specified index of the list.">Obtient l’élément à l’index spécifié de la liste.</summary>
      <param name="index" vsli:raw="The index of the element to retrieve.">Index de l'élément à récupérer.</param>
      <returns vsli:raw="The element at the specified index.">Élément au niveau de l'index spécifié.</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="In a get operation, &lt;paramref name=&quot;index&quot; /&gt; is negative or not less than &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableList`1.Count&quot; /&gt;.">Dans une opération Get, <paramref name="index" /> est négatif ou inférieur à <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference to the element of the set at the given &lt;paramref name=&quot;index&quot; /&gt;.">Obtient une référence en lecture seule à l’élément de l’ensemble au niveau de l’<paramref name="index" /> donné.</summary>
      <param name="index" vsli:raw="The 0-based index of the element in the set to return.">Index de base zéro de l’élément de l’ensemble à retourner.</param>
      <returns vsli:raw="A read-only reference to the element at the given position.">Référence en lecture seule à l’élément à la position donnée.</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is negative or not less than &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableList`1.Count&quot; /&gt;.">
        <paramref name="index" /> est négatif ou inférieur à <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the list that contains the specified number of elements and ends at the specified index.">Recherche l’objet spécifié et retourne l’index de base zéro de la dernière occurrence trouvée dans la plage d’éléments de la liste qui contient le nombre spécifié d’éléments et se termine à l’index spécifié.</summary>
      <param name="item" vsli:raw="The object to locate in the list. The value can be null for reference types.">Objet à localiser dans la liste. La valeur peut être null pour les types référence.</param>
      <param name="index" vsli:raw="The zero-based starting index of the backward search.">Index de début de base zéro de la recherche vers le haut.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Nombre d'éléments contenus dans la section où la recherche doit être effectuée.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Comparateur d’égalité à utiliser dans la recherche.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of item within the range of elements in the list that contains count number of elements and ends at index, if found; otherwise, -1.">Index de base zéro de la dernière occurrence de l’élément dans la plage d’éléments de la liste qui contient le nombre d’éléments et se termine à l’index, si elle est trouvée ; sinon, valeur -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of the specified object from this immutable list.">Supprime la première occurrence de l’objet spécifié de cette liste immuable.</summary>
      <param name="value" vsli:raw="The object to remove.">Objet à supprimer.</param>
      <returns vsli:raw="A new list with the object removed, or this list if the specified object is not in this list.">Nouvelle liste avec l’objet supprimé, ou cette liste si l’objet spécifié n’est pas dans cette liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the first occurrence of the object that matches the specified value from this immutable list.">Supprime la première occurrence de l’objet qui correspond à la valeur spécifiée dans cette liste immuable.</summary>
      <param name="value" vsli:raw="The value of the element to remove from the list.">Valeur de l’élément à supprimer de la liste.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Comparateur d’égalité à utiliser dans la recherche.</param>
      <returns vsli:raw="A new list with the object removed, or this list if the specified object is not in this list.">Nouvelle liste avec l’objet supprimé, ou cette liste si l’objet spécifié n’est pas dans cette liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the elements that match the conditions defined by the specified predicate.">Supprime tous les éléments qui correspondent aux conditions définies par le prédicat spécifié.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">Délégué qui définit les conditions des éléments à supprimer.</param>
      <returns vsli:raw="The new list with the elements removed.">Nouvelle liste avec les éléments supprimés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the element at the specified index.">Supprime l'élément au niveau de l'index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to remove.">Index de base zéro de l'élément à supprimer.</param>
      <returns vsli:raw="A new list with the element removed.">Nouvelle liste avec l’élément supprimé.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes a range of elements from this immutable list.">Supprime une plage d’éléments de cette liste immuable.</summary>
      <param name="items" vsli:raw="The collection whose elements should be removed if matches are found in this list.">Collection dont les éléments doivent être supprimés si des correspondances sont trouvées dans cette liste.</param>
      <returns vsli:raw="A new list with the elements removed.">Nouvelle liste avec les éléments supprimés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the specified values from this list.">Supprime les valeurs spécifiées de cette liste.</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">Éléments à supprimer si des correspondances sont trouvées dans cette liste.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Comparateur d’égalité à utiliser dans la recherche.</param>
      <returns vsli:raw="A new list with the elements removed.">Nouvelle liste avec les éléments supprimés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Removes a range of elements, starting from the specified index and containing the specified number of elements, from this immutable list.">Supprime une plage d’éléments, en commençant à l’index spécifié et contenant le nombre spécifié d’éléments, à partir de cette liste immuable.</summary>
      <param name="index" vsli:raw="The starting index to begin removal.">Index de départ pour commencer la suppression.</param>
      <param name="count" vsli:raw="The number of elements to remove.">Nombre d'éléments à supprimer.</param>
      <returns vsli:raw="A new list with the elements removed.">Nouvelle liste avec les éléments supprimés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Replace(`0,`0)">
      <summary vsli:raw="Replaces the specified element in the immutable list with a new element.">Remplace l’élément spécifié dans la liste immuable par un nouvel élément.</summary>
      <param name="oldValue" vsli:raw="The element to replace.">Élément à remplacer.</param>
      <param name="newValue" vsli:raw="The element to replace &lt;paramref name=&quot;oldValue&quot; /&gt; with.">Élément à remplacer <paramref name="oldValue" /> avec.</param>
      <returns vsli:raw="The new list with the replaced element, even if it is equal to the old element.">Nouvelle liste avec l’élément remplacé, même s’il est identique à l’ancien élément.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; does not exist in the immutable list.">
        <paramref name="oldValue" /> n’existe pas dans la liste immuable.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Replaces the specified element in the immutable list with a new element.">Remplace l’élément spécifié dans la liste immuable par un nouvel élément.</summary>
      <param name="oldValue" vsli:raw="The element to replace in the list.">Élément à remplacer dans la liste.</param>
      <param name="newValue" vsli:raw="The element to replace &lt;paramref name=&quot;oldValue&quot; /&gt; with.">Élément à remplacer <paramref name="oldValue" /> avec.</param>
      <param name="equalityComparer" vsli:raw="The comparer to use to check for equality.">Comparateur à utiliser pour vérifier l’égalité.</param>
      <returns vsli:raw="A new list with the object replaced, or this list if the specified object is not in this list.">Nouvelle liste avec l’objet remplacé, ou cette liste si l’objet spécifié n’est pas dans cette liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Reverse">
      <summary vsli:raw="Reverses the order of the elements in the entire immutable list.">Inverse l’ordre des éléments dans l’intégralité de la liste immuable.</summary>
      <returns vsli:raw="The reversed list.">Liste inversée.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Reverse(System.Int32,System.Int32)">
      <summary vsli:raw="Reverses the order of the elements in the specified range of the immutable list.">Inverse l’ordre des éléments dans la plage spécifiée de la liste immuable.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to reverse.">Index de début de base zéro de la plage à inverser.</param>
      <param name="count" vsli:raw="The number of elements in the range to reverse.">Nombre d'éléments à inverser dans la plage.</param>
      <returns vsli:raw="The reversed list.">Liste inversée.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces an element at a given position in the immutable list with the specified element.">Remplace un élément à une position donnée dans la liste immuable par l’élément spécifié.</summary>
      <param name="index" vsli:raw="The position in the list of the element to replace.">Position dans la liste de l’élément à remplacer.</param>
      <param name="value" vsli:raw="The element to replace the old element with.">Élément avec lequel remplacer l’ancien élément.</param>
      <returns vsli:raw="The new list with the replaced element, even if it is equal to the old element at that position.">Nouvelle liste avec l’élément remplacé, même s’il est identique à l’ancien élément à cette position.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort">
      <summary vsli:raw="Sorts the elements in the entire immutable list using the default comparer.">Trie les éléments dans l’intégralité de la liste immuable à l’aide du comparateur par défaut.</summary>
      <returns vsli:raw="The sorted list.">Liste triée.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the elements in the entire immutable list using the specified comparer.">Trie les éléments dans l’intégralité de la liste immuable à l’aide du comparateur spécifié.</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer (&lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;).">Implémentation à utiliser lors de la comparaison d’éléments, ou <see langword="null" /> pour utiliser le comparateur par défaut (<see cref="P:System.Collections.Generic.Comparer`1.Default" />).</param>
      <returns vsli:raw="The sorted list.">Liste triée.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Comparison{`0})">
      <summary vsli:raw="Sorts the elements in the entire immutable list using the specified comparer.">Trie les éléments dans l’intégralité de la liste immuable à l’aide du comparateur spécifié.</summary>
      <param name="comparison" vsli:raw="The delegate to use when comparing elements.">Délégué à utiliser lors de la comparaison d’éléments.</param>
      <returns vsli:raw="The sorted list.">Liste triée.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparison&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparison" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts a range of elements in the immutable list using the specified comparer.">Trie une plage d’éléments de la liste immuable à l’aide du comparateur spécifié.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to sort.">Index de début de base zéro de la plage à trier.</param>
      <param name="count" vsli:raw="The length of the range to sort.">Longueur de la plage à trier.</param>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer (&lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;).">L’implémentation à utiliser lors de la comparaison d’éléments, ou <see langword="null" /> pour utiliser le comparateur par défaut (<see cref="P:System.Collections.Generic.Comparer`1.Default" />).</param>
      <returns vsli:raw="The sorted list.">Liste triée.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds the specified item to the immutable list.">Ajoute l’élément spécifié à la liste immuable.</summary>
      <param name="item" vsli:raw="The item to add.">Élément à ajouter.</param>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary vsli:raw="Removes all items from the immutable list.">Supprime tous les éléments de la liste immuable.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Obtient une valeur indiquant si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable list.">Supprime la première occurrence d’un objet spécifique de la liste immuable.</summary>
      <param name="item" vsli:raw="The object to remove.">Objet à supprimer.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is not found in the original list.">
        <see langword="true" /> si <paramref name="item" /> a été correctement supprimé de la liste ; sinon, <see langword="false" />. Cette méthode retourne également <see langword="false" /> si <paramref name="item" /> est introuvable dans la liste d’origine.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable list.">Retourne un énumérateur qui effectue une itération au sein de la liste immuable.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the list.">Énumérateur permettant d’effectuer une itération au sein de la liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts an object in the immutable list at the specified index.">Insère un objet dans la liste immuable à l’index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;item&quot; /&gt; should be inserted.">Index de base zéro au niveau duquel <paramref name="item" /> doit être inséré.</param>
      <param name="item" vsli:raw="The object to insert.">Objet à insérer.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the value at the specified index.">Obtient ou définit la valeur à l'index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to access." />
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="Thrown from getter when &lt;paramref name=&quot;index&quot; /&gt; is negative or not less than &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableList`1.Count&quot; /&gt;.">Levé à partir du getter quand <paramref name="index" /> est négatif ou n’est pas inférieur à <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown from the setter.">Toujours levé à partir du setter.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the value at the specified index.">Supprime la valeur à l’index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">Index de base zéro de l'élément à supprimer.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the specified array index.">Copie l’intégralité de la liste immuable dans un tableau unidimensionnel compatible, en commençant à l’index de tableau spécifié.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from immutable list.">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir de la liste immuable.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="This type is immutable, so it is always thread-safe. See the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; interface.">Consultez l’interface <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="See &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Consultez <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable list.">Retourne un énumérateur qui effectue une itération au sein de la liste immuable.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the list.">Énumérateur permettant d’effectuer une itération au sein de la liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the immutable list.">Ajoute un élément à la liste immuable.</summary>
      <param name="value" vsli:raw="The object to add to the list.">Objet à ajouter à la liste.</param>
      <returns vsli:raw="The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the list.">Position à laquelle le nouvel élément a été inséré, ou -1 pour indiquer que l’élément n’a pas été inséré dans la liste.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">Toujours levée.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the immutable list.">Supprime tous les éléments de la liste immuable.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">Toujours levée.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the immutable list contains a specific value.">Détermine si la liste immuable contient une valeur spécifique.</summary>
      <param name="value" vsli:raw="The object to locate in the list.">Objet à localiser dans la liste.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is found in the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’objet se trouve dans la liste ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the immutable list.">Détermine l’index d’un élément spécifique dans la liste immuable.</summary>
      <param name="value" vsli:raw="The object to locate in the list.">Objet à localiser dans la liste.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">Index de <paramref name="value" /> s'il figure dans la liste ; sinon, -1.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item into the immutable list at the specified index.">Insère un élément dans la liste à l’index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">Index de base zéro au niveau duquel <paramref name="value" /> doit être inséré.</param>
      <param name="value" vsli:raw="The object to insert into the list.">Objet à insérer dans la liste.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">Toujours levée.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size.">Obtient une valeur indiquant si <see cref="T:System.Collections.IList" /> est de taille fixe.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Collections.IList" /> est de taille fixe ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Obtient une valeur indiquant si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Object&quot; /&gt; at the specified index.">Obtient ou définit le <see cref="T:System.Object" /> à l'index spécifié.</summary>
      <param name="index" vsli:raw="The index.">Index.</param>
      <returns vsli:raw="The value at the specified index.">Valeur à l’index spécifié.</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="Thrown from getter when &lt;paramref name=&quot;index&quot; /&gt; is negative or not less than &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableList`1.Count&quot; /&gt;.">Levé à partir du getter quand <paramref name="index" /> est négatif ou n’est pas inférieur à <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown from the setter.">Toujours levé à partir du setter.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable list.">Supprime la première occurrence d’un objet spécifique de la liste immuable.</summary>
      <param name="value" vsli:raw="The object to remove from the list.">Objet à supprimer de la liste.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">Toujours levée.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index of the immutable list.">Supprime l’élément à l’index spécifié de la liste immuable.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">Index de base zéro de l'élément à supprimer.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">Toujours levée.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)">
      <summary vsli:raw="Adds the specified value to this immutable list.">Ajoute la valeur spécifiée à cette liste immuable.</summary>
      <param name="value" vsli:raw="The value to add.">Valeur à ajouter.</param>
      <returns vsli:raw="A new list with the element added.">Nouvelle liste contenant l'élément ajouté.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds the specified values to this immutable list.">Ajoute les valeurs spécifiées à cette liste immuable.</summary>
      <param name="items" vsli:raw="The values to add.">Valeur à ajouter.</param>
      <returns vsli:raw="A new list with the elements added.">Nouvelle liste contenant les éléments ajoutés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Clear">
      <summary vsli:raw="Retrieves an empty list that has the same sorting and ordering semantics as this instance.">Récupère une liste vide qui a la même sémantique de tri et de classement que cette instance.</summary>
      <returns vsli:raw="An empty list that has the same sorting and ordering semantics as this instance.">Une liste vide avec la même sémantique de tri et de classement que cette instance.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts the specified element at the specified index in the immutable list.">Insère l’élément spécifié à l’index spécifié dans la liste immuable.</summary>
      <param name="index" vsli:raw="The index at which to insert the value.">Index auquel insérer la valeur.</param>
      <param name="item" vsli:raw="The element to insert.">Élément à insérer.</param>
      <returns vsli:raw="A new immutable list that includes the specified element.">Nouvelle liste immuable qui inclut l’élément spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the specified elements at the specified index in the immutable list.">Insère les éléments spécifiés à l’index spécifié dans la liste immuable.</summary>
      <param name="index" vsli:raw="The index at which to insert the elements.">Index au niveau duquel insérer les éléments.</param>
      <param name="items" vsli:raw="The elements to insert.">Éléments à insérer.</param>
      <returns vsli:raw="A new immutable list that includes the specified elements.">Nouvelle liste immuable qui inclut les éléments spécifiés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the element with the specified value from the list.">Supprime l’élément avec la valeur spécifiée de la liste.</summary>
      <param name="value" vsli:raw="The value of the element to remove from the list.">Valeur de l’élément à supprimer de la liste.</param>
      <param name="equalityComparer" vsli:raw="The comparer to use to compare elements for equality.">Comparateur à utiliser pour comparer les éléments pour égalité.</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1&quot; /&gt; with the specified element removed.">Nouvel <see cref="T:System.Collections.Immutable.ImmutableList`1" /> avec l’élément spécifié supprimé.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the elements that match the conditions defined by the specified predicate.">Supprime tous les éléments qui correspondent aux conditions définies par le prédicat spécifié.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">Délégué qui définit les conditions des éléments à supprimer.</param>
      <returns vsli:raw="A new immutable list with the elements removed.">Nouvelle liste immuable avec les éléments supprimés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the element at the specified index of the immutable list.">Supprime l’élément à l’index spécifié de la liste immuable.</summary>
      <param name="index" vsli:raw="The index of the element to remove.">Index de l'élément à supprimer.</param>
      <returns vsli:raw="A new list with the element removed.">Nouvelle liste avec l’élément supprimé.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes a range of elements from this immutable list that match the items specified.">Supprime une plage d’éléments de cette liste immuable qui correspondent aux éléments spécifiés.</summary>
      <param name="items" vsli:raw="The range of items to remove from the list, if found.">Plage d’éléments à supprimer de la liste, le cas échéant.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to compare elements.">Comparateur d’égalité à utiliser pour comparer les éléments.</param>
      <returns vsli:raw="An immutable list with the items removed.">Liste immuable avec les éléments supprimés.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;items&quot; /&gt; or &lt;paramref name=&quot;equalityComparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="items" /> ou <paramref name="equalityComparer" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Removes the specified number of elements at the specified location from this list.">Supprime de cette liste le nombre spécifié d’éléments à l’emplacement spécifié.</summary>
      <param name="index" vsli:raw="The starting index of the range of elements to remove.">Index de départ de la plage d’éléments à supprimer.</param>
      <param name="count" vsli:raw="The number of elements to remove.">Nombre d'éléments à supprimer.</param>
      <returns vsli:raw="A new list with the elements removed.">Nouvelle liste avec les éléments supprimés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Replaces an element in the list with the specified element.">Remplace un élément de la liste par l’élément spécifié.</summary>
      <param name="oldValue" vsli:raw="The element to replace.">Élément à remplacer.</param>
      <param name="newValue" vsli:raw="The element to replace the old element with.">Élément avec lequel remplacer l’ancien élément.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Comparateur d’égalité à utiliser dans la recherche.</param>
      <returns vsli:raw="The new list.">Nouvelle liste.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; does not exist in the list.">Levé quand l’ancienne valeur n’existe pas dans la liste.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces an element in the list at a given position with the specified element.">Remplace un élément de la liste à une position donnée par l’élément spécifié.</summary>
      <param name="index" vsli:raw="The position in the list of the element to replace.">Position dans la liste de l’élément à remplacer.</param>
      <param name="value" vsli:raw="The element to replace the old element with.">Élément avec lequel remplacer l’ancien élément.</param>
      <returns vsli:raw="The new list.">Nouvelle liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ToBuilder">
      <summary vsli:raw="Creates a list that has the same contents as this list and can be efficiently mutated across multiple operations using standard mutable interfaces.">Crée une liste qui a le même contenu que cette liste et peut être mutée efficacement entre plusieurs opérations à l’aide des interfaces standard mutables.</summary>
      <returns vsli:raw="The created list with the same contents as this list.">Liste créée avec le même contenu que cette liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.TrueForAll(System.Predicate{`0})">
      <summary vsli:raw="Determines whether every element in the immutable list matches the conditions defined by the specified predicate.">Détermine si chaque élément de la liste immuable correspond aux conditions définies par le prédicat spécifié.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions to check against the elements.">Délégué qui définit les conditions à vérifier par rapport aux éléments.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if every element in the immutable list matches the conditions defined by the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If the list has no elements, the return value is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> si chaque élément de la liste immuable correspond aux conditions définies par le prédicat spécifié ; sinon, <see langword="false" />. Si la liste ne comporte pas d'éléments, la valeur de retour est <see langword="true" />.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableQueue`1&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Fournit un ensemble de méthodes d’initialisation pour les instances de la classe <see cref="T:System.Collections.Immutable.ImmutableQueue`1" />.
NuGet package: System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1">
      <summary vsli:raw="Creates an empty immutable queue.">Crée une file d’attente immuable vide.</summary>
      <typeparam name="T" vsli:raw="The type of items to be stored in the immutable queue.">Type des éléments à stocker dans la file d’attente immuable.</typeparam>
      <returns vsli:raw="An empty immutable queue.">File d’attente immuable vide.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1(``0)">
      <summary vsli:raw="Creates a new immutable queue that contains the specified item.">Crée une file d’attente immuable qui contient l’élément spécifié.</summary>
      <param name="item" vsli:raw="The item to prepopulate the queue with.">Élément avec lequel préremplir la file d’attente.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable queue.">Type des éléments dans la file d’attente immuable.</typeparam>
      <returns vsli:raw="A new immutable queue that contains the specified item.">Nouvelle file d’attente immuable qui contient l’élément spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1(``0[])">
      <summary vsli:raw="Creates a new immutable queue that contains the specified array of items.">Crée une file d’attente immuable qui contient le tableau spécifié d’éléments.</summary>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the queue with.">Tableau qui contient les éléments avec lesquels préremplir la file d’attente.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable queue.">Type des éléments dans la file d’attente immuable.</typeparam>
      <returns vsli:raw="A new immutable queue that contains the specified items.">Nouvelle file d’attente immuable qui contient les éléments spécifiés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable queue that contains the specified items.">Crée une file d’attente immuable qui contient les éléments spécifiés.</summary>
      <param name="items" vsli:raw="The items to add to the queue before immutability is applied.">Éléments à ajouter à la file d’attente avant que l’immuabilité soit appliquée.</param>
      <typeparam name="T" vsli:raw="The type of elements in the queue.">Type des éléments dans la file d’attente.</typeparam>
      <returns vsli:raw="An immutable queue that contains the specified items.">File d’attente immuable qui contient les éléments spécifiés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Dequeue``1(System.Collections.Immutable.IImmutableQueue{``0},``0@)">
      <summary vsli:raw="Removes the item at the beginning of the immutable queue, and returns the new queue.">Supprime l’élément au début de la file d’attente immuable et retourne la nouvelle file d’attente.</summary>
      <param name="queue" vsli:raw="The queue to remove the item from.">File d’attente de laquelle supprimer l’élément.</param>
      <param name="value" vsli:raw="When this method returns, contains the item from the beginning of the queue.">Lorsque cette méthode retourne, contient l’élément de début de la file d’attente.</param>
      <typeparam name="T" vsli:raw="The type of elements in the immutable queue.">Type des éléments dans la file d’attente immuable.</typeparam>
      <returns vsli:raw="The new queue with the item removed.">Nouvel file d’attente avec l’élément supprimé.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">La pile est vide.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue`1">
      <summary vsli:raw="Represents an immutable queue.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Représente une file d’attente immuable.
NuGet package: System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the queue.">Type des éléments dans la file d’attente.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Clear">
      <summary vsli:raw="Removes all objects from the immutable queue.">Supprime tous les objets de la file d’attente immuable.</summary>
      <returns vsli:raw="The empty immutable queue.">File d’attente immuable vide.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Dequeue">
      <summary vsli:raw="Removes the element at the beginning of the immutable queue, and returns the new queue.">Supprime l’élément au début de la file d’attente immuable et retourne la nouvelle file d’attente.</summary>
      <returns vsli:raw="The new immutable queue; never &lt;see langword=&quot;null&quot; /&gt;.">Nouvelle file d’attente immuable ; jamais <see langword="null" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">La file d’attente est vide.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Dequeue(`0@)">
      <summary vsli:raw="Removes the item at the beginning of the immutable queue, and returns the new queue.">Supprime l’élément au début de la file d’attente immuable et retourne la nouvelle file d’attente.</summary>
      <param name="value" vsli:raw="When this method returns, contains the element from the beginning of the queue.">Lorsque cette méthode retourne, contient l’élément de début de la file d’attente.</param>
      <returns vsli:raw="The new immutable queue with the beginning element removed.">Nouvelle file d’attente immuable avec l’élément de début supprimé.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">La file d’attente est vide.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.Empty">
      <summary vsli:raw="Gets an empty immutable queue.">Obtient une file d’attente vide immuable.</summary>
      <returns vsli:raw="An empty immutable queue.">File d’attente immuable vide.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Enqueue(`0)">
      <summary vsli:raw="Adds an element to the end of the immutable queue, and returns the new queue.">Ajoute un élément à la fin de la file d’attente immuable et retourne la nouvelle file d’attente.</summary>
      <param name="value" vsli:raw="The element to add.">Élément à ajouter.</param>
      <returns vsli:raw="The new immutable queue.">Nouvelle file d’attente immuable.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue`1.Enumerator">
      <summary vsli:raw="Enumerates the contents of an immutable queue without allocating any memory.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Énumère le contenu d’une file d’attente immuable sans allouer de mémoire.
Package NuGet : System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtient l'élément situé à la position actuelle de l'énumérateur.</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">Élément situé à la position actuelle de l’énumérateur.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable queue.">Avance l’énumérateur à l’élément suivant de la file d’attente immuable.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the queue.">
        <see langword="true" /> si l’énumérateur a pu avancer jusqu’à l’élément suivant ; <see langword="false" /> si l’énumérateur a dépassé la fin de la file d’attente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable queue.">Retourne un énumérateur qui itère dans la file d’attente immuable.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the queue.">Énumérateur permettant d’effectuer une itération via la file d’attente.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this immutable queue is empty.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Obtient une valeur qui indique si cette file d’attente immuable est vide.
NuGet package: System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this queue is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si cette file d’attente est vide ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Peek">
      <summary vsli:raw="Returns the element at the beginning of the immutable queue without removing it.">Retourne l’élément au début de la file d’attente immuable sans le supprimer.</summary>
      <returns vsli:raw="The element at the beginning of the queue.">Élément au début de la file d’attente.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">La file d’attente est vide.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.PeekRef">
      <summary vsli:raw="Gets a read-only reference to the element at the front of the queue.">Obtient une référence en lecture seule à l’élément situé à l’avant de la file d’attente.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">La file d’attente est vide.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Retourne un énumérateur qui itère au sein de la collection.</summary>
      <returns vsli:raw="An enumerator  that can be used to iterate through the collection.">Énumérateur permettant d’effectuer une itération au sein de la collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Retourne un énumérateur qui itère au sein d’une collection.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; object that can be used to iterate through the collection.">Objet <see cref="T:System.Collections.IEnumerator" /> pouvant être utilisé pour itérer au sein de la collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Clear">
      <summary vsli:raw="Removes all elements from the immutable queue.">Supprime tous les éléments de la file d’attente immuable.</summary>
      <returns vsli:raw="The empty immutable queue.">File d’attente immuable vide.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Dequeue">
      <summary vsli:raw="Removes the element at the beginning of the immutable queue, and returns the new queue.">Supprime l’élément au début de la file d’attente immuable et retourne la nouvelle file d’attente.</summary>
      <returns vsli:raw="The new immutable queue; never &lt;see langword=&quot;null&quot; /&gt;.">Nouvelle file d’attente immuable ; jamais <see langword="null" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Enqueue(`0)">
      <summary vsli:raw="Adds an element to the end of the immutable queue, and returns the new queue.">Ajoute un élément à la fin de la file d’attente immuable et retourne la nouvelle file d’attente.</summary>
      <param name="value" vsli:raw="The element to add.">Élément à ajouter.</param>
      <returns vsli:raw="The new immutable queue.">Nouvelle file d’attente immuable.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableSortedDictionary`2&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Fournit un ensemble de méthodes d’initialisation pour les instances de la classe <see cref="T:System.Collections.Immutable.ImmutableSortedDictionary`2" />.
Package NuGet : System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2">
      <summary vsli:raw="Creates an empty immutable sorted dictionary.">Crée un dictionnaire trié immuable vide.</summary>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Type des clés stockées par le dictionnaire.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Type des valeurs stockées par le dictionnaire.</typeparam>
      <returns vsli:raw="An empty immutable sorted dictionary.">Dictionnaire trié immuable vide.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2(System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Creates an empty immutable sorted dictionary that uses the specified key comparer.">Crée un dictionnaire trié immuable vide qui utilise le comparateur de clé spécifié.</summary>
      <param name="keyComparer" vsli:raw="The implementation to use to determine the equality of keys in the dictionary.">Implémentation à utiliser pour déterminer l’égalité des clés dans le dictionnaire.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Type des clés stockées par le dictionnaire.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Type des valeurs stockées par le dictionnaire.</typeparam>
      <returns vsli:raw="An empty immutable sorted dictionary.">Dictionnaire trié immuable vide.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Creates an empty immutable sorted dictionary that uses the specified key and value comparers.">Crée un dictionnaire trié immuable vide qui utilise les comparateurs de clé et de valeur spécifiés.</summary>
      <param name="keyComparer" vsli:raw="The implementation to use to determine the equality of keys in the dictionary.">Implémentation à utiliser pour déterminer l’égalité des clés dans le dictionnaire.</param>
      <param name="valueComparer" vsli:raw="The implementation to use to determine the equality of values in the dictionary.">Implémentation à utiliser pour déterminer l’égalité des valeurs dans le dictionnaire.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Type des clés stockées par le dictionnaire.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Type des valeurs stockées par le dictionnaire.</typeparam>
      <returns vsli:raw="An empty immutable sorted dictionary.">Dictionnaire trié immuable vide.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2">
      <summary vsli:raw="Creates a new immutable sorted dictionary builder.">Crée un générateur de dictionnaire trié immuable.</summary>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Type des clés stockées par le dictionnaire.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Type des valeurs stockées par le dictionnaire.</typeparam>
      <returns vsli:raw="The immutable collection builder.">Générateur de collections immuables.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2(System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Creates a new immutable sorted dictionary builder.">Crée un générateur de dictionnaire trié immuable.</summary>
      <param name="keyComparer" vsli:raw="The key comparer.">Comparateur de clé.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Type des clés stockées par le dictionnaire.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Type des valeurs stockées par le dictionnaire.</typeparam>
      <returns vsli:raw="The immutable collection builder.">Générateur de collections immuables.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Creates a new immutable sorted dictionary builder.">Crée un générateur de dictionnaire trié immuable.</summary>
      <param name="keyComparer" vsli:raw="The key comparer.">Comparateur de clé.</param>
      <param name="valueComparer" vsli:raw="The value comparer.">Comparateur de valeur.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Type des clés stockées par le dictionnaire.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Type des valeurs stockées par le dictionnaire.</typeparam>
      <returns vsli:raw="The immutable collection builder.">Générateur de collections immuables.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates a new immutable sorted dictionary from the specified range of items with the specified key comparer.">Crée un dictionnaire trié immuable à partir de la plage d’éléments spécifiée avec le comparateur de clé spécifié.</summary>
      <param name="keyComparer" vsli:raw="The comparer implementation to use to evaluate keys for equality and sorting.">Implémentation du comparateur à utiliser pour évaluer les clés pour l’égalité et le tri.</param>
      <param name="items" vsli:raw="The items to add to the sorted dictionary.">Éléments à ajouter au dictionnaire trié.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored in the dictionary.">Type des clés stockées dans le dictionnaire.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored in the dictionary.">Type des valeurs stockées dans le dictionnaire.</typeparam>
      <returns vsli:raw="The new immutable sorted dictionary that contains the specified items and uses the specified key comparer.">Nouveau dictionnaire trié immuable qui contient les éléments spécifiés et utilise le comparateur de clé spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates a new immutable sorted dictionary from the specified range of items with the specified key and value comparers.">Crée un dictionnaire trié immuable à partir de la plage d’éléments spécifiée avec les comparateurs de clé et de valeur spécifiés.</summary>
      <param name="keyComparer" vsli:raw="The comparer implementation to use to compare keys for equality and sorting.">Implémentation du comparateur à utiliser pour comparer des clés pour l’égalité et le tri.</param>
      <param name="valueComparer" vsli:raw="The comparer implementation to use to compare values for equality.">Implémentation du comparateur à utiliser pour comparer des valeurs pour l’égalité et le tri.</param>
      <param name="items" vsli:raw="The items to add to the sorted dictionary before it's immutable.">Éléments à ajouter au dictionnaire trié avant qu’il soit immuable.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored in the dictionary.">Type des clés stockées dans le dictionnaire.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored in the dictionary.">Type des valeurs stockées dans le dictionnaire.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the specified items and uses the specified comparers.">Dictionnaire trié immuable qui contient les éléments spécifiés et utilise les comparateurs spécifiés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates an immutable sorted dictionary that contains the specified items and uses the default comparer.">Crée un dictionnaire trié immuable qui contient les éléments spécifiés et utilise le comparateur par défaut.</summary>
      <param name="items" vsli:raw="The items to add to the sorted dictionary before it's immutable.">Éléments à ajouter au dictionnaire trié avant qu’il soit immuable.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored in the dictionary.">Type des clés stockées dans le dictionnaire.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored in the dictionary.">Type des valeurs stockées dans le dictionnaire.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the specified items.">Dictionnaire trié immuable qui contient les éléments spécifiés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable sorted dictionary of its contents.">Énumère une séquence de paires clé/valeur et produit un dictionnaire trié immuable de son contenu.</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">Séquence de paires clé/valeur à énumérer.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Type des clés dans le dictionnaire.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Type des valeurs dans le dictionnaire.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the key/value pairs in the specified sequence.">Dictionnaire trié immuable qui contient les paires clé/valeur dans l’ordre spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents by using the specified key comparer.">Énumère une séquence de paires clé/valeur et produit un dictionnaire immuable de son contenu à l’aide du comparateur de clé spécifié.</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">Séquence de paires clé/valeur à énumérer.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use when building the immutable dictionary.">Comparateur de clés à utiliser lors de la création du dictionnaire immuable.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Type des clés dans le dictionnaire.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Type des valeurs dans le dictionnaire.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the key/value pairs in the specified sequence.">Dictionnaire trié immuable qui contient les paires clé/valeur dans l’ordre spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable sorted dictionary of its contents by using the specified key and value comparers.">Énumère une séquence de paires clé/valeur et produit un dictionnaire trié immuable de son contenu à l’aide de la des comparateurs de clé et de valeur spécifiés.</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">Séquence de paires clé/valeur à énumérer.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use when building the immutable dictionary.">Comparateur de clés à utiliser lors de la création du dictionnaire immuable.</param>
      <param name="valueComparer" vsli:raw="The value comparer to use for the immutable dictionary.">Comparateur de valeur à utiliser pour le dictionnaire immuable.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Type des clés dans le dictionnaire.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Type des valeurs dans le dictionnaire.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the key/value pairs in the specified sequence.">Dictionnaire trié immuable qui contient les paires clé/valeur dans l’ordre spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Immutable.ImmutableSortedDictionary{``0,``1}.Builder)">
      <summary vsli:raw="Creates an immutable sorted dictionary from the current contents of the builder's dictionary.">Crée un dictionnaire trié immuable à partir du contenu actuel du dictionnaire du générateur.</summary>
      <param name="builder" vsli:raw="The builder to create the immutable sorted dictionary from.">Générateur à partir duquel créer le dictionnaire trié immuable.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Type des clés dans le dictionnaire.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Type des valeurs dans le dictionnaire.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the current contents in the builder's dictionary.">Dictionnaire trié immuable qui contient le contenu actuel du dictionnaire du générateur.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable sorted dictionary of its contents.">Énumère et transforme une séquence et produit un dictionnaire trié immuable de son contenu.</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">Séquence à énumérer pour générer le dictionnaire.</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">Fonction qui génère la clé de dictionnaire à partir de chaque élément de la séquence.</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">Fonction qui génère la valeur de dictionnaire à partir de chaque élément de la séquence.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Type des éléments de la séquence.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">Type des clés dans le dictionnaire qui en résulte.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">Type des valeurs dans le dictionnaire qui en résulte.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the items in the specified sequence.">Dictionnaire trié immuable qui contient les éléments dans l’ordre spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable sorted dictionary of its contents by using the specified key comparer.">Énumère et transforme une séquence et produit un dictionnaire trié immuable de son contenu à l’aide du comparateur de clé spécifié.</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">Séquence à énumérer pour générer le dictionnaire.</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">Fonction qui génère la clé de dictionnaire à partir de chaque élément de la séquence.</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">Fonction qui génère la valeur de dictionnaire à partir de chaque élément de la séquence.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use for the dictionary.">Comparateur de clé à utiliser pour le dictionnaire.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Type des éléments de la séquence.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">Type des clés dans le dictionnaire qui en résulte.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">Type des valeurs dans le dictionnaire qui en résulte.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the items in the specified sequence.">Dictionnaire immuable qui contient les éléments dans l’ordre spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable sorted dictionary of its contents by using the specified key and value comparers.">Énumère et transforme une séquence et produit un dictionnaire trié immuable de son contenu à l’aide des comparateurs de clé et de valeur spécifiés.</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">Séquence à énumérer pour générer le dictionnaire.</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">Fonction qui génère la clé de dictionnaire à partir de chaque élément de la séquence.</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">Fonction qui génère la valeur de dictionnaire à partir de chaque élément de la séquence.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use for the dictionary.">Comparateur de clé à utiliser pour le dictionnaire.</param>
      <param name="valueComparer" vsli:raw="The value comparer to use for the dictionary.">Comparateur de valeur à utiliser pour le dictionnaire.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Type des éléments de la séquence.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">Type des clés dans le dictionnaire qui en résulte.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">Type des valeurs dans le dictionnaire qui en résulte.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the items in the specified sequence.">Dictionnaire trié immuable qui contient les éléments dans l’ordre spécifié.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2">
      <summary vsli:raw="Represents an immutable sorted dictionary.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Représente un dictionnaire trié immuable.
NuGet package: System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="TKey" vsli:raw="The type of the key contained in the dictionary.">Type de la clé contenue dans le dictionnaire.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the value contained in the dictionary.">Type de la valeur contenue dans le dictionnaire.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Add(`0,`1)">
      <summary vsli:raw="Adds an element with the specified key and value to the immutable sorted dictionary.">Ajoute un élément avec la clé spécifiée et la valeur au dictionnaire trié immuable.</summary>
      <param name="key" vsli:raw="The key of the entry to add.">Clé de l'entrée à ajouter.</param>
      <param name="value" vsli:raw="The value of entry to add.">Valeur de l’entrée à ajouter.</param>
      <returns vsli:raw="A new immutable sorted dictionary that contains the additional key/value pair.">Nouveau dictionnaire trié immuable qui contient la paire clé/valeur supplémentaire.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The given key already exists in the dictionary but has a different value.">La clé donnée existe déjà dans le dictionnaire, mais a une valeur différente.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Adds the specific key/value pairs to the immutable sorted dictionary.">Ajoute les paires clé/valeur spécifique au dictionnaire trié immuable.</summary>
      <param name="items" vsli:raw="The key/value pairs to add.">Paires clé/valeur à ajouter.</param>
      <returns vsli:raw="A new immutable dictionary that contains the additional key/value pairs.">Nouveau dictionnaire immuable qui contient les paires clé/valeur supplémentaires.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="One of the given keys already exists in the dictionary but has a different value.">Une des clés données existe déjà dans le dictionnaire, mais a une valeur différente.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder">
      <summary vsli:raw="Represents a sorted dictionary that mutates with little or no memory allocations and that can produce or build on immutable sorted dictionary instances very efficiently.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Représente un dictionnaire trié qui mute, avec peu ou pas d’allocations de mémoire, et qui peut produire ou créer efficacement sur des instances de dictionnaire trié.
NuGet package: System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Add(`0,`1)">
      <summary vsli:raw="Adds an element that has the specified key and value to the immutable sorted dictionary.">Ajoute un élément avec la clé et la valeur spécifiées au dictionnaire trié immuable.</summary>
      <param name="key" vsli:raw="The key of the element to add.">Clé de l'élément à ajouter.</param>
      <param name="value" vsli:raw="The value of the element to add.">Valeur de l'élément à ajouter.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Adds the specified item to the immutable sorted dictionary.">Ajoute l’élément spécifié au dictionnaire trié immuable.</summary>
      <param name="item" vsli:raw="The object to add to the dictionary.">Objet à ajouter au dictionnaire.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Adds a sequence of values to the immutable sorted dictionary.">Ajoute une séquence de valeurs au dictionnaire trié immuable.</summary>
      <param name="items" vsli:raw="The items to add to the dictionary.">Éléments à ajouter au dictionnaire.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Clear">
      <summary vsli:raw="Removes all items from the immutable sorted dictionary.">Supprime tous les éléments du dictionnaire trié immuable.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether the immutable sorted dictionary contains a specific value.">Détermine si le dictionnaire trié immuable contient une valeur spécifique.</summary>
      <param name="item" vsli:raw="The object to locate in the dictionary.">Objet à rechercher dans le dictionnaire.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="item" /> se trouve dans le dictionnaire ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ContainsKey(`0)">
      <summary vsli:raw="Determines whether the immutable sorted dictionary contains an element with the specified key.">Détermine si le dictionnaire trié immuable contient un élément avec la clé spécifiée.</summary>
      <param name="key" vsli:raw="The key to locate in the dictionary.">Clé à rechercher dans le dictionnaire.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le dictionnaire contient un élément avec la clé ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ContainsValue(`1)">
      <summary vsli:raw="Determines whether the immutable sorted dictionary contains an element with the specified value.">Détermine si le dictionnaire trié immuable contient un élément avec la valeur spécifiée.</summary>
      <param name="value" vsli:raw="The value to locate in the dictionary. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Valeur à rechercher dans le dictionnaire. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the immutable sorted dictionary contains an element with the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le dictionnaire trié immuable contient un élément avec la valeur spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Count">
      <summary vsli:raw="Gets the number of elements in this immutable sorted dictionary.">Obtient le nombre d’éléments dans ce dictionnaire trié immuable.</summary>
      <returns vsli:raw="The number of elements in this dictionary.">Nombre d’éléments dans ce dictionnaire.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable sorted dictionary.">Retourne un énumérateur qui itère au sein du dictionnaire trié immuable.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the dictionary.">Énumérateur qui peut être utilisé pour itérer au sein du dictionnaire.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetValueOrDefault(`0)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary; otherwise the default value.">Obtient la valeur d’une clé spécifique, si une clé correspondante existe dans le dictionnaire ; sinon, la valeur par défaut.</summary>
      <param name="key" vsli:raw="The key to search for.">Clé à rechercher.</param>
      <returns vsli:raw="The value for the key, or &lt;c&gt;default(TValue)&lt;/c&gt; if no matching key was found.">Valeur de la clé, ou <c>default(TValue)</c> si aucune clé correspondante n’a été trouvée.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetValueOrDefault(`0,`1)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary; otherwise the default value.">Obtient la valeur d’une clé spécifique, si une clé correspondante existe dans le dictionnaire ; sinon, la valeur par défaut.</summary>
      <param name="key" vsli:raw="The key to search for.">Clé à rechercher.</param>
      <param name="defaultValue" vsli:raw="The default value to return if no matching key is found in the dictionary.">Valeur par défaut à retourner si aucune clé correspondante n’est trouvée dans le dictionnaire.</param>
      <returns vsli:raw="The value for the key, or &lt;paramref name=&quot;defaultValue&quot; /&gt; if no matching key was found.">Valeur de la clé, ou <paramref name="defaultValue" /> si aucune clé n’a été trouvée.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Item(`0)">
      <summary vsli:raw="Gets or sets the value for a specified key in the immutable sorted dictionary.">Obtient ou définit la valeur d’une clé spécifiée dans le dictionnaire trié immuable.</summary>
      <param name="key" vsli:raw="The key to retrieve the value for.">Clé permettant de récupérer la valeur.</param>
      <returns vsli:raw="The value associated with the given key.">Valeur associée à la clé donnée.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.KeyComparer">
      <summary vsli:raw="Gets or sets the key comparer.">Obtient ou définit le comparateur de clé.</summary>
      <returns vsli:raw="The key comparer.">Comparateur de clé.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Keys">
      <summary vsli:raw="Gets a strongly typed, read-only collection of elements.">Obtient une collection fortement typée, en lecture seule, des éléments.</summary>
      <returns vsli:raw="A strongly typed, read-only collection of elements.">Collection fortement typée, en lecture seule, des éléments.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the immutable sorted dictionary.">Supprime l’élément avec la clé spécifiée du dictionnaire trié immuable.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Clé de l'élément à supprimer.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; was not found in the original dictionary.">
        <see langword="true" /> si la suppression de l'élément réussit ; sinon, <see langword="false" />. Cette méthode retourne également <see langword="false" /> si <paramref name="key" /> est introuvable dans le dictionnaire d’origine.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable sorted dictionary.">Supprime la première occurrence d’un objet spécifique à partir du dictionnaire trié immuable.</summary>
      <param name="item" vsli:raw="The object to remove from the dictionary.">Objet à supprimer du dictionnaire.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is not found in the dictionary.">
        <see langword="true" /> si <paramref name="item" /> a été correctement supprimé du dictionnaire ; sinon, <see langword="false" />. Cette méthode retourne également <see langword="false" /> si <paramref name="item" /> est introuvable dans le dictionnaire.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes any entries with keys that match those found in the specified sequence from the immutable sorted dictionary.">Supprime toutes les entrées avec des clés qui correspondent à ceux de la séquence spécifiée du dictionnaire trié immuable.</summary>
      <param name="keys" vsli:raw="The keys for entries to remove from the dictionary.">Clés pour les entrées à supprimer du dictionnaire.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing." />
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the dictionary to an array, starting at a particular array index.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Copie les éléments du dictionnaire dans un tableau, en commençant à un index de tableau particulier.
NuGet package: System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing.">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir du dictionnaire. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value that indicates whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Obtient une valeur qui indique si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread safe).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe) ; sinon <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Obtient un objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the dictionary object.">Ajoute un élément avec la valeur et la clé fournies à l’objet dictionary.</summary>
      <param name="key" vsli:raw="The key of the element to add.">Clé de l'élément à ajouter.</param>
      <param name="value" vsli:raw="The value of the element to add.">Valeur de l'élément à ajouter.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the dictionary object contains an element with the specified key.">Détermine si l’objet dictionary contient un élément avec la clé spécifiée.</summary>
      <param name="key" vsli:raw="The key to locate.">Clé à rechercher.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le dictionnaire contient un élément avec la clé ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the dictionary.">Retourne un objet <see cref="T:System.Collections.IDictionaryEnumerator" /> pour le dictionnaire.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the dictionary.">Objet <see cref="T:System.Collections.IDictionaryEnumerator" /> pour le dictionnaire.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size.">Obtient une valeur qui indique si l'objet <see cref="T:System.Collections.IDictionary" /> est de taille fixe.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’objet <see cref="T:System.Collections.IDictionary" /> a une taille fixe ; dans le cas contraire, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Obtient une valeur qui indique si l'objet <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">Obtient ou définit l'élément à l'aide de la clé spécifiée.</summary>
      <param name="key" vsli:raw="The key.">Clé.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Obtient un <see cref="T:System.Collections.Generic.ICollection`1" /> contenant les clés de <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> contenant les clés de l’objet qui implémente <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the dictionary.">Supprime l’élément avec la clé spécifiée du dictionnaire.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Clé de l'élément à supprimer.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Obtient <see cref="T:System.Collections.Generic.ICollection`1" /> contenant les valeurs de <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> contenant les valeurs de l’objet qui implémente <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Retourne un énumérateur qui itère au sein d’une collection.</summary>
      <returns vsli:raw="An enumerator object that can be used to iterate through the collection.">Objet enumerator qui peut servir à effectuer une itération dans la collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ToImmutable">
      <summary vsli:raw="Creates an immutable sorted dictionary based on the contents of this instance.">Crée un dictionnaire trié immuable en fonction du contenu de cette instance.</summary>
      <returns vsli:raw="An immutable sorted dictionary.">Dictionnaire trié immuable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.TryGetKey(`0,`0@)">
      <summary vsli:raw="Determines whether this dictionary contains a specified key.">Détermine si ce dictionnaire contient la clé spécifiée.</summary>
      <param name="equalKey" vsli:raw="The key to search for.">Clé à rechercher.</param>
      <param name="actualKey" vsli:raw="The matching key located in the dictionary if found, or &lt;c&gt;equalkey&lt;/c&gt; if no match is found.">Clé correspondante située dans le dictionnaire, le cas échéant, ou <c>equalkey</c> si aucune correspondance n’est trouvée.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a match for &lt;paramref name=&quot;equalKey&quot; /&gt; is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si une correspondance pour <paramref name="equalKey" /> est trouvée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.TryGetValue(`0,`1@)">
      <summary vsli:raw="Gets the value associated with the specified key.">Obtient la valeur associée à la clé spécifiée.</summary>
      <param name="key" vsli:raw="The key whose value will be retrieved.">Clé dont la valeur sera récupérée.</param>
      <param name="value" vsli:raw="When this method returns, contains the value associated with the specified key, if the key is found; otherwise, contains the default value for the type of the &lt;paramref name=&quot;value&quot; /&gt; parameter. This parameter is passed uninitialized.">Cette méthode retourne la valeur associée à la clé spécifiée, si la clé est trouvée ; sinon, retourne la valeur par défaut pour le type du paramètre <paramref name="value" />. Ce paramètre est passé sans être initialisé.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object that implements the dictionary contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’objet qui implémente le dictionnaire contient un élément avec la clé spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ValueComparer">
      <summary vsli:raw="Gets or sets the value comparer.">Obtient ou définit le comparateur de valeur.</summary>
      <returns vsli:raw="The value comparer.">Comparateur de valeur.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ValueRef(`0)">
      <summary vsli:raw="Returns a read-only reference to the value associated with the provided &lt;paramref name=&quot;key&quot; /&gt;.">Retourne une référence en lecture seule à la valeur associée au <paramref name="key" /> fourni.</summary>
      <param name="key" vsli:raw="Key of the entry to be looked up." />
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="The &lt;paramref name=&quot;key&quot; /&gt; is not present.">
        <paramref name="key" /> n’est pas présent.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Values">
      <summary vsli:raw="Gets a collection that contains the values of the immutable sorted dictionary.">Obtient une collection qui contient les valeurs du dictionnaire trié immuable.</summary>
      <returns vsli:raw="A collection that contains the values of the object that implements the dictionary.">Collection qui contient les valeurs de l’objet qui implémente le dictionnaire.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Clear">
      <summary vsli:raw="Retrieves an empty immutable sorted dictionary that has the same ordering and key/value comparison rules as this dictionary instance.">Récupère un dictionnaire trié immuable vide qui possède les mêmes règles de comparaison de classement et de clé/valeur que cette instance du dictionnaire.</summary>
      <returns vsli:raw="An empty dictionary with equivalent ordering and key/value comparison rules.">Dictionnaire vide avec des règles de comparaison de classement et de clé/valeur équivalentes.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether this immutable sorted dictionary contains the specified key/value pair.">Détermine si ce dictionnaire trié immuable contient la paire clé/valeur spécifiée.</summary>
      <param name="pair" vsli:raw="The key/value pair to locate.">Paire clé/valeur à rechercher.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified key/value pair is found in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la paire clé/valeur spécifiée est trouvée dans le dictionnaire ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ContainsKey(`0)">
      <summary vsli:raw="Determines whether this immutable sorted map contains the specified key.">Détermine si cette table triée immuable contient la clé spécifiée.</summary>
      <param name="key" vsli:raw="The key to locate.">Clé à rechercher.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the immutable dictionary contains the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le dictionnaire immuable contient la clé spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ContainsValue(`1)">
      <summary vsli:raw="Determines whether the immutable sorted dictionary contains an element with the specified value.">Détermine si le dictionnaire trié immuable contient un élément avec la valeur spécifiée.</summary>
      <param name="value" vsli:raw="The value to locate. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Valeur à rechercher. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le dictionnaire contient un élément qui possède la valeur spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Count">
      <summary vsli:raw="Gets the number of key/value pairs in the immutable sorted dictionary.">Obtient le nombre de paires clé/valeur dans le dictionnaire trié immuable.</summary>
      <returns vsli:raw="The number of key/value pairs in the dictionary.">Nombre de paires clé/valeur dans le dictionnaire.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableSortedDictionary`2.Empty">
      <summary vsli:raw="Gets an empty immutable sorted dictionary.">Obtient un dictionnaire trié immuable vide.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator">
      <summary vsli:raw="Enumerates the contents of a binary tree.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Énumère le contenu d’une arborescence binaire.
Package NuGet : System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtient l'élément situé à la position actuelle de l'énumérateur.</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">Élément situé à la position actuelle de l’énumérateur.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Dispose">
      <summary vsli:raw="Releases the resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator&quot; /&gt; class.">Libère les ressources utilisées par l'instance actuelle de la classe <see cref="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable sorted dictionary.">Avance l’énumérateur à l’élément suivant du dictionnaire trié immuable.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the sorted dictionary.">
        <see langword="true" /> si l’énumérateur a pu avancer jusqu’à l’élément suivant ; <see langword="false" /> si l’énumérateur a dépassé la fin du dictionnaire trié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the immutable sorted dictionary.">Rétablit l’énumérateur à sa position initiale, qui précède le premier élément du dictionnaire trié immuable.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="The current element.">Élément actuel.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable sorted dictionary.">Retourne un énumérateur qui itère au sein du dictionnaire trié immuable.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the dictionary.">Énumérateur qui peut être utilisé pour itérer au sein du dictionnaire.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this instance of the immutable sorted dictionary is empty.">Obtient une valeur qui indique si cette instance du dictionnaire trié immuable est vide.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si cette instance est valide ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Item(`0)">
      <summary vsli:raw="Gets the &lt;paramref name=&quot;TValue&quot; /&gt; associated with the specified key.">Obtient le <paramref name="TValue" /> associé à la clé spécifiée.</summary>
      <param name="key" vsli:raw="The key to retrieve the value for.">Clé permettant de récupérer la valeur.</param>
      <returns vsli:raw="The value associated with the specified key. If no results are found, the operation throws an exception.">Valeur associée à la clé spécifiée. Si aucun résultat n’est trouvé, l’opération lève une exception.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.KeyComparer">
      <summary vsli:raw="Gets the key comparer for the immutable sorted dictionary.">Obtient le comparateur de clé pour le dictionnaire trié immuable.</summary>
      <returns vsli:raw="The key comparer for the dictionary.">Comparateur de clé pour le dictionnaire.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Keys">
      <summary vsli:raw="Gets the keys in the immutable sorted dictionary.">Obtient les clés dans le dictionnaire trié immuable.</summary>
      <returns vsli:raw="The keys in the immutable dictionary.">Clés dans le dictionnaire immuable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified value from the immutable sorted dictionary.">Supprime l’élément avec la valeur spécifiée du dictionnaire trié immuable.</summary>
      <param name="value" vsli:raw="The value of the element to remove.">Valeur de l’élément à supprimer.</param>
      <returns vsli:raw="A new immutable dictionary with the specified element removed; or this instance if the specified value cannot be found in the dictionary.">Nouveau dictionnaire immuable avec l’élément spécifié supprimé ; ou cette instance si la valeur spécifiée est introuvable dans le dictionnaire.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements with the specified keys from the immutable sorted dictionary.">Supprime les éléments avec les clés spécifiées du dictionnaire trié immuable.</summary>
      <param name="keys" vsli:raw="The keys of the elements to remove.">Clés des éléments à supprimer.</param>
      <returns vsli:raw="A new immutable dictionary with the specified keys removed; or this instance if the specified keys cannot be found in the dictionary.">Nouveau dictionnaire immuable avec les clés spécifiées supprimées ; ou cette instance si les clés spécifiées sont introuvables dans le dictionnaire.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.SetItem(`0,`1)">
      <summary vsli:raw="Sets the specified key and value in the immutable sorted dictionary, possibly overwriting an existing value for the given key.">Définit la clé et la valeur spécifiées dans le dictionnaire trié immuable, en remplaçant éventuellement une valeur existante pour la clé donnée.</summary>
      <param name="key" vsli:raw="The key of the entry to add.">Clé de l'entrée à ajouter.</param>
      <param name="value" vsli:raw="The key value to set.">Valeur de clé à définir.</param>
      <returns vsli:raw="A new immutable sorted dictionary that contains the specified key/value pair.">Nouveau dictionnaire trié immuable qui contient la paire clé/valeur spécifiée.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Sets the specified key/value pairs in the immutable sorted dictionary, possibly overwriting existing values for the keys.">Définit les paires clé/valeur spécifiées dans le dictionnaire trié immuable, en remplaçant éventuellement des valeurs existantes pour les clés.</summary>
      <param name="items" vsli:raw="The key/value pairs to set in the dictionary. If any of the keys already exist in the dictionary, this method will overwrite their previous values.">Paires clé/valeur à définir dans le dictionnaire. Si une clé existe déjà dans le dictionnaire, cette méthode remplace leurs valeurs précédentes.</param>
      <returns vsli:raw="An immutable dictionary that contains the specified key/value pairs.">Dictionnaire immuable qui contient les paires clé/valeur spécifiées.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing." />
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" vsli:raw="The object to remove from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" vsli:raw="The object to use as the key of the element to add." />
      <param name="value" vsli:raw="The object to use as the value of the element to add." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Item(`0)">
      <param name="key" vsli:raw="The object to use as the key of the element to access." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" vsli:raw="The key of the element to remove." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the dictionary to an array, starting at a particular array index.">Copie les éléments du dictionnaire dans un tableau, en commençant à un index de tableau particulier.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing.">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir du dictionnaire. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Obtient une valeur indiquant si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread-safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’accès à la <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe); dans le cas contraire, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Obtient un objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the dictionary object.">Ajoute un élément avec la valeur et la clé fournies à l’objet dictionary.</summary>
      <param name="key" vsli:raw="The object to use as the key of the element to add.">Objet à utiliser comme clé de l'élément à ajouter.</param>
      <param name="value" vsli:raw="The object to use as the value of the element to add.">Objet à utiliser comme valeur de l'élément à ajouter.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Clear">
      <summary vsli:raw="Clears this instance.">Supprime cette instance.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary object is read-only.">L’objet dictionary est en lecture seule.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the immutable dictionary object contains an element with the specified key.">Détermine si l’objet dictionary immuable contient un élément avec la clé spécifiée.</summary>
      <param name="key" vsli:raw="The key to locate in the dictionary object.">Clé à rechercher dans l’objet dictionary.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le dictionnaire contient un élément avec la clé ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the immutable dictionary object.">Retourne un objet <see cref="T:System.Collections.IDictionaryEnumerator" /> pour l’objet dictionary immuable.</summary>
      <returns vsli:raw="An enumerator object for the dictionary object.">Objet enumerator pour l’objet dictionary.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size.">Obtient une valeur indiquant si l'objet <see cref="T:System.Collections.IDictionary" /> est de taille fixe.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’objet <see cref="T:System.Collections.IDictionary" /> a une taille fixe ; dans le cas contraire, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Obtient une valeur indiquant si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">Obtient ou définit l'élément à l'aide de la clé spécifiée.</summary>
      <param name="key" vsli:raw="The key of the element to be accessed.">Clé.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Obtient un <see cref="T:System.Collections.Generic.ICollection`1" /> contenant les clés de <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> contenant les clés de l’objet qui implémente <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the immutable dictionary object.">Supprime l’élément avec la clé spécifiée de l’objet dictionary immuable.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Clé de l'élément à supprimer.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Obtient <see cref="T:System.Collections.Generic.ICollection`1" /> contenant les valeurs de <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> contenant les valeurs de l’objet qui implémente <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Retourne un énumérateur qui itère au sein d’une collection.</summary>
      <returns vsli:raw="An enumerator object that can be used to iterate through the collection.">Objet enumerator qui peut servir à effectuer une itération dans la collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" vsli:raw="Key of the entry to be added." />
      <param name="value" vsli:raw="Value of the entry to be added." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="pairs" vsli:raw="Sequence of key/value pairs to be added." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" vsli:raw="Key of entry to be removed." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <param name="keys" vsli:raw="Sequence of keys to be removed." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItem(`0,`1)">
      <param name="key" vsli:raw="Key of entry to be updated." />
      <param name="value" vsli:raw="Value of entry to be updated." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="items" vsli:raw="A set of key-value pairs to set on the map." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ToBuilder">
      <summary vsli:raw="Creates an immutable sorted dictionary with the same contents as this dictionary that can be efficiently mutated across multiple operations by using standard mutable interfaces.">Crée un dictionnaire trié immuable avec le même contenu que ce dictionnaire qui peut être efficacement muté entre plusieurs opérations à l’aide des interfaces standard mutables.</summary>
      <returns vsli:raw="A collection with the same contents as this dictionary.">Collection avec le même contenu que ce dictionnaire.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.TryGetKey(`0,`0@)">
      <summary vsli:raw="Determines whether this dictionary contains a specified key.">Détermine si ce dictionnaire contient la clé spécifiée.</summary>
      <param name="equalKey" vsli:raw="The key to search for.">Clé à rechercher.</param>
      <param name="actualKey" vsli:raw="The matching key located in the dictionary if found, or &lt;c&gt;equalkey&lt;/c&gt; if no match is found.">Clé correspondante située dans le dictionnaire, le cas échéant, ou <c>equalkey</c> si aucune correspondance n’est trouvée.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a match for &lt;paramref name=&quot;equalKey&quot; /&gt; is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si une correspondance pour <paramref name="equalKey" /> est trouvée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.TryGetValue(`0,`1@)">
      <summary vsli:raw="Gets the value associated with the specified key.">Obtient la valeur associée à la clé spécifiée.</summary>
      <param name="key" vsli:raw="The key whose value will be retrieved.">Clé dont la valeur sera récupérée.</param>
      <param name="value" vsli:raw="When this method returns, contains the value associated with the specified key, if the key is found; otherwise, contains the default value for the type of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Cette méthode retourne la valeur associée à la clé spécifiée, si la clé est trouvée ; sinon, retourne la valeur par défaut pour le type du paramètre <paramref name="value" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le dictionnaire contient un élément avec la clé spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.ValueComparer">
      <summary vsli:raw="Gets the value comparer used to determine whether values are equal.">Obtient le comparateur de valeur utilisé pour déterminer si les valeurs sont égales.</summary>
      <returns vsli:raw="The value comparer used to determine whether values are equal.">Comparateur de valeur utilisé pour déterminer si les valeurs sont égales.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ValueRef(`0)">
      <summary vsli:raw="Returns a read-only reference to the value associated with the provided &lt;paramref name=&quot;key&quot; /&gt;.">Retourne une référence en lecture seule à la valeur associée au <paramref name="key" /> fourni.</summary>
      <param name="key" vsli:raw="Key of the entry to be looked up." />
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="The &lt;paramref name=&quot;key&quot; /&gt; is not present.">
        <paramref name="key" /> n’est pas présent.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Values">
      <summary vsli:raw="Gets the values in the immutable sorted dictionary.">Obtient les valeurs dans le dictionnaire trié immuable.</summary>
      <returns vsli:raw="The values in the dictionary.">Valeurs du dictionnaire.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.WithComparers(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Gets an instance of the immutable sorted dictionary that uses the specified key comparer.">Obtient une instance du dictionnaire trié immuable qui utilise le comparateur de clé spécifié.</summary>
      <param name="keyComparer" vsli:raw="The key comparer to use.">Comparateur de clé à utiliser.</param>
      <returns vsli:raw="An instance of the immutable dictionary that uses the given comparer.">Une instance du dictionnaire immuable qui utilise le comparateur donné.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.WithComparers(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
      <summary vsli:raw="Gets an instance of the immutable sorted dictionary that uses the specified key and value comparers.">Obtient une instance du dictionnaire trié immuable qui utilise les comparateurs de clé et de valeur spécifiées.</summary>
      <param name="keyComparer" vsli:raw="The key comparer to use.">Comparateur de clé à utiliser.</param>
      <param name="valueComparer" vsli:raw="The value comparer to use.">Comparateur de valeur à utiliser.</param>
      <returns vsli:raw="An instance of the immutable dictionary that uses the given comparers.">Une instance du dictionnaire immuable qui utilise les comparateurs donnés.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableSortedSet`1&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Fournit un ensemble de méthodes d’initialisation pour les instances de la classe <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1" />.
Package NuGet : System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1">
      <summary vsli:raw="Creates an empty immutable sorted set.">Crée un nouvel ensemble trié immuable vide.</summary>
      <typeparam name="T" vsli:raw="The type of items to be stored in the immutable set.">Type des éléments à stocker dans l’ensemble immuable.</typeparam>
      <returns vsli:raw="An empty immutable sorted set.">Ensemble trié immuable vide.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(``0)">
      <summary vsli:raw="Creates a new immutable sorted set that contains the specified item.">Crée un ensemble trié immuable qui contient l’élément spécifié.</summary>
      <param name="item" vsli:raw="The item to prepopulate the set with.">Élément avec lequel préremplir l’ensemble.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable set.">Type des éléments de l’ensemble immuable.</typeparam>
      <returns vsli:raw="A new immutable set that contains the specified item.">Nouvel ensemble immuable qui contient l’élément spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(``0[])">
      <summary vsli:raw="Creates a new immutable sorted set that contains the specified array of items.">Crée un ensemble trié immuable qui contient le tableau spécifié d’éléments.</summary>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the set with.">Tableau qui contient les éléments avec lesquels préremplir l’ensemble.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable set.">Type des éléments de l’ensemble immuable.</typeparam>
      <returns vsli:raw="A new immutable set that contains the specified items.">Nouvel ensemble immuable qui contient l’élément spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Creates an empty immutable sorted set that uses the specified comparer.">Crée un ensemble trié immuable vide qui utilise le comparateur spécifié.</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing items in the set.">Implémentation à utiliser pendant la comparaison d’éléments de l’ensemble.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable set.">Type des éléments de l’ensemble immuable.</typeparam>
      <returns vsli:raw="An empty immutable set.">Ensemble immuable vide.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0)">
      <summary vsli:raw="Creates a new immutable sorted set that contains the specified item and uses the specified comparer.">Crée un ensemble trié immuable qui contient l’élément spécifié et utilise le comparateur spécifié.</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing items in the set.">Implémentation à utiliser pendant la comparaison d’éléments de l’ensemble.</param>
      <param name="item" vsli:raw="The item to prepopulate the set with.">Élément avec lequel préremplir l’ensemble.</param>
      <typeparam name="T" vsli:raw="The type of items stored in the immutable set.">Type des éléments stockés dans l’ensemble immuable.</typeparam>
      <returns vsli:raw="A new immutable set that contains the specified item.">Nouvel ensemble immuable qui contient l’élément spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0[])">
      <summary vsli:raw="Creates a new immutable sorted set that contains the specified array of items and uses the specified comparer.">Crée un ensemble trié immuable qui contient le tableau spécifié d’éléments et utilise le comparateur spécifié.</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing items in the set.">Implémentation à utiliser pendant la comparaison d’éléments de l’ensemble.</param>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the set with.">Tableau qui contient les éléments avec lesquels préremplir l’ensemble.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable set.">Type des éléments de l’ensemble immuable.</typeparam>
      <returns vsli:raw="A new immutable set that contains the specified items.">Nouvel ensemble immuable qui contient l’élément spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1">
      <summary vsli:raw="Returns a collection that can be used to build an immutable sorted set.">Retourne une collection qui peut être utilisée pour générer un ensemble trié immuable.</summary>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">Type des éléments stockés dans la collection.</typeparam>
      <returns vsli:raw="The immutable collection builder.">Générateur de collections immuables.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1(System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Returns a collection that can be used to build an immutable sorted set.">Retourne une collection qui peut être utilisée pour générer un ensemble trié immuable.</summary>
      <param name="comparer" vsli:raw="The comparer used to compare items in the set for equality.">Comparateur utilisé pour comparer des éléments dans l’ensemble d’égalité.</param>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">Type des éléments stockés dans la collection.</typeparam>
      <returns vsli:raw="The immutable collection.">Collections immuables.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable collection that contains the specified items.">Crée une collection immuable qui contient les éléments spécifiés.</summary>
      <param name="comparer" vsli:raw="The comparer to use to compare elements in this set.">Comparateur à utiliser pour comparer les éléments de cet ensemble.</param>
      <param name="items" vsli:raw="The items to add to the set before it's immutable.">Éléments à ajouter à l’ensemble avant qu’il soit immuable.</param>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">Type des éléments stockés dans la collection.</typeparam>
      <returns vsli:raw="The new immutable set that contains the specified items.">Nouvel ensemble immuable qui contient l’élément spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable collection that contains the specified items.">Crée une collection immuable qui contient les éléments spécifiés.</summary>
      <param name="items" vsli:raw="The items to add to the set with before it's immutable.">Éléments à ajouter à l’ensemble avant qu’il soit immuable.</param>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">Type des éléments stockés dans la collection.</typeparam>
      <returns vsli:raw="The new immutable set that contains the specified items.">Nouvel ensemble immuable qui contient l’élément spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Enumerates a sequence and produces an immutable sorted set of its contents.">Énumère une séquence et produit un ensemble trié immuable de son contenu.</summary>
      <param name="source" vsli:raw="The sequence to enumerate.">Séquence à énumérer.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Type des éléments de la séquence.</typeparam>
      <returns vsli:raw="An immutable sorted set that contains the items in the specified sequence.">Ensemble trié immuable qui contient les éléments dans l’ordre spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Enumerates a sequence, produces an immutable sorted set of its contents, and uses the specified comparer.">Énumère une séquence, produit un ensemble trié immuable de son contenu et utilise le comparateur spécifié.</summary>
      <param name="source" vsli:raw="The sequence to enumerate.">Séquence à énumérer.</param>
      <param name="comparer" vsli:raw="The comparer to use for initializing and adding members to the sorted set.">Comparateur à utiliser pour l’initialisation et l’ajout de membres à l’ensemble trié.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Type des éléments de la séquence.</typeparam>
      <returns vsli:raw="An immutable sorted set that contains the items in the specified sequence.">Ensemble trié immuable qui contient les éléments dans l’ordre spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Immutable.ImmutableSortedSet{``0}.Builder)">
      <summary vsli:raw="Creates an immutable sorted set from the current contents of the builder's set.">Crée un ensemble trié immuable à partir du contenu actuel de l’ensemble du générateur.</summary>
      <param name="builder" vsli:raw="The builder to create the immutable sorted set from.">Générateur à partir duquel créer l’ensemble trié immuable.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the immutable sorted set.">Type des éléments dans l’ensemble trié immuable.</typeparam>
      <returns vsli:raw="An immutable sorted set that contains the current contents in the builder's set.">Ensemble trié immuable qui contient le contenu actuel de l’ensemble du générateur.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1">
      <summary vsli:raw="Represents an immutable sorted set implementation.&#xA;&#xA;NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Représente une implémentation de l’ensemble trié immuable.
Package NuGet : System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the set.">Type d'éléments de l'ensemble.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Add(`0)">
      <summary vsli:raw="Adds the specified value to this immutable sorted set.">Ajoute la valeur spécifiée à cet ensemble trié immuable.</summary>
      <param name="value" vsli:raw="The value to add.">Valeur à ajouter.</param>
      <returns vsli:raw="A new set with the element added, or this set if the element is already in this set.">Nouveau jeu avec l’élément ajouté ou ce jeu si l’élément est déjà dans ce jeu.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1.Builder">
      <summary vsli:raw="Represents a sorted set that enables changes with little or no memory allocations, and efficiently manipulates or builds immutable sorted sets.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Représente un ensemble trié qui permet des modifications, avec peu ou pas d’allocations de mémoire, et manipule ou génère efficacement des ensembles triés immuables.
NuGet package: System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Add(`0)">
      <summary vsli:raw="Adds an element to the current set and returns a value to indicate whether the element was successfully added.">Ajoute un élément à l’ensemble actuel et retourne une valeur qui indique si l’ajout a réussi.</summary>
      <param name="item" vsli:raw="The element to add to the set.">Élément à ajouter à l'ensemble.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is added to the set; &lt;see langword=&quot;false&quot; /&gt; if the element is already in the set.">
        <see langword="true" /> si l’élément est ajouté à l’ensemble ; <see langword="false" /> si l’élément figure déjà dans l’ensemble</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Clear">
      <summary vsli:raw="Removes all elements from this set.">Supprime tous les éléments de cet ensemble.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Contains(`0)">
      <summary vsli:raw="Determines whether the set contains the specified object.">Détermine si l’ensemble contient l’objet spécifié.</summary>
      <param name="item" vsli:raw="The object to locate in the set.">Objet à trouver dans l’ensemble.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the set; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="item" /> existe dans l’ensemble ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Count">
      <summary vsli:raw="Gets the number of elements in the immutable sorted set.">Obtient le nombre d’éléments dans l’ensemble trié immuable.</summary>
      <returns vsli:raw="The number of elements in this set.">Nombre d’éléments dans cet ensemble.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the specified set of items from the current set.">Supprime l’ensemble d’éléments spécifié de l’ensemble actuel.</summary>
      <param name="other" vsli:raw="The collection of items to remove from the set.">Collection d'éléments à supprimer de l'ensemble.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the set.">Retourne un énumérateur qui itère au sein de l’ensemble.</summary>
      <returns vsli:raw="A enumerator that can be used to iterate through the set.">Énumérateur permettant d’effectuer une itération au sein de l’ensemble.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are also in a specified collection.">Modifie l'ensemble actuel pour qu'il contienne uniquement les éléments qui figurent également dans une collection spécifiée.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Collection à comparer à l’ensemble actuel.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a proper (strict) subset of a specified collection.">Détermine si l'ensemble actuel est un sous-ensemble (strict) approprié d'une collection spécifiée.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Collection à comparer à l’ensemble actuel.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’ensemble actuel est un sous-ensemble approprié de <paramref name="other" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a proper (strict) superset of a specified collection.">Détermine si l'ensemble actuel est un sur-ensemble de propriété (strict) approprié d'une collection spécifiée.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Collection à comparer à l’ensemble actuel.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’ensemble actuel est un sur-ensemble approprié de <paramref name="other" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a subset of a specified collection.">Détermine si l’ensemble actuel est un sous-ensemble d’une collection spécifiée.</summary>
      <param name="other" vsli:raw="The collection is compare to the current set.">Collection à comparer à l’ensemble actuel.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’ensemble actuel est un sous-ensemble de <paramref name="other" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a superset of a specified collection.">Détermine si l'ensemble actuel est un super-ensemble d'une collection spécifiée.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Collection à comparer à l’ensemble actuel.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’ensemble actuel est un sur-ensemble de <paramref name="other" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Item(System.Int32)">
      <summary vsli:raw="Gets the element of the set at the given index.">Obtient l’élément de l’ensemble à l’index spécifié.</summary>
      <param name="index" vsli:raw="The 0-based index of the element in the set to return.">Index de base zéro de l’élément de l’ensemble à retourner.</param>
      <returns vsli:raw="The element at the given position.">Élément à la position donnée.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference to the element of the set at the given &lt;paramref name=&quot;index&quot; /&gt;.">Obtient une référence en lecture seule à l’élément de l’ensemble au niveau de l’<paramref name="index" /> donné.</summary>
      <param name="index" vsli:raw="The 0-based index of the element in the set to return.">Index de base zéro de l’élément de l’ensemble à retourner.</param>
      <returns vsli:raw="A read-only reference to the element at the given position.">Référence en lecture seule à l’élément à la position donnée.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.KeyComparer">
      <summary vsli:raw="Gets or sets the object that is used to determine equality for the values in the immutable sorted set.">Obtient ou définit l’objet qui est utilisé pour déterminer l’égalité des valeurs dans l’ensemble trié immuable.</summary>
      <returns vsli:raw="The comparer that is used to determine equality for the values in the set.">Comparateur utilisé pour déterminer l’égalité des valeurs dans l’ensemble.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Max">
      <summary vsli:raw="Gets the maximum value in the immutable sorted set, as defined by the comparer.">Obtient la valeur maximale de l’ensemble trié immuable, telle que définie par le comparateur.</summary>
      <returns vsli:raw="The maximum value in the set.">Valeur maximale dans l'ensemble.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Min">
      <summary vsli:raw="Gets the minimum value in the immutable sorted set, as defined by the comparer.">Obtient la valeur minimale de l’ensemble trié immuable, telle que définie par le comparateur.</summary>
      <returns vsli:raw="The minimum value in the set.">Valeur minimale dans l'ensemble.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set overlaps with the specified collection.">Détermine si l’ensemble actuel recoupe la collection spécifiée.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Collection à comparer à l’ensemble actuel.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set and &lt;paramref name=&quot;other&quot; /&gt; share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’ensemble actuel et <paramref name="other" /> partagent au moins un élément commun ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of the specified object from the set.">Supprime la première occurrence de l’objet spécifié de l’ensemble.</summary>
      <param name="item" vsli:raw="The object to remove from the set.">Objet à supprimer de l’ensemble.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was removed from the set; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was not found in the set.">
        <see langword="true" /> si <paramref name="item" /> a été supprimé de l’ensemble ; <see langword="false" /> si <paramref name="item" /> est introuvable dans l’ensemble.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Reverse">
      <summary vsli:raw="Returns an enumerator that iterates over the immutable sorted set in reverse order.">Retourne un énumérateur qui itère dans l’ordre inverse de l’ensemble trié immuable.</summary>
      <returns vsli:raw="An enumerator that iterates over the set in reverse order.">Énumérateur qui itère au sein de l’ensemble dans l’ordre inverse.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set and the specified collection contain the same elements.">Détermine si l'ensemble actuel et la collection spécifiée contiennent les mêmes éléments.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Collection à comparer à l’ensemble actuel.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is equal to &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’ensemble actuel est égal à <paramref name="other" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.">Modifie l’ensemble actuel pour qu’il contienne uniquement les éléments présents dans l’ensemble actuel ou dans la collection spécifiée, mais pas dans les deux à la fois.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Collection à comparer à l’ensemble actuel.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds an element to the current set and returns a value to indicate whether the element was successfully added.">Ajoute un élément à l’ensemble actuel et retourne une valeur qui indique si l’ajout a réussi.</summary>
      <param name="item" vsli:raw="The element to add to the set.">Élément à ajouter à l'ensemble.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the elements of the collection to an array, starting at a particular array index.">Copie les éléments de la collection dans un tableau, en commençant au niveau d’un index de tableau particulier.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from collection. The array must have zero-based indexing.">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir de la collection. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether this instance is read-only.">Obtient une valeur qui indique si cette instance est en lecture seule.</summary>
      <returns vsli:raw="Always &lt;see langword=&quot;false&quot; /&gt;.">Toujours <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Retourne un énumérateur qui itère au sein de la collection.</summary>
      <returns vsli:raw="A enumerator that can be used to iterate through the collection.">Énumérateur permettant d’effectuer une itération au sein de la collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the set to an array, starting at a particular array index.">Copie les éléments de l’ensemble dans un tableau, en commençant au niveau d’un index de tableau particulier.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the set. The array must have zero-based indexing.">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir de l’ensemble. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value that indicates whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread-safe).">Obtient une valeur qui indique si l’accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread-safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’accès à la <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe); dans le cas contraire, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Obtient un objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Retourne un énumérateur qui itère au sein de la collection.</summary>
      <returns vsli:raw="A enumerator that can be used to iterate through the collection.">Énumérateur permettant d’effectuer une itération au sein de la collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ToImmutable">
      <summary vsli:raw="Creates an immutable sorted set based on the contents of this instance.">Crée un ensemble trié immuable en fonction du contenu de cette instance.</summary>
      <returns vsli:raw="An immutable set.">Ensemble immuable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains all elements that are present in both the current set and in the specified collection.">Modifie l’ensemble actuel pour qu’il contienne tous les éléments présents dans l’ensemble actuel, dans la collection spécifiée ou dans les deux.</summary>
      <param name="other" vsli:raw="The collection to compare to the current state.">Collection à comparer à l’état actuel.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Clear">
      <summary vsli:raw="Removes all elements from the immutable sorted set.">Supprime tous les éléments de l’ensemble trié immuable.</summary>
      <returns vsli:raw="An empty set with the elements removed.">Ensemble vide avec les éléments supprimés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Contains(`0)">
      <summary vsli:raw="Determines whether this immutable sorted set contains the specified value.">Détermine si cet ensemble trié immuable contient la valeur spécifiée.</summary>
      <param name="value" vsli:raw="The value to check for.">Valeur à vérifier.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the set contains the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’ensemble contient la valeur spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Count">
      <summary vsli:raw="Gets the number of elements in the immutable sorted set.">Obtient le nombre d’éléments dans l’ensemble trié immuable.</summary>
      <returns vsli:raw="The number of elements in the immutable sorted set.">Nombre d’éléments dans l’ensemble trié immuable.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableSortedSet`1.Empty">
      <summary vsli:raw="Gets an empty immutable sorted set.">Obtient un ensemble trié immuable vide.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator">
      <summary vsli:raw="Enumerates the contents of a binary tree.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Énumère le contenu d’une arborescence binaire.
Package NuGet : System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Obtient l'élément situé à la position actuelle de l'énumérateur.
Package NuGet : System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">Élément situé à la position actuelle de l’énumérateur.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Dispose">
      <summary vsli:raw="Releases the resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Libère les ressources utilisées par l'instance actuelle de la classe <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator" />.
Package NuGet : System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable sorted set.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Avance l’énumérateur à l’élément suivant de l’ensemble trié immuable.
Package NuGet : System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the sorted set.">
        <see langword="true" /> si l’énumérateur a pu avancer jusqu’à l’élément suivant ; <see langword="false" /> si l’énumérateur a dépassé la fin de l’ensemble trié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the immutable sorted set.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Rétablit l’énumérateur à sa position initiale, qui précède le premier élément de l’ensemble trié immuable.
Package NuGet : System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="The current element.">Élément actuel.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes a specified set of items from this immutable sorted set.">Supprime un ensemble d’éléments spécifié de cet ensemble trié immuable.</summary>
      <param name="other" vsli:raw="The items to remove from this set.">Éléments à supprimer de cet ensemble.</param>
      <returns vsli:raw="A new set with the items removed; or the original set if none of the items were in the set.">Nouvel ensemble avec les éléments supprimés ; ou ensemble d’origine si aucun des éléments ne se trouvaient dans l’ensemble.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable sorted set.">Retourne un énumérateur qui itère sur l’ensemble trié immuable.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the set.">Énumérateur qui peut être utilisé pour itérer via l’ensemble.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IndexOf(`0)">
      <summary vsli:raw="Gets the position within this immutable sorted set that the specified value appears in.">Obtient la position dans cet ensemble trié immuable dans lequel la valeur spécifiée apparaît.</summary>
      <param name="item" vsli:raw="The value whose position is being sought.">Valeur dont la position est demandée.</param>
      <returns vsli:raw="The index of the specified &lt;paramref name=&quot;item&quot; /&gt; in the sorted set, if &lt;paramref name=&quot;item&quot; /&gt; is found. If &lt;paramref name=&quot;item&quot; /&gt; is not found and is less than one or more elements in this set, this method returns a negative number that is the bitwise complement of the index of the first element that is larger than value. If &lt;paramref name=&quot;item&quot; /&gt; is not found and is greater than any of the elements in the set, this method returns a negative number that is the bitwise complement of the index of the last element plus 1.">Index du <paramref name="item" /> spécifié dans l’ensemble trié, si <paramref name="item" /> est trouvé. Si <paramref name="item" /> est introuvable et est inférieur à un ou plusieurs éléments de cet ensemble, cette méthode retourne un nombre négatif qui est le complément de bits de l’index du premier élément supérieur à la valeur. Si <paramref name="item" /> est introuvable et est supérieur à un des éléments de l’ensemble, cette méthode retourne un nombre négatif qui est le complément de bits de l’index du dernier élément plus 1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable sorted set that contains elements that exist both in this set and in the specified set.">Crée un ensemble trié immuable qui contient des éléments qui existent dans cet ensemble et dans l’ensemble spécifié.</summary>
      <param name="other" vsli:raw="The set to intersect with this one.">Jeu en intersection avec celui-ci.</param>
      <returns vsli:raw="A new immutable sorted set that contains any elements that exist in both sets.">Nouvel ensemble trié immuable qui contient des éléments qui existent dans les deux ensembles.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this immutable sorted set is empty.">Obtient une valeur qui indique si cet ensemble trié immuable est vide.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this set is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si cet ensemble est vide ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set is a proper (strict) subset of the specified collection.">Détermine si l’ensemble trié immuable actuel est un sous-ensemble approprié (strict) de la collection spécifiée.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Collection à comparer à l’ensemble actuel.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’ensemble actuel est un sous-ensemble approprié de <paramref name="other" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set is a proper superset of a specified collection.">Détermine si l’ensemble trié immuable actuel est un sur-ensemble approprié de la collection spécifiée.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Collection à comparer à l’ensemble actuel.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’ensemble actuel est un sur-ensemble approprié de <paramref name="other" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set is a subset of a specified collection.">Détermine si l’ensemble trié immuable actuel est un sous-ensemble d’une collection spécifiée.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Collection à comparer à l’ensemble actuel.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’ensemble actuel est un sous-ensemble de <paramref name="other" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set is a superset of a specified collection.">Détermine si l’ensemble trié immuable actuel est un sur-ensemble de la collection spécifiée.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Collection à comparer à l’ensemble actuel.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’ensemble actuel est un sur-ensemble de <paramref name="other" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Item(System.Int32)">
      <summary vsli:raw="Gets the element of the immutable sorted set at the given index.">Obtient l’élément de l’ensemble trié immuable à l’index donné.</summary>
      <param name="index" vsli:raw="The index of the element to retrieve from the sorted set.">Index de l’élément à récupérer à partir de l’ensemble trié.</param>
      <returns vsli:raw="The element at the given index.">Élément à l’index donné.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference of the element of the set at the given &lt;paramref name=&quot;index&quot; /&gt;.">Obtient une référence en lecture seule à l’élément de l’ensemble au niveau de l’<paramref name="index" /> donné.</summary>
      <param name="index" vsli:raw="The 0-based index of the element in the set to return.">Index de base zéro de l’élément de l’ensemble à retourner.</param>
      <returns vsli:raw="A read-only reference of the element at the given position.">Obtient une référence en lecture seule à l’élément de l’ensemble à la position donnée.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.KeyComparer">
      <summary vsli:raw="Gets the comparer used to sort keys in the immutable sorted set.">Obtient le comparateur utilisé pour trier les clés dans l’ensemble trié immuable.</summary>
      <returns vsli:raw="The comparer used to sort keys.">Comparateur utilisé pour trier les clés.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Max">
      <summary vsli:raw="Gets the maximum value in the immutable sorted set, as defined by the comparer.">Obtient la valeur maximale de l’ensemble trié immuable, telle que définie par le comparateur.</summary>
      <returns vsli:raw="The maximum value in the set.">Valeur maximale dans l'ensemble.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Min">
      <summary vsli:raw="Gets the minimum value in the immutable sorted set, as defined by the comparer.">Obtient la valeur minimale de l’ensemble trié immuable, telle que définie par le comparateur.</summary>
      <returns vsli:raw="The minimum value in the set.">Valeur minimale dans l'ensemble.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set and a specified collection share common elements.">Détermine si l’ensemble trié immuable actuel et une collection spécifiée partagent des éléments communs.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Collection à comparer à l’ensemble actuel.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set and &lt;paramref name=&quot;other&quot; /&gt; share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’ensemble actuel et <paramref name="other" /> partagent au moins un élément commun ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Remove(`0)">
      <summary vsli:raw="Removes the specified value from this immutable sorted set.">Supprime la valeur spécifiée de cet ensemble trié immuable.</summary>
      <param name="value" vsli:raw="The element to remove.">Élément à supprimer.</param>
      <returns vsli:raw="A new immutable sorted set with the element removed, or this set if the element was not found in the set.">Nouvel ensemble trié immuable avec l’élément supprimé, ou cet ensemble si l’élément est introuvable dans l’ensemble.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Reverse">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that iterates over this immutable sorted set in reverse order.">Retourne un <see cref="T:System.Collections.Generic.IEnumerable`1" /> qui effectue une itération sur cet ensemble trié immuable dans l’ordre inverse.</summary>
      <returns vsli:raw="An enumerator that iterates over the immutable sorted set in reverse order.">Énumérateur qui itère dans l’ordre inverse de l’ensemble trié immuable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set and the specified collection contain the same elements.">Détermine si l’ensemble trié immuable actuel et la collection spécifiée contiennent les mêmes éléments.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Collection à comparer à l’ensemble actuel.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the sets are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si les ensemble sont égaux ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable sorted set that contains elements that exist either in this set or in a given sequence, but not both.">Crée un ensemble trié immuable qui contient des éléments qui existent dans cet ensemble ou dans une séquence donnée, mais pas dans les deux.</summary>
      <param name="other" vsli:raw="The other sequence of items.">Autre séquence d’éléments.</param>
      <returns vsli:raw="The new immutable sorted set.">Nouvel ensemble trié immuable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds the specified value to the collection.">Ajoute la valeur spécifiée à la collection.</summary>
      <param name="item" vsli:raw="The value to add.">Valeur à ajouter.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary vsli:raw="Removes all the items from the collection.">Supprime tous les éléments de la collection.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the elements of the collection to an array, starting at a particular array index.">Copie les éléments de la collection dans un tableau, en commençant au niveau d’un index de tableau particulier.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from collection. The array must have zero-based indexing.">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir de la collection. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Returns true, since immutable collections are always read-only. See the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; interface.">Consultez l’interface <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the collection.">Supprime la première occurrence d’un objet spécifique dans la collection.</summary>
      <param name="item" vsli:raw="The object to remove from the collection.">Objet à supprimer de la collection.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="item" /> a été correctement supprimé de la collection ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Retourne un énumérateur qui itère au sein de la collection.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Énumérateur permettant d'effectuer une itération au sein de la collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts an item in the set at the specified index.">Insère un élément dans l’ensemble à l’index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;item&quot; /&gt; should be inserted.">Index de base zéro au niveau duquel <paramref name="item" /> doit être inséré.</param>
      <param name="item" vsli:raw="The object to insert into the set.">Objet à insérer dans l’ensemble.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary vsli:raw="See the &lt;see cref=&quot;T:System.Collections.Generic.IList`1&quot; /&gt; interface.">Consultez l’interface <see cref="T:System.Collections.Generic.IList`1" />.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to access." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index.">Supprime l’élément au niveau de l’index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">Index de base zéro de l'élément à supprimer.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#Add(`0)">
      <summary vsli:raw="Adds an element to the current set and returns a value to indicate if the element was successfully added.">Ajoute un élément à l’ensemble actuel et retourne une valeur qui indique si l’ajout a réussi.</summary>
      <param name="item" vsli:raw="The element to add to the set.">Élément à ajouter à l'ensemble.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is added to the set; &lt;see langword=&quot;false&quot; /&gt; if the element is already in the set.">
        <see langword="true" /> si l’élément est ajouté à l’ensemble ; <see langword="false" /> si l’élément figure déjà dans l’ensemble.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes all elements in the specified collection from the current set.">Supprime de l’ensemble actuel tous les éléments de la collection spécifiée.</summary>
      <param name="other" vsli:raw="The collection of items to remove from the set.">Collection d'éléments à supprimer de l'ensemble.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are also in a specified collection.">Modifie l'ensemble actuel pour qu'il contienne uniquement les éléments qui figurent également dans une collection spécifiée.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Collection à comparer à l’ensemble actuel.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.">Modifie l’ensemble actuel pour qu’il contienne uniquement les éléments présents dans l’ensemble actuel ou dans la collection spécifiée, mais pas dans les deux à la fois.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Collection à comparer à l’ensemble actuel.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains all elements that are present in either the current set or the specified collection.">Modifie l’ensemble actuel afin qu’il contienne tous les éléments présents dans l’ensemble actuel ou dans la collection spécifiée.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Collection à comparer à l’ensemble actuel.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the set to an array, starting at a particular array index.">Copie les éléments de l’ensemble dans un tableau, en commençant au niveau d’un index de tableau particulier.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the set. The array must have zero-based indexing.">Tableau unidimensionnel qui constitue la destination des éléments copiés à partir de l’ensemble. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Returns true, since immutable collections are always thread-safe. See the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; interface.">Consultez l’interface <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="See &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Consultez <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Retourne un énumérateur qui itère au sein d’une collection.</summary>
      <returns vsli:raw="An enumerator object that can be used to iterate through the collection.">Objet enumerator qui peut servir à effectuer une itération dans la collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the set.">Ajoute un élément à l’ensemble.</summary>
      <param name="value" vsli:raw="The object to add to the set.">Objet à ajouter à l’ensemble.</param>
      <returns vsli:raw="The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection.">Position à laquelle le nouvel élément a été inséré, ou -1 pour indiquer que l’élément n’a pas été inséré dans la collection.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only or has a fixed size.">L’ensemble est en lecture seule ou a une taille fixe.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the set.">Supprime tous les éléments à l’ensemble.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">Levé dans tous les cas.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the set contains a specific value.">Détermine si l’ensemble contient une valeur spécifique.</summary>
      <param name="value" vsli:raw="The object to locate in the set.">Objet à trouver dans l’ensemble.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is found in the set; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’objet se trouve dans l’ensemble, sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the set.">Détermine l’index d’un élément spécifique dans l’ensemble.</summary>
      <param name="value" vsli:raw="The object to locate in the set.">Objet à trouver dans l’ensemble.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">Index de <paramref name="value" /> s'il figure dans la liste ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item into the set at the specified index.">Insère un élément dans l’ensemble à l’index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">Index de base zéro au niveau duquel <paramref name="value" /> doit être inséré.</param>
      <param name="value" vsli:raw="The object to insert into the set.">Objet à insérer dans l’ensemble.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only or has a fixed size.">L’ensemble est en lecture seule ou a une taille fixe.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size.">Obtient une valeur qui indique si <see cref="T:System.Collections.IList" /> est de taille fixe.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Collections.IList" /> est de taille fixe ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Obtient une valeur qui indique si l'objet <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Collections.Generic.ICollection`1" /> est en lecture seule ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Object&quot; /&gt; at the specified index.">Obtient ou définit le <see cref="T:System.Object" /> à l'index spécifié.</summary>
      <param name="index" vsli:raw="The index.">Index.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt;.">
        <see cref="T:System.Object" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the set.">Supprime la première occurrence d’un objet spécifique de l’ensemble.</summary>
      <param name="value" vsli:raw="The object to remove from the set.">Objet à supprimer de l’ensemble.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only or has a fixed size.">L’ensemble est en lecture seule ou a une taille fixe.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index of the set.">Supprime l’élément au niveau de l’index spécifié dans l’ensemble.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">Index de base zéro de l'élément à supprimer.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only or has a fixed size.">L’ensemble est en lecture seule ou a une taille fixe.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Add(`0)">
      <summary vsli:raw="Adds the specified element to this immutable set.">Ajoute l’élément spécifié à cet ensemble immuable.</summary>
      <param name="value" vsli:raw="The element to add.">Élément à ajouter.</param>
      <returns vsli:raw="A new set with the element added, or this set if the element is already in the set.">Nouvel l’ensemble avec l’élément ajouté ou cet ensemble si l’élément est déjà dans cet ensemble.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Clear">
      <summary vsli:raw="Retrieves an empty immutable set that has the same sorting and ordering semantics as this instance.">Récupère un ensemble immuable vide qui a la même sémantique de tri et de classement que cette instance.</summary>
      <returns vsli:raw="An empty set that has the same sorting and ordering semantics as this instance.">Ensemble vide qui a la même sémantique de tri et de classement que cette instance.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Except(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements in the specified collection from the current immutable set.">Supprime les éléments de la collection spécifiée de l’ensemble actuel immuable.</summary>
      <param name="other" vsli:raw="The items to remove from this set.">Éléments à supprimer de cet ensemble.</param>
      <returns vsli:raw="The new set with the items removed; or the original set if none of the items were in the set.">Nouvel ensemble avec les éléments supprimés ; ou ensemble d’origine si aucun des éléments ne se trouvaient dans l’ensemble.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains elements that exist in both this set and the specified set.">Crée un ensemble immuable qui contient des éléments qui existent dans cet ensemble et l’ensemble spécifié.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Collection à comparer à l’ensemble actuel.</param>
      <returns vsli:raw="A new immutable set that contains any elements that exist in both sets.">Nouvel ensemble immuable qui contient des éléments qui existent dans les deux ensembles.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Remove(`0)">
      <summary vsli:raw="Removes the specified element from this immutable set.">Supprime l’élément spécifié de cet ensemble immuable.</summary>
      <param name="value" vsli:raw="The element to remove.">Élément à supprimer.</param>
      <returns vsli:raw="A new set with the specified element removed, or the current set if the element cannot be found in the set.">Nouvel ensemble avec l’élément spécifié supprimé, ou ensemble actuel si l’élément est introuvable dans l’ensemble.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains only elements that are present either in the current set or in the specified collection, but not both.">Crée un ensemble immuable qui contient uniquement les éléments qui sont présents dans l’ensemble actuel ou dans la collection spécifiée, mais pas dans les deux.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Collection à comparer à l’ensemble actuel.</param>
      <returns vsli:raw="A new set that contains the elements that are present only in the current set or in the specified collection, but not both.">Nouvel ensemble qui contient les éléments qui sont présents uniquement dans l’ensemble actuel ou dans la collection spécifiée, mais pas dans les deux.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Union(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates a new immutable set that contains all elements that are present in either the current set or in the specified collection.">Crée un nouvel ensemble immuable qui contient tous les éléments qui sont présents dans l’ensemble actuel ou dans la collection spécifiée.</summary>
      <param name="other" vsli:raw="The collection to add elements from.">Collection à partir de laquelle ajouter des éléments.</param>
      <returns vsli:raw="A new immutable set with the items added; or the original set if all the items were already in the set.">Nouvel ensemble immuable avec les éléments ajoutés ; ou ensemble d’origine si tous les éléments étaient déjà présents dans le jeu.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.ToBuilder">
      <summary vsli:raw="Creates a collection that has the same contents as this immutable sorted set that can be efficiently manipulated by using standard mutable interfaces.">Crée une collection qui a le même contenu que cet ensemble trié immuable pouvant être manipulée efficacement à l’aide des interfaces standard mutables.</summary>
      <returns vsli:raw="The sorted set builder.">Générateur d’ensembles triés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.TryGetValue(`0,`0@)">
      <summary vsli:raw="Searches the set for a given value and returns the equal value it finds, if any.">Recherche dans l’ensemble une valeur donnée et retourne la valeur égale qu’il trouve, le cas échéant.</summary>
      <param name="equalValue" vsli:raw="The value to search for.">La valeur à rechercher.</param>
      <param name="actualValue" vsli:raw="The value from the set that the search found, or the original value if the search yielded no match.">Valeur de l’ensemble que la recherche a trouvée, ou valeur d’origine si la recherche n’a trouvé aucune correspondance.</param>
      <returns vsli:raw="A value indicating whether the search was successful.">Valeur qui indique si la recherche a réussi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds a given set of items to this immutable sorted set.">Ajoute un ensemble donné d’éléments à cet ensemble trié immuable.</summary>
      <param name="other" vsli:raw="The items to add.">Éléments à ajouter.</param>
      <returns vsli:raw="The new set with the items added; or the original set if all the items were already in the set.">Nouvel ensemble d’éléments ajoutés ; ou ensemble d’origine si tous les éléments étaient déjà présents dans le jeu.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.WithComparer(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Returns the immutable sorted set that has the specified key comparer.">Retourne l’ensemble trié immuable ayant le comparateur de clé spécifié.</summary>
      <param name="comparer" vsli:raw="The comparer to check for.">Comparateur à vérifier.</param>
      <returns vsli:raw="The immutable sorted set that has the specified key comparer.">Ensemble trié immuable doté du comparateur de clé spécifié.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableStack`1&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Fournit un ensemble de méthodes d’initialisation pour les instances de la classe <see cref="T:System.Collections.Immutable.ImmutableStack`1" />.
NuGet package: System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1">
      <summary vsli:raw="Creates an empty immutable stack.">Crée une pile immuable vide.</summary>
      <typeparam name="T" vsli:raw="The type of items to be stored in the immutable stack.">Type des éléments à stocker dans la pile immuable.</typeparam>
      <returns vsli:raw="An empty immutable stack.">Pile immuable vide.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1(``0)">
      <summary vsli:raw="Creates a new immutable stack that contains the specified item.">Crée une nouvelle pile immuable qui contient l’élément spécifié.</summary>
      <param name="item" vsli:raw="The item to prepopulate the stack with.">Élément avec lequel préremplir la pile.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable stack.">Type d’éléments dans la pile immuable.</typeparam>
      <returns vsli:raw="A new immutable collection that contains the specified item.">Nouvelle collection immuable qui contient l’élément spécifié.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1(``0[])">
      <summary vsli:raw="Creates a new immutable stack that contains the specified array of items.">Crée une nouvelle pile immuable qui contient le tableau spécifié d’éléments.</summary>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the stack with.">Tableau qui contient les éléments avec lesquels préremplir la pile.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable stack.">Type d’éléments dans la pile immuable.</typeparam>
      <returns vsli:raw="A new immutable stack that contains the specified items.">Nouvelle pile immuable qui contient les éléments spécifiés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable stack that contains the specified items.">Crée une nouvelle pile immuable qui contient les éléments spécifiés.</summary>
      <param name="items" vsli:raw="The items to add to the stack before it's immutable.">Éléments à ajouter à la pile avant qu’elle soit immuable.</param>
      <typeparam name="T" vsli:raw="The type of items in the stack.">Type des éléments dans la pile.</typeparam>
      <returns vsli:raw="An immutable stack that contains the specified items.">Pile immuable qui contient les éléments spécifiés.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Pop``1(System.Collections.Immutable.IImmutableStack{``0},``0@)">
      <summary vsli:raw="Removes the specified item from an immutable stack.">Supprime l’élément spécifié d’une pile immuable.</summary>
      <param name="stack" vsli:raw="The stack to modify.">Pile à modifier.</param>
      <param name="value" vsli:raw="The item to remove from the stack.">Élément à supprimer de la pile.</param>
      <typeparam name="T" vsli:raw="The type of items contained in the stack.">Type d’éléments contenus dans la pile.</typeparam>
      <returns vsli:raw="A stack; never &lt;see langword=&quot;null&quot; /&gt;.">Une pile ; jamais <see langword="null" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">La pile est vide.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack`1">
      <summary vsli:raw="Represents an immutable stack.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Représente une pile immuable.
NuGet package: System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="T" vsli:raw="The type of element on the stack.">Type d’élément sur la pile.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Clear">
      <summary vsli:raw="Removes all objects from the immutable stack.">Supprime tous les objets de la pile immuable.</summary>
      <returns vsli:raw="An empty immutable stack.">Pile immuable vide.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.Empty">
      <summary vsli:raw="Gets an empty immutable stack.">Obtient une pile immuable vide.</summary>
      <returns vsli:raw="An empty immutable stack.">Pile immuable vide.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack`1.Enumerator">
      <summary vsli:raw="Enumerates the contents of an immutable stack without allocating any memory.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Énumère le contenu d’une pile immuable sans allouer de mémoire.
Package NuGet : System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtient l'élément situé à la position actuelle de l'énumérateur.</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">Élément situé à la position actuelle de l’énumérateur.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable stack.">Avance l’énumérateur à l’élément suivant de la pile immuable.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the stack.">
        <see langword="true" /> si l’énumérateur a pu avancer jusqu’à l’élément suivant ; <see langword="false" /> si l’énumérateur a atteint la fin de la pile.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable stack.">Retourne un énumérateur qui itère sur la pile immuable.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the stack.">Énumérateur qui peut être utilisé pour itérer via la pile.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this instance of the immutable stack is empty.">Obtient une valeur qui indique si cette instance de la pile immuable est vide.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si cette instance est valide ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Peek">
      <summary vsli:raw="Returns the object at the top of the stack without removing it.">Retourne l’objet en haut de la pile sans le supprimer.</summary>
      <returns vsli:raw="The object at the top of the stack.">Objet en haut de la pile.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">La pile est vide.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.PeekRef">
      <summary vsli:raw="Gets a read-only reference to the element on the top of the stack.">Obtient une référence en lecture seule à l’élément situé en haut de la pile.</summary>
      <returns vsli:raw="A read-only reference to the element on the top of the stack.">Référence en lecture seule à l’élément situé en haut de la pile.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">Levée quand la liste est vide.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Pop">
      <summary vsli:raw="Removes the element at the top of the immutable stack and returns the stack after the removal.">Supprime l’élément en haut de la pile immuable et retourne la pile après la suppression.</summary>
      <returns vsli:raw="A stack; never &lt;see langword=&quot;null&quot; /&gt;.">Une pile ; jamais <see langword="null" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">La pile est vide.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Pop(`0@)">
      <summary vsli:raw="Removes the specified element from the immutable stack and returns the stack after the removal.">Supprime l’élément spécifié de la pile immuable et retourne la pile après la suppression.</summary>
      <param name="value" vsli:raw="The value to remove from the stack.">Valeur à supprimer de la pile.</param>
      <returns vsli:raw="A stack; never &lt;see langword=&quot;null&quot; /&gt;.">Une pile ; jamais <see langword="null" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Push(`0)">
      <summary vsli:raw="Inserts an object at the top of the immutable stack and returns the new stack.">Insère un objet en haut de la pile immuable et retourne la nouvelle pile.</summary>
      <param name="value" vsli:raw="The object to push onto the stack.">Objet à pousser vers la pile.</param>
      <returns vsli:raw="The new stack.">Nouvelle pile.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Retourne un énumérateur qui itère au sein de la collection.</summary>
      <returns vsli:raw="An enumerator  that can be used to iterate through the collection.">Énumérateur permettant d’effectuer une itération au sein de la collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Retourne un énumérateur qui itère au sein d’une collection.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; object that can be used to iterate through the collection.">Objet <see cref="T:System.Collections.IEnumerator" /> pouvant être utilisé pour itérer au sein de la collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Clear">
      <summary vsli:raw="Removes all elements from the immutable stack.">Supprime tous les éléments de la pile immuable.</summary>
      <returns vsli:raw="The empty immutable stack.">Pile immuable vide.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Pop">
      <summary vsli:raw="Removes the element at the top of the immutable stack and returns the new stack.">Supprime l’élément en haut de la pile immuable et retourne la nouvelle pile.</summary>
      <returns vsli:raw="The new stack; never &lt;see langword=&quot;null&quot; /&gt;.">Nouvelle pile ; jamais <see langword="null" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Push(`0)">
      <summary vsli:raw="Inserts an element at the top of the immutable stack and returns the new stack.">Insère un élément en haut de la pile immuable et retourne la nouvelle pile.</summary>
      <param name="value" vsli:raw="The element to push onto the stack.">Élément à pousser vers la pile.</param>
      <returns vsli:raw="The new stack.">Nouvelle pile.</returns>
    </member>
    <member name="T:System.Linq.ImmutableArrayExtensions">
      <summary vsli:raw="LINQ extension method overrides that offer greater efficiency for &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; than the standard LINQ methods  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Substitutions de méthode d’extension LINQ qui offrent une plus grande efficacité pour <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> que les méthodes LINQ standard
Package NuGet : System.Collections.Immutable (à propos des collections immuables et de leur installation)</summary>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``0,``0})">
      <summary vsli:raw="Applies a function to a sequence of elements in a cumulative way.">Applique une fonction à une séquence d’éléments de manière cumulative.</summary>
      <param name="immutableArray" vsli:raw="The collection to apply the function to.">Collection à laquelle appliquer la fonction.</param>
      <param name="func" vsli:raw="A function to be invoked on each element, in a cumulative way.">Fonction à appeler sur chaque élément, de manière cumulative.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Type d’élément contenu dans la collection.</typeparam>
      <returns vsli:raw="The final value after the cumulative function has been applied to all elements.">Valeur finale une fois que la fonction cumulative a été appliquée à tous les éléments.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``2(System.Collections.Immutable.ImmutableArray{``1},``0,System.Func{``0,``1,``0})">
      <summary vsli:raw="Applies a function to a sequence of elements in a cumulative way.">Applique une fonction à une séquence d’éléments de manière cumulative.</summary>
      <param name="immutableArray" vsli:raw="The collection to apply the function to.">Collection à laquelle appliquer la fonction.</param>
      <param name="seed" vsli:raw="The initial accumulator value.">Valeur d'accumulation initiale.</param>
      <param name="func" vsli:raw="A function to be invoked on each element, in a cumulative way.">Fonction à appeler sur chaque élément, de manière cumulative.</param>
      <typeparam name="TAccumulate" vsli:raw="The type of the accumulated value.">Type de la valeur cumulée.</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Type d’élément contenu dans la collection.</typeparam>
      <returns vsli:raw="The final accumulator value.">Valeur d'accumulation finale.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``3(System.Collections.Immutable.ImmutableArray{``2},``0,System.Func{``0,``2,``0},System.Func{``0,``1})">
      <summary vsli:raw="Applies a function to a sequence of elements in a cumulative way.">Applique une fonction à une séquence d’éléments de manière cumulative.</summary>
      <param name="immutableArray" vsli:raw="The collection to apply the function to.">Collection à laquelle appliquer la fonction.</param>
      <param name="seed" vsli:raw="The initial accumulator value.">Valeur d'accumulation initiale.</param>
      <param name="func" vsli:raw="A function to be invoked on each element, in a cumulative way.">Fonction à appeler sur chaque élément, de manière cumulative.</param>
      <param name="resultSelector" vsli:raw="A function to transform the final accumulator value into the result type." />
      <typeparam name="TAccumulate" vsli:raw="The type of the accumulated value.">Type de la valeur cumulée.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of result returned by the result selector.">Type de résultat retourné par le sélecteur de résultat.</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Type d’élément contenu dans la collection.</typeparam>
      <returns vsli:raw="The final accumulator value.">Valeur d'accumulation finale.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.All``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Gets a value indicating whether all elements in this array match a given condition.">Obtient une valeur indiquant si tous les éléments de ce tableau correspondent à une condition donnée.</summary>
      <param name="immutableArray" vsli:raw="The array to check for matches.">Tableau pour rechercher les correspondances.</param>
      <param name="predicate" vsli:raw="The predicate.">Prédicat.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Type d’élément contenu dans la collection.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if every element of the source sequence passes the test in the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si chaque élément de la séquence source réussit le test dans le prédicat spécifié ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Gets a value indicating whether the array contains any elements.">Obtient une valeur qui indique si le tableau contient des éléments.</summary>
      <param name="immutableArray" vsli:raw="The array to check for elements.">Tableau pour rechercher les éléments.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Type d’élément contenu dans la collection.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the array contains an elements; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le tableau contient des éléments ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Gets a value indicating whether the array contains any elements that match a specified condition.">Obtient une valeur qui indique si le tableau contient des éléments qui correspondent à une condition spécifiée.</summary>
      <param name="immutableArray" vsli:raw="The array to check for elements.">Tableau pour rechercher les éléments.</param>
      <param name="predicate" vsli:raw="The delegate that defines the condition to match to an element.">Délégué qui définit la condition de correspondance d’un élément.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Type d’élément contenu dans la collection.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an element matches the specified condition; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si un élément correspond à la condition spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Returns a value indicating whether this collection contains any elements.">Retourne une valeur qui indique si cette collection contient des éléments.</summary>
      <param name="builder" vsli:raw="The builder to check for matches.">Générateur pour rechercher les correspondances.</param>
      <typeparam name="T" vsli:raw="The type of elements in the array.">Type des éléments dans le tableau.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the array builder contains any elements; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> Si le générateur de tableaux contient des éléments ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ElementAt``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)">
      <summary vsli:raw="Returns the element at a specified index in the array.">Retourne l’élément à l’index spécifié dans le tableau.</summary>
      <param name="immutableArray" vsli:raw="The array to find an element in.">Tableau dans lequel rechercher un élément.</param>
      <param name="index" vsli:raw="The index for the element to retrieve.">Index de l’élément à récupérer.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Type d’élément contenu dans la collection.</typeparam>
      <returns vsli:raw="The item at the specified index.">Élément situé à l'index spécifié.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ElementAtOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)">
      <summary vsli:raw="Returns the element at a specified index in a sequence or a default value if the index is out of range.">Retourne l’élément situé à un index spécifié dans une séquence ou une valeur par défaut si l’index est hors limites.</summary>
      <param name="immutableArray" vsli:raw="The array to find an element in.">Tableau dans lequel rechercher un élément.</param>
      <param name="index" vsli:raw="The index for the element to retrieve.">Index de l’élément à récupérer.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Type d’élément contenu dans la collection.</typeparam>
      <returns vsli:raw="The item at the specified index, or the default value if the index is not found.">Élément à l’index spécifié ou la valeur par défaut si l’index est introuvable.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the first element in an array.">Retourne le premier élément d’un tableau.</summary>
      <param name="immutableArray" vsli:raw="The array to get an item from.">Tableau auprès duquel obtenir un élément.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Type d’élément contenu dans la collection.</typeparam>
      <returns vsli:raw="The first item in the array.">Premier élément du tableau.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="If the array is empty.">Si le tableau est vide.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the first element in a sequence that satisfies a specified condition.">Retourne le premier élément d’une séquence à satisfaire à la condition spécifiée.</summary>
      <param name="immutableArray" vsli:raw="The array to get an item from.">Tableau auprès duquel obtenir un élément.</param>
      <param name="predicate" vsli:raw="The delegate that defines the conditions of the element to search for.">Délégué qui définit les conditions de l’élément à rechercher.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Type d’élément contenu dans la collection.</typeparam>
      <returns vsli:raw="The first item in the list if it meets the condition specified by &lt;paramref name=&quot;predicate&quot; /&gt;.">Premier élément de la liste s’il satisfait la condition spécifiée par <paramref name="predicate" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="If the array is empty.">Si le tableau est vide.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Returns the first element in the collection.">Retourne le premier élément de la collection.</summary>
      <param name="builder" vsli:raw="The builder to retrieve an item from.">Générateur auprès duquel récupérer un élément.</param>
      <typeparam name="T" vsli:raw="The type of items in the array.">Type des éléments du tableau.</typeparam>
      <returns vsli:raw="The first item in the list.">Premier élément de la liste.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="If the array is empty.">Si le tableau est vide.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the first element of a sequence, or a default value if the sequence contains no elements.">Retourne le premier élément d’une séquence ou une valeur par défaut si la séquence ne contient aucun élément.</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve items from.">Tableau auprès duquel récupérer des éléments.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Type d’élément contenu dans la collection.</typeparam>
      <returns vsli:raw="The first item in the list, if found; otherwise the default value for the item type.">Premier élément de la liste, le cas échéant ; sinon, la valeur par défaut pour le type d’élément.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.">Retourne le premier élément de la séquence à satisfaire à une condition ou une valeur par défaut si aucun élément correspondant n’est trouvé.</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve elements from.">Tableau auprès duquel récupérer des éléments.</param>
      <param name="predicate" vsli:raw="The delegate that defines the conditions of the element to search for.">Délégué qui définit les conditions de l’élément à rechercher.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Type d’élément contenu dans la collection.</typeparam>
      <returns vsli:raw="The first item in the list, if found; otherwise the default value for the item type.">Premier élément de la liste, le cas échéant ; sinon, la valeur par défaut pour le type d’élément.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Returns the first element in the collection, or the default value if the collection is empty.">Retourne le premier élément de la collection, ou la valeur par défaut si la collection est vide.</summary>
      <param name="builder" vsli:raw="The builder to retrieve an element from.">Générateur auprès duquel récupérer un élément.</param>
      <typeparam name="T" vsli:raw="The type of item in the builder.">Type d’élément dans le générateur.</typeparam>
      <returns vsli:raw="The first item in the list, if found; otherwise the default value for the item type.">Premier élément de la liste, le cas échéant ; sinon, la valeur par défaut pour le type d’élément.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the last element of the array.">Retourne le dernier élément du tableau.</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve items from.">Tableau auprès duquel récupérer des éléments.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the array.">Type d’élément contenu dans le tableau.</typeparam>
      <returns vsli:raw="The last element in the array.">Dernier élément du tableau.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection is empty.">Levé si la collection est vide.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the last element of a sequence that satisfies a specified condition.">Retourne le dernier élément d’une séquence à satisfaire à la condition spécifiée.</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve elements from.">Tableau auprès duquel récupérer des éléments.</param>
      <param name="predicate" vsli:raw="The delegate that defines the conditions of the element to retrieve.">Délégué qui définit les conditions de l’élément à récupérer.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Type d’élément contenu dans la collection.</typeparam>
      <returns vsli:raw="The last element of the array that satisfies the &lt;paramref name=&quot;predicate&quot; /&gt; condition.">Dernier élément du tableau qui satisfait à la condition <paramref name="predicate" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection is empty.">Levé si la collection est vide.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Returns the last element in the collection.">Retourne le dernier élément de la collection.</summary>
      <param name="builder" vsli:raw="The builder to retrieve elements from.">Générateur auprès duquel récupérer des éléments.</param>
      <typeparam name="T" vsli:raw="The type of item in the builder.">Type d’élément dans le générateur.</typeparam>
      <returns vsli:raw="The last element in the builder.">Dernier élément dans le générateur.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection is empty.">Levé si la collection est vide.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the last element of a sequence, or a default value if the sequence contains no elements.">Retourne le dernier élément d’une séquence ou une valeur par défaut si la séquence ne contient aucun élément.</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve items from.">Tableau auprès duquel récupérer des éléments.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Type d’élément contenu dans la collection.</typeparam>
      <returns vsli:raw="The last element of a sequence, or a default value if the sequence contains no elements.">Dernier élément d’une séquence, ou valeur par défaut si la séquence ne contient aucun élément.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.">Retourne le dernier élément d’une séquence à satisfaire à une condition ou une valeur par défaut si aucun élément correspondant n’est trouvé.</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve an element from.">Tableau auprès duquel récupérer un élément.</param>
      <param name="predicate" vsli:raw="The delegate that defines the conditions of the element to search for.">Délégué qui définit les conditions de l’élément à rechercher.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Type d’élément contenu dans la collection.</typeparam>
      <returns vsli:raw="The last element of a sequence, or a default value if the sequence contains no elements.">Dernier élément d’une séquence, ou valeur par défaut si la séquence ne contient aucun élément.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Returns the last element in the collection, or the default value if the collection is empty.">Retourne le dernier élément de la collection, ou la valeur par défaut si la collection est vide.</summary>
      <param name="builder" vsli:raw="The builder to retrieve an element from.">Générateur auprès duquel récupérer un élément.</param>
      <typeparam name="T" vsli:raw="The type of item in the builder.">Type d’élément dans le générateur.</typeparam>
      <returns vsli:raw="The last element of a sequence, or a default value if the sequence contains no elements.">Dernier élément d’une séquence, ou valeur par défaut si la séquence ne contient aucun élément.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Select``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})">
      <summary vsli:raw="Projects each element of a sequence into a new form.">Projette chaque élément d’une séquence dans un nouveau formulaire.</summary>
      <param name="immutableArray" vsli:raw="The immutable array to select items from.">Tableau immuable à partir duquel sélectionner des éléments.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Fonction de transformation à appliquer à chaque élément.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Type d’élément contenu dans la collection.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result element.">Type de l’élément de résultat.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements are the result of invoking the transform function on each element of source.">Une <see cref="T:System.Collections.Generic.IEnumerable`1" /> dont les éléments résultent d’un appel de la fonction de transformation sur chaque élément de source.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SelectMany``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary vsli:raw="Projects each element of a sequence to an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt;,             flattens the resulting sequences into one sequence, and invokes a result             selector function on each element therein.">Projette chaque élément d’une séquence sur un <see cref="T:System.Collections.Generic.IEnumerable`1" />, aplatit les séquences résultantes en une seule séquence, puis appelle une fonction de sélection de résultat sur chaque élément inclus.</summary>
      <param name="immutableArray" vsli:raw="The immutable array.">Tableau immuable.</param>
      <param name="collectionSelector" vsli:raw="A transform function to apply to each element of the input sequence.">Fonction de transformation à appliquer à chaque élément de la séquence d'entrée.</param>
      <param name="resultSelector" vsli:raw="A transform function to apply to each element of the intermediate sequence.">Fonction de transformation à appliquer à chaque élément de la séquence intermédiaire.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;immutableArray&quot; /&gt;.">Le type des éléments de <paramref name="immutableArray" />.</typeparam>
      <typeparam name="TCollection" vsli:raw="The type of the intermediate elements collected by &lt;paramref name=&quot;collectionSelector&quot; /&gt;.">Type des éléments intermédiaires collectés par <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the elements of the resulting sequence.">Type des éléments de la séquence résultante.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements are the result             of invoking the one-to-many transform function &lt;paramref name=&quot;collectionSelector&quot; /&gt; on each             element of &lt;paramref name=&quot;immutableArray&quot; /&gt; and then mapping each of those sequence elements and their             corresponding source element to a result element.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> dont les éléments résultent d’un appel de la fonction de transformation <paramref name="collectionSelector" /> de type un-à-plusieurs sur chaque élément de <paramref name="immutableArray" /> et du mappage de chacun de ces éléments de séquence ainsi que de leur élément source correspondant à un élément de résultat.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Determines whether two sequences are equal according to an equality comparer.">Détermine si deux séquences sont égales selon un comparateur d’égalité.</summary>
      <param name="immutableArray" vsli:raw="The array to use for comparison.">Tableau à utiliser pour la comparaison.</param>
      <param name="items" vsli:raw="The items to use for comparison.">Éléments à utiliser pour la comparaison.</param>
      <param name="comparer" vsli:raw="The comparer to use to check for equality.">Comparateur à utiliser pour vérifier l’égalité.</param>
      <typeparam name="TDerived" vsli:raw="The type of element in the compared array.">Type d’élément dans le tableau de comparaison.</typeparam>
      <typeparam name="TBase" vsli:raw="The type of element contained by the collection.">Type d’élément contenu dans la collection.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the sequences are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour indiquer que les séquences sont égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Determines whether two sequences are equal according to an equality comparer.">Détermine si deux séquences sont égales selon un comparateur d’égalité.</summary>
      <param name="immutableArray" vsli:raw="The array to use for comparison.">Tableau à utiliser pour la comparaison.</param>
      <param name="items" vsli:raw="The items to use for comparison.">Éléments à utiliser pour la comparaison.</param>
      <param name="comparer" vsli:raw="The comparer to use to check for equality.">Comparateur à utiliser pour vérifier l’égalité.</param>
      <typeparam name="TDerived" vsli:raw="The type of element in the compared array.">Type d’élément dans le tableau de comparaison.</typeparam>
      <typeparam name="TBase" vsli:raw="The type of element contained by the collection.">Type d’élément contenu dans la collection.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the sequences are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour indiquer que les séquences sont égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Func{``1,``1,System.Boolean})">
      <summary vsli:raw="Determines whether two sequences are equal according to an equality comparer.">Détermine si deux séquences sont égales selon un comparateur d’égalité.</summary>
      <param name="immutableArray" vsli:raw="The array to use for comparison.">Tableau à utiliser pour la comparaison.</param>
      <param name="items" vsli:raw="The items to use for comparison.">Éléments à utiliser pour la comparaison.</param>
      <param name="predicate" vsli:raw="The comparer to use to check for equality.">Comparateur à utiliser pour vérifier l’égalité.</param>
      <typeparam name="TDerived" vsli:raw="The type of element in the compared array.">Type d’élément dans le tableau de comparaison.</typeparam>
      <typeparam name="TBase" vsli:raw="The type of element contained by the collection.">Type d’élément contenu dans la collection.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the sequences are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour indiquer que les séquences sont égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.">Retourne l’élément unique d’une séquence ou lève une exception si cette séquence ne contient pas un seul élément.</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve the element from.">Tableau à partir duquel récupérer l’élément.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Type d’élément contenu dans la collection.</typeparam>
      <returns vsli:raw="The element in the sequence.">Élément dans la séquence.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.">Retourne le seul élément d’une séquence qui satisfait à une condition spécifique ou lève une exception si cette séquence contient plusieurs éléments respectant cette condition.</summary>
      <param name="immutableArray" vsli:raw="The immutable array to return a single element from." />
      <param name="predicate" vsli:raw="The function to test whether an element should be returned." />
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Type d’élément contenu dans la collection.</typeparam>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">retourne <see cref="T:System.Boolean" /> ;</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the only element of the array, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.">Retourne l’élément unique d’un tableau ou une valeur par défaut. Cette méthode lève une exception si cette séquence contient plusieurs éléments.</summary>
      <param name="immutableArray" vsli:raw="The array.">Tableau.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Type d’élément contenu dans la collection.</typeparam>
      <returns vsli:raw="The element in the array, or the default value if the array is empty.">Élément dans le tableau ou la valeur par défaut si le tableau est vide.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains more than one element.">
        <paramref name="source" /> contient plusieurs éléments.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.">Retourne l’élément unique d’une séquence ou une valeur par défaut si cette séquence ne contient pas d’élément respectant cette condition. Cette méthode lève une exception si cette séquence contient plusieurs éléments satisfaisant à cette condition.</summary>
      <param name="immutableArray" vsli:raw="The array to get the element from.">Tableau à partir duquel récupérer l’élément.</param>
      <param name="predicate" vsli:raw="The condition the element must satisfy.">Condition que l’élément doit satisfaire.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Type d’élément contenu dans la collection.</typeparam>
      <returns vsli:raw="The element if it satisfies the specified condition; otherwise the default element.">Élément s’il satisfait la condition spécifiée ; sinon, l’élément par défaut.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="More than one element satisfies the condition in &lt;paramref name=&quot;predicate&quot; /&gt;.">Plusieurs éléments satisfont à la condition dans <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToArray``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Copies the contents of this array to a mutable array.">Copie le contenu de ce tableau dans un tableau mutable.</summary>
      <param name="immutableArray" vsli:raw="The immutable array to copy into a mutable one." />
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Type d’élément contenu dans la collection.</typeparam>
      <returns vsli:raw="The newly instantiated array.">Tableau nouvellement instancié.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0})">
      <summary vsli:raw="Creates a dictionary based on the contents of this array.">Crée un dictionnaire basé sur le contenu de ce tableau.</summary>
      <param name="immutableArray" vsli:raw="The array to create a dictionary from.">Tableau à partir duquel créer un dictionnaire.</param>
      <param name="keySelector" vsli:raw="The key selector.">Sélecteur de clé.</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">Type de la clé.</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Type d’élément contenu dans la collection.</typeparam>
      <returns vsli:raw="The newly initialized dictionary.">Dictionnaire qui vient d’être initialisé.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates a dictionary based on the contents of this array.">Crée un dictionnaire basé sur le contenu de ce tableau.</summary>
      <param name="immutableArray" vsli:raw="The array to create a dictionary from.">Tableau à partir duquel créer un dictionnaire.</param>
      <param name="keySelector" vsli:raw="The key selector.">Sélecteur de clé.</param>
      <param name="comparer" vsli:raw="The comparer to initialize the dictionary with.">Comparateur permettant d’initialiser le dictionnaire.</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">Type de la clé.</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Type d’élément contenu dans la collection.</typeparam>
      <returns vsli:raw="The newly initialized dictionary.">Dictionnaire qui vient d’être initialisé.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1})">
      <summary vsli:raw="Creates a dictionary based on the contents of this array.">Crée un dictionnaire basé sur le contenu de ce tableau.</summary>
      <param name="immutableArray" vsli:raw="The array to create a dictionary from.">Tableau à partir duquel créer un dictionnaire.</param>
      <param name="keySelector" vsli:raw="The key selector.">Sélecteur de clé.</param>
      <param name="elementSelector" vsli:raw="The element selector.">Sélecteur d’élément.</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">Type de la clé.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the element.">Type de l'élément.</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Type d’élément contenu dans la collection.</typeparam>
      <returns vsli:raw="The newly initialized dictionary.">Dictionnaire qui vient d’être initialisé.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates a dictionary based on the contents of this array.">Crée un dictionnaire basé sur le contenu de ce tableau.</summary>
      <param name="immutableArray" vsli:raw="The array to create a dictionary from.">Tableau à partir duquel créer un dictionnaire.</param>
      <param name="keySelector" vsli:raw="The key selector.">Sélecteur de clé.</param>
      <param name="elementSelector" vsli:raw="The element selector.">Sélecteur d’élément.</param>
      <param name="comparer" vsli:raw="The comparer to initialize the dictionary with.">Comparateur permettant d’initialiser le dictionnaire.</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">Type de la clé.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the element.">Type de l'élément.</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Type d’élément contenu dans la collection.</typeparam>
      <returns vsli:raw="The newly initialized dictionary.">Dictionnaire qui vient d’être initialisé.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Where``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Filters a sequence of values based on a predicate.">Filtre une séquence de valeurs selon un prédicat.</summary>
      <param name="immutableArray" vsli:raw="The array to filter.">Tableau à filtrer.</param>
      <param name="predicate" vsli:raw="The condition to use for filtering the array content.">Condition à utiliser pour filtrer le contenu du tableau.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Type d’élément contenu dans la collection.</typeparam>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains elements that meet the condition.">Retourne <see cref="T:System.Collections.Generic.IEnumerable`1" /> qui contient les éléments qui répondent à la condition.</returns>
    </member>
  </members>
</doc>
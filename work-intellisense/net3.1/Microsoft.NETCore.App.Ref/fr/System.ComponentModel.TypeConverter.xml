<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.ComponentModel.TypeConverter</name>
  </assembly>
  <members>
    <member name="T:System.ComponentModel.AddingNewEventArgs">
      <summary>Fournit des données pour l'événement <see cref="E:System.Windows.Forms.BindingSource.AddingNew" />.</summary>
    </member>
    <member name="M:System.ComponentModel.AddingNewEventArgs.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.AddingNewEventArgs" /> sans paramètre.</summary>
    </member>
    <member name="M:System.ComponentModel.AddingNewEventArgs.#ctor(System.Object)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.AddingNewEventArgs" /> à l'aide de l'objet spécifié en tant que nouvel élément.</summary>
      <param name="newObject">
        <see cref="T:System.Object" /> à utiliser en tant que la nouvelle valeur d'élément.</param>
    </member>
    <member name="P:System.ComponentModel.AddingNewEventArgs.NewObject">
      <summary>Obtient ou définit l'objet à ajouter à la liste de liaison.</summary>
      <returns>
        <see cref="T:System.Object" /> à ajouter comme un nouvel élément à la collection associée.</returns>
    </member>
    <member name="T:System.ComponentModel.AddingNewEventHandler">
      <summary>Représente la méthode qui gérera l'événement <see cref="E:System.Windows.Forms.BindingSource.AddingNew" />.</summary>
      <param name="sender">Source de l’événement, en général un conteneur de données ou une collection liée aux données.</param>
      <param name="e">
        <see cref="T:System.ComponentModel.AddingNewEventArgs" /> qui contient les données d'événement.</param>
    </member>
    <member name="T:System.ComponentModel.AmbientValueAttribute">
      <summary>Spécifie la valeur à passer à une propriété pour que celle-ci obtienne sa valeur à partir d’une autre source. On appelle cela l’ambiance. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.AmbientValueAttribute" /> avec une valeur Boolean comme valeur.</summary>
      <param name="value">Valeur de cet attribut.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Byte)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.AmbientValueAttribute" /> avec un entier non signé 8 bits comme valeur.</summary>
      <param name="value">Valeur de cet attribut.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Char)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.AmbientValueAttribute" /> avec un caractère Unicode comme valeur.</summary>
      <param name="value">Valeur de cet attribut.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Double)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.AmbientValueAttribute" /> avec un nombre à virgule flottante double précision comme valeur.</summary>
      <param name="value">Valeur de cet attribut.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int16)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.AmbientValueAttribute" /> avec un entier signé 16 bits comme valeur.</summary>
      <param name="value">Valeur de cet attribut.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.AmbientValueAttribute" /> avec un entier signé 32 bits comme valeur.</summary>
      <param name="value">Valeur de cet attribut.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int64)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.AmbientValueAttribute" /> avec un entier signé 64 bits comme valeur.</summary>
      <param name="value">Valeur de cet attribut.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Object)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.AmbientValueAttribute" /> avec un objet comme valeur.</summary>
      <param name="value">Valeur de cet attribut.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Single)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.AmbientValueAttribute" /> avec un nombre à virgule flottante simple précision comme valeur.</summary>
      <param name="value">Valeur de cet attribut.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.AmbientValueAttribute" /> avec une chaîne comme valeur.</summary>
      <param name="value">Valeur de cet attribut.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Type,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.AmbientValueAttribute" /> avec sa valeur et son type.</summary>
      <param name="type">
        <see cref="T:System.Type" /> du paramètre <paramref name="value" />.</param>
      <param name="value">Valeur de cet attribut.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.Equals(System.Object)">
      <summary>Détermine si l'objet <see cref="T:System.ComponentModel.AmbientValueAttribute" /> spécifié est égal à l'objet <see cref="T:System.ComponentModel.AmbientValueAttribute" /> actuel.</summary>
      <param name="obj">
        <see cref="T:System.ComponentModel.AmbientValueAttribute" /> à comparer avec l'objet <see cref="T:System.ComponentModel.AmbientValueAttribute" /> actuel.</param>
      <returns>
        <see langword="true" /> si le <see cref="T:System.ComponentModel.AmbientValueAttribute" /> spécifié est égal au <see cref="T:System.ComponentModel.AmbientValueAttribute" /> actuel ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.GetHashCode">
      <summary>Retourne le code de hachage de cette instance.</summary>
      <returns>Code de hachage du <see cref="T:System.ComponentModel.AmbientValueAttribute" /> actuel.</returns>
    </member>
    <member name="P:System.ComponentModel.AmbientValueAttribute.Value">
      <summary>Obtient l'objet qui est la valeur de ce <see cref="T:System.ComponentModel.AmbientValueAttribute" />.</summary>
      <returns>Objet qui est la valeur de ce <see cref="T:System.ComponentModel.AmbientValueAttribute" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ArrayConverter">
      <summary>Fournit un convertisseur de type pour convertir les objets <see cref="T:System.Array" /> vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ArrayConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convertit l'objet de valeur donnée en type de destination spécifié.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture">Culture dans laquelle <paramref name="value" /> doit être converti.</param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> dans lequel convertir la valeur.</param>
      <returns>
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Obtient une collection de propriétés pour le type de tableau spécifié par le paramètre de valeur.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="value">
        <see cref="T:System.Object" /> qui spécifie le type de tableau pour lequel obtenir des propriétés.</param>
      <param name="attributes">Tableau de type <see cref="T:System.Attribute" /> qui sera utilisé comme filtre.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> avec les propriétés exposées pour un tableau, ou <see langword="null" /> en l'absence de propriétés.</returns>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtient une valeur indiquant si cet objet prend en charge les propriétés.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns>
        <see langword="true" /> car <see cref="M:System.ComponentModel.ArrayConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> doit être appelé pour rechercher les propriétés de cet objet. Cette méthode ne retourne jamais <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.AttributeCollection">
      <summary>Représente une collection d’attributs.</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.AttributeCollection" />.</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.#ctor(System.Attribute[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.AttributeCollection" />.</summary>
      <param name="attributes">Tableau de type <see cref="T:System.Attribute" /> qui fournit les attributs de cette collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributes" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Attributes">
      <summary>Obtient la collection d'attributs.</summary>
      <returns>Collection d'attributs.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute)">
      <summary>Détermine si cette collection d'attributs possède l'attribut spécifié.</summary>
      <param name="attribute">
        <see cref="T:System.Attribute" /> à rechercher dans la collection.</param>
      <returns>
        <see langword="true" /> si la collection contient l'attribut ou est l'attribut par défaut du type d'attribut ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute[])">
      <summary>Détermine si cette collection d'attributs contient tous les attributs spécifiés dans le tableau d'attributs.</summary>
      <param name="attributes">Tableau de type <see cref="T:System.Attribute" /> à rechercher dans la collection.</param>
      <returns>
        <see langword="true" /> si la collection contient tous les attributs ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.CopyTo(System.Array,System.Int32)">
      <summary>Copie la collection dans un tableau, en commençant à l'index spécifié.</summary>
      <param name="array">
        <see cref="T:System.Array" /> dans lequel copier la collection.</param>
      <param name="index">Index à partir duquel commencer.</param>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Count">
      <summary>Obtient le nombre d'attributs.</summary>
      <returns>Nombre d'attributs.</returns>
    </member>
    <member name="F:System.ComponentModel.AttributeCollection.Empty">
      <summary>Spécifie une collection vide que vous pouvez utiliser, plutôt que d'en créer une nouvelle. Ce champ est en lecture seule.</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.FromExisting(System.ComponentModel.AttributeCollection,System.Attribute[])">
      <summary>Crée un nouveau <see cref="T:System.ComponentModel.AttributeCollection" /> à partir d'un <see cref="T:System.ComponentModel.AttributeCollection" /> existant.</summary>
      <param name="existing">
        <see cref="T:System.ComponentModel.AttributeCollection" /> à partir duquel créer la copie.</param>
      <param name="newAttributes">Tableau de type <see cref="T:System.Attribute" /> qui fournit les attributs de cette collection. Peut être <see langword="null" />.</param>
      <returns>Nouveau <see cref="T:System.ComponentModel.AttributeCollection" /> qui est une copie de <paramref name="existing" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="existing" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.GetDefaultAttribute(System.Type)">
      <summary>Retourne le <see cref="T:System.Attribute" /> par défaut d'un <see cref="T:System.Type" /> donné.</summary>
      <param name="attributeType">
        <see cref="T:System.Type" /> de l'attribut à récupérer.</param>
      <returns>
        <see cref="T:System.Attribute" /> par défaut d'un <paramref name="attributeType" /> donné.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.GetEnumerator">
      <summary>Obtient un énumérateur pour cette collection.</summary>
      <returns>Énumérateur de type <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Item(System.Int32)">
      <summary>Obtient l'attribut avec le numéro d'index spécifié.</summary>
      <param name="index">Index de base zéro de <see cref="T:System.ComponentModel.AttributeCollection" />.</param>
      <returns>
        <see cref="T:System.Attribute" /> avec le numéro d'index spécifié.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Item(System.Type)">
      <summary>Obtient l'attribut du type spécifié.</summary>
      <param name="attributeType">
        <see cref="T:System.Type" /> du <see cref="T:System.Attribute" /> à extraire de la collection.</param>
      <returns>
        <see cref="T:System.Attribute" /> possédant le type spécifié ou, si l'attribut n'existe pas, valeur par défaut du type d'attribut.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute)">
      <summary>Détermine si un attribut spécifié est identique à un attribut de la collection.</summary>
      <param name="attribute">Instance de <see cref="T:System.Attribute" /> à comparer avec les attributs de cette collection.</param>
      <returns>
        <see langword="true" /> si l'attribut est contenu dans la collection et possède la même valeur que l'attribut dans la collection ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute[])">
      <summary>Détermine si les attributs du tableau spécifié sont identiques aux attributs de la collection.</summary>
      <param name="attributes">Tableau de <see cref="T:System.CodeDom.MemberAttributes" /> à comparer avec les attributs de cette collection.</param>
      <returns>
        <see langword="true" /> si tous les attributs du tableau sont contenus dans la collection et possèdent les mêmes valeurs que les attributs de la collection ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#Count">
      <summary>Obtient le nombre d’éléments contenus dans la collection.</summary>
      <returns>Nombre d’éléments contenus dans la collection.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Obtient une valeur indiquant si l'accès à la collection est synchronisé (thread-safe).</summary>
      <returns>
        <see langword="true" /> si l'accès à la collection est synchronisé (thread-safe) ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#SyncRoot">
      <summary>Obtient un objet qui peut être utilisé pour synchroniser l’accès à la collection.</summary>
      <returns>Objet permettant de synchroniser l’accès à la collection.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retourne un <see cref="T:System.Collections.IEnumerator" /> pour <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> pour <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="T:System.ComponentModel.AttributeProviderAttribute">
      <summary>Active la redirection d’attribut. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.AttributeProviderAttribute" /> à l'aide du nom de type donné.</summary>
      <param name="typeName">Nom du type à spécifier.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.String,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.AttributeProviderAttribute" /> avec le nom de type et le nom de propriété donnés.</summary>
      <param name="typeName">Nom du type à spécifier.</param>
      <param name="propertyName">Nom de la propriété pour laquelle les attributs seront récupérés.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.AttributeProviderAttribute" /> à l'aide du type donné.</summary>
      <param name="type">Type à spécifier.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> est <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.AttributeProviderAttribute.PropertyName">
      <summary>Obtient le nom de la propriété pour laquelle les attributs seront récupérés.</summary>
      <returns>Nom de la propriété pour laquelle les attributs seront récupérés.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeProviderAttribute.TypeName">
      <summary>Obtient le nom de type qualifié de l'assembly passé dans le constructeur.</summary>
      <returns>Nom qualifié de l'assembly du type spécifié dans le constructeur.</returns>
    </member>
    <member name="T:System.ComponentModel.BaseNumberConverter">
      <summary>Fournit un convertisseur de type de base pour les types numériques qui ne sont pas à virgule flottante.</summary>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Détermine si ce convertisseur peut convertir un objet du type source donné en objet du type natif du convertisseur.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="sourceType">
        <see cref="T:System.Type" /> représentant le type à partir duquel vous voulez effectuer la conversion.</param>
      <returns>
        <see langword="true" /> si le convertisseur peut effectuer la conversion ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Retourne une valeur indiquant si ce convertisseur peut convertir un objet en objet du type de destination donné à l'aide du contexte.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="t">
        <see cref="T:System.Type" /> représentant le type à partir duquel vous souhaitez effectuer la conversion.</param>
      <returns>
        <see langword="true" /> si le convertisseur peut effectuer la conversion ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convertit l'objet donné en type natif du convertisseur.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> qui spécifie la culture de représentation du nombre.</param>
      <param name="value">Objet à convertir.</param>
      <returns>
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <exception cref="T:System.Exception">
        <paramref name="value" /> n'est pas une valeur valide pour le type cible.</exception>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convertit l'objet spécifié dans un autre type.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> qui spécifie la culture de représentation du nombre.</param>
      <param name="value">Objet à convertir.</param>
      <param name="destinationType">Type dans lequel convertir l'objet.</param>
      <returns>
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="T:System.ComponentModel.BindableAttribute">
      <summary>Spécifie si un membre est généralement utilisé pour la liaison. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.BindableAttribute" /> avec une valeur Boolean.</summary>
      <param name="bindable">
        <see langword="true" /> pour utiliser la propriété pour la liaison ; sinon, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.Boolean,System.ComponentModel.BindingDirection)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.BindableAttribute" />.</summary>
      <param name="bindable">
        <see langword="true" /> pour utiliser la propriété pour la liaison ; sinon, <see langword="false" />.</param>
      <param name="direction">Une des valeurs de l'objet <see cref="T:System.ComponentModel.BindingDirection" />.</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.ComponentModel.BindableSupport)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.BindableAttribute" /> avec l’une des valeurs <see cref="T:System.ComponentModel.BindableSupport" />.</summary>
      <param name="flags">Une des valeurs de <see cref="T:System.ComponentModel.BindableSupport" />.</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.ComponentModel.BindableSupport,System.ComponentModel.BindingDirection)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.BindableAttribute" />.</summary>
      <param name="flags">Une des valeurs de l'objet <see cref="T:System.ComponentModel.BindableSupport" />.</param>
      <param name="direction">Une des valeurs de l'objet <see cref="T:System.ComponentModel.BindingDirection" />.</param>
    </member>
    <member name="P:System.ComponentModel.BindableAttribute.Bindable">
      <summary>Obtient une valeur indiquant qu'une propriété est généralement utilisée pour la liaison.</summary>
      <returns>
        <see langword="true" /> si la propriété est généralement utilisée pour la liaison ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.Default">
      <summary>Spécifie la valeur par défaut de <see cref="T:System.ComponentModel.BindableAttribute" /> (<see cref="F:System.ComponentModel.BindableAttribute.No" />). Ce champ est en lecture seule.</summary>
    </member>
    <member name="P:System.ComponentModel.BindableAttribute.Direction">
      <summary>Obtient une valeur qui indique la ou les directions de la liaison de données de cette propriété.</summary>
      <returns>Direction de la liaison de données de cette propriété.</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.Equals(System.Object)">
      <summary>Détermine si deux objets <see cref="T:System.ComponentModel.BindableAttribute" /> sont identiques.</summary>
      <param name="obj">Objet à comparer.</param>
      <returns>
        <see langword="true" /> si le <see cref="T:System.ComponentModel.BindableAttribute" /> spécifié est égal au <see cref="T:System.ComponentModel.BindableAttribute" /> en cours ; <see langword="false" /> s'il n'est pas égal.</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.GetHashCode">
      <summary>Sert de fonction de hachage pour la classe <see cref="T:System.ComponentModel.BindableAttribute" />.</summary>
      <returns>Code de hachage du <see cref="T:System.ComponentModel.BindableAttribute" /> actuel.</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.IsDefaultAttribute">
      <summary>Détermine si cet attribut est l'attribut par défaut.</summary>
      <returns>
        <see langword="true" /> si cet attribut est la valeur par défaut pour cette classe d'attributs ; sinon <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.No">
      <summary>Spécifie qu'une propriété n'est généralement pas utilisée pour la liaison. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.Yes">
      <summary>Spécifie qu'une propriété est généralement utilisée pour la liaison. Ce champ est en lecture seule.</summary>
    </member>
    <member name="T:System.ComponentModel.BindableSupport">
      <summary>Spécifie des valeurs pour indiquer si une propriété peut être liée à un élément de données ou à une autre propriété.</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.Default">
      <summary>La propriété a la valeur par défaut.</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.No">
      <summary>La propriété ne peut pas être liée au moment du design.</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.Yes">
      <summary>La propriété peut être liée au moment du design.</summary>
    </member>
    <member name="T:System.ComponentModel.BindingDirection">
      <summary>Spécifie si le modèle peut être lié dans un sens ou dans les deux.</summary>
    </member>
    <member name="F:System.ComponentModel.BindingDirection.OneWay">
      <summary>Le modèle peut accepter uniquement des valeurs de propriété. Utilisé avec un <see cref="T:System.Web.UI.ITemplate" /> générique.</summary>
    </member>
    <member name="F:System.ComponentModel.BindingDirection.TwoWay">
      <summary>Le modèle peut accepter et exposer des valeurs de propriété. Utilisé avec <see cref="T:System.Web.UI.IBindableTemplate" />.</summary>
    </member>
    <member name="T:System.ComponentModel.BindingList`1">
      <summary>Fournit une collection générique qui prend en charge la liaison de données.</summary>
      <typeparam name="T">Type d'éléments de la liste.</typeparam>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.BindingList`1" /> en utilisant les valeurs par défaut.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.BindingList`1" /> avec la liste spécifiée.</summary>
      <param name="list">
        <see cref="T:System.Collections.Generic.IList`1" /> d'éléments à contenir dans le <see cref="T:System.ComponentModel.BindingList`1" />.</param>
    </member>
    <member name="E:System.ComponentModel.BindingList`1.AddingNew">
      <summary>Se produit avant l'ajout d'un élément à la liste.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.AddNew">
      <summary>Ajoute un nouvel élément à la collection.</summary>
      <returns>Élément ajouté à la liste.</returns>
      <exception cref="T:System.InvalidOperationException">La propriété <see cref="P:System.Windows.Forms.BindingSource.AllowNew" /> a la valeur <see langword="false" />.

ou -
Aucun constructeur public sans paramètre n’a pu être trouvé pour le type d’élément actif.</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.AddNewCore">
      <summary>Ajoute un nouvel élément à la fin de la collection.</summary>
      <returns>Élément ajouté à la collection.</returns>
      <exception cref="T:System.InvalidCastException">Le nouvel élément n'est pas du même type que les objets contenus dans le <see cref="T:System.ComponentModel.BindingList`1" />.</exception>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowEdit">
      <summary>Obtient ou définit une valeur indiquant si les éléments de la liste peuvent être modifiés.</summary>
      <returns>
        <see langword="true" /> si les éléments de liste peuvent être modifiés ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowNew">
      <summary>Obtient ou définit une valeur indiquant si vous pouvez ajouter des éléments à la liste à l'aide de la méthode <see cref="M:System.ComponentModel.BindingList`1.AddNew" />.</summary>
      <returns>
        <see langword="true" /> si vous pouvez ajouter des éléments à la liste à l'aide de la méthode <see cref="M:System.ComponentModel.BindingList`1.AddNew" /> ; sinon, <see langword="false" />. La valeur par défaut dépend du type sous-jacent contenu dans la liste.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowRemove">
      <summary>Obtient ou définit une valeur indiquant si vous pouvez supprimer des éléments de la collection.</summary>
      <returns>
        <see langword="true" /> si vous pouvez supprimer des éléments de la liste à l'aide de la méthode <see cref="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)" /> ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>Trie les éléments en cas de substitution dans une classe dérivée ; sinon, lève un <see cref="T:System.NotSupportedException" />.</summary>
      <param name="prop">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> spécifiant la propriété sur laquelle effectuer le tri.</param>
      <param name="direction">Une des valeurs de l'objet <see cref="T:System.ComponentModel.ListSortDirection" />.</param>
      <exception cref="T:System.NotSupportedException">La méthode n'est pas substituée dans une classe dérivée.</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.CancelNew(System.Int32)">
      <summary>Ignore un nouvel élément en attente.</summary>
      <param name="itemIndex">Index du nouvel élément à ajouter</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ClearItems">
      <summary>Supprime tous les éléments de la collection.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.EndNew(System.Int32)">
      <summary>Valide un nouvel élément en attente dans la collection.</summary>
      <param name="itemIndex">Index du nouvel élément à ajouter.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>Recherche l'index de l'élément qui a le descripteur de propriété déterminé avec la valeur spécifiée, si la recherche est implémentée dans une classe dérivée ; sinon, un <see cref="T:System.NotSupportedException" />.</summary>
      <param name="prop">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> à rechercher.</param>
      <param name="key">Valeur de <paramref name="prop" /> à atteindre.</param>
      <returns>Index de base zéro de l'élément correspondant au descripteur de propriété et contenant la valeur spécifiée.</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="M:System.ComponentModel.BindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)" /> n'est pas substitué dans une classe dérivée.</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.InsertItem(System.Int32,`0)">
      <summary>Insère l'élément spécifié dans la liste à l'index spécifié.</summary>
      <param name="index">Index de base zéro dans lequel l'élément doit être inséré.</param>
      <param name="item">Élément à insérer dans la liste.</param>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.IsSortedCore">
      <summary>Obtient une valeur indiquant si la liste est triée.</summary>
      <returns>
        <see langword="true" /> si la liste est triée ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</returns>
    </member>
    <member name="E:System.ComponentModel.BindingList`1.ListChanged">
      <summary>Se produit en cas de modification de la liste ou d'un de ses éléments.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.OnAddingNew(System.ComponentModel.AddingNewEventArgs)">
      <summary>Déclenche l'événement <see cref="E:System.ComponentModel.BindingList`1.AddingNew" />.</summary>
      <param name="e">
        <see cref="T:System.ComponentModel.AddingNewEventArgs" /> qui contient les données d'événement.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
      <summary>Déclenche l'événement <see cref="E:System.ComponentModel.BindingList`1.ListChanged" />.</summary>
      <param name="e">
        <see cref="T:System.ComponentModel.ListChangedEventArgs" /> qui contient les données d'événement.</param>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.RaiseListChangedEvents">
      <summary>Obtient ou définit une valeur indiquant si l'ajout ou la suppression d'éléments dans la liste déclenche des événements <see cref="E:System.ComponentModel.BindingList`1.ListChanged" />.</summary>
      <returns>
        <see langword="true" /> si l'ajout ou la suppression d'éléments déclenche des événements <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)">
      <summary>Supprime l'élément au niveau de l'index spécifié.</summary>
      <param name="index">Index de base zéro de l'élément à supprimer.</param>
      <exception cref="T:System.NotSupportedException">Vous supprimez un élément nouvellement ajouté et <see cref="P:System.ComponentModel.IBindingList.AllowRemove" /> a la valeur <see langword="false" />.</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.RemoveSortCore">
      <summary>Supprime tous les tris appliqués avec <see cref="M:System.ComponentModel.BindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" /> si le tri est implémenté dans une classe dérivée ; sinon, lève <see cref="T:System.NotSupportedException" />.</summary>
      <exception cref="T:System.NotSupportedException">La méthode n'est pas substituée dans une classe dérivée.</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ResetBindings">
      <summary>Déclenche un événement <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> de type <see cref="F:System.ComponentModel.ListChangedType.Reset" />.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ResetItem(System.Int32)">
      <summary>Déclenche un événement <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> de type <see cref="F:System.ComponentModel.ListChangedType.ItemChanged" /> pour l'élément à la position spécifiée.</summary>
      <param name="position">Index de base zéro de l'élément à réinitialiser.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.SetItem(System.Int32,`0)">
      <summary>Remplace l'élément à l'index spécifié par l'élément spécifié.</summary>
      <param name="index">Index de base zéro de l'élément à remplacer.</param>
      <param name="item">Nouvelle valeur de l'élément à l'index spécifié. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> est inférieur à zéro.

ou -
<paramref name="index" /> est supérieur à <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SortDirectionCore">
      <summary>Obtient le sens de tri de la liste.</summary>
      <returns>Une des valeurs de <see cref="T:System.ComponentModel.ListSortDirection" />. La valeur par défaut est <see cref="F:System.ComponentModel.ListSortDirection.Ascending" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SortPropertyCore">
      <summary>Obtient le descripteur de propriété utilisé pour trier la liste si le tri est implémenté dans une classe dérivée ; sinon, retourne <see langword="null" />.</summary>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> utilisé pour trier la liste.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsChangeNotificationCore">
      <summary>Obtient une valeur qui indique si les événements <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> sont activés.</summary>
      <returns>
        <see langword="true" /> si les événements <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> sont pris en charge ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsSearchingCore">
      <summary>Obtient une valeur indiquant si la liste prend en charge la recherche.</summary>
      <returns>
        <see langword="true" /> si la liste prend en charge la recherche ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsSortingCore">
      <summary>Obtient une valeur indiquant si la liste prend en charge le tri.</summary>
      <returns>
        <see langword="true" /> si la liste prend en charge le tri ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>Pour obtenir une description de ce membre, consultez <see cref="M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)" />.</summary>
      <param name="prop">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> à ajouter comme critère de recherche.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AddNew">
      <summary>Ajoute un nouvel élément à la liste. Pour plus d'informations, consultez <see cref="M:System.ComponentModel.IBindingList.AddNew" />.</summary>
      <returns>Élément ajouté à la liste.</returns>
      <exception cref="T:System.NotSupportedException">Cette méthode n'est pas prise en charge.</exception>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowEdit">
      <summary>Obtient une valeur indiquant si les éléments de la liste peuvent être modifiés.</summary>
      <returns>
        <see langword="true" /> si les éléments de liste peuvent être modifiés ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowNew">
      <summary>Obtient une valeur indiquant si les nouveaux éléments peuvent être ajoutés à la liste à l'aide de la méthode <see cref="M:System.ComponentModel.BindingList`1.AddNew" />.</summary>
      <returns>
        <see langword="true" /> si vous pouvez ajouter des éléments à la liste à l'aide de la méthode <see cref="M:System.ComponentModel.BindingList`1.AddNew" /> ; sinon, <see langword="false" />. La valeur par défaut dépend du type sous-jacent contenu dans la liste.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowRemove">
      <summary>Obtient une valeur indiquant si des éléments peuvent être supprimés de la liste.</summary>
      <returns>
        <see langword="true" /> si vous pouvez supprimer des éléments de la liste à l'aide de la méthode <see cref="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)" /> ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>Trie la liste en fonction d'un <see cref="T:System.ComponentModel.PropertyDescriptor" /> et d'un <see cref="T:System.ComponentModel.ListSortDirection" />. Pour obtenir la description complète de ce membre, consultez <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" />.</summary>
      <param name="prop">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> selon lequel le tri doit s'effectuer.</param>
      <param name="direction">Une des valeurs de <see cref="T:System.ComponentModel.ListSortDirection" />.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>Pour obtenir une description de ce membre, consultez <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />.</summary>
      <param name="prop">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> dans lequel effectuer la recherche.</param>
      <param name="key">Valeur du paramètre <paramref name="prop" /> à rechercher.</param>
      <returns>Index de la ligne possédant le <see cref="T:System.ComponentModel.PropertyDescriptor" /> donné.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#IsSorted">
      <summary>Pour obtenir une description de ce membre, consultez <see cref="P:System.ComponentModel.IBindingList.IsSorted" />.</summary>
      <returns>
        <see langword="true" /> si <see cref="M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)" /> a été appelé et si <see cref="M:System.ComponentModel.IBindingList.RemoveSort" /> n'a pas été appelé ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>Pour obtenir une description de ce membre, consultez <see cref="M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)" />.</summary>
      <param name="prop">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> à supprimer des index utilisés pour la recherche.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#RemoveSort">
      <summary>Pour obtenir une description de ce membre, consultez <see cref="M:System.ComponentModel.IBindingList.RemoveSort" />.</summary>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SortDirection">
      <summary>Pour obtenir une description de ce membre, consultez <see cref="P:System.ComponentModel.IBindingList.SortDirection" />.</summary>
      <returns>Une des valeurs de <see cref="T:System.ComponentModel.ListSortDirection" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SortProperty">
      <summary>Pour obtenir une description de ce membre, consultez <see cref="P:System.ComponentModel.IBindingList.SortProperty" />.</summary>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> utilisé actuellement pour le tri.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsChangeNotification">
      <summary>Pour obtenir une description de ce membre, consultez <see cref="P:System.ComponentModel.IBindingList.SupportsChangeNotification" />.</summary>
      <returns>
        <see langword="true" /> si l'événement <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> est déclenché en cas de modification de la liste ou d'un de ses éléments ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsSearching">
      <summary>Pour obtenir une description de ce membre, consultez <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" />.</summary>
      <returns>
        <see langword="true" /> si la liste prend en charge la recherche à l'aide de la méthode <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsSorting">
      <summary>Pour obtenir une description de ce membre, consultez <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />.</summary>
      <returns>
        <see langword="true" /> si la liste prend en charge le tri ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IRaiseItemChangedEvents#RaisesItemChangedEvents">
      <summary>Obtient une valeur indiquant si les modifications apportées aux valeurs des propriétés de l'élément déclenchent les événements <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> de type <see cref="F:System.ComponentModel.ListChangedType.ItemChanged" />. Ce membre ne peut pas être substitué dans une classe dérivée.</summary>
      <returns>
        <see langword="true" />Si le type de liste implémente <see cref="T:System.ComponentModel.INotifyPropertyChanged" />; sinon,. <see langword="false" /> La valeur par défaut est <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.BooleanConverter">
      <summary>Fournit un convertisseur de type pour convertir les objets <see cref="T:System.Boolean" /> vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.BooleanConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtient une valeur indiquant si ce convertisseur peut convertir un objet du type source donné en objet booléen en utilisant le contexte spécifié.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="sourceType">
        <see cref="T:System.Type" /> qui représente le type à partir duquel vous voulez effectuer la conversion.</param>
      <returns>
        <see langword="true" /> si cet objet peut effectuer la conversion ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convertit l'objet de valeur donné en objet booléen.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> qui spécifie la culture vers laquelle effectuer la conversion.</param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir.</param>
      <returns>
        <see cref="T:System.Object" /> qui représente <paramref name="value" /> converti.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n'est pas une valeur valide pour le type cible.</exception>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtient une collection de valeurs standard pour le type de données booléen.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> qui contient un ensemble standard de valeurs valides.</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtient une valeur indiquant si la liste de valeurs standard retournée par la méthode <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> est une liste exclusive.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns>
        <see langword="true" /> parce que le <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> retourné depuis <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> est une liste exhaustive de valeurs possibles. Cette méthode ne retourne jamais <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtient une valeur indiquant si cet objet prend en charge une série de valeurs standard qui peuvent être sélectionnées dans une liste.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns>
        <see langword="true" /> car <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> peut être appelé pour rechercher un ensemble de valeurs communes prises en charge par l'objet. Cette méthode ne retourne jamais <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ByteConverter">
      <summary>Fournit un convertisseur de type pour convertir des objets entiers non signés 8 bits vers et depuis d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.ByteConverter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ByteConverter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.CancelEventHandler">
      <summary>Représente la méthode qui gère un événement annulable.</summary>
      <param name="sender">Source de l'événement.</param>
      <param name="e">
        <see cref="T:System.ComponentModel.CancelEventArgs" /> qui contient les données d'événement.</param>
    </member>
    <member name="T:System.ComponentModel.CharConverter">
      <summary>Fournit un convertisseur de type pour convertir les objets de caractère Unicode vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.CharConverter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.CharConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CharConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtient une valeur indiquant si ce convertisseur peut convertir un objet du type source donné en objet de caractère Unicode à l'aide du contexte spécifié.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="sourceType">
        <see cref="T:System.Type" /> qui représente le type à partir duquel opérer la conversion.</param>
      <returns>
        <see langword="true" /> si ce convertisseur peut effectuer la conversion ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CharConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convertit l'objet donné en objet de caractère Unicode.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture">Culture dans laquelle <paramref name="value" /> doit être converti.</param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir.</param>
      <returns>
        <see cref="T:System.Object" /> qui représente <paramref name="value" /> converti.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n'est pas une valeur valide pour le type cible.</exception>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.CharConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convertit l'objet de valeur donné en objet de caractère Unicode à l'aide des arguments.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture">Culture dans laquelle <paramref name="value" /> doit être converti.</param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> dans lequel convertir la valeur.</param>
      <returns>
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeAction">
      <summary>Spécifie la façon dont la collection est modifiée.</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Add">
      <summary>Spécifie qu'un élément a été ajouté à la collection.</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Refresh">
      <summary>Spécifie que la collection entière a été modifiée. Ceci est provoqué par l'utilisation de méthodes qui manipulent la collection dans son intégralité, comme <see cref="M:System.Collections.CollectionBase.Clear" />.</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Remove">
      <summary>Spécifie qu'un élément a été supprimé de la collection.</summary>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeEventArgs">
      <summary>Fournit des données pour l'événement <see cref="E:System.Data.DataColumnCollection.CollectionChanged" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionChangeEventArgs.#ctor(System.ComponentModel.CollectionChangeAction,System.Object)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.CollectionChangeEventArgs" />.</summary>
      <param name="action">Une des valeurs <see cref="T:System.ComponentModel.CollectionChangeAction" /> qui spécifie la façon dont la collection a été modifiée.</param>
      <param name="element">
        <see cref="T:System.Object" /> qui spécifie l'instance de la collection où la modification a eu lieu.</param>
    </member>
    <member name="P:System.ComponentModel.CollectionChangeEventArgs.Action">
      <summary>Obtient une action qui spécifie la façon dont la collection a été modifiée.</summary>
      <returns>Une des valeurs de <see cref="T:System.ComponentModel.CollectionChangeAction" />.</returns>
    </member>
    <member name="P:System.ComponentModel.CollectionChangeEventArgs.Element">
      <summary>Obtient l'instance de la collection avec la modification.</summary>
      <returns>
        <see cref="T:System.Object" /> qui représente l'instance de la collection avec la modification ou <see langword="null" /> si vous actualisez la collection.</returns>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeEventHandler">
      <summary>Représente la méthode qui gère l'événement <see cref="E:System.Data.DataColumnCollection.CollectionChanged" /> déclenché lors de l'ajout d'éléments à une collection ou de la suppression d'éléments de celle-ci.</summary>
      <param name="sender">Source de l'événement.</param>
      <param name="e">
        <see cref="T:System.ComponentModel.CollectionChangeEventArgs" /> qui contient les données d'événement.</param>
    </member>
    <member name="T:System.ComponentModel.CollectionConverter">
      <summary>Fournit un convertisseur de type pour convertir les objets de collection vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.CollectionConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convertit l'objet de valeur donnée en type de destination spécifié.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture">Culture dans laquelle <paramref name="value" /> doit être converti.</param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir. Ce paramètre doit hériter de <see cref="T:System.Collections.ICollection" />.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> dans lequel convertir la valeur.</param>
      <returns>
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Obtient une collection de propriétés pour le type de tableau spécifié par le paramètre de valeur, à l'aide du contexte et des attributs spécifiés.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="value">
        <see cref="T:System.Object" /> qui spécifie le type de tableau pour lequel obtenir des propriétés.</param>
      <param name="attributes">Tableau de type <see cref="T:System.Attribute" /> qui sera utilisé comme filtre.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> possédant les propriétés exposées pour ce type de données, ou <see langword="null" /> en l'absence de propriétés. Cette méthode retourne toujours la valeur <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtient une valeur indiquant si cet objet prend en charge les propriétés.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns>
        <see langword="false" /> car <see cref="M:System.ComponentModel.CollectionConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> ne doit pas être appelé pour rechercher les propriétés de cet objet. Cette méthode ne retourne jamais <see langword="true" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ComplexBindingPropertiesAttribute">
      <summary>Spécifie les propriétés de source de données et de donnée membre pour un composant qui prend en charge la liaison de données complexe. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> sans paramètre.</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> à l'aide de la source de données spécifiée.</summary>
      <param name="dataSource">Nom de la propriété à utiliser comme source de données.</param>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor(System.String,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> à l'aide de la source de données et des données membre spécifiées.</summary>
      <param name="dataSource">Nom de la propriété à utiliser comme source de données.</param>
      <param name="dataMember">Nom de la propriété à utiliser comme source pour les données.</param>
    </member>
    <member name="P:System.ComponentModel.ComplexBindingPropertiesAttribute.DataMember">
      <summary>Obtient le nom de la propriété de donnée membre pour le composant auquel <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> est lié.</summary>
      <returns>Nom de la propriété de donnée membre pour le composant auquel <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> est lié.</returns>
    </member>
    <member name="P:System.ComponentModel.ComplexBindingPropertiesAttribute.DataSource">
      <summary>Obtient le nom de la propriété de source de données pour le composant auquel <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> est lié.</summary>
      <returns>Nom de la propriété de source de données pour le composant auquel <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> est lié.</returns>
    </member>
    <member name="F:System.ComponentModel.ComplexBindingPropertiesAttribute.Default">
      <summary>Représente la valeur par défaut de la classe <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.Equals(System.Object)">
      <summary>Détermine si le <see cref="T:System.Object" /> spécifié est égal à l'instance <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> en cours.</summary>
      <param name="obj">
        <see cref="T:System.Object" /> à comparer à l'instance <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> en cours.</param>
      <returns>
        <see langword="true" /> si l'objet est égal à l'instance actuelle ; sinon, <see langword="false" /> qui indique qu'ils ne sont pas égaux.</returns>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.GetHashCode">
      <summary>Retourne le code de hachage de cette instance.</summary>
      <returns>Code de hachage d'un entier signé 32 bits.</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentConverter">
      <summary>Fournit un convertisseur de type pour convertir les composants vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.#ctor(System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ComponentConverter" />.</summary>
      <param name="type">
        <see cref="T:System.Type" /> qui représente le type à associer à ce convertisseur de composant.</param>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Obtient une collection de propriétés pour le type de composant spécifié par le paramètre de valeur.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="value">
        <see cref="T:System.Object" /> spécifiant le type du composant pour lequel obtenir les propriétés.</param>
      <param name="attributes">Tableau de type <see cref="T:System.Attribute" /> qui sera utilisé comme filtre.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> possédant les propriétés exposées pour ce composant, ou <see langword="null" /> en l'absence de propriétés.</returns>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtient une valeur indiquant si cet objet prend en charge les propriétés, en utilisant le contexte spécifié.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns>
        <see langword="true" /> car <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> doit être appelé pour rechercher les propriétés de cet objet. Cette méthode ne retourne jamais <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentEditor">
      <summary>Fournit la classe de base pour un éditeur de composant personnalisé.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ComponentEditor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.EditComponent(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>Modifie le composant et retourne une valeur indiquant si le composant a été modifié en fonction d'un contexte donné.</summary>
      <param name="context">Objet de contexte facultatif pouvant être utilisé pour obtenir des informations supplémentaires sur la modification.</param>
      <param name="component">Composant à modifier.</param>
      <returns>
        <see langword="true" /> si le composant a été modifié ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.EditComponent(System.Object)">
      <summary>Modifie le composant et retourne une valeur indiquant si le composant a été modifié.</summary>
      <param name="component">Composant à modifier.</param>
      <returns>
        <see langword="true" /> si le composant a été modifié ; sinon <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentResourceManager">
      <summary>Fournit des fonctionnalités simples permettant d'énumérer les ressources d'un composant ou d'un objet. La classe <see cref="T:System.ComponentModel.ComponentResourceManager" /> est un <see cref="T:System.Resources.ResourceManager" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ComponentResourceManager" /> avec des valeurs par défaut.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.#ctor(System.Type)">
      <summary>Crée un <see cref="T:System.ComponentModel.ComponentResourceManager" /> qui recherche des ressources dans les assemblys satellites en fonction d'informations provenant du <see cref="T:System.Type" /> spécifié.</summary>
      <param name="t">
        <see cref="T:System.Type" /> à partir duquel le <see cref="T:System.ComponentModel.ComponentResourceManager" /> dérive toutes les informations utilisées pour la recherche des fichiers de ressources.</param>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.ApplyResources(System.Object,System.String)">
      <summary>Assigne la valeur d'une ressource à la propriété correspondante de l'objet.</summary>
      <param name="value">
        <see cref="T:System.Object" /> contenant la valeur de propriété à assigner.</param>
      <param name="objectName">
        <see cref="T:System.String" /> contenant le nom de l'objet à rechercher dans les ressources.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ou <paramref name="objectName" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.ApplyResources(System.Object,System.String,System.Globalization.CultureInfo)">
      <summary>Assigne la valeur d'une ressource à la propriété correspondante de l'objet.</summary>
      <param name="value">
        <see cref="T:System.Object" /> contenant la valeur de propriété à assigner.</param>
      <param name="objectName">
        <see cref="T:System.String" /> contenant le nom de l'objet à rechercher dans les ressources.</param>
      <param name="culture">Culture pour laquelle appliquer les ressources.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ou <paramref name="objectName" /> est <see langword="null" />.</exception>
    </member>
    <member name="T:System.ComponentModel.Container">
      <summary>Encapsule aucun ou plusieurs composants.</summary>
    </member>
    <member name="M:System.ComponentModel.Container.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Container" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Container.Add(System.ComponentModel.IComponent)">
      <summary>Ajoute le <see cref="T:System.ComponentModel.Component" /> spécifié à <see cref="T:System.ComponentModel.Container" />. Le composant est sans nom.</summary>
      <param name="component">Composant à ajouter.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Container.Add(System.ComponentModel.IComponent,System.String)">
      <summary>Ajoute le <see cref="T:System.ComponentModel.Component" /> spécifié à <see cref="T:System.ComponentModel.Container" /> et lui assigne un nom.</summary>
      <param name="component">Composant à ajouter.</param>
      <param name="name">Nom unique qui ne respecte pas la casse à assigner au composant.

ou -
<see langword="null" />, ce qui laisse le composant sans nom.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> n'est pas unique.</exception>
    </member>
    <member name="P:System.ComponentModel.Container.Components">
      <summary>Obtient tous les composants du <see cref="T:System.ComponentModel.Container" />.</summary>
      <returns>Collection qui contient les composants de <see cref="T:System.ComponentModel.Container" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Container.CreateSite(System.ComponentModel.IComponent,System.String)">
      <summary>Crée un <see cref="T:System.ComponentModel.ISite" /> de site pour le <see cref="T:System.ComponentModel.IComponent" /> donné et assigne le nom spécifié au site.</summary>
      <param name="component">
        <see cref="T:System.ComponentModel.IComponent" /> pour lequel créer un site.</param>
      <param name="name">Nom à assigner à <paramref name="component" /> ou <see langword="null" /> pour ignorer l'assignation de nom.</param>
      <returns>Nouveau site créé.</returns>
    </member>
    <member name="M:System.ComponentModel.Container.Dispose">
      <summary>Libère toutes les ressources utilisées par <see cref="T:System.ComponentModel.Container" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Container.Dispose(System.Boolean)">
      <summary>Libère les ressources non managées utilisées par le <see cref="T:System.ComponentModel.Container" />, et libère éventuellement les ressources managées.</summary>
      <param name="disposing">
        <see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour libérer uniquement les ressources non managées.</param>
    </member>
    <member name="M:System.ComponentModel.Container.Finalize">
      <summary>Libère les ressources non managées et exécute d'autres opérations de nettoyage avant la récupération de <see cref="T:System.ComponentModel.Container" /> par le garbage collection.</summary>
    </member>
    <member name="M:System.ComponentModel.Container.GetService(System.Type)">
      <summary>Obtient l'objet service éventuel du type spécifié.</summary>
      <param name="service">
        <see cref="T:System.Type" /> du service à récupérer.</param>
      <returns>
        <see cref="T:System.Object" /> implémentant le service demandé, ou <see langword="null" /> si le service ne peut pas être résolu.</returns>
    </member>
    <member name="M:System.ComponentModel.Container.Remove(System.ComponentModel.IComponent)">
      <summary>Supprime un composant de <see cref="T:System.ComponentModel.Container" />.</summary>
      <param name="component">Composant à supprimer.</param>
    </member>
    <member name="M:System.ComponentModel.Container.RemoveWithoutUnsiting(System.ComponentModel.IComponent)">
      <summary>Supprime un composant de <see cref="T:System.ComponentModel.Container" /> sans affecter à <see cref="P:System.ComponentModel.IComponent.Site" /> la valeur <see langword="null" />.</summary>
      <param name="component">Composant à supprimer.</param>
    </member>
    <member name="M:System.ComponentModel.Container.ValidateName(System.ComponentModel.IComponent,System.String)">
      <summary>Détermine si le nom du composant est unique pour ce conteneur.</summary>
      <param name="component">Le composant nommé.</param>
      <param name="name">Nom du composant à valider.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> n'est pas unique.</exception>
    </member>
    <member name="T:System.ComponentModel.ContainerFilterService">
      <summary>Fournit une classe de base pour le service de filtre du conteneur.</summary>
    </member>
    <member name="M:System.ComponentModel.ContainerFilterService.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ContainerFilterService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ContainerFilterService.FilterComponents(System.ComponentModel.ComponentCollection)">
      <summary>Filtre la collection de composants.</summary>
      <param name="components">Collection de composants à filtrer.</param>
      <returns>
        <see cref="T:System.ComponentModel.ComponentCollection" /> qui représente une collection modifiée.</returns>
    </member>
    <member name="T:System.ComponentModel.CultureInfoConverter">
      <summary>Fournit un convertisseur de type pour convertir les objets <see cref="T:System.Globalization.CultureInfo" /> vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.CultureInfoConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtient une valeur indiquant si ce convertisseur peut convertir un objet du type source donné en un objet <see cref="T:System.Globalization.CultureInfo" /> à l'aide du contexte spécifié.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="sourceType">
        <see cref="T:System.Type" /> qui représente le type à partir duquel vous voulez effectuer la conversion.</param>
      <returns>
        <see langword="true" /> si ce convertisseur peut effectuer la conversion ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtient une valeur indiquant si ce convertisseur peut convertir un objet en objet du type de destination donné en utilisant le contexte.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> qui représente le type vers lequel vous souhaitez effectuer la conversion.</param>
      <returns>
        <see langword="true" /> si ce convertisseur peut effectuer la conversion ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convertit l'objet de valeur spécifié en <see cref="T:System.Globalization.CultureInfo" />.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> qui spécifie la culture vers laquelle effectuer la conversion.</param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir.</param>
      <returns>
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> spécifie une culture qui n'est pas valide.</exception>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convertit l'objet de valeur donnée en type de destination spécifié.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> qui spécifie la culture vers laquelle effectuer la conversion.</param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> dans lequel convertir la valeur.</param>
      <returns>
        <see cref="T:System.Object" /> qui représente <paramref name="value" /> converti.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetCultureName(System.Globalization.CultureInfo)">
      <summary>Récupère le nom de la culture spécifiée.</summary>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> qui spécifie la culture pour laquelle obtenir le nom.</param>
      <returns>Nom de la culture spécifiée.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Reçoit une collection de valeurs standard pour un objet <see cref="T:System.Globalization.CultureInfo" /> à l'aide du contexte spécifié.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> contenant un jeu standard de valeurs valides, ou <see langword="null" /> si le type de données ne prend pas en charge un jeu de valeurs standard.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtient une valeur indiquant si la liste de valeurs standard retournée par <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> est une liste exhaustive.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns>
        <see langword="false" /> car le <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> retourné par <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> n'est pas une liste exhaustive des valeurs possibles (c'est-à-dire que d'autres valeurs sont possibles). Cette méthode ne retourne jamais <see langword="true" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtient une valeur indiquant si cet objet prend en charge une série de valeurs standard qui peuvent être sélectionnées dans une liste, à l'aide du contexte spécifié.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns>
        <see langword="true" /> car <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> doit être appelé pour trouver un jeu de valeurs communes pris en charge par l'objet. Cette méthode ne retourne jamais <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.CustomTypeDescriptor">
      <summary>Fournit une implémentation par défaut simple de l'interface <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.CustomTypeDescriptor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.#ctor(System.ComponentModel.ICustomTypeDescriptor)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.CustomTypeDescriptor" /> à l'aide d'un descripteur de type personnalisé parent.</summary>
      <param name="parent">Descripteur de type personnalisé parent.</param>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetAttributes">
      <summary>Retourne une collection d'attributs personnalisés pour le type représenté par ce descripteur de type.</summary>
      <returns>
        <see cref="T:System.ComponentModel.AttributeCollection" /> qui contient les attributs pour le type. La valeur par défaut est <see cref="F:System.ComponentModel.AttributeCollection.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetClassName">
      <summary>Retourne le nom qualifié complet de la classe représentée par ce descripteur de type.</summary>
      <returns>Un objet <see cref="T:System.String" /> contenant le nom de classe qualifié complet du type que ce descripteur de type décrit. La valeur par défaut est <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetComponentName">
      <summary>Retourne le nom de la classe représenté par ce descripteur de type.</summary>
      <returns>
        <see cref="T:System.String" /> qui contient le nom de l'instance de composant que ce descripteur de type décrit. La valeur par défaut est <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetConverter">
      <summary>Retourne un convertisseur de type pour le type représenté par ce descripteur de type.</summary>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter" /> pour le type représenté par ce descripteur de type. La valeur par défaut est un <see cref="T:System.ComponentModel.TypeConverter" /> créé récemment.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetDefaultEvent">
      <summary>Retourne le descripteur d'événement pour l'événement par défaut de l'objet représenté par ce descripteur de type.</summary>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptor" /> pour l'événement par défaut sur l'objet représenté par ce descripteur de type. La valeur par défaut est <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetDefaultProperty">
      <summary>Retourne le descripteur de propriété pour la propriété par défaut de l'objet représenté par ce descripteur de type.</summary>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> pour la propriété par défaut sur l'objet représenté par ce descripteur de type. La valeur par défaut est <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEditor(System.Type)">
      <summary>Retourne un éditeur du type spécifié qui sera associé à la classe représentée par ce descripteur de type.</summary>
      <param name="editorBaseType">Type de base de l'éditeur à récupérer.</param>
      <returns>Éditeur du type donné qui sera associé à la classe représentée par ce descripteur de type. La valeur par défaut est <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEvents">
      <summary>Retourne une collection de descripteurs d'événement pour l'objet représenté par ce descripteur de type.</summary>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptorCollection" /> qui contient les descripteurs d'événement pour l'objet représenté par ce descripteur de type. La valeur par défaut est <see cref="F:System.ComponentModel.EventDescriptorCollection.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEvents(System.Attribute[])">
      <summary>Retourne une collection filtrée de descripteurs d'événement pour l'objet représenté par ce descripteur de type.</summary>
      <param name="attributes">Tableau d'attributs à utiliser comme filtre. Il peut s’agir de <see langword="null" />.</param>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptorCollection" /> qui contient les descriptions d'événement pour l'objet représenté par ce descripteur de type. La valeur par défaut est <see cref="F:System.ComponentModel.EventDescriptorCollection.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetProperties">
      <summary>Retourne une collection de descripteurs de propriété pour l'objet représenté par ce descripteur de type.</summary>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> qui contient les descriptions de propriété pour l'objet représenté par ce descripteur de type. La valeur par défaut est <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetProperties(System.Attribute[])">
      <summary>Retourne une collection filtrée de descripteurs de propriété pour l'objet représenté par ce descripteur de type.</summary>
      <param name="attributes">Tableau d'attributs à utiliser comme filtre. Il peut s’agir de <see langword="null" />.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> qui contient les descriptions de propriété pour l'objet représenté par ce descripteur de type. La valeur par défaut est <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>Retourne un objet qui contient la propriété décrite par le descripteur de propriété spécifié.</summary>
      <param name="pd">Descripteur de propriété pour lequel récupérer l'objet propriétaire.</param>
      <returns>
        <see cref="T:System.Object" /> qui possède la propriété donnée spécifiée par le descripteur de type. La valeur par défaut est <see langword="null" />.</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectAttribute">
      <summary>Identifie un type comme un objet qu'il est possible de lier à un objet <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DataObjectAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.#ctor(System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DataObjectAttribute" /> et indique s'il est possible de lier un objet à un objet <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />.</summary>
      <param name="isDataObject">
        <see langword="true" /> s'il est possible de lier l'objet à un objet <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> ; sinon, <see langword="false" />.</param>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.DataObject">
      <summary>Indique qu'il est possible de lier la classe à un objet <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> au moment du design. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.Default">
      <summary>Représente la valeur par défaut de la classe <see cref="T:System.ComponentModel.DataObjectAttribute" /> qui indique que la classe peut être liée à un objet <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> au moment du design. Ce champ est en lecture seule.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.Equals(System.Object)">
      <summary>Détermine si cette instance de <see cref="T:System.ComponentModel.DataObjectAttribute" /> s'adapte au modèle d'un autre objet.</summary>
      <param name="obj">Objet à comparer à cette instance de <see cref="T:System.ComponentModel.DataObjectAttribute" />.</param>
      <returns>
        <see langword="true" /> si cette instance représente la même instance spécifiée par le paramètre <paramref name="obj" />; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.GetHashCode">
      <summary>Retourne le code de hachage de cette instance.</summary>
      <returns>Code de hachage d'un entier signé 32 bits.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectAttribute.IsDataObject">
      <summary>Obtient une valeur indiquant si un objet doit être considéré comme pouvant être lié à un objet <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> au moment du design.</summary>
      <returns>
        <see langword="true" /> si l'objet doit être considéré comme pouvant être lié à un objet <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.IsDefaultAttribute">
      <summary>Obtient une valeur indiquant si la valeur actuelle de l'attribut est sa valeur par défaut.</summary>
      <returns>
        <see langword="true" /> si la valeur actuelle de l'attribut est la valeur par défaut ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.NonDataObject">
      <summary>Indique qu'il n'est pas possible de lier la classe à un objet <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> au moment du design. Ce champ est en lecture seule.</summary>
    </member>
    <member name="T:System.ComponentModel.DataObjectFieldAttribute">
      <summary>Fournit les métadonnées pour une propriété représentant un champ de données. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> et indique si le champ représente la clé primaire de la ligne de données.</summary>
      <param name="primaryKey">
        <see langword="true" /> pour indiquer que le champ se trouve dans la clé primaire de la ligne de données ; sinon, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> et indique si le champ représente la clé primaire de la ligne de données et un champ d'identité de base de données.</summary>
      <param name="primaryKey">
        <see langword="true" /> pour indiquer que le champ se trouve dans la clé primaire de la ligne de données ; sinon, <see langword="false" />.</param>
      <param name="isIdentity">
        <see langword="true" /> pour indiquer que le champ représente un champ d'identité qui identifie uniquement la ligne de données ; sinon, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> et indique si le champ représente la clé primaire de la ligne de données, un champ d'identité de base de données et si le champ peut être null.</summary>
      <param name="primaryKey">
        <see langword="true" /> pour indiquer que le champ se trouve dans la clé primaire de la ligne de données ; sinon, <see langword="false" />.</param>
      <param name="isIdentity">
        <see langword="true" /> pour indiquer que le champ représente un champ d'identité qui identifie uniquement la ligne de données ; sinon, <see langword="false" />.</param>
      <param name="isNullable">
        <see langword="true" /> pour indiquer que le champ peut être null dans le magasin de données ; sinon, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> et indique si le champ représente la clé primaire de la ligne de données, un champ d'identité de base de données et s'il peut être null et définir la longueur du champ.</summary>
      <param name="primaryKey">
        <see langword="true" /> pour indiquer que le champ se trouve dans la clé primaire de la ligne de données ; sinon, <see langword="false" />.</param>
      <param name="isIdentity">
        <see langword="true" /> pour indiquer que le champ représente un champ d'identité qui identifie uniquement la ligne de données ; sinon, <see langword="false" />.</param>
      <param name="isNullable">
        <see langword="true" /> pour indiquer que le champ peut être null dans le magasin de données ; sinon, <see langword="false" />.</param>
      <param name="length">Longueur du champ en octets.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.Equals(System.Object)">
      <summary>Retourne une valeur indiquant si cette instance équivaut à un objet spécifié.</summary>
      <param name="obj">Objet à comparer à cette instance de <see cref="T:System.ComponentModel.DataObjectFieldAttribute" />.</param>
      <returns>
        <see langword="true" /> si cette instance représente la même instance spécifiée par le paramètre <paramref name="obj" />; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.GetHashCode">
      <summary>Retourne le code de hachage de cette instance.</summary>
      <returns>Code de hachage d'un entier signé 32 bits.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.IsIdentity">
      <summary>Obtient une valeur indiquant si une propriété représente un champ d'identité dans les données sous-jacentes.</summary>
      <returns>
        <see langword="true" /> si la propriété représente un champ d'identité dans les données sous-jacentes ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.IsNullable">
      <summary>Obtient une valeur indiquant si une propriété représente un champ qui peut être null dans le magasin de données sous-jacent.</summary>
      <returns>
        <see langword="true" /> si la propriété représente un champ qui peut être null dans le magasin de données sous-jacent ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.Length">
      <summary>Obtient la longueur de la propriété en octets.</summary>
      <returns>Longueur de la propriété en octets, ou -1 si non définie.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.PrimaryKey">
      <summary>Obtient une valeur indiquant si une propriété est dans la clé primaire des données sous-jacentes.</summary>
      <returns>
        <see langword="true" /> si la propriété est dans la clé primaire du magasin de données ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectMethodAttribute">
      <summary>Identifie une méthode d'opération de données exposée par un type, le type d'opération que la méthode effectue et détermine si la méthode représente la méthode de données par défaut. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.#ctor(System.ComponentModel.DataObjectMethodType)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> et identifie le type d'opération de données que la méthode effectue.</summary>
      <param name="methodType">Une des valeurs <see cref="T:System.ComponentModel.DataObjectMethodType" /> décrivant l'opération de données que la méthode effectue.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.#ctor(System.ComponentModel.DataObjectMethodType,System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DataObjectMethodAttribute" />, identifie le type d'opération de données que la méthode effectue et identifie si la méthode représente la méthode de données par défaut exposée par l'objet de données.</summary>
      <param name="methodType">Une des valeurs <see cref="T:System.ComponentModel.DataObjectMethodType" /> décrivant l'opération de données que la méthode effectue.</param>
      <param name="isDefault">
        <see langword="true" /> pour indiquer que la méthode à laquelle l'attribut est appliqué représente la méthode par défaut de l'objet de données pour le <paramref name="methodType" /> spécifié ; sinon, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.Equals(System.Object)">
      <summary>Retourne une valeur indiquant si cette instance équivaut à un objet spécifié.</summary>
      <param name="obj">Objet à comparer à cette instance de <see cref="T:System.ComponentModel.DataObjectMethodAttribute" />.</param>
      <returns>
        <see langword="true" /> si cette instance représente la même instance spécifiée par le paramètre <paramref name="obj" />; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.GetHashCode">
      <summary>Retourne le code de hachage de cette instance.</summary>
      <returns>Code de hachage d'un entier signé 32 bits.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectMethodAttribute.IsDefault">
      <summary>Obtient une valeur indiquant si la méthode à laquelle <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> est appliqué représente la méthode de données par défaut exposée par l'objet de données pour un type de méthode spécifique.</summary>
      <returns>
        <see langword="true" /> si la méthode représente la méthode par défaut exposée par l'objet d'un type de méthode ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.Match(System.Object)">
      <summary>Obtient une valeur indiquant si cette instance partage un modèle commun avec un attribut spécifié.</summary>
      <param name="obj">Objet à comparer à cette instance de <see cref="T:System.ComponentModel.DataObjectMethodAttribute" />.</param>
      <returns>
        <see langword="true" /> si cette instance représente la même instance spécifiée par le paramètre <paramref name="obj" />; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectMethodAttribute.MethodType">
      <summary>Obtient une valeur <see cref="T:System.ComponentModel.DataObjectMethodType" /> indiquant le type d'opération de données que la méthode effectue.</summary>
      <returns>Une des valeurs <see cref="T:System.ComponentModel.DataObjectMethodType" /> qui identifient le type d'opération de données effectué par la méthode à laquelle le <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> est appliqué.</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectMethodType">
      <summary>Identifie le type d'opération de données effectué par une méthode, comme spécifié par le <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> appliqué à la méthode.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Delete">
      <summary>Indique qu'une méthode est utilisée pour une opération de données qui supprime des données.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Fill">
      <summary>Indique qu'une méthode est utilisée pour une opération de données qui remplit un objet <see cref="T:System.Data.DataSet" />.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Insert">
      <summary>Indique qu'une méthode est utilisée pour une opération de données qui insère des données.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Select">
      <summary>Indique qu'une méthode est utilisée pour une opération de données qui récupère des données.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Update">
      <summary>Indique qu'une méthode est utilisée pour une opération de données qui met à jour des données.</summary>
    </member>
    <member name="T:System.ComponentModel.DateTimeConverter">
      <summary>Fournit un convertisseur de type pour convertir les objets <see cref="T:System.DateTime" /> vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DateTimeConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtient une valeur indiquant si ce convertisseur peut convertir un objet du type source donné en un objet <see cref="T:System.DateTime" /> à l'aide du contexte spécifié.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="sourceType">
        <see cref="T:System.Type" /> qui représente le type à partir duquel vous voulez effectuer la conversion.</param>
      <returns>
        <see langword="true" /> si cet objet peut effectuer la conversion ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtient une valeur indiquant si ce convertisseur peut convertir un objet en objet du type de destination donné en utilisant le contexte.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> qui représente le type vers lequel vous souhaitez effectuer la conversion.</param>
      <returns>
        <see langword="true" /> si ce convertisseur peut effectuer la conversion ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convertit l'objet de valeur donné en <see cref="T:System.DateTime" />.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> facultatif. Si la culture n'est pas spécifiée, la culture en cours est utilisée.</param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir.</param>
      <returns>
        <see cref="T:System.Object" /> qui représente <paramref name="value" /> converti.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n'est pas une valeur valide pour le type cible.</exception>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convertit l'objet de valeur donné en <see cref="T:System.DateTime" /> en utilisant les arguments.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> facultatif. Si la culture n'est pas spécifiée, la culture en cours est utilisée.</param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> dans lequel convertir la valeur.</param>
      <returns>
        <see cref="T:System.Object" /> qui représente <paramref name="value" /> converti.</returns>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="T:System.ComponentModel.DateTimeOffsetConverter">
      <summary>Fournit un convertisseur de type pour convertir les structures <see cref="T:System.DateTimeOffset" /> en direction et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DateTimeOffsetConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Retourne une valeur qui indique si un objet du type source spécifié peut être converti en <see cref="T:System.DateTimeOffset" />.</summary>
      <param name="context">Contexte de format de date.</param>
      <param name="sourceType">Type source à vérifier.</param>
      <returns>
        <see langword="true" /> si le type spécifié peut être converti en <see cref="T:System.DateTimeOffset" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Retourne une valeur qui indique si un <see cref="T:System.DateTimeOffset" /> peut être converti en objet du type spécifié.</summary>
      <param name="context">Contexte de format de date.</param>
      <param name="destinationType">Type de destination à vérifier.</param>
      <returns>
        <see langword="true" /> si un <see cref="T:System.DateTimeOffset" /> peut être converti au type spécifié ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convertit l'objet spécifié en <see cref="T:System.DateTimeOffset" />.</summary>
      <param name="context">Contexte de format de date.</param>
      <param name="culture">Culture de date.</param>
      <param name="value">Objet à convertir.</param>
      <returns>
        <see cref="T:System.DateTimeOffset" /> qui représente l'objet spécifié.</returns>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convertit <see cref="T:System.DateTimeOffset" /> en un objet du type spécifié.</summary>
      <param name="context">Contexte de format de date.</param>
      <param name="culture">Culture de date.</param>
      <param name="value">
        <see cref="T:System.DateTimeOffset" /> à convertir.</param>
      <param name="destinationType">Type vers lequel effectuer la conversion.</param>
      <returns>Objet du type spécifié qui représente <see cref="T:System.DateTimeOffset" />.</returns>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="T:System.ComponentModel.DecimalConverter">
      <summary>Fournit un convertisseur de type pour convertir les objets <see cref="T:System.Decimal" /> vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DecimalConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtient une valeur indiquant si ce convertisseur peut convertir un objet en objet du type de destination donné en utilisant le contexte.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> qui représente le type vers lequel vous souhaitez effectuer la conversion.</param>
      <returns>
        <see langword="true" /> si ce convertisseur peut effectuer la conversion ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convertit l'objet de valeur donné en <see cref="T:System.Decimal" /> en utilisant les arguments.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> facultatif. Si la culture n'est pas spécifiée, la culture en cours est utilisée.</param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> dans lequel convertir la valeur.</param>
      <returns>
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="T:System.ComponentModel.DefaultBindingPropertyAttribute">
      <summary>Spécifie la propriété de liaison par défaut pour un composant. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> sans paramètre.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> avec le nom de propriété spécifié.</summary>
      <param name="name">Nom de la propriété de liaison par défaut.</param>
    </member>
    <member name="F:System.ComponentModel.DefaultBindingPropertyAttribute.Default">
      <summary>Représente la valeur par défaut de la classe <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.Equals(System.Object)">
      <summary>Détermine si le <see cref="T:System.Object" /> spécifié est égal à l'instance <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> en cours.</summary>
      <param name="obj">
        <see cref="T:System.Object" /> à comparer à l'instance <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> en cours.</param>
      <returns>
        <see langword="true" /> si l'objet est égal à l'instance actuelle ; sinon, <see langword="false" /> qui indique qu'ils ne sont pas égaux.</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.GetHashCode">
      <summary>Retourne le code de hachage de cette instance.</summary>
      <returns>Code de hachage d'un entier signé 32 bits.</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultBindingPropertyAttribute.Name">
      <summary>Obtient le nom de la propriété de liaison par défaut pour le composant auquel <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> est lié.</summary>
      <returns>Nom de la propriété de liaison par défaut pour le composant auquel <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> est lié.</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultEventAttribute">
      <summary>Spécifie l’événement par défaut d’un composant.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DefaultEventAttribute" />.</summary>
      <param name="name">Nom de l'événement par défaut pour le composant auquel cet attribut est lié.</param>
    </member>
    <member name="F:System.ComponentModel.DefaultEventAttribute.Default">
      <summary>Spécifie la valeur par défaut de <see cref="T:System.ComponentModel.DefaultEventAttribute" /> (<see langword="null" />). Ce champ <see langword="static" /> est en lecture seule.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.Equals(System.Object)">
      <summary>Retourne une valeur indiquant si la valeur de l'objet donné est égale au <see cref="T:System.ComponentModel.DefaultEventAttribute" /> en cours.</summary>
      <param name="obj">Objet dont l'égalité des valeurs doit être vérifiée.</param>
      <returns>
        <see langword="true" /> si la valeur de l'objet donné est égale à celle de la valeur actuelle ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.GetHashCode">
      <summary>Retourne le code de hachage de cette instance.</summary>
      <returns>Code de hachage d'un entier signé 32 bits.</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultEventAttribute.Name">
      <summary>Obtient le nom de l'événement par défaut pour le composant auquel cet attribut est lié.</summary>
      <returns>Nom de l'événement par défaut pour le composant auquel cet attribut est lié. La valeur par défaut est <see langword="null" />.</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultPropertyAttribute">
      <summary>Spécifie la propriété par défaut d’un composant.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DefaultPropertyAttribute" />.</summary>
      <param name="name">Nom de la propriété par défaut pour le composant auquel cet attribut est lié.</param>
    </member>
    <member name="F:System.ComponentModel.DefaultPropertyAttribute.Default">
      <summary>Spécifie la valeur par défaut de <see cref="T:System.ComponentModel.DefaultPropertyAttribute" /> (<see langword="null" />). Ce champ <see langword="static" /> est en lecture seule.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.Equals(System.Object)">
      <summary>Retourne une valeur indiquant si la valeur de l'objet donné est égale au <see cref="T:System.ComponentModel.DefaultPropertyAttribute" /> en cours.</summary>
      <param name="obj">Objet dont l'égalité des valeurs doit être vérifiée.</param>
      <returns>
        <see langword="true" /> si la valeur de l'objet donné est égale à celle de la valeur actuelle ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.GetHashCode">
      <summary>Retourne le code de hachage de cette instance.</summary>
      <returns>Code de hachage d'un entier signé 32 bits.</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultPropertyAttribute.Name">
      <summary>Obtient le nom de la propriété par défaut pour le composant auquel cet attribut est lié.</summary>
      <returns>Nom de la propriété par défaut pour le composant auquel cet attribut est lié. La valeur par défaut est <see langword="null" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ActiveDesignerEventArgs">
      <summary>Fournit des données pour l'événement <see cref="P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ActiveDesignerEventArgs.#ctor(System.ComponentModel.Design.IDesignerHost,System.ComponentModel.Design.IDesignerHost)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.ActiveDesignerEventArgs" />.</summary>
      <param name="oldDesigner">Document qui perd l'activation.</param>
      <param name="newDesigner">Document qui est activé.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ActiveDesignerEventArgs.NewDesigner">
      <summary>Obtient le document qui est activé.</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.IDesignerHost" /> représentant le document qui est activé.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ActiveDesignerEventArgs.OldDesigner">
      <summary>Obtient le document qui perd l'activation.</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.IDesignerHost" /> représentant le document qui perd l'activation.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ActiveDesignerEventHandler">
      <summary>Représente la méthode qui gérera l'événement <see cref="E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged" />.</summary>
      <param name="sender">Source de l'événement.</param>
      <param name="e">
        <see cref="T:System.ComponentModel.Design.ActiveDesignerEventArgs" /> qui contient les données d'événement.</param>
    </member>
    <member name="T:System.ComponentModel.Design.CheckoutException">
      <summary>L'exception levée lors d'une tentative d'extraction d'un fichier archivé dans un programme de gestion du code source est annulée ou échoue.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.CheckoutException" /> sans message ou code d'erreur associé.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.CheckoutException" /> à l'aide des données et du contexte de sérialisation spécifiés.</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> à utiliser pour la désérialisation.</param>
      <param name="context">Destination à utiliser pour la désérialisation.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.CheckoutException" /> avec le message spécifié.</summary>
      <param name="message">Message décrivant l'exception.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.CheckoutException" /> avec la description détaillée spécifiée et l'exception spécifiée.</summary>
      <param name="message">Description détaillée de l'erreur.</param>
      <param name="innerException">Référence à l'exception interne à l'origine de cette exception.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String,System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.CheckoutException" /> avec le message et le code d'erreur spécifiés.</summary>
      <param name="message">Message décrivant l'exception.</param>
      <param name="errorCode">Code d'erreur à passer.</param>
    </member>
    <member name="F:System.ComponentModel.Design.CheckoutException.Canceled">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.CheckoutException" /> qui spécifie que l'extraction a été annulée. Ce champ est en lecture seule.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.CommandID">
      <summary>Représente un identificateur de commande unique constitué d'un ID de commande numérique et d'un identificateur GUID de groupe de menus.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.#ctor(System.Guid,System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.CommandID" /> avec le GUID de groupe de menus et le numéro d'ID de commande spécifiés.</summary>
      <param name="menuGroup">GUID du groupe auquel appartient cette commande de menu.</param>
      <param name="commandID">Identificateur numérique de cette commande de menu.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.Equals(System.Object)">
      <summary>Détermine si deux instances <see cref="T:System.ComponentModel.Design.CommandID" /> sont égales.</summary>
      <param name="obj">Objet à comparer.</param>
      <returns>
        <see langword="true" /> si l'objet spécifié est équivalent à celui-ci ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.GetHashCode">
      <summary>Sert de fonction de hachage pour un type particulier.</summary>
      <returns>Code de hachage du <see cref="T:System.Object" /> actuel.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CommandID.Guid">
      <summary>Obtient le GUID du groupe de menus auquel appartient la commande de menu identifiée par ce <see cref="T:System.ComponentModel.Design.CommandID" />.</summary>
      <returns>GUID du groupe de commandes de cette commande.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CommandID.ID">
      <summary>Obtient l'ID de commande numérique.</summary>
      <returns>Numéro d'ID de commande.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.ToString">
      <summary>Retourne <see cref="T:System.String" /> qui représente l'objet en cours.</summary>
      <returns>Chaîne contenant les informations de l'ID de commande, constituées à la fois du GUID et de l'identificateur entier.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangedEventArgs">
      <summary>Fournit des données pour l'événement <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" />. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentChangedEventArgs.#ctor(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs" />.</summary>
      <param name="component">Composant modifié.</param>
      <param name="member">
        <see cref="T:System.ComponentModel.MemberDescriptor" /> représentant le membre modifié.</param>
      <param name="oldValue">Ancienne valeur du membre modifié.</param>
      <param name="newValue">Nouvelle valeur du membre modifié.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.Component">
      <summary>Obtient le composant modifié.</summary>
      <returns>
        <see cref="T:System.Object" /> représentant le composant modifié.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.Member">
      <summary>Obtient le membre modifié.</summary>
      <returns>
        <see cref="T:System.ComponentModel.MemberDescriptor" /> indiquant le membre modifié.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.NewValue">
      <summary>Obtient la nouvelle valeur du membre modifié.</summary>
      <returns>Nouvelle valeur du membre modifié. Cette propriété peut être <see langword="null" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.OldValue">
      <summary>Obtient l'ancienne valeur du membre modifié.</summary>
      <returns>Ancienne valeur du membre modifié. Cette propriété peut être <see langword="null" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangedEventHandler">
      <summary>Représente la méthode qui gérera un événement <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" />.</summary>
      <param name="sender">Source de l'événement.</param>
      <param name="e">
        <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs" /> qui contient les données d'événement.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangingEventArgs">
      <summary>Fournit des données pour l'événement <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" />. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentChangingEventArgs.#ctor(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.ComponentChangingEventArgs" />.</summary>
      <param name="component">Composant sur le point d'être modifié.</param>
      <param name="member">
        <see cref="T:System.ComponentModel.MemberDescriptor" /> indiquant le membre du composant qui est sur le point d'être modifié.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangingEventArgs.Component">
      <summary>Obtient le composant sur le point d'être modifié ou le composant qui est le conteneur parent du membre sur le point d'être modifié.</summary>
      <returns>Composant dont un membre est sur le point d'être modifié.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangingEventArgs.Member">
      <summary>Obtient le membre sur le point d'être modifié.</summary>
      <returns>
        <see cref="T:System.ComponentModel.MemberDescriptor" /> indiquant le membre sur le point d'être modifié, s'il est connu ; sinon, <see langword="null" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangingEventHandler">
      <summary>Représente la méthode qui gérera un événement <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" />.</summary>
      <param name="sender">Source de l'événement.</param>
      <param name="e">Événement <see cref="T:System.ComponentModel.Design.ComponentChangingEventArgs" /> qui contient les données d'événement.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentEventArgs">
      <summary>Fournit les données des événements <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded" />, <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding" />, <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved" /> et <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentEventArgs.#ctor(System.ComponentModel.IComponent)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.ComponentEventArgs" />.</summary>
      <param name="component">Composant correspondant à la source de l'événement.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentEventArgs.Component">
      <summary>Obtient le composant associé à l'événement.</summary>
      <returns>Composant associé à l'événement.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentEventHandler">
      <summary>Représente la méthode qui gérera les événements <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding" />, <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded" />, <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving" /> et <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved" /> déclenchés pour des événements de niveau composant.</summary>
      <param name="sender">Source de l'événement.</param>
      <param name="e">
        <see cref="T:System.ComponentModel.Design.ComponentEventArgs" /> qui contient les données d'événement.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentRenameEventArgs">
      <summary>Fournit des données pour l'événement <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentRenameEventArgs.#ctor(System.Object,System.String,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.ComponentRenameEventArgs" />.</summary>
      <param name="component">Composant à renommer.</param>
      <param name="oldName">Ancien nom du composant.</param>
      <param name="newName">Nouveau nom du composant.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.Component">
      <summary>Obtient le composant à renommer.</summary>
      <returns>Composant à renommer.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.NewName">
      <summary>Obtient le nom du composant après l'événement d'attribution d'un nouveau nom.</summary>
      <returns>Nom du composant après l'événement d'affectation d'un nouveau nom.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.OldName">
      <summary>Obtient le nom du composant après l'événement d'affectation d'un nouveau nom.</summary>
      <returns>Ancien nom du composant.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentRenameEventHandler">
      <summary>Représente la méthode qui gérera un événement <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename" />.</summary>
      <param name="sender">Source de l'événement.</param>
      <param name="e">
        <see cref="T:System.ComponentModel.Design.ComponentRenameEventArgs" /> qui contient les données d'événement.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerCollection">
      <summary>Représente une collection de concepteurs.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.#ctor(System.Collections.IList)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.DesignerCollection" /> qui contient l'ensemble de concepteurs spécifié.</summary>
      <param name="designers">Liste qui contient la collection de concepteurs à ajouter.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.#ctor(System.ComponentModel.Design.IDesignerHost[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.DesignerCollection" /> qui contient les concepteurs spécifiés.</summary>
      <param name="designers">Tableau d'objets <see cref="T:System.ComponentModel.Design.IDesignerHost" /> à stocker.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.Count">
      <summary>Obtient le nombre de concepteurs de la collection.</summary>
      <returns>Nombre de concepteurs de la collection.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.GetEnumerator">
      <summary>Obtient un nouvel énumérateur pour cette collection.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> qui énumère la collection.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.Item(System.Int32)">
      <summary>Obtient le concepteur à l'index spécifié.</summary>
      <param name="index">Index du concepteur à retourner.</param>
      <returns>Concepteur à l'index spécifié.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copie les éléments de la collection dans un <see cref="T:System.Array" />, en commençant à un index particulier de <see cref="T:System.Array" />.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensionnel qui constitue la destination des éléments copiés à partir de la collection. <see cref="T:System.Array" /> doit avoir une indexation de base zéro.</param>
      <param name="index">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#Count">
      <summary>Obtient le nombre d’éléments contenus dans la collection.</summary>
      <returns>Nombre d’éléments contenus dans la collection.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Obtient une valeur indiquant si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe).</summary>
      <returns>
        <see langword="true" /> si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe) ; sinon <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#SyncRoot">
      <summary>Obtient un objet qui peut être utilisé pour synchroniser l’accès à la collection.</summary>
      <returns>Objet permettant de synchroniser l’accès à la collection.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Obtient un nouvel énumérateur pour cette collection.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> qui énumère la collection.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerEventArgs">
      <summary>Fournit des données pour les événements <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated" /> et <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerEventArgs.#ctor(System.ComponentModel.Design.IDesignerHost)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.DesignerEventArgs" />.</summary>
      <param name="host">
        <see cref="T:System.ComponentModel.Design.IDesignerHost" /> du document.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerEventArgs.Designer">
      <summary>Obtient l'hôte du document.</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.IDesignerHost" /> du document.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerEventHandler">
      <summary>Représente la méthode qui gérera les événements <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated" /> et <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed" /> déclenchés lors de la création ou de la suppression d'un document.</summary>
      <param name="sender">Source de l'événement.</param>
      <param name="e">
        <see cref="T:System.ComponentModel.Design.DesignerEventArgs" /> qui contient les données d'événement.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerOptionService">
      <summary>Fournit une classe de base pour l'obtention et la définition des valeurs des options d'un concepteur.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.DesignerOptionService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.CreateOptionCollection(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection,System.String,System.Object)">
      <summary>Crée un <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> avec le nom donné et l'ajoute au parent donné.</summary>
      <param name="parent">Collection d'options de concepteur parente. Toutes les collections ont un parent excepté la collection d'objets racine.</param>
      <param name="name">Nom de cette collection.</param>
      <param name="value">Objet qui fournit les propriétés de cette collection. Peut avoir la valeur <see langword="null" /> si la collection ne doit pas fournir de propriétés.</param>
      <returns>Nouveau <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> avec le nom donné.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parent" /> ou <paramref name="name" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> est une chaîne vide.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection">
      <summary>Contient une collection d’options de concepteur. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.CopyTo(System.Array,System.Int32)">
      <summary>Copie l'ensemble de la collection dans un <see cref="T:System.Array" /> compatible unidimensionnel, en commençant à l'index spécifié du tableau cible.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensionnel qui constitue la destination des éléments copiés à partir de la collection. <paramref name="array" /> doit avoir une indexation de base zéro.</param>
      <param name="index">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Count">
      <summary>Obtient le nombre de collections d'options enfants que cet objet <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> contient.</summary>
      <returns>Nombre de collections d'options enfants que cet objet <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> contient.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.GetEnumerator">
      <summary>Retourne <see cref="T:System.Collections.IEnumerator" /> qui peut être utilisé pour itérer au sein de cette collection.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> qui peut être utilisé pour itérer au sein de cette collection.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.IndexOf(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)">
      <summary>Retourne l'index de la première occurrence d'une valeur donnée dans une plage de cette collection.</summary>
      <param name="value">Objet à localiser dans la collection.</param>
      <returns>Index de la première occurrence d'une valeur dans la collection entière, le cas échéant ; sinon, la limite inférieure de la collection moins 1.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Item(System.Int32)">
      <summary>Obtient la collection enfant à l'index donné.</summary>
      <param name="index">Index de base zéro de la collection enfant à obtenir.</param>
      <returns>Collection enfant à l'index spécifié.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Item(System.String)">
      <summary>Obtient la collection enfant correspondant au nom donné.</summary>
      <param name="name">Nom de la collection enfant.</param>
      <returns>Collection enfant avec le nom spécifié par le paramètre <paramref name="name" /> ou <see langword="null" /> si le nom n'est pas trouvé.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Name">
      <summary>Obtient le nom de cet objet <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />.</summary>
      <returns>Nom de cet objet <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Parent">
      <summary>Obtient l'objet de la collection parent.</summary>
      <returns>Objet de la collection parent ou <see langword="null" /> s'il n'existe aucun parent.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Properties">
      <summary>Obtient la collection de propriétés offerte par cet objet <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />, avec tous ses enfants.</summary>
      <returns>Collection de propriétés offerte par cet objet <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />, avec tous ses enfants.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.ShowDialog">
      <summary>Affiche une interface utilisateur de boîte de dialogue avec laquelle l'utilisateur peut configurer les options dans cet objet <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />.</summary>
      <returns>
        <see langword="true" /> si la boîte de dialogue peut être affichée ; sinon <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Obtient une valeur indiquant si l'accès à la collection est synchronisé et, par conséquent, thread-safe.</summary>
      <returns>
        <see langword="true" /> si l'accès à la collection est synchronisé ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#ICollection#SyncRoot">
      <summary>Obtient un objet qui peut être utilisé pour synchroniser l’accès à la collection.</summary>
      <returns>Objet permettant de synchroniser l’accès à la collection.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Add(System.Object)">
      <summary>Ajoute un élément à <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">
        <see cref="T:System.Object" /> à ajouter à <see cref="T:System.Collections.IList" />.</param>
      <returns>Position à laquelle le nouvel élément est inséré.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Clear">
      <summary>Supprime tous les éléments de la collection.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Contains(System.Object)">
      <summary>Détermine si la collection contient une valeur spécifique.</summary>
      <param name="value">
        <see cref="T:System.Object" /> à localiser dans la collection.</param>
      <returns>
        <see langword="true" /> si <see cref="T:System.Object" /> se trouve dans la collection ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>Détermine l'index d'un élément spécifique de la collection.</summary>
      <param name="value">
        <see cref="T:System.Object" /> à rechercher dans la collection.</param>
      <returns>Index de <paramref name="value" /> s'il figure dans la liste ; sinon, -1.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Insère un élément dans la collection au niveau de l'index spécifié.</summary>
      <param name="index">Index de base zéro au niveau duquel <paramref name="value" /> doit être inséré.</param>
      <param name="value">
        <see cref="T:System.Object" /> à insérer dans la collection.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IsFixedSize">
      <summary>Obtient une valeur indiquant si la collection est de taille fixe.</summary>
      <returns>
        <see langword="true" /> si la collection a une taille fixe ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IsReadOnly">
      <summary>Obtient une valeur indiquant si la collection est en lecture seule.</summary>
      <returns>
        <see langword="true" /> si la collection est en lecture seule ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Item(System.Int32)">
      <summary>Obtient ou définit l'élément au niveau de l'index spécifié.</summary>
      <param name="index">Index de base zéro de l'élément à obtenir ou à définir.</param>
      <returns>Élément au niveau de l'index spécifié.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Remove(System.Object)">
      <summary>Supprime la première occurrence d’un objet spécifique dans la collection.</summary>
      <param name="value">
        <see cref="T:System.Object" /> à supprimer de la collection.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Supprime l'élément de la collection au niveau de l'index spécifié.</summary>
      <param name="index">Index de base zéro de l'élément à supprimer.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.Options">
      <summary>Obtient la collection d'options de ce service.</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> rempli avec les options de concepteur disponibles.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.PopulateOptionCollection(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)">
      <summary>Remplit un <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />.</summary>
      <param name="options">Collection à remplir.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.ShowDialog(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection,System.Object)">
      <summary>Affiche la boîte de dialogue d'options pour l'objet donné.</summary>
      <param name="options">Collection d'options contenant l'objet à appeler.</param>
      <param name="optionObject">Objet d'options réel.</param>
      <returns>
        <see langword="true" /> si la boîte de dialogue est affichée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.System#ComponentModel#Design#IDesignerOptionService#GetOptionValue(System.String,System.String)">
      <summary>Obtient la valeur d'une option définie dans ce package.</summary>
      <param name="pageName">Page à laquelle l'option est liée.</param>
      <param name="valueName">Nom de la valeur d'option.</param>
      <returns>Valeur de l'option nommée <paramref name="valueName" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pageName" /> ou <paramref name="valueName" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.System#ComponentModel#Design#IDesignerOptionService#SetOptionValue(System.String,System.String,System.Object)">
      <summary>Définit la valeur d'une option définie dans ce package.</summary>
      <param name="pageName">Page à laquelle l'option est liée.</param>
      <param name="valueName">Nom de la valeur d'option.</param>
      <param name="value">Valeur de l'option.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pageName" /> ou <paramref name="valueName" /> est <see langword="null" />.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransaction">
      <summary>Permet de grouper une série d’actions au moment du design pour améliorer les performances et permettre l’annulation de la plupart des modifications.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> sans description.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> avec la description de la transaction spécifiée.</summary>
      <param name="description">Description de cette transaction.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Cancel">
      <summary>Annule la transaction et tente de restaurer les modifications apportées par les événements de la transaction.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Canceled">
      <summary>Obtient une valeur indiquant si la transaction a été annulée.</summary>
      <returns>
        <see langword="true" /> si la transaction a été annulée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Commit">
      <summary>Valide cette transaction.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Committed">
      <summary>Obtient une valeur indiquant si la transaction a été validée.</summary>
      <returns>
        <see langword="true" /> si la transaction a été validée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Description">
      <summary>Obtient une description de la transaction.</summary>
      <returns>Description de la transaction.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Dispose(System.Boolean)">
      <summary>Libère les ressources non managées utilisées par <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> et libère éventuellement les ressources managées.</summary>
      <param name="disposing">
        <see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour ne libérer que les ressources non managées.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Finalize">
      <summary>Libère les ressources associées à cet objet. Cette substitution valide cette transaction si elle n'est pas encore validée.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.OnCancel">
      <summary>Déclenche l'événement <see langword="Cancel" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.OnCommit">
      <summary>Exécute l’opération réelle de validation d’une transaction.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.System#IDisposable#Dispose">
      <summary>Libère toutes les ressources utilisées par <see cref="T:System.ComponentModel.Design.DesignerTransaction" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs">
      <summary>Fournit des données pour les événements <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" /> et <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.#ctor(System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" />, à l'aide de la valeur spécifiée indiquant si le concepteur a appelé <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> sur la transaction.</summary>
      <param name="commit">Valeur indiquant si la transaction a été validée.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.#ctor(System.Boolean,System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" />.</summary>
      <param name="commit">Valeur indiquant si la transaction a été validée.</param>
      <param name="lastTransaction">
        <see langword="true" /> s'il s'agit de la dernière transaction à fermer ; sinon, <see langword="false" />.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.LastTransaction">
      <summary>Obtient une valeur qui indique s'il s'agit de la dernière transaction à fermer.</summary>
      <returns>
        <see langword="true" /> s'il s'agit de la dernière transaction à fermer ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.TransactionCommitted">
      <summary>Indique si le concepteur a appelé <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> sur la transaction.</summary>
      <returns>
        <see langword="true" /> si le concepteur a appelé <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> sur la transaction ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransactionCloseEventHandler">
      <summary>Représente la méthode qui gère les événements <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" /> et <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" /> d'un concepteur.</summary>
      <param name="sender">Source de l'événement.</param>
      <param name="e">
        <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" /> qui contient les données d'événement.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerVerb">
      <summary>Représente un verbe qui peut être appelé à partir d'un concepteur.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.#ctor(System.String,System.EventHandler)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.DesignerVerb" />.</summary>
      <param name="text">Texte de la commande de menu qui s'affiche à l'utilisateur.</param>
      <param name="handler">Gestionnaire d'événements exécutant les actions du verbe.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.#ctor(System.String,System.EventHandler,System.ComponentModel.Design.CommandID)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.DesignerVerb" />.</summary>
      <param name="text">Texte de la commande de menu qui s'affiche à l'utilisateur.</param>
      <param name="handler">Gestionnaire d'événements exécutant les actions du verbe.</param>
      <param name="startCommandID">ID de la commande de départ pour ce verbe. Par défaut, l'architecture du concepteur met de côté une série d'ID de commande pour les verbes. Vous pouvez les substituer et fournir un ID de commande personnalisé.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerb.Description">
      <summary>Obtient ou définit la description de l'élément de menu pour le verbe.</summary>
      <returns>Chaîne qui décrit l'élément de menu.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerb.Text">
      <summary>Obtient le texte de description de la commande sous forme de verbe contenue dans le menu.</summary>
      <returns>Description de la commande sous forme de verbe.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.ToString">
      <summary>Substitue <see cref="M:System.Object.ToString" />.</summary>
      <returns>Texte du verbe ou chaîne vide ("") si le champ de texte est vide.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerVerbCollection">
      <summary>Représente une collection d'objets <see cref="T:System.ComponentModel.Design.DesignerVerb" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.#ctor(System.ComponentModel.Design.DesignerVerb[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> avec le tableau d'objets <see cref="T:System.ComponentModel.Design.DesignerVerb" /> spécifié.</summary>
      <param name="value">Tableau <see cref="T:System.ComponentModel.Design.DesignerVerb" /> indiquant les verbes qui doivent être contenus dans la collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Add(System.ComponentModel.Design.DesignerVerb)">
      <summary>Ajoute l'objet <see cref="T:System.ComponentModel.Design.DesignerVerb" /> spécifié à la collection.</summary>
      <param name="value">Objet <see cref="T:System.ComponentModel.Design.DesignerVerb" /> à ajouter à la collection.</param>
      <returns>Index de la collection auquel le verbe a été ajouté.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.AddRange(System.ComponentModel.Design.DesignerVerb[])">
      <summary>Ajoute l'ensemble spécifié de verbes du concepteur à la collection.</summary>
      <param name="value">Tableau d'objets <see cref="T:System.ComponentModel.Design.DesignerVerb" /> à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.AddRange(System.ComponentModel.Design.DesignerVerbCollection)">
      <summary>Ajoute la collection spécifiée de verbes du concepteur à la collection.</summary>
      <param name="value">
        <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Contains(System.ComponentModel.Design.DesignerVerb)">
      <summary>Obtient une valeur indiquant si le <see cref="T:System.ComponentModel.Design.DesignerVerb" /> spécifié existe dans la collection.</summary>
      <param name="value">
        <see cref="T:System.ComponentModel.Design.DesignerVerb" /> à rechercher dans la collection.</param>
      <returns>
        <see langword="true" /> si l'objet spécifié existe dans la collection ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.CopyTo(System.ComponentModel.Design.DesignerVerb[],System.Int32)">
      <summary>Copie les membres de la collection vers le tableau <see cref="T:System.ComponentModel.Design.DesignerVerb" /> spécifié, en commençant à l'index de destination déterminé.</summary>
      <param name="array">Tableau dans lequel copier les membres de la collection.</param>
      <param name="index">Index de destination à partir duquel commencer la copie.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.IndexOf(System.ComponentModel.Design.DesignerVerb)">
      <summary>Obtient l'index du <see cref="T:System.ComponentModel.Design.DesignerVerb" /> spécifié.</summary>
      <param name="value">
        <see cref="T:System.ComponentModel.Design.DesignerVerb" /> dont l'index doit être extrait de la collection.</param>
      <returns>Index de l'objet spécifié s'il est détecté dans la liste ; sinon, -1.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Insert(System.Int32,System.ComponentModel.Design.DesignerVerb)">
      <summary>Insère le <see cref="T:System.ComponentModel.Design.DesignerVerb" /> spécifié à l'index déterminé.</summary>
      <param name="index">Index de la collection auquel insérer le verbe.</param>
      <param name="value">
        <see cref="T:System.ComponentModel.Design.DesignerVerb" /> à insérer dans la collection.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerbCollection.Item(System.Int32)">
      <summary>Obtient ou définit le <see cref="T:System.ComponentModel.Design.DesignerVerb" /> à l'index spécifié.</summary>
      <param name="index">Index auquel obtenir ou définir <see cref="T:System.ComponentModel.Design.DesignerVerb" />.</param>
      <returns>
        <see cref="T:System.ComponentModel.Design.DesignerVerb" /> à chaque index valide dans la collection.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnClear">
      <summary>Déclenche l'événement <see langword="Clear" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnInsert(System.Int32,System.Object)">
      <summary>Déclenche l'événement <see langword="Insert" />.</summary>
      <param name="index">Index auquel insérer un élément.</param>
      <param name="value">Objet à insérer.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnRemove(System.Int32,System.Object)">
      <summary>Déclenche l'événement <see langword="Remove" />.</summary>
      <param name="index">Index auquel supprimer l'élément.</param>
      <param name="value">Objet à supprimer.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>Déclenche l'événement <see langword="Set" />.</summary>
      <param name="index">Index auquel définir l'élément.</param>
      <param name="oldValue">Ancien objet.</param>
      <param name="newValue">Nouvel objet.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnValidate(System.Object)">
      <summary>Déclenche l'événement <see langword="Validate" />.</summary>
      <param name="value">Objet à valider.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Remove(System.ComponentModel.Design.DesignerVerb)">
      <summary>Supprime l’objet <see cref="T:System.ComponentModel.Design.DesignerVerb" /> spécifié de la collection.</summary>
      <param name="value">
        <see cref="T:System.ComponentModel.Design.DesignerVerb" /> à supprimer de la collection.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesigntimeLicenseContext">
      <summary>Représente un contexte de licence au moment du design pouvant prendre en charge un fournisseur de licences au moment du design.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.DesigntimeLicenseContext" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)">
      <summary>Obtient une clé de licence enregistrée.</summary>
      <param name="type">Type de la clé de licence.</param>
      <param name="resourceAssembly">Assembly duquel la clé doit être obtenue.</param>
      <returns>Clé de licence enregistrée correspondant au type spécifié.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.SetSavedLicenseKey(System.Type,System.String)">
      <summary>Définit une clé de licence enregistrée.</summary>
      <param name="type">Type de la clé de licence.</param>
      <param name="key">Clé de licence.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesigntimeLicenseContext.UsageMode">
      <summary>Obtient le mode d'utilisation de la licence.</summary>
      <returns>
        <see cref="T:System.ComponentModel.LicenseUsageMode" /> indiquant le mode de licence du contexte.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesigntimeLicenseContextSerializer">
      <summary>Fournit la prise en charge de la sérialisation du contexte de licence au moment du design.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContextSerializer.Serialize(System.IO.Stream,System.String,System.ComponentModel.Design.DesigntimeLicenseContext)">
      <summary>Sérialise les licences au sein du contexte de licence au moment du design spécifié à l'aide de la clé et du flux de sortie spécifiés.</summary>
      <param name="o">Flux dans lequel écrire la sortie.</param>
      <param name="cryptoKey">Clé à utiliser pour le chiffrement.</param>
      <param name="context">
        <see cref="T:System.ComponentModel.Design.DesigntimeLicenseContext" /> indiquant le contexte de licence.</param>
    </member>
    <member name="T:System.ComponentModel.Design.HelpContextType">
      <summary>Définit des identificateurs qui indiquent des informations sur le contexte dans lequel une demande d'informations d'aide a été lancée.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Ambient">
      <summary>Contexte général.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Selection">
      <summary>Sélection.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.ToolWindowSelection">
      <summary>Sélection d'une fenêtre Outil.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Window">
      <summary>Fenêtre.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.HelpKeywordAttribute">
      <summary>Spécifie le mot-clé de contexte pour une classe ou un membre. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />.</summary>
      <param name="keyword">Valeur du mot clé d'aide.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor(System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> du type donné.</summary>
      <param name="t">Type à partir duquel le mot clé d'aide sera pris.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="t" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordAttribute.Default">
      <summary>Représente la valeur par défaut de <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />. Ce champ est en lecture seule.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.Equals(System.Object)">
      <summary>Détermine si deux instances <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> sont égales.</summary>
      <param name="obj">
        <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> à comparer avec l'objet <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> actuel.</param>
      <returns>
        <see langword="true" /> si le <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> spécifié est égal au <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> actuel ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.GetHashCode">
      <summary>Retourne le code de hachage de cette instance.</summary>
      <returns>Code de hachage du <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> actuel.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.HelpKeywordAttribute.HelpKeyword">
      <summary>Obtient le mot clé d'aide fourni par cet attribut.</summary>
      <returns>Mot clé d'aide fourni par cet attribut.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.IsDefaultAttribute">
      <summary>Détermine si le mot clé d'aide est <see langword="null" />.</summary>
      <returns>
        <see langword="true" /> si le mot clé d'aide est <see langword="null" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.HelpKeywordType">
      <summary>Définit des identificateurs qui indiquent le type d'un mot clé d'aide.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.F1Keyword">
      <summary>Mot clé sur lequel l'utilisateur demande de l'aide en appuyant sur la touche F1.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.FilterKeyword">
      <summary>Mot clé de filtre.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.GeneralKeyword">
      <summary>Mot clé général.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentChangeService">
      <summary>Fournit une interface permettant d'ajouter et de supprimer les gestionnaires d'événements pour les événements qui ajoutent, modifient, suppriment ou renomment des composants, et fournit des méthodes pour déclencher un événement <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> ou <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" />.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded">
      <summary>Se produit suite à l'ajout d'un composant.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding">
      <summary>Se produit pendant le processus d'ajout d'un composant.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged">
      <summary>Se produit suite à la modification d'un composant.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging">
      <summary>Se produit pendant le processus de modification d'un composant.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved">
      <summary>Se produit suite à la suppression d'un composant.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving">
      <summary>Se produit pendant le processus de suppression d'un composant.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename">
      <summary>Se produit lorsqu'un composant est renommé.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)">
      <summary>Avertit le service de modification du composant qu'un composant particulier a été modifié.</summary>
      <param name="component">Composant modifié.</param>
      <param name="member">Membre modifié. Il est <see langword="null" /> si cette modification n'est pas liée à un membre unique.</param>
      <param name="oldValue">Ancienne valeur du membre. Ceci est valide uniquement si le membre n'est pas <see langword="null" />.</param>
      <param name="newValue">Nouvelle valeur du membre. Ceci est valide uniquement si le membre n'est pas <see langword="null" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>Avertit le service de modification du composant qu'un composant particulier est en cours de modification.</summary>
      <param name="component">Composant sur le point d'être modifié.</param>
      <param name="member">Membre en cours de modification. Il est <see langword="null" /> si cette modification n'est pas liée à un membre unique.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentDiscoveryService">
      <summary>Active l'énumération de composants au moment du design.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentDiscoveryService.GetComponentTypes(System.ComponentModel.Design.IDesignerHost,System.Type)">
      <summary>Obtient la liste des types de composants disponibles.</summary>
      <param name="designerHost">Hôte du concepteur qui fournit des services au moment du design. Peut être <see langword="null" />.</param>
      <param name="baseType">Type de base qui spécifie les composants à récupérer. Peut être <see langword="null" />.</param>
      <returns>Liste des types de composants disponibles.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentInitializer">
      <summary>Fournit un jeu de valeurs par défaut recommandées pendant la création de composants.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentInitializer.InitializeExistingComponent(System.Collections.IDictionary)">
      <summary>Rétablit l'état par défaut d'une instance d'un composant.</summary>
      <param name="defaultValues">Dictionnaire de valeurs de propriétés par défaut, qui sont des paires nom/valeur à utiliser pour rétablir l'état du composant.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentInitializer.InitializeNewComponent(System.Collections.IDictionary)">
      <summary>Initialise un nouveau composant à l'aide d'un jeu de valeurs recommandées.</summary>
      <param name="defaultValues">Dictionnaire de valeurs de propriétés par défaut, qui sont des paires nom/valeur à utiliser pour initialiser l'état du composant.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDesigner">
      <summary>Fournit l'infrastructure de base pour la génération d'un concepteur personnalisé.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesigner.Component">
      <summary>Obtient le composant de base qui est créé par ce concepteur.</summary>
      <returns>
        <see cref="T:System.ComponentModel.IComponent" /> indiquant le composant de base qui est créé par ce concepteur.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesigner.DoDefaultAction">
      <summary>Exécute l'action par défaut pour ce concepteur.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary>Initialise le concepteur avec le composant spécifié.</summary>
      <param name="component">Composant à associer à ce concepteur.</param>
    </member>
    <member name="P:System.ComponentModel.Design.IDesigner.Verbs">
      <summary>Obtient une collection des verbes de design pris en charge par le concepteur.</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> contenant les verbes pris en charge par le concepteur ou <see langword="null" /> si le composant ne possède pas de verbe.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerEventService">
      <summary>Fournit des notifications d'événements lors de l'ajout et de la suppression de concepteurs racine, ainsi que lors de la modification d'un composant sélectionné ou du concepteur racine en cours.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner">
      <summary>Obtient le concepteur racine pour le document actuellement actif.</summary>
      <returns>Document actuellement actif ou <see langword="null" /> si aucun document n'est actif.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged">
      <summary>Se produit lorsque le concepteur racine actuel est modifié.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated">
      <summary>Se produit lors de la création d'un concepteur racine.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed">
      <summary>Se produit lors de la suppression du concepteur racine d'un document.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerEventService.Designers">
      <summary>Obtient une collection de concepteurs racine pour les documents de design actuellement actifs dans l'environnement de design.</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.DesignerCollection" /> contenant les concepteurs racine créés qui n'ont pas encore été supprimés.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.SelectionChanged">
      <summary>Se produit lors de la modification de la sélection du mode Design en cours.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerFilter">
      <summary>Fournit une interface permettant à un concepteur d'accéder et de filtrer les dictionnaires d'un <see cref="T:System.ComponentModel.TypeDescriptor" /> qui stocke les descripteurs de propriétés, d'attributs et d'événements qu'un concepteur de composant peut exposer dans l'environnement au moment du design.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(System.Collections.IDictionary)">
      <summary>Lorsqu'elle est substituée dans une classe dérivée, permet à un concepteur de modifier ou de supprimer des éléments de l'ensemble d'attributs qu'il expose par le biais d'un <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="attributes">Objets <see cref="T:System.Attribute" /> de la classe du composant. Les clés du dictionnaire d'attributs sont les valeurs <see cref="P:System.Attribute.TypeId" /> des attributs.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(System.Collections.IDictionary)">
      <summary>Lorsqu'elle est substituée dans une classe dérivée, permet à un concepteur de modifier ou de supprimer des éléments de l'ensemble d'événements qu'il expose à l'aide d'un <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="events">Objets <see cref="T:System.ComponentModel.EventDescriptor" /> représentant les événements de la classe du composant. Les clés du dictionnaire d'événements sont des noms d'événements.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(System.Collections.IDictionary)">
      <summary>Lorsqu'elle est substituée dans une classe dérivée, permet à un concepteur de modifier ou de supprimer des éléments de l'ensemble de propriétés qu'il expose à l'aide d'un <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="properties">Objets <see cref="T:System.ComponentModel.PropertyDescriptor" /> représentant les propriétés de la classe du composant. Les clés du dictionnaire de propriétés sont des noms de propriétés.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(System.Collections.IDictionary)">
      <summary>Lorsqu'elle est substituée dans une classe dérivée, permet à un concepteur d'ajouter des éléments à l'ensemble d'attributs qu'il expose à l'aide d'un <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="attributes">Objets <see cref="T:System.Attribute" /> de la classe du composant. Les clés du dictionnaire d'attributs sont les valeurs <see cref="P:System.Attribute.TypeId" /> des attributs.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(System.Collections.IDictionary)">
      <summary>Lorsqu'elle est substituée dans une classe dérivée, permet à un concepteur d'ajouter des éléments à l'ensemble d'événements qu'il expose à l'aide d'un <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="events">Objets <see cref="T:System.ComponentModel.EventDescriptor" /> représentant les événements de la classe du composant. Les clés du dictionnaire d'événements sont des noms d'événements.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(System.Collections.IDictionary)">
      <summary>Lorsqu'elle est substituée dans une classe dérivée, permet à un concepteur d'ajouter des éléments à l'ensemble de propriétés qu'il expose à l'aide d'un <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="properties">Objets <see cref="T:System.ComponentModel.PropertyDescriptor" /> représentant les propriétés de la classe du composant. Les clés du dictionnaire de propriétés sont des noms de propriétés.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerHost">
      <summary>Fournit une interface pour la gestion des transactions et composants du concepteur.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.Activate">
      <summary>Active le concepteur hébergé par cet hôte.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.Activated">
      <summary>Se produit lorsque ce concepteur est activé.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.Container">
      <summary>Obtient le conteneur de cet hôte de concepteur.</summary>
      <returns>
        <see cref="T:System.ComponentModel.IContainer" /> pour cet hôte.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type)">
      <summary>Crée un composant du type spécifié et l'ajoute au document de design.</summary>
      <param name="componentClass">Type du composant à créer.</param>
      <returns>Nouveau composant qui vient d'être créé.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type,System.String)">
      <summary>Crée un composant du type spécifié avec le nom donné et l'ajoute au document de design.</summary>
      <param name="componentClass">Type du composant à créer.</param>
      <param name="name">Nom du composant.</param>
      <returns>Nouveau composant qui vient d'être créé.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateTransaction">
      <summary>Crée un <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> pouvant encapsuler des séquences d'événements afin d'améliorer les performances et de permettre l'annulation, ainsi que le rétablissement des fonctionnalités de prise en charge.</summary>
      <returns>Nouvelle instance de <see cref="T:System.ComponentModel.Design.DesignerTransaction" />. Lorsque vous terminez les étapes de votre transaction, vous devez appeler <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> sur cet objet.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateTransaction(System.String)">
      <summary>Crée un <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> pouvant encapsuler des séquences d'événements afin d'améliorer les performances et de permettre l'annulation, ainsi que le rétablissement des fonctionnalités de prise en charge, à l'aide de la description de la transaction spécifiée.</summary>
      <param name="description">Titre ou description de la nouvelle transaction qui vient d'être créée.</param>
      <returns>Nouveau <see cref="T:System.ComponentModel.Design.DesignerTransaction" />. Une fois les étapes de la transaction terminées, vous devez appeler <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> sur cet objet.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.Deactivated">
      <summary>Se produit lorsque ce concepteur est désactivé.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.DestroyComponent(System.ComponentModel.IComponent)">
      <summary>Détruit le composant spécifié et le supprime du conteneur du concepteur.</summary>
      <param name="component">Composant à détruire.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.GetDesigner(System.ComponentModel.IComponent)">
      <summary>Obtient l'instance de concepteur qui contient le composant spécifié.</summary>
      <param name="component">
        <see cref="T:System.ComponentModel.IComponent" /> pour lequel récupérer le concepteur.</param>
      <returns>
        <see cref="T:System.ComponentModel.Design.IDesigner" />, ou <see langword="null" /> s'il n'existe aucun concepteur pour le composant spécifié.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.GetType(System.String)">
      <summary>Obtient une instance du nom de type qualifié complet spécifié.</summary>
      <param name="typeName">Nom du type à charger.</param>
      <returns>Objet de type du nom de type spécifié, ou <see langword="null" /> si le type est introuvable.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.InTransaction">
      <summary>Obtient une valeur indiquant si l'hôte du concepteur se trouve actuellement dans une transaction.</summary>
      <returns>
        <see langword="true" /> si une transaction est en cours ; sinon <see langword="false" />.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.LoadComplete">
      <summary>Se produit lorsque ce concepteur a terminé le chargement de son document.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.Loading">
      <summary>Obtient une valeur indiquant si l'hôte du concepteur charge actuellement le document.</summary>
      <returns>
        <see langword="true" /> si l'hôte du concepteur charge actuellement le document ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.RootComponent">
      <summary>Obtient l'instance de la classe de base utilisée comme composant racine pour le design en cours.</summary>
      <returns>Instance de la classe du composant racine.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.RootComponentClassName">
      <summary>Obtient le nom qualifié complet de la classe dont le design est en cours.</summary>
      <returns>Nom qualifié complet de la classe du composant de base.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed">
      <summary>Ajoute un gestionnaire d'événements pour l'événement <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" />.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing">
      <summary>Ajoute un gestionnaire d'événements pour l'événement <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" />.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.TransactionDescription">
      <summary>Obtient la description de la transaction en cours.</summary>
      <returns>Description de la transaction en cours.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionOpened">
      <summary>Ajoute un gestionnaire d'événements pour l'événement <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionOpened" />.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionOpening">
      <summary>Ajoute un gestionnaire d'événements pour l'événement <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionOpening" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerHostTransactionState">
      <summary>Spécifie les méthodes permettant à l'hôte de concepteur de signaler l'état des transactions.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHostTransactionState.IsClosingTransaction">
      <summary>Obtient une valeur indiquant si l'hôte de concepteur ferme une transaction.</summary>
      <returns>
        <see langword="true" /> si le concepteur ferme une transaction ; <see langword="false" /> dans le cas contraire.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerOptionService">
      <summary>Permet d’accéder aux options du concepteur figurant dans le menu Outils sous la commande Options dans l’environnement de développement Visual Studio.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerOptionService.GetOptionValue(System.String,System.String)">
      <summary>Obtient la valeur de l'option du Concepteur Windows Forms spécifiée.</summary>
      <param name="pageName">Nom de la page qui définit l'option.</param>
      <param name="valueName">Nom de la propriété de l'option.</param>
      <returns>Valeur de l'option spécifiée.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerOptionService.SetOptionValue(System.String,System.String,System.Object)">
      <summary>Définit la valeur de l'option du Concepteur Windows Forms spécifiée.</summary>
      <param name="pageName">Nom de la page qui définit l'option.</param>
      <param name="valueName">Nom de la propriété de l'option.</param>
      <param name="value">Nouvelle valeur.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDictionaryService">
      <summary>Fournit un dictionnaire de paires clé-valeur de base, spécifique à un site de composant, par le biais d'un service qu'un concepteur peut utiliser pour stocker des données définies par l'utilisateur.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.GetKey(System.Object)">
      <summary>Obtient la clé correspondant à la valeur spécifiée.</summary>
      <param name="value">Valeur à rechercher dans le dictionnaire.</param>
      <returns>Clé associée ou <see langword="null" /> s'il n'existe aucune clé.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.GetValue(System.Object)">
      <summary>Obtient la valeur correspondant à la clé spécifiée.</summary>
      <param name="key">Clé dont la valeur doit être recherchée dans le dictionnaire.</param>
      <returns>Valeur associée ou <see langword="null" /> s'il n'existe aucune valeur.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.SetValue(System.Object,System.Object)">
      <summary>Définit la paire valeur-clé spécifiée.</summary>
      <param name="key">Objet à utiliser comme clé à laquelle la valeur doit être associée.</param>
      <param name="value">Valeur à stocker.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IEventBindingService">
      <summary>Fournit un service permettant l'inscription de gestionnaires d'événements pour les événements de composants.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.CreateUniqueMethodName(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)">
      <summary>Crée un nom unique pour une méthode de gestionnaire d'événements pour le composant et l'événement spécifiés.</summary>
      <param name="component">Instance du composant à laquelle l'événement est connecté.</param>
      <param name="e">Événement pour lequel créer un nom.</param>
      <returns>Nom recommandé pour la méthode de gestionnaire d'événements de cet événement.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetCompatibleMethods(System.ComponentModel.EventDescriptor)">
      <summary>Obtient une collection de méthodes de gestionnaire d'événements possédant une signature de méthode compatible avec l'événement spécifié.</summary>
      <param name="e">Événement pour lequel obtenir les méthodes de gestionnaire d'événements compatibles.</param>
      <returns>Collection de chaînes.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEvent(System.ComponentModel.PropertyDescriptor)">
      <summary>Obtient <see cref="T:System.ComponentModel.EventDescriptor" /> pour l'événement représenté par le descripteur de propriété spécifié, s'il représente un événement.</summary>
      <param name="property">Propriété qui représente un événement.</param>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptor" /> pour l'événement représenté par la propriété, ou <see langword="null" /> si la propriété ne représente pas un événement.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEventProperties(System.ComponentModel.EventDescriptorCollection)">
      <summary>Convertit un ensemble de descripteurs d'événement en un ensemble de descripteurs de propriété.</summary>
      <param name="events">Événements à convertir en propriétés.</param>
      <returns>Tableau d'objets <see cref="T:System.ComponentModel.PropertyDescriptor" /> qui décrivent l'ensemble d'événements.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEventProperty(System.ComponentModel.EventDescriptor)">
      <summary>Convertit un descripteur d'événement unique en un descripteur de propriété.</summary>
      <param name="e">Événement à convertir.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> qui décrit l'événement.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode">
      <summary>Affiche le code utilisateur du concepteur.</summary>
      <returns>
        <see langword="true" /> si le code est affiché ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)">
      <summary>Affiche le code utilisateur de l'événement spécifié.</summary>
      <param name="component">Composant auquel l'événement est connecté.</param>
      <param name="e">Événement à afficher.</param>
      <returns>
        <see langword="true" /> si le code est affiché ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode(System.Int32)">
      <summary>Affiche le code utilisateur du concepteur à la ligne spécifiée.</summary>
      <param name="lineNumber">Numéro de la ligne sur laquelle placer le signe insertion.</param>
      <returns>
        <see langword="true" /> si le code est affiché ; sinon <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IExtenderListService">
      <summary>Fournit une interface pouvant répertorier les fournisseurs d'extendeurs.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderListService.GetExtenderProviders">
      <summary>Obtient l'ensemble des fournisseurs d'extendeurs pour le composant.</summary>
      <returns>Tableau de type <see cref="T:System.ComponentModel.IExtenderProvider" /> qui répertorie les fournisseurs d'extendeurs actifs. S'il n'existe aucun fournisseur, un tableau vide est retourné.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IExtenderProviderService">
      <summary>Fournit une interface pour ajouter et supprimer des fournisseurs d'extendeurs au moment du design.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderProviderService.AddExtenderProvider(System.ComponentModel.IExtenderProvider)">
      <summary>Ajoute le fournisseur d'extendeurs spécifié.</summary>
      <param name="provider">Fournisseur d'extendeurs à ajouter.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderProviderService.RemoveExtenderProvider(System.ComponentModel.IExtenderProvider)">
      <summary>Supprime le fournisseur d'extendeurs spécifié.</summary>
      <param name="provider">Fournisseur d'extendeurs à supprimer.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IHelpService">
      <summary>Fournit des méthodes servant à l'affichage de rubriques d'aide et à l'ajout et la suppression de mots clés d'aide au moment du design.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.AddContextAttribute(System.String,System.String,System.ComponentModel.Design.HelpKeywordType)">
      <summary>Ajoute un attribut de contexte au document.</summary>
      <param name="name">Nom de l'attribut à ajouter.</param>
      <param name="value">Valeur de l'attribut.</param>
      <param name="keywordType">Type du mot clé, à partir de l'énumération <see cref="T:System.ComponentModel.Design.HelpKeywordType" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ClearContextAttributes">
      <summary>Supprime du document tous les attributs de contexte existants.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)">
      <summary>Crée un <see cref="T:System.ComponentModel.Design.IHelpService" /> local pour gérer les sous-contextes.</summary>
      <param name="contextType">Type de priorité du sous-contexte à ajouter.</param>
      <returns>Objet <see cref="T:System.ComponentModel.Design.IHelpService" /> nouvellement créé.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.RemoveContextAttribute(System.String,System.String)">
      <summary>Supprime un attribut de contexte précédemment ajouté.</summary>
      <param name="name">Nom de l'attribut à supprimer.</param>
      <param name="value">Valeur de l'attribut à supprimer.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.RemoveLocalContext(System.ComponentModel.Design.IHelpService)">
      <summary>Supprime un contexte créé avec <see cref="M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)" />.</summary>
      <param name="localContext">Contexte local <see cref="T:System.ComponentModel.Design.IHelpService" /> à supprimer.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ShowHelpFromKeyword(System.String)">
      <summary>Affiche la rubrique d'aide correspondant au mot clé spécifié.</summary>
      <param name="helpKeyword">Mot clé de la rubrique d'aide à afficher.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ShowHelpFromUrl(System.String)">
      <summary>Affiche la rubrique d'aide correspondant à l'URL spécifiée.</summary>
      <param name="helpUrl">URL de la rubrique d'aide à afficher.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IInheritanceService">
      <summary>Fournit des méthodes pour identifier les composants d'un composant.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IInheritanceService.AddInheritedComponents(System.ComponentModel.IComponent,System.ComponentModel.IContainer)">
      <summary>Recherche les champs qui implémentent l'interface <see cref="T:System.ComponentModel.IComponent" /> dans le composant spécifié et les ajoute au conteneur spécifié en stockant leur niveau d'héritage, qui peut être récupéré en utilisant la méthode <see cref="M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)" />.</summary>
      <param name="component">
        <see cref="T:System.ComponentModel.IComponent" /> à rechercher. La recherche commence par ce composant.</param>
      <param name="container">
        <see cref="T:System.ComponentModel.IContainer" /> où les composants doivent être ajoutés.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)">
      <summary>Obtient l'attribut d'héritage du composant spécifié.</summary>
      <param name="component">
        <see cref="T:System.ComponentModel.IComponent" /> pour lequel l'attribut d'héritage doit être récupéré.</param>
      <returns>Instance de <see cref="T:System.ComponentModel.InheritanceAttribute" /> qui décrit le niveau d'héritage du composant spécifié.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IMenuCommandService">
      <summary>Fournit des méthodes servant à gérer les verbes de concepteur globaux et les commandes de menu disponibles en mode design, ainsi qu'à afficher certains types de menus contextuels.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.AddCommand(System.ComponentModel.Design.MenuCommand)">
      <summary>Ajoute la commande de menu standard spécifiée au menu.</summary>
      <param name="command">
        <see cref="T:System.ComponentModel.Design.MenuCommand" /> à ajouter.</param>
      <exception cref="T:System.InvalidOperationException">Le <see cref="T:System.ComponentModel.Design.CommandID" /> du <see cref="T:System.ComponentModel.Design.MenuCommand" /> spécifié figure déjà dans un menu.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.AddVerb(System.ComponentModel.Design.DesignerVerb)">
      <summary>Ajoute le verbe de concepteur spécifié à l'ensemble de verbes de concepteur globaux.</summary>
      <param name="verb">
        <see cref="T:System.ComponentModel.Design.DesignerVerb" /> à ajouter.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.FindCommand(System.ComponentModel.Design.CommandID)">
      <summary>Recherche l'ID de commande spécifié et retourne la commande de menu qui lui est associée.</summary>
      <param name="commandID">
        <see cref="T:System.ComponentModel.Design.CommandID" /> à rechercher.</param>
      <returns>
        <see cref="T:System.ComponentModel.Design.MenuCommand" /> associé à l'ID de commande, ou <see langword="null" /> si aucune commande n'est trouvée.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.GlobalInvoke(System.ComponentModel.Design.CommandID)">
      <summary>Appelle une commande de menu ou une commande sous forme de verbe de concepteur correspondant à l'ID de commande spécifié.</summary>
      <param name="commandID">
        <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande à rechercher et à exécuter.</param>
      <returns>
        <see langword="true" /> si la commande a été correctement trouvée et appelée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.RemoveCommand(System.ComponentModel.Design.MenuCommand)">
      <summary>Supprime la commande de menu standard spécifiée du menu.</summary>
      <param name="command">
        <see cref="T:System.ComponentModel.Design.MenuCommand" /> à supprimer.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.RemoveVerb(System.ComponentModel.Design.DesignerVerb)">
      <summary>Supprime le verbe de concepteur spécifié de la collection de verbes de concepteur globaux.</summary>
      <param name="verb">
        <see cref="T:System.ComponentModel.Design.DesignerVerb" /> à supprimer.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.ShowContextMenu(System.ComponentModel.Design.CommandID,System.Int32,System.Int32)">
      <summary>Affiche le menu contextuel spécifié à l'emplacement indiqué.</summary>
      <param name="menuID">
        <see cref="T:System.ComponentModel.Design.CommandID" /> du menu contextuel à afficher.</param>
      <param name="x">Coordonnée x (en coordonnées d'écran) à laquelle le menu doit être affiché.</param>
      <param name="y">Coordonnée y (en coordonnées d'écran) à laquelle le menu doit être affiché.</param>
    </member>
    <member name="P:System.ComponentModel.Design.IMenuCommandService.Verbs">
      <summary>Obtient une collection des verbes du concepteur actuellement disponibles.</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> contenant les verbes du concepteur actuellement disponibles.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IReferenceService">
      <summary>Fournit une interface permettant d'obtenir des références aux objets d'un projet par nom ou par type, d'obtenir le nom d'un objet spécifié et de rechercher le parent d'un objet spécifié au sein d'un projet de concepteur.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetComponent(System.Object)">
      <summary>Obtient le composant qui contient le composant spécifié.</summary>
      <param name="reference">Objet pour lequel le composant parent doit être récupéré.</param>
      <returns>
        <see cref="T:System.ComponentModel.IComponent" /> de base contenant l'objet spécifié, ou <see langword="null" /> s'il n'existe aucun composant parent.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetName(System.Object)">
      <summary>Obtient le nom du composant spécifié.</summary>
      <param name="reference">Objet dont le nom doit être retourné.</param>
      <returns>Nom de l'objet référencé ou <see langword="null" /> si la référence d'objet n'est pas valide.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReference(System.String)">
      <summary>Obtient une référence au composant dont le nom correspond au nom spécifié.</summary>
      <param name="name">Nom du composant pour lequel une référence doit être retournée.</param>
      <returns>Objet auquel le nom spécifié fait référence, ou <see langword="null" /> si aucune référence n'est détectée.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReferences">
      <summary>Obtient toutes les références disponibles aux composants du projet.</summary>
      <returns>Tableau de tous les objets dont les références sont disponibles pour <see cref="T:System.ComponentModel.Design.IReferenceService" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReferences(System.Type)">
      <summary>Obtient toutes les références disponibles aux composants du type spécifié.</summary>
      <param name="baseType">Type d'objet aux instances duquel des références doivent être retournées.</param>
      <returns>Tableau de tous les objets disponibles du type spécifié.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IResourceService">
      <summary>Fournit une interface permettant aux concepteurs d'accéder à des lecteurs et des writers de ressources pour des types de ressources <see cref="T:System.Globalization.CultureInfo" /> spécifiques.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IResourceService.GetResourceReader(System.Globalization.CultureInfo)">
      <summary>Recherche le lecteur de ressources pour la culture spécifiée et le retourne.</summary>
      <param name="info">
        <see cref="T:System.Globalization.CultureInfo" /> de la ressource pour laquelle récupérer un lecteur de ressources.</param>
      <returns>Interface <see cref="T:System.Resources.IResourceReader" /> contenant les ressources de la culture ou <see langword="null" /> s'il n'existe aucune ressource pour la culture.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IResourceService.GetResourceWriter(System.Globalization.CultureInfo)">
      <summary>Recherche le writer de ressource pour la culture spécifiée et le retourne.</summary>
      <param name="info">
        <see cref="T:System.Globalization.CultureInfo" /> de la ressource pour laquelle créer un writer de ressource.</param>
      <returns>Interface <see cref="T:System.Resources.IResourceWriter" /> pour la culture spécifiée.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IRootDesigner">
      <summary>Fournit la prise en charge des technologies d'affichage du concepteur racine.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IRootDesigner.GetView(System.ComponentModel.Design.ViewTechnology)">
      <summary>Obtient un objet d'affichage pour la technologie d'affichage spécifiée.</summary>
      <param name="technology">
        <see cref="T:System.ComponentModel.Design.ViewTechnology" /> indiquant une technologie d'affichage particulière.</param>
      <returns>Objet représentant l'affichage de ce concepteur.</returns>
      <exception cref="T:System.ArgumentException">La technologie d'affichage spécifiée n'est pas prise en charge ou n'existe pas.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.IRootDesigner.SupportedTechnologies">
      <summary>Obtient l'ensemble des technologies prises en charge par le concepteur pour son affichage.</summary>
      <returns>Tableau des valeurs <see cref="T:System.ComponentModel.Design.ViewTechnology" /> prises en charge.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ISelectionService">
      <summary>Fournit une interface permettant à un concepteur de sélectionner des composants.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.GetComponentSelected(System.Object)">
      <summary>Obtient une valeur indiquant si le composant spécifié est actuellement sélectionné.</summary>
      <param name="component">Composant à tester.</param>
      <returns>
        <see langword="true" /> si le composant appartient à la sélection utilisateur en cours ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.GetSelectedComponents">
      <summary>Obtient une collection de composants actuellement sélectionnés.</summary>
      <returns>Collection représentant l'ensemble en cours des composants sélectionnés.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ISelectionService.PrimarySelection">
      <summary>Obtient l'objet qui est actuellement l'objet sélectionné principal.</summary>
      <returns>Objet qui est actuellement l'objet sélectionné principal.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.ISelectionService.SelectionChanged">
      <summary>Se produit lorsque la sélection actuelle est modifiée.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.ISelectionService.SelectionChanging">
      <summary>Se produit lorsque la sélection en cours est sur le point d'être modifiée.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.ISelectionService.SelectionCount">
      <summary>Obtient le nombre d'objets sélectionnés.</summary>
      <returns>Nombre d'objets sélectionnés.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.SetSelectedComponents(System.Collections.ICollection)">
      <summary>Sélectionne la collection de composants spécifiée.</summary>
      <param name="components">Collection de composants à sélectionner.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.SetSelectedComponents(System.Collections.ICollection,System.ComponentModel.Design.SelectionTypes)">
      <summary>Sélectionne les composants à partir de la collection spécifiée de composants qui correspondent au type de sélection spécifié.</summary>
      <param name="components">Collection de composants à sélectionner.</param>
      <param name="selectionType">Valeur de l'énumération <see cref="T:System.ComponentModel.Design.SelectionTypes" />. La valeur par défaut est <see cref="F:System.ComponentModel.Design.SelectionTypes.Normal" />.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IServiceContainer">
      <summary>Fournit un conteneur de services.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
      <summary>Ajoute le service spécifié au conteneur de services.</summary>
      <param name="serviceType">Type de service à ajouter.</param>
      <param name="callback">Objet de rappel utilisé pour créer le service. Cela permet à un service d'être déclaré comme disponible, mais retarde la création de l'objet jusqu'à ce que le service soit demandé.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
      <summary>Ajoute le service spécifié au conteneur de service et promeut éventuellement le service vers les conteneurs de service parents.</summary>
      <param name="serviceType">Type de service à ajouter.</param>
      <param name="callback">Objet de rappel utilisé pour créer le service. Cela permet à un service d'être déclaré comme disponible, mais retarde la création de l'objet jusqu'à ce que le service soit demandé.</param>
      <param name="promote">
        <see langword="true" /> pour promouvoir cette demande vers les conteneurs de services parents éventuels ; sinon, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.Object)">
      <summary>Ajoute le service spécifié au conteneur de services.</summary>
      <param name="serviceType">Type de service à ajouter.</param>
      <param name="serviceInstance">Instance du type de service à ajouter. Cet objet doit implémenter le type indiqué par le paramètre <paramref name="serviceType" /> ou en hériter.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
      <summary>Ajoute le service spécifié au conteneur de services et promeut éventuellement le service vers les conteneurs de services parents éventuels.</summary>
      <param name="serviceType">Type de service à ajouter.</param>
      <param name="serviceInstance">Instance du type de service à ajouter. Cet objet doit implémenter le type indiqué par le paramètre <paramref name="serviceType" /> ou en hériter.</param>
      <param name="promote">
        <see langword="true" /> pour promouvoir cette demande vers les conteneurs de services parents éventuels ; sinon, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type)">
      <summary>Supprime le type de service spécifié du conteneur de services.</summary>
      <param name="serviceType">Type de service à supprimer.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type,System.Boolean)">
      <summary>Supprime le type de service spécifié du conteneur de service et promeut éventuellement le service vers les conteneurs de service parents.</summary>
      <param name="serviceType">Type de service à supprimer.</param>
      <param name="promote">
        <see langword="true" /> pour promouvoir cette demande vers les conteneurs de services parents éventuels ; sinon, <see langword="false" />.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ITreeDesigner">
      <summary>Assure la prise en charge de la création d'un jeu de concepteurs personnalisés connexes.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.ITreeDesigner.Children">
      <summary>Obtient une collection de concepteurs enfants.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />, contenant la collection d'objets enfants <see cref="T:System.ComponentModel.Design.IDesigner" /> du concepteur actuel.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ITreeDesigner.Parent">
      <summary>Obtient le concepteur parent.</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.IDesigner" /> représentant le concepteur parent ou <see langword="null" /> s'il n'existe aucun parent.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeDescriptorFilterService">
      <summary>Fournit une interface permettant de modifier l'ensemble des descripteurs membres d'un composant en mode design.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary>Filtre les attributs exposés par un composant à l'aide de <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="component">Composant dont les attributs doivent être filtrés.</param>
      <param name="attributes">Dictionnaire d'attributs pouvant être modifiés.</param>
      <returns>
        <see langword="true" /> si l'ensemble d'attributs filtrés doit être mis en cache ; <see langword="false" /> si le service de filtre doit interroger à nouveau.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary>Filtre les événements exposés par un composant à l'aide de <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="component">Composant dont les événements doivent être filtrés.</param>
      <param name="events">Dictionnaire d'événements pouvant être modifiés.</param>
      <returns>
        <see langword="true" /> si l'ensemble d'événements filtrés doit être mis en cache ; <see langword="false" /> si le service de filtre doit interroger à nouveau.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary>Filtre les propriétés exposées par un composant à l'aide de <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="component">Composant dont les propriétés doivent être filtrées.</param>
      <param name="properties">Dictionnaire de propriétés pouvant être modifiées.</param>
      <returns>
        <see langword="true" /> si l'ensemble de propriétés filtrées doit être mis en cache ; <see langword="false" /> si le service de filtre doit interroger à nouveau.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeDiscoveryService">
      <summary>Identifie les types disponibles au moment du design.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDiscoveryService.GetTypes(System.Type,System.Boolean)">
      <summary>Récupère la liste des types disponibles.</summary>
      <param name="baseType">Type de base à trouver. Peut être <see langword="null" />.</param>
      <param name="excludeGlobalTypes">Indique si les types de tous les assemblys référencés doivent être vérifiés.</param>
      <returns>Collection de types qui correspondent aux critères spécifiés par <paramref name="baseType" /> et <paramref name="excludeGlobalTypes" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeResolutionService">
      <summary>Fournit une interface permettant de récupérer un assembly ou un type par son nom.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetAssembly(System.Reflection.AssemblyName)">
      <summary>Obtient l'assembly demandé.</summary>
      <param name="name">Nom de l'assembly à récupérer.</param>
      <returns>Instance de l'assembly demandé ou <see langword="null" /> si aucun assembly n'est détecté.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetAssembly(System.Reflection.AssemblyName,System.Boolean)">
      <summary>Obtient l'assembly demandé.</summary>
      <param name="name">Nom de l'assembly à récupérer.</param>
      <param name="throwOnError">
        <see langword="true" /> si cette méthode doit lever une exception lorsque l'assembly est introuvable ; sinon, <see langword="false" />. En outre, cette méthode retourne <see langword="null" /> si l'assembly est introuvable.</param>
      <returns>Instance de l'assembly demandé ou <see langword="null" /> si aucun assembly n'est détecté.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetPathOfAssembly(System.Reflection.AssemblyName)">
      <summary>Obtient le chemin d'accès au fichier à partir duquel l'assembly a été chargé.</summary>
      <param name="name">Nom de l'assembly.</param>
      <returns>Chemin d'accès au fichier à partir duquel l'assembly a été chargé.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String)">
      <summary>Charge un type portant le nom spécifié.</summary>
      <param name="name">Nom du type. Si le nom du type n'est pas un nom qualifié complet indiquant un assembly, ce service effectue la recherche dans son ensemble interne d'assemblys référencés.</param>
      <returns>Instance de <see cref="T:System.Type" /> correspondant au nom spécifié ou <see langword="null" /> si aucun type n'est détecté.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String,System.Boolean)">
      <summary>Charge un type portant le nom spécifié.</summary>
      <param name="name">Nom du type. Si le nom du type n'est pas un nom qualifié complet indiquant un assembly, ce service effectue la recherche dans son ensemble interne d'assemblys référencés.</param>
      <param name="throwOnError">
        <see langword="true" /> si cette méthode doit lever une exception lorsque l'assembly est introuvable ; sinon, <see langword="false" />. En outre, cette méthode retourne <see langword="null" /> si l'assembly est introuvable.</param>
      <returns>Instance de <see cref="T:System.Type" /> correspondant au nom spécifié ou <see langword="null" /> si aucun type n'est détecté.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>Charge un type portant le nom spécifié.</summary>
      <param name="name">Nom du type. Si le nom du type n'est pas un nom qualifié complet indiquant un assembly, ce service effectue la recherche dans son ensemble interne d'assemblys référencés.</param>
      <param name="throwOnError">
        <see langword="true" /> si cette méthode doit lever une exception lorsque l'assembly est introuvable ; sinon, <see langword="false" />. En outre, cette méthode retourne <see langword="null" /> si l'assembly est introuvable.</param>
      <param name="ignoreCase">
        <see langword="true" /> pour ignorer la casse lors de la recherche de types ; sinon, <see langword="false" />.</param>
      <returns>Instance de <see cref="T:System.Type" /> correspondant au nom spécifié ou <see langword="null" /> si aucun type n'est détecté.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.ReferenceAssembly(System.Reflection.AssemblyName)">
      <summary>Ajoute une référence à l'assembly spécifié.</summary>
      <param name="name">
        <see cref="T:System.Reflection.AssemblyName" /> indiquant l'assembly à référencer.</param>
    </member>
    <member name="T:System.ComponentModel.Design.MenuCommand">
      <summary>Représente une commande de menu Windows ou de barre d'outils.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.#ctor(System.EventHandler,System.ComponentModel.Design.CommandID)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.MenuCommand" />.</summary>
      <param name="handler">Événement à déclencher lorsque l'utilisateur sélectionne l'élément de menu ou le bouton de barre d'outils.</param>
      <param name="command">ID de commande unique liant cette commande de menu au menu de l'environnement.</param>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Checked">
      <summary>Obtient ou définit une valeur indiquant si cet élément de menu est coché.</summary>
      <returns>
        <see langword="true" /> si l'élément est coché ; sinon <see langword="false" />.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.MenuCommand.CommandChanged">
      <summary>Se produit lorsque la commande de menu est modifiée.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.CommandID">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> associé à cette commande de menu.</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.CommandID" /> associé à la commande de menu.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Enabled">
      <summary>Obtient une valeur indiquant si cet élément de menu est disponible.</summary>
      <returns>
        <see langword="true" /> si l'élément de menu est activé ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.Invoke">
      <summary>Appelle la commande.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.Invoke(System.Object)">
      <summary>Appelle la commande avec le paramètre donné.</summary>
      <param name="arg">Argument facultatif pouvant être utilisé par la commande.</param>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.OleStatus">
      <summary>Obtient le code d'état de la commande OLE pour cet élément de menu.</summary>
      <returns>Entier contenant un mélange des indicateurs d'état qui reflètent l'état de cet élément de menu.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.OnCommandChanged(System.EventArgs)">
      <summary>Déclenche l'événement <see cref="E:System.ComponentModel.Design.MenuCommand.CommandChanged" />.</summary>
      <param name="e">
        <see cref="T:System.EventArgs" /> qui contient les données d'événement.</param>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Properties">
      <summary>Obtient les propriétés publiques associées au <see cref="T:System.ComponentModel.Design.MenuCommand" />.</summary>
      <returns>
        <see cref="T:System.Collections.IDictionary" /> qui contient les propriétés publiques du <see cref="T:System.ComponentModel.Design.MenuCommand" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Supported">
      <summary>Obtient ou définit une valeur indiquant si cet élément de menu est pris en charge.</summary>
      <returns>
        <see langword="true" /> si l'élément est pris en charge ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.ToString">
      <summary>Retourne une représentation de type chaîne de cette commande de menu.</summary>
      <returns>Chaîne contenant la valeur de la propriété <see cref="P:System.ComponentModel.Design.MenuCommand.CommandID" /> à laquelle sont ajoutés les noms des indicateurs éventuellement définis, séparés par des barres verticales (| Ces propriétés d'indicateur sont notamment <see cref="P:System.ComponentModel.Design.MenuCommand.Checked" />, <see cref="P:System.ComponentModel.Design.MenuCommand.Enabled" />, <see cref="P:System.ComponentModel.Design.MenuCommand.Supported" /> et <see cref="P:System.ComponentModel.Design.MenuCommand.Visible" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Visible">
      <summary>Obtient ou définit une valeur indiquant si cet élément de menu est visible.</summary>
      <returns>
        <see langword="true" /> si l'élément de menu est visible ; sinon <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.SelectionTypes">
      <summary>Définit les identificateurs qui indiquent le type d'une sélection.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Add">
      <summary>Représente une sélection d'ajout qui ajoute les composants sélectionnés à la sélection actuelle, en conservant le jeu actuel de composants sélectionnés.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Auto">
      <summary>Représente une sélection normale. Le service de sélection réagit à l'appui des touches CTRL et MAJ pour prendre en charge l'ajout ou la suppression de composants de la sélection.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Click">
      <summary>Représente une sélection qui se produit lorsqu'un utilisateur clique sur un composant. Si le composant qui vient d'être sélectionné l'était déjà, il est promu au rôle de composant sélectionné principal plutôt que d'être annulé.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.MouseDown">
      <summary>Représente une sélection qui se produit lorsque l'utilisateur appuie sur le bouton de la souris alors que son pointeur se trouve au-dessus d'un composant. Si le composant situé sous le pointeur est déjà sélectionné, il est promu au rôle de composant sélectionné principal plutôt que d'être annulé.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.MouseUp">
      <summary>Représente une sélection qui se produit lorsque l'utilisateur relâche le bouton de la souris immédiatement après la sélection d'un composant. Si le composant qui vient d'être sélectionné l'était déjà, il est promu au rôle de composant sélectionné principal plutôt que d'être annulé.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Normal">
      <summary>Représente une sélection normale. Le service de sélection réagit à l'appui des touches CTRL et MAJ pour prendre en charge l'ajout ou la suppression de composants de la sélection.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Primary">
      <summary>Représente une sélection principale qui se produit lorsqu'un utilisateur clique sur un composant. Si un composant de la liste de sélection était déjà sélectionné, il est promu au rôle de sélection principale.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Remove">
      <summary>Représente une sélection de suppression qui supprime les composants sélectionnés de la sélection actuelle, en conservant le jeu actuel de composants sélectionnés.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Replace">
      <summary>Représente une sélection qui se produit lorsque le contenu d'une sélection est remplacé. Le service de sélection remplace la sélection en cours par la sélection de remplacement.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Toggle">
      <summary>Représente une sélection à bascule qui alterne entre la sélection actuelle et la sélection fournie. Si un composant est déjà sélectionné et qu'il est passé à <see cref="Overload:System.ComponentModel.Design.ISelectionService.SetSelectedComponents" /> avec une sélection de type <see cref="F:System.ComponentModel.Design.SelectionTypes.Toggle" />, la sélection du composant sera annulée.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Valid">
      <summary>Identifie les types de sélection valides en tant que <see cref="F:System.ComponentModel.Design.SelectionTypes.Normal" />, <see cref="F:System.ComponentModel.Design.SelectionTypes.Replace" />, <see cref="F:System.ComponentModel.Design.SelectionTypes.MouseDown" />, <see cref="F:System.ComponentModel.Design.SelectionTypes.MouseUp" /> et <see cref="F:System.ComponentModel.Design.SelectionTypes.Click" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ComponentSerializationService">
      <summary>Fournit la classe de base pour sérialiser un jeu de composants ou des objets sérialisables dans un magasin de sérialisation.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.Serialization.ComponentSerializationService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.CreateStore">
      <summary>Crée un <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />.</summary>
      <returns>Nouveau magasin de sérialisation créé.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Deserialize(System.ComponentModel.Design.Serialization.SerializationStore)">
      <summary>Désérialise le magasin donné pour produire une collection d'objets.</summary>
      <param name="store">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> à désérialiser.</param>
      <returns>Collection d'objets créée d'après l'état stocké.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> est <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> ne contient pas de données dans un format que le conteneur de sérialisation peut traiter.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Deserialize(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer)">
      <summary>Désérialise le magasin donné et remplit le <see cref="T:System.ComponentModel.IContainer" /> donné avec des objets <see cref="T:System.ComponentModel.IComponent" /> désérialisés.</summary>
      <param name="store">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> à désérialiser.</param>
      <param name="container">
        <see cref="T:System.ComponentModel.IContainer" /> auquel des objets <see cref="T:System.ComponentModel.IComponent" /> seront ajoutés.</param>
      <returns>Collection d'objets créée d'après l'état stocké.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> ou <paramref name="container" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> ne contient pas de données dans un format que le conteneur de sérialisation peut traiter.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer)">
      <summary>Désérialise le <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> spécifié dans le conteneur donné.</summary>
      <param name="store">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> à désérialiser.</param>
      <param name="container">Conteneur auquel des objets <see cref="T:System.ComponentModel.IComponent" /> seront ajoutés.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> ou <paramref name="container" /> est <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> ne contient pas de données dans un format que le conteneur de sérialisation peut traiter.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer,System.Boolean)">
      <summary>Désérialise le <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> spécifié dans le conteneur donné, en validant éventuellement les types recyclés.</summary>
      <param name="store">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> à désérialiser.</param>
      <param name="container">Conteneur auquel des objets <see cref="T:System.ComponentModel.IComponent" /> seront ajoutés.</param>
      <param name="validateRecycledTypes">
        <see langword="true" /> pour garantir que la désérialisation ne fonctionnera que si elle est appliquée à un objet du même type.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> ou <paramref name="container" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> ne contient pas de données dans un format que le conteneur de sérialisation peut traiter.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer,System.Boolean,System.Boolean)">
      <summary>Désérialise le <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> spécifié dans le conteneur donné, en appliquant éventuellement des valeurs de propriété par défaut.</summary>
      <param name="store">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> à désérialiser.</param>
      <param name="container">Conteneur auquel des objets <see cref="T:System.ComponentModel.IComponent" /> seront ajoutés.</param>
      <param name="validateRecycledTypes">
        <see langword="true" /> pour garantir que la désérialisation ne fonctionnera que si elle est appliquée à un objet du même type.</param>
      <param name="applyDefaults">
        <see langword="true" /> pour indiquer que les valeurs de propriété par défaut doivent être appliquées.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> ou <paramref name="container" /> est <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> ne contient pas de données dans un format que le conteneur de sérialisation peut traiter.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.LoadStore(System.IO.Stream)">
      <summary>Charge <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> à partir d'un flux de données.</summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" /> à partir duquel le magasin sera chargé.</param>
      <returns>Nouvelle instance de <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="stream" /> ne contient pas de données enregistrées par un appel précédent à <see cref="M:System.ComponentModel.Design.Serialization.SerializationStore.Save(System.IO.Stream)" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Serialize(System.ComponentModel.Design.Serialization.SerializationStore,System.Object)">
      <summary>Sérialise l'objet donné dans le <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> donné.</summary>
      <param name="store">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> dans lequel l'état de <paramref name="value" /> sera écrit.</param>
      <param name="value">L'objet à sérialiser.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> ou <paramref name="value" /> est <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> est fermé ou <paramref name="store" /> n'est pas un type de magasin de sérialisation pris en charge. Utilisez un magasin retourné par <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeAbsolute(System.ComponentModel.Design.Serialization.SerializationStore,System.Object)">
      <summary>Sérialise l'objet donné en prenant en compte les valeurs de propriétés par défaut.</summary>
      <param name="store">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> dans lequel l'état de <paramref name="value" /> sera sérialisé.</param>
      <param name="value">L'objet à sérialiser.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> ou <paramref name="value" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> est fermé ou <paramref name="store" /> n'est pas un type de magasin de sérialisation pris en charge. Utilisez un magasin retourné par <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeMember(System.ComponentModel.Design.Serialization.SerializationStore,System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>Sérialise le membre donné sur l’objet donné.</summary>
      <param name="store">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> dans lequel l'état de <paramref name="member" /> sera sérialisé.</param>
      <param name="owningObject">Objet auquel <paramref name="member" /> est attaché.</param>
      <param name="member">
        <see cref="T:System.ComponentModel.MemberDescriptor" /> qui spécifie le membre à sérialiser.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> ou <paramref name="value" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> est fermé ou <paramref name="store" /> n'est pas un type de magasin de sérialisation pris en charge. Utilisez un magasin retourné par <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeMemberAbsolute(System.ComponentModel.Design.Serialization.SerializationStore,System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>Sérialise le membre spécifié dans l'objet donné, en tenant compte de la valeur de propriété par défaut.</summary>
      <param name="store">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> dans lequel l'état de <paramref name="member" /> sera sérialisé.</param>
      <param name="owningObject">Objet auquel <paramref name="member" /> est attaché.</param>
      <param name="member">Membre à sérialiser.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> ou <paramref name="value" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> est fermé ou <paramref name="store" /> n'est pas un type de magasin de sérialisation pris en charge. Utilisez un magasin retourné par <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ContextStack">
      <summary>Fournit un objet de pile pouvant être utilisé par un sérialiseur pour mettre des informations à la disposition de sérialiseurs imbriqués.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Append(System.Object)">
      <summary>Ajoute un objet à la fin de la pile au lieu de le pousser au sommet de celle-ci.</summary>
      <param name="context">Objet de contexte à ajouter à la pile.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Current">
      <summary>Obtient l'objet en cours dans la pile.</summary>
      <returns>Objet en cours dans la pile, ou <see langword="null" /> si aucun objet n'a fait l'objet d'un push.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Int32)">
      <summary>Obtient l'objet de la pile, au niveau spécifié.</summary>
      <param name="level">Niveau de l'objet à récupérer de la pile. Le niveau 0 correspond au sommet de la pile, le niveau 1 au niveau inférieur suivant, etc. Ce niveau doit être supérieur ou égal à 0. Si le niveau est supérieur au nombre de niveaux de la pile, <see langword="null" /> est retournée.</param>
      <returns>Objet de la pile au niveau spécifié, ou <see langword="null" /> si aucun objet n'est présent à ce niveau.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="level" /> est inférieur à 0.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Type)">
      <summary>Obtient le premier objet de la pile qui hérite du type spécifié ou l'implémente.</summary>
      <param name="type">Type à récupérer de la pile de contexte.</param>
      <returns>Premier objet de la pile qui hérite du type spécifié ou l'implémente, ou <see langword="null" /> si aucun objet de la pile n'implémente le type.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Pop">
      <summary>Supprime l'objet en cours de la pile en retournant sa valeur.</summary>
      <returns>Objet supprimé de la pile ; <see langword="null" /> si la pile ne contient aucun objet.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Push(System.Object)">
      <summary>Exécute un push de l'objet spécifié, ou place l'objet, dans la pile.</summary>
      <param name="context">Objet de contexte devant faire l'objet d'un push dans la pile.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute">
      <summary>L'attribut <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> est placé sur un sérialiseur pour indiquer la classe à utiliser comme fournisseur par défaut de ce type de sérialiseur.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> avec le type de fournisseur indiqué.</summary>
      <param name="providerTypeName">Nom du type de fournisseur de sérialisation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerTypeName" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.#ctor(System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> avec le type de fournisseur donné.</summary>
      <param name="providerType">
        <see cref="T:System.Type" /> du fournisseur de sérialisation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerType" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.ProviderTypeName">
      <summary>Obtient le nom du type du fournisseur de sérialisation.</summary>
      <returns>Chaîne contenant le nom du fournisseur.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DesignerLoader">
      <summary>Fournit une interface de chargeur de concepteur de base pouvant être utilisée pour implémenter un chargeur de concepteur personnalisé.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.BeginLoad(System.ComponentModel.Design.Serialization.IDesignerLoaderHost)">
      <summary>Commence le chargement d'un concepteur.</summary>
      <param name="host">Hôte de chargeur par le biais duquel ce chargeur charge les composants.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.Dispose">
      <summary>Libère toutes les ressources utilisées par <see cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.Flush">
      <summary>Écrit les modifications mises en cache à l'endroit à partir duquel le concepteur a été chargé.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerLoader.Loading">
      <summary>Obtient une valeur indiquant si le chargeur charge actuellement un document.</summary>
      <returns>
        <see langword="true" /> si le chargeur charge actuellement un document ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute">
      <summary>Indique un sérialiseur que le gestionnaire de sérialisation doit utiliser pour sérialiser les valeurs du type auquel s'applique cet attribut. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.String,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute" />.</summary>
      <param name="serializerTypeName">Nom qualifié complet du type de données du sérialiseur.</param>
      <param name="baseSerializerTypeName">Nom qualifié complet du type de données de base du sérialiseur. Plusieurs sérialiseurs peuvent être fournis pour une classe, à condition qu'ils possèdent des types de base différents.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.String,System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute" />.</summary>
      <param name="serializerTypeName">Nom qualifié complet du type de données du sérialiseur.</param>
      <param name="baseSerializerType">Type de données de base du sérialiseur. Plusieurs sérialiseurs peuvent être fournis pour une classe, à condition qu'ils possèdent des types de base différents.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.Type,System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute" />.</summary>
      <param name="serializerType">Type de données du sérialiseur.</param>
      <param name="baseSerializerType">Type de données de base du sérialiseur. Plusieurs sérialiseurs peuvent être fournis pour une classe, à condition qu'ils possèdent des types de base différents.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.SerializerBaseTypeName">
      <summary>Obtient le nom qualifié complet du type de base du sérialiseur.</summary>
      <returns>Nom qualifié complet du type de base du sérialiseur.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.SerializerTypeName">
      <summary>Obtient le nom de type qualifié complet du sérialiseur.</summary>
      <returns>Nom de type qualifié complet du sérialiseur.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.TypeId">
      <summary>Indique un ID unique pour ce type d'attribut.</summary>
      <returns>ID unique pour ce type d'attribut.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost">
      <summary>Fournit une interface qui peut étendre un hôte de concepteur de sorte qu'il prenne en charge le chargement à partir d'un état sérialisé.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.EndLoad(System.String,System.Boolean,System.Collections.ICollection)">
      <summary>Met fin à l'opération de chargement du concepteur.</summary>
      <param name="baseClassName">Nom qualifié complet de la classe de base du document créé par ce concepteur.</param>
      <param name="successful">
        <see langword="true" /> si le concepteur a été chargé correctement ; sinon, <see langword="false" />.</param>
      <param name="errorCollection">Collection contenant les erreurs éventuellement survenues pendant le chargement. Si aucune erreur ne s'est produite, on passe une collection vide ou <see langword="null" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload">
      <summary>Recharge le document de design.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2">
      <summary>Fournit une interface qui étend <see cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost" /> pour spécifier si les erreurs sont tolérées lorsqu'un document de design est chargé.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.CanReloadWithErrors">
      <summary>Obtient ou définit une valeur indiquant s'il est possible de recharger avec des erreurs.</summary>
      <returns>
        <see langword="true" /> si le chargeur de concepteur peut recharger le document de design lorsque des erreurs sont détectées; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.IgnoreErrorsDuringReload">
      <summary>Obtient ou définit une valeur indiquant si les erreurs doivent être ignorées lorsque <see cref="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload" /> est appelé.</summary>
      <returns>
        <see langword="true" /> pour indiquer que le chargeur de concepteur ignore les erreurs lors du rechargement; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderService">
      <summary>Fournit une interface qui peut étendre un chargeur de concepteur de sorte qu'il prenne en charge le chargement asynchrone de composants externes.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency">
      <summary>Inscrit un composant externe comme appartenant au processus de chargement managé par cette interface.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete(System.Boolean,System.Collections.ICollection)">
      <summary>Signale qu'un chargement dépendant est terminé.</summary>
      <param name="successful">
        <see langword="true" /> si le chargement du concepteur réussit ; <see langword="false" /> si des erreurs ont empêché la fin du chargement.</param>
      <param name="errorCollection">Collection d'erreurs s'étant éventuellement produites pendant le chargement. Si aucune erreur ne s'est produite, on passe une collection vide ou <see langword="null" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload">
      <summary>Recharge le document de design.</summary>
      <returns>
        <see langword="true" /> si la demande de rechargement est acceptée, ou <see langword="false" /> si le chargeur ne permet pas le rechargement.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager">
      <summary>Fournit une interface pouvant gérer la sérialisation au moment du design.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary>Ajoute le fournisseur de sérialisation spécifié au gestionnaire de sérialisation.</summary>
      <param name="provider">Fournisseur de sérialisation à ajouter.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context">
      <summary>Obtient une zone de stockage de type pile définie par l'utilisateur qui est pratique pour les communications entre sérialiseurs.</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" /> qui stocke des données.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)">
      <summary>Crée une instance du type spécifié et l’ajoute à une collection d’instances nommées.</summary>
      <param name="type">Type de données à créer.</param>
      <param name="arguments">Arguments à passer au constructeur de ce type.</param>
      <param name="name">Nom de l'objet. Ce nom peut être utilisé pour accéder ultérieurement à l'objet via <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)" />. Si <see langword="null" /> est passée, l'objet est toujours créé, mais n'est pas accessible par son nom.</param>
      <param name="addToContainer">Si <see langword="true" /> est passé, cet objet est ajouté au conteneur de design. L'objet doit implémenter <see cref="T:System.ComponentModel.IComponent" /> pour qu'il entre en vigueur.</param>
      <returns>Instance de l'objet qui vient d'être créé.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)">
      <summary>Obtient une instance d'un objet créé portant le nom spécifié, ou <see langword="null" /> si cet objet n'existe pas.</summary>
      <param name="name">Nom de l'objet à récupérer.</param>
      <returns>Instance de l'objet portant le nom donné, ou <see langword="null" /> si aucun objet portant ce nom n'est détecté.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)">
      <summary>Obtient le nom de l'objet spécifié, ou <see langword="null" /> si l'objet ne possède pas de nom.</summary>
      <param name="value">Objet pour lequel le nom doit être récupéré.</param>
      <returns>Nom de l'objet, ou <see langword="null" /> si l'objet est sans nom.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(System.Type,System.Type)">
      <summary>Obtient un sérialiseur du type demandé pour le type d'objet spécifié.</summary>
      <param name="objectType">Type de l'objet pour lequel le sérialiseur doit être obtenu.</param>
      <param name="serializerType">Type du sérialiseur à récupérer.</param>
      <returns>Instance du sérialiseur demandé, ou <see langword="null" /> si aucun sérialiseur approprié n'est détecté.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(System.String)">
      <summary>Obtient un type portant le nom spécifié.</summary>
      <param name="typeName">Nom qualifié complet du type à charger.</param>
      <returns>Instance du type, ou <see langword="null" /> si le type ne peut pas être chargé.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties">
      <summary>Indique les propriétés personnalisées qui peuvent être sérialisées à l'aide des sérialiseurs disponibles.</summary>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> qui contient les propriétés à sérialiser.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary>Supprime un fournisseur de sérialisation personnalisé du gestionnaire de sérialisation.</summary>
      <param name="provider">Fournisseur à supprimer. Cet objet doit avoir été ajouté à l'aide de <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(System.Object)">
      <summary>Signale une erreur lors de la sérialisation.</summary>
      <param name="errorInformation">Erreur à signaler. Cet objet d'informations peut être de n'importe quel type. S'il s'agit d'une exception, le message de l'exception est extrait et transmis à l'utilisateur. S'il s'agit d'un autre type, <see cref="M:System.Object.ToString" /> est appelé pour afficher les informations à l'utilisateur.</param>
    </member>
    <member name="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName">
      <summary>Se produit lorsque la méthode <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)" /> ne parvient pas à trouver le nom spécifié dans la table de noms du gestionnaire de sérialisation.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete">
      <summary>Se produit lorsque la sérialisation est terminée.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(System.Object,System.String)">
      <summary>Définit le nom de l'objet existant spécifié.</summary>
      <param name="instance">Instance de l'objet à nommer.</param>
      <param name="name">Nom à attribuer à la nouvelle instance.</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider">
      <summary>Fournit une interface qui permet d'accéder à un sérialiseur.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider.GetSerializer(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Type,System.Type)">
      <summary>Obtient un sérialiseur à l'aide des attributs spécifiés.</summary>
      <param name="manager">Gestionnaire de sérialisation qui demande le sérialiseur.</param>
      <param name="currentSerializer">Instance du sérialiseur en cours du type spécifié. Cela peut être <see langword="null" /> s'il n'existe aucun sérialiseur du type spécifié.</param>
      <param name="objectType">Type des données de l'objet à sérialiser.</param>
      <param name="serializerType">Type des données du sérialiseur à créer.</param>
      <returns>Instance d'un sérialiseur du type demandé, ou <see langword="null" /> si la demande ne peut pas être satisfaite.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationService">
      <summary>Fournit une interface qui peut appeler la sérialisation et la désérialisation.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationService.Deserialize(System.Object)">
      <summary>Désérialise l'objet de données de sérialisation spécifié et retourne une collection d'objets représentés par ces données.</summary>
      <param name="serializationData">Objet constitué de données sérialisées.</param>
      <returns>
        <see cref="T:System.Collections.ICollection" /> d'objets régénérés à partir de l'objet de données de sérialisation spécifié.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationService.Serialize(System.Collections.ICollection)">
      <summary>Sérialise la collection d'objets spécifiée et les stocke dans un objet de données de sérialisation.</summary>
      <param name="objects">Collection d'objets à sérialiser.</param>
      <returns>Objet qui contient l'état sérialisé de la collection d'objets spécifiée.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.INameCreationService">
      <summary>Fournit un service pouvant générer des noms uniques pour des objets.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.CreateName(System.ComponentModel.IContainer,System.Type)">
      <summary>Crée un nouveau nom spécifique à tous les composants du conteneur spécifié.</summary>
      <param name="container">Conteneur dans lequel le nouvel objet est ajouté.</param>
      <param name="dataType">Type de données de l'objet auquel le nom est attribué.</param>
      <returns>Nom unique pour le type de données.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.IsValidName(System.String)">
      <summary>Obtient une valeur indiquant si le nom spécifié est valide.</summary>
      <param name="name">Nom à valider.</param>
      <returns>
        <see langword="true" /> si le nom est valide ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.ValidateName(System.String)">
      <summary>Obtient une valeur indiquant si le nom spécifié est valide.</summary>
      <param name="name">Nom à valider.</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.InstanceDescriptor">
      <summary>Fournit les informations nécessaires à la création d'une instance d'un objet. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.#ctor(System.Reflection.MemberInfo,System.Collections.ICollection)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> avec les informations sur les membres et les arguments spécifiés.</summary>
      <param name="member">Informations sur les membres pour le descripteur. Il peut s'agir de <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.ConstructorInfo" />, <see cref="T:System.Reflection.FieldInfo" /> ou de <see cref="T:System.Reflection.PropertyInfo" />. S'il s'agit de <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.FieldInfo" /> ou de <see cref="T:System.Reflection.PropertyInfo" />, il doit représenter un membre <see langword="static" />.</param>
      <param name="arguments">Collection des arguments à passer au membre. Ce paramètre peut être <see langword="null" /> ou être une collection vide s'il n'y a aucun argument. La collection peut également être constituée d'autres instances de <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> est de type <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.FieldInfo" />ou <see cref="T:System.Reflection.PropertyInfo" />, et il ne représente pas un membre <see langword="static" />.

ou -
<paramref name="member" /> est de type <see cref="T:System.Reflection.PropertyInfo" /> et n'est pas lisible.

ou -
<paramref name="member" /> est de type <see cref="T:System.Reflection.MethodInfo" /> ou <see cref="T:System.Reflection.ConstructorInfo" />, et le nombre d’arguments dans <paramref name="arguments" /> ne correspond pas à la signature de <paramref name="member" />.

ou -


<paramref name="member" /> est de type <see cref="T:System.Reflection.ConstructorInfo" /> et représente un membre <see langword="static" />

ou -
<paramref name="member" /> est de type <see cref="T:System.Reflection.FieldInfo" />, et le nombre d'arguments dans <paramref name="arguments" /> n'est pas nul.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.#ctor(System.Reflection.MemberInfo,System.Collections.ICollection,System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />, à l'aide des informations sur les membres, des arguments et de la valeur spécifiés, indiquant si les informations déterminées décrivent complètement l'instance.</summary>
      <param name="member">Informations sur les membres pour le descripteur. Il peut s'agir de <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.ConstructorInfo" />, <see cref="T:System.Reflection.FieldInfo" /> ou de <see cref="T:System.Reflection.PropertyInfo" />. S'il s'agit de <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.FieldInfo" /> ou de <see cref="T:System.Reflection.PropertyInfo" />, il doit représenter un membre <see langword="static" />.</param>
      <param name="arguments">Collection des arguments à passer au membre. Ce paramètre peut être <see langword="null" /> ou être une collection vide s'il n'y a aucun argument. La collection peut également être constituée d'autres instances de <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />.</param>
      <param name="isComplete">
        <see langword="true" /> si les informations spécifiées décrivent complètement l'instance ; sinon, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> est de type <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.FieldInfo" />ou <see cref="T:System.Reflection.PropertyInfo" />, et il ne représente pas un membre <see langword="static" />.
<paramref name="member" /> est de type <see cref="T:System.Reflection.PropertyInfo" /> et n'est pas lisible.
<paramref name="member" /> est de type <see cref="T:System.Reflection.MethodInfo" /> ou <see cref="T:System.Reflection.ConstructorInfo" />, et le nombre d'arguments dans <paramref name="arguments" /> ne correspond pas à la signature de <paramref name="member" />.
<paramref name="member" /> est de type <see cref="T:System.Reflection.ConstructorInfo" /> et représente un membre <see langword="static" /><paramref name="member" /> est de type <see cref="T:System.Reflection.FieldInfo" />, et le nombre d'arguments dans <paramref name="arguments" /> n'est pas nul.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.Arguments">
      <summary>Obtient la collection d'arguments pouvant être utilisés pour reconstruire une instance de l'objet que ce descripteur d'instance représente.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> d'arguments pouvant être utilisés pour créer l'objet.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.Invoke">
      <summary>Appelle ce descripteur d'instance et retourne l'objet qu'il décrit.</summary>
      <returns>Objet décrit par ce descripteur d'instance.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.IsComplete">
      <summary>Obtient une valeur indiquant si le contenu de ce <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> identifie complètement l'instance.</summary>
      <returns>
        <see langword="true" /> si l'instance est complètement décrite ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.MemberInfo">
      <summary>Obtient les informations sur les membres qui décrivent l'instance à laquelle ce descripteur est associé.</summary>
      <returns>
        <see cref="T:System.Reflection.MemberInfo" /> qui décrit l'instance à laquelle cet objet est associé.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.MemberRelationship">
      <summary>Représente une relation unique entre un objet et un membre.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />.</summary>
      <param name="owner">Objet qui possède <paramref name="member" />.</param>
      <param name="member">Membre qui doit être en relation avec <paramref name="owner" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="owner" /> ou <paramref name="member" /> est <see langword="null" />.</exception>
    </member>
    <member name="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty">
      <summary>Représente la relation membre vide. Ce champ est en lecture seule.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.Equals(System.Object)">
      <summary>Détermine si deux instances <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> sont égales.</summary>
      <param name="obj">
        <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> à comparer avec l'objet <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> actuel.</param>
      <returns>
        <see langword="true" /> si le <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> spécifié est égal au <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> actuel ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.GetHashCode">
      <summary>Retourne le code de hachage de cette instance.</summary>
      <returns>Code de hachage du <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> actuel.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.IsEmpty">
      <summary>Obtient une valeur qui indique si cette relation est égale à la relation <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" />.</summary>
      <returns>
        <see langword="true" />, si cette relation est égale à la relation <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.Member">
      <summary>Obtient le membre en relation.</summary>
      <returns>Membre passé à <see cref="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.op_Equality(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>Vérifie si deux structures <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> spécifiées sont équivalentes.</summary>
      <param name="left">Structure <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> qui se trouve à gauche de l'opérateur d'égalité.</param>
      <param name="right">Structure <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> qui se trouve à droite de l'opérateur d'égalité.</param>
      <returns>Cet opérateur retourne <see langword="true" /> si les deux structures <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> sont égales ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.op_Inequality(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>Vérifie si deux structures <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> spécifiées sont différentes.</summary>
      <param name="left">Structure <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> qui se trouve à gauche de l'opérateur d'inégalité.</param>
      <param name="right">Structure <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> qui se trouve à droite de l'opérateur d'inégalité.</param>
      <returns>Cet opérateur retourne <see langword="true" /> si les deux structures <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> sont différentes ; sinon <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.Owner">
      <summary>Obtient l'objet propriétaire.</summary>
      <returns>Objet propriétaire passé à <see cref="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.MemberRelationshipService">
      <summary>Fournit la classe de base pour lier un membre à un autre.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationshipService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.GetRelationship(System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>Apporte une relation à la relation source donnée.</summary>
      <param name="source">Relation source.</param>
      <returns>Relation à <paramref name="source" /> ou <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" /> s'il n'existe pas de relation.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationshipService.Item(System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>Établit une relation entre un objet source et un objet cible.</summary>
      <param name="source">Relation source. Il s'agit du côté gauche d'une assignation de relation.</param>
      <returns>Relation actuelle associée à <paramref name="source" /> ou <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" /> s'il n'existe pas de relation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> est vide ou la relation n'est pas prise en charge par le service.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationshipService.Item(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>Établit une relation entre un objet source et un objet cible.</summary>
      <param name="sourceOwner">Propriétaire d'une relation source.</param>
      <param name="sourceMember">Membre d'une relation source.</param>
      <returns>Structure <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> qui encapsule la relation entre un objet source et un objet cible ou <see langword="null" /> s'il n'existe pas de relation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceOwner" /> ou <paramref name="sourceMember" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceOwner" /> ou <paramref name="sourceMember" /> est vide ou la relation n'est pas prise en charge par le service.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.SetRelationship(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>Crée une relation entre l'objet source et la relation cible.</summary>
      <param name="source">Relation source.</param>
      <param name="relationship">Relation à définir dans la source.</param>
      <exception cref="T:System.ArgumentException">La relation n'est pas prise en charge par le service.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.SupportsRelationship(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>Obtient une valeur indiquant si la relation donnée est prise en charge.</summary>
      <param name="source">Relation source.</param>
      <param name="relationship">Relation à définir dans la source.</param>
      <returns>
        <see langword="true" /> si une relation entre les deux objets donnés est prise en charge ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs">
      <summary>Fournit des données pour l'événement <see cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs" />.</summary>
      <param name="name">Nom à résoudre.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.Name">
      <summary>Obtient le nom de l'objet à résoudre.</summary>
      <returns>Nom de l'objet à résoudre.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.Value">
      <summary>Obtient ou définit l'objet correspondant au nom.</summary>
      <returns>Objet auquel le nom est associé.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ResolveNameEventHandler">
      <summary>Représente la méthode gérant l'événement <see cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" /> d'un gestionnaire de sérialisation.</summary>
      <param name="sender">Source de l'événement.</param>
      <param name="e">
        <see cref="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs" /> qui contient les données d'événement.</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute">
      <summary>Indique le sérialiseur de base à utiliser pour un objet concepteur racine. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.String,System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> avec les attributs spécifiés.</summary>
      <param name="serializerTypeName">Nom qualifié complet du type de données du sérialiseur.</param>
      <param name="baseSerializerTypeName">Nom du type de base du sérialiseur. Une classe peut comprendre plusieurs sérialiseurs, dans la mesure où ils possèdent tous des types de base différents.</param>
      <param name="reloadable">
        <see langword="true" /> si ce sérialiseur prend en charge le rechargement dynamique du document ; sinon, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.Type,System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> avec les attributs spécifiés.</summary>
      <param name="serializerTypeName">Nom qualifié complet du type de données du sérialiseur.</param>
      <param name="baseSerializerType">Nom du type de base du sérialiseur. Une classe peut comprendre plusieurs sérialiseurs, dans la mesure où ils possèdent tous des types de base différents.</param>
      <param name="reloadable">
        <see langword="true" /> si ce sérialiseur prend en charge le rechargement dynamique du document ; sinon, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.Type,System.Type,System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> avec les attributs spécifiés.</summary>
      <param name="serializerType">Type de données du sérialiseur.</param>
      <param name="baseSerializerType">Type de base du sérialiseur. Une classe peut comprendre plusieurs sérialiseurs, dans la mesure où ils possèdent tous des types de base différents.</param>
      <param name="reloadable">
        <see langword="true" /> si ce sérialiseur prend en charge le rechargement dynamique du document ; sinon, <see langword="false" />.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.Reloadable">
      <summary>Obtient une valeur indiquant si le sérialiseur racine prend en charge le rechargement du document de design sans détruire préalablement l'hôte du concepteur.</summary>
      <returns>
        <see langword="true" /> si le sérialiseur racine prend en charge le rechargement ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerBaseTypeName">
      <summary>Obtient le nom qualifié complet du type de base du sérialiseur.</summary>
      <returns>Nom du type de base du sérialiseur.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerTypeName">
      <summary>Obtient le nom de type qualifié complet du sérialiseur.</summary>
      <returns>Nom du type du sérialiseur.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.TypeId">
      <summary>Obtient un ID unique pour ce type d'attribut.</summary>
      <returns>Objet contenant un ID unique pour ce type d'attribut.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.SerializationStore">
      <summary>Fournit la classe de base pour stocker des données de sérialisation pour <see cref="T:System.ComponentModel.Design.Serialization.ComponentSerializationService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Close">
      <summary>Ferme le magasin de sérialisation.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Dispose(System.Boolean)">
      <summary>Libère les ressources non managées utilisées par <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> et libère éventuellement les ressources managées.</summary>
      <param name="disposing">
        <see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour libérer uniquement les ressources non managées.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.SerializationStore.Errors">
      <summary>Obtient une collection des erreurs qui se sont produites pendant une sérialisation ou une désérialisation.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> qui contient des erreurs qui se sont produites pendant une sérialisation ou une désérialisation.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Save(System.IO.Stream)">
      <summary>Enregistre le magasin dans le flux donné.</summary>
      <param name="stream">Flux dans lequel le magasin sera sérialisé.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.System#IDisposable#Dispose">
      <summary>Libère toutes les ressources utilisées par <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.ServiceContainer">
      <summary>Fournit une implémentation simple de l'interface <see cref="T:System.ComponentModel.Design.IServiceContainer" />. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.ServiceContainer" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.#ctor(System.IServiceProvider)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.ServiceContainer" /> avec le fournisseur de services parent spécifié.</summary>
      <param name="parentProvider">Fournisseur de services parent.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
      <summary>Ajoute le service spécifié au conteneur de services.</summary>
      <param name="serviceType">Type de service à ajouter.</param>
      <param name="callback">Objet de rappel pouvant créer le service. Cela permet à un service d'être déclaré comme disponible, mais retarde la création de l'objet jusqu'à ce que le service soit demandé.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> ou <paramref name="callback" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Un service de type <paramref name="serviceType" /> existe déjà dans le conteneur.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
      <summary>Ajoute le service spécifié au conteneur de services.</summary>
      <param name="serviceType">Type de service à ajouter.</param>
      <param name="callback">Objet de rappel pouvant créer le service. Cela permet à un service d'être déclaré comme disponible, mais retarde la création de l'objet jusqu'à ce que le service soit demandé.</param>
      <param name="promote">
        <see langword="true" /> si ce service doit être ajouté à des conteneurs de services parents éventuels ; sinon, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> ou <paramref name="callback" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Un service de type <paramref name="serviceType" /> existe déjà dans le conteneur.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.Object)">
      <summary>Ajoute le service spécifié au conteneur de services.</summary>
      <param name="serviceType">Type de service à ajouter.</param>
      <param name="serviceInstance">Instance du service à ajouter. Cet objet doit implémenter le type indiqué par le paramètre <paramref name="serviceType" /> ou en hériter.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> ou <paramref name="serviceInstance" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Un service de type <paramref name="serviceType" /> existe déjà dans le conteneur.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
      <summary>Ajoute le service spécifié au conteneur de services.</summary>
      <param name="serviceType">Type de service à ajouter.</param>
      <param name="serviceInstance">Instance du type de service à ajouter. Cet objet doit implémenter le type indiqué par le paramètre <paramref name="serviceType" /> ou en hériter.</param>
      <param name="promote">
        <see langword="true" /> si ce service doit être ajouté à des conteneurs de services parents éventuels ; sinon, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> ou <paramref name="serviceInstance" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Un service de type <paramref name="serviceType" /> existe déjà dans le conteneur.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.ServiceContainer.DefaultServices">
      <summary>Obtient les services par défaut implémentés directement par <see cref="T:System.ComponentModel.Design.ServiceContainer" />.</summary>
      <returns>Services par défaut.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.Dispose">
      <summary>Supprime ce conteneur de service.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.Dispose(System.Boolean)">
      <summary>Supprime ce conteneur de service.</summary>
      <param name="disposing">
        <see langword="true" /> si <see cref="T:System.ComponentModel.Design.ServiceContainer" /> est en cours de suppression ; sinon <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.GetService(System.Type)">
      <summary>Obtient le service demandé.</summary>
      <param name="serviceType">Type de service à récupérer.</param>
      <returns>Instance éventuelle du service, ou <see langword="null" /> si aucune instance n'est détectée.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.RemoveService(System.Type)">
      <summary>Supprime le type de service spécifié du conteneur de services.</summary>
      <param name="serviceType">Type de service à supprimer.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.RemoveService(System.Type,System.Boolean)">
      <summary>Supprime le type de service spécifié du conteneur de services.</summary>
      <param name="serviceType">Type de service à supprimer.</param>
      <param name="promote">
        <see langword="true" /> si ce service doit être supprimé de conteneurs de services parents éventuels ; sinon, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.ServiceCreatorCallback">
      <summary>Fournit un mécanisme de rappel pouvant créer une instance d'un service à la demande.</summary>
      <param name="container">Conteneur de services qui a demandé la création du service.</param>
      <param name="serviceType">Type du service à créer.</param>
      <returns>Service spécifié par <paramref name="serviceType" /> ou <see langword="null" /> si ce service n'a pas pu être créé.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.StandardCommands">
      <summary>Définit des identificateurs pour l'ensemble de commandes standard disponibles dans la plupart des applications.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.StandardCommands.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.StandardCommands" />.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignBottom">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande AlignBottom. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignHorizontalCenters">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande AlignHorizontalCenters. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignLeft">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande AlignLeft. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignRight">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande AlignRight. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignToGrid">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande AlignToGrid. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignTop">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande AlignTop. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignVerticalCenters">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande AlignVerticalCenters. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeBottom">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande ArrangeBottom. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeIcons">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande ArrangeIcons. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeRight">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande ArrangeRight. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.BringForward">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande BringForward. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.BringToFront">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande BringToFront. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.CenterHorizontally">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande CenterHorizontally. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.CenterVertically">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande CenterVertically. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Copy">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande Copier. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Cut">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande Couper. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Delete">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande Supprimer. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.DocumentOutline">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande Structure du document. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.F1Help">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande F1Help. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Group">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande Grouper. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceConcatenate">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande HorizSpaceConcatenate. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceDecrease">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande HorizSpaceDecrease. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceIncrease">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande HorizSpaceIncrease. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceMakeEqual">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande HorizSpaceMakeEqual. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.LineupIcons">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande LineupIcons. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.LockControls">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande LockControls. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.MultiLevelRedo">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande MultiLevelRedo. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.MultiLevelUndo">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande MultiLevelUndo. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Paste">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande Coller. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Properties">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande Propriétés. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.PropertiesWindow">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande PropertiesWindow. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Redo">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande Rétablir. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Replace">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande Remplacer. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SelectAll">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande SelectAll. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SendBackward">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande SendBackward. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SendToBack">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande SendToBack. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ShowGrid">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande ShowGrid. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ShowLargeIcons">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande ShowLargeIcons. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControl">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande SizeToControl. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControlHeight">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande SizeToControlHeight. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControlWidth">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande SizeToControlWidth. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToFit">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande SizeToFit. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToGrid">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande SizeToGrid. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SnapToGrid">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande SnapToGrid. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.TabOrder">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande TabOrder. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Undo">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande Annuler. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Ungroup">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande Dissocier. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VerbFirst">
      <summary>Obtient le premier verbe d'un ensemble de verbes. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VerbLast">
      <summary>Obtient le dernier verbe d'un ensemble de verbes. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceConcatenate">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande VertSpaceConcatenate. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceDecrease">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande VertSpaceDecrease. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceIncrease">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande VertSpaceIncrease. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceMakeEqual">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande VertSpaceMakeEqual. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ViewCode">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande ViewCode. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ViewGrid">
      <summary>Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande ViewGrid. Ce champ est en lecture seule.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.StandardToolWindows">
      <summary>Définit des identificateurs GUID correspondant à l'ensemble standard de fenêtres Outil disponibles dans l'environnement de design.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.StandardToolWindows.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.StandardToolWindows" />.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ObjectBrowser">
      <summary>Obtient le GUID pour l'Explorateur d'objets. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.OutputWindow">
      <summary>Obtient le GUID pour la fenêtre Sortie. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ProjectExplorer">
      <summary>Obtient le GUID pour l'Explorateur de solutions. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.PropertyBrowser">
      <summary>Obtient le GUID pour la fenêtre Propriétés. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.RelatedLinks">
      <summary>Obtient le GUID pour le frame des liens associés. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ServerExplorer">
      <summary>Obtient le GUID pour l'Explorateur de serveurs. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.TaskList">
      <summary>Obtient le GUID pour la liste des tâches. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.Toolbox">
      <summary>Obtient le GUID pour la boîte à outils. Ce champ est en lecture seule.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.TypeDescriptionProviderService">
      <summary>Fournit un fournisseur de description de type pour un type spécifié.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.TypeDescriptionProviderService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.GetProvider(System.Object)">
      <summary>Obtient un fournisseur de description de type pour l'objet spécifié.</summary>
      <param name="instance">Objet pour lequel obtenir un fournisseur de description de type.</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> correspondant à <paramref name="instance" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.GetProvider(System.Type)">
      <summary>Obtient un fournisseur de description de type pour le type spécifié.</summary>
      <param name="type">Type pour lequel obtenir un fournisseur de description de type.</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> correspondant à <paramref name="type" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ViewTechnology">
      <summary>Définit des identificateurs pour un ensemble de technologies prises en charge par les hôtes du concepteur.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.Default">
      <summary>Spécifie la prise en charge de la technologie d'affichage par défaut.
Le concepteur racine peut retourner tout type d’objet, à condition que l’objet soit compatible avec un adaptateur de la technologie de l’hôte. Les environnements d’hébergement tels que Visual Studio fournissent un moyen d’intégrer de nouveaux adaptateurs de technologie d’affichage. L’objet de vue par défaut pour le concepteur Windows Forms est une instance <see cref="T:System.Windows.Forms.Control" />.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.Passthrough">
      <summary>Représente un mode dans lequel l'objet de vue est passé directement à l'environnement de développement.
L’objet de vue doit implémenter les interfaces requises par l’environnement de développement. L’environnement de développement Visual Studio prend en charge les objets de vue qui sont un contrôle ActiveX, un document actif, ou un objet qui implémente l’interface IVsWindowPane disponible dans le programme Visual Studio VSI (Visual Studio Integration). L’environnement de développement Visual Studio prend en charge cette technologie d’affichage. Celle-ci n’est pas nécessairement disponible dans tous les environnements de développement.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.WindowsForms">
      <summary>Représente un mode dans lequel un objet contrôle Windows Forms assure l'affichage du concepteur racine. Le concepteur hôte remplit la fenêtre de document de l’environnement de développement avec le contrôle Windows Forms.</summary>
    </member>
    <member name="T:System.ComponentModel.DesignerAttribute">
      <summary>Spécifie la classe utilisée pour implémenter des services au moment de la conception pour un composant.</summary>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DesignerAttribute" /> à l'aide du nom du type qui fournit des services de design.</summary>
      <param name="designerTypeName">Concaténation du nom qualifié complet du type qui fournit les services de design pour le composant auquel cet attribut est lié et nom de l'assembly dans lequel réside ce type.</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DesignerAttribute" /> à l'aide du type de concepteur et de la classe de base du concepteur.</summary>
      <param name="designerTypeName">Concaténation du nom qualifié complet du type qui fournit les services de design pour le composant auquel cet attribut est lié et nom de l'assembly dans lequel réside ce type.</param>
      <param name="designerBaseTypeName">Nom qualifié complet de la classe de base à associer à la classe de concepteur.</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String,System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DesignerAttribute" /> à l'aide du nom de la classe de concepteur et de la classe de base associée au concepteur.</summary>
      <param name="designerTypeName">Concaténation du nom qualifié complet du type qui fournit les services de design pour le composant auquel cet attribut est lié et nom de l'assembly dans lequel réside ce type.</param>
      <param name="designerBaseType">
        <see cref="T:System.Type" /> représentant la classe de base à associer à <paramref name="designerTypeName" />.</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DesignerAttribute" /> à l'aide du type qui fournit des services de design.</summary>
      <param name="designerType">
        <see cref="T:System.Type" /> qui représente la classe qui fournit les services de design pour le composant auquel cet attribut est lié.</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.Type,System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DesignerAttribute" /> à l'aide du type du concepteur et de la classe de base du concepteur.</summary>
      <param name="designerType">
        <see cref="T:System.Type" /> qui représente la classe qui fournit les services de design pour le composant auquel cet attribut est lié.</param>
      <param name="designerBaseType">
        <see cref="T:System.Type" /> représentant la classe de base à associer à <paramref name="designerType" />.</param>
    </member>
    <member name="P:System.ComponentModel.DesignerAttribute.DesignerBaseTypeName">
      <summary>Obtient le nom du type de base de ce concepteur.</summary>
      <returns>Nom du type de base de ce concepteur.</returns>
    </member>
    <member name="P:System.ComponentModel.DesignerAttribute.DesignerTypeName">
      <summary>Obtient le nom du type de concepteur associé à cet attribut de concepteur.</summary>
      <returns>Nom du type de concepteur associé à cet attribut de concepteur.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.Equals(System.Object)">
      <summary>Retourne une valeur indiquant si la valeur de l'objet donné est égale au <see cref="T:System.ComponentModel.DesignerAttribute" /> en cours.</summary>
      <param name="obj">Objet dont l'égalité des valeurs doit être vérifiée.</param>
      <returns>
        <see langword="true" /> si la valeur de l'objet donné est égale à celle de la valeur actuelle ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.GetHashCode">
      <summary>Retourne le code de hachage de cette instance.</summary>
      <returns>Code de hachage d'un entier signé 32 bits.</returns>
    </member>
    <member name="P:System.ComponentModel.DesignerAttribute.TypeId">
      <summary>Obtient un ID unique pour ce type d'attribut.</summary>
      <returns>ID unique pour ce type d'attribut.</returns>
    </member>
    <member name="T:System.ComponentModel.DesignTimeVisibleAttribute">
      <summary>
        <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" /> marque la visibilité d'un composant. Si <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Yes" /> existe, un concepteur visuel peut afficher ce composant dans un concepteur.</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.#ctor">
      <summary>Crée un nouvel <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" /> dont la valeur par défaut est <see langword="false" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.#ctor(System.Boolean)">
      <summary>Crée un nouveau <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" /> dont la propriété <see cref="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible" /> est égale à la valeur spécifiée dans <paramref name="visible" />.</summary>
      <param name="visible">Valeur en fonction de laquelle la valeur de la propriété <see cref="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible" /> sera définie.</param>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.Default">
      <summary>Visibilité par défaut, à savoir <see langword="Yes" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.Equals(System.Object)">
      <summary>Retourne une valeur qui indique si cette instance est égale à un objet spécifié.</summary>
      <param name="obj">Objet à comparer à cette instance ou référence null (<see langword="Nothing" /> en Visual Basic).</param>
      <returns>
        <see langword="true" /> si <paramref name="obj" /> est égal au type et à la valeur de cette instance ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.GetHashCode">
      <summary>Retourne le code de hachage de cette instance.</summary>
      <returns>Code de hachage d'un entier signé 32 bits.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.IsDefaultAttribute">
      <summary>Obtient une valeur qui indique si cette instance est égale à la valeur <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Default" />.</summary>
      <returns>
        <see langword="true" />, si cette instance est égale à la valeur <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Default" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.No">
      <summary>Marque un composant invisible dans un concepteur visuel.</summary>
    </member>
    <member name="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible">
      <summary>Obtient ou définit si le composant doit être affiché au moment du design.</summary>
      <returns>
        <see langword="true" /> si ce composant doit être affiché au moment du design ; sinon <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.Yes">
      <summary>Marque un composant visible dans un concepteur visuel.</summary>
    </member>
    <member name="T:System.ComponentModel.DoubleConverter">
      <summary>Fournit un convertisseur de type pour convertir les objets numériques à virgule flottante double précision vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.DoubleConverter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DoubleConverter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.EditorAttribute">
      <summary>Spécifie l’éditeur à utiliser pour modifier une propriété. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.EditorAttribute" /> avec l'éditeur par défaut, c'est-à-dire aucun éditeur.</summary>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.String,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.EditorAttribute" /> avec le nom du type et du type de base de l'éditeur.</summary>
      <param name="typeName">Nom de type qualifié complet de l'éditeur.</param>
      <param name="baseTypeName">Obtient le nom qualifié complet du type de la classe ou de l'interface de base à utiliser comme clé de recherche pour l'éditeur. Cette classe doit être <see cref="T:System.Drawing.Design.UITypeEditor" />, ou en dériver.</param>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.String,System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.EditorAttribute" /> avec le nom du type et le type de base.</summary>
      <param name="typeName">Nom de type qualifié complet de l'éditeur.</param>
      <param name="baseType">
        <see cref="T:System.Type" /> de la classe ou de l'interface de base à utiliser comme clé de recherche pour l'éditeur. Cette classe doit être <see cref="T:System.Drawing.Design.UITypeEditor" />, ou en dériver.</param>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.Type,System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.EditorAttribute" /> avec le type et le type de base.</summary>
      <param name="type">
        <see cref="T:System.Type" /> qui représente le type de l'éditeur.</param>
      <param name="baseType">
        <see cref="T:System.Type" /> de la classe ou de l'interface de base à utiliser comme clé de recherche pour l'éditeur. Cette classe doit être <see cref="T:System.Drawing.Design.UITypeEditor" />, ou en dériver.</param>
    </member>
    <member name="P:System.ComponentModel.EditorAttribute.EditorBaseTypeName">
      <summary>Obtient le nom de la classe ou de l'interface de base qui sert de clé de recherche pour cet éditeur.</summary>
      <returns>Nom de la classe ou de l'interface de base qui sert de clé de recherche pour cet éditeur.</returns>
    </member>
    <member name="P:System.ComponentModel.EditorAttribute.EditorTypeName">
      <summary>Obtient le nom de la classe de l'éditeur au format <see cref="P:System.Type.AssemblyQualifiedName" />.</summary>
      <returns>Nom de la classe de l'éditeur au format <see cref="P:System.Type.AssemblyQualifiedName" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.Equals(System.Object)">
      <summary>Retourne une valeur indiquant si la valeur de l'objet donné est égale au <see cref="T:System.ComponentModel.EditorAttribute" /> en cours.</summary>
      <param name="obj">Objet dont l'égalité des valeurs doit être vérifiée.</param>
      <returns>
        <see langword="true" /> si la valeur de l'objet donné est égale à celle de l'objet actuel ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.GetHashCode">
      <summary>Retourne le code de hachage de cette instance.</summary>
      <returns>Code de hachage d'un entier signé 32 bits.</returns>
    </member>
    <member name="P:System.ComponentModel.EditorAttribute.TypeId">
      <summary>Obtient un ID unique pour ce type d'attribut.</summary>
      <returns>ID unique pour ce type d'attribut.</returns>
    </member>
    <member name="T:System.ComponentModel.EnumConverter">
      <summary>Fournit un convertisseur de type pour convertir les objets <see cref="T:System.Enum" /> vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.#ctor(System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.EnumConverter" /> pour le type donné.</summary>
      <param name="type">
        <see cref="T:System.Type" /> qui représente le type d'énumération à associer à ce convertisseur d'énumération.</param>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtient une valeur indiquant si ce convertisseur peut convertir un objet du type source donné en objet d'énumération à l'aide du contexte spécifié.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="sourceType">
        <see cref="T:System.Type" /> qui représente le type à partir duquel vous voulez effectuer la conversion.</param>
      <returns>
        <see langword="true" /> si ce convertisseur peut effectuer la conversion ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtient une valeur indiquant si ce convertisseur peut convertir un objet en objet du type de destination donné en utilisant le contexte.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> qui représente le type vers lequel vous souhaitez effectuer la conversion.</param>
      <returns>
        <see langword="true" /> si ce convertisseur peut effectuer la conversion ; sinon <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.Comparer">
      <summary>Obtient <see cref="T:System.Collections.IComparer" /> qui peut être utilisé pour trier les valeurs de l'énumération.</summary>
      <returns>
        <see cref="T:System.Collections.IComparer" /> pour trier les valeurs de l'énumération.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convertit l'objet de valeur spécifié en objet d'énumération.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> facultatif. Si la culture n'est pas spécifiée, la culture en cours est utilisée.</param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir.</param>
      <returns>
        <see cref="T:System.Object" /> qui représente <paramref name="value" /> converti.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n'est pas une valeur valide pour le type cible.</exception>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convertit l'objet de valeur donnée en type de destination spécifié.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> facultatif. Si la culture n'est pas spécifiée, la culture en cours est utilisée.</param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> dans lequel convertir la valeur.</param>
      <returns>
        <see cref="T:System.Object" /> qui représente <paramref name="value" /> converti.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> n'est pas une valeur valide pour l'énumération.</exception>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.EnumType">
      <summary>Spécifie le type de l'énumérateur auquel ce convertisseur est associé.</summary>
      <returns>Type de l'énumérateur auquel ce convertisseur est associé.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtient une collection de valeurs standard pour le type de données pour lequel ce validateur est conçu.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> contenant un jeu standard de valeurs valides ou <see langword="null" /> si le type de données ne prend pas en charge un jeu standard de valeurs.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtient une valeur indiquant si la liste de valeurs standard retournée par <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> est une liste exclusive à l'aide du contexte spécifié.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns>
        <see langword="true" /> si le <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> retourné par <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> est une liste exhaustive des valeurs possibles ; <see langword="false" /> si d'autres valeurs sont possibles.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtient une valeur indiquant si cet objet prend en charge une série de valeurs standard qui peuvent être sélectionnées dans une liste, à l'aide du contexte spécifié.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns>
        <see langword="true" /> car <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> doit être appelé pour trouver un jeu de valeurs communes pris en charge par l'objet. Cette méthode ne retourne jamais <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>Obtient une valeur indiquant si la valeur d'objet donnée est valide pour ce type.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="value">
        <see cref="T:System.Object" /> à tester.</param>
      <returns>
        <see langword="true" /> si la valeur spécifiée est valide pour cet objet ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.Values">
      <summary>Obtient ou définit un <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> qui spécifie les valeurs possibles pour l'énumération.</summary>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> qui spécifie les valeurs possibles pour l'énumération.</returns>
    </member>
    <member name="T:System.ComponentModel.EventDescriptor">
      <summary>Fournit des informations sur un événement.</summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.EventDescriptor" /> avec le nom et les attributs dans le <see cref="T:System.ComponentModel.MemberDescriptor" /> spécifié.</summary>
      <param name="descr">
        <see cref="T:System.ComponentModel.MemberDescriptor" /> qui contient le nom de l'événement et ses attributs.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.EventDescriptor" /> avec le nom dans le <see cref="T:System.ComponentModel.MemberDescriptor" /> spécifié et les attributs dans les tableaux <see cref="T:System.ComponentModel.MemberDescriptor" /> et <see cref="T:System.Attribute" />.</summary>
      <param name="descr">
        <see cref="T:System.ComponentModel.MemberDescriptor" /> possédant le nom du membre et ses attributs.</param>
      <param name="attrs">Tableau <see cref="T:System.Attribute" /> possédant les attributs à ajouter à la description de cet événement.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.String,System.Attribute[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.EventDescriptor" /> avec le nom et le tableau d'attributs spécifiés.</summary>
      <param name="name">Nom de l’événement.</param>
      <param name="attrs">Tableau de type <see cref="T:System.Attribute" /> qui contient les attributs d'événement.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.AddEventHandler(System.Object,System.Delegate)">
      <summary>En cas de substitution dans une classe dérivée, lie l'événement au composant.</summary>
      <param name="component">Composant fournissant des événements au délégué.</param>
      <param name="value">Délégué représentant la méthode qui gère l'événement.</param>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.ComponentType">
      <summary>En cas de substitution dans une classe dérivée, obtient le type du composant auquel cet événement est lié.</summary>
      <returns>
        <see cref="T:System.Type" /> représentant le type du composant auquel cet événement est lié.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.EventType">
      <summary>En cas de substitution dans une classe dérivée, obtient le type du délégué de l'événement.</summary>
      <returns>
        <see cref="T:System.Type" /> représentant le type du délégué de l'événement.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.IsMulticast">
      <summary>En cas de substitution dans une classe dérivée, obtient une valeur indiquant si le délégué d'événement est un délégué multicast.</summary>
      <returns>
        <see langword="true" /> s'il s'agit d'un délégué d'événement multicast ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.RemoveEventHandler(System.Object,System.Delegate)">
      <summary>En cas de substitution dans une classe dérivée, supprime la liaison du délégué avec le composant de sorte que le délégué ne reçoit plus les événements du composant.</summary>
      <param name="component">Composant auquel le délégué est lié.</param>
      <param name="value">Délégué dont la liaison au composant doit être supprimée.</param>
    </member>
    <member name="T:System.ComponentModel.EventDescriptorCollection">
      <summary>Représente une collection d'objets <see cref="T:System.ComponentModel.EventDescriptor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.EventDescriptorCollection" /> avec le tableau d'objets <see cref="T:System.ComponentModel.EventDescriptor" /> donné.</summary>
      <param name="events">Tableau de type <see cref="T:System.ComponentModel.EventDescriptor" /> qui fournit les événements de cette collection.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[],System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.EventDescriptorCollection" /> avec le tableau d'objets <see cref="T:System.ComponentModel.EventDescriptor" /> donné. La collection est éventuellement en lecture seule.</summary>
      <param name="events">Tableau de type <see cref="T:System.ComponentModel.EventDescriptor" /> qui fournit les événements de cette collection.</param>
      <param name="readOnly">
        <see langword="true" /> pour spécifier une collection en lecture seule ; sinon, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Add(System.ComponentModel.EventDescriptor)">
      <summary>Ajoute un <see cref="T:System.ComponentModel.EventDescriptor" /> à la fin de la collection.</summary>
      <param name="value">
        <see cref="T:System.ComponentModel.EventDescriptor" /> à ajouter à la collection.</param>
      <returns>Position du <see cref="T:System.ComponentModel.EventDescriptor" /> au sein de la collection.</returns>
      <exception cref="T:System.NotSupportedException">La collection est en lecture seule.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Clear">
      <summary>Supprime tous les objets de la collection.</summary>
      <exception cref="T:System.NotSupportedException">La collection est en lecture seule.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Contains(System.ComponentModel.EventDescriptor)">
      <summary>Retourne une valeur indiquant si la collection contient le <see cref="T:System.ComponentModel.EventDescriptor" /> donné.</summary>
      <param name="value">
        <see cref="T:System.ComponentModel.EventDescriptor" /> à rechercher dans la collection.</param>
      <returns>
        <see langword="true" /> si la collection contient le paramètre <paramref name="value" /> donné ; sinon <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Count">
      <summary>Obtient le nombre de descripteurs d'événement dans la collection.</summary>
      <returns>Nombre de descripteurs d'événement dans la collection.</returns>
    </member>
    <member name="F:System.ComponentModel.EventDescriptorCollection.Empty">
      <summary>Spécifie une collection vide à utiliser, plutôt que d'en créer une dépourvue d'élément. Ce champ <see langword="static" /> est en lecture seule.</summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Find(System.String,System.Boolean)">
      <summary>Obtient la description de l'événement correspondant au nom spécifié dans la collection.</summary>
      <param name="name">Nom de l'événement à obtenir de la collection.</param>
      <param name="ignoreCase">
        <see langword="true" /> si vous souhaitez ignorer la casse de l'événement ; sinon, <see langword="false" />.</param>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptor" /> portant le nom spécifié, ou <see langword="null" /> si aucun événement n'existe.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.GetEnumerator">
      <summary>Obtient un énumérateur pour ce <see cref="T:System.ComponentModel.EventDescriptorCollection" />.</summary>
      <returns>Énumérateur implémentant <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.IndexOf(System.ComponentModel.EventDescriptor)">
      <summary>Retourne l'index du <see cref="T:System.ComponentModel.EventDescriptor" /> donné.</summary>
      <param name="value">
        <see cref="T:System.ComponentModel.EventDescriptor" /> à rechercher dans la collection.</param>
      <returns>Index du <see cref="T:System.ComponentModel.EventDescriptor" /> donné au sein de la collection.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Insert(System.Int32,System.ComponentModel.EventDescriptor)">
      <summary>Insère un <see cref="T:System.ComponentModel.EventDescriptor" /> dans la collection à un index spécifié.</summary>
      <param name="index">Index au sein de la collection dans laquelle insérer le paramètre <paramref name="value" />.</param>
      <param name="value">
        <see cref="T:System.ComponentModel.EventDescriptor" /> à insérer dans la collection.</param>
      <exception cref="T:System.NotSupportedException">La collection est en lecture seule.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.InternalSort(System.Collections.IComparer)">
      <summary>Trie les membres de ce <see cref="T:System.ComponentModel.EventDescriptorCollection" /> avec le <see cref="T:System.Collections.IComparer" /> spécifié.</summary>
      <param name="sorter">Comparateur à utiliser pour trier les objets <see cref="T:System.ComponentModel.EventDescriptor" /> dans cette collection.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.InternalSort(System.String[])">
      <summary>Trie les membres de ce <see cref="T:System.ComponentModel.EventDescriptorCollection" />. L'ordre spécifié est appliqué en premier, suivi du tri par défaut pour cette collection (généralement l'ordre alphabétique).</summary>
      <param name="names">Tableau de chaînes décrivant l'ordre dans lequel trier les objets <see cref="T:System.ComponentModel.EventDescriptor" /> dans cette collection.</param>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)">
      <summary>Obtient ou définit l'événement assorti du numéro d'index spécifié.</summary>
      <param name="index">Numéro d'index de base zéro du <see cref="T:System.ComponentModel.EventDescriptor" /> à obtenir ou définir.</param>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptor" /> avec le numéro d'index spécifié.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> n'est pas un index valide pour <see cref="P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)" />.</exception>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Item(System.String)">
      <summary>Obtient ou définit l'événement portant le nom spécifié.</summary>
      <param name="name">Nom du <see cref="T:System.ComponentModel.EventDescriptor" /> à obtenir ou définir.</param>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptor" /> portant le nom spécifié, ou <see langword="null" /> si aucun événement n'existe.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Remove(System.ComponentModel.EventDescriptor)">
      <summary>Supprime l’objet <see cref="T:System.ComponentModel.EventDescriptor" /> spécifié de la collection.</summary>
      <param name="value">
        <see cref="T:System.ComponentModel.EventDescriptor" /> à supprimer de la collection.</param>
      <exception cref="T:System.NotSupportedException">La collection est en lecture seule.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.RemoveAt(System.Int32)">
      <summary>Supprime le <see cref="T:System.ComponentModel.EventDescriptor" /> à l'index spécifié dans la collection.</summary>
      <param name="index">Index du <see cref="T:System.ComponentModel.EventDescriptor" /> à supprimer.</param>
      <exception cref="T:System.NotSupportedException">La collection est en lecture seule.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort">
      <summary>Trie les membres de ce <see cref="T:System.ComponentModel.EventDescriptorCollection" /> avec le tri par défaut pour cette collection (généralement l'ordre alphabétique).</summary>
      <returns>Nouvelle <see cref="T:System.ComponentModel.EventDescriptorCollection" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.Collections.IComparer)">
      <summary>Trie les membres de ce <see cref="T:System.ComponentModel.EventDescriptorCollection" /> avec le <see cref="T:System.Collections.IComparer" /> spécifié.</summary>
      <param name="comparer">
        <see cref="T:System.Collections.IComparer" /> à utiliser pour trier les objets <see cref="T:System.ComponentModel.EventDescriptor" /> dans cette collection.</param>
      <returns>Nouvelle <see cref="T:System.ComponentModel.EventDescriptorCollection" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.String[])">
      <summary>Trie les membres de ce <see cref="T:System.ComponentModel.EventDescriptorCollection" /> avec un ordre de tri spécifié.</summary>
      <param name="names">Tableau de chaînes décrivant l'ordre dans lequel trier les objets <see cref="T:System.ComponentModel.EventDescriptor" /> de la collection.</param>
      <returns>Nouvelle <see cref="T:System.ComponentModel.EventDescriptorCollection" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.String[],System.Collections.IComparer)">
      <summary>Trie les membres de ce <see cref="T:System.ComponentModel.EventDescriptorCollection" /> avec un ordre de tri spécifié et un <see cref="T:System.Collections.IComparer" />.</summary>
      <param name="names">Tableau de chaînes décrivant l'ordre dans lequel trier les objets <see cref="T:System.ComponentModel.EventDescriptor" /> de la collection.</param>
      <param name="comparer">
        <see cref="T:System.Collections.IComparer" /> à utiliser pour trier les objets <see cref="T:System.ComponentModel.EventDescriptor" /> dans cette collection.</param>
      <returns>Nouvelle <see cref="T:System.ComponentModel.EventDescriptorCollection" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copie les éléments de la collection dans un <see cref="T:System.Array" />, en commençant à un index particulier de <see cref="T:System.Array" />.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensionnel qui constitue la destination des éléments copiés à partir de la collection. <see cref="T:System.Array" /> doit avoir une indexation de base zéro.</param>
      <param name="index">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#Count">
      <summary>Obtient le nombre d’éléments contenus dans la collection.</summary>
      <returns>Nombre d’éléments contenus dans la collection.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Obtient une valeur indiquant si l'accès à la collection est synchronisé.</summary>
      <returns>
        <see langword="true" /> si l'accès à la collection est synchronisé ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#SyncRoot">
      <summary>Obtient un objet qui peut être utilisé pour synchroniser l’accès à la collection.</summary>
      <returns>Objet permettant de synchroniser l’accès à la collection.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein d’une collection.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> qui peut être utilisé pour itérer au sein de la collection.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Add(System.Object)">
      <summary>Ajoute un élément à la collection.</summary>
      <param name="value">Objet <see cref="T:System.Object" /> à ajouter à la collection.</param>
      <returns>Position à laquelle le nouvel élément est inséré.</returns>
      <exception cref="T:System.NotSupportedException">La collection est en lecture seule.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Clear">
      <summary>Supprime tous les éléments de la collection.</summary>
      <exception cref="T:System.NotSupportedException">La collection est en lecture seule.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Contains(System.Object)">
      <summary>Détermine si la collection contient une valeur spécifique.</summary>
      <param name="value">
        <see cref="T:System.Object" /> à rechercher dans la collection.</param>
      <returns>
        <see langword="true" /> si <see cref="T:System.Object" /> se trouve dans la collection ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>Détermine l'index d'un élément spécifique de la collection.</summary>
      <param name="value">
        <see cref="T:System.Object" /> à rechercher dans la collection.</param>
      <returns>Index de <paramref name="value" /> s'il figure dans la liste ; sinon, -1.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Insère un élément dans la collection à l'index spécifié.</summary>
      <param name="index">Index de base zéro au niveau duquel <paramref name="value" /> doit être inséré.</param>
      <param name="value">
        <see cref="T:System.Object" /> à insérer dans la collection.</param>
      <exception cref="T:System.NotSupportedException">La collection est en lecture seule.</exception>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsFixedSize">
      <summary>Obtient une valeur indiquant si la collection est de taille fixe.</summary>
      <returns>
        <see langword="true" /> si la collection a une taille fixe ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsReadOnly">
      <summary>Obtient une valeur indiquant si la collection est en lecture seule.</summary>
      <returns>
        <see langword="true" /> si la collection est en lecture seule ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Item(System.Int32)">
      <summary>Obtient ou définit l'élément au niveau de l'index spécifié.</summary>
      <param name="index">Index de base zéro de l'élément à obtenir ou à définir.</param>
      <returns>Élément au niveau de l'index spécifié.</returns>
      <exception cref="T:System.NotSupportedException">La collection est en lecture seule.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> est inférieur à 0.

ou -
<paramref name="index" /> est supérieur ou égal à <see cref="P:System.ComponentModel.EventDescriptorCollection.Count" />.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Remove(System.Object)">
      <summary>Supprime la première occurrence d’un objet spécifique dans la collection.</summary>
      <param name="value">
        <see cref="T:System.Object" /> à supprimer de la collection.</param>
      <exception cref="T:System.NotSupportedException">La collection est en lecture seule.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Supprime l'élément au niveau de l'index spécifié.</summary>
      <param name="index">Index de base zéro de l'élément à supprimer.</param>
      <exception cref="T:System.NotSupportedException">La collection est en lecture seule.</exception>
    </member>
    <member name="T:System.ComponentModel.ExpandableObjectConverter">
      <summary>Fournit un convertisseur de type pour des objets extensibles vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ExpandableObjectConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Obtient une collection de propriétés pour le type d'objet spécifié par le paramètre de valeur.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="value">
        <see cref="T:System.Object" /> spécifiant le type d'objet pour lequel obtenir les propriétés.</param>
      <param name="attributes">Tableau de type <see cref="T:System.Attribute" /> qui sera utilisé comme filtre.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> possédant les propriétés exposées pour ce composant, ou <see langword="null" /> en l'absence de propriétés.</returns>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtient une valeur indiquant si cet objet prend en charge les propriétés, en utilisant le contexte spécifié.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns>
        <see langword="true" /> car <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> doit être appelé pour rechercher les propriétés de cet objet. Cette méthode ne retourne jamais <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ExtenderProvidedPropertyAttribute">
      <summary>Spécifie une propriété qui est offerte par un fournisseur d'extendeurs. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ExtenderProvidedPropertyAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.Equals(System.Object)">
      <summary>Retourne une valeur qui indique si cette instance est égale à un objet spécifié.</summary>
      <param name="obj">
        <see cref="T:System.Object" /> à comparer à cette instance ou une référence null (<see langword="Nothing" /> en Visual Basic).</param>
      <returns>
        <see langword="true" /> si <paramref name="obj" /> est égal au type et à la valeur de cette instance ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.ExtenderProperty">
      <summary>Obtient la propriété fournie.</summary>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> qui encapsule la propriété qui est fournie.</returns>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.GetHashCode">
      <summary>Retourne le code de hachage de cette instance.</summary>
      <returns>Code de hachage d'un entier signé 32 bits.</returns>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.IsDefaultAttribute">
      <summary>Fournit une indication si la valeur de cette instance est la valeur par défaut pour la classe dérivée.</summary>
      <returns>
        <see langword="true" /> si cette instance est l’attribut par défaut de la classe ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.Provider">
      <summary>Obtient le fournisseur d'extendeurs qui fournit la propriété.</summary>
      <returns>
        <see cref="T:System.ComponentModel.IExtenderProvider" /> qui fournit la propriété.</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.ReceiverType">
      <summary>Obtient le type d'objet qui peut recevoir la propriété.</summary>
      <returns>
        <see cref="T:System.Type" /> qui décrit le type d'objet qui peut recevoir la propriété.</returns>
    </member>
    <member name="T:System.ComponentModel.GuidConverter">
      <summary>Fournit un convertisseur de type pour convertir les objets <see cref="T:System.Guid" /> vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.GuidConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtient une valeur indiquant si ce convertisseur peut convertir un objet du type source donné en objet GUID utilisant le contexte.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="sourceType">
        <see cref="T:System.Type" /> qui représente le type à partir duquel vous voulez effectuer la conversion.</param>
      <returns>
        <see langword="true" /> si ce convertisseur peut effectuer la conversion ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtient une valeur indiquant si ce convertisseur peut convertir un objet en objet du type de destination donné en utilisant le contexte.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> qui représente le type vers lequel vous souhaitez effectuer la conversion.</param>
      <returns>
        <see langword="true" /> si ce convertisseur peut effectuer la conversion ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convertit l'objet donné en objet GUID.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> facultatif. Si la culture n'est pas spécifiée, la culture en cours est utilisée.</param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir.</param>
      <returns>
        <see cref="T:System.Object" /> qui représente <paramref name="value" /> converti.</returns>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convertit l'objet donné en un autre type.</summary>
      <param name="context">Contexte de formateur.</param>
      <param name="culture">Culture dans laquelle <paramref name="value" /> doit être converti.</param>
      <param name="value">Objet à convertir.</param>
      <param name="destinationType">Type dans lequel convertir l'objet.</param>
      <returns>Objet converti.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="T:System.ComponentModel.HandledEventArgs">
      <summary>Fournit des données pour les événements qui peuvent être complètement gérés dans un gestionnaire d'événements.</summary>
    </member>
    <member name="M:System.ComponentModel.HandledEventArgs.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.HandledEventArgs" /> avec une valeur de propriété <see cref="P:System.ComponentModel.HandledEventArgs.Handled" /> par défaut de <see langword="false" />.</summary>
    </member>
    <member name="M:System.ComponentModel.HandledEventArgs.#ctor(System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.HandledEventArgs" /> avec la valeur par défaut spécifiée de la propriété <see cref="P:System.ComponentModel.HandledEventArgs.Handled" />.</summary>
      <param name="defaultHandledValue">Valeur par défaut de cette propriété <see cref="P:System.ComponentModel.HandledEventArgs.Handled" />.</param>
    </member>
    <member name="P:System.ComponentModel.HandledEventArgs.Handled">
      <summary>Obtient ou définit une valeur qui indique si le gestionnaire d'événements a complètement géré l'événement ou si le système doit continuer son propre traitement.</summary>
      <returns>
        <see langword="true" /> si l'événement a été entièrement annulé ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.HandledEventHandler">
      <summary>Représente une méthode qui peut gérer des événements qui peuvent ou ne peuvent pas nécessiter un traitement supplémentaire après que le gestionnaire d'événements est retourné.</summary>
      <param name="sender">Source de l'événement.</param>
      <param name="e">
        <see cref="T:System.ComponentModel.HandledEventArgs" /> qui contient les données d'événement.</param>
    </member>
    <member name="T:System.ComponentModel.IBindingList">
      <summary>Fournit les fonctionnalités nécessaires à la prise en charge de scénarios complexes et simples lors de la liaison à une source de données.</summary>
    </member>
    <member name="M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>Ajoute <see cref="T:System.ComponentModel.PropertyDescriptor" /> aux index utilisés pour la recherche.</summary>
      <param name="property">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> à ajouter aux index utilisés pour la recherche.</param>
    </member>
    <member name="M:System.ComponentModel.IBindingList.AddNew">
      <summary>Ajoute un nouvel élément à la liste.</summary>
      <returns>Élément ajouté à la liste.</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.AllowNew" /> a la valeur <see langword="false" />.</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowEdit">
      <summary>Obtient une valeur indiquant si vous pouvez mettre à jour des éléments de la liste.</summary>
      <returns>
        <see langword="true" /> si vous pouvez mettre à jour les éléments de la liste ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowNew">
      <summary>Obtient une valeur indiquant si vous pouvez ajouter des éléments à la liste à l'aide de <see cref="M:System.ComponentModel.IBindingList.AddNew" />.</summary>
      <returns>
        <see langword="true" /> si vous pouvez ajouter des éléments à la liste à l'aide de <see cref="M:System.ComponentModel.IBindingList.AddNew" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowRemove">
      <summary>Obtient une valeur indiquant si vous pouvez supprimer des éléments de la liste à l'aide de <see cref="M:System.Collections.IList.Remove(System.Object)" /> ou de <see cref="M:System.Collections.IList.RemoveAt(System.Int32)" />.</summary>
      <returns>
        <see langword="true" /> si vous pouvez supprimer des éléments de la liste ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>Trie la liste en fonction d'un <see cref="T:System.ComponentModel.PropertyDescriptor" /> et d'un <see cref="T:System.ComponentModel.ListSortDirection" />.</summary>
      <param name="property">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> selon lequel le tri doit s'effectuer.</param>
      <param name="direction">Une des valeurs de <see cref="T:System.ComponentModel.ListSortDirection" />.</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> a la valeur <see langword="false" />.</exception>
    </member>
    <member name="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>Retourne l'index de la ligne possédant le <see cref="T:System.ComponentModel.PropertyDescriptor" /> donné.</summary>
      <param name="property">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> dans lequel effectuer la recherche.</param>
      <param name="key">Valeur du paramètre <paramref name="property" /> à rechercher.</param>
      <returns>Index de la ligne possédant le <see cref="T:System.ComponentModel.PropertyDescriptor" /> donné.</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" /> a la valeur <see langword="false" />.</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.IsSorted">
      <summary>Obtient une valeur indiquant si les éléments de la liste sont triés.</summary>
      <returns>
        <see langword="true" /> si <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" /> a été appelé et si <see cref="M:System.ComponentModel.IBindingList.RemoveSort" /> n'a pas été appelé ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> a la valeur <see langword="false" />.</exception>
    </member>
    <member name="E:System.ComponentModel.IBindingList.ListChanged">
      <summary>Se produit en cas de modification de la liste ou d'un de ses éléments.</summary>
    </member>
    <member name="M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>Supprime <see cref="T:System.ComponentModel.PropertyDescriptor" /> des index utilisés pour la recherche.</summary>
      <param name="property">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> à supprimer des index utilisés pour la recherche.</param>
    </member>
    <member name="M:System.ComponentModel.IBindingList.RemoveSort">
      <summary>Supprime tout tri appliqué à l'aide de <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" />.</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> a la valeur <see langword="false" />.</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SortDirection">
      <summary>Obtient le sens du tri.</summary>
      <returns>Une des valeurs de <see cref="T:System.ComponentModel.ListSortDirection" />.</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> a la valeur <see langword="false" />.</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SortProperty">
      <summary>Obtient le <see cref="T:System.ComponentModel.PropertyDescriptor" /> utilisé actuellement pour le tri.</summary>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> utilisé actuellement pour le tri.</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> est <see langword="false" />.</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsChangeNotification">
      <summary>Obtient une valeur indiquant si l'événement <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> est déclenché en cas de modification de la liste ou d'un de ses éléments.</summary>
      <returns>
        <see langword="true" /> si l'événement <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> est déclenché en cas de modification de la liste ou d'un de ses éléments ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsSearching">
      <summary>Obtient une valeur indiquant si la liste prend en charge la recherche à l'aide de la méthode <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />.</summary>
      <returns>
        <see langword="true" /> si la liste prend en charge la recherche à l'aide de la méthode <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsSorting">
      <summary>Obtient une valeur indiquant si la liste prend en charge le tri.</summary>
      <returns>
        <see langword="true" /> si la liste prend en charge le tri ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.IBindingListView">
      <summary>Étend l'interface <see cref="T:System.ComponentModel.IBindingList" /> en fournissant des fonctions de tri et de filtre avancées.</summary>
    </member>
    <member name="M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)">
      <summary>Trie la source de données selon le <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> donné.</summary>
      <param name="sorts">
        <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> qui contient les tris à appliquer à la source de données.</param>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.Filter">
      <summary>Obtient ou définit le filtre à utiliser pour exclure des éléments de la collection d’éléments retournée par la source de données.</summary>
      <returns>Chaîne utilisée pour filtrer des éléments de la collection d'éléments retournés par la source de données afin de les exclure.</returns>
    </member>
    <member name="M:System.ComponentModel.IBindingListView.RemoveFilter">
      <summary>Supprime le filtre actuel appliqué à la source de données.</summary>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SortDescriptions">
      <summary>Obtient la collection de descriptions de tri actuellement appliquée à la source de données.</summary>
      <returns>
        <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> actuellement appliqué à la source de données.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SupportsAdvancedSorting">
      <summary>Obtient une valeur indiquant si la source de données prend en charge le tri avancé.</summary>
      <returns>
        <see langword="true" /> si la source de données prend en charge le tri avancé ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SupportsFiltering">
      <summary>Obtient une valeur indiquant si la source de données prend en charge le filtrage.</summary>
      <returns>
        <see langword="true" /> si la source de données prend en charge le filtrage ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ICancelAddNew">
      <summary>Ajoute la fonction transactionnelle lors de l'ajout d'un nouvel élément à une collection.</summary>
    </member>
    <member name="M:System.ComponentModel.ICancelAddNew.CancelNew(System.Int32)">
      <summary>Élimine un nouvel élément en attente de la collection.</summary>
      <param name="itemIndex">Index de l'élément ajouté précédemment à la collection.</param>
    </member>
    <member name="M:System.ComponentModel.ICancelAddNew.EndNew(System.Int32)">
      <summary>Valide un nouvel élément en attente dans la collection.</summary>
      <param name="itemIndex">Index de l'élément ajouté précédemment à la collection.</param>
    </member>
    <member name="T:System.ComponentModel.IComNativeDescriptorHandler">
      <summary>Fournit une couche de mappage de niveau supérieur entre un objet COM et <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetAttributes(System.Object)">
      <summary>Obtient les attributs du composant spécifié.</summary>
      <param name="component">Composant pour lequel obtenir les attributs.</param>
      <returns>Collection d'attributs pour <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetClassName(System.Object)">
      <summary>Obtient le nom de la classe pour le composant spécifié.</summary>
      <param name="component">Composant pour lequel obtenir le nom de la classe.</param>
      <returns>Nom de la classe qui correspond à <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetConverter(System.Object)">
      <summary>Obtient le convertisseur de type pour le composant spécifié.</summary>
      <param name="component">Composant pour lequel obtenir <see cref="T:System.ComponentModel.TypeConverter" />.</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter" /> pour <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetDefaultEvent(System.Object)">
      <summary>Obtient l'événement par défaut pour le composant spécifié.</summary>
      <param name="component">Composant pour lequel obtenir l'événement par défaut.</param>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptor" /> qui représente l'événement par défaut de <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetDefaultProperty(System.Object)">
      <summary>Obtient la propriété par défaut pour le composant spécifié.</summary>
      <param name="component">Composant pour lequel obtenir la propriété par défaut.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> qui représente la propriété par défaut de <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEditor(System.Object,System.Type)">
      <summary>Obtient l'éditeur pour le composant spécifié.</summary>
      <param name="component">Composant pour lequel obtenir l’éditeur.</param>
      <param name="baseEditorType">Type de base de l'éditeur pour <paramref name="component" />.</param>
      <returns>Éditeur pour <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEvents(System.Object)">
      <summary>Obtient les événements pour le composant spécifié.</summary>
      <param name="component">Composant pour lequel obtenir les événements.</param>
      <returns>Collection de descripteurs d'événement pour <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEvents(System.Object,System.Attribute[])">
      <summary>Obtient les événements avec les attributs spécifiés pour le composant déterminé.</summary>
      <param name="component">Composant pour lequel obtenir les événements.</param>
      <param name="attributes">Attributs utilisés pour filtrer les événements.</param>
      <returns>Collection de descripteurs d'événement pour <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetName(System.Object)">
      <summary>Obtient le nom du composant spécifié.</summary>
      <param name="component">Composant duquel obtenir le nom.</param>
      <returns>Nom de <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetProperties(System.Object,System.Attribute[])">
      <summary>Obtient les propriétés avec les attributs spécifiés pour le composant déterminé.</summary>
      <param name="component">Composant pour lequel obtenir les événements.</param>
      <param name="attributes">Attributs utilisés pour filtrer les propriétés.</param>
      <returns>Collection de descripteurs de propriétés pour <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetPropertyValue(System.Object,System.Int32,System.Boolean@)">
      <summary>Obtient la valeur de la propriété qui comporte l'identificateur de dispatch spécifié.</summary>
      <param name="component">Objet auquel la propriété appartient.</param>
      <param name="dispid">Identificateur de dispatch.</param>
      <param name="success">
        <see cref="T:System.Boolean" />, passé par référence, qui indique si la propriété a été récupérée.</param>
      <returns>Valeur de la propriété qui comporte l'identificateur de dispatch spécifié.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetPropertyValue(System.Object,System.String,System.Boolean@)">
      <summary>Obtient la valeur de la propriété qui comporte le nom spécifié.</summary>
      <param name="component">Objet auquel la propriété appartient.</param>
      <param name="propertyName">Nom de la propriété.</param>
      <param name="success">
        <see cref="T:System.Boolean" />, passé par référence, qui indique si la propriété a été récupérée.</param>
      <returns>Valeur de la propriété qui comporte le nom spécifié.</returns>
    </member>
    <member name="T:System.ComponentModel.ICustomTypeDescriptor">
      <summary>Fournit une interface qui propose des informations de type personnalisé pour un objet.</summary>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetAttributes">
      <summary>Retourne une collection d’attributs personnalisés pour cette instance d’un composant.</summary>
      <returns>
        <see cref="T:System.ComponentModel.AttributeCollection" /> contenant les attributs pour cet objet.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetClassName">
      <summary>Retourne le nom de classe de cette instance d’un composant.</summary>
      <returns>Nom de classe de l’objet, ou <see langword="null" /> si la classe n’a pas de nom.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetComponentName">
      <summary>Retourne le nom de cette instance d’un composant.</summary>
      <returns>Nom de l’objet, ou <see langword="null" /> si l’objet n’a pas de nom.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetConverter">
      <summary>Retourne un convertisseur de type pour cette instance d’un composant.</summary>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter" /> qui est le convertisseur pour cet objet, ou <see langword="null" /> s’il n’existe aucun <see cref="T:System.ComponentModel.TypeConverter" /> pour cet objet.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent">
      <summary>Retourne l’événement par défaut pour cette instance d’un composant.</summary>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptor" /> qui représente l’événement par défaut pour cet objet, ou <see langword="null" /> si cet objet n’a pas d’événements.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty">
      <summary>Retourne la propriété par défaut pour cette instance d’un composant.</summary>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> qui représente la propriété par défaut pour cet objet, ou <see langword="null" /> si cet objet n’a pas de propriétés.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEditor(System.Type)">
      <summary>Retourne un éditeur du type spécifié pour cette instance d’un composant.</summary>
      <param name="editorBaseType">
        <see cref="T:System.Type" /> qui représente l’éditeur pour cet objet.</param>
      <returns>
        <see cref="T:System.Object" /> du type spécifié qui est l’éditeur pour cet objet, ou <see langword="null" /> si l’éditeur est introuvable.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEvents">
      <summary>Retourne les événements pour cette instance d’un composant.</summary>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptorCollection" /> qui représente les événements pour cette instance de composant.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEvents(System.Attribute[])">
      <summary>Retourne les événements pour cette instance d’un composant à l’aide du tableau d’attributs spécifié comme filtre.</summary>
      <param name="attributes">Tableau de type <see cref="T:System.Attribute" /> utilisé comme filtre.</param>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptorCollection" /> qui représente les événements filtrés pour cette instance de composant.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetProperties">
      <summary>Retourne les propriétés pour cette instance d’un composant.</summary>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> qui représente les propriétés pour cette instance de composant.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetProperties(System.Attribute[])">
      <summary>Retourne les propriétés de cette instance d’un composant à l’aide du tableau d’attributs comme filtre.</summary>
      <param name="attributes">Tableau de type <see cref="T:System.Attribute" /> utilisé comme filtre.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> qui représente les propriétés filtrées de cette instance de composant.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>Retourne un objet qui contient la propriété décrite par le descripteur de propriété spécifié.</summary>
      <param name="pd">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> qui représente la propriété dont le propriétaire doit être trouvé.</param>
      <returns>
        <see cref="T:System.Object" /> qui représente le propriétaire de la propriété spécifiée.</returns>
    </member>
    <member name="T:System.ComponentModel.IDataErrorInfo">
      <summary>Fournit des fonctionnalités pour proposer des informations sur l'erreur personnalisées vers lesquelles une interface utilisateur peut établir une liaison.</summary>
    </member>
    <member name="P:System.ComponentModel.IDataErrorInfo.Error">
      <summary>Obtient un message d'erreur indiquant le problème lié à cet objet.</summary>
      <returns>Message d'erreur indiquant le problème lié à cet objet. La valeur par défaut est une chaîne vide ("").</returns>
    </member>
    <member name="P:System.ComponentModel.IDataErrorInfo.Item(System.String)">
      <summary>Obtient le message d'erreur pour la propriété portant le nom donné.</summary>
      <param name="columnName">Nom de la propriété pour laquelle obtenir le message d'erreur.</param>
      <returns>Message d'erreur pour la propriété. La valeur par défaut est une chaîne vide ("").</returns>
    </member>
    <member name="T:System.ComponentModel.IExtenderProvider">
      <summary>Définit l'interface pour étendre les propriétés à d'autres composants dans un conteneur.</summary>
    </member>
    <member name="M:System.ComponentModel.IExtenderProvider.CanExtend(System.Object)">
      <summary>Spécifie si cet objet peut fournir ses propriétés extendeur à l'objet spécifié.</summary>
      <param name="extendee">
        <see cref="T:System.Object" /> recevant les propriétés extendeur.</param>
      <returns>
        <see langword="true" /> si cet objet peut fournir des propriétés extendeur à l'objet spécifié ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.IIntellisenseBuilder">
      <summary>Fournit une interface pour faciliter la récupération du nom du générateur et pour afficher le générateur.</summary>
    </member>
    <member name="P:System.ComponentModel.IIntellisenseBuilder.Name">
      <summary>Obtient un nom localisé.</summary>
      <returns>Nom localisé.</returns>
    </member>
    <member name="M:System.ComponentModel.IIntellisenseBuilder.Show(System.String,System.String,System.String@)">
      <summary>Affiche le générateur.</summary>
      <param name="language">Service de langage qui appelle le générateur.</param>
      <param name="value">Expression qui est modifiée.</param>
      <param name="newValue">Nouvelle valeur.</param>
      <returns>
        <see langword="true" /> si la valeur doit être remplacée par <paramref name="newValue" /> ; sinon, <see langword="false" /> (si l'utilisateur annule, par exemple).</returns>
    </member>
    <member name="T:System.ComponentModel.IListSource">
      <summary>Fournit des fonctionnalités à un objet pour retourner une liste pouvant être liée à une source de données.</summary>
    </member>
    <member name="P:System.ComponentModel.IListSource.ContainsListCollection">
      <summary>Obtient une valeur indiquant si la collection est une collection d'objets <see cref="T:System.Collections.IList" />.</summary>
      <returns>
        <see langword="true" /> si la collection est une collection d'objets <see cref="T:System.Collections.IList" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IListSource.GetList">
      <summary>Retourne <see cref="T:System.Collections.IList" /> pouvant être lié à une source de données à partir d'un objet qui, lui-même, n'implémente pas <see cref="T:System.Collections.IList" />.</summary>
      <returns>
        <see cref="T:System.Collections.IList" /> pouvant être lié à une source de données à partir de l'objet.</returns>
    </member>
    <member name="T:System.ComponentModel.INestedContainer">
      <summary>Fournit les fonctionnalités pour les conteneurs imbriqués qui contiennent logiquement zéro ou plusieurs autres composants et ont un composant parent comme propriétaire.</summary>
    </member>
    <member name="P:System.ComponentModel.INestedContainer.Owner">
      <summary>Obtient le composant propriétaire pour le conteneur imbriqué.</summary>
      <returns>
        <see cref="T:System.ComponentModel.IComponent" /> auquel appartient le conteneur imbriqué.</returns>
    </member>
    <member name="T:System.ComponentModel.INestedSite">
      <summary>Permet de récupérer le nom imbriqué complet d'un composant.</summary>
    </member>
    <member name="P:System.ComponentModel.INestedSite.FullName">
      <summary>Obtient le nom complet du composant dans ce site.</summary>
      <returns>Nom complet du composant dans ce site.</returns>
    </member>
    <member name="T:System.ComponentModel.InheritanceAttribute">
      <summary>Indique si le composant associé à cet attribut a été hérité d'une classe de base. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.InheritanceAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.#ctor(System.ComponentModel.InheritanceLevel)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.InheritanceAttribute" /> avec le niveau d'héritage spécifié.</summary>
      <param name="inheritanceLevel">
        <see cref="T:System.ComponentModel.InheritanceLevel" /> indiquant le niveau d'héritage pour lequel cet attribut doit être défini.</param>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.Default">
      <summary>Spécifie que la valeur par défaut de <see cref="T:System.ComponentModel.InheritanceAttribute" /> est <see cref="F:System.ComponentModel.InheritanceAttribute.NotInherited" />. Ce champ est en lecture seule.</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.Equals(System.Object)">
      <summary>Substitution à comparer.</summary>
      <param name="value">Objet à tester.</param>
      <returns>
        <see langword="true" /> si l'objet est le même ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.GetHashCode">
      <summary>Retourne le code de hachage pour cet objet.</summary>
      <returns>Code de hachage du <see cref="T:System.ComponentModel.InheritanceAttribute" /> actuel.</returns>
    </member>
    <member name="P:System.ComponentModel.InheritanceAttribute.InheritanceLevel">
      <summary>Obtient ou définit le niveau d'héritage stocké dans cet attribut.</summary>
      <returns>
        <see cref="T:System.ComponentModel.InheritanceLevel" /> stocké dans cet attribut.</returns>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.Inherited">
      <summary>Spécifie que le composant est hérité. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.InheritedReadOnly">
      <summary>Spécifie que le composant est hérité et en lecture seule. Ce champ est en lecture seule.</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.IsDefaultAttribute">
      <summary>Obtient une valeur indiquant si la valeur actuelle de l'attribut est sa valeur par défaut.</summary>
      <returns>
        <see langword="true" /> si la valeur actuelle de l'attribut est la valeur par défaut ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.NotInherited">
      <summary>Spécifie que le composant n'est pas hérité. Ce champ est en lecture seule.</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.ToString">
      <summary>Convertit cet attribut en chaîne.</summary>
      <returns>Chaîne qui représente ce <see cref="T:System.ComponentModel.InheritanceAttribute" />.</returns>
    </member>
    <member name="T:System.ComponentModel.InheritanceLevel">
      <summary>Définit des identificateurs pour les types des niveaux d'héritage.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.Inherited">
      <summary>L'objet est hérité.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.InheritedReadOnly">
      <summary>L'objet est hérité, mais possède un accès en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.NotInherited">
      <summary>L'objet n'est pas hérité.</summary>
    </member>
    <member name="T:System.ComponentModel.InstallerTypeAttribute">
      <summary>Spécifie le programme d'installation pour un type qui installe les composants.</summary>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> avec le nom du type de programme d'installation du composant.</summary>
      <param name="typeName">Nom de <see cref="T:System.Type" /> qui représente le programme d'installation pour le composant auquel cet attribut est lié. Cette classe doit implémenter <see cref="T:System.ComponentModel.Design.IDesigner" />.</param>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.#ctor(System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> lorsque le <see cref="T:System.Type" /> qui représente le programme d'installation pour un composant est donné.</summary>
      <param name="installerType">
        <see cref="T:System.Type" /> qui représente le programme d'installation pour le composant auquel cet attribut est lié. Cette classe doit implémenter <see cref="T:System.ComponentModel.Design.IDesigner" />.</param>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.Equals(System.Object)">
      <summary>Retourne une valeur indiquant si la valeur de l'objet donné est égale au <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> en cours.</summary>
      <param name="obj">Objet dont l'égalité des valeurs doit être vérifiée.</param>
      <returns>
        <see langword="true" /> si la valeur de l'objet donné est égale à celle de la valeur actuelle ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.GetHashCode">
      <summary>Retourne le code de hachage pour cet objet.</summary>
      <returns>Code de hachage du <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> actuel.</returns>
    </member>
    <member name="P:System.ComponentModel.InstallerTypeAttribute.InstallerType">
      <summary>Obtient le type de programme d'installation associé à cet attribut.</summary>
      <returns>
        <see cref="T:System.Type" /> qui représente le type de programme d'installation associé à cet attribut ou <see langword="null" /> si aucun installateur n'existe.</returns>
    </member>
    <member name="T:System.ComponentModel.InstanceCreationEditor">
      <summary>Crée une instance d'un type particulier de propriété à partir d'une liste déroulante dans <see cref="T:System.Windows.Forms.PropertyGrid" />.</summary>
    </member>
    <member name="M:System.ComponentModel.InstanceCreationEditor.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.InstanceCreationEditor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.InstanceCreationEditor.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>En cas de substitution dans une classe dérivée, retourne une instance du type spécifié.</summary>
      <param name="context">Informations de contexte.</param>
      <param name="instanceType">Type spécifié.</param>
      <returns>Instance du type spécifié ou <see langword="null" />.</returns>
    </member>
    <member name="P:System.ComponentModel.InstanceCreationEditor.Text">
      <summary>Obtient le texte spécifié.</summary>
      <returns>Le texte spécifié.</returns>
    </member>
    <member name="T:System.ComponentModel.Int16Converter">
      <summary>Fournit un convertisseur de type pour convertir des objets entiers signés 16 bits vers et à partir d’autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.Int16Converter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Int16Converter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Int32Converter">
      <summary>Fournit un convertisseur de type pour convertir des objets entiers signés 32 bits vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.Int32Converter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Int32Converter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Int64Converter">
      <summary>Fournit un convertisseur de type pour convertir des objets entiers signés 64 bits vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.Int64Converter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Int64Converter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.InvalidAsynchronousStateException">
      <summary>Levée lorsqu'un thread sur lequel une opération doit être exécutée n'existe plus ou n'a pas de boucle de messages.</summary>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" />.</summary>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> avec les <see cref="T:System.Runtime.Serialization.SerializationInfo" /> et <see cref="T:System.Runtime.Serialization.StreamingContext" /> donnés.</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> à utiliser pour la désérialisation.</param>
      <param name="context">Destination à utiliser pour la désérialisation.</param>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> avec la description détaillée spécifiée.</summary>
      <param name="message">Description détaillée de l'erreur.</param>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> avec la description détaillée spécifiée et l'exception spécifiée.</summary>
      <param name="message">Description détaillée de l'erreur.</param>
      <param name="innerException">Référence à l'exception interne à l'origine de cette exception.</param>
    </member>
    <member name="T:System.ComponentModel.IRaiseItemChangedEvents">
      <summary>Indique si une classe convertit des événements de modification de propriété en événements <see cref="E:System.ComponentModel.IBindingList.ListChanged" />.</summary>
    </member>
    <member name="P:System.ComponentModel.IRaiseItemChangedEvents.RaisesItemChangedEvents">
      <summary>Obtient une valeur indiquant si l'objet <see cref="T:System.ComponentModel.IRaiseItemChangedEvents" /> déclenche des événements <see cref="E:System.ComponentModel.IBindingList.ListChanged" />.</summary>
      <returns>
        <see langword="true" /> si l'objet <see cref="T:System.ComponentModel.IRaiseItemChangedEvents" /> déclenche des événements <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> lorsque l'une de ses valeurs de propriété change ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ISupportInitializeNotification">
      <summary>Permet la coordination d'initialisation pour un composant et ses propriétés dépendantes.</summary>
    </member>
    <member name="E:System.ComponentModel.ISupportInitializeNotification.Initialized">
      <summary>Se produit lorsque l'initialisation du composant est terminée.</summary>
    </member>
    <member name="P:System.ComponentModel.ISupportInitializeNotification.IsInitialized">
      <summary>Obtient une valeur indiquant si le composant est initialisé.</summary>
      <returns>
        <see langword="true" /> pour indiquer que le composant a terminé l’initialisation ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ITypeDescriptorContext">
      <summary>Fournit des informations contextuelles sur un composant telles que son conteneur et son descripteur de propriété.</summary>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Container">
      <summary>Obtient le conteneur représentant cette demande <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <returns>
        <see cref="T:System.ComponentModel.IContainer" /> avec le jeu d'objets pour ce <see cref="T:System.ComponentModel.TypeDescriptor" /> ; sinon, <see langword="null" /> s'il n'y a aucun conteneur ou si <see cref="T:System.ComponentModel.TypeDescriptor" /> n'utilise pas d'objets externes.</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Instance">
      <summary>Obtient l'objet qui est connecté avec cette demande de descripteur de type.</summary>
      <returns>Objet qui appelle la méthode sur <see cref="T:System.ComponentModel.TypeDescriptor" /> ; sinon, <see langword="null" /> s'il n'y a aucun objet responsable de l'appel.</returns>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanged">
      <summary>Déclenche l'événement <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanging">
      <summary>Déclenche l'événement <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" />.</summary>
      <returns>
        <see langword="true" /> si cet objet peut être modifié ; sinon <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor">
      <summary>Obtient <see cref="T:System.ComponentModel.PropertyDescriptor" /> qui est associé à l'élément de contexte donné.</summary>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> qui décrit l'élément de contexte donné ; sinon, <see langword="null" /> s'il n'y a aucun <see cref="T:System.ComponentModel.PropertyDescriptor" /> responsable de l'appel.</returns>
    </member>
    <member name="T:System.ComponentModel.ITypedList">
      <summary>Fournit des fonctionnalités permettant de découvrir le schéma d'une liste pouvant être liée, dans laquelle les propriétés disponibles pour la liaison diffèrent des propriétés publiques de l'objet vers lequel établir la liaison.</summary>
    </member>
    <member name="M:System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
      <summary>Retourne l’objet <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> qui représente les propriétés de chaque élément utilisé pour lier des données.</summary>
      <param name="listAccessors">Tableau d’objets <see cref="T:System.ComponentModel.PropertyDescriptor" /> pouvant être liés à rechercher dans la collection. Il peut s’agir de <see langword="null" />.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> qui représente les propriétés de chaque élément utilisé pour lier des données.</returns>
    </member>
    <member name="M:System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])">
      <summary>Retourne le nom de la liste.</summary>
      <param name="listAccessors">Tableau d'objets <see cref="T:System.ComponentModel.PropertyDescriptor" /> pour lequel le nom de la liste est retourné. Il peut s’agir de <see langword="null" />.</param>
      <returns>Nom de la liste.</returns>
    </member>
    <member name="T:System.ComponentModel.License">
      <summary>Fournit la classe de base <see langword="abstract" /> pour toutes les licences. Une licence est accordée à une instance spécifique d’un composant.</summary>
    </member>
    <member name="M:System.ComponentModel.License.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.License" />.</summary>
    </member>
    <member name="M:System.ComponentModel.License.Dispose">
      <summary>En cas de substitution dans une classe dérivée, supprime les ressources utilisées par la licence.</summary>
    </member>
    <member name="P:System.ComponentModel.License.LicenseKey">
      <summary>En cas de substitution dans une classe dérivée, obtient la clé de licence accordée à ce composant.</summary>
      <returns>Clé de licence accordée à ce composant.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseContext">
      <summary>Spécifie le moment où vous pouvez utiliser un objet sous licence et fournit un moyen d'obtenir des services supplémentaires nécessaires pour prendre en charge des licences s'exécutant dans son domaine.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.LicenseContext" />.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)">
      <summary>En cas de substitution dans une classe dérivée, retourne une clé de licence enregistrée pour le type spécifié, à partir de l'assembly de la ressource spécifié.</summary>
      <param name="type">
        <see cref="T:System.Type" /> représentant le type de composant.</param>
      <param name="resourceAssembly">
        <see cref="T:System.Reflection.Assembly" /> avec la clé de licence.</param>
      <returns>
        <see cref="P:System.ComponentModel.License.LicenseKey" /> du type spécifié. Cette méthode retourne <see langword="null" />, à moins que vous la substituiez.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.GetService(System.Type)">
      <summary>Obtient le service demandé, s'il est disponible.</summary>
      <param name="type">Type de service à récupérer.</param>
      <returns>Instance du service ou <see langword="null" /> si le service est introuvable.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.SetSavedLicenseKey(System.Type,System.String)">
      <summary>En cas de substitution dans une classe dérivée, définit une clé de licence pour le type spécifié.</summary>
      <param name="type">
        <see cref="T:System.Type" /> représentant le composant associé à la clé de licence.</param>
      <param name="key">
        <see cref="P:System.ComponentModel.License.LicenseKey" /> à enregistrer pour le type de composant.</param>
    </member>
    <member name="P:System.ComponentModel.LicenseContext.UsageMode">
      <summary>En cas de substitution dans une classe dérivée, obtient une valeur spécifiant le moment où vous pouvez utiliser une licence.</summary>
      <returns>Une des valeurs <see cref="T:System.ComponentModel.LicenseUsageMode" /> spécifiant le moment où vous pouvez utiliser une licence. La valeur par défaut est <see cref="F:System.ComponentModel.LicenseUsageMode.Runtime" />.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseException">
      <summary>Représente l'exception levée lorsqu'une licence ne peut pas être accordée à un composant.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.LicenseException" /> avec les <see cref="T:System.Runtime.Serialization.SerializationInfo" /> et <see cref="T:System.Runtime.Serialization.StreamingContext" /> donnés.</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> à utiliser pour la désérialisation.</param>
      <param name="context">Destination à utiliser pour la désérialisation.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.LicenseException" /> pour le type de composant auquel une licence a été refusée.</summary>
      <param name="type">
        <see cref="T:System.Type" /> représentant le type du composant qui n'a pas reçu de licence.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.LicenseException" /> pour le type et l'instance du composant auquel une licence a été refusée.</summary>
      <param name="type">
        <see cref="T:System.Type" /> représentant le type du composant qui n'a pas reçu de licence.</param>
      <param name="instance">Instance du composant qui n'a pas reçu de licence.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.LicenseException" /> pour le type et l'instance du composant auquel une licence a été refusée, ainsi qu'un message à afficher.</summary>
      <param name="type">
        <see cref="T:System.Type" /> représentant le type du composant qui n'a pas reçu de licence.</param>
      <param name="instance">Instance du composant qui n'a pas reçu de licence.</param>
      <param name="message">Message d'exception à afficher.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object,System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.LicenseException" /> pour le type et l'instance du composant auquel une licence a été refusée, ainsi qu'un message à afficher et l'exception d'origine levée.</summary>
      <param name="type">
        <see cref="T:System.Type" /> représentant le type du composant qui n'a pas reçu de licence.</param>
      <param name="instance">Instance du composant qui n'a pas reçu de licence.</param>
      <param name="message">Message d'exception à afficher.</param>
      <param name="innerException">
        <see cref="T:System.Exception" /> représentant l'exception d'origine.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Définit <see cref="T:System.Runtime.Serialization.SerializationInfo" /> avec des informations concernant l'exception.</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> à utiliser pour la désérialisation.</param>
      <param name="context">Destination à utiliser pour la désérialisation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> est <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.LicenseException.LicensedType">
      <summary>Obtient le type du composant qui n'a pas reçu de licence.</summary>
      <returns>
        <see cref="T:System.Type" /> représentant le type du composant qui n'a pas reçu de licence.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseManager">
      <summary>Fournit des propriétés et des méthodes permettant d’ajouter une licence à un composant et de gérer un <see cref="T:System.ComponentModel.LicenseProvider" />. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)">
      <summary>Crée une instance du type spécifié, en tenant compte d'un contexte dans lequel vous pouvez utiliser l'instance sous licence.</summary>
      <param name="type">
        <see cref="T:System.Type" /> représentant le type à créer.</param>
      <param name="creationContext">
        <see cref="T:System.ComponentModel.LicenseContext" /> spécifiant le moment où vous pouvez utiliser l'instance sous licence.</param>
      <returns>Instance du type spécifié.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])">
      <summary>Crée une instance du type spécifié avec les arguments donnés, en tenant compte d'un contexte dans lequel vous pouvez utiliser l'instance sous licence.</summary>
      <param name="type">
        <see cref="T:System.Type" /> représentant le type à créer.</param>
      <param name="creationContext">
        <see cref="T:System.ComponentModel.LicenseContext" /> spécifiant le moment où vous pouvez utiliser l'instance sous licence.</param>
      <param name="args">Tableau de type <see cref="T:System.Object" /> représentant les arguments pour le type.</param>
      <returns>Instance du type spécifié avec le tableau d'arguments donné.</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseManager.CurrentContext">
      <summary>Obtient ou définit le <see cref="T:System.ComponentModel.LicenseContext" /> en cours qui spécifie le moment où l'objet sous licence peut être utilisé.</summary>
      <returns>
        <see cref="T:System.ComponentModel.LicenseContext" /> spécifiant le moment où vous pouvez utiliser l'objet sous licence.</returns>
      <exception cref="T:System.InvalidOperationException">La propriété <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /> est actuellement verrouillée et ne peut pas être modifiée.</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsLicensed(System.Type)">
      <summary>Retourne une valeur indiquant si le type donné possède une licence valide.</summary>
      <param name="type">
        <see cref="T:System.Type" /> pour lequel rechercher une licence valide.</param>
      <returns>
        <see langword="true" /> si le type donné est sous licence ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsValid(System.Type)">
      <summary>Détermine si une licence valide peut être accordée pour le type spécifié.</summary>
      <param name="type">
        <see cref="T:System.Type" /> représentant le type d'objet qui demande <see cref="T:System.ComponentModel.License" />.</param>
      <returns>
        <see langword="true" /> si une licence valide peut être accordée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)">
      <summary>Détermine si une licence valide peut être accordée pour l'instance spécifiée du type. Cette méthode crée un <see cref="T:System.ComponentModel.License" /> valide.</summary>
      <param name="type">
        <see cref="T:System.Type" /> représentant le type d'objet qui demande la licence.</param>
      <param name="instance">Objet du type spécifié ou type dérivé du type spécifié.</param>
      <param name="license">
        <see cref="T:System.ComponentModel.License" /> qui est une licence valide ou <see langword="null" /> si une licence valide ne peut pas être accordée.</param>
      <returns>
        <see langword="true" /> si un <see cref="T:System.ComponentModel.License" /> valide peut être accordé ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.LockContext(System.Object)">
      <summary>Empêche toute modification du <see cref="T:System.ComponentModel.LicenseContext" /> en cours de l'objet donné.</summary>
      <param name="contextUser">Objet dont vous souhaitez verrouiller le contexte en cours.</param>
      <exception cref="T:System.InvalidOperationException">Le contexte est déjà verrouillé.</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.UnlockContext(System.Object)">
      <summary>Autorise l'apport de modifications au <see cref="T:System.ComponentModel.LicenseContext" /> en cours de l'objet donné.</summary>
      <param name="contextUser">Objet dont vous souhaitez déverrouiller le contexte en cours.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="contextUser" /> représente un utilisateur différent de celui spécifié dans un appel précédent à <see cref="M:System.ComponentModel.LicenseManager.LockContext(System.Object)" />.</exception>
    </member>
    <member name="P:System.ComponentModel.LicenseManager.UsageMode">
      <summary>Obtient le <see cref="T:System.ComponentModel.LicenseUsageMode" /> spécifiant le moment où vous pouvez utiliser l'objet sous licence pour <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" />.</summary>
      <returns>Une des valeurs <see cref="T:System.ComponentModel.LicenseUsageMode" />, comme spécifié dans la propriété <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.Validate(System.Type)">
      <summary>Détermine si une licence valide peut être accordée pour le type spécifié.</summary>
      <param name="type">
        <see cref="T:System.Type" /> représentant le type d'objet qui demande la licence.</param>
      <exception cref="T:System.ComponentModel.LicenseException">Aucun <see cref="T:System.ComponentModel.License" /> ne peut être accordé.</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)">
      <summary>Détermine si une licence peut être accordée pour l'instance du type spécifié.</summary>
      <param name="type">
        <see cref="T:System.Type" /> représentant le type d'objet qui demande la licence.</param>
      <param name="instance">
        <see cref="T:System.Object" /> du type spécifié ou type dérivé du type spécifié.</param>
      <returns>
        <see cref="T:System.ComponentModel.License" /> valide.</returns>
      <exception cref="T:System.ComponentModel.LicenseException">Le type est sous licence, mais aucun <see cref="T:System.ComponentModel.License" /> ne peut être accordé.</exception>
    </member>
    <member name="T:System.ComponentModel.LicenseProvider">
      <summary>Fournit la classe de base <see langword="abstract" /> pour implémenter un fournisseur de licences.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProvider.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.LicenseProvider" />.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
      <summary>En cas de substitution dans une classe dérivée, obtient une licence pour une instance ou un type de composant en fonction d'un contexte et une valeur indiquant si le refus d'une licence lève une exception.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.LicenseContext" /> spécifiant l'endroit où vous pouvez utiliser l'objet sous licence.</param>
      <param name="type">
        <see cref="T:System.Type" /> représentant le composant qui demande la licence.</param>
      <param name="instance">Objet qui demande la licence.</param>
      <param name="allowExceptions">
        <see langword="true" /> si <see cref="T:System.ComponentModel.LicenseException" /> doit être levé si aucune licence ne peut être accordée au composant ; sinon, <see langword="false" />.</param>
      <returns>
        <see cref="T:System.ComponentModel.License" /> valide.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseProviderAttribute">
      <summary>Spécifie <see cref="T:System.ComponentModel.LicenseProvider" /> à utiliser avec une classe. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> sans fournisseur de licences.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> à l'aide du type spécifié.</summary>
      <param name="typeName">Nom qualifié complet de la classe de fournisseur de licences.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor(System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> avec le type spécifié de fournisseur de licences.</summary>
      <param name="type">
        <see cref="T:System.Type" /> représentant le type de la classe de fournisseur de licences.</param>
    </member>
    <member name="F:System.ComponentModel.LicenseProviderAttribute.Default">
      <summary>Spécifie la valeur par défaut (aucun fournisseur). Ce champ <see langword="static" /> est en lecture seule.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.Equals(System.Object)">
      <summary>Indique si cette instance et un objet spécifié sont égaux.</summary>
      <param name="value">Autre objet de comparaison.</param>
      <returns>
        <see langword="true" /> si <paramref name="value" /> est égal à cette instance ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.GetHashCode">
      <summary>Retourne le code de hachage de cette instance.</summary>
      <returns>Code de hachage du <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> actuel.</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseProviderAttribute.LicenseProvider">
      <summary>Obtient le fournisseur de licences à utiliser avec la classe associée.</summary>
      <returns>
        <see cref="T:System.Type" /> représentant le type du fournisseur de licences. La valeur par défaut est <see langword="null" />.</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseProviderAttribute.TypeId">
      <summary>Indique un ID unique pour ce type d'attribut.</summary>
      <returns>ID unique pour ce type d'attribut.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseUsageMode">
      <summary>Spécifie le moment où <see cref="T:System.ComponentModel.License" /> peut être utilisé.</summary>
    </member>
    <member name="F:System.ComponentModel.LicenseUsageMode.Designtime">
      <summary>Utilisé au moment du design par un concepteur visuel ou par le compilateur.</summary>
    </member>
    <member name="F:System.ComponentModel.LicenseUsageMode.Runtime">
      <summary>Utilisé au moment de l'exécution.</summary>
    </member>
    <member name="T:System.ComponentModel.LicFileLicenseProvider">
      <summary>Fournit une implémentation d'un <see cref="T:System.ComponentModel.LicenseProvider" />. Le fournisseur fonctionne de la même manière que le modèle d'attribution de licence standard Microsoft .NET Framework.</summary>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.LicFileLicenseProvider" />.</summary>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.GetKey(System.Type)">
      <summary>Retourne une clé pour le type spécifié.</summary>
      <param name="type">Type d'objet dont la clé doit être retournée.</param>
      <returns>Confirme que le paramètre <paramref name="type" /> est sous licence.</returns>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
      <summary>Retourne une licence éventuelle pour l'instance du composant.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.LicenseContext" /> spécifiant l'endroit où vous pouvez utiliser l'objet sous licence.</param>
      <param name="type">
        <see cref="T:System.Type" /> représentant le composant qui demande le <see cref="T:System.ComponentModel.License" />.</param>
      <param name="instance">Objet qui demande le <see cref="T:System.ComponentModel.License" />.</param>
      <param name="allowExceptions">
        <see langword="true" /> si <see cref="T:System.ComponentModel.LicenseException" /> doit être levé si aucune licence ne peut être accordée à un composant ; sinon, <see langword="false" />.</param>
      <returns>
        <see cref="T:System.ComponentModel.License" /> valide. Si cette méthode ne parvient pas à trouver un <see cref="T:System.ComponentModel.License" /> valide ou un paramètre <paramref name="context" /> valide, elle retourne <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.IsKeyValid(System.String,System.Type)">
      <summary>Détermine si la clé récupérée par la méthode <see cref="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)" /> est valide pour le type spécifié.</summary>
      <param name="key">
        <see cref="P:System.ComponentModel.License.LicenseKey" /> à vérifier.</param>
      <param name="type">
        <see cref="T:System.Type" /> représentant le composant qui demande le <see cref="T:System.ComponentModel.License" />.</param>
      <returns>
        <see langword="true" /> si la clé est un <see cref="P:System.ComponentModel.License.LicenseKey" /> valide pour le type spécifié ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ListBindableAttribute">
      <summary>Spécifie qu'une liste peut être utilisée comme source de données. Un concepteur visuel doit utiliser cet attribut pour déterminer si une liste particulière doit s'afficher dans un sélecteur de liaison de données. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.#ctor(System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ListBindableAttribute" /> avec une valeur indiquant si la liste peut être liée.</summary>
      <param name="listBindable">
        <see langword="true" /> si la liste peut être liée ; sinon, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.#ctor(System.ComponentModel.BindableSupport)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ListBindableAttribute" /> avec <see cref="T:System.ComponentModel.BindableSupport" /> pour indiquer si la liste peut être liée.</summary>
      <param name="flags">
        <see cref="T:System.ComponentModel.BindableSupport" /> indiquant si la liste peut être liée.</param>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.Default">
      <summary>Représente la valeur par défaut de <see cref="T:System.ComponentModel.ListBindableAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.Equals(System.Object)">
      <summary>Indique si l'objet donné est égal à ce <see cref="T:System.ComponentModel.ListBindableAttribute" />.</summary>
      <param name="obj">Objet servant à vérifier l'égalité.</param>
      <returns>
        <see langword="true" /> si l'objet passé est égal à ce <see cref="T:System.ComponentModel.ListBindableAttribute" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.GetHashCode">
      <summary>Retourne le code de hachage de cette instance.</summary>
      <returns>Code de hachage du <see cref="T:System.ComponentModel.ListBindableAttribute" /> actuel.</returns>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.IsDefaultAttribute">
      <summary>Retourne une valeur indiquant si <see cref="P:System.ComponentModel.ListBindableAttribute.ListBindable" /> possède la valeur par défaut.</summary>
      <returns>
        <see langword="true" /> si <see cref="P:System.ComponentModel.ListBindableAttribute.ListBindable" /> possède la valeur par défaut ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ListBindableAttribute.ListBindable">
      <summary>Obtient une valeur indiquant si la liste peut être liée.</summary>
      <returns>
        <see langword="true" /> si la liste peut être liée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.No">
      <summary>Spécifie que la liste ne peut pas être liée. Ce champ <see langword="static" /> est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.Yes">
      <summary>Spécifie que la liste peut être liée. Ce champ <see langword="static" /> est en lecture seule.</summary>
    </member>
    <member name="T:System.ComponentModel.ListChangedEventArgs">
      <summary>Fournit des données pour l'événement <see cref="E:System.ComponentModel.IBindingList.ListChanged" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.ComponentModel.PropertyDescriptor)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ListChangedEventArgs" /> en fonction du type de modification et du <see cref="T:System.ComponentModel.PropertyDescriptor" /> affecté.</summary>
      <param name="listChangedType">Valeur <see cref="T:System.ComponentModel.ListChangedType" /> qui indique le type de modification.</param>
      <param name="propDesc">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> ayant été ajouté, supprimé ou modifié.</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ListChangedEventArgs" /> en fonction du type de modification et de l'index de l'élément affecté.</summary>
      <param name="listChangedType">Valeur <see cref="T:System.ComponentModel.ListChangedType" /> qui indique le type de modification.</param>
      <param name="newIndex">Index de l'élément qui a été ajouté, modifié ou supprimé.</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32,System.ComponentModel.PropertyDescriptor)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ListChangedEventArgs" /> en fonction du type de modification, l'index de l'élément affecté et un <see cref="T:System.ComponentModel.PropertyDescriptor" /> qui décrit l'élément affecté.</summary>
      <param name="listChangedType">Valeur <see cref="T:System.ComponentModel.ListChangedType" /> qui indique le type de modification.</param>
      <param name="newIndex">Index de l'élément qui a été ajouté ou modifié.</param>
      <param name="propDesc">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> qui décrit l'élément.</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32,System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ListChangedEventArgs" /> en fonction du type de modification et de l'ancien et du nouvel index de l'élément qui a été déplacé.</summary>
      <param name="listChangedType">Valeur <see cref="T:System.ComponentModel.ListChangedType" /> qui indique le type de modification.</param>
      <param name="newIndex">Nouvel index de l'élément ayant été déplacé.</param>
      <param name="oldIndex">Ancien index de l'élément ayant été déplacé.</param>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.ListChangedType">
      <summary>Obtient le type de modification.</summary>
      <returns>Valeur <see cref="T:System.ComponentModel.ListChangedType" /> qui indique le type de modification.</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.NewIndex">
      <summary>Obtient l'index de l'élément affecté par la modification.</summary>
      <returns>Index de l'élément affecté par la modification.</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.OldIndex">
      <summary>Obtient l'ancien index d'un élément qui a été déplacé.</summary>
      <returns>Ancien index de l'élément déplacé.</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.PropertyDescriptor">
      <summary>Obtient le <see cref="T:System.ComponentModel.PropertyDescriptor" /> qui a été ajouté, modifié ou supprimé.</summary>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> affecté par la modification.</returns>
    </member>
    <member name="T:System.ComponentModel.ListChangedEventHandler">
      <summary>Représente la méthode qui gère l’événement <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> de la classe <see cref="T:System.ComponentModel.IBindingList" />.</summary>
      <param name="sender">Source de l'événement.</param>
      <param name="e">
        <see cref="T:System.ComponentModel.ListChangedEventArgs" /> qui contient les données d'événement.</param>
    </member>
    <member name="T:System.ComponentModel.ListChangedType">
      <summary>Spécifie la façon dont la liste a été modifiée.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemAdded">
      <summary>Élément ajouté à la liste. <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> contient l'index de l'élément qui a été ajouté.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemChanged">
      <summary>Élément modifié dans la liste. <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> contient l'index de l'élément qui a été modifié.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemDeleted">
      <summary>Élément supprimé dans la liste. <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> contient l'index de l'élément qui a été supprimé.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemMoved">
      <summary>Élément déplacé dans la liste. <see cref="P:System.ComponentModel.ListChangedEventArgs.OldIndex" /> contient l'ancien index de l'élément, alors que <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> contient le nouvel index de l'élément.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorAdded">
      <summary>Un <see cref="T:System.ComponentModel.PropertyDescriptor" /> a été ajouté, ce qui a entraîné une modification du schéma.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorChanged">
      <summary>Un <see cref="T:System.ComponentModel.PropertyDescriptor" /> a été modifié, ce qui a entraîné une modification du schéma.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorDeleted">
      <summary>Un <see cref="T:System.ComponentModel.PropertyDescriptor" /> a été supprimé, ce qui a entraîné une modification du schéma.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.Reset">
      <summary>Une grande partie de la liste a été modifiée. Les contrôles éventuellement à l'écoute doivent actualiser toutes leurs données à partir de la liste.</summary>
    </member>
    <member name="T:System.ComponentModel.ListSortDescription">
      <summary>Fournit une description de l'opération de tri appliquée à une source de données.</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescription.#ctor(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ListSortDescription" /> avec la direction et la description de propriété spécifiées.</summary>
      <param name="property">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> qui décrit la propriété par laquelle la source de données est triée.</param>
      <param name="direction">Une des valeurs de <see cref="T:System.ComponentModel.ListSortDescription" />.</param>
    </member>
    <member name="P:System.ComponentModel.ListSortDescription.PropertyDescriptor">
      <summary>Obtient ou définit la description abstraite d'une propriété de classe associée à ce <see cref="T:System.ComponentModel.ListSortDescription" /></summary>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> associé à ce <see cref="T:System.ComponentModel.ListSortDescription" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescription.SortDirection">
      <summary>Obtient ou définit la direction de l'opération de tri associée à ce <see cref="T:System.ComponentModel.ListSortDescription" />.</summary>
      <returns>Une des valeurs de <see cref="T:System.ComponentModel.ListSortDirection" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ListSortDescriptionCollection">
      <summary>Représente une collection d'objets <see cref="T:System.ComponentModel.ListSortDescription" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.#ctor(System.ComponentModel.ListSortDescription[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> avec le tableau spécifié d'objets <see cref="T:System.ComponentModel.ListSortDescription" />.</summary>
      <param name="sorts">Tableau d'objets <see cref="T:System.ComponentModel.ListSortDescription" /> que doit contenir la collection.</param>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.Contains(System.Object)">
      <summary>Détermine si <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> contient une valeur spécifique.</summary>
      <param name="value">
        <see cref="T:System.Object" /> à rechercher dans la collection.</param>
      <returns>
        <see langword="true" /> si <see cref="T:System.Object" /> se trouve dans la collection ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.CopyTo(System.Array,System.Int32)">
      <summary>Copie le contenu de la collection dans le tableau spécifié en commençant au niveau de l'index du tableau de destination spécifié.</summary>
      <param name="array">Tableau de destination pour les éléments copiés de la collection.</param>
      <param name="index">Index du tableau de destination à partir duquel commencer la copie.</param>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.Count">
      <summary>Obtient le nombre d’éléments de la collection.</summary>
      <returns>Nombre d’éléments dans la collection</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.IndexOf(System.Object)">
      <summary>Retourne l'index de l'élément spécifié dans la collection.</summary>
      <param name="value">
        <see cref="T:System.Object" /> à rechercher dans la collection.</param>
      <returns>Index de <paramref name="value" /> s'il figure dans la liste ; sinon, -1.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.Item(System.Int32)">
      <summary>Obtient ou définit le <see cref="T:System.ComponentModel.ListSortDescription" /> spécifié.</summary>
      <param name="index">Index de base zéro de <see cref="T:System.ComponentModel.ListSortDescription" /> à obtenir ou à définir dans la collection.</param>
      <returns>
        <see cref="T:System.ComponentModel.ListSortDescription" /> avec l'index spécifié.</returns>
      <exception cref="T:System.InvalidOperationException">Un élément est défini dans <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />, qui est en lecture seule.</exception>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Obtient une valeur indiquant si l'accès à la collection est thread-safe.</summary>
      <returns>
        <see langword="true" /> dans tous les cas.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#ICollection#SyncRoot">
      <summary>Obtient l'instance actuelle qui peut être utilisée pour synchroniser l'accès à la collection.</summary>
      <returns>Instance actuelle de <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Obtient <see cref="T:System.Collections.IEnumerator" /> pouvant être utilisé pour itérer au sein de la collection.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> qui peut être utilisé pour itérer au sein de la collection.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Add(System.Object)">
      <summary>Ajoute un élément à la collection.</summary>
      <param name="value">Élément à ajouter à la collection.</param>
      <returns>Position à laquelle le nouvel élément est inséré.</returns>
      <exception cref="T:System.InvalidOperationException">Dans tous les cas.</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Clear">
      <summary>Supprime tous les éléments de la collection.</summary>
      <exception cref="T:System.InvalidOperationException">Dans tous les cas.</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Insère un élément dans la collection à un index spécifié.</summary>
      <param name="index">Index de base zéro de <see cref="T:System.ComponentModel.ListSortDescription" /> à obtenir ou à définir dans la collection</param>
      <param name="value">Élément à insérer dans la collection.</param>
      <exception cref="T:System.InvalidOperationException">Dans tous les cas.</exception>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#IsFixedSize">
      <summary>Obtient une valeur indiquant si la collection est de taille fixe.</summary>
      <returns>
        <see langword="true" /> dans tous les cas.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#IsReadOnly">
      <summary>Obtient une valeur indiquant si la collection est en lecture seule.</summary>
      <returns>
        <see langword="true" /> dans tous les cas.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Item(System.Int32)">
      <summary>Obtient la <see cref="T:System.ComponentModel.ListSortDescription" /> spécifiée.</summary>
      <param name="index">Index de base zéro de <see cref="T:System.ComponentModel.ListSortDescription" /> à obtenir dans la collection.</param>
      <returns>
        <see cref="T:System.ComponentModel.ListSortDescription" /> avec l'index spécifié.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Remove(System.Object)">
      <summary>Supprime la première occurrence d'un élément dans la collection.</summary>
      <param name="value">Élément à supprimer de la collection.</param>
      <exception cref="T:System.InvalidOperationException">Dans tous les cas.</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Supprime un élément de la collection au niveau de l'index spécifié.</summary>
      <param name="index">Index de base zéro du <see cref="T:System.ComponentModel.ListSortDescription" /> à supprimer de la collection</param>
      <exception cref="T:System.InvalidOperationException">Dans tous les cas.</exception>
    </member>
    <member name="T:System.ComponentModel.ListSortDirection">
      <summary>Spécifie le sens d'une opération de tri.</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Ascending">
      <summary>Trie dans l'ordre croissant.</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Descending">
      <summary>Trie dans l'ordre décroissant.</summary>
    </member>
    <member name="T:System.ComponentModel.LookupBindingPropertiesAttribute">
      <summary>Spécifie les propriétés qui prennent en charge la liaison basée sur la recherche. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> sans paramètre.</summary>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.#ctor(System.String,System.String,System.String,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</summary>
      <param name="dataSource">Nom de la propriété à utiliser comme source de données.</param>
      <param name="displayMember">Nom de la propriété à utiliser pour le nom complet.</param>
      <param name="valueMember">Nom de la propriété à utiliser comme source pour les valeurs.</param>
      <param name="lookupMember">Nom de la propriété à utiliser pour les recherches.</param>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.DataSource">
      <summary>Obtient le nom de la propriété de source de données pour le composant auquel <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> est lié.</summary>
      <returns>Propriété de source de données pour le composant auquel <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> est lié.</returns>
    </member>
    <member name="F:System.ComponentModel.LookupBindingPropertiesAttribute.Default">
      <summary>Représente la valeur par défaut de la classe <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</summary>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.DisplayMember">
      <summary>Obtient le nom de la propriété de membre d'affichage pour le composant auquel <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> est lié.</summary>
      <returns>Nom de la propriété de membre d'affichage pour le composant auquel <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> est lié.</returns>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.Equals(System.Object)">
      <summary>Détermine si le <see cref="T:System.Object" /> spécifié est égal à l'instance <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> en cours.</summary>
      <param name="obj">
        <see cref="T:System.Object" /> à comparer à l'instance <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> en cours.</param>
      <returns>
        <see langword="true" /> si l'objet est égal à l'instance actuelle ; sinon, <see langword="false" /> qui indique qu'ils ne sont pas égaux.</returns>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.GetHashCode">
      <summary>Retourne le code de hachage de cette instance.</summary>
      <returns>Code de hachage du <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> actuel.</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.LookupMember">
      <summary>Obtient le nom du membre de recherche pour le composant auquel cet attribut est lié.</summary>
      <returns>Nom du membre de recherche pour le composant auquel <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> est lié.</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.ValueMember">
      <summary>Obtient le nom de la propriété de membre de valeur pour le composant auquel <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> est lié.</summary>
      <returns>Nom de la propriété de membre de valeur pour le composant auquel <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> est lié.</returns>
    </member>
    <member name="T:System.ComponentModel.MarshalByValueComponent">
      <summary>Implémente <see cref="T:System.ComponentModel.IComponent" /> et fournit l'implémentation de base pour les composants distants, marshalés par valeur (une copie de l'objet sérialisé est passée).</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.MarshalByValueComponent" />.</summary>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Container">
      <summary>Obtient le conteneur du composant.</summary>
      <returns>Objet implémentant l'interface <see cref="T:System.ComponentModel.IContainer" /> qui représente le conteneur du composant, ou <see langword="null" /> si le composant ne possède pas de site.</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.DesignMode">
      <summary>Obtient une valeur indiquant si le composant est actuellement en mode design.</summary>
      <returns>
        <see langword="true" /> si le composant est en mode design ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Dispose">
      <summary>Libère toutes les ressources utilisées par <see cref="T:System.ComponentModel.MarshalByValueComponent" />.</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Dispose(System.Boolean)">
      <summary>Libère les ressources non managées utilisées par <see cref="T:System.ComponentModel.MarshalByValueComponent" /> et libère éventuellement les ressources managées.</summary>
      <param name="disposing">
        <see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour ne libérer que les ressources non managées.</param>
    </member>
    <member name="E:System.ComponentModel.MarshalByValueComponent.Disposed">
      <summary>Ajoute un gestionnaire d'événements qui doit écouter l'événement <see cref="E:System.ComponentModel.MarshalByValueComponent.Disposed" /> pour le composant.</summary>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Events">
      <summary>Obtient la liste des gestionnaires d'événements attachés à ce composant.</summary>
      <returns>
        <see cref="T:System.ComponentModel.EventHandlerList" /> qui fournit les délégués de ce composant.</returns>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Finalize">
      <summary>Autorise un objet à tenter de libérer des ressources et à exécuter d'autres opérations de nettoyage avant qu'il ne soit récupéré par une opération garbage collection.</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.GetService(System.Type)">
      <summary>Obtient l'implémenteur du <see cref="T:System.IServiceProvider" />.</summary>
      <param name="service">
        <see cref="T:System.Type" /> représentant le type de service souhaité.</param>
      <returns>
        <see cref="T:System.Object" /> représentant l'implémenteur du <see cref="T:System.IServiceProvider" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Site">
      <summary>Obtient ou définit le site du composant.</summary>
      <returns>Objet implémentant l'interface <see cref="T:System.ComponentModel.ISite" /> qui représente le site du composant.</returns>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.ToString">
      <summary>Retourne un <see cref="T:System.String" /> contenant le nom du <see cref="T:System.ComponentModel.Component" />, s’il en existe un. Cette méthode ne doit pas être remplacée.</summary>
      <returns>
        <see cref="T:System.String" /> contenant le nom du <see cref="T:System.ComponentModel.Component" />, s'il existe.
<see langword="null" /> si <see cref="T:System.ComponentModel.Component" /> est sans nom.</returns>
    </member>
    <member name="T:System.ComponentModel.MaskedTextProvider">
      <summary>Représente un service d'analyse de masque qui peut être utilisé par n'importe quel nombre de contrôles qui prennent en charge le masquage tel que le contrôle <see cref="T:System.Windows.Forms.MaskedTextBox" />.</summary>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.MaskedTextProvider" /> à l'aide du masque spécifié.</summary>
      <param name="mask">
        <see cref="T:System.String" /> qui représente le masque de saisie.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.MaskedTextProvider" /> à l'aide de la valeur de restriction ASCII et du masque spécifié.</summary>
      <param name="mask">
        <see cref="T:System.String" /> qui représente le masque de saisie.</param>
      <param name="restrictToAscii">
        <see langword="true" /> pour restreindre les entrées aux caractères compatibles ASCII ; sinon, <see langword="false" /> pour autoriser le jeu Unicode complet.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Char,System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.MaskedTextProvider" /> à l'aide du masque spécifié, du caractère de mot de passe, et de la valeur d'utilisation de l'invite.</summary>
      <param name="mask">
        <see cref="T:System.String" /> qui représente le masque de saisie.</param>
      <param name="passwordChar">
        <see cref="T:System.Char" /> qui sera affiché pour les caractères entrés dans une chaîne de mot de passe.</param>
      <param name="allowPromptAsInput">
        <see langword="true" /> pour autoriser le caractère d'invite comme entrée ; sinon, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.MaskedTextProvider" /> à l'aide du masque et de la culture spécifiés.</summary>
      <param name="mask">
        <see cref="T:System.String" /> qui représente le masque de saisie.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> qui est utilisé pour définir des caractères de séparation sensibles à la région.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.MaskedTextProvider" /> à l'aide de la valeur de restriction ASCII, du masque et de la culture spécifiés.</summary>
      <param name="mask">
        <see cref="T:System.String" /> qui représente le masque de saisie.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> qui est utilisé pour définir des caractères de séparation sensibles à la région.</param>
      <param name="restrictToAscii">
        <see langword="true" /> pour restreindre les entrées aux caractères compatibles ASCII ; sinon, <see langword="false" /> pour autoriser le jeu Unicode complet.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean,System.Char,System.Char,System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.MaskedTextProvider" /> à l'aide du masque, de la culture, de la valeur d'utilisation de l'invite, du caractère d'invite, du caractère de mot de passe et de la valeur de restriction ASCII spécifiés.</summary>
      <param name="mask">
        <see cref="T:System.String" /> qui représente le masque de saisie.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> qui est utilisé pour définir des caractères de séparation sensibles à la région.</param>
      <param name="allowPromptAsInput">Valeur <see cref="T:System.Boolean" /> qui spécifie si le caractère d'invite peut être autorisé en tant que caractère d'entrée valide.</param>
      <param name="promptChar">
        <see cref="T:System.Char" /> qui sera affiché comme un espace réservé pour l'entrée d'utilisateur.</param>
      <param name="passwordChar">
        <see cref="T:System.Char" /> qui sera affiché pour les caractères entrés dans une chaîne de mot de passe.</param>
      <param name="restrictToAscii">
        <see langword="true" /> pour restreindre les entrées aux caractères compatibles ASCII ; sinon, <see langword="false" /> pour autoriser le jeu Unicode complet.</param>
      <exception cref="T:System.ArgumentException">Le paramètre de masque est <see langword="null" /> ou <see cref="F:System.String.Empty" />.

ou -
Le masque contient un ou plusieurs caractères non imprimables.</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Char,System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.MaskedTextProvider" /> à l'aide du masque, de la culture, du caractère de mot de passe, et de la valeur d'utilisation de l'invite spécifiés.</summary>
      <param name="mask">
        <see cref="T:System.String" /> qui représente le masque de saisie.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> qui est utilisé pour définir des caractères de séparation sensibles à la région.</param>
      <param name="passwordChar">
        <see cref="T:System.Char" /> qui sera affiché pour les caractères entrés dans une chaîne de mot de passe.</param>
      <param name="allowPromptAsInput">
        <see langword="true" /> pour autoriser le caractère d'invite comme entrée ; sinon, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.Char)">
      <summary>Ajoute le caractère d'entrée spécifié à la fin de la chaîne mise en forme.</summary>
      <param name="input">Une valeur <see cref="T:System.Char" /> à ajouter à la chaîne mise en forme.</param>
      <returns>
        <see langword="true" /> si le caractère d'entrée a été correctement ajouté ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.Char,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Ajoute le caractère d'entrée spécifié à la fin de la chaîne mise en forme, puis génère les informations descriptives et de position.</summary>
      <param name="input">Une valeur <see cref="T:System.Char" /> à ajouter à la chaîne mise en forme.</param>
      <param name="testPosition">Position de base zéro dans la chaîne mise en forme et ayant fait l'objet d'une tentative d'ajout du caractère. Paramètre de sortie.</param>
      <param name="resultHint">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" /> qui décrit succinctement le résultat de l'opération. Paramètre de sortie.</param>
      <returns>
        <see langword="true" /> si le caractère d'entrée a été correctement ajouté ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.String)">
      <summary>Ajoute les caractères dans la chaîne d'entrée spécifiée à la fin de la chaîne mise en forme.</summary>
      <param name="input">
        <see cref="T:System.String" /> qui contient des valeurs de caractère à ajouter à la chaîne mise en forme.</param>
      <returns>
        <see langword="true" /> si tous les caractères de la chaîne d'entrée ont été correctement ajoutés ; sinon, <see langword="false" /> pour indiquer qu'aucun caractère n'a été ajouté.</returns>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="input" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Ajoute les caractères dans la chaîne d'entrée spécifiée à la fin de la chaîne mise en forme, puis génère les informations descriptives et de position.</summary>
      <param name="input">
        <see cref="T:System.String" /> qui contient des valeurs de caractère à ajouter à la chaîne mise en forme.</param>
      <param name="testPosition">Position de base zéro dans la chaîne mise en forme et ayant fait l'objet d'une tentative d'ajout du caractère. Paramètre de sortie.</param>
      <param name="resultHint">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" /> qui décrit succinctement le résultat de l'opération. Paramètre de sortie.</param>
      <returns>
        <see langword="true" /> si tous les caractères de la chaîne d'entrée ont été correctement ajoutés ; sinon, <see langword="false" /> pour indiquer qu'aucun caractère n'a été ajouté.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput">
      <summary>Obtient une valeur qui indique si le caractère d'invite doit être traité comme un caractère d'entrée valide ou pas.</summary>
      <returns>
        <see langword="true" /> si l'utilisateur peut entrer <see cref="P:System.ComponentModel.MaskedTextProvider.PromptChar" /> dans le contrôle ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AsciiOnly">
      <summary>Obtient une valeur qui indique si le masque accepte des caractères en dehors du jeu de caractères ASCII.</summary>
      <returns>
        <see langword="true" /> uniquement si ASCII est accepté ; <see langword="false" /> si <see cref="T:System.ComponentModel.MaskedTextProvider" /> peut accepter tout caractère Unicode arbitraire. La valeur par défaut est <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AssignedEditPositionCount">
      <summary>Obtient le nombre de positions de caractère modifiables auxquelles une valeur d'entrée a déjà été correctement assignée.</summary>
      <returns>
        <see cref="T:System.Int32" /> qui contient le nombre de positions de caractère modifiables dans le masque de saisie auxquelles a déjà été assignée une valeur de caractère dans la chaîne mise en forme.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AvailableEditPositionCount">
      <summary>Obtient le nombre de positions de caractère modifiables dans le masque de saisie auxquelles aucune valeur d'entrée n'a encore été assignée.</summary>
      <returns>
        <see cref="T:System.Int32" /> qui contient le nombre de positions de caractère modifiables auxquelles aucune valeur n'a encore été assignée.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clear">
      <summary>Efface tous les caractères d'entrée modifiables de la chaîne mise en forme en les remplaçant par des caractères d'invite.</summary>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clear(System.ComponentModel.MaskedTextResultHint@)">
      <summary>Efface tous les caractères d'entrée modifiables de la chaîne mise en forme en les remplaçant par des caractères d'invite, puis génère les informations descriptives.</summary>
      <param name="resultHint">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" /> qui décrit succinctement le résultat de l'opération. Paramètre de sortie.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clone">
      <summary>Crée une copie de l'élément <see cref="T:System.ComponentModel.MaskedTextProvider" /> actuel.</summary>
      <returns>Objet <see cref="T:System.ComponentModel.MaskedTextProvider" /> créé par cette méthode, casté en objet.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Culture">
      <summary>Obtient la culture qui détermine la valeur des séparateurs localisables et des espaces réservés dans le masque de saisie.</summary>
      <returns>
        <see cref="T:System.Globalization.CultureInfo" /> qui contient les informations de culture associées au masque de saisie.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.DefaultPasswordChar">
      <summary>Obtient le caractère de mot de passe par défaut utilisé pour masquer l'entrée d'utilisateur.</summary>
      <returns>
        <see cref="T:System.Char" /> qui représente le caractère de mot de passe par défaut.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.EditPositionCount">
      <summary>Obtient le nombre de positions modifiables dans la chaîne mise en forme.</summary>
      <returns>
        <see cref="T:System.Int32" /> qui contient le nombre de positions modifiables dans la chaîne mise en forme.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.EditPositions">
      <summary>Obtient un énumérateur créé récemment pour les positions modifiables dans la chaîne mise en forme.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> qui prend en charge l'énumération sur les positions modifiables dans la chaîne mise en forme.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionFrom(System.Int32,System.Boolean)">
      <summary>Retourne la position de la première position modifiable assignée après la position spécifiée à l'aide du sens de la recherche spécifié.</summary>
      <param name="position">Position de base zéro dans la chaîne mise en forme pour démarrer la recherche.</param>
      <param name="direction">
        <see cref="T:System.Boolean" /> qui indique le sens de la recherche ; <see langword="true" /> pour rechercher vers le bas ou <see langword="false" /> pour rechercher vers le haut.</param>
      <returns>En cas de réussite, <see cref="T:System.Int32" /> qui représente la position de base zéro de la première position modifiable assignée rencontrée ; sinon, <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary>Retourne la position de la première position modifiable assignée entre les positions spécifiées à l'aide du sens de la recherche spécifié.</summary>
      <param name="startPosition">Position de base zéro dans la chaîne mise en forme où la recherche démarre.</param>
      <param name="endPosition">Position de base zéro dans la chaîne mise en forme où la recherche se termine.</param>
      <param name="direction">
        <see cref="T:System.Boolean" /> qui indique le sens de la recherche ; <see langword="true" /> pour rechercher vers le bas ou <see langword="false" /> pour rechercher vers le haut.</param>
      <returns>En cas de réussite, <see cref="T:System.Int32" /> qui représente la position de base zéro de la première position modifiable assignée rencontrée ; sinon, <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindEditPositionFrom(System.Int32,System.Boolean)">
      <summary>Retourne la position de la première position modifiable après la position spécifiée à l'aide du sens de la recherche spécifié.</summary>
      <param name="position">Position de base zéro dans la chaîne mise en forme pour démarrer la recherche.</param>
      <param name="direction">
        <see cref="T:System.Boolean" /> qui indique le sens de la recherche ; <see langword="true" /> pour rechercher vers le bas ou <see langword="false" /> pour rechercher vers le haut.</param>
      <returns>En cas de réussite, <see cref="T:System.Int32" /> qui représente la position de base zéro de la première position modifiable rencontrée ; sinon, <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary>Retourne la position de la première position modifiable entre les positions spécifiées à l'aide du sens de la recherche spécifié.</summary>
      <param name="startPosition">Position de base zéro dans la chaîne mise en forme où la recherche démarre.</param>
      <param name="endPosition">Position de base zéro dans la chaîne mise en forme où la recherche se termine.</param>
      <param name="direction">
        <see cref="T:System.Boolean" /> qui indique le sens de la recherche ; <see langword="true" /> pour rechercher vers le bas ou <see langword="false" /> pour rechercher vers le haut.</param>
      <returns>En cas de réussite, <see cref="T:System.Int32" /> qui représente la position de base zéro de la première position modifiable rencontrée ; sinon, <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionFrom(System.Int32,System.Boolean)">
      <summary>Retourne la position de la première position non modifiable après la position spécifiée à l'aide du sens de la recherche spécifié.</summary>
      <param name="position">Position de base zéro dans la chaîne mise en forme pour démarrer la recherche.</param>
      <param name="direction">
        <see cref="T:System.Boolean" /> qui indique le sens de la recherche ; <see langword="true" /> pour rechercher vers le bas ou <see langword="false" /> pour rechercher vers le haut.</param>
      <returns>En cas de réussite, <see cref="T:System.Int32" /> qui représente la position de base zéro de la première position littérale rencontrée ; sinon, <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary>Retourne la position de la première position non modifiable entre les positions spécifiées à l'aide du sens de la recherche spécifié.</summary>
      <param name="startPosition">Position de base zéro dans la chaîne mise en forme où la recherche démarre.</param>
      <param name="endPosition">Position de base zéro dans la chaîne mise en forme où la recherche se termine.</param>
      <param name="direction">
        <see cref="T:System.Boolean" /> qui indique le sens de la recherche ; <see langword="true" /> pour rechercher vers le bas ou <see langword="false" /> pour rechercher vers le haut.</param>
      <returns>En cas de réussite, <see cref="T:System.Int32" /> qui représente la position de base zéro de la première position littérale rencontrée ; sinon, <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionFrom(System.Int32,System.Boolean)">
      <summary>Retourne la position de la première position modifiable non assignée après la position spécifiée à l'aide du sens de la recherche spécifié.</summary>
      <param name="position">Position de base zéro dans la chaîne mise en forme pour démarrer la recherche.</param>
      <param name="direction">
        <see cref="T:System.Boolean" /> qui indique le sens de la recherche ; <see langword="true" /> pour rechercher vers le bas ou <see langword="false" /> pour rechercher vers le haut.</param>
      <returns>En cas de réussite, <see cref="T:System.Int32" /> qui représente la position de base zéro de la première position modifiable non assignée rencontrée ; sinon, <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary>Retourne la position de la première position modifiable non assignée entre les positions spécifiées à l'aide du sens de la recherche spécifié.</summary>
      <param name="startPosition">Position de base zéro dans la chaîne mise en forme où la recherche démarre.</param>
      <param name="endPosition">Position de base zéro dans la chaîne mise en forme où la recherche se termine.</param>
      <param name="direction">
        <see cref="T:System.Boolean" /> qui indique le sens de la recherche ; <see langword="true" /> pour rechercher vers le bas ou <see langword="false" /> pour rechercher vers le haut.</param>
      <returns>En cas de réussite, <see cref="T:System.Int32" /> qui représente la position de base zéro de la première position modifiable non assignée rencontrée ; sinon, <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.GetOperationResultFromHint(System.ComponentModel.MaskedTextResultHint)">
      <summary>Détermine si le <see cref="T:System.ComponentModel.MaskedTextResultHint" /> spécifié dénote un succès ou un échec.</summary>
      <param name="hint">Valeur <see cref="T:System.ComponentModel.MaskedTextResultHint" /> obtenue en général comme paramètre de sortie d'une opération antérieure.</param>
      <returns>
        <see langword="true" /> si la valeur <see cref="T:System.ComponentModel.MaskedTextResultHint" /> spécifiée représente un succès ; sinon, <see langword="false" /> si elle représente un échec.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IncludeLiterals">
      <summary>Obtient ou définit une valeur qui indique si les caractères littéraux dans le masque de saisie doivent être inclus dans la chaîne mise en forme.</summary>
      <returns>
        <see langword="true" /> si des littéraux sont inclus ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IncludePrompt">
      <summary>Obtient ou définit une valeur qui indique si <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" /> est utilisé pour représenter l'absence d'entrée d'utilisateur lors de l'affichage de la chaîne mise en forme.</summary>
      <returns>
        <see langword="true" /> si le caractère d'invite est utilisé pour représenter les positions où aucune entrée d'utilisateur n'a été fournie ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32)">
      <summary>Insère le caractère spécifié à la position spécifiée dans la chaîne mise en forme.</summary>
      <param name="input">
        <see cref="T:System.Char" /> à insérer.</param>
      <param name="position">Position de base zéro dans la chaîne mise en forme pour insérer le caractère.</param>
      <returns>
        <see langword="true" /> si l'insertion aboutit ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Insère le caractère spécifié à la position spécifiée dans la chaîne mise en forme et retourne la dernière position d'insertion et l'état de l'opération.</summary>
      <param name="input">
        <see cref="T:System.Char" /> à insérer.</param>
      <param name="position">Position de base zéro dans la chaîne mise en forme pour insérer le caractère.</param>
      <param name="testPosition">Si la méthode aboutit, la dernière position où un caractère a été inséré ; sinon, la première position où l'insertion a échoué. Paramètre de sortie.</param>
      <param name="resultHint">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" /> qui décrit succinctement le résultat de l'opération d'insertion. Paramètre de sortie.</param>
      <returns>
        <see langword="true" /> si l'insertion aboutit ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32)">
      <summary>Insère la chaîne spécifiée à une position spécifiée dans la chaîne mise en forme.</summary>
      <param name="input">
        <see cref="T:System.String" /> à insérer.</param>
      <param name="position">Position de base zéro dans la chaîne mise en forme pour insérer la chaîne d'entrée.</param>
      <returns>
        <see langword="true" /> si l'insertion aboutit ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="input" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Insère la chaîne spécifiée à une position spécifiée dans la chaîne mise en forme et retourne la dernière position d'insertion et l'état de l'opération.</summary>
      <param name="input">
        <see cref="T:System.String" /> à insérer.</param>
      <param name="position">Position de base zéro dans la chaîne mise en forme pour insérer la chaîne d'entrée.</param>
      <param name="testPosition">Si la méthode aboutit, la dernière position où un caractère a été inséré ; sinon, la première position où l'insertion a échoué. Paramètre de sortie.</param>
      <param name="resultHint">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" /> qui décrit succinctement le résultat de l'opération d'insertion. Paramètre de sortie.</param>
      <returns>
        <see langword="true" /> si l'insertion aboutit ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="input" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.InvalidIndex">
      <summary>Obtient la limite supérieure de la plage des index non valides.</summary>
      <returns>Valeur qui représente le plus grand index non valide comme le détermine l'implémentation du fournisseur. Par exemple, si l'index valide le moins élevé est 0, cette propriété retourne -1.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsAvailablePosition(System.Int32)">
      <summary>Détermine si la position spécifiée est disponible pour l'assignation.</summary>
      <param name="position">Position de base zéro dans le masque à tester.</param>
      <returns>
        <see langword="true" /> si la position spécifiée dans la chaîne mise en forme est modifiable et n'a pas été encore assignée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsEditPosition(System.Int32)">
      <summary>Détermine si la position spécifiée est modifiable.</summary>
      <param name="position">Position de base zéro dans le masque à tester.</param>
      <returns>
        <see langword="true" /> si la position spécifiée dans la chaîne mise en forme est modifiable ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IsPassword">
      <summary>Obtient ou définit une valeur qui détermine si la protection par mot de passe doit être appliquée à la chaîne mise en forme.</summary>
      <returns>
        <see langword="true" /> si la chaîne d'entrée sera traitée comme une chaîne de mot de passe ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)">
      <summary>Détermine si le caractère spécifié est un caractère d'entrée valide.</summary>
      <param name="c">Valeur <see cref="T:System.Char" /> à tester.</param>
      <returns>
        <see langword="true" /> si le caractère spécifié contient une valeur d'entrée valide ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidMaskChar(System.Char)">
      <summary>Détermine si le caractère spécifié est un caractère de masque valide.</summary>
      <param name="c">Valeur <see cref="T:System.Char" /> à tester.</param>
      <returns>
        <see langword="true" /> si le caractère spécifié contient une valeur de masque valide ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)">
      <summary>Détermine si le caractère spécifié est un caractère de mot de passe valide.</summary>
      <param name="c">Valeur <see cref="T:System.Char" /> à tester.</param>
      <returns>
        <see langword="true" /> si le caractère spécifié contient une valeur de mot de passe valide ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Item(System.Int32)">
      <summary>Obtient l'élément à la position spécifiée dans la chaîne mise en forme.</summary>
      <param name="index">Index de base zéro de l'élément à récupérer.</param>
      <returns>
        <see cref="T:System.Char" /> à la position spécifiée dans la chaîne mise en forme.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> est inférieur à zéro ou supérieur ou égal à <see cref="P:System.ComponentModel.MaskedTextProvider.Length" /> du masque.</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.LastAssignedPosition">
      <summary>Obtient l'index dans le masque du caractère d'entrée le plus à droite assigné au masque.</summary>
      <returns>Si au moins un caractère d'entrée a été assigné au masque, <see cref="T:System.Int32" /> qui contient l'index de la position assignée la plus à droite ; sinon, si aucune position n'a été assignée, <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Length">
      <summary>Obtient la longueur du masque, sans les caractères du modificateur du masque.</summary>
      <returns>
        <see cref="T:System.Int32" /> qui contient le nombre de positions dans le masque, à l'exclusion des caractères qui modifient l'entrée de masque.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Mask">
      <summary>Obtient le masque de saisie.</summary>
      <returns>
        <see cref="T:System.String" /> qui contient le masque complet.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.MaskCompleted">
      <summary>Obtient une valeur qui indique si toutes les entrées requises ont été entrées dans la chaîne mise en forme.</summary>
      <returns>
        <see langword="true" /> si toutes les entrées requises ont été entrées dans le masque ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.MaskFull">
      <summary>Obtient une valeur qui indique si toutes les entrées obligatoires et facultatives ont été entrées dans la chaîne mise en forme.</summary>
      <returns>
        <see langword="true" /> si toutes les entrées obligatoires et facultatives ont été entrées ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.PasswordChar">
      <summary>Obtient ou définit le caractère à substituer aux caractères d'entrée réels.</summary>
      <returns>La valeur <see cref="T:System.Char" /> utilisée comme caractère de mot de passe.</returns>
      <exception cref="T:System.InvalidOperationException">Caractère de mot de passe spécifié lorsque la définition de cette propriété est identique au caractère d'invite en cours, <see cref="P:System.ComponentModel.MaskedTextProvider.PromptChar" />. Ces deux éléments doivent être différents.</exception>
      <exception cref="T:System.ArgumentException">Caractère spécifié lorsque la définition de cette propriété n'est pas un caractère de mot de passe valide comme le détermine la méthode <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" />.</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.PromptChar">
      <summary>Obtient ou définit le caractère utilisé pour représenter l'absence d'entrée d'utilisateur pour toutes les positions de modification disponibles.</summary>
      <returns>Caractère utilisé pour inviter l'utilisateur à entrer des données. La valeur par défaut est un trait de soulignement (_).</returns>
      <exception cref="T:System.InvalidOperationException">Caractère d'invite spécifié lorsque la définition de cette propriété est identique au caractère de mot de passe en cours, <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" />. Ces deux éléments doivent être différents.</exception>
      <exception cref="T:System.ArgumentException">Caractère spécifié lorsque la définition de cette propriété n'est pas un caractère de mot de passe valide comme le détermine la méthode <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Remove">
      <summary>Supprime le dernier caractère assigné de la chaîne mise en forme.</summary>
      <returns>
        <see langword="true" /> si la suppression du caractère réussit ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Remove(System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Supprime le dernier caractère assigné de la chaîne mise en forme, puis renvoie la position de suppression et les informations descriptives.</summary>
      <param name="testPosition">Position de base zéro dans la chaîne mise en forme où le caractère a été effectivement supprimé. Paramètre de sortie.</param>
      <param name="resultHint">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" /> qui décrit succinctement le résultat de l'opération. Paramètre de sortie.</param>
      <returns>
        <see langword="true" /> si la suppression du caractère réussit ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32)">
      <summary>Supprime le caractère assigné à la position spécifiée de la chaîne mise en forme.</summary>
      <param name="position">Index de base zéro du caractère assigné à supprimer.</param>
      <returns>
        <see langword="true" /> si la suppression du caractère réussit ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32)">
      <summary>Supprime les caractères assignés entre les positions spécifiées de la chaîne mise en forme.</summary>
      <param name="startPosition">Index de base zéro du premier caractère assigné à supprimer.</param>
      <param name="endPosition">Index de base zéro du dernier caractère assigné à supprimer.</param>
      <returns>
        <see langword="true" /> si la suppression du caractère réussit ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Supprime les caractères assignés entre les positions spécifiées de la chaîne mise en forme, puis renvoie la position de suppression et les informations descriptives.</summary>
      <param name="startPosition">Index de base zéro du premier caractère assigné à supprimer.</param>
      <param name="endPosition">Index de base zéro du dernier caractère assigné à supprimer.</param>
      <param name="testPosition">En cas de réussite, la position de base zéro dans la chaîne mise en forme de l'emplacement où les caractères ont été effectivement supprimés ; sinon, la première position où l'opération a échoué. Paramètre de sortie.</param>
      <param name="resultHint">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" /> qui décrit succinctement le résultat de l'opération. Paramètre de sortie.</param>
      <returns>
        <see langword="true" /> si la suppression du caractère réussit ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32)">
      <summary>Remplace un caractère unique au niveau ou au-delà de la position spécifiée par la valeur de caractère spécifiée.</summary>
      <param name="input">Valeur <see cref="T:System.Char" /> qui remplace la valeur existante.</param>
      <param name="position">Position zéro de base pour rechercher le premier caractère modifiable à remplacer.</param>
      <returns>
        <see langword="true" /> si le remplacement du caractère réussit ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Remplace un caractère unique entre le début spécifié et les positions de fin par la valeur de caractère spécifiée, puis renvoie la position de suppression et les informations descriptives.</summary>
      <param name="input">Valeur <see cref="T:System.Char" /> qui remplace la valeur existante.</param>
      <param name="startPosition">Position de base zéro dans la chaîne mise en forme où le remplacement démarre.</param>
      <param name="endPosition">Position de base zéro dans la chaîne mise en forme où le remplacement se termine.</param>
      <param name="testPosition">En cas de réussite, la position de base zéro dans la chaîne mise en forme à l'emplacement où le dernier caractère a été effectivement remplacé ; sinon, la première position où l'opération a échoué. Paramètre de sortie.</param>
      <param name="resultHint">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" /> qui décrit succinctement le résultat de l'opération de remplacement. Paramètre de sortie.</param>
      <returns>
        <see langword="true" /> si le remplacement du caractère réussit ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Remplace un caractère unique au niveau de ou au-delà de la position spécifiée par la valeur de caractère spécifiée, puis renvoie la position de suppression et les informations descriptives.</summary>
      <param name="input">Valeur <see cref="T:System.Char" /> qui remplace la valeur existante.</param>
      <param name="position">Position zéro de base pour rechercher le premier caractère modifiable à remplacer.</param>
      <param name="testPosition">En cas de réussite, la position de base zéro dans la chaîne mise en forme à l'emplacement où le dernier caractère a été effectivement remplacé ; sinon, la première position où l'opération a échoué. Paramètre de sortie.</param>
      <param name="resultHint">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" /> qui décrit succinctement le résultat de l'opération de remplacement. Paramètre de sortie.</param>
      <returns>
        <see langword="true" /> si le remplacement du caractère réussit ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32)">
      <summary>Remplace une plage de caractères modifiables en commençant à la position spécifiée par la chaîne spécifiée.</summary>
      <param name="input">Valeur <see cref="T:System.String" /> utiliser pour remplacer les caractères modifiables existants.</param>
      <param name="position">Position zéro de base pour rechercher le premier caractère modifiable à remplacer.</param>
      <returns>
        <see langword="true" /> si le remplacement de tous les caractères a réussi ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="input" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Remplace une plage de caractères modifiables entre les positions de début et de fin spécifiées par la chaîne spécifiée, puis renvoie la position de suppression et les informations descriptives.</summary>
      <param name="input">Valeur <see cref="T:System.String" /> utiliser pour remplacer les caractères modifiables existants.</param>
      <param name="startPosition">Position de base zéro dans la chaîne mise en forme où le remplacement démarre.</param>
      <param name="endPosition">Position de base zéro dans la chaîne mise en forme où le remplacement se termine.</param>
      <param name="testPosition">En cas de réussite, la position de base zéro dans la chaîne mise en forme à l'emplacement où le dernier caractère a été effectivement remplacé ; sinon, la première position où l'opération a échoué. Paramètre de sortie.</param>
      <param name="resultHint">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" /> qui décrit succinctement le résultat de l'opération de remplacement. Paramètre de sortie.</param>
      <returns>
        <see langword="true" /> si le remplacement de tous les caractères a réussi ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Remplace une plage de caractères modifiables en commençant à la position spécifiée par la chaîne spécifiée, puis renvoie la position de suppression et les informations descriptives.</summary>
      <param name="input">Valeur <see cref="T:System.String" /> utiliser pour remplacer les caractères modifiables existants.</param>
      <param name="position">Position zéro de base pour rechercher le premier caractère modifiable à remplacer.</param>
      <param name="testPosition">En cas de réussite, la position de base zéro dans la chaîne mise en forme à l'emplacement où le dernier caractère a été effectivement remplacé ; sinon, la première position où l'opération a échoué. Paramètre de sortie.</param>
      <param name="resultHint">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" /> qui décrit succinctement le résultat de l'opération de remplacement. Paramètre de sortie.</param>
      <returns>
        <see langword="true" /> si le remplacement de tous les caractères a réussi ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.ResetOnPrompt">
      <summary>Obtient ou définit une valeur qui détermine comment un caractère d'entrée qui correspond au caractère d'invite doit être géré.</summary>
      <returns>
        <see langword="true" /> si le fait de saisir le caractère d'invite comme entrée entraîne la réinitialisation de la position modifiable actuelle dans le masque ; sinon, <see langword="false" /> pour indiquer que le caractère d'invite sera traité comme un caractère d'entrée normal. La valeur par défaut est <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.ResetOnSpace">
      <summary>Obtient ou définit une valeur qui détermine comment un caractère d'entrée d'espace doit être géré.</summary>
      <returns>
        <see langword="true" /> si le caractère d'entrée d'espace entraîne la réinitialisation de la position modifiable actuelle dans le masque ; sinon, <see langword="false" /> pour indiquer qu'il sera traité comme un caractère d'entrée normal. La valeur par défaut est <see langword="true" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Set(System.String)">
      <summary>Définit la chaîne mise en forme sur la chaîne d'entrée spécifiée.</summary>
      <param name="input">Valeur <see cref="T:System.String" /> utilisée pour définir la chaîne mise en forme.</param>
      <returns>
        <see langword="true" /> si la définition de tous les caractères a réussi ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="input" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Set(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Définit la chaîne mise en forme sur la chaîne d'entrée spécifiée, puis renvoie la position de suppression et les informations descriptives.</summary>
      <param name="input">Valeur <see cref="T:System.String" /> utilisée pour définir la chaîne mise en forme.</param>
      <param name="testPosition">En cas de réussite, la position de base zéro dans la chaîne mise en forme à l'emplacement où le dernier caractère a été effectivement défini ; sinon, la première position où l'opération a échoué. Paramètre de sortie.</param>
      <param name="resultHint">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" /> qui décrit succinctement le résultat de l'opération de définition. Paramètre de sortie.</param>
      <returns>
        <see langword="true" /> si la définition de tous les caractères a réussi ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="input" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.SkipLiterals">
      <summary>Obtient ou définit une valeur qui indique si les positions de caractères littéraux dans le masque peuvent être remplacées par leurs mêmes valeurs.</summary>
      <returns>
        <see langword="true" /> pour autoriser le rajout de littéraux ; sinon, <see langword="false" /> pour ne pas autoriser l'utilisateur à remplacer des caractères littéraux. La valeur par défaut est <see langword="true" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToDisplayString">
      <summary>Retourne la chaîne mise en forme dans un formulaire affichable.</summary>
      <returns>
        <see cref="T:System.String" /> mis en forme qui inclut des invites et des littéraux de masque.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString">
      <summary>Retourne la chaîne mise en forme qui inclut toutes les valeurs de caractère assignées.</summary>
      <returns>
        <see cref="T:System.String" /> mis en forme qui inclut toutes les valeurs de caractère assignées.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean)">
      <summary>Retourne la chaîne mise en forme en incluant éventuellement les caractères de mot de passe.</summary>
      <param name="ignorePasswordChar">
        <see langword="true" /> pour retourner les caractères modifiables réels ; sinon, <see langword="false" /> pour indiquer que la propriété <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> doit être reconnue.</param>
      <returns>Le <see cref="T:System.String" /> mis en forme qui inclut des littéraux, des invites, et éventuellement des caractères de mot de passe.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean)">
      <summary>Retourne la chaîne mise en forme en incluant éventuellement des caractères littéraux et d'invite.</summary>
      <param name="includePrompt">
        <see langword="true" /> pour inclure des caractères d'invite dans la chaîne de retour ; sinon, <see langword="false" />.</param>
      <param name="includeLiterals">
        <see langword="true" /> pour inclure des caractères littéraux dans la chaîne de retour ; sinon, <see langword="false" />.</param>
      <returns>Le <see cref="T:System.String" /> mis en forme qui inclut toutes les valeurs de caractère assignées et inclut éventuellement des littéraux et des invites.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
      <summary>Retourne une sous-chaîne de la chaîne mise en forme et inclut éventuellement des caractères littéraux, d'invite et de mot de passe.</summary>
      <param name="ignorePasswordChar">
        <see langword="true" /> pour retourner les caractères modifiables réels ; sinon, <see langword="false" /> pour indiquer que la propriété <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> doit être reconnue.</param>
      <param name="includePrompt">
        <see langword="true" /> pour inclure des caractères d'invite dans la chaîne de retour ; sinon, <see langword="false" />.</param>
      <param name="includeLiterals">
        <see langword="true" /> pour retourner des caractères littéraux dans la chaîne de retour ; sinon, <see langword="false" />.</param>
      <param name="startPosition">Position de base zéro dans la chaîne mise en forme où commence la sortie.</param>
      <param name="length">Nombre de caractères à retourner.</param>
      <returns>En cas de réussite, une sous-chaîne du <see cref="T:System.String" /> mis en forme qui inclut toutes les valeurs de caractère assignées et éventuellement des littéraux, des invites, et des caractères de mot de passe ; sinon, la chaîne <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean,System.Int32,System.Int32)">
      <summary>Retourne une sous-chaîne de la chaîne mise en forme et inclut éventuellement des caractères littéraux et d'invite.</summary>
      <param name="includePrompt">
        <see langword="true" /> pour inclure des caractères d'invite dans la chaîne de retour ; sinon, <see langword="false" />.</param>
      <param name="includeLiterals">
        <see langword="true" /> pour inclure des caractères littéraux dans la chaîne de retour ; sinon, <see langword="false" />.</param>
      <param name="startPosition">Position de base zéro dans la chaîne mise en forme où commence la sortie.</param>
      <param name="length">Nombre de caractères à retourner.</param>
      <returns>En cas de réussite, une sous-chaîne du <see cref="T:System.String" /> mis en forme qui inclut toutes les valeurs de caractère assignées et éventuellement des littéraux et des invites ; sinon, la chaîne <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Int32,System.Int32)">
      <summary>Retourne une sous-chaîne de la chaîne mise en forme et inclut éventuellement des caractères de mot de passe.</summary>
      <param name="ignorePasswordChar">
        <see langword="true" /> pour retourner les caractères modifiables réels ; sinon, <see langword="false" /> pour indiquer que la propriété <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> doit être reconnue.</param>
      <param name="startPosition">Position de base zéro dans la chaîne mise en forme où commence la sortie.</param>
      <param name="length">Nombre de caractères à retourner.</param>
      <returns>En cas de réussite, une sous-chaîne du <see cref="T:System.String" /> mis en forme qui inclut des littéraux, des invites, et éventuellement des caractères de mot de passe ; sinon, la chaîne <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Int32,System.Int32)">
      <summary>Retourne une sous-chaîne de la chaîne mise en forme.</summary>
      <param name="startPosition">Position de base zéro dans la chaîne mise en forme où commence la sortie.</param>
      <param name="length">Nombre de caractères à retourner.</param>
      <returns>En cas de réussite, une sous-chaîne du <see cref="T:System.String" /> mis en forme qui inclut toutes les valeurs de caractère assignées ; sinon, la chaîne <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyChar(System.Char,System.Int32,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Teste si le caractère spécifié peut être défini correctement à la position spécifiée.</summary>
      <param name="input">Valeur <see cref="T:System.Char" /> à tester.</param>
      <param name="position">Position dans le masque par rapport à laquelle tester le caractère d'entrée.</param>
      <param name="hint">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" /> qui décrit succinctement le résultat de l'opération. Paramètre de sortie.</param>
      <returns>
        <see langword="true" /> si le caractère spécifié est valide pour la position spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)">
      <summary>Teste si le caractère spécifié fait l'objet d'un échappement à la position spécifiée.</summary>
      <param name="input">Valeur <see cref="T:System.Char" /> à tester.</param>
      <param name="position">Position dans le masque par rapport à laquelle tester le caractère d'entrée.</param>
      <returns>
        <see langword="true" /> si le caractère spécifié fait l'objet d'un échappement à la position spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyString(System.String)">
      <summary>Teste si la définition de la chaîne spécifiée est correcte.</summary>
      <param name="input">Valeur <see cref="T:System.String" /> à tester.</param>
      <returns>
        <see langword="true" /> si la chaîne spécifiée représente une entrée valide ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyString(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Teste si la définition de la chaîne spécifiée est correcte, puis génère les informations descriptives et de position.</summary>
      <param name="input">Valeur <see cref="T:System.String" /> à tester.</param>
      <param name="testPosition">En cas de réussite, la position de base zéro du dernier caractère effectivement testé ; sinon, la première position où le test a échoué. Paramètre de sortie.</param>
      <param name="resultHint">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" /> qui décrit succinctement le résultat de l'opération de test. Paramètre de sortie.</param>
      <returns>
        <see langword="true" /> si la chaîne spécifiée représente une entrée valide ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.MaskedTextResultHint">
      <summary>Spécifie des valeurs qui décrivent brièvement les résultats d'une opération d'analyse de texte masqué.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.AlphanumericCharacterExpected">
      <summary>L'opération n'a pas réussi. Un caractère d'entrée qui n'était pas alphanumérique a été rencontré. .</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.AsciiCharacterExpected">
      <summary>L'opération n'a pas réussi. Un caractère d'entrée qui n'était pas membre du jeu de caractères ASCII a été rencontré.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.CharacterEscaped">
      <summary>Opération réussie. L'opération a réussi parce qu'un caractère littéral, d'invite ou d'espace était un caractère d'échappement. Pour plus d'informations sur les caractères d'échappement, consultez la méthode <see cref="M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)" />.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.DigitExpected">
      <summary>L'opération n'a pas réussi. Un caractère d'entrée qui n'était pas un chiffre a été rencontré.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.InvalidInput">
      <summary>L'opération n'a pas réussi. Le programme a rencontré un caractère d’entrée qui n’était pas valide. Pour plus d'informations sur les caractères qui ne sont pas valides, consultez la méthode <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)" />.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.LetterExpected">
      <summary>L'opération n'a pas réussi. Un caractère d'entrée qui n'était pas une lettre a été rencontré.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.NoEffect">
      <summary>Opération réussie. L'opération principale n'a pas été exécutée : elle n'était pas nécessaire ; par conséquent, il n'y a eu aucun effet secondaire.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.NonEditPosition">
      <summary>L'opération n'a pas réussi. La position actuelle dans la chaîne mise en forme est un caractère littéral.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.PositionOutOfRange">
      <summary>L'opération n'a pas réussi. La position spécifiée n'est pas dans la plage de la chaîne cible ; en général, elle est inférieure à zéro ou supérieure à la longueur de la chaîne cible.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.PromptCharNotAllowed">
      <summary>L'opération n'a pas réussi. Le caractère d'invite n'est pas valide en entrée, sans doute parce que la propriété <see cref="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput" /> a la valeur <see langword="false" />.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.SideEffect">
      <summary>Opération réussie. L'opération principale n'a pas été effectuée car elle n'était pas nécessaire, mais la méthode a produit un effet secondaire. Par exemple, la méthode <see cref="Overload:System.ComponentModel.MaskedTextProvider.RemoveAt" /> peut supprimer une position de modification non assignée qui provoque un décalage vers la gauche des caractères suivants dans la chaîne mise en forme.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.SignedDigitExpected">
      <summary>L'opération n'a pas réussi. Un caractère d'entrée qui n'était pas un chiffre signé a été rencontré.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.Success">
      <summary>Opération réussie. L'opération principale a réussi.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.UnavailableEditPosition">
      <summary>L'opération n'a pas réussi. Il n'y avait pas assez de positions de modification disponibles pour accomplir la demande.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.Unknown">
      <summary>Inconnu. Le résultat de l'opération n'a pas pu être déterminé.</summary>
    </member>
    <member name="T:System.ComponentModel.MemberDescriptor">
      <summary>Représente un membre de classe, tel qu'une propriété ou un événement. Il s'agit d'une classe de base abstraite.</summary>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.MemberDescriptor" /> avec le <see cref="T:System.ComponentModel.MemberDescriptor" /> spécifié.</summary>
      <param name="descr">
        <see cref="T:System.ComponentModel.MemberDescriptor" /> qui contient le nom du membre et ses attributs.</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.MemberDescriptor" /> avec le nom dans le <see cref="T:System.ComponentModel.MemberDescriptor" /> spécifié et les attributs de l'ancien <see cref="T:System.ComponentModel.MemberDescriptor" /> et du tableau <see cref="T:System.Attribute" />.</summary>
      <param name="oldMemberDescriptor">
        <see cref="T:System.ComponentModel.MemberDescriptor" /> possédant le nom du membre et ses attributs.</param>
      <param name="newAttributes">Tableau d'objets <see cref="T:System.Attribute" /> possédant les attributs à ajouter au membre.</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.MemberDescriptor" /> avec le nom du membre spécifié.</summary>
      <param name="name">Nom du membre.</param>
      <exception cref="T:System.ArgumentException">Le nom est une chaîne vide ("") ou <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.String,System.Attribute[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.MemberDescriptor" /> avec le nom du membre spécifié et un tableau d'attributs.</summary>
      <param name="name">Nom du membre.</param>
      <param name="attributes">Tableau de type <see cref="T:System.Attribute" /> qui contient les attributs du membre.</param>
      <exception cref="T:System.ArgumentException">Le nom est une chaîne vide ("") ou <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.AttributeArray">
      <summary>Obtient ou définit un tableau d'attributs.</summary>
      <returns>Tableau de type <see cref="T:System.Attribute" /> qui contient les attributs de ce membre.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Attributes">
      <summary>Obtient la collection des attributs de ce membre.</summary>
      <returns>
        <see cref="T:System.ComponentModel.AttributeCollection" /> qui fournit les attributs pour ce membre ou une collection vide si <see cref="P:System.ComponentModel.MemberDescriptor.AttributeArray" /> ne contient pas d'attribut.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Category">
      <summary>Obtient le nom de la catégorie à laquelle le membre appartient, comme spécifié dans <see cref="T:System.ComponentModel.CategoryAttribute" />.</summary>
      <returns>Nom de la catégorie à laquelle le membre appartient. S'il n'existe aucun <see cref="T:System.ComponentModel.CategoryAttribute" />, le nom de la catégorie est celui de la catégorie par défaut, <see langword="Misc" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.CreateAttributeCollection">
      <summary>Crée une collection d'attributs à l'aide du tableau d'attributs passé au constructeur.</summary>
      <returns>Nouveau <see cref="T:System.ComponentModel.AttributeCollection" /> qui contient les attributs <see cref="P:System.ComponentModel.MemberDescriptor.AttributeArray" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Description">
      <summary>Obtient la description du membre, telle qu'elle est spécifiée dans <see cref="T:System.ComponentModel.DescriptionAttribute" />.</summary>
      <returns>Description du membre. S'il n'existe aucun <see cref="T:System.ComponentModel.DescriptionAttribute" />, la valeur de la propriété est la valeur par défaut, c'est-à-dire une chaîne vide ("").</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.DesignTimeOnly">
      <summary>Obtient une valeur indiquant si ce membre ne doit être défini qu'au moment du design, comme spécifié dans <see cref="T:System.ComponentModel.DesignOnlyAttribute" />.</summary>
      <returns>
        <see langword="true" /> si ce membre ne doit être défini qu'au moment du design ; <see langword="false" /> si le membre peut être défini pendant l'exécution.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.DisplayName">
      <summary>Obtient le nom qui peut être affiché dans une fenêtre, telle qu'une fenêtre Propriétés.</summary>
      <returns>Nom du membre à afficher.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.Equals(System.Object)">
      <summary>Compare cette instance avec l'objet donné afin de déterminer s'ils sont équivalents.</summary>
      <param name="obj">Objet à comparer avec l'instance actuelle.</param>
      <returns>
        <see langword="true" /> s'ils sont équivalents ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FillAttributes(System.Collections.IList)">
      <summary>En cas de substitution dans une classe dérivée, ajoute les attributs de la classe qui hérite à la liste d'attributs spécifiée dans la classe parente.</summary>
      <param name="attributeList">
        <see cref="T:System.Collections.IList" /> énumérant les attributs de la classe parente. Initialement, cette liste est vide.</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type)">
      <summary>Recherche la méthode donnée par réflexion, en recherchant uniquement les méthodes publiques.</summary>
      <param name="componentClass">Composant qui contient la méthode.</param>
      <param name="name">Nom de la méthode à rechercher.</param>
      <param name="args">Tableau de paramètres pour la méthode, utilisé pour choisir entre différentes méthodes surchargées.</param>
      <param name="returnType">Type à retourner pour la méthode.</param>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> qui représente la méthode ou <see langword="null" /> si la méthode est introuvable.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type,System.Boolean)">
      <summary>Recherche la méthode donnée par réflexion, avec une option permettant de rechercher uniquement les méthodes publiques.</summary>
      <param name="componentClass">Composant qui contient la méthode.</param>
      <param name="name">Nom de la méthode à rechercher.</param>
      <param name="args">Tableau de paramètres pour la méthode, utilisé pour choisir entre différentes méthodes surchargées.</param>
      <param name="returnType">Type à retourner pour la méthode.</param>
      <param name="publicOnly">Indique si la recherche doit se limiter aux méthodes publiques.</param>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> qui représente la méthode ou <see langword="null" /> si la méthode est introuvable.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetHashCode">
      <summary>Retourne le code de hachage de cette instance.</summary>
      <returns>Code de hachage du <see cref="T:System.ComponentModel.MemberDescriptor" /> actuel.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetInvocationTarget(System.Type,System.Object)">
      <summary>Récupère l'objet qui doit être utilisé pendant l'appel des membres.</summary>
      <param name="type">
        <see cref="T:System.Type" /> de la cible d'appel.</param>
      <param name="instance">Cible d'appel potentielle.</param>
      <returns>Objet à utiliser pendant les appels de membres.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> ou <paramref name="instance" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetInvokee(System.Type,System.Object)">
      <summary>Obtient le composant sur lequel une méthode doit être appelée.</summary>
      <param name="componentClass">
        <see cref="T:System.Type" /> représentant le type du composant auquel ce <see cref="T:System.ComponentModel.MemberDescriptor" /> est lié. Par exemple, si ce <see cref="T:System.ComponentModel.MemberDescriptor" /> décrit une propriété, ce paramètre doit être la classe sur laquelle la propriété est déclarée.</param>
      <param name="component">Instance de l'objet à appeler.</param>
      <returns>Instance du composant à appeler. Cette méthode retourne un concepteur visuel si la propriété est attachée à un concepteur visuel.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="componentClass" /> ou <paramref name="component" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetSite(System.Object)">
      <summary>Obtient un site de composant pour le composant donné.</summary>
      <param name="component">Composant pour lequel vous souhaitez rechercher un site.</param>
      <returns>Site du composant, ou <see langword="null" /> si aucun site n'existe.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.IsBrowsable">
      <summary>Obtient une valeur indiquant si le membre peut être exploré, tel que spécifié dans <see cref="T:System.ComponentModel.BrowsableAttribute" />.</summary>
      <returns>
        <see langword="true" /> si le membre peut être exploré ; sinon, <see langword="false" />. S'il n'existe aucun <see cref="T:System.ComponentModel.BrowsableAttribute" />, la valeur de la propriété est la valeur par défaut, <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Name">
      <summary>Obtient le nom du membre.</summary>
      <returns>Nom du membre.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.NameHashCode">
      <summary>Obtient le code de hachage pour le nom du membre, tel que spécifié dans <see cref="M:System.String.GetHashCode" />.</summary>
      <returns>Code de hachage pour le nom du membre.</returns>
    </member>
    <member name="T:System.ComponentModel.MultilineStringConverter">
      <summary>Fournit un convertisseur de type pour convertir des chaînes multilignes en une chaîne simple.</summary>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.MultilineStringConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convertit l’objet de valeur donné en type spécifié, en utilisant les informations de contexte et de culture spécifiées.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> Si la valeur <see langword="null" /> est passée, la culture est supposée être la culture actuelle.</param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> vers lequel le paramètre de valeur doit être converti.</param>
      <returns>
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> est <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Retourne une collection de propriétés pour le type de tableau spécifié par le paramètre <paramref name="value" /> à l'aide du contexte et des attributs spécifiés.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="value">
        <see cref="T:System.Object" /> spécifiant le type de tableau pour lequel obtenir des propriétés.</param>
      <param name="attributes">Tableau de type <see cref="T:System.Attribute" /> utilisé comme filtre.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> possédant les propriétés exposées pour ce type de données, ou <see langword="null" /> en l'absence de propriétés.</returns>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Retourne une valeur indiquant si cet objet prend en charge les propriétés, en utilisant le contexte spécifié.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns>
        <see langword="true" /> si <see cref="Overload:System.ComponentModel.MultilineStringConverter.GetProperties" /> doit être appelé pour rechercher les propriétés de cet objet ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.NestedContainer">
      <summary>Fournit l'implémentation de base pour l'interface <see cref="T:System.ComponentModel.INestedContainer" /> qui permet aux conteneurs d'avoir un composant propriétaire.</summary>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.NestedContainer" />.</summary>
      <param name="owner">
        <see cref="T:System.ComponentModel.IComponent" /> auquel appartient ce conteneur imbriqué.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="owner" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)">
      <summary>Crée un site pour le composant dans le conteneur.</summary>
      <param name="component">
        <see cref="T:System.ComponentModel.IComponent" /> pour lequel créer un site.</param>
      <param name="name">Nom à assigner à <paramref name="component" /> ou <see langword="null" /> pour ignorer l'assignation de nom.</param>
      <returns>Objet <see cref="T:System.ComponentModel.ISite" /> nouvellement créé.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
      <summary>Libère les ressources utilisées par le conteneur imbriqué.</summary>
      <param name="disposing">
        <see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour libérer uniquement les ressources non managées.</param>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.GetService(System.Type)">
      <summary>Obtient l'objet service éventuel du type spécifié.</summary>
      <param name="service">
        <see cref="T:System.Type" /> du service à récupérer.</param>
      <returns>
        <see cref="T:System.Object" /> qui implémente le service demandé, ou <see langword="null" /> si le service ne peut pas être résolu.</returns>
    </member>
    <member name="P:System.ComponentModel.NestedContainer.Owner">
      <summary>Obtient le composant propriétaire pour ce conteneur imbriqué.</summary>
      <returns>
        <see cref="T:System.ComponentModel.IComponent" /> auquel appartient ce conteneur imbriqué.</returns>
    </member>
    <member name="P:System.ComponentModel.NestedContainer.OwnerName">
      <summary>Obtient le nom du composant propriétaire.</summary>
      <returns>Nom du composant propriétaire</returns>
    </member>
    <member name="T:System.ComponentModel.NullableConverter">
      <summary>Fournit une conversion automatique entre un type Nullable et son type primitif sous-jacent.</summary>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.#ctor(System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.NullableConverter" />.</summary>
      <param name="type">Type Nullable spécifié.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> n'est pas un type Nullable.</exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Retourne une valeur indiquant si ce convertisseur peut convertir un objet du type donné en objet du type de ce convertisseur à l’aide du contexte spécifié.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="sourceType">
        <see cref="T:System.Type" /> qui représente le type à partir duquel opérer la conversion.</param>
      <returns>
        <see langword="true" /> si ce convertisseur peut effectuer la conversion ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Retourne une valeur indiquant si ce convertisseur peut convertir l’objet en objet du type spécifié, à l’aide du contexte spécifié.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> qui représente le type vers lequel vous souhaitez convertir.</param>
      <returns>
        <see langword="true" /> si ce convertisseur peut effectuer la conversion ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convertit l’objet donné dans le type de ce convertisseur en utilisant les informations de contexte et de culture spécifiées.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> à utiliser comme culture actuelle.</param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir.</param>
      <returns>
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convertit l’objet de valeur donné en type spécifié, en utilisant les informations de contexte et de culture spécifiées.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> à utiliser comme culture actuelle.</param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> vers lequel le paramètre de valeur doit être converti.</param>
      <returns>
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>Crée une instance du type auquel ce <see cref="T:System.ComponentModel.TypeConverter" /> est associé, en utilisant le contexte spécifié, en fonction d’un ensemble de valeurs de propriétés de l’objet.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="propertyValues">
        <see cref="T:System.Collections.IDictionary" /> de nouvelles valeurs de propriétés.</param>
      <returns>
        <see cref="T:System.Object" /> représentant le <see cref="T:System.Collections.IDictionary" /> donné, ou <see langword="null" /> si l’objet ne peut pas être créé. Cette méthode retourne toujours la valeur <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Retourne une valeur indiquant si la modification d'une valeur de cet objet nécessite l'appel à <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> pour la création d'une nouvelle valeur, à l'aide du contexte spécifié.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns>
        <see langword="true" /> si la modification d’une propriété de cet objet nécessite un appel à <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> pour créer une valeur ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Retourne une collection de propriétés pour le type de tableau spécifié par le paramètre de valeur, à l'aide du contexte et des attributs déterminés.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="value">
        <see cref="T:System.Object" /> spécifiant le type de tableau pour lequel obtenir des propriétés.</param>
      <param name="attributes">Tableau de type <see cref="T:System.Attribute" /> utilisé comme filtre.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> possédant les propriétés exposées pour ce type de données, ou <see langword="null" /> en l'absence de propriétés.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Retourne une valeur indiquant si cet objet prend en charge les propriétés, en utilisant le contexte spécifié.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns>
        <see langword="true" /> si <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> doit être appelé pour rechercher les propriétés de cet objet ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Retourne une collection de valeurs standard pour le type de données pour lequel ce convertisseur de type est conçu lorsqu'il est fourni avec un contexte de format.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format qui peut être utilisé pour extraire des informations supplémentaires sur l'environnement à partir duquel ce convertisseur est appelé. Ce paramètre ou les propriétés de ce paramètre peuvent être <see langword="null" />.</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> contenant un jeu standard de valeurs valides ou <see langword="null" /> si le type de données ne prend pas en charge un jeu standard de valeurs.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Retourne une valeur indiquant si la collection de valeurs standard retournée par <see cref="Overload:System.ComponentModel.TypeConverter.GetStandardValues" /> est une liste exclusive des valeurs possibles, utilisant le contexte spécifié.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns>
        <see langword="true" /> si le <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> retourné par <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> est une liste exhaustive des valeurs possibles ; <see langword="false" /> si d'autres valeurs sont possibles.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Retourne une valeur indiquant si cet objet prend en charge un jeu de valeurs standard pouvant être sélectionnées dans une liste, à l'aide du contexte spécifié.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns>
        <see langword="true" /> si <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> doit être appelée pour rechercher un jeu commun de valeurs prises en charge par l'objet ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>Retourne une valeur indiquant si l'objet de valeur donné est valide pour ce type et pour le contexte spécifié.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="value">
        <see cref="T:System.Object" /> dont la validité doit être testée.</param>
      <returns>
        <see langword="true" /> si la valeur spécifiée est valide pour cet objet ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.NullableType">
      <summary>Obtient le type Nullable.</summary>
      <returns>
        <see cref="T:System.Type" /> qui représente le type Nullable.</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.UnderlyingType">
      <summary>Obtient la liste sous-jacente.</summary>
      <returns>
        <see cref="T:System.Type" /> qui représente le type sous-jacent.</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.UnderlyingTypeConverter">
      <summary>Obtient le convertisseur de type sous-jacent.</summary>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter" /> qui représente le convertisseur de type sous-jacent.</returns>
    </member>
    <member name="T:System.ComponentModel.PasswordPropertyTextAttribute">
      <summary>Indique que la représentation sous forme de texte d’un objet est masquée par des caractères tels que des astérisques. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.#ctor(System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> et affiche éventuellement le texte du mot de passe.</summary>
      <param name="password">
        <see langword="true" /> pour indiquer que la propriété doit apparaître sous la forme de texte de mot de passe ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</param>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.Default">
      <summary>Spécifie la valeur par défaut de <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.Equals(System.Object)">
      <summary>Détermine si deux instances <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> sont égales.</summary>
      <param name="o">
        <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> à comparer avec l'objet <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> actuel.</param>
      <returns>
        <see langword="true" /> si le <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> spécifié est égal au <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> actuel ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.GetHashCode">
      <summary>Retourne le code de hachage de cette instance.</summary>
      <returns>Code de hachage du <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> actuel.</returns>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.IsDefaultAttribute">
      <summary>Indique si la valeur de cette instance est la valeur par défaut.</summary>
      <returns>
        <see langword="true" /> si cette instance est l’attribut par défaut de la classe ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.No">
      <summary>Spécifie qu'une propriété Text n'est pas utilisée en tant que mot de passe. Ce champ <see langword="static" /> (<see langword="Shared" /> en Visual Basic) est en lecture seule.</summary>
    </member>
    <member name="P:System.ComponentModel.PasswordPropertyTextAttribute.Password">
      <summary>Obtient une valeur qui indique si la propriété pour laquelle <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> est défini doit apparaître sous la forme de texte de mot de passe.</summary>
      <returns>
        <see langword="true" /> si la propriété doit apparaître sous la forme de texte de mot de passe ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.Yes">
      <summary>Spécifie qu'une propriété Text est utilisée en tant que mot de passe. Ce champ <see langword="static" /> (<see langword="Shared" /> en Visual Basic) est en lecture seule.</summary>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptor">
      <summary>Fournit une abstraction d'une propriété sur une classe.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.PropertyDescriptor" /> avec le nom et les attributs dans le <see cref="T:System.ComponentModel.MemberDescriptor" /> spécifié.</summary>
      <param name="descr">
        <see cref="T:System.ComponentModel.MemberDescriptor" /> qui contient le nom de la propriété et ses attributs.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.PropertyDescriptor" /> avec le nom dans le <see cref="T:System.ComponentModel.MemberDescriptor" /> spécifié et les attributs dans les tableaux <see cref="T:System.ComponentModel.MemberDescriptor" /> et <see cref="T:System.Attribute" />.</summary>
      <param name="descr">
        <see cref="T:System.ComponentModel.MemberDescriptor" /> contenant le nom du membre et ses attributs.</param>
      <param name="attrs">Tableau <see cref="T:System.Attribute" /> contenant les attributs à associer à la propriété.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.String,System.Attribute[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.PropertyDescriptor" /> avec le nom et les attributs spécifiés.</summary>
      <param name="name">Nom de la propriété.</param>
      <param name="attrs">Tableau de type <see cref="T:System.Attribute" /> qui contient les attributs de la propriété.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.AddValueChanged(System.Object,System.EventHandler)">
      <summary>Permet à d'autres objets d'être avertis en cas de modification de cette propriété.</summary>
      <param name="component">Composant pour lequel ajouter le gestionnaire.</param>
      <param name="handler">Délégué à ajouter en tant qu'écouteur.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> ou <paramref name="handler" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.CanResetValue(System.Object)">
      <summary>En cas de substitution dans une classe dérivée, retourne une valeur indiquant si la réinitialisation d'un objet modifie sa valeur.</summary>
      <param name="component">Composant dont la fonction de réinitialisation doit être testée.</param>
      <returns>
        <see langword="true" /> si la réinitialisation du composant modifie sa valeur ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.ComponentType">
      <summary>En cas de substitution dans une classe dérivée, obtient le type du composant auquel cette propriété est liée.</summary>
      <returns>
        <see cref="T:System.Type" /> représentant le type du composant auquel cette propriété est liée. Lors de l'appel des méthodes <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)" /> ou <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)" />, l'objet spécifié peut être une instance de ce type.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.Converter">
      <summary>Obtient le convertisseur de type pour cette propriété.</summary>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter" /> utilisé pour convertir le <see cref="T:System.Type" /> de cette propriété.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.CreateInstance(System.Type)">
      <summary>Crée une instance du type spécifié.</summary>
      <param name="type">
        <see cref="T:System.Type" /> représentant le type à créer.</param>
      <returns>Nouvelle instance du type.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.Equals(System.Object)">
      <summary>Compare cet objet à un autre afin de déterminer s'ils sont équivalents.</summary>
      <param name="obj">Objet à comparer à ce <see cref="T:System.ComponentModel.PropertyDescriptor" />.</param>
      <returns>
        <see langword="true" /> si les valeurs sont équivalentes ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.FillAttributes(System.Collections.IList)">
      <summary>Ajoute les attributs de <see cref="T:System.ComponentModel.PropertyDescriptor" /> à la liste spécifiée d'attributs dans la classe parente.</summary>
      <param name="attributeList">
        <see cref="T:System.Collections.IList" /> énumérant les attributs de la classe parente. Initialement, cette liste est vide.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties">
      <summary>Retourne le <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> par défaut.</summary>
      <returns>Collection du descripteur de propriété.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Attribute[])">
      <summary>Retourne un <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> avec comme filtre un tableau d'attributs spécifié.</summary>
      <param name="filter">Tableau de type <see cref="T:System.Attribute" /> à utiliser comme filtre.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> avec les propriétés qui correspondent aux attributs spécifiés.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object)">
      <summary>Retourne un <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> pour un objet donné.</summary>
      <param name="instance">Composant dont les propriétés doivent être obtenues.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> avec les propriétés du composant spécifié.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object,System.Attribute[])">
      <summary>Retourne un <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> pour un objet donné à l'aide d'un tableau d'attributs spécifié comme filtre.</summary>
      <param name="instance">Composant dont les propriétés doivent être obtenues.</param>
      <param name="filter">Tableau de type <see cref="T:System.Attribute" /> à utiliser comme filtre.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> dont les propriétés correspondent aux attributs spécifiés pour le composant spécifié.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetEditor(System.Type)">
      <summary>Obtient un éditeur du type spécifié.</summary>
      <param name="editorBaseType">Type de base de l'éditeur, utilisé pour différencier plusieurs éditeurs pris en charge par une propriété.</param>
      <returns>Instance du type d'éditeur demandé, ou <see langword="null" /> si l'éditeur est introuvable.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetHashCode">
      <summary>Retourne le code de hachage de cet objet.</summary>
      <returns>Code de hachage pour cet objet.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetInvocationTarget(System.Type,System.Object)">
      <summary>Cette méthode retourne l'objet qui doit être utilisé pendant l'appel de membres.</summary>
      <param name="type">
        <see cref="T:System.Type" /> de la cible d'appel.</param>
      <param name="instance">Cible d'appel potentielle.</param>
      <returns>
        <see cref="T:System.Object" /> qui doit être utilisé pendant l'appel de membres.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetTypeFromName(System.String)">
      <summary>Retourne un type en utilisant son nom.</summary>
      <param name="typeName">Nom spécifié dans l'assembly du type à récupérer.</param>
      <returns>
        <see cref="T:System.Type" /> correspondant au nom de type donné, ou <see langword="null" /> si aucune correspondance n'est détectée.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)">
      <summary>En cas de substitution dans une classe dérivée, obtient la valeur actuelle de la propriété d'un composant.</summary>
      <param name="component">Composant possédant la propriété dont la valeur doit être récupérée.</param>
      <returns>Valeur d'une propriété pour un composant donné.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetValueChangedHandler(System.Object)">
      <summary>Récupère l’ensemble actif de gestionnaires d’événements <c>ValueChanged</c> pour un composant spécifique.</summary>
      <param name="component">Composant pour lequel récupérer les gestionnaires d'événements.</param>
      <returns>Un gestionnaire d'événements de multidiffusion combiné ou <see langword="null" /> si aucun gestionnaire d'événements n'est assigné actuellement à <paramref name="component" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.IsLocalizable">
      <summary>Obtient une valeur indiquant si cette propriété doit être localisée, comme spécifié dans <see cref="T:System.ComponentModel.LocalizableAttribute" />.</summary>
      <returns>
        <see langword="true" /> si le membre est marqué avec <see cref="T:System.ComponentModel.LocalizableAttribute" /> ayant la valeur <see langword="true" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.IsReadOnly">
      <summary>En cas de substitution dans une classe dérivée, obtient une valeur indiquant si cette propriété est en lecture seule.</summary>
      <returns>
        <see langword="true" /> si la propriété est en lecture seule ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.OnValueChanged(System.Object,System.EventArgs)">
      <summary>Déclenche l’événement <c>ValueChanged</c> que vous avez implémenté.</summary>
      <param name="component">Objet déclenchant l'événement.</param>
      <param name="e">
        <see cref="T:System.EventArgs" /> qui contient les données d'événement.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.PropertyType">
      <summary>En cas de substitution dans une classe dérivée, obtient le type de la propriété.</summary>
      <returns>
        <see cref="T:System.Type" /> représentant le type de la propriété.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.RemoveValueChanged(System.Object,System.EventHandler)">
      <summary>Permet à d'autres objets d'être avertis en cas de modification de cette propriété.</summary>
      <param name="component">Composant dont le gestionnaire doit être supprimé.</param>
      <param name="handler">Délégué à supprimer en tant qu'écouteur.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> ou <paramref name="handler" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.ResetValue(System.Object)">
      <summary>En cas de substitution dans une classe dérivée, rétablit la valeur par défaut de cette propriété du composant.</summary>
      <param name="component">Composant dont la valeur par défaut de la propriété doit être rétablie.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.SerializationVisibility">
      <summary>Obtient une valeur indiquant si cette propriété doit être sérialisée, comme spécifié dans <see cref="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" />.</summary>
      <returns>Une des valeurs d'énumération <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> spécifiant si cette propriété doit être sérialisée.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary>En cas de substitution dans une classe dérivée, affecte une autre valeur au composant.</summary>
      <param name="component">Composant dont la valeur de la propriété doit être définie.</param>
      <param name="value">Nouvelle valeur.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>En cas de substitution dans une classe dérivée, détermine une valeur indiquant si la valeur de cette propriété doit être persistante.</summary>
      <param name="component">Composant possédant la propriété dont la persistance doit être examinée.</param>
      <returns>
        <see langword="true" /> si la propriété doit être persistante ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.SupportsChangeEvents">
      <summary>Obtient une valeur qui indique si les notifications de modification des valeurs pour cette propriété peuvent provenir de l'extérieur du descripteur de propriété.</summary>
      <returns>
        <see langword="true" /> si les notifications de modification des valeurs peuvent provenir de l'extérieur du descripteur de propriété ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptorCollection">
      <summary>Représente une collection d'objets <see cref="T:System.ComponentModel.PropertyDescriptor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />.</summary>
      <param name="properties">Tableau de type <see cref="T:System.ComponentModel.PropertyDescriptor" /> qui fournit les propriétés de cette collection.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[],System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />, qui est éventuellement en lecture seule.</summary>
      <param name="properties">Tableau de type <see cref="T:System.ComponentModel.PropertyDescriptor" /> qui fournit les propriétés de cette collection.</param>
      <param name="readOnly">La valeur <see langword="true" /> spécifie que la collection ne peut pas être modifiée.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Add(System.ComponentModel.PropertyDescriptor)">
      <summary>Ajoute l'objet <see cref="T:System.ComponentModel.PropertyDescriptor" /> spécifié à la collection.</summary>
      <param name="value">Objet <see cref="T:System.ComponentModel.PropertyDescriptor" /> à ajouter à la collection.</param>
      <returns>Index du <see cref="T:System.ComponentModel.PropertyDescriptor" /> qui a été ajouté à la collection.</returns>
      <exception cref="T:System.NotSupportedException">La collection est en lecture seule.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Clear">
      <summary>Supprime tous les objets <see cref="T:System.ComponentModel.PropertyDescriptor" /> de la collection.</summary>
      <exception cref="T:System.NotSupportedException">La collection est en lecture seule.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Contains(System.ComponentModel.PropertyDescriptor)">
      <summary>Retourne une valeur indiquant si la collection contient le <see cref="T:System.ComponentModel.PropertyDescriptor" /> donné.</summary>
      <param name="value">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> à rechercher dans la collection.</param>
      <returns>
        <see langword="true" /> si la collection contient le <see cref="T:System.ComponentModel.PropertyDescriptor" /> donné ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.CopyTo(System.Array,System.Int32)">
      <summary>Copie la totalité de la collection dans un tableau, en commençant au numéro d'index spécifié.</summary>
      <param name="array">Tableau d'objets <see cref="T:System.ComponentModel.PropertyDescriptor" /> dans lequel copier les éléments de la collection.</param>
      <param name="index">Index du paramètre <paramref name="array" /> au niveau duquel commencer la copie.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Count">
      <summary>Obtient le nombre de descripteurs de propriété dans la collection.</summary>
      <returns>Nombre de descripteurs de propriété dans la collection.</returns>
    </member>
    <member name="F:System.ComponentModel.PropertyDescriptorCollection.Empty">
      <summary>Spécifie une collection vide que vous pouvez utiliser, plutôt que d'en créer une sans élément. Ce champ <see langword="static" /> est en lecture seule.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Find(System.String,System.Boolean)">
      <summary>Retourne le <see cref="T:System.ComponentModel.PropertyDescriptor" /> portant le nom spécifié, en utilisant une valeur booléenne pour indiquer si la casse doit être ignorée.</summary>
      <param name="name">Nom du <see cref="T:System.ComponentModel.PropertyDescriptor" /> à retourner à partir de la collection.</param>
      <param name="ignoreCase">
        <see langword="true" /> si vous souhaitez ignorer la casse de la propriété ; sinon, <see langword="false" />.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> portant le nom spécifié, ou <see langword="null" /> si la propriété n'existe pas.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.GetEnumerator">
      <summary>Retourne un énumérateur pour cette classe.</summary>
      <returns>Énumérateur de type <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.IndexOf(System.ComponentModel.PropertyDescriptor)">
      <summary>Retourne l'index du <see cref="T:System.ComponentModel.PropertyDescriptor" /> donné.</summary>
      <param name="value">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> dont l'index doit être retourné.</param>
      <returns>Index du <see cref="T:System.ComponentModel.PropertyDescriptor" /> donné.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Insert(System.Int32,System.ComponentModel.PropertyDescriptor)">
      <summary>Ajoute <see cref="T:System.ComponentModel.PropertyDescriptor" /> à la collection, au numéro d'index spécifié.</summary>
      <param name="index">Index auquel ajouter le paramètre <paramref name="value" /> à la collection.</param>
      <param name="value">Objet <see cref="T:System.ComponentModel.PropertyDescriptor" /> à ajouter à la collection.</param>
      <exception cref="T:System.NotSupportedException">La collection est en lecture seule.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.Collections.IComparer)">
      <summary>Trie les membres de cette collection avec le <see cref="T:System.Collections.IComparer" /> spécifié.</summary>
      <param name="sorter">Comparateur à utiliser pour trier les objets <see cref="T:System.ComponentModel.PropertyDescriptor" /> dans cette collection.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.String[])">
      <summary>Trie les membres de cette collection. L'ordre spécifié est appliqué en premier, suivi du tri par défaut pour cette collection (généralement l'ordre alphabétique).</summary>
      <param name="names">Tableau de chaînes décrivant l'ordre dans lequel trier les objets <see cref="T:System.ComponentModel.PropertyDescriptor" /> dans cette collection.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)">
      <summary>Obtient ou définit le <see cref="T:System.ComponentModel.PropertyDescriptor" /> situé au numéro d'index spécifié.</summary>
      <param name="index">Index de base zéro du <see cref="T:System.ComponentModel.PropertyDescriptor" /> à obtenir ou définir.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> avec le numéro d'index spécifié.</returns>
      <exception cref="T:System.IndexOutOfRangeException">Le paramètre <paramref name="index" /> n'est pas un index valide pour <see cref="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)" />.</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.String)">
      <summary>Obtient ou définit <see cref="T:System.ComponentModel.PropertyDescriptor" /> portant le nom spécifié.</summary>
      <param name="name">Nom du <see cref="T:System.ComponentModel.PropertyDescriptor" /> à obtenir à partir de la collection.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> portant le nom spécifié, ou <see langword="null" /> si aucune propriété n'existe.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Remove(System.ComponentModel.PropertyDescriptor)">
      <summary>Supprime l’objet <see cref="T:System.ComponentModel.PropertyDescriptor" /> spécifié de la collection.</summary>
      <param name="value">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> à supprimer de la collection.</param>
      <exception cref="T:System.NotSupportedException">La collection est en lecture seule.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.RemoveAt(System.Int32)">
      <summary>Supprime le <see cref="T:System.ComponentModel.PropertyDescriptor" /> à l'index spécifié dans la collection.</summary>
      <param name="index">Index du <see cref="T:System.ComponentModel.PropertyDescriptor" /> à supprimer de la collection.</param>
      <exception cref="T:System.NotSupportedException">La collection est en lecture seule.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort">
      <summary>Trie les membres de cette collection en appliquant le tri par défaut pour cette collection, c'est-à-dire généralement l'ordre alphabétique.</summary>
      <returns>Nouveau <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> qui contient les objets <see cref="T:System.ComponentModel.PropertyDescriptor" /> triés.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.Collections.IComparer)">
      <summary>Trie les membres de cette collection avec le <see cref="T:System.Collections.IComparer" /> spécifié.</summary>
      <param name="comparer">Comparateur à utiliser pour trier les objets <see cref="T:System.ComponentModel.PropertyDescriptor" /> dans cette collection.</param>
      <returns>Nouveau <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> qui contient les objets <see cref="T:System.ComponentModel.PropertyDescriptor" /> triés.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[])">
      <summary>Trie les membres de cette collection. L'ordre spécifié est appliqué en premier, suivi du tri par défaut pour cette collection (généralement l'ordre alphabétique).</summary>
      <param name="names">Tableau de chaînes décrivant l'ordre dans lequel trier les objets <see cref="T:System.ComponentModel.PropertyDescriptor" /> dans cette collection.</param>
      <returns>Nouveau <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> qui contient les objets <see cref="T:System.ComponentModel.PropertyDescriptor" /> triés.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[],System.Collections.IComparer)">
      <summary>Trie les membres de cette collection. L'ordre spécifié est appliqué en premier, suivi du tri qui utilise le <see cref="T:System.Collections.IComparer" /> spécifié.</summary>
      <param name="names">Tableau de chaînes décrivant l'ordre dans lequel trier les objets <see cref="T:System.ComponentModel.PropertyDescriptor" /> dans cette collection.</param>
      <param name="comparer">Comparateur à utiliser pour trier les objets <see cref="T:System.ComponentModel.PropertyDescriptor" /> dans cette collection.</param>
      <returns>Nouveau <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> qui contient les objets <see cref="T:System.ComponentModel.PropertyDescriptor" /> triés.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#Count">
      <summary>Obtient le nombre d’éléments contenus dans la collection.</summary>
      <returns>Nombre d’éléments contenus dans la collection.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Obtient une valeur indiquant si l’accès à la collection est synchronisé (thread-safe).</summary>
      <returns>
        <see langword="true" /> si l’accès à la collection est synchronisé (thread-safe) ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#SyncRoot">
      <summary>Obtient un objet qui peut être utilisé pour synchroniser l’accès à la collection.</summary>
      <returns>Objet permettant de synchroniser l’accès à la collection.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>Ajoute un élément avec la clé et la valeur fournies à <see cref="T:System.Collections.IDictionary" />.</summary>
      <param name="key">
        <see cref="T:System.Object" /> à utiliser comme clé de l'élément à ajouter.</param>
      <param name="value">
        <see cref="T:System.Object" /> à utiliser comme valeur de l'élément à ajouter.</param>
      <exception cref="T:System.NotSupportedException">La collection est en lecture seule.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Clear">
      <summary>Supprime tous les éléments de <see cref="T:System.Collections.IDictionary" />.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Contains(System.Object)">
      <summary>Détermine si <see cref="T:System.Collections.IDictionary" /> contient un élément avec la clé spécifiée.</summary>
      <param name="key">Clé à rechercher dans <see cref="T:System.Collections.IDictionary" />.</param>
      <returns>
        <see langword="true" /> si <see cref="T:System.Collections.IDictionary" /> contient un élément avec la clé ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#GetEnumerator">
      <summary>Retourne un énumérateur pour cette classe.</summary>
      <returns>Énumérateur de type <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsFixedSize">
      <summary>Obtient une valeur indiquant si <see cref="T:System.Collections.IDictionary" /> est de taille fixe.</summary>
      <returns>
        <see langword="true" /> si <see cref="T:System.Collections.IDictionary" /> est de taille fixe ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsReadOnly">
      <summary>Obtient une valeur indiquant si <see cref="T:System.Collections.IDictionary" /> est en lecture seule.</summary>
      <returns>
        <see langword="true" /> si <see cref="T:System.Collections.IDictionary" /> est en lecture seule ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Item(System.Object)">
      <summary>Obtient ou définit l'élément à l'aide de la clé spécifiée.</summary>
      <param name="key">Clé de l'élément à obtenir ou définir.</param>
      <returns>Élément correspondant à la clé spécifiée.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Keys">
      <summary>Obtient un <see cref="T:System.Collections.ICollection" /> contenant les clés de <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> contenant les clés de <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Remove(System.Object)">
      <summary>Supprime l'élément avec la clé spécifiée d'<see cref="T:System.Collections.IDictionary" />.</summary>
      <param name="key">Clé de l'élément à supprimer.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Values">
      <summary>Obtient <see cref="T:System.Collections.ICollection" /> contenant les valeurs de <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> contenant les valeurs de <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retourne un <see cref="T:System.Collections.IEnumerator" /> pour <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> pour <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Add(System.Object)">
      <summary>Ajoute un élément à <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">Élément à ajouter à la collection.</param>
      <returns>Position à laquelle le nouvel élément est inséré.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Clear">
      <summary>Supprime tous les éléments de la collection.</summary>
      <exception cref="T:System.NotSupportedException">La collection est en lecture seule.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Contains(System.Object)">
      <summary>Détermine si la collection contient une valeur spécifique.</summary>
      <param name="value">Élément à localiser dans la collection.</param>
      <returns>
        <see langword="true" /> si l'élément se trouve dans la collection ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>Détermine l'index d'un élément spécifié dans la collection.</summary>
      <param name="value">Élément à localiser dans la collection.</param>
      <returns>Index de <paramref name="value" /> s'il figure dans la liste ; sinon -1.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Insère un élément dans la collection à un index spécifié.</summary>
      <param name="index">Index de base zéro au niveau duquel <paramref name="value" /> doit être inséré.</param>
      <param name="value">Élément à insérer dans la collection.</param>
      <exception cref="T:System.NotSupportedException">La collection est en lecture seule.</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsFixedSize">
      <summary>Obtient une valeur indiquant si la collection est de taille fixe.</summary>
      <returns>
        <see langword="true" /> si la collection a une taille fixe ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsReadOnly">
      <summary>Obtient une valeur indiquant si la collection est en lecture seule.</summary>
      <returns>
        <see langword="true" /> si la collection est en lecture seule ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Item(System.Int32)">
      <summary>Obtient ou définit un élément de la collection au niveau de l'index spécifié.</summary>
      <param name="index">Index de base zéro de l'élément à obtenir ou définir.</param>
      <returns>Élément au niveau de l'index spécifié.</returns>
      <exception cref="T:System.NotSupportedException">La collection est en lecture seule.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> n’est pas un <see cref="T:System.ComponentModel.PropertyDescriptor" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> est inférieur à 0.

ou -
<paramref name="index" /> est supérieur ou égal à <see cref="P:System.ComponentModel.EventDescriptorCollection.Count" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Remove(System.Object)">
      <summary>Supprime la première occurrence d'une valeur spécifiée dans la collection.</summary>
      <param name="value">Élément à supprimer de la collection.</param>
      <exception cref="T:System.NotSupportedException">La collection est en lecture seule.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Supprime l'élément au niveau de l'index spécifié.</summary>
      <param name="index">Index de base zéro de l'élément à supprimer.</param>
      <exception cref="T:System.NotSupportedException">La collection est en lecture seule.</exception>
    </member>
    <member name="T:System.ComponentModel.PropertyTabAttribute">
      <summary>Identifie le ou les onglets de propriétés à afficher pour la ou les classes spécifiées.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.PropertyTabAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.PropertyTabAttribute" /> avec le nom de la classe de l'onglet spécifié.</summary>
      <param name="tabClassName">Nom complet de l'assembly du type de l'onglet à créer. Pour obtenir un exemple de cette convention de mise en forme, consultez <see cref="P:System.Type.AssemblyQualifiedName" />.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.String,System.ComponentModel.PropertyTabScope)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.PropertyTabAttribute" /> avec le nom de la classe de l'onglet spécifié et la portée de l'onglet.</summary>
      <param name="tabClassName">Nom complet de l'assembly du type de l'onglet à créer. Pour obtenir un exemple de cette convention de mise en forme, consultez <see cref="P:System.Type.AssemblyQualifiedName" />.</param>
      <param name="tabScope">
        <see cref="T:System.ComponentModel.PropertyTabScope" /> indiquant la portée de cet onglet. Si la portée a la valeur <see cref="F:System.ComponentModel.PropertyTabScope.Component" />, elle est affichée uniquement pour les composants avec le <see cref="T:System.ComponentModel.PropertyTabAttribute" /> correspondant. Si elle a la valeur <see cref="F:System.ComponentModel.PropertyTabScope.Document" />, elle est affichée pour tous les composants du document.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tabScope" /> n'est pas <see cref="F:System.ComponentModel.PropertyTabScope.Document" />, ni <see cref="F:System.ComponentModel.PropertyTabScope.Component" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.PropertyTabAttribute" /> à l'aide du type d'onglet spécifié.</summary>
      <param name="tabClass">Type de l'onglet à créer.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.Type,System.ComponentModel.PropertyTabScope)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.PropertyTabAttribute" /> avec le type d'onglet spécifié et la portée de l'onglet.</summary>
      <param name="tabClass">Type de l'onglet à créer.</param>
      <param name="tabScope">
        <see cref="T:System.ComponentModel.PropertyTabScope" /> indiquant la portée de cet onglet. Si la portée a la valeur <see cref="F:System.ComponentModel.PropertyTabScope.Component" />, elle est affichée uniquement pour les composants avec le <see cref="T:System.ComponentModel.PropertyTabAttribute" /> correspondant. Si elle a la valeur <see cref="F:System.ComponentModel.PropertyTabScope.Document" />, elle est affichée pour tous les composants du document.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tabScope" /> n'est pas <see cref="F:System.ComponentModel.PropertyTabScope.Document" />, ni <see cref="F:System.ComponentModel.PropertyTabScope.Component" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.Equals(System.ComponentModel.PropertyTabAttribute)">
      <summary>Retourne une valeur indiquant si cette instance est égale à un attribut spécifié.</summary>
      <param name="other">
        <see cref="T:System.ComponentModel.PropertyTabAttribute" /> à comparer à cette instance ou <see langword="null" />.</param>
      <returns>
        <see langword="true" /> si les instances de <see cref="T:System.ComponentModel.PropertyTabAttribute" /> sont égales ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.TypeLoadException">Les types spécifiés par la propriété <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> du paramètre <paramref name="other" /> sont introuvables.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.Equals(System.Object)">
      <summary>Retourne une valeur indiquant si cette instance équivaut à un objet spécifié.</summary>
      <param name="other">Objet à comparer à cette instance ou <see langword="null" />.</param>
      <returns>
        <see langword="true" /> si <paramref name="other" /> fait référence à la même instance de <see cref="T:System.ComponentModel.PropertyTabAttribute" /> ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.TypeLoadException">Les types spécifiés par la propriété <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> du paramètre <paramref name="other" /> sont introuvables.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.GetHashCode">
      <summary>Obtient le code de hachage de cet objet.</summary>
      <returns>Code de hachage de l'objet auquel appartient l'attribut.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.InitializeArrays(System.String[],System.ComponentModel.PropertyTabScope[])">
      <summary>Initialise l'attribut à l'aide des noms de classes d'onglets spécifiés et d'un tableau de portées d'onglet.</summary>
      <param name="tabClassNames">Tableau des noms qualifiés complets des types à créer pour les onglets de la fenêtre Propriétés.</param>
      <param name="tabScopes">Portée de chaque onglet. Si la portée a la valeur <see cref="F:System.ComponentModel.PropertyTabScope.Component" />, elle est affichée uniquement pour les composants avec le <see cref="T:System.ComponentModel.PropertyTabAttribute" /> correspondant. Si elle a la valeur <see cref="F:System.ComponentModel.PropertyTabScope.Document" />, elle est affichée pour tous les composants du document.</param>
      <exception cref="T:System.ArgumentException">Une ou plusieurs des valeurs dans <paramref name="tabScopes" /> ne sont pas <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> ni <see cref="F:System.ComponentModel.PropertyTabScope.Component" />.

ou -
La longueur des tableaux <paramref name="tabClassNames" /> et <paramref name="tabScopes" /> est différente.

ou -
<paramref name="tabClassNames" /> ou <paramref name="tabScopes" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.InitializeArrays(System.Type[],System.ComponentModel.PropertyTabScope[])">
      <summary>Initialise l'attribut à l'aide des noms de classes d'onglets spécifiés et d'un tableau de portées d'onglet.</summary>
      <param name="tabClasses">Types des onglets à créer.</param>
      <param name="tabScopes">Portée de chaque onglet. Si la portée a la valeur <see cref="F:System.ComponentModel.PropertyTabScope.Component" />, elle est affichée uniquement pour les composants avec le <see cref="T:System.ComponentModel.PropertyTabAttribute" /> correspondant. Si elle a la valeur <see cref="F:System.ComponentModel.PropertyTabScope.Document" />, elle est affichée pour tous les composants du document.</param>
      <exception cref="T:System.ArgumentException">Une ou plusieurs des valeurs dans <paramref name="tabScopes" /> ne sont pas <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> ni <see cref="F:System.ComponentModel.PropertyTabScope.Component" />.

ou -
La longueur des tableaux <paramref name="tabClassNames" /> et <paramref name="tabScopes" /> est différente.

ou -
<paramref name="tabClassNames" /> ou <paramref name="tabScopes" /> est <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabClasses">
      <summary>Obtient les types d'onglets utilisés par cet attribut.</summary>
      <returns>Tableau de types indiquant les types d'onglets utilisés par cet attribut.</returns>
      <exception cref="T:System.TypeLoadException">Les types spécifiés par la propriété <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> sont introuvables.</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabClassNames">
      <summary>Obtient les noms des classes d'onglets utilisées par cet attribut.</summary>
      <returns>Noms des classes d'onglets utilisées par cet attribut.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabScopes">
      <summary>Obtient un tableau des portées d'onglet de chaque onglet de ce <see cref="T:System.ComponentModel.PropertyTabAttribute" />.</summary>
      <returns>Tableau d'objets <see cref="T:System.ComponentModel.PropertyTabScope" /> indiquant les portées des onglets.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyTabScope">
      <summary>Définit des identificateurs qui spécifient la portée de la persistance d'un onglet de la fenêtre Propriétés.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Component">
      <summary>Cet onglet est propre au composant en cours. Il est ajouté à la fenêtre Propriétés du composant en cours uniquement et supprimé lorsque le composant n'est plus sélectionné.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Document">
      <summary>Cet onglet est propre au document actif. Il est ajouté à la fenêtre Propriétés et supprimé en cas de modification du document actuellement sélectionné.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Global">
      <summary>Cet onglet est ajouté à la fenêtre Propriétés et ne peut être supprimé qu'explicitement par un composant parent.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Static">
      <summary>Cet onglet est ajouté à la fenêtre Propriétés et ne peut pas être supprimé.</summary>
    </member>
    <member name="T:System.ComponentModel.ProvidePropertyAttribute">
      <summary>Spécifie le nom de la propriété qu'un implémenteur de <see cref="T:System.ComponentModel.IExtenderProvider" /> apporte aux autres composants. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.#ctor(System.String,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> avec le nom de la propriété et le type de son destinataire.</summary>
      <param name="propertyName">Nom de la propriété étendant à un objet du type spécifié.</param>
      <param name="receiverTypeName">Nom du type de données que cette propriété peut étendre.</param>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.#ctor(System.String,System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> avec le nom de la propriété et son <see cref="T:System.Type" />.</summary>
      <param name="propertyName">Nom de la propriété étendant à un objet du type spécifié.</param>
      <param name="receiverType">
        <see cref="T:System.Type" /> du type de données de l'objet pouvant recevoir la propriété.</param>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.Equals(System.Object)">
      <summary>Retourne une valeur indiquant si la valeur de l'objet donné est égale au <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> en cours.</summary>
      <param name="obj">Objet dont l'égalité des valeurs doit être vérifiée.</param>
      <returns>
        <see langword="true" /> si la valeur de l'objet donné est égale à celle de la valeur actuelle ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.GetHashCode">
      <summary>Retourne le code de hachage de cette instance.</summary>
      <returns>Code de hachage du <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> actuel.</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.PropertyName">
      <summary>Obtient le nom d'une propriété fournie par cette classe.</summary>
      <returns>Nom d'une propriété fournie par cette classe.</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.ReceiverTypeName">
      <summary>Obtient le nom du type de données que cette propriété peut étendre.</summary>
      <returns>Nom du type de données que cette propriété peut étendre.</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.TypeId">
      <summary>Obtient un identificateur unique pour cet attribut.</summary>
      <returns>
        <see cref="T:System.Object" /> qui est un identificateur unique pour l'attribut.</returns>
    </member>
    <member name="T:System.ComponentModel.RecommendedAsConfigurableAttribute">
      <summary>Spécifie que la propriété peut être utilisée comme paramètre d'application.</summary>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.#ctor(System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" />.</summary>
      <param name="recommendedAsConfigurable">
        <see langword="true" /> si la propriété à laquelle est lié cet attribut peut être utilisée comme paramètre d'application ; sinon, <see langword="false" />.</param>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.Default">
      <summary>Spécifie la valeur par défaut de <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" /> (<see cref="F:System.ComponentModel.RecommendedAsConfigurableAttribute.No" />). Ce champ <see langword="static" /> est en lecture seule.</summary>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.Equals(System.Object)">
      <summary>Indique si cette instance et un objet spécifié sont égaux.</summary>
      <param name="obj">Autre objet de comparaison.</param>
      <returns>
        <see langword="true" /> si <paramref name="obj" /> est égal à cette instance ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.GetHashCode">
      <summary>Retourne le code de hachage de cette instance.</summary>
      <returns>Code de hachage du <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" /> actuel.</returns>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.IsDefaultAttribute">
      <summary>Indique si la valeur de cette instance est la valeur par défaut pour la classe.</summary>
      <returns>
        <see langword="true" /> si cette instance est l’attribut par défaut de la classe ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.No">
      <summary>Spécifie qu'une propriété ne peut pas être utilisée comme paramètre d'application. Ce champ <see langword="static" /> est en lecture seule.</summary>
    </member>
    <member name="P:System.ComponentModel.RecommendedAsConfigurableAttribute.RecommendedAsConfigurable">
      <summary>Obtient une valeur indiquant si la propriété à laquelle est lié cet attribut peut être utilisée comme paramètre d'application.</summary>
      <returns>
        <see langword="true" /> si la propriété à laquelle est lié cet attribut peut être utilisée comme paramètre d'application ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.Yes">
      <summary>Spécifie qu'une propriété peut être utilisée comme paramètre d'application. Ce champ <see langword="static" /> est en lecture seule.</summary>
    </member>
    <member name="T:System.ComponentModel.ReferenceConverter">
      <summary>Fournit un convertisseur de type pour convertir des références d'objet vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.#ctor(System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ReferenceConverter" />.</summary>
      <param name="type">
        <see cref="T:System.Type" /> qui représente le type à associer à ce convertisseur de référence.</param>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtient une valeur indiquant si ce convertisseur peut convertir un objet du type source donné en objet de référence à l'aide du contexte spécifié.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="sourceType">
        <see cref="T:System.Type" /> qui représente le type à partir duquel vous voulez effectuer la conversion.</param>
      <returns>
        <see langword="true" /> si cet objet peut effectuer la conversion ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convertit l'objet donné en type référence.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> spécifiant la culture utilisée pour représenter la police.</param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir.</param>
      <returns>
        <see cref="T:System.Object" /> qui représente <paramref name="value" /> converti.</returns>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convertit l'objet de valeur en type référence en utilisant le contexte et les arguments spécifiés.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> spécifiant la culture utilisée pour représenter la police.</param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir.</param>
      <param name="destinationType">Type dans lequel convertir l'objet.</param>
      <returns>Objet converti.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Reçoit une collection de valeurs standard pour le type de données référence.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> contenant un jeu standard de valeurs valides ou <see langword="null" /> si le type de données ne prend pas en charge un jeu standard de valeurs.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtient une valeur indiquant si la liste de valeurs standard retournée par <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> est une liste exclusive.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns>
        <see langword="true" /> parce que le <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> retourné depuis <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> est une liste exhaustive de valeurs possibles. Cette méthode ne retourne jamais <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtient une valeur indiquant si cet objet prend en charge une série de valeurs standard qui peuvent être sélectionnées dans une liste.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns>
        <see langword="true" /> car <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> peut être appelé pour rechercher un ensemble de valeurs communes prises en charge par l'objet. Cette méthode ne retourne jamais <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.IsValueAllowed(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>Retourne une valeur indiquant si une valeur particulière peut être ajoutée à la collection des valeurs standard.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> pouvant fournir un contexte supplémentaire.</param>
      <param name="value">Valeur à contrôler.</param>
      <returns>
        <see langword="true" /> si la valeur est autorisée et peut être ajoutée à la collection de valeurs standard ; <see langword="false" /> si la valeur ne peut pas être ajoutée à la collection de valeurs standard.</returns>
    </member>
    <member name="T:System.ComponentModel.RefreshEventArgs">
      <summary>Fournit des données pour l'événement <see cref="E:System.ComponentModel.TypeDescriptor.Refreshed" />.</summary>
    </member>
    <member name="M:System.ComponentModel.RefreshEventArgs.#ctor(System.Object)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.RefreshEventArgs" /> avec le composant modifié.</summary>
      <param name="componentChanged">Composant modifié.</param>
    </member>
    <member name="M:System.ComponentModel.RefreshEventArgs.#ctor(System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.RefreshEventArgs" /> avec le type de composant modifié.</summary>
      <param name="typeChanged">
        <see cref="T:System.Type" /> modifié.</param>
    </member>
    <member name="P:System.ComponentModel.RefreshEventArgs.ComponentChanged">
      <summary>Obtient le composant dont les propriétés, les événements ou les extendeurs ont été modifiés.</summary>
      <returns>Composant dont les propriétés, les événements ou les extendeurs ont été modifiés, ou <see langword="null" /> si tous les composants du même type ont été modifiés.</returns>
    </member>
    <member name="P:System.ComponentModel.RefreshEventArgs.TypeChanged">
      <summary>Obtient le <see cref="T:System.Type" /> dont les propriétés, les événements ou les extensions ont été modifiés.</summary>
      <returns>
        <see cref="T:System.Type" /> dont les propriétés ou les événements ont été modifiés.</returns>
    </member>
    <member name="T:System.ComponentModel.RefreshEventHandler">
      <summary>Représente la méthode qui gère l'événement <see cref="E:System.ComponentModel.TypeDescriptor.Refreshed" /> déclenché lorsque <see cref="T:System.Type" /> ou un composant est modifié au moment du design.</summary>
      <param name="e">
        <see cref="T:System.ComponentModel.RefreshEventArgs" /> qui contient le composant ou le <see cref="T:System.Type" /> modifiés.</param>
    </member>
    <member name="T:System.ComponentModel.RunInstallerAttribute">
      <summary>Spécifie si le Custom Action Installer de Visual Studio ou Installutil.exe (Installer Tool) doit être appelé lors de l’installation de l’assembly.</summary>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.#ctor(System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.RunInstallerAttribute" />.</summary>
      <param name="runInstaller">
        <see langword="true" /> si un programme d'installation doit être appelé pendant l'installation d'un assembly ; sinon, <see langword="false" />.</param>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.Default">
      <summary>Spécifie la visibilité par défaut, à savoir <see cref="F:System.ComponentModel.RunInstallerAttribute.No" />. Ce champ <see langword="static" /> est en lecture seule.</summary>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.Equals(System.Object)">
      <summary>Détermine si la valeur du <see cref="T:System.ComponentModel.RunInstallerAttribute" /> spécifié est égale au <see cref="T:System.ComponentModel.RunInstallerAttribute" /> en cours.</summary>
      <param name="obj">Objet à comparer.</param>
      <returns>
        <see langword="true" /> si le <see cref="T:System.ComponentModel.RunInstallerAttribute" /> spécifié est égal au <see cref="T:System.ComponentModel.RunInstallerAttribute" /> actuel ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.GetHashCode">
      <summary>Génère un code de hachage pour le <see cref="T:System.ComponentModel.RunInstallerAttribute" /> en cours.</summary>
      <returns>Code de hachage du <see cref="T:System.ComponentModel.RunInstallerAttribute" /> actuel.</returns>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.IsDefaultAttribute">
      <summary>Détermine si cet attribut est l'attribut par défaut.</summary>
      <returns>
        <see langword="true" /> si cet attribut est la valeur par défaut pour cette classe d'attributs ; sinon <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.No">
      <summary>Spécifie que le Custom Action Installer de Visual Studio ou Installutil.exe (Installer Tool) ne doit pas être appelé lors de l’installation de l’assembly. Ce champ <see langword="static" /> est en lecture seule.</summary>
    </member>
    <member name="P:System.ComponentModel.RunInstallerAttribute.RunInstaller">
      <summary>Obtient une valeur indiquant si un programme d'installation doit être appelé lors de l'installation d'un assembly.</summary>
      <returns>
        <see langword="true" /> si un programme d'installation doit être appelé pendant l'installation d'un assembly ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.Yes">
      <summary>Spécifie que le Custom Action Installer de Visual Studio ou Installutil.exe (Installer Tool) doit être appelé lors de l’installation de l’assembly. Ce champ <see langword="static" /> est en lecture seule.</summary>
    </member>
    <member name="T:System.ComponentModel.SByteConverter">
      <summary>Fournit un convertisseur de type pour convertir des objets entiers non signés 8 bits vers et à partir d'une chaîne.</summary>
    </member>
    <member name="M:System.ComponentModel.SByteConverter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.SByteConverter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.SettingsBindableAttribute">
      <summary>Spécifie quand une propriété de composant peut être liée à un paramètre d'application.</summary>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.#ctor(System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.SettingsBindableAttribute" />.</summary>
      <param name="bindable">
        <see langword="true" /> pour spécifier qu'une propriété est appropriée pour une liaison de paramètres ; sinon, <see langword="false" />.</param>
    </member>
    <member name="P:System.ComponentModel.SettingsBindableAttribute.Bindable">
      <summary>Obtient une valeur qui indique si une propriété est appropriée pour une liaison de paramètres.</summary>
      <returns>
        <see langword="true" /> si la propriété est appropriée pour une liaison des paramètres ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.Equals(System.Object)">
      <summary>Retourne une valeur qui indique si cette instance est égale à un objet spécifié.</summary>
      <param name="obj">
        <see cref="T:System.Object" /> à comparer à cette instance ou une référence null (<see langword="Nothing" /> en Visual Basic).</param>
      <returns>
        <see langword="true" /> si <paramref name="obj" /> est égal au type et à la valeur de cette instance ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.GetHashCode">
      <summary>Retourne le code de hachage de cette instance.</summary>
      <returns>Code de hachage d'un entier signé 32 bits.</returns>
    </member>
    <member name="F:System.ComponentModel.SettingsBindableAttribute.No">
      <summary>Indique qu'une propriété n'est pas appropriée pour la liaison de paramètres.</summary>
    </member>
    <member name="F:System.ComponentModel.SettingsBindableAttribute.Yes">
      <summary>Spécifie qu'une propriété est appropriée pour la liaison de paramètres.</summary>
    </member>
    <member name="T:System.ComponentModel.SingleConverter">
      <summary>Fournit un convertisseur de type pour convertir des objets numériques à virgule flottante simple précision vers et à partir d'autres représentations différentes.</summary>
    </member>
    <member name="M:System.ComponentModel.SingleConverter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.SingleConverter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.StringConverter">
      <summary>Fournit un convertisseur de type pour convertir des objets de type chaîne vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.StringConverter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.StringConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.StringConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtient une valeur indiquant si ce convertisseur peut convertir un objet du type source donné en chaîne utilisant le contexte spécifié.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="sourceType">
        <see cref="T:System.Type" /> qui représente le type à partir duquel vous voulez effectuer la conversion.</param>
      <returns>
        <see langword="true" /> si ce convertisseur peut effectuer la conversion ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.StringConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convertit l'objet de valeur spécifiée en objet <see cref="T:System.String" />.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> à utiliser.</param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir.</param>
      <returns>
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <exception cref="T:System.NotSupportedException">La conversion n'a pas pu être effectuée.</exception>
    </member>
    <member name="T:System.ComponentModel.SyntaxCheck">
      <summary>Fournit des méthodes pour vérifier que le nom et le chemin d'accès de l'ordinateur sont conformes à une syntaxe spécifique. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckMachineName(System.String)">
      <summary>Vérifie la syntaxe du nom de l’ordinateur pour confirmer qu’elle ne contient pas le caractère « \ ».</summary>
      <param name="value">Chaîne contenant le nom de l'ordinateur à vérifier.</param>
      <returns>
        <see langword="true" /> si <paramref name="value" /> correspond au format de nom d'ordinateur approprié ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckPath(System.String)">
      <summary>Vérifie la syntaxe du chemin pour déterminer si elle commence par « \\ ».</summary>
      <param name="value">Chaîne contenant le chemin d'accès à vérifier.</param>
      <returns>
        <see langword="true" /> si <paramref name="value" /> correspond au format de chemin d'accès approprié ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckRootedPath(System.String)">
      <summary>Vérifie la syntaxe du chemin pour déterminer si elle commence par « \ » ou par la lettre de lecteur « C: ».</summary>
      <param name="value">Chaîne contenant le chemin d'accès à vérifier.</param>
      <returns>
        <see langword="true" /> si <paramref name="value" /> correspond au format de chemin d'accès approprié ; sinon <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.TimeSpanConverter">
      <summary>Fournit un convertisseur de type pour convertir des objets <see cref="T:System.TimeSpan" /> vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.TimeSpanConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtient une valeur indiquant si ce convertisseur peut convertir un objet du type source donné en un objet <see cref="T:System.TimeSpan" /> à l'aide du contexte spécifié.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="sourceType">
        <see cref="T:System.Type" /> qui représente le type à partir duquel vous voulez effectuer la conversion.</param>
      <returns>
        <see langword="true" /> si ce convertisseur peut effectuer la conversion ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtient une valeur indiquant si ce convertisseur peut convertir un objet en objet du type de destination donné en utilisant le contexte.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> qui représente le type vers lequel vous souhaitez effectuer la conversion.</param>
      <returns>
        <see langword="true" /> si ce convertisseur peut effectuer la conversion ; sinon <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> est <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n'est pas une valeur valide pour le type cible.</exception>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convertit l'objet donné en <see cref="T:System.TimeSpan" />.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> facultatif. Si la culture n'est pas spécifiée, la culture en cours est utilisée.</param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir.</param>
      <returns>
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n'est pas une valeur valide pour le type cible.</exception>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convertit l'objet donné en un autre type.</summary>
      <param name="context">Contexte de formateur.</param>
      <param name="culture">Culture dans laquelle <paramref name="value" /> doit être converti.</param>
      <param name="value">Objet à convertir.</param>
      <param name="destinationType">Type dans lequel convertir l'objet.</param>
      <returns>Objet converti.</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemAttribute">
      <summary>Représente un attribut d’un élément de boîte à outils.</summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> et spécifie si les valeurs d'initialisation par défaut doivent être utilisées.</summary>
      <param name="defaultType">
        <see langword="true" /> pour créer un attribut d'élément de boîte à outils pour un type par défaut ; <see langword="false" /> pour n'associer aucune prise en charge d'élément de boîte à outils par défaut pour cet attribut.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> avec le nom du type spécifié.</summary>
      <param name="toolboxItemTypeName">Noms du type de l'élément de boîte à outils et de l'assembly qui contient le type.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> à l'aide du type spécifié de l'élément de boîte à outils.</summary>
      <param name="toolboxItemType">Type de l'élément de boîte à outils.</param>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemAttribute.Default">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> et affecte le type par défaut, <see cref="T:System.Drawing.Design.ToolboxItem" />. Ce champ est en lecture seule.</summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.Equals(System.Object)">
      <summary>Retourne une valeur qui indique si cette instance est égale à un objet spécifié.</summary>
      <param name="obj">
        <see cref="T:System.Object" /> à comparer à cette instance ou une référence null (<see langword="Nothing" /> en Visual Basic).</param>
      <returns>
        <see langword="true" /> si <paramref name="obj" /> est égal au type et à la valeur de cette instance ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.GetHashCode">
      <summary>Retourne le code de hachage de cette instance.</summary>
      <returns>Code de hachage d'un entier signé 32 bits.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.IsDefaultAttribute">
      <summary>Obtient une valeur indiquant si la valeur actuelle de l'attribut est sa valeur par défaut.</summary>
      <returns>
        <see langword="true" /> si la valeur actuelle de l'attribut est la valeur par défaut ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemAttribute.None">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> et affecte au type la valeur <see langword="null" />. Ce champ est en lecture seule.</summary>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemAttribute.ToolboxItemType">
      <summary>Obtient ou définit le type de l'élément de boîte à outils.</summary>
      <returns>Type de l'élément de boîte à outils.</returns>
      <exception cref="T:System.ArgumentException">Le type est introuvable.</exception>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemAttribute.ToolboxItemTypeName">
      <summary>Obtient ou définit le nom du type du <see cref="T:System.Drawing.Design.ToolboxItem" /> en cours.</summary>
      <returns>Nom qualifié complet du type de l'élément de boîte à outils en cours.</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemFilterAttribute">
      <summary>Spécifie la chaîne de filtrage et le type de filtre à utiliser pour un élément de boîte à outils.</summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> à l'aide de la chaîne de filtrage spécifiée.</summary>
      <param name="filterString">Chaîne de filtrage de l'élément de boîte à outils.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.#ctor(System.String,System.ComponentModel.ToolboxItemFilterType)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> à l'aide de la chaîne de filtrage et du type de filtre spécifiés.</summary>
      <param name="filterString">Chaîne de filtrage de l'élément de boîte à outils.</param>
      <param name="filterType">
        <see cref="T:System.ComponentModel.ToolboxItemFilterType" /> indiquant le type du filtre.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.Equals(System.Object)">
      <summary>Retourne une valeur qui indique si cette instance est égale à un objet spécifié.</summary>
      <param name="obj">
        <see cref="T:System.Object" /> à comparer à cette instance ou une référence null (<see langword="Nothing" /> en Visual Basic).</param>
      <returns>
        <see langword="true" /> si <paramref name="obj" /> est égal au type et à la valeur de cette instance ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.FilterString">
      <summary>Obtient la chaîne de filtrage de l'élément de boîte à outils.</summary>
      <returns>Chaîne de filtrage de l'élément de boîte à outils.</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.FilterType">
      <summary>Obtient le type du filtre.</summary>
      <returns>
        <see cref="T:System.ComponentModel.ToolboxItemFilterType" /> qui indique le type du filtre.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.GetHashCode">
      <summary>Retourne le code de hachage de cette instance.</summary>
      <returns>Code de hachage d'un entier signé 32 bits.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.Match(System.Object)">
      <summary>Indique si l'objet spécifié possède une chaîne de filtrage correspondante.</summary>
      <param name="obj">Objet à tester pour découvrir une chaîne de filtrage correspondante.</param>
      <returns>
        <see langword="true" /> si l'objet spécifié possède une chaîne de filtrage correspondante ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel.</summary>
      <returns>Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.TypeId">
      <summary>Obtient l'ID de type de l'attribut.</summary>
      <returns>ID de type de cet attribut. Tous les objets <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> possédant la même chaîne de filtrage retournent le même ID de type.</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemFilterType">
      <summary>Définit les identificateurs utilisés pour indiquer le type de filtre utilisé par <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" />.</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Allow">
      <summary>Indique qu'une chaîne de filtrage d'élément de boîte à outils est autorisée, mais pas requise.</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Custom">
      <summary>Indique qu'un traitement personnalisé est requis pour déterminer si une chaîne de filtrage d'élément de boîte à outils doit être utilisée. Cette chaîne est généralement spécifiée sur une classe de concepteur racine pour indiquer que le concepteur souhaite accepter ou refuser un élément de boîte à outils par le biais du code. Le concepteur doit implémenter la méthode <see cref="M:System.Drawing.Design.IToolboxUser.GetToolSupported(System.Drawing.Design.ToolboxItem)" /> de l’interface <see cref="T:System.Drawing.Design.IToolboxUser" />.</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Prevent">
      <summary>Indique qu'une chaîne de filtrage d'élément de boîte à outils n'est pas autorisée. Si un concepteur et une classe de composant ont tous deux une chaîne de filtrage et que l’une des chaînes a la valeur <c>ToolboxItemFilterType.Prevent</c>, l’élément de boîte à outils ne sera pas disponible.</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Require">
      <summary>Indique qu'une chaîne de filtrage d'élément de boîte à outils doit être présente pour qu'un élément de boîte à outils soit activé.  Pour qu’un élément de boîte à outils avec un type de filtre <c>Require</c> puisse être activé, le concepteur et la classe de composant doivent avoir la même chaîne de filtrage. De plus, ni le concepteur ni la classe de composant ne doit avoir un type de filtre <c>Prevent</c>.</summary>
    </member>
    <member name="T:System.ComponentModel.TypeConverter">
      <summary>Propose un procédé unifié pour convertir les types de valeurs en d'autres types, ainsi que pour accéder aux valeurs et sous-propriétés standard.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.TypeConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Retourne une valeur indiquant si ce convertisseur peut convertir un objet du type donné en objet du type de ce convertisseur à l’aide du contexte spécifié.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="sourceType">
        <see cref="T:System.Type" /> qui représente le type à partir duquel opérer la conversion.</param>
      <returns>
        <see langword="true" /> si ce convertisseur peut effectuer la conversion ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)">
      <summary>Retourne une valeur indiquant si ce convertisseur peut convertir un objet du type donné en objet du type de ce convertisseur.</summary>
      <param name="sourceType">
        <see cref="T:System.Type" /> qui représente le type à partir duquel opérer la conversion.</param>
      <returns>
        <see langword="true" /> si ce convertisseur peut effectuer la conversion ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Retourne une valeur indiquant si ce convertisseur peut convertir l’objet en objet du type spécifié, à l’aide du contexte spécifié.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> qui représente le type vers lequel vous souhaitez convertir.</param>
      <returns>
        <see langword="true" /> si ce convertisseur peut effectuer la conversion ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)">
      <summary>Retourne une valeur indiquant si ce convertisseur peut convertir l'objet en objet du type spécifié.</summary>
      <param name="destinationType">
        <see cref="T:System.Type" /> qui représente le type vers lequel vous souhaitez convertir.</param>
      <returns>
        <see langword="true" /> si ce convertisseur peut effectuer la conversion ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convertit l’objet donné dans le type de ce convertisseur en utilisant les informations de contexte et de culture spécifiées.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> à utiliser comme culture actuelle.</param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir.</param>
      <returns>
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)">
      <summary>Convertit la valeur donnée en valeur du type de ce convertisseur.</summary>
      <param name="value">
        <see cref="T:System.Object" /> à convertir.</param>
      <returns>
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>Convertit la chaîne donnée au type de ce convertisseur, à l'aide des informations de culture indifférente et du contexte spécifiés.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="text">
        <see cref="T:System.String" /> à convertir.</param>
      <returns>
        <see cref="T:System.Object" /> représentant le texte converti.</returns>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)">
      <summary>Convertit la chaîne donnée en représentation sous forme de chaîne du type de ce convertisseur, à l'aide de la culture dite indifférente.</summary>
      <param name="text">
        <see cref="T:System.String" /> à convertir.</param>
      <returns>
        <see cref="T:System.Object" /> représentant le texte converti.</returns>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
      <summary>Convertit le texte donné en objet, à l'aide du contexte et des informations de culture spécifiés.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> Si la valeur <see langword="null" /> est passée, la culture est supposée être la culture actuelle.</param>
      <param name="text">
        <see cref="T:System.String" /> à convertir.</param>
      <returns>
        <see cref="T:System.Object" /> représentant le texte converti.</returns>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>Convertit le texte donné en objet, à l'aide du contexte spécifié.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="text">
        <see cref="T:System.String" /> à convertir.</param>
      <returns>
        <see cref="T:System.Object" /> représentant le texte converti.</returns>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.String)">
      <summary>Convertit le texte spécifié en objet.</summary>
      <param name="text">Représentation textuelle de l'objet à convertir.</param>
      <returns>
        <see cref="T:System.Object" /> représentant le texte converti.</returns>
      <exception cref="T:System.NotSupportedException">Impossible de convertir la chaîne vers l'objet approprié.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convertit l’objet de valeur donné en type spécifié, en utilisant les informations de contexte et de culture spécifiées.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> Si la valeur <see langword="null" /> est passée, la culture est supposée être la culture actuelle.</param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> auquel le paramètre <paramref name="value" /> doit être converti.</param>
      <returns>
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="destinationType" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)">
      <summary>Convertit l'objet de valeur donné en objet du type spécifié, à l'aide des arguments.</summary>
      <param name="value">
        <see cref="T:System.Object" /> à convertir.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> auquel le paramètre <paramref name="value" /> doit être converti.</param>
      <returns>
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="destinationType" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>Convertit la valeur spécifiée en représentation sous forme de chaîne de culture dite indifférente, à l'aide du contexte déterminé.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir.</param>
      <returns>
        <see cref="T:System.String" /> qui représente la valeur convertie.</returns>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)">
      <summary>Convertit la valeur spécifiée en représentation sous forme de chaîne de culture dite indifférente.</summary>
      <param name="value">
        <see cref="T:System.Object" /> à convertir.</param>
      <returns>
        <see cref="T:System.String" /> qui représente la valeur convertie.</returns>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convertit la valeur donnée en représentation sous forme de chaîne, à l'aide du contexte et des informations de culture spécifiés.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> Si la valeur <see langword="null" /> est passée, la culture est supposée être la culture actuelle.</param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir.</param>
      <returns>
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>Convertit la valeur donnée en représentation sous forme de chaîne, à l'aide du contexte déterminé.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir.</param>
      <returns>
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.Object)">
      <summary>Convertit la valeur spécifiée en représentation sous forme de chaîne.</summary>
      <param name="value">
        <see cref="T:System.Object" /> à convertir.</param>
      <returns>
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)">
      <summary>Recrée un <see cref="T:System.Object" /> en fonction d'un jeu de valeurs de propriétés de l'objet.</summary>
      <param name="propertyValues">
        <see cref="T:System.Collections.IDictionary" /> représentant un dictionnaire de nouvelles valeurs de propriétés.</param>
      <returns>
        <see cref="T:System.Object" /> représentant le <see cref="T:System.Collections.IDictionary" /> donné, ou <see langword="null" /> si l’objet ne peut pas être créé. Cette méthode retourne toujours la valeur <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>Crée une instance du type auquel ce <see cref="T:System.ComponentModel.TypeConverter" /> est associé, en utilisant le contexte spécifié, en fonction d’un ensemble de valeurs de propriétés de l’objet.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="propertyValues">
        <see cref="T:System.Collections.IDictionary" /> de nouvelles valeurs de propriétés.</param>
      <returns>
        <see cref="T:System.Object" /> représentant le <see cref="T:System.Collections.IDictionary" /> donné, ou <see langword="null" /> si l’objet ne peut pas être créé. Cette méthode retourne toujours la valeur <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)">
      <summary>Retourne une exception à lever lorsqu'une conversion ne peut pas être effectuée.</summary>
      <param name="value">
        <see cref="T:System.Object" /> à convertir, ou <see langword="null" /> si l'objet n'est pas disponible.</param>
      <returns>
        <see cref="T:System.Exception" /> représentant l'exception à lever lorsqu'une conversion ne peut pas être effectuée.</returns>
      <exception cref="T:System.NotSupportedException">Automatiquement levée par cette méthode.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)">
      <summary>Retourne une exception à lever lorsqu'une conversion ne peut pas être effectuée.</summary>
      <param name="value">
        <see cref="T:System.Object" /> à convertir, ou <see langword="null" /> si l'objet n'est pas disponible.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> représentant le type vers lequel la conversion tentait de s'effectuer.</param>
      <returns>
        <see cref="T:System.Exception" /> représentant l'exception à lever lorsqu'une conversion ne peut pas être effectuée.</returns>
      <exception cref="T:System.NotSupportedException">Automatiquement levée par cette méthode.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported">
      <summary>Retourne une valeur indiquant si la modification d'une valeur de cet objet nécessite un appel à la méthode <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> pour créer une nouvelle valeur.</summary>
      <returns>
        <see langword="true" /> si la modification d'une propriété de cet objet requiert l'appel de <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> pour la création d'une nouvelle valeur ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Retourne une valeur indiquant si la modification d'une valeur de cet objet nécessite l'appel à <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> pour la création d'une nouvelle valeur, à l'aide du contexte spécifié.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns>
        <see langword="true" /> si la modification d'une propriété de cet objet requiert l'appel de <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> pour la création d'une nouvelle valeur ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>Retourne une collection de propriétés pour le type de tableau spécifié par le paramètre de valeur, à l'aide du contexte déterminé.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="value">
        <see cref="T:System.Object" /> spécifiant le type de tableau pour lequel obtenir des propriétés.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> possédant les propriétés exposées pour ce type de données, ou <see langword="null" /> en l'absence de propriétés.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Retourne une collection de propriétés pour le type de tableau spécifié par le paramètre de valeur, à l'aide du contexte et des attributs déterminés.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="value">
        <see cref="T:System.Object" /> spécifiant le type de tableau pour lequel obtenir des propriétés.</param>
      <param name="attributes">Tableau de type <see cref="T:System.Attribute" /> utilisé comme filtre.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> possédant les propriétés exposées pour ce type de données, ou <see langword="null" /> en l'absence de propriétés.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)">
      <summary>Retourne une collection de propriétés pour le type de tableau spécifié par le paramètre de valeur.</summary>
      <param name="value">
        <see cref="T:System.Object" /> spécifiant le type de tableau pour lequel obtenir des propriétés.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> possédant les propriétés exposées pour ce type de données, ou <see langword="null" /> en l'absence de propriétés.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetPropertiesSupported">
      <summary>Retourne une valeur indiquant si l'objet prend en charge les propriétés.</summary>
      <returns>
        <see langword="true" /> si <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> doit être appelé pour rechercher les propriétés de cet objet ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Retourne une valeur indiquant si cet objet prend en charge les propriétés, en utilisant le contexte spécifié.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns>
        <see langword="true" /> si <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> doit être appelé pour rechercher les propriétés de cet objet ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValues">
      <summary>Retourne une collection de valeurs standard à partir du contexte par défaut du type de données pour lequel ce convertisseur de type est conçu.</summary>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> contenant un jeu standard de valeurs valides, ou <see langword="null" /> si le type de données ne prend pas en charge un jeu de valeurs standard.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Retourne une collection de valeurs standard pour le type de données pour lequel ce convertisseur de type est conçu lorsqu'il est fourni avec un contexte de format.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format qui peut être utilisé pour extraire des informations supplémentaires sur l'environnement à partir duquel ce convertisseur est appelé. Ce paramètre ou les propriétés de ce paramètre peuvent être <see langword="null" />.</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> contenant un jeu standard de valeurs valides ou <see langword="null" /> si le type de données ne prend pas en charge un jeu standard de valeurs.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive">
      <summary>Retourne une valeur indiquant si la collection de valeurs standard retournée par <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> est une liste exclusive.</summary>
      <returns>
        <see langword="true" /> si le <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> retourné par <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> est une liste exhaustive des valeurs possibles ; <see langword="false" /> si d'autres valeurs sont possibles.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Retourne une valeur indiquant si la collection de valeurs standard retournée par <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> est une liste exclusive des valeurs possibles, utilisant le contexte spécifié.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns>
        <see langword="true" /> si le <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> retourné par <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> est une liste exhaustive des valeurs possibles ; <see langword="false" /> si d'autres valeurs sont possibles.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported">
      <summary>Retourne une valeur indiquant si cet objet prend en charge un jeu standard de valeurs qui peuvent être sélectionnées dans une liste.</summary>
      <returns>
        <see langword="true" /> si <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> doit être appelée pour rechercher un jeu commun de valeurs prises en charge par l'objet ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Retourne une valeur indiquant si cet objet prend en charge un jeu de valeurs standard pouvant être sélectionnées dans une liste, à l'aide du contexte spécifié.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns>
        <see langword="true" /> si <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> doit être appelée pour rechercher un jeu commun de valeurs prises en charge par l'objet ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>Retourne une valeur indiquant si l'objet de valeur donné est valide pour ce type et pour le contexte spécifié.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="value">
        <see cref="T:System.Object" /> dont la validité doit être testée.</param>
      <returns>
        <see langword="true" /> si la valeur spécifiée est valide pour cet objet ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.IsValid(System.Object)">
      <summary>Retourne une valeur indiquant si l'objet de valeur donné est valide pour ce type.</summary>
      <param name="value">Objet dont la validité doit être testée.</param>
      <returns>
        <see langword="true" /> si la valeur spécifiée est valide pour cet objet ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor">
      <summary>Représente une classe <see langword="abstract" /> qui fournit des propriétés pour les objets qui n'en ont pas.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.#ctor(System.Type,System.String,System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor" />.</summary>
      <param name="componentType">
        <see cref="T:System.Type" /> représentant le type du composant auquel ce descripteur de propriété est lié.</param>
      <param name="name">Nom de la propriété.</param>
      <param name="propertyType">
        <see cref="T:System.Type" /> représentant le type de données de cette propriété.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.#ctor(System.Type,System.String,System.Type,System.Attribute[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor" />.</summary>
      <param name="componentType">
        <see cref="T:System.Type" /> représentant le type du composant auquel ce descripteur de propriété est lié.</param>
      <param name="name">Nom de la propriété.</param>
      <param name="propertyType">
        <see cref="T:System.Type" /> représentant le type de données de cette propriété.</param>
      <param name="attributes">Tableau <see cref="T:System.Attribute" /> contenant les attributs à associer à la propriété.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.CanResetValue(System.Object)">
      <summary>Retourne une valeur indiquant si la réinitialisation du composant modifie sa valeur.</summary>
      <param name="component">Composant dont la fonction de réinitialisation doit être testée.</param>
      <returns>
        <see langword="true" /> si la réinitialisation du composant modifie sa valeur ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ComponentType">
      <summary>Obtient le type de composant auquel cette description de propriété est liée.</summary>
      <returns>
        <see cref="T:System.Type" /> représentant le type du composant auquel cette propriété est liée.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.IsReadOnly">
      <summary>Obtient une valeur indiquant si cette propriété est en lecture seule.</summary>
      <returns>
        <see langword="true" /> si la propriété est en lecture seule ; <see langword="false" /> si la propriété est en lecture/écriture.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.PropertyType">
      <summary>Obtient le type de la propriété.</summary>
      <returns>
        <see cref="T:System.Type" /> représentant le type de la propriété.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ResetValue(System.Object)">
      <summary>Réinitialise la valeur pour cette propriété du composant.</summary>
      <param name="component">Composant dont la valeur de la propriété doit être rétablie.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>Retourne une valeur indiquant si la valeur de cette propriété peut être persistante.</summary>
      <param name="component">Composant possédant la propriété dont la persistance doit être examinée.</param>
      <returns>
        <see langword="true" /> si la valeur de la propriété peut être persistante ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])">
      <summary>Trie une collection de propriétés.</summary>
      <param name="props">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> possédant les propriétés à trier.</param>
      <param name="names">Tableau de noms triés dans l'ordre dans lequel les propriétés doivent apparaître dans la collection.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> qui contient les propriétés triées.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverter.StandardValuesCollection">
      <summary>Représente une collection de valeurs.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.#ctor(System.Collections.ICollection)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />.</summary>
      <param name="values">
        <see cref="T:System.Collections.ICollection" /> représentant les objets à insérer dans la collection.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.CopyTo(System.Array,System.Int32)">
      <summary>Copie le contenu de cette collection dans un tableau.</summary>
      <param name="array">
        <see cref="T:System.Array" /> représentant le tableau vers lequel effectuer la copie.</param>
      <param name="index">Index à partir duquel commencer.</param>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.Count">
      <summary>Obtient le nombre d’objets dans la collection.</summary>
      <returns>Nombre d'objets de la collection.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.GetEnumerator">
      <summary>Retourne un énumérateur pour cette collection.</summary>
      <returns>Énumérateur de type <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.Item(System.Int32)">
      <summary>Obtient l'objet au numéro d'index spécifié.</summary>
      <param name="index">Index de base zéro du <see cref="T:System.Object" /> à obtenir de la collection.</param>
      <returns>
        <see cref="T:System.Object" /> avec l'index spécifié.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Pour obtenir une description de ce membre, consultez <see cref="P:System.Collections.ICollection.IsSynchronized" />.</summary>
      <returns>
        <see langword="false" /> dans tous les cas.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.System#Collections#ICollection#SyncRoot">
      <summary>Pour obtenir une description de ce membre, consultez <see cref="P:System.Collections.ICollection.SyncRoot" />.</summary>
      <returns>
        <see langword="null" /> dans tous les cas.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverterAttribute">
      <summary>Spécifie le type à utiliser comme convertisseur de l'objet auquel cet attribut est lié.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.TypeConverterAttribute" /> avec le convertisseur de type par défaut, qui est une chaîne vide ("").</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.TypeConverterAttribute" /> en utilisant le nom de type spécifié comme étant le convertisseur de données pour l'objet auquel cet attribut est lié.</summary>
      <param name="typeName">Nom qualifié complet de la classe à utiliser pour la conversion de données de l'objet auquel cet attribut est lié.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.TypeConverterAttribute" /> en utilisant le type spécifié comme convertisseur de données pour l'objet auquel cet attribut est lié.</summary>
      <param name="type">
        <see cref="T:System.Type" /> représentant le type de la classe de convertisseur à utiliser pour la conversion de données de l'objet auquel cet attribut est lié.</param>
    </member>
    <member name="P:System.ComponentModel.TypeConverterAttribute.ConverterTypeName">
      <summary>Obtient le nom de type qualifié complet de <see cref="T:System.Type" /> à utiliser comme convertisseur pour l'objet auquel cet attribut est lié.</summary>
      <returns>Nom de type qualifié complet de <see cref="T:System.Type" /> à utiliser comme convertisseur pour l'objet auquel cet attribut est lié, ou une chaîne vide ("") s'il n'en existe aucun. La valeur par défaut est une chaîne vide ("").</returns>
    </member>
    <member name="F:System.ComponentModel.TypeConverterAttribute.Default">
      <summary>Spécifie le type à utiliser comme convertisseur de l'objet auquel cet attribut est lié.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.Equals(System.Object)">
      <summary>Retourne une valeur indiquant si la valeur de l'objet donné est égale au <see cref="T:System.ComponentModel.TypeConverterAttribute" /> en cours.</summary>
      <param name="obj">Objet dont l'égalité des valeurs doit être vérifiée.</param>
      <returns>
        <see langword="true" /> si la valeur de l'objet donné est égale à celle du <see cref="T:System.ComponentModel.TypeConverterAttribute" /> en cours ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.GetHashCode">
      <summary>Retourne le code de hachage de cette instance.</summary>
      <returns>Code de hachage du <see cref="T:System.ComponentModel.TypeConverterAttribute" /> actuel.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptionProvider">
      <summary>Fournit les métadonnées supplémentaires au <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.TypeDescriptionProvider" />.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> à l'aide d'un fournisseur de description de type parent.</summary>
      <param name="parent">Fournisseur de description de type parent.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
      <summary>Crée un objet qui peut remplacer un autre type de données.</summary>
      <param name="provider">Fournisseur de services facultatif.</param>
      <param name="objectType">Type de l'objet à créer. Ce paramètre n'est jamais <see langword="null" />.</param>
      <param name="argTypes">Tableau facultatif des types qui représentent les types de paramètres à passer au constructeur de l'objet. Ce tableau peut être <see langword="null" /> ou de longueur nulle.</param>
      <param name="args">Tableau facultatif de valeurs de paramètre à passer au constructeur de l’objet.</param>
      <returns>
        <see cref="T:System.Object" /> de substitution.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)">
      <summary>Obtient un cache par objet accessible en tant que <see cref="T:System.Collections.IDictionary" /> de paires clé/valeur.</summary>
      <param name="instance">Objet pour lequel obtenir le cache.</param>
      <returns>
        <see cref="T:System.Collections.IDictionary" /> si l'objet fournit prend en charge la mise en cache ; sinon, <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)">
      <summary>Obtient un descripteur de type personnalisé étendu pour l'objet donné.</summary>
      <param name="instance">Objet pour lequel obtenir le descripteur de type étendu.</param>
      <returns>
        <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> qui peut fournir des métadonnées étendues pour l'objet.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(System.Object)">
      <summary>Obtient les fournisseurs d'extendeurs pour l'objet spécifié.</summary>
      <param name="instance">Objet pour lequel obtenir des fournisseurs d'extendeurs.</param>
      <returns>Tableau de fournisseurs d'extendeurs pour <paramref name="instance" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)">
      <summary>Obtient le nom du composant spécifié ou <see langword="null" /> si le composant ne possède pas de nom.</summary>
      <param name="component">Le composant spécifié.</param>
      <returns>Nom du composant spécifié.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)">
      <summary>Effectue la réflexion normale par rapport à l'objet donné.</summary>
      <param name="instance">Instance du type (ne doit pas être <see langword="null" />).</param>
      <returns>Type de réflexion pour ce <paramref name="instance" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)">
      <summary>Effectue la réflexion normale par rapport à un type.</summary>
      <param name="objectType">Type d'objet pour lequel récupérer <see cref="T:System.Reflection.IReflect" />.</param>
      <returns>Type de réflexion pour ce <paramref name="objectType" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectType" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)">
      <summary>Effectue la réflexion normale par rapport à l'objet donné à l'aide du type donné.</summary>
      <param name="objectType">Type d'objet pour lequel récupérer <see cref="T:System.Reflection.IReflect" />.</param>
      <param name="instance">Instance du type. Peut être <see langword="null" />.</param>
      <returns>Type de réflexion pour ce <paramref name="objectType" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)">
      <summary>Convertit un type de réflexion en un type au moment de l'exécution.</summary>
      <param name="reflectionType">Type à convertir en son équivalent au moment de l'exécution.</param>
      <returns>
        <see cref="T:System.Type" /> qui représente l'équivalent au moment de l'exécution de <paramref name="reflectionType" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reflectionType" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)">
      <summary>Obtient un descripteur de type personnalisé pour l'objet donné.</summary>
      <param name="instance">Instance du type. Peut être <see langword="null" /> si aucune instance n'est passée au <see cref="T:System.ComponentModel.TypeDescriptor" />.</param>
      <returns>
        <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> qui peut fournir les métadonnées pour le type.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)">
      <summary>Obtient un descripteur de type personnalisé pour le type donné.</summary>
      <param name="objectType">Type d'objet pour lequel récupérer le descripteur de type.</param>
      <returns>
        <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> qui peut fournir les métadonnées pour le type.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)">
      <summary>Obtient un descripteur de type personnalisé pour le type et l'objet donné.</summary>
      <param name="objectType">Type d'objet pour lequel récupérer le descripteur de type.</param>
      <param name="instance">Instance du type. Peut être <see langword="null" /> si aucune instance n'est passée au <see cref="T:System.ComponentModel.TypeDescriptor" />.</param>
      <returns>
        <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> qui peut fournir les métadonnées pour le type.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)">
      <summary>Obtient une valeur qui indique si le type spécifié est compatible avec la description de type et sa chaîne de fournisseurs de descriptions de types.</summary>
      <param name="type">Type dont la compatibilité doit être testée.</param>
      <returns>
        <see langword="true" /> si <paramref name="type" /> est compatible avec la description de type et sa chaîne de fournisseurs de descriptions de types, sinon <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptionProviderAttribute">
      <summary>Spécifie le fournisseur de description de type personnalisé pour une classe. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProviderAttribute.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.TypeDescriptionProviderAttribute" /> à l'aide du nom du type spécifié.</summary>
      <param name="typeName">Nom qualifié du type.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProviderAttribute.#ctor(System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.TypeDescriptionProviderAttribute" /> à l'aide du type spécifié.</summary>
      <param name="type">Type à stocker dans l'attribut.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptionProviderAttribute.TypeName">
      <summary>Obtient le nom de type pour le fournisseur de description de type.</summary>
      <returns>
        <see cref="T:System.String" /> qui contient le nom de type qualifié pour <see cref="T:System.ComponentModel.TypeDescriptionProvider" />.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptor">
      <summary>Fournit des informations relatives aux caractéristiques d’un composant, telles que ses attributs, ses propriétés et ses événements. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddAttributes(System.Object,System.Attribute[])">
      <summary>Ajoute des attributs de niveau classe à l’instance du composant cible.</summary>
      <param name="instance">Instance du composant cible.</param>
      <param name="attributes">Tableau d’objets <see cref="T:System.Attribute" /> à ajouter à la classe du composant.</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> récemment créé qui a été utilisé pour ajouter les attributs spécifiés.</returns>
      <exception cref="T:System.ArgumentNullException">Au moins l’un des deux paramètres a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddAttributes(System.Type,System.Attribute[])">
      <summary>Ajoute des attributs de classe au type du composant cible.</summary>
      <param name="type">
        <see cref="T:System.Type" /> du composant cible.</param>
      <param name="attributes">Tableau d’objets <see cref="T:System.Attribute" /> à ajouter à la classe du composant.</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> récemment créé qui a été utilisé pour ajouter les attributs spécifiés.</returns>
      <exception cref="T:System.ArgumentNullException">Au moins l’un des deux paramètres a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddEditorTable(System.Type,System.Collections.Hashtable)">
      <summary>Ajoute une table d’éditeur pour le type de base d’éditeur donné.</summary>
      <param name="editorBaseType">Type de base d’éditeur pour lequel ajouter la table d’éditeur. Si une table existe déjà pour ce type, cette méthode n’aura aucun effet.</param>
      <param name="table">
        <see cref="T:System.Collections.Hashtable" /> à ajouter.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary>Ajoute un fournisseur de description de type pour une instance unique d’un composant.</summary>
      <param name="provider">
        <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> à ajouter.</param>
      <param name="instance">Instance du composant cible.</param>
      <exception cref="T:System.ArgumentNullException">Au moins l’un des deux paramètres a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary>Ajoute un fournisseur de description de type pour une classe de composant.</summary>
      <param name="provider">
        <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> à ajouter.</param>
      <param name="type">
        <see cref="T:System.Type" /> du composant cible.</param>
      <exception cref="T:System.ArgumentNullException">Au moins l’un des deux paramètres a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary>Ajoute un fournisseur de description de type pour une instance unique d’un composant.</summary>
      <param name="provider">
        <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> à ajouter.</param>
      <param name="instance">Instance du composant cible.</param>
      <exception cref="T:System.ArgumentNullException">Au moins l’un des deux paramètres a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary>Ajoute un fournisseur de description de type pour une classe de composant.</summary>
      <param name="provider">
        <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> à ajouter.</param>
      <param name="type">
        <see cref="T:System.Type" /> du composant cible.</param>
      <exception cref="T:System.ArgumentNullException">Au moins l’un des deux paramètres a la valeur <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler">
      <summary>Obtient ou définit le fournisseur pour les informations de type COM (Component Object Model) pour le composant cible.</summary>
      <returns>Instance <see cref="T:System.ComponentModel.IComNativeDescriptorHandler" /> représentant le fournisseur d’informations de type COM.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.ComObjectType">
      <summary>Obtient le type de l’objet COM (Component Object Model) représenté par le composant cible.</summary>
      <returns>
        <see cref="T:System.Type" /> de l’objet COM représenté par ce composant, ou <see langword="null" /> pour les objets non-COM.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateAssociation(System.Object,System.Object)">
      <summary>Crée une association de type principal-secondaire entre deux objets.</summary>
      <param name="primary">
        <see cref="T:System.Object" /> principal.</param>
      <param name="secondary">
        <see cref="T:System.Object" /> secondaire.</param>
      <exception cref="T:System.ArgumentNullException">Au moins l’un des deux paramètres a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="primary" /> est égal à <paramref name="secondary" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateDesigner(System.ComponentModel.IComponent,System.Type)">
      <summary>Crée une instance du concepteur associé au composant spécifié et du type de concepteur spécifié.</summary>
      <param name="component">
        <see cref="T:System.ComponentModel.IComponent" /> qui spécifie le composant à associer au concepteur.</param>
      <param name="designerBaseType">
        <see cref="T:System.Type" /> qui représente le type de concepteur à créer.</param>
      <returns>
        <see cref="T:System.ComponentModel.Design.IDesigner" /> qui est une instance du concepteur pour le composant, ou <see langword="null" /> si aucun concepteur n’est trouvé.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.ComponentModel.EventDescriptor,System.Attribute[])">
      <summary>Crée un descripteur d’événement identique à un descripteur d’événement existant, quand le <see cref="T:System.ComponentModel.EventDescriptor" /> existant est passé.</summary>
      <param name="componentType">Type du composant pour lequel créer l’événement.</param>
      <param name="oldEventDescriptor">Informations existantes sur l’événement.</param>
      <param name="attributes">Nouveaux attributs.</param>
      <returns>Nouveau <see cref="T:System.ComponentModel.EventDescriptor" /> qui a fusionné les attributs de métadonnées spécifiés avec les attributs de métadonnées existants.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.String,System.Type,System.Attribute[])">
      <summary>Crée un nouveau descripteur d’événement qui est identique à un descripteur d’événement existant, en générant des informations de descripteur de façon dynamique à partir d’un événement spécifié sur un type.</summary>
      <param name="componentType">Type du composant dans lequel réside l’événement.</param>
      <param name="name">Nom de l'événement.</param>
      <param name="type">Type du délégué qui gère l’événement.</param>
      <param name="attributes">Attributs de cet événement.</param>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptor" /> lié à un type.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
      <summary>Crée un objet qui peut remplacer un autre type de données.</summary>
      <param name="provider">Fournisseur de services qui fournit un service <see cref="T:System.ComponentModel.TypeDescriptionProvider" />. Ce paramètre peut être <see langword="null" />.</param>
      <param name="objectType">
        <see cref="T:System.Type" /> de l’objet à créer.</param>
      <param name="argTypes">Tableau facultatif de types de paramètre à passer au constructeur de l’objet. Ce paramètre peut avoir la valeur <see langword="null" /> ou correspondre à un tableau de longueur égale à zéro.</param>
      <param name="args">Tableau facultatif de valeurs de paramètre à passer au constructeur de l’objet. Si la valeur n’est pas <see langword="null" />, le nombre d’éléments doit être le même que <paramref name="argTypes" />.</param>
      <returns>Instance du type de données de remplacement si un <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> associé est trouvé ; sinon, <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectType" /> a la valeur <see langword="null" /> ou <paramref name="args" /> a la valeur <see langword="null" /> quand <paramref name="argTypes" /> n’a pas la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argTypes" /> et <paramref name="args" /> ont un nombre différent d’éléments.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.ComponentModel.PropertyDescriptor,System.Attribute[])">
      <summary>Crée un descripteur de propriété à partir d’un descripteur de propriété existant, à l’aide du <see cref="T:System.ComponentModel.PropertyDescriptor" /> et du tableau d’attributs existants spécifiés.</summary>
      <param name="componentType">
        <see cref="T:System.Type" /> du composant dont la propriété est membre.</param>
      <param name="oldPropertyDescriptor">Descripteur de propriété existant.</param>
      <param name="attributes">Nouveaux attributs de cette propriété.</param>
      <returns>Nouveau <see cref="T:System.ComponentModel.PropertyDescriptor" /> qui possède les attributs de métadonnées spécifiés fusionnés avec les attributs de métadonnées existants.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.String,System.Type,System.Attribute[])">
      <summary>Crée et lie dynamiquement un descripteur de propriété à un type, en utilisant le nom, le type et le tableau d’attributs de la propriété spécifiée.</summary>
      <param name="componentType">
        <see cref="T:System.Type" /> du composant dont la propriété est membre.</param>
      <param name="name">Nom de la propriété.</param>
      <param name="type">
        <see cref="T:System.Type" /> de la propriété.</param>
      <param name="attributes">Nouveaux attributs de cette propriété.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> qui est lié au type spécifié et dont les attributs de métadonnées spécifiés sont fusionnés avec les attributs de métadonnées existants.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAssociation(System.Type,System.Object)">
      <summary>Retourne une instance du type associée à l'objet principal spécifié.</summary>
      <param name="type">
        <see cref="T:System.Type" /> du composant cible.</param>
      <param name="primary">Objet principal de l'association.</param>
      <returns>Instance du type secondaire qui a été associé à l’objet principal si une association existe ; sinon, <paramref name="primary" /> si aucune association spécifiée n’existe.</returns>
      <exception cref="T:System.ArgumentNullException">Au moins l’un des deux paramètres a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Object)">
      <summary>Retourne la collection d'attributs pour le composant spécifié.</summary>
      <param name="component">Composant pour lequel vous souhaitez obtenir les attributs.</param>
      <returns>
        <see cref="T:System.ComponentModel.AttributeCollection" /> qui contient les attributs pour le composant. Si <paramref name="component" /> est <see langword="null" />, cette méthode retourne une collection vide.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Object,System.Boolean)">
      <summary>Retourne une collection d'attributs pour le composant spécifié et une valeur booléenne indiquant qu'un descripteur de type personnalisé a été créé.</summary>
      <param name="component">Composant pour lequel vous souhaitez obtenir les attributs.</param>
      <param name="noCustomTypeDesc">
        <see langword="true" /> pour utiliser un ensemble d'attributs de référence à partir du descripteur de type personnalisé si <paramref name="component" /> est de type <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> ; sinon, <see langword="false" />.</param>
      <returns>
        <see cref="T:System.ComponentModel.AttributeCollection" /> avec les attributs du composant. Si le composant est <see langword="null" />, la méthode retourne une collection vide.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Type)">
      <summary>Retourne une collection d'attributs pour le type spécifié de composant.</summary>
      <param name="componentType">
        <see cref="T:System.Type" /> du composant cible.</param>
      <returns>
        <see cref="T:System.ComponentModel.AttributeCollection" /> avec les attributs pour le type de composant. Si le composant est <see langword="null" />, la méthode retourne une collection vide.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Object)">
      <summary>Retourne le nom de la classe pour le composant spécifié à l'aide du descripteur de type par défaut.</summary>
      <param name="component">
        <see cref="T:System.Object" /> pour lequel vous voulez le nom de la classe.</param>
      <returns>
        <see cref="T:System.String" /> contenant le nom de la classe pour le composant spécifié.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Object,System.Boolean)">
      <summary>Retourne le nom de la classe pour le composant spécifié à l'aide d'un descripteur de type personnalisé.</summary>
      <param name="component">
        <see cref="T:System.Object" /> pour lequel vous voulez le nom de la classe.</param>
      <param name="noCustomTypeDesc">
        <see langword="true" /> pour prendre en compte les informations de description de type personnalisée ; sinon, <see langword="false" />.</param>
      <returns>
        <see cref="T:System.String" /> contenant le nom de la classe pour le composant spécifié.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> est un objet distant interprocessus.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Type)">
      <summary>Retourne le nom de la classe pour le type spécifié.</summary>
      <param name="componentType">
        <see cref="T:System.Type" /> du composant cible.</param>
      <returns>
        <see cref="T:System.String" /> contenant le nom de la classe pour le type de composant spécifié.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="componentType" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetComponentName(System.Object)">
      <summary>Retourne le nom du composant spécifié à l'aide du descripteur de type par défaut.</summary>
      <param name="component">
        <see cref="T:System.Object" /> dont vous souhaitez obtenir le nom de la classe.</param>
      <returns>
        <see cref="T:System.String" /> contenant le nom du composant spécifié, ou <see langword="null" /> s’il n’y a aucun nom de composant.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> est un objet distant interprocessus.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetComponentName(System.Object,System.Boolean)">
      <summary>Retourne le nom du composant spécifié, à l'aide d'un descripteur de type personnalisé.</summary>
      <param name="component">
        <see cref="T:System.Object" /> pour lequel vous voulez le nom de la classe.</param>
      <param name="noCustomTypeDesc">
        <see langword="true" /> pour prendre en compte les informations de description de type personnalisée ; sinon, <see langword="false" />.</param>
      <returns>Nom de la classe du composant spécifié, ou <see langword="null" /> s’il n’y a aucun nom de composant.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> est un objet distant interprocessus.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object)">
      <summary>Retourne un convertisseur de type pour le type du composant spécifié.</summary>
      <param name="component">Composant pour lequel obtenir le convertisseur.</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter" /> du composant spécifié.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> est un objet distant interprocessus.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object,System.Boolean)">
      <summary>Retourne un convertisseur de type pour le type du composant spécifié avec un descripteur de type personnalisé.</summary>
      <param name="component">Composant pour lequel obtenir le convertisseur.</param>
      <param name="noCustomTypeDesc">
        <see langword="true" /> pour prendre en compte les informations de description de type personnalisée ; sinon, <see langword="false" />.</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter" /> du composant spécifié.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> est un objet distant interprocessus.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Type)">
      <summary>Retourne un convertisseur de type pour le type spécifié.</summary>
      <param name="type">
        <see cref="T:System.Type" /> du composant cible.</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter" /> pour le type spécifié.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object)">
      <summary>Retourne l'événement par défaut pour le composant spécifié.</summary>
      <param name="component">Composant pour lequel obtenir l’événement.</param>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptor" /> avec l’événement par défaut, ou <see langword="null" /> en l’absence d’événements.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> est un objet distant interprocessus.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object,System.Boolean)">
      <summary>Retourne l'événement par défaut pour un composant avec un descripteur de type personnalisé.</summary>
      <param name="component">Composant pour lequel obtenir l'événement.</param>
      <param name="noCustomTypeDesc">
        <see langword="true" /> pour prendre en compte les informations de description de type personnalisées ; sinon, <see langword="false" />.</param>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptor" /> avec l’événement par défaut, ou <see langword="null" /> en l’absence d’événements.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> est <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> est un objet distant interprocessus.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Type)">
      <summary>Retourne l'événement par défaut pour le type de composant spécifié.</summary>
      <param name="componentType">
        <see cref="T:System.Type" /> du composant cible.</param>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptor" /> avec l’événement par défaut, ou <see langword="null" /> en l’absence d’événements.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="componentType" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object)">
      <summary>Retourne la propriété par défaut pour le composant spécifié.</summary>
      <param name="component">Composant pour lequel obtenir la propriété par défaut.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> avec la propriété par défaut, ou <see langword="null" /> en l’absence de propriétés.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> est un objet distant interprocessus.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object,System.Boolean)">
      <summary>Retourne la propriété par défaut pour le composant spécifié avec un descripteur de type personnalisé.</summary>
      <param name="component">Composant pour lequel obtenir la propriété par défaut.</param>
      <param name="noCustomTypeDesc">
        <see langword="true" /> pour prendre en compte les informations de description de type personnalisée ; sinon, <see langword="false" />.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> avec la propriété par défaut, ou <see langword="null" /> en l’absence de propriétés.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> est un objet distant interprocessus.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Type)">
      <summary>Retourne la propriété par défaut pour le type de composant spécifié.</summary>
      <param name="componentType">
        <see cref="T:System.Type" /> représentant la classe dont la propriété doit être obtenue.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> avec la propriété par défaut, ou <see langword="null" /> en l’absence de propriétés.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type)">
      <summary>Obtient un éditeur du type de base spécifié pour le composant spécifié.</summary>
      <param name="component">Composant pour lequel obtenir l’éditeur.</param>
      <param name="editorBaseType">
        <see cref="T:System.Type" /> qui représente le type de base de l’éditeur à rechercher.</param>
      <returns>Instance de l’éditeur qui peut faire l’objet d’une conversion dans le type d’éditeur spécifié ou <see langword="null" /> si aucun éditeur du type demandé n’est disponible.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> ou <paramref name="editorBaseType" /> est <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> est un objet distant interprocessus.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type,System.Boolean)">
      <summary>Retourne un éditeur du type de base spécifié et possédant un descripteur de type personnalisé pour le composant spécifié.</summary>
      <param name="component">Composant pour lequel obtenir l’éditeur.</param>
      <param name="editorBaseType">
        <see cref="T:System.Type" /> représentant le type de base de l'éditeur à rechercher.</param>
      <param name="noCustomTypeDesc">Indicateur qui indique si les informations de description de type personnalisées doivent être considérées.</param>
      <returns>Instance de l’éditeur qui peut faire l’objet d’une conversion dans le type d’éditeur spécifié ou <see langword="null" /> si aucun éditeur du type demandé n’est disponible.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> ou <paramref name="editorBaseType" /> est <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> est un objet distant interprocessus.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Type,System.Type)">
      <summary>Retourne un éditeur du type de base spécifié pour le type spécifié.</summary>
      <param name="type">
        <see cref="T:System.Type" /> du composant cible.</param>
      <param name="editorBaseType">
        <see cref="T:System.Type" /> représentant le type de base de l'éditeur que vous recherchez.</param>
      <returns>Instance de l’objet d’éditeur qui peut être converti dans le type de base donné, ou <see langword="null" /> si aucun éditeur du type demandé n’est disponible.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> ou <paramref name="editorBaseType" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object)">
      <summary>Retourne la collection d'événements pour le composant spécifié.</summary>
      <param name="component">Composant pour lequel obtenir les événements.</param>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptorCollection" /> avec les événements de ce composant.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> est un objet distant interprocessus.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[])">
      <summary>Retourne la collection d'événements pour un composant déterminé en utilisant comme filtre un tableau d'attributs spécifié.</summary>
      <param name="component">Composant pour lequel obtenir les événements.</param>
      <param name="attributes">Tableau de type <see cref="T:System.Attribute" /> que vous pouvez utiliser comme filtre.</param>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptorCollection" /> dont les événements correspondent aux attributs spécifiés pour ce composant.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> est un objet distant interprocessus.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[],System.Boolean)">
      <summary>Retourne la collection d'événements pour un composant spécifié en utilisant comme filtre un tableau d'attributs déterminé et un descripteur de type personnalisé.</summary>
      <param name="component">Composant pour lequel obtenir les événements.</param>
      <param name="attributes">Tableau de type <see cref="T:System.Attribute" /> à utiliser comme filtre.</param>
      <param name="noCustomTypeDesc">
        <see langword="true" /> pour prendre en compte les informations de description de type personnalisée ; sinon, <see langword="false" />.</param>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptorCollection" /> dont les événements correspondent aux attributs spécifiés pour ce composant.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> est un objet distant interprocessus.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Boolean)">
      <summary>Retourne la collection d'événements pour un composant spécifié avec un descripteur de type personnalisé.</summary>
      <param name="component">Composant pour lequel obtenir les événements.</param>
      <param name="noCustomTypeDesc">
        <see langword="true" /> pour prendre en compte les informations de description de type personnalisée ; sinon, <see langword="false" />.</param>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptorCollection" /> avec les événements de ce composant.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> est un objet distant interprocessus.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Type)">
      <summary>Retourne la collection d'événements pour un type de composant spécifié.</summary>
      <param name="componentType">
        <see cref="T:System.Type" /> du composant cible.</param>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptorCollection" /> avec les événements de ce composant.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Type,System.Attribute[])">
      <summary>Retourne la collection d'événements pour un type de composant déterminé en utilisant comme filtre un tableau d'attributs spécifié.</summary>
      <param name="componentType">
        <see cref="T:System.Type" /> du composant cible.</param>
      <param name="attributes">Tableau de type <see cref="T:System.Attribute" /> que vous pouvez utiliser comme filtre.</param>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptorCollection" /> dont les événements correspondent aux attributs spécifiés pour ce composant.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetFullComponentName(System.Object)">
      <summary>Retourne le nom qualifié complet du composant.</summary>
      <param name="component">
        <see cref="T:System.ComponentModel.Component" /> dont le nom est à rechercher.</param>
      <returns>Nom complet du composant spécifié, ou <see langword="null" /> si le composant n’a pas de nom.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)">
      <summary>Retourne la collection de propriétés pour un composant spécifié.</summary>
      <param name="component">Composant dont les propriétés doivent être obtenues.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> avec les propriétés du composant spécifié.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> est un objet distant interprocessus.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[])">
      <summary>Retourne la collection de propriétés pour un composant déterminé en utilisant comme filtre un tableau d'attributs spécifié.</summary>
      <param name="component">Composant dont les propriétés doivent être obtenues.</param>
      <param name="attributes">Tableau de type <see cref="T:System.Attribute" /> à utiliser comme filtre.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> dont les propriétés correspondent aux attributs spécifiés pour le composant spécifié.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> est un objet distant interprocessus.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[],System.Boolean)">
      <summary>Retourne la collection des propriétés pour un composant spécifié en utilisant comme filtre un tableau d'attributs déterminé et un descripteur de type personnalisé.</summary>
      <param name="component">Composant dont les propriétés doivent être obtenues.</param>
      <param name="attributes">Tableau de type <see cref="T:System.Attribute" /> à utiliser comme filtre.</param>
      <param name="noCustomTypeDesc">
        <see langword="true" /> pour prendre en compte les informations de description de type personnalisée ; sinon, <see langword="false" />.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> dont les événements correspondent aux attributs spécifiés pour le composant spécifié.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> est un objet distant interprocessus.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Boolean)">
      <summary>Retourne la collection de propriétés pour un composant spécifié, à l'aide du descripteur de type par défaut.</summary>
      <param name="component">Composant dont les propriétés doivent être obtenues.</param>
      <param name="noCustomTypeDesc">
        <see langword="true" /> pour ne pas prendre en compte les informations de description de type personnalisé ; sinon, <see langword="false" />.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> avec les propriétés d’un composant spécifié.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> est un objet distant interprocessus.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Type)">
      <summary>Retourne la collection de propriétés pour un type de composant spécifié.</summary>
      <param name="componentType">
        <see cref="T:System.Type" /> qui représente le composant dont les propriétés doivent être récupérées.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> avec les propriétés d’un type de composant spécifié.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Type,System.Attribute[])">
      <summary>Retourne la collection de propriétés pour un type de composant déterminé en utilisant comme filtre un tableau d'attributs spécifié.</summary>
      <param name="componentType">
        <see cref="T:System.Type" /> du composant cible.</param>
      <param name="attributes">Tableau de type <see cref="T:System.Attribute" /> à utiliser comme filtre.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> dont les propriétés correspondent aux attributs spécifiés pour le type de composant spécifié.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProvider(System.Object)">
      <summary>Retourne le fournisseur de description de type pour le composant spécifié.</summary>
      <param name="instance">Instance du composant cible.</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> associé au composant spécifié.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProvider(System.Type)">
      <summary>Retourne le fournisseur de description de type pour le type spécifié.</summary>
      <param name="type">
        <see cref="T:System.Type" /> du composant cible.</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> associé au type spécifié.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetReflectionType(System.Object)">
      <summary>Retourne <see cref="T:System.Type" /> qui peut être utilisé pour effectuer la réflexion en fonction d'un objet.</summary>
      <param name="instance">Instance du composant cible.</param>
      <returns>
        <see cref="T:System.Type" /> pour l’objet spécifié.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetReflectionType(System.Type)">
      <summary>Retourne <see cref="T:System.Type" /> qui peut être utilisé pour effectuer la réflexion en fonction d'un type de classe.</summary>
      <param name="type">
        <see cref="T:System.Type" /> du composant cible.</param>
      <returns>
        <see cref="T:System.Type" /> de la classe spécifiée.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.InterfaceType">
      <summary>Obtient un type qui représente un fournisseur de description de type pour tous les types d'interface.</summary>
      <returns>
        <see cref="T:System.Type" /> qui représente un fournisseur de description de type personnalisé pour tous les types d’interface.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Object)">
      <summary>Efface du cache les propriétés et événements du composant spécifié.</summary>
      <param name="component">Composant dont les propriétés ou les événements ont été modifiés.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Assembly)">
      <summary>Efface du cache les propriétés et événements de l’assembly spécifié.</summary>
      <param name="assembly">
        <see cref="T:System.Reflection.Assembly" /> qui représente l’assembly à actualiser. Chaque <see cref="T:System.Type" /> de cet assembly est actualisé.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Module)">
      <summary>Efface du cache les propriétés et événements du module spécifié.</summary>
      <param name="module">
        <see cref="T:System.Reflection.Module" /> qui représente le module à actualiser. Chaque <see cref="T:System.Type" /> de ce module est actualisé.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Type)">
      <summary>Efface du cache les propriétés et les événements du type de composant spécifié.</summary>
      <param name="type">
        <see cref="T:System.Type" /> du composant cible.</param>
    </member>
    <member name="E:System.ComponentModel.TypeDescriptor.Refreshed">
      <summary>Se produit quand le cache d’un composant est vidé.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveAssociation(System.Object,System.Object)">
      <summary>Supprime une association entre deux objets.</summary>
      <param name="primary">
        <see cref="T:System.Object" /> principal.</param>
      <param name="secondary">
        <see cref="T:System.Object" /> secondaire.</param>
      <exception cref="T:System.ArgumentNullException">Au moins l’un des deux paramètres a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveAssociations(System.Object)">
      <summary>Supprime toutes les associations pour un objet principal.</summary>
      <param name="primary">
        <see cref="T:System.Object" /> principal dans une association.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="primary" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary>Supprime un fournisseur de description de type précédemment ajouté qui est associé à l’objet spécifié.</summary>
      <param name="provider">
        <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> à supprimer.</param>
      <param name="instance">Instance du composant cible.</param>
      <exception cref="T:System.ArgumentNullException">Au moins l’un des deux paramètres a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary>Supprime un fournisseur de description de type précédemment ajouté qui est associé au type spécifié.</summary>
      <param name="provider">
        <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> à supprimer.</param>
      <param name="type">
        <see cref="T:System.Type" /> du composant cible.</param>
      <exception cref="T:System.ArgumentNullException">Au moins l’un des deux paramètres a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary>Supprime un fournisseur de description de type précédemment ajouté qui est associé à l’objet spécifié.</summary>
      <param name="provider">
        <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> à supprimer.</param>
      <param name="instance">Instance du composant cible.</param>
      <exception cref="T:System.ArgumentNullException">Au moins l’un des deux paramètres a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary>Supprime un fournisseur de description de type précédemment ajouté qui est associé au type spécifié.</summary>
      <param name="provider">
        <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> à supprimer.</param>
      <param name="type">
        <see cref="T:System.Type" /> du composant cible.</param>
      <exception cref="T:System.ArgumentNullException">Au moins l’un des deux paramètres a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.SortDescriptorArray(System.Collections.IList)">
      <summary>Trie des descripteurs selon leur nom.</summary>
      <param name="infos">
        <see cref="T:System.Collections.IList" /> contenant les descripteurs à trier.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="infos" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="T:System.ComponentModel.TypeListConverter">
      <summary>Fournit un convertisseur de type qui peut être utilisé pour renseigner une zone de liste avec les types disponibles.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.#ctor(System.Type[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.TypeListConverter" /> en utilisant le tableau de types comme types disponibles.</summary>
      <param name="types">Tableau de type <see cref="T:System.Type" /> à utiliser comme types disponibles.</param>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtient une valeur qui indique si ce convertisseur peut convertir le <see cref="T:System.Type" /> spécifié de l'objet de source à l'aide du contexte donné.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="sourceType">
        <see cref="T:System.Type" /> de l'objet source.</param>
      <returns>
        <see langword="true" /> si ce convertisseur peut effectuer la conversion ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtient une valeur indiquant si ce convertisseur peut convertir un objet en objet du type de destination donné en utilisant le contexte.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> qui représente le type vers lequel vous souhaitez effectuer la conversion.</param>
      <returns>
        <see langword="true" /> si ce convertisseur peut effectuer la conversion ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convertit l'objet spécifié en type natif du convertisseur.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> spécifiant la culture utilisée pour représenter la police.</param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir.</param>
      <returns>
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convertit l'objet de valeur donnée en type de destination spécifié.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> facultatif. Si la culture n'est pas spécifiée, la culture en cours est utilisée.</param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> dans lequel convertir la valeur.</param>
      <returns>
        <see cref="T:System.Object" /> qui représente <paramref name="value" /> converti.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtient une collection de valeurs standard pour le type de données pour lequel ce validateur est conçu.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> contenant un jeu standard de valeurs valides ou <see langword="null" /> si le type de données ne prend pas en charge un jeu standard de valeurs.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtient une valeur indiquant si la liste de valeurs standard retournée par la méthode <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> est une liste exclusive.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns>
        <see langword="true" /> parce que le <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> retourné depuis <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> est une liste exhaustive de valeurs possibles. Cette méthode ne retourne jamais <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtient une valeur indiquant si cet objet prend en charge une série de valeurs standard qui peuvent être sélectionnées dans une liste, à l'aide du contexte spécifié.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns>
        <see langword="true" /> car <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> doit être appelé pour trouver un jeu de valeurs communes pris en charge par l'objet. Cette méthode ne retourne jamais <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.UInt16Converter">
      <summary>Fournit un convertisseur de type pour convertir des objets entiers non signés 16 bits vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.UInt16Converter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.UInt16Converter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.UInt32Converter">
      <summary>Fournit un convertisseur de type pour convertir des objets entiers non signés 32 bits vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.UInt32Converter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.UInt32Converter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.UInt64Converter">
      <summary>Fournit un convertisseur de type pour convertir des objets entiers non signés 64 bits vers et à partir d’autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.UInt64Converter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.UInt64Converter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.VersionConverter">
      <summary>Fournit un convertisseur de type pour convertir les objets <see cref="T:System.Version" /> vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.VersionConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtient une valeur indiquant si ce convertisseur peut convertir un objet du type source donné en <see cref="T:System.Version" />.</summary>
      <param name="context">Objet qui fournit des informations contextuelles.</param>
      <param name="sourceType">Type de l'objet à convertir.</param>
      <returns>
        <see langword="true" /> si ce convertisseur peut convertir sourceType en <see cref="T:System.Version" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtient une valeur indiquant si ce convertisseur peut convertir un objet en objet du type de destination donné en utilisant le contexte.</summary>
      <param name="context">Objet qui fournit des informations contextuelles.</param>
      <param name="destinationType">Type cible pour la conversion.</param>
      <returns>
        <see langword="true" /> si le convertisseur peut convertir un objet dans le type de destination donné ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convertit l'objet spécifié en <see cref="T:System.Version" />.</summary>
      <param name="context">Objet qui fournit des informations contextuelles.</param>
      <param name="culture">Culture à utiliser pour la conversion.</param>
      <param name="value">Valeur à convertir en <see cref="T:System.Version" />.</param>
      <returns>
        <paramref name="value" /> converti en valeur <see cref="T:System.Version" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’est pas une chaîne <see cref="T:System.Version" /> valide.</exception>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convertit la valeur spécifiée dans le type de destination spécifié en utilisant le contexte et les arguments spécifiés.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture">Culture qui fournit les informations de mise en forme pour la conversion.</param>
      <param name="value">Valeur à convertir.</param>
      <param name="destinationType">Type dans lequel convertir le paramètre de valeur.</param>
      <returns>Objet qui représente la valeur convertie.</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>Retourne une valeur qui indique si l’objet de valeur donné est valide pour ce type et pour le contexte spécifié.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="value">Objet dont la validité doit être testée.</param>
      <returns>
        <see langword="true" /> si la valeur spécifiée est valide pour cet objet ; dans le cas contraire, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.WarningException">
      <summary>Spécifie une exception gérée comme un avertissement plutôt que comme une erreur.</summary>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.WarningException" />.</summary>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.WarningException" /> à l'aide des données et du contexte de sérialisation spécifiés.</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> à utiliser pour la désérialisation.</param>
      <param name="context">Destination à utiliser pour la désérialisation.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.WarningException" /> avec le message spécifié et aucun fichier d'aide.</summary>
      <param name="message">Message à afficher à l'utilisateur final.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.WarningException" /> avec la description détaillée spécifiée et l'exception spécifiée.</summary>
      <param name="message">Description détaillée de l'erreur.</param>
      <param name="innerException">Référence à l'exception interne à l'origine de cette exception.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.WarningException" /> avec le message spécifié et la possibilité d'accéder au fichier d'aide spécifié.</summary>
      <param name="message">Message à afficher à l'utilisateur final.</param>
      <param name="helpUrl">Fichier d'aide à afficher à si l'utilisateur fait appel à l'aide.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.String,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.WarningException" /> avec le message spécifié et la possibilité d'accéder au fichier et à la rubrique d'aide spécifiés.</summary>
      <param name="message">Message à afficher à l'utilisateur final.</param>
      <param name="helpUrl">Fichier d'aide à afficher à si l'utilisateur fait appel à l'aide.</param>
      <param name="helpTopic">Rubrique d'aide à afficher si l'utilisateur fait appel à l'aide.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Affecte le nom de paramètre et des informations complémentaires concernant l'exception à <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</summary>
      <param name="info">Stocke les données utilisées pour sérialiser ou désérialiser l'objet que <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" /> sérialisait ou désérialisait.</param>
      <param name="context">Décrit la source et la destination du flux ayant généré l'exception, ainsi qu'un moyen pour la sérialisation de conserver ce contexte et un contexte supplémentaire défini par l'appelant.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> est <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.WarningException.HelpTopic">
      <summary>Obtient la rubrique d'aide associée à l'avertissement.</summary>
      <returns>Rubrique d'aide associée à l'avertissement.</returns>
    </member>
    <member name="P:System.ComponentModel.WarningException.HelpUrl">
      <summary>Obtient le fichier d'aide associé à l'avertissement.</summary>
      <returns>Fichier d'aide associé à l'avertissement.</returns>
    </member>
    <member name="T:System.Drawing.ColorConverter">
      <summary>Convertit les couleurs d'un type de données à un autre. Accédez à cette classe via <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
    </member>
    <member name="M:System.Drawing.ColorConverter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Drawing.ColorConverter" />.</summary>
    </member>
    <member name="M:System.Drawing.ColorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Détermine si ce convertisseur peut convertir un objet du type source donné en objet du type natif du convertisseur.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format. Vous pouvez utiliser cet objet pour obtenir d'autres informations sur l'environnement à partir duquel ce convertisseur est appelé.</param>
      <param name="sourceType">Type à partir duquel vous voulez effectuer la conversion.</param>
      <returns>
        <see langword="true" /> si cet objet peut effectuer la conversion ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Retourne une valeur indiquant si ce convertisseur peut convertir un objet en objet du type de destination donné à l'aide du contexte.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> représentant le type à partir duquel vous souhaitez effectuer la conversion.</param>
      <returns>
        <see langword="true" /> si le convertisseur peut effectuer la conversion ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convertit l'objet donné en type natif du convertisseur.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.TypeDescriptor" /> qui fournit un contexte de format. Vous pouvez utiliser cet objet pour obtenir d'autres informations sur l'environnement à partir duquel ce convertisseur est appelé.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> qui spécifie la culture de représentation de la couleur.</param>
      <param name="value">Objet à convertir.</param>
      <returns>
        <see cref="T:System.Object" /> représentant la valeur convertie.</returns>
      <exception cref="T:System.ArgumentException">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.Drawing.ColorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convertit l'objet spécifié dans un autre type.</summary>
      <param name="context">Contexte de formateur. Utilisez cet objet pour extraire d'autres informations sur l'environnement à partir duquel ce convertisseur est appelé. Vérifiez toujours si cette valeur est <see langword="null" />. En outre, les propriétés de l'objet de contexte peuvent retourner <see langword="null" />.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> qui spécifie la culture de représentation de la couleur.</param>
      <param name="value">Objet à convertir.</param>
      <param name="destinationType">Type dans lequel convertir l'objet.</param>
      <returns>
        <see cref="T:System.Object" /> représentant la valeur convertie.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationtype" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.Drawing.ColorConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Récupère une collection contenant un ensemble de valeurs standard pour le type de données pour lequel ce validateur a été conçu. La méthode retourne <see langword="null" /> si le type de données ne prend pas en charge un ensemble de valeurs standard.</summary>
      <param name="context">Contexte de formateur. Utilisez cet objet pour extraire d'autres informations sur l'environnement à partir duquel ce convertisseur est appelé. Vérifiez toujours si cette valeur est <see langword="null" />. En outre, les propriétés de l'objet de contexte peuvent retourner <see langword="null" />.</param>
      <returns>Collection contenant un ensemble standard de valeurs valides ou <see langword="null" />. L'implémentation par défaut retourne toujours <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Détermine si cet objet prend en charge un ensemble standard de valeurs pouvant être sélectionnées dans une liste.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.TypeDescriptor" /> par l'intermédiaire duquel un contexte supplémentaire peut être fourni.</param>
      <returns>
        <see langword="true" /> si <see cref="Overload:System.Drawing.ColorConverter.GetStandardValues" /> doit être appelé pour rechercher un jeu commun de valeurs prises en charge par l'objet ; sinon <see langword="false" />.</returns>
    </member>
    <member name="T:System.Drawing.PointConverter">
      <summary>Convertit un objet <see cref="T:System.Drawing.Point" /> d'un type de données à un autre.</summary>
    </member>
    <member name="M:System.Drawing.PointConverter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Drawing.PointConverter" />.</summary>
    </member>
    <member name="M:System.Drawing.PointConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Détermine si ce convertisseur peut convertir un objet du type source donné en objet du type natif du convertisseur.</summary>
      <param name="context">Contexte de formateur. Cet objet peut être utilisé pour obtenir des informations supplémentaires concernant l'environnement à partir duquel le convertisseur est appelé. La valeur peut être <see langword="null" />, vérifiez donc toujours. En outre, les propriétés sur l'objet de contexte peuvent retourner <see langword="null" />.</param>
      <param name="sourceType">Type à partir duquel vous souhaitez convertir.</param>
      <returns>
        <see langword="true" /> si cet objet peut effectuer la conversion ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtient une valeur indiquant si ce convertisseur peut convertir un objet en objet du type de destination donné en utilisant le contexte.</summary>
      <param name="context">Objet <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="destinationType">Objet <see cref="T:System.Type" /> qui représente le type vers lequel effectuer la conversion.</param>
      <returns>
        <see langword="true" /> si ce convertisseur peut effectuer la conversion ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convertit l'objet spécifié en objet <see cref="T:System.Drawing.Point" />.</summary>
      <param name="context">Contexte de formateur. Cet objet peut être utilisé pour obtenir des informations supplémentaires concernant l'environnement à partir duquel le convertisseur est appelé. La valeur peut être <see langword="null" />, vérifiez donc toujours. En outre, les propriétés sur l'objet de contexte peuvent retourner <see langword="null" />.</param>
      <param name="culture">Objet qui contient des informations de culture spécifiques, telles que la langue, le calendrier et des conventions associées à une culture spécifique. Il est basé sur la norme RFC 1766.</param>
      <param name="value">Objet à convertir.</param>
      <returns>Objet converti.</returns>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.Drawing.PointConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convertit l'objet spécifié dans le type spécifié.</summary>
      <param name="context">Contexte de formateur. Cet objet peut être utilisé pour obtenir des informations supplémentaires concernant l'environnement à partir duquel le convertisseur est appelé. La valeur peut être <see langword="null" />, vérifiez donc toujours. En outre, les propriétés sur l'objet de contexte peuvent retourner <see langword="null" />.</param>
      <param name="culture">Objet qui contient des informations de culture spécifiques, telles que la langue, le calendrier et des conventions associées à une culture spécifique. Il est basé sur la norme RFC 1766.</param>
      <param name="value">Objet à convertir.</param>
      <param name="destinationType">Type dans lequel convertir l'objet.</param>
      <returns>Objet converti.</returns>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>Crée une instance de ce type en fonction d'un jeu de valeurs de propriétés pour l'objet.</summary>
      <param name="context">Descripteur de type par l'intermédiaire duquel un contexte supplémentaire peut être fourni.</param>
      <param name="propertyValues">Dictionnaire de nouvelles valeurs de propriétés. Le dictionnaire contient une série de paires nom/valeur, une par propriété retournée par <see cref="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />.</param>
      <returns>Objet nouvellement créé ou <see langword="null" /> si l'objet n'a pas pu être créé. L'implémentation par défaut retourne la valeur <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Détermine si la modification d'une valeur de cet objet nécessite un appel à <see cref="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> pour créer une nouvelle valeur.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.TypeDescriptor" /> par l'intermédiaire duquel un contexte supplémentaire peut être fourni.</param>
      <returns>
        <see langword="true" /> si la méthode <see cref="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> doit être appelée quand une ou plusieurs propriétés de cet objet sont modifiées ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Récupère le jeu de propriétés pour ce type. Par défaut, un type ne retourne aucune propriété.</summary>
      <param name="context">Descripteur de type par l'intermédiaire duquel un contexte supplémentaire peut être fourni.</param>
      <param name="value">Valeur de l'objet pour lequel les propriétés doivent être obtenues.</param>
      <param name="attributes">Tableau d'objets <see cref="T:System.Attribute" /> qui décrivent les propriétés.</param>
      <returns>Ensemble des propriétés qui sont exposées pour ce type de données. Si aucune propriété n'est exposée, cette méthode risque de retourner <see langword="null" />. L'implémentation par défaut retourne toujours <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Détermine si cet objet prend en charge les propriétés. Par défaut, cette valeur est <see langword="false" />.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.TypeDescriptor" /> par l'intermédiaire duquel un contexte supplémentaire peut être fourni.</param>
      <returns>
        <see langword="true" /> si <see cref="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> doit être appelé pour rechercher les propriétés de cet objet ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Drawing.RectangleConverter">
      <summary>Convertit des rectangles d'un type de données à un autre. Accédez à cette classe via <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
    </member>
    <member name="M:System.Drawing.RectangleConverter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Drawing.RectangleConverter" />.</summary>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Détermine si ce convertisseur peut convertir un objet du type source donné en objet du type natif du convertisseur.</summary>
      <param name="context">Contexte de formateur. Cet objet peut être utilisé pour obtenir des informations supplémentaires concernant l'environnement à partir duquel le convertisseur est appelé. La valeur peut être <see langword="null" />, vérifiez donc toujours. En outre, les propriétés sur l'objet de contexte peuvent retourner <see langword="null" />.</param>
      <param name="sourceType">Type à partir duquel vous souhaitez convertir.</param>
      <returns>Cette méthode retourne <see langword="true" /> si cet objet peut effectuer la conversion ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtient une valeur indiquant si ce convertisseur peut convertir un objet en objet du type de destination donné en utilisant le contexte.</summary>
      <param name="context">Objet <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format. Vérifiez toujours, car la valeur peut être <see langword="null" />. En outre, les propriétés de l'objet de contexte peuvent retourner <see langword="null" />.</param>
      <param name="destinationType">Objet <see cref="T:System.Type" /> qui représente le type vers lequel effectuer la conversion.</param>
      <returns>Cette méthode retourne <see langword="true" /> si ce convertisseur peut effectuer la conversion ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convertit l'objet donné en objet <see cref="T:System.Drawing.Rectangle" />.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui peut être utilisé pour obtenir des informations supplémentaires concernant l'environnement à partir duquel ce convertisseur est appelé. La valeur peut être <see langword="null" />, vérifiez donc toujours. En outre, les propriétés sur l'objet de contexte peuvent retourner <see langword="null" />.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> qui contient des informations de culture spécifiques, telles que la langue, le calendrier et des conventions associées à une culture spécifique. Il est basé sur la norme RFC 1766.</param>
      <param name="value">Objet à convertir.</param>
      <returns>Objet converti.</returns>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.Drawing.RectangleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convertit l'objet spécifié dans le type spécifié.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui peut être utilisé pour obtenir des informations supplémentaires concernant l'environnement à partir duquel ce convertisseur est appelé. La valeur peut être <see langword="null" />, vérifiez donc toujours. En outre, les propriétés sur l'objet de contexte peuvent retourner <see langword="null" />.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> qui contient des informations de culture spécifiques, telles que la langue, le calendrier et des conventions associées à une culture spécifique. Il est basé sur la norme RFC 1766.</param>
      <param name="value">Objet à convertir.</param>
      <param name="destinationType">Type dans lequel convertir l'objet.</param>
      <returns>Objet converti.</returns>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>Crée une instance de ce type en fonction d'un jeu de valeurs de propriétés pour l'objet. Cela est utile pour des objets immuables, mais dont les propriétés doivent néanmoins être modifiables.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> par l'intermédiaire duquel un contexte supplémentaire peut être fourni.</param>
      <param name="propertyValues">Dictionnaire de nouvelles valeurs de propriétés. Le dictionnaire contient une série de paires nom/valeur, une par propriété retournée par un appel à la méthode <see cref="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />.</param>
      <returns>Objet nouvellement créé ou <see langword="null" /> si l'objet n'a pas pu être créé. L'implémentation par défaut retourne la valeur <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Détermine si la modification d'une valeur de cet objet nécessite un appel à <see cref="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> pour créer une nouvelle valeur.</summary>
      <param name="context">Descripteur de type par l'intermédiaire duquel un contexte supplémentaire peut être fourni.</param>
      <returns>Cette méthode retourne <see langword="true" /> si <see cref="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> doit être appelé quand une ou plusieurs propriétés de cet objet sont modifiées ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Récupère le jeu de propriétés pour ce type. Par défaut, un type ne retourne aucune propriété.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> par l'intermédiaire duquel un contexte supplémentaire peut être fourni.</param>
      <param name="value">Valeur de l'objet pour lequel les propriétés doivent être obtenues.</param>
      <param name="attributes">Tableau d'objets <see cref="T:System.Attribute" /> qui décrivent les propriétés.</param>
      <returns>Ensemble des propriétés qui doivent être exposées pour ce type de données. Si aucune propriété ne doit être exposée, la valeur <see langword="null" /> peut être retournée. L'implémentation par défaut retourne toujours <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Détermine si cet objet prend en charge les propriétés. Par défaut, cette valeur est <see langword="false" />.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> par l'intermédiaire duquel un contexte supplémentaire peut être fourni.</param>
      <returns>Cette méthode retourne <see langword="true" /> si <see cref="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> doit être appelé pour rechercher les propriétés de cet objet ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Drawing.SizeConverter">
      <summary>La classe <see cref="T:System.Drawing.SizeConverter" /> est utilisée pour convertir d'un type de données à un autre. Accédez à cette classe via l'objet <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
    </member>
    <member name="M:System.Drawing.SizeConverter.#ctor">
      <summary>Initialise un nouvel objet <see cref="T:System.Drawing.SizeConverter" />.</summary>
    </member>
    <member name="M:System.Drawing.SizeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Détermine si ce convertisseur peut convertir un objet du type source spécifié en objet du type natif du convertisseur.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui peut être utilisé pour obtenir des informations supplémentaires concernant l'environnement à partir duquel ce convertisseur est appelé. La valeur peut être <see langword="null" />, vérifiez donc toujours. En outre, les propriétés sur l'objet de contexte peuvent retourner <see langword="null" />.</param>
      <param name="sourceType">Type à partir duquel vous souhaitez convertir.</param>
      <returns>Cette méthode retourne <see langword="true" /> si cet objet peut effectuer la conversion.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtient une valeur indiquant si ce convertisseur peut convertir un objet en objet du type de destination donné en utilisant le contexte.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui peut être utilisé pour obtenir des informations supplémentaires concernant l'environnement à partir duquel ce convertisseur est appelé. Vérifiez toujours, car la valeur peut être <see langword="null" />. En outre, les propriétés de l'objet de contexte peuvent retourner <see langword="null" />.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> qui représente le type vers lequel vous souhaitez convertir.</param>
      <returns>Cette méthode retourne <see langword="true" /> si ce convertisseur peut effectuer la conversion ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convertit l'objet spécifié en type natif du convertisseur.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui peut être utilisé pour obtenir des informations supplémentaires concernant l'environnement à partir duquel ce convertisseur est appelé. La valeur peut être <see langword="null" />, vérifiez donc toujours. En outre, les propriétés sur l'objet de contexte peuvent retourner <see langword="null" />.</param>
      <param name="culture">Objet <see cref="T:System.Globalization.CultureInfo" /> qui contient des informations de culture spécifiques, telles que la langue, le calendrier et des conventions associées à une culture spécifique. Il est basé sur la norme RFC 1766.</param>
      <param name="value">Objet à convertir.</param>
      <returns>Objet converti.</returns>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.Drawing.SizeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convertit l'objet spécifié dans le type spécifié.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui peut être utilisé pour obtenir des informations supplémentaires concernant l'environnement à partir duquel ce convertisseur est appelé. La valeur peut être <see langword="null" />, vérifiez donc toujours. En outre, les propriétés sur l'objet de contexte peuvent retourner <see langword="null" />.</param>
      <param name="culture">Objet <see cref="T:System.Globalization.CultureInfo" /> qui contient des informations de culture spécifiques, telles que la langue, le calendrier et des conventions associées à une culture spécifique. Il est basé sur la norme RFC 1766.</param>
      <param name="value">Objet à convertir.</param>
      <param name="destinationType">Type dans lequel convertir l'objet.</param>
      <returns>Objet converti.</returns>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>Crée un objet de ce type à l'aide d'un jeu de valeurs de propriétés spécifié pour l'objet. Cela est utile pour créer des objets non modifiables dotés de propriétés modifiables.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.TypeDescriptor" /> par l'intermédiaire duquel un contexte supplémentaire peut être fourni.</param>
      <param name="propertyValues">Dictionnaire de nouvelles valeurs de propriétés. Le dictionnaire contient une série de paires nom/valeur, à raison d'une paire par propriété retournée par la méthode <see cref="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />.</param>
      <returns>Objet nouvellement créé ou <see langword="null" /> si l'objet n'a pas pu être créé. L'implémentation par défaut retourne la valeur <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Détermine si la modification d'une valeur de cet objet nécessite un appel à la méthode <see cref="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> pour créer une nouvelle valeur.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.TypeDescriptor" /> par l'intermédiaire duquel un contexte supplémentaire peut être fourni.</param>
      <returns>
        <see langword="true" /> si l'objet <see cref="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> doit être appelé quand une ou plusieurs propriétés de cet objet sont modifiées.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Récupère le jeu de propriétés pour ce type. Par défaut, un type ne retourne aucune propriété.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.TypeDescriptor" /> par l'intermédiaire duquel un contexte supplémentaire peut être fourni.</param>
      <param name="value">Valeur de l'objet pour lequel les propriétés doivent être obtenues.</param>
      <param name="attributes">Tableau d'objets <see cref="T:System.Attribute" /> qui décrivent les propriétés.</param>
      <returns>Ensemble des propriétés qui doivent être exposées pour ce type de données. Si aucune propriété ne doit être exposée, la valeur <see langword="null" /> peut être retournée. L'implémentation par défaut retourne toujours <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Détermine si cet objet prend en charge les propriétés. Par défaut, cette valeur est <see langword="false" />.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.TypeDescriptor" /> par l'intermédiaire duquel un contexte supplémentaire peut être fourni.</param>
      <returns>
        <see langword="true" /> si la méthode <see cref="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> doit être appelée pour rechercher les propriétés de cet objet.</returns>
    </member>
    <member name="T:System.Drawing.SizeFConverter">
      <summary>Convertit les objets <see cref="T:System.Drawing.SizeF" /> d'un type en un autre type.</summary>
    </member>
    <member name="M:System.Drawing.SizeFConverter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Drawing.SizeFConverter" />.</summary>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Retourne une valeur indiquant si le convertisseur peut effectuer une conversion du type spécifié vers le type <see cref="T:System.Drawing.SizeF" />, à l'aide du contexte spécifié.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> par l'intermédiaire duquel un contexte supplémentaire peut être fourni.</param>
      <param name="sourceType">
        <see cref="T:System.Type" /> qui représente le type à partir duquel vous voulez effectuer la conversion.</param>
      <returns>
        <see langword="true" /> pour indiquer que la conversion peut être effectuée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Retourne une valeur indiquant si <see cref="T:System.Drawing.SizeFConverter" /> peut convertir <see cref="T:System.Drawing.SizeF" /> vers le type spécifié.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> par l'intermédiaire duquel un contexte supplémentaire peut être fourni.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> qui représente le type à partir duquel opérer la conversion.</param>
      <returns>
        <see langword="true" /> si ce convertisseur peut effectuer la conversion ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convertit l’objet donné dans le type de ce convertisseur en utilisant les informations de contexte et de culture spécifiées.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> à utiliser comme culture actuelle.</param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir.</param>
      <returns>
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convertit l’objet de valeur donné en type spécifié, en utilisant les informations de contexte et de culture spécifiées.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> Si la valeur null est passée, la culture est supposée être celle en cours.</param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> vers lequel le paramètre de valeur doit être converti.</param>
      <returns>
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>Crée une instance de <see cref="T:System.Drawing.SizeF" /> avec les valeurs de propriétés spécifiées à l'aide du contexte spécifié.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> par l'intermédiaire duquel un contexte supplémentaire peut être fourni.</param>
      <param name="propertyValues">
        <see cref="T:System.Collections.IDictionary" /> contenant les noms et les valeurs de propriétés.</param>
      <returns>
        <see cref="T:System.Object" /> représentant le nouveau <see cref="T:System.Drawing.SizeF" /> ou <see langword="null" /> si l'objet ne peut pas être créé.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Retourne une valeur indiquant si la modification d'une valeur de cet objet nécessite l'appel à la méthode <see cref="Overload:System.Drawing.SizeFConverter.CreateInstance" /> pour créer une nouvelle valeur.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format. Celui-ci peut être <see langword="null" />.</param>
      <returns>Retourne toujours <see langword="true" />.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Récupère un jeu de propriétés pour le type <see cref="T:System.Drawing.SizeF" /> à l'aide du contexte et des attributs spécifiés.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> par l'intermédiaire duquel un contexte supplémentaire peut être fourni.</param>
      <param name="value">
        <see cref="T:System.Object" /> pour lequel retourner les propriétés.</param>
      <param name="attributes">Tableau d'objets <see cref="T:System.Attribute" /> qui décrivent les propriétés.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> qui contient les propriétés.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Retourne une valeur indiquant si le type <see cref="T:System.Drawing.SizeF" /> prend en charge les propriétés.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> par l'intermédiaire duquel un contexte supplémentaire peut être fourni.</param>
      <returns>Retourne toujours <see langword="true" />.</returns>
    </member>
    <member name="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter">
      <summary>La classe <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter" /> représente le convertisseur de type pour la stratégie de protection étendue utilisée par le serveur pour valider les connexions clientes entrantes.</summary>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter" />.</summary>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Retourne une valeur indiquant si ce convertisseur peut convertir l'objet en objet du type spécifié.</summary>
      <param name="context">Objet à convertir.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> qui représente le type vers lequel vous souhaitez convertir.</param>
      <returns>
        <see langword="true" /> si ce convertisseur peut effectuer la conversion ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convertit l’objet en objet du type spécifié.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture">Objet <see cref="T:System.Globalization.CultureInfo" />. Si la valeur <see langword="null" /> est passée, la culture est supposée être la culture actuelle.</param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir. Il doit s’agir d’un objet <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> vers lequel le paramètre de valeur doit être converti.</param>
      <returns>
        <see cref="T:System.Object" /> qui représente le paramètre <paramref name="value" /> converti.</returns>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="destinationType" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">La conversion n'a pas pu être effectuée.</exception>
    </member>
    <member name="T:System.Timers.ElapsedEventArgs">
      <summary>Fournit des données pour l'événement <see cref="E:System.Timers.Timer.Elapsed" />.</summary>
    </member>
    <member name="P:System.Timers.ElapsedEventArgs.SignalTime">
      <summary>Obtient la date et l’heure auxquelles l’événement <see cref="E:System.Timers.Timer.Elapsed" /> a été déclenché.</summary>
      <returns>Heure à laquelle l'événement <see cref="E:System.Timers.Timer.Elapsed" /> a été déclenché.</returns>
    </member>
    <member name="T:System.Timers.ElapsedEventHandler">
      <summary>Représente la méthode qui gérera l'événement <see cref="E:System.Timers.Timer.Elapsed" /> d'un <see cref="T:System.Timers.Timer" />.</summary>
      <param name="sender">Source de l'événement.</param>
      <param name="e">Objet <see cref="T:System.Timers.ElapsedEventArgs" /> qui contient les données d'événement.</param>
    </member>
    <member name="T:System.Timers.Timer">
      <summary>Génère un événement au bout d'un intervalle défini, avec la possibilité de générer des événements récurrents.</summary>
    </member>
    <member name="M:System.Timers.Timer.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Timers.Timer" /> et affecte à toutes les propriétés leurs valeurs initiales.</summary>
    </member>
    <member name="M:System.Timers.Timer.#ctor(System.Double)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Timers.Timer" /> et affecte le nombre spécifié de millisecondes à la propriété <see cref="P:System.Timers.Timer.Interval" />.</summary>
      <param name="interval">Intervalle, en millisecondes, entre les événements. La valeur doit être supérieure à zéro et inférieure ou égale à <see cref="F:System.Int32.MaxValue" />.</param>
      <exception cref="T:System.ArgumentException">La valeur du paramètre <paramref name="interval" /> doit être inférieure ou égale à zéro, ou supérieure à <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="P:System.Timers.Timer.AutoReset">
      <summary>Obtient ou définit une valeur booléenne indiquant si <see cref="T:System.Timers.Timer" /> doit déclencher l'événement <see cref="E:System.Timers.Timer.Elapsed" /> une seule fois (<see langword="false" />) ou de façon répétée (<see langword="true" />).</summary>
      <returns>
        <see langword="true" /> si <see cref="T:System.Timers.Timer" /> doit déclencher l'événement <see cref="E:System.Timers.Timer.Elapsed" /> chaque fois que l'intervalle expire ; <see langword="false" /> s'il doit déclencher l'événement <see cref="E:System.Timers.Timer.Elapsed" /> une seule fois, à la première expiration de l'intervalle. La valeur par défaut est <see langword="true" />.</returns>
    </member>
    <member name="M:System.Timers.Timer.BeginInit">
      <summary>Débute l'initialisation au moment de l'exécution d'un <see cref="T:System.Timers.Timer" /> utilisé sur un formulaire ou par un autre composant.</summary>
    </member>
    <member name="M:System.Timers.Timer.Close">
      <summary>Libère les ressources utilisées par le <see cref="T:System.Timers.Timer" />.</summary>
    </member>
    <member name="M:System.Timers.Timer.Dispose(System.Boolean)">
      <summary>Libère toutes les ressources utilisées par le <see cref="T:System.Timers.Timer" /> actuel.</summary>
      <param name="disposing">
        <see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour libérer uniquement les ressources non managées.</param>
    </member>
    <member name="E:System.Timers.Timer.Elapsed">
      <summary>Se produit quand l'intervalle est écoulé.</summary>
    </member>
    <member name="P:System.Timers.Timer.Enabled">
      <summary>Obtient ou définit une valeur indiquant si <see cref="T:System.Timers.Timer" /> doit déclencher l'événement <see cref="E:System.Timers.Timer.Elapsed" />.</summary>
      <returns>
        <see langword="true" /> si <see cref="T:System.Timers.Timer" /> doit déclencher l'événement <see cref="E:System.Timers.Timer.Elapsed" /> ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</returns>
      <exception cref="T:System.ObjectDisposedException">Cette propriété ne peut pas être définie, car la minuterie a été supprimée.</exception>
      <exception cref="T:System.ArgumentException">La propriété <see cref="P:System.Timers.Timer.Interval" /> a eu une valeur supérieure à <see cref="F:System.Int32.MaxValue" /> avant que la minuterie ait été activée.</exception>
    </member>
    <member name="M:System.Timers.Timer.EndInit">
      <summary>Met fin à l'initialisation au moment de l'exécution d'un <see cref="T:System.Timers.Timer" /> utilisé sur un formulaire ou par un autre composant.</summary>
    </member>
    <member name="P:System.Timers.Timer.Interval">
      <summary>Obtient ou définit l'intervalle, exprimé en millisecondes, auquel l'événement <see cref="E:System.Timers.Timer.Elapsed" /> doit être déclenché.</summary>
      <returns>Intervalle en millisecondes séparant les événements <see cref="E:System.Timers.Timer.Elapsed" />. La valeur doit être supérieure à zéro et inférieure ou égale à <see cref="F:System.Int32.MaxValue" />. La valeur par défaut est 100 millisecondes.</returns>
      <exception cref="T:System.ArgumentException">L'intervalle est inférieur ou égal à zéro.
ou
L'intervalle est supérieur à <see cref="F:System.Int32.MaxValue" /> et la minuterie est actuellement activée. (Si la minuterie n'est pas activée actuellement, aucune exception n'est levée jusqu'à ce qu'elle soit activée.)</exception>
    </member>
    <member name="P:System.Timers.Timer.Site">
      <summary>Obtient ou définit le site qui lie <see cref="T:System.Timers.Timer" /> à son conteneur en mode design.</summary>
      <returns>Interface <see cref="T:System.ComponentModel.ISite" /> représentant le site qui lie l'objet <see cref="T:System.Timers.Timer" /> à son conteneur.</returns>
    </member>
    <member name="M:System.Timers.Timer.Start">
      <summary>Lance le déclenchement de l'événement <see cref="E:System.Timers.Timer.Elapsed" /> en affectant à <see cref="P:System.Timers.Timer.Enabled" /> la valeur <see langword="true" />.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="T:System.Timers.Timer" /> est créé avec un intervalle supérieur ou égal à <see cref="F:System.Int32.MaxValue" /> + 1, ou défini à un intervalle inférieur à zéro.</exception>
    </member>
    <member name="M:System.Timers.Timer.Stop">
      <summary>Arrête le déclenchement de l'événement <see cref="E:System.Timers.Timer.Elapsed" /> en affectant à <see cref="P:System.Timers.Timer.Enabled" /> la valeur <see langword="false" />.</summary>
    </member>
    <member name="P:System.Timers.Timer.SynchronizingObject">
      <summary>Obtient ou définit l'objet utilisé pour marshaler les appels du gestionnaire d'événements émis quand un intervalle a expiré.</summary>
      <returns>
        <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> représentant l'objet utilisé pour marshaler les appels du gestionnaire d'événements émis quand un intervalle a expiré. La valeur par défaut est <see langword="null" />.</returns>
    </member>
    <member name="T:System.Timers.TimersDescriptionAttribute">
      <summary>Définit la description que les concepteurs visuels peuvent afficher lors du référencement d'un événement, d'un extendeur ou d'une propriété.</summary>
    </member>
    <member name="M:System.Timers.TimersDescriptionAttribute.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Timers.TimersDescriptionAttribute" />.</summary>
      <param name="description">Description à utiliser.</param>
    </member>
    <member name="P:System.Timers.TimersDescriptionAttribute.Description">
      <summary>Obtient la description que les concepteurs visuels peuvent afficher lors du référencement d'un événement, d'un extendeur ou d'une propriété.</summary>
      <returns>Description de l'événement, de l'extendeur ou de la propriété.</returns>
    </member>
    <member name="T:System.UriTypeConverter">
      <summary>Convertit un type <see cref="T:System.String" /> en type <see cref="T:System.Uri" />, et inversement.</summary>
    </member>
    <member name="M:System.UriTypeConverter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.UriTypeConverter" />.</summary>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Retourne une valeur indiquant si ce convertisseur peut convertir un objet du type donné en objet du type de ce convertisseur.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="sourceType">
        <see cref="T:System.Type" /> représentant le type à partir duquel effectuer la conversion.</param>
      <returns>
        <see langword="true" /> si <paramref name="sourceType" /> est un type <see cref="T:System.String" /> ou un type <see cref="T:System.Uri" /> qui peut être assigné à partir de <paramref name="sourceType" /> ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="sourceType" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Retourne une valeur indiquant si ce convertisseur peut convertir l’objet en objet du type spécifié, à l’aide du contexte spécifié.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> représentant le type vers lequel effectuer la conversion.</param>
      <returns>
        <see langword="true" /> si <paramref name="destinationType" /> est de type <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />, <see cref="T:System.String" /> ou <see cref="T:System.Uri" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.UriTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convertit l’objet donné dans le type de ce convertisseur en utilisant les informations de contexte et de culture spécifiées.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> à utiliser comme culture actuelle.</param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir.</param>
      <returns>
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.UriTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convertit l'objet de valeur donné dans le type spécifié, à l'aide du contexte et des informations de culture spécifiés.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> Si la valeur <see langword="null" /> est passée, la culture est supposée être la culture actuelle.</param>
      <param name="value">
        <see cref="T:System.Object" /> à convertir.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> auquel le paramètre <paramref name="value" /> doit être converti.</param>
      <returns>
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="destinationType" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.UriTypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>Retourne si l'objet de valeur donné est un <see cref="T:System.Uri" /> ou un <see cref="T:System.Uri" /> à partir duquel il peut être créé.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="value">
        <see cref="T:System.Object" /> dont la validité doit être testée.</param>
      <returns>
        <see langword="true" /> si <paramref name="value" /> est un <see cref="T:System.Uri" /> ou un <see cref="T:System.String" /> à partir duquel un <see cref="T:System.Uri" /> peut être créé ; sinon, <see langword="false" />.</returns>
    </member>
  </members>
</doc>
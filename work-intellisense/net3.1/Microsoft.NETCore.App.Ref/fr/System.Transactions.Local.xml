<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Transactions.Local</name>
  </assembly>
  <members>
    <member name="T:System.Transactions.CommittableTransaction">
      <summary vsli:raw="Describes a committable transaction.">Décrit une transaction pouvant être validée.</summary>
    </member>
    <member name="M:System.Transactions.CommittableTransaction.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.CommittableTransaction&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.CommittableTransaction" />.</summary>
      <exception cref="T:System.PlatformNotSupportedException">Tentative de création d'une transaction sur Windows 98, Windows 98 Deuxième Édition ou Windows Millennium Edition.</exception>
    </member>
    <member name="M:System.Transactions.CommittableTransaction.#ctor(System.TimeSpan)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.CommittableTransaction&quot; /&gt; class with the specified &lt;paramref name=&quot;timeout&quot; /&gt; value.">Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.CommittableTransaction" /> avec la valeur <paramref name="timeout" /> spécifiée.</summary>
      <param name="timeout" vsli:raw="The maximum amount of time the transaction can exist, before it is aborted.">Délai maximal pendant lequel la transaction peut exister avant d'être abandonnée.</param>
      <exception cref="T:System.PlatformNotSupportedException">Tentative de création d'une transaction sur Windows 98, Windows 98 Deuxième Édition ou Windows Millennium Edition.</exception>
    </member>
    <member name="M:System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.CommittableTransaction&quot; /&gt; class with the specified transaction options.">Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.CommittableTransaction" /> avec les options de transaction spécifiées.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.Transactions.TransactionOptions&quot; /&gt; structure that describes the transaction options to use for the new transaction.">Structure <see cref="T:System.Transactions.TransactionOptions" /> qui décrit les options de transaction à utiliser pour la nouvelle transaction.</param>
      <exception cref="T:System.PlatformNotSupportedException">Tentative de création d'une transaction sur Windows 98, Windows 98 Deuxième Édition ou Windows Millennium Edition.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is invalid.">
        <paramref name="options" /> n'est pas valide.</exception>
    </member>
    <member name="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)">
      <summary vsli:raw="Begins an attempt to commit the transaction asynchronously.">Commence une tentative de validation de la transaction de façon asynchrone.</summary>
      <param name="asyncCallback" vsli:raw="The &lt;see cref=&quot;T:System.AsyncCallback&quot; /&gt; delegate that is invoked when the transaction completes. This parameter can be &lt;see langword=&quot;null&quot; /&gt;, in which case the application is not notified of the transaction's completion. Instead, the application must use the &lt;see cref=&quot;T:System.IAsyncResult&quot; /&gt; interface to check for completion and wait accordingly, or call &lt;see cref=&quot;M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)&quot; /&gt; to wait for completion.">Délégué <see cref="T:System.AsyncCallback" /> appelé lorsque la transaction se termine. Ce paramètre peut être <see langword="null" />, auquel cas l'application n'est pas avertie de la fin de la transaction. L'application doit plutôt utiliser l'interface <see cref="T:System.IAsyncResult" /> pour vérifier la fin et attendre en conséquence ou appeler <see cref="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)" /> pour attendre la fin.</param>
      <param name="asyncState" vsli:raw="An object, which might contain arbitrary state information, associated with the asynchronous commitment. This object is passed to the callback, and is not interpreted by &lt;see cref=&quot;N:System.Transactions&quot; /&gt;. A null reference is permitted.">Objet qui peut contenir des informations d'état arbitraires, associé à la validation asynchrone. Cet objet est passé au rappel et n'est pas interprété par <see cref="N:System.Transactions" />. Une référence nulle est autorisée.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.IAsyncResult&quot; /&gt; interface that can be used by the caller to check the status of the asynchronous operation, or to wait for the operation to complete.">Interface <see cref="T:System.IAsyncResult" /> qui peut être utilisée par l'appelant pour vérifier l'état de l'opération asynchrone ou attendre la fin de l'opération.</returns>
    </member>
    <member name="M:System.Transactions.CommittableTransaction.Commit">
      <summary vsli:raw="Attempts to commit the transaction.">Essaie de valider la transaction.</summary>
      <exception cref="T:System.Transactions.TransactionInDoubtException" vsli:raw="&lt;see cref=&quot;M:System.Transactions.CommittableTransaction.Commit&quot; /&gt; is called on a transaction and the transaction becomes &lt;see cref=&quot;F:System.Transactions.TransactionStatus.InDoubt&quot; /&gt;.">
        <see cref="M:System.Transactions.CommittableTransaction.Commit" /> est appelé sur une transaction et la transaction devient <see cref="F:System.Transactions.TransactionStatus.InDoubt" />.</exception>
      <exception cref="T:System.Transactions.TransactionAbortedException" vsli:raw="&lt;see cref=&quot;M:System.Transactions.CommittableTransaction.Commit&quot; /&gt; is called and the transaction rolls back for the first time.">
        <see cref="M:System.Transactions.CommittableTransaction.Commit" /> est appelé et la transaction est restaurée pour la première fois.</exception>
    </member>
    <member name="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)">
      <summary vsli:raw="Ends an attempt to commit the transaction asynchronously.">Termine une tentative de validation de la transaction de façon asynchrone.</summary>
      <param name="asyncResult" vsli:raw="The &lt;see cref=&quot;T:System.IAsyncResult&quot; /&gt; object associated with the asynchronous commitment.">Objet <see cref="T:System.IAsyncResult" /> associé à la validation asynchrone.</param>
      <exception cref="T:System.Transactions.TransactionAbortedException" vsli:raw="&lt;see cref=&quot;M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)&quot; /&gt; is called and the transaction rolls back for the first time.">
        <see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /> est appelé et la transaction est restaurée pour la première fois.</exception>
    </member>
    <member name="P:System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState">
      <summary vsli:raw="Gets the object provided as the last parameter of the &lt;see cref=&quot;M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)&quot; /&gt; method call.">Obtient l'objet fourni comme dernier paramètre d'un appel à la méthode <see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" />.</summary>
      <returns vsli:raw="The object provided as the last parameter of the &lt;see cref=&quot;M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)&quot; /&gt; method call.">Objet fourni comme dernier paramètre d'un appel à la méthode <see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" />.</returns>
    </member>
    <member name="P:System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; that is used to wait for an asynchronous operation to complete.">Obtient un <see cref="T:System.Threading.WaitHandle" /> qui est utilisé pour attendre qu’une opération asynchrone se termine.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; that is used to wait for an asynchronous operation to complete.">
        <see cref="T:System.Threading.WaitHandle" /> utilisé pour attendre qu’une opération asynchrone se termine.</returns>
    </member>
    <member name="P:System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously">
      <summary vsli:raw="Gets an indication of whether the asynchronous commit operation completed synchronously.">Obtient une indication précisant si l'opération de validation asynchrone a été terminée de manière synchrone.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the asynchronous commit operation completed synchronously; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This property always returns &lt;see langword=&quot;false&quot; /&gt; even if the operation completed synchronously.">
        <see langword="true" /> si l'opération de validation asynchrone a été terminée de manière synchrone ; sinon, <see langword="false" />. Cette propriété retourne toujours <see langword="false" /> même si l'opération a été terminée de façon synchrone.</returns>
    </member>
    <member name="P:System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted">
      <summary vsli:raw="Gets an indication whether the asynchronous commit operation has completed.">Obtient une indication précisant si l'opération de validation asynchrone est terminée.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the operation is complete; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’opération est terminée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Transactions.DependentCloneOption">
      <summary vsli:raw="Controls what kind of dependent transaction to create.">Contrôle le type de transaction dépendante à créer.</summary>
    </member>
    <member name="F:System.Transactions.DependentCloneOption.BlockCommitUntilComplete">
      <summary vsli:raw="The dependent transaction blocks the commit process of the transaction until the parent transaction times out, or &lt;see cref=&quot;M:System.Transactions.DependentTransaction.Complete&quot; /&gt; is called. In this case, additional work can be done on the transaction and new enlistments can be created.">La transaction dépendante bloque le processus de validation de la transaction jusqu'à ce que la transaction parent expire ou que <see cref="M:System.Transactions.DependentTransaction.Complete" /> soit appelé. Dans ce cas, le travail supplémentaire peut être fait sur la transaction et les nouvelles inscriptions peuvent être créées.</summary>
    </member>
    <member name="F:System.Transactions.DependentCloneOption.RollbackIfNotComplete">
      <summary vsli:raw="The dependent transaction automatically aborts the transaction if Commit is called on the parent transaction before &lt;see cref=&quot;M:System.Transactions.DependentTransaction.Complete&quot; /&gt; is called.">La transaction dépendante abandonne automatiquement la transaction si la validation est appelée sur la transaction parent avant que <see cref="M:System.Transactions.DependentTransaction.Complete" /> ne soit appelé.</summary>
    </member>
    <member name="T:System.Transactions.DependentTransaction">
      <summary vsli:raw="Describes a clone of a transaction providing guarantee that the transaction cannot be committed until the application comes to rest regarding work on the transaction. This class cannot be inherited.">Décrit un clone d'une transaction qui garantit que la transaction ne peut pas être validée tant que l'application n'a pas fini son travail sur la transaction. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.Transactions.DependentTransaction.Complete">
      <summary vsli:raw="Attempts to complete the dependent transaction.">Tente de terminer la transaction dépendante.</summary>
      <exception cref="T:System.Transactions.TransactionException" vsli:raw="Any attempt for additional work on the transaction after this method is called. These include invoking methods such as &lt;see cref=&quot;Overload:System.Transactions.Transaction.EnlistVolatile&quot; /&gt;, &lt;see cref=&quot;Overload:System.Transactions.Transaction.EnlistDurable&quot; /&gt;, &lt;see cref=&quot;M:System.Transactions.Transaction.Clone&quot; /&gt;, &lt;see cref=&quot;M:System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)&quot; /&gt; , or any serialization operations on the transaction.">Toute tentative de travail supplémentaire sur la transaction lorsque cette méthode est appelée. Cela inclut l’appel de méthodes telles que <see cref="Overload:System.Transactions.Transaction.EnlistVolatile" />, <see cref="Overload:System.Transactions.Transaction.EnlistDurable" />, <see cref="M:System.Transactions.Transaction.Clone" />, <see cref="M:System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)" /> , ou toute opération de sérialisation sur la transaction.</exception>
    </member>
    <member name="T:System.Transactions.Enlistment">
      <summary vsli:raw="Facilitates communication between an enlisted transaction participant and the transaction manager during the final phase of the transaction.">Facilite la communication entre un participant de transaction inscrit et le gestionnaire de transactions pendant la phase finale de la transaction.</summary>
    </member>
    <member name="M:System.Transactions.Enlistment.Done">
      <summary vsli:raw="Indicates that the transaction participant has completed its work.">Indique que le participant à la transaction a terminé son travail.</summary>
    </member>
    <member name="T:System.Transactions.EnlistmentOptions">
      <summary vsli:raw="Determines whether the object should be enlisted during the prepare phase.">Détermine si l'objet doit être inscrit pendant la phase de préparation.</summary>
    </member>
    <member name="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired">
      <summary vsli:raw="The object must enlist during the initial phase of the commitment process.">L'objet doit s'inscrire pendant la phase initiale du processus de validation.</summary>
    </member>
    <member name="F:System.Transactions.EnlistmentOptions.None">
      <summary vsli:raw="The object does not require enlistment during the initial phase of the commitment process.">L'objet ne requiert pas d'inscription pendant la phase initiale du processus de validation.</summary>
    </member>
    <member name="T:System.Transactions.EnterpriseServicesInteropOption">
      <summary vsli:raw="Specifies how distributed transactions interact with COM+ transactions.">Spécifie comment les transactions distribuées interagissent avec les transactions COM+.</summary>
    </member>
    <member name="F:System.Transactions.EnterpriseServicesInteropOption.Automatic">
      <summary vsli:raw="Search for an existing COM+ context and synchronize with it if one exists.">Recherche un contexte COM+ existant et se synchronise avec s'il en existe un.</summary>
    </member>
    <member name="F:System.Transactions.EnterpriseServicesInteropOption.Full">
      <summary vsli:raw="The &lt;see cref=&quot;N:System.EnterpriseServices&quot; /&gt; context (which can be retrieved by calling the static method &lt;see cref=&quot;P:System.EnterpriseServices.ContextUtil.Transaction&quot; /&gt; of the &lt;see cref=&quot;T:System.EnterpriseServices.ContextUtil&quot; /&gt; class) and the &lt;see cref=&quot;N:System.Transactions&quot; /&gt; ambient transaction (which can be retrieved by calling the static method &lt;see cref=&quot;P:System.Transactions.Transaction.Current&quot; /&gt; of the &lt;see cref=&quot;T:System.Transactions.Transaction&quot; /&gt; class) are always synchronized. This introduces a performance penalty because new &lt;see cref=&quot;N:System.EnterpriseServices&quot; /&gt; contexts may need to be created.">Le contexte <see cref="N:System.EnterpriseServices" /> (qui peut être récupéré en appelant la méthode statique <see cref="P:System.EnterpriseServices.ContextUtil.Transaction" /> de la classe <see cref="T:System.EnterpriseServices.ContextUtil" />) et la transaction ambiante <see cref="N:System.Transactions" /> (qui peut être récupérée en appelant la méthode statique <see cref="P:System.Transactions.Transaction.Current" /> de la classe <see cref="T:System.Transactions.Transaction" />) sont toujours synchronisés. Cela introduit une perte de performance parce que de nouveaux contextes <see cref="N:System.EnterpriseServices" /> doivent être créés si nécessaire.</summary>
    </member>
    <member name="F:System.Transactions.EnterpriseServicesInteropOption.None">
      <summary vsli:raw="There is no synchronization between &lt;see cref=&quot;P:System.EnterpriseServices.ContextUtil.Transaction&quot; /&gt; and &lt;see cref=&quot;P:System.Transactions.Transaction.Current&quot; /&gt;.">Il n'y a aucune synchronisation entre <see cref="P:System.EnterpriseServices.ContextUtil.Transaction" /> et <see cref="P:System.Transactions.Transaction.Current" />.</summary>
    </member>
    <member name="T:System.Transactions.HostCurrentTransactionCallback">
      <summary vsli:raw="Provides a mechanism for the hosting environment to supply its own default notion of &lt;see cref=&quot;P:System.Transactions.Transaction.Current&quot; /&gt;.">Fournit un mécanisme à l'environnement d'hébergement pour qu'il fournisse sa propre notion par défaut de <see cref="P:System.Transactions.Transaction.Current" />.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Transactions.Transaction&quot; /&gt; object.">Objet <see cref="T:System.Transactions.Transaction" />.</returns>
    </member>
    <member name="T:System.Transactions.IDtcTransaction">
      <summary vsli:raw="Describes a DTC transaction.">Décrit une transaction DTC.</summary>
    </member>
    <member name="M:System.Transactions.IDtcTransaction.Abort(System.IntPtr,System.Int32,System.Int32)">
      <summary vsli:raw="Aborts a transaction.">Abandonne une transaction.</summary>
      <param name="reason" vsli:raw="An optional &lt;see cref=&quot;T:System.EnterpriseServices.BOID&quot; /&gt; that indicates why the transaction is being aborted. This parameter can be &lt;see langword=&quot;null&quot; /&gt;, indicating that no reason for the abort is provided.">
        <see cref="T:System.EnterpriseServices.BOID" /> optionnel indiquant pourquoi la transaction est abandonnée. Ce paramètre peut être <see langword="null" />, indiquant qu'aucune raison pour l'abandon n'est fournie.</param>
      <param name="retaining" vsli:raw="This value must be &lt;see langword=&quot;false&quot; /&gt;.">Cette valeur doit être <see langword="false" />.</param>
      <param name="async" vsli:raw="When &lt;paramref name=&quot;async&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt;, an asynchronous abort is performed and the caller must use &lt;see langword=&quot;ITransactionOutcomeEvents&quot; /&gt; to learn about the outcome of the transaction.">Lorsque <paramref name="async" /> a la valeur <see langword="true" />, un abandon asynchrone est exécuté et l'appelant doit utiliser <see langword="ITransactionOutcomeEvents" /> pour connaître le résultat de la transaction.</param>
    </member>
    <member name="M:System.Transactions.IDtcTransaction.Commit(System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Commits a transaction.">Valide la transaction.</summary>
      <param name="retaining" vsli:raw="This value must be &lt;see langword=&quot;false&quot; /&gt;.">Cette valeur doit être <see langword="false" />.</param>
      <param name="commitType" vsli:raw="A value taken from the OLE DB enumeration &lt;see langword=&quot;XACTTC&quot; /&gt;.">Valeur issue de l'énumération OLE DB <see langword="XACTTC" />.</param>
      <param name="reserved" vsli:raw="This value must be zero.">Cette valeur doit être zéro.</param>
    </member>
    <member name="M:System.Transactions.IDtcTransaction.GetTransactionInfo(System.IntPtr)">
      <summary vsli:raw="Retrieves information about a transaction.">Récupère des informations à propos d'une transaction.</summary>
      <param name="transactionInformation" vsli:raw="Pointer to the caller-allocated &lt;see cref=&quot;T:System.EnterpriseServices.XACTTRANSINFO&quot; /&gt; structure that will receive information about the transaction. This value must not be &lt;see langword=&quot;null&quot; /&gt;.">Pointeur vers la structure <see cref="T:System.EnterpriseServices.XACTTRANSINFO" /> allouée par l'appelant qui recevra des informations sur la transaction. Cette valeur ne doit pas être <see langword="null" />.</param>
    </member>
    <member name="T:System.Transactions.IEnlistmentNotification">
      <summary vsli:raw="Describes an interface that a resource manager should implement to provide two phase commit notification callbacks for the transaction manager upon enlisting for participation.">Décrit une interface qu’un gestionnaire de ressources devrait implémenter pour fournir au gestionnaire des transactions des rappels de notification de validation à deux phases lors de l’inscription pour participation.</summary>
    </member>
    <member name="M:System.Transactions.IEnlistmentNotification.Commit(System.Transactions.Enlistment)">
      <summary vsli:raw="Notifies an enlisted object that a transaction is being committed.">Avertit un objet inscrit qu'une transaction est en cours de validation.</summary>
      <param name="enlistment" vsli:raw="An &lt;see cref=&quot;T:System.Transactions.Enlistment&quot; /&gt; object used to send a response to the transaction manager.">Objet <see cref="T:System.Transactions.Enlistment" /> utilisé pour envoyer une réponse au gestionnaire de transactions.</param>
    </member>
    <member name="M:System.Transactions.IEnlistmentNotification.InDoubt(System.Transactions.Enlistment)">
      <summary vsli:raw="Notifies an enlisted object that the status of a transaction is in doubt.">Avertit un objet inscrit que l'état d'une transaction est dans le doute.</summary>
      <param name="enlistment" vsli:raw="An &lt;see cref=&quot;T:System.Transactions.Enlistment&quot; /&gt; object used to send a response to the transaction manager.">Objet <see cref="T:System.Transactions.Enlistment" /> utilisé pour envoyer une réponse au gestionnaire de transactions.</param>
    </member>
    <member name="M:System.Transactions.IEnlistmentNotification.Prepare(System.Transactions.PreparingEnlistment)">
      <summary vsli:raw="Notifies an enlisted object that a transaction is being prepared for commitment.">Avertit un objet inscrit qu'une transaction est en cours de préparation pour validation.</summary>
      <param name="preparingEnlistment" vsli:raw="A &lt;see cref=&quot;T:System.Transactions.PreparingEnlistment&quot; /&gt; object used to send a response to the transaction manager.">Objet <see cref="T:System.Transactions.PreparingEnlistment" /> utilisé pour envoyer une réponse au gestionnaire de transactions.</param>
    </member>
    <member name="M:System.Transactions.IEnlistmentNotification.Rollback(System.Transactions.Enlistment)">
      <summary vsli:raw="Notifies an enlisted object that a transaction is being rolled back (aborted).">Avertit un objet inscrit qu'une transaction est en cours de restauration (abandonnée).</summary>
      <param name="enlistment" vsli:raw="A &lt;see cref=&quot;T:System.Transactions.Enlistment&quot; /&gt; object used to send a response to the transaction manager.">Objet <see cref="T:System.Transactions.Enlistment" /> utilisé pour envoyer une réponse au gestionnaire de transactions.</param>
    </member>
    <member name="T:System.Transactions.IPromotableSinglePhaseNotification">
      <summary vsli:raw="Describes an object that acts as a commit delegate for a non-distributed transaction internal to a resource manager.">Décrit un objet qui sert de délégué de validation pour une transaction non distribuée interne à un gestionnaire de ressources.</summary>
    </member>
    <member name="M:System.Transactions.IPromotableSinglePhaseNotification.Initialize">
      <summary vsli:raw="Notifies a transaction participant that enlistment has completed successfully.">Avertit un participant à la transaction que l'inscription a été terminée avec succès.</summary>
      <exception cref="T:System.Transactions.TransactionException" vsli:raw="An attempt to enlist or serialize a transaction.">Tentative d'inscription ou de sérialisation d'une transaction.</exception>
    </member>
    <member name="M:System.Transactions.IPromotableSinglePhaseNotification.Rollback(System.Transactions.SinglePhaseEnlistment)">
      <summary vsli:raw="Notifies an enlisted object that the transaction is being rolled back.">Avertit un objet inscrit que la transaction est en cours de restauration.</summary>
      <param name="singlePhaseEnlistment" vsli:raw="A &lt;see cref=&quot;T:System.Transactions.SinglePhaseEnlistment&quot; /&gt; object used to send a response to the transaction manager.">Objet <see cref="T:System.Transactions.SinglePhaseEnlistment" /> utilisé pour envoyer une réponse au gestionnaire de transactions.</param>
    </member>
    <member name="M:System.Transactions.IPromotableSinglePhaseNotification.SinglePhaseCommit(System.Transactions.SinglePhaseEnlistment)">
      <summary vsli:raw="Notifies an enlisted object that the transaction is being committed.">Avertit un objet inscrit que la transaction est en cours de validation.</summary>
      <param name="singlePhaseEnlistment" vsli:raw="A &lt;see cref=&quot;T:System.Transactions.SinglePhaseEnlistment&quot; /&gt; interface used to send a response to the transaction manager.">Interface <see cref="T:System.Transactions.SinglePhaseEnlistment" /> utilisée pour envoyer une réponse au gestionnaire de transactions.</param>
    </member>
    <member name="T:System.Transactions.ISimpleTransactionSuperior">
      <summary vsli:raw="Represents a transaction that is not a root transaction, but can be escalated to be managed by the MSDTC.">Représente une transaction qui n'est pas une transaction de racine, mais peut être remontée pour être gérée par le MSDTC.</summary>
    </member>
    <member name="M:System.Transactions.ISimpleTransactionSuperior.Rollback">
      <summary vsli:raw="Notifies an enlisted object that the transaction is being rolled back.">Avertit un objet inscrit que la transaction est en cours de restauration.</summary>
    </member>
    <member name="T:System.Transactions.ISinglePhaseNotification">
      <summary vsli:raw="Describes a resource object that supports single phase commit optimization to participate in a transaction.">Décrit un objet de ressource qui prend en charge l’optimisation de la validation en une phase dans une transaction.</summary>
    </member>
    <member name="M:System.Transactions.ISinglePhaseNotification.SinglePhaseCommit(System.Transactions.SinglePhaseEnlistment)">
      <summary vsli:raw="Represents the resource manager's implementation of the callback for the single phase commit optimization.">Représente l'implémentation du gestionnaire de ressources du rappel pour l'optimisation de la validation à phase unique.</summary>
      <param name="singlePhaseEnlistment" vsli:raw="A &lt;see cref=&quot;T:System.Transactions.SinglePhaseEnlistment&quot; /&gt; used to send a response to the transaction manager.">
        <see cref="T:System.Transactions.SinglePhaseEnlistment" /> utilisé pour envoyer une réponse au gestionnaire de transactions.</param>
    </member>
    <member name="T:System.Transactions.IsolationLevel">
      <summary vsli:raw="Specifies the isolation level of a transaction.">Spécifie le niveau d'isolement d'une transaction.</summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.Chaos">
      <summary vsli:raw="The pending changes from more highly isolated transactions cannot be overwritten.">Les modifications en attente, provenant des transactions les plus isolées, ne peuvent pas être remplacées.</summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.ReadCommitted">
      <summary vsli:raw="Volatile data cannot be read during the transaction, but can be modified.">Les données volatiles ne peuvent pas être lues pendant la transaction, mais peuvent être modifiées.</summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.ReadUncommitted">
      <summary vsli:raw="Volatile data can be read and modified during the transaction.">Les données volatiles peuvent être lues et modifiées pendant la transaction.</summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.RepeatableRead">
      <summary vsli:raw="Volatile data can be read but not modified during the transaction. New data can be added during the transaction.">Les données volatiles peuvent être lues mais pas modifiées pendant la transaction. De nouvelles données peuvent être ajoutées pendant la transaction.</summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.Serializable">
      <summary vsli:raw="Volatile data can be read but not modified, and no new data can be added during the transaction.">Les données volatiles peuvent être lues mais pas modifiées et aucune nouvelle donnée ne peut être ajoutée pendant la transaction.</summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.Snapshot">
      <summary vsli:raw="&lt;para&gt;Volatile data can be read. Before a transaction modifies data, it verifies if another transaction has changed the data after it was initially read. If the data has been updated, an error is raised. This allows a transaction to get to the previously committed value of the data.&lt;/para&gt;&lt;para&gt;When you try to promote a transaction that was created with the &lt;see langword=&quot;Snapshot&quot; /&gt; isolation level, an &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the error message &quot;Transactions with IsolationLevel Snapshot cannot be promoted&quot;.&lt;/para&gt;">Les données volatiles peuvent être lues. Avant qu'une transaction ne modifie des données, elle vérifie si une autre transaction a modifié les données après la lecture initiale. Si les données ont été mises à jour, une erreur est déclenchée. Une transaction peut ainsi obtenir la valeur précédemment validée des données.
Lorsque vous essayez de promouvoir une transaction qui a été créée avec le niveau d’isolement <see langword="Snapshot" />, une <see cref="T:System.InvalidOperationException" /> est levée avec le message d’erreur « Impossible de promouvoir les transactions comportant la capture instantanée IsolationLevel ».</summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.Unspecified">
      <summary vsli:raw="A different isolation level than the one specified is being used, but the level cannot be determined. An exception is thrown if this value is set.">Un niveau d'isolement différent de celui spécifié est utilisé actuellement, mais il est impossible de le déterminer. Une exception est levée si cette valeur est définie.</summary>
    </member>
    <member name="T:System.Transactions.ITransactionPromoter">
      <summary vsli:raw="Describes a delegated transaction for an existing transaction that can be escalated to be managed by the MSDTC when needed.">Décrit une transaction déléguée pour une transaction existante qui peut être remontée pour être gérée par le MSDTC, si nécessaire.</summary>
    </member>
    <member name="M:System.Transactions.ITransactionPromoter.Promote">
      <summary vsli:raw="Notifies an enlisted object that an escalation of the delegated transaction has been requested.">Avertit un objet inscrit qu'une remontée de la transaction déléguée a été demandée.</summary>
      <returns vsli:raw="A transmitter/receiver propagation token that marshals a distributed transaction. For more information, see &lt;see cref=&quot;M:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken(System.Byte[])&quot; /&gt;.">Un jeton de propagation émetteur/récepteur qui marshale une transaction distribuée. Pour plus d'informations, consultez <see cref="M:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken(System.Byte[])" />.</returns>
    </member>
    <member name="T:System.Transactions.PreparingEnlistment">
      <summary vsli:raw="Facilitates communication between an enlisted transaction participant and the transaction manager during the Prepare phase of the transaction.">Facilite la communication entre un participant de transaction inscrit et le gestionnaire de transactions pendant la phase de préparation de la transaction.</summary>
    </member>
    <member name="M:System.Transactions.PreparingEnlistment.ForceRollback">
      <summary vsli:raw="Indicates that the transaction should be rolled back.">Indique que la transaction doit être restaurée.</summary>
    </member>
    <member name="M:System.Transactions.PreparingEnlistment.ForceRollback(System.Exception)">
      <summary vsli:raw="Indicates that the transaction should be rolled back.">Indique que la transaction doit être restaurée.</summary>
      <param name="e" vsli:raw="An explanation of why a rollback is triggered.">Explication sur la raison pour laquelle une restauration est déclenchée.</param>
    </member>
    <member name="M:System.Transactions.PreparingEnlistment.Prepared">
      <summary vsli:raw="Indicates that the transaction can be committed.">Indique que la transaction peut être validée.</summary>
    </member>
    <member name="M:System.Transactions.PreparingEnlistment.RecoveryInformation">
      <summary vsli:raw="Gets the recovery information of an enlistment.">Obtient les informations de récupération d'une inscription.</summary>
      <returns vsli:raw="The recovery information of an enlistment.">Informations de récupération d'une inscription.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An attempt to get recovery information inside a volatile enlistment, which does not generate any recovery information.">Tentative d'obtenir des informations de récupération à l'intérieur d'une inscription volatile qui ne génère pas d'informations de récupération.</exception>
    </member>
    <member name="T:System.Transactions.SinglePhaseEnlistment">
      <summary vsli:raw="Provides a set of callbacks that facilitate communication between a participant enlisted for Single Phase Commit and the transaction manager when the &lt;see cref=&quot;M:System.Transactions.ISinglePhaseNotification.SinglePhaseCommit(System.Transactions.SinglePhaseEnlistment)&quot; /&gt; notification is received.">Fournit un jeu des rappels qui facilite la communication entre un participant inscrit pour une validation à phase unique et le gestionnaire de transactions lorsque la notification <see cref="M:System.Transactions.ISinglePhaseNotification.SinglePhaseCommit(System.Transactions.SinglePhaseEnlistment)" /> est reçue.</summary>
    </member>
    <member name="M:System.Transactions.SinglePhaseEnlistment.Aborted">
      <summary vsli:raw="Represents a callback that is used to indicate to the transaction manager that the transaction should be rolled back.">Représente un rappel qui est utilisé pour indiquer au gestionnaire de transactions que la transaction doit être restaurée.</summary>
    </member>
    <member name="M:System.Transactions.SinglePhaseEnlistment.Aborted(System.Exception)">
      <summary vsli:raw="Represents a callback that is used to indicate to the transaction manager that the transaction should be rolled back, and provides an explanation.">Représente un rappel qui est utilisé pour indiquer au gestionnaire de transactions que la transaction doit être restaurée et fournit une explication.</summary>
      <param name="e" vsli:raw="An explanation of why a rollback is initiated.">Explication sur la raison pour laquelle une restauration est initiée.</param>
    </member>
    <member name="M:System.Transactions.SinglePhaseEnlistment.Committed">
      <summary vsli:raw="Represents a callback that is used to indicate to the transaction manager that the SinglePhaseCommit was successful.">Représente un rappel qui est utilisé pour indiquer au gestionnaire de transactions que la validation à phase unique a réussi.</summary>
    </member>
    <member name="M:System.Transactions.SinglePhaseEnlistment.InDoubt">
      <summary vsli:raw="Represents a callback that is used to indicate to the transaction manager that the status of the transaction is in doubt.">Représente un rappel qui est utilisé pour indiquer au gestionnaire de transactions que l'état de la transaction est dans le doute.</summary>
    </member>
    <member name="M:System.Transactions.SinglePhaseEnlistment.InDoubt(System.Exception)">
      <summary vsli:raw="Represents a callback that is used to indicate to the transaction manager that the status of the transaction is in doubt, and provides an explanation.">Représente un rappel qui est utilisé pour indiquer au gestionnaire de transactions que l'état de la transaction est dans le doute et fournit une explication.</summary>
      <param name="e" vsli:raw="An explanation of why the transaction is in doubt.">Explication de la raison pour laquelle la transaction est considérée comme incertaine.</param>
    </member>
    <member name="T:System.Transactions.SubordinateTransaction">
      <summary vsli:raw="Represents a non-rooted transaction that can be delegated. This class cannot be inherited.">Représente une transaction non associée à une racine qui peut être déléguée. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.Transactions.SubordinateTransaction.#ctor(System.Transactions.IsolationLevel,System.Transactions.ISimpleTransactionSuperior)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.SubordinateTransaction&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.SubordinateTransaction" />.</summary>
      <param name="isoLevel" vsli:raw="The isolation level of the transaction.">Niveau d'isolement de la transaction</param>
      <param name="superior" vsli:raw="A &lt;see cref=&quot;T:System.Transactions.ISimpleTransactionSuperior&quot; /&gt;.">
        <see cref="T:System.Transactions.ISimpleTransactionSuperior" />
      </param>
    </member>
    <member name="T:System.Transactions.Transaction">
      <summary vsli:raw="Represents a transaction.">Représente une transaction.</summary>
    </member>
    <member name="M:System.Transactions.Transaction.Clone">
      <summary vsli:raw="Creates a clone of the transaction.">Crée un clone de la transaction.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Transactions.Transaction&quot; /&gt; that is a copy of the current transaction object.">
        <see cref="T:System.Transactions.Transaction" /> qui est une copie de l'objet de transaction en cours.</returns>
    </member>
    <member name="P:System.Transactions.Transaction.Current">
      <summary vsli:raw="Gets or sets the ambient transaction.">Obtient ou définit la transaction ambiante.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Transactions.Transaction&quot; /&gt; that describes the current transaction.">
        <see cref="T:System.Transactions.Transaction" /> qui décrit la transaction en cours.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)">
      <summary vsli:raw="Creates a dependent clone of the transaction.">Crée un clone dépendant de la transaction.</summary>
      <param name="cloneOption" vsli:raw="A &lt;see cref=&quot;T:System.Transactions.DependentCloneOption&quot; /&gt; that controls what kind of dependent transaction to create.">
        <see cref="T:System.Transactions.DependentCloneOption" /> qui contrôle le type de transaction dépendante à créer.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Transactions.DependentTransaction&quot; /&gt; that represents the dependent clone.">
        <see cref="T:System.Transactions.DependentTransaction" /> qui représente le clone dépendant.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.Dispose">
      <summary vsli:raw="Releases the resources that are held by the object.">Libère les ressources utilisées par l’objet.</summary>
    </member>
    <member name="M:System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)">
      <summary vsli:raw="Enlists a durable resource manager that supports two phase commit to participate in a transaction.">Inscrit un gestionnaire de ressources durable qui prend en charge la validation à deux phases pour participer à une transaction.</summary>
      <param name="resourceManagerIdentifier" vsli:raw="A unique identifier for a resource manager, which should persist across resource manager failure or reboot.">Identificateur unique pour un gestionnaire de ressources qui doit persister pendant une défaillance du gestionnaire de ressources ou un redémarrage.</param>
      <param name="enlistmentNotification" vsli:raw="An object that implements the &lt;see cref=&quot;T:System.Transactions.IEnlistmentNotification&quot; /&gt; interface to receive two phase commit notifications.">Objet qui implémente l'interface <see cref="T:System.Transactions.IEnlistmentNotification" /> pour recevoir des notifications de validation à deux phases.</param>
      <param name="enlistmentOptions" vsli:raw="&lt;see cref=&quot;F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired&quot; /&gt; if the resource manager wants to perform additional work during the prepare phase.">
        <see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" /> si le gestionnaire de ressources souhaite exécuter un travail supplémentaire pendant la phase de préparation.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Transactions.Enlistment&quot; /&gt; object that describes the enlistment.">Un objet <see cref="T:System.Transactions.Enlistment" /> qui décrit l'inscription.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)">
      <summary vsli:raw="Enlists a durable resource manager that supports single phase commit optimization to participate in a transaction.">Inscrit un gestionnaire de ressources durable qui prend en charge l'optimisation de la validation à phase unique pour participer à une transaction.</summary>
      <param name="resourceManagerIdentifier" vsli:raw="A unique identifier for a resource manager, which should persist across resource manager failure or reboot.">Identificateur unique pour un gestionnaire de ressources qui doit persister pendant une défaillance du gestionnaire de ressources ou un redémarrage.</param>
      <param name="singlePhaseNotification" vsli:raw="An object that implements the &lt;see cref=&quot;T:System.Transactions.ISinglePhaseNotification&quot; /&gt; interface that must be able to receive single phase commit and two phase commit notifications.">Objet qui implémente l'interface <see cref="T:System.Transactions.ISinglePhaseNotification" /> qui doit être capable de recevoir une validation à phase unique et des notifications de validation à deux phases.</param>
      <param name="enlistmentOptions" vsli:raw="&lt;see cref=&quot;F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired&quot; /&gt; if the resource manager wants to perform additional work during the prepare phase.">
        <see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" /> si le gestionnaire de ressources souhaite exécuter un travail supplémentaire pendant la phase de préparation.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Transactions.Enlistment&quot; /&gt; object that describes the enlistment.">Un objet <see cref="T:System.Transactions.Enlistment" /> qui décrit l'inscription.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification)">
      <summary vsli:raw="Enlists a resource manager that has an internal transaction using a promotable single phase enlistment (PSPE).">Inscrit un gestionnaire de ressources qui a une transaction interne à l'aide d'une inscription à phase unique pouvant être promue (PSPE).</summary>
      <param name="promotableSinglePhaseNotification" vsli:raw="A &lt;see cref=&quot;T:System.Transactions.IPromotableSinglePhaseNotification&quot; /&gt; interface implemented by the participant.">Interface <see cref="T:System.Transactions.IPromotableSinglePhaseNotification" /> implémentée par le participant.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Transactions.SinglePhaseEnlistment&quot; /&gt; interface implementation that describes the enlistment.">Implémentation de l'interface <see cref="T:System.Transactions.SinglePhaseEnlistment" /> qui décrit l'inscription.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)">
      <summary vsli:raw="Enlists a resource manager that has an internal transaction using a promotable single phase enlistment (PSPE).">Inscrit un gestionnaire de ressources qui a une transaction interne à l'aide d'une inscription à phase unique pouvant être promue (PSPE).</summary>
      <param name="promotableSinglePhaseNotification" vsli:raw="A &lt;see cref=&quot;T:System.Transactions.IPromotableSinglePhaseNotification&quot; /&gt; interface implemented by the participant.">Interface <see cref="T:System.Transactions.IPromotableSinglePhaseNotification" /> implémentée par le participant.</param>
      <param name="promoterType" vsli:raw="The type of the distributed transaction processor.">Type du processeur de transaction distribuée.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Transactions.SinglePhaseEnlistment&quot; /&gt; interface implementation that describes the enlistment.">Implémentation de l'interface <see cref="T:System.Transactions.SinglePhaseEnlistment" /> qui décrit l'inscription.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.EnlistVolatile(System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)">
      <summary vsli:raw="Enlists a volatile resource manager that supports two phase commit to participate in a transaction.">Inscrit un gestionnaire de ressources volatiles qui prend en charge la validation à deux phases pour participer à une transaction.</summary>
      <param name="enlistmentNotification" vsli:raw="An object that implements the &lt;see cref=&quot;T:System.Transactions.IEnlistmentNotification&quot; /&gt; interface to receive two-phase commit notifications.">Un objet qui implémente l’interface <see cref="T:System.Transactions.IEnlistmentNotification" /> pour recevoir des notifications de validation en deux phases.</param>
      <param name="enlistmentOptions" vsli:raw="&lt;see cref=&quot;F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired&quot; /&gt; if the resource manager wants to perform additional work during the prepare phase.">
        <see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" /> si le gestionnaire de ressources souhaite exécuter un travail supplémentaire pendant la phase de préparation.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Transactions.Enlistment&quot; /&gt; object that describes the enlistment.">Un objet <see cref="T:System.Transactions.Enlistment" /> qui décrit l'inscription.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.EnlistVolatile(System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)">
      <summary vsli:raw="Enlists a volatile resource manager that supports single phase commit optimization to participate in a transaction.">Inscrit un gestionnaire de ressources volatil qui prend en charge l'optimisation de la validation à phase unique pour participer à une transaction.</summary>
      <param name="singlePhaseNotification" vsli:raw="An object that implements the &lt;see cref=&quot;T:System.Transactions.ISinglePhaseNotification&quot; /&gt; interface that must be able to receive single phase commit and two phase commit notifications.">Objet qui implémente l'interface <see cref="T:System.Transactions.ISinglePhaseNotification" /> qui doit être capable de recevoir une validation à phase unique et des notifications de validation à deux phases.</param>
      <param name="enlistmentOptions" vsli:raw="&lt;see cref=&quot;F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired&quot; /&gt; if the resource manager wants to perform additional work during the prepare phase.">
        <see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" /> si le gestionnaire de ressources souhaite exécuter un travail supplémentaire pendant la phase de préparation.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Transactions.Enlistment&quot; /&gt; object that describes the enlistment.">Un objet <see cref="T:System.Transactions.Enlistment" /> qui décrit l'inscription.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.Equals(System.Object)">
      <summary vsli:raw="Determines whether this transaction and the specified object are equal.">Détermine si cette transaction et l'objet spécifié sont égaux.</summary>
      <param name="obj" vsli:raw="The object to compare with this instance.">Objet à comparer avec cette instance.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; and this transaction are identical; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="obj" /> et cette transaction sont identiques ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retourne le code de hachage de cette instance.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Code de hachage d'un entier signé 32 bits.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.GetPromotedToken">
      <summary vsli:raw="Gets the  &lt;c&gt;byte[]&lt;/c&gt; returned by the &lt;c&gt;Promote&lt;/c&gt; method when the transaction is promoted.">Obtient l’élément <c>byte[]</c> retourné par la méthode <c>Promote</c> quand la transaction est promue.</summary>
      <returns vsli:raw="The  &lt;c&gt;byte[]&lt;/c&gt; returned by the &lt;c&gt;Promote&lt;/c&gt; method when the transaction is promoted.">Élément <c>byte[]</c> retourné par la méthode <c>Promote</c> quand la transaction est promue.</returns>
    </member>
    <member name="P:System.Transactions.Transaction.IsolationLevel">
      <summary vsli:raw="Gets the isolation level of the transaction.">Obtient le niveau d'isolement de la transaction.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Transactions.IsolationLevel&quot; /&gt; values that indicates the isolation level of the transaction.">Une des valeurs <see cref="T:System.Transactions.IsolationLevel" /> qui indique le niveau d'isolement de la transaction.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.op_Equality(System.Transactions.Transaction,System.Transactions.Transaction)">
      <summary vsli:raw="Tests whether two specified &lt;see cref=&quot;T:System.Transactions.Transaction&quot; /&gt; instances are equivalent.">Teste si deux instances de <see cref="T:System.Transactions.Transaction" /> spécifiées sont équivalentes.</summary>
      <param name="x" vsli:raw="The &lt;see cref=&quot;T:System.Transactions.Transaction&quot; /&gt; instance that is to the left of the equality operator.">Instance de <see cref="T:System.Transactions.Transaction" /> figurant à gauche de l'opérateur d'égalité.</param>
      <param name="y" vsli:raw="The &lt;see cref=&quot;T:System.Transactions.Transaction&quot; /&gt; instance that is to the right of the equality operator.">Instance de <see cref="T:System.Transactions.Transaction" /> figurant à droite de l'opérateur d'égalité.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;x&quot; /&gt; and &lt;paramref name=&quot;y&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="x" /> et <paramref name="y" /> sont égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.op_Inequality(System.Transactions.Transaction,System.Transactions.Transaction)">
      <summary vsli:raw="Returns a value that indicates whether two &lt;see cref=&quot;T:System.Transactions.Transaction&quot; /&gt; instances are not equal.">Retourne une valeur qui indique si deux instances de <see cref="T:System.Transactions.Transaction" /> ne sont pas égales.</summary>
      <param name="x" vsli:raw="The &lt;see cref=&quot;T:System.Transactions.Transaction&quot; /&gt; instance that is to the left of the inequality operator.">Instance de <see cref="T:System.Transactions.Transaction" /> figurant à gauche de l'opérateur d'inégalité.</param>
      <param name="y" vsli:raw="The &lt;see cref=&quot;T:System.Transactions.Transaction&quot; /&gt; instance that is to the right of the inequality operator.">Instance de <see cref="T:System.Transactions.Transaction" /> figurant à droite de l'opérateur d'inégalité.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;x&quot; /&gt; and &lt;paramref name=&quot;y&quot; /&gt; are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="x" /> et <paramref name="y" /> ne sont pas égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.PromoteAndEnlistDurable(System.Guid,System.Transactions.IPromotableSinglePhaseNotification,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)">
      <summary vsli:raw="Promotes and enlists a durable resource manager that supports two phase commit to participate in a transaction.">Favorise et inscrit un gestionnaire de ressources durable qui prend en charge la validation à deux phases pour participer à une transaction.</summary>
      <param name="resourceManagerIdentifier" vsli:raw="A unique identifier for a resource manager, which should persist across resource manager failure or reboot.">Identificateur unique pour un gestionnaire de ressources qui doit persister pendant une défaillance du gestionnaire de ressources ou un redémarrage.</param>
      <param name="promotableNotification" vsli:raw="An object that acts as a commit delegate for a non-distributed transaction internal to a resource manager.">Objet qui sert de délégué de validation pour une transaction non distribuée interne à un gestionnaire de ressources.</param>
      <param name="enlistmentNotification" vsli:raw="An object that implements the &lt;see cref=&quot;T:System.Transactions.IEnlistmentNotification&quot; /&gt; interface to receive two phase commit notifications.">Objet qui implémente l'interface <see cref="T:System.Transactions.IEnlistmentNotification" /> pour recevoir des notifications de validation à deux phases.</param>
      <param name="enlistmentOptions" vsli:raw="&lt;see cref=&quot;F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired&quot; /&gt; if the resource manager wants to perform additional work during the prepare phase.">
        <see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" /> si le gestionnaire de ressources souhaite exécuter un travail supplémentaire pendant la phase de préparation.</param>
    </member>
    <member name="P:System.Transactions.Transaction.PromoterType">
      <summary vsli:raw="Uniquely identifies the format of the &lt;c&gt;byte[]&lt;/c&gt; returned by the Promote method when the transaction is promoted.">Identifie de façon unique le format de l’élément <c>byte[]</c> retourné par la méthode Promote quand la transaction est promue.</summary>
      <returns vsli:raw="A guid that uniquely identifies the format of the &lt;c&gt;byte[]&lt;/c&gt; returned by the Promote method when the transaction is promoted.">GUID qui identifie de façon unique le format de l' <c>octet []</c> retourné par la méthode promote lorsque la transaction est promue.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.Rollback">
      <summary vsli:raw="Rolls back (aborts) the transaction.">Restaure (abandonne) la transaction.</summary>
    </member>
    <member name="M:System.Transactions.Transaction.Rollback(System.Exception)">
      <summary vsli:raw="Rolls back (aborts) the transaction.">Restaure (abandonne) la transaction.</summary>
      <param name="e" vsli:raw="An explanation of why a rollback occurred.">Explication de la raison pour laquelle une récupération s'est produite.</param>
    </member>
    <member name="M:System.Transactions.Transaction.SetDistributedTransactionIdentifier(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)">
      <summary vsli:raw="Sets the distributed transaction identifier generated by the non-MSDTC promoter.">Définit l'identificateur de transaction distribuée généré par le promoteur non-MSDTC.</summary>
      <param name="promotableNotification" vsli:raw="A &lt;see cref=&quot;T:System.Transactions.IPromotableSinglePhaseNotification&quot; /&gt; interface implemented by the participant.">Interface <see cref="T:System.Transactions.IPromotableSinglePhaseNotification" /> implémentée par le participant.</param>
      <param name="distributedTransactionIdentifier" vsli:raw="The identifier for the transaction used by the distributed transaction manager.">Identificateur de la transaction utilisée par le gestionnaire de transactions distribuées.</param>
    </member>
    <member name="M:System.Transactions.Transaction.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; with the data required to serialize this transaction.">Obtient un <see cref="T:System.Runtime.Serialization.SerializationInfo" /> avec les données requises pour sérialiser cette transaction.</summary>
      <param name="serializationInfo" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; to populate with data.">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> à remplir de données.</param>
      <param name="context" vsli:raw="The destination (see &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; ) for this serialization.">Destination (voir <see cref="T:System.Runtime.Serialization.StreamingContext" />) de cette sérialisation.</param>
    </member>
    <member name="E:System.Transactions.Transaction.TransactionCompleted">
      <summary vsli:raw="Indicates that the transaction is completed.">Indique que la transaction est terminée.</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="An attempt to subscribe this event on a transaction that has been disposed.">Tentative de s'abonner à cet événement sur une transaction qui a été supprimée.</exception>
    </member>
    <member name="P:System.Transactions.Transaction.TransactionInformation">
      <summary vsli:raw="Retrieves additional information about a transaction.">Récupère des informations supplémentaires à propos d'une transaction.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Transactions.TransactionInformation&quot; /&gt; that contains additional information about the transaction.">
        <see cref="T:System.Transactions.TransactionInformation" /> qui contient des informations supplémentaires sur la transaction.</returns>
    </member>
    <member name="T:System.Transactions.TransactionAbortedException">
      <summary vsli:raw="The exception that is thrown when an operation is attempted on a transaction that has already been rolled back, or an attempt is made to commit the transaction and the transaction aborts.">Exception qui est levée lorsqu'une opération est tentée sur une transaction qui a déjà été restaurée ou lorsqu'une tentative est faite pour valider la transaction et que la transaction est abandonnée.</summary>
    </member>
    <member name="M:System.Transactions.TransactionAbortedException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionAbortedException&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionAbortedException" />.</summary>
    </member>
    <member name="M:System.Transactions.TransactionAbortedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionAbortedException&quot; /&gt; class with the specified serialization and streaming context information.">Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionAbortedException" /> avec les informations de sérialisation et de contexte de diffusion en continu spécifiées.</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that describes a failed serialization.">Objet <see cref="T:System.Runtime.Serialization.SerializationInfo" /> qui décrit une sérialisation non réussie.</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that describes a failed serialization context.">Objet <see cref="T:System.Runtime.Serialization.SerializationInfo" /> qui décrit le contexte d'une sérialisation non réussie.</param>
    </member>
    <member name="M:System.Transactions.TransactionAbortedException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionAbortedException&quot; /&gt; class with the specified message.">Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionAbortedException" /> avec le message spécifié.</summary>
      <param name="message" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains a message that explains why the exception occurred.">
        <see cref="T:System.String" /> qui contient un message expliquant pourquoi l'exception s'est produite.</param>
    </member>
    <member name="M:System.Transactions.TransactionAbortedException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionAbortedException&quot; /&gt; class with the specified message and inner exception.">Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionAbortedException" /> avec le message et l'exception interne spécifiés.</summary>
      <param name="message" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains a message that explains why the exception occurred.">
        <see cref="T:System.String" /> qui contient un message expliquant pourquoi l'exception s'est produite.</param>
      <param name="innerException" vsli:raw="Gets the exception instance that causes the current exception. For more information, see the &lt;see cref=&quot;P:System.Exception.InnerException&quot; /&gt; property.">Obtient l'instance de l'exception qui a provoqué l'exception en cours. Pour plus d'informations, consultez la propriété <see cref="P:System.Exception.InnerException" />.</param>
    </member>
    <member name="T:System.Transactions.TransactionCompletedEventHandler">
      <summary vsli:raw="Represents the method that handles the &lt;see cref=&quot;E:System.Transactions.Transaction.TransactionCompleted&quot; /&gt; event of a &lt;see cref=&quot;T:System.Transactions.Transaction&quot; /&gt; class.">Représente la méthode qui gère l'événement <see cref="E:System.Transactions.Transaction.TransactionCompleted" /> d'une classe <see cref="T:System.Transactions.Transaction" />.</summary>
      <param name="sender" vsli:raw="The source of the event.">Source de l'événement.</param>
      <param name="e" vsli:raw="The &lt;see cref=&quot;T:System.Transactions.TransactionEventArgs&quot; /&gt; that contains the event data.">
        <see cref="T:System.Transactions.TransactionEventArgs" /> qui contient les données d'événement.</param>
    </member>
    <member name="T:System.Transactions.TransactionEventArgs">
      <summary vsli:raw="Provides data for the following transaction events: &lt;see cref=&quot;E:System.Transactions.TransactionManager.DistributedTransactionStarted&quot; /&gt;, &lt;see cref=&quot;E:System.Transactions.Transaction.TransactionCompleted&quot; /&gt;.">Fournit des données pour les événements de transaction suivants : <see cref="E:System.Transactions.TransactionManager.DistributedTransactionStarted" />, <see cref="E:System.Transactions.Transaction.TransactionCompleted" />.</summary>
    </member>
    <member name="M:System.Transactions.TransactionEventArgs.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionEventArgs&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionEventArgs" />.</summary>
    </member>
    <member name="P:System.Transactions.TransactionEventArgs.Transaction">
      <summary vsli:raw="Gets the transaction for which event status is provided.">Obtient la transaction pour laquelle l'état d'événement est fourni.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Transactions.Transaction&quot; /&gt; for which event status is provided.">
        <see cref="T:System.Transactions.Transaction" /> pour lequel l'état d'événement est fourni.</returns>
    </member>
    <member name="T:System.Transactions.TransactionException">
      <summary vsli:raw="The exception that is thrown when you attempt to do work on a transaction that cannot accept new work.">Exception qui est levée lorsque vous essayez de faire du travail sur une transaction qui ne peut pas accepter de nouveau travail.</summary>
    </member>
    <member name="M:System.Transactions.TransactionException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionException&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionException" />.</summary>
    </member>
    <member name="M:System.Transactions.TransactionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionException&quot; /&gt; class with the specified serialization and streaming context information.">Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionException" /> avec les informations de sérialisation et de contexte de diffusion en continu spécifiées.</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that describes a failed serialization.">Objet <see cref="T:System.Runtime.Serialization.SerializationInfo" /> qui décrit une sérialisation non réussie.</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that describes a failed serialization context.">Objet <see cref="T:System.Runtime.Serialization.SerializationInfo" /> qui décrit le contexte d'une sérialisation non réussie.</param>
    </member>
    <member name="M:System.Transactions.TransactionException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionException&quot; /&gt; class with the specified message.">Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionException" /> avec le message spécifié.</summary>
      <param name="message" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains a message that explains why the exception occurred.">
        <see cref="T:System.String" /> qui contient un message expliquant pourquoi l'exception s'est produite.</param>
    </member>
    <member name="M:System.Transactions.TransactionException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionException&quot; /&gt; class with the specified message and inner exception.">Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionException" /> avec le message et l'exception interne spécifiés.</summary>
      <param name="message" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains a message that explains why the exception occurred.">
        <see cref="T:System.String" /> qui contient un message expliquant pourquoi l'exception s'est produite.</param>
      <param name="innerException" vsli:raw="Gets the exception instance that causes the current exception. For more information, see the &lt;see cref=&quot;P:System.Exception.InnerException&quot; /&gt; property.">Obtient l'instance de l'exception qui a provoqué l'exception en cours. Pour plus d'informations, consultez la propriété <see cref="P:System.Exception.InnerException" />.</param>
    </member>
    <member name="T:System.Transactions.TransactionInDoubtException">
      <summary vsli:raw="The exception that is thrown when an operation is attempted on a transaction that is in doubt, or an attempt is made to commit the transaction and the transaction becomes InDoubt.">Exception qui est levée lorsqu'une opération est tentée sur une transaction qui est dans le doute ou lorsqu'une tentative est faite pour valider la transaction et que la transaction devient InDoubt.</summary>
    </member>
    <member name="M:System.Transactions.TransactionInDoubtException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionInDoubtException&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionInDoubtException" />.</summary>
    </member>
    <member name="M:System.Transactions.TransactionInDoubtException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionInDoubtException&quot; /&gt; class with the specified serialization and streaming context information.">Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionInDoubtException" /> avec les informations de sérialisation et de contexte de diffusion en continu spécifiées.</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that describes a failed serialization.">Objet <see cref="T:System.Runtime.Serialization.SerializationInfo" /> qui décrit une sérialisation non réussie.</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that describes a failed serialization context.">Objet <see cref="T:System.Runtime.Serialization.SerializationInfo" /> qui décrit le contexte d'une sérialisation non réussie.</param>
    </member>
    <member name="M:System.Transactions.TransactionInDoubtException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionInDoubtException&quot; /&gt; class with the specified message.">Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionInDoubtException" /> avec le message spécifié.</summary>
      <param name="message" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains a message that explains why the exception occurred.">
        <see cref="T:System.String" /> qui contient un message expliquant pourquoi l'exception s'est produite.</param>
    </member>
    <member name="M:System.Transactions.TransactionInDoubtException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionInDoubtException&quot; /&gt; class with the specified message and inner exception.">Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionInDoubtException" /> avec le message et l'exception interne spécifiés.</summary>
      <param name="message" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains a message that explains why the exception occurred.">
        <see cref="T:System.String" /> qui contient un message expliquant pourquoi l'exception s'est produite.</param>
      <param name="innerException" vsli:raw="Gets the exception instance that causes the current exception. For more information, see the &lt;see cref=&quot;P:System.Exception.InnerException&quot; /&gt; property.">Obtient l'instance de l'exception qui a provoqué l'exception en cours. Pour plus d'informations, consultez la propriété <see cref="P:System.Exception.InnerException" />.</param>
    </member>
    <member name="T:System.Transactions.TransactionInformation">
      <summary vsli:raw="Provides additional information regarding a transaction.">Fournit des informations supplémentaires sur une transaction.</summary>
    </member>
    <member name="P:System.Transactions.TransactionInformation.CreationTime">
      <summary vsli:raw="Gets the creation time of the transaction.">Obtient l'heure de création de la transaction.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.DateTime&quot; /&gt; that contains the creation time of the transaction.">
        <see cref="T:System.DateTime" /> qui contient l'heure de création de la transaction.</returns>
    </member>
    <member name="P:System.Transactions.TransactionInformation.DistributedIdentifier">
      <summary vsli:raw="Gets a unique identifier of the escalated transaction.">Obtient un identificateur unique de la transaction remontée.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Guid&quot; /&gt; that contains the unique identifier of the escalated transaction.">
        <see cref="T:System.Guid" /> qui contient l'identificateur unique de la transaction remontée.</returns>
    </member>
    <member name="P:System.Transactions.TransactionInformation.LocalIdentifier">
      <summary vsli:raw="Gets a unique identifier of the transaction.">Obtient un identificateur unique de la transaction.</summary>
      <returns vsli:raw="A unique identifier of the transaction.">Identificateur unique de la transaction.</returns>
    </member>
    <member name="P:System.Transactions.TransactionInformation.Status">
      <summary vsli:raw="Gets the status of the transaction.">Obtient l'état de la transaction.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Transactions.TransactionStatus&quot; /&gt; that contains the status of the transaction.">
        <see cref="T:System.Transactions.TransactionStatus" /> qui contient l'état de la transaction.</returns>
    </member>
    <member name="T:System.Transactions.TransactionInterop">
      <summary vsli:raw="Facilitates interaction between &lt;see cref=&quot;N:System.Transactions&quot; /&gt; and components that were previously written to interact with MSDTC, COM+, or &lt;see cref=&quot;N:System.EnterpriseServices&quot; /&gt;. This class cannot be inherited.">Facilite l'interaction entre <see cref="N:System.Transactions" /> et les composants qui ont été écrits précédemment pour interagir avec MSDTC, COM+ ou <see cref="N:System.EnterpriseServices" />. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetDtcTransaction(System.Transactions.Transaction)">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Transactions.IDtcTransaction&quot; /&gt; instance that represents a &lt;see cref=&quot;T:System.Transactions.Transaction&quot; /&gt;.">Obtient une instance de <see cref="T:System.Transactions.IDtcTransaction" /> qui représente un <see cref="T:System.Transactions.Transaction" />.</summary>
      <param name="transaction" vsli:raw="A &lt;see cref=&quot;T:System.Transactions.Transaction&quot; /&gt; instance to be marshaled.">Instance de <see cref="T:System.Transactions.Transaction" /> à marshaler.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Transactions.IDtcTransaction&quot; /&gt; instance that represents a &lt;see cref=&quot;T:System.Transactions.Transaction&quot; /&gt;.  The &lt;see cref=&quot;T:System.Transactions.IDtcTransaction&quot; /&gt; instance is compatible with the unmanaged form of ITransaction used by MSDTC and with the Managed form of &lt;see cref=&quot;T:System.EnterpriseServices.ITransaction&quot; /&gt; used by &lt;see cref=&quot;N:System.EnterpriseServices&quot; /&gt;.">Instance de <see cref="T:System.Transactions.IDtcTransaction" /> qui représente un <see cref="T:System.Transactions.Transaction" />.  L’instance <see cref="T:System.Transactions.IDtcTransaction" /> est compatible avec la forme non managée de ITransaction utilisée par MSDTC et avec la forme managée de <see cref="T:System.EnterpriseServices.ITransaction" /> utilisée par <see cref="N:System.EnterpriseServices" />.</returns>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetExportCookie(System.Transactions.Transaction,System.Byte[])">
      <summary vsli:raw="Transforms a transaction object into an export transaction cookie.">Transforme un objet de transaction en cookie de transaction d'exportation.</summary>
      <param name="transaction" vsli:raw="The &lt;see cref=&quot;T:System.Transactions.Transaction&quot; /&gt; object to be marshaled.">Objet <see cref="T:System.Transactions.Transaction" /> à marshaler.</param>
      <param name="whereabouts" vsli:raw="An address that describes the location of the destination transaction manager. This permits two transaction managers to communicate with one another and thereby propagate a transaction from one system to the other.">Adresse qui décrit l'emplacement du gestionnaire de transactions de destination. Cela permet à deux gestionnaires de transactions de communiquer l'un avec l'autre, et ainsi de propager une transaction d'un système à l'autre.</param>
      <returns vsli:raw="An export transaction cookie representing the specified &lt;see cref=&quot;T:System.Transactions.Transaction&quot; /&gt; object.">Cookie de transaction d'exportation représentant l'objet <see cref="T:System.Transactions.Transaction" /> spécifié.</returns>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetTransactionFromDtcTransaction(System.Transactions.IDtcTransaction)">
      <summary vsli:raw="Generates a &lt;see cref=&quot;T:System.Transactions.Transaction&quot; /&gt; from a specified &lt;see cref=&quot;T:System.Transactions.IDtcTransaction&quot; /&gt;.">Génère un <see cref="T:System.Transactions.Transaction" /> à partir du <see cref="T:System.Transactions.IDtcTransaction" /> spécifié.</summary>
      <param name="transactionNative" vsli:raw="The &lt;see cref=&quot;T:System.Transactions.IDtcTransaction&quot; /&gt; object to be marshaled.">Objet <see cref="T:System.Transactions.IDtcTransaction" /> à marshaler.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Transactions.Transaction&quot; /&gt; instance that represents the given &lt;see cref=&quot;T:System.Transactions.IDtcTransaction&quot; /&gt;.">Instance de <see cref="T:System.Transactions.Transaction" /> qui représente le <see cref="T:System.Transactions.IDtcTransaction" /> donné.</returns>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetTransactionFromExportCookie(System.Byte[])">
      <summary vsli:raw="Generates a &lt;see cref=&quot;T:System.Transactions.Transaction&quot; /&gt; from the specified an export cookie.">Génère un <see cref="T:System.Transactions.Transaction" /> à partir du cookie d'exportation spécifié.</summary>
      <param name="cookie" vsli:raw="A marshaled form of the transaction object.">Forme marshalée de l’objet de transaction.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Transactions.Transaction&quot; /&gt; from the specified export cookie.">
        <see cref="T:System.Transactions.Transaction" /> du cookie d'exportation spécifié.</returns>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken(System.Byte[])">
      <summary vsli:raw="Generates a &lt;see cref=&quot;T:System.Transactions.Transaction&quot; /&gt; instance from the specified transmitter propagation token.">Génère une instance de <see cref="T:System.Transactions.Transaction" /> à partir du jeton de propagation de l'émetteur spécifié.</summary>
      <param name="propagationToken" vsli:raw="A propagation token representing a transaction.">Jeton de propagation représentant une transaction.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Transactions.Transaction&quot; /&gt; from the specified transmitter propagation token.">
        <see cref="T:System.Transactions.Transaction" /> du jeton de propagation de l'émetteur spécifié.</returns>
      <exception cref="T:System.Transactions.TransactionManagerCommunicationException" vsli:raw="The deserialization of a transaction fails because the transaction manager cannot be contacted. This may be caused by network firewall or security settings.">La désérialisation d'une transaction échoue car le gestionnaire de transactions ne peut pas être contacté. Cela peut être dû à un pare-feu réseau ou aux paramètres de sécurité.</exception>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetTransmitterPropagationToken(System.Transactions.Transaction)">
      <summary vsli:raw="Generates a propagation token for the specified &lt;see cref=&quot;T:System.Transactions.Transaction&quot; /&gt;.">Génère un jeton de propagation pour le <see cref="T:System.Transactions.Transaction" /> spécifié.</summary>
      <param name="transaction" vsli:raw="A transaction to be marshaled into a propagation token.">Transaction à marshaler dans un jeton de propagation.</param>
      <returns vsli:raw="This method, together with the &lt;see cref=&quot;M:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken(System.Byte[])&quot; /&gt; method, provide functionality for Transmitter/Receiver propagation, in which the transaction is &quot;pulled&quot; from the remote machine when the latter is called to unmarshal the transaction.  &#xA;  &#xA; For more information on different propagation models, see &lt;see cref=&quot;T:System.Transactions.TransactionInterop&quot; /&gt; class.">Cette méthode, avec la méthode <see cref="M:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken(System.Byte[])" />, fournit les fonctionnalités pour la propagation Émetteur/Récepteur, selon laquelle la transaction est « extraite » de l'ordinateur distant en cas d'appel pour démarshaler la transaction.
Pour plus d’informations sur les différents modèles de propagation, consultez la classe <see cref="T:System.Transactions.TransactionInterop" />.</returns>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetWhereabouts">
      <summary vsli:raw="Gets the Whereabouts of the distributed transaction manager that &lt;see cref=&quot;N:System.Transactions&quot; /&gt; uses.">Obtient le lieu du gestionnaire de transactions distribué utilisé par <see cref="N:System.Transactions" />.</summary>
      <returns vsli:raw="The Whereabouts of the distributed transaction manager that &lt;see cref=&quot;N:System.Transactions&quot; /&gt; uses.">Lieu du gestionnaire de transactions distribué utilisé par <see cref="N:System.Transactions" />.</returns>
    </member>
    <member name="F:System.Transactions.TransactionInterop.PromoterTypeDtc">
      <summary vsli:raw="The type of the distributed transaction processor.">Type du processeur de transaction distribuée.</summary>
    </member>
    <member name="T:System.Transactions.TransactionManager">
      <summary vsli:raw="Contains methods used for transaction management. This class cannot be inherited.">Contient des méthodes utilisées pour la gestion des transactions. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="P:System.Transactions.TransactionManager.DefaultTimeout">
      <summary vsli:raw="Gets the default timeout interval for new transactions.">Obtient l'intervalle de délai d'attente par défaut pour les nouvelles transactions.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; value that specifies the timeout interval for new transactions.">Valeur <see cref="T:System.TimeSpan" /> qui spécifie l'intervalle de délai d'attente pour les nouvelles transactions.</returns>
    </member>
    <member name="E:System.Transactions.TransactionManager.DistributedTransactionStarted">
      <summary vsli:raw="Indicates that a distributed transaction has started.">Indique qu'une transaction distribuée a démarré.</summary>
    </member>
    <member name="P:System.Transactions.TransactionManager.HostCurrentCallback">
      <summary vsli:raw="Gets or sets a custom transaction factory.">Obtient ou définit une fabrique de transactions personnalisée.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Transactions.HostCurrentTransactionCallback&quot; /&gt; that contains a custom transaction factory.">
        <see cref="T:System.Transactions.HostCurrentTransactionCallback" /> qui contient une fabrique de transactions personnalisée.</returns>
    </member>
    <member name="P:System.Transactions.TransactionManager.MaximumTimeout">
      <summary vsli:raw="Gets the default maximum timeout interval for new transactions.">Obtient l'intervalle de délai d'attente maximum par défaut pour les nouvelles transactions.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; value that specifies the maximum timeout interval that is allowed when creating new transactions.">Valeur <see cref="T:System.TimeSpan" /> qui spécifie l'intervalle de délai d'attente maximal qui est autorisé lors de la création de nouvelles transactions.</returns>
    </member>
    <member name="M:System.Transactions.TransactionManager.RecoveryComplete(System.Guid)">
      <summary vsli:raw="Notifies the transaction manager that a resource manager recovering from failure has finished reenlisting in all unresolved transactions.">Avertit le gestionnaire de transactions qu'un gestionnaire de ressources qui récupère d'une défaillance a fini de se réinscrire dans toutes les transactions non résolues.</summary>
      <param name="resourceManagerIdentifier" vsli:raw="A &lt;see cref=&quot;T:System.Guid&quot; /&gt; that uniquely identifies the resource to be recovered from.">
        <see cref="T:System.Guid" /> qui identifie de manière unique la ressource à partir de laquelle effectuer la récupération.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;resourceManagerIdentifier&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="resourceManagerIdentifier" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Transactions.TransactionManager.Reenlist(System.Guid,System.Byte[],System.Transactions.IEnlistmentNotification)">
      <summary vsli:raw="Reenlists a durable participant in a transaction.">Réinscrit un participant durable dans une transaction.</summary>
      <param name="resourceManagerIdentifier" vsli:raw="A &lt;see cref=&quot;T:System.Guid&quot; /&gt; that uniquely identifies the resource manager.">
        <see cref="T:System.Guid" /> qui identifie de manière unique le gestionnaire de ressources.</param>
      <param name="recoveryInformation" vsli:raw="Contains additional information of recovery information.">Contient des informations supplémentaires sur les informations de récupération.</param>
      <param name="enlistmentNotification" vsli:raw="A resource object that implements &lt;see cref=&quot;T:System.Transactions.IEnlistmentNotification&quot; /&gt; to receive notifications.">Objet de ressource qui implémente <see cref="T:System.Transactions.IEnlistmentNotification" /> pour recevoir des notifications.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Transactions.Enlistment&quot; /&gt; that describes the enlistment.">
        <see cref="T:System.Transactions.Enlistment" /> qui décrit l'inscription.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;recoveryInformation&quot; /&gt; is invalid.  &#xA;  &#xA; -or-  &#xA;  &#xA; Transaction Manager information in &lt;paramref name=&quot;recoveryInformation&quot; /&gt; does not match the configured transaction manager.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;RecoveryInformation&quot; /&gt; is not recognized by &lt;see cref=&quot;N:System.Transactions&quot; /&gt;.">
        <paramref name="recoveryInformation" /> n'est pas valide.

ou -
Les informations du gestionnaire de transactions dans <paramref name="recoveryInformation" /> ne correspondent pas au gestionnaire de transactions configuré.

ou -
<paramref name="RecoveryInformation" /> n'est pas reconnu par <see cref="N:System.Transactions" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Transactions.TransactionManager.RecoveryComplete(System.Guid)&quot; /&gt; has already been called for the specified &lt;paramref name=&quot;resourceManagerIdentifier&quot; /&gt;. The reenlistment is rejected.">
        <see cref="M:System.Transactions.TransactionManager.RecoveryComplete(System.Guid)" /> a déjà été appelé pour le <paramref name="resourceManagerIdentifier" /> spécifié. La réinscription est rejetée.</exception>
      <exception cref="T:System.Transactions.TransactionException" vsli:raw="The &lt;paramref name=&quot;resourceManagerIdentifier&quot; /&gt; does not match the content of the specified recovery information in &lt;paramref name=&quot;recoveryInformation&quot; /&gt;.">
        <paramref name="resourceManagerIdentifier" /> ne correspond pas au contenu des informations de récupération spécifiées dans <paramref name="recoveryInformation" />.</exception>
    </member>
    <member name="T:System.Transactions.TransactionManagerCommunicationException">
      <summary vsli:raw="The exception that is thrown when a resource manager cannot communicate with the transaction manager.">Exception levée lorsqu'un gestionnaire de ressources ne peut pas communiquer avec le gestionnaire de transactions.</summary>
    </member>
    <member name="M:System.Transactions.TransactionManagerCommunicationException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionManagerCommunicationException&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionManagerCommunicationException" />.</summary>
    </member>
    <member name="M:System.Transactions.TransactionManagerCommunicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionManagerCommunicationException&quot; /&gt; class with the specified serialization and streaming context information.">Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionManagerCommunicationException" /> avec les informations de sérialisation et de contexte de diffusion en continu spécifiées.</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that describes a failed serialization.">Objet <see cref="T:System.Runtime.Serialization.SerializationInfo" /> qui décrit une sérialisation non réussie.</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that describes a failed serialization context.">Objet <see cref="T:System.Runtime.Serialization.SerializationInfo" /> qui décrit le contexte d'une sérialisation non réussie.</param>
    </member>
    <member name="M:System.Transactions.TransactionManagerCommunicationException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionManagerCommunicationException&quot; /&gt; class with the specified message.">Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionManagerCommunicationException" /> avec le message spécifié.</summary>
      <param name="message" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains a message that explains why the exception occurred.">
        <see cref="T:System.String" /> qui contient un message expliquant pourquoi l'exception s'est produite.</param>
    </member>
    <member name="M:System.Transactions.TransactionManagerCommunicationException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionManagerCommunicationException&quot; /&gt; class with the specified message and inner exception.">Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionManagerCommunicationException" /> avec le message et l'exception interne spécifiés.</summary>
      <param name="message" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains a message that explains why the exception occurred.">
        <see cref="T:System.String" /> qui contient un message expliquant pourquoi l'exception s'est produite.</param>
      <param name="innerException" vsli:raw="Gets the exception instance that causes the current exception. For more information, see the &lt;see cref=&quot;P:System.Exception.InnerException&quot; /&gt; property.">Obtient l'instance de l'exception qui a provoqué l'exception en cours. Pour plus d'informations, consultez la propriété <see cref="P:System.Exception.InnerException" />.</param>
    </member>
    <member name="T:System.Transactions.TransactionOptions">
      <summary vsli:raw="Contains additional information that specifies transaction behaviors.">Contient des informations supplémentaires qui spécifient les comportements de transaction.</summary>
    </member>
    <member name="M:System.Transactions.TransactionOptions.Equals(System.Object)">
      <summary vsli:raw="Determines whether this &lt;see cref=&quot;T:System.Transactions.TransactionOptions&quot; /&gt; instance and the specified object are equal.">Détermine si cette instance de <see cref="T:System.Transactions.TransactionOptions" /> et l'objet spécifié sont égaux.</summary>
      <param name="obj" vsli:raw="The object to compare with this instance.">Objet à comparer avec cette instance.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; and this &lt;see cref=&quot;T:System.Transactions.TransactionOptions&quot; /&gt; instance are identical; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="obj" /> et cette instance de <see cref="T:System.Transactions.TransactionOptions" /> sont identiques ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Transactions.TransactionOptions.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retourne le code de hachage de cette instance.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Code de hachage d'un entier signé 32 bits.</returns>
    </member>
    <member name="P:System.Transactions.TransactionOptions.IsolationLevel">
      <summary vsli:raw="Gets or sets the isolation level of the transaction.">Obtient ou définit le niveau d’isolation de la transaction.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Transactions.IsolationLevel&quot; /&gt; enumeration that specifies the isolation level of the transaction.">Énumération <see cref="T:System.Transactions.IsolationLevel" /> qui spécifie le niveau d'isolement de la transaction.</returns>
    </member>
    <member name="M:System.Transactions.TransactionOptions.op_Equality(System.Transactions.TransactionOptions,System.Transactions.TransactionOptions)">
      <summary vsli:raw="Tests whether two specified &lt;see cref=&quot;T:System.Transactions.TransactionOptions&quot; /&gt; instances are equivalent.">Teste si deux instances de <see cref="T:System.Transactions.TransactionOptions" /> spécifiées sont équivalentes.</summary>
      <param name="x" vsli:raw="The &lt;see cref=&quot;T:System.Transactions.TransactionOptions&quot; /&gt; instance that is to the left of the equality operator.">Instance de <see cref="T:System.Transactions.TransactionOptions" /> figurant à gauche de l'opérateur d'égalité.</param>
      <param name="y" vsli:raw="The &lt;see cref=&quot;T:System.Transactions.TransactionOptions&quot; /&gt; instance that is to the right of the equality operator.">Instance de <see cref="T:System.Transactions.TransactionOptions" /> figurant à droite de l'opérateur d'égalité.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;x&quot; /&gt; and &lt;paramref name=&quot;y&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="x" /> et <paramref name="y" /> sont égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Transactions.TransactionOptions.op_Inequality(System.Transactions.TransactionOptions,System.Transactions.TransactionOptions)">
      <summary vsli:raw="Returns a value that indicates whether two &lt;see cref=&quot;T:System.Transactions.TransactionOptions&quot; /&gt; instances are not equal.">Retourne une valeur qui indique si deux instances de <see cref="T:System.Transactions.TransactionOptions" /> ne sont pas égales.</summary>
      <param name="x" vsli:raw="The &lt;see cref=&quot;T:System.Transactions.TransactionOptions&quot; /&gt; instance that is to the left of the equality operator.">Instance de <see cref="T:System.Transactions.TransactionOptions" /> figurant à gauche de l'opérateur d'égalité.</param>
      <param name="y" vsli:raw="The &lt;see cref=&quot;T:System.Transactions.TransactionOptions&quot; /&gt; instance that is to the right of the equality operator.">Instance de <see cref="T:System.Transactions.TransactionOptions" /> figurant à droite de l'opérateur d'égalité.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;x&quot; /&gt; and &lt;paramref name=&quot;y&quot; /&gt; are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="x" /> et <paramref name="y" /> ne sont pas égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Transactions.TransactionOptions.Timeout">
      <summary vsli:raw="Gets or sets the timeout period for the transaction.">Obtient ou définit le délai d'attente pour la transaction.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; value that specifies the timeout period for the transaction.">Valeur <see cref="T:System.TimeSpan" /> qui spécifie le délai d'attente pour la transaction.</returns>
    </member>
    <member name="T:System.Transactions.TransactionPromotionException">
      <summary vsli:raw="The exception that is thrown when a promotion fails.">Exception levée lorsqu'une promotion échoue.</summary>
    </member>
    <member name="M:System.Transactions.TransactionPromotionException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionPromotionException&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionPromotionException" />.</summary>
    </member>
    <member name="M:System.Transactions.TransactionPromotionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionPromotionException&quot; /&gt; class with the specified serialization and streaming context information.">Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionPromotionException" /> avec les informations de sérialisation et de contexte de diffusion en continu spécifiées.</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that describes a failed serialization.">Objet <see cref="T:System.Runtime.Serialization.SerializationInfo" /> qui décrit une sérialisation non réussie.</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that describes a failed serialization context.">Objet <see cref="T:System.Runtime.Serialization.SerializationInfo" /> qui décrit le contexte d'une sérialisation non réussie.</param>
    </member>
    <member name="M:System.Transactions.TransactionPromotionException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionPromotionException&quot; /&gt; class with the specified message.">Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionPromotionException" /> avec le message spécifié.</summary>
      <param name="message" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains a message that explains why the exception occurred.">
        <see cref="T:System.String" /> qui contient un message expliquant pourquoi l'exception s'est produite.</param>
    </member>
    <member name="M:System.Transactions.TransactionPromotionException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionPromotionException&quot; /&gt; class with the specified message and inner exception.">Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionPromotionException" /> avec le message et l'exception interne spécifiés.</summary>
      <param name="message" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains a message that explains why the exception occurred.">
        <see cref="T:System.String" /> qui contient un message expliquant pourquoi l'exception s'est produite.</param>
      <param name="innerException" vsli:raw="Gets the exception instance that causes the current exception. For more information, see the &lt;see cref=&quot;P:System.Exception.InnerException&quot; /&gt; property.">Obtient l'instance de l'exception qui a provoqué l'exception en cours. Pour plus d'informations, consultez la propriété <see cref="P:System.Exception.InnerException" />.</param>
    </member>
    <member name="T:System.Transactions.TransactionScope">
      <summary vsli:raw="Makes a code block transactional. This class cannot be inherited.">Rend un bloc de code transactionnel. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScope&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionScope" />.</summary>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScope&quot; /&gt; class and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction.">Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionScope" /> et définit la transaction spécifiée comme une transaction ambiante, afin que le travail transactionnel fait à l'intérieur de la portée utilise cette transaction.</summary>
      <param name="transactionToUse" vsli:raw="The transaction to be set as the ambient transaction, so that transactional work done inside the scope uses this transaction.">Transaction à définir comme une transaction ambiante afin que le travail transactionnel fait à l'intérieur de la portée utilise cette transaction.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScope&quot; /&gt; class with the specified timeout value, and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction.">Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionScope" /> avec la valeur de délai d'attente spécifiée et définit la transaction spécifiée comme transaction ambiante afin que le travail transactionnel fait à l'intérieur de la portée utilise cette transaction.</summary>
      <param name="transactionToUse" vsli:raw="The transaction to be set as the ambient transaction, so that transactional work done inside the scope uses this transaction.">Transaction à définir comme une transaction ambiante afin que le travail transactionnel fait à l'intérieur de la portée utilise cette transaction.</param>
      <param name="scopeTimeout" vsli:raw="The &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; after which the transaction scope times out and aborts the transaction.">
        <see cref="T:System.TimeSpan" /> après lequel la portée de la transaction expire et la transaction est abandonnée.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.EnterpriseServicesInteropOption)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScope&quot; /&gt; class with the specified timeout value and COM+ interoperability requirements, and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction.">Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionScope" /> avec la valeur de délai d'attente et les critères d'interopérabilité COM+ spécifiés, et définit la transaction spécifiée comme une transaction ambiante afin que le travail transactionnel fait à l'intérieur de la portée utilise cette transaction.</summary>
      <param name="transactionToUse" vsli:raw="The transaction to be set as the ambient transaction, so that transactional work done inside the scope uses this transaction.">Transaction à définir comme une transaction ambiante afin que le travail transactionnel fait à l'intérieur de la portée utilise cette transaction.</param>
      <param name="scopeTimeout" vsli:raw="The &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; after which the transaction scope times out and aborts the transaction.">
        <see cref="T:System.TimeSpan" /> après lequel la portée de la transaction expire et la transaction est abandonnée.</param>
      <param name="interopOption" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Transactions.EnterpriseServicesInteropOption&quot; /&gt; enumeration that describes how the associated transaction interacts with COM+ transactions.">Instance de l'énumération <see cref="T:System.Transactions.EnterpriseServicesInteropOption" /> qui décrit comment la transaction associée interagit avec les transactions COM+.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]  &#xA;  &#xA; Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScope&quot; /&gt; class with the specified timeout value, and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction.">[Pris en charge dans le .NET Framework 4.5.1 et versions ultérieures]
Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionScope" /> avec la valeur de délai d'attente spécifiée et définit la transaction spécifiée comme transaction ambiante afin que le travail transactionnel fait à l'intérieur de la portée utilise cette transaction.</summary>
      <param name="transactionToUse" vsli:raw="The transaction to be set as the ambient transaction, so that transactional work done inside the scope uses this transaction.">Transaction à définir comme une transaction ambiante afin que le travail transactionnel fait à l'intérieur de la portée utilise cette transaction.</param>
      <param name="scopeTimeout" vsli:raw="The &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; after which the transaction scope times out and aborts the transaction.">
        <see cref="T:System.TimeSpan" /> après lequel la portée de la transaction expire et la transaction est abandonnée.</param>
      <param name="asyncFlowOption" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScopeAsyncFlowOption&quot; /&gt; enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns.">Instance de l'énumération <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /> décrivant si la transaction ambiante associée à la portée de transaction sera acheminée entre les continuations de thread lors de l'utilisation des modèles de programmation asynchrone du .NET Task ou async/await.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]  &#xA;  &#xA; Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScope&quot; /&gt; class and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction.">[Pris en charge dans le .NET Framework 4.5.1 et versions ultérieures]
Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionScope" /> et définit la transaction spécifiée comme une transaction ambiante, afin que le travail transactionnel fait à l'intérieur de la portée utilise cette transaction.</summary>
      <param name="transactionToUse" vsli:raw="The transaction to be set as the ambient transaction, so that transactional work done inside the scope uses this transaction.">Transaction à définir comme une transaction ambiante afin que le travail transactionnel fait à l'intérieur de la portée utilise cette transaction.</param>
      <param name="asyncFlowOption" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScopeAsyncFlowOption&quot; /&gt; enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns.">Instance de l'énumération <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /> décrivant si la transaction ambiante associée à la portée de transaction sera acheminée entre les continuations de thread lors de l'utilisation des modèles de programmation asynchrone du .NET Task ou async/await.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeAsyncFlowOption)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScope&quot; /&gt; class with the specified asynchronous flow option.">Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionScope" /> avec l'option de flux asynchrone spécifiée.</summary>
      <param name="asyncFlowOption" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScopeAsyncFlowOption&quot; /&gt; enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns.">Instance de l'énumération <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /> décrivant si la transaction ambiante associée à la portée de transaction sera acheminée entre les continuations de thread lors de l'utilisation des modèles de programmation asynchrone du .NET Task ou async/await.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScope&quot; /&gt; class with the specified requirements.">Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionScope" /> avec les critères spécifiés.</summary>
      <param name="scopeOption" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScopeOption&quot; /&gt; enumeration that describes the transaction requirements associated with this transaction scope.">Instance de l'énumération <see cref="T:System.Transactions.TransactionScopeOption" /> qui décrit les critères de transaction associés à cette portée de transaction.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScope&quot; /&gt; class with the specified timeout value and requirements.">Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionScope" /> avec les critères et la valeur de délai d'attente spécifiés.</summary>
      <param name="scopeOption" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScopeOption&quot; /&gt; enumeration that describes the transaction requirements associated with this transaction scope.">Instance de l'énumération <see cref="T:System.Transactions.TransactionScopeOption" /> qui décrit les critères de transaction associés à cette portée de transaction.</param>
      <param name="scopeTimeout" vsli:raw="The &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; after which the transaction scope times out and aborts the transaction.">
        <see cref="T:System.TimeSpan" /> après lequel la portée de la transaction expire et la transaction est abandonnée.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScope&quot; /&gt; class with the specified timeout value, requirements, and asynchronous flow option.">Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionScope" /> avec le délai, les spécifications et l'option de flux asynchrone spécifiés.</summary>
      <param name="scopeOption" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScopeOption&quot; /&gt; enumeration that describes the transaction requirements associated with this transaction scope.">Instance de l'énumération <see cref="T:System.Transactions.TransactionScopeOption" /> qui décrit les critères de transaction associés à cette portée de transaction.</param>
      <param name="scopeTimeout" vsli:raw="The &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; after which the transaction scope times out and aborts the transaction.">
        <see cref="T:System.TimeSpan" /> après lequel la portée de la transaction expire et la transaction est abandonnée.</param>
      <param name="asyncFlowOption" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScopeAsyncFlowOption&quot; /&gt; enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns.">Instance de l'énumération <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /> décrivant si la transaction ambiante associée à la portée de transaction sera acheminée entre les continuations de thread lors de l'utilisation des modèles de programmation asynchrone du .NET Task ou async/await.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScope&quot; /&gt; class with the specified requirements.">Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionScope" /> avec les critères spécifiés.</summary>
      <param name="scopeOption" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScopeOption&quot; /&gt; enumeration that describes the transaction requirements associated with this transaction scope.">Instance de l'énumération <see cref="T:System.Transactions.TransactionScopeOption" /> qui décrit les critères de transaction associés à cette portée de transaction.</param>
      <param name="transactionOptions" vsli:raw="A &lt;see cref=&quot;T:System.Transactions.TransactionOptions&quot; /&gt; structure that describes the transaction options to use if a new transaction is created. If an existing transaction is used, the timeout value in this parameter applies to the transaction scope. If that time expires before the scope is disposed, the transaction is aborted.">Structure <see cref="T:System.Transactions.TransactionOptions" /> qui décrit les options de transaction à utiliser si une nouvelle transaction est créée. Si une transaction existante est utilisée, la valeur du délai d'attente dans ce paramètre s'applique à la portée de transaction. Si ce délai expire avant que la portée ne soit supprimée, la transaction est abandonnée.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScope&quot; /&gt; class with the specified scope and COM+ interoperability requirements, and transaction options.">Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionScope" /> avec la portée, les critères d'interopérabilité COM+ et les options de transaction spécifiés.</summary>
      <param name="scopeOption" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScopeOption&quot; /&gt; enumeration that describes the transaction requirements associated with this transaction scope.">Instance de l'énumération <see cref="T:System.Transactions.TransactionScopeOption" /> qui décrit les critères de transaction associés à cette portée de transaction.</param>
      <param name="transactionOptions" vsli:raw="A &lt;see cref=&quot;T:System.Transactions.TransactionOptions&quot; /&gt; structure that describes the transaction options to use if a new transaction is created. If an existing transaction is used, the timeout value in this parameter applies to the transaction scope. If that time expires before the scope is disposed, the transaction is aborted.">Structure <see cref="T:System.Transactions.TransactionOptions" /> qui décrit les options de transaction à utiliser si une nouvelle transaction est créée. Si une transaction existante est utilisée, la valeur du délai d'attente dans ce paramètre s'applique à la portée de transaction. Si ce délai expire avant que la portée ne soit supprimée, la transaction est abandonnée.</param>
      <param name="interopOption" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Transactions.EnterpriseServicesInteropOption&quot; /&gt; enumeration that describes how the associated transaction interacts with COM+ transactions.">Instance de l'énumération <see cref="T:System.Transactions.EnterpriseServicesInteropOption" /> qui décrit comment la transaction associée interagit avec les transactions COM+.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]  &#xA;  &#xA; Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScope&quot; /&gt; class with the specified requirements and asynchronous flow option.">[Pris en charge dans le .NET Framework 4.5.1 et versions ultérieures]
Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionScope" /> avec les spécifications et l'option de flux asynchrone spécifiées.</summary>
      <param name="scopeOption" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScopeOption&quot; /&gt; enumeration that describes the transaction requirements associated with this transaction scope.">Instance de l'énumération <see cref="T:System.Transactions.TransactionScopeOption" /> qui décrit les critères de transaction associés à cette portée de transaction.</param>
      <param name="transactionOptions" vsli:raw="A &lt;see cref=&quot;T:System.Transactions.TransactionOptions&quot; /&gt; structure that describes the transaction options to use if a new transaction is created. If an existing transaction is used, the timeout value in this parameter applies to the transaction scope. If that time expires before the scope is disposed, the transaction is aborted.">Structure <see cref="T:System.Transactions.TransactionOptions" /> qui décrit les options de transaction à utiliser si une nouvelle transaction est créée. Si une transaction existante est utilisée, la valeur du délai d'attente dans ce paramètre s'applique à la portée de transaction. Si ce délai expire avant que la portée ne soit supprimée, la transaction est abandonnée.</param>
      <param name="asyncFlowOption" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScopeAsyncFlowOption&quot; /&gt; enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns.">Instance de l'énumération <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /> décrivant si la transaction ambiante associée à la portée de transaction sera acheminée entre les continuations de thread lors de l'utilisation des modèles de programmation asynchrone du .NET Task ou async/await.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionScopeAsyncFlowOption)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScope&quot; /&gt; class with the specified requirements and asynchronous flow option.">Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionScope" /> avec les spécifications et l'option de flux asynchrone spécifiées.</summary>
      <param name="scopeOption" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScopeOption&quot; /&gt; enumeration that describes the transaction requirements associated with this transaction scope.">Instance de l'énumération <see cref="T:System.Transactions.TransactionScopeOption" /> qui décrit les critères de transaction associés à cette portée de transaction.</param>
      <param name="asyncFlowOption" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScopeAsyncFlowOption&quot; /&gt; enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns.">Instance de l'énumération <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /> décrivant si la transaction ambiante associée à la portée de transaction sera acheminée entre les continuations de thread lors de l'utilisation des modèles de programmation asynchrone du .NET Task ou async/await.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.Complete">
      <summary vsli:raw="Indicates that all operations within the scope are completed successfully.">Indique que toutes les opérations dans la portée sont terminées avec succès.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This method has already been called once.">Cette méthode a déjà été appelée une fois.</exception>
    </member>
    <member name="M:System.Transactions.TransactionScope.Dispose">
      <summary vsli:raw="Ends the transaction scope.">Termine la portée de transaction.</summary>
    </member>
    <member name="T:System.Transactions.TransactionScopeAsyncFlowOption">
      <summary vsli:raw="Specifies whether transaction flow across thread continuations is enabled for &lt;see cref=&quot;T:System.Transactions.TransactionScope&quot; /&gt;.">Spécifie si le flux de transaction entre les continuations de thread est activé pour <see cref="T:System.Transactions.TransactionScope" />.</summary>
    </member>
    <member name="F:System.Transactions.TransactionScopeAsyncFlowOption.Enabled">
      <summary vsli:raw="Specifies that transaction flow across thread continuations is enabled.">Spécifie que le flux de transaction entre les continuations de thread est activé.</summary>
    </member>
    <member name="F:System.Transactions.TransactionScopeAsyncFlowOption.Suppress">
      <summary vsli:raw="Specifies that transaction flow across thread continuations is suppressed. This is the default setting if no &lt;see langword=&quot;TransactionScopeAsyncFlowOption&quot; /&gt; is specified in the &lt;see cref=&quot;Overload:System.Transactions.TransactionScope.#ctor&quot; /&gt; constructor.">Spécifie que le flux de transaction entre les continuations de thread est supprimé. Il s’agit du paramètre par défaut si aucune <see langword="TransactionScopeAsyncFlowOption" /> n’est spécifiée dans le constructeur <see cref="Overload:System.Transactions.TransactionScope.#ctor" />.</summary>
    </member>
    <member name="T:System.Transactions.TransactionScopeOption">
      <summary vsli:raw="Provides additional options for creating a transaction scope.">Fournit des options supplémentaires pour créer une portée de transaction.</summary>
    </member>
    <member name="F:System.Transactions.TransactionScopeOption.Required">
      <summary vsli:raw="A transaction is required by the scope. It uses an ambient transaction if one already exists. Otherwise, it creates a new transaction before entering the scope. This is the default value.">Une transaction est requise par la portée. Elle utilise une transaction ambiante s'il en existe déjà une. Sinon, il crée une nouvelle transaction avant d'entrer dans la portée. Valeur par défaut.</summary>
    </member>
    <member name="F:System.Transactions.TransactionScopeOption.RequiresNew">
      <summary vsli:raw="A new transaction is always created for the scope.">Une nouvelle transaction est toujours créée pour la portée.</summary>
    </member>
    <member name="F:System.Transactions.TransactionScopeOption.Suppress">
      <summary vsli:raw="The ambient transaction context is suppressed when creating the scope. All operations within the scope are done without an ambient transaction context.">Le contexte de la transaction ambiante est supprimé lors de la création de la portée. Toutes les opérations dans la portée sont effectuées sans contexte de la transaction ambiante.</summary>
    </member>
    <member name="T:System.Transactions.TransactionStartedEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.Transactions.TransactionManager.DistributedTransactionStarted&quot; /&gt; event of a &lt;see cref=&quot;T:System.Transactions.TransactionManager&quot; /&gt; class.">Représente la méthode destinée à gérer l’événement <see cref="E:System.Transactions.TransactionManager.DistributedTransactionStarted" /> d’une classe <see cref="T:System.Transactions.TransactionManager" />.</summary>
      <param name="sender" vsli:raw="The source of the event.">Source de l'événement.</param>
      <param name="e" vsli:raw="The &lt;see cref=&quot;T:System.Transactions.TransactionEventArgs&quot; /&gt; that contains the transaction from which transaction information can be retrieved.">
        <see cref="T:System.Transactions.TransactionEventArgs" /> qui contient la transaction à partir de laquelle les informations de transaction peuvent être récupérées.</param>
    </member>
    <member name="T:System.Transactions.TransactionStatus">
      <summary vsli:raw="Describes the current status of a distributed transaction.">Décrit l'état en cours d'une transaction distribuée.</summary>
    </member>
    <member name="F:System.Transactions.TransactionStatus.Aborted">
      <summary vsli:raw="The transaction has been rolled back.">La transaction a été restaurée.</summary>
    </member>
    <member name="F:System.Transactions.TransactionStatus.Active">
      <summary vsli:raw="The status of the transaction is unknown, because some participants must still be polled.">L'état de la transaction est inconnu, parce que certains participants doivent encore être interrogés.</summary>
    </member>
    <member name="F:System.Transactions.TransactionStatus.Committed">
      <summary vsli:raw="The transaction has been committed.">La transaction a été validée.</summary>
    </member>
    <member name="F:System.Transactions.TransactionStatus.InDoubt">
      <summary vsli:raw="The status of the transaction is unknown.">L'état de la transaction est inconnu.</summary>
    </member>
  </members>
</doc>
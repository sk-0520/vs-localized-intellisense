<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Transactions.Local</name>
  </assembly>
  <members>
    <member name="T:System.Transactions.CommittableTransaction">
      <summary>Décrit une transaction pouvant être validée.</summary>
    </member>
    <member name="M:System.Transactions.CommittableTransaction.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.CommittableTransaction" />.</summary>
      <exception cref="T:System.PlatformNotSupportedException">Tentative de création d'une transaction sur Windows 98, Windows 98 Deuxième Édition ou Windows Millennium Edition.</exception>
    </member>
    <member name="M:System.Transactions.CommittableTransaction.#ctor(System.TimeSpan)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.CommittableTransaction" /> avec la valeur <paramref name="timeout" /> spécifiée.</summary>
      <param name="timeout">Délai maximal pendant lequel la transaction peut exister avant d'être abandonnée.</param>
      <exception cref="T:System.PlatformNotSupportedException">Tentative de création d'une transaction sur Windows 98, Windows 98 Deuxième Édition ou Windows Millennium Edition.</exception>
    </member>
    <member name="M:System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.CommittableTransaction" /> avec les options de transaction spécifiées.</summary>
      <param name="options">Structure <see cref="T:System.Transactions.TransactionOptions" /> qui décrit les options de transaction à utiliser pour la nouvelle transaction.</param>
      <exception cref="T:System.PlatformNotSupportedException">Tentative de création d'une transaction sur Windows 98, Windows 98 Deuxième Édition ou Windows Millennium Edition.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> n'est pas valide.</exception>
    </member>
    <member name="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)">
      <summary>Commence une tentative de validation de la transaction de façon asynchrone.</summary>
      <param name="asyncCallback">Délégué <see cref="T:System.AsyncCallback" /> appelé lorsque la transaction se termine. Ce paramètre peut être <see langword="null" />, auquel cas l'application n'est pas avertie de la fin de la transaction. L'application doit plutôt utiliser l'interface <see cref="T:System.IAsyncResult" /> pour vérifier la fin et attendre en conséquence ou appeler <see cref="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)" /> pour attendre la fin.</param>
      <param name="asyncState">Objet qui peut contenir des informations d'état arbitraires, associé à la validation asynchrone. Cet objet est passé au rappel et n'est pas interprété par <see cref="N:System.Transactions" />. Une référence nulle est autorisée.</param>
      <returns>Interface <see cref="T:System.IAsyncResult" /> qui peut être utilisée par l'appelant pour vérifier l'état de l'opération asynchrone ou attendre la fin de l'opération.</returns>
    </member>
    <member name="M:System.Transactions.CommittableTransaction.Commit">
      <summary>Essaie de valider la transaction.</summary>
      <exception cref="T:System.Transactions.TransactionInDoubtException">
        <see cref="M:System.Transactions.CommittableTransaction.Commit" /> est appelé sur une transaction et la transaction devient <see cref="F:System.Transactions.TransactionStatus.InDoubt" />.</exception>
      <exception cref="T:System.Transactions.TransactionAbortedException">
        <see cref="M:System.Transactions.CommittableTransaction.Commit" /> est appelé et la transaction est restaurée pour la première fois.</exception>
    </member>
    <member name="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)">
      <summary>Termine une tentative de validation de la transaction de façon asynchrone.</summary>
      <param name="asyncResult">Objet <see cref="T:System.IAsyncResult" /> associé à la validation asynchrone.</param>
      <exception cref="T:System.Transactions.TransactionAbortedException">
        <see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /> est appelé et la transaction est restaurée pour la première fois.</exception>
    </member>
    <member name="P:System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState">
      <summary>Obtient l'objet fourni comme dernier paramètre d'un appel à la méthode <see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" />.</summary>
      <returns>Objet fourni comme dernier paramètre d'un appel à la méthode <see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" />.</returns>
    </member>
    <member name="P:System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle">
      <summary>Obtient un <see cref="T:System.Threading.WaitHandle" /> qui est utilisé pour attendre qu’une opération asynchrone se termine.</summary>
      <returns>
        <see cref="T:System.Threading.WaitHandle" /> utilisé pour attendre qu’une opération asynchrone se termine.</returns>
    </member>
    <member name="P:System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously">
      <summary>Obtient une indication précisant si l'opération de validation asynchrone a été terminée de manière synchrone.</summary>
      <returns>
        <see langword="true" /> si l'opération de validation asynchrone a été terminée de manière synchrone ; sinon, <see langword="false" />. Cette propriété retourne toujours <see langword="false" /> même si l'opération a été terminée de façon synchrone.</returns>
    </member>
    <member name="P:System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted">
      <summary>Obtient une indication précisant si l'opération de validation asynchrone est terminée.</summary>
      <returns>
        <see langword="true" /> si l’opération est terminée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Transactions.DependentCloneOption">
      <summary>Contrôle le type de transaction dépendante à créer.</summary>
    </member>
    <member name="F:System.Transactions.DependentCloneOption.BlockCommitUntilComplete">
      <summary>La transaction dépendante bloque le processus de validation de la transaction jusqu'à ce que la transaction parent expire ou que <see cref="M:System.Transactions.DependentTransaction.Complete" /> soit appelé. Dans ce cas, le travail supplémentaire peut être fait sur la transaction et les nouvelles inscriptions peuvent être créées.</summary>
    </member>
    <member name="F:System.Transactions.DependentCloneOption.RollbackIfNotComplete">
      <summary>La transaction dépendante abandonne automatiquement la transaction si la validation est appelée sur la transaction parent avant que <see cref="M:System.Transactions.DependentTransaction.Complete" /> ne soit appelé.</summary>
    </member>
    <member name="T:System.Transactions.DependentTransaction">
      <summary>Décrit un clone d'une transaction qui garantit que la transaction ne peut pas être validée tant que l'application n'a pas fini son travail sur la transaction. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.Transactions.DependentTransaction.Complete">
      <summary>Tente de terminer la transaction dépendante.</summary>
      <exception cref="T:System.Transactions.TransactionException">Toute tentative de travail supplémentaire sur la transaction lorsque cette méthode est appelée. Cela inclut l’appel de méthodes telles que <see cref="Overload:System.Transactions.Transaction.EnlistVolatile" />, <see cref="Overload:System.Transactions.Transaction.EnlistDurable" />, <see cref="M:System.Transactions.Transaction.Clone" />, <see cref="M:System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)" /> , ou toute opération de sérialisation sur la transaction.</exception>
    </member>
    <member name="T:System.Transactions.Enlistment">
      <summary>Facilite la communication entre un participant de transaction inscrit et le gestionnaire de transactions pendant la phase finale de la transaction.</summary>
    </member>
    <member name="M:System.Transactions.Enlistment.Done">
      <summary>Indique que le participant à la transaction a terminé son travail.</summary>
    </member>
    <member name="T:System.Transactions.EnlistmentOptions">
      <summary>Détermine si l'objet doit être inscrit pendant la phase de préparation.</summary>
    </member>
    <member name="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired">
      <summary>L'objet doit s'inscrire pendant la phase initiale du processus de validation.</summary>
    </member>
    <member name="F:System.Transactions.EnlistmentOptions.None">
      <summary>L'objet ne requiert pas d'inscription pendant la phase initiale du processus de validation.</summary>
    </member>
    <member name="T:System.Transactions.EnterpriseServicesInteropOption">
      <summary>Spécifie comment les transactions distribuées interagissent avec les transactions COM+.</summary>
    </member>
    <member name="F:System.Transactions.EnterpriseServicesInteropOption.Automatic">
      <summary>Recherche un contexte COM+ existant et se synchronise avec s'il en existe un.</summary>
    </member>
    <member name="F:System.Transactions.EnterpriseServicesInteropOption.Full">
      <summary>Le contexte <see cref="N:System.EnterpriseServices" /> (qui peut être récupéré en appelant la méthode statique <see cref="P:System.EnterpriseServices.ContextUtil.Transaction" /> de la classe <see cref="T:System.EnterpriseServices.ContextUtil" />) et la transaction ambiante <see cref="N:System.Transactions" /> (qui peut être récupérée en appelant la méthode statique <see cref="P:System.Transactions.Transaction.Current" /> de la classe <see cref="T:System.Transactions.Transaction" />) sont toujours synchronisés. Cela introduit une perte de performance parce que de nouveaux contextes <see cref="N:System.EnterpriseServices" /> doivent être créés si nécessaire.</summary>
    </member>
    <member name="F:System.Transactions.EnterpriseServicesInteropOption.None">
      <summary>Il n'y a aucune synchronisation entre <see cref="P:System.EnterpriseServices.ContextUtil.Transaction" /> et <see cref="P:System.Transactions.Transaction.Current" />.</summary>
    </member>
    <member name="T:System.Transactions.HostCurrentTransactionCallback">
      <summary>Fournit un mécanisme à l'environnement d'hébergement pour qu'il fournisse sa propre notion par défaut de <see cref="P:System.Transactions.Transaction.Current" />.</summary>
      <returns>Objet <see cref="T:System.Transactions.Transaction" />.</returns>
    </member>
    <member name="T:System.Transactions.IDtcTransaction">
      <summary>Décrit une transaction DTC.</summary>
    </member>
    <member name="M:System.Transactions.IDtcTransaction.Abort(System.IntPtr,System.Int32,System.Int32)">
      <summary>Abandonne une transaction.</summary>
      <param name="reason">
        <see cref="T:System.EnterpriseServices.BOID" /> optionnel indiquant pourquoi la transaction est abandonnée. Ce paramètre peut être <see langword="null" />, indiquant qu'aucune raison pour l'abandon n'est fournie.</param>
      <param name="retaining">Cette valeur doit être <see langword="false" />.</param>
      <param name="async">Lorsque <paramref name="async" /> a la valeur <see langword="true" />, un abandon asynchrone est exécuté et l'appelant doit utiliser <see langword="ITransactionOutcomeEvents" /> pour connaître le résultat de la transaction.</param>
    </member>
    <member name="M:System.Transactions.IDtcTransaction.Commit(System.Int32,System.Int32,System.Int32)">
      <summary>Valide la transaction.</summary>
      <param name="retaining">Cette valeur doit être <see langword="false" />.</param>
      <param name="commitType">Valeur issue de l'énumération OLE DB <see langword="XACTTC" />.</param>
      <param name="reserved">Cette valeur doit être zéro.</param>
    </member>
    <member name="M:System.Transactions.IDtcTransaction.GetTransactionInfo(System.IntPtr)">
      <summary>Récupère des informations à propos d'une transaction.</summary>
      <param name="transactionInformation">Pointeur vers la structure <see cref="T:System.EnterpriseServices.XACTTRANSINFO" /> allouée par l'appelant qui recevra des informations sur la transaction. Cette valeur ne doit pas être <see langword="null" />.</param>
    </member>
    <member name="T:System.Transactions.IEnlistmentNotification">
      <summary>Décrit une interface qu’un gestionnaire de ressources devrait implémenter pour fournir au gestionnaire des transactions des rappels de notification de validation à deux phases lors de l’inscription pour participation.</summary>
    </member>
    <member name="M:System.Transactions.IEnlistmentNotification.Commit(System.Transactions.Enlistment)">
      <summary>Avertit un objet inscrit qu'une transaction est en cours de validation.</summary>
      <param name="enlistment">Objet <see cref="T:System.Transactions.Enlistment" /> utilisé pour envoyer une réponse au gestionnaire de transactions.</param>
    </member>
    <member name="M:System.Transactions.IEnlistmentNotification.InDoubt(System.Transactions.Enlistment)">
      <summary>Avertit un objet inscrit que l'état d'une transaction est dans le doute.</summary>
      <param name="enlistment">Objet <see cref="T:System.Transactions.Enlistment" /> utilisé pour envoyer une réponse au gestionnaire de transactions.</param>
    </member>
    <member name="M:System.Transactions.IEnlistmentNotification.Prepare(System.Transactions.PreparingEnlistment)">
      <summary>Avertit un objet inscrit qu'une transaction est en cours de préparation pour validation.</summary>
      <param name="preparingEnlistment">Objet <see cref="T:System.Transactions.PreparingEnlistment" /> utilisé pour envoyer une réponse au gestionnaire de transactions.</param>
    </member>
    <member name="M:System.Transactions.IEnlistmentNotification.Rollback(System.Transactions.Enlistment)">
      <summary>Avertit un objet inscrit qu'une transaction est en cours de restauration (abandonnée).</summary>
      <param name="enlistment">Objet <see cref="T:System.Transactions.Enlistment" /> utilisé pour envoyer une réponse au gestionnaire de transactions.</param>
    </member>
    <member name="T:System.Transactions.IPromotableSinglePhaseNotification">
      <summary>Décrit un objet qui sert de délégué de validation pour une transaction non distribuée interne à un gestionnaire de ressources.</summary>
    </member>
    <member name="M:System.Transactions.IPromotableSinglePhaseNotification.Initialize">
      <summary>Avertit un participant à la transaction que l'inscription a été terminée avec succès.</summary>
      <exception cref="T:System.Transactions.TransactionException">Tentative d'inscription ou de sérialisation d'une transaction.</exception>
    </member>
    <member name="M:System.Transactions.IPromotableSinglePhaseNotification.Rollback(System.Transactions.SinglePhaseEnlistment)">
      <summary>Avertit un objet inscrit que la transaction est en cours de restauration.</summary>
      <param name="singlePhaseEnlistment">Objet <see cref="T:System.Transactions.SinglePhaseEnlistment" /> utilisé pour envoyer une réponse au gestionnaire de transactions.</param>
    </member>
    <member name="M:System.Transactions.IPromotableSinglePhaseNotification.SinglePhaseCommit(System.Transactions.SinglePhaseEnlistment)">
      <summary>Avertit un objet inscrit que la transaction est en cours de validation.</summary>
      <param name="singlePhaseEnlistment">Interface <see cref="T:System.Transactions.SinglePhaseEnlistment" /> utilisée pour envoyer une réponse au gestionnaire de transactions.</param>
    </member>
    <member name="T:System.Transactions.ISimpleTransactionSuperior">
      <summary>Représente une transaction qui n'est pas une transaction de racine, mais peut être remontée pour être gérée par le MSDTC.</summary>
    </member>
    <member name="M:System.Transactions.ISimpleTransactionSuperior.Rollback">
      <summary>Avertit un objet inscrit que la transaction est en cours de restauration.</summary>
    </member>
    <member name="T:System.Transactions.ISinglePhaseNotification">
      <summary>Décrit un objet de ressource qui prend en charge l’optimisation de la validation en une phase dans une transaction.</summary>
    </member>
    <member name="M:System.Transactions.ISinglePhaseNotification.SinglePhaseCommit(System.Transactions.SinglePhaseEnlistment)">
      <summary>Représente l'implémentation du gestionnaire de ressources du rappel pour l'optimisation de la validation à phase unique.</summary>
      <param name="singlePhaseEnlistment">
        <see cref="T:System.Transactions.SinglePhaseEnlistment" /> utilisé pour envoyer une réponse au gestionnaire de transactions.</param>
    </member>
    <member name="T:System.Transactions.IsolationLevel">
      <summary>Spécifie le niveau d'isolement d'une transaction.</summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.Chaos">
      <summary>Les modifications en attente, provenant des transactions les plus isolées, ne peuvent pas être remplacées.</summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.ReadCommitted">
      <summary>Les données volatiles ne peuvent pas être lues pendant la transaction, mais peuvent être modifiées.</summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.ReadUncommitted">
      <summary>Les données volatiles peuvent être lues et modifiées pendant la transaction.</summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.RepeatableRead">
      <summary>Les données volatiles peuvent être lues mais pas modifiées pendant la transaction. De nouvelles données peuvent être ajoutées pendant la transaction.</summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.Serializable">
      <summary>Les données volatiles peuvent être lues mais pas modifiées et aucune nouvelle donnée ne peut être ajoutée pendant la transaction.</summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.Snapshot">
      <summary>Les données volatiles peuvent être lues. Avant qu'une transaction ne modifie des données, elle vérifie si une autre transaction a modifié les données après la lecture initiale. Si les données ont été mises à jour, une erreur est déclenchée. Une transaction peut ainsi obtenir la valeur précédemment validée des données.
Lorsque vous essayez de promouvoir une transaction qui a été créée avec le niveau d’isolement <see langword="Snapshot" />, une <see cref="T:System.InvalidOperationException" /> est levée avec le message d’erreur « Impossible de promouvoir les transactions comportant la capture instantanée IsolationLevel ».</summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.Unspecified">
      <summary>Un niveau d'isolement différent de celui spécifié est utilisé actuellement, mais il est impossible de le déterminer. Une exception est levée si cette valeur est définie.</summary>
    </member>
    <member name="T:System.Transactions.ITransactionPromoter">
      <summary>Décrit une transaction déléguée pour une transaction existante qui peut être remontée pour être gérée par le MSDTC, si nécessaire.</summary>
    </member>
    <member name="M:System.Transactions.ITransactionPromoter.Promote">
      <summary>Avertit un objet inscrit qu'une remontée de la transaction déléguée a été demandée.</summary>
      <returns>Un jeton de propagation émetteur/récepteur qui marshale une transaction distribuée. Pour plus d'informations, consultez <see cref="M:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken(System.Byte[])" />.</returns>
    </member>
    <member name="T:System.Transactions.PreparingEnlistment">
      <summary>Facilite la communication entre un participant de transaction inscrit et le gestionnaire de transactions pendant la phase de préparation de la transaction.</summary>
    </member>
    <member name="M:System.Transactions.PreparingEnlistment.ForceRollback">
      <summary>Indique que la transaction doit être restaurée.</summary>
    </member>
    <member name="M:System.Transactions.PreparingEnlistment.ForceRollback(System.Exception)">
      <summary>Indique que la transaction doit être restaurée.</summary>
      <param name="e">Explication sur la raison pour laquelle une restauration est déclenchée.</param>
    </member>
    <member name="M:System.Transactions.PreparingEnlistment.Prepared">
      <summary>Indique que la transaction peut être validée.</summary>
    </member>
    <member name="M:System.Transactions.PreparingEnlistment.RecoveryInformation">
      <summary>Obtient les informations de récupération d'une inscription.</summary>
      <returns>Informations de récupération d'une inscription.</returns>
      <exception cref="T:System.InvalidOperationException">Tentative d'obtenir des informations de récupération à l'intérieur d'une inscription volatile qui ne génère pas d'informations de récupération.</exception>
    </member>
    <member name="T:System.Transactions.SinglePhaseEnlistment">
      <summary>Fournit un jeu des rappels qui facilite la communication entre un participant inscrit pour une validation à phase unique et le gestionnaire de transactions lorsque la notification <see cref="M:System.Transactions.ISinglePhaseNotification.SinglePhaseCommit(System.Transactions.SinglePhaseEnlistment)" /> est reçue.</summary>
    </member>
    <member name="M:System.Transactions.SinglePhaseEnlistment.Aborted">
      <summary>Représente un rappel qui est utilisé pour indiquer au gestionnaire de transactions que la transaction doit être restaurée.</summary>
    </member>
    <member name="M:System.Transactions.SinglePhaseEnlistment.Aborted(System.Exception)">
      <summary>Représente un rappel qui est utilisé pour indiquer au gestionnaire de transactions que la transaction doit être restaurée et fournit une explication.</summary>
      <param name="e">Explication sur la raison pour laquelle une restauration est initiée.</param>
    </member>
    <member name="M:System.Transactions.SinglePhaseEnlistment.Committed">
      <summary>Représente un rappel qui est utilisé pour indiquer au gestionnaire de transactions que la validation à phase unique a réussi.</summary>
    </member>
    <member name="M:System.Transactions.SinglePhaseEnlistment.InDoubt">
      <summary>Représente un rappel qui est utilisé pour indiquer au gestionnaire de transactions que l'état de la transaction est dans le doute.</summary>
    </member>
    <member name="M:System.Transactions.SinglePhaseEnlistment.InDoubt(System.Exception)">
      <summary>Représente un rappel qui est utilisé pour indiquer au gestionnaire de transactions que l'état de la transaction est dans le doute et fournit une explication.</summary>
      <param name="e">Explication de la raison pour laquelle la transaction est considérée comme incertaine.</param>
    </member>
    <member name="T:System.Transactions.SubordinateTransaction">
      <summary>Représente une transaction non associée à une racine qui peut être déléguée. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.Transactions.SubordinateTransaction.#ctor(System.Transactions.IsolationLevel,System.Transactions.ISimpleTransactionSuperior)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.SubordinateTransaction" />.</summary>
      <param name="isoLevel">Niveau d'isolement de la transaction</param>
      <param name="superior">
        <see cref="T:System.Transactions.ISimpleTransactionSuperior" />
      </param>
    </member>
    <member name="T:System.Transactions.Transaction">
      <summary>Représente une transaction.</summary>
    </member>
    <member name="M:System.Transactions.Transaction.Clone">
      <summary>Crée un clone de la transaction.</summary>
      <returns>
        <see cref="T:System.Transactions.Transaction" /> qui est une copie de l'objet de transaction en cours.</returns>
    </member>
    <member name="P:System.Transactions.Transaction.Current">
      <summary>Obtient ou définit la transaction ambiante.</summary>
      <returns>
        <see cref="T:System.Transactions.Transaction" /> qui décrit la transaction en cours.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)">
      <summary>Crée un clone dépendant de la transaction.</summary>
      <param name="cloneOption">
        <see cref="T:System.Transactions.DependentCloneOption" /> qui contrôle le type de transaction dépendante à créer.</param>
      <returns>
        <see cref="T:System.Transactions.DependentTransaction" /> qui représente le clone dépendant.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.Dispose">
      <summary>Libère les ressources utilisées par l’objet.</summary>
    </member>
    <member name="M:System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)">
      <summary>Inscrit un gestionnaire de ressources durable qui prend en charge la validation à deux phases pour participer à une transaction.</summary>
      <param name="resourceManagerIdentifier">Identificateur unique pour un gestionnaire de ressources qui doit persister pendant une défaillance du gestionnaire de ressources ou un redémarrage.</param>
      <param name="enlistmentNotification">Objet qui implémente l'interface <see cref="T:System.Transactions.IEnlistmentNotification" /> pour recevoir des notifications de validation à deux phases.</param>
      <param name="enlistmentOptions">
        <see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" /> si le gestionnaire de ressources souhaite exécuter un travail supplémentaire pendant la phase de préparation.</param>
      <returns>Un objet <see cref="T:System.Transactions.Enlistment" /> qui décrit l'inscription.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)">
      <summary>Inscrit un gestionnaire de ressources durable qui prend en charge l'optimisation de la validation à phase unique pour participer à une transaction.</summary>
      <param name="resourceManagerIdentifier">Identificateur unique pour un gestionnaire de ressources qui doit persister pendant une défaillance du gestionnaire de ressources ou un redémarrage.</param>
      <param name="singlePhaseNotification">Objet qui implémente l'interface <see cref="T:System.Transactions.ISinglePhaseNotification" /> qui doit être capable de recevoir une validation à phase unique et des notifications de validation à deux phases.</param>
      <param name="enlistmentOptions">
        <see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" /> si le gestionnaire de ressources souhaite exécuter un travail supplémentaire pendant la phase de préparation.</param>
      <returns>Un objet <see cref="T:System.Transactions.Enlistment" /> qui décrit l'inscription.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification)">
      <summary>Inscrit un gestionnaire de ressources qui a une transaction interne à l'aide d'une inscription à phase unique pouvant être promue (PSPE).</summary>
      <param name="promotableSinglePhaseNotification">Interface <see cref="T:System.Transactions.IPromotableSinglePhaseNotification" /> implémentée par le participant.</param>
      <returns>Implémentation de l'interface <see cref="T:System.Transactions.SinglePhaseEnlistment" /> qui décrit l'inscription.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)">
      <summary>Inscrit un gestionnaire de ressources qui a une transaction interne à l'aide d'une inscription à phase unique pouvant être promue (PSPE).</summary>
      <param name="promotableSinglePhaseNotification">Interface <see cref="T:System.Transactions.IPromotableSinglePhaseNotification" /> implémentée par le participant.</param>
      <param name="promoterType">Type du processeur de transaction distribuée.</param>
      <returns>Implémentation de l'interface <see cref="T:System.Transactions.SinglePhaseEnlistment" /> qui décrit l'inscription.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.EnlistVolatile(System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)">
      <summary>Inscrit un gestionnaire de ressources volatiles qui prend en charge la validation à deux phases pour participer à une transaction.</summary>
      <param name="enlistmentNotification">Un objet qui implémente l’interface <see cref="T:System.Transactions.IEnlistmentNotification" /> pour recevoir des notifications de validation en deux phases.</param>
      <param name="enlistmentOptions">
        <see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" /> si le gestionnaire de ressources souhaite exécuter un travail supplémentaire pendant la phase de préparation.</param>
      <returns>Un objet <see cref="T:System.Transactions.Enlistment" /> qui décrit l'inscription.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.EnlistVolatile(System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)">
      <summary>Inscrit un gestionnaire de ressources volatil qui prend en charge l'optimisation de la validation à phase unique pour participer à une transaction.</summary>
      <param name="singlePhaseNotification">Objet qui implémente l'interface <see cref="T:System.Transactions.ISinglePhaseNotification" /> qui doit être capable de recevoir une validation à phase unique et des notifications de validation à deux phases.</param>
      <param name="enlistmentOptions">
        <see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" /> si le gestionnaire de ressources souhaite exécuter un travail supplémentaire pendant la phase de préparation.</param>
      <returns>Un objet <see cref="T:System.Transactions.Enlistment" /> qui décrit l'inscription.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.Equals(System.Object)">
      <summary>Détermine si cette transaction et l'objet spécifié sont égaux.</summary>
      <param name="obj">Objet à comparer avec cette instance.</param>
      <returns>
        <see langword="true" /> si <paramref name="obj" /> et cette transaction sont identiques ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.GetHashCode">
      <summary>Retourne le code de hachage de cette instance.</summary>
      <returns>Code de hachage d'un entier signé 32 bits.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.GetPromotedToken">
      <summary>Obtient l’élément <c>byte[]</c> retourné par la méthode <c>Promote</c> quand la transaction est promue.</summary>
      <returns>Élément <c>byte[]</c> retourné par la méthode <c>Promote</c> quand la transaction est promue.</returns>
    </member>
    <member name="P:System.Transactions.Transaction.IsolationLevel">
      <summary>Obtient le niveau d'isolement de la transaction.</summary>
      <returns>Une des valeurs <see cref="T:System.Transactions.IsolationLevel" /> qui indique le niveau d'isolement de la transaction.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.op_Equality(System.Transactions.Transaction,System.Transactions.Transaction)">
      <summary>Teste si deux instances de <see cref="T:System.Transactions.Transaction" /> spécifiées sont équivalentes.</summary>
      <param name="x">Instance de <see cref="T:System.Transactions.Transaction" /> figurant à gauche de l'opérateur d'égalité.</param>
      <param name="y">Instance de <see cref="T:System.Transactions.Transaction" /> figurant à droite de l'opérateur d'égalité.</param>
      <returns>
        <see langword="true" /> si <paramref name="x" /> et <paramref name="y" /> sont égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.op_Inequality(System.Transactions.Transaction,System.Transactions.Transaction)">
      <summary>Retourne une valeur qui indique si deux instances de <see cref="T:System.Transactions.Transaction" /> ne sont pas égales.</summary>
      <param name="x">Instance de <see cref="T:System.Transactions.Transaction" /> figurant à gauche de l'opérateur d'inégalité.</param>
      <param name="y">Instance de <see cref="T:System.Transactions.Transaction" /> figurant à droite de l'opérateur d'inégalité.</param>
      <returns>
        <see langword="true" /> si <paramref name="x" /> et <paramref name="y" /> ne sont pas égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.PromoteAndEnlistDurable(System.Guid,System.Transactions.IPromotableSinglePhaseNotification,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)">
      <summary>Favorise et inscrit un gestionnaire de ressources durable qui prend en charge la validation à deux phases pour participer à une transaction.</summary>
      <param name="resourceManagerIdentifier">Identificateur unique pour un gestionnaire de ressources qui doit persister pendant une défaillance du gestionnaire de ressources ou un redémarrage.</param>
      <param name="promotableNotification">Objet qui sert de délégué de validation pour une transaction non distribuée interne à un gestionnaire de ressources.</param>
      <param name="enlistmentNotification">Objet qui implémente l'interface <see cref="T:System.Transactions.IEnlistmentNotification" /> pour recevoir des notifications de validation à deux phases.</param>
      <param name="enlistmentOptions">
        <see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" /> si le gestionnaire de ressources souhaite exécuter un travail supplémentaire pendant la phase de préparation.</param>
    </member>
    <member name="P:System.Transactions.Transaction.PromoterType">
      <summary>Identifie de façon unique le format de l’élément <c>byte[]</c> retourné par la méthode Promote quand la transaction est promue.</summary>
      <returns>GUID qui identifie de façon unique le format de l' <c>octet []</c> retourné par la méthode promote lorsque la transaction est promue.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.Rollback">
      <summary>Restaure (abandonne) la transaction.</summary>
    </member>
    <member name="M:System.Transactions.Transaction.Rollback(System.Exception)">
      <summary>Restaure (abandonne) la transaction.</summary>
      <param name="e">Explication de la raison pour laquelle une récupération s'est produite.</param>
    </member>
    <member name="M:System.Transactions.Transaction.SetDistributedTransactionIdentifier(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)">
      <summary>Définit l'identificateur de transaction distribuée généré par le promoteur non-MSDTC.</summary>
      <param name="promotableNotification">Interface <see cref="T:System.Transactions.IPromotableSinglePhaseNotification" /> implémentée par le participant.</param>
      <param name="distributedTransactionIdentifier">Identificateur de la transaction utilisée par le gestionnaire de transactions distribuées.</param>
    </member>
    <member name="M:System.Transactions.Transaction.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Obtient un <see cref="T:System.Runtime.Serialization.SerializationInfo" /> avec les données requises pour sérialiser cette transaction.</summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> à remplir de données.</param>
      <param name="context">Destination (voir <see cref="T:System.Runtime.Serialization.StreamingContext" />) de cette sérialisation.</param>
    </member>
    <member name="E:System.Transactions.Transaction.TransactionCompleted">
      <summary>Indique que la transaction est terminée.</summary>
      <exception cref="T:System.ObjectDisposedException">Tentative de s'abonner à cet événement sur une transaction qui a été supprimée.</exception>
    </member>
    <member name="P:System.Transactions.Transaction.TransactionInformation">
      <summary>Récupère des informations supplémentaires à propos d'une transaction.</summary>
      <returns>
        <see cref="T:System.Transactions.TransactionInformation" /> qui contient des informations supplémentaires sur la transaction.</returns>
    </member>
    <member name="T:System.Transactions.TransactionAbortedException">
      <summary>Exception qui est levée lorsqu'une opération est tentée sur une transaction qui a déjà été restaurée ou lorsqu'une tentative est faite pour valider la transaction et que la transaction est abandonnée.</summary>
    </member>
    <member name="M:System.Transactions.TransactionAbortedException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionAbortedException" />.</summary>
    </member>
    <member name="M:System.Transactions.TransactionAbortedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionAbortedException" /> avec les informations de sérialisation et de contexte de diffusion en continu spécifiées.</summary>
      <param name="info">Objet <see cref="T:System.Runtime.Serialization.SerializationInfo" /> qui décrit une sérialisation non réussie.</param>
      <param name="context">Objet <see cref="T:System.Runtime.Serialization.SerializationInfo" /> qui décrit le contexte d'une sérialisation non réussie.</param>
    </member>
    <member name="M:System.Transactions.TransactionAbortedException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionAbortedException" /> avec le message spécifié.</summary>
      <param name="message">
        <see cref="T:System.String" /> qui contient un message expliquant pourquoi l'exception s'est produite.</param>
    </member>
    <member name="M:System.Transactions.TransactionAbortedException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionAbortedException" /> avec le message et l'exception interne spécifiés.</summary>
      <param name="message">
        <see cref="T:System.String" /> qui contient un message expliquant pourquoi l'exception s'est produite.</param>
      <param name="innerException">Obtient l'instance de l'exception qui a provoqué l'exception en cours. Pour plus d'informations, consultez la propriété <see cref="P:System.Exception.InnerException" />.</param>
    </member>
    <member name="T:System.Transactions.TransactionCompletedEventHandler">
      <summary>Représente la méthode qui gère l'événement <see cref="E:System.Transactions.Transaction.TransactionCompleted" /> d'une classe <see cref="T:System.Transactions.Transaction" />.</summary>
      <param name="sender">Source de l'événement.</param>
      <param name="e">
        <see cref="T:System.Transactions.TransactionEventArgs" /> qui contient les données d'événement.</param>
    </member>
    <member name="T:System.Transactions.TransactionEventArgs">
      <summary>Fournit des données pour les événements de transaction suivants : <see cref="E:System.Transactions.TransactionManager.DistributedTransactionStarted" />, <see cref="E:System.Transactions.Transaction.TransactionCompleted" />.</summary>
    </member>
    <member name="M:System.Transactions.TransactionEventArgs.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionEventArgs" />.</summary>
    </member>
    <member name="P:System.Transactions.TransactionEventArgs.Transaction">
      <summary>Obtient la transaction pour laquelle l'état d'événement est fourni.</summary>
      <returns>
        <see cref="T:System.Transactions.Transaction" /> pour lequel l'état d'événement est fourni.</returns>
    </member>
    <member name="T:System.Transactions.TransactionException">
      <summary>Exception qui est levée lorsque vous essayez de faire du travail sur une transaction qui ne peut pas accepter de nouveau travail.</summary>
    </member>
    <member name="M:System.Transactions.TransactionException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionException" />.</summary>
    </member>
    <member name="M:System.Transactions.TransactionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionException" /> avec les informations de sérialisation et de contexte de diffusion en continu spécifiées.</summary>
      <param name="info">Objet <see cref="T:System.Runtime.Serialization.SerializationInfo" /> qui décrit une sérialisation non réussie.</param>
      <param name="context">Objet <see cref="T:System.Runtime.Serialization.SerializationInfo" /> qui décrit le contexte d'une sérialisation non réussie.</param>
    </member>
    <member name="M:System.Transactions.TransactionException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionException" /> avec le message spécifié.</summary>
      <param name="message">
        <see cref="T:System.String" /> qui contient un message expliquant pourquoi l'exception s'est produite.</param>
    </member>
    <member name="M:System.Transactions.TransactionException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionException" /> avec le message et l'exception interne spécifiés.</summary>
      <param name="message">
        <see cref="T:System.String" /> qui contient un message expliquant pourquoi l'exception s'est produite.</param>
      <param name="innerException">Obtient l'instance de l'exception qui a provoqué l'exception en cours. Pour plus d'informations, consultez la propriété <see cref="P:System.Exception.InnerException" />.</param>
    </member>
    <member name="T:System.Transactions.TransactionInDoubtException">
      <summary>Exception qui est levée lorsqu'une opération est tentée sur une transaction qui est dans le doute ou lorsqu'une tentative est faite pour valider la transaction et que la transaction devient InDoubt.</summary>
    </member>
    <member name="M:System.Transactions.TransactionInDoubtException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionInDoubtException" />.</summary>
    </member>
    <member name="M:System.Transactions.TransactionInDoubtException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionInDoubtException" /> avec les informations de sérialisation et de contexte de diffusion en continu spécifiées.</summary>
      <param name="info">Objet <see cref="T:System.Runtime.Serialization.SerializationInfo" /> qui décrit une sérialisation non réussie.</param>
      <param name="context">Objet <see cref="T:System.Runtime.Serialization.SerializationInfo" /> qui décrit le contexte d'une sérialisation non réussie.</param>
    </member>
    <member name="M:System.Transactions.TransactionInDoubtException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionInDoubtException" /> avec le message spécifié.</summary>
      <param name="message">
        <see cref="T:System.String" /> qui contient un message expliquant pourquoi l'exception s'est produite.</param>
    </member>
    <member name="M:System.Transactions.TransactionInDoubtException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionInDoubtException" /> avec le message et l'exception interne spécifiés.</summary>
      <param name="message">
        <see cref="T:System.String" /> qui contient un message expliquant pourquoi l'exception s'est produite.</param>
      <param name="innerException">Obtient l'instance de l'exception qui a provoqué l'exception en cours. Pour plus d'informations, consultez la propriété <see cref="P:System.Exception.InnerException" />.</param>
    </member>
    <member name="T:System.Transactions.TransactionInformation">
      <summary>Fournit des informations supplémentaires sur une transaction.</summary>
    </member>
    <member name="P:System.Transactions.TransactionInformation.CreationTime">
      <summary>Obtient l'heure de création de la transaction.</summary>
      <returns>
        <see cref="T:System.DateTime" /> qui contient l'heure de création de la transaction.</returns>
    </member>
    <member name="P:System.Transactions.TransactionInformation.DistributedIdentifier">
      <summary>Obtient un identificateur unique de la transaction remontée.</summary>
      <returns>
        <see cref="T:System.Guid" /> qui contient l'identificateur unique de la transaction remontée.</returns>
    </member>
    <member name="P:System.Transactions.TransactionInformation.LocalIdentifier">
      <summary>Obtient un identificateur unique de la transaction.</summary>
      <returns>Identificateur unique de la transaction.</returns>
    </member>
    <member name="P:System.Transactions.TransactionInformation.Status">
      <summary>Obtient l'état de la transaction.</summary>
      <returns>
        <see cref="T:System.Transactions.TransactionStatus" /> qui contient l'état de la transaction.</returns>
    </member>
    <member name="T:System.Transactions.TransactionInterop">
      <summary>Facilite l'interaction entre <see cref="N:System.Transactions" /> et les composants qui ont été écrits précédemment pour interagir avec MSDTC, COM+ ou <see cref="N:System.EnterpriseServices" />. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetDtcTransaction(System.Transactions.Transaction)">
      <summary>Obtient une instance de <see cref="T:System.Transactions.IDtcTransaction" /> qui représente un <see cref="T:System.Transactions.Transaction" />.</summary>
      <param name="transaction">Instance de <see cref="T:System.Transactions.Transaction" /> à marshaler.</param>
      <returns>Instance de <see cref="T:System.Transactions.IDtcTransaction" /> qui représente un <see cref="T:System.Transactions.Transaction" />.  L’instance <see cref="T:System.Transactions.IDtcTransaction" /> est compatible avec la forme non managée de ITransaction utilisée par MSDTC et avec la forme managée de <see cref="T:System.EnterpriseServices.ITransaction" /> utilisée par <see cref="N:System.EnterpriseServices" />.</returns>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetExportCookie(System.Transactions.Transaction,System.Byte[])">
      <summary>Transforme un objet de transaction en cookie de transaction d'exportation.</summary>
      <param name="transaction">Objet <see cref="T:System.Transactions.Transaction" /> à marshaler.</param>
      <param name="whereabouts">Adresse qui décrit l'emplacement du gestionnaire de transactions de destination. Cela permet à deux gestionnaires de transactions de communiquer l'un avec l'autre, et ainsi de propager une transaction d'un système à l'autre.</param>
      <returns>Cookie de transaction d'exportation représentant l'objet <see cref="T:System.Transactions.Transaction" /> spécifié.</returns>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetTransactionFromDtcTransaction(System.Transactions.IDtcTransaction)">
      <summary>Génère un <see cref="T:System.Transactions.Transaction" /> à partir du <see cref="T:System.Transactions.IDtcTransaction" /> spécifié.</summary>
      <param name="transactionNative">Objet <see cref="T:System.Transactions.IDtcTransaction" /> à marshaler.</param>
      <returns>Instance de <see cref="T:System.Transactions.Transaction" /> qui représente le <see cref="T:System.Transactions.IDtcTransaction" /> donné.</returns>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetTransactionFromExportCookie(System.Byte[])">
      <summary>Génère un <see cref="T:System.Transactions.Transaction" /> à partir du cookie d'exportation spécifié.</summary>
      <param name="cookie">Forme marshalée de l’objet de transaction.</param>
      <returns>
        <see cref="T:System.Transactions.Transaction" /> du cookie d'exportation spécifié.</returns>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken(System.Byte[])">
      <summary>Génère une instance de <see cref="T:System.Transactions.Transaction" /> à partir du jeton de propagation de l'émetteur spécifié.</summary>
      <param name="propagationToken">Jeton de propagation représentant une transaction.</param>
      <returns>
        <see cref="T:System.Transactions.Transaction" /> du jeton de propagation de l'émetteur spécifié.</returns>
      <exception cref="T:System.Transactions.TransactionManagerCommunicationException">La désérialisation d'une transaction échoue car le gestionnaire de transactions ne peut pas être contacté. Cela peut être dû à un pare-feu réseau ou aux paramètres de sécurité.</exception>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetTransmitterPropagationToken(System.Transactions.Transaction)">
      <summary>Génère un jeton de propagation pour le <see cref="T:System.Transactions.Transaction" /> spécifié.</summary>
      <param name="transaction">Transaction à marshaler dans un jeton de propagation.</param>
      <returns>Cette méthode, avec la méthode <see cref="M:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken(System.Byte[])" />, fournit les fonctionnalités pour la propagation Émetteur/Récepteur, selon laquelle la transaction est « extraite » de l'ordinateur distant en cas d'appel pour démarshaler la transaction.
Pour plus d’informations sur les différents modèles de propagation, consultez la classe <see cref="T:System.Transactions.TransactionInterop" />.</returns>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetWhereabouts">
      <summary>Obtient le lieu du gestionnaire de transactions distribué utilisé par <see cref="N:System.Transactions" />.</summary>
      <returns>Lieu du gestionnaire de transactions distribué utilisé par <see cref="N:System.Transactions" />.</returns>
    </member>
    <member name="F:System.Transactions.TransactionInterop.PromoterTypeDtc">
      <summary>Type du processeur de transaction distribuée.</summary>
    </member>
    <member name="T:System.Transactions.TransactionManager">
      <summary>Contient des méthodes utilisées pour la gestion des transactions. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="P:System.Transactions.TransactionManager.DefaultTimeout">
      <summary>Obtient l'intervalle de délai d'attente par défaut pour les nouvelles transactions.</summary>
      <returns>Valeur <see cref="T:System.TimeSpan" /> qui spécifie l'intervalle de délai d'attente pour les nouvelles transactions.</returns>
    </member>
    <member name="E:System.Transactions.TransactionManager.DistributedTransactionStarted">
      <summary>Indique qu'une transaction distribuée a démarré.</summary>
    </member>
    <member name="P:System.Transactions.TransactionManager.HostCurrentCallback">
      <summary>Obtient ou définit une fabrique de transactions personnalisée.</summary>
      <returns>
        <see cref="T:System.Transactions.HostCurrentTransactionCallback" /> qui contient une fabrique de transactions personnalisée.</returns>
    </member>
    <member name="P:System.Transactions.TransactionManager.MaximumTimeout">
      <summary>Obtient l'intervalle de délai d'attente maximum par défaut pour les nouvelles transactions.</summary>
      <returns>Valeur <see cref="T:System.TimeSpan" /> qui spécifie l'intervalle de délai d'attente maximal qui est autorisé lors de la création de nouvelles transactions.</returns>
    </member>
    <member name="M:System.Transactions.TransactionManager.RecoveryComplete(System.Guid)">
      <summary>Avertit le gestionnaire de transactions qu'un gestionnaire de ressources qui récupère d'une défaillance a fini de se réinscrire dans toutes les transactions non résolues.</summary>
      <param name="resourceManagerIdentifier">
        <see cref="T:System.Guid" /> qui identifie de manière unique la ressource à partir de laquelle effectuer la récupération.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="resourceManagerIdentifier" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Transactions.TransactionManager.Reenlist(System.Guid,System.Byte[],System.Transactions.IEnlistmentNotification)">
      <summary>Réinscrit un participant durable dans une transaction.</summary>
      <param name="resourceManagerIdentifier">
        <see cref="T:System.Guid" /> qui identifie de manière unique le gestionnaire de ressources.</param>
      <param name="recoveryInformation">Contient des informations supplémentaires sur les informations de récupération.</param>
      <param name="enlistmentNotification">Objet de ressource qui implémente <see cref="T:System.Transactions.IEnlistmentNotification" /> pour recevoir des notifications.</param>
      <returns>
        <see cref="T:System.Transactions.Enlistment" /> qui décrit l'inscription.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="recoveryInformation" /> n'est pas valide.

ou -
Les informations du gestionnaire de transactions dans <paramref name="recoveryInformation" /> ne correspondent pas au gestionnaire de transactions configuré.

ou -
<paramref name="RecoveryInformation" /> n'est pas reconnu par <see cref="N:System.Transactions" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Transactions.TransactionManager.RecoveryComplete(System.Guid)" /> a déjà été appelé pour le <paramref name="resourceManagerIdentifier" /> spécifié. La réinscription est rejetée.</exception>
      <exception cref="T:System.Transactions.TransactionException">
        <paramref name="resourceManagerIdentifier" /> ne correspond pas au contenu des informations de récupération spécifiées dans <paramref name="recoveryInformation" />.</exception>
    </member>
    <member name="T:System.Transactions.TransactionManagerCommunicationException">
      <summary>Exception levée lorsqu'un gestionnaire de ressources ne peut pas communiquer avec le gestionnaire de transactions.</summary>
    </member>
    <member name="M:System.Transactions.TransactionManagerCommunicationException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionManagerCommunicationException" />.</summary>
    </member>
    <member name="M:System.Transactions.TransactionManagerCommunicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionManagerCommunicationException" /> avec les informations de sérialisation et de contexte de diffusion en continu spécifiées.</summary>
      <param name="info">Objet <see cref="T:System.Runtime.Serialization.SerializationInfo" /> qui décrit une sérialisation non réussie.</param>
      <param name="context">Objet <see cref="T:System.Runtime.Serialization.SerializationInfo" /> qui décrit le contexte d'une sérialisation non réussie.</param>
    </member>
    <member name="M:System.Transactions.TransactionManagerCommunicationException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionManagerCommunicationException" /> avec le message spécifié.</summary>
      <param name="message">
        <see cref="T:System.String" /> qui contient un message expliquant pourquoi l'exception s'est produite.</param>
    </member>
    <member name="M:System.Transactions.TransactionManagerCommunicationException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionManagerCommunicationException" /> avec le message et l'exception interne spécifiés.</summary>
      <param name="message">
        <see cref="T:System.String" /> qui contient un message expliquant pourquoi l'exception s'est produite.</param>
      <param name="innerException">Obtient l'instance de l'exception qui a provoqué l'exception en cours. Pour plus d'informations, consultez la propriété <see cref="P:System.Exception.InnerException" />.</param>
    </member>
    <member name="T:System.Transactions.TransactionOptions">
      <summary>Contient des informations supplémentaires qui spécifient les comportements de transaction.</summary>
    </member>
    <member name="M:System.Transactions.TransactionOptions.Equals(System.Object)">
      <summary>Détermine si cette instance de <see cref="T:System.Transactions.TransactionOptions" /> et l'objet spécifié sont égaux.</summary>
      <param name="obj">Objet à comparer avec cette instance.</param>
      <returns>
        <see langword="true" /> si <paramref name="obj" /> et cette instance de <see cref="T:System.Transactions.TransactionOptions" /> sont identiques ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Transactions.TransactionOptions.GetHashCode">
      <summary>Retourne le code de hachage de cette instance.</summary>
      <returns>Code de hachage d'un entier signé 32 bits.</returns>
    </member>
    <member name="P:System.Transactions.TransactionOptions.IsolationLevel">
      <summary>Obtient ou définit le niveau d’isolation de la transaction.</summary>
      <returns>Énumération <see cref="T:System.Transactions.IsolationLevel" /> qui spécifie le niveau d'isolement de la transaction.</returns>
    </member>
    <member name="M:System.Transactions.TransactionOptions.op_Equality(System.Transactions.TransactionOptions,System.Transactions.TransactionOptions)">
      <summary>Teste si deux instances de <see cref="T:System.Transactions.TransactionOptions" /> spécifiées sont équivalentes.</summary>
      <param name="x">Instance de <see cref="T:System.Transactions.TransactionOptions" /> figurant à gauche de l'opérateur d'égalité.</param>
      <param name="y">Instance de <see cref="T:System.Transactions.TransactionOptions" /> figurant à droite de l'opérateur d'égalité.</param>
      <returns>
        <see langword="true" /> si <paramref name="x" /> et <paramref name="y" /> sont égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Transactions.TransactionOptions.op_Inequality(System.Transactions.TransactionOptions,System.Transactions.TransactionOptions)">
      <summary>Retourne une valeur qui indique si deux instances de <see cref="T:System.Transactions.TransactionOptions" /> ne sont pas égales.</summary>
      <param name="x">Instance de <see cref="T:System.Transactions.TransactionOptions" /> figurant à gauche de l'opérateur d'égalité.</param>
      <param name="y">Instance de <see cref="T:System.Transactions.TransactionOptions" /> figurant à droite de l'opérateur d'égalité.</param>
      <returns>
        <see langword="true" /> si <paramref name="x" /> et <paramref name="y" /> ne sont pas égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Transactions.TransactionOptions.Timeout">
      <summary>Obtient ou définit le délai d'attente pour la transaction.</summary>
      <returns>Valeur <see cref="T:System.TimeSpan" /> qui spécifie le délai d'attente pour la transaction.</returns>
    </member>
    <member name="T:System.Transactions.TransactionPromotionException">
      <summary>Exception levée lorsqu'une promotion échoue.</summary>
    </member>
    <member name="M:System.Transactions.TransactionPromotionException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionPromotionException" />.</summary>
    </member>
    <member name="M:System.Transactions.TransactionPromotionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionPromotionException" /> avec les informations de sérialisation et de contexte de diffusion en continu spécifiées.</summary>
      <param name="info">Objet <see cref="T:System.Runtime.Serialization.SerializationInfo" /> qui décrit une sérialisation non réussie.</param>
      <param name="context">Objet <see cref="T:System.Runtime.Serialization.SerializationInfo" /> qui décrit le contexte d'une sérialisation non réussie.</param>
    </member>
    <member name="M:System.Transactions.TransactionPromotionException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionPromotionException" /> avec le message spécifié.</summary>
      <param name="message">
        <see cref="T:System.String" /> qui contient un message expliquant pourquoi l'exception s'est produite.</param>
    </member>
    <member name="M:System.Transactions.TransactionPromotionException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionPromotionException" /> avec le message et l'exception interne spécifiés.</summary>
      <param name="message">
        <see cref="T:System.String" /> qui contient un message expliquant pourquoi l'exception s'est produite.</param>
      <param name="innerException">Obtient l'instance de l'exception qui a provoqué l'exception en cours. Pour plus d'informations, consultez la propriété <see cref="P:System.Exception.InnerException" />.</param>
    </member>
    <member name="T:System.Transactions.TransactionScope">
      <summary>Rend un bloc de code transactionnel. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionScope" />.</summary>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionScope" /> et définit la transaction spécifiée comme une transaction ambiante, afin que le travail transactionnel fait à l'intérieur de la portée utilise cette transaction.</summary>
      <param name="transactionToUse">Transaction à définir comme une transaction ambiante afin que le travail transactionnel fait à l'intérieur de la portée utilise cette transaction.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionScope" /> avec la valeur de délai d'attente spécifiée et définit la transaction spécifiée comme transaction ambiante afin que le travail transactionnel fait à l'intérieur de la portée utilise cette transaction.</summary>
      <param name="transactionToUse">Transaction à définir comme une transaction ambiante afin que le travail transactionnel fait à l'intérieur de la portée utilise cette transaction.</param>
      <param name="scopeTimeout">
        <see cref="T:System.TimeSpan" /> après lequel la portée de la transaction expire et la transaction est abandonnée.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.EnterpriseServicesInteropOption)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionScope" /> avec la valeur de délai d'attente et les critères d'interopérabilité COM+ spécifiés, et définit la transaction spécifiée comme une transaction ambiante afin que le travail transactionnel fait à l'intérieur de la portée utilise cette transaction.</summary>
      <param name="transactionToUse">Transaction à définir comme une transaction ambiante afin que le travail transactionnel fait à l'intérieur de la portée utilise cette transaction.</param>
      <param name="scopeTimeout">
        <see cref="T:System.TimeSpan" /> après lequel la portée de la transaction expire et la transaction est abandonnée.</param>
      <param name="interopOption">Instance de l'énumération <see cref="T:System.Transactions.EnterpriseServicesInteropOption" /> qui décrit comment la transaction associée interagit avec les transactions COM+.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)">
      <summary>[Pris en charge dans le .NET Framework 4.5.1 et versions ultérieures]
Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionScope" /> avec la valeur de délai d'attente spécifiée et définit la transaction spécifiée comme transaction ambiante afin que le travail transactionnel fait à l'intérieur de la portée utilise cette transaction.</summary>
      <param name="transactionToUse">Transaction à définir comme une transaction ambiante afin que le travail transactionnel fait à l'intérieur de la portée utilise cette transaction.</param>
      <param name="scopeTimeout">
        <see cref="T:System.TimeSpan" /> après lequel la portée de la transaction expire et la transaction est abandonnée.</param>
      <param name="asyncFlowOption">Instance de l'énumération <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /> décrivant si la transaction ambiante associée à la portée de transaction sera acheminée entre les continuations de thread lors de l'utilisation des modèles de programmation asynchrone du .NET Task ou async/await.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)">
      <summary>[Pris en charge dans le .NET Framework 4.5.1 et versions ultérieures]
Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionScope" /> et définit la transaction spécifiée comme une transaction ambiante, afin que le travail transactionnel fait à l'intérieur de la portée utilise cette transaction.</summary>
      <param name="transactionToUse">Transaction à définir comme une transaction ambiante afin que le travail transactionnel fait à l'intérieur de la portée utilise cette transaction.</param>
      <param name="asyncFlowOption">Instance de l'énumération <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /> décrivant si la transaction ambiante associée à la portée de transaction sera acheminée entre les continuations de thread lors de l'utilisation des modèles de programmation asynchrone du .NET Task ou async/await.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeAsyncFlowOption)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionScope" /> avec l'option de flux asynchrone spécifiée.</summary>
      <param name="asyncFlowOption">Instance de l'énumération <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /> décrivant si la transaction ambiante associée à la portée de transaction sera acheminée entre les continuations de thread lors de l'utilisation des modèles de programmation asynchrone du .NET Task ou async/await.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionScope" /> avec les critères spécifiés.</summary>
      <param name="scopeOption">Instance de l'énumération <see cref="T:System.Transactions.TransactionScopeOption" /> qui décrit les critères de transaction associés à cette portée de transaction.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionScope" /> avec les critères et la valeur de délai d'attente spécifiés.</summary>
      <param name="scopeOption">Instance de l'énumération <see cref="T:System.Transactions.TransactionScopeOption" /> qui décrit les critères de transaction associés à cette portée de transaction.</param>
      <param name="scopeTimeout">
        <see cref="T:System.TimeSpan" /> après lequel la portée de la transaction expire et la transaction est abandonnée.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionScope" /> avec le délai, les spécifications et l'option de flux asynchrone spécifiés.</summary>
      <param name="scopeOption">Instance de l'énumération <see cref="T:System.Transactions.TransactionScopeOption" /> qui décrit les critères de transaction associés à cette portée de transaction.</param>
      <param name="scopeTimeout">
        <see cref="T:System.TimeSpan" /> après lequel la portée de la transaction expire et la transaction est abandonnée.</param>
      <param name="asyncFlowOption">Instance de l'énumération <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /> décrivant si la transaction ambiante associée à la portée de transaction sera acheminée entre les continuations de thread lors de l'utilisation des modèles de programmation asynchrone du .NET Task ou async/await.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionScope" /> avec les critères spécifiés.</summary>
      <param name="scopeOption">Instance de l'énumération <see cref="T:System.Transactions.TransactionScopeOption" /> qui décrit les critères de transaction associés à cette portée de transaction.</param>
      <param name="transactionOptions">Structure <see cref="T:System.Transactions.TransactionOptions" /> qui décrit les options de transaction à utiliser si une nouvelle transaction est créée. Si une transaction existante est utilisée, la valeur du délai d'attente dans ce paramètre s'applique à la portée de transaction. Si ce délai expire avant que la portée ne soit supprimée, la transaction est abandonnée.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionScope" /> avec la portée, les critères d'interopérabilité COM+ et les options de transaction spécifiés.</summary>
      <param name="scopeOption">Instance de l'énumération <see cref="T:System.Transactions.TransactionScopeOption" /> qui décrit les critères de transaction associés à cette portée de transaction.</param>
      <param name="transactionOptions">Structure <see cref="T:System.Transactions.TransactionOptions" /> qui décrit les options de transaction à utiliser si une nouvelle transaction est créée. Si une transaction existante est utilisée, la valeur du délai d'attente dans ce paramètre s'applique à la portée de transaction. Si ce délai expire avant que la portée ne soit supprimée, la transaction est abandonnée.</param>
      <param name="interopOption">Instance de l'énumération <see cref="T:System.Transactions.EnterpriseServicesInteropOption" /> qui décrit comment la transaction associée interagit avec les transactions COM+.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)">
      <summary>[Pris en charge dans le .NET Framework 4.5.1 et versions ultérieures]
Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionScope" /> avec les spécifications et l'option de flux asynchrone spécifiées.</summary>
      <param name="scopeOption">Instance de l'énumération <see cref="T:System.Transactions.TransactionScopeOption" /> qui décrit les critères de transaction associés à cette portée de transaction.</param>
      <param name="transactionOptions">Structure <see cref="T:System.Transactions.TransactionOptions" /> qui décrit les options de transaction à utiliser si une nouvelle transaction est créée. Si une transaction existante est utilisée, la valeur du délai d'attente dans ce paramètre s'applique à la portée de transaction. Si ce délai expire avant que la portée ne soit supprimée, la transaction est abandonnée.</param>
      <param name="asyncFlowOption">Instance de l'énumération <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /> décrivant si la transaction ambiante associée à la portée de transaction sera acheminée entre les continuations de thread lors de l'utilisation des modèles de programmation asynchrone du .NET Task ou async/await.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionScopeAsyncFlowOption)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Transactions.TransactionScope" /> avec les spécifications et l'option de flux asynchrone spécifiées.</summary>
      <param name="scopeOption">Instance de l'énumération <see cref="T:System.Transactions.TransactionScopeOption" /> qui décrit les critères de transaction associés à cette portée de transaction.</param>
      <param name="asyncFlowOption">Instance de l'énumération <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /> décrivant si la transaction ambiante associée à la portée de transaction sera acheminée entre les continuations de thread lors de l'utilisation des modèles de programmation asynchrone du .NET Task ou async/await.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.Complete">
      <summary>Indique que toutes les opérations dans la portée sont terminées avec succès.</summary>
      <exception cref="T:System.InvalidOperationException">Cette méthode a déjà été appelée une fois.</exception>
    </member>
    <member name="M:System.Transactions.TransactionScope.Dispose">
      <summary>Termine la portée de transaction.</summary>
    </member>
    <member name="T:System.Transactions.TransactionScopeAsyncFlowOption">
      <summary>Spécifie si le flux de transaction entre les continuations de thread est activé pour <see cref="T:System.Transactions.TransactionScope" />.</summary>
    </member>
    <member name="F:System.Transactions.TransactionScopeAsyncFlowOption.Enabled">
      <summary>Spécifie que le flux de transaction entre les continuations de thread est activé.</summary>
    </member>
    <member name="F:System.Transactions.TransactionScopeAsyncFlowOption.Suppress">
      <summary>Spécifie que le flux de transaction entre les continuations de thread est supprimé. Il s’agit du paramètre par défaut si aucune <see langword="TransactionScopeAsyncFlowOption" /> n’est spécifiée dans le constructeur <see cref="Overload:System.Transactions.TransactionScope.#ctor" />.</summary>
    </member>
    <member name="T:System.Transactions.TransactionScopeOption">
      <summary>Fournit des options supplémentaires pour créer une portée de transaction.</summary>
    </member>
    <member name="F:System.Transactions.TransactionScopeOption.Required">
      <summary>Une transaction est requise par la portée. Elle utilise une transaction ambiante s'il en existe déjà une. Sinon, il crée une nouvelle transaction avant d'entrer dans la portée. Valeur par défaut.</summary>
    </member>
    <member name="F:System.Transactions.TransactionScopeOption.RequiresNew">
      <summary>Une nouvelle transaction est toujours créée pour la portée.</summary>
    </member>
    <member name="F:System.Transactions.TransactionScopeOption.Suppress">
      <summary>Le contexte de la transaction ambiante est supprimé lors de la création de la portée. Toutes les opérations dans la portée sont effectuées sans contexte de la transaction ambiante.</summary>
    </member>
    <member name="T:System.Transactions.TransactionStartedEventHandler">
      <summary>Représente la méthode destinée à gérer l’événement <see cref="E:System.Transactions.TransactionManager.DistributedTransactionStarted" /> d’une classe <see cref="T:System.Transactions.TransactionManager" />.</summary>
      <param name="sender">Source de l'événement.</param>
      <param name="e">
        <see cref="T:System.Transactions.TransactionEventArgs" /> qui contient la transaction à partir de laquelle les informations de transaction peuvent être récupérées.</param>
    </member>
    <member name="T:System.Transactions.TransactionStatus">
      <summary>Décrit l'état en cours d'une transaction distribuée.</summary>
    </member>
    <member name="F:System.Transactions.TransactionStatus.Aborted">
      <summary>La transaction a été restaurée.</summary>
    </member>
    <member name="F:System.Transactions.TransactionStatus.Active">
      <summary>L'état de la transaction est inconnu, parce que certains participants doivent encore être interrogés.</summary>
    </member>
    <member name="F:System.Transactions.TransactionStatus.Committed">
      <summary>La transaction a été validée.</summary>
    </member>
    <member name="F:System.Transactions.TransactionStatus.InDoubt">
      <summary>L'état de la transaction est inconnu.</summary>
    </member>
  </members>
</doc>
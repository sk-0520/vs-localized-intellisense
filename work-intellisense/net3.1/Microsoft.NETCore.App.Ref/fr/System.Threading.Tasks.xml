<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Threading.Tasks</name>
  </assembly>
  <members>
    <member name="T:System.OperationCanceledException">
      <summary>Exception levée dans un thread lors de l'annulation d'une opération que le thread exécutait.</summary>
    </member>
    <member name="M:System.OperationCanceledException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.OperationCanceledException" /> avec un message d'erreur système.</summary>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.OperationCanceledException" /> avec des données sérialisées.</summary>
      <param name="info">Objet qui contient les données sérialisées de l'objet.</param>
      <param name="context">Informations contextuelles sur la source ou la destination.</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.OperationCanceledException" /> avec un message d'erreur spécifié.</summary>
      <param name="message">
        <see cref="T:System.String" /> qui décrit l'erreur.</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.OperationCanceledException" /> avec un message d'erreur spécifié et une référence à l'exception interne ayant provoqué cette exception.</summary>
      <param name="message">Message d'erreur qui explique la raison de l'exception.</param>
      <param name="innerException">Exception ayant provoqué l'exception actuelle. Si le paramètre <paramref name="innerException" /> n'est pas <see langword="null" />, l'exception actuelle est levée dans un bloc <see langword="catch" /> qui gère l'exception interne.</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.String,System.Exception,System.Threading.CancellationToken)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.OperationCanceledException" /> avec un message d'erreur spécifié, une référence à l'exception interne qui est à l'origine de cette exception et un jeton d'annulation.</summary>
      <param name="message">Message d'erreur qui explique la raison de l'exception.</param>
      <param name="innerException">Exception ayant provoqué l'exception actuelle. Si le paramètre <paramref name="innerException" /> n'est pas <see langword="null" />, l'exception actuelle est levée dans un bloc <see langword="catch" /> qui gère l'exception interne.</param>
      <param name="token">Jeton d'annulation associé à l'opération annulée.</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.String,System.Threading.CancellationToken)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.OperationCanceledException" /> avec un message d'erreur spécifié et un jeton d'annulation.</summary>
      <param name="message">Message d'erreur qui explique la raison de l'exception.</param>
      <param name="token">Jeton d'annulation associé à l'opération annulée.</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.Threading.CancellationToken)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.OperationCanceledException" /> avec un jeton d'annulation.</summary>
      <param name="token">Jeton d'annulation associé à l'opération annulée.</param>
    </member>
    <member name="P:System.OperationCanceledException.CancellationToken">
      <summary>Obtient un jeton associé à l'opération annulée.</summary>
      <returns>Jeton associé à l'opération annulée ou jeton par défaut.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder">
      <summary>Représente un générateur pour les itérateurs asynchrones.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
      <summary>Planifie la machine à états pour qu’elle passe à l’action suivante quand l’élément awaiter spécifié se termine.</summary>
      <param name="awaiter">Élément awaiter.</param>
      <param name="stateMachine">Machine d’état.</param>
      <typeparam name="TAwaiter">Type de l’await.</typeparam>
      <typeparam name="TStateMachine">Type de l’ordinateur d’État.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
      <summary>Planifie la machine à états pour qu’elle passe à l’action suivante quand l’élément awaiter spécifié se termine.</summary>
      <param name="awaiter">Élément awaiter.</param>
      <param name="stateMachine">Machine d’état.</param>
      <typeparam name="TAwaiter">Type de l’await.</typeparam>
      <typeparam name="TStateMachine">Type de l’ordinateur d’État.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.Complete">
      <summary>Marque l’itération comme étant terminée, qu’elle ait ou non réussi.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.Create">
      <summary>Crée une instance du struct <see cref="T:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder" />.</summary>
      <returns>Instance initialisée.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.MoveNext``1(``0@)">
      <summary>Appelle <see cref="M:System.Runtime.CompilerServices.IAsyncStateMachine.MoveNext" /> sur la machine d’état tout en protégeant le <see cref="T:System.Threading.ExecutionContext" />.</summary>
      <param name="stateMachine">Instance de machine à états, passée par la référence.</param>
      <typeparam name="TStateMachine">Type de l’ordinateur d’État.</typeparam>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder">
      <summary>Représente un générateur pour les méthodes asynchrones qui retournent une tâche.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
      <summary>Planifie la machine à états pour qu’elle passe à l’action suivante quand l’élément awaiter spécifié se termine.</summary>
      <param name="awaiter">Élément awaiter.</param>
      <param name="stateMachine">Machine d’état.</param>
      <typeparam name="TAwaiter">Type de l’await.</typeparam>
      <typeparam name="TStateMachine">Type de l’ordinateur d’État.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
      <summary>Planifie la machine à états pour qu’elle passe à l’action suivante quand l’élément awaiter spécifié se termine. Cette méthode peut être appelée depuis du code d’un niveau de confiance partiel.</summary>
      <param name="awaiter">Élément awaiter.</param>
      <param name="stateMachine">Machine d’état.</param>
      <typeparam name="TAwaiter">Type de l’await.</typeparam>
      <typeparam name="TStateMachine">Type de l’ordinateur d’État.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Create">
      <summary>Crée une instance de la classe <see cref="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder" />.</summary>
      <returns>Nouvelle instance du générateur.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetException(System.Exception)">
      <summary>Marque la tâche comme ayant échoué et lie l’exception spécifiée à la tâche.</summary>
      <param name="exception">Exception à lier à la tâche.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">La tâche est déjà terminée.

ou -

Le générateur n’est pas initialisé.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult">
      <summary>Marque la tâche comme achevée.</summary>
      <exception cref="T:System.InvalidOperationException">La tâche est déjà terminée.

ou -

Le générateur n’est pas initialisé.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
      <summary>Associe le générateur à la machine à états spécifiée.</summary>
      <param name="stateMachine">Instance de machine à états à associer au concepteur.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">La machine à états a été définie précédemment.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start``1(``0@)">
      <summary>Commence l’exécution du générateur avec la machine à états associée.</summary>
      <param name="stateMachine">Instance de machine à états, passée par la référence.</param>
      <typeparam name="TStateMachine">Type de l’ordinateur d’État.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Task">
      <summary>Obtient la tâche pour ce générateur.</summary>
      <returns>Tâche pour ce générateur.</returns>
      <exception cref="T:System.InvalidOperationException">Le générateur n’est pas initialisé.</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1">
      <summary>Représente un concepteur pour les méthodes asynchrones qui retourne une tâche et fournit un paramètre pour le résultat.</summary>
      <typeparam name="TResult">Résultat à utiliser pour effectuer la tâche.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AwaitOnCompleted``2(``0@,``1@)">
      <summary>Planifie la machine à états pour qu’elle passe à l’action suivante quand l’élément awaiter spécifié se termine.</summary>
      <param name="awaiter">Élément awaiter.</param>
      <param name="stateMachine">Machine d’état.</param>
      <typeparam name="TAwaiter">Type d'awaiter.</typeparam>
      <typeparam name="TStateMachine">Type de la machine à états.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AwaitUnsafeOnCompleted``2(``0@,``1@)">
      <summary>Planifie la machine à états pour qu’elle passe à l’action suivante quand l’élément awaiter spécifié se termine. Cette méthode peut être appelée depuis du code d’un niveau de confiance partiel.</summary>
      <param name="awaiter">Élément awaiter.</param>
      <param name="stateMachine">Machine d’état.</param>
      <typeparam name="TAwaiter">Type d'awaiter.</typeparam>
      <typeparam name="TStateMachine">Type de la machine à états.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Create">
      <summary>Crée une instance de la classe <see cref="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1" />.</summary>
      <returns>Nouvelle instance du générateur.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetException(System.Exception)">
      <summary>Marque la tâche comme ayant échoué et lie l’exception spécifiée à la tâche.</summary>
      <param name="exception">Exception à lier à la tâche.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> est <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">La tâche est déjà terminée.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetResult(`0)">
      <summary>Marque la tâche comme achevée.</summary>
      <param name="result">Résultat à utiliser pour effectuer la tâche.</param>
      <exception cref="T:System.InvalidOperationException">La tâche est déjà terminée.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
      <summary>Associe le générateur à la machine à états spécifiée.</summary>
      <param name="stateMachine">Instance de machine à états à associer au concepteur.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" /> est <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">La machine à états a été définie précédemment.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start``1(``0@)">
      <summary>Commence l’exécution du générateur avec la machine à états associée.</summary>
      <param name="stateMachine">Instance de machine à états, passée par la référence.</param>
      <typeparam name="TStateMachine">Type de la machine à états.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" /> est <see langword="null" />.</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Task">
      <summary>Obtient la tâche pour ce générateur.</summary>
      <returns>Tâche pour ce générateur.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncVoidMethodBuilder">
      <summary>Représente un générateur pour les méthodes asynchrones qui ne retournent pas de valeur.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
      <summary>Planifie la machine à états pour qu’elle passe à l’action suivante quand l’élément awaiter spécifié se termine.</summary>
      <param name="awaiter">Élément awaiter.</param>
      <param name="stateMachine">Machine d’état.</param>
      <typeparam name="TAwaiter">Type d'awaiter.</typeparam>
      <typeparam name="TStateMachine">Type de la machine à états.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
      <summary>Planifie la machine à états pour qu’elle passe à l’action suivante quand l’élément awaiter spécifié se termine. Cette méthode peut être appelée depuis du code d’un niveau de confiance partiel.</summary>
      <param name="awaiter">Élément awaiter.</param>
      <param name="stateMachine">Machine d’état.</param>
      <typeparam name="TAwaiter">Type d'awaiter.</typeparam>
      <typeparam name="TStateMachine">Type de la machine à états.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.Create">
      <summary>Crée une instance de la classe <see cref="T:System.Runtime.CompilerServices.AsyncVoidMethodBuilder" />.</summary>
      <returns>Nouvelle instance du générateur.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetException(System.Exception)">
      <summary>Lie une exception au générateur de méthode.</summary>
      <param name="exception">Exception à lier.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Le générateur n’est pas initialisé.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetResult">
      <summary>Marque le générateur de méthode comme exécuté avec succès.</summary>
      <exception cref="T:System.InvalidOperationException">Le générateur n’est pas initialisé.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
      <summary>Associe le générateur à la machine à états spécifiée.</summary>
      <param name="stateMachine">Instance de machine à états à associer au concepteur.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">La machine à états a été définie précédemment.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.Start``1(``0@)">
      <summary>Commence l’exécution du générateur avec la machine à états associée.</summary>
      <param name="stateMachine">Instance de machine à états, passée par la référence.</param>
      <typeparam name="TStateMachine">Type de la machine à états.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredAsyncDisposable">
      <summary>Fournit un type qui peut être utilisé pour configurer la façon dont les attentes sur un <see cref="T:System.IAsyncDisposable" /> sont effectuées.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredAsyncDisposable.DisposeAsync">
      <summary>Libère de façon asynchrone les ressources non managées utilisées par <see cref="T:System.Runtime.CompilerServices.ConfiguredAsyncDisposable" />.</summary>
      <returns>Tâche qui représente l’opération de suppression asynchrone.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1">
      <summary>Fournit un énumérable asynchrone pouvant être attendu qui permet l’itération annulable et les attentes configurées.</summary>
      <typeparam name="T">Type de valeurs à énumérer.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.ConfigureAwait(System.Boolean)">
      <summary>Configure la façon dont les attentes sur les tâches retournées à partir d’une itération asynchrone seront effectuées.</summary>
      <param name="continueOnCapturedContext">
        <see langword="true" /> pour capturer et marshaler en retour vers le contexte actuel ; sinon, <see langword="false" />.</param>
      <returns>Énumérable configuré.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.Enumerator">
      <summary>Fournit un énumérateur asynchrone pouvant être attendu qui permet l’itération annulable et les attentes configurées.</summary>
      <typeparam name="T">Type de valeurs à énumérer.</typeparam>
    </member>
    <member name="P:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.Enumerator.Current">
      <summary>Obtient l’élément de la collection situé à la position actuelle de l’énumérateur.</summary>
      <returns>Élément dans la collection à la position actuelle de l'énumérateur.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.Enumerator.DisposeAsync">
      <summary>Exécute les tâches définies par l'application associées à la libération ou à la redéfinition asynchrone des ressources non managées.</summary>
      <returns>Tâche qui représente l’opération de suppression asynchrone.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.Enumerator.MoveNextAsync">
      <summary>Avance de façon asynchrone l’énumérateur à l’élément suivant de la collection.</summary>
      <returns>
        <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1" /> qui se termine avec un résultat <see langword="true" /> si l’énumérateur a pu avancer jusqu’à l’élément suivant, ou <see langword="false" /> si l’énumérateur a dépassé la fin de la collection.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.GetAsyncEnumerator">
      <summary>Retourne un énumérateur qui itère de manière asynchrone à travers les collections et qui permet l’itération annulable et les awaits configurés.</summary>
      <returns>Énumérateur pour la classe <see cref="T:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.WithCancellation(System.Threading.CancellationToken)">
      <summary>Définit le <see cref="T:System.Threading.CancellationToken" /> à passer à <see cref="M:System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)" /> lors de l’itération.</summary>
      <param name="cancellationToken">Jeton d’annulation à utiliser.</param>
      <returns>Énumérable configuré.</returns>
    </member>
    <member name="T:System.Threading.CancellationTokenSource">
      <summary>Signale à un <see cref="T:System.Threading.CancellationToken" /> qu'il doit être annulé.</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Threading.CancellationTokenSource" />.</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.#ctor(System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Threading.CancellationTokenSource" /> qui sera annulée après que le délai spécifié en millisecondes.</summary>
      <param name="millisecondsDelay">Intervalle de temps d’attente en millisecondes avant d’annuler cet élément <see cref="T:System.Threading.CancellationTokenSource" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsDelay" /> est inférieur à -1.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Threading.CancellationTokenSource" /> qui sera annulée après l'intervalle de temps spécifié.</summary>
      <param name="delay">Intervalle de temps d’attente avant d’annuler cet élément <see cref="T:System.Threading.CancellationTokenSource" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="delay" />.<see cref="P:System.TimeSpan.TotalMilliseconds" /> est inférieur à -1 ou supérieur à <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Cancel">
      <summary>Transmet une demande d'annulation.</summary>
      <exception cref="T:System.ObjectDisposedException">Ce <see cref="T:System.Threading.CancellationTokenSource" /> a été supprimé.</exception>
      <exception cref="T:System.AggregateException">Exception globale qui contient toutes les exceptions levées par les rappels inscrits sur le <see cref="T:System.Threading.CancellationToken" /> associé.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
      <summary>Communique une demande d’annulation, et spécifie si les rappels restants et les opérations annulables doivent être traités si une exception se produit.</summary>
      <param name="throwOnFirstException">
        <see langword="true" /> si les exceptions doivent se propager immédiatement ; sinon, <see langword="false" />.</param>
      <exception cref="T:System.ObjectDisposedException">Ce <see cref="T:System.Threading.CancellationTokenSource" /> a été supprimé.</exception>
      <exception cref="T:System.AggregateException">Exception globale qui contient toutes les exceptions levées par les rappels inscrits sur le <see cref="T:System.Threading.CancellationToken" /> associé.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.CancelAfter(System.Int32)">
      <summary>Planifie une opération d'annulation dans ce <see cref="T:System.Threading.CancellationTokenSource" /> après le nombre spécifié de millisecondes.</summary>
      <param name="millisecondsDelay">Intervalle de temps à patienter avant d'annuler cette <see cref="T:System.Threading.CancellationTokenSource" />.</param>
      <exception cref="T:System.ObjectDisposedException">Exception levée lorsque ce <see cref="T:System.Threading.CancellationTokenSource" /> a été supprimé.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Exception levée lorsque <paramref name="millisecondsDelay" /> est inférieur à -1.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)">
      <summary>Planifie une opération d'annulation dans ce <see cref="T:System.Threading.CancellationTokenSource" /> après l'intervalle de temps spécifié.</summary>
      <param name="delay">Intervalle de temps à patienter avant d'annuler cette <see cref="T:System.Threading.CancellationTokenSource" />.</param>
      <exception cref="T:System.ObjectDisposedException">Exception levée lorsque ce <see cref="T:System.Threading.CancellationTokenSource" /> a été supprimé.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Exception levée lorsque <paramref name="delay" /> est inférieur à -1 ou supérieur à Int32.MaxValue.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)">
      <summary>Crée une <see cref="T:System.Threading.CancellationTokenSource" /> qui est à l'état annulé quand l'un des jetons source est à l'état annulé.</summary>
      <param name="token1">Le premier jeton d'annulation à observer.</param>
      <param name="token2">Le second jeton d'annulation à observer.</param>
      <returns>
        <see cref="T:System.Threading.CancellationTokenSource" /> qui est lié aux jetons sources.</returns>
      <exception cref="T:System.ObjectDisposedException">Un <see cref="T:System.Threading.CancellationTokenSource" /> associé avec l'un des jetons sources a été supprimé.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])">
      <summary>Crée une <see cref="T:System.Threading.CancellationTokenSource" /> qui sera à l'état annulé lorsque l'un des jetons source du tableau spécifié est à l'état annulé.</summary>
      <param name="tokens">Un tableau qui contient les instances de jeton d'annulation à observer.</param>
      <returns>
        <see cref="T:System.Threading.CancellationTokenSource" /> qui est lié aux jetons sources.</returns>
      <exception cref="T:System.ObjectDisposedException">Un <see cref="T:System.Threading.CancellationTokenSource" /> associé avec l'un des jetons sources a été supprimé.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokens" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tokens" /> est vide.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Dispose">
      <summary>Libère toutes les ressources utilisées par l'instance actuelle de la classe <see cref="T:System.Threading.CancellationTokenSource" />.</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Dispose(System.Boolean)">
      <summary>Libère les ressources non managées utilisées par la classe <see cref="T:System.Threading.CancellationTokenSource" /> et libère éventuellement les ressources managées.</summary>
      <param name="disposing">
        <see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour libérer uniquement les ressources non managées.</param>
    </member>
    <member name="P:System.Threading.CancellationTokenSource.IsCancellationRequested">
      <summary>Détermine si l'annulation a été demandée pour cette <see cref="T:System.Threading.CancellationTokenSource" />.</summary>
      <returns>
        <see langword="true" />Si l’annulation a été demandée pour <see cref="T:System.Threading.CancellationTokenSource" />ce ; sinon <see langword="false" />,.</returns>
    </member>
    <member name="P:System.Threading.CancellationTokenSource.Token">
      <summary>Obtient l'<see cref="T:System.Threading.CancellationToken" /> associée à cette <see cref="T:System.Threading.CancellationTokenSource" />.</summary>
      <returns>
        <see cref="T:System.Threading.CancellationToken" /> associé à ce <see cref="T:System.Threading.CancellationTokenSource" />.</returns>
      <exception cref="T:System.ObjectDisposedException">La source de jeton a été supprimée.</exception>
    </member>
    <member name="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair">
      <summary>Fournit les planificateurs de tâches qui se coordonnent pour exécuter les tâches tout en garantissant que les tâches simultanées peuvent s'exécuter simultanément et que les tâches exclusives ne s'exécutent jamais simultanément.</summary>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor(System.Threading.Tasks.TaskScheduler)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" /> qui cible le planificateur spécifié.</summary>
      <param name="taskScheduler">Planificateur cible sur lequel cette paire doit s'exécuter.</param>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor(System.Threading.Tasks.TaskScheduler,System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" /> qui cible le planificateur spécifié avec un niveau de concurrence maximal.</summary>
      <param name="taskScheduler">Planificateur cible sur lequel cette paire doit s'exécuter.</param>
      <param name="maxConcurrencyLevel">Nombre maximal de tâches à exécuter simultanément.</param>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor(System.Threading.Tasks.TaskScheduler,System.Int32,System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" /> qui cible le planificateur spécifié avec un niveau de concurrence maximal et un nombre maximal de tâches planifiées qui peuvent être traités en tant qu'unité.</summary>
      <param name="taskScheduler">Planificateur cible sur lequel cette paire doit s'exécuter.</param>
      <param name="maxConcurrencyLevel">Nombre maximal de tâches à exécuter simultanément.</param>
      <param name="maxItemsPerTask">Nombre maximal de tâches à traiter pour chaque tâche planifiée sous-jacente utilisée par la paire.</param>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.Complete">
      <summary>Informe la paire de planificateur qu'elle ne doit plus accepter de tâches.</summary>
    </member>
    <member name="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.Completion">
      <summary>Obtient une <see cref="T:System.Threading.Tasks.Task" /> qui ne se termine lorsque le planificateur est achevé.</summary>
      <returns>Opération asynchrone qui se termine lorsque le planificateur termine le traitement.</returns>
    </member>
    <member name="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ConcurrentScheduler">
      <summary>Obtient un <see cref="T:System.Threading.Tasks.TaskScheduler" /> qui peut être utilisé pour planifier des tâches à cette paire qui peut s'exécuter simultanément avec d'autres tâches sur cette paire.</summary>
      <returns>Objet qui peut être utilisé pour planifier des tâches simultanément.</returns>
    </member>
    <member name="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ExclusiveScheduler">
      <summary>Obtient un <see cref="T:System.Threading.Tasks.TaskScheduler" /> qui peut être utilisé pour planifier des tâches à cette paire qui doit s'exécuter de manière exclusive par rapport à d'autres tâches sur cette paire.</summary>
      <returns>Objet qui peut être utilisé pour planifier les tâches qui ne sont pas exécutés simultanément avec d'autres tâches.</returns>
    </member>
    <member name="T:System.Threading.Tasks.TaskAsyncEnumerableExtensions">
      <summary>Fournit un ensemble de méthodes statiques pour configurer les comportements liés à une tâche sur des éléments énumérables ou supprimables asynchrones.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskAsyncEnumerableExtensions.ConfigureAwait(System.IAsyncDisposable,System.Boolean)">
      <summary>Configure la façon dont les attentes sur les tâches retournées à partir d’un élément supprimable asynchrone sont effectuées.</summary>
      <param name="source">Élément supprimable asynchrone source.</param>
      <param name="continueOnCapturedContext">
        <see langword="true" /> pour capturer et marshaler en retour vers le contexte actuel ; sinon, <see langword="false" />.</param>
      <returns>Élément supprimable asynchrone configuré.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskAsyncEnumerableExtensions.ConfigureAwait``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Boolean)">
      <summary>Configure la façon dont les attentes sur les tâches retournées à partir d’une itération asynchrone sont effectuées.</summary>
      <param name="source">Énumérable source sur lequel boucler.</param>
      <param name="continueOnCapturedContext">
        <see langword="true" /> pour capturer et marshaler en retour vers le contexte actuel ; sinon, <see langword="false" />.</param>
      <typeparam name="T">Type des objets à itérer.</typeparam>
      <returns>Énumérable configuré.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskAsyncEnumerableExtensions.WithCancellation``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)">
      <summary>Définit le <see cref="T:System.Threading.CancellationToken" /> à passer à <see cref="M:System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)" /> lors de l’itération.</summary>
      <param name="source">Énumérable source sur lequel boucler.</param>
      <param name="cancellationToken">Jeton d’annulation à utiliser.</param>
      <typeparam name="T">Type des objets à itérer.</typeparam>
      <returns>Énumérable configuré.</returns>
    </member>
    <member name="T:System.Threading.Tasks.TaskCanceledException">
      <summary>Représente une exception utilisée pour communiquer l'annulation d'une tâche.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Threading.Tasks.TaskCanceledException" /> avec un message système qui décrit l'erreur.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Threading.Tasks.TaskCanceledException" /> avec des données sérialisées.</summary>
      <param name="info">Objet qui contient les données sérialisées de l'objet.</param>
      <param name="context">Informations contextuelles sur la source ou la destination.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Threading.Tasks.TaskCanceledException" /> avec un message spécifié décrivant l'erreur.</summary>
      <param name="message">Message décrivant l'exception. L'appelant de ce constructeur doit vérifier que cette chaîne a été localisée pour la culture en cours du système.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Threading.Tasks.TaskCanceledException" /> avec un message d'erreur spécifié et une référence à l'exception interne ayant provoqué cette exception.</summary>
      <param name="message">Message décrivant l'exception. L'appelant de ce constructeur doit vérifier que cette chaîne a été localisée pour la culture en cours du système.</param>
      <param name="innerException">Exception ayant provoqué l'exception actuelle. Si le paramètre <paramref name="innerException" /> n'est pas <see langword="null" />, l'exception actuelle est levée dans un bloc <see langword="catch" /> qui gère l'exception interne.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.String,System.Exception,System.Threading.CancellationToken)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Threading.Tasks.TaskCanceledException" /> avec un message d’erreur spécifié, une référence à l’exception interne qui est à l’origine de cette exception et le <see cref="T:System.Threading.CancellationToken" /> qui a déclenché l’annulation.</summary>
      <param name="message">Message d'erreur qui explique la raison de l'exception.</param>
      <param name="innerException">Exception ayant provoqué l'exception actuelle.</param>
      <param name="token">Jeton d’annulation qui a déclenché l’annulation.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.Threading.Tasks.Task)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Threading.Tasks.TaskCanceledException" /> avec une référence à la <see cref="T:System.Threading.Tasks.Task" /> qui a été annulée.</summary>
      <param name="task">Tâche qui a été annulée.</param>
    </member>
    <member name="P:System.Threading.Tasks.TaskCanceledException.Task">
      <summary>Obtient la tâche associée à cette exception.</summary>
      <returns>Référence à la <see cref="T:System.Threading.Tasks.Task" /> associée à cette exception.</returns>
    </member>
    <member name="T:System.Threading.Tasks.TaskCompletionSource`1">
      <summary>Représente le côté producteur d'un <see cref="T:System.Threading.Tasks.Task`1" /> indépendant d'un délégué, en fournissant l'accès au côté consommateur via la propriété <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" />.</summary>
      <typeparam name="TResult">Type de la valeur de résultat associée à ce <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor">
      <summary>Crée un <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Object)">
      <summary>Crée un <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> avec l'état spécifié.</summary>
      <param name="state">État à utiliser comme AsyncState du <see cref="T:System.Threading.Tasks.Task`1" /> sous-jacent.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Crée un <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> avec l'état et les options spécifiés.</summary>
      <param name="state">État à utiliser comme AsyncState du <see cref="T:System.Threading.Tasks.Task`1" /> sous-jacent.</param>
      <param name="creationOptions">Options à utiliser lors de la création du <see cref="T:System.Threading.Tasks.Task`1" /> sous-jacent.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Les <paramref name="creationOptions" /> représentent des options non valides pour une utilisation avec un <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Threading.Tasks.TaskCreationOptions)">
      <summary>Crée un <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> avec les options spécifiées.</summary>
      <param name="creationOptions">Options à utiliser lors de la création du <see cref="T:System.Threading.Tasks.Task`1" /> sous-jacent.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Les <paramref name="creationOptions" /> représentent des options non valides pour une utilisation avec un <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetCanceled">
      <summary>Fait passer le <see cref="T:System.Threading.Tasks.Task`1" /> sous-jacent à l'état <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</summary>
      <exception cref="T:System.InvalidOperationException">Le <see cref="T:System.Threading.Tasks.Task`1" /> sous-jacent est déjà dans l'un des trois états définitifs : <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> ou <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />, ou si le <see cref="T:System.Threading.Tasks.Task`1" /> sous-jacent a déjà été supprimé.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> a été supprimé.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Collections.Generic.IEnumerable{System.Exception})">
      <summary>Transfère le <see cref="T:System.Threading.Tasks.Task`1" /> sous-jacent en état <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> et lui associe une collection d’objets d’exception.</summary>
      <param name="exceptions">Collection d'exceptions à lier à ce <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> a été supprimé.</exception>
      <exception cref="T:System.ArgumentNullException">L'argument <paramref name="exceptions" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Il existe un ou plusieurs éléments null dans <paramref name="exceptions" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Threading.Tasks.Task`1" /> sous-jacent est déjà dans l’un des trois états finaux : <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> ou <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Exception)">
      <summary>Transfère le <see cref="T:System.Threading.Tasks.Task`1" /> sous-jacent en état <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> et le lie à une exception spécifiée.</summary>
      <param name="exception">Exception à lier à ce <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> a été supprimé.</exception>
      <exception cref="T:System.ArgumentNullException">L'argument <paramref name="exception" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Threading.Tasks.Task`1" /> sous-jacent est déjà dans l’un des trois états finaux : <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> ou <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetResult(`0)">
      <summary>Fait passer le <see cref="T:System.Threading.Tasks.Task`1" /> sous-jacent à l'état <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />.</summary>
      <param name="result">Valeur de résultat à lier à ce <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> a été supprimé.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Threading.Tasks.Task`1" /> sous-jacent est déjà dans l’un des trois états finaux : <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> ou <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskCompletionSource`1.Task">
      <summary>Obtient le <see cref="T:System.Threading.Tasks.Task`1" /> créé par ce <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</summary>
      <returns>Renvoie le <see cref="T:System.Threading.Tasks.Task`1" /> créé par ce <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled">
      <summary>Tente de faire passer le <see cref="T:System.Threading.Tasks.Task`1" /> sous-jacent à l'état <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</summary>
      <returns>
        <see langword="true" /> si l’opération a réussi ; false en cas d’échec de l’opération, ou si l’objet a déjà été supprimé.</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> a été supprimé.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled(System.Threading.CancellationToken)">
      <summary>Tente de faire passer le <see cref="T:System.Threading.Tasks.Task`1" /> sous-jacent à l'état <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /> et permet le stockage d'un jeton d'annulation dans la tâche annulée.</summary>
      <param name="cancellationToken">Jeton d'annulation.</param>
      <returns>
        <see langword="true" /> si l'opération réussit ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Collections.Generic.IEnumerable{System.Exception})">
      <summary>Tente de faire passer le <see cref="T:System.Threading.Tasks.Task`1" /> sous-jacent en état <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> et lui associe une collection d’objets d’exception.</summary>
      <param name="exceptions">Collection d'exceptions à lier à ce <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <returns>
        <see langword="true" /> si l'opération a réussi ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> a été supprimé.</exception>
      <exception cref="T:System.ArgumentNullException">L'argument <paramref name="exceptions" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Il existe un ou plusieurs éléments null dans <paramref name="exceptions" />.

ou -
La collection <paramref name="exceptions" /> est vide.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Exception)">
      <summary>Tente de faire passer le <see cref="T:System.Threading.Tasks.Task`1" /> sous-jacent en état <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> et le lie à une exception spécifiée.</summary>
      <param name="exception">Exception à lier à ce <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <returns>
        <see langword="true" /> si l'opération a réussi ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> a été supprimé.</exception>
      <exception cref="T:System.ArgumentNullException">L'argument <paramref name="exception" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetResult(`0)">
      <summary>Tente de faire passer le <see cref="T:System.Threading.Tasks.Task`1" /> sous-jacent à l'état <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />.</summary>
      <param name="result">Valeur de résultat à lier à ce <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <returns>
        <see langword="true" /> si l'opération a réussi ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> a été supprimé.</exception>
    </member>
    <member name="T:System.Threading.Tasks.TaskExtensions">
      <summary>Fournit un ensemble de méthodes statiques (méthodes partagées en Visual Basic) pour l'utilisation de types spécifiques d'instances de <see cref="T:System.Threading.Tasks.Task" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})">
      <summary>Crée un proxy <see cref="T:System.Threading.Tasks.Task" /> qui représente l'opération asynchrone d'une <see cref="M:System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)" />.</summary>
      <param name="task">Le <see langword="Task&lt;Task&gt;" /> (C#) ou <see langword="Task (Of Task)" /> (Visual Basic) à défaire.</param>
      <returns>Tâche qui représente l'opération asynchrone de la <see langword="System.Threading.Tasks.Task(Of Task)" /> fournie.</returns>
      <exception cref="T:System.ArgumentNullException">L'exception levée si l'argument <paramref name="task" /> est null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})">
      <summary>Crée un proxy <see cref="T:System.Threading.Tasks.Task" /> qui représente l'opération asynchrone d'un <see langword="Task&lt;Task&lt;T&gt;&gt;" /> (en C#) ou <see langword="Task (Of Task(Of T))" /> (en Visual Basic).</summary>
      <param name="task">Le <see langword="Task&lt;Task&lt;T&gt;&gt;" /> (C#) ou <see langword="Task (Of Task(Of T))" /> (Visual Basic) à défaire.</param>
      <typeparam name="TResult">Type du résultat de la tâche.</typeparam>
      <returns>Un <see cref="T:System.Threading.Tasks.Task" /> qui représente l'opération asynchrone du <see langword="Task&lt;Task&lt;T&gt;&gt;" /> fourni (C#) ou <see langword="Task (Of Task(Of T))" /> (Visual Basic).</returns>
      <exception cref="T:System.ArgumentNullException">L'exception levée si l'argument <paramref name="task" /> est null.</exception>
    </member>
    <member name="T:System.Threading.Tasks.TaskSchedulerException">
      <summary>Représente une exception utilisée pour communiquer une opération non valide par un <see cref="T:System.Threading.Tasks.TaskScheduler" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Threading.Tasks.TaskSchedulerException" /> avec un message système qui décrit l'erreur.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Threading.Tasks.TaskSchedulerException" /> à l'aide du message d'erreur par défaut et d'une référence à l'exception interne ayant provoqué cette exception.</summary>
      <param name="innerException">Exception ayant provoqué l'exception actuelle.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Threading.Tasks.TaskSchedulerException" /> avec des données sérialisées.</summary>
      <param name="info">Objet qui contient les données sérialisées de l'objet.</param>
      <param name="context">Informations contextuelles sur la source ou la destination.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Threading.Tasks.TaskSchedulerException" /> avec un message spécifié décrivant l'erreur.</summary>
      <param name="message">Message décrivant l'exception. L'appelant de ce constructeur doit vérifier que cette chaîne a été localisée pour la culture en cours du système.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Threading.Tasks.TaskSchedulerException" /> avec un message d'erreur spécifié et une référence à l'exception interne ayant provoqué cette exception.</summary>
      <param name="message">Message décrivant l'exception. L'appelant de ce constructeur doit vérifier que cette chaîne a été localisée pour la culture en cours du système.</param>
      <param name="innerException">Exception ayant provoqué l'exception actuelle. Si le paramètre <paramref name="innerException" /> n'est pas <see langword="null" />, l'exception actuelle est levée dans un bloc <see langword="catch" /> qui gère l'exception interne.</param>
    </member>
  </members>
</doc>
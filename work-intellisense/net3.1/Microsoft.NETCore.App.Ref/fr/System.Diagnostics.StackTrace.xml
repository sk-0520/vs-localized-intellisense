<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Diagnostics.StackTrace</name>
  </assembly>
  <members>
    <member name="T:System.Diagnostics.StackFrame">
      <summary vsli:raw="Provides information about a &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt;, which represents a function call on the call stack for the current thread.">Fournit des informations sur un <see cref="T:System.Diagnostics.StackFrame" />, qui représente un appel de fonction sur la pile des appels du thread en cours.</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.StackFrame" />.</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; class, optionally capturing source information.">Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.StackFrame" /> en capturant éventuellement les informations sur la source.</summary>
      <param name="fNeedFileInfo">
        <see langword="true" /> pour capturer le nom de fichier, le numéro de ligne et le numéro de frame de pile ; sinon <see langword="false" />.</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; class that corresponds to a frame above the current stack frame.">Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.StackFrame" /> qui correspond au frame situé au-dessus du frame de pile en cours.</summary>
      <param name="skipFrames" vsli:raw="The number of frames up the stack to skip.">Nombre de frames au sommet de la pile à ignorer.</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Int32,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; class that corresponds to a frame above the current stack frame, optionally capturing source information.">Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.StackFrame" /> qui correspond à un frame situé au-dessus du frame de pile en cours, en capturant éventuellement les informations sur la source.</summary>
      <param name="skipFrames" vsli:raw="The number of frames up the stack to skip.">Nombre de frames au sommet de la pile à ignorer.</param>
      <param name="fNeedFileInfo">
        <see langword="true" /> pour capturer le nom de fichier, le numéro de ligne et le numéro de frame de pile ; sinon <see langword="false" />.</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.String,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; class that contains only the given file name and line number.">Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.StackFrame" /> qui ne contient que le nom de fichier et le numéro de ligne donnés.</summary>
      <param name="fileName" vsli:raw="The file name.">Nom du fichier.</param>
      <param name="lineNumber" vsli:raw="The line number in the specified file.">Numéro de la ligne dans le fichier spécifié.</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.String,System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; class that contains only the given file name, line number, and column number.">Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.StackFrame" /> qui ne contient que le nom de fichier, le numéro de ligne et le numéro de colonne donnés.</summary>
      <param name="fileName" vsli:raw="The file name.">Nom du fichier.</param>
      <param name="lineNumber" vsli:raw="The line number in the specified file.">Numéro de la ligne dans le fichier spécifié.</param>
      <param name="colNumber" vsli:raw="The column number in the specified file.">Numéro de la colonne dans le fichier spécifié.</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileColumnNumber">
      <summary vsli:raw="Gets the column number in the file that contains the code that is executing. This information is typically extracted from the debugging symbols for the executable.">Obtient le numéro de la colonne dans le fichier qui contient le code en cours d'exécution. Cette information est généralement extraite des symboles de débogage de l'exécutable.</summary>
      <returns vsli:raw="The file column number, or 0 (zero) if the file column number cannot be determined.">Numéro de colonne du fichier, ou 0 (zéro) si le numéro de la colonne dans le fichier ne peut pas être déterminé.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileLineNumber">
      <summary vsli:raw="Gets the line number in the file that contains the code that is executing. This information is typically extracted from the debugging symbols for the executable.">Obtient le numéro de la ligne dans le fichier qui contient le code en cours d'exécution. Cette information est généralement extraite des symboles de débogage de l'exécutable.</summary>
      <returns vsli:raw="The file line number, or 0 (zero) if the file line number cannot be determined.">Numéro de ligne du fichier, ou 0 (zéro) si le numéro de la ligne dans le fichier ne peut pas être déterminé.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileName">
      <summary vsli:raw="Gets the file name that contains the code that is executing. This information is typically extracted from the debugging symbols for the executable.">Obtient le nom du fichier qui contient le code en cours d'exécution. Cette information est généralement extraite des symboles de débogage de l'exécutable.</summary>
      <returns vsli:raw="The file name, or &lt;see langword=&quot;null&quot; /&gt; if the file name cannot be determined.">Nom du fichier, ou <see langword="null" /> si le nom du fichier ne peut être déterminé.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetILOffset">
      <summary vsli:raw="Gets the offset from the start of the Microsoft intermediate language (MSIL) code for the method that is executing. This offset might be an approximation depending on whether or not the just-in-time (JIT) compiler is generating debugging code. The generation of this debugging information is controlled by the &lt;see cref=&quot;T:System.Diagnostics.DebuggableAttribute&quot; /&gt;.">Obtient l'offset par rapport au début du code MSIL (Microsoft Intermediate Language) pour la méthode en cours d'exécution. Cet offset peut être une approximation selon que le compilateur juste-à-temps (JIT) génère actuellement du code, ou non. La génération d'informations de débogage est déterminée par <see cref="T:System.Diagnostics.DebuggableAttribute" />.</summary>
      <returns vsli:raw="The offset from the start of the MSIL code for the method that is executing.">Offset par rapport au début du code MSIL pour la méthode en cours d'exécution.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetMethod">
      <summary vsli:raw="Gets the method in which the frame is executing.">Obtient la méthode dans laquelle le frame s'exécute.</summary>
      <returns vsli:raw="The method in which the frame is executing.">Méthode dans laquelle le frame s'exécute.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetNativeOffset">
      <summary vsli:raw="Gets the offset from the start of the native just-in-time (JIT)-compiled code for the method that is being executed. The generation of this debugging information is controlled by the &lt;see cref=&quot;T:System.Diagnostics.DebuggableAttribute&quot; /&gt; class.">Obtient l'offset par rapport au début du code natif compilé juste-à-temps (par JIT) pour la méthode en cours d'exécution. La génération d'informations de débogage est déterminée par la classe <see cref="T:System.Diagnostics.DebuggableAttribute" />.</summary>
      <returns vsli:raw="The offset from the start of the JIT-compiled code for the method that is being executed.">Offset par rapport au début du code compilé par JIT pour la méthode en cours d'exécution.</returns>
    </member>
    <member name="F:System.Diagnostics.StackFrame.OFFSET_UNKNOWN">
      <summary vsli:raw="Defines the value that is returned from the &lt;see cref=&quot;M:System.Diagnostics.StackFrame.GetNativeOffset&quot; /&gt; or &lt;see cref=&quot;M:System.Diagnostics.StackFrame.GetILOffset&quot; /&gt; method when the native or Microsoft intermediate language (MSIL) offset is unknown. This field is constant.">Définit la valeur retournée par la méthode <see cref="M:System.Diagnostics.StackFrame.GetNativeOffset" /> ou <see cref="M:System.Diagnostics.StackFrame.GetILOffset" /> lorsque l'offset natif ou MSIL (Microsoft Intermediate Language) est inconnu. Ce champ est constant.</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrame.ToString">
      <summary vsli:raw="Builds a readable representation of the stack trace.">Génère une représentation lisible de la trace de la pile.</summary>
      <returns vsli:raw="A readable representation of the stack trace.">Représentation lisible de la trace de la pile.</returns>
    </member>
    <member name="T:System.Diagnostics.StackFrameExtensions">
      <summary vsli:raw="Provides extension methods for the &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; class, which represents a function call on the call stack for the current thread.">Fournit des méthodes d’extension pour la classe <see cref="T:System.Diagnostics.StackFrame" />, qui représente un appel de fonction sur la pile des appels du thread actuel.</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.GetNativeImageBase(System.Diagnostics.StackFrame)">
      <summary vsli:raw="Returns a pointer to the base address of the native image that this stack frame is executing.">Retourne un pointeur vers l’adresse de base de l’image native exécutée par ce frame de pile.</summary>
      <param name="stackFrame" vsli:raw="A stack frame.">Frame de pile.</param>
      <returns vsli:raw="A pointer to the base address of the native image or &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt; if you're targeting the .NET Framework.">Pointeur vers l’adresse de base de l’image native ou <see cref="F:System.IntPtr.Zero" /> si vous ciblez le .NET Framework.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.GetNativeIP(System.Diagnostics.StackFrame)">
      <summary vsli:raw="Gets an interface pointer to the start of the native code for the method that is being executed.">Obtient un pointeur d’interface vers le début du code natif pour la méthode en cours d’exécution.</summary>
      <param name="stackFrame" vsli:raw="A stack frame.">Frame de pile.</param>
      <returns vsli:raw="An interface pointer to the start of the native code for the method that is being executed or &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt; if you're targeting the .NET Framework.">Pointeur d’interface vers le début du code natif pour la méthode à exécuter ou <see cref="F:System.IntPtr.Zero" /> si vous ciblez le .NET Framework.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasILOffset(System.Diagnostics.StackFrame)">
      <summary vsli:raw="Indicates whether an offset from the start of the IL code for the method that is executing is available.">Indique si un offset par rapport au début du code MSIL pour la méthode en cours d’exécution est disponible.</summary>
      <param name="stackFrame" vsli:raw="A stack frame.">Frame de pile.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the offset is available; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’offset est disponible ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasMethod(System.Diagnostics.StackFrame)">
      <summary vsli:raw="Indicates whether information about the method in which the specified frame is executing is available.">Indique si les informations sur la méthode dans laquelle s’exécute le frame spécifié sont disponibles.</summary>
      <param name="stackFrame" vsli:raw="A stack frame.">Frame de pile.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if information about the method in which the current frame is executing is available; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si les informations sur la méthode dans laquelle le frame actuel s’exécute sont disponibles ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasNativeImage(System.Diagnostics.StackFrame)">
      <summary vsli:raw="Indicates whether the native image is available for the specified stack frame.">Indique si l’image native est disponible pour le frame de pile spécifié.</summary>
      <param name="stackFrame" vsli:raw="A stack frame.">Frame de pile.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a native image is available for this stack frame; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si une image native est disponible pour ce frame de pile ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasSource(System.Diagnostics.StackFrame)">
      <summary vsli:raw="Indicates whether the file that contains the code that the specified stack frame is executing is available.">Indique si le fichier qui contient le code exécuté par le frame de pile spécifié est disponible.</summary>
      <param name="stackFrame" vsli:raw="A stack frame.">Frame de pile.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the code that the specified stack frame is executing is available; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le code exécuté par le frame de pile spécifié est disponible ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Diagnostics.StackTrace">
      <summary vsli:raw="Represents a stack trace, which is an ordered collection of one or more stack frames.">Représente une trace de la pile, à savoir une collection ordonnée de frames de pile.</summary>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class from the caller's frame.">Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.StackTrace" /> à partir du frame d'un appelant.</summary>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class from the caller's frame, optionally capturing source information.">Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.StackTrace" /> à partir du frame d'un appelant, en capturant éventuellement les informations sur la source.</summary>
      <param name="fNeedFileInfo" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to capture the file name, line number, and column number; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour capturer le nom de fichier, le numéro de ligne et le numéro de colonne ; sinon, <see langword="false" />.</param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Diagnostics.StackFrame)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class that contains a single frame.">Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.StackTrace" /> qui contient un frame unique.</summary>
      <param name="frame" vsli:raw="The frame that the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; object should contain.">Frame que l'objet <see cref="T:System.Diagnostics.StackTrace" /> doit contenir.</param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class using the provided exception object.">Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.StackTrace" />, à l'aide de l'objet exception fourni.</summary>
      <param name="e" vsli:raw="The exception object from which to construct the stack trace.">Objet exception à partir duquel créer la trace de la pile.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The parameter &lt;paramref name=&quot;e&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="e" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class, using the provided exception object and optionally capturing source information.">Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.StackTrace" /> à l'aide de l'objet exception fourni, en capturant éventuellement les informations sur la source.</summary>
      <param name="exception">Objet exception à partir duquel créer la trace de la pile.</param>
      <param name="needFileInfo">
        <see langword="true" /> pour capturer le nom de fichier, le numéro de ligne et le numéro de colonne ; sinon, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The parameter &lt;paramref name=&quot;e&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="e" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class using the provided exception object and skipping the specified number of frames.">Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.StackTrace" /> à l'aide de l'objet exception fourni et en ignorant le nombre spécifié de frames.</summary>
      <param name="e" vsli:raw="The exception object from which to construct the stack trace.">Objet exception à partir duquel créer la trace de la pile.</param>
      <param name="skipFrames" vsli:raw="The number of frames up the stack from which to start the trace.">Nombre de frames au sommet de la pile à partir de laquelle commencer la trace.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The parameter &lt;paramref name=&quot;e&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="e" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;skipFrames&quot; /&gt; parameter is negative.">Le paramètre <paramref name="skipFrames" /> est négatif.</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class using the provided exception object, skipping the specified number of frames and optionally capturing source information.">Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.StackTrace" />, à l'aide de l'objet exception fourni, en ignorant le nombre spécifié de frames et en capturant éventuellement les informations sur la source.</summary>
      <param name="e" vsli:raw="The exception object from which to construct the stack trace.">Objet exception à partir duquel créer la trace de la pile.</param>
      <param name="skipFrames" vsli:raw="The number of frames up the stack from which to start the trace.">Nombre de frames au sommet de la pile à partir de laquelle commencer la trace.</param>
      <param name="fNeedFileInfo" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to capture the file name, line number, and column number; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour capturer le nom de fichier, le numéro de ligne et le numéro de colonne ; sinon, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The parameter &lt;paramref name=&quot;e&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="e" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;skipFrames&quot; /&gt; parameter is negative.">Le paramètre <paramref name="skipFrames" /> est négatif.</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class from the caller's frame, skipping the specified number of frames.">Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.StackTrace" />, à partir du frame d'un appelant, en ignorant le nombre spécifié de frames.</summary>
      <param name="skipFrames" vsli:raw="The number of frames up the stack from which to start the trace.">Nombre de frames au sommet de la pile à partir de laquelle commencer la trace.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;skipFrames&quot; /&gt; parameter is negative.">Le paramètre <paramref name="skipFrames" /> est négatif.</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Int32,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class from the caller's frame, skipping the specified number of frames and optionally capturing source information.">Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.StackTrace" /> à partir du frame d'un appelant, en ignorant le nombre spécifié de frames et en capturant éventuellement les informations sur la source.</summary>
      <param name="skipFrames" vsli:raw="The number of frames up the stack from which to start the trace.">Nombre de frames au sommet de la pile à partir de laquelle commencer la trace.</param>
      <param name="fNeedFileInfo" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to capture the file name, line number, and column number; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour capturer le nom de fichier, le numéro de ligne et le numéro de colonne ; sinon, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;skipFrames&quot; /&gt; parameter is negative.">Le paramètre <paramref name="skipFrames" /> est négatif.</exception>
    </member>
    <member name="P:System.Diagnostics.StackTrace.FrameCount">
      <summary vsli:raw="Gets the number of frames in the stack trace.">Obtient le nombre de frames dans la trace de la pile.</summary>
      <returns vsli:raw="The number of frames in the stack trace.">Nombre de frames dans l’arborescence des appels de procédure.</returns>
    </member>
    <member name="M:System.Diagnostics.StackTrace.GetFrame(System.Int32)">
      <summary vsli:raw="Gets the specified stack frame.">Obtient le frame de pile spécifié.</summary>
      <param name="index" vsli:raw="The index of the stack frame requested.">Index du frame de pile demandé.</param>
      <returns vsli:raw="The specified stack frame.">Frame de pile spécifié.</returns>
    </member>
    <member name="M:System.Diagnostics.StackTrace.GetFrames">
      <summary vsli:raw="Returns a copy of all stack frames in the current stack trace.">Retourne une copie de tous les frames de pile dans la trace de la pile actuelle.</summary>
      <returns vsli:raw="An array of type &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; representing the function calls in the stack trace.">Tableau de type <see cref="T:System.Diagnostics.StackFrame" /> représentant les appels de fonctions dans la trace de la pile.</returns>
    </member>
    <member name="F:System.Diagnostics.StackTrace.METHODS_TO_SKIP">
      <summary vsli:raw="Defines the default for the number of methods to omit from the stack trace. This field is constant.">Définit la valeur par défaut pour le nombre de méthodes à omettre dans la trace de la pile. Ce champ est constant.</summary>
    </member>
    <member name="M:System.Diagnostics.StackTrace.ToString">
      <summary vsli:raw="Builds a readable representation of the stack trace.">Génère une représentation lisible de la trace de la pile.</summary>
      <returns vsli:raw="A readable representation of the stack trace.">Représentation lisible de la trace de la pile.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolBinder">
      <summary vsli:raw="Represents a symbol binder for managed code.">Représente un classeur de symboles pour le code managé.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolBinder.GetReader(System.Int32,System.String,System.String)">
      <summary vsli:raw="Gets the interface of the symbol reader for the current file.">Obtient l'interface du lecteur de symboles pour le fichier actif.</summary>
      <param name="importer" vsli:raw="The metadata import interface.">Interface d'importation de métadonnées.</param>
      <param name="filename" vsli:raw="The name of the file for which the reader interface is required.">Nom du fichier pour lequel l'interface de lecteur est requise.</param>
      <param name="searchPath" vsli:raw="The search path used to locate the symbol file.">Chemin de recherche utilisé pour localiser le fichier de symboles.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.ISymbolReader&quot; /&gt; interface that reads the debugging symbols.">Interface <see cref="T:System.Diagnostics.SymbolStore.ISymbolReader" /> qui lit les symboles de débogage.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolBinder1">
      <summary vsli:raw="Represents a symbol binder for managed code.">Représente un binder de symboles pour le code managé.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolBinder1.GetReader(System.IntPtr,System.String,System.String)">
      <summary vsli:raw="Gets the interface of the symbol reader for the current file.">Obtient l'interface de lecteur de symboles pour le fichier en cours.</summary>
      <param name="importer" vsli:raw="An &lt;see cref=&quot;T:System.IntPtr&quot; /&gt; that refers to the metadata import interface.">
        <see cref="T:System.IntPtr" /> qui fait référence à l'interface d'importation des métadonnées.</param>
      <param name="filename" vsli:raw="The name of the file for which the reader interface is required.">Nom du fichier pour lequel l'interface de lecteur est requise.</param>
      <param name="searchPath" vsli:raw="The search path used to locate the symbol file.">Chemin de recherche utilisé pour rechercher le fichier de symboles.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.ISymbolReader&quot; /&gt; interface that reads the debugging symbols.">Interface <see cref="T:System.Diagnostics.SymbolStore.ISymbolReader" /> qui lit les symboles de débogage.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolDocument">
      <summary vsli:raw="Represents a document referenced by a symbol store.">Représente un document référencé par un magasin de symboles.</summary>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.CheckSumAlgorithmId">
      <summary vsli:raw="Gets the checksum algorithm identifier.">Obtient l'identificateur de l'algorithme de somme de contrôle.</summary>
      <returns vsli:raw="A GUID identifying the checksum algorithm. The value is all zeros, if there is no checksum.">GUID identifiant l'algorithme de somme de contrôle. En l'absence de somme de contrôle, la valeur comprend uniquement des zéros.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.DocumentType">
      <summary vsli:raw="Gets the type of the current document.">Obtient le type du document actif.</summary>
      <returns vsli:raw="The type of the current document.">Type du document actif.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocument.FindClosestLine(System.Int32)">
      <summary vsli:raw="Returns the closest line that is a sequence point, given a line in the current document that might or might not be a sequence point.">Retourne la ligne la plus proche constituant un point de séquence, en fonction d'une ligne du document actif qui peut éventuellement être un point de séquence.</summary>
      <param name="line" vsli:raw="The specified line in the document.">Ligne spécifiée dans le document.</param>
      <returns vsli:raw="The closest line that is a sequence point.">Ligne la plus proche qui est un point de séquence.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocument.GetCheckSum">
      <summary vsli:raw="Gets the checksum.">Obtient la somme de contrôle.</summary>
      <returns vsli:raw="The checksum.">Checksum.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocument.GetSourceRange(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Gets the embedded document source for the specified range.">Obtient la source incorporée du document pour la plage spécifiée.</summary>
      <param name="startLine" vsli:raw="The starting line in the current document.">Ligne de départ dans le document actif.</param>
      <param name="startColumn" vsli:raw="The starting column in the current document.">Colonne de départ dans le document actif.</param>
      <param name="endLine" vsli:raw="The ending line in the current document.">Ligne de fin dans le document actif.</param>
      <param name="endColumn" vsli:raw="The ending column in the current document.">Colonne de fin dans le document actif.</param>
      <returns vsli:raw="The document source for the specified range.">Source du document pour la plage spécifiée.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.HasEmbeddedSource">
      <summary vsli:raw="Checks whether the current document is stored in the symbol store.">Vérifie si le document actif est enregistré dans le magasin de symboles.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current document is stored in the symbol store; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le document actif est enregistré dans le magasin de symboles ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.Language">
      <summary vsli:raw="Gets the language of the current document.">Obtient la langue du document actif.</summary>
      <returns vsli:raw="The language of the current document.">Langue du document actif.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.LanguageVendor">
      <summary vsli:raw="Gets the language vendor of the current document.">Obtient le fournisseur de langue du document actif.</summary>
      <returns vsli:raw="The language vendor of the current document.">Fournisseur de langue du document actif.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.SourceLength">
      <summary vsli:raw="Gets the length, in bytes, of the embedded source.">Obtient la longueur, en octets, de la source incorporée.</summary>
      <returns vsli:raw="The source length of the current document.">Longueur de la source du document actif.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.URL">
      <summary vsli:raw="Gets the URL of the current document.">Obtient l'URL du document actif.</summary>
      <returns vsli:raw="The URL of the current document.">URL du document actif.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolDocumentWriter">
      <summary vsli:raw="Represents a document referenced by a symbol store.">Représente un document référencé par un magasin de symboles.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocumentWriter.SetCheckSum(System.Guid,System.Byte[])">
      <summary vsli:raw="Sets checksum information.">Définit les informations de la somme de contrôle.</summary>
      <param name="algorithmId" vsli:raw="The GUID representing the algorithm ID.">GUID représentant l'ID de l'algorithme.</param>
      <param name="checkSum" vsli:raw="The checksum.">Checksum.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocumentWriter.SetSource(System.Byte[])">
      <summary vsli:raw="Stores the raw source for a document in the symbol store.">Enregistre la source brute d'un document dans le magasin de symboles.</summary>
      <param name="source" vsli:raw="The document source represented as unsigned bytes.">Source du document représentée par des octets non signés.</param>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolMethod">
      <summary vsli:raw="Represents a method within a symbol store.">Représente une méthode dans un magasin de symboles.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetNamespace">
      <summary vsli:raw="Gets the namespace that the current method is defined within.">Obtient l'espace de noms dans lequel la méthode en cours est définie.</summary>
      <returns vsli:raw="The namespace that the current method is defined within.">Espace de noms dans lequel la méthode en cours est définie.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetOffset(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)">
      <summary vsli:raw="Gets the Microsoft intermediate language (MSIL) offset within the method that corresponds to the specified position.">Obtient l'offset MSIL (Microsoft Intermediate Language) de la méthode correspondant à la position spécifiée.</summary>
      <param name="document" vsli:raw="The document for which the offset is requested.">Document pour lequel l'offset est demandé.</param>
      <param name="line" vsli:raw="The document line corresponding to the offset.">Ligne du document correspondant à l'offset.</param>
      <param name="column" vsli:raw="The document column corresponding to the offset.">Colonne du document correspondant à l'offset.</param>
      <returns vsli:raw="The offset within the specified document.">Offset dans le document spécifié.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetParameters">
      <summary vsli:raw="Gets the parameters for the current method.">Obtient les paramètres de la méthode en cours.</summary>
      <returns vsli:raw="The array of parameters for the current method.">Tableau de paramètres de la méthode en cours.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetRanges(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)">
      <summary vsli:raw="Gets an array of start and end offset pairs that correspond to the ranges of Microsoft intermediate language (MSIL) that a given position covers within this method.">Obtient un tableau de paires d'offsets de début et de fin correspondant aux plages MSIL couvertes par une position donnée dans cette méthode.</summary>
      <param name="document" vsli:raw="The document for which the offset is requested.">Document pour lequel l'offset est demandé.</param>
      <param name="line" vsli:raw="The document line corresponding to the ranges.">Ligne du document correspondant aux plages.</param>
      <param name="column" vsli:raw="The document column corresponding to the ranges.">Colonne du document correspondant aux plages.</param>
      <returns vsli:raw="An array of start and end offset pairs.">Tableau de paires d'offsets de début et de fin.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetScope(System.Int32)">
      <summary vsli:raw="Returns the most enclosing lexical scope when given an offset within a method.">Retourne la portée lexicale la plus englobante lorsqu'un offset est spécifié dans une méthode.</summary>
      <param name="offset" vsli:raw="The byte offset within the method of the lexical scope.">Offset d'octets dans la méthode de la portée lexicale.</param>
      <returns vsli:raw="The most enclosing lexical scope for the given byte offset within the method.">Portée lexicale la plus englobante pour l'offset d'octets donné dans la méthode.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetSequencePoints(System.Int32[],System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
      <summary vsli:raw="Gets the sequence points for the current method.">Obtient les points de séquence de la méthode en cours.</summary>
      <param name="offsets" vsli:raw="The array of byte offsets from the beginning of the method for the sequence points.">Tableau d'offsets d'octets pour les points de séquence, à compter du début de la méthode.</param>
      <param name="documents" vsli:raw="The array of documents in which the sequence points are located.">Tableau de documents dans lesquels se trouvent les points de séquence.</param>
      <param name="lines" vsli:raw="The array of lines in the documents at which the sequence points are located.">Tableau des lignes de documents sur lesquelles figurent les points de séquence.</param>
      <param name="columns" vsli:raw="The array of columns in the documents at which the sequence points are located.">Tableau des colonnes de documents dans lesquelles figurent les points de séquence.</param>
      <param name="endLines" vsli:raw="The array of lines in the documents at which the sequence points end.">Tableau des lignes de documents sur lesquelles se terminent les points de séquence.</param>
      <param name="endColumns" vsli:raw="The array of columns in the documents at which the sequence points end.">Tableau des colonnes de documents dans lesquelles se terminent les points de séquence.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetSourceStartEnd(System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[])">
      <summary vsli:raw="Gets the start and end positions for the source of the current method.">Obtient les positions de début et de fin de la source de la méthode en cours.</summary>
      <param name="docs" vsli:raw="The starting and ending source documents.">Documents source de début et de fin.</param>
      <param name="lines" vsli:raw="The starting and ending lines in the corresponding source documents.">Lignes de début et de fin dans les documents source correspondants.</param>
      <param name="columns" vsli:raw="The starting and ending columns in the corresponding source documents.">Colonnes de début et de fin dans les documents source correspondants.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the positions were defined; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si les positions ont été définies ; sinon <see langword="false" />.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolMethod.RootScope">
      <summary vsli:raw="Gets the root lexical scope for the current method. This scope encloses the entire method.">Obtient la portée lexicale racine de la méthode en cours. Cette portée englobe la totalité de la méthode.</summary>
      <returns vsli:raw="The root lexical scope that encloses the entire method.">Portée lexicale racine englobant la totalité de la méthode.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolMethod.SequencePointCount">
      <summary vsli:raw="Gets a count of the sequence points in the method.">Obtient le nombre de points de séquence dans la méthode.</summary>
      <returns vsli:raw="The count of the sequence points in the method.">Nombre de points de séquence dans la méthode.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolMethod.Token">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; containing the metadata for the current method.">Obtient le <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> contenant les métadonnées de la méthode en cours.</summary>
      <returns vsli:raw="The metadata token for the current method.">Jeton de métadonnées de la méthode en cours.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolNamespace">
      <summary vsli:raw="Represents a namespace within a symbol store.">Représente un espace de noms dans un magasin de symboles.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolNamespace.GetNamespaces">
      <summary vsli:raw="Gets the child members of the current namespace.">Obtient les membres enfants de l'espace de noms en cours.</summary>
      <returns vsli:raw="The child members of the current namespace.">Membres enfants de l'espace de noms en cours.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolNamespace.GetVariables">
      <summary vsli:raw="Gets all the variables defined at global scope within the current namespace.">Obtient toutes les variables définies avec une portée globale dans l'espace de noms en cours.</summary>
      <returns vsli:raw="The variables defined at global scope within the current namespace.">Variables définies avec une portée globale dans l'espace de noms en cours.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolNamespace.Name">
      <summary vsli:raw="Gets the current namespace.">Obtient l'espace de noms en cours.</summary>
      <returns vsli:raw="The current namespace.">Espace de noms en cours.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolReader">
      <summary vsli:raw="Represents a symbol reader for managed code.">Représente un lecteur de symboles pour le code managé.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary vsli:raw="Gets a document specified by the language, vendor, and type.">Obtient un document spécifié par la langue, le fournisseur et le type.</summary>
      <param name="url" vsli:raw="The URL that identifies the document.">URL identifiant le document.</param>
      <param name="language" vsli:raw="The document language. You can specify this parameter as &lt;see cref=&quot;F:System.Guid.Empty&quot; /&gt;.">Langue du document. Ce paramètre peut être <see cref="F:System.Guid.Empty" />.</param>
      <param name="languageVendor" vsli:raw="The identity of the vendor for the document language. You can specify this parameter as &lt;see cref=&quot;F:System.Guid.Empty&quot; /&gt;.">Identité du fournisseur de langue du document. Ce paramètre peut être <see cref="F:System.Guid.Empty" />.</param>
      <param name="documentType" vsli:raw="The type of the document. You can specify this parameter as &lt;see cref=&quot;F:System.Guid.Empty&quot; /&gt;.">Type du document. Ce paramètre peut être <see cref="F:System.Guid.Empty" />.</param>
      <returns vsli:raw="The specified document.">Document spécifié.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetDocuments">
      <summary vsli:raw="Gets an array of all documents defined in the symbol store.">Obtient un tableau de tous les documents définis dans le magasin de symboles.</summary>
      <returns vsli:raw="An array of all documents defined in the symbol store.">Tableau de tous les documents définis dans le magasin de symboles.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetGlobalVariables">
      <summary vsli:raw="Gets all global variables in the module.">Obtient toutes les variables globales du module.</summary>
      <returns vsli:raw="An array of all variables in the module.">Tableau de l'ensemble des variables du module.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetMethod(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary vsli:raw="Gets a symbol reader method object when given the identifier of a method.">Obtient un objet méthode de lecteur de symboles lorsque l'identificateur d'une méthode est fourni.</summary>
      <param name="method" vsli:raw="The metadata token of the method.">Jeton de métadonnées de la méthode.</param>
      <returns vsli:raw="The symbol reader method object for the specified method identifier.">Objet méthode de lecteur de symboles pour l'identificateur de méthode spécifié.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetMethod(System.Diagnostics.SymbolStore.SymbolToken,System.Int32)">
      <summary vsli:raw="Gets a symbol reader method object when given the identifier of a method and its edit and continue version.">Obtient un objet de méthode de lecteur de symboles lorsque l’identificateur et la version Modifier &amp; Continuer d’une méthode sont fournis.</summary>
      <param name="method" vsli:raw="The metadata token of the method.">Jeton de métadonnées de la méthode.</param>
      <param name="version" vsli:raw="The edit and continue version of the method.">Version Modifier &amp; Continuer de la méthode.</param>
      <returns vsli:raw="The symbol reader method object for the specified method identifier.">Objet méthode de lecteur de symboles pour l'identificateur de méthode spécifié.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetMethodFromDocumentPosition(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)">
      <summary vsli:raw="Gets a symbol reader method object that contains a specified position in a document.">Obtient un objet méthode de lecteur de symboles contenant une position spécifiée dans un document.</summary>
      <param name="document" vsli:raw="The document in which the method is located.">Document dans lequel se trouve la méthode.</param>
      <param name="line" vsli:raw="The position of the line within the document. The lines are numbered, beginning with 1.">Position de la ligne dans le document. Les lignes sont numérotées, en commençant par 1.</param>
      <param name="column" vsli:raw="The position of column within the document. The columns are numbered, beginning with 1.">Position de la colonne dans le document. Les colonnes sont numérotées, en commençant par 1.</param>
      <returns vsli:raw="The reader method object for the specified position in the document.">Objet méthode de lecteur pour la position spécifiée dans le document.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetNamespaces">
      <summary vsli:raw="Gets the namespaces that are defined in the global scope within the current symbol store.">Obtient les espaces de noms définis dans la portée globale dans le magasin de symboles en cours.</summary>
      <returns vsli:raw="The namespaces defined in the global scope within the current symbol store.">Espaces de noms définis dans la portée globale dans le magasin de symboles en cours.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken,System.String)">
      <summary vsli:raw="Gets an attribute value when given the attribute name.">Obtient la valeur d'un attribut dont le nom est fourni.</summary>
      <param name="parent" vsli:raw="The metadata token for the object for which the attribute is requested.">Jeton de métadonnées de l'objet pour lequel l'attribut est demandé.</param>
      <param name="name" vsli:raw="The attribute name.">Nom de l'attribut.</param>
      <returns vsli:raw="The value of the attribute.">Valeur de l'attribut.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetVariables(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary vsli:raw="Gets the variables that are not local when given the parent.">Obtient les variables qui ne sont pas locales lorsque le parent est spécifié.</summary>
      <param name="parent" vsli:raw="The metadata token for the type for which the variables are requested.">Jeton de métadonnées du type pour lequel les variables sont demandées.</param>
      <returns vsli:raw="An array of variables for the parent.">Tableau de variables pour le parent.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolReader.UserEntryPoint">
      <summary vsli:raw="Gets the metadata token for the method that was specified as the user entry point for the module, if any.">Obtient le jeton de métadonnées de la méthode spécifiée en tant que point d'entrée utilisateur pour le module, le cas échéant.</summary>
      <returns vsli:raw="The metadata token for the method that is the user entry point for the module.">Jeton de métadonnées de la méthode représentant le point d'entrée utilisateur pour le module.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolScope">
      <summary vsli:raw="Represents a lexical scope within &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.ISymbolMethod&quot; /&gt;, providing access to the start and end offsets of the scope, as well as its child and parent scopes.">Représente une portée lexicale dans <see cref="T:System.Diagnostics.SymbolStore.ISymbolMethod" /> qui donne accès aux offsets de début et de fin de la portée, ainsi qu'à ses portées enfants et parents.</summary>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.EndOffset">
      <summary vsli:raw="Gets the end offset of the current lexical scope.">Obtient l'offset de fin de la portée lexicale en cours.</summary>
      <returns vsli:raw="The end offset of the current lexical scope.">Offset de fin de la portée lexicale en cours.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolScope.GetChildren">
      <summary vsli:raw="Gets the child lexical scopes of the current lexical scope.">Obtient les portées lexicales enfants de la portée actuelle.</summary>
      <returns vsli:raw="The child lexical scopes that of the current lexical scope.">Portées lexicales enfants de la portée actuelle.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolScope.GetLocals">
      <summary vsli:raw="Gets the local variables within the current lexical scope.">Obtient les variables locales de la portée lexicale en cours.</summary>
      <returns vsli:raw="The local variables within the current lexical scope.">Variables locales de la portée lexicale en cours.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolScope.GetNamespaces">
      <summary vsli:raw="Gets the namespaces that are used within the current scope.">Obtient les espaces de noms utilisés dans la portée actuelle.</summary>
      <returns vsli:raw="The namespaces that are used within the current scope.">Espaces de noms utilisés dans la portée actuelle.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.Method">
      <summary vsli:raw="Gets the method that contains the current lexical scope.">Obtient la méthode contenant la portée lexicale en cours.</summary>
      <returns vsli:raw="The method that contains the current lexical scope.">Méthode contenant la portée lexicale en cours.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.Parent">
      <summary vsli:raw="Gets the parent lexical scope of the current scope.">Obtient la portée lexicale parente de la portée actuelle.</summary>
      <returns vsli:raw="The parent lexical scope of the current scope.">Portée lexicale parente de la portée actuelle.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.StartOffset">
      <summary vsli:raw="Gets the start offset of the current lexical scope.">Obtient l'offset de début de la portée lexicale en cours.</summary>
      <returns vsli:raw="The start offset of the current lexical scope.">Offset de début de la portée lexicale en cours.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolVariable">
      <summary vsli:raw="Represents a variable within a symbol store.">Représente une variable dans un magasin de symboles.</summary>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressField1">
      <summary vsli:raw="Gets the first address of a variable.">Obtient la première adresse d'une variable.</summary>
      <returns vsli:raw="The first address of the variable.">Première adresse de la variable.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressField2">
      <summary vsli:raw="Gets the second address of a variable.">Obtient la deuxième adresse d'une variable.</summary>
      <returns vsli:raw="The second address of the variable.">Deuxième adresse de la variable.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressField3">
      <summary vsli:raw="Gets the third address of a variable.">Obtient la troisième adresse d'une variable.</summary>
      <returns vsli:raw="The third address of the variable.">Troisième adresse de la variable.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressKind">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymAddressKind&quot; /&gt; value describing the type of the address.">Obtient la valeur <see cref="T:System.Diagnostics.SymbolStore.SymAddressKind" /> décrivant le type de l'adresse.</summary>
      <returns vsli:raw="The type of the address. One of the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymAddressKind&quot; /&gt; values.">Type de l'adresse. Une des valeurs de l'objet <see cref="T:System.Diagnostics.SymbolStore.SymAddressKind" />.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.Attributes">
      <summary vsli:raw="Gets the attributes of the variable.">Obtient les attributs de la variable.</summary>
      <returns vsli:raw="The variable attributes.">Attributs de la variable.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.EndOffset">
      <summary vsli:raw="Gets the end offset of a variable within the scope of the variable.">Obtient l'offset de fin d'une variable dans la portée de cette dernière.</summary>
      <returns vsli:raw="The end offset of the variable.">Offset de fin de la variable.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolVariable.GetSignature">
      <summary vsli:raw="Gets the variable signature.">Obtient la signature de la variable.</summary>
      <returns vsli:raw="The variable signature as an opaque blob.">Signature de la variable sous forme d'un blob opaque.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.Name">
      <summary vsli:raw="Gets the name of the variable.">Obtient le nom de la variable.</summary>
      <returns vsli:raw="The name of the variable.">Nom de la variable.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.StartOffset">
      <summary vsli:raw="Gets the start offset of the variable within the scope of the variable.">Obtient l'offset de début d'une variable dans la portée de cette dernière.</summary>
      <returns vsli:raw="The start offset of the variable.">Offset de début de la variable.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolWriter">
      <summary vsli:raw="Represents a symbol writer for managed code.">Représente un writer de symboles pour le code managé.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.Close">
      <summary vsli:raw="Closes &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.ISymbolWriter&quot; /&gt; and commits the symbols to the symbol store.">Ferme <see cref="T:System.Diagnostics.SymbolStore.ISymbolWriter" /> et valide les symboles dans le magasin de symboles.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseMethod">
      <summary vsli:raw="Closes the current method.">Ferme la méthode actuelle.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseNamespace">
      <summary vsli:raw="Closes the most recent namespace.">Ferme l'espace de noms le plus récent.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope(System.Int32)">
      <summary vsli:raw="Closes the current lexical scope.">Ferme la portée lexicale actuelle.</summary>
      <param name="endOffset" vsli:raw="The points past the last instruction in the scope.">Points figurant au-delà de la dernière instruction dans la portée.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary vsli:raw="Defines a source document.">Définit un document source.</summary>
      <param name="url" vsli:raw="The URL that identifies the document.">URL identifiant le document.</param>
      <param name="language" vsli:raw="The document language. This parameter can be &lt;see cref=&quot;F:System.Guid.Empty&quot; /&gt;.">Langue du document. Ce paramètre peut être <see cref="F:System.Guid.Empty" />.</param>
      <param name="languageVendor" vsli:raw="The identity of the vendor for the document language. This parameter can be &lt;see cref=&quot;F:System.Guid.Empty&quot; /&gt;.">Identité du fournisseur de langue du document. Ce paramètre peut être <see cref="F:System.Guid.Empty" />.</param>
      <param name="documentType" vsli:raw="The type of the document. This parameter can be &lt;see cref=&quot;F:System.Guid.Empty&quot; /&gt;.">Type du document. Ce paramètre peut être <see cref="F:System.Guid.Empty" />.</param>
      <returns vsli:raw="The object that represents the document.">Objet qui représente le document.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Defines a field in a type or a global field.">Définit un champ dans un type ou un champ global.</summary>
      <param name="parent" vsli:raw="The metadata type or method token.">Type de métadonnées ou jeton de méthode.</param>
      <param name="name" vsli:raw="The field name.">Nom du champ.</param>
      <param name="attributes" vsli:raw="A bitwise combination of the field attributes.">Combinaison d'opérations de bits des attributs d'un champ.</param>
      <param name="signature" vsli:raw="The field signature.">Signature du champ.</param>
      <param name="addrKind" vsli:raw="The address types for &lt;paramref name=&quot;addr1&quot; /&gt; and &lt;paramref name=&quot;addr2&quot; /&gt;.">Types d'adresses de <paramref name="addr1" /> et <paramref name="addr2" />.</param>
      <param name="addr1" vsli:raw="The first address for the field specification.">Première adresse de la spécification de champ.</param>
      <param name="addr2" vsli:raw="The second address for the field specification.">Seconde adresse de la spécification de champ.</param>
      <param name="addr3" vsli:raw="The third address for the field specification.">Troisième adresse de la spécification de champ.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineGlobalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Defines a single global variable.">Définit une variable globale unique.</summary>
      <param name="name" vsli:raw="The global variable name.">Nom de la variable globale.</param>
      <param name="attributes" vsli:raw="A bitwise combination of the global variable attributes.">Combinaison d'opérations de bits des attributs de variable globale.</param>
      <param name="signature" vsli:raw="The global variable signature.">Signature de la variable globale.</param>
      <param name="addrKind" vsli:raw="The address types for &lt;paramref name=&quot;addr1&quot; /&gt;, &lt;paramref name=&quot;addr2&quot; /&gt;, and &lt;paramref name=&quot;addr3&quot; /&gt;.">Types d'adresses de <paramref name="addr1" />, <paramref name="addr2" /> et <paramref name="addr3" />.</param>
      <param name="addr1" vsli:raw="The first address for the global variable specification.">Première adresse de la spécification de variable globale.</param>
      <param name="addr2" vsli:raw="The second address for the global variable specification.">Seconde adresse de la spécification de variable globale.</param>
      <param name="addr3" vsli:raw="The third address for the global variable specification.">Troisième adresse de la spécification de variable globale.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Defines a single variable in the current lexical scope.">Définit une variable unique dans la portée lexicale actuelle.</summary>
      <param name="name" vsli:raw="The local variable name.">Nom de la variable locale.</param>
      <param name="attributes" vsli:raw="A bitwise combination of the local variable attributes.">Combinaison d'opérations de bits des attributs de variable locale.</param>
      <param name="signature" vsli:raw="The local variable signature.">Signature de la variable locale.</param>
      <param name="addrKind" vsli:raw="The address types for &lt;paramref name=&quot;addr1&quot; /&gt;, &lt;paramref name=&quot;addr2&quot; /&gt;, and &lt;paramref name=&quot;addr3&quot; /&gt;.">Types d'adresses de <paramref name="addr1" />, <paramref name="addr2" /> et <paramref name="addr3" />.</param>
      <param name="addr1" vsli:raw="The first address for the local variable specification.">Première adresse de la spécification de variable locale.</param>
      <param name="addr2" vsli:raw="The second address for the local variable specification.">Seconde adresse de la spécification de variable locale.</param>
      <param name="addr3" vsli:raw="The third address for the local variable specification.">Troisième adresse de la spécification de variable locale.</param>
      <param name="startOffset" vsli:raw="The start offset for the variable. If this parameter is zero, it is ignored and the variable is defined throughout the entire scope. If the parameter is nonzero, the variable falls within the offsets of the current scope.">Offset de début de la variable. Si la valeur de ce paramètre est de zéro, il est ignoré et la variable est définie dans l'ensemble de la portée. Si la valeur de ce paramètre est différente de zéro, la variable est comprise entre les offsets de la portée actuelle.</param>
      <param name="endOffset" vsli:raw="The end offset for the variable. If this parameter is zero, it is ignored and the variable is defined throughout the entire scope. If the parameter is nonzero, the variable falls within the offsets of the current scope.">Offset de fin de la variable. Si la valeur de ce paramètre est de zéro, il est ignoré et la variable est définie dans l'ensemble de la portée. Si la valeur de ce paramètre est différente de zéro, la variable est comprise entre les offsets de la portée actuelle.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Defines a single parameter in the current method. The type of each parameter is taken from its position within the signature of the method.">Définit un paramètre unique dans la méthode en cours. Le type de chaque paramètre est obtenu à partir de sa position dans la signature de la méthode.</summary>
      <param name="name" vsli:raw="The parameter name.">Nom du paramètre.</param>
      <param name="attributes" vsli:raw="A bitwise combination of the parameter attributes.">Combinaison d'opérations de bits des attributs de paramètre.</param>
      <param name="sequence" vsli:raw="The parameter signature.">Signature du paramètre.</param>
      <param name="addrKind" vsli:raw="The address types for &lt;paramref name=&quot;addr1&quot; /&gt;, &lt;paramref name=&quot;addr2&quot; /&gt;, and &lt;paramref name=&quot;addr3&quot; /&gt;.">Types d'adresses de <paramref name="addr1" />, <paramref name="addr2" /> et <paramref name="addr3" />.</param>
      <param name="addr1" vsli:raw="The first address for the parameter specification.">Première adresse de la spécification de paramètre.</param>
      <param name="addr2" vsli:raw="The second address for the parameter specification.">Seconde adresse de la spécification de paramètre.</param>
      <param name="addr3" vsli:raw="The third address for the parameter specification.">Troisième adresse de la spécification de paramètre.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineSequencePoints(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
      <summary vsli:raw="Defines a group of sequence points within the current method.">Définit un groupe de points de séquence dans la méthode actuelle.</summary>
      <param name="document" vsli:raw="The document object for which the sequence points are being defined.">Objet document pour lequel sont définis les points de séquence.</param>
      <param name="offsets" vsli:raw="The sequence point offsets measured from the beginning of methods.">Offsets de points de séquence, mesurés à partir du début des méthodes.</param>
      <param name="lines" vsli:raw="The document lines for the sequence points.">Lignes du document pour les points de séquence.</param>
      <param name="columns" vsli:raw="The document positions for the sequence points.">Positions du document pour les points de séquence.</param>
      <param name="endLines" vsli:raw="The document end lines for the sequence points.">Lignes de fin du document pour les points de séquence.</param>
      <param name="endColumns" vsli:raw="The document end positions for the sequence points.">Positions de fin du document pour les points de séquence.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.Initialize(System.IntPtr,System.String,System.Boolean)">
      <summary vsli:raw="Sets the metadata emitter interface to associate with a writer.">Définit l'interface d'émetteur de métadonnées à associer à un writer.</summary>
      <param name="emitter" vsli:raw="The metadata emitter interface.">Interface d'émetteur de métadonnées.</param>
      <param name="filename" vsli:raw="The file name for which the debugging symbols are written. Some writers require a file name, and others do not. If a file name is specified for a writer that does not use file names, this parameter is ignored.">Nom de fichier pour lequel sont écrits les symboles de débogage. Certains writers requièrent un nom de fichier et d'autres non. Si vous spécifiez un nom de fichier pour un writer qui n'utilise pas les noms de fichiers, ce paramètre est ignoré.</param>
      <param name="fFullBuild" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; indicates that this is a full rebuild; &lt;see langword=&quot;false&quot; /&gt; indicates that this is an incremental compilation.">
        <see langword="true" /> indique qu'il s'agit d'une régénération complète ; <see langword="false" /> indique qu'il s'agit d'une compilation incrémentielle.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenMethod(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary vsli:raw="Opens a method to place symbol information into.">Ouvre une méthode pour y placer des informations de symboles.</summary>
      <param name="method" vsli:raw="The metadata token for the method to be opened.">Jeton de métadonnées de la méthode à ouvrir.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenNamespace(System.String)">
      <summary vsli:raw="Opens a new namespace.">Ouvre un nouvel espace de noms.</summary>
      <param name="name" vsli:raw="The name of the new namespace.">Nom du nouvel espace de noms.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)">
      <summary vsli:raw="Opens a new lexical scope in the current method.">Ouvre une nouvelle portée lexicale dans la méthode actuelle.</summary>
      <param name="startOffset" vsli:raw="The offset, in bytes, from the beginning of the method to the first instruction in the lexical scope.">Offset, en octets, du début de la méthode à la première instruction dans la portée lexicale.</param>
      <returns vsli:raw="An opaque scope identifier that can be used with &lt;see cref=&quot;M:System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(System.Int32,System.Int32,System.Int32)&quot; /&gt; to define the start and end offsets of a scope at a later time. In this case, the offsets passed to &lt;see cref=&quot;M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)&quot; /&gt; and &lt;see cref=&quot;M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope(System.Int32)&quot; /&gt; are ignored. A scope identifier is valid only in the current method.">Identificateur de portée opaque pouvant être utilisé avec <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(System.Int32,System.Int32,System.Int32)" /> pour définir les offsets de début et de fin d'une portée ultérieurement. Dans ce cas, les offsets passés à <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)" /> et <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope(System.Int32)" /> sont ignorés. Un identificateur de portée est valide dans la méthode en cours uniquement.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)">
      <summary vsli:raw="Specifies the true start and end of a method within a source file. Use &lt;see cref=&quot;M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)&quot; /&gt; to specify the extent of a method, independent of the sequence points that exist within the method.">Spécifie les véritables début et fin d'une méthode dans un fichier source. Utilisez <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)" /> pour spécifier l'étendue d'une méthode, indépendamment des points de séquence existant dans la méthode.</summary>
      <param name="startDoc" vsli:raw="The document that contains the starting position.">Document qui contient la position de départ.</param>
      <param name="startLine" vsli:raw="The starting line number.">Numéro de ligne de départ.</param>
      <param name="startColumn" vsli:raw="The starting column.">Colonne de départ.</param>
      <param name="endDoc" vsli:raw="The document that contains the ending position.">Document qui contient la position de fin.</param>
      <param name="endLine" vsli:raw="The ending line number.">Numéro de ligne de fin.</param>
      <param name="endColumn" vsli:raw="The ending column number.">Numéro de colonne de fin.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Defines the offset range for the specified lexical scope.">Définit la plage d'offsets pour la portée lexicale spécifiée.</summary>
      <param name="scopeID" vsli:raw="The identifier of the lexical scope.">Identificateur de la portée lexicale.</param>
      <param name="startOffset" vsli:raw="The byte offset of the beginning of the lexical scope.">Offset d'octets du début de la portée lexicale.</param>
      <param name="endOffset" vsli:raw="The byte offset of the end of the lexical scope.">Offset d'octets de la fin de la portée lexicale.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Byte[])">
      <summary vsli:raw="Defines an attribute when given the attribute name and the attribute value.">Définit un attribut lorsque son nom et sa valeur sont fournis.</summary>
      <param name="parent" vsli:raw="The metadata token for which the attribute is being defined.">Jeton de données pour lequel est défini l'attribut.</param>
      <param name="name" vsli:raw="The attribute name.">Nom de l'attribut.</param>
      <param name="data" vsli:raw="The attribute value.">Valeur de l'attribut</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetUnderlyingWriter(System.IntPtr)">
      <summary vsli:raw="Sets the underlying &lt;see langword=&quot;ISymUnmanagedWriter&quot; /&gt; (the corresponding unmanaged interface) that a managed &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.ISymbolWriter&quot; /&gt; uses to emit symbols.">Définit le <see langword="ISymUnmanagedWriter" /> sous-jacent (l'interface non managée correspondante) utilisé par un <see cref="T:System.Diagnostics.SymbolStore.ISymbolWriter" /> managé pour émettre des symboles.</summary>
      <param name="underlyingWriter" vsli:raw="A pointer to code that represents the underlying writer.">Pointeur vers du code qui représente le writer sous-jacent.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetUserEntryPoint(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary vsli:raw="Identifies the user-defined method as the entry point for the current module.">Identifie la méthode définie par l'utilisateur comme point d'entrée du module en cours.</summary>
      <param name="entryMethod" vsli:raw="The metadata token for the method that is the user entry point.">Jeton de métadonnées pour la méthode correspondant au point d'entrée utilisateur.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.UsingNamespace(System.String)">
      <summary vsli:raw="Specifies that the given, fully qualified namespace name is used within the open lexical scope.">Spécifie que le nom d'espace de noms complet donné est utilisé dans la portée lexicale ouverte.</summary>
      <param name="fullName" vsli:raw="The fully qualified name of the namespace.">Nom complet de l'espace de noms.</param>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymAddressKind">
      <summary vsli:raw="Specifies address types for local variables, parameters, and fields in the methods &lt;see cref=&quot;M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)&quot; /&gt;, &lt;see cref=&quot;M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)&quot; /&gt;, and &lt;see cref=&quot;M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)&quot; /&gt; of the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.ISymbolWriter&quot; /&gt; interface.">Spécifie le type d'adresse des variables locales, des paramètres et des champs dans les méthodes <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />, <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)" /> et <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)" /> de l'interface <see cref="T:System.Diagnostics.SymbolStore.ISymbolWriter" />.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.BitField">
      <summary vsli:raw="A bit field. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the position where the field starts, and the &lt;paramref name=&quot;addr2&quot; /&gt; parameter is the field length.">Champ de bits. Le paramètre <paramref name="addr1" /> correspond à la position de départ du champ et le paramètre <paramref name="addr2" /> à la longueur de champ.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.ILOffset">
      <summary vsli:raw="A Microsoft intermediate language (MSIL) offset. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the MSIL local variable or parameter index.">Offset MSIL (Microsoft Intermediate Language). Le paramètre <paramref name="addr1" /> correspond à la variable locale MSIL ou à l'index de paramètre.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeOffset">
      <summary vsli:raw="A native offset. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the offset from the start of the parent.">Offset natif. Le paramètre <paramref name="addr1" /> correspond à l'offset à partir du début du parent.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegister">
      <summary vsli:raw="A native register address. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the register in which the variable is stored.">Adresse native de Registre. Le paramètre <paramref name="addr1" /> représente le Registre dans lequel la variable est enregistrée.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegisterRegister">
      <summary vsli:raw="A register-relative address. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the low-order register, and the &lt;paramref name=&quot;addr2&quot; /&gt; parameter is the high-order register.">Adresse relative au Registre. Le paramètre <paramref name="addr1" /> représente le Registre de poids faible et le paramètre <paramref name="addr2" /> le Registre de poids fort.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegisterRelative">
      <summary vsli:raw="A register-relative address. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the register, and the &lt;paramref name=&quot;addr2&quot; /&gt; parameter is the offset.">Adresse relative au Registre. Le paramètre <paramref name="addr1" /> représente le Registre et le paramètre <paramref name="addr2" /> l'offset.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegisterStack">
      <summary vsli:raw="A register-relative address. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the low-order register, the &lt;paramref name=&quot;addr2&quot; /&gt; parameter is the stack register, and the &lt;paramref name=&quot;addr3&quot; /&gt; parameter is the offset from the stack pointer to the high-order part of the value.">Adresse relative au Registre. Le paramètre <paramref name="addr1" /> représente le Registre de poids faible, le paramètre <paramref name="addr2" /> le Registre de pile et le paramètre <paramref name="addr3" /> l'offset du pointeur de pile vers la partie de poids fort de la valeur.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRVA">
      <summary vsli:raw="A native Relevant Virtual Address (RVA). The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the RVA in the module.">Adresse RVA (Relevant Virtual Address) native. Le paramètre <paramref name="addr1" /> représente l'adresse RVA dans le module.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeSectionOffset">
      <summary vsli:raw="A native section offset. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the section, and the &lt;paramref name=&quot;addr2&quot; /&gt; parameter is the offset.">Offset de section natif. Le paramètre <paramref name="addr1" /> correspond à la section et le paramètre <paramref name="addr2" /> à l'offset.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeStackRegister">
      <summary vsli:raw="A register-relative address. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the stack register, the &lt;paramref name=&quot;addr2&quot; /&gt; parameter is the offset from the stack pointer to the low-order part of the value, and the &lt;paramref name=&quot;addr3&quot; /&gt; parameter is the high-order register.">Adresse relative au Registre. Le paramètre <paramref name="addr1" /> représente le Registre de pile, le paramètre <paramref name="addr2" /> l'offset du pointeur de pile vers la partie de poids faible de la valeur et le paramètre <paramref name="addr3" /> le Registre de poids fort.</summary>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymbolToken">
      <summary vsli:raw="The &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; structure is an object representation of a token that represents symbolic information.">La structure <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> est une représentation objet d'un jeton qui représente une information symbolique.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; structure when given a value.">Initialise une nouvelle instance de la structure <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> lorsqu'une valeur est fournie.</summary>
      <param name="val" vsli:raw="The value to be used for the token.">Valeur à utiliser pour le jeton.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.Equals(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary vsli:raw="Determines whether &lt;paramref name=&quot;obj&quot; /&gt; is equal to this instance.">Détermine si <paramref name="obj" /> est égal à cette instance.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; to check.">
        <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> à vérifier.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is equal to this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="obj" /> est égal à cette instance ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.Equals(System.Object)">
      <summary vsli:raw="Determines whether &lt;paramref name=&quot;obj&quot; /&gt; is an instance of &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; and is equal to this instance.">Détermine si <paramref name="obj" /> est une instance de <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> et s'il est égal à cette instance.</summary>
      <param name="obj" vsli:raw="The object to check.">Objet à vérifier.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is an instance of &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; and is equal to this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="obj" /> est une instance de <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> et s'il est égal à cette instance ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.GetHashCode">
      <summary vsli:raw="Generates the hash code for the current token.">Génère le code de hachage pour le jeton en cours.</summary>
      <returns vsli:raw="The hash code for the current token.">Code de hachage du jeton en cours.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.GetToken">
      <summary vsli:raw="Gets the value of the current token.">Obtient la valeur du jeton en cours.</summary>
      <returns vsli:raw="The value of the current token.">Valeur du jeton en cours.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.op_Equality(System.Diagnostics.SymbolStore.SymbolToken,System.Diagnostics.SymbolStore.SymbolToken)">
      <summary vsli:raw="Returns a value indicating whether two &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; objects are equal.">Retourne une valeur indiquant si deux objets <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> sont égaux.</summary>
      <param name="a" vsli:raw="A &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; structure.">Structure <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />.</param>
      <param name="b" vsli:raw="A &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; structure.">Structure <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;a&quot; /&gt; and &lt;paramref name=&quot;b&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="a" /> et <paramref name="b" /> sont égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.op_Inequality(System.Diagnostics.SymbolStore.SymbolToken,System.Diagnostics.SymbolStore.SymbolToken)">
      <summary vsli:raw="Returns a value indicating whether two &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; objects are not equal.">Retourne une valeur indiquant si deux objets <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> sont égaux.</summary>
      <param name="a" vsli:raw="A &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; structure.">Structure <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />.</param>
      <param name="b" vsli:raw="A &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; structure.">Structure <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;a&quot; /&gt; and &lt;paramref name=&quot;b&quot; /&gt; are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="a" /> et <paramref name="b" /> ne sont pas égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymDocumentType">
      <summary vsli:raw="Holds the public GUIDs for document types to be used with the symbol store.">Contient les GUID publics des types de documents à utiliser avec le magasin de symboles.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymDocumentType.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymDocumentType&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.SymbolStore.SymDocumentType" />.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymDocumentType.Text">
      <summary vsli:raw="Specifies the GUID of the document type to be used with the symbol store.">Spécifie le GUID du type de document à utiliser avec le magasin de symboles.</summary>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymLanguageType">
      <summary vsli:raw="Holds the public GUIDs for language types to be used with the symbol store.">Contient les GUID publics des types de langages à utiliser avec le magasin de symboles.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymLanguageType.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymLanguageType&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.SymbolStore.SymLanguageType" />.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Basic">
      <summary vsli:raw="Specifies the GUID of the Basic language type to be used with the symbol store.">Spécifie le GUID du type de langage Basic à utiliser avec le magasin de symboles.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.C">
      <summary vsli:raw="Specifies the GUID of the C language type to be used with the symbol store.">Spécifie le GUID du type de langage C à utiliser avec le magasin de symboles.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Cobol">
      <summary vsli:raw="Specifies the GUID of the Cobol language type to be used with the symbol store.">Spécifie le GUID du type de langage Cobol à utiliser avec le magasin de symboles.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.CPlusPlus">
      <summary vsli:raw="Specifies the GUID of the C++ language type to be used with the symbol store.">Spécifie le GUID du type de langage C++ à utiliser avec le magasin de symboles.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.CSharp">
      <summary vsli:raw="Specifies the GUID of the C# language type to be used with the symbol store.">Spécifie le GUID du type de langage C# à utiliser avec le magasin de symboles.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.ILAssembly">
      <summary vsli:raw="Specifies the GUID of the ILAssembly language type to be used with the symbol store.">Spécifie le GUID du type de langage ILAssembly à utiliser avec le magasin de symboles.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Java">
      <summary vsli:raw="Specifies the GUID of the Java language type to be used with the symbol store.">Spécifie le GUID du type de langage Java à utiliser avec le magasin de symboles.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.JScript">
      <summary vsli:raw="Specifies the GUID of the JScript language type to be used with the symbol store.">Spécifie le GUID du type de langage JScript à utiliser avec le magasin de symboles.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.MCPlusPlus">
      <summary vsli:raw="Specifies the GUID of the C++ language type to be used with the symbol store.">Spécifie le GUID du type de langage C++ à utiliser avec le magasin de symboles.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Pascal">
      <summary vsli:raw="Specifies the GUID of the Pascal language type to be used with the symbol store.">Spécifie le GUID du type de langage Pascal à utiliser avec le magasin de symboles.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.SMC">
      <summary vsli:raw="Specifies the GUID of the SMC language type to be used with the symbol store.">Spécifie le GUID du type de langage SMC à utiliser avec le magasin de symboles.</summary>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymLanguageVendor">
      <summary vsli:raw="Holds the public GUIDs for language vendors to be used with the symbol store.">Contient les GUID publics des fournisseurs de langage à utiliser avec le magasin de symboles.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymLanguageVendor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymLanguageVendor&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.SymbolStore.SymLanguageVendor" />.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageVendor.Microsoft">
      <summary vsli:raw="Specifies the GUID of the Microsoft language vendor.">Spécifie le GUID du fournisseur de langage Microsoft.</summary>
    </member>
  </members>
</doc>
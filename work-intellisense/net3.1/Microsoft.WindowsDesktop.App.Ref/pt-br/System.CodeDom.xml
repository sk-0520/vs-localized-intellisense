<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.CodeDom</name>
  </assembly>
  <members>
    <member name="T:Microsoft.CSharp.CSharpCodeProvider">
      <summary vsli:raw="Provides access to instances of the C# code generator and code compiler.">Fornece acesso às instâncias do gerador de código e do compilador de código C#.</summary>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:Microsoft.CSharp.CSharpCodeProvider&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:Microsoft.CSharp.CSharpCodeProvider" />.</summary>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:Microsoft.CSharp.CSharpCodeProvider&quot; /&gt; class by using the specified provider options.">Inicializa uma nova instância da classe <see cref="T:Microsoft.CSharp.CSharpCodeProvider" /> usando as opções de provedor especificadas.</summary>
      <param name="providerOptions" vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; object that contains the provider options.">Um objeto <see cref="T:System.Collections.Generic.IDictionary`2" /> que contém as opções de provedor do arquivo de configuração.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;providerOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="providerOptions" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.CreateCompiler">
      <summary vsli:raw="Gets an instance of the C# code compiler.">Obtém uma instância do compilador de código C#.</summary>
      <returns vsli:raw="An instance of the C# &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeCompiler&quot; /&gt; implementation.">Uma instância da implementação <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> do C#.</returns>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.CreateGenerator">
      <summary vsli:raw="Gets an instance of the C# code generator.">Obtém uma instância do gerador de código C#.</summary>
      <returns vsli:raw="An instance of the C# &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeGenerator&quot; /&gt; implementation.">Uma instância da implementação <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> do C#.</returns>
    </member>
    <member name="P:Microsoft.CSharp.CSharpCodeProvider.FileExtension">
      <summary vsli:raw="Gets the file name extension to use when creating source code files.">Obtém a extensão de nome de arquivo a ser usada ao criar arquivos de código-fonte.</summary>
      <returns vsli:raw="The file name extension to use for generated source code files.">A extensão de nome de arquivo a ser usada para arquivos de código-fonte gerados.</returns>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified class member using the specified text writer and code generator options.">Gera código para o membro de classe especificado usando as opções de gerador de código e text writer especificadas.</summary>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; to generate code for.">Um <see cref="T:System.CodeDom.CodeTypeMember" /> para o qual o código deve ser gerado.</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to write to.">O <see cref="T:System.IO.TextWriter" /> no qual ocorrerá a gravação.</param>
      <param name="options" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; to use when generating the code.">As <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> a serem usadas ao gerar o código.</param>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.GetConverter(System.Type)">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified type of object.">Obtém um <see cref="T:System.ComponentModel.TypeConverter" /> para o tipo de objeto especificado.</summary>
      <param name="type" vsli:raw="The type of object to retrieve a type converter for.">O tipo de objeto para o qual recuperar um conversor de tipo.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified type.">Um <see cref="T:System.ComponentModel.TypeConverter" /> para o tipo especificado.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.VBCodeProvider">
      <summary vsli:raw="Provides access to instances of the Visual Basic code generator and code compiler.">Fornece acesso às instâncias do gerador de código e do compilador de código do Visual Basic.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:Microsoft.VisualBasic.VBCodeProvider&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:Microsoft.VisualBasic.VBCodeProvider" />.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:Microsoft.VisualBasic.VBCodeProvider&quot; /&gt; class by using the specified provider options.">Inicializa uma nova instância da classe <see cref="T:Microsoft.VisualBasic.VBCodeProvider" /> usando as opções de provedor especificadas.</summary>
      <param name="providerOptions" vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; object that contains the provider options.">Um objeto <see cref="T:System.Collections.Generic.IDictionary`2" /> que contém as opções de provedor do arquivo de configuração.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;providerOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="providerOptions" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.CreateCompiler">
      <summary vsli:raw="Gets an instance of the Visual Basic code compiler.">Obtém uma instância do compilador de código do Visual Basic.</summary>
      <returns vsli:raw="An instance of the Visual Basic &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeCompiler&quot; /&gt; implementation.">Uma instância da implementação do Visual Basic <see cref="T:System.CodeDom.Compiler.ICodeCompiler" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.CreateGenerator">
      <summary vsli:raw="Gets an instance of the Visual Basic code generator.">Obtém uma instância do gerador de código do Visual Basic.</summary>
      <returns vsli:raw="An instance of the Visual Basic &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeGenerator&quot; /&gt; implementation.">Uma instância da implementação do Visual Basic <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.VBCodeProvider.FileExtension">
      <summary vsli:raw="Gets the file name extension to use when creating source code files.">Obtém a extensão de nome de arquivo a ser usada ao criar arquivos de código-fonte.</summary>
      <returns vsli:raw="The file name extension to use for generated source code files.">A extensão de nome de arquivo a ser usada para arquivos de código-fonte gerados.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified class member using the specified text writer and code generator options.">Gera um código para o membro de classe especificado usando as opções do gerador de código e do text writer especificadas.</summary>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; to generate code for.">Um <see cref="T:System.CodeDom.CodeTypeMember" /> para o qual o código deve ser gerado.</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to write to.">O <see cref="T:System.IO.TextWriter" /> no qual ocorrerá a gravação.</param>
      <param name="options" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; to use when generating the code.">As <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> a serem usadas ao gerar o código.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.GetConverter(System.Type)">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified type of object.">Obtém um <see cref="T:System.ComponentModel.TypeConverter" /> para o tipo de objeto especificado.</summary>
      <param name="type" vsli:raw="The type of object to retrieve a type converter for.">O tipo de objeto para o qual um conversor de tipo deve ser recuperado.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified type.">Um <see cref="T:System.ComponentModel.TypeConverter" /> para o tipo especificado.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.VBCodeProvider.LanguageOptions">
      <summary vsli:raw="Gets a language features identifier.">Obtém um identificador de recursos de idioma.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.LanguageOptions&quot; /&gt; that indicates special features of the language.">Um <see cref="T:System.CodeDom.Compiler.LanguageOptions" /> que indica os recursos especiais do idioma.</returns>
    </member>
    <member name="T:System.CodeDom.CodeArgumentReferenceExpression">
      <summary vsli:raw="Represents a reference to the value of an argument passed to a method.">Representa uma referência ao valor de um argumento passado para um método.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArgumentReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArgumentReferenceExpression&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArgumentReferenceExpression.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArgumentReferenceExpression&quot; /&gt; class using the specified parameter name.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" /> usando o nome do parâmetro especificado.</summary>
      <param name="parameterName" vsli:raw="The name of the parameter to reference.">O nome do parâmetro a ser referenciado.</param>
    </member>
    <member name="P:System.CodeDom.CodeArgumentReferenceExpression.ParameterName">
      <summary vsli:raw="Gets or sets the name of the parameter this expression references.">Obtém ou define o nome do parâmetro que essa expressão referencia.</summary>
      <returns vsli:raw="The name of the parameter to reference.">O nome do parâmetro a ser referenciado.</returns>
    </member>
    <member name="T:System.CodeDom.CodeArrayCreateExpression">
      <summary vsli:raw="Represents an expression that creates an array.">Representa uma expressão que cria uma matriz.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeArrayCreateExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type and code expression indicating the number of indexes for the array.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> usando o tipo de dados da matriz especificado e a expressão de código indicando o número de índices para a matriz.</summary>
      <param name="createType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; indicating the data type of the array to create.">Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo de dados da matriz a ser criada.</param>
      <param name="size" vsli:raw="An expression that indicates the number of indexes of the array to create.">Uma expressão que indica o número de índices da matriz a ser criada.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type and initialization expressions.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> usando as expressões de inicialização e o tipo de dados da matriz especificados.</summary>
      <param name="createType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the array to create.">Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo de dados da matriz a ser criada.</param>
      <param name="initializers" vsli:raw="An array of expressions to use to initialize the array.">Uma matriz de expressões a serem usadas para inicializar a matriz.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type and number of indexes for the array.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> usando o tipo de dados da matriz especificado e o número de índices para a matriz.</summary>
      <param name="createType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; indicating the data type of the array to create.">Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo de dados da matriz a ser criada.</param>
      <param name="size" vsli:raw="The number of indexes of the array to create.">O número de índices da matriz a ser criada.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type name and code expression indicating the number of indexes for the array.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> usando o nome do tipo de dados da matriz especificado e a expressão de código indicando o número de índices para a matriz.</summary>
      <param name="createType" vsli:raw="The name of the data type of the array to create.">O nome do tipo de dados da matriz a ser criada.</param>
      <param name="size" vsli:raw="An expression that indicates the number of indexes of the array to create.">Uma expressão que indica o número de índices da matriz a ser criada.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type name and initializers.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> usando os inicializadores e o nome do tipo de dados da matriz especificados.</summary>
      <param name="createType" vsli:raw="The name of the data type of the array to create.">O nome do tipo de dados da matriz a ser criada.</param>
      <param name="initializers" vsli:raw="An array of expressions to use to initialize the array.">Uma matriz de expressões a serem usadas para inicializar a matriz.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type name and number of indexes for the array.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> usando o nome do tipo de dados da matriz especificado e o número de índices para a matriz.</summary>
      <param name="createType" vsli:raw="The name of the data type of the array to create.">O nome do tipo de dados da matriz a ser criada.</param>
      <param name="size" vsli:raw="The number of indexes of the array to create.">O número de índices da matriz a ser criada.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type and code expression indicating the number of indexes for the array.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> usando o tipo de dados da matriz especificado e a expressão de código indicando o número de índices para a matriz.</summary>
      <param name="createType" vsli:raw="The data type of the array to create.">O tipo de dados da matriz a ser criada.</param>
      <param name="size" vsli:raw="An expression that indicates the number of indexes of the array to create.">Uma expressão que indica o número de índices da matriz a ser criada.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type and initializers.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> usando os inicializadores e o tipo de dados da matriz especificados.</summary>
      <param name="createType" vsli:raw="The data type of the array to create.">O tipo de dados da matriz a ser criada.</param>
      <param name="initializers" vsli:raw="An array of expressions to use to initialize the array.">Uma matriz de expressões a serem usadas para inicializar a matriz.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type and number of indexes for the array.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> usando o tipo de dados da matriz especificado e o número de índices para a matriz.</summary>
      <param name="createType" vsli:raw="The data type of the array to create.">O tipo de dados da matriz a ser criada.</param>
      <param name="size" vsli:raw="The number of indexes of the array to create.">O número de índices da matriz a ser criada.</param>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.CreateType">
      <summary vsli:raw="Gets or sets the type of array to create.">Obtém ou define o tipo da matriz a ser criada.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type of the array.">Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo da matriz.</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.Initializers">
      <summary vsli:raw="Gets the initializers with which to initialize the array.">Obtém os inicializadores com os quais inicializar a matriz.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that indicates the initialization values.">Um <see cref="T:System.CodeDom.CodeExpressionCollection" /> valor que indica os valores de inicialização.</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.Size">
      <summary vsli:raw="Gets or sets the number of indexes in the array.">Obtém ou define o número de índices na matriz.</summary>
      <returns vsli:raw="The number of indexes in the array.">O número de índices na matriz.</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.SizeExpression">
      <summary vsli:raw="Gets or sets the expression that indicates the size of the array.">Obtém ou define a expressão que indica o tamanho da matriz.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the size of the array.">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o tamanho da matriz.</returns>
    </member>
    <member name="T:System.CodeDom.CodeArrayIndexerExpression">
      <summary vsli:raw="Represents a reference to an index of an array.">Representa uma referência a um índice de uma matriz.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayIndexerExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayIndexerExpression&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeArrayIndexerExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayIndexerExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayIndexerExpression&quot; /&gt; class using the specified target object and indexes.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeArrayIndexerExpression" /> usando os índices e o objeto de destino especificados.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the array the indexer targets.">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica a matriz usada como destino pelo indexador.</param>
      <param name="indices" vsli:raw="The index or indexes to reference.">O índice ou índices a referenciar.</param>
    </member>
    <member name="P:System.CodeDom.CodeArrayIndexerExpression.Indices">
      <summary vsli:raw="Gets or sets the index or indexes of the indexer expression.">Obtém ou define o índice ou índices da expressão do indexador.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that indicates the index or indexes of the indexer expression.">Um <see cref="T:System.CodeDom.CodeExpressionCollection" /> que indica o índice ou índices da expressão do indexador.</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayIndexerExpression.TargetObject">
      <summary vsli:raw="Gets or sets the target object of the array indexer.">Obtém ou define o objeto de destino do indexador de matriz.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that represents the array being indexed.">Um <see cref="T:System.CodeDom.CodeExpression" /> que representa a matriz que está sendo indexada.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAssignStatement">
      <summary vsli:raw="Represents a simple assignment statement.">Representa uma instrução de atribuição simples.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAssignStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAssignStatement&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeAssignStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAssignStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAssignStatement&quot; /&gt; class using the specified expressions.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeAssignStatement" /> usando as expressões especificadas.</summary>
      <param name="left" vsli:raw="The variable to assign to.">A variável à qual atribuir.</param>
      <param name="right" vsli:raw="The value to assign.">O valor a atribuir.</param>
    </member>
    <member name="P:System.CodeDom.CodeAssignStatement.Left">
      <summary vsli:raw="Gets or sets the expression representing the object or reference to assign to.">Obtém ou define a expressão que representa o objeto ou uma referência à qual atribuir.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object or reference to assign to.">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o objeto ou referência a ser atribuído a.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAssignStatement.Right">
      <summary vsli:raw="Gets or sets the expression representing the object or reference to assign.">Obtém ou define a expressão que representa o objeto ou uma referência a atribuir.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object or reference to assign.">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o objeto ou a referência a atribuir.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttachEventStatement">
      <summary vsli:raw="Represents a statement that attaches an event-handler delegate to an event.">Representa uma instrução que anexa um delegado do manipulador de eventos a um evento.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttachEventStatement&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeAttachEventStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor(System.CodeDom.CodeEventReferenceExpression,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttachEventStatement&quot; /&gt; class using the specified event and delegate.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeAttachEventStatement" /> usando o evento e o delegado especificados.</summary>
      <param name="eventRef" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeEventReferenceExpression&quot; /&gt; that indicates the event to attach an event handler to.">Um <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> que indica o evento ao qual anexar um manipulador de eventos.</param>
      <param name="listener" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the new event handler.">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o novo manipulador de eventos.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttachEventStatement&quot; /&gt; class using the specified object containing the event, event name, and event-handler delegate.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeAttachEventStatement" /> usando o objeto especificado contendo o evento, o nome do evento e o delegado do manipulador de eventos.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the event.">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o objeto que contém o evento.</param>
      <param name="eventName" vsli:raw="The name of the event to attach an event handler to.">O nome do evento ao qual anexar um manipulador de eventos.</param>
      <param name="listener" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the new event handler.">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o novo manipulador de eventos.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttachEventStatement.Event">
      <summary vsli:raw="Gets or sets the event to attach an event-handler delegate to.">Obtém ou define o evento ao qual anexar um delegado do manipulador de eventos.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeEventReferenceExpression&quot; /&gt; that indicates the event to attach an event handler to.">Um <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> que indica o evento ao qual anexar um manipulador de eventos.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttachEventStatement.Listener">
      <summary vsli:raw="Gets or sets the new event-handler delegate to attach to the event.">Obtém ou define o novo delegado de manipulador de eventos a anexar ao evento.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the new event handler to attach.">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o novo manipulador de eventos a ser anexado.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeArgument">
      <summary vsli:raw="Represents an argument used in a metadata attribute declaration.">Representa um argumento usado em uma declaração de atributo de metadados.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeAttributeArgument" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; class using the specified value.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeAttributeArgument" /> usando o valor especificado.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that represents the value of the argument.">Um <see cref="T:System.CodeDom.CodeExpression" /> que representa o valor do argumento.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; class using the specified name and value.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeAttributeArgument" /> usando o nome e o valor especificados.</summary>
      <param name="name" vsli:raw="The name of the attribute property the argument applies to.">O nome da propriedade de atributo à qual o argumento se aplica.</param>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that represents the value of the argument.">Um <see cref="T:System.CodeDom.CodeExpression" /> que representa o valor do argumento.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgument.Name">
      <summary vsli:raw="Gets or sets the name of the attribute.">Obtém ou define o nome do atributo.</summary>
      <returns vsli:raw="The name of the attribute property the argument is for.">O nome da propriedade de atributo para o qual o argumento é.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgument.Value">
      <summary vsli:raw="Gets or sets the value for the attribute argument.">Obtém ou define o valor do argumento de atributo.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the value for the attribute argument.">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o valor para o argumento de atributo.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeArgumentCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; objects.">Representa uma coleção de objetos <see cref="T:System.CodeDom.CodeAttributeArgument" /> .</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor(System.CodeDom.CodeAttributeArgument[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; objects.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> contendo a matriz de objetos <see cref="T:System.CodeDom.CodeAttributeArgument" /> especificada.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; objects with which to initialize the collection.">Uma matriz de objetos <see cref="T:System.CodeDom.CodeAttributeArgument" /> com os quais inicializar a coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more objects in the array are &lt;see langword=&quot;null&quot; /&gt;.">Um ou mais objetos na matriz são <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor(System.CodeDom.CodeAttributeArgumentCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; class containing the elements of the specified source collection.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" />, que contém os elementos da coleção de origem especificada.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; with which to initialize the collection.">Um <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> com o qual inicializar a coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Add(System.CodeDom.CodeAttributeArgument)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object to the collection.">Adiciona o objeto <see cref="T:System.CodeDom.CodeAttributeArgument" /> especificado à coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object to add.">O objeto <see cref="T:System.CodeDom.CodeAttributeArgument" /> a ser adicionado.</param>
      <returns vsli:raw="The index at which the new element was inserted.">O índice no qual o novo elemento foi inserido.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.AddRange(System.CodeDom.CodeAttributeArgument[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; array to the end of the collection.">Copia os elementos da matriz <see cref="T:System.CodeDom.CodeAttributeArgument" /> especificada para o fim da coleção.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; that contains the objects to add to the collection.">Uma matriz do tipo <see cref="T:System.CodeDom.CodeAttributeArgument" /> que contém os objetos a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.AddRange(System.CodeDom.CodeAttributeArgumentCollection)">
      <summary vsli:raw="Copies the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; object to the end of the collection.">Copia o conteúdo de outro objeto <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> para o final da coleção.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; that contains the objects to add to the collection.">Um <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> que contém os objetos a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Contains(System.CodeDom.CodeAttributeArgument)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object.">Obtém um valor que indica se a coleção contém o objeto <see cref="T:System.CodeDom.CodeAttributeArgument" /> especificado.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object to locate in the collection.">O objeto <see cref="T:System.CodeDom.CodeAttributeArgument" /> a ser localizado na coleção.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a coleção contiver o objeto especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.CopyTo(System.CodeDom.CodeAttributeArgument[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance beginning at the specified index.">Copia os objetos de coleção para uma instância de <see cref="T:System.Array" /> unidimensional, começando no índice especificado.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">O <see cref="T:System.Array" /> unidimensional que é o destino dos valores copiados da coleção.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">O índice da matriz no qual iniciar a inserção.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">A matriz de destino é multidimensional.
- ou -
O número de elementos na <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> é maior do que o espaço disponível entre o índice da matriz de destino especificada pelo parâmetro <paramref name="index" /> e o final da matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">O parâmetro <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">O parâmetro <paramref name="index" /> é menor do que o índice mínimo da matriz de destino.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.IndexOf(System.CodeDom.CodeAttributeArgument)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object in the collection, if it exists in the collection.">Obtém o índice do objeto <see cref="T:System.CodeDom.CodeAttributeArgument" /> especificado na coleção, se ele existe na coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object to locate in the collection.">O objeto <see cref="T:System.CodeDom.CodeAttributeArgument" /> a ser localizado na coleção.</param>
      <returns vsli:raw="The index of the specified object, if found, in the collection; otherwise, -1.">O índice do objeto especificado, se encontrado, na coleção; caso contrário, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Insert(System.Int32,System.CodeDom.CodeAttributeArgument)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object into the collection at the specified index.">Insere o objeto <see cref="T:System.CodeDom.CodeAttributeArgument" /> especificado na coleção no índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">O índice baseado em zero em que o objeto especificado deverá ser inserido.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object to insert.">O objeto <see cref="T:System.CodeDom.CodeAttributeArgument" /> a ser inserido.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgumentCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object at the specified index in the collection.">Obtém ou define o objeto <see cref="T:System.CodeDom.CodeAttributeArgument" /> no índice especificado na coleção.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">O índice da coleção a ser acessada.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; at each valid index.">A <see cref="T:System.CodeDom.CodeAttributeArgument" /> em cada índice válido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">O parâmetro <paramref name="index" /> está fora do intervalo válido de índices para a coleção.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Remove(System.CodeDom.CodeAttributeArgument)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object from the collection.">Remove o objeto <see cref="T:System.CodeDom.CodeAttributeArgument" /> especificado da coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object to remove from the collection.">O objeto <see cref="T:System.CodeDom.CodeAttributeArgument" /> a ser removido da coleção.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">O objeto especificado não foi localizado na coleção.</exception>
    </member>
    <member name="T:System.CodeDom.CodeAttributeDeclaration">
      <summary vsli:raw="Represents an attribute declaration.">Representa uma declaração de atributo.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeAttributeDeclaration" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; class using the specified code type reference.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> usando a referência de tipo de código especificada.</summary>
      <param name="attributeType" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that identifies the attribute.">O <see cref="T:System.CodeDom.CodeTypeReference" /> que identifica o atributo.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeAttributeArgument[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; class using the specified code type reference and arguments.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> usando a referência de tipo de código e argumentos especificados.</summary>
      <param name="attributeType" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that identifies the attribute.">O <see cref="T:System.CodeDom.CodeTypeReference" /> que identifica o atributo.</param>
      <param name="arguments" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; that contains the arguments for the attribute.">Uma matriz do tipo <see cref="T:System.CodeDom.CodeAttributeArgument" /> que contém os argumentos para o atributo.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; class using the specified name.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> usando o nome especificado.</summary>
      <param name="name" vsli:raw="The name of the attribute.">O nome do atributo.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.String,System.CodeDom.CodeAttributeArgument[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; class using the specified name and arguments.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> usando o nome e os argumentos especificados.</summary>
      <param name="name" vsli:raw="The name of the attribute.">O nome do atributo.</param>
      <param name="arguments" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; that contains the arguments for the attribute.">Uma matriz do tipo <see cref="T:System.CodeDom.CodeAttributeArgument" /> que contém os argumentos para o atributo.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.Arguments">
      <summary vsli:raw="Gets the arguments for the attribute.">Obtém os argumentos para o atributo.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; that contains the arguments for the attribute.">Um <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> que contém os argumentos para o atributo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.AttributeType">
      <summary vsli:raw="Gets the code type reference for the code attribute declaration.">Obtém a referência de tipo de código para a declaração de atributo de código.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that identifies the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt;.">Um <see cref="T:System.CodeDom.CodeTypeReference" /> que identifica o <see cref="T:System.CodeDom.CodeAttributeDeclaration" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.Name">
      <summary vsli:raw="Gets or sets the name of the attribute being declared.">Obtém ou define o nome do atributo sendo declarado.</summary>
      <returns vsli:raw="The name of the attribute.">O nome do atributo.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeDeclarationCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; objects.">Representa uma coleção de objetos <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> .</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor(System.CodeDom.CodeAttributeDeclaration[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; objects.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> contendo a matriz de objetos <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> especificada.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; objects with which to initialize the collection.">Uma matriz de objetos <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> com os quais inicializar a coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more objects in the array are &lt;see langword=&quot;null&quot; /&gt;.">Um ou mais objetos na matriz são <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; class containing the elements of the specified source collection.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />, que contém os elementos da coleção de origem especificada.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; with which to initialize the collection.">Um <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> com o qual inicializar a coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Add(System.CodeDom.CodeAttributeDeclaration)">
      <summary vsli:raw="Adds a &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object with the specified value to the collection.">Adiciona um objeto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> com o valor especificado à coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object to add.">O objeto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> a ser adicionado.</param>
      <returns vsli:raw="The index at which the new element was inserted.">O índice no qual o novo elemento foi inserido.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.AddRange(System.CodeDom.CodeAttributeDeclaration[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; array to the end of the collection.">Copia os elementos da matriz <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> especificada para o fim da coleção.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; that contains the objects to add to the collection.">Uma matriz do tipo <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> que contém os objetos a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.AddRange(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary vsli:raw="Copies the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; object to the end of the collection.">Copia o conteúdo de outro objeto <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> para o final da coleção.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; that contains the objects to add to the collection.">Um <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> que contém os objetos a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Contains(System.CodeDom.CodeAttributeDeclaration)">
      <summary vsli:raw="Gets or sets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object.">Obtém ou define um valor que indica se a coleção contém o objeto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> especificado.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object to locate.">O objeto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> a ser localizado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a coleção contiver o objeto especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.CopyTo(System.CodeDom.CodeAttributeDeclaration[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance beginning at the specified index.">Copia os objetos de coleção para uma instância de <see cref="T:System.Array" /> unidimensional, começando no índice especificado.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">O <see cref="T:System.Array" /> unidimensional que é o destino dos valores copiados da coleção.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">O índice da matriz no qual iniciar a inserção.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">A matriz de destino é multidimensional.
- ou -
O número de elementos na <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> é maior do que o espaço disponível entre o índice da matriz de destino especificada pelo parâmetro <paramref name="index" /> e o final da matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">O parâmetro <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">O parâmetro <paramref name="index" /> é menor do que o índice mínimo da matriz de destino.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.IndexOf(System.CodeDom.CodeAttributeDeclaration)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object in the collection, if it exists in the collection.">Obtém o índice do objeto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> especificado na coleção, se ele existe na coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object to locate in the collection.">O objeto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> a ser localizado na coleção.</param>
      <returns vsli:raw="The index in the collection of the specified object, if found; otherwise, -1.">O índice na coleção do objeto especificado, se encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Insert(System.Int32,System.CodeDom.CodeAttributeDeclaration)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object into the collection at the specified index.">Insere o objeto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> especificado na coleção no índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">O índice baseado em zero em que o objeto especificado deverá ser inserido.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object to insert.">O objeto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> a ser inserido.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclarationCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object at the specified index.">Obtém ou define o objeto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> no índice especificado.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">O índice da coleção a ser acessada.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; at each valid index.">A <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> em cada índice válido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">O parâmetro <paramref name="index" /> está fora do intervalo válido de índices para a coleção.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Remove(System.CodeDom.CodeAttributeDeclaration)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object from the collection.">Remove o objeto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> especificado da coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object to remove from the collection.">O objeto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> a ser removido da coleção.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">O objeto especificado não foi localizado na coleção.</exception>
    </member>
    <member name="T:System.CodeDom.CodeBaseReferenceExpression">
      <summary vsli:raw="Represents a reference to the base class.">Representa uma referência à classe base.</summary>
    </member>
    <member name="M:System.CodeDom.CodeBaseReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeBaseReferenceExpression&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeBaseReferenceExpression" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeBinaryOperatorExpression">
      <summary vsli:raw="Represents an expression that consists of a binary operation between two expressions.">Representa uma expressão que consiste em uma operação binária entre duas expressões.</summary>
    </member>
    <member name="M:System.CodeDom.CodeBinaryOperatorExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeBinaryOperatorExpression&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeBinaryOperatorExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeBinaryOperatorType,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeBinaryOperatorExpression&quot; /&gt; class using the specified parameters.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" /> usando os parâmetros especificados.</summary>
      <param name="left" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; on the left of the operator.">O <see cref="T:System.CodeDom.CodeExpression" /> à esquerda do operador.</param>
      <param name="op" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeBinaryOperatorType&quot; /&gt; indicating the type of operator.">Um <see cref="T:System.CodeDom.CodeBinaryOperatorType" /> que indica o tipo do operador.</param>
      <param name="right" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; on the right of the operator.">O <see cref="T:System.CodeDom.CodeExpression" /> à direita do operador.</param>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Left">
      <summary vsli:raw="Gets or sets the code expression on the left of the operator.">Obtém ou define a expressão de código à esquerda do operador.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the left operand.">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o operando esquerdo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Operator">
      <summary vsli:raw="Gets or sets the operator in the binary operator expression.">Obtém ou define o operador na expressão de operador binário.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeBinaryOperatorType&quot; /&gt; that indicates the type of operator in the expression.">Um <see cref="T:System.CodeDom.CodeBinaryOperatorType" /> que indica o tipo de operador na expressão.</returns>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Right">
      <summary vsli:raw="Gets or sets the code expression on the right of the operator.">Obtém ou define a expressão de código à direita do operador.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the right operand.">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o operando à direita.</returns>
    </member>
    <member name="T:System.CodeDom.CodeBinaryOperatorType">
      <summary vsli:raw="Defines identifiers for supported binary operators.">Define os identificadores de operadores binários com suporte.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Add">
      <summary vsli:raw="Addition operator.">Operador de adição.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Assign">
      <summary vsli:raw="Assignment operator.">Operador de atribuição.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BitwiseAnd">
      <summary vsli:raw="Bitwise and operator.">Bit a bit e operador.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BitwiseOr">
      <summary vsli:raw="Bitwise or operator.">Bit a bit ou operador.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BooleanAnd">
      <summary vsli:raw="Boolean and operator. This represents a short circuiting operator. A short circuiting operator will evaluate only as many expressions as necessary before returning a correct value.">Booliano e operador. Isso representa um operador de curto-circuito. Um operador de curto-circuito avaliará apenas o número de expressões que forem necessárias antes de retornar um valor correto.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BooleanOr">
      <summary vsli:raw="Boolean or operator. This represents a short circuiting operator. A short circuiting operator will evaluate only as many expressions as necessary before returning a correct value.">Booliano ou operador. Isso representa um operador de curto-circuito. Um operador de curto-circuito avaliará apenas o número de expressões que forem necessárias antes de retornar um valor correto.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Divide">
      <summary vsli:raw="Division operator.">Operador de divisão.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.GreaterThan">
      <summary vsli:raw="Greater than operator.">Operador maior que.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.GreaterThanOrEqual">
      <summary vsli:raw="Greater than or equal operator.">Operador maior ou igual a.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.IdentityEquality">
      <summary vsli:raw="Identity equal operator.">Operador de identidade igual.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.IdentityInequality">
      <summary vsli:raw="Identity not equal operator.">Operador de identidade diferente.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.LessThan">
      <summary vsli:raw="Less than operator.">Operador menor que.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.LessThanOrEqual">
      <summary vsli:raw="Less than or equal operator.">Operador menor ou igual a.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Modulus">
      <summary vsli:raw="Modulus operator.">Operador de módulo.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Multiply">
      <summary vsli:raw="Multiplication operator.">Operador de multiplicação.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Subtract">
      <summary vsli:raw="Subtraction operator.">Operador de subtração.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.ValueEquality">
      <summary vsli:raw="Value equal operator.">Operador de valor igual.</summary>
    </member>
    <member name="T:System.CodeDom.CodeCastExpression">
      <summary vsli:raw="Represents an expression cast to a data type or interface.">Representa uma expressão convertida em um tipo de dados ou interface.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCastExpression&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeCastExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCastExpression&quot; /&gt; class using the specified destination type and expression.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeCastExpression" /> usando a expressão e o tipo de destino especificados.</summary>
      <param name="targetType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the destination type of the cast.">Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo de destino da conversão.</param>
      <param name="expression" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; to cast.">O <see cref="T:System.CodeDom.CodeExpression" /> a converter.</param>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCastExpression&quot; /&gt; class using the specified destination type and expression.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeCastExpression" /> usando a expressão e o tipo de destino especificados.</summary>
      <param name="targetType" vsli:raw="The name of the destination type of the cast.">O nome do tipo de destino da conversão.</param>
      <param name="expression" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; to cast.">O <see cref="T:System.CodeDom.CodeExpression" /> a converter.</param>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.Type,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCastExpression&quot; /&gt; class using the specified destination type and expression.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeCastExpression" /> usando a expressão e o tipo de destino especificados.</summary>
      <param name="targetType" vsli:raw="The destination data type of the cast.">O tipo de dados de destino da conversão.</param>
      <param name="expression" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; to cast.">O <see cref="T:System.CodeDom.CodeExpression" /> a converter.</param>
    </member>
    <member name="P:System.CodeDom.CodeCastExpression.Expression">
      <summary vsli:raw="Gets or sets the expression to cast.">Obtém ou define a expressão a converter.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the code to cast.">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o código a ser convertido.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCastExpression.TargetType">
      <summary vsli:raw="Gets or sets the destination type of the cast.">Obtém ou define o nome do tipo de destino da conversão.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the destination type to cast to.">Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo de destino a ser convertido.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCatchClause">
      <summary vsli:raw="Represents a &lt;see langword=&quot;catch&quot; /&gt; exception block of a &lt;see langword=&quot;try/catch&quot; /&gt; statement.">Representa um bloco de exceção <see langword="catch" /> de uma instrução <see langword="try/catch" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeCatchClause" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; class using the specified local variable name for the exception.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeCatchClause" /> usando o nome da variável local especificado para a exceção.</summary>
      <param name="localName" vsli:raw="The name of the local variable declared in the catch clause for the exception. This is optional.">O nome da variável local declarada na cláusula catch para a exceção. Esse campo é opcional.</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String,System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; class using the specified local variable name for the exception and exception type.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeCatchClause" /> usando o nome da variável local especificado para a exceção e o tipo de exceção.</summary>
      <param name="localName" vsli:raw="The name of the local variable declared in the catch clause for the exception. This is optional.">O nome da variável local declarada na cláusula catch para a exceção. Esse campo é opcional.</param>
      <param name="catchExceptionType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type of exception to catch.">Uma <see cref="T:System.CodeDom.CodeTypeReference" /> que especifica o tipo de exceção a ser capturada.</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String,System.CodeDom.CodeTypeReference,System.CodeDom.CodeStatement[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; class using the specified local variable name for the exception, exception type and statement collection.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeCatchClause" /> usando o nome da variável local especificado para a exceção, o tipo de exceção e a coleção de instruções.</summary>
      <param name="localName" vsli:raw="The name of the local variable declared in the catch clause for the exception. This is optional.">O nome da variável local declarada na cláusula catch para a exceção. Esse campo é opcional.</param>
      <param name="catchExceptionType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type of exception to catch.">Uma <see cref="T:System.CodeDom.CodeTypeReference" /> que especifica o tipo de exceção a ser capturada.</param>
      <param name="statements" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects that represent the contents of the catch block.">Uma matriz de objetos <see cref="T:System.CodeDom.CodeStatement" /> que representam o conteúdo do bloco catch.</param>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.CatchExceptionType">
      <summary vsli:raw="Gets or sets the type of the exception to handle with the catch block.">Obtém ou define o tipo da exceção a manipular com o bloco catch.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type of the exception to handle.">Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo da exceção a ser manipulada.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.LocalName">
      <summary vsli:raw="Gets or sets the variable name of the exception that the &lt;see langword=&quot;catch&quot; /&gt; clause handles.">Obtém ou define o nome da variável da exceção tratada pela cláusula <see langword="catch" />.</summary>
      <returns vsli:raw="The name for the exception variable that the &lt;see langword=&quot;catch&quot; /&gt; clause handles.">O nome da variável de exceção que a <see langword="catch" /> cláusula manipula.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.Statements">
      <summary vsli:raw="Gets the statements within the catch block.">Obtém as instruções dentro do bloco catch.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; containing the statements within the catch block.">Um <see cref="T:System.CodeDom.CodeStatementCollection" /> que contém as instruções dentro do bloco catch.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCatchClauseCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; objects.">Representa uma coleção de objetos <see cref="T:System.CodeDom.CodeCatchClause" /> .</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeCatchClauseCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor(System.CodeDom.CodeCatchClause[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; objects.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> contendo a matriz de objetos <see cref="T:System.CodeDom.CodeCatchClause" /> especificada.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; objects with which to initialize the collection.">Uma matriz de objetos <see cref="T:System.CodeDom.CodeCatchClause" /> com os quais inicializar a coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more objects in the array are &lt;see langword=&quot;null&quot; /&gt;.">Um ou mais objetos na matriz são <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor(System.CodeDom.CodeCatchClauseCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; class containing the elements of the specified source collection.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeCatchClauseCollection" />, que contém os elementos da coleção de origem especificada.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; with which to initialize the collection.">Um <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> com o qual inicializar a coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Add(System.CodeDom.CodeCatchClause)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object to the collection.">Adiciona o objeto <see cref="T:System.CodeDom.CodeCatchClause" /> especificado à coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object to add.">O objeto <see cref="T:System.CodeDom.CodeCatchClause" /> a ser adicionado.</param>
      <returns vsli:raw="The index at which the new element was inserted.">O índice no qual o novo elemento foi inserido.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.AddRange(System.CodeDom.CodeCatchClause[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; array to the end of the collection.">Copia os elementos da matriz <see cref="T:System.CodeDom.CodeCatchClause" /> especificada para o fim da coleção.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; that contains the objects to add to the collection.">Uma matriz do tipo <see cref="T:System.CodeDom.CodeCatchClause" /> que contém os objetos a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.AddRange(System.CodeDom.CodeCatchClauseCollection)">
      <summary vsli:raw="Copies the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; object to the end of the collection.">Copia o conteúdo de outro objeto <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> para o final da coleção.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; that contains the objects to add to the collection.">Um <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> que contém os objetos a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Contains(System.CodeDom.CodeCatchClause)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object.">Obtém um valor que indica se a coleção contém o objeto <see cref="T:System.CodeDom.CodeCatchClause" /> especificado.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object to locate in the collection.">O objeto <see cref="T:System.CodeDom.CodeCatchClause" /> a ser localizado na coleção.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a coleção contiver o objeto especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.CopyTo(System.CodeDom.CodeCatchClause[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance beginning at the specified index.">Copia os objetos de coleção para uma instância de <see cref="T:System.Array" /> unidimensional, começando no índice especificado.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">O <see cref="T:System.Array" /> unidimensional que é o destino dos valores copiados da coleção.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">O índice da matriz no qual iniciar a inserção.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">A matriz de destino é multidimensional.
- ou -
O número de elementos na <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> é maior do que o espaço disponível entre o índice da matriz de destino especificada pelo parâmetro <paramref name="index" /> e o final da matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">O parâmetro <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">O parâmetro <paramref name="index" /> é menor do que o índice mínimo da matriz de destino.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.IndexOf(System.CodeDom.CodeCatchClause)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object in the collection, if it exists in the collection.">Obtém o índice do objeto <see cref="T:System.CodeDom.CodeCatchClause" /> especificado na coleção, se ele existe na coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object to locate in the collection.">O objeto <see cref="T:System.CodeDom.CodeCatchClause" /> a ser localizado na coleção.</param>
      <returns vsli:raw="The index of the specified object, if found, in the collection; otherwise, -1.">O índice do objeto especificado, se encontrado, na coleção; caso contrário, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Insert(System.Int32,System.CodeDom.CodeCatchClause)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object into the collection at the specified index.">Insere o objeto <see cref="T:System.CodeDom.CodeCatchClause" /> especificado na coleção no índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">O índice baseado em zero em que o objeto especificado deverá ser inserido.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object to insert.">O objeto <see cref="T:System.CodeDom.CodeCatchClause" /> a ser inserido.</param>
    </member>
    <member name="P:System.CodeDom.CodeCatchClauseCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object at the specified index in the collection.">Obtém ou define o objeto <see cref="T:System.CodeDom.CodeCatchClause" /> no índice especificado na coleção.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">O índice da coleção a ser acessada.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object at each valid index.">Um <see cref="T:System.CodeDom.CodeCatchClause" /> objeto em cada índice válido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">O parâmetro <paramref name="index" /> está fora do intervalo válido de índices para a coleção.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Remove(System.CodeDom.CodeCatchClause)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object from the collection.">Remove o objeto <see cref="T:System.CodeDom.CodeCatchClause" /> especificado da coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object to remove from the collection.">O objeto <see cref="T:System.CodeDom.CodeCatchClause" /> a ser removido da coleção.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">O objeto especificado não foi localizado na coleção.</exception>
    </member>
    <member name="T:System.CodeDom.CodeChecksumPragma">
      <summary vsli:raw="Represents a code checksum pragma code entity.">Representa uma entidade de código de pragma de soma de verificação de código.</summary>
    </member>
    <member name="M:System.CodeDom.CodeChecksumPragma.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeChecksumPragma&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeChecksumPragma" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeChecksumPragma.#ctor(System.String,System.Guid,System.Byte[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeChecksumPragma&quot; /&gt; class using a file name, a GUID representing the checksum algorithm, and a byte stream representing the checksum data.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeChecksumPragma" /> usando um nome do arquivo, um GUID que representa o algoritmo de soma de verificação e um fluxo de bytes que representa os dados de soma de verificação.</summary>
      <param name="fileName" vsli:raw="The path to the checksum file.">O caminho para o arquivo de soma de verificação.</param>
      <param name="checksumAlgorithmId" vsli:raw="A &lt;see cref=&quot;T:System.Guid&quot; /&gt; that identifies the checksum algorithm to use.">Um <see cref="T:System.Guid" /> que identifica o algoritmo de soma de verificação a ser usado.</param>
      <param name="checksumData" vsli:raw="A byte array that contains the checksum data.">Uma matriz de bytes que contém os dados de soma de verificação.</param>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.ChecksumAlgorithmId">
      <summary vsli:raw="Gets or sets a GUID that identifies the checksum algorithm to use.">Obtém ou define um GUID que identifica o algoritmo de soma de verificação a ser usado.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Guid&quot; /&gt; that identifies the checksum algorithm to use.">Um <see cref="T:System.Guid" /> que identifica o algoritmo de soma de verificação a ser usado.</returns>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.ChecksumData">
      <summary vsli:raw="Gets or sets the value of the data for the checksum calculation.">Obtém ou define o valor dos dados para o cálculo da soma de verificação.</summary>
      <returns vsli:raw="A byte array that contains the data for the checksum calculation.">Uma matriz de bytes que contém os dados para o cálculo da soma de verificação.</returns>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.FileName">
      <summary vsli:raw="Gets or sets the path to the checksum file.">Obtém ou define o caminho para o arquivo de soma de verificação.</summary>
      <returns vsli:raw="The path to the checksum file.">O caminho para o arquivo de soma de verificação.</returns>
    </member>
    <member name="T:System.CodeDom.CodeComment">
      <summary vsli:raw="Represents a comment.">Representa um comentário.</summary>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeComment&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeComment" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeComment&quot; /&gt; class with the specified text as contents.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeComment" /> com o texto especificado como conteúdo.</summary>
      <param name="text" vsli:raw="The contents of the comment.">O conteúdo do comentário.</param>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor(System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeComment&quot; /&gt; class using the specified text and documentation comment flag.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeComment" /> usando o texto e o sinalizador de comentário de documentação especificados.</summary>
      <param name="text" vsli:raw="The contents of the comment.">O conteúdo do comentário.</param>
      <param name="docComment" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the comment is a documentation comment; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o comentário for um comentário de documentação; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeComment.DocComment">
      <summary vsli:raw="Gets or sets a value that indicates whether the comment is a documentation comment.">Obtém ou define um valor que indica se o comentário é um comentário de documentação.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the comment is a documentation comment; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o comentário for um comentário de documentação; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeComment.Text">
      <summary vsli:raw="Gets or sets the text of the comment.">Obtém ou define o texto do comentário.</summary>
      <returns vsli:raw="A string containing the comment text.">Uma cadeia de caracteres que contém o texto do comentário.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCommentStatement">
      <summary vsli:raw="Represents a statement consisting of a single comment.">Representa uma instrução que consiste em um único comentário.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeCommentStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.CodeDom.CodeComment)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; class using the specified comment.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeCommentStatement" /> usando o comentário especificado.</summary>
      <param name="comment" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeComment&quot; /&gt; that indicates the comment.">Um <see cref="T:System.CodeDom.CodeComment" /> que indica o comentário.</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; class using the specified text as contents.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeCommentStatement" /> usando o texto especificado como conteúdo.</summary>
      <param name="text" vsli:raw="The contents of the comment.">O conteúdo do comentário.</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; class using the specified text and documentation comment flag.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeCommentStatement" /> usando o texto e o sinalizador de comentário de documentação especificados.</summary>
      <param name="text" vsli:raw="The contents of the comment.">O conteúdo do comentário.</param>
      <param name="docComment" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the comment is a documentation comment; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o comentário for um comentário de documentação; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeCommentStatement.Comment">
      <summary vsli:raw="Gets or sets the contents of the comment.">Obtém ou define o conteúdo do comentário.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeComment&quot; /&gt; that indicates the comment.">Um <see cref="T:System.CodeDom.CodeComment" /> que indica o comentário.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCommentStatementCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; objects.">Representa uma coleção de objetos <see cref="T:System.CodeDom.CodeCommentStatement" /> .</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeCommentStatementCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor(System.CodeDom.CodeCommentStatement[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; objects.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> contendo a matriz de objetos <see cref="T:System.CodeDom.CodeCommentStatement" /> especificada.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; objects with which to initialize the collection.">Uma matriz de objetos <see cref="T:System.CodeDom.CodeCommentStatement" /> com os quais inicializar a coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more objects in the array are &lt;see langword=&quot;null&quot; /&gt;.">Um ou mais objetos na matriz são <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor(System.CodeDom.CodeCommentStatementCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; class containing the elements of the specified source collection.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeCommentStatementCollection" />, que contém os elementos da coleção de origem especificada.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; with which to initialize the collection.">Um <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> com o qual inicializar a coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Add(System.CodeDom.CodeCommentStatement)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object to the collection.">Adiciona o objeto <see cref="T:System.CodeDom.CodeCommentStatement" /> especificado à coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object to add.">O objeto <see cref="T:System.CodeDom.CodeCommentStatement" /> a ser adicionado.</param>
      <returns vsli:raw="The index at which the new element was inserted.">O índice no qual o novo elemento foi inserido.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.AddRange(System.CodeDom.CodeCommentStatement[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; array to the end of the collection.">Copia os elementos da matriz <see cref="T:System.CodeDom.CodeCommentStatement" /> especificada para o fim da coleção.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; that contains the objects to add to the collection.">Uma matriz do tipo <see cref="T:System.CodeDom.CodeCommentStatement" /> que contém os objetos a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.AddRange(System.CodeDom.CodeCommentStatementCollection)">
      <summary vsli:raw="Copies the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; object to the end of the collection.">Copia o conteúdo de outro objeto <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> para o final da coleção.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; that contains the objects to add to the collection.">Um <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> que contém os objetos a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Contains(System.CodeDom.CodeCommentStatement)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object.">Obtém um valor que indica se a coleção contém o objeto <see cref="T:System.CodeDom.CodeCommentStatement" /> especificado.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; to search for in the collection.">O <see cref="T:System.CodeDom.CodeCommentStatement" /> a ser pesquisado na coleção.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a coleção contiver o objeto especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.CopyTo(System.CodeDom.CodeCommentStatement[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to the specified one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; beginning at the specified index.">Copia os objetos de coleção para uma <see cref="T:System.Array" /> unidimensional especificada, começando no índice especificado.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">O <see cref="T:System.Array" /> unidimensional que é o destino dos valores copiados da coleção.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">O índice da matriz no qual iniciar a inserção.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">A matriz de destino é multidimensional.
- ou -
O número de elementos na <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> é maior do que o espaço disponível entre o índice da matriz de destino especificada pelo parâmetro <paramref name="index" /> e o final da matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">O parâmetro <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">O parâmetro <paramref name="index" /> é menor do que o índice mínimo da matriz de destino.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.IndexOf(System.CodeDom.CodeCommentStatement)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object in the collection, if it exists in the collection.">Obtém o índice do objeto <see cref="T:System.CodeDom.CodeCommentStatement" /> especificado na coleção, se ele existe na coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object to locate.">O objeto <see cref="T:System.CodeDom.CodeCommentStatement" /> a ser localizado.</param>
      <returns vsli:raw="The index of the specified object, if found, in the collection; otherwise, -1.">O índice do objeto especificado, se encontrado, na coleção; caso contrário, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Insert(System.Int32,System.CodeDom.CodeCommentStatement)">
      <summary vsli:raw="Inserts a &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object into the collection at the specified index.">Insere um objeto <see cref="T:System.CodeDom.CodeCommentStatement" /> na coleção no índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index where the item should be inserted.">O índice baseado em zero no qual o item deve ser inserido.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object to insert.">O objeto <see cref="T:System.CodeDom.CodeCommentStatement" /> a ser inserido.</param>
    </member>
    <member name="P:System.CodeDom.CodeCommentStatementCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object at the specified index in the collection.">Obtém ou define o objeto <see cref="T:System.CodeDom.CodeCommentStatement" /> no índice especificado na coleção.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">O índice da coleção a ser acessada.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object at each valid index.">Um <see cref="T:System.CodeDom.CodeCommentStatement" /> objeto em cada índice válido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">O parâmetro <paramref name="index" /> está fora do intervalo válido de índices para a coleção.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Remove(System.CodeDom.CodeCommentStatement)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object from the collection.">Remove o objeto <see cref="T:System.CodeDom.CodeCommentStatement" /> especificado da coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object to remove from the collection.">O objeto <see cref="T:System.CodeDom.CodeCommentStatement" /> a ser removido da coleção.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">O objeto especificado não foi localizado na coleção.</exception>
    </member>
    <member name="T:System.CodeDom.CodeCompileUnit">
      <summary vsli:raw="Provides a container for a CodeDOM program graph.">Fornece um contêiner para um gráfico de programa CodeDOM.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCompileUnit.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.AssemblyCustomAttributes">
      <summary vsli:raw="Gets a collection of custom attributes for the generated assembly.">Obtém uma coleção de atributos personalizados para o assembly gerado.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; that indicates the custom attributes for the generated assembly.">Um <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> que indica os atributos personalizados para o assembly gerado.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.EndDirectives">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing end directives.">Obtém um objeto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> que contém as diretivas de término.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing end directives.">Um <see cref="T:System.CodeDom.CodeDirectiveCollection" /> objeto que contém as diretivas end.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.Namespaces">
      <summary vsli:raw="Gets the collection of namespaces.">Obtém a coleção de namespaces.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; that indicates the namespaces that the compile unit uses.">Um <see cref="T:System.CodeDom.CodeNamespaceCollection" /> que indica os namespaces que a unidade de compilação usa.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.ReferencedAssemblies">
      <summary vsli:raw="Gets the referenced assemblies.">Obtém os assemblies referenciados.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Specialized.StringCollection&quot; /&gt; that contains the file names of the referenced assemblies.">Um <see cref="T:System.Collections.Specialized.StringCollection" /> que contém os nomes de arquivo dos assemblies referenciados.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.StartDirectives">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing start directives.">Obtém um objeto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> que contém as diretivas de início.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing start directives.">Um <see cref="T:System.CodeDom.CodeDirectiveCollection" /> objeto que contém as diretivas Start.</returns>
    </member>
    <member name="T:System.CodeDom.CodeConditionStatement">
      <summary vsli:raw="Represents a conditional branch statement, typically represented as an &lt;see langword=&quot;if&quot; /&gt; statement.">Representa uma instrução de ramificação condicional, normalmente representada como uma instrução <see langword="if" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeConditionStatement&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeConditionStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeStatement[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeConditionStatement&quot; /&gt; class using the specified condition and statements.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeConditionStatement" /> usando a condição e as instruções especificadas.</summary>
      <param name="condition" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the expression to evaluate.">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica a expressão a ser avaliada.</param>
      <param name="trueStatements" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the statements to execute if the condition is &lt;see langword=&quot;true&quot; /&gt;.">Uma matriz do tipo <see cref="T:System.CodeDom.CodeStatement" /> que contém as instruções a executar se a condição é <see langword="true" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeStatement[],System.CodeDom.CodeStatement[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeConditionStatement&quot; /&gt; class using the specified condition and statements.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeConditionStatement" /> usando a condição e as instruções especificadas.</summary>
      <param name="condition" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the condition to evaluate.">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica a condição a ser avaliada.</param>
      <param name="trueStatements" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the statements to execute if the condition is &lt;see langword=&quot;true&quot; /&gt;.">Uma matriz do tipo <see cref="T:System.CodeDom.CodeStatement" /> que contém as instruções a executar se a condição é <see langword="true" />.</param>
      <param name="falseStatements" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the statements to execute if the condition is &lt;see langword=&quot;false&quot; /&gt;.">Uma matriz do tipo <see cref="T:System.CodeDom.CodeStatement" /> que contém as instruções a executar se a condição é <see langword="false" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.Condition">
      <summary vsli:raw="Gets or sets the expression to evaluate &lt;see langword=&quot;true&quot; /&gt; or &lt;see langword=&quot;false&quot; /&gt;.">Obtém ou define a expressão para avaliar <see langword="true" /> ou <see langword="false" />.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; to evaluate &lt;see langword=&quot;true&quot; /&gt; or &lt;see langword=&quot;false&quot; /&gt;.">A <see cref="T:System.CodeDom.CodeExpression" /> para avaliar <see langword="true" /> ou <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.FalseStatements">
      <summary vsli:raw="Gets the collection of statements to execute if the conditional expression evaluates to &lt;see langword=&quot;false&quot; /&gt;.">Obtém a coleção de instruções a executar se a expressão condicional é avaliada como <see langword="false" />.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; containing the statements to execute if the conditional expression evaluates to &lt;see langword=&quot;false&quot; /&gt;.">Um <see cref="T:System.CodeDom.CodeStatementCollection" /> que contém as instruções a serem executadas se a expressão condicional for <see langword="false" />avaliada como.</returns>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.TrueStatements">
      <summary vsli:raw="Gets the collection of statements to execute if the conditional expression evaluates to &lt;see langword=&quot;true&quot; /&gt;.">Obtém a coleção de instruções a executar se a expressão condicional é avaliada como <see langword="true" />.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; containing the statements to execute if the conditional expression evaluates to &lt;see langword=&quot;true&quot; /&gt;.">Um <see cref="T:System.CodeDom.CodeStatementCollection" /> que contém as instruções a serem executadas se a expressão condicional for <see langword="true" />avaliada como.</returns>
    </member>
    <member name="T:System.CodeDom.CodeConstructor">
      <summary vsli:raw="Represents a declaration for an instance constructor of a type.">Representa uma declaração para um construtor de instância de um tipo.</summary>
    </member>
    <member name="M:System.CodeDom.CodeConstructor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeConstructor&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeConstructor" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeConstructor.BaseConstructorArgs">
      <summary vsli:raw="Gets the collection of base constructor arguments.">Obtém a coleção de argumentos de construtor base.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that contains the base constructor arguments.">Um <see cref="T:System.CodeDom.CodeExpressionCollection" /> que contém os argumentos do construtor base.</returns>
    </member>
    <member name="P:System.CodeDom.CodeConstructor.ChainedConstructorArgs">
      <summary vsli:raw="Gets the collection of chained constructor arguments.">Obtém a coleção de argumentos de construtor encadeados.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that contains the chained constructor arguments.">Um <see cref="T:System.CodeDom.CodeExpressionCollection" /> que contém os argumentos do Construtor encadeado.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDefaultValueExpression">
      <summary vsli:raw="Represents a reference to a default value.">Representa uma referência a um valor padrão.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDefaultValueExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDefaultValueExpression&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeDefaultValueExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDefaultValueExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDefaultValueExpression&quot; /&gt; class using the specified code type reference.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeDefaultValueExpression" /> usando a referência de tipo de código especificada.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that specifies the reference to a value type.">Um <see cref="T:System.CodeDom.CodeTypeReference" /> que especifica a referência a um tipo de valor.</param>
    </member>
    <member name="P:System.CodeDom.CodeDefaultValueExpression.Type">
      <summary vsli:raw="Gets or sets the data type reference for a default value.">Obtém ou define a referência de tipo de dados para um valor padrão.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; object representing a data type that has a default value.">Um <see cref="T:System.CodeDom.CodeTypeReference" /> objeto que representa um tipo de dados que tem um valor padrão.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDelegateCreateExpression">
      <summary vsli:raw="Represents an expression that creates a delegate.">Representa uma expressão que cria um delegado.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateCreateExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDelegateCreateExpression&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeDelegateCreateExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDelegateCreateExpression&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeDelegateCreateExpression" />.</summary>
      <param name="delegateType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the delegate.">Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo de dados do delegado.</param>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object containing the event-handler method.">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o objeto que contém o método do manipulador de eventos.</param>
      <param name="methodName" vsli:raw="The name of the event-handler method.">O nome do método manipulador de eventos.</param>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.DelegateType">
      <summary vsli:raw="Gets or sets the data type of the delegate.">Obtém ou define o tipo de dados do delegado.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the delegate.">Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo de dados do delegado.</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.MethodName">
      <summary vsli:raw="Gets or sets the name of the event handler method.">Obtém ou define o nome do método manipulador de eventos.</summary>
      <returns vsli:raw="The name of the event handler method.">O nome do método do manipulador de eventos.</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.TargetObject">
      <summary vsli:raw="Gets or sets the object that contains the event-handler method.">Obtém ou define o objeto que contém o método manipulador de eventos.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object containing the event-handler method.">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o objeto que contém o método do manipulador de eventos.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDelegateInvokeExpression">
      <summary vsli:raw="Represents an expression that raises an event.">Representa uma expressão que aciona um evento.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDelegateInvokeExpression&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDelegateInvokeExpression&quot; /&gt; class using the specified target object.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" /> usando o objeto de destino especificado.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the target object.">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o objeto de destino.</param>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDelegateInvokeExpression&quot; /&gt; class using the specified target object and parameters.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" /> usando os parâmetros e o objeto de destino especificados.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the target object.">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o objeto de destino.</param>
      <param name="parameters" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects that indicate the parameters.">Uma matriz de objetos <see cref="T:System.CodeDom.CodeExpression" /> que indicam os parâmetros.</param>
    </member>
    <member name="P:System.CodeDom.CodeDelegateInvokeExpression.Parameters">
      <summary vsli:raw="Gets or sets the parameters to pass to the event handling methods attached to the event.">Obtém ou define os parâmetros para passar aos métodos de manipulação de eventos anexados ao evento.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the parameters to pass to the event handling methods attached to the event.">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica os parâmetros a serem passados para os métodos de manipulação de eventos anexados ao evento.</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateInvokeExpression.TargetObject">
      <summary vsli:raw="Gets or sets the event to invoke.">Obtém ou define o evento a invocar.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the event to invoke.">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o evento a ser invocado.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDirectionExpression">
      <summary vsli:raw="Represents an expression used as a method invoke parameter along with a reference direction indicator.">Representa uma expressão usada como um parâmetro de invocação de método junto com um indicador de direção de referência.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectionExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDirectionExpression&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeDirectionExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectionExpression.#ctor(System.CodeDom.FieldDirection,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDirectionExpression&quot; /&gt; class using the specified field direction and expression.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeDirectionExpression" /> usando o a direção do campo e a expressão especificadas.</summary>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.FieldDirection&quot; /&gt; that indicates the field direction of the expression.">Uma <see cref="T:System.CodeDom.FieldDirection" /> que indica a direção do campo da expressão.</param>
      <param name="expression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the code expression to represent.">Uma <see cref="T:System.CodeDom.CodeExpression" /> que indica a expressão de código a ser representada.</param>
    </member>
    <member name="P:System.CodeDom.CodeDirectionExpression.Direction">
      <summary vsli:raw="Gets or sets the field direction for this direction expression.">Obtém ou define a direção do campo para esta expressão de direção.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.FieldDirection&quot; /&gt; that indicates the field direction for this direction expression.">Um <see cref="T:System.CodeDom.FieldDirection" /> que indica a direção do campo para esta expressão de direção.</returns>
    </member>
    <member name="P:System.CodeDom.CodeDirectionExpression.Expression">
      <summary vsli:raw="Gets or sets the code expression to represent.">Obtém ou define a expressão de código a ser representada.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the expression to represent.">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica a expressão a ser representada.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDirective">
      <summary vsli:raw="Serves as the base class for code directive classes.">Serve como a classe base para classes de diretiva de código.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirective.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeDirective" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeDirectiveCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; objects.">Representa uma coleção de objetos <see cref="T:System.CodeDom.CodeDirective" /> .</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeDirectiveCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor(System.CodeDom.CodeDirective[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; class with the code directive objects in the specified array.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeDirectiveCollection" /> com os objetos de diretiva de código na matriz especificada.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; objects with which to initialize the collection.">Uma matriz de objetos <see cref="T:System.CodeDom.CodeDirective" /> com os quais inicializar a coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor(System.CodeDom.CodeDirectiveCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; class with the elements in the specified code directive collection.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeDirectiveCollection" /> com os elementos na coleção de diretivas de código especificada.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object with which to initialize the collection.">Um objeto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> com o qual inicializar a coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Add(System.CodeDom.CodeDirective)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object to the collection.">Adiciona o objeto <see cref="T:System.CodeDom.CodeDirective" /> especificado à coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object to add.">O objeto <see cref="T:System.CodeDom.CodeDirective" /> a ser adicionado.</param>
      <returns vsli:raw="The index position at which the new element was inserted.">A posição de índice na qual o novo elemento foi inserido.</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.AddRange(System.CodeDom.CodeDirective[])">
      <summary vsli:raw="Adds an array of &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; objects to the end of the collection.">Adiciona uma matriz de objetos <see cref="T:System.CodeDom.CodeDirective" /> ao final da coleção.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; objects to add to the collection.">Uma matriz de objetos <see cref="T:System.CodeDom.CodeDirective" /> a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.AddRange(System.CodeDom.CodeDirectiveCollection)">
      <summary vsli:raw="Adds the contents of the specified &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object to the end of the collection.">Adiciona o conteúdo do objeto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> especificado ao final da coleção.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing the &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; objects to add to the collection.">Um objeto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> que contém os objetos <see cref="T:System.CodeDom.CodeDirective" /> a adicionar à coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Contains(System.CodeDom.CodeDirective)">
      <summary vsli:raw="Gets a value indicating whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object.">Obtém um valor que indica se a coleção contém o objeto <see cref="T:System.CodeDom.CodeDirective" /> especificado.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object to search for in the collection.">O objeto <see cref="T:System.CodeDom.CodeDirective" /> pelo qual pesquisar na coleção.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a coleção contiver o objeto especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.CopyTo(System.CodeDom.CodeDirective[],System.Int32)">
      <summary vsli:raw="Copies the contents of the collection to a one-dimensional array beginning at the specified index.">Copia o conteúdo da coleção para uma matriz unidimensional começando no índice especificado.</summary>
      <param name="array" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; that is the destination of the values copied from the collection.">Uma matriz do tipo <see cref="T:System.CodeDom.CodeDirective" /> que é o destino dos valores copiados da coleção.</param>
      <param name="index" vsli:raw="The index in the array at which to begin inserting collection objects.">O índice na matriz no qual começar a inserir objetos de coleção.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; is greater than the available space between the index of the target array specified by &lt;paramref name=&quot;index&quot; /&gt; and the end of the target array.">A matriz de destino é multidimensional.
- ou -
O número de elementos no <see cref="T:System.CodeDom.CodeDirectiveCollection" /> é maior do que o espaço disponível entre o índice da matriz de destino especificada pelo <paramref name="index" /> e o final da matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than the target array's minimum index.">
        <paramref name="index" /> é menor do que o índice mínimo da matriz de destino.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.IndexOf(System.CodeDom.CodeDirective)">
      <summary vsli:raw="Gets the index in the collection of the specified &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object, if it exists in the collection.">Obterá o índice na coleção do objeto <see cref="T:System.CodeDom.CodeDirective" /> especificado, se ele existir na coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object to locate in the collection.">O objeto <see cref="T:System.CodeDom.CodeDirective" /> a ser localizado na coleção.</param>
      <returns vsli:raw="The index position in the collection of the specified object, if found; otherwise, -1.">A posição de índice na coleção do objeto especificado, se encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Insert(System.Int32,System.CodeDom.CodeDirective)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object into the collection at the specified index.">Insere o objeto <see cref="T:System.CodeDom.CodeDirective" /> especificado na coleção no índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index position where the specified object should be inserted.">A posição de índice baseada em zero em que o objeto especificado deverá ser inserido.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object to insert.">O objeto <see cref="T:System.CodeDom.CodeDirective" /> a ser inserido.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is greater than &lt;see cref=&quot;P:System.Collections.CollectionBase.Count&quot; /&gt;.">
        <paramref name="index" /> é menor que 0.
- ou -
<paramref name="index" /> é maior que <see cref="P:System.Collections.CollectionBase.Count" />.</exception>
    </member>
    <member name="P:System.CodeDom.CodeDirectiveCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object at the specified index in the collection.">Obtém ou define o objeto <see cref="T:System.CodeDom.CodeDirective" /> no índice especificado na coleção.</summary>
      <param name="index" vsli:raw="The index position to access.">A posição de índice a acessar.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; at the index position.">O <see cref="T:System.CodeDom.CodeDirective" /> na posição do índice.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is outside the valid range of index positions for the collection.">
        <paramref name="index" /> está fora do intervalo válido de posições de índice para a coleção.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Remove(System.CodeDom.CodeDirective)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object from the collection.">Remove o objeto <see cref="T:System.CodeDom.CodeDirective" /> especificado da coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object to remove from the collection.">O objeto <see cref="T:System.CodeDom.CodeDirective" /> a ser removido da coleção.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">O objeto especificado não foi localizado na coleção.</exception>
    </member>
    <member name="T:System.CodeDom.CodeEntryPointMethod">
      <summary vsli:raw="Represents the entry point method of an executable.">Representa o método de ponto de entrada de um executável.</summary>
    </member>
    <member name="M:System.CodeDom.CodeEntryPointMethod.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeEntryPointMethod&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeEntryPointMethod" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeEventReferenceExpression">
      <summary vsli:raw="Represents a reference to an event.">Representa uma referência a um evento.</summary>
    </member>
    <member name="M:System.CodeDom.CodeEventReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeEventReferenceExpression&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeEventReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeEventReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeEventReferenceExpression&quot; /&gt; class using the specified target object and event name.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> usando o nome do evento e o objeto de destino especificados.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the event.">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o objeto que contém o evento.</param>
      <param name="eventName" vsli:raw="The name of the event to reference.">O nome do evento a referenciar.</param>
    </member>
    <member name="P:System.CodeDom.CodeEventReferenceExpression.EventName">
      <summary vsli:raw="Gets or sets the name of the event.">Obtém ou define o nome do evento.</summary>
      <returns vsli:raw="The name of the event.">O nome do evento.</returns>
    </member>
    <member name="P:System.CodeDom.CodeEventReferenceExpression.TargetObject">
      <summary vsli:raw="Gets or sets the object that contains the event.">Obtém ou define o objeto que contém o evento.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the event.">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o objeto que contém o evento.</returns>
    </member>
    <member name="T:System.CodeDom.CodeExpression">
      <summary vsli:raw="Represents a code expression. This is a base class for other code expression objects that is never instantiated.">Representa uma expressão de código. Esta é uma classe base para outros objetos de expressão de código que nunca é instanciada.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeExpression" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeExpressionCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects.">Representa uma coleção de objetos <see cref="T:System.CodeDom.CodeExpression" /> .</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeExpressionCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor(System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeExpressionCollection" /> contendo a matriz de objetos <see cref="T:System.CodeDom.CodeExpression" /> especificada.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects with which to initialize the collection.">Uma matriz de objetos <see cref="T:System.CodeDom.CodeExpression" /> com os quais inicializar a coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more objects in the array are &lt;see langword=&quot;null&quot; /&gt;.">Um ou mais objetos na matriz são <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor(System.CodeDom.CodeExpressionCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; class containing the elements of the specified source collection.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeExpressionCollection" />, que contém os elementos da coleção de origem especificada.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; with which to initialize the collection.">Um <see cref="T:System.CodeDom.CodeExpressionCollection" /> com o qual inicializar a coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Add(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to the collection.">Adiciona o objeto <see cref="T:System.CodeDom.CodeExpression" /> especificado à coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to add.">O objeto <see cref="T:System.CodeDom.CodeExpression" /> a ser adicionado.</param>
      <returns vsli:raw="The index at which the new element was inserted.">O índice no qual o novo elemento foi inserido.</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.AddRange(System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Copies the elements of the specified array to the end of the collection.">Copia os elementos da matriz especificada para o fim da coleção.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that contains the objects to add to the collection.">Uma matriz do tipo <see cref="T:System.CodeDom.CodeExpression" /> que contém os objetos a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.AddRange(System.CodeDom.CodeExpressionCollection)">
      <summary vsli:raw="Copies the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; object to the end of the collection.">Copia o conteúdo de outro objeto <see cref="T:System.CodeDom.CodeExpressionCollection" /> para o final da coleção.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that contains the objects to add to the collection.">Um <see cref="T:System.CodeDom.CodeExpressionCollection" /> que contém os objetos a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Contains(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object.">Obtém um valor que indica se a coleção contém o objeto <see cref="T:System.CodeDom.CodeExpression" /> especificado.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to locate in the collection.">O objeto <see cref="T:System.CodeDom.CodeExpression" /> a ser localizado na coleção.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a coleção contiver o objeto especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.CopyTo(System.CodeDom.CodeExpression[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance beginning at the specified index.">Copia os objetos de coleção para uma instância de <see cref="T:System.Array" /> unidimensional, começando no índice especificado.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">O <see cref="T:System.Array" /> unidimensional que é o destino dos valores copiados da coleção.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">O índice da matriz no qual iniciar a inserção.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">A matriz de destino é multidimensional.
- ou -
O número de elementos na <see cref="T:System.CodeDom.CodeExpressionCollection" /> é maior do que o espaço disponível entre o índice da matriz de destino especificada pelo parâmetro <paramref name="index" /> e o final da matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">O parâmetro <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">O parâmetro <paramref name="index" /> é menor do que o índice mínimo da matriz de destino.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.IndexOf(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object in the collection, if it exists in the collection.">Obtém o índice do objeto <see cref="T:System.CodeDom.CodeExpression" /> especificado na coleção, se ele existe na coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to locate in the collection.">O objeto <see cref="T:System.CodeDom.CodeExpression" /> a ser localizado na coleção.</param>
      <returns vsli:raw="The index of the specified object, if found, in the collection; otherwise, -1.">O índice do objeto especificado, se encontrado, na coleção; caso contrário, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Insert(System.Int32,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object into the collection at the specified index.">Insere o objeto <see cref="T:System.CodeDom.CodeExpression" /> especificado na coleção no índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">O índice baseado em zero em que o objeto especificado deverá ser inserido.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to insert.">O objeto <see cref="T:System.CodeDom.CodeExpression" /> a ser inserido.</param>
    </member>
    <member name="P:System.CodeDom.CodeExpressionCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object at the specified index in the collection.">Obtém ou define o objeto <see cref="T:System.CodeDom.CodeExpression" /> no índice especificado na coleção.</summary>
      <param name="index" vsli:raw="The zero-based index of the collection to access.">O índice baseado em zero da coleção a ser acessada.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object at each valid index.">Um <see cref="T:System.CodeDom.CodeExpression" /> objeto em cada índice válido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">O parâmetro <paramref name="index" /> está fora do intervalo válido de índices para a coleção.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Remove(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object from the collection.">Remove o objeto <see cref="T:System.CodeDom.CodeExpression" /> especificado da coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to remove from the collection.">O objeto <see cref="T:System.CodeDom.CodeExpression" /> a ser removido da coleção.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">O objeto especificado não foi localizado na coleção.</exception>
    </member>
    <member name="T:System.CodeDom.CodeExpressionStatement">
      <summary vsli:raw="Represents a statement that consists of a single expression.">Representa uma instrução que consiste em uma única expressão.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeExpressionStatement&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeExpressionStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeExpressionStatement&quot; /&gt; class by using the specified expression.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeExpressionStatement" /> usando a expressão especificada.</summary>
      <param name="expression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; for the statement.">Uma <see cref="T:System.CodeDom.CodeExpression" /> para a instrução.</param>
    </member>
    <member name="P:System.CodeDom.CodeExpressionStatement.Expression">
      <summary vsli:raw="Gets or sets the expression for the statement.">Obtém ou define a expressão para a instrução.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the expression for the statement.">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica a expressão para a instrução.</returns>
    </member>
    <member name="T:System.CodeDom.CodeFieldReferenceExpression">
      <summary vsli:raw="Represents a reference to a field.">Representa uma referência a um campo.</summary>
    </member>
    <member name="M:System.CodeDom.CodeFieldReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeFieldReferenceExpression&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeFieldReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeFieldReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeFieldReferenceExpression&quot; /&gt; class using the specified target object and field name.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeFieldReferenceExpression" /> usando o nome do campo e o objeto de destino especificados.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the field.">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o objeto que contém o campo.</param>
      <param name="fieldName" vsli:raw="The name of the field.">O nome do campo.</param>
    </member>
    <member name="P:System.CodeDom.CodeFieldReferenceExpression.FieldName">
      <summary vsli:raw="Gets or sets the name of the field to reference.">Obtém ou define o nome do campo a referenciar.</summary>
      <returns vsli:raw="A string containing the field name.">Uma cadeia de caracteres que contém o nome do campo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeFieldReferenceExpression.TargetObject">
      <summary vsli:raw="Gets or sets the object that contains the field to reference.">Obtém ou define o objeto que contém o campo a referenciar.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the field to reference.">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o objeto que contém o campo a ser referenciado.</returns>
    </member>
    <member name="T:System.CodeDom.CodeGotoStatement">
      <summary vsli:raw="Represents a &lt;see langword=&quot;goto&quot; /&gt; statement.">Representa uma instrução <see langword="goto" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeGotoStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeGotoStatement&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeGotoStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeGotoStatement.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeGotoStatement&quot; /&gt; class using the specified label name.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeGotoStatement" /> usando o nome do rótulo especificado.</summary>
      <param name="label" vsli:raw="The name of the label at which to continue program execution.">O nome do rótulo no qual continuar a execução do programa.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;Label&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="Label" /> é <see langword="null" />.</exception>
    </member>
    <member name="P:System.CodeDom.CodeGotoStatement.Label">
      <summary vsli:raw="Gets or sets the name of the label at which to continue program execution.">Obtém ou define o nome do rótulo no qual continuar a execução do programa.</summary>
      <returns vsli:raw="A string that indicates the name of the label at which to continue program execution.">Uma cadeia de caracteres que indica o nome do rótulo no qual continuar a execução do programa.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The label cannot be set because &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or an empty string.">O rótulo não pode ser definido porque <paramref name="value" /> é <see langword="null" /> ou é uma cadeia de caracteres vazia.</exception>
    </member>
    <member name="T:System.CodeDom.CodeIndexerExpression">
      <summary vsli:raw="Represents a reference to an indexer property of an object.">Representa uma referência a uma propriedade do indexador de um objeto.</summary>
    </member>
    <member name="M:System.CodeDom.CodeIndexerExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeIndexerExpression&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeIndexerExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeIndexerExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeIndexerExpression&quot; /&gt; class using the specified target object and index.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeIndexerExpression" /> usando o índice e o objeto de destino especificados.</summary>
      <param name="targetObject" vsli:raw="The target object.">O objeto de destino.</param>
      <param name="indices" vsli:raw="The index or indexes of the indexer expression.">O índice ou índices da expressão do indexador.</param>
    </member>
    <member name="P:System.CodeDom.CodeIndexerExpression.Indices">
      <summary vsli:raw="Gets the collection of indexes of the indexer expression.">Obtém a coleção de índices da expressão do indexador.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that indicates the index or indexes of the indexer expression.">Um <see cref="T:System.CodeDom.CodeExpressionCollection" /> que indica o índice ou índices da expressão do indexador.</returns>
    </member>
    <member name="P:System.CodeDom.CodeIndexerExpression.TargetObject">
      <summary vsli:raw="Gets or sets the target object that can be indexed.">Obtém ou define o objeto de destino que pode ser indexado.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the indexer object.">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o objeto do indexador.</returns>
    </member>
    <member name="T:System.CodeDom.CodeIterationStatement">
      <summary vsli:raw="Represents a &lt;see langword=&quot;for&quot; /&gt; statement, or a loop through a block of statements, using a test expression as a condition for continuing to loop.">Representa uma instrução <see langword="for" /> ou um loop em um bloco de instruções, usando uma expressão de teste como uma condição para continuar executando o loop.</summary>
    </member>
    <member name="M:System.CodeDom.CodeIterationStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeIterationStatement&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeIterationStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeIterationStatement.#ctor(System.CodeDom.CodeStatement,System.CodeDom.CodeExpression,System.CodeDom.CodeStatement,System.CodeDom.CodeStatement[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeIterationStatement&quot; /&gt; class using the specified parameters.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeIterationStatement" /> usando os parâmetros especificados.</summary>
      <param name="initStatement" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the loop initialization statement.">Um <see cref="T:System.CodeDom.CodeStatement" /> que contém a instrução de inicialização de loop.</param>
      <param name="testExpression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; containing the expression to test for exit condition.">Um <see cref="T:System.CodeDom.CodeExpression" /> que contém a expressão para testar quanto à condição de saída.</param>
      <param name="incrementStatement" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the per-cycle increment statement.">Um <see cref="T:System.CodeDom.CodeStatement" /> que contém a instrução de incremento por ciclo.</param>
      <param name="statements" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the statements within the loop.">Uma matriz do tipo <see cref="T:System.CodeDom.CodeStatement" /> contendo as instruções dentro do loop.</param>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.IncrementStatement">
      <summary vsli:raw="Gets or sets the statement that is called after each loop cycle.">Obtém ou define a instrução que é chamada após cada ciclo de loop.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; that indicates the per cycle increment statement.">Um <see cref="T:System.CodeDom.CodeStatement" /> que indica a instrução de incremento por ciclo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.InitStatement">
      <summary vsli:raw="Gets or sets the loop initialization statement.">Obtém ou define a instrução de inicialização de loop.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; that indicates the loop initialization statement.">Um <see cref="T:System.CodeDom.CodeStatement" /> que indica a instrução de inicialização do loop.</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.Statements">
      <summary vsli:raw="Gets the collection of statements to be executed within the loop.">Obtém a coleção de instruções a serem executadas dentro do loop.</summary>
      <returns vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; that indicates the statements within the loop.">Uma matriz do tipo <see cref="T:System.CodeDom.CodeStatement" /> que indica as instruções dentro do loop.</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.TestExpression">
      <summary vsli:raw="Gets or sets the expression to test as the condition that continues the loop.">Obtém ou define a expressão para testar como a condição que continua o loop.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the expression to test.">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica a expressão a ser testada.</returns>
    </member>
    <member name="T:System.CodeDom.CodeLabeledStatement">
      <summary vsli:raw="Represents a labeled statement or a stand-alone label.">Representa uma instrução rotulada ou um rótulo autônomo.</summary>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeLabeledStatement&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeLabeledStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeLabeledStatement&quot; /&gt; class using the specified label name.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeLabeledStatement" /> usando o nome do rótulo especificado.</summary>
      <param name="label" vsli:raw="The name of the label.">O nome do rótulo.</param>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor(System.String,System.CodeDom.CodeStatement)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeLabeledStatement&quot; /&gt; class using the specified label name and statement.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeLabeledStatement" /> usando a instrução e o nome do rótulo especificados.</summary>
      <param name="label" vsli:raw="The name of the label.">O nome do rótulo.</param>
      <param name="statement" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; to associate with the label.">O <see cref="T:System.CodeDom.CodeStatement" /> a ser associado ao rótulo.</param>
    </member>
    <member name="P:System.CodeDom.CodeLabeledStatement.Label">
      <summary vsli:raw="Gets or sets the name of the label.">Obtém ou define o nome do rótulo.</summary>
      <returns vsli:raw="The name of the label.">O nome do rótulo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeLabeledStatement.Statement">
      <summary vsli:raw="Gets or sets the optional associated statement.">Obtém ou define a instrução associada opcional.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; that indicates the statement associated with the label.">Um <see cref="T:System.CodeDom.CodeStatement" /> que indica a instrução associada ao rótulo.</returns>
    </member>
    <member name="T:System.CodeDom.CodeLinePragma">
      <summary vsli:raw="Represents a specific location within a specific file.">Representa um local específico dentro de um arquivo específico.</summary>
    </member>
    <member name="M:System.CodeDom.CodeLinePragma.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeLinePragma&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeLinePragma" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeLinePragma.#ctor(System.String,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeLinePragma&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeLinePragma" />.</summary>
      <param name="fileName" vsli:raw="The file name of the associated file.">O nome do arquivo associado.</param>
      <param name="lineNumber" vsli:raw="The line number to store a reference to.">O número de linha no qual armazenar uma referência.</param>
    </member>
    <member name="P:System.CodeDom.CodeLinePragma.FileName">
      <summary vsli:raw="Gets or sets the name of the associated file.">Obtém ou define o nome do arquivo associado.</summary>
      <returns vsli:raw="The file name of the associated file.">O nome do arquivo associado.</returns>
    </member>
    <member name="P:System.CodeDom.CodeLinePragma.LineNumber">
      <summary vsli:raw="Gets or sets the line number of the associated reference.">Obtém ou define o número de linha da referência associada.</summary>
      <returns vsli:raw="The line number.">O número da linha.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberEvent">
      <summary vsli:raw="Represents a declaration for an event of a type.">Representa uma declaração para um evento de um tipo.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberEvent.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMemberEvent&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeMemberEvent" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.ImplementationTypes">
      <summary vsli:raw="Gets or sets the data type that the member event implements.">Obtém ou define o tipo de dados que implementa o evento de membro.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; that indicates the data type or types that the member event implements.">Um <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> que indica o tipo de dados ou tipos que o evento de membro implementa.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.PrivateImplementationType">
      <summary vsli:raw="Gets or sets the privately implemented data type, if any.">Obtém ou define o tipo de dados implementado de modo privado, se houver.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type that the event privately implements.">Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo de dados que o evento implementa de forma privada.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.Type">
      <summary vsli:raw="Gets or sets the data type of the delegate type that handles the event.">Obtém ou define o tipo de dados do tipo de delegado que manipula o evento.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the delegate type that handles the event.">Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo delegado que manipula o evento.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberField">
      <summary vsli:raw="Represents a declaration for a field of a type.">Representa uma declaração para um campo de um tipo.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMemberField&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeMemberField" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMemberField&quot; /&gt; class using the specified field type and field name.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeMemberField" /> usando o nome e tipo do campo especificados.</summary>
      <param name="type" vsli:raw="An object that indicates the type of the field.">Um objeto que indica o tipo do campo.</param>
      <param name="name" vsli:raw="The name of the field.">O nome do campo.</param>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMemberField&quot; /&gt; class using the specified field type and field name.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeMemberField" /> usando o nome e tipo do campo especificados.</summary>
      <param name="type" vsli:raw="The type of the field.">O tipo do campo.</param>
      <param name="name" vsli:raw="The name of the field.">O nome do campo.</param>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.Type,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMemberField&quot; /&gt; class using the specified field type and field name.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeMemberField" /> usando o nome e tipo do campo especificados.</summary>
      <param name="type" vsli:raw="The type of the field.">O tipo do campo.</param>
      <param name="name" vsli:raw="The name of the field.">O nome do campo.</param>
    </member>
    <member name="P:System.CodeDom.CodeMemberField.InitExpression">
      <summary vsli:raw="Gets or sets the initialization expression for the field.">Obtém ou define a expressão de inicialização para o campo.</summary>
      <returns vsli:raw="The initialization expression for the field.">A expressão de inicialização para o campo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberField.Type">
      <summary vsli:raw="Gets or sets the type of the field.">Obtém ou define o tipo do campo.</summary>
      <returns vsli:raw="The type of the field.">O tipo do campo.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberMethod">
      <summary vsli:raw="Represents a declaration for a method of a type.">Representa uma declaração para um método de um tipo.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberMethod.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMemberMethod&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeMemberMethod" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ImplementationTypes">
      <summary vsli:raw="Gets the data types of the interfaces implemented by this method, unless it is a private method implementation, which is indicated by the &lt;see cref=&quot;P:System.CodeDom.CodeMemberMethod.PrivateImplementationType&quot; /&gt; property.">Obtém os tipos de dados das interfaces implementadas por esse método, a menos que é uma implementação de método privado, o que é indicado pela propriedade <see cref="P:System.CodeDom.CodeMemberMethod.PrivateImplementationType" />.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; that indicates the interfaces implemented by this method.">Um <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> que indica as interfaces implementadas por esse método.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.Parameters">
      <summary vsli:raw="Gets the parameter declarations for the method.">Obtém as declarações de parâmetro do método.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; that indicates the method parameters.">Um <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> que indica os parâmetros do método.</returns>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateImplementationTypes">
      <summary vsli:raw="An event that will be raised the first time the &lt;see cref=&quot;P:System.CodeDom.CodeMemberMethod.ImplementationTypes&quot; /&gt; collection is accessed.">Um evento que será acionado na primeira vez em que a coleção <see cref="P:System.CodeDom.CodeMemberMethod.ImplementationTypes" /> for acessada.</summary>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateParameters">
      <summary vsli:raw="An event that will be raised the first time the &lt;see cref=&quot;P:System.CodeDom.CodeMemberMethod.Parameters&quot; /&gt; collection is accessed.">Um evento que será acionado na primeira vez em que a coleção <see cref="P:System.CodeDom.CodeMemberMethod.Parameters" /> for acessada.</summary>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateStatements">
      <summary vsli:raw="An event that will be raised the first time the &lt;see cref=&quot;P:System.CodeDom.CodeMemberMethod.Statements&quot; /&gt; collection is accessed.">Um evento que será acionado na primeira vez em que a coleção <see cref="P:System.CodeDom.CodeMemberMethod.Statements" /> for acessada.</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.PrivateImplementationType">
      <summary vsli:raw="Gets or sets the data type of the interface this method, if private, implements a method of, if any.">Obtém ou define o tipo de dados da interface da qual este método, se for privado, implementará um segundo método.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the interface with the method that the private method whose declaration is represented by this &lt;see cref=&quot;T:System.CodeDom.CodeMemberMethod&quot; /&gt; implements.">Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo de dados da interface com o método que o método particular cuja declaração é representada por esse <see cref="T:System.CodeDom.CodeMemberMethod" /> implementa.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ReturnType">
      <summary vsli:raw="Gets or sets the data type of the return value of the method.">Obtém ou define o tipo de dados do valor retornado do método.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the value returned by the method.">Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo de dados do valor retornado pelo método.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ReturnTypeCustomAttributes">
      <summary vsli:raw="Gets the custom attributes of the return type of the method.">Obtém os atributos personalizados do tipo de retorno do método.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; that indicates the custom attributes.">Um <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> que indica os atributos personalizados.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.Statements">
      <summary vsli:raw="Gets the statements within the method.">Obtém as instruções dentro do método.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; that indicates the statements within the method.">Um <see cref="T:System.CodeDom.CodeStatementCollection" /> que indica as instruções dentro do método.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.TypeParameters">
      <summary vsli:raw="Gets the type parameters for the current generic method.">Obtém o parâmetro de tipo do método genérico atual.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; that contains the type parameters for the generic method.">Um <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> que contém os parâmetros de tipo para o método genérico.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberProperty">
      <summary vsli:raw="Represents a declaration for a property of a type.">Representa uma declaração para uma propriedade de um tipo.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberProperty.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMemberProperty&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeMemberProperty" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.GetStatements">
      <summary vsli:raw="Gets the collection of &lt;see langword=&quot;get&quot; /&gt; statements for the property.">Obtém a coleção de instruções <see langword="get" /> para a propriedade.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; that contains the &lt;see langword=&quot;get&quot; /&gt; statements for the member property.">Um <see cref="T:System.CodeDom.CodeStatementCollection" /> que contém as <see langword="get" /> instruções para a propriedade do membro.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.HasGet">
      <summary vsli:raw="Gets or sets a value indicating whether the property has a &lt;see langword=&quot;get&quot; /&gt; method accessor.">Obtém ou define um valor que indica se a propriedade tem um acessador de método <see langword="get" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see langword=&quot;Count&quot; /&gt; property of the &lt;see cref=&quot;P:System.CodeDom.CodeMemberProperty.GetStatements&quot; /&gt; collection is non-zero, or if the value of this property has been set to &lt;see langword=&quot;true&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />se a <see langword="Count" /><see cref="P:System.CodeDom.CodeMemberProperty.GetStatements" /> propriedade da coleção for diferente de zero, ou se o valor dessa propriedade tiver sido definido como <see langword="true" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.HasSet">
      <summary vsli:raw="Gets or sets a value indicating whether the property has a &lt;see langword=&quot;set&quot; /&gt; method accessor.">Obtém ou define um valor que indica se a propriedade tem um acessador de método <see langword="set" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;P:System.Collections.CollectionBase.Count&quot; /&gt; property of the &lt;see cref=&quot;P:System.CodeDom.CodeMemberProperty.SetStatements&quot; /&gt; collection is non-zero; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />se a <see cref="P:System.Collections.CollectionBase.Count" /> propriedade <see cref="P:System.CodeDom.CodeMemberProperty.SetStatements" /> da coleção for diferente de zero; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.ImplementationTypes">
      <summary vsli:raw="Gets the data types of any interfaces that the property implements.">Obtém os tipos de dados de todas as interfaces implementadas pela propriedade.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; that indicates the data types the property implements.">Um <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> que indica os tipos de dados que a propriedade implementa.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.Parameters">
      <summary vsli:raw="Gets the collection of declaration expressions for the property.">Obtém a coleção de expressões de declaração para a propriedade.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; that indicates the declaration expressions for the property.">Um <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> que indica as expressões de declaração para a propriedade.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.PrivateImplementationType">
      <summary vsli:raw="Gets or sets the data type of the interface, if any, this property, if private, implements.">Obtém ou define o tipo de dados da interface, se houver, que essa propriedade, se privada, implementa.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the interface, if any, the property, if private, implements.">Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo de dados da interface, se houver, a propriedade, se privado, implementa.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.SetStatements">
      <summary vsli:raw="Gets the collection of &lt;see langword=&quot;set&quot; /&gt; statements for the property.">Obtém a coleção de instruções <see langword="set" /> para a propriedade.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; that contains the &lt;see langword=&quot;set&quot; /&gt; statements for the member property.">Um <see cref="T:System.CodeDom.CodeStatementCollection" /> que contém as <see langword="set" /> instruções para a propriedade do membro.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.Type">
      <summary vsli:raw="Gets or sets the data type of the property.">Obtém ou define o tipo de dados da propriedade.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the property.">Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo de dados da propriedade.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodInvokeExpression">
      <summary vsli:raw="Represents an expression that invokes a method.">Representa uma expressão que invoca um método.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodInvokeExpression&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeMethodInvokeExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodInvokeExpression&quot; /&gt; class using the specified target object, method name, and parameters.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeMethodInvokeExpression" /> usando os parâmetros, o nome do método e o objeto de destino especificados.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the target object with the method to invoke.">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o objeto de destino com o método a ser invocado.</param>
      <param name="methodName" vsli:raw="The name of the method to invoke.">O nome do método que será invocado.</param>
      <param name="parameters" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects that indicate the parameters to call the method with.">Uma matriz de objetos <see cref="T:System.CodeDom.CodeExpression" /> que indicam os parâmetros com os quais chamar o método.</param>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor(System.CodeDom.CodeMethodReferenceExpression,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodInvokeExpression&quot; /&gt; class using the specified method and parameters.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeMethodInvokeExpression" /> usando o método e os parâmetros especificados.</summary>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeMethodReferenceExpression&quot; /&gt; that indicates the method to invoke.">Um <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> que indica o método a ser invocado.</param>
      <param name="parameters" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects that indicate the parameters with which to invoke the method.">Uma matriz de objetos <see cref="T:System.CodeDom.CodeExpression" /> que indicam os parâmetros com os quais invocar o método.</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodInvokeExpression.Method">
      <summary vsli:raw="Gets or sets the method to invoke.">Obtém ou define o método a invocar.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeMethodReferenceExpression&quot; /&gt; that indicates the method to invoke.">Um <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> que indica o método a ser invocado.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodInvokeExpression.Parameters">
      <summary vsli:raw="Gets the parameters to invoke the method with.">Obtém os parâmetros com os quais invocar o método.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that indicates the parameters to invoke the method with.">Um <see cref="T:System.CodeDom.CodeExpressionCollection" /> que indica os parâmetros com os quais invocar o método.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodReferenceExpression">
      <summary vsli:raw="Represents a reference to a method.">Representa uma referência a um método.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodReferenceExpression&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodReferenceExpression&quot; /&gt; class using the specified target object and method name.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> usando o nome do método e o objeto de destino especificados.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object to target.">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o objeto a usar como destino.</param>
      <param name="methodName" vsli:raw="The name of the method to call.">O nome do método a ser chamado.</param>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeTypeReference[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodReferenceExpression&quot; /&gt; class using the specified target object, method name, and generic type arguments.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> usando os argumentos de tipo genérico, o nome do método e o objeto de destino especificados.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object to target.">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o objeto a usar como destino.</param>
      <param name="methodName" vsli:raw="The name of the method to call.">O nome do método a ser chamado.</param>
      <param name="typeParameters" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; values that specify the &lt;see cref=&quot;P:System.CodeDom.CodeMethodReferenceExpression.TypeArguments&quot; /&gt; for this &lt;see cref=&quot;T:System.CodeDom.CodeMethodReferenceExpression&quot; /&gt;.">Uma matriz de valores <see cref="T:System.CodeDom.CodeTypeReference" /> que especificam o <see cref="P:System.CodeDom.CodeMethodReferenceExpression.TypeArguments" /> para este <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.MethodName">
      <summary vsli:raw="Gets or sets the name of the method to reference.">Obtém ou define o nome do método a referenciar.</summary>
      <returns vsli:raw="The name of the method to reference.">O nome do método a ser referenciado.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.TargetObject">
      <summary vsli:raw="Gets or sets the expression that indicates the method to reference.">Obtém ou define a expressão que indica o método a referenciar.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that represents the method to reference.">Um <see cref="T:System.CodeDom.CodeExpression" /> que representa o método de referência.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.TypeArguments">
      <summary vsli:raw="Gets the type arguments for the current generic method reference expression.">Obtém os argumentos de tipo para a expressão de referência de método genérico atual.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; containing the type arguments for the current code &lt;see cref=&quot;T:System.CodeDom.CodeMethodReferenceExpression&quot; /&gt;.">Um <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> que contém os argumentos de tipo para o <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />código atual.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodReturnStatement">
      <summary vsli:raw="Represents a return value statement.">Representa uma instrução de valor retornado.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReturnStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodReturnStatement&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeMethodReturnStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReturnStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodReturnStatement&quot; /&gt; class using the specified expression.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeMethodReturnStatement" /> usando a expressão especificada.</summary>
      <param name="expression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the return value.">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o valor retornado.</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodReturnStatement.Expression">
      <summary vsli:raw="Gets or sets the return value.">Obtém ou define o valor retornado.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the value to return for the return statement, or &lt;see langword=&quot;null&quot; /&gt; if the statement is part of a subroutine.">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o valor a ser retornado para a instrução return, <see langword="null" /> ou se a instrução fizer parte de uma sub-rotina.</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespace">
      <summary vsli:raw="Represents a namespace declaration.">Representa uma declaração de namespace.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespace.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeNamespace" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespace.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; class using the specified name.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeNamespace" /> usando o nome especificado.</summary>
      <param name="name" vsli:raw="The name of the namespace being declared.">O nome do namespace que está sendo declarado.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Comments">
      <summary vsli:raw="Gets the comments for the namespace.">Obtém os comentários para o namespace.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; that indicates the comments for the namespace.">Um <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> que indica os comentários para o namespace.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Imports">
      <summary vsli:raw="Gets the collection of namespace import directives used by the namespace.">Obtém a coleção diretivas de importação de namespace usadas pelo namespace.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImportCollection&quot; /&gt; that indicates the namespace import directives used by the namespace.">Um <see cref="T:System.CodeDom.CodeNamespaceImportCollection" /> que indica as diretivas de importação de namespace usadas pelo namespace.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Name">
      <summary vsli:raw="Gets or sets the name of the namespace.">Obtém ou define o nome do namespace.</summary>
      <returns vsli:raw="The name of the namespace.">O nome do namespace.</returns>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateComments">
      <summary vsli:raw="An event that will be raised the first time the &lt;see cref=&quot;P:System.CodeDom.CodeNamespace.Comments&quot; /&gt; collection is accessed.">Um evento que será acionado na primeira vez em que a coleção <see cref="P:System.CodeDom.CodeNamespace.Comments" /> for acessada.</summary>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateImports">
      <summary vsli:raw="An event that will be raised the first time the &lt;see cref=&quot;P:System.CodeDom.CodeNamespace.Imports&quot; /&gt; collection is accessed.">Um evento que será acionado na primeira vez em que a coleção <see cref="P:System.CodeDom.CodeNamespace.Imports" /> for acessada.</summary>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateTypes">
      <summary vsli:raw="An event that will be raised the first time the &lt;see cref=&quot;P:System.CodeDom.CodeNamespace.Types&quot; /&gt; collection is accessed.">Um evento que será acionado na primeira vez em que a coleção <see cref="P:System.CodeDom.CodeNamespace.Types" /> for acessada.</summary>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Types">
      <summary vsli:raw="Gets the collection of types that the namespace contains.">Obtém a coleção de tipos contida pelo namespace.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; that indicates the types contained in the namespace.">Um <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> que indica os tipos contidos no namespace.</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; objects.">Representa uma coleção de objetos <see cref="T:System.CodeDom.CodeNamespace" /> .</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeNamespaceCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor(System.CodeDom.CodeNamespace[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; class that contains the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; objects.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeNamespaceCollection" /> que contém a matriz de objetos <see cref="T:System.CodeDom.CodeNamespace" /> especificada.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; objects with which to initialize the collection.">Uma matriz de objetos <see cref="T:System.CodeDom.CodeNamespace" /> com os quais inicializar a coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more objects in the array are &lt;see langword=&quot;null&quot; /&gt;.">Um ou mais objetos na matriz são <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor(System.CodeDom.CodeNamespaceCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; class that contains the elements of the specified source collection.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeNamespaceCollection" />, que contém os elementos da coleção de origem especificada.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; with which to initialize the collection.">O <see cref="T:System.CodeDom.CodeNamespaceCollection" /> com o qual inicializar a coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Add(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; object to the collection.">Adiciona o objeto <see cref="T:System.CodeDom.CodeNamespace" /> especificado à coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; to add.">O <see cref="T:System.CodeDom.CodeNamespace" /> a ser adicionado.</param>
      <returns vsli:raw="The index at which the new element was inserted.">O índice no qual o novo elemento foi inserido.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.AddRange(System.CodeDom.CodeNamespace[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; array to the end of the collection.">Copia os elementos da matriz <see cref="T:System.CodeDom.CodeNamespace" /> especificada para o fim da coleção.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; that contains the objects to add to the collection.">Uma matriz do tipo <see cref="T:System.CodeDom.CodeNamespace" /> que contém os objetos a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.AddRange(System.CodeDom.CodeNamespaceCollection)">
      <summary vsli:raw="Adds the contents of the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; object to the end of the collection.">Adiciona o conteúdo do objeto <see cref="T:System.CodeDom.CodeNamespaceCollection" /> especificado ao final da coleção.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; that contains the objects to add to the collection.">Um <see cref="T:System.CodeDom.CodeNamespaceCollection" /> que contém os objetos a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Contains(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; object.">Obtém um valor que indica se a coleção contém o objeto <see cref="T:System.CodeDom.CodeNamespace" /> especificado.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; to search for in the collection.">O <see cref="T:System.CodeDom.CodeNamespace" /> a ser pesquisado na coleção.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; is contained in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o item <see cref="T:System.CodeDom.CodeNamespace" /> estiver contido na coleção; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.CopyTo(System.CodeDom.CodeNamespace[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance, starting at the specified index.">Copia os objetos de coleção para uma instância de <see cref="T:System.Array" /> unidimensional, começando no índice especificado.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">O <see cref="T:System.Array" /> unidimensional que é o destino dos valores copiados da coleção.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">O índice da matriz no qual iniciar a inserção.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">A matriz de destino é multidimensional.
- ou -
O número de elementos na <see cref="T:System.CodeDom.CodeNamespaceCollection" /> é maior do que o espaço disponível entre o índice da matriz de destino especificada pelo parâmetro <paramref name="index" /> e o final da matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">O parâmetro <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">O parâmetro <paramref name="index" /> é menor do que o índice mínimo da matriz de destino.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.IndexOf(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; object in the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt;, if it exists in the collection.">Obtém o índice do objeto <see cref="T:System.CodeDom.CodeNamespace" /> na <see cref="T:System.CodeDom.CodeNamespaceCollection" />, se ele existe na coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; to locate.">O <see cref="T:System.CodeDom.CodeNamespace" /> a ser localizado.</param>
      <returns vsli:raw="The index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt;, if it is found, in the collection; otherwise, -1.">O índice do <see cref="T:System.CodeDom.CodeNamespace" /> especificado, se encontrado, na coleção; caso contrário, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Insert(System.Int32,System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; object into the collection at the specified index.">Insere o objeto <see cref="T:System.CodeDom.CodeNamespace" /> especificado na coleção no índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index where the new item should be inserted.">O índice baseado em zero no qual o novo item deve ser inserido.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; to insert.">O <see cref="T:System.CodeDom.CodeNamespace" /> a ser inserido.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; object at the specified index in the collection.">Obtém ou define o objeto <see cref="T:System.CodeDom.CodeNamespaceCollection" /> no índice especificado na coleção.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">O índice da coleção a ser acessada.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; at each valid index.">A <see cref="T:System.CodeDom.CodeNamespace" /> em cada índice válido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">O parâmetro <paramref name="index" /> está fora do intervalo válido de índices para a coleção.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Remove(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; object from the collection.">Remove o objeto <see cref="T:System.CodeDom.CodeNamespace" /> especificado da coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; to remove from the collection.">O <see cref="T:System.CodeDom.CodeNamespace" /> a ser removido da coleção.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">O objeto especificado não foi localizado na coleção.</exception>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceImport">
      <summary vsli:raw="Represents a namespace import directive that indicates a namespace to use.">Representa uma diretiva de importação de namespace que indica um namespace a ser usado.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImport.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeNamespaceImport" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImport.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; class using the specified namespace to import.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeNamespaceImport" /> usando o namespace a importar especificado.</summary>
      <param name="nameSpace" vsli:raw="The name of the namespace to import.">O nome do namespace a ser importado.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImport.LinePragma">
      <summary vsli:raw="Gets or sets the line and file the statement occurs on.">Obtém ou define a linha e o arquivo em que a instrução ocorre.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeLinePragma&quot; /&gt; that indicates the context of the statement.">Um <see cref="T:System.CodeDom.CodeLinePragma" /> que indica o contexto da instrução.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImport.Namespace">
      <summary vsli:raw="Gets or sets the namespace to import.">Obtém ou define o namespace a importar.</summary>
      <returns vsli:raw="The name of the namespace to import.">O nome do namespace a ser importado.</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceImportCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; objects.">Representa uma coleção de objetos <see cref="T:System.CodeDom.CodeNamespaceImport" /> .</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImportCollection&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeNamespaceImportCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.Add(System.CodeDom.CodeNamespaceImport)">
      <summary vsli:raw="Adds a &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; object to the collection.">Adiciona um objeto de <see cref="T:System.CodeDom.CodeNamespaceImport" /> à coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; object to add to the collection.">O objeto <see cref="T:System.CodeDom.CodeNamespaceImport" /> a ser adicionado à coleção.</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.AddRange(System.CodeDom.CodeNamespaceImport[])">
      <summary vsli:raw="Adds a set of &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; objects to the collection.">Adiciona um conjunto de objetos <see cref="T:System.CodeDom.CodeNamespaceImport" /> à coleção.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; that contains the objects to add to the collection.">Uma matriz do tipo <see cref="T:System.CodeDom.CodeNamespaceImport" /> que contém os objetos a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.Clear">
      <summary vsli:raw="Clears the collection of members.">Limpa a coleção de membros.</summary>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.Count">
      <summary vsli:raw="Gets the number of namespaces in the collection.">Obtém o número de namespaces na coleção.</summary>
      <returns vsli:raw="The number of namespaces in the collection.">O número de namespaces na coleção.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.GetEnumerator">
      <summary vsli:raw="Gets an enumerator that enumerates the collection members.">Obtém um enumerador que enumera os membros da coleção.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that indicates the collection members.">Um <see cref="T:System.Collections.IEnumerator" /> que indica os membros da coleção.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; object at the specified index in the collection.">Obtém ou define o objeto <see cref="T:System.CodeDom.CodeNamespaceImport" /> no índice especificado na coleção.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">O índice da coleção a ser acessada.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; object at each valid index.">Um <see cref="T:System.CodeDom.CodeNamespaceImport" /> objeto em cada índice válido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">O parâmetro <paramref name="index" /> está fora do intervalo válido de índices para a coleção.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">Copia os elementos do <see cref="T:System.Collections.ICollection" /> para um <see cref="T:System.Array" />, começando em um determinado índice <see cref="T:System.Array" />.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The array must have zero-based indexing.">Um <see cref="T:System.Array" /> unidimensional que é o destino dos elementos copiados do <see cref="T:System.Collections.ICollection" />. A matriz deve ter indexação com base em zero.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the number of elements contained in the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Obtém o número de elementos contidos no <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">O número de elementos contidos no <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Obtém um valor que indica se o acesso à <see cref="T:System.Collections.ICollection" /> é sincronizado (thread-safe).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;. This property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> caso o acesso ao <see cref="T:System.Collections.ICollection" /> seja sincronizado (thread-safe); do contrário, <see langword="false" />. Essa propriedade sempre retorna <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Obtém um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.  This property always returns &lt;see langword=&quot;null&quot; /&gt;.">Um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.  Essa propriedade sempre retorna <see langword="null" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that can iterate through a collection.">Retorna um enumerador que pode iterar por uma coleção.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">Um <see cref="T:System.Collections.IEnumerator" /> que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an object to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Adiciona um objeto ao <see cref="T:System.Collections.IList" />.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to add to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">O <see cref="T:System.Object" /> para adicionar ao <see cref="T:System.Collections.IList" />.</param>
      <returns vsli:raw="The position at which the new element was inserted.">A posição em que o novo elemento foi inserido.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Remove todos os itens do <see cref="T:System.Collections.IList" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; contains a specific value.">Determinará se o <see cref="T:System.Collections.IList" /> contiver um valor específico.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">O <see cref="T:System.Object" /> a ser localizado no <see cref="T:System.Collections.IList" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value is in the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o valor está na lista; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Determina o índice de um item específico em <see cref="T:System.Collections.IList" />.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">O <see cref="T:System.Object" /> a ser localizado no <see cref="T:System.Collections.IList" />.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if it is found in the list; otherwise, -1.">O índice de <paramref name="value" /> se ele for encontrado na lista; caso contrário, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; at the specified position.">Insere um item na <see cref="T:System.Collections.IList" /> na posição especificada.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">O índice de base zero no qual o <paramref name="value" /> deve ser inserido.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to insert into the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">O <see cref="T:System.Object" /> a ser inserido no <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size.">Obtém um valor que indica se o <see cref="T:System.Collections.IList" /> tem um tamanho fixo.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o <see cref="T:System.Collections.IList" /> tiver um valor fixo; caso contrário, <see langword="false" />.  Essa propriedade sempre retorna <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; is read-only.">Obtém um valor que indica se o <see cref="T:System.Collections.IList" /> é somente leitura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o <see cref="T:System.Collections.IList" /> for somente leitura; caso contrário, <see langword="false" />.  Essa propriedade sempre retorna <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the element at the specified index.">Obtém ou define o elemento no índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get or set.">O índice com base em zero do elemento a ser obtido ou definido.</param>
      <returns vsli:raw="The element at the specified index.">O elemento no índice especificado.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Remove a primeira ocorrência de um objeto específico do <see cref="T:System.Collections.IList" />.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to remove from the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">O <see cref="T:System.Object" /> a ser removido de <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the element at the specified index of the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Remove o elemento no índice especificado do <see cref="T:System.Collections.IList" />.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to remove.">O índice de base zero do elemento a ser removido.</param>
    </member>
    <member name="T:System.CodeDom.CodeObject">
      <summary vsli:raw="Provides a common base class for most Code Document Object Model (CodeDOM) objects.">Fornece uma classe base comum para a maioria dos objetos CodeDOM (Modelo de Objeto do Documento de Código).</summary>
    </member>
    <member name="M:System.CodeDom.CodeObject.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeObject&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeObject" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeObject.UserData">
      <summary vsli:raw="Gets the user-definable data for the current object.">Obtém os dados definidos pelo usuário para o objeto atual.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; containing user data for the current object.">Um <see cref="T:System.Collections.IDictionary" /> que contém dados de usuário para o objeto atual.</returns>
    </member>
    <member name="T:System.CodeDom.CodeObjectCreateExpression">
      <summary vsli:raw="Represents an expression that creates a new instance of a type.">Representa uma expressão que cria uma nova instância de um tipo.</summary>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeObjectCreateExpression&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeObjectCreateExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeObjectCreateExpression&quot; /&gt; class using the specified type and parameters.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> usando o tipo e os parâmetros especificados.</summary>
      <param name="createType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the object to create.">Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo de dados do objeto a criar.</param>
      <param name="parameters" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects that indicates the parameters to use to create the object.">Uma matriz de objetos <see cref="T:System.CodeDom.CodeExpression" /> que indica os parâmetros a serem usados para criar o objeto.</param>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeObjectCreateExpression&quot; /&gt; class using the specified type and parameters.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> usando o tipo e os parâmetros especificados.</summary>
      <param name="createType" vsli:raw="The name of the data type of object to create.">O nome do tipo de dados do objeto a criar.</param>
      <param name="parameters" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects that indicates the parameters to use to create the object.">Uma matriz de objetos <see cref="T:System.CodeDom.CodeExpression" /> que indica os parâmetros a serem usados para criar o objeto.</param>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeObjectCreateExpression&quot; /&gt; class using the specified type and parameters.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> usando o tipo e os parâmetros especificados.</summary>
      <param name="createType" vsli:raw="The data type of the object to create.">O tipo de dados do objeto a criar.</param>
      <param name="parameters" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects that indicates the parameters to use to create the object.">Uma matriz de objetos <see cref="T:System.CodeDom.CodeExpression" /> que indica os parâmetros a serem usados para criar o objeto.</param>
    </member>
    <member name="P:System.CodeDom.CodeObjectCreateExpression.CreateType">
      <summary vsli:raw="Gets or sets the data type of the object to create.">Obtém ou define o tipo de dados do objeto a criar.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to the data type of the object to create.">Um <see cref="T:System.CodeDom.CodeTypeReference" /> para o tipo de dados do objeto a ser criado.</returns>
    </member>
    <member name="P:System.CodeDom.CodeObjectCreateExpression.Parameters">
      <summary vsli:raw="Gets or sets the parameters to use in creating the object.">Obtém ou define os parâmetros a serem usados na criação do objeto.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that indicates the parameters to use when creating the object.">Um <see cref="T:System.CodeDom.CodeExpressionCollection" /> que indica os parâmetros a serem usados ao criar o objeto.</returns>
    </member>
    <member name="T:System.CodeDom.CodeParameterDeclarationExpression">
      <summary vsli:raw="Represents a parameter declaration for a method, property, or constructor.">Representa uma declaração de parâmetro para um método, propriedade ou construtor.</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; class using the specified parameter type and name.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> usando o nome e o tipo do parâmetro especificados.</summary>
      <param name="type" vsli:raw="An object that indicates the type of the parameter to declare.">Um objeto que indica o tipo do parâmetro a ser declarado.</param>
      <param name="name" vsli:raw="The name of the parameter to declare.">O nome do parâmetro a ser declarado.</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; class using the specified parameter type and name.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> usando o nome e o tipo do parâmetro especificados.</summary>
      <param name="type" vsli:raw="The type of the parameter to declare.">O tipo do parâmetro a ser declarado.</param>
      <param name="name" vsli:raw="The name of the parameter to declare.">O nome do parâmetro a ser declarado.</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.Type,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; class using the specified parameter type and name.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> usando o nome e o tipo do parâmetro especificados.</summary>
      <param name="type" vsli:raw="The type of the parameter to declare.">O tipo do parâmetro a ser declarado.</param>
      <param name="name" vsli:raw="The name of the parameter to declare.">O nome do parâmetro a ser declarado.</param>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.CustomAttributes">
      <summary vsli:raw="Gets or sets the custom attributes for the parameter declaration.">Obtém ou define os atributos personalizados para a declaração de parâmetro.</summary>
      <returns vsli:raw="An object that indicates the custom attributes.">Um objeto que indica os atributos personalizados.</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Direction">
      <summary vsli:raw="Gets or sets the direction of the field.">Obtém ou define a direção do campo.</summary>
      <returns vsli:raw="An object that indicates the direction of the field.">Um objeto que indica a direção do campo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Name">
      <summary vsli:raw="Gets or sets the name of the parameter.">Obtém ou define o nome do parâmetro.</summary>
      <returns vsli:raw="The name of the parameter.">O nome do parâmetro.</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Type">
      <summary vsli:raw="Gets or sets the type of the parameter.">Obtém ou define o tipo do parâmetro.</summary>
      <returns vsli:raw="The type of the parameter.">O tipo do parâmetro.</returns>
    </member>
    <member name="T:System.CodeDom.CodeParameterDeclarationExpressionCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; objects.">Representa uma coleção de objetos <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> .</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor(System.CodeDom.CodeParameterDeclarationExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; objects.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> contendo a matriz de objetos <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> especificada.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; objects with which to initialize the collection.">Uma matriz de objetos <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> com os quais inicializar a coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="one or more objects in the array are &lt;see langword=&quot;null&quot; /&gt;.">um ou mais objetos na matriz são <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; class containing the elements of the specified source collection.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />, que contém os elementos da coleção de origem especificada.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; with which to initialize the collection.">Um <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> com o qual inicializar a coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Add(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; to the collection.">Adiciona o <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> especificado à coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; to add.">O <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> a ser adicionado.</param>
      <returns vsli:raw="The index at which the new element was inserted.">O índice no qual o novo elemento foi inserido.</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.AddRange(System.CodeDom.CodeParameterDeclarationExpression[])">
      <summary vsli:raw="Copies the elements of the specified array to the end of the collection.">Copia os elementos da matriz especificada para o fim da coleção.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; containing the objects to add to the collection.">A matriz do tipo <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> que contém os objetos a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.AddRange(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary vsli:raw="Adds the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; to the end of the collection.">Adiciona o conteúdo de outro <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> ao final da coleção.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; containing the objects to add to the collection.">Um <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> que contém os objetos a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Contains(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary vsli:raw="Gets a value indicating whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt;.">Obtém um valor que indica se a coleção contém o <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> especificado.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; to search for in the collection.">Um <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> a ser pesquisado na coleção.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a coleção contiver o objeto especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.CopyTo(System.CodeDom.CodeParameterDeclarationExpression[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance beginning at the specified index.">Copia os objetos de coleção para uma instância de <see cref="T:System.Array" /> unidimensional, começando no índice especificado.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">O <see cref="T:System.Array" /> unidimensional que é o destino dos valores copiados da coleção.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">O índice da matriz no qual iniciar a inserção.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">A matriz de destino é multidimensional.
- ou -
O número de elementos na <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> é maior do que o espaço disponível entre o índice da matriz de destino especificada pelo parâmetro <paramref name="index" /> e o final da matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">O parâmetro <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">O parâmetro <paramref name="index" /> é menor do que o índice mínimo da matriz de destino.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.IndexOf(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary vsli:raw="Gets the index in the collection of the specified &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt;, if it exists in the collection.">Obterá o índice na coleção do <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> especificado, se ele existir na coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; to locate in the collection.">O <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> a ser localizado na coleção.</param>
      <returns vsli:raw="The index in the collection of the specified object, if found; otherwise, -1.">O índice na coleção do objeto especificado, se encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Insert(System.Int32,System.CodeDom.CodeParameterDeclarationExpression)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; into the collection at the specified index.">Insere o <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> especificado na coleção, no índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">O índice baseado em zero em que o objeto especificado deverá ser inserido.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; to insert.">O <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> a ser inserido.</param>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpressionCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; at the specified index in the collection.">Obtém ou define o <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> no índice especificado na coleção.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">O índice da coleção a ser acessada.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; at each valid index.">A <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> em cada índice válido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">O parâmetro <paramref name="index" /> está fora do intervalo válido de índices para a coleção.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Remove(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; from the collection.">Remove o <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> especificado da coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; to remove from the collection.">O <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> a ser removido da coleção.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">O objeto especificado não foi localizado na coleção.</exception>
    </member>
    <member name="T:System.CodeDom.CodePrimitiveExpression">
      <summary vsli:raw="Represents a primitive data type value.">Representa um valor de tipo de dados primitivo.</summary>
    </member>
    <member name="M:System.CodeDom.CodePrimitiveExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodePrimitiveExpression&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodePrimitiveExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodePrimitiveExpression.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodePrimitiveExpression&quot; /&gt; class using the specified object.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodePrimitiveExpression" /> usando o objeto especificado.</summary>
      <param name="value" vsli:raw="The object to represent.">O objeto a ser representado.</param>
    </member>
    <member name="P:System.CodeDom.CodePrimitiveExpression.Value">
      <summary vsli:raw="Gets or sets the primitive data type to represent.">Obtém ou define o tipo de dados primitivo a ser representado.</summary>
      <returns vsli:raw="The primitive data type instance to represent the value of.">A instância do tipo de dados primitivo para representar o valor de.</returns>
    </member>
    <member name="T:System.CodeDom.CodePropertyReferenceExpression">
      <summary vsli:raw="Represents a reference to the value of a property.">Representa uma referência ao valor de uma propriedade.</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertyReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodePropertyReferenceExpression&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodePropertyReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertyReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodePropertyReferenceExpression&quot; /&gt; class using the specified target object and property name.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodePropertyReferenceExpression" /> usando o nome da propriedade e o objeto de destino especificados.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the property to reference.">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o objeto que contém a propriedade a referenciar.</param>
      <param name="propertyName" vsli:raw="The name of the property to reference.">O nome da propriedade a referenciar.</param>
    </member>
    <member name="P:System.CodeDom.CodePropertyReferenceExpression.PropertyName">
      <summary vsli:raw="Gets or sets the name of the property to reference.">Obtém ou define o nome da propriedade a referenciar.</summary>
      <returns vsli:raw="The name of the property to reference.">O nome da propriedade a referenciar.</returns>
    </member>
    <member name="P:System.CodeDom.CodePropertyReferenceExpression.TargetObject">
      <summary vsli:raw="Gets or sets the object that contains the property to reference.">Obtém ou define o objeto que contém a propriedade a referenciar.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the property to reference.">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o objeto que contém a propriedade a referenciar.</returns>
    </member>
    <member name="T:System.CodeDom.CodePropertySetValueReferenceExpression">
      <summary vsli:raw="Represents the value argument of a property set method call within a property set method.">Representa o argumento de valor de uma chamada do método do conjunto de propriedades dentro de um método do conjunto de propriedades.</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertySetValueReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodePropertySetValueReferenceExpression&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodePropertySetValueReferenceExpression" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeRegionDirective">
      <summary vsli:raw="Specifies the name and mode for a code region.">Especifica o nome e o modo de uma região de código.</summary>
    </member>
    <member name="M:System.CodeDom.CodeRegionDirective.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeRegionDirective&quot; /&gt; class with default values.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeRegionDirective" /> com valores padrão.</summary>
    </member>
    <member name="M:System.CodeDom.CodeRegionDirective.#ctor(System.CodeDom.CodeRegionMode,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeRegionDirective&quot; /&gt; class, specifying its mode and name.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeRegionDirective" />, especificando seu modo e nome.</summary>
      <param name="regionMode" vsli:raw="One of the &lt;see cref=&quot;T:System.CodeDom.CodeRegionMode&quot; /&gt; values.">Um dos valores de <see cref="T:System.CodeDom.CodeRegionMode" />.</param>
      <param name="regionText" vsli:raw="The name for the region.">O nome da região.</param>
    </member>
    <member name="P:System.CodeDom.CodeRegionDirective.RegionMode">
      <summary vsli:raw="Gets or sets the mode for the region directive.">Obtém ou define o modo para a diretiva de região.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.CodeDom.CodeRegionMode&quot; /&gt; values. The default is &lt;see cref=&quot;F:System.CodeDom.CodeRegionMode.None&quot; /&gt;.">Um dos valores de <see cref="T:System.CodeDom.CodeRegionMode" />. O padrão é <see cref="F:System.CodeDom.CodeRegionMode.None" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeRegionDirective.RegionText">
      <summary vsli:raw="Gets or sets the name of the region.">Obtém ou define o nome da região.</summary>
      <returns vsli:raw="The name of the region.">O nome da região.</returns>
    </member>
    <member name="T:System.CodeDom.CodeRegionMode">
      <summary vsli:raw="Specifies the start or end of a code region.">Especifica o início ou término de uma região de código.</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.End">
      <summary vsli:raw="End of the region.">Término da região.</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.None">
      <summary vsli:raw="Not used.">Não usado.</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.Start">
      <summary vsli:raw="Start of the region.">Início da região.</summary>
    </member>
    <member name="T:System.CodeDom.CodeRemoveEventStatement">
      <summary vsli:raw="Represents a statement that removes an event handler.">Representa uma instrução que remove um manipulador de eventos.</summary>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeRemoveEventStatement&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeRemoveEventStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor(System.CodeDom.CodeEventReferenceExpression,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeRemoveEventStatement&quot; /&gt; class with the specified event and event handler.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeRemoveEventStatement" /> com o evento e o manipulador de eventos especificados.</summary>
      <param name="eventRef" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeEventReferenceExpression&quot; /&gt; that indicates the event to detach the event handler from.">Um <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> que indica o evento do qual desanexar o manipulador de eventos.</param>
      <param name="listener" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the event handler to remove.">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o manipulador de eventos a ser removido.</param>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeRemoveEventStatement&quot; /&gt; class using the specified target object, event name, and event handler.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeRemoveEventStatement" /> usando o objeto de destino, o nome do evento e o manipulador de eventos especificados.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the event.">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o objeto que contém o evento.</param>
      <param name="eventName" vsli:raw="The name of the event.">O nome do evento.</param>
      <param name="listener" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the event handler to remove.">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o manipulador de eventos a ser removido.</param>
    </member>
    <member name="P:System.CodeDom.CodeRemoveEventStatement.Event">
      <summary vsli:raw="Gets or sets the event to remove a listener from.">Obtém ou define o evento do qual remover um ouvinte.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeEventReferenceExpression&quot; /&gt; that indicates the event to remove a listener from.">Um <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> que indica o evento do qual remover um ouvinte.</returns>
    </member>
    <member name="P:System.CodeDom.CodeRemoveEventStatement.Listener">
      <summary vsli:raw="Gets or sets the event handler to remove.">Obtém ou define o manipulador de eventos a ser removido.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the event handler to remove.">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o manipulador de eventos a ser removido.</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetCompileUnit">
      <summary vsli:raw="Represents a literal code fragment that can be compiled.">Representa um fragmento de código literal que pode ser compilado.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetCompileUnit.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetCompileUnit&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeSnippetCompileUnit" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetCompileUnit.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetCompileUnit&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeSnippetCompileUnit" />.</summary>
      <param name="value" vsli:raw="The literal code fragment to represent.">O fragmento de código literal a representar.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetCompileUnit.LinePragma">
      <summary vsli:raw="Gets or sets the line and file information about where the code is located in a source code document.">Obtém ou define a linha e as informações do arquivo sobre a localização do código em um documento de código-fonte.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeLinePragma&quot; /&gt; that indicates the position of the code fragment.">Um <see cref="T:System.CodeDom.CodeLinePragma" /> que indica a posição do fragmento de código.</returns>
    </member>
    <member name="P:System.CodeDom.CodeSnippetCompileUnit.Value">
      <summary vsli:raw="Gets or sets the literal code fragment to represent.">Obtém ou define o fragmento de código literal a ser representado.</summary>
      <returns vsli:raw="The literal code fragment.">O fragmento de código literal.</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetExpression">
      <summary vsli:raw="Represents a literal expression.">Representa uma expressão literal.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetExpression&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeSnippetExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetExpression.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetExpression&quot; /&gt; class using the specified literal expression.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeSnippetExpression" /> usando a expressão literal especificada.</summary>
      <param name="value" vsli:raw="The literal expression to represent.">A expressão literal a representar.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetExpression.Value">
      <summary vsli:raw="Gets or sets the literal string of code.">Obtém ou define a cadeia de caracteres literal de código.</summary>
      <returns vsli:raw="The literal string.">A cadeia de caracteres literal.</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetStatement">
      <summary vsli:raw="Represents a statement using a literal code fragment.">Representa uma instrução que usa um fragmento de código literal.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetStatement&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeSnippetStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetStatement.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetStatement&quot; /&gt; class using the specified code fragment.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeSnippetStatement" /> usando o fragmento de código especificado.</summary>
      <param name="value" vsli:raw="The literal code fragment of the statement to represent.">O fragmento de código literal da instrução a representar.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetStatement.Value">
      <summary vsli:raw="Gets or sets the literal code fragment statement.">Obtém ou define a instrução de fragmento de código literal.</summary>
      <returns vsli:raw="The literal code fragment statement.">A instrução de fragmento de código literal.</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetTypeMember">
      <summary vsli:raw="Represents a member of a type using a literal code fragment.">Representa um membro de um tipo que usa um fragmento de código literal.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetTypeMember.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetTypeMember&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeSnippetTypeMember" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetTypeMember.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetTypeMember&quot; /&gt; class using the specified text.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeSnippetTypeMember" /> usando o texto especificado.</summary>
      <param name="text" vsli:raw="The literal code fragment for the type member.">O fragmento de código literal para o membro de tipo.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetTypeMember.Text">
      <summary vsli:raw="Gets or sets the literal code fragment for the type member.">Obtém ou define o fragmento de código literal para o membro de tipo.</summary>
      <returns vsli:raw="The literal code fragment for the type member.">O fragmento de código literal para o membro de tipo.</returns>
    </member>
    <member name="T:System.CodeDom.CodeStatement">
      <summary vsli:raw="Represents the &lt;see langword=&quot;abstract&quot; /&gt; base class from which all code statements derive.">Representa a classe base <see langword="abstract" /> da qual derivam todas as instruções de código.</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeStatement" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeStatement.EndDirectives">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object that contains end directives.">Obtém um objeto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> que contém as diretivas de término.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing end directives.">Um <see cref="T:System.CodeDom.CodeDirectiveCollection" /> objeto que contém as diretivas end.</returns>
    </member>
    <member name="P:System.CodeDom.CodeStatement.LinePragma">
      <summary vsli:raw="Gets or sets the line on which the code statement occurs.">Obtém ou define a linha em que ocorre a declaração de código.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeLinePragma&quot; /&gt; object that indicates the context of the code statement.">Um <see cref="T:System.CodeDom.CodeLinePragma" /> objeto que indica o contexto da instrução de código.</returns>
    </member>
    <member name="P:System.CodeDom.CodeStatement.StartDirectives">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object that contains start directives.">Obtém um objeto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> que contém as diretivas de início.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing start directives.">Um <see cref="T:System.CodeDom.CodeDirectiveCollection" /> objeto que contém as diretivas Start.</returns>
    </member>
    <member name="T:System.CodeDom.CodeStatementCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects.">Representa uma coleção de objetos <see cref="T:System.CodeDom.CodeStatement" /> .</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeStatementCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor(System.CodeDom.CodeStatement[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; class that contains the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeStatementCollection" /> que contém a matriz de objetos <see cref="T:System.CodeDom.CodeStatement" /> especificada.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects with which to initialize the collection.">Uma matriz de objetos <see cref="T:System.CodeDom.CodeStatement" /> com os quais inicializar a coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor(System.CodeDom.CodeStatementCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; class that contains the elements of the specified source collection.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeStatementCollection" />, que contém os elementos da coleção de origem especificada.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; object with which to initialize the collection.">Um objeto <see cref="T:System.CodeDom.CodeStatementCollection" /> com o qual inicializar a coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Add(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to the collection.">Adiciona o objeto <see cref="T:System.CodeDom.CodeExpression" /> especificado à coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to add.">O objeto <see cref="T:System.CodeDom.CodeExpression" /> a ser adicionado.</param>
      <returns vsli:raw="The index at which the new element was inserted.">O índice no qual o novo elemento foi inserido.</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Add(System.CodeDom.CodeStatement)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object to the collection.">Adiciona o objeto <see cref="T:System.CodeDom.CodeStatement" /> especificado à coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object to add.">O objeto <see cref="T:System.CodeDom.CodeStatement" /> a ser adicionado.</param>
      <returns vsli:raw="The index at which the new element was inserted.">O índice no qual o novo elemento foi inserido.</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.AddRange(System.CodeDom.CodeStatement[])">
      <summary vsli:raw="Adds a set of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects to the collection.">Adiciona um conjunto de objetos <see cref="T:System.CodeDom.CodeStatement" /> à coleção.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects to add to the collection.">Uma matriz de objetos <see cref="T:System.CodeDom.CodeStatement" /> a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.AddRange(System.CodeDom.CodeStatementCollection)">
      <summary vsli:raw="Adds the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; object to the end of the collection.">Adiciona o conteúdo de outro objeto <see cref="T:System.CodeDom.CodeStatementCollection" /> ao final da coleção.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; object that contains the objects to add to the collection.">Um objeto <see cref="T:System.CodeDom.CodeStatementCollection" /> que contém os objetos a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Contains(System.CodeDom.CodeStatement)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object.">Obtém um valor que indica se a coleção contém o objeto <see cref="T:System.CodeDom.CodeStatement" /> especificado.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object to search for in the collection.">O objeto <see cref="T:System.CodeDom.CodeStatement" /> pelo qual pesquisar na coleção.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a coleção contiver o objeto especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.CopyTo(System.CodeDom.CodeStatement[],System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; object to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance, starting at the specified index.">Copia os elementos do objeto <see cref="T:System.CodeDom.CodeStatementCollection" /> para uma instância de <see cref="T:System.Array" /> unidimensional, começando no índice especificado.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">O <see cref="T:System.Array" /> unidimensional que é o destino dos valores copiados da coleção.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">O índice da matriz no qual iniciar a inserção.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">A matriz de destino é multidimensional.
- ou -
O número de elementos na <see cref="T:System.CodeDom.CodeStatementCollection" /> é maior do que o espaço disponível entre o índice da matriz de destino especificada pelo parâmetro <paramref name="index" /> e o final da matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">O parâmetro <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">O parâmetro <paramref name="index" /> é menor do que o índice mínimo da matriz de destino.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.IndexOf(System.CodeDom.CodeStatement)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object in the &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt;, if it exists in the collection.">Obtém o índice do objeto <see cref="T:System.CodeDom.CodeStatement" /> na <see cref="T:System.CodeDom.CodeStatementCollection" />, se ele existe na coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; to locate in the collection.">O <see cref="T:System.CodeDom.CodeStatement" /> a ser localizado na coleção.</param>
      <returns vsli:raw="The index of the specified object, if it is found, in the collection; otherwise, -1.">O índice do objeto especificado, se encontrado, na coleção; caso contrário, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Insert(System.Int32,System.CodeDom.CodeStatement)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object into the collection at the specified index.">Insere o objeto <see cref="T:System.CodeDom.CodeStatement" /> especificado na coleção no índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">O índice baseado em zero em que o objeto especificado deverá ser inserido.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object to insert.">O objeto <see cref="T:System.CodeDom.CodeStatement" /> a ser inserido.</param>
    </member>
    <member name="P:System.CodeDom.CodeStatementCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object at the specified index in the collection.">Obtém ou define o objeto <see cref="T:System.CodeDom.CodeStatement" /> no índice especificado na coleção.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">O índice da coleção a ser acessada.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; at each valid index.">A <see cref="T:System.CodeDom.CodeStatement" /> em cada índice válido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">O parâmetro <paramref name="index" /> está fora do intervalo válido de índices para a coleção.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Remove(System.CodeDom.CodeStatement)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object from the collection.">Remove o objeto <see cref="T:System.CodeDom.CodeStatement" /> especificado da coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; to remove from the collection.">O <see cref="T:System.CodeDom.CodeStatement" /> a ser removido da coleção.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">O objeto especificado não foi localizado na coleção.</exception>
    </member>
    <member name="T:System.CodeDom.CodeThisReferenceExpression">
      <summary vsli:raw="Represents a reference to the current local class instance.">Representa uma referência para a instância de classe local atual.</summary>
    </member>
    <member name="M:System.CodeDom.CodeThisReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeThisReferenceExpression&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeThisReferenceExpression" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeThrowExceptionStatement">
      <summary vsli:raw="Represents a statement that throws an exception.">Representa uma instrução que gera uma exceção.</summary>
    </member>
    <member name="M:System.CodeDom.CodeThrowExceptionStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeThrowExceptionStatement&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeThrowExceptionStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeThrowExceptionStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeThrowExceptionStatement&quot; /&gt; class with the specified exception type instance.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeThrowExceptionStatement" /> com a instância do tipo de exceção especificada.</summary>
      <param name="toThrow" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the exception to throw.">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica a exceção a gerar.</param>
    </member>
    <member name="P:System.CodeDom.CodeThrowExceptionStatement.ToThrow">
      <summary vsli:raw="Gets or sets the exception to throw.">Obtém ou define a exceção a gerar.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; representing an instance of the exception to throw.">Um <see cref="T:System.CodeDom.CodeExpression" /> que representa uma instância da exceção a ser lançada.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTryCatchFinallyStatement">
      <summary vsli:raw="Represents a &lt;see langword=&quot;try&quot; /&gt; block with any number of &lt;see langword=&quot;catch&quot; /&gt; clauses and, optionally, a &lt;see langword=&quot;finally&quot; /&gt; block.">Representa um bloco <see langword="try" /> com qualquer número de cláusulas <see langword="catch" /> e, opcionalmente, um bloco <see langword="finally" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTryCatchFinallyStatement&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor(System.CodeDom.CodeStatement[],System.CodeDom.CodeCatchClause[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTryCatchFinallyStatement&quot; /&gt; class using the specified statements for try and catch clauses.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" /> usando as instruções especificadas para as cláusulas try e catch.</summary>
      <param name="tryStatements" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects that indicate the statements to try.">Uma matriz de objetos <see cref="T:System.CodeDom.CodeStatement" /> que indicam as instruções a experimentar.</param>
      <param name="catchClauses" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; objects that indicate the clauses to catch.">Uma matriz de objetos <see cref="T:System.CodeDom.CodeCatchClause" /> que indicam as cláusulas a capturar.</param>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor(System.CodeDom.CodeStatement[],System.CodeDom.CodeCatchClause[],System.CodeDom.CodeStatement[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTryCatchFinallyStatement&quot; /&gt; class using the specified statements for try, catch clauses, and finally statements.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" /> usando as instruções especificadas para as cláusulas try e catch, bem como as instruções finally.</summary>
      <param name="tryStatements" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects that indicate the statements to try.">Uma matriz de objetos <see cref="T:System.CodeDom.CodeStatement" /> que indicam as instruções a experimentar.</param>
      <param name="catchClauses" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; objects that indicate the clauses to catch.">Uma matriz de objetos <see cref="T:System.CodeDom.CodeCatchClause" /> que indicam as cláusulas a capturar.</param>
      <param name="finallyStatements" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects that indicate the finally statements to use.">Uma matriz de objetos <see cref="T:System.CodeDom.CodeStatement" /> que indicam as instruções finally a usar.</param>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.CatchClauses">
      <summary vsli:raw="Gets the catch clauses to use.">Obtém as cláusulas catch a usar.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; that indicates the catch clauses to use.">Um <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> que indica as cláusulas catch a serem usadas.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.FinallyStatements">
      <summary vsli:raw="Gets the finally statements to use.">Obtém as instruções finally a usar.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; that indicates the finally statements.">Um <see cref="T:System.CodeDom.CodeStatementCollection" /> que indica as instruções finally.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.TryStatements">
      <summary vsli:raw="Gets the statements to try.">Obtém as instruções a experimentar.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; that indicates the statements to try.">Um <see cref="T:System.CodeDom.CodeStatementCollection" /> que indica as instruções a serem experimentadas.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeConstructor">
      <summary vsli:raw="Represents a static constructor for a class.">Representa um construtor estático para uma classe.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeConstructor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeConstructor&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeConstructor" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeTypeDeclaration">
      <summary vsli:raw="Represents a type declaration for a class, structure, interface, or enumeration.">Representa uma declaração de tipo de uma classe, estrutura, interface ou enumeração.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclaration.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeDeclaration" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclaration.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; class with the specified name.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeDeclaration" /> com o nome especificado.</summary>
      <param name="name" vsli:raw="The name for the new type.">O nome do novo tipo.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
      <summary vsli:raw="Gets the base types of the type.">Obtém os tipos base do tipo.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; object that indicates the base types of the type.">Um objeto <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> que indica os tipos base do tipo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsClass">
      <summary vsli:raw="Gets or sets a value indicating whether the type is a class or reference type.">Obtém ou define um valor que indica se o tipo é um tipo de classe ou de referência.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is a class or reference type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o tipo é um tipo de classe ou referência; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsEnum">
      <summary vsli:raw="Gets or sets a value indicating whether the type is an enumeration.">Obtém ou define um valor que indica se o tipo é uma enumeração.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is an enumeration; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o tipo é uma enumeração; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsInterface">
      <summary vsli:raw="Gets or sets a value indicating whether the type is an interface.">Obtém ou define um valor que indica se o tipo é uma interface.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is an interface; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o tipo é uma interface; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
      <summary vsli:raw="Gets or sets a value indicating whether the type declaration is complete or partial.">Obtém ou define um valor que indica se a declaração de tipo é completa ou parcial.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the class or structure declaration is a partial representation of the implementation; &lt;see langword=&quot;false&quot; /&gt; if the declaration is a complete implementation of the class or structure. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a declaração de classe ou estrutura for uma representação parcial da implementação; <see langword="false" /> se a declaração for uma implementação completa da classe ou estrutura. O padrão é <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsStruct">
      <summary vsli:raw="Gets or sets a value indicating whether the type is a value type (struct).">Obtém ou define um valor que indica se o tipo é um tipo de valor (struct).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is a value type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o tipo é um tipo de valor; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.Members">
      <summary vsli:raw="Gets the collection of class members for the represented type.">Obtém a coleção de membros de classe para o tipo representado.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; object that indicates the class members.">Um objeto <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> que indica os membros da classe.</returns>
    </member>
    <member name="E:System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes">
      <summary vsli:raw="Occurs when the &lt;see cref=&quot;P:System.CodeDom.CodeTypeDeclaration.BaseTypes&quot; /&gt; collection is accessed for the first time.">Ocorre quando a coleção <see cref="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" /> é acessada pela primeira vez.</summary>
    </member>
    <member name="E:System.CodeDom.CodeTypeDeclaration.PopulateMembers">
      <summary vsli:raw="Occurs when the &lt;see cref=&quot;P:System.CodeDom.CodeTypeDeclaration.Members&quot; /&gt; collection is accessed for the first time.">Ocorre quando a coleção <see cref="P:System.CodeDom.CodeTypeDeclaration.Members" /> é acessada pela primeira vez.</summary>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
      <summary vsli:raw="Gets or sets the attributes of the type.">Obtém ou define os atributos do tipo.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.TypeAttributes&quot; /&gt; object that indicates the attributes of the type.">Um objeto <see cref="T:System.Reflection.TypeAttributes" /> que indica os atributos do tipo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.TypeParameters">
      <summary vsli:raw="Gets the type parameters for the type declaration.">Obtém os parâmetros de tipo para a declaração de tipo.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; that contains the type parameters for the type declaration.">Um <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> que contém os parâmetros de tipo para a declaração de tipo.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeDeclarationCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; objects.">Representa uma coleção de objetos <see cref="T:System.CodeDom.CodeTypeDeclaration" /> .</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor(System.CodeDom.CodeTypeDeclaration[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; class that contains the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; objects.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> que contém a matriz de objetos <see cref="T:System.CodeDom.CodeTypeDeclaration" /> especificada.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; objects with which to initialize the collection.">Uma matriz de objetos <see cref="T:System.CodeDom.CodeTypeDeclaration" /> com os quais inicializar a coleção.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor(System.CodeDom.CodeTypeDeclarationCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; class that contains the elements of the specified source collection.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" />, que contém os elementos da coleção de origem especificada.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; object with which to initialize the collection.">Um objeto <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> com o qual inicializar a coleção.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Add(System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object to the collection.">Adiciona o objeto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> especificado à coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object to add.">O objeto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> a ser adicionado.</param>
      <returns vsli:raw="The index at which the new element was inserted.">O índice no qual o novo elemento foi inserido.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.AddRange(System.CodeDom.CodeTypeDeclaration[])">
      <summary vsli:raw="Copies the elements of the specified array to the end of the collection.">Copia os elementos da matriz especificada para o fim da coleção.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; that contains the objects to add to the collection.">Uma matriz do tipo <see cref="T:System.CodeDom.CodeTypeDeclaration" /> que contém os objetos a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.AddRange(System.CodeDom.CodeTypeDeclarationCollection)">
      <summary vsli:raw="Adds the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; object to the end of the collection.">Adiciona o conteúdo de outro objeto <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> ao final da coleção.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; object that contains the objects to add to the collection.">Um objeto <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> que contém os objetos a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Contains(System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object.">Obtém um valor que indica se a coleção contém o objeto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> especificado.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object to search for in the collection.">O objeto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> pelo qual pesquisar na coleção.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a coleção contiver o objeto especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.CopyTo(System.CodeDom.CodeTypeDeclaration[],System.Int32)">
      <summary vsli:raw="Copies the elements in the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; object to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance, starting at the specified index.">Copia os elementos no objeto <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> para uma instância de <see cref="T:System.Array" /> unidimensional, começando no índice especificado.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">O <see cref="T:System.Array" /> unidimensional que é o destino dos valores copiados da coleção.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">O índice da matriz no qual iniciar a inserção.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">A matriz de destino é multidimensional.
- ou -
O número de elementos na <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> é maior do que o espaço disponível entre o índice da matriz de destino especificada pelo parâmetro <paramref name="index" /> e o final da matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">O parâmetro <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">O parâmetro <paramref name="index" /> é menor do que o índice mínimo da matriz de destino.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.IndexOf(System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object in the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt;, if it exists in the collection.">Obtém o índice do objeto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> na <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" />, se ele existe na coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; to locate in the collection.">O <see cref="T:System.CodeDom.CodeTypeDeclaration" /> a ser localizado na coleção.</param>
      <returns vsli:raw="The index of the specified object, if it is found, in the collection; otherwise, -1.">O índice do objeto especificado, se encontrado, na coleção; caso contrário, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Insert(System.Int32,System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object into the collection at the specified index.">Insere o objeto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> especificado na coleção no índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">O índice baseado em zero em que o objeto especificado deverá ser inserido.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object to insert.">O objeto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> a ser inserido.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclarationCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object at the specified index in the collection.">Obtém ou define o objeto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> no índice especificado na coleção.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">O índice da coleção a ser acessada.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; at each valid index.">A <see cref="T:System.CodeDom.CodeTypeDeclaration" /> em cada índice válido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">O parâmetro <paramref name="index" /> está fora do intervalo válido de índices para a coleção.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Remove(System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object from the collection.">Remove o objeto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> especificado da coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; to remove from the collection.">O <see cref="T:System.CodeDom.CodeTypeDeclaration" /> a ser removido da coleção.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">O objeto especificado não foi localizado na coleção.</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeDelegate">
      <summary vsli:raw="Represents a delegate declaration.">Representa uma declaração de delegado.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDelegate.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDelegate&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeDelegate" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDelegate.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDelegate&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeDelegate" />.</summary>
      <param name="name" vsli:raw="The name of the delegate.">O nome do delegado.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDelegate.Parameters">
      <summary vsli:raw="Gets the parameters of the delegate.">Obtém os parâmetros do delegado.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; that indicates the parameters of the delegate.">Um <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> que indica os parâmetros do delegado.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDelegate.ReturnType">
      <summary vsli:raw="Gets or sets the return type of the delegate.">Obtém ou define o tipo de retorno do delegado.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the return type of the delegate.">Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo de retorno do delegado.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeMember">
      <summary vsli:raw="Provides a base class for a member of a type. Type members include fields, methods, properties, constructors and nested types.">Fornece uma classe base para um membro de um tipo. Membros de tipo incluem campos, métodos, propriedades, construtores e tipos aninhados.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMember.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeMember" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Attributes">
      <summary vsli:raw="Gets or sets the attributes of the member.">Obtém ou define os atributos do membro.</summary>
      <returns vsli:raw="A bitwise combination of the &lt;see cref=&quot;T:System.CodeDom.MemberAttributes&quot; /&gt; values used to indicate the attributes of the member. The default value is &lt;see cref=&quot;F:System.CodeDom.MemberAttributes.Private&quot; /&gt; | &lt;see cref=&quot;F:System.CodeDom.MemberAttributes.Final&quot; /&gt;.">Uma combinação bit a bit dos valores <see cref="T:System.CodeDom.MemberAttributes" /> usados para indicar os atributos do membro. O valor padrão é  <see cref="F:System.CodeDom.MemberAttributes.Private" /> .   |  <see cref="F:System.CodeDom.MemberAttributes.Final" /></returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Comments">
      <summary vsli:raw="Gets the collection of comments for the type member.">Obtém a coleção de comentários para o membro de tipo.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; that indicates the comments for the member.">Um <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> que indica os comentários para o membro.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.CustomAttributes">
      <summary vsli:raw="Gets or sets the custom attributes of the member.">Obtém ou define os atributos personalizados do membro.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; that indicates the custom attributes of the member.">Um <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> que indica os atributos personalizados do membro.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.EndDirectives">
      <summary vsli:raw="Gets the end directives for the member.">Obtém as diretivas de término para o membro.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing end directives.">Um <see cref="T:System.CodeDom.CodeDirectiveCollection" /> objeto que contém as diretivas end.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.LinePragma">
      <summary vsli:raw="Gets or sets the line on which the type member statement occurs.">Obtém ou define a linha em que ocorre a declaração de membro de tipo.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeLinePragma&quot; /&gt; object that indicates the location of the type member declaration.">Um <see cref="T:System.CodeDom.CodeLinePragma" /> objeto que indica o local da declaração de membro de tipo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Name">
      <summary vsli:raw="Gets or sets the name of the member.">Obtém ou define o nome do membro.</summary>
      <returns vsli:raw="The name of the member.">O nome do membro.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.StartDirectives">
      <summary vsli:raw="Gets the start directives for the member.">Obtém as diretivas de início para o membro.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing start directives.">Um <see cref="T:System.CodeDom.CodeDirectiveCollection" /> objeto que contém as diretivas Start.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeMemberCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; objects.">Representa uma coleção de objetos <see cref="T:System.CodeDom.CodeTypeMember" /> .</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeMemberCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor(System.CodeDom.CodeTypeMember[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; objects.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> contendo a matriz de objetos <see cref="T:System.CodeDom.CodeTypeMember" /> especificada.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; objects with which to initialize the collection.">Uma matriz de objetos <see cref="T:System.CodeDom.CodeTypeMember" /> com os quais inicializar a coleção.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor(System.CodeDom.CodeTypeMemberCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; class containing the elements of the specified source collection.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeMemberCollection" />, que contém os elementos da coleção de origem especificada.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; with which to initialize the collection.">Um <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> com o qual inicializar a coleção.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Add(System.CodeDom.CodeTypeMember)">
      <summary vsli:raw="Adds a &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; with the specified value to the collection.">Adiciona um <see cref="T:System.CodeDom.CodeTypeMember" /> com o valor especificado na coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; to add.">O <see cref="T:System.CodeDom.CodeTypeMember" /> a ser adicionado.</param>
      <returns vsli:raw="The index at which the new element was inserted.">O índice no qual o novo elemento foi inserido.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.AddRange(System.CodeDom.CodeTypeMember[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; array to the end of the collection.">Copia os elementos da matriz <see cref="T:System.CodeDom.CodeTypeMember" /> especificada para o fim da coleção.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; containing the objects to add to the collection.">A matriz do tipo <see cref="T:System.CodeDom.CodeTypeMember" /> que contém os objetos a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.AddRange(System.CodeDom.CodeTypeMemberCollection)">
      <summary vsli:raw="Adds the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; to the end of the collection.">Adiciona o conteúdo de outro <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> ao final da coleção.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; containing the objects to add to the collection.">Um <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> que contém os objetos a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Contains(System.CodeDom.CodeTypeMember)">
      <summary vsli:raw="Gets a value indicating whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt;.">Obtém um valor que indica se a coleção contém o <see cref="T:System.CodeDom.CodeTypeMember" /> especificado.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; to search for in the collection.">O <see cref="T:System.CodeDom.CodeTypeMember" /> a ser pesquisado na coleção.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a coleção contiver o objeto especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.CopyTo(System.CodeDom.CodeTypeMember[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance, beginning at the specified index.">Copia os objetos de coleção para uma instância de <see cref="T:System.Array" /> unidimensional, começando no índice especificado.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">O <see cref="T:System.Array" /> unidimensional que é o destino dos valores copiados da coleção.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">O índice da matriz no qual iniciar a inserção.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">A matriz de destino é multidimensional.
- ou -
O número de elementos na <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> é maior do que o espaço disponível entre o índice da matriz de destino especificada pelo parâmetro <paramref name="index" /> e o final da matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">O parâmetro <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">O parâmetro <paramref name="index" /> é menor do que o índice mínimo da matriz de destino.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.IndexOf(System.CodeDom.CodeTypeMember)">
      <summary vsli:raw="Gets the index in the collection of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt;, if it exists in the collection.">Obterá o índice na coleção do <see cref="T:System.CodeDom.CodeTypeMember" /> especificado, se ele existir na coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; to locate in the collection.">O <see cref="T:System.CodeDom.CodeTypeMember" /> a ser localizado na coleção.</param>
      <returns vsli:raw="The index in the collection of the specified object, if found; otherwise, -1.">O índice na coleção do objeto especificado, se encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Insert(System.Int32,System.CodeDom.CodeTypeMember)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; into the collection at the specified index.">Insere o <see cref="T:System.CodeDom.CodeTypeMember" /> especificado na coleção, no índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">O índice baseado em zero em que o objeto especificado deverá ser inserido.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; to insert.">O <see cref="T:System.CodeDom.CodeTypeMember" /> a ser inserido.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeMemberCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; at the specified index in the collection.">Obtém ou define o <see cref="T:System.CodeDom.CodeTypeMember" /> no índice especificado na coleção.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">O índice da coleção a ser acessada.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; at each valid index.">A <see cref="T:System.CodeDom.CodeTypeMember" /> em cada índice válido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">O parâmetro <paramref name="index" /> está fora do intervalo válido de índices para a coleção.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Remove(System.CodeDom.CodeTypeMember)">
      <summary vsli:raw="Removes a specific &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; from the collection.">Remove um <see cref="T:System.CodeDom.CodeTypeMember" /> específico da coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; to remove from the collection.">O <see cref="T:System.CodeDom.CodeTypeMember" /> a ser removido da coleção.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">O objeto especificado não foi localizado na coleção.</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeOfExpression">
      <summary vsli:raw="Represents a &lt;see langword=&quot;typeof&quot; /&gt; expression, an expression that returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; for a specified type name.">Representa uma expressão <see langword="typeof" />, uma expressão que retorna um <see cref="T:System.Type" /> para um nome de tipo especificado.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeOfExpression&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeOfExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeOfExpression&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeOfExpression" />.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type for the &lt;see langword=&quot;typeof&quot; /&gt; expression.">Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo de dados para a expressão <see langword="typeof" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeOfExpression&quot; /&gt; class using the specified type.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeOfExpression" /> usando o tipo especificado.</summary>
      <param name="type" vsli:raw="The name of the data type for the &lt;see langword=&quot;typeof&quot; /&gt; expression.">O nome do tipo de dados para a expressão <see langword="typeof" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeOfExpression&quot; /&gt; class using the specified type.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeOfExpression" /> usando o tipo especificado.</summary>
      <param name="type" vsli:raw="The data type of the data type of the &lt;see langword=&quot;typeof&quot; /&gt; expression.">O tipo de dados do tipo de dados da expressão <see langword="typeof" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeOfExpression.Type">
      <summary vsli:raw="Gets or sets the data type referenced by the &lt;see langword=&quot;typeof&quot; /&gt; expression.">Obtém ou define o tipo de dados referenciado pela expressão <see langword="typeof" />.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type referenced by the &lt;see langword=&quot;typeof&quot; /&gt; expression. This property will never return &lt;see langword=&quot;null&quot; /&gt;, and defaults to the &lt;see cref=&quot;T:System.Void&quot; /&gt; type.">Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo de dados referenciado <see langword="typeof" /> pela expressão. Essa propriedade nunca retornará <see langword="null" />e usará como padrão o <see cref="T:System.Void" /> tipo.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeParameter">
      <summary vsli:raw="Represents a type parameter of a generic type or method.">Representa um parâmetro de tipo de um tipo genérico ou método.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeParameter" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameter.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; class with the specified type parameter name.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeParameter" /> com o nome de parâmetro de tipo especificado.</summary>
      <param name="name" vsli:raw="The name of the type parameter.">O nome do parâmetro de tipo.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.Constraints">
      <summary vsli:raw="Gets the constraints for the type parameter.">Obtém as restrições para o parâmetro de tipo.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; object that contains the constraints for the type parameter.">Um <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> objeto que contém as restrições para o parâmetro de tipo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.CustomAttributes">
      <summary vsli:raw="Gets the custom attributes of the type parameter.">Obtém os atributos personalizados do parâmetro de tipo.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; that indicates the custom attributes of the type parameter. The default is &lt;see langword=&quot;null&quot; /&gt;.">Um <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> que indica os atributos personalizados do parâmetro de tipo. O padrão é <see langword="null" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.HasConstructorConstraint">
      <summary vsli:raw="Gets or sets a value indicating whether the type parameter has a constructor constraint.">Obtém ou define um valor que indica se o parâmetro de tipo tem uma restrição de construtor.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type parameter has a constructor constraint; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />Se o parâmetro de tipo tiver uma restrição de Construtor; caso contrário <see langword="false" />,. O padrão é <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.Name">
      <summary vsli:raw="Gets or sets the name of the type parameter.">Obtém ou define o nome do parâmetro de tipo.</summary>
      <returns vsli:raw="The name of the type parameter. The default is an empty string (&quot;&quot;).">O nome do parâmetro de tipo. O padrão é uma cadeia de caracteres vazia ("").</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeParameterCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; objects.">Representa uma coleção de objetos <see cref="T:System.CodeDom.CodeTypeParameter" /> .</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor">
      <summary vsli:raw="Initializes a new, empty instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; class.">Inicializa uma nova instância vazia da classe <see cref="T:System.CodeDom.CodeTypeParameterCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor(System.CodeDom.CodeTypeParameter[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; objects.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> contendo a matriz de objetos <see cref="T:System.CodeDom.CodeTypeParameter" /> especificada.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; objects with which to initialize the collection.">Uma matriz de objetos <see cref="T:System.CodeDom.CodeTypeParameter" /> com os quais inicializar a coleção.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor(System.CodeDom.CodeTypeParameterCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; class containing the elements of the specified source collection.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeParameterCollection" />, que contém os elementos da coleção de origem especificada.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; with which to initialize the collection.">Um <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> com o qual inicializar a coleção.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Add(System.CodeDom.CodeTypeParameter)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object to the collection.">Adiciona o objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> especificado à coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; to add.">O <see cref="T:System.CodeDom.CodeTypeParameter" /> a ser adicionado.</param>
      <returns vsli:raw="The zero-based index at which the new element was inserted.">O índice baseado em zero no qual o novo elemento foi inserido.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Add(System.String)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object to the collection using the specified data type name.">Adiciona o objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> especificado à coleção usando o nome de tipo de dados especificado.</summary>
      <param name="value" vsli:raw="The name of a data type for which to add the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object to the collection.">O nome de um tipo de dados para o qual adicionar o objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> à coleção.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.AddRange(System.CodeDom.CodeTypeParameter[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; array to the end of the collection.">Copia os elementos da matriz <see cref="T:System.CodeDom.CodeTypeParameter" /> especificada para o fim da coleção.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; containing the objects to add to the collection.">A matriz do tipo <see cref="T:System.CodeDom.CodeTypeParameter" /> que contém os objetos a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.AddRange(System.CodeDom.CodeTypeParameterCollection)">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; to the end of the collection.">Copia os elementos da <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> especificada para o fim da coleção.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; containing the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; objects to add to the collection.">Um <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> que contém os objetos <see cref="T:System.CodeDom.CodeTypeParameter" /> a adicionar à coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Contains(System.CodeDom.CodeTypeParameter)">
      <summary vsli:raw="Determines whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object.">Determina se a coleção contém o objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> especificado.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object to search for in the collection.">O objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> pelo qual pesquisar na coleção.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object is contained in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> estiver contido na coleção; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.CopyTo(System.CodeDom.CodeTypeParameter[],System.Int32)">
      <summary vsli:raw="Copies the items in the collection to the specified one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; at the specified index.">Copia os itens na coleção para o <see cref="T:System.Array" /> unidimensional especificado no índice especificado.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">O <see cref="T:System.Array" /> unidimensional que é o destino dos valores copiados da coleção.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">O índice da matriz no qual iniciar a inserção.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; is greater than the available space between the index of the target array specified by &lt;paramref name=&quot;index&quot; /&gt; and the end of the target array.">
        <paramref name="array" /> é multidimensional.
- ou -
O número de elementos no <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> é maior do que o espaço disponível entre o índice da matriz de destino especificada pelo <paramref name="index" /> e o final da matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than the target array's lowest index.">
        <paramref name="index" /> é menor que o índice mais baixo da matriz de destino.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.IndexOf(System.CodeDom.CodeTypeParameter)">
      <summary vsli:raw="Gets the index in the collection of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object, if it exists in the collection.">Obterá o índice na coleção do objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> especificado, se ele existir na coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object to locate in the collection.">O objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> a ser localizado na coleção.</param>
      <returns vsli:raw="The zero-based index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object in the collection if found; otherwise, -1.">O índice baseado em zero do objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> especificado na coleção, se encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Insert(System.Int32,System.CodeDom.CodeTypeParameter)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object into the collection at the specified index.">Insere o objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> especificado na coleção no índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index at which to insert the item.">O índice baseado em zero no qual inserir o item.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object to insert.">O objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> a ser inserido.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameterCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object at the specified index in the collection.">Obtém ou define o objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> no índice especificado na coleção.</summary>
      <param name="index" vsli:raw="The zero-based index of the collection object to access.">O índice baseado em zero do objeto da coleção a ser acessado.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object at the specified index.">O objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> no índice especificado.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is outside the valid range of indexes for the collection.">
        <paramref name="index" /> está fora do intervalo válido de índices para a coleção.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Remove(System.CodeDom.CodeTypeParameter)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object from the collection.">Remove o objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> especificado da coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object to remove from the collection.">O objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> a ser removido da coleção.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">O objeto especificado não foi localizado na coleção.</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeReference">
      <summary vsli:raw="Represents a reference to a type.">Representa uma referência a um tipo.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeReference" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeParameter)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified code type parameter.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeReference" /> usando o parâmetro de tipo de código especificado.</summary>
      <param name="typeParameter" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; that represents the type of the type parameter.">Um <see cref="T:System.CodeDom.CodeTypeParameter" /> que representa o tipo do parâmetro de tipo.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeReference,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified array type and rank.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeReference" /> usando a classificação e o tipo de matriz especificados.</summary>
      <param name="arrayType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type of the array.">Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo da matriz.</param>
      <param name="rank" vsli:raw="The number of dimensions in the array.">O número de dimensões na matriz.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified type name.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeReference" /> usando o nome do tipo especificado.</summary>
      <param name="typeName" vsli:raw="The name of the type to reference.">O nome do tipo a referenciar.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReference[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified type name and type arguments.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeReference" /> usando o nome do tipo e os argumentos de tipo especificados.</summary>
      <param name="typeName" vsli:raw="The name of the type to reference.">O nome do tipo a referenciar.</param>
      <param name="typeArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; values.">Uma matriz de valores <see cref="T:System.CodeDom.CodeTypeReference" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReferenceOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified type name and code type reference option.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeReference" /> usando o nome do tipo e a opção de referência de tipo de código especificados.</summary>
      <param name="typeName" vsli:raw="The name of the type to reference.">O nome do tipo a referenciar.</param>
      <param name="codeTypeReferenceOption" vsli:raw="The code type reference option, one of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceOptions&quot; /&gt; values.">A opção de referência de tipo de código, um dos valores de <see cref="T:System.CodeDom.CodeTypeReferenceOptions" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified array type name and rank.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeReference" /> usando a classificação, o nome e o tipo de matriz especificados.</summary>
      <param name="baseType" vsli:raw="The name of the type of the elements of the array.">O nome do tipo dos elementos da matriz.</param>
      <param name="rank" vsli:raw="The number of dimensions of the array.">O número de dimensões da matriz.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified type.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeReference" /> usando o tipo especificado.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to reference.">O <see cref="T:System.Type" /> a referenciar.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.Type,System.CodeDom.CodeTypeReferenceOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified type and code type reference.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeReference" /> usando a referência de tipo de código e o tipo especificados.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to reference.">O <see cref="T:System.Type" /> a referenciar.</param>
      <param name="codeTypeReferenceOption" vsli:raw="The code type reference option, one of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceOptions&quot; /&gt; values.">A opção de referência de tipo de código, um dos valores de <see cref="T:System.CodeDom.CodeTypeReferenceOptions" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.ArrayElementType">
      <summary vsli:raw="Gets or sets the type of the elements in the array.">Obtém ou define tipo dos elementos na matriz.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type of the array elements.">Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo dos elementos da matriz.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.ArrayRank">
      <summary vsli:raw="Gets or sets the array rank of the array.">Obtém ou define a classificação da matriz.</summary>
      <returns vsli:raw="The number of dimensions of the array.">O número de dimensões da matriz.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.BaseType">
      <summary vsli:raw="Gets or sets the name of the type being referenced.">Obtém ou define o nome do tipo sendo referenciado.</summary>
      <returns vsli:raw="The name of the type being referenced.">O nome do tipo que está sendo referenciado.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.Options">
      <summary vsli:raw="Gets or sets the code type reference option.">Obtém ou define opção de referência de tipo de código.</summary>
      <returns vsli:raw="A bitwise combination of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceOptions&quot; /&gt; values.">Uma combinação bit a bit dos valores <see cref="T:System.CodeDom.CodeTypeReferenceOptions" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.TypeArguments">
      <summary vsli:raw="Gets the type arguments for the current generic type reference.">Obtém os argumentos de tipo para a referência de tipo genérico atual.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; containing the type arguments for the current &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; object.">Um <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> que contém os argumentos de tipo para <see cref="T:System.CodeDom.CodeTypeReference" /> o objeto atual.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; objects.">Representa uma coleção de objetos <see cref="T:System.CodeDom.CodeTypeReference" /> .</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor(System.CodeDom.CodeTypeReference[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; objects.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> contendo a matriz de objetos <see cref="T:System.CodeDom.CodeTypeReference" /> especificada.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; objects with which to initialize the collection.">Uma matriz de objetos <see cref="T:System.CodeDom.CodeTypeReference" /> com os quais inicializar a coleção.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor(System.CodeDom.CodeTypeReferenceCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; class containing the elements of the specified source collection.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />, que contém os elementos da coleção de origem especificada.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; with which to initialize the collection.">Um <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> com o qual inicializar a coleção.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to the collection.">Adiciona o <see cref="T:System.CodeDom.CodeTypeReference" /> especificado à coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to add.">O <see cref="T:System.CodeDom.CodeTypeReference" /> a ser adicionado.</param>
      <returns vsli:raw="The index at which the new element was inserted.">O índice no qual o novo elemento foi inserido.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.String)">
      <summary vsli:raw="Adds a &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to the collection using the specified data type name.">Adiciona um <see cref="T:System.CodeDom.CodeTypeReference" /> à coleção usando o nome de tipo de dados especificado.</summary>
      <param name="value" vsli:raw="The name of a data type for which to add a &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to the collection.">O nome de um tipo de dados para o qual adicionar um <see cref="T:System.CodeDom.CodeTypeReference" /> à coleção.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.Type)">
      <summary vsli:raw="Adds a &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to the collection using the specified data type.">Adiciona um <see cref="T:System.CodeDom.CodeTypeReference" /> à coleção usando o tipo de dados especificado.</summary>
      <param name="value" vsli:raw="The data type for which to add a &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to the collection.">O tipo de dados para o qual adicionar um <see cref="T:System.CodeDom.CodeTypeReference" /> à coleção.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.AddRange(System.CodeDom.CodeTypeReference[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; array to the end of the collection.">Copia os elementos da matriz <see cref="T:System.CodeDom.CodeTypeReference" /> especificada para o fim da coleção.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; containing the objects to add to the collection.">A matriz do tipo <see cref="T:System.CodeDom.CodeTypeReference" /> que contém os objetos a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.AddRange(System.CodeDom.CodeTypeReferenceCollection)">
      <summary vsli:raw="Adds the contents of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; to the end of the collection.">Adiciona o conteúdo do <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> especificado ao final da coleção.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; containing the objects to add to the collection.">Um <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> que contém os objetos a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Contains(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Gets a value indicating whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt;.">Obtém um valor que indica se a coleção contém o <see cref="T:System.CodeDom.CodeTypeReference" /> especificado.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to search for in the collection.">O <see cref="T:System.CodeDom.CodeTypeReference" /> a ser pesquisado na coleção.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; is contained in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o item <see cref="T:System.CodeDom.CodeTypeReference" /> estiver contido na coleção; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.CopyTo(System.CodeDom.CodeTypeReference[],System.Int32)">
      <summary vsli:raw="Copies the items in the collection to the specified one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; at the specified index.">Copia os itens na coleção para o <see cref="T:System.Array" /> unidimensional especificado no índice especificado.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">O <see cref="T:System.Array" /> unidimensional que é o destino dos valores copiados da coleção.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">O índice da matriz no qual iniciar a inserção.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">O parâmetro <paramref name="array" /> é multidimensional.
- ou -
O número de elementos na <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> é maior do que o espaço disponível entre o índice da matriz de destino especificada pelo parâmetro <paramref name="index" /> e o final da matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">O parâmetro <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">O parâmetro <paramref name="index" /> é menor do que o índice mínimo da matriz de destino.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.IndexOf(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Gets the index in the collection of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt;, if it exists in the collection.">Obterá o índice na coleção do <see cref="T:System.CodeDom.CodeTypeReference" /> especificado, se ele existir na coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to locate in the collection.">O <see cref="T:System.CodeDom.CodeTypeReference" /> a ser localizado na coleção.</param>
      <returns vsli:raw="The index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; in the collection if found; otherwise, -1.">O índice do <see cref="T:System.CodeDom.CodeTypeReference" /> especificado na coleção, se encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Insert(System.Int32,System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Inserts a &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; into the collection at the specified index.">Insere um <see cref="T:System.CodeDom.CodeTypeReference" /> na coleção no índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index where the item should be inserted.">O índice baseado em zero no qual o item deve ser inserido.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to insert.">O <see cref="T:System.CodeDom.CodeTypeReference" /> a ser inserido.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReferenceCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; at the specified index in the collection.">Obtém ou define o <see cref="T:System.CodeDom.CodeTypeReference" /> no índice especificado na coleção.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">O índice da coleção a ser acessada.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; at each valid index.">A <see cref="T:System.CodeDom.CodeTypeReference" /> em cada índice válido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">O parâmetro <paramref name="index" /> está fora do intervalo válido de índices para a coleção.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Remove(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; from the collection.">Remove o <see cref="T:System.CodeDom.CodeTypeReference" /> especificado da coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to remove from the collection.">O <see cref="T:System.CodeDom.CodeTypeReference" /> a ser removido da coleção.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">O objeto especificado não foi localizado na coleção.</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceExpression">
      <summary vsli:raw="Represents a reference to a data type.">Representa uma referência a um tipo de dados.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceExpression&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceExpression&quot; /&gt; class using the specified type.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> usando o tipo especificado.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type to reference.">Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo de dados a referenciar.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceExpression&quot; /&gt; class using the specified data type name.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> usando o nome do tipo de dados especificado.</summary>
      <param name="type" vsli:raw="The name of the data type to reference.">O nome do tipo de dados a referenciar.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceExpression&quot; /&gt; class using the specified data type.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> usando o tipo de dados especificado.</summary>
      <param name="type" vsli:raw="An instance of the data type to reference.">Uma instância do tipo de dados a referenciar.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReferenceExpression.Type">
      <summary vsli:raw="Gets or sets the data type to reference.">Obtém ou define o tipo de dados a referenciar.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type to reference.">Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo de dados a referenciar.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceOptions">
      <summary vsli:raw="Specifies how the code type reference is to be resolved.">Especifica como a referência de tipo de código deve ser resolvida.</summary>
    </member>
    <member name="F:System.CodeDom.CodeTypeReferenceOptions.GenericTypeParameter">
      <summary vsli:raw="Resolve the type from the type parameter.">Resolva o tipo do parâmetro de tipo.</summary>
    </member>
    <member name="F:System.CodeDom.CodeTypeReferenceOptions.GlobalReference">
      <summary vsli:raw="Resolve the type from the root namespace.">Resolva o tipo do namespace raiz.</summary>
    </member>
    <member name="T:System.CodeDom.CodeVariableDeclarationStatement">
      <summary vsli:raw="Represents a variable declaration.">Representa uma declaração de variável.</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableDeclarationStatement&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableDeclarationStatement&quot; /&gt; class using the specified type and name.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> usando o nome e o tipo especificados.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the variable.">Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo de dados da variável.</param>
      <param name="name" vsli:raw="The name of the variable.">O nome da variável.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.CodeDom.CodeTypeReference,System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableDeclarationStatement&quot; /&gt; class using the specified data type, variable name, and initialization expression.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> usando a expressão de inicialização, o tipo de dados e o nome da variável especificados.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type of the variable.">Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo da variável.</param>
      <param name="name" vsli:raw="The name of the variable.">O nome da variável.</param>
      <param name="initExpression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the initialization expression for the variable.">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica a expressão de inicialização para a variável.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableDeclarationStatement&quot; /&gt; class using the specified data type name and variable name.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> usando o nome do tipo de dados e o nome da variável especificados.</summary>
      <param name="type" vsli:raw="The name of the data type of the variable.">O nome do tipo de dados da variável.</param>
      <param name="name" vsli:raw="The name of the variable.">O nome da variável.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.String,System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableDeclarationStatement&quot; /&gt; class using the specified data type, variable name, and initialization expression.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> usando a expressão de inicialização, o tipo de dados e o nome da variável especificados.</summary>
      <param name="type" vsli:raw="The name of the data type of the variable.">O nome do tipo de dados da variável.</param>
      <param name="name" vsli:raw="The name of the variable.">O nome da variável.</param>
      <param name="initExpression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the initialization expression for the variable.">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica a expressão de inicialização para a variável.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.Type,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableDeclarationStatement&quot; /&gt; class using the specified data type and variable name.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> usando o tipo de dados e o nome da variável especificados.</summary>
      <param name="type" vsli:raw="The data type for the variable.">O tipo de dados para a variável.</param>
      <param name="name" vsli:raw="The name of the variable.">O nome da variável.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.Type,System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableDeclarationStatement&quot; /&gt; class using the specified data type, variable name, and initialization expression.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> usando a expressão de inicialização, o tipo de dados e o nome da variável especificados.</summary>
      <param name="type" vsli:raw="The data type of the variable.">O tipo de dados da variável.</param>
      <param name="name" vsli:raw="The name of the variable.">O nome da variável.</param>
      <param name="initExpression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the initialization expression for the variable.">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica a expressão de inicialização para a variável.</param>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.InitExpression">
      <summary vsli:raw="Gets or sets the initialization expression for the variable.">Obtém ou define a expressão de inicialização para a variável.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the initialization expression for the variable.">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica a expressão de inicialização para a variável.</returns>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.Name">
      <summary vsli:raw="Gets or sets the name of the variable.">Obtém ou define o nome da variável.</summary>
      <returns vsli:raw="The name of the variable.">O nome da variável.</returns>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.Type">
      <summary vsli:raw="Gets or sets the data type of the variable.">Obtém ou define o tipo de dados da variável.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the variable.">Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo de dados da variável.</returns>
    </member>
    <member name="T:System.CodeDom.CodeVariableReferenceExpression">
      <summary vsli:raw="Represents a reference to a local variable.">Representa uma referência a uma variável local.</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableReferenceExpression&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeVariableReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableReferenceExpression.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableReferenceExpression&quot; /&gt; class using the specified local variable name.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeVariableReferenceExpression" /> usando o nome da variável local especificado.</summary>
      <param name="variableName" vsli:raw="The name of the local variable to reference.">O nome da variável local a ser referenciada.</param>
    </member>
    <member name="P:System.CodeDom.CodeVariableReferenceExpression.VariableName">
      <summary vsli:raw="Gets or sets the name of the local variable to reference.">Obtém ou define o nome da variável local a ser referenciada.</summary>
      <returns vsli:raw="The name of the local variable to reference.">O nome da variável local a ser referenciada.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeCompiler">
      <summary vsli:raw="Provides an example implementation of the &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeCompiler&quot; /&gt; interface.">Fornece uma implementação de exemplo da interface <see cref="T:System.CodeDom.Compiler.ICodeCompiler" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeCompiler&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.Compiler.CodeCompiler" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.CmdArgsFromParameters(System.CodeDom.Compiler.CompilerParameters)">
      <summary vsli:raw="Gets the command arguments to be passed to the compiler from the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt;.">Obtém os argumentos de comando a serem passados para o compilador do <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> especificado.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; that indicates the compiler options.">Um <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica as opções do compilador.</param>
      <returns vsli:raw="The command arguments.">Os argumentos do comando.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeCompiler.CompilerName">
      <summary vsli:raw="Gets the name of the compiler executable.">Obtém o nome do executável do compilador.</summary>
      <returns vsli:raw="The name of the compiler executable.">O nome do executável do compilador.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeCompiler.FileExtension">
      <summary vsli:raw="Gets the file name extension to use for source files.">Obtém a extensão de nome de arquivo a ser usada para arquivos de origem.</summary>
      <returns vsli:raw="The file name extension to use for source files.">A extensão de nome de arquivo a ser usada para arquivos de origem.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary vsli:raw="Compiles the specified compile unit using the specified options, and returns the results from the compilation.">Compila a unidade de compilação especificada usando as opções especificadas e retorna os resultados da compilação.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica as opções do compilador.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; object that indicates the source to compile.">Um objeto <see cref="T:System.CodeDom.CodeCompileUnit" /> que indica a origem a compilar.</param>
      <returns vsli:raw="The results of compilation.">Os resultados da compilação.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary vsli:raw="Compiles the specified compile units using the specified options, and returns the results from the compilation.">Compila as unidades de compilação especificadas usando as opções especificadas e retorna os resultados da compilação.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica as opções do compilador.</param>
      <param name="ea" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; objects that indicates the source to compile.">Uma matriz de objetos <see cref="T:System.CodeDom.CodeCompileUnit" /> que indica a origem a compilar.</param>
      <returns vsli:raw="The results of compilation.">Os resultados da compilação.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;ea&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> é <see langword="null" />.
- ou -
<paramref name="ea" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary vsli:raw="Compiles the specified file using the specified options, and returns the results from the compilation.">Compila o arquivo especificado usando as opções especificadas e retorna os resultados da compilação.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica as opções do compilador.</param>
      <param name="fileName" vsli:raw="The file name to compile.">O nome de arquivo a compilar.</param>
      <returns vsli:raw="The results of compilation.">Os resultados da compilação.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;fileName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> é <see langword="null" />.
- ou -
<paramref name="fileName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="Compiles the specified files using the specified options, and returns the results from the compilation.">Compila os arquivos especificados usando as opções especificadas e retorna os resultados da compilação.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica as opções do compilador.</param>
      <param name="fileNames" vsli:raw="An array of strings that indicates the file names of the files to compile.">Uma matriz de cadeias de caracteres que indica os nomes de arquivo dos arquivos a compilar.</param>
      <returns vsli:raw="The results of compilation.">Os resultados da compilação.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;fileNames&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> é <see langword="null" />.
- ou -
<paramref name="fileNames" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary vsli:raw="Compiles the specified source code string using the specified options, and returns the results from the compilation.">Compila a cadeia de caracteres de código-fonte especificada usando as opções especificadas e retorna os resultados da compilação.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica as opções do compilador.</param>
      <param name="source" vsli:raw="The source code string to compile.">A cadeia de caracteres de código-fonte a ser compilada.</param>
      <returns vsli:raw="The results of compilation.">Os resultados da compilação.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="Compiles the specified source code strings using the specified options, and returns the results from the compilation.">Compila as cadeias de caracteres de código-fonte especificadas usando as opções especificadas e retorna os resultados da compilação.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica as opções do compilador.</param>
      <param name="sources" vsli:raw="An array of strings containing the source code to compile.">Uma matriz de cadeias de caracteres que contêm o código-fonte a ser compilado.</param>
      <returns vsli:raw="The results of compilation.">Os resultados da compilação.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;sources&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> é <see langword="null" />.
- ou -
<paramref name="sources" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.GetResponseFileCmdArgs(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary vsli:raw="Gets the command arguments to use when invoking the compiler to generate a response file.">Obtém os argumentos de comando a serem usados ao invocar o compilador para gerar um arquivo de resposta.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica as opções do compilador.</param>
      <param name="cmdArgs" vsli:raw="A command arguments string.">Uma cadeia de caracteres de argumentos de comando.</param>
      <returns vsli:raw="The command arguments to use to generate a response file, or &lt;see langword=&quot;null&quot; /&gt; if there are no response file arguments.">Os argumentos de comando a serem usados para gerar um arquivo de resposta ou <see langword="null" /> se não houver nenhum argumento de arquivo de resposta.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.JoinStringArray(System.String[],System.String)">
      <summary vsli:raw="Joins the specified string arrays.">Une as matrizes de cadeias de caracteres especificadas.</summary>
      <param name="sa" vsli:raw="The array of strings to join.">A matriz de cadeias de caracteres a unir.</param>
      <param name="separator" vsli:raw="The separator to use.">O separador a ser usado.</param>
      <returns vsli:raw="The concatenated string.">A cadeia de caracteres concatenada.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.ProcessCompilerOutputLine(System.CodeDom.Compiler.CompilerResults,System.String)">
      <summary vsli:raw="Processes the specified line from the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt;.">Processa a linha especificada do <see cref="T:System.CodeDom.Compiler.CompilerResults" /> especificado.</summary>
      <param name="results" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; that indicates the results of compilation.">Um <see cref="T:System.CodeDom.Compiler.CompilerResults" /> que indica os resultados da compilação.</param>
      <param name="line" vsli:raw="The line to process.">A linha a processar.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)&quot; /&gt;.">Para obter uma descrição desse membro, consulte <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)" />.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica as opções do compilador.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; that indicates the source to compile.">Um <see cref="T:System.CodeDom.CodeCompileUnit" /> que indica a origem a compilar.</param>
      <returns vsli:raw="The results of compilation.">Os resultados da compilação.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])&quot; /&gt;.">Para obter uma descrição desse membro, consulte <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])" />.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica as opções do compilador.</param>
      <param name="ea" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; objects that indicates the source to compile.">Uma matriz de objetos <see cref="T:System.CodeDom.CodeCompileUnit" /> que indica a origem a compilar.</param>
      <returns vsli:raw="The results of compilation.">Os resultados da compilação.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)&quot; /&gt;.">Para obter uma descrição desse membro, consulte <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)" />.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica as opções do compilador.</param>
      <param name="fileName" vsli:raw="The file name to compile.">O nome de arquivo a compilar.</param>
      <returns vsli:raw="The results of compilation.">Os resultados da compilação.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])&quot; /&gt;.">Para obter uma descrição desse membro, consulte <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])" />.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica as opções do compilador.</param>
      <param name="fileNames" vsli:raw="An array of strings that indicates the file names to compile.">Uma matriz de cadeias de caracteres que indica os nomes de arquivo a compilar.</param>
      <returns vsli:raw="The results of compilation.">Os resultados da compilação.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)&quot; /&gt;.">Para obter uma descrição desse membro, consulte <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)" />.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica as opções do compilador.</param>
      <param name="source" vsli:raw="A string that indicates the source code to compile.">Uma cadeia de caracteres que indica o código-fonte a compilar.</param>
      <returns vsli:raw="The results of compilation.">Os resultados da compilação.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])&quot; /&gt;.">Para obter uma descrição desse membro, consulte <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])" />.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica as opções do compilador.</param>
      <param name="sources" vsli:raw="An array of strings that indicates the source code to compile.">Uma matriz de cadeias de caracteres que indica o código-fonte a compilar.</param>
      <returns vsli:raw="The results of compilation.">Os resultados da compilação.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> é <see langword="null" />.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeDomProvider">
      <summary vsli:raw="Provides a base class for &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementations. This class is abstract.">Fornece uma classe base para implementações <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />. Esta classe é abstrata.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary vsli:raw="Compiles an assembly based on the &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; trees contained in the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; objects, using the specified compiler settings.">Compila um assembly com base nas árvores <see cref="N:System.CodeDom" /> contidas na matriz especificada de objetos <see cref="T:System.CodeDom.CodeCompileUnit" />, usando as configurações de compilador especificadas.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for the compilation.">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica as configurações da compilação.</param>
      <param name="compilationUnits" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; that indicates the code to compile.">Uma matriz do tipo <see cref="T:System.CodeDom.CodeCompileUnit" /> que indica o código a ser compilado.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of the compilation.">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerResults" /> que indica os resultados da compilação.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler&quot; /&gt; method is overridden in a derived class.">Nem esse método nem o método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> são substituídos em uma classe derivada.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="Compiles an assembly from the source code contained in the specified files, using the specified compiler settings.">Compila um assembly do código-fonte contido nos arquivos especificados, usando as configurações de compilador especificadas.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for the compilation.">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica as configurações da compilação.</param>
      <param name="fileNames" vsli:raw="An array of the names of the files to compile.">Uma matriz com os nomes dos arquivos a serem compilados.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerResults" /> que indica os resultados da compilação.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler&quot; /&gt; method is overridden in a derived class.">Nem esse método nem o método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> são substituídos em uma classe derivada.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="Compiles an assembly from the specified array of strings containing source code, using the specified compiler settings.">Compila um assembly da matriz especificada de cadeias de caracteres que contém o código-fonte, usando as configurações do compilador especificadas.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler settings for this compilation.">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica as configurações do compilador para esta compilação.</param>
      <param name="sources" vsli:raw="An array of source code strings to compile.">Uma matriz de cadeias de código-fonte a ser compilada.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerResults" /> que indica os resultados da compilação.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler&quot; /&gt; method is overridden in a derived class.">Nem esse método nem o método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> são substituídos em uma classe derivada.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler">
      <summary vsli:raw="When overridden in a derived class, creates a new code compiler.">Quando substituído em uma classe derivada, cria um novo compilador de código.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeCompiler&quot; /&gt; that can be used for compilation of &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; based source code representations.">Um <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> que pode ser usado para a compilação de representações de código-fonte baseadas em <see cref="N:System.CodeDom" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
      <summary vsli:raw="Creates an escaped identifier for the specified value.">Cria um identificador de escape para o valor especificado.</summary>
      <param name="value" vsli:raw="The string for which to create an escaped identifier.">A cadeia de caracteres para a qual criar um identificador de escape.</param>
      <returns vsli:raw="The escaped identifier for the value.">O identificador de escape para o valor.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Nem esse método nem o método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> são substituídos em uma classe derivada.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator">
      <summary vsli:raw="When overridden in a derived class, creates a new code generator.">Quando substituído em uma classe derivada, cria um novo gerador de código.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeGenerator&quot; /&gt; that can be used to generate &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; based source code representations.">Um <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> que pode ser usado para gerar representações de código-fonte baseadas em <see cref="N:System.CodeDom" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.IO.TextWriter)">
      <summary vsli:raw="When overridden in a derived class, creates a new code generator using the specified &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; for output.">Quando substituído em uma classe derivada, cria um novo gerador de código usando o <see cref="T:System.IO.TextWriter" /> especificado para saída.</summary>
      <param name="output" vsli:raw="A &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to use to output.">Um <see cref="T:System.IO.TextWriter" /> a usar para saída.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeGenerator&quot; /&gt; that can be used to generate &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; based source code representations.">Um <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> que pode ser usado para gerar representações de código-fonte baseadas em <see cref="N:System.CodeDom" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.String)">
      <summary vsli:raw="When overridden in a derived class, creates a new code generator using the specified file name for output.">Quando substituído em uma classe derivada, cria um novo gerador de código usando o nome do arquivo especificado para saída.</summary>
      <param name="fileName" vsli:raw="The file name to output to.">O nome do arquivo para o qual gerar a saída.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeGenerator&quot; /&gt; that can be used to generate &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; based source code representations.">Um <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> que pode ser usado para gerar representações de código-fonte baseadas em <see cref="N:System.CodeDom" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser">
      <summary vsli:raw="When overridden in a derived class, creates a new code parser.">Quando substituído em uma classe derivada, cria um novo analisador de código.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeParser&quot; /&gt; that can be used to parse source code. The base implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">Um <see cref="T:System.CodeDom.Compiler.ICodeParser" /> que pode ser usado para analisar código-fonte. A implementação base sempre retorna <see langword="null" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; instance for the specified language.">Obtém uma instância <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> para o idioma especificado.</summary>
      <param name="language" vsli:raw="The language name.">O nome do idioma.</param>
      <returns vsli:raw="A CodeDOM provider that is implemented for the specified language name.">Um provedor CodeDOM implementado para o nome do idioma especificado.</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException" vsli:raw="The &lt;paramref name=&quot;language&quot; /&gt; does not have a configured provider on this computer.">O <paramref name="language" /> não tem um provedor configurado neste computador.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;language&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">O <paramref name="language" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">O chamador não tem a permissão necessária.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; instance for the specified language and provider options.">Obtém uma instância <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> para as opções de idioma e provedor especificadas.</summary>
      <param name="language" vsli:raw="The language name.">O nome do idioma.</param>
      <param name="providerOptions" vsli:raw="A collection of provider options from the configuration file.">Uma coleção de opções do provedor do arquivo de configuração.</param>
      <returns vsli:raw="A CodeDOM provider that is implemented for the specified language name and options.">Um provedor CodeDOM implementado para as opções e o nome do idioma especificados.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
      <summary vsli:raw="Creates a valid identifier for the specified value.">Cria um identificador válido para o valor especificado.</summary>
      <param name="value" vsli:raw="The string for which to generate a valid identifier.">A cadeia de caracteres para a qual gerar um identificador válido.</param>
      <returns vsli:raw="A valid identifier for the specified value.">Um identificador válido para o valor especificado.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Nem esse método nem o método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> são substituídos em uma classe derivada.</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeDomProvider.FileExtension">
      <summary vsli:raw="Gets the default file name extension to use for source code files in the current language.">Obtém a extensão de nome de arquivo padrão a ser usada para arquivos de código-fonte na linguagem de programação atual.</summary>
      <returns vsli:raw="A file name extension corresponding to the extension of the source files of the current language. The base implementation always returns &lt;see cref=&quot;F:System.String.Empty&quot; /&gt;.">Uma extensão de nome de arquivo correspondente à extensão dos arquivos de origem do idioma atual. A implementação base sempre retorna <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) compilation unit and sends it to the specified text writer, using the specified options.">Gera código para a unidade de compilação CodeDOM (Modelo de Objeto do Documento de Código) especificada e envia-a para o text writer especificado, usando as opções especificadas.</summary>
      <param name="compileUnit" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; for which to generate code.">Um <see cref="T:System.CodeDom.CodeCompileUnit" /> para o qual gerar código.</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which the output code is sent.">O <see cref="T:System.IO.TextWriter" /> para o qual o código de saída é enviado.</param>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">Um <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que indica as opções a serem usadas para gerar código.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Nem esse método nem o método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> são substituídos em uma classe derivada.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) expression and sends it to the specified text writer, using the specified options.">Gera código para a expressão CodeDOM (Modelo de Objeto do Documento de Código) especificada e o envia para o text writer especificado, usando as opções especificadas.</summary>
      <param name="expression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object that indicates the expression for which to generate code.">Um objeto <see cref="T:System.CodeDom.CodeExpression" /> que indica a expressão para a qual gerar código.</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which output code is sent.">O <see cref="T:System.IO.TextWriter" /> para o qual o código de saída é enviado.</param>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">Um <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que indica as opções a serem usadas para gerar código.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Nem esse método nem o método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> são substituídos em uma classe derivada.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) member declaration and sends it to the specified text writer, using the specified options.">Gera código para a declaração de membro CodeDOM (Modelo de Objeto do Documento de Código) especificada e o envia para o text writer especificado, usando as opções especificadas.</summary>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; object that indicates the member for which to generate code.">Um objeto <see cref="T:System.CodeDom.CodeTypeMember" /> que indica o membro para o qual gerar código.</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which output code is sent.">O <see cref="T:System.IO.TextWriter" /> para o qual o código de saída é enviado.</param>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">Um <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que indica as opções a serem usadas para gerar código.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="This method is not overridden in a derived class.">Esse método não é substituído em uma classe derivada.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) namespace and sends it to the specified text writer, using the specified options.">Gera código para o namespace CodeDOM (Modelo de Objeto do Documento de Código) especificado e envia-o para o text writer especificado, usando as opções especificadas.</summary>
      <param name="codeNamespace" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; object that indicates the namespace for which to generate code.">Um objeto <see cref="T:System.CodeDom.CodeNamespace" /> que indica o namespace para o qual gerar código.</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which output code is sent.">O <see cref="T:System.IO.TextWriter" /> para o qual o código de saída é enviado.</param>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">Um <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que indica as opções a serem usadas para gerar código.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Nem esse método nem o método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> são substituídos em uma classe derivada.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) statement and sends it to the specified text writer, using the specified options.">Gera código para a instrução CodeDOM (Modelo de Objeto do Documento de Código) especificada e envia-o para o text writer especificado, usando as opções especificadas.</summary>
      <param name="statement" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the CodeDOM elements for which to generate code.">Um <see cref="T:System.CodeDom.CodeStatement" /> que contém os elementos de CodeDOM para os quais gerar código.</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which output code is sent.">O <see cref="T:System.IO.TextWriter" /> para o qual o código de saída é enviado.</param>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">Um <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que indica as opções a serem usadas para gerar código.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Nem esse método nem o método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> são substituídos em uma classe derivada.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) type declaration and sends it to the specified text writer, using the specified options.">Gera código para a declaração de tipo CodeDOM (Modelo de Objeto do Documento de Código) especificada e envia-o para o text writer especificado, usando as opções especificadas.</summary>
      <param name="codeType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object that indicates the type for which to generate code.">Um objeto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> que indica o tipo para o qual gerar código.</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which output code is sent.">O <see cref="T:System.IO.TextWriter" /> para o qual o código de saída é enviado.</param>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">Um <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que indica as opções a serem usadas para gerar código.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Nem esse método nem o método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> são substituídos em uma classe derivada.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo">
      <summary vsli:raw="Returns the language provider and compiler configuration settings for this computer.">Retorna as configurações de compilador e de provedor de linguagem de programação para este computador.</summary>
      <returns vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerInfo&quot; /&gt; representing the settings of all configured &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementations.">Uma matriz do tipo <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> que representa as configurações de todas as implementações de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> configuradas.</returns>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">O chamador não tem a permissão necessária.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
      <summary vsli:raw="Returns the language provider and compiler configuration settings for the specified language.">Retorna as configurações de compilador e de provedor de linguagem de programação para a linguagem de programação especificada.</summary>
      <param name="language" vsli:raw="A language name.">Um nome de linguagem de programação.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerInfo&quot; /&gt; object populated with settings of the configured &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementation.">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> populado com as configurações da implementação de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> configurada.</returns>
      <exception cref="T:System.Configuration.ConfigurationException" vsli:raw="The &lt;paramref name=&quot;language&quot; /&gt; does not have a configured provider on this computer.">O <paramref name="language" /> não tem um provedor configurado neste computador.</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException" vsli:raw="The &lt;paramref name=&quot;language&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">O <paramref name="language" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">O chamador não tem a permissão necessária.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetConverter(System.Type)">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified data type.">Obtém um <see cref="T:System.ComponentModel.TypeConverter" /> para o tipo de dados especificado.</summary>
      <param name="type" vsli:raw="The type of object to retrieve a type converter for.">O tipo de objeto para o qual recuperar um conversor de tipo.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified type, or &lt;see langword=&quot;null&quot; /&gt; if a &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified type cannot be found.">Um <see cref="T:System.ComponentModel.TypeConverter" /> para o tipo especificado ou então <see langword="null" />, se um <see cref="T:System.ComponentModel.TypeConverter" /> para o tipo especificado não foi encontrado.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
      <summary vsli:raw="Returns a language name associated with the specified file name extension, as configured in the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; compiler configuration section.">Retorna um nome de linguagem de programação associado com a extensão de nome de arquivo especificada, conforme configurado na seção de configuração do compilador <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />.</summary>
      <param name="extension" vsli:raw="A file name extension.">Uma extensão de nome de arquivo.</param>
      <returns vsli:raw="A language name associated with the file name extension, as configured in the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; compiler configuration settings.">Um nome de linguagem de programação associado com a extensão de nome de arquivo, conforme configurado nas configurações do compilador <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />.</returns>
      <exception cref="T:System.Configuration.ConfigurationException" vsli:raw="The &lt;paramref name=&quot;extension&quot; /&gt; does not have a configured language provider on this computer.">O <paramref name="extension" /> não tem um provedor de linguagem de programação configurado neste computador.</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException" vsli:raw="The &lt;paramref name=&quot;extension&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">O <paramref name="extension" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">O chamador não tem a permissão necessária.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Gets the type indicated by the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt;.">Obtém o tipo indicado pelo <see cref="T:System.CodeDom.CodeTypeReference" /> especificado.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type to return.">Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo a retornar.</param>
      <returns vsli:raw="A text representation of the specified type, formatted for the language in which code is generated by this code generator. In Visual Basic, for example, passing in a &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; for the &lt;see cref=&quot;T:System.Int32&quot; /&gt; type will return &quot;Integer&quot;.">Uma representação de texto do tipo especificado, formatado para a linguagem de programação na qual o código é gerado por este gerador de código. No Visual Basic, por exemplo, passar um <see cref="T:System.CodeDom.CodeTypeReference" /> para o tipo <see cref="T:System.Int32" /> retorna "Integer".</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Nem esse método nem o método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> são substituídos em uma classe derivada.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
      <summary vsli:raw="Tests whether a file name extension has an associated &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementation configured on the computer.">Testa se uma extensão de nome de arquivo tem uma implementação de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> associada configurada no computador.</summary>
      <param name="extension" vsli:raw="A file name extension.">Uma extensão de nome de arquivo.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementation is configured for the specified file name extension; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se uma implementação de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> está configurada para a extensão de nome de arquivo especificada; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;extension&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">O <paramref name="extension" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">O chamador não tem a permissão necessária.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
      <summary vsli:raw="Tests whether a language has a &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementation configured on the computer.">Testa se uma linguagem de programação tem uma implementação de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> configurada no computador.</summary>
      <param name="language" vsli:raw="The language name.">O nome do idioma.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementation is configured for the specified language; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se uma implementação de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> está configurada para a linguagem de programação especificada; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;language&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">O <paramref name="language" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">O chamador não tem a permissão necessária.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
      <summary vsli:raw="Returns a value that indicates whether the specified value is a valid identifier for the current language.">Retorna um valor que indica se o valor especificado é um identificador válido para a linguagem de programação atual.</summary>
      <param name="value" vsli:raw="The value to verify as a valid identifier.">O valor a ser verificado como um identificador válido.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;value&quot; /&gt; parameter is a valid identifier; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o parâmetro <paramref name="value" /> é um identificador válido; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Nem esse método nem o método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> são substituídos em uma classe derivada.</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeDomProvider.LanguageOptions">
      <summary vsli:raw="Gets a language features identifier.">Obtém um identificador de recursos de idioma.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.LanguageOptions&quot; /&gt; that indicates special features of the language.">Um <see cref="T:System.CodeDom.Compiler.LanguageOptions" /> que indica os recursos especiais do idioma.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
      <summary vsli:raw="Compiles the code read from the specified text stream into a &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt;.">Compila o código lido do fluxo de texto especificado em um <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
      <param name="codeStream" vsli:raw="A &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; object that is used to read the code to be parsed.">Um objeto <see cref="T:System.IO.TextReader" /> que é usado para ler o código a ser analisado.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; that contains a representation of the parsed code.">Um <see cref="T:System.CodeDom.CodeCompileUnit" /> que contém uma representação do código analisado.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Nem esse método nem o método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> são substituídos em uma classe derivada.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary vsli:raw="Returns a value indicating whether the specified code generation support is provided.">Retorna um valor que indica se o suporte à geração de código especificado é fornecido.</summary>
      <param name="generatorSupport" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.GeneratorSupport&quot; /&gt; object that indicates the type of code generation support to verify.">Um objeto <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> que indica o tipo de suporte à geração de código para verificar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified code generation support is provided; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o suporte à geração de código especificada é fornecido; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Nem esse método nem o método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> são substituídos em uma classe derivada.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeGenerator">
      <summary vsli:raw="Provides an example implementation of the &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeGenerator&quot; /&gt; interface. This class is abstract.">Fornece uma implementação de exemplo da interface <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />. Esta classe é abstrata.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGenerator&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.Compiler.CodeGenerator" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ContinueOnNewLine(System.String)">
      <summary vsli:raw="Generates a line-continuation character and outputs the specified string on a new line.">Gera um caractere de continuação de linha e gera como saída a cadeia de caracteres especificada para uma nova linha.</summary>
      <param name="st" vsli:raw="The string to write on the new line.">A cadeia de caracteres a gravar na nova linha.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.CreateEscapedIdentifier(System.String)">
      <summary vsli:raw="Creates an escaped identifier for the specified value.">Cria um identificador de escape para o valor especificado.</summary>
      <param name="value" vsli:raw="The string to create an escaped identifier for.">A cadeia de caracteres para a qual criar um identificador de escape.</param>
      <returns vsli:raw="The escaped identifier for the value.">O identificador de escape para o valor.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.CreateValidIdentifier(System.String)">
      <summary vsli:raw="Creates a valid identifier for the specified value.">Cria um identificador válido para o valor especificado.</summary>
      <param name="value" vsli:raw="A string to create a valid identifier for.">Uma cadeia de caracteres para a qual criar um identificador válido.</param>
      <returns vsli:raw="A valid identifier for the value.">Um identificador válido para o valor.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentClass">
      <summary vsli:raw="Gets the code type declaration for the current class.">Obtém a declaração de tipo de código para a classe atual.</summary>
      <returns vsli:raw="The code type declaration for the current class.">A declaração de tipo de código para a classe atual.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentMember">
      <summary vsli:raw="Gets the current member of the class.">Obtém o membro atual da classe.</summary>
      <returns vsli:raw="The current member of the class.">O membro atual da classe.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentMemberName">
      <summary vsli:raw="Gets the current member name.">Obtém o nome do membro atual.</summary>
      <returns vsli:raw="The name of the current member.">O nome do membro atual.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentTypeName">
      <summary vsli:raw="Gets the current class name.">Obtém o nome de classe atual.</summary>
      <returns vsli:raw="The current class name.">O nome de classe atual.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArgumentReferenceExpression(System.CodeDom.CodeArgumentReferenceExpression)">
      <summary vsli:raw="Generates code for the specified argument reference expression.">Gera código para a expressão de referência de argumento especificada.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeArgumentReferenceExpression&quot; /&gt; that indicates the expression to generate code for.">Um <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" /> que indica a expressão para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArrayCreateExpression(System.CodeDom.CodeArrayCreateExpression)">
      <summary vsli:raw="Generates code for the specified array creation expression.">Gera código para a expressão de criação de matriz especificada.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; that indicates the expression to generate code for.">Um <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> que indica a expressão para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArrayIndexerExpression(System.CodeDom.CodeArrayIndexerExpression)">
      <summary vsli:raw="Generates code for the specified array indexer expression.">Gera código para a expressão de indexador de matriz especificada.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeArrayIndexerExpression&quot; /&gt; that indicates the expression to generate code for.">Um <see cref="T:System.CodeDom.CodeArrayIndexerExpression" /> que indica a expressão para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAssignStatement(System.CodeDom.CodeAssignStatement)">
      <summary vsli:raw="Generates code for the specified assignment statement.">Gera código para a instrução de atribuição especificada.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAssignStatement&quot; /&gt; that indicates the statement to generate code for.">Um <see cref="T:System.CodeDom.CodeAssignStatement" /> que indica a instrução para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttachEventStatement(System.CodeDom.CodeAttachEventStatement)">
      <summary vsli:raw="Generates code for the specified attach event statement.">Gera código para a instrução de evento de anexação especificado.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttachEventStatement&quot; /&gt; that indicates the statement to generate code for.">Um <see cref="T:System.CodeDom.CodeAttachEventStatement" /> que indica a instrução para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttributeDeclarationsEnd(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary vsli:raw="Generates code for the specified attribute block end.">Gera código para o fim do bloco de atributo especificado.</summary>
      <param name="attributes" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; that indicates the end of the attribute block to generate code for.">Um <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> que indica o fim do bloco de atributo para o qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttributeDeclarationsStart(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary vsli:raw="Generates code for the specified attribute block start.">Gera código para o início do bloco de atributo especificado.</summary>
      <param name="attributes" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; that indicates the start of the attribute block to generate code for.">Um <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> que indica o início do bloco de atributo para o qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateBaseReferenceExpression(System.CodeDom.CodeBaseReferenceExpression)">
      <summary vsli:raw="Generates code for the specified base reference expression.">Gera código para a expressão de referência de base especificada.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeBaseReferenceExpression&quot; /&gt; that indicates the expression to generate code for.">Um <see cref="T:System.CodeDom.CodeBaseReferenceExpression" /> que indica a expressão para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateBinaryOperatorExpression(System.CodeDom.CodeBinaryOperatorExpression)">
      <summary vsli:raw="Generates code for the specified binary operator expression.">Gera código para a expressão de operador binário especificada.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeBinaryOperatorExpression&quot; /&gt; that indicates the expression to generate code for.">Um <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" /> que indica a expressão para a qual gerar código.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;e&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="e" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCastExpression(System.CodeDom.CodeCastExpression)">
      <summary vsli:raw="Generates code for the specified cast expression.">Gera código para a expressão de conversão especificada.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCastExpression&quot; /&gt; that indicates the expression to generate code for.">Um <see cref="T:System.CodeDom.CodeCastExpression" /> que indica a expressão para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified class member using the specified text writer and code generator options.">Gera um código para o membro de classe especificado usando as opções do gerador de código e do text writer especificadas.</summary>
      <param name="member" vsli:raw="The class member to generate code for.">O membro de classe para o qual gerar código.</param>
      <param name="writer" vsli:raw="The text writer to output code to.">O text writer de saída do código.</param>
      <param name="options" vsli:raw="The options to use when generating the code.">As opções a serem usadas ao gerar o código.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.CodeDom.Compiler.CodeGenerator.Output&quot; /&gt; property is not &lt;see langword=&quot;null&quot; /&gt;.">A propriedade <see cref="P:System.CodeDom.Compiler.CodeGenerator.Output" /> não é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateComment(System.CodeDom.CodeComment)">
      <summary vsli:raw="Generates code for the specified comment.">Gera código para o comentário especificado.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeComment&quot; /&gt; to generate code for.">Um <see cref="T:System.CodeDom.CodeComment" /> para o qual o código deve ser gerado.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCommentStatement(System.CodeDom.CodeCommentStatement)">
      <summary vsli:raw="Generates code for the specified comment statement.">Gera código para a instrução de comentário especificada.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">A instrução para a qual gerar código.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;P:System.CodeDom.CodeCommentStatement.Comment&quot; /&gt; property of &lt;paramref name=&quot;e&quot; /&gt; is not set.">A propriedade <see cref="P:System.CodeDom.CodeCommentStatement.Comment" /> de <paramref name="e" /> não foi definida.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCommentStatements(System.CodeDom.CodeCommentStatementCollection)">
      <summary vsli:raw="Generates code for the specified comment statements.">Gera código para as instruções de comentário especificadas.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">A expressão para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnit(System.CodeDom.CodeCompileUnit)">
      <summary vsli:raw="Generates code for the specified compile unit.">Gera código para a unidade de compilação especificada.</summary>
      <param name="e" vsli:raw="The compile unit to generate code for.">A unidade de compilação para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnitEnd(System.CodeDom.CodeCompileUnit)">
      <summary vsli:raw="Generates code for the end of a compile unit.">Gera código para o término de uma unidade de compilação.</summary>
      <param name="e" vsli:raw="The compile unit to generate code for.">A unidade de compilação para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnitStart(System.CodeDom.CodeCompileUnit)">
      <summary vsli:raw="Generates code for the start of a compile unit.">Gera código para o início de uma unidade de compilação.</summary>
      <param name="e" vsli:raw="The compile unit to generate code for.">A unidade de compilação para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateConditionStatement(System.CodeDom.CodeConditionStatement)">
      <summary vsli:raw="Generates code for the specified conditional statement.">Gera código para a instrução condicional especificada.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">A instrução para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateConstructor(System.CodeDom.CodeConstructor,System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Generates code for the specified constructor.">Gera código para o construtor especificado.</summary>
      <param name="e" vsli:raw="The constructor to generate code for.">O construtor para o qual gerar código.</param>
      <param name="c" vsli:raw="The type of the object that this constructor constructs.">O tipo do objeto construído por este construtor.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDecimalValue(System.Decimal)">
      <summary vsli:raw="Generates code for the specified decimal value.">Gera código para o valor decimal especificado.</summary>
      <param name="d" vsli:raw="The decimal value to generate code for.">O valor decimal para o qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDefaultValueExpression(System.CodeDom.CodeDefaultValueExpression)">
      <summary vsli:raw="Generates code for the specified reference to a default value.">Gera código para a referência especificada para um valor padrão.</summary>
      <param name="e" vsli:raw="The reference to generate code for.">A referência para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDelegateCreateExpression(System.CodeDom.CodeDelegateCreateExpression)">
      <summary vsli:raw="Generates code for the specified delegate creation expression.">Gera código para a expressão de criação de delegado especificada.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">A expressão para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDelegateInvokeExpression(System.CodeDom.CodeDelegateInvokeExpression)">
      <summary vsli:raw="Generates code for the specified delegate invoke expression.">Gera código para a expressão de invocação de delegado especificada.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">A expressão para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDirectionExpression(System.CodeDom.CodeDirectionExpression)">
      <summary vsli:raw="Generates code for the specified direction expression.">Gera código para a expressão de direção especificada.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">A expressão para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDirectives(System.CodeDom.CodeDirectiveCollection)">
      <summary vsli:raw="Generates code for the specified code directives.">Gera código para as diretivas de código especificadas.</summary>
      <param name="directives" vsli:raw="The code directives to generate code for.">As diretivas de código para as quais gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDoubleValue(System.Double)">
      <summary vsli:raw="Generates code for a double-precision floating point number.">Gera código para um número de ponto flutuante de precisão dupla.</summary>
      <param name="d" vsli:raw="The value to generate code for.">O valor para o qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEntryPointMethod(System.CodeDom.CodeEntryPointMethod,System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Generates code for the specified entry point method.">Gera código para o método de ponto de entrada especificado.</summary>
      <param name="e" vsli:raw="The entry point for the code.">O ponto de entrada para o código.</param>
      <param name="c" vsli:raw="The code that declares the type.">O código que declara o tipo.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEvent(System.CodeDom.CodeMemberEvent,System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Generates code for the specified event.">Gera código para o evento especificado.</summary>
      <param name="e" vsli:raw="The member event to generate code for.">O evento de membro para o qual gerar código.</param>
      <param name="c" vsli:raw="The type of the object that this event occurs on.">O tipo do objeto no qual este evento ocorre.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEventReferenceExpression(System.CodeDom.CodeEventReferenceExpression)">
      <summary vsli:raw="Generates code for the specified event reference expression.">Gera código para a expressão de referência de evento especificada.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">A expressão para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateExpression(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Generates code for the specified code expression.">Gera código para a expressão de código especificada.</summary>
      <param name="e" vsli:raw="The code expression to generate code for.">A expressão de código para a qual gerar código.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;e&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="e" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;e&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt;.">
        <paramref name="e" /> não é um <see cref="T:System.CodeDom.CodeStatement" /> válido.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateExpressionStatement(System.CodeDom.CodeExpressionStatement)">
      <summary vsli:raw="Generates code for the specified expression statement.">Gera código para a instrução de expressão especificada.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">A instrução para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateField(System.CodeDom.CodeMemberField)">
      <summary vsli:raw="Generates code for the specified member field.">Gera código para o campo de membro especificado.</summary>
      <param name="e" vsli:raw="The field to generate code for.">O campo para o qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateFieldReferenceExpression(System.CodeDom.CodeFieldReferenceExpression)">
      <summary vsli:raw="Generates code for the specified field reference expression.">Gera código para a expressão de referência de campo especificada.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">A expressão para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateGotoStatement(System.CodeDom.CodeGotoStatement)">
      <summary vsli:raw="Generates code for the specified &lt;see langword=&quot;goto&quot; /&gt; statement.">Gera código para a instrução <see langword="goto" /> especificada.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">A expressão para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateIndexerExpression(System.CodeDom.CodeIndexerExpression)">
      <summary vsli:raw="Generates code for the specified indexer expression.">Gera código para a expressão de indexador especificada.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">A expressão para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateIterationStatement(System.CodeDom.CodeIterationStatement)">
      <summary vsli:raw="Generates code for the specified iteration statement.">Gera código para a instrução de iteração especificada.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">A instrução para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLabeledStatement(System.CodeDom.CodeLabeledStatement)">
      <summary vsli:raw="Generates code for the specified labeled statement.">Gera código para a instrução rotulada especificada.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">A instrução para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLinePragmaEnd(System.CodeDom.CodeLinePragma)">
      <summary vsli:raw="Generates code for the specified line pragma end.">Gera código para o pragma de fim de linha especificado.</summary>
      <param name="e" vsli:raw="The end of the line pragma to generate code for.">O pragma de fim de linha para o qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLinePragmaStart(System.CodeDom.CodeLinePragma)">
      <summary vsli:raw="Generates code for the specified line pragma start.">Gera código para o pragma de início de linha especificado.</summary>
      <param name="e" vsli:raw="The start of the line pragma to generate code for.">O pragma de início de linha para o qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethod(System.CodeDom.CodeMemberMethod,System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Generates code for the specified method.">Gera código para o método especificado.</summary>
      <param name="e" vsli:raw="The member method to generate code for.">O método de membro para o qual gerar código.</param>
      <param name="c" vsli:raw="The type of the object that this method occurs on.">O tipo do objeto no qual este método ocorre.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodInvokeExpression(System.CodeDom.CodeMethodInvokeExpression)">
      <summary vsli:raw="Generates code for the specified method invoke expression.">Gera código para a expressão de invocação de método especificada.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">A expressão para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodReferenceExpression(System.CodeDom.CodeMethodReferenceExpression)">
      <summary vsli:raw="Generates code for the specified method reference expression.">Gera código para a expressão de referência de método especificada.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">A expressão para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodReturnStatement(System.CodeDom.CodeMethodReturnStatement)">
      <summary vsli:raw="Generates code for the specified method return statement.">Gera código para a instrução de retorno de método especificada.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">A instrução para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespace(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Generates code for the specified namespace.">Gera código para o namespace especificado.</summary>
      <param name="e" vsli:raw="The namespace to generate code for.">O namespace para o qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceEnd(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Generates code for the end of a namespace.">Gera código para o término de um namespace.</summary>
      <param name="e" vsli:raw="The namespace to generate code for.">O namespace para o qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceImport(System.CodeDom.CodeNamespaceImport)">
      <summary vsli:raw="Generates code for the specified namespace import.">Gera código para a importação de namespace especificada.</summary>
      <param name="e" vsli:raw="The namespace import to generate code for.">A importação de namespace para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceImports(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Generates code for the specified namespace import.">Gera código para a importação de namespace especificada.</summary>
      <param name="e" vsli:raw="The namespace import to generate code for.">A importação de namespace para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaces(System.CodeDom.CodeCompileUnit)">
      <summary vsli:raw="Generates code for the namespaces in the specified compile unit.">Gera código para os namespaces na unidade de compilação especificada.</summary>
      <param name="e" vsli:raw="The compile unit to generate namespaces for.">A unidade de compilação para a qual gerar namespaces.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceStart(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Generates code for the start of a namespace.">Gera código para o início de um namespace.</summary>
      <param name="e" vsli:raw="The namespace to generate code for.">O namespace para o qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateObjectCreateExpression(System.CodeDom.CodeObjectCreateExpression)">
      <summary vsli:raw="Generates code for the specified object creation expression.">Gera código para a expressão de criação de objeto especificada.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">A expressão para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateParameterDeclarationExpression(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary vsli:raw="Generates code for the specified parameter declaration expression.">Gera código para a expressão de declaração de parâmetro especificada.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">A expressão para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePrimitiveExpression(System.CodeDom.CodePrimitiveExpression)">
      <summary vsli:raw="Generates code for the specified primitive expression.">Gera código para a expressão primitiva especificada.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">A expressão para a qual gerar código.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;e&quot; /&gt; uses an invalid data type. Only the following data types are valid:  &#xA;  &#xA;- string  &#xA;  &#xA;- char  &#xA;  &#xA;- byte  &#xA;  &#xA;- Int16  &#xA;  &#xA;- Int32  &#xA;  &#xA;- Int64  &#xA;&#xA;- Half&#xA;  &#xA;- Single  &#xA;  &#xA;- Double  &#xA;  &#xA;- Decimal">
        <paramref name="e" /> usa um tipo de dados inválido. Os seguintes tipos de dados são válidos:

cadeia de caracteres
char
byte
Int16
Int32
Int64
Único
Duplo
Decimal</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateProperty(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Generates code for the specified property.">Gera código para a propriedade especificada.</summary>
      <param name="e" vsli:raw="The property to generate code for.">A propriedade para a qual gerar código.</param>
      <param name="c" vsli:raw="The type of the object that this property occurs on.">O tipo do objeto no qual esta propriedade ocorre.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePropertyReferenceExpression(System.CodeDom.CodePropertyReferenceExpression)">
      <summary vsli:raw="Generates code for the specified property reference expression.">Gera código para a expressão de referência de propriedade especificada.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">A expressão para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePropertySetValueReferenceExpression(System.CodeDom.CodePropertySetValueReferenceExpression)">
      <summary vsli:raw="Generates code for the specified property set value reference expression.">Gera código para a expressão de referência de valor de conjunto de propriedades especificada.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">A expressão para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateRemoveEventStatement(System.CodeDom.CodeRemoveEventStatement)">
      <summary vsli:raw="Generates code for the specified remove event statement.">Gera código para a instrução de evento de remoção especificado.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">A instrução para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSingleFloatValue(System.Single)">
      <summary vsli:raw="Generates code for a single-precision floating point number.">Gera código para um número de ponto flutuante de precisão simples.</summary>
      <param name="s" vsli:raw="The value to generate code for.">O valor para o qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetCompileUnit(System.CodeDom.CodeSnippetCompileUnit)">
      <summary vsli:raw="Outputs the code of the specified literal code fragment compile unit.">Gera como saída o código da unidade de compilação de fragmento de código literal especificada.</summary>
      <param name="e" vsli:raw="The literal code fragment compile unit to generate code for.">A unidade de compilação de fragmento de código literal para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetExpression(System.CodeDom.CodeSnippetExpression)">
      <summary vsli:raw="Outputs the code of the specified literal code fragment expression.">Gera como saída o código da expressão de fragmento de código literal especificada.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">A expressão para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetMember(System.CodeDom.CodeSnippetTypeMember)">
      <summary vsli:raw="Outputs the code of the specified literal code fragment class member.">Gera como saída o código do membro de classe de fragmento de código literal especificada.</summary>
      <param name="e" vsli:raw="The member to generate code for.">O membro para o qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetStatement(System.CodeDom.CodeSnippetStatement)">
      <summary vsli:raw="Outputs the code of the specified literal code fragment statement.">Gera como saída o código da instrução de fragmento de código literal especificada.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">A instrução para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateStatement(System.CodeDom.CodeStatement)">
      <summary vsli:raw="Generates code for the specified statement.">Gera código para a instrução especificada.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">A instrução para a qual gerar código.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;e&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt;.">
        <paramref name="e" /> não é um <see cref="T:System.CodeDom.CodeStatement" /> válido.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateStatements(System.CodeDom.CodeStatementCollection)">
      <summary vsli:raw="Generates code for the specified statement collection.">Gera código para a coleção de instruções especificada.</summary>
      <param name="stms">As instruções para as quais gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateThisReferenceExpression(System.CodeDom.CodeThisReferenceExpression)">
      <summary vsli:raw="Generates code for the specified this reference expression.">Gera código para a expressão this reference especificada.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">A expressão para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateThrowExceptionStatement(System.CodeDom.CodeThrowExceptionStatement)">
      <summary vsli:raw="Generates code for the specified throw exception statement.">Gera código para a instrução throw exception especificada.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">A instrução para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTryCatchFinallyStatement(System.CodeDom.CodeTryCatchFinallyStatement)">
      <summary vsli:raw="Generates code for the specified &lt;c&gt;try-catch-finally&lt;/c&gt; statement.">Gera código para a instrução <see langword="try...catch...finally" /> especificada.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">A instrução para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeConstructor(System.CodeDom.CodeTypeConstructor)">
      <summary vsli:raw="Generates code for the specified class constructor.">Gera código para o construtor de classe especificado.</summary>
      <param name="e" vsli:raw="The class constructor to generate code for.">O construtor de classe para o qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeEnd(System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Generates code for the specified end of the class.">Gera código para o término especificado da classe.</summary>
      <param name="e" vsli:raw="The end of the class to generate code for.">O término da classe para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeOfExpression(System.CodeDom.CodeTypeOfExpression)">
      <summary vsli:raw="Generates code for the specified type of expression.">Gera código para o tipo de expressão especificado.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">A expressão para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeReferenceExpression(System.CodeDom.CodeTypeReferenceExpression)">
      <summary vsli:raw="Generates code for the specified type reference expression.">Gera código a expressão de referência de tipo especificada.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">A expressão para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypes(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Generates code for the specified namespace and the classes it contains.">Gera código para o namespace especificado e as classes que ele contém.</summary>
      <param name="e" vsli:raw="The namespace to generate classes for.">O namespace para o qual gerar classes.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeStart(System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Generates code for the specified start of the class.">Gera código para o início especificado da classe.</summary>
      <param name="e" vsli:raw="The start of the class to generate code for.">O início da classe para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateVariableDeclarationStatement(System.CodeDom.CodeVariableDeclarationStatement)">
      <summary vsli:raw="Generates code for the specified variable declaration statement.">Gera código para a instrução de declaração de variável especificada.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">A instrução para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateVariableReferenceExpression(System.CodeDom.CodeVariableReferenceExpression)">
      <summary vsli:raw="Generates code for the specified variable reference expression.">Gera código a expressão de referência de variável especificada.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">A expressão para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Gets the name of the specified data type.">Obtém o nome do tipo de dados especificado.</summary>
      <param name="value" vsli:raw="The type whose name will be returned.">O tipo cujo nome será retornado.</param>
      <returns vsli:raw="The name of the data type reference.">O nome da referência de tipo de dados.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Indent">
      <summary vsli:raw="Gets or sets the amount of spaces to indent each indentation level.">Obtém ou define a quantidade de espaços pela qual recuar cada nível de recuo.</summary>
      <returns vsli:raw="The number of spaces to indent for each indentation level.">O número de espaços a serem recuados para cada nível de recuo.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentClass">
      <summary vsli:raw="Gets a value indicating whether the current object being generated is a class.">Obtém um valor que indica se o objeto atual que está sendo gerado é uma classe.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current object is a class; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />Se o objeto atual for uma classe; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentDelegate">
      <summary vsli:raw="Gets a value indicating whether the current object being generated is a delegate.">Obtém um valor que indica se o objeto atual que está sendo gerado é um delegado.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current object is a delegate; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />Se o objeto atual for um delegado; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentEnum">
      <summary vsli:raw="Gets a value indicating whether the current object being generated is an enumeration.">Obtém um valor que indica se o objeto atual que está sendo gerado é uma enumeração.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current object is an enumeration; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />Se o objeto atual for uma enumeração; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentInterface">
      <summary vsli:raw="Gets a value indicating whether the current object being generated is an interface.">Obtém um valor que indica se o objeto atual que está sendo gerado é uma interface.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current object is an interface; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />Se o objeto atual for uma interface; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentStruct">
      <summary vsli:raw="Gets a value indicating whether the current object being generated is a value type or struct.">Obtém um valor que indica se o objeto atual que está sendo gerado é um tipo de valor ou um struct.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current object is a value type or struct; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />Se o objeto atual for um tipo de valor ou struct; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.IsValidIdentifier(System.String)">
      <summary vsli:raw="Gets a value indicating whether the specified value is a valid identifier.">Obtém um valor que indica se o valor especificado é um identificador válido.</summary>
      <param name="value" vsli:raw="The value to test for conflicts with valid identifiers.">O valor para testar quanto a conflitos com os identificadores válidos.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value is a valid identifier; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o valor é um identificador válido; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.IsValidLanguageIndependentIdentifier(System.String)">
      <summary vsli:raw="Gets a value indicating whether the specified string is a valid identifier.">Obtém um valor que indica se a cadeia de caracteres especificada é um identificador válido.</summary>
      <param name="value" vsli:raw="The string to test for validity.">A cadeia de caracteres a ser testada quanto à validade.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified string is a valid identifier; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a cadeia de caracteres especificada é um identificador válido; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.NullToken">
      <summary vsli:raw="Gets the token that represents &lt;see langword=&quot;null&quot; /&gt;.">Obtém o token que representa <see langword="null" />.</summary>
      <returns vsli:raw="The token that represents &lt;see langword=&quot;null&quot; /&gt;.">O token que representa <see langword="null" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Options">
      <summary vsli:raw="Gets the options to be used by the code generator.">Obtém as opções a serem usadas pelo gerador de código.</summary>
      <returns vsli:raw="An object that indicates the options for the code generator to use.">Um objeto que indica as opções para o gerador de código a ser usado.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Output">
      <summary vsli:raw="Gets the text writer to use for output.">Obtém o text writer a ser usado para saída.</summary>
      <returns vsli:raw="The text writer to use for output.">O text writer a ser usado para saída.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputAttributeArgument(System.CodeDom.CodeAttributeArgument)">
      <summary vsli:raw="Outputs an argument in an attribute block.">Gera como saída um argumento em um bloco de atributo.</summary>
      <param name="arg" vsli:raw="The attribute argument to generate code for.">O argumento de atributo para o qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputAttributeDeclarations(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary vsli:raw="Generates code for the specified attribute declaration collection.">Gera código para a coleção de declarações de atributo especificada.</summary>
      <param name="attributes" vsli:raw="The attributes to generate code for.">Os atributos para os quais gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputDirection(System.CodeDom.FieldDirection)">
      <summary vsli:raw="Generates code for the specified &lt;see cref=&quot;T:System.CodeDom.FieldDirection&quot; /&gt;.">Gera código para o <see cref="T:System.CodeDom.FieldDirection" /> especificado.</summary>
      <param name="dir" vsli:raw="One of the enumeration values that indicates the attribute of the field.">Um dos valores de enumeração que indica o atributo do campo.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputExpressionList(System.CodeDom.CodeExpressionCollection)">
      <summary vsli:raw="Generates code for the specified expression list.">Gera código para a lista de expressões especificada.</summary>
      <param name="expressions" vsli:raw="The expressions to generate code for.">As expressões para as quais gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputExpressionList(System.CodeDom.CodeExpressionCollection,System.Boolean)">
      <summary vsli:raw="Generates code for the specified expression list.">Gera código para a lista de expressões especificada.</summary>
      <param name="expressions" vsli:raw="The expressions to generate code for.">As expressões para as quais gerar código.</param>
      <param name="newlineBetweenItems" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to insert a new line after each item; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para inserir uma nova linha após cada item; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputFieldScopeModifier(System.CodeDom.MemberAttributes)">
      <summary vsli:raw="Outputs a field scope modifier that corresponds to the specified attributes.">Gera como saída um modificador de escopo de campo correspondente aos atributos especificados.</summary>
      <param name="attributes" vsli:raw="One of the enumeration values that specifies the attributes.">Um dos valores de enumeração que especifica os atributos.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputIdentifier(System.String)">
      <summary vsli:raw="Outputs the specified identifier.">Gera como saída o identificador especificado.</summary>
      <param name="ident" vsli:raw="The identifier to output.">O identificador a gerar como saída.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputMemberAccessModifier(System.CodeDom.MemberAttributes)">
      <summary vsli:raw="Generates code for the specified member access modifier.">Gera código para o modificador de acesso de membro especificado.</summary>
      <param name="attributes" vsli:raw="One of the enumeration values that indicates the member access modifier to generate code for.">Um dos valores de enumeração que indica o modificador de acesso de membro para o qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputMemberScopeModifier(System.CodeDom.MemberAttributes)">
      <summary vsli:raw="Generates code for the specified member scope modifier.">Gera código para o modificador de escopo de membro especificado.</summary>
      <param name="attributes" vsli:raw="One of the enumeration values that indicates the member scope modifier to generate code for.">Um dos valores de enumeração que indica o modificador de escopo de membro para o qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputOperator(System.CodeDom.CodeBinaryOperatorType)">
      <summary vsli:raw="Generates code for the specified operator.">Gera código para o operador especificado.</summary>
      <param name="op" vsli:raw="The operator to generate code for.">O operador para o qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputParameters(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary vsli:raw="Generates code for the specified parameters.">Gera código para os parâmetros especificados.</summary>
      <param name="parameters" vsli:raw="The parameter declaration expressions to generate code for.">As expressões de declaração de parâmetro para as quais gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputType(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Generates code for the specified type.">Gera código para o tipo especificado.</summary>
      <param name="typeRef" vsli:raw="The type to generate code for.">O tipo para o qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputTypeAttributes(System.Reflection.TypeAttributes,System.Boolean,System.Boolean)">
      <summary vsli:raw="Generates code for the specified type attributes.">Gera código para os atributos de tipo especificados.</summary>
      <param name="attributes" vsli:raw="One of the enumeration values that indicates the type attributes to generate code for.">Um dos valores de enumeração que indica os atributos de tipo para os quais gerar código.</param>
      <param name="isStruct" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is a struct; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o tipo é um struct; caso contrário, <see langword="false" />.</param>
      <param name="isEnum" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is an enum; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o tipo é um enum; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputTypeNamePair(System.CodeDom.CodeTypeReference,System.String)">
      <summary vsli:raw="Generates code for the specified object type and name pair.">Gera código para o par de nome e tipo de objeto especificado.</summary>
      <param name="typeRef" vsli:raw="The type.">O tipo.</param>
      <param name="name" vsli:raw="The name for the object.">O nome para o objeto.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.QuoteSnippetString(System.String)">
      <summary vsli:raw="Converts the specified string by formatting it with escape codes.">Converte a cadeia de caracteres especificada formatando-a com códigos de escape.</summary>
      <param name="value" vsli:raw="The string to convert.">A cadeia de caracteres a ser convertida.</param>
      <returns vsli:raw="The converted string.">A cadeia de caracteres convertida.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary vsli:raw="Gets a value indicating whether the specified code generation support is provided.">Obtém um valor que indica se o suporte à geração de código especificado é fornecido.</summary>
      <param name="support" vsli:raw="The type of code generation support to test for.">O tipo de suporte a geração de código para o qual testar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified code generation support is provided; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o suporte à geração de código especificada é fornecido; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#CreateEscapedIdentifier(System.String)">
      <summary vsli:raw="Creates an escaped identifier for the specified value.">Cria um identificador de escape para o valor especificado.</summary>
      <param name="value" vsli:raw="The string to create an escaped identifier for.">A cadeia de caracteres para a qual criar um identificador de escape.</param>
      <returns vsli:raw="The escaped identifier for the value.">O identificador de escape para o valor.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#CreateValidIdentifier(System.String)">
      <summary vsli:raw="Creates a valid identifier for the specified value.">Cria um identificador válido para o valor especificado.</summary>
      <param name="value" vsli:raw="The string to generate a valid identifier for.">A cadeia de caracteres para a qual gerar um identificador válido.</param>
      <returns vsli:raw="A valid identifier for the specified value.">Um identificador válido para o valor especificado.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) compilation unit and outputs it to the specified text writer using the specified options.">Gera código para a unidade de compilação CodeDOM (Modelo de Objeto do Documento de Código) especificada e gera-o como saída para o text writer especificado, usando as opções especificadas.</summary>
      <param name="e" vsli:raw="The CodeDOM compilation unit to generate code for.">A unidade de compilação de CodeDOM para a qual gerar código.</param>
      <param name="w" vsli:raw="The text writer to output code to.">O text writer de saída do código.</param>
      <param name="o" vsli:raw="The options to use for generating code.">As opções a serem usadas para gerar código.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;w&quot; /&gt; is not available. &lt;paramref name=&quot;w&quot; /&gt; may have been closed before the method call was made.">
        <paramref name="w" /> não está disponível. <paramref name="w" /> pode ter sido fechado antes da chamada de método ser feita.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) expression and outputs it to the specified text writer.">Gera código para a expressão CodeDOM (Modelo de Objeto do Documento de Código) especificada e gera-o como saída para o text writer especificado.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">A expressão para a qual gerar código.</param>
      <param name="w" vsli:raw="The text writer to output code to.">O text writer de saída do código.</param>
      <param name="o" vsli:raw="The options to use for generating code.">As opções a serem usadas para gerar código.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;w&quot; /&gt; is not available. &lt;paramref name=&quot;w&quot; /&gt; may have been closed before the method call was made.">
        <paramref name="w" /> não está disponível. <paramref name="w" /> pode ter sido fechado antes da chamada de método ser feita.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) namespace and outputs it to the specified text writer using the specified options.">Gera código para o namespace CodeDOM (Modelo de Objeto do Documento de Código) especificado e gera-o como saída para o text writer especificado, usando as opções especificadas.</summary>
      <param name="e" vsli:raw="The namespace to generate code for.">O namespace para o qual gerar código.</param>
      <param name="w" vsli:raw="The text writer to output code to.">O text writer de saída do código.</param>
      <param name="o" vsli:raw="The options to use for generating code.">As opções a serem usadas para gerar código.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;w&quot; /&gt; is not available. &lt;paramref name=&quot;w&quot; /&gt; may have been closed before the method call was made.">
        <paramref name="w" /> não está disponível. <paramref name="w" /> pode ter sido fechado antes da chamada de método ser feita.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) statement and outputs it to the specified text writer using the specified options.">Gera código para a instrução CodeDOM (Modelo de Objeto do Documento de Código) especificada e gera-o como saída para o text writer especificado, usando as opções especificadas.</summary>
      <param name="e" vsli:raw="The statement that contains the CodeDOM elements to translate.">A instrução que contém os elementos CodeDOM a traduzir.</param>
      <param name="w" vsli:raw="The text writer to output code to.">O text writer de saída do código.</param>
      <param name="o" vsli:raw="The options to use for generating code.">As opções a serem usadas para gerar código.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;w&quot; /&gt; is not available. &lt;paramref name=&quot;w&quot; /&gt; may have been closed before the method call was made.">
        <paramref name="w" /> não está disponível. <paramref name="w" /> pode ter sido fechado antes da chamada de método ser feita.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) type declaration and outputs it to the specified text writer using the specified options.">Gera código para a declaração de tipo CodeDOM (Modelo de Objeto do Documento de Código) especificada e gera-a como saída para o text writer especificado, usando as opções especificadas.</summary>
      <param name="e" vsli:raw="The type to generate code for.">O tipo para o qual gerar código.</param>
      <param name="w" vsli:raw="The text writer to output code to.">O text writer de saída do código.</param>
      <param name="o" vsli:raw="The options to use for generating code.">As opções a serem usadas para gerar código.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;w&quot; /&gt; is not available. &lt;paramref name=&quot;w&quot; /&gt; may have been closed before the method call was made.">
        <paramref name="w" /> não está disponível. <paramref name="w" /> pode ter sido fechado antes da chamada de método ser feita.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Gets the type indicated by the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt;.">Obtém o tipo indicado pelo <see cref="T:System.CodeDom.CodeTypeReference" /> especificado.</summary>
      <param name="type" vsli:raw="The type to return.">O tipo a ser retornado.</param>
      <returns vsli:raw="The name of the data type reference.">O nome da referência de tipo de dados.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#IsValidIdentifier(System.String)">
      <summary vsli:raw="Gets a value that indicates whether the specified value is a valid identifier for the current language.">Obtém um valor que indica se o valor especificado é um identificador válido para a linguagem de programação atual.</summary>
      <param name="value" vsli:raw="The value to test.">O valor a testar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;value&quot; /&gt; parameter is a valid identifier; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o parâmetro <paramref name="value" /> é um identificador válido; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary vsli:raw="Gets a value indicating whether the generator provides support for the language features represented by the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.GeneratorSupport&quot; /&gt; object.">Obtém um valor que indica se o gerador dá suporte para os recursos de idioma representados pelo objeto <see cref="T:System.CodeDom.Compiler.GeneratorSupport" />.</summary>
      <param name="support" vsli:raw="The capabilities to test the generator for.">As funcionalidades para as quais testar o gerador.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified capabilities are supported; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se os recursos especificados forem compatíveis; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#ValidateIdentifier(System.String)">
      <summary vsli:raw="Throws an exception if the specified value is not a valid identifier.">Gera uma exceção se o valor especificado não é um identificador válido.</summary>
      <param name="value" vsli:raw="The identifier to validate.">O identificador a ser validado.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifier(System.String)">
      <summary vsli:raw="Throws an exception if the specified string is not a valid identifier.">Gera uma exceção se a cadeia de caracteres especificada não é um identificador válido.</summary>
      <param name="value" vsli:raw="The identifier to test for validity as an identifier.">O identificador para testar quanto à validade enquanto um identificador.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified identifier is invalid or conflicts with reserved or language keywords.">Se o identificador especificado é inválido ou está em conflito com palavras-chave reservadas ou de linguagem.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifiers(System.CodeDom.CodeObject)">
      <summary vsli:raw="Attempts to validate each identifier field contained in the specified &lt;see cref=&quot;T:System.CodeDom.CodeObject&quot; /&gt; or &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; tree.">Tenta validar cada campo de identificador contido na árvore <see cref="T:System.CodeDom.CodeObject" /> ou <see cref="N:System.CodeDom" /> especificada.</summary>
      <param name="e" vsli:raw="An object to test for invalid identifiers.">Um objeto a testar quanto a identificadores inválidos.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified &lt;see cref=&quot;T:System.CodeDom.CodeObject&quot; /&gt; contains an invalid identifier.">O <see cref="T:System.CodeDom.CodeObject" /> especificado contém um identificador inválido.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeGeneratorOptions">
      <summary vsli:raw="Represents a set of options used by a code generator.">Representa um conjunto de opções usadas por um gerador de código.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGeneratorOptions.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />.</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.BlankLinesBetweenMembers">
      <summary vsli:raw="Gets or sets a value indicating whether to insert blank lines between members.">Obtém ou define um valor que indica se linhas em branco são ou não inseridas entre membros.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if blank lines should be inserted; otherwise, &lt;see langword=&quot;false&quot; /&gt;. By default, the value of this property is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" />se linhas em branco devem ser inseridas; caso contrário <see langword="false" />,. Por padrão, o valor dessa propriedade é <see langword="true" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.BracingStyle">
      <summary vsli:raw="Gets or sets the style to use for bracing.">Obtém ou define o estilo de chaves a ser usado.</summary>
      <returns vsli:raw="A string containing the bracing style to use.">Uma cadeia de caracteres que contém o estilo de chaves a ser usado.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.ElseOnClosing">
      <summary vsli:raw="Gets or sets a value indicating whether to append an &lt;see langword=&quot;else&quot; /&gt;, &lt;see langword=&quot;catch&quot; /&gt;, or &lt;see langword=&quot;finally&quot; /&gt; block, including brackets, at the closing line of each previous &lt;see langword=&quot;if&quot; /&gt; or &lt;see langword=&quot;try&quot; /&gt; block.">Obtém ou define um valor que indica se um bloco <see langword="else" />, <see langword="catch" /> ou <see langword="finally" />, incluindo os colchetes, deve ou não ser acrescentado na linha de fechamento de cada bloco <see langword="if" /> ou <see langword="try" /> anterior.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an else should be appended; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default value of this property is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />se outra pessoa deve ser acrescentada; caso contrário <see langword="false" />,. O valor padrão dessa propriedade é <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.IndentString">
      <summary vsli:raw="Gets or sets the string to use for indentations.">Obtém ou define a cadeia de caracteres a ser usada para recuos.</summary>
      <returns vsli:raw="A string containing the characters to use for indentations.">Uma cadeia de caracteres que contém o caractere a ser usado para recuos.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.Item(System.String)">
      <summary vsli:raw="Gets or sets the object at the specified index.">Obtém ou define o objeto no índice especificado.</summary>
      <param name="index" vsli:raw="The name associated with the object to retrieve.">O nome associado ao objeto a ser recuperado.</param>
      <returns vsli:raw="The object associated with the specified name. If no object associated with the specified name exists in the collection, &lt;see langword=&quot;null&quot; /&gt;.">O objeto associado ao nome especificado. Se nenhum objeto associado ao nome especificado existir na coleção, <see langword="null" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.VerbatimOrder">
      <summary vsli:raw="Gets or sets a value indicating whether to generate members in the order in which they occur in member collections.">Obtém ou define um valor que indica se os membros devem ou não ser gerados na ordem em que ocorrem em coleções de membros.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to generate the members in the order in which they occur in the member collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default value of this property is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />para gerar os membros na ordem em que eles ocorrem na coleção de membros; caso contrário <see langword="false" />,. O valor padrão dessa propriedade é <see langword="false" />.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeParser">
      <summary vsli:raw="Provides an empty implementation of the &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeParser&quot; /&gt; interface.">Fornece uma implementação vazia da interface <see cref="T:System.CodeDom.Compiler.ICodeParser" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeParser.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeParser&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.Compiler.CodeParser" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeParser.Parse(System.IO.TextReader)">
      <summary vsli:raw="Compiles the specified text stream into a &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt;.">Compila o fluxo de texto especificado em um <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
      <param name="codeStream" vsli:raw="A &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; that is used to read the code to be parsed.">Um <see cref="T:System.IO.TextReader" /> que é usado para ler o código a ser analisado.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; containing the code model produced from parsing the code.">Um <see cref="T:System.CodeDom.CodeCompileUnit" /> que contém o modelo de código gerado pela análise de código.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerError">
      <summary vsli:raw="Represents a compiler error or warning.">Representa um erro ou aviso de compilador.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.Compiler.CompilerError" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.#ctor(System.String,System.Int32,System.Int32,System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; class using the specified file name, line, column, error number, and error text.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.Compiler.CompilerError" /> usando o nome do arquivo, coluna, número do erro e texto do erro especificados.</summary>
      <param name="fileName" vsli:raw="The file name of the file that the compiler was compiling when it encountered the error.">O nome do arquivo que o compilador estava compilando quando encontrou o erro.</param>
      <param name="line" vsli:raw="The line of the source of the error.">A linha da origem do erro.</param>
      <param name="column" vsli:raw="The column of the source of the error.">A coluna da origem do erro.</param>
      <param name="errorNumber" vsli:raw="The error number of the error.">O número do erro.</param>
      <param name="errorText" vsli:raw="The error message text.">O texto da mensagem de erro.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.Column">
      <summary vsli:raw="Gets or sets the column number where the source of the error occurs.">Obtém ou define o número da coluna em que a origem do erro ocorre.</summary>
      <returns vsli:raw="The column number of the source file where the compiler encountered the error.">O número da coluna do arquivo de origem em que o compilador encontrou o erro.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.ErrorNumber">
      <summary vsli:raw="Gets or sets the error number.">Obtém ou define o número do erro.</summary>
      <returns vsli:raw="The error number as a string.">O número do erro como uma cadeia de caracteres.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.ErrorText">
      <summary vsli:raw="Gets or sets the text of the error message.">Obtém ou define o texto da mensagem de erro.</summary>
      <returns vsli:raw="The text of the error message.">O texto da mensagem de erro.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.FileName">
      <summary vsli:raw="Gets or sets the file name of the source file that contains the code which caused the error.">Obtém ou define o nome do arquivo de origem que contém o código que causou o erro.</summary>
      <returns vsli:raw="The file name of the source file that contains the code which caused the error.">O nome do arquivo de origem que contém o código que causou o erro.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.IsWarning">
      <summary vsli:raw="Gets or sets a value that indicates whether the error is a warning.">Obtém ou define um valor que indica se o erro é um aviso.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the error is a warning; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o erro for um aviso; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.Line">
      <summary vsli:raw="Gets or sets the line number where the source of the error occurs.">Obtém ou define o número de linha em que a origem do erro ocorre.</summary>
      <returns vsli:raw="The line number of the source file where the compiler encountered the error.">O número de linha do arquivo de origem em que o compilador encontrou o erro.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.ToString">
      <summary vsli:raw="Provides an implementation of Object's &lt;see cref=&quot;M:System.Object.ToString&quot; /&gt; method.">Fornece uma implementação do método <see cref="M:System.Object.ToString" /> do objeto.</summary>
      <returns vsli:raw="A string representation of the compiler error.">Retorna uma representação de cadeia de caracteres do erro do compilador.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerErrorCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; objects.">Representa uma coleção de objetos <see cref="T:System.CodeDom.Compiler.CompilerError" /> .</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor(System.CodeDom.Compiler.CompilerError[])">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt; that contains the specified array of &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; objects.">Inicializa uma nova instância de <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> contendo a matriz de objetos <see cref="T:System.CodeDom.Compiler.CompilerError" /> especificada.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; objects to initialize the collection with.">Uma matriz de objetos <see cref="T:System.CodeDom.Compiler.CompilerError" /> com os quais inicializar a coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor(System.CodeDom.Compiler.CompilerErrorCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt; class that contains the contents of the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt;.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> que contém o conteúdo do <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> especificado.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt; object with which to initialize the collection.">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> com o qual inicializar a coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Add(System.CodeDom.Compiler.CompilerError)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; object to the error collection.">Adiciona o objeto <see cref="T:System.CodeDom.Compiler.CompilerError" /> especificado à coleção de erros.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; object to add.">O objeto <see cref="T:System.CodeDom.Compiler.CompilerError" /> a ser adicionado.</param>
      <returns vsli:raw="The index at which the new element was inserted.">O índice no qual o novo elemento foi inserido.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.AddRange(System.CodeDom.Compiler.CompilerError[])">
      <summary vsli:raw="Copies the elements of an array to the end of the error collection.">Copia os elementos de uma matriz para o final da coleção de erros.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; that contains the objects to add to the collection.">Uma matriz do tipo <see cref="T:System.CodeDom.Compiler.CompilerError" /> que contém os objetos a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.AddRange(System.CodeDom.Compiler.CompilerErrorCollection)">
      <summary vsli:raw="Adds the contents of the specified compiler error collection to the end of the error collection.">Adiciona o conteúdo da coleção de erros de compilador especificada ao final da coleção de erros.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt; object that contains the objects to add to the collection.">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> que contém os objetos a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Contains(System.CodeDom.Compiler.CompilerError)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; object.">Obtém um valor que indica se a coleção contém o objeto <see cref="T:System.CodeDom.Compiler.CompilerError" /> especificado.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; to locate.">O <see cref="T:System.CodeDom.Compiler.CompilerError" /> a ser localizado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; is contained in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o item <see cref="T:System.CodeDom.Compiler.CompilerError" /> estiver contido na coleção; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.CopyTo(System.CodeDom.Compiler.CompilerError[],System.Int32)">
      <summary vsli:raw="Copies the collection values to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance at the specified index.">Copia os valores da coleção para uma instância de <see cref="T:System.Array" /> unidimensional no índice especificado.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt;.">O <see cref="T:System.Array" /> unidimensional que é o destino dos valores copiados do <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />.</param>
      <param name="index" vsli:raw="The index in the array at which to start copying.">O índice na matriz no qual iniciar a cópia.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The array indicated by the &lt;paramref name=&quot;array&quot; /&gt; parameter is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt; is greater than the available space between the index value of the &lt;paramref name=&quot;arrayIndex&quot; /&gt; parameter in the array indicated by the &lt;paramref name=&quot;array&quot; /&gt; parameter and the end of the array indicated by the &lt;paramref name=&quot;array&quot; /&gt; parameter.">A matriz indicada pelo parâmetro <paramref name="array" /> é multidimensional.
- ou -
O número de elementos na <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> é maior do que o espaço disponível entre o valor do índice do parâmetro <paramref name="arrayIndex" /> na matriz indicada pelo parâmetro <paramref name="array" /> e o final da matriz indicada pelo parâmetro <paramref name="array" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">O parâmetro <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the lowbound of the array indicated by the &lt;paramref name=&quot;array&quot; /&gt; parameter.">O parâmetro <paramref name="index" /> é menor que o limite mínimo da matriz indicada pelo parâmetro <paramref name="array" />.</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.HasErrors">
      <summary vsli:raw="Gets a value that indicates whether the collection contains errors.">Obtém um valor que indica se a coleção contém erros.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains errors; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />se a coleção contiver erros; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.HasWarnings">
      <summary vsli:raw="Gets a value that indicates whether the collection contains warnings.">Obtém um valor que indica se a coleção contém avisos.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains warnings; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />se a coleção contiver avisos; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.IndexOf(System.CodeDom.Compiler.CompilerError)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; object in the collection, if it exists in the collection.">Obtém o índice do objeto <see cref="T:System.CodeDom.Compiler.CompilerError" /> especificado na coleção, se ele existe na coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; to locate.">O <see cref="T:System.CodeDom.Compiler.CompilerError" /> a ser localizado.</param>
      <returns vsli:raw="The index of the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; in the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt;, if found; otherwise, -1.">O índice do <see cref="T:System.CodeDom.Compiler.CompilerError" /> especificado no <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />, se encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Insert(System.Int32,System.CodeDom.Compiler.CompilerError)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; into the collection at the specified index.">Insere o <see cref="T:System.CodeDom.Compiler.CompilerError" /> especificado na coleção, no índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index where the compiler error should be inserted.">O índice baseado em zero no qual o erro do compilador deve ser inserido.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; to insert.">O <see cref="T:System.CodeDom.Compiler.CompilerError" /> a ser inserido.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; at the specified index.">Obtém ou define o <see cref="T:System.CodeDom.Compiler.CompilerError" /> no índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index of the entry to locate in the collection.">O índice baseado em zero da entrada a ser localizado na coleção.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; at each valid index.">A <see cref="T:System.CodeDom.Compiler.CompilerError" /> em cada índice válido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The index value indicated by the &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">O valor de índice indicado pelo parâmetro <paramref name="index" /> está fora do intervalo válido de índices para a coleção.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Remove(System.CodeDom.Compiler.CompilerError)">
      <summary vsli:raw="Removes a specific &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; from the collection.">Remove um <see cref="T:System.CodeDom.Compiler.CompilerError" /> específico da coleção.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; to remove from the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt;.">O <see cref="T:System.CodeDom.Compiler.CompilerError" /> a ser removido de <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">O objeto especificado não foi localizado na coleção.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerInfo">
      <summary vsli:raw="Represents the configuration settings of a language provider. This class cannot be inherited.">Representa as configurações de um provedor de idioma. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerInfo.CodeDomProviderType">
      <summary vsli:raw="Gets the type of the configured &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementation.">Obtém o tipo de implementação <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> configurada.</summary>
      <returns vsli:raw="A read-only &lt;see cref=&quot;T:System.Type&quot; /&gt; instance that represents the configured language provider type.">Uma instância <see cref="T:System.Type" /> de somente leitura que representa o tipo de provedor do idioma configurado.</returns>
      <exception cref="T:System.Configuration.ConfigurationException" vsli:raw="The language provider is not configured on this computer.">O provedor de idioma não está configurado neste computador.</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException" vsli:raw="Cannot locate the type because it is a &lt;see langword=&quot;null&quot; /&gt; or empty string.  &#xA;  &#xA; -or-  &#xA;  &#xA; Cannot locate the type because the name for the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; cannot be found in the configuration file.">Não é possível localizar o tipo porque ele é um <see langword="null" /> ou uma cadeia de caracteres vazia.
- ou -
Não é possível localizar o tipo porque o nome para o <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> não pode ser encontrado no arquivo de configuração.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateDefaultCompilerParameters">
      <summary vsli:raw="Gets the configured compiler settings for the language provider implementation.">Obtém as configurações de compilador definidas para a implementação de provedor de linguagem de programação.</summary>
      <returns vsli:raw="A read-only &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; instance that contains the compiler options and settings configured for the language provider.">Uma instância <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> somente leitura que contém as opções de compilador e as configurações definidas para o provedor de linguagem de programação.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateProvider">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; instance for the current language provider settings.">Retorna uma instância de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> para as configurações de provedor de linguagem de programação atuais.</summary>
      <returns vsli:raw="A CodeDOM provider associated with the language provider configuration.">Um provedor CodeDOM associado com a configuração do provedor de linguagem de programação.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateProvider(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; instance for the current language provider settings and specified options.">Retorna uma instância de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> para as configurações de provedor de linguagem de programação atuais e as opções especificadas.</summary>
      <param name="providerOptions" vsli:raw="A collection of provider options from the configuration file.">Uma coleção de opções do provedor do arquivo de configuração.</param>
      <returns vsli:raw="A CodeDOM provider associated with the language provider configuration and specified options.">Um provedor CodeDOM associado com a configuração do provedor de linguagem de programação e as opções especificadas.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;providerOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="providerOptions" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The provider does not support options.">O provedor não dá suporte a opções.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified object represents the same language provider and compiler settings as the current &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerInfo&quot; /&gt;.">Determina se o objeto especificado representa as mesmas configurações do compilador e provedor de linguagem de programação que o <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> atual.</summary>
      <param name="o" vsli:raw="The object to compare with the current &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerInfo&quot; /&gt;.">O objeto a ser comparado com o <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> atual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;o&quot; /&gt; is a &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerInfo&quot; /&gt; object and its value is the same as this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="o" /> for um objeto <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> e seu valor for o mesmo que o dessa instância; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetExtensions">
      <summary vsli:raw="Returns the file name extensions supported by the language provider.">Retorna as extensões de nome de arquivo com suporte pelo provedor de linguagem de programação.</summary>
      <returns vsli:raw="An array of file name extensions supported by the language provider.">Uma matriz de extensões de nome de arquivo com suporte pelo provedor de linguagem de programação.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetHashCode">
      <summary vsli:raw="Returns the hash code for the current instance.">Retorna o código hash para a instância atual.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code for the current &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerInfo&quot; /&gt; instance, suitable for use in hashing algorithms and data structures such as a hash table.">Um código hash de inteiro com sinal de 32 bits para a instância atual de <see cref="T:System.CodeDom.Compiler.CompilerInfo" />, adequado para uso em algoritmos de hash e estruturas de dados, tais como uma tabela de hash.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetLanguages">
      <summary vsli:raw="Gets the language names supported by the language provider.">Obtém os nomes de linguagens de programação com suporte pelo provedor de linguagem de programação.</summary>
      <returns vsli:raw="An array of language names supported by the language provider.">Uma matriz de nomes de linguagens de programação com suporte pelo provedor de linguagem de programação.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerInfo.IsCodeDomProviderTypeValid">
      <summary vsli:raw="Returns a value indicating whether the language provider implementation is configured on the computer.">Retorna um valor que indica se a implementação de provedor de linguagem de programação está configurada no computador.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the language provider implementation type is configured on the computer; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />Se o tipo de implementação do provedor de idioma estiver configurado no computador; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerParameters">
      <summary vsli:raw="Represents the parameters used to invoke a compiler.">Representa os parâmetros usados para invocar um compilador.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.Compiler.CompilerParameters" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; class using the specified assembly names.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> usando os nomes de assembly especificados.</summary>
      <param name="assemblyNames" vsli:raw="The names of the assemblies to reference.">Os nomes dos assemblies a referenciar.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; class using the specified assembly names and output file name.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> usando os nomes de assembly e o nome do arquivo de saída especificados.</summary>
      <param name="assemblyNames" vsli:raw="The names of the assemblies to reference.">Os nomes dos assemblies a referenciar.</param>
      <param name="outputName" vsli:raw="The output file name.">O nome do arquivo de saída.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; class using the specified assembly names, output name, and a value indicating whether to include debug information.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> usando os nomes de assembly especificados, o nome de saída e um valor que indica se informações de depuração devem ou não ser incluídas.</summary>
      <param name="assemblyNames" vsli:raw="The names of the assemblies to reference.">Os nomes dos assemblies a referenciar.</param>
      <param name="outputName" vsli:raw="The output file name.">O nome do arquivo de saída.</param>
      <param name="includeDebugInformation" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include debug information; &lt;see langword=&quot;false&quot; /&gt; to exclude debug information.">
        <see langword="true" /> para incluir informações de depuração; <see langword="false" /> para excluir informações de depuração.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.CompilerOptions">
      <summary vsli:raw="Gets or sets optional command-line arguments to use when invoking the compiler.">Obtém ou define argumentos opcionais de linha de comando a serem usados ao invocar o compilador.</summary>
      <returns vsli:raw="Any additional command-line arguments for the compiler.">Outros argumentos de linha de comando para o compilador.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.CoreAssemblyFileName">
      <summary vsli:raw="Gets or sets the name of the core or standard assembly that contains basic types such as &lt;see cref=&quot;T:System.Object&quot; /&gt;, &lt;see cref=&quot;T:System.String&quot; /&gt;, or &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">Obtém ou define o nome do assembly padrão ou principal que contém tipos básicos como <see cref="T:System.Object" />, <see cref="T:System.String" /> ou <see cref="T:System.Int32" />.</summary>
      <returns vsli:raw="The name of the core assembly that contains basic types.">O nome do assembly principal que contém tipos básicos.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources">
      <summary vsli:raw="Gets the .NET resource files to include when compiling the assembly output.">Obtém os arquivos de recursos do .NET Framework a serem incluídos ao compilar a saída do assembly.</summary>
      <returns vsli:raw="A collection that contains the file paths of .NET resources to include in the generated assembly.">Uma coleção que contém os caminhos de arquivo de recursos do .NET Framework a serem incluídos no assembly gerado.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable">
      <summary vsli:raw="Gets or sets a value indicating whether to generate an executable.">Obtém ou define um valor que indica se um executável deve ser gerado.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an executable should be generated; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se um executável precisar ser gerado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.GenerateInMemory">
      <summary vsli:raw="Gets or sets a value indicating whether to generate the output in memory.">Obtém ou define um valor que indica se a saída na memória deve ser gerada.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the compiler should generate the output in memory; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o compilador deve gerar a saída na memória, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.IncludeDebugInformation">
      <summary vsli:raw="Gets or sets a value indicating whether to include debug information in the compiled executable.">Obtém ou define um valor que indica informações de depuração devem ou não ser incluídas no executável compilado.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if debug information should be generated; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se as informações de depuração devem ser geradas; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.LinkedResources">
      <summary vsli:raw="Gets the .NET resource files that are referenced in the current source.">Obtém os arquivos de recurso do .NET Framework que são referenciados na origem atual.</summary>
      <returns vsli:raw="A collection that contains the file paths of .NET resources that are referenced by the source.">Uma coleção que contém os caminhos de arquivo de .NET Framework recursos que são referenciados pela origem.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.MainClass">
      <summary vsli:raw="Gets or sets the name of the main class.">Obtém ou define o nome da classe principal.</summary>
      <returns vsli:raw="The name of the main class.">O nome da classe principal.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.OutputAssembly">
      <summary vsli:raw="Gets or sets the name of the output assembly.">Obtém ou define o nome do assembly de saída.</summary>
      <returns vsli:raw="The name of the output assembly.">O nome do assembly de saída.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies">
      <summary vsli:raw="Gets the assemblies referenced by the current project.">Obtém os assemblies referenciados pelo projeto atual.</summary>
      <returns vsli:raw="A collection that contains the assembly names that are referenced by the source to compile.">Uma coleção que contém os nomes de assembly referenciados pela origem a se compilar.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.TempFiles">
      <summary vsli:raw="Gets or sets the collection that contains the temporary files.">Obtém ou define a coleção que contém os arquivos temporários.</summary>
      <returns vsli:raw="A collection that contains the temporary files.">Uma coleção que contém os arquivos temporários.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.TreatWarningsAsErrors">
      <summary vsli:raw="Gets or sets a value indicating whether to treat warnings as errors.">Obtém ou define um valor que indica se avisos devem ou não ser tratados como erros.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if warnings should be treated as errors; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se os avisos devem ser tratados como erros; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.UserToken">
      <summary vsli:raw="Gets or sets the user token to use when creating the compiler process.">Obtém ou define o token de usuário a ser usado ao criar o processo de compilador.</summary>
      <returns vsli:raw="The user token to use.">O token de usuário a ser usado.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.WarningLevel">
      <summary vsli:raw="Gets or sets the warning level at which the compiler aborts compilation.">Obtém ou define o nível de aviso em que o compilador anula a compilação.</summary>
      <returns vsli:raw="The warning level at which the compiler aborts compilation.">O nível de aviso no qual o compilador anula a compilação.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.Win32Resource">
      <summary vsli:raw="Gets or sets the file name of a Win32 resource file to link into the compiled assembly.">Obtém ou define o nome do arquivo de um arquivo de recurso Win32 a ser vinculado ao assembly compilado.</summary>
      <returns vsli:raw="A Win32 resource file that will be linked into the compiled assembly.">Um arquivo de recurso do Win32 que será vinculado ao assembly compilado.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerResults">
      <summary vsli:raw="Represents the results of compilation that are returned from a compiler.">Representa os resultados de compilação retornados de um compilador.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerResults.#ctor(System.CodeDom.Compiler.TempFileCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; class that uses the specified temporary files.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.Compiler.CompilerResults" /> que usa os arquivos temporários especificados.</summary>
      <param name="tempFiles" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; with which to manage and store references to intermediate files generated during compilation.">Um <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> com o qual gerenciar e armazenar as referências em arquivos intermediários gerados durante a compilação.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.CompiledAssembly">
      <summary vsli:raw="Gets or sets the compiled assembly.">Obtém ou define o assembly compilado.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Reflection.Assembly&quot; /&gt; that indicates the compiled assembly.">Um <see cref="T:System.Reflection.Assembly" /> que indica que o assembly compilado.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.Errors">
      <summary vsli:raw="Gets the collection of compiler errors and warnings.">Obtém a coleção de avisos e erros do compilador.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt; that indicates the errors and warnings resulting from compilation, if any.">Um <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> que indica os erros e avisos resultantes da compilação, se houver.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.NativeCompilerReturnValue">
      <summary vsli:raw="Gets or sets the compiler's return value.">Obtém ou define o valor retornado do compilador.</summary>
      <returns vsli:raw="The compiler's return value.">O valor de retorno do compilador.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.Output">
      <summary vsli:raw="Gets the compiler output messages.">Obtém as mensagens de saída do compilador.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Specialized.StringCollection&quot; /&gt; that contains the output messages.">Um <see cref="T:System.Collections.Specialized.StringCollection" /> que contém as mensagens de saída.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.PathToAssembly">
      <summary vsli:raw="Gets or sets the path of the compiled assembly.">Obtém ou define o caminho do assembly compilado.</summary>
      <returns vsli:raw="The path of the assembly, or &lt;see langword=&quot;null&quot; /&gt; if the assembly was generated in memory.">O caminho do assembly ou <see langword="null" /> se o assembly foi gerado na memória.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.TempFiles">
      <summary vsli:raw="Gets or sets the temporary file collection to use.">Obtém ou define a coleção de arquivos temporários a ser usada.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; with which to manage and store references to intermediate files generated during compilation.">Um <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> com o qual gerenciar e armazenar as referências em arquivos intermediários gerados durante a compilação.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.Executor">
      <summary vsli:raw="Provides command execution functions for invoking compilers. This class cannot be inherited.">Fornece funções de execução do comando para invocar compiladores. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWait(System.String,System.CodeDom.Compiler.TempFileCollection)">
      <summary vsli:raw="Executes the command using the specified temporary files and waits for the call to return.">Executa o comando usando os arquivos temporários especificados e aguarda até a chamada retornar.</summary>
      <param name="cmd" vsli:raw="The command to execute.">O comando a ser executado.</param>
      <param name="tempFiles" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; with which to manage and store references to intermediate files generated during compilation.">Um <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> com o qual gerenciar e armazenar as referências em arquivos intermediários gerados durante a compilação.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.IntPtr,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary vsli:raw="Executes the specified command using the specified user token and temporary files, and waits for the call to return, storing output and error information from the compiler in the specified strings.">Executa o comando especificado usando o token do usuário indicado e os arquivos temporários, e aguarda o retorno da chamada, armazenando informações de saída e de erro do compilador nas cadeias de caracteres especificadas.</summary>
      <param name="userToken" vsli:raw="The token to start the compiler process with.">O token com o qual iniciar o processo do compilador.</param>
      <param name="cmd" vsli:raw="The command to execute.">O comando a ser executado.</param>
      <param name="tempFiles" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; with which to manage and store references to intermediate files generated during compilation.">Um <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> com o qual gerenciar e armazenar as referências em arquivos intermediários gerados durante a compilação.</param>
      <param name="outputName" vsli:raw="A reference to a string that will store the compiler's message output.">Uma referência a uma cadeia de caracteres que armazenará a saída da mensagem do compilador.</param>
      <param name="errorName" vsli:raw="A reference to a string that will store the name of the error or errors encountered.">Uma referência a uma cadeia de caracteres que armazenará o nome dos erros encontrados.</param>
      <returns vsli:raw="The return value from the compiler.">O valor retornado do compilador.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.IntPtr,System.String,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary vsli:raw="Executes the specified command using the specified user token, current directory, and temporary files; then waits for the call to return, storing output and error information from the compiler in the specified strings.">Executa o comando especificado usando o token do usuário, o diretório atual e os arquivos temporários indicados e aguarda o retorno da chamada, armazenando informações de saída e de erro do compilador nas cadeias de caracteres especificadas.</summary>
      <param name="userToken" vsli:raw="The token to start the compiler process with.">O token com o qual iniciar o processo do compilador.</param>
      <param name="cmd" vsli:raw="The command to execute.">O comando a ser executado.</param>
      <param name="currentDir" vsli:raw="The directory to start the process in.">O diretório no qual iniciar o processo.</param>
      <param name="tempFiles" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; with which to manage and store references to intermediate files generated during compilation.">Um <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> com o qual gerenciar e armazenar as referências em arquivos intermediários gerados durante a compilação.</param>
      <param name="outputName" vsli:raw="A reference to a string that will store the compiler's message output.">Uma referência a uma cadeia de caracteres que armazenará a saída da mensagem do compilador.</param>
      <param name="errorName" vsli:raw="A reference to a string that will store the name of the error or errors encountered.">Uma referência a uma cadeia de caracteres que armazenará o nome dos erros encontrados.</param>
      <returns vsli:raw="The return value from the compiler.">O valor retornado do compilador.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary vsli:raw="Executes the specified command using the specified temporary files and waits for the call to return, storing output and error information from the compiler in the specified strings.">Executa o comando especificado usando os arquivos temporários indicados e aguarda o retorno da chamada, armazenando informações de saída e de erro do compilador nas cadeias de caracteres especificadas.</summary>
      <param name="cmd" vsli:raw="The command to execute.">O comando a ser executado.</param>
      <param name="tempFiles" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; with which to manage and store references to intermediate files generated during compilation.">Um <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> com o qual gerenciar e armazenar as referências em arquivos intermediários gerados durante a compilação.</param>
      <param name="outputName" vsli:raw="A reference to a string that will store the compiler's message output.">Uma referência a uma cadeia de caracteres que armazenará a saída da mensagem do compilador.</param>
      <param name="errorName" vsli:raw="A reference to a string that will store the name of the error or errors encountered.">Uma referência a uma cadeia de caracteres que armazenará o nome dos erros encontrados.</param>
      <returns vsli:raw="The return value from the compiler.">O valor retornado do compilador.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.String,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary vsli:raw="Executes the specified command using the specified current directory and temporary files, and waits for the call to return, storing output and error information from the compiler in the specified strings.">Executa o comando especificado usando o diretório atual e os arquivos temporários indicados e aguarda o retorno da chamada, armazenando informações de saída e de erro do compilador nas cadeias de caracteres especificadas.</summary>
      <param name="cmd" vsli:raw="The command to execute.">O comando a ser executado.</param>
      <param name="currentDir" vsli:raw="The current directory.">O diretório atual.</param>
      <param name="tempFiles" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; with which to manage and store references to intermediate files generated during compilation.">Um <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> com o qual gerenciar e armazenar as referências em arquivos intermediários gerados durante a compilação.</param>
      <param name="outputName" vsli:raw="A reference to a string that will store the compiler's message output.">Uma referência a uma cadeia de caracteres que armazenará a saída da mensagem do compilador.</param>
      <param name="errorName" vsli:raw="A reference to a string that will store the name of the error or errors encountered.">Uma referência a uma cadeia de caracteres que armazenará o nome dos erros encontrados.</param>
      <returns vsli:raw="The return value from the compiler.">O valor retornado do compilador.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.GeneratorSupport">
      <summary vsli:raw="Defines identifiers used to determine whether a code generator supports certain types of code elements.">Define identificadores usados para determinar se um gerador de código é compatível com determinados tipos de elementos de código.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ArraysOfArrays">
      <summary vsli:raw="Indicates the generator supports arrays of arrays.">Indica que o gerador é compatível com matrizes de matrizes.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.AssemblyAttributes">
      <summary vsli:raw="Indicates the generator supports assembly attributes.">Indica que o gerador é compatível com atributos de assembly.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ChainedConstructorArguments">
      <summary vsli:raw="Indicates the generator supports chained constructor arguments.">Indica que o gerador é compatível com argumentos de construtor encadeados.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ComplexExpressions">
      <summary vsli:raw="Indicates the generator supports complex expressions.">Indica que o gerador é compatível com expressões complexas.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareDelegates">
      <summary vsli:raw="Indicates the generator supports delegate declarations.">Indica que o gerador é compatível com declarações delegadas.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareEnums">
      <summary vsli:raw="Indicates the generator supports enumeration declarations.">Indica que o gerador é compatível com declarações de enumeração.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareEvents">
      <summary vsli:raw="Indicates the generator supports event declarations.">Indica que o gerador é compatível com declarações de evento.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareIndexerProperties">
      <summary vsli:raw="Indicates the generator supports the declaration of indexer properties.">Indica que o gerador é compatível com declaração de propriedades de indexador.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareInterfaces">
      <summary vsli:raw="Indicates the generator supports interface declarations.">Indica que o gerador é compatível com declarações de interface.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareValueTypes">
      <summary vsli:raw="Indicates the generator supports value type declarations.">Indica que o gerador é compatível com declarações de tipo de valor.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.EntryPointMethod">
      <summary vsli:raw="Indicates the generator supports a program entry point method designation. This is used when building executables.">Indica que o gerador é compatível com uma designação de método de ponto de entrada de programa. Isso é usado ao compilar executáveis.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GenericTypeDeclaration">
      <summary vsli:raw="Indicates the generator supports generic type declarations.">Indica que o gerador é compatível com declarações de tipo genérico.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GenericTypeReference">
      <summary vsli:raw="Indicates the generator supports generic type references.">Indica que o gerador é compatível com referências de tipo genérico.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GotoStatements">
      <summary vsli:raw="Indicates the generator supports goto statements.">Indica que o gerador é compatível com instruções goto.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.MultidimensionalArrays">
      <summary vsli:raw="Indicates the generator supports referencing multidimensional arrays. Currently, the CodeDom cannot be used to instantiate multidimensional arrays.">Indica que o gerador é compatível com o referenciamento de matrizes multidimensionais. Atualmente, o CodeDom não pode ser usado para criar uma instância de matrizes multidimensionais.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.MultipleInterfaceMembers">
      <summary vsli:raw="Indicates the generator supports the declaration of members that implement multiple interfaces.">Indica que o gerador é compatível com declaração de membros que implementam várias interfaces.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.NestedTypes">
      <summary vsli:raw="Indicates the generator supports the declaration of nested types.">Indica que o gerador é compatível com declaração de tipos aninhados.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ParameterAttributes">
      <summary vsli:raw="Indicates the generator supports parameter attributes.">Indica que o gerador é compatível com atributos de parâmetro.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.PartialTypes">
      <summary vsli:raw="Indicates the generator supports partial type declarations.">Indica que o gerador é compatível com declarações de tipo parcial.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.PublicStaticMembers">
      <summary vsli:raw="Indicates the generator supports public static members.">Indica que o gerador é compatível com membros estáticos públicos.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ReferenceParameters">
      <summary vsli:raw="Indicates the generator supports reference and out parameters.">Indica a gerador é compatível com referência e parâmetros de saída.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.Resources">
      <summary vsli:raw="Indicates the generator supports compilation with .NET resources. These can be default resources compiled directly into an assembly, or resources referenced in a satellite assembly.">Indica que o gerador é compatível com a compilação com recursos do .NET Framework. Estes podem ser recursos padrão compilados diretamente em um assembly ou recursos referenciados em um assembly satélite.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ReturnTypeAttributes">
      <summary vsli:raw="Indicates the generator supports return type attribute declarations.">Indica que o gerador é compatível com declarações de atributo de tipo de retorno.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.StaticConstructors">
      <summary vsli:raw="Indicates the generator supports static constructors.">Indica que o gerador é compatível com construtores estáticos.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.TryCatchStatements">
      <summary vsli:raw="Indicates the generator supports &lt;c&gt;try-catch&lt;/c&gt; statements.">Indica que o gerador é compatível com instruções <see langword="try...catch" />.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.Win32Resources">
      <summary vsli:raw="Indicates the generator supports compilation with Win32 resources.">Indica que o gerador é compatível com a compilação com recursos do Win32.</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeCompiler">
      <summary vsli:raw="Defines an interface for invoking compilation of source code or a CodeDOM tree using a specific compiler.">Define uma interface para invocar a compilação do código-fonte ou uma árvore CodeDOM usando um compilador específico.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary vsli:raw="Compiles an assembly from the &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; tree contained in the specified &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt;, using the specified compiler settings.">Compila um assembly da árvore <see cref="N:System.CodeDom" /> contida no <see cref="T:System.CodeDom.CodeCompileUnit" /> especificado usando as configurações de compilador especificadas.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for compilation.">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica as configurações da compilação.</param>
      <param name="compilationUnit" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; that indicates the code to compile.">Um <see cref="T:System.CodeDom.CodeCompileUnit" /> que indica o código a compilar.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerResults" /> que indica os resultados da compilação.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary vsli:raw="Compiles an assembly based on the &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; trees contained in the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; objects, using the specified compiler settings.">Compila um assembly com base nas árvores <see cref="N:System.CodeDom" /> contidas na matriz especificada de objetos <see cref="T:System.CodeDom.CodeCompileUnit" />, usando as configurações de compilador especificadas.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for compilation.">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica as configurações da compilação.</param>
      <param name="compilationUnits" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; that indicates the code to compile.">Uma matriz do tipo <see cref="T:System.CodeDom.CodeCompileUnit" /> que indica o código a ser compilado.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerResults" /> que indica os resultados da compilação.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary vsli:raw="Compiles an assembly from the source code contained within the specified file, using the specified compiler settings.">Compila um assembly do código-fonte contido no arquivo especificado usando as configurações de compilador especificadas.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for compilation.">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica as configurações da compilação.</param>
      <param name="fileName" vsli:raw="The file name of the file that contains the source code to compile.">O nome do arquivo que contém o código-fonte a compilar.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerResults" /> que indica os resultados da compilação.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="Compiles an assembly from the source code contained within the specified files, using the specified compiler settings.">Compila um assembly do código-fonte contido nos arquivos especificados usando as configurações de compilador especificadas.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for compilation.">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica as configurações da compilação.</param>
      <param name="fileNames" vsli:raw="The file names of the files to compile.">Os nomes de arquivo dos arquivos a compilar.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerResults" /> que indica os resultados da compilação.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary vsli:raw="Compiles an assembly from the specified string containing source code, using the specified compiler settings.">Compila um assembly da cadeia de caracteres especificada que contém o código-fonte usando as configurações do compilador especificadas.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for compilation.">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica as configurações da compilação.</param>
      <param name="source" vsli:raw="The source code to compile.">O código-fonte a compilar.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerResults" /> que indica os resultados da compilação.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="Compiles an assembly from the specified array of strings containing source code, using the specified compiler settings.">Compila um assembly da matriz especificada de cadeias de caracteres que contém o código-fonte, usando as configurações do compilador especificadas.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for compilation.">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica as configurações da compilação.</param>
      <param name="sources" vsli:raw="The source code strings to compile.">As cadeias de caracteres de código-fonte a serem compiladas.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerResults" /> que indica os resultados da compilação.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeGenerator">
      <summary vsli:raw="Defines an interface for generating code.">Define uma interface para gerar o código.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.CreateEscapedIdentifier(System.String)">
      <summary vsli:raw="Creates an escaped identifier for the specified value.">Cria um identificador de escape para o valor especificado.</summary>
      <param name="value" vsli:raw="The string to create an escaped identifier for.">A cadeia de caracteres para a qual criar um identificador de escape.</param>
      <returns vsli:raw="The escaped identifier for the value.">O identificador de escape para o valor.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier(System.String)">
      <summary vsli:raw="Creates a valid identifier for the specified value.">Cria um identificador válido para o valor especificado.</summary>
      <param name="value" vsli:raw="The string to generate a valid identifier for.">A cadeia de caracteres para a qual gerar um identificador válido.</param>
      <returns vsli:raw="A valid identifier for the specified value.">Um identificador válido para o valor especificado.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) compilation unit and outputs it to the specified text writer using the specified options.">Gera código para a unidade de compilação CodeDOM (Modelo de Objeto do Documento de Código) especificada e gera-o como saída para o text writer especificado, usando as opções especificadas.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; to generate code for.">Um <see cref="T:System.CodeDom.CodeCompileUnit" /> para o qual o código deve ser gerado.</param>
      <param name="w" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to output code to.">O <see cref="T:System.IO.TextWriter" /> para o qual codificar a saída.</param>
      <param name="o" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">Um <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que indica as opções a serem usadas para gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) expression and outputs it to the specified text writer.">Gera código para a expressão CodeDOM (Modelo de Objeto do Documento de Código) especificada e gera-o como saída para o text writer especificado.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the expression to generate code for.">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica a expressão para a qual gerar código.</param>
      <param name="w" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to output code to.">O <see cref="T:System.IO.TextWriter" /> para o qual codificar a saída.</param>
      <param name="o" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">Um <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que indica as opções a serem usadas para gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) namespace and outputs it to the specified text writer using the specified options.">Gera código para o namespace CodeDOM (Modelo de Objeto do Documento de Código) especificado e gera-o como saída para o text writer especificado, usando as opções especificadas.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; that indicates the namespace to generate code for.">Um <see cref="T:System.CodeDom.CodeNamespace" /> que indica o namespace para o qual gerar código.</param>
      <param name="w" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to output code to.">O <see cref="T:System.IO.TextWriter" /> para o qual codificar a saída.</param>
      <param name="o" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">Um <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que indica as opções a serem usadas para gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) statement and outputs it to the specified text writer using the specified options.">Gera código para a instrução CodeDOM (Modelo de Objeto do Documento de Código) especificada e gera-o como saída para o text writer especificado, usando as opções especificadas.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the CodeDOM elements to translate.">Um <see cref="T:System.CodeDom.CodeStatement" /> que contém os elementos de CodeDOM a converter.</param>
      <param name="w" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to output code to.">O <see cref="T:System.IO.TextWriter" /> para o qual codificar a saída.</param>
      <param name="o" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">Um <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que indica as opções a serem usadas para gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) type declaration and outputs it to the specified text writer using the specified options.">Gera código para a declaração de tipo CodeDOM (Modelo de Objeto do Documento de Código) especificada e gera-a como saída para o text writer especificado, usando as opções especificadas.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; that indicates the type to generate code for.">Um <see cref="T:System.CodeDom.CodeTypeDeclaration" /> que indica o tipo para o qual gerar código.</param>
      <param name="w" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to output code to.">O <see cref="T:System.IO.TextWriter" /> para o qual codificar a saída.</param>
      <param name="o" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">Um <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que indica as opções a serem usadas para gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Gets the type indicated by the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt;.">Obtém o tipo indicado pelo <see cref="T:System.CodeDom.CodeTypeReference" /> especificado.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type to return.">Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo a retornar.</param>
      <returns vsli:raw="A text representation of the specified type for the language this code generator is designed to generate code in. For example, in Visual Basic, passing in type System.Int32 will return &quot;Integer&quot;.">Uma representação de texto do tipo especificado para o idioma em que este gerador de código é projetado para gerar código. Por exemplo, no Visual Basic, passar o tipo System.Int32 retornará "Integer".</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.IsValidIdentifier(System.String)">
      <summary vsli:raw="Gets a value that indicates whether the specified value is a valid identifier for the current language.">Obtém um valor que indica se o valor especificado é um identificador válido para a linguagem de programação atual.</summary>
      <param name="value" vsli:raw="The value to test for being a valid identifier.">O valor a ser testado por ser um identificador válido.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;value&quot; /&gt; parameter is a valid identifier; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o parâmetro <paramref name="value" /> é um identificador válido; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary vsli:raw="Gets a value indicating whether the generator provides support for the language features represented by the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.GeneratorSupport&quot; /&gt; object.">Obtém um valor que indica se o gerador dá suporte para os recursos de idioma representados pelo objeto <see cref="T:System.CodeDom.Compiler.GeneratorSupport" />.</summary>
      <param name="supports" vsli:raw="The capabilities to test the generator for.">As funcionalidades para as quais testar o gerador.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified capabilities are supported; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se os recursos especificados forem compatíveis; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.ValidateIdentifier(System.String)">
      <summary vsli:raw="Throws an exception if the specified value is not a valid identifier.">Gera uma exceção se o valor especificado não é um identificador válido.</summary>
      <param name="value" vsli:raw="The identifier to validate.">O identificador a ser validado.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The identifier is not valid.">O identificador não é válido.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeParser">
      <summary vsli:raw="Defines an interface for parsing code into a &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt;.">Define uma interface para a análise de código em um <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeParser.Parse(System.IO.TextReader)">
      <summary vsli:raw="When implemented in a derived class, compiles the specified text stream into a &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt;.">Quando implementado em uma classe derivada, compila o fluxo de texto especificado em um <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
      <param name="codeStream" vsli:raw="A &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; that can be used to read the code to be compiled.">Um <see cref="T:System.IO.TextReader" /> que pode ser usado para ler o código a ser compilado.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; that contains a representation of the parsed code.">Um <see cref="T:System.CodeDom.CodeCompileUnit" /> que contém uma representação do código analisado.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.LanguageOptions">
      <summary vsli:raw="Defines identifiers that indicate special features of a language.">Define identificadores que indicam recursos especiais de uma linguagem.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.LanguageOptions.CaseInsensitive">
      <summary vsli:raw="The language is case-insensitive.">A linguagem diferencia maiúsculas de minúsculas.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.LanguageOptions.None">
      <summary vsli:raw="The language has default characteristics.">A linguagem tem características padrão.</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.TempFileCollection">
      <summary vsli:raw="Represents a collection of temporary files.">Representa uma coleção de arquivos temporários.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; class with default values.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> com valores padrão.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; class using the specified temporary directory that is set to delete the temporary files after their generation and use, by default.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> usando o diretório temporário especificado que é definido para excluir os arquivos temporários após a geração e o uso, por padrão.</summary>
      <param name="tempDir" vsli:raw="A path to the temporary directory to use for storing the temporary files.">Um caminho para o diretório temporário a ser usado para armazenar os arquivos temporários.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor(System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; class using the specified temporary directory and specified value indicating whether to keep or delete the temporary files after their generation and use, by default.">Inicializa uma nova instância da classe <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> usando o diretório temporário especificado e o valor especificado, que indica se deseja manter ou excluir os arquivos temporários após a geração e o uso, por padrão.</summary>
      <param name="tempDir" vsli:raw="A path to the temporary directory to use for storing the temporary files.">Um caminho para o diretório temporário a ser usado para armazenar os arquivos temporários.</param>
      <param name="keepFiles" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the temporary files should be kept after use; &lt;see langword=&quot;false&quot; /&gt; if the temporary files should be deleted.">
        <see langword="true" /> se os arquivos temporários devem ser mantidos após o uso, <see langword="false" /> se os arquivos temporários devem ser excluídos.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddExtension(System.String)">
      <summary vsli:raw="Adds a file name with the specified file name extension to the collection.">Adiciona um nome de arquivo com a extensão de nome de arquivo especificada à coleção.</summary>
      <param name="fileExtension" vsli:raw="The file name extension for the auto-generated temporary file name to add to the collection.">A extensão de nome de arquivo para o nome do arquivo temporário gerado automaticamente a ser adicionado à coleção.</param>
      <returns vsli:raw="A file name with the specified extension that was just added to the collection.">Um nome de arquivo com a extensão especificada que acabou de ser adicionado à coleção.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddExtension(System.String,System.Boolean)">
      <summary vsli:raw="Adds a file name with the specified file name extension to the collection, using the specified value indicating whether the file should be deleted or retained.">Adiciona um nome de arquivo com a extensão de nome de arquivo especificada na coleção, usando o valor especificado que indica se o arquivo deve ser excluído ou retido.</summary>
      <param name="fileExtension" vsli:raw="The file name extension for the auto-generated temporary file name to add to the collection.">A extensão de nome de arquivo para o nome do arquivo temporário gerado automaticamente a ser adicionado à coleção.</param>
      <param name="keepFile" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the file should be kept after use; &lt;see langword=&quot;false&quot; /&gt; if the file should be deleted.">
        <see langword="true" /> se o arquivo deve ser mantido após o uso, <see langword="false" /> se o arquivo deve ser excluído.</param>
      <returns vsli:raw="A file name with the specified extension that was just added to the collection.">Um nome de arquivo com a extensão especificada que acabou de ser adicionado à coleção.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;fileExtension&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or an empty string.">
        <paramref name="fileExtension" /> é <see langword="null" /> ou é uma cadeia de caracteres vazia.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddFile(System.String,System.Boolean)">
      <summary vsli:raw="Adds the specified file to the collection, using the specified value indicating whether to keep the file after the collection is disposed or when the &lt;see cref=&quot;M:System.CodeDom.Compiler.TempFileCollection.Delete&quot; /&gt; method is called.">Adiciona o arquivo especificado na coleção, usando o valor especificado que indica se o arquivo deve ser mantido depois que a coleção é descartada ou quando o <see cref="M:System.CodeDom.Compiler.TempFileCollection.Delete" /> método é chamado.</summary>
      <param name="fileName" vsli:raw="The name of the file to add to the collection.">O nome do arquivo a ser adicionado à coleção.</param>
      <param name="keepFile" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the file should be kept after use; &lt;see langword=&quot;false&quot; /&gt; if the file should be deleted.">
        <see langword="true" /> se o arquivo deve ser mantido após o uso, <see langword="false" /> se o arquivo deve ser excluído.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;fileName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or an empty string.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;fileName&quot; /&gt; is a duplicate.">
        <paramref name="fileName" /> é <see langword="null" /> ou é uma cadeia de caracteres vazia.
- ou -
<paramref name="fileName" /> é um duplicado.</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.BasePath">
      <summary vsli:raw="Gets the full path to the base file name, without a file name extension, on the temporary directory path, that is used to generate temporary file names for the collection.">Obtém o caminho completo para o nome de arquivo base, sem uma extensão de nome de arquivo, no caminho de diretório temporário, usado para gerar nomes de arquivo temporários para a coleção.</summary>
      <returns vsli:raw="The full path to the base file name, without a file name extension, on the temporary directory path, that is used to generate temporary file names for the collection.">O caminho completo para o nome de arquivo base, sem uma extensão de nome de arquivo, no caminho de diretório temporário, usado para gerar nomes de arquivo temporários para a coleção.</returns>
      <exception cref="T:System.Security.SecurityException" vsli:raw="If the &lt;see cref=&quot;P:System.CodeDom.Compiler.TempFileCollection.BasePath&quot; /&gt; property has not been set or is set to &lt;see langword=&quot;null&quot; /&gt;, and &lt;see cref=&quot;F:System.Security.Permissions.FileIOPermissionAccess.AllAccess&quot; /&gt; is not granted for the temporary directory indicated by the &lt;see cref=&quot;P:System.CodeDom.Compiler.TempFileCollection.TempDir&quot; /&gt; property.">Se a propriedade <see cref="P:System.CodeDom.Compiler.TempFileCollection.BasePath" /> não tiver sido definida ou for definida como <see langword="null" /> e <see cref="F:System.Security.Permissions.FileIOPermissionAccess.AllAccess" /> não for concedido ao diretório temporário indicado pela propriedade <see cref="P:System.CodeDom.Compiler.TempFileCollection.TempDir" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.CopyTo(System.String[],System.Int32)">
      <summary vsli:raw="Copies the members of the collection to the specified string, beginning at the specified index.">Copia os membros da coleção para a cadeia de caracteres especificada, começando no índice especificado.</summary>
      <param name="fileNames" vsli:raw="The array of strings to copy to.">A matriz de cadeias de caracteres a ser copiada.</param>
      <param name="start" vsli:raw="The index of the array to begin copying to.">O índice da matriz em que a cópia deve começar.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.Count">
      <summary vsli:raw="Gets the number of files in the collection.">Obtém o número de arquivos na coleção.</summary>
      <returns vsli:raw="The number of files in the collection.">O número de arquivos na coleção.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Delete">
      <summary vsli:raw="Deletes the temporary files within this collection that were not marked to be kept.">Exclui os arquivos temporários dentro desta coleção que não estavam marcados para ser mantidos.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; and optionally releases the managed resources.">Libera os recursos não gerenciados usados pelo <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> e opcionalmente libera os recursos gerenciados.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">
        <see langword="true" /> para liberar recursos gerenciados e não gerenciados; <see langword="false" /> para liberar apenas recursos não gerenciados.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Finalize">
      <summary vsli:raw="Attempts to delete the temporary files before this object is reclaimed by garbage collection.">Tenta excluir os arquivos temporários antes que esse objeto seja recuperado pela coleta de lixo.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.GetEnumerator">
      <summary vsli:raw="Gets an enumerator that can enumerate the members of the collection.">Obtém um enumerador que pode enumerar os membros da coleção.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that contains the collection's members.">Um <see cref="T:System.Collections.IEnumerator" /> que contém os membros da coleção.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.KeepFiles">
      <summary vsli:raw="Gets or sets a value indicating whether to keep the files, by default, when the &lt;see cref=&quot;M:System.CodeDom.Compiler.TempFileCollection.Delete&quot; /&gt; method is called or the collection is disposed.">Obtém ou define um valor que indica se os arquivos devem ser mantidos, por padrão, quando o método <see cref="M:System.CodeDom.Compiler.TempFileCollection.Delete" /> é chamado ou a coleção é descartada.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the files should be kept; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />Se os arquivos devem ser mantidos; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the collection to an array, starting at the specified index of the target array.">Copia os elementos da coleção para uma matriz, começando no índice especificado na matriz de destino.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">O <see cref="T:System.Array" /> unidimensional que é o destino dos elementos copiados de <see cref="T:System.Collections.ICollection" />. O <see cref="T:System.Array" /> deve ter indexação com base em zero.</param>
      <param name="start" vsli:raw="The zero-based index in array at which copying begins.">O índice de base zero na matriz no qual a cópia começa.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the number of elements contained in the collection.">Obtém o número de elementos contidos na coleção.</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">O número de elementos contidos no <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the collection is synchronized (thread safe).">Obtém um valor que indica se o acesso à coleção é sincronizado (thread-safe).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> caso o acesso ao <see cref="T:System.Collections.ICollection" /> seja sincronizado (thread-safe); do contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the collection.">Obtém um objeto que pode ser usado para sincronizar o acesso à coleção.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Retorna um enumerador que itera em uma coleção.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">Um <see cref="T:System.Collections.IEnumerator" /> que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#IDisposable#Dispose">
      <summary vsli:raw="Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.">Realiza tarefas definidas pelo aplicativo associadas à liberação ou à redefinição de recursos não gerenciados.</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.TempDir">
      <summary vsli:raw="Gets the temporary directory to store the temporary files in.">Obtém o diretório temporário para armazenar os arquivos temporários.</summary>
      <returns vsli:raw="The temporary directory to store the temporary files in.">O diretório temporário no qual armazenar os arquivos temporários.</returns>
    </member>
    <member name="T:System.CodeDom.FieldDirection">
      <summary vsli:raw="Defines identifiers used to indicate the direction of parameter and argument declarations.">Define os identificadores usados para indicar a direção das declarações de parâmetro e argumento.</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.In">
      <summary vsli:raw="An incoming field.">Um campo de entrada.</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.Out">
      <summary vsli:raw="An outgoing field.">Um campo de saída.</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.Ref">
      <summary vsli:raw="A field by reference.">Um campo por referência.</summary>
    </member>
    <member name="T:System.CodeDom.MemberAttributes">
      <summary vsli:raw="Defines member attribute identifiers for class members.">Define os identificadores de atributo de membro para membros de classe.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Abstract">
      <summary vsli:raw="An abstract member.">Um membro abstrato.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.AccessMask">
      <summary vsli:raw="An access mask.">Uma máscara de acesso.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Assembly">
      <summary vsli:raw="A member that is accessible to any class within the same assembly.">Um membro que é acessível a qualquer classe dentro do mesmo assembly.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Const">
      <summary vsli:raw="A constant member.">Um membro constante.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Family">
      <summary vsli:raw="A member that is accessible within the family of its class and derived classes.">Um membro que é acessível dentro da família de sua classe e classes derivadas.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.FamilyAndAssembly">
      <summary vsli:raw="A member that is accessible within its class, and derived classes in the same assembly.">Um membro que é acessível dentro de sua classe e classes derivadas no mesmo assembly.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.FamilyOrAssembly">
      <summary vsli:raw="A member that is accessible within its class, its derived classes in any assembly, and any class in the same assembly.">Um membro que é acessível dentro de sua classe, suas classes derivadas em qualquer assembly e qualquer classe no mesmo assembly.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Final">
      <summary vsli:raw="A member that cannot be overridden in a derived class.">Um membro que não pode ser substituído em uma classe derivada.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.New">
      <summary vsli:raw="A new member.">Um novo membro.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Overloaded">
      <summary vsli:raw="An overloaded member. Some languages, such as Visual Basic, require overloaded members to be explicitly indicated.">Um membro sobrecarregado. Algumas linguagens, como Visual Basic, exigem que os membros sobrecarregados sejam indicados explicitamente.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Override">
      <summary vsli:raw="A member that overrides a base class member.">Um membro que substitui um membro da classe base.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Private">
      <summary vsli:raw="A private member.">Um membro privado.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Public">
      <summary vsli:raw="A public member.">Um membro público.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.ScopeMask">
      <summary vsli:raw="A scope mask.">Uma máscara de escopo.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Static">
      <summary vsli:raw="A static member. In Visual Basic, this is equivalent to the &lt;see langword=&quot;Shared&quot; /&gt; keyword.">Um membro estático. No Visual Basic, isso é equivalente à palavra-chave <see langword="Shared" />.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.VTableMask">
      <summary vsli:raw="A VTable mask.">Uma máscara VTable.</summary>
    </member>
  </members>
</doc>
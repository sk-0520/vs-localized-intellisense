<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Xaml</name>
  </assembly>
  <members>
    <member name="T:System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute">
      <summary vsli:raw="Notates types for legacy reporting of XAML markup extension characteristics.">標示 XAML 標記延伸特性的舊版報告型別。</summary>
    </member>
    <member name="M:System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute" /> 類別的新執行個體。</summary>
      <param name="type" vsli:raw="The return type that this attribute reports.">這個屬性所報告的傳回型別。</param>
    </member>
    <member name="P:System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute.Type">
      <summary vsli:raw="Gets or sets the return type that this attribute reports.">取得或設定這個屬性所報告的傳回型別。</summary>
      <returns vsli:raw="The return type that this attribute reports.">這個屬性所報告的傳回型別。</returns>
    </member>
    <member name="T:System.Windows.Markup.AmbientAttribute">
      <summary vsli:raw="Specifies that a property or type should be treated as ambient. The ambient concept relates to how XAML processors determine type owners of members.">指定屬性或型別應該視為環境屬性。 環境概念與 XAML 處理器如何判斷成員類別擁有者有關。</summary>
    </member>
    <member name="M:System.Windows.Markup.AmbientAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.AmbientAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.AmbientAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Windows.Markup.ArrayExtension">
      <summary vsli:raw="Implements &lt;see langword=&quot;x:Array&quot; /&gt; support for .NET XAML Services.">實作 .NET Framework XAML 服務的 <see langword="x:Array" /> 支援。</summary>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.ArrayExtension&quot; /&gt; class. This creates an empty array.">初始化 <see cref="T:System.Windows.Markup.ArrayExtension" /> 類別的新執行個體。 這會建立空陣列。</summary>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.#ctor(System.Array)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.ArrayExtension&quot; /&gt; class based on the provided raw array.">根據提供的原始陣列初始化 <see cref="T:System.Windows.Markup.ArrayExtension" /> 類別的新執行個體。</summary>
      <param name="elements" vsli:raw="The array content that populates the created array.">填入已建立陣列的陣列內容。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;elements&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="elements" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.ArrayExtension&quot; /&gt; class and initializes the type of the array.">初始化 <see cref="T:System.Windows.Markup.ArrayExtension" /> 類別的新執行個體，並初始化陣列的類型。</summary>
      <param name="arrayType" vsli:raw="The object type of the new array.">新陣列的物件類型。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;arrayType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="arrayType" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.AddChild(System.Object)">
      <summary vsli:raw="Appends the supplied object to the end of the array.">將提供的物件附加至陣列的結尾。</summary>
      <param name="value" vsli:raw="The object to add to the end of the array.">要加入至陣列結尾的物件。</param>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.AddText(System.String)">
      <summary vsli:raw="Adds a text node as a new array item.">加入文字節點作為新的陣列項目。</summary>
      <param name="text" vsli:raw="The text to add to the end of the array.">要加入陣列結尾處的文字。</param>
    </member>
    <member name="P:System.Windows.Markup.ArrayExtension.Items">
      <summary vsli:raw="Gets the contents of the array. Settable in XAML through XAML collection syntax.">取得陣列的內容。 可在 XAML 中透過 XAML 集合語法設定。</summary>
      <returns vsli:raw="The array contents.">陣列的內容。</returns>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.ProvideValue(System.IServiceProvider)">
      <summary vsli:raw="Returns an array that is sized to the number of objects supplied in the &lt;see cref=&quot;P:System.Windows.Markup.ArrayExtension.Items&quot; /&gt; values.">傳回陣列，這個陣列的大小調整為 <see cref="P:System.Windows.Markup.ArrayExtension.Items" /> 值中所提供的物件數。</summary>
      <param name="serviceProvider" vsli:raw="An object that can provide services for the markup extension.">可以為標記延伸提供服務的物件。</param>
      <returns vsli:raw="The created array, or null.">建立的陣列或 null。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Processed an array that did not provide a valid &lt;see cref=&quot;P:System.Windows.Markup.ArrayExtension.Type&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; There is a type mismatch between the declared &lt;see cref=&quot;P:System.Windows.Markup.ArrayExtension.Type&quot; /&gt; of the array and one or more of its &lt;see cref=&quot;P:System.Windows.Markup.ArrayExtension.Items&quot; /&gt; values.">已處理未提供有效 <see cref="P:System.Windows.Markup.ArrayExtension.Type" /> 的陣列。
-或-
陣列的已宣告 <see cref="P:System.Windows.Markup.ArrayExtension.Type" /> 與其一個或多個 <see cref="P:System.Windows.Markup.ArrayExtension.Items" /> 值之間的類型不符。</exception>
    </member>
    <member name="P:System.Windows.Markup.ArrayExtension.Type">
      <summary vsli:raw="Gets or sets the type of array to be created when calling &lt;see cref=&quot;M:System.Windows.Markup.ArrayExtension.ProvideValue(System.IServiceProvider)&quot; /&gt;.">取得或設定呼叫 <see cref="M:System.Windows.Markup.ArrayExtension.ProvideValue(System.IServiceProvider)" /> 時所要建立的陣列類型。</summary>
      <returns vsli:raw="The type of the array.">陣列的類型。</returns>
    </member>
    <member name="T:System.Windows.Markup.ConstructorArgumentAttribute">
      <summary vsli:raw="Specifies that an object can be initialized by using a non-parameterless constructor syntax, and that a property of the specified name supplies construction information.  This information is primarily for XAML serialization.">指定可使用非無參數建構函式語法而初始化的物件，以及所指定名稱的屬性會提供建構資訊。  這項資訊主要供 XAML 序列化之用。</summary>
    </member>
    <member name="M:System.Windows.Markup.ConstructorArgumentAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.ConstructorArgumentAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.ConstructorArgumentAttribute" /> 類別的新執行個體。</summary>
      <param name="argumentName" vsli:raw="The name of the constructor that will initialize the associated property.">將初始化相關聯屬性之建構函式的名稱。</param>
    </member>
    <member name="P:System.Windows.Markup.ConstructorArgumentAttribute.ArgumentName">
      <summary vsli:raw="Gets the name parameter of the constructor that will initialize the associated property.">取得將初始化相關聯屬性的建構函式名稱參數。</summary>
      <returns vsli:raw="The name of the constructor. Assuming CLR backing, this corresponds to the &lt;see cref=&quot;P:System.Reflection.ParameterInfo.Name&quot; /&gt; of the relevant constructor parameter.">建構函式名稱 假設 CLR 支援，這會對應到相關建構函式參數的 <see cref="P:System.Reflection.ParameterInfo.Name" />。</returns>
    </member>
    <member name="T:System.Windows.Markup.ContentPropertyAttribute">
      <summary vsli:raw="Indicates which property of a type is the XAML content property. A XAML processor uses this information when processing XAML child elements of XAML representations of the attributed type.">指出類型的哪一個屬性是 XAML 內容屬性。 XAML 處理器會在處理屬性化類型之 XAML 表示的 XAML 子項目時，使用這項資訊。</summary>
    </member>
    <member name="M:System.Windows.Markup.ContentPropertyAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.ContentPropertyAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.ContentPropertyAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Windows.Markup.ContentPropertyAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.ContentPropertyAttribute&quot; /&gt; class, by using the specified name.">使用指定的名稱，初始化 <see cref="T:System.Windows.Markup.ContentPropertyAttribute" /> 類別的新執行個體。</summary>
      <param name="name" vsli:raw="The property name for the property that is the content property.">表示內容屬性之屬性的屬性名稱。</param>
    </member>
    <member name="P:System.Windows.Markup.ContentPropertyAttribute.Name">
      <summary vsli:raw="Gets the name of the property that is the content property.">取得內容屬性之屬性的名稱。</summary>
      <returns vsli:raw="The name of the property that is the content property.">內容屬性之屬性的名稱。</returns>
    </member>
    <member name="T:System.Windows.Markup.ContentWrapperAttribute">
      <summary vsli:raw="Specifies one or more types on the associated collection type that will be used to wrap foreign content.">在將用來包裝外部內容的相關聯集合類型上，指定一種或多種類型。</summary>
    </member>
    <member name="M:System.Windows.Markup.ContentWrapperAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.ContentWrapperAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.ContentWrapperAttribute" /> 類別的新執行個體。</summary>
      <param name="contentWrapper" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; that is declared as a content wrapper for the collection type.">宣告為集合類型之內容包裝函式的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Windows.Markup.ContentWrapperAttribute.ContentWrapper">
      <summary vsli:raw="Gets the type that is declared as a content wrapper for the collection type associated with this attribute.">取得類型，這個類型宣告為與這個屬性相關聯之集合類型的內容包裝函式。</summary>
      <returns vsli:raw="The type that is declared as a content wrapper for the collection type.">宣告為集合類型之內容包裝函式的類型。</returns>
    </member>
    <member name="M:System.Windows.Markup.ContentWrapperAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Windows.Markup.ContentWrapperAttribute&quot; /&gt; is equivalent this &lt;see cref=&quot;T:System.Windows.Markup.ContentWrapperAttribute&quot; /&gt; by comparing the &lt;see cref=&quot;P:System.Windows.Markup.ContentWrapperAttribute.ContentWrapper&quot; /&gt; properties.">比較 <see cref="P:System.Windows.Markup.ContentWrapperAttribute.ContentWrapper" /> 屬性，來判斷指定的 <see cref="T:System.Windows.Markup.ContentWrapperAttribute" /> 是否等於這個 <see cref="T:System.Windows.Markup.ContentWrapperAttribute" />。</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Windows.Markup.ContentWrapperAttribute&quot; /&gt; to compare.">要比較的 <see cref="T:System.Windows.Markup.ContentWrapperAttribute" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;P:System.Windows.Markup.ContentWrapperAttribute.ContentWrapper&quot; /&gt; properties are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="P:System.Windows.Markup.ContentWrapperAttribute.ContentWrapper" /> 屬性相等，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Markup.ContentWrapperAttribute.GetHashCode">
      <summary vsli:raw="Gets a hash code for this instance.">取得這個執行個體的雜湊碼。</summary>
      <returns vsli:raw="An integer hash code.">整數雜湊碼。</returns>
    </member>
    <member name="P:System.Windows.Markup.ContentWrapperAttribute.TypeId">
      <summary vsli:raw="Gets a unique identifier for this attribute.">取得這個屬性的唯一識別項。</summary>
      <returns vsli:raw="A unique identifier for the attribute.">這個屬性的唯一識別項。</returns>
    </member>
    <member name="T:System.Windows.Markup.DateTimeValueSerializer">
      <summary vsli:raw="Converts instances of &lt;see cref=&quot;T:System.String&quot; /&gt; to and from instances of &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">將 <see cref="T:System.String" /> 執行個體轉換為 <see cref="T:System.DateTime" /> 執行個體，以及反向操作。</summary>
    </member>
    <member name="M:System.Windows.Markup.DateTimeValueSerializer.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.DateTimeValueSerializer&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.DateTimeValueSerializer" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Windows.Markup.DateTimeValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Determines if the specified &lt;see cref=&quot;T:System.String&quot; /&gt; can be convert to an instance of &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">判斷指定的 <see cref="T:System.String" /> 是否可以轉換為 <see cref="T:System.DateTime" /> 的執行個體。</summary>
      <param name="value" vsli:raw="The string to evaluate for conversion.">要評估以進行轉換的字串。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">用於轉換的內容資訊。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value can be converted; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以轉換值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Markup.DateTimeValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Determines if the specified object can be converted to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">判斷指定的物件是否可以轉換為 <see cref="T:System.String" />。</summary>
      <param name="value" vsli:raw="The object to evaluate for conversion.">要評估以進行轉換的物件。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">用於轉換的內容資訊。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; can be converted into a &lt;see cref=&quot;T:System.String&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="value" /> 可以轉換為 <see cref="T:System.String" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Markup.DateTimeValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.String&quot; /&gt; into a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">將 <see cref="T:System.String" /> 轉換成 <see cref="T:System.DateTime" />。</summary>
      <param name="value" vsli:raw="The string to convert into a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">要轉換成 <see cref="T:System.DateTime" /> 的字串。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">用於轉換的內容資訊。</param>
      <returns vsli:raw="A new instance of &lt;see cref=&quot;T:System.DateTime&quot; /&gt; based on the supplied &lt;paramref name=&quot;value&quot; /&gt;.">根據所提供 <paramref name="value" /> 的新 <see cref="T:System.DateTime" /> 執行個體。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Windows.Markup.DateTimeValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Converts an instance of &lt;see cref=&quot;T:System.DateTime&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">將 <see cref="T:System.DateTime" /> 的執行個體轉換成 <see cref="T:System.String" />。</summary>
      <param name="value" vsli:raw="The object to convert into a string.">要轉換為字串的物件。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">用於轉換的內容資訊。</param>
      <returns vsli:raw="A string representation of the specified &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">指定之 <see cref="T:System.DateTime" /> 的字串表示。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; or is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> 不是 <see cref="T:System.DateTime" />，或為 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Windows.Markup.DependsOnAttribute">
      <summary vsli:raw="Indicates that the attributed property is dependent on the value of another property.">表示相屬性化 (Attribute) 屬性 (Property) 取決於其他屬性 (Property) 的值。</summary>
    </member>
    <member name="M:System.Windows.Markup.DependsOnAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.DependsOnAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.DependsOnAttribute" /> 類別的新執行個體。</summary>
      <param name="name" vsli:raw="The property that the property associated with this &lt;see cref=&quot;T:System.Windows.Markup.DependsOnAttribute&quot; /&gt; depends on.">與這個 <see cref="T:System.Windows.Markup.DependsOnAttribute" /> 相關聯之屬性相依的屬性。</param>
    </member>
    <member name="P:System.Windows.Markup.DependsOnAttribute.Name">
      <summary vsli:raw="Gets the name of the related property declared in this &lt;see cref=&quot;T:System.Windows.Markup.DependsOnAttribute&quot; /&gt;.">取得這個 <see cref="T:System.Windows.Markup.DependsOnAttribute" /> 中宣告之相關屬性的名稱。</summary>
      <returns vsli:raw="The name of the related property.">相關屬性的名稱。</returns>
    </member>
    <member name="P:System.Windows.Markup.DependsOnAttribute.TypeId">
      <summary vsli:raw="Gets a unique identifier for this &lt;see cref=&quot;T:System.Windows.Markup.DependsOnAttribute&quot; /&gt;.">取得這個 <see cref="T:System.Windows.Markup.DependsOnAttribute" />的唯一識別項。</summary>
      <returns vsli:raw="The unique identifier.">唯一的識別項。</returns>
    </member>
    <member name="T:System.Windows.Markup.DictionaryKeyPropertyAttribute">
      <summary vsli:raw="Specifies a property of the associated class that provides the implicit key value. Implicit keys are used for keys rather than explicit &lt;see langword=&quot;x:Key&quot; /&gt; attributes defined in XAML for an item in &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; collections.">指定相關聯類別的屬性，這個屬性會提供隱含索引鍵值。 隱含索引鍵會用來做為索引鍵，而不是做為定義於 <see cref="T:System.Collections.IDictionary" /> 集合項目之 XAML 中的隱含 <see langword="x:Key" /> 屬性。</summary>
    </member>
    <member name="M:System.Windows.Markup.DictionaryKeyPropertyAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.DictionaryKeyPropertyAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.DictionaryKeyPropertyAttribute" /> 類別的新執行個體。</summary>
      <param name="name" vsli:raw="The name of the property that provides the implicit key value.">提供隱含索引鍵值之屬性的名稱。</param>
    </member>
    <member name="P:System.Windows.Markup.DictionaryKeyPropertyAttribute.Name">
      <summary vsli:raw="Gets the name of the property that provides the implicit key value.">取得提供隱含索引鍵值之屬性的名稱。</summary>
      <returns vsli:raw="The name of the property that provides the implicit key value.">提供隱含索引鍵值之屬性的名稱。</returns>
    </member>
    <member name="T:System.Windows.Markup.IComponentConnector">
      <summary vsli:raw="Provides markup compile and tools support for named XAML elements and for attaching event handlers to them.">對具名 XAML 項目提供標記編譯及工具支援，以便將事件處理常式附加至這些項目。</summary>
    </member>
    <member name="M:System.Windows.Markup.IComponentConnector.Connect(System.Int32,System.Object)">
      <summary vsli:raw="Attaches events and names to compiled content.">附加事件和名稱至編譯內容。</summary>
      <param name="connectionId" vsli:raw="An identifier token to distinguish calls.">要區分呼叫的識別項語彙基元。</param>
      <param name="target" vsli:raw="The target to connect events and names to.">要連接事件和名稱的目標。</param>
    </member>
    <member name="M:System.Windows.Markup.IComponentConnector.InitializeComponent">
      <summary vsli:raw="Loads the compiled page of a component.">載入元件之編譯過的頁面。</summary>
    </member>
    <member name="T:System.Windows.Markup.INameScope">
      <summary vsli:raw="Defines a contract for how names of elements should be accessed within a particular XAML namescope, and how to enforce uniqueness of names within that XAML namescope.">定義以下情況的合約：在特定 XAML 名稱範圍中存取項目名稱的方式，以及在該 XAML 名稱範圍中強制執行名稱唯一性的方式。</summary>
    </member>
    <member name="M:System.Windows.Markup.INameScope.FindName(System.String)">
      <summary vsli:raw="Returns an object that has the provided identifying name.">傳回具有所提供之識別名稱的物件。</summary>
      <param name="name" vsli:raw="The name identifier for the object being requested.">請求之物件的名稱識別項。</param>
      <returns vsli:raw="The object, if found. Returns &lt;see langword=&quot;null&quot; /&gt; if no object of that name was found.">如果找到，則傳回該物件。 如果找不到該名稱的物件，則傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Windows.Markup.INameScope.RegisterName(System.String,System.Object)">
      <summary vsli:raw="Registers the provided name into the current XAML namescope.">將所提供的名稱註冊到目前的 XAML 名稱範圍中。</summary>
      <param name="name" vsli:raw="The name to register.">要註冊的名稱。</param>
      <param name="scopedElement" vsli:raw="The specific element that the provided &lt;paramref name=&quot;name&quot; /&gt; refers to.">提供的 <paramref name="name" /> 所參考的特定項目。</param>
    </member>
    <member name="M:System.Windows.Markup.INameScope.UnregisterName(System.String)">
      <summary vsli:raw="Unregisters the provided name from the current XAML namescope.">從目前的 XAML 名稱範圍移除註冊所提供的名稱。</summary>
      <param name="name" vsli:raw="The name to unregister.">要移除註冊的名稱。</param>
    </member>
    <member name="T:System.Windows.Markup.INameScopeDictionary">
      <summary vsli:raw="Unifies enumerable, collection, and dictionary support that are useful for exposing a dictionary of names in a XAML namescope.">整合可列舉型別、集合和字典支援，這些支援在 XAML 名稱範圍中公開名稱的字典時十分有用。</summary>
    </member>
    <member name="T:System.Windows.Markup.IProvideValueTarget">
      <summary vsli:raw="Represents a service that reports situational object-property relationships for markup extension evaluation.">表示可報告情境式物件-屬性關聯性來評估標記延伸的服務。</summary>
    </member>
    <member name="P:System.Windows.Markup.IProvideValueTarget.TargetObject">
      <summary vsli:raw="Gets the target object being reported.">取得正在報告的目標物件。</summary>
      <returns vsli:raw="The target object being reported.">正在報告的目標物件。</returns>
    </member>
    <member name="P:System.Windows.Markup.IProvideValueTarget.TargetProperty">
      <summary vsli:raw="Gets an identifier for the target property being reported.">取得所報告之目標屬性的識別項。</summary>
      <returns vsli:raw="An identifier for the target property being reported.">所報告之目標屬性的識別項。</returns>
    </member>
    <member name="T:System.Windows.Markup.IQueryAmbient">
      <summary vsli:raw="Queries for whether a specified property should be treated as ambient in the current scope.">查詢是否應該將指定的屬性視為目前範圍中的環境屬性。</summary>
    </member>
    <member name="M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)">
      <summary vsli:raw="Queries for whether a specified named property can be considered ambient in the current scope.">查詢是否可以將指定的具名屬性視為目前範圍中的環境屬性。</summary>
      <param name="propertyName" vsli:raw="The name of the property to check for ambience state.">要檢查環境狀態之屬性的名稱。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the requested property can be considered ambient; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可將所要求的屬性視為環境屬性則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Windows.Markup.IUriContext">
      <summary vsli:raw="Represents a service that can use application context to resolve a provided relative URI to an absolute URI.">表示可以使用應用程式內容來解析所提供相對 URI 為絕對 URI 的服務。</summary>
    </member>
    <member name="P:System.Windows.Markup.IUriContext.BaseUri">
      <summary vsli:raw="Gets or sets the base URI of the current application context.">取得或設定目前應用程式內容的基底 URI。</summary>
      <returns vsli:raw="The base URI of the application context.">應用程式內容的基底 URI。</returns>
    </member>
    <member name="T:System.Windows.Markup.IValueSerializerContext">
      <summary vsli:raw="Defines a context that is provided to a &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt;. The context can be used to enable special cases of serialization or different modes of serialization.">定義提供給 <see cref="T:System.Windows.Markup.ValueSerializer" /> 的內容。 此內容可用於啟用序列化的特殊狀況或序列化的不同模式。</summary>
    </member>
    <member name="M:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; for the given property descriptor.">取得指定之屬性描述項的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</summary>
      <param name="descriptor" vsli:raw="The descriptor of the property being converted.">正在轉換之屬性的描述項。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; capable of serializing the specified property.">可以序列化指定之屬性的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</returns>
    </member>
    <member name="M:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor(System.Type)">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; associated with the specified type.">取得與指定之型別相關聯的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</summary>
      <param name="type" vsli:raw="The type of the value being converted.">正在轉換之值的型別。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; capable of serializing the specified type.">可以序列化指定之型別的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</returns>
    </member>
    <member name="T:System.Windows.Markup.IXamlTypeResolver">
      <summary vsli:raw="Represents a service that resolves from named elements in XAML markup to the appropriate CLR type.">表示可將 XAML 標記中的具名項目解析為適當 CLR 型別的服務。</summary>
    </member>
    <member name="M:System.Windows.Markup.IXamlTypeResolver.Resolve(System.String)">
      <summary vsli:raw="Resolves a named XAML type to the corresponding CLR &lt;see cref=&quot;T:System.Type&quot; /&gt;.">將具名 XAML 型別解析為對應的 CLR <see cref="T:System.Type" />。</summary>
      <param name="qualifiedTypeName" vsli:raw="The XAML type name to resolve. The type name is optionally qualified by the prefix for a XML namespace. Otherwise the current default XML namespace is assumed.">要解析的 XAML 型別名稱。 型別名稱可選擇性地以 XML 命名空間的前置詞限定， 否則會假設為目前的預設 XML 命名空間。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; that &lt;paramref name=&quot;qualifiedTypeName&quot; /&gt; resolves to.">
        <paramref name="qualifiedTypeName" /> 的解析目標 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Windows.Markup.MarkupExtension">
      <summary vsli:raw="Provides a base class for XAML markup extension implementations that can be supported by .NET XAML Services and other XAML readers and XAML writers.">為 .NET Framework XAML 服務及其他 XAML 讀取器和 XAML 寫入器可支援的 XAML 標記延伸實作，提供基底類別。</summary>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtension.#ctor">
      <summary vsli:raw="Initializes a new instance of a class derived from &lt;see cref=&quot;T:System.Windows.Markup.MarkupExtension&quot; /&gt;.">初始化衍生自 <see cref="T:System.Windows.Markup.MarkupExtension" /> 之類別的新執行個體。</summary>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
      <summary vsli:raw="When implemented in a derived class, returns an object that is provided as the value of the target property for this markup extension.">在衍生類別中實作時，傳回物件，這個物件提供為這個標記延伸的目標屬性值。</summary>
      <param name="serviceProvider" vsli:raw="A service provider helper that can provide services for the markup extension.">可以為標記延伸提供服務的服務提供者 Helper。</param>
      <returns vsli:raw="The object value to set on the property where the extension is applied.">要在套用延伸的屬性上設定的物件值。</returns>
    </member>
    <member name="T:System.Windows.Markup.MarkupExtensionBracketCharactersAttribute">
      <summary vsli:raw="Reports the bracket characters that a markup extension can return.">回報標記延伸可傳回的括弧字元。</summary>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtensionBracketCharactersAttribute.#ctor(System.Char,System.Char)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.MarkupExtensionBracketCharactersAttribute&quot; /&gt; class using the provided characters.">使用提供的字元，初始化 <see cref="T:System.Windows.Markup.MarkupExtensionBracketCharactersAttribute" /> 類別的新執行個體。</summary>
      <param name="openingBracket" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; that defines the opening bracket character.">
        <see cref="T:System.Char" />，會定義左括弧字元。</param>
      <param name="closingBracket" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; that defines the closing bracket character.">
        <see cref="T:System.Char" />，會定義右括弧字元。</param>
    </member>
    <member name="P:System.Windows.Markup.MarkupExtensionBracketCharactersAttribute.ClosingBracket">
      <summary vsli:raw="Specifies the character to be used as the closing delimiter in a &lt;see cref=&quot;T:System.Windows.Markup.MarkupExtension&quot; /&gt;.">指定 <see cref="T:System.Windows.Markup.MarkupExtension" /> 中要用來做為結尾分隔符號的字元。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; representing the character.">
        <see cref="T:System.Char" />，表示字元。</returns>
    </member>
    <member name="P:System.Windows.Markup.MarkupExtensionBracketCharactersAttribute.OpeningBracket">
      <summary vsli:raw="Specifies the character to be used as the opening delimiter in a &lt;see cref=&quot;T:System.Windows.Markup.MarkupExtension&quot; /&gt;.">指定 <see cref="T:System.Windows.Markup.MarkupExtension" /> 中要用來做為左分隔符號的字元。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; representing the character.">
        <see cref="T:System.Char" />，表示字元。</returns>
    </member>
    <member name="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute">
      <summary vsli:raw="Reports the type that a markup extension can return.">報告標記延伸可以傳回的型別。</summary>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute&quot; /&gt; class using the provided &lt;see cref=&quot;T:System.Type&quot; /&gt;.">使用所提供的 <see cref="T:System.Type" />，初始化 <see cref="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute" /> 類別的新執行個體。</summary>
      <param name="returnType" vsli:raw="The return type that this attribute reports.">這個屬性所報告的傳回型別。</param>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.#ctor(System.Type,System.Type)">
      <summary vsli:raw="Deprecated; do not use.">已取代；請勿使用。</summary>
      <param name="returnType" vsli:raw="The return type that this  .NET Framework attribute reports.">這個 .NET Framework 屬性 回報的傳回型別。</param>
      <param name="expressionType" vsli:raw="Deprecated; do not use.">已取代；請勿使用。</param>
    </member>
    <member name="P:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.ExpressionType">
      <summary vsli:raw="Deprecated; do not use.">已取代；請勿使用。</summary>
      <returns vsli:raw="Deprecated; do not use.">已取代；請勿使用。</returns>
    </member>
    <member name="P:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.ReturnType">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Windows.Markup.MarkupExtension&quot; /&gt; return type that this .NET Framework attribute reports.">取得這個 .NET Framework 屬性 回報的 <see cref="T:System.Windows.Markup.MarkupExtension" /> 傳回型別。</summary>
      <returns vsli:raw="The type-safe return type of the specific &lt;see cref=&quot;M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)&quot; /&gt; implementation of the markup extension where the &lt;see cref=&quot;T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute&quot; /&gt; .NET Framework attribute is applied.">套用之標記延伸<see cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" /><see cref="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute" /> .NET Framework 屬性的特定執行的型別安全傳回型別。</returns>
    </member>
    <member name="T:System.Windows.Markup.MemberDefinition">
      <summary vsli:raw="Provides the base class that is used for a markup technique of defining members of a class in declarative XAML.">提供可在宣告式 XAML 中定義類別成員之標記技術所使用的基底類別。</summary>
    </member>
    <member name="M:System.Windows.Markup.MemberDefinition.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.MemberDefinition&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.MemberDefinition" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Windows.Markup.MemberDefinition.Name">
      <summary vsli:raw="When implemented in a derived class, gets or sets the name of the member to define.">在衍生類別中實作時，取得或設定要定義的成員名稱。</summary>
      <returns vsli:raw="The name of the member to define.">要定義的成員名稱。</returns>
    </member>
    <member name="T:System.Windows.Markup.NameReferenceConverter">
      <summary vsli:raw="Provides type conversion to convert a string name into an object reference to the object with that name, or to return the name of an object from the object graph.">提供型別轉換，以將字串名稱轉換為具有該名稱之物件的物件參考，或是從物件圖形傳回物件的名稱。</summary>
    </member>
    <member name="M:System.Windows.Markup.NameReferenceConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.NameReferenceConverter&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.NameReferenceConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Windows.Markup.NameReferenceConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert an object of one type to another object.">傳回值，這個值指出這個轉換子是否可以將某個型別的物件轉換為其他物件。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert from.">
        <see cref="T:System.Type" />，表示您要轉換的來源類型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個轉換子可以執行轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Markup.NameReferenceConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value that indicates whether the converter can convert an object to the specified destination type.">傳回值，這個值表示轉換子是否可以將物件轉換為指定的目的型別。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType" vsli:raw="The type to convert to.">要轉換的目標類型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個轉換器可以執行轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Markup.NameReferenceConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the provided object to another object, using the specified context and culture information.">使用指定的內容和文化特性 (Culture) 資訊，將提供的物件轉換為其他物件。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">要用作目前文化特性的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value" vsli:raw="The reference name string to convert.">要轉換的參考名稱字串。</param>
      <returns vsli:raw="The returned object, which is potentially any object that is type-mapped in the relevant backing assemblies and capable of being declared in XAML with a XAML name reference.">傳回的物件，可能是已在相關支援組件中完成型別對應且能夠在 XAML 中以 XAML 名稱參考宣告的任何物件。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is a null string or empty string.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see cref=&quot;T:System.Xaml.IXamlNameResolver&quot; /&gt; service is missing or invalid.">
        <paramref name="value" /> 為 Null 字串或空字串。
-或-
<see cref="T:System.Xaml.IXamlNameResolver" /> 服務遺漏或不正確。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;context&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="context" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Windows.Markup.NameReferenceConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts an object to the specified type. This is intended to return XAML reference names for objects in an object graph.">將物件轉換成指定的型別。 這適合用來傳回物件圖形中物件的 XAML 參考名稱。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">要用作目前文化特性的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value" vsli:raw="The object to retrieve the reference name for.">要為其擷取參考名稱的物件。</param>
      <param name="destinationType" vsli:raw="The type to return. You should always reference the &lt;see cref=&quot;T:System.String&quot; /&gt; type.">要傳回的類型。 您必須永遠參考 <see cref="T:System.String" /> 型別。</param>
      <returns vsli:raw="The reference name of the input &lt;paramref name=&quot;value&quot; /&gt; object.">
        <paramref name="value" /> 輸入物件的參考名稱。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;T:System.Xaml.IXamlNameProvider&quot; /&gt; service is missing or invalid.">
        <see cref="T:System.Xaml.IXamlNameProvider" /> 服務遺漏或不正確。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;context&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="context" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Windows.Markup.NameScopePropertyAttribute">
      <summary vsli:raw="Specifies a property of the associated class that provides the XAML namescope value.">指定相關聯類別的屬性，這個屬性會提供 XAML 名稱範圍值。</summary>
    </member>
    <member name="M:System.Windows.Markup.NameScopePropertyAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.NameScopePropertyAttribute&quot; /&gt; class with the specified name.">使用指定的名稱，初始化 <see cref="T:System.Windows.Markup.NameScopePropertyAttribute" /> 類別的新執行個體。</summary>
      <param name="name" vsli:raw="The name of the property on the attributed type that provides the XAML namescope.">屬性化 (Attributed) 型別上屬性 (Property) 的名稱，這個屬性 (Property) 可提供 XAML 名稱範圍。</param>
    </member>
    <member name="M:System.Windows.Markup.NameScopePropertyAttribute.#ctor(System.String,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.NameScopePropertyAttribute&quot; /&gt; class with the specified name and type.">使用指定的名稱和型別，初始化 <see cref="T:System.Windows.Markup.NameScopePropertyAttribute" /> 類別的新執行個體。</summary>
      <param name="name" vsli:raw="The name of the attachable member that provides the XAML name scope.">提供 XAML 名稱範圍之可附加成員的名稱。</param>
      <param name="type" vsli:raw="The owner type of the attachable member that provides the XAML name scope.">提供 XAML 名稱範圍之可附加成員的擁有者類型。</param>
    </member>
    <member name="P:System.Windows.Markup.NameScopePropertyAttribute.Name">
      <summary vsli:raw="Gets the name of the property that provides the XAML namescope.">取得屬性的名稱，這個屬性提供 XAML 名稱範圍。</summary>
      <returns vsli:raw="A string value that is the name of the property that provides the XAML namescope.">字串值，這是屬性的名稱，這個屬性提供 XAML 名稱範圍。</returns>
    </member>
    <member name="P:System.Windows.Markup.NameScopePropertyAttribute.Type">
      <summary vsli:raw="Gets the owner type of the attached property that provides the XAML namescope support.">取得提供 XAML 名稱範圍支援之附加屬性的擁有者型別。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; value that is the owner type of the attached property that provides the XAML namescope support, or &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Type" /> 值 (這個值是提供 XAML 名稱範圍支援之附加屬性的擁有者型別) 或 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Windows.Markup.NullExtension">
      <summary vsli:raw="Implements a XAML markup extension in order to return a null object, which you can use to explicitly set values to null in XAML.">實作 XAML 標記延伸以傳回 null 物件，您可以使用這個物件，在 XAML 中將值明確設定為 null。</summary>
    </member>
    <member name="M:System.Windows.Markup.NullExtension.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.NullExtension&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.NullExtension" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Windows.Markup.NullExtension.ProvideValue(System.IServiceProvider)">
      <summary vsli:raw="Provides &lt;see langword=&quot;null&quot; /&gt; to use as a value as the output of this markup extension.">提供 <see langword="null" /> 以當做此標記延伸之輸出的值。</summary>
      <param name="serviceProvider" vsli:raw="An object that can provide services for the markup extension implementation.">可以為標記延伸實作提供服務的物件。</param>
      <returns vsli:raw="A null reference.">null 參考。</returns>
    </member>
    <member name="T:System.Windows.Markup.PropertyDefinition">
      <summary vsli:raw="Supports a markup technique of defining properties of a class in declarative XAML.">支援可在宣告式 XAML 中定義類別屬性的標記技術。</summary>
    </member>
    <member name="M:System.Windows.Markup.PropertyDefinition.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.PropertyDefinition&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.PropertyDefinition" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Windows.Markup.PropertyDefinition.Attributes">
      <summary vsli:raw="Gets a list of associated CLR attributes.">取得關聯的 CLR 屬性清單。</summary>
      <returns vsli:raw="A list of associated attributes.">關聯的屬性清單。</returns>
    </member>
    <member name="P:System.Windows.Markup.PropertyDefinition.Modifier">
      <summary vsli:raw="Gets or sets the access level of the defined property.">取得或設定所定義之屬性的存取層級。</summary>
      <returns vsli:raw="The access level of the defined property, as a string.">所定義之屬性的存取層級。</returns>
    </member>
    <member name="P:System.Windows.Markup.PropertyDefinition.Name">
      <summary vsli:raw="Gets or sets the name of the property to define.">取得或設定要定義的屬性名稱。</summary>
      <returns vsli:raw="The name of the property to define.">要定義的屬性名稱。</returns>
    </member>
    <member name="P:System.Windows.Markup.PropertyDefinition.Type">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the property to define.">取得或設定要定義之屬性的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="The XAML type identifier of the property to define.">要定義之屬性的 XAML 型別識別項。</returns>
    </member>
    <member name="T:System.Windows.Markup.Reference">
      <summary vsli:raw="Implements the &lt;c&gt;{x:Reference}&lt;/c&gt; markup extension.">實作 <c>{x:Reference}</c> 標記延伸。</summary>
    </member>
    <member name="M:System.Windows.Markup.Reference.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.Reference&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.Reference" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Windows.Markup.Reference.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.Reference&quot; /&gt; class with the &lt;paramref name=&quot;name&quot; /&gt; argument.">使用 <paramref name="name" /> 引數來初始化 <see cref="T:System.Windows.Markup.Reference" /> 類別的新執行個體。</summary>
      <param name="name" vsli:raw="The XAML name of the element to reference.">要參考之項目的 XAML 名稱。</param>
    </member>
    <member name="P:System.Windows.Markup.Reference.Name">
      <summary vsli:raw="Gets or sets the XAML name to obtain the reference for.">取得或設定要取得其參考的 XAML 名稱。</summary>
      <returns vsli:raw="The XAML name of the element to obtain the reference for.">要取得其參考的 XAML 名稱。</returns>
    </member>
    <member name="M:System.Windows.Markup.Reference.ProvideValue(System.IServiceProvider)">
      <summary vsli:raw="Returns an object that is the value of the target property. For the &lt;see cref=&quot;T:System.Windows.Markup.Reference&quot; /&gt; type, this is the object that the provided &lt;see cref=&quot;P:System.Windows.Markup.Reference.Name&quot; /&gt; references.">傳回物件，此物件是目標屬性的值。 對於 <see cref="T:System.Windows.Markup.Reference" /> 型別，這是提供 <see cref="P:System.Windows.Markup.Reference.Name" /> 參考的物件。</summary>
      <param name="serviceProvider" vsli:raw="A class that implements the &lt;see cref=&quot;T:System.Xaml.IXamlNameResolver&quot; /&gt; service.">實作 <see cref="T:System.Xaml.IXamlNameResolver" /> 服務的類別。</param>
      <returns vsli:raw="The value of the target property. This is potentially any object that is type-mapped in the relevant backing assemblies.">目標屬性的值。 這可能是相關備份組件中的任一個型別對應物件。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;serviceProvider&quot; /&gt; value does not implement the &lt;see cref=&quot;T:System.Xaml.IXamlNameResolver&quot; /&gt; service.&#xA;&#xA; -or-&#xA;&#xA; &lt;see cref=&quot;P:System.Windows.Markup.Reference.Name&quot; /&gt; value has not been set through construction or positional usage.">
        <paramref name="serviceProvider" /> 值未實作 <see cref="T:System.Xaml.IXamlNameResolver" /> 服務。
-或-
<see cref="P:System.Windows.Markup.Reference.Name" /> 尚未透過建構或位置用法設定。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceProvider&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceProvider" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Windows.Markup.RootNamespaceAttribute">
      <summary vsli:raw="Represents an assembly level attribute that is used to identify the value of the &lt;see langword=&quot;RootNamespace&quot; /&gt; property in a Visual Studio project file.">表示組件層級屬性，用來識別 Visual Studio 專案檔的 <see langword="RootNamespace" /> 屬性值。</summary>
    </member>
    <member name="M:System.Windows.Markup.RootNamespaceAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.RootNamespaceAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.RootNamespaceAttribute" /> 類別的新執行個體。</summary>
      <param name="nameSpace" vsli:raw="The root namespace value.">根命名空間值。</param>
    </member>
    <member name="P:System.Windows.Markup.RootNamespaceAttribute.Namespace">
      <summary vsli:raw="Gets the string that corresponds to the value of the &lt;see langword=&quot;RootNamespace&quot; /&gt; property in a Visual Studio project file.">取得字串，該字串對應至 Visual Studio 專案檔中的 <see langword="RootNamespace" /> 屬性值。</summary>
      <returns vsli:raw="The string that corresponds to the value of the &lt;see langword=&quot;RootNamespace&quot; /&gt; property in a Visual Studio project file.">對應至 Visual Studio 專案檔中<see langword="RootNamespace" />屬性值的字串。</returns>
    </member>
    <member name="T:System.Windows.Markup.RuntimeNamePropertyAttribute">
      <summary vsli:raw="Represents a type-level attribute that reports which property of the type maps to the XAML x:Name attribute.">代表類型層級屬性，該屬性報告此類型中哪個屬性對應到 XAML x:Name 屬性。</summary>
    </member>
    <member name="M:System.Windows.Markup.RuntimeNamePropertyAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.RuntimeNamePropertyAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.RuntimeNamePropertyAttribute" /> 類別的新執行個體。</summary>
      <param name="name" vsli:raw="The name of the property to use as the &lt;see langword=&quot;x:Name&quot; /&gt; equivalent of the class.">要當做類別之 <see langword="x:Name" /> 對等項目之屬性的名稱。</param>
    </member>
    <member name="P:System.Windows.Markup.RuntimeNamePropertyAttribute.Name">
      <summary vsli:raw="Gets the name of the runtime name property that is specified by this &lt;see cref=&quot;T:System.Windows.Markup.RuntimeNamePropertyAttribute&quot; /&gt;.">取得由這個 <see cref="T:System.Windows.Markup.RuntimeNamePropertyAttribute" /> 指定之執行階段名稱屬性的名稱。</summary>
      <returns vsli:raw="The name of the property.">屬性的名稱。</returns>
    </member>
    <member name="T:System.Windows.Markup.StaticExtension">
      <summary vsli:raw="Implements a markup extension that returns static field and property references.">實作標記延伸，這個標記延伸會傳回靜態欄位及屬性參考。</summary>
    </member>
    <member name="M:System.Windows.Markup.StaticExtension.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.StaticExtension&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.StaticExtension" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Windows.Markup.StaticExtension.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.StaticExtension&quot; /&gt; class using the provided &lt;paramref name=&quot;member&quot; /&gt; string.">使用所提供的 <paramref name="member" /> 字串初始化 <see cref="T:System.Windows.Markup.StaticExtension" /> 類別的新執行個體。</summary>
      <param name="member" vsli:raw="A string that identifies the member to make a reference to. This string uses the format &lt;c&gt;prefix:typeName.fieldOrPropertyName&lt;/c&gt;. &lt;c&gt;prefix&lt;/c&gt; is the mapping prefix for a XAML namespace, and is only required to reference static values that are not mapped to the default XAML namespace.">識別要參考之成員的字串。 這個字串使用 <c>prefix:typeName.fieldOrPropertyName</c> 格式。 <c>prefix</c> 是 XAML 命名空間的對應前置詞，只有未對應至預設 XAML 命名空間的參考靜態值才需要。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="member" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Windows.Markup.StaticExtension.Member">
      <summary vsli:raw="Gets or sets a member name string that is used to resolve a static field or property based on the service-provided type resolver.">取得或設定成員名稱字串，此字串用來根據服務提供的型別解析程式，解析靜態欄位或屬性。</summary>
      <returns vsli:raw="A string that identifies the member to make a reference to.">識別要參考之成員的字串。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="Attempted to set &lt;see cref=&quot;P:System.Windows.Markup.StaticExtension.Member&quot; /&gt; to &lt;see langword=&quot;null&quot; /&gt;.">嘗試將 <see cref="P:System.Windows.Markup.StaticExtension.Member" /> 設定為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Windows.Markup.StaticExtension.MemberType">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Type&quot; /&gt; that defines the static member to return.">取得或設定可定義要傳回之靜態成員的 <see cref="T:System.Type" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; that defines the static member to return.">可定義要傳回之靜態成員的 <see cref="T:System.Type" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="Attempted to set &lt;see cref=&quot;P:System.Windows.Markup.StaticExtension.MemberType&quot; /&gt; to &lt;see langword=&quot;null&quot; /&gt;.">嘗試將 <see cref="P:System.Windows.Markup.StaticExtension.MemberType" /> 設定為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Windows.Markup.StaticExtension.ProvideValue(System.IServiceProvider)">
      <summary vsli:raw="Returns an object value to set on the property where you apply this extension. For &lt;see cref=&quot;T:System.Windows.Markup.StaticExtension&quot; /&gt;, the return value is the static value that is evaluated for the requested static member.">傳回要在套用這個延伸之屬性上設定的物件值。 如果是 <see cref="T:System.Windows.Markup.StaticExtension" />，則傳回值是針對所要求的靜態成員計算的靜態值。</summary>
      <param name="serviceProvider" vsli:raw="An object that can provide services for the markup extension. The service provider is expected to provide a service that implements a type resolver (&lt;see cref=&quot;T:System.Windows.Markup.IXamlTypeResolver&quot; /&gt;).">可以為標記延伸提供服務的物件。 服務提供者必須能夠提供實作型別解析程式 (<see cref="T:System.Windows.Markup.IXamlTypeResolver" />) 的服務。</param>
      <returns vsli:raw="The static value to set on the property where the extension is applied.">要在套用延伸的屬性上設定的靜態值。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;paramref name=&quot;member&quot; /&gt; value for the extension is &lt;see langword=&quot;null&quot; /&gt; at the time of evaluation.">評估時，擴充的 <paramref name="member" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="Some part of the &lt;paramref name=&quot;member&quot; /&gt; string did not parse properly  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;serviceProvider&quot; /&gt; did not provide a service for &lt;see cref=&quot;T:System.Windows.Markup.IXamlTypeResolver&quot; /&gt;  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;member&quot; /&gt; value did not resolve to a static member.">無法正確剖析 <paramref name="member" /> 字串的某個部分
-或-
<paramref name="serviceProvider" /> 未提供 <see cref="T:System.Windows.Markup.IXamlTypeResolver" /> 的服務
-或-
<paramref name="member" /> 值未解析為靜態成員。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceProvider&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceProvider" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Windows.Markup.TrimSurroundingWhitespaceAttribute">
      <summary vsli:raw="Indicates to XAML processors that the whitespace surrounding elements of the type in markup should be trimmed when serializing.">指定 XAML 處理器在進行序列化時，必須修剪標記中型別之項目周圍的空白。</summary>
    </member>
    <member name="M:System.Windows.Markup.TrimSurroundingWhitespaceAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.TrimSurroundingWhitespaceAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.TrimSurroundingWhitespaceAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Windows.Markup.TypeExtension">
      <summary vsli:raw="Implements a markup extension that returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; based on a string input.">實作會根據輸入字串傳回 <see cref="T:System.Type" /> 的標記延伸。</summary>
    </member>
    <member name="M:System.Windows.Markup.TypeExtension.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.TypeExtension&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.TypeExtension" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Windows.Markup.TypeExtension.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.TypeExtension&quot; /&gt; class, initializing the &lt;see cref=&quot;P:System.Windows.Markup.TypeExtension.TypeName&quot; /&gt; value based on the provided &lt;paramref name=&quot;typeName&quot; /&gt; string.">初始化 <see cref="T:System.Windows.Markup.TypeExtension" /> 類別的新執行個體，根據所提供 <see cref="P:System.Windows.Markup.TypeExtension.TypeName" /> 字串初始化 <paramref name="typeName" /> 值。</summary>
      <param name="typeName" vsli:raw="A string that identifies the type to make a reference to. This string uses the format &lt;c&gt;prefix:className&lt;/c&gt;. &lt;c&gt;prefix&lt;/c&gt; is the mapping prefix for a XAML namespace, and is only required to reference types that are not mapped to the default XAML namespace.">識別要參考之類型的字串。 這個字串使用 <c>prefix:className</c> 格式。 <c>prefix</c> 是 XAML 命名空間的對應前置詞，只有未對應至預設 XAML 命名空間的參考類型才需要。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="Attempted to specify &lt;paramref name=&quot;typeName&quot; /&gt; as &lt;see langword=&quot;null&quot; /&gt;.">嘗試指定 <paramref name="typeName" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Windows.Markup.TypeExtension.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.TypeExtension&quot; /&gt; class, declaring the type directly.">直接宣告類型，初始化 <see cref="T:System.Windows.Markup.TypeExtension" /> 類別的新執行個體。</summary>
      <param name="type" vsli:raw="The type to be represented by this &lt;see cref=&quot;T:System.Windows.Markup.TypeExtension&quot; /&gt;.">這個 <see cref="T:System.Windows.Markup.TypeExtension" /> 所表示的類型。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;">
        <paramref name="type" /> 是 <see langword="null" /></exception>
    </member>
    <member name="M:System.Windows.Markup.TypeExtension.ProvideValue(System.IServiceProvider)">
      <summary vsli:raw="Returns an object that should be set on the property where this extension is applied. For &lt;see cref=&quot;T:System.Windows.Markup.TypeExtension&quot; /&gt; , this is the &lt;see cref=&quot;T:System.Type&quot; /&gt; value as evaluated for the requested type name.">傳回物件，這個物件應該設定於套用這個延伸的屬性上。 如果是 <see cref="T:System.Windows.Markup.TypeExtension" />，這是針對所要求的類型名稱評估的 <see cref="T:System.Type" /> 值。</summary>
      <param name="serviceProvider" vsli:raw="Object that can provide services for the markup extension. The provider is expected to provide a service for &lt;see cref=&quot;T:System.Windows.Markup.IXamlTypeResolver&quot; /&gt;.">可以為標記延伸提供服務的物件。 提供者必須能夠為 <see cref="T:System.Windows.Markup.IXamlTypeResolver" /> 提供服務。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to set on the property where the extension is applied.">要在套用延伸的屬性上設定的 <see cref="T:System.Type" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; value for the extension is &lt;see langword=&quot;null&quot; /&gt;.">延伸的 <paramref name="member" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="Some part of the &lt;paramref name=&quot;typeName&quot; /&gt; string did not parse properly.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;serviceProvider&quot; /&gt; did not provide a service for &lt;see cref=&quot;T:System.Windows.Markup.IXamlTypeResolver&quot; /&gt;  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;typeName&quot; /&gt; value did not resolve to a type.">未正確地剖析 <paramref name="typeName" /> 字串的某個部分。
-或-
<paramref name="serviceProvider" /> 未提供 <see cref="T:System.Windows.Markup.IXamlTypeResolver" /> 的服務
-或-
<paramref name="typeName" /> 值未解析為類型。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceProvider&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;">
        <paramref name="serviceProvider" /> 是 <see langword="null" /></exception>
    </member>
    <member name="P:System.Windows.Markup.TypeExtension.Type">
      <summary vsli:raw="Gets or sets the type information for this extension.">取得或設定這個例外狀況的類型資訊。</summary>
      <returns vsli:raw="The established type. For runtime purposes, this may be &lt;see langword=&quot;null&quot; /&gt; for get access, but cannot be set to &lt;see langword=&quot;null&quot; /&gt;.">已建立的類型。 基於執行階段目的，此類型在進行 get 存取時可能為 <see langword="null" />，但無法設定為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="Attempted to set to &lt;see langword=&quot;null&quot; /&gt;.">嘗試設定為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Windows.Markup.TypeExtension.TypeName">
      <summary vsli:raw="Gets or sets the type name represented by this markup extension.">取得或設定以這個標記延伸表示的類型名稱。</summary>
      <returns vsli:raw="A string that identifies the type. This string uses the format prefix&lt;c&gt;:&lt;/c&gt;className. (prefix is the mapping prefix for an XML namespace and is only required to reference types that are not mapped to the default XML namespace for WPF (&lt;c&gt;http://schemas.microsoft.com/winfx/2006/xaml/presentation&lt;/c&gt;).">識別類型的字串。 這個字串使用首碼<c>：</c>className格式。 （prefix是 XML 命名空間的對應前置詞，只有未對應至 WPF 之預設 XML 命名空間的參考型別才需要（<c>http://schemas.microsoft.com/winfx/2006/xaml/presentation</c>）。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="Attempted to set to &lt;see langword=&quot;null&quot; /&gt;.">嘗試設定為 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Windows.Markup.UidPropertyAttribute">
      <summary vsli:raw="Indicates the CLR property of a class that provides the x:Uid Directive value.">指出提供 x:Uid 指示詞值之類別的 CLR 屬性。</summary>
    </member>
    <member name="M:System.Windows.Markup.UidPropertyAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.UidPropertyAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.UidPropertyAttribute" /> 類別的新執行個體。</summary>
      <param name="name" vsli:raw="The name of the property that provides the &lt;see langword=&quot;x:Uid&quot; /&gt; value.">提供 <see langword="x:Uid" /> 值的屬性名稱。</param>
    </member>
    <member name="P:System.Windows.Markup.UidPropertyAttribute.Name">
      <summary vsli:raw="Gets the name of the CLR property that represents the x:Uid Directive value.">取得表示 x:Uid 指示詞值的 CLR 屬性名稱。</summary>
      <returns vsli:raw="The name of the CLR property that represents x:Uid Directive.">表示 x:Uid 指示詞的 CLR 屬性名稱。</returns>
    </member>
    <member name="T:System.Windows.Markup.UsableDuringInitializationAttribute">
      <summary vsli:raw="Indicates whether this type is built top-down during XAML object graph creation.">表示這個類型是否在 XAML 物件圖形建立期間由上而下建置。</summary>
    </member>
    <member name="M:System.Windows.Markup.UsableDuringInitializationAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.UsableDuringInitializationAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.UsableDuringInitializationAttribute" /> 類別的新執行個體。</summary>
      <param name="usable" vsli:raw="Defines whether the associated class is usable during initialization.">定義相關聯的類別是否可在初始化時使用。</param>
    </member>
    <member name="P:System.Windows.Markup.UsableDuringInitializationAttribute.Usable">
      <summary vsli:raw="Gets a value that indicates whether the associated class is usable during initialization.">取得值，這個值指出相關聯的類別是否可在初始化時使用。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the associated class is usable during initialization; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果初始化時可使用相關聯的類別，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Windows.Markup.ValueSerializer">
      <summary vsli:raw="Abstract class that defines conversion behavior for serialization from an object representation.">抽象類別，會定義從物件表示進行序列化的轉換行為。</summary>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.ValueSerializer" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="When overridden in a derived class, determines whether the specified &lt;see cref=&quot;T:System.String&quot; /&gt; can be converted to an instance of the type that the implementation of &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; supports.">在衍生類別中覆寫時，判斷是否可以將指定的 <see cref="T:System.String" /> 轉換成 <see cref="T:System.Windows.Markup.ValueSerializer" /> 的實作所支援之類型的執行個體。</summary>
      <param name="value" vsli:raw="The string to evaluate for conversion.">要評估以進行轉換的字串。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">用於轉換的內容資訊。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value can be converted; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以轉換值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="When overridden in a derived class, determines whether the specified object can be converted into a &lt;see cref=&quot;T:System.String&quot; /&gt;.">在衍生類別中覆寫時，判斷指定的物件是否可以轉換成 <see cref="T:System.String" />。</summary>
      <param name="value" vsli:raw="The object to evaluate for conversion.">要評估以進行轉換的物件。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">用於轉換的內容資訊。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;value&quot; /&gt; can be converted into a &lt;see cref=&quot;T:System.String&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="value" /> 可以轉換成 <see cref="T:System.String" />，則為 <see langword="true" />；否則為 <see langword="false." />。</returns>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="When overridden in a derived class, converts a &lt;see cref=&quot;T:System.String&quot; /&gt; to an instance of the type that the implementation of &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; supports.">在衍生類別中覆寫時，將 <see cref="T:System.String" /> 轉換成 <see cref="T:System.Windows.Markup.ValueSerializer" /> 的實作所支援之類型的執行個體。</summary>
      <param name="value" vsli:raw="The string to convert.">要轉換的字串。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">用於轉換的內容資訊。</param>
      <returns vsli:raw="A new instance of the type that the implementation of &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; supports based on the supplied &lt;paramref name=&quot;value&quot; /&gt;.">
        <see cref="T:System.Windows.Markup.ValueSerializer" /> 的實作所支援並以所提供 <paramref name="value" /> 為基礎之類型的新執行個體。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; cannot be converted.">無法轉換 <paramref name="value" />。</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="When overridden in a derived class, converts the specified object to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">在衍生類別中覆寫時，將指定的物件轉換成 <see cref="T:System.String" />。</summary>
      <param name="value" vsli:raw="The object to convert into a string.">要轉換為字串的物件。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">用於轉換的內容資訊。</param>
      <returns vsli:raw="A string representation of the specified object.">指定物件的字串表示。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; cannot be converted.">無法轉換 <paramref name="value" />。</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetConvertFromException(System.Object)">
      <summary vsli:raw="Returns an exception to throw when a conversion cannot be performed.">無法執行轉換時，會傳回要擲回的例外狀況。</summary>
      <param name="value" vsli:raw="The object that could not be converted.">無法轉換的物件。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Exception&quot; /&gt; object for the exception to throw when a &lt;see langword=&quot;ConvertFrom&quot; /&gt; conversion cannot be performed.">
        <see cref="T:System.Exception" /> 物件，表示無法執行 <see langword="ConvertFrom" /> 轉換時將擲回的例外狀況。</returns>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetConvertToException(System.Object,System.Type)">
      <summary vsli:raw="Returns an exception to throw when a conversion cannot be performed.">無法執行轉換時，會傳回要擲回的例外狀況。</summary>
      <param name="value" vsli:raw="The object that could not be converted.">無法轉換的物件。</param>
      <param name="destinationType" vsli:raw="A type that represents the type the conversion was trying to convert to.">型別，表示轉換嘗試轉換成的型別。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Exception&quot; /&gt; object for the exception to throw when a &lt;see langword=&quot;ConvertTo&quot; /&gt; conversion cannot be performed.">
        <see cref="T:System.Exception" /> 物件，表示無法執行 <see langword="ConvertTo" /> 轉換時將擲回的例外狀況。</returns>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; declared for a property, by passing a CLR property descriptor for the property.">藉由為屬性傳遞 CLR 屬性描述項，取得針對該屬性宣告的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</summary>
      <param name="descriptor" vsli:raw="The CLR property descriptor for the property to be serialized.">要序列化之屬性的 CLR 屬性描述項。</param>
      <returns vsli:raw="The serializer associated with the specified property. May return &lt;see langword=&quot;null&quot; /&gt;.">與指定之屬性相關聯的序列化程式。 可能傳回 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;descriptor&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="descriptor" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; declared for the specified property, using the specified context.">使用指定的內容，取得為指定之屬性宣告的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</summary>
      <param name="descriptor" vsli:raw="Descriptor for the property to be serialized.">要序列化之屬性的描述項。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">用於轉換的內容資訊。</param>
      <returns vsli:raw="The serializer associated with the specified property.">與指定之屬性相關聯的序列化程式。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;descriptor&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="descriptor" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; declared for the specified type.">取得為指定之型別宣告的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</summary>
      <param name="type" vsli:raw="The type to get the &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; for.">要為之取得 <see cref="T:System.Windows.Markup.ValueSerializer" /> 的型別。</param>
      <returns vsli:raw="The serializer associated with the specified type. May return &lt;see langword=&quot;null&quot; /&gt;.">與指定之型別相關聯的序列化程式。 可能傳回 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; declared for the specified type, using the specified context.">使用指定的內容，取得為指定之型別宣告的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</summary>
      <param name="type" vsli:raw="The type to get the &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; for.">要為之取得 <see cref="T:System.Windows.Markup.ValueSerializer" /> 的型別。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">用於轉換的內容資訊。</param>
      <returns vsli:raw="The serializer associated with the specified type.">與指定之型別相關聯的序列化程式。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.TypeReferences(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Gets an enumeration of the types referenced by the &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt;.">取得 <see cref="T:System.Windows.Markup.ValueSerializer" /> 所參考之型別的列舉型別 (Enumeration)。</summary>
      <param name="value" vsli:raw="The value being serialized.">正在序列化的值。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">用於轉換的內容資訊。</param>
      <returns vsli:raw="The types converted by this serializer.">由此序列化程式轉換的型別。</returns>
    </member>
    <member name="T:System.Windows.Markup.ValueSerializerAttribute">
      <summary>識別序列化時應該使用之類型或屬性的 <see cref="T:System.Windows.Markup.ValueSerializer" /> 類別。</summary>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializerAttribute.#ctor(System.String)">
      <summary>使用組件限定類型名稱字串初始化 <see cref="T:System.Windows.Markup.ValueSerializerAttribute" /> 類別的新執行個體。</summary>
      <param name="valueSerializerTypeName">供 <see cref="T:System.Windows.Markup.ValueSerializer" /> 類別使用的組件限定類型名稱字串。</param>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializerAttribute.#ctor(System.Type)">
      <summary>使用指定的類型，初始化 <see cref="T:System.Windows.Markup.ValueSerializerAttribute" /> 類別的新執行個體。</summary>
      <param name="valueSerializerType">表示 <see cref="T:System.Windows.Markup.ValueSerializer" /> 類別類型的類型。</param>
    </member>
    <member name="P:System.Windows.Markup.ValueSerializerAttribute.ValueSerializerType">
      <summary>取得這個屬性所報告之 <see cref="T:System.Windows.Markup.ValueSerializer" /> 類別的類型。</summary>
      <returns>
        <see cref="T:System.Windows.Markup.ValueSerializer" /> 的類型。</returns>
    </member>
    <member name="P:System.Windows.Markup.ValueSerializerAttribute.ValueSerializerTypeName">
      <summary>為這個類型或屬性取得 <see cref="T:System.Windows.Markup.ValueSerializer" /> 類型的組件限定名稱。</summary>
      <returns>類型的組件限定名稱。</returns>
    </member>
    <member name="T:System.Windows.Markup.WhitespaceSignificantCollectionAttribute">
      <summary vsli:raw="Indicates that a collection type should be processed as being whitespace significant by a XAML processor.">表示應該由 XAML 處理器來處理成未預期之空白字元的集合型別。</summary>
    </member>
    <member name="M:System.Windows.Markup.WhitespaceSignificantCollectionAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.WhitespaceSignificantCollectionAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.WhitespaceSignificantCollectionAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Windows.Markup.XamlDeferLoadAttribute">
      <summary vsli:raw="Indicates that a class or property has a deferred load usage for XAML (such as a template behavior), and reports the class that enables the deferring behavior and its destination/content type.">表示類別或屬性具有 XAML 的延後載入使用方式 (例如，範本行為)，並報告啟用延後行為的類別及其目的型別/內容型別。</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlDeferLoadAttribute.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.XamlDeferLoadAttribute&quot; /&gt; class, using string names of types.">使用型別的字串名稱，初始化 <see cref="T:System.Windows.Markup.XamlDeferLoadAttribute" /> 類別的新執行個體。</summary>
      <param name="loaderType" vsli:raw="The string name of the type for the implementation to use for the defer load behavior.">型別的字串名稱，即實作後用於延後載入行為的型別。</param>
      <param name="contentType" vsli:raw="The string name of the type for the destination/content type of the defer load behavior.">型別的字串名稱，即延後載入行為的目的型別/內容型別。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;loaderType&quot; /&gt; or &lt;paramref name=&quot;contentType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="loaderType" /> 或 <paramref name="contentType" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Windows.Markup.XamlDeferLoadAttribute.#ctor(System.Type,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.XamlDeferLoadAttribute&quot; /&gt; class, using CLR &lt;see cref=&quot;T:System.Type&quot; /&gt; values.">使用 CLR <see cref="T:System.Windows.Markup.XamlDeferLoadAttribute" /> 值，初始化 <see cref="T:System.Type" /> 類別的新執行個體。</summary>
      <param name="loaderType" vsli:raw="The CLR &lt;see cref=&quot;T:System.Type&quot; /&gt; value for the implementation to use for the defer load behavior.">CLR <see cref="T:System.Type" /> 值，即實作後用於延後載入行為的值。</param>
      <param name="contentType" vsli:raw="The CLR &lt;see cref=&quot;T:System.Type&quot; /&gt; value for the destination/content type of the defer load behavior.">CLR <see cref="T:System.Type" /> 值，即延後載入行為的目的型別/內容型別。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;loaderType&quot; /&gt; or &lt;paramref name=&quot;contentType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="loaderType" /> 或 <paramref name="contentType" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Windows.Markup.XamlDeferLoadAttribute.ContentType">
      <summary vsli:raw="Gets the CLR &lt;see cref=&quot;T:System.Type&quot; /&gt; value for the destination/content type of the defer load behavior.">取得 CLR <see cref="T:System.Type" /> 值，即延後載入行為的目的型別/內容型別。</summary>
      <returns vsli:raw="The CLR &lt;see cref=&quot;T:System.Type&quot; /&gt; value for the destination/content type of the defer load behavior.">CLR <see cref="T:System.Type" /> 值，即延後載入行為的目的型別/內容型別。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlDeferLoadAttribute.ContentTypeName">
      <summary vsli:raw="Gets the string name of the type for the implementation to use for the defer load behavior.">取得型別的字串名稱，即實作後用於延後載入行為的型別。</summary>
      <returns vsli:raw="The string name of the type for the converter to use for the defer load behavior.">型別的字串名稱，即轉換子用於延後載入行為的型別。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlDeferLoadAttribute.LoaderType">
      <summary vsli:raw="Gets the CLR &lt;see cref=&quot;T:System.Type&quot; /&gt; value for the implementation to use for the defer load behavior.">取得 CLR <see cref="T:System.Type" /> 值，即實作後用於延後載入行為的值。</summary>
      <returns vsli:raw="The CLR &lt;see cref=&quot;T:System.Type&quot; /&gt; value for the implementation to use for the defer load behavior.">CLR <see cref="T:System.Type" /> 值，即實作後用於延後載入行為的值。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlDeferLoadAttribute.LoaderTypeName">
      <summary vsli:raw="Gets the string name of the type for the destination/content type of the defer load behavior.">取得型別的字串名稱，即延後載入行為的目的型別/內容型別。</summary>
      <returns vsli:raw="The string name of the type for the destination/content type of the defer load behavior.">型別的字串名稱，即延後載入行為的目的型別/內容型別。</returns>
    </member>
    <member name="T:System.Windows.Markup.XamlSetMarkupExtensionAttribute">
      <summary vsli:raw="Indicates that a class can use a markup extension to provide a value, and references a handler to use for markup extension set operations.">表示類別可以使用標記延伸來提供值，以及參考要用於標記延伸設定作業的處理常式。</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlSetMarkupExtensionAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.XamlSetMarkupExtensionAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.XamlSetMarkupExtensionAttribute" /> 類別的新執行個體。</summary>
      <param name="xamlSetMarkupExtensionHandler" vsli:raw="The name of the handler to use for markup extension set operations.">用於標記延伸設定作業之處理常式的名稱。</param>
    </member>
    <member name="P:System.Windows.Markup.XamlSetMarkupExtensionAttribute.XamlSetMarkupExtensionHandler">
      <summary vsli:raw="Gets the name of the handler to use for markup extension set operations.">取得用於標記延伸設定作業之處理常式的名稱。</summary>
      <returns vsli:raw="The name of the handler to use for markup extension set operations.">用於標記延伸設定作業之處理常式的名稱。</returns>
    </member>
    <member name="T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs">
      <summary vsli:raw="Provides data for callbacks that are invoked when a XAML object writer sets a value using a markup extension.">提供資料給回呼，該回呼會在 XAML 物件寫入器使用標記延伸來設定值時叫用。</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlSetMarkupExtensionEventArgs.#ctor(System.Xaml.XamlMember,System.Windows.Markup.MarkupExtension,System.IServiceProvider)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs" /> 類別的新執行個體。</summary>
      <param name="member" vsli:raw="XAML type system / schema information for the member being set.">正在設定之成員的 XAML 型別系統/結構描述資訊。</param>
      <param name="value" vsli:raw="The markup extension reference to provide for the member being set.">要提供給正在設定之成員的標記延伸參考。</param>
      <param name="serviceProvider" vsli:raw="Service provider information passed to the markup extension.">傳遞給標記延伸的服務提供者資訊。</param>
    </member>
    <member name="M:System.Windows.Markup.XamlSetMarkupExtensionEventArgs.CallBase">
      <summary vsli:raw="Provides a way to invoke a callback as defined on a base class of the current acting type.">提供方法，以便依現用型別之基底類別中的定義叫用回呼。</summary>
    </member>
    <member name="P:System.Windows.Markup.XamlSetMarkupExtensionEventArgs.MarkupExtension">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Windows.Markup.MarkupExtension&quot; /&gt; reference that is relevant to this &lt;see cref=&quot;T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs&quot; /&gt;.">取得與這個 <see cref="T:System.Windows.Markup.MarkupExtension" /> 關聯的 <see cref="T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs" /> 參考。</summary>
      <returns vsli:raw="The markup extension reference that is relevant to this &lt;see cref=&quot;T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs&quot; /&gt;.">與這個 <see cref="T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs" /> 關聯的標記延伸。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetMarkupExtensionEventArgs.ServiceProvider">
      <summary vsli:raw="Gets service provider information that was passed to the markup extension.">取得已傳遞給標記延伸的服務提供者資訊。</summary>
      <returns vsli:raw="Service provider information that was passed to the markup extension.">已傳遞給標記延伸的服務提供者資訊。</returns>
    </member>
    <member name="T:System.Windows.Markup.XamlSetTypeConverterAttribute">
      <summary vsli:raw="Indicates that a class can use a type converter to provide a value, and references a handler to use for type converter setting cases.">指出類別可以使用型別轉換子來提供值，以及參考要用於型別轉換子設定情況的處理常式。</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlSetTypeConverterAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.XamlSetTypeConverterAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.XamlSetTypeConverterAttribute" /> 類別的新執行個體。</summary>
      <param name="xamlSetTypeConverterHandler" vsli:raw="The name of the handler to use for type converter setting operations.">處理常式的名稱，即要用於型別轉換子設定作業的處理常式。</param>
    </member>
    <member name="P:System.Windows.Markup.XamlSetTypeConverterAttribute.XamlSetTypeConverterHandler">
      <summary vsli:raw="Gets the &lt;paramref name=&quot;xamlSetTypeConverterHandler&quot; /&gt; initialization value (the handler name) specified in the &lt;see cref=&quot;T:System.Windows.Markup.XamlSetTypeConverterAttribute&quot; /&gt;.">取得在 <see cref="T:System.Windows.Markup.XamlSetTypeConverterAttribute" /> 中指定的 <paramref name="xamlSetTypeConverterHandler" /> 初始設定值 (處理常式名稱)。</summary>
      <returns vsli:raw="The &lt;paramref name=&quot;xamlSetTypeConverterHandler&quot; /&gt; value specified in the &lt;see cref=&quot;T:System.Windows.Markup.XamlSetTypeConverterAttribute&quot; /&gt;.">在 <see cref="T:System.Windows.Markup.XamlSetTypeConverterAttribute" /> 中指定的 <paramref name="xamlSetTypeConverterHandler" /> 值。</returns>
    </member>
    <member name="T:System.Windows.Markup.XamlSetTypeConverterEventArgs">
      <summary vsli:raw="Provides data for callbacks that are invoked when a XAML writer sets a value using a type converter call.">提供資料給回呼，該回呼會在 XAML 寫入器使用型別轉換子呼叫來設定值時叫用。</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlSetTypeConverterEventArgs.#ctor(System.Xaml.XamlMember,System.ComponentModel.TypeConverter,System.Object,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.XamlSetTypeConverterEventArgs&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.XamlSetTypeConverterEventArgs" /> 類別的新執行個體。</summary>
      <param name="member" vsli:raw="XAML type system / schema information for the member being set.">正在設定之成員的 XAML 型別系統/結構描述資訊。</param>
      <param name="typeConverter" vsli:raw="The specific type converter instance being invoked.">正在叫用的特定型別轉換子執行個體。</param>
      <param name="value" vsli:raw="The value to provide for the member being set.">要提供給正在設定之成員的值。</param>
      <param name="serviceProvider" vsli:raw="Service provider information that can be used by the &lt;paramref name=&quot;typeConverter&quot; /&gt; class.">可由 <paramref name="typeConverter" /> 類別使用的服務提供者資訊。</param>
      <param name="cultureInfo" vsli:raw="Culture information that can be used by the &lt;paramref name=&quot;typeConverter&quot; /&gt; class when calling &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)&quot; /&gt; and other methods.">可以在呼叫 <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" /> 或其他方法時，由 <paramref name="typeConverter" /> 類別使用的文化特性 (Culture) 資訊。</param>
    </member>
    <member name="M:System.Windows.Markup.XamlSetTypeConverterEventArgs.CallBase">
      <summary vsli:raw="Provides a way to invoke a callback as defined on a base class of the current acting type.">提供方法，以便依現用型別之基底類別中的定義叫用回呼。</summary>
    </member>
    <member name="P:System.Windows.Markup.XamlSetTypeConverterEventArgs.CultureInfo">
      <summary vsli:raw="Gets &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; information that can be used by the type converter class when calling &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)&quot; /&gt; and other methods.">取得 <see cref="T:System.Globalization.CultureInfo" /> 資訊，該資訊可以在呼叫 <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" /> 和其他方法時由型別轉換子類別使用。</summary>
      <returns vsli:raw="Culture information that can be used by the type converter class.">可由型別轉換子類別使用的文化特性 (Culture) 資訊。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetTypeConverterEventArgs.ServiceProvider">
      <summary vsli:raw="Gets &lt;see cref=&quot;T:System.IServiceProvider&quot; /&gt; information that can be used by the type converter class.">取得可由型別轉換子類別使用的 <see cref="T:System.IServiceProvider" /> 資訊。</summary>
      <returns vsli:raw="Service provider information that can be used by the &lt;paramref name=&quot;typeConverter&quot; /&gt; class.">可由 <paramref name="typeConverter" /> 類別使用的服務提供者資訊。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetTypeConverterEventArgs.TypeConverter">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; instance that is invoked and provides type conversion behavior.">取得所叫用的 <see cref="T:System.ComponentModel.TypeConverter" /> 執行個體，以及提供型別轉換行為。</summary>
      <returns vsli:raw="The type converter that provides type conversion behavior.">可提供型別轉換行為的型別轉換子。</returns>
    </member>
    <member name="T:System.Windows.Markup.XamlSetValueEventArgs">
      <summary vsli:raw="Provides data for callbacks that are invoked when a &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt; sets certain values.">提供資料給回呼，該回呼會在 <see cref="T:System.Xaml.XamlObjectWriter" /> 設定某些值時叫用。</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlSetValueEventArgs.#ctor(System.Xaml.XamlMember,System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.XamlSetValueEventArgs&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> 類別的新執行個體。</summary>
      <param name="member" vsli:raw="XAML type system / schema information for the member being set.">正在設定之成員的 XAML 型別系統/結構描述資訊。</param>
      <param name="value" vsli:raw="The value to provide for the member.">要提供給成員的值。</param>
    </member>
    <member name="M:System.Windows.Markup.XamlSetValueEventArgs.CallBase">
      <summary vsli:raw="When overridden in a derived class, provides a way to invoke a &lt;see langword=&quot;SetValue&quot; /&gt; callback as defined on a base class of the current acting type.">在衍生類別中覆寫時提供方式，以便依現用型別之基底類別中的定義叫用 <see langword="SetValue" /> 回呼。</summary>
    </member>
    <member name="P:System.Windows.Markup.XamlSetValueEventArgs.Handled">
      <summary vsli:raw="Gets or sets a value that determines whether a caller that is using the &lt;see cref=&quot;T:System.Windows.Markup.XamlSetValueEventArgs&quot; /&gt; can use the values without having to call &lt;see cref=&quot;M:System.Windows.Markup.XamlSetValueEventArgs.CallBase&quot; /&gt;.">取得或設定值，這個值會判斷正在使用 <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> 的呼叫端是否不必呼叫 <see cref="M:System.Windows.Markup.XamlSetValueEventArgs.CallBase" /> 即可使用那些值。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the values were useful and calling &lt;see cref=&quot;M:System.Windows.Markup.XamlSetValueEventArgs.CallBase&quot; /&gt; is not necessary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果會用到這些值但不需要呼叫 <see cref="M:System.Windows.Markup.XamlSetValueEventArgs.CallBase" /> 則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetValueEventArgs.Member">
      <summary vsli:raw="Gets XAML type system and XAML schema information for the member being set.">取得正在設定之成員的 XAML 型別系統和 XAML 結構描述資訊。</summary>
      <returns vsli:raw="XAML type system and XAML schema information for the member being set.">正在設定之成員的 XAML 型別系統和 XAML 結構描述資訊。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetValueEventArgs.Value">
      <summary vsli:raw="Gets the value to provide for the member being set.">取得要提供給正在設定之成員的值。</summary>
      <returns vsli:raw="The value to provide for the member being set.">要提供給正在設定之成員的值。</returns>
    </member>
    <member name="T:System.Windows.Markup.XData">
      <summary vsli:raw="Represents literal data that can appear as the value for a &lt;see langword=&quot;Value&quot; /&gt; node.">表示可以顯示為 <see langword="Value" /> 節點值的常值資料。</summary>
    </member>
    <member name="M:System.Windows.Markup.XData.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.XData&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.XData" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Windows.Markup.XData.Text">
      <summary vsli:raw="Gets or sets the literal value string that this &lt;see cref=&quot;T:System.Windows.Markup.XData&quot; /&gt; wraps.">取得或設定這個 <see cref="T:System.Windows.Markup.XData" /> 包裝的常值字串。</summary>
      <returns vsli:raw="The literal value string.">常值字串。</returns>
    </member>
    <member name="P:System.Windows.Markup.XData.XmlReader">
      <summary vsli:raw="Gets or sets a reader for the literal data.">取得或設定常值資料的讀取器。</summary>
      <returns vsli:raw="A reader for the literal data.">常值資料的讀取器。</returns>
    </member>
    <member name="T:System.Windows.Markup.XmlLangPropertyAttribute">
      <summary vsli:raw="Identifies the property to associate with the xml:lang attribute.">識別要與 xml:lang 屬性 (Attribute) 產生關聯的屬性 (Property)。</summary>
    </member>
    <member name="M:System.Windows.Markup.XmlLangPropertyAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.XmlLangPropertyAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.XmlLangPropertyAttribute" /> 類別的新執行個體。</summary>
      <param name="name" vsli:raw="The property name to associate with the &lt;see langword=&quot;xml:lang&quot; /&gt; attribute.">要與 <see langword="xml:lang" /> 屬性 (Attribute) 產生關聯的屬性 (Property) 名稱。</param>
    </member>
    <member name="P:System.Windows.Markup.XmlLangPropertyAttribute.Name">
      <summary vsli:raw="Gets the name of the property that is specified in this attribute.">取得這個屬性 (Attribute) 中指定之屬性 (Property) 的名稱。</summary>
      <returns vsli:raw="The name of the property.">屬性的名稱。</returns>
    </member>
    <member name="T:System.Windows.Markup.XmlnsCompatibleWithAttribute">
      <summary vsli:raw="Specifies that a XAML namespace can be subsumed by another XAML namespace. Typically, the subsuming XAML namespace is indicated in a previously defined &lt;see cref=&quot;T:System.Windows.Markup.XmlnsDefinitionAttribute&quot; /&gt;.">指定某個 XAML 命名空間可以由另一個 XAML 命名空間來歸類。 一般會在預先定義的 <see cref="T:System.Windows.Markup.XmlnsDefinitionAttribute" /> 中指出建立小計的 XAML 命名空間。</summary>
    </member>
    <member name="M:System.Windows.Markup.XmlnsCompatibleWithAttribute.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.XmlnsCompatibleWithAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.XmlnsCompatibleWithAttribute" /> 類別的新執行個體。</summary>
      <param name="oldNamespace" vsli:raw="The reference XAML namespace identifier.">參考 XAML 命名空間識別項。</param>
      <param name="newNamespace" vsli:raw="The subsuming XAML namespace identifier.">歸類 XAML 命名空間識別項。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;oldNamespace&quot; /&gt; or &lt;paramref name=&quot;newNamespace&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="oldNamespace" /> 或 <paramref name="newNamespace" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Windows.Markup.XmlnsCompatibleWithAttribute.NewNamespace">
      <summary vsli:raw="Gets the subsuming namespace identifier reported by this attribute.">取得此屬性報告的歸類命名空間識別項。</summary>
      <returns vsli:raw="The subsuming namespace identifier reported in the attribute.">此屬性中報告的歸類命名空間識別項。</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsCompatibleWithAttribute.OldNamespace">
      <summary vsli:raw="Gets the reference namespace identifier reported by this attribute.">取得此屬性報告的參考命名空間識別項。</summary>
      <returns vsli:raw="The reference namespace identifier.">參考命名空間識別項。</returns>
    </member>
    <member name="T:System.Windows.Markup.XmlnsDefinitionAttribute">
      <summary vsli:raw="Specifies a mapping on a per-assembly basis between a XAML namespace and a CLR namespace, which is then used for type resolution by a XAML object writer or XAML schema context.">指定 XAML 命名空間和 CLR 命名空間之間以每個組件為基礎的對應，然後讓 XAML 物件寫入器或 XAML 結構描述內容用於類型解析。</summary>
    </member>
    <member name="M:System.Windows.Markup.XmlnsDefinitionAttribute.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.XmlnsDefinitionAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.XmlnsDefinitionAttribute" /> 類別的新執行個體。</summary>
      <param name="xmlNamespace" vsli:raw="The XAML namespace identifier.">XAML 命名空間識別項。</param>
      <param name="clrNamespace" vsli:raw="A string that references a CLR namespace name.">參考 CLR 命名空間名稱的字串。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xmlNamespace&quot; /&gt; or &lt;paramref name=&quot;clrNamespace&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xmlNamespace" /> 或 <paramref name="clrNamespace" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Windows.Markup.XmlnsDefinitionAttribute.AssemblyName">
      <summary vsli:raw="Gets or sets the name of the assembly associated with the attribute.">取得或設定與此屬性相關聯之組件的名稱。</summary>
      <returns vsli:raw="The assembly name.">組件名稱。</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsDefinitionAttribute.ClrNamespace">
      <summary vsli:raw="Gets the string name of the CLR namespace specified in this attribute.">取得此屬性中所指定 CLR 命名空間的字串名稱。</summary>
      <returns vsli:raw="The CLR namespace, specified as a string.">CLR 命名空間，指定為字串。</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsDefinitionAttribute.XmlNamespace">
      <summary vsli:raw="Gets the XAML namespace identifier specified in this attribute.">取得這個屬性中指定的 XAML 命名空間識別項。</summary>
      <returns vsli:raw="The XAML namespace identifier.">XAML 命名空間識別項。</returns>
    </member>
    <member name="T:System.Windows.Markup.XmlnsPrefixAttribute">
      <summary vsli:raw="Identifies a recommended prefix to associate with a XAML namespace for XAML usage, when writing elements and attributes in a XAML file (serialization) or when interacting with a design environment that has XAML editing features.">識別在 XAML 檔案中撰寫項目和屬性時 (序列化)，或與具有 XAML 編輯功能的設計環境互動時，要與 XAML 使用方式的 XAML 命名空間產生關聯的建議前置詞。</summary>
    </member>
    <member name="M:System.Windows.Markup.XmlnsPrefixAttribute.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.XmlnsPrefixAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.XmlnsPrefixAttribute" /> 類別的新執行個體。</summary>
      <param name="xmlNamespace" vsli:raw="The XAML namespace identifier.">XAML 命名空間識別項。</param>
      <param name="prefix" vsli:raw="The recommended prefix string.">建議的前置字串。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xmlNamespace&quot; /&gt; or &lt;paramref name=&quot;prefix&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xmlNamespace" /> 或 <paramref name="prefix" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Windows.Markup.XmlnsPrefixAttribute.Prefix">
      <summary vsli:raw="Gets the recommended prefix associated with this attribute.">取得與這個屬性相關聯的建議前置詞。</summary>
      <returns vsli:raw="The recommended prefix string.">建議的前置字串。</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsPrefixAttribute.XmlNamespace">
      <summary vsli:raw="Gets the XAML namespace identifier associated with this attribute.">取得與這個屬性相關聯的 XAML 命名空間識別項。</summary>
      <returns vsli:raw="The XAML namespace identifier.">XAML 命名空間識別項。</returns>
    </member>
    <member name="T:System.Xaml.AmbientPropertyValue">
      <summary vsli:raw="Reports information about an ambient property, as part of an &lt;see cref=&quot;T:System.Xaml.IAmbientProvider&quot; /&gt; implementation.">報告環境屬性的相關資訊，做為 <see cref="T:System.Xaml.IAmbientProvider" /> 實作的一部分。</summary>
    </member>
    <member name="M:System.Xaml.AmbientPropertyValue.#ctor(System.Xaml.XamlMember,System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.AmbientPropertyValue&quot; /&gt; class.">初始化 <see cref="T:System.Xaml.AmbientPropertyValue" /> 類別的新執行個體。</summary>
      <param name="property" vsli:raw="The identifier that represents the ambient property.">表示環境屬性的識別項。</param>
      <param name="value" vsli:raw="The value to report.">要報告的值。</param>
    </member>
    <member name="P:System.Xaml.AmbientPropertyValue.RetrievedProperty">
      <summary vsli:raw="Gets the XAML type system identifier (&lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;) that represents the ambient property.">取得表示環境屬性的 XAML 型別系統識別項 (<see cref="T:System.Xaml.XamlMember" />)。</summary>
      <returns vsli:raw="The identifier that represents the ambient property.">表示環境屬性的識別項。</returns>
    </member>
    <member name="P:System.Xaml.AmbientPropertyValue.Value">
      <summary vsli:raw="Gets the value of the ambient property.">取得環境屬性的值。</summary>
      <returns vsli:raw="The value of the ambient property.">環境屬性的值。</returns>
    </member>
    <member name="T:System.Xaml.AttachableMemberIdentifier">
      <summary vsli:raw="Provides a XAML type system identifier representation for attachable members. The identifier structure parallels the &lt;paramref name=&quot;declaringType&quot; /&gt;&lt;see langword=&quot;.&quot; /&gt;&lt;paramref name=&quot;memberName&quot; /&gt; string form for attachable member usage.">提供可附加成員的 XAML 型別系統識別項表示。 識別項結構會針對可附加成員用法平行處理 <paramref name="declaringType" /><see langword="." /><paramref name="memberName" /> 字串格式。</summary>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.#ctor(System.Type,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt; class.">初始化 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 類別的新執行個體。</summary>
      <param name="declaringType" vsli:raw="The &lt;paramref name=&quot;declaringType&quot; /&gt; component of the identifier, which should match the name of the declaring &lt;see cref=&quot;P:System.Xaml.XamlMember.Type&quot; /&gt;.">識別項的 <paramref name="declaringType" /> 元件，這個元件應該符合宣告 <see cref="P:System.Xaml.XamlMember.Type" /> 的名稱。</param>
      <param name="memberName" vsli:raw="The &lt;paramref name=&quot;memberName&quot; /&gt; component of the identifier, which should match the &lt;see cref=&quot;P:System.Xaml.XamlMember.Name&quot; /&gt;.">識別項的 <paramref name="memberName" /> 元件，這個元件應該符合 <see cref="P:System.Xaml.XamlMember.Name" />。</param>
    </member>
    <member name="P:System.Xaml.AttachableMemberIdentifier.DeclaringType">
      <summary vsli:raw="Gets or sets the &lt;paramref name=&quot;declaringType&quot; /&gt; component value of the &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt;.">取得或設定 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 的 <paramref name="declaringType" /> 元件值。</summary>
      <returns vsli:raw="The &lt;paramref name=&quot;declaringType&quot; /&gt; component value of the &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt;.">
        <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 的 <paramref name="declaringType" /> 元件值。</returns>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.Equals(System.Object)">
      <summary vsli:raw="Determines whether this instance of &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt; and a specified object have the same value.">判斷這個 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 執行個體和指定的物件是否具有相同的值。</summary>
      <param name="obj" vsli:raw="The object to compare with the current &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt;.">要與目前 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 比較的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is an &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt; and if its value is the same as this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="obj" /> 是 <see cref="T:System.Xaml.AttachableMemberIdentifier" />，且其值與這個執行個體相同，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.Equals(System.Xaml.AttachableMemberIdentifier)">
      <summary vsli:raw="Determines whether this instance and another specified &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt; object have the same value.">判斷這個執行個體和另一個指定的 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 物件是否具有相同的值。</summary>
      <param name="other" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt;.">與目前的 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 相比較的 <see cref="T:System.Xaml.AttachableMemberIdentifier" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the objects have the same value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果物件具有相同的值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.GetHashCode">
      <summary vsli:raw="Returns the hash code for this &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt;.">傳回這個 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 的雜湊程式碼。</summary>
      <returns vsli:raw="An integer hash code.">整數雜湊程式碼。</returns>
    </member>
    <member name="P:System.Xaml.AttachableMemberIdentifier.MemberName">
      <summary vsli:raw="Gets or sets the &lt;paramref name=&quot;memberName&quot; /&gt; component value of the &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt;.">取得或設定 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 的 <paramref name="memberName" /> 元件值。</summary>
      <returns vsli:raw="The &lt;paramref name=&quot;memberName&quot; /&gt; component value of the &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt;.">
        <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 的 <paramref name="memberName" /> 元件值。</returns>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.op_Equality(System.Xaml.AttachableMemberIdentifier,System.Xaml.AttachableMemberIdentifier)">
      <summary vsli:raw="Determines whether two specified &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt; objects have the same value.">判斷兩個指定的 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 物件是否具有相同的值。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 或 <see langword="null" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 或 <see langword="null" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of &lt;paramref name=&quot;left&quot; /&gt; is the same as the value of &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 的值與 <paramref name="left" /> 的值相同，則為 <paramref name="right" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.op_Inequality(System.Xaml.AttachableMemberIdentifier,System.Xaml.AttachableMemberIdentifier)">
      <summary vsli:raw="Determines whether two specified &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt; objects have different values.">判斷兩個指定的 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 物件是否具有不同的值。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 或 <see langword="null" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 或 <see langword="null" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of &lt;paramref name=&quot;left&quot; /&gt; differs from the value of &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="left" /> 的值與 <paramref name="right" /> 的值不同，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.ToString">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the current &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt;.">傳回表示目前 <see cref="T:System.String" /> 的 <see cref="T:System.Xaml.AttachableMemberIdentifier" /></summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the current &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt;.">
        <see cref="T:System.String" />，代表示目前的 <see cref="T:System.Xaml.AttachableMemberIdentifier" />。</returns>
    </member>
    <member name="T:System.Xaml.AttachablePropertyServices">
      <summary vsli:raw="Provides static helper methods that obtain values and accessor method information from an attachable property and that work with an attached property store.">提供靜態 Helper 方法，這些方法會從可附加屬性中取得值和存取子方法資訊，並使用附加的屬性存放區。</summary>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.CopyPropertiesTo(System.Object,System.Collections.Generic.KeyValuePair{System.Xaml.AttachableMemberIdentifier,System.Object}[],System.Int32)">
      <summary vsli:raw="Copies all attachable property/value pairs from a specified attachable property store and into a destination array.">從指定的可附加屬性存放區，將所有可附加的屬性值組複製到目的陣列中。</summary>
      <param name="instance" vsli:raw="A specific attachable property store that implements &lt;see cref=&quot;T:System.Xaml.IAttachedPropertyStore&quot; /&gt;; or any non-null object to access a static default attachable property store.">實作 <see cref="T:System.Xaml.IAttachedPropertyStore" /> 的特定可附加屬性存放區，或任何要存取靜態預設可附加屬性存放區的非 null 物件。</param>
      <param name="array" vsli:raw="The destination array. The array is a generic array, should be passed undimensioned, and should have components of &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt; and &lt;see langword=&quot;object&quot; /&gt;.">目的陣列。 這個陣列為泛型陣列，應該以無維度形式傳遞，且應該具有 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 和 <see langword="object" /> 的部分。</param>
      <param name="index" vsli:raw="The source index into which to copy.">要在其中進行複製的來源索引。</param>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.GetAttachedPropertyCount(System.Object)">
      <summary vsli:raw="Returns the count of the attachable property entries that are in the specified store.">傳回指定之存放區中可附加屬性項目的計數。</summary>
      <param name="instance" vsli:raw="A specific attachable property store that implements &lt;see cref=&quot;T:System.Xaml.IAttachedPropertyStore&quot; /&gt;; or any non-null object to access a static default attachable property store.">實作 <see cref="T:System.Xaml.IAttachedPropertyStore" /> 的特定可附加屬性存放區，或任何要存取靜態預設可附加屬性存放區的非 null 物件。</param>
      <returns vsli:raw="The integer count of entries in the store.">存放區中項目的整數計數。</returns>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.RemoveProperty(System.Object,System.Xaml.AttachableMemberIdentifier)">
      <summary vsli:raw="Removes the entry for the specified attachable property from the specified store.">從指定的存放區中，移除指定之可附加屬性的項目。</summary>
      <param name="instance" vsli:raw="A specific attachable property store that implements &lt;see cref=&quot;T:System.Xaml.IAttachedPropertyStore&quot; /&gt;; or any non-null object to access a static default attachable property store.">實作 <see cref="T:System.Xaml.IAttachedPropertyStore" /> 的特定可附加屬性存放區，或任何要存取靜態預設可附加屬性存放區的非 null 物件。</param>
      <param name="name" vsli:raw="The identifier for the attachable property entry to remove from the store.">要從存放區移除之可附加屬性項目的識別項。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an attachable property entry for &lt;paramref name=&quot;name&quot; /&gt; was found in the store and removed from it; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已在存放區中找到並移除 <paramref name="name" /> 的可附加屬性項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.SetProperty(System.Object,System.Xaml.AttachableMemberIdentifier,System.Object)">
      <summary vsli:raw="Sets a value for the specified attachable property in the specified store.">在指定的存放區中，設定指定之可附加屬性的值。</summary>
      <param name="instance" vsli:raw="A specific attachable property store that implements &lt;see cref=&quot;T:System.Xaml.IAttachedPropertyStore&quot; /&gt;; or any non-null object to use a static default attachable property store.">實作 <see cref="T:System.Xaml.IAttachedPropertyStore" /> 的特定可附加屬性存放區，或任何要使用靜態預設可附加屬性存放區的非 null 物件。</param>
      <param name="name" vsli:raw="The identifier of the attachable property entry for which to set a value.">要設定值之可附加屬性項目的識別項。</param>
      <param name="value" vsli:raw="The value to set.">要設定的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="A value could not be set in the store.">無法在存放區中設定值。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.TryGetProperty(System.Object,System.Xaml.AttachableMemberIdentifier,System.Object@)">
      <summary vsli:raw="Attempts to get a value for the specified attachable property in the specified store. Does not throw an exception if the specific attachable property does not exist in the store.">嘗試在指定的存放區中，取得指定之可附加屬性的值。 如果存放區中沒有特定的可附加屬性，則不要擲回例外狀況。</summary>
      <param name="instance" vsli:raw="A specific attachable property store that implements &lt;see cref=&quot;T:System.Xaml.IAttachedPropertyStore&quot; /&gt;; or any non-null object to use a static default attachable property store.">實作 <see cref="T:System.Xaml.IAttachedPropertyStore" /> 的特定可附加屬性存放區，或任何要使用靜態預設可附加屬性存放區的非 null 物件。</param>
      <param name="name" vsli:raw="The identifier of the attachable property entry for which to get a value.">要取得值之可附加屬性項目的識別項。</param>
      <param name="value" vsli:raw="Out parameter. When this method returns, contains the destination object for the value if &lt;paramref name=&quot;name&quot; /&gt; exists in the store and has a value.">Out 參數。 如果當這個方法傳回時，<paramref name="name" /> 存在存放區中且有一個值，則包含值的目的地物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an attachable property entry for &lt;paramref name=&quot;name&quot; /&gt; was found in the store and a value was posted to &lt;paramref name=&quot;value&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已在存放區中找到 <paramref name="name" /> 的可附加屬性項目，且值已張貼至 <paramref name="value" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.TryGetProperty``1(System.Object,System.Xaml.AttachableMemberIdentifier,``0@)">
      <summary vsli:raw="Attempts to get a value for the specified attachable property in the specified store, returning a generic output form. Does not throw an exception if the specific attachable property does not exist in the store.">嘗試在指定的存放區中取得指定之可附加屬性的值，並傳回泛型輸出格式。 如果存放區中沒有特定的可附加屬性，則不要擲回例外狀況。</summary>
      <param name="instance" vsli:raw="A specific attachable property store that implements &lt;see cref=&quot;T:System.Xaml.IAttachedPropertyStore&quot; /&gt;; or any non-null object to access a static default attachable property store.">實作 <see cref="T:System.Xaml.IAttachedPropertyStore" /> 的特定可附加屬性存放區，或任何要存取靜態預設可附加屬性存放區的非 null 物件。</param>
      <param name="name" vsli:raw="The identifier of the attachable property entry for which to get a value.">要取得值之可附加屬性項目的識別項。</param>
      <param name="value" vsli:raw="Out parameter. When this method returns, contains the destination object for the value if &lt;paramref name=&quot;name&quot; /&gt; exists in the store and has a value.">Out 參數。 如果當這個方法傳回時，<paramref name="name" /> 存在存放區中且有一個值，則包含值的目的地物件。</param>
      <typeparam name="T" vsli:raw="The expected type of the output.">預期的輸出型別。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an attachable property entry for &lt;paramref name=&quot;name&quot; /&gt; was found in the store and a value was posted to &lt;paramref name=&quot;value&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已在存放區中找到 <paramref name="name" /> 的可附加屬性項目，且值已張貼至 <paramref name="value" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Xaml.IAmbientProvider">
      <summary vsli:raw="Represents a service that can return information items about ambient properties or ambient types to type converters and markup extensions.">表示服務，這個服務可以將環境屬性或環境型別的資訊項目傳回給型別轉換器和標記延伸。</summary>
    </member>
    <member name="M:System.Xaml.IAmbientProvider.GetAllAmbientValues(System.Collections.Generic.IEnumerable{System.Xaml.XamlType},System.Boolean,System.Collections.Generic.IEnumerable{System.Xaml.XamlType},System.Xaml.XamlMember[])">
      <summary vsli:raw="Returns an enumerable set of ambient property information items for the requested set of types and properties.">針對要求的型別和屬性集，傳回環境屬性資訊項目的可列舉集。</summary>
      <param name="ceilingTypes" vsli:raw="Specifies one or more types that should stop the evaluation when they are encountered traversing upward in the object graph. This type holds the desired ambient property. May be &lt;see langword=&quot;null&quot; /&gt;.">指定一個或多個型別，當在物件圖形中往上周遊時遇到這些型別，即應該停止評估。 這個型別含有所需的環境屬性。 可以是 <see langword="null" />。</param>
      <param name="searchLiveStackOnly" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not use a saved context; &lt;see langword=&quot;false&quot; /&gt; to use a saved context. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示不使用已儲存的內容，<see langword="false" /> 表示使用已儲存的內容。 預設為 <see langword="false" />。</param>
      <param name="types" vsli:raw="Specifies one or more type identifier objects that identify the types to be considered ambient.">指定一個或多個型別識別項物件，識別要視為環境的型別。</param>
      <param name="properties" vsli:raw="Specifies one or more property identifier objects that identify the properties to be considered ambient.">指定一個或多個屬性識別項物件，這些物件識別要視為環境屬性的屬性。</param>
      <returns vsli:raw="An enumerable set of ambient property information items for the requested set of types and properties. The property information for each &lt;see cref=&quot;T:System.Xaml.AmbientPropertyValue&quot; /&gt; that is returned will match one of the input &lt;paramref name=&quot;types&quot; /&gt; or &lt;paramref name=&quot;properties&quot; /&gt;.">要求的型別和屬性集之環境屬性資訊項目的可列舉集。 每個傳回之 <see cref="T:System.Xaml.AmbientPropertyValue" /> 的屬性資訊都會符合其中一個輸入 <paramref name="types" /> 或 <paramref name="properties" />。</returns>
    </member>
    <member name="M:System.Xaml.IAmbientProvider.GetAllAmbientValues(System.Collections.Generic.IEnumerable{System.Xaml.XamlType},System.Xaml.XamlMember[])">
      <summary vsli:raw="Returns an enumerable set of ambient property information items for the requested set of properties.">針對要求的屬性集，傳回環境屬性資訊項目的可列舉集。</summary>
      <param name="ceilingTypes" vsli:raw="Specifies one or more types that should stop the evaluation when they are encountered traversing upward in the object graph. This type holds the desired ambient property. May be &lt;see langword=&quot;null&quot; /&gt;.">指定一個或多個型別，當在物件圖形中往上周遊時遇到這些型別，即應該停止評估。 這個型別含有所需的環境屬性。 可以是 <see langword="null" />。</param>
      <param name="properties" vsli:raw="Specifies one or more property identifier objects that identify the properties to be considered ambient.">指定一個或多個屬性識別項物件，這些物件識別要視為環境屬性的屬性。</param>
      <returns vsli:raw="An enumerable set of ambient property information items for the requested set of properties. The property information for each &lt;see cref=&quot;T:System.Xaml.AmbientPropertyValue&quot; /&gt; that is returned will match one of the input &lt;paramref name=&quot;properties&quot; /&gt;.">所要求屬性集之環境屬性資訊項目的可列舉集。 每個傳回之 <see cref="T:System.Xaml.AmbientPropertyValue" /> 的屬性資訊都會符合其中一個輸入 <paramref name="properties" />。</returns>
    </member>
    <member name="M:System.Xaml.IAmbientProvider.GetAllAmbientValues(System.Xaml.XamlType[])">
      <summary vsli:raw="Returns an enumerable set of object instances of possible ambient types for the requested types.">針對要求的型別，傳回可能環境型別之物件執行個體的可列舉集。</summary>
      <param name="types" vsli:raw="The set of types from which to retrieve ambient type information.">要從中擷取環境型別資訊的型別集。</param>
      <returns vsli:raw="An enumerable set of objects that represent the values for the requested set of &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; identifiers.">物件的可列舉集，表示所要求 <see cref="T:System.Xaml.XamlType" /> 識別項集的值。</returns>
    </member>
    <member name="M:System.Xaml.IAmbientProvider.GetFirstAmbientValue(System.Collections.Generic.IEnumerable{System.Xaml.XamlType},System.Xaml.XamlMember[])">
      <summary vsli:raw="Returns a single ambient property information item from the requested set of properties, based on which property is first encountered.">從要求的屬性集傳回單一環境屬性資訊項目，以第一個遇到的屬性為準。</summary>
      <param name="ceilingTypes" vsli:raw="Specifies one or more types that should stop the evaluation when they are encountered traversing upward in the object graph. This type holds the desired ambient property.">指定一個或多個型別，當在物件圖形中往上周遊時遇到這些型別，即應該停止評估。 這個型別含有所需的環境屬性。</param>
      <param name="properties" vsli:raw="Specifies one or more objects that identify the properties to be considered ambient.">指定一個或多個物件，這些物件識別要視為環境屬性的屬性。</param>
      <returns vsli:raw="A single ambient property information item for the first ambient property value from the &lt;paramref name=&quot;properties&quot; /&gt; list that is found.">在 <paramref name="properties" /> 清單中發現的第一個環境屬性值的單一環境屬性資訊項目。</returns>
    </member>
    <member name="M:System.Xaml.IAmbientProvider.GetFirstAmbientValue(System.Xaml.XamlType[])">
      <summary vsli:raw="Returns the first matching object that is a possible ambient type for the requested types.">傳回第一個相符物件，這個物件可能是符合所要求型別的環境型別。</summary>
      <param name="types" vsli:raw="The set of types from which to retrieve ambient type information.">要從中擷取環境型別資訊的型別集。</param>
      <returns vsli:raw="The first result object for the requested set.">所要求之集合的第一個結果物件。</returns>
    </member>
    <member name="T:System.Xaml.IAttachedPropertyStore">
      <summary vsli:raw="Represents an attachable member store for an object where attachable members are set. This attachable member store can then be referenced with &lt;see cref=&quot;T:System.Xaml.AttachablePropertyServices&quot; /&gt;.">表示物件 (其中設定了可附加成員) 的可附加成員存放區。 之後可以使用 <see cref="T:System.Xaml.AttachablePropertyServices" /> 參考這個可附加成員存放區。</summary>
    </member>
    <member name="M:System.Xaml.IAttachedPropertyStore.CopyPropertiesTo(System.Collections.Generic.KeyValuePair{System.Xaml.AttachableMemberIdentifier,System.Object}[],System.Int32)">
      <summary vsli:raw="Copies all attachable member/value pairs from this attachable member store into a destination array.">從這個可附加成員存放區，將所有可附加成員/值組複製到目的陣列中。</summary>
      <param name="array" vsli:raw="The destination array. The array is a generic array, should be passed undimensioned, and should have components of &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt; and &lt;see langword=&quot;object&quot; /&gt;.">目的陣列。 這個陣列為泛型陣列，應該以無維度形式傳遞，且應該具有 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 和 <see langword="object" /> 的部分。</param>
      <param name="index" vsli:raw="The source index where copying should begin.">要開始進行複製的來源索引處。</param>
    </member>
    <member name="P:System.Xaml.IAttachedPropertyStore.PropertyCount">
      <summary vsli:raw="Gets the count of the attachable member entries in this attachable member store.">取得這個可附加成員存放區中可附加成員項目的計數。</summary>
      <returns vsli:raw="The integer count of entries in the store.">存放區中項目的整數計數。</returns>
    </member>
    <member name="M:System.Xaml.IAttachedPropertyStore.RemoveProperty(System.Xaml.AttachableMemberIdentifier)">
      <summary vsli:raw="Removes the entry for the specified attachable member from this attachable member store.">從這個可附加成員存放區，移除指定之可附加成員的項目。</summary>
      <param name="attachableMemberIdentifier" vsli:raw="The XAML type system identifier for the attachable member entry to remove.">要移除之可附加成員項目的 XAML 型別系統識別項。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an attachable member entry for &lt;paramref name=&quot;attachableMemberIdentifier&quot; /&gt; was found in the store and removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已在存放區中找到並移除 <paramref name="attachableMemberIdentifier" /> 的可附加成員項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.IAttachedPropertyStore.SetProperty(System.Xaml.AttachableMemberIdentifier,System.Object)">
      <summary vsli:raw="Sets a value for the specified attachable member in the specified store.">在指定的存放區中，設定指定之可附加成員的值。</summary>
      <param name="attachableMemberIdentifier" vsli:raw="The XAML type system identifier for the attachable member entry to set.">要設定之可附加成員項目的 XAML 型別系統識別項。</param>
      <param name="value" vsli:raw="The value to set.">要設定的值。</param>
    </member>
    <member name="M:System.Xaml.IAttachedPropertyStore.TryGetProperty(System.Xaml.AttachableMemberIdentifier,System.Object@)">
      <summary vsli:raw="Attempts to get a value for the specified attachable member in the specified store.">嘗試在指定的存放區中，取得指定之可附加成員的值。</summary>
      <param name="attachableMemberIdentifier" vsli:raw="The XAML type system identifier for the attachable member entry to get.">要取得之可附加成員項目的 XAML 型別系統識別項。</param>
      <param name="value" vsli:raw="Out parameter. When this method returns, contains the destination object for the value if &lt;paramref name=&quot;attachableMemberIdentifier&quot; /&gt; exists in the store and has a value.">Out 參數。 如果當這個方法傳回時，<paramref name="attachableMemberIdentifier" /> 存在存放區中且有一個值，則包含值的目的地物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an attachable member entry for &lt;paramref name=&quot;attachableMemberIdentifier&quot; /&gt; was found in the store and a value was posted to &lt;paramref name=&quot;value&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已在存放區中找到 <paramref name="attachableMemberIdentifier" /> 的可附加成員項目，且值已張貼至 <paramref name="value" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Xaml.IDestinationTypeProvider">
      <summary vsli:raw="Represents a service that can return a CLR type system identifier for the destination type. The destination type is relevant when the destination type for a property-setting operation is indirectly reported by reflection or other mechanisms.">表示服務，這個服務可以傳回目的型別的 CLR 型別系統識別項。 當屬性設定作業的目的型別是透過反映或其他機制間接報告時，目的型別就顯得很重要。</summary>
    </member>
    <member name="M:System.Xaml.IDestinationTypeProvider.GetDestinationType">
      <summary vsli:raw="Returns the CLR &lt;see cref=&quot;T:System.Type&quot; /&gt; that identifies the destination type for the relevant type converter or markup extension.">傳回 CLR <see cref="T:System.Type" />，這個項目識別相關型別轉換器或標記延伸的目的型別。</summary>
      <returns vsli:raw="A CLR &lt;see cref=&quot;T:System.Type&quot; /&gt; value for the destination type.">目的型別的 CLR <see cref="T:System.Type" /> 值。</returns>
    </member>
    <member name="T:System.Xaml.INamespacePrefixLookup">
      <summary vsli:raw="Represents a service that can return the recommended prefix for a XAML namespace mapping to consumers. Consumers might include design environments or serializers.">表示服務，這個服務可以將 XAML 命名空間對應的建議前置詞傳回給消費者。 消費者可能包括設計環境或序列化程式。</summary>
    </member>
    <member name="M:System.Xaml.INamespacePrefixLookup.LookupPrefix(System.String)">
      <summary vsli:raw="Returns the recommended prefix for a specified XAML namespace identifier.">傳回指定之 XAML 命名空間識別項的建議前置詞。</summary>
      <param name="ns" vsli:raw="The XAML namespace identifier string for which to obtain a prefix.">要取得前置詞的 XAML 命名空間識別項字串。</param>
      <returns vsli:raw="The recommended prefix.">建議的前置字元。</returns>
    </member>
    <member name="T:System.Xaml.IRootObjectProvider">
      <summary vsli:raw="Describes a service that can return the root object of markup being parsed.">描述服務，此服務可以傳回正在剖析之標記的根物件。</summary>
    </member>
    <member name="P:System.Xaml.IRootObjectProvider.RootObject">
      <summary vsli:raw="Gets the root object from markup or from an object graph.">從標記或從物件圖形取得根物件。</summary>
      <returns vsli:raw="The root object.">根物件。</returns>
    </member>
    <member name="T:System.Xaml.IXamlIndexingReader">
      <summary vsli:raw="Provides a service that represents indexed node control for a simple implementation of a node-based XAML reader.">針對節點型 XAML 讀取器的簡單實作，提供表示索引節點控制的服務。</summary>
    </member>
    <member name="P:System.Xaml.IXamlIndexingReader.Count">
      <summary vsli:raw="Gets the number of nodes in the current external node set.">取得目前外部節點集中的節點數。</summary>
      <returns vsli:raw="The number of nodes in the current external node set.">目前外部節點集中的節點數。</returns>
    </member>
    <member name="P:System.Xaml.IXamlIndexingReader.CurrentIndex">
      <summary vsli:raw="Gets or sets the index number of the current reader position for the indexed list view of XAML nodes.">取得或設定在 XAML 節點索引清單檢視中，目前讀取器位置的索引編號。</summary>
      <returns vsli:raw="The index number of the current reader position.">目前讀取器位置的索引編號。</returns>
    </member>
    <member name="T:System.Xaml.IXamlLineInfo">
      <summary vsli:raw="Describes a service for reporting text line information in XAML reader implementations.">描述可在 XAML 讀取器實作中報告文字行資訊的服務。</summary>
    </member>
    <member name="P:System.Xaml.IXamlLineInfo.HasLineInfo">
      <summary vsli:raw="Gets a value that specifies whether line information is available.">取得值，這個值指定行資訊是否可供使用。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if line information is available; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果有可用的行資訊則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.IXamlLineInfo.LineNumber">
      <summary vsli:raw="Gets the line number to report.">取得要報告的行號。</summary>
      <returns vsli:raw="The line number to report.">要報告的行號。</returns>
    </member>
    <member name="P:System.Xaml.IXamlLineInfo.LinePosition">
      <summary vsli:raw="Gets the line position to report.">取得要報告的行位置。</summary>
      <returns vsli:raw="The line position to report.">要報告的行位置。</returns>
    </member>
    <member name="T:System.Xaml.IXamlLineInfoConsumer">
      <summary vsli:raw="Describes a service where a XAML writer can use reported line information and then include the information in the output.">描述服務，這項服務可供 XAML 寫入器使用所報告的行資訊，然後在輸出中納入此資訊。</summary>
    </member>
    <member name="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)">
      <summary vsli:raw="Collects line information.">收集行資訊。</summary>
      <param name="lineNumber" vsli:raw="The line number to use in the output.">要在輸出中使用的行號。</param>
      <param name="linePosition" vsli:raw="The line position to use in the output.">要在輸出中使用的行位置。</param>
    </member>
    <member name="P:System.Xaml.IXamlLineInfoConsumer.ShouldProvideLineInfo">
      <summary vsli:raw="Gets a value that determines whether a line information service should provide values and therefore, should also call &lt;see cref=&quot;M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)&quot; /&gt; when relevant.">取得值，這個值決定行資訊服務是否應該提供值 (因此也應該在必要時呼叫 <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" />)。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if line information is used by the implementation; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果實作會使用行資訊，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Xaml.IXamlNameProvider">
      <summary vsli:raw="Provides a service that is used during save and write operations to input an object and return a XAML name.">提供服務，這個服務會在儲存及寫入作業期間用來輸入物件和傳回 XAML 名稱。</summary>
    </member>
    <member name="M:System.Xaml.IXamlNameProvider.GetName(System.Object)">
      <summary vsli:raw="Retrieves the XAML name of the specified object.">擷取指定物件的 XAML 名稱。</summary>
      <param name="value" vsli:raw="The object to get the name for.">要取得名稱的物件。</param>
      <returns vsli:raw="The XAML name value of the requested object.">要求之物件的 XAML 名稱值。</returns>
    </member>
    <member name="T:System.Xaml.IXamlNameResolver">
      <summary vsli:raw="Describes a service that can return objects that are specified by XAML name, or alternatively, returns a token that defers name resolution. The service can also return an enumerable set of all named objects that are in the XAML namescope.">描述服務，這個服務可以傳回依 XAML 名稱指定的物件，或傳回會延後名稱解析的語彙基元。 該服務也可以傳回 XAML 名稱範圍中所有具名物件的可列舉集。</summary>
    </member>
    <member name="M:System.Xaml.IXamlNameResolver.GetAllNamesAndValuesInScope">
      <summary vsli:raw="Returns an enumerable set of all named objects in the XAML namescope.">傳回 XAML 名稱範圍中所有具名物件的可列舉集。</summary>
      <returns vsli:raw="An enumerable set of &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; objects. For each &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt;, the &lt;see cref=&quot;P:System.Collections.Generic.KeyValuePair`2.Key&quot; /&gt; component is a string, and the &lt;see cref=&quot;P:System.Collections.Generic.KeyValuePair`2.Value&quot; /&gt; component is the object that uses the &lt;see cref=&quot;P:System.Collections.Generic.KeyValuePair`2.Key&quot; /&gt; name in the XAML namescope.">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 物件的可列舉集。 在每個 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 中，<see cref="P:System.Collections.Generic.KeyValuePair`2.Key" /> 部分是字串，而 <see cref="P:System.Collections.Generic.KeyValuePair`2.Value" /> 部分是在 XAML 名稱範圍中使用 <see cref="P:System.Collections.Generic.KeyValuePair`2.Key" /> 名稱的部分。</returns>
    </member>
    <member name="M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Collections.Generic.IEnumerable{System.String})">
      <summary vsli:raw="Returns an object that can correct for certain markup patterns that produce forward references.">傳回可修正會產生向前參考之特定標記模式的物件。</summary>
      <param name="names" vsli:raw="A collection of names that are possible forward references.">可能之向前參考的名稱集合。</param>
      <returns vsli:raw="An object that provides a token for lookup behavior to be evaluated later.">物件，提供將進行評估之查詢行為的語彙基元。</returns>
    </member>
    <member name="M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
      <summary vsli:raw="Returns an object that can correct for certain markup patterns that produce forward references.">傳回可修正會產生向前參考之特定標記模式的物件。</summary>
      <param name="names" vsli:raw="A collection of names that are possible forward references.">可能之向前參考的名稱集合。</param>
      <param name="canAssignDirectly" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to immediately assign the resolved name reference to the target property. &lt;see langword=&quot;false&quot; /&gt; to call the user code for a reparse. The default behavior is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示立即將已解析的名稱參考指派給目標屬性。 <see langword="false" /> 表示呼叫使用者程式碼以重新剖析。 預設行為是 <see langword="false" />。</param>
      <returns vsli:raw="An object that provides a token for lookup behavior to be evaluated later.">物件，提供將進行評估之查詢行為的語彙基元。</returns>
    </member>
    <member name="P:System.Xaml.IXamlNameResolver.IsFixupTokenAvailable">
      <summary vsli:raw="Gets a value that determines whether calling &lt;see cref=&quot;M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Collections.Generic.IEnumerable{System.String},System.Boolean)&quot; /&gt; is available in order to resolve a name into a token for forward resolution.">取得值，這個值判斷是否可以呼叫 <see cref="M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Collections.Generic.IEnumerable{System.String},System.Boolean)" />，以便將名稱解析為正向解析的語彙基元。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Collections.Generic.IEnumerable{System.String},System.Boolean)&quot; /&gt; is available as an implementation that returns a useful token for forward resolution; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果有 <see cref="M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Collections.Generic.IEnumerable{System.String},System.Boolean)" /> 可實作來傳回正向解析的有用語彙基元，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="E:System.Xaml.IXamlNameResolver.OnNameScopeInitializationComplete">
      <summary vsli:raw="Occurs when a XAML processor has registered all the relevant names to the backing XAML namescope.">發生於 XAML 處理器已將所有相關名稱註冊至支援 XAML 名稱範圍中時。</summary>
    </member>
    <member name="M:System.Xaml.IXamlNameResolver.Resolve(System.String)">
      <summary vsli:raw="Resolves an object from a name reference.">從名稱參考解析物件。</summary>
      <param name="name" vsli:raw="The name reference to resolve.">要解析的名稱參考。</param>
      <returns vsli:raw="The resolved object; or null.">已解析的物件，或是 null。</returns>
    </member>
    <member name="M:System.Xaml.IXamlNameResolver.Resolve(System.String,System.Boolean@)">
      <summary vsli:raw="Resolves an object from a name reference, and provides a tracking value that reports whether the object is fully initialized for object graph purposes.">從名稱參考來解析物件，並提供追蹤值，報告是否已針對物件圖形用途完整初始化物件。</summary>
      <param name="name" vsli:raw="The name reference to resolve.">要解析的名稱參考。</param>
      <param name="isFullyInitialized" vsli:raw="When this method returns, &lt;see langword=&quot;true&quot; /&gt; if the returned object has any dependencies on unresolved references; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果當這個方法傳回時，傳回的物件對未解析的參考具有任何相依性，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <returns vsli:raw="An object that provides a token for lookup behavior to be evaluated later.">物件，提供將進行評估之查詢行為的語彙基元。</returns>
    </member>
    <member name="T:System.Xaml.IXamlNamespaceResolver">
      <summary vsli:raw="Describes a service that can return a XAML namespace that is based on its prefix as it is mapped in XAML markup.">描述服務，這項服務可以傳回以 XAML 標記中對應的前置詞為基礎的 XAML 命名空間。</summary>
    </member>
    <member name="M:System.Xaml.IXamlNamespaceResolver.GetNamespace(System.String)">
      <summary vsli:raw="Retrieves a XAML namespace identifier for the specified prefix string.">針對指定的前置字串擷取 XAML 命名空間識別項。</summary>
      <param name="prefix" vsli:raw="The prefix for which to retrieve the XAML namespace information.">要擷取 XAML 命名空間資訊的前置詞。</param>
      <returns vsli:raw="The requested XAML namespace identifier, as a string.">所要求的 XAML 命名空間識別項 (字串形式)。</returns>
    </member>
    <member name="M:System.Xaml.IXamlNamespaceResolver.GetNamespacePrefixes">
      <summary vsli:raw="Returns all the possible prefix-to-XAML namespace mappings (&lt;see cref=&quot;T:System.Xaml.NamespaceDeclaration&quot; /&gt; values) that are available in the active XAML schema context.">傳回作用中 XAML 結構描述內容中所有可能的前置詞對 XAML 命名空間對應 (<see cref="T:System.Xaml.NamespaceDeclaration" /> 值)。</summary>
      <returns vsli:raw="An enumerable set of &lt;see cref=&quot;T:System.Xaml.NamespaceDeclaration&quot; /&gt; values. To get all the prefix strings, get the &lt;see cref=&quot;P:System.Xaml.NamespaceDeclaration.Prefix&quot; /&gt; value from each value in the returned set. To get prefixes for specific XAML namespaces, process any return value that has the desired &lt;see cref=&quot;P:System.Xaml.NamespaceDeclaration.Namespace&quot; /&gt; value.">
        <see cref="T:System.Xaml.NamespaceDeclaration" /> 值的可列舉集合。 若要取得所有前置字串，請從傳回之集合中的每個值取得 <see cref="P:System.Xaml.NamespaceDeclaration.Prefix" /> 值。 若要取得特定 XAML 命名空間的前置詞，請處理任何具有所需 <see cref="P:System.Xaml.NamespaceDeclaration.Namespace" /> 值的傳回值。</returns>
    </member>
    <member name="T:System.Xaml.IXamlObjectWriterFactory">
      <summary vsli:raw="Represents a service that generates a &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt; that is based on the current internal parser context.">表示會根據目前內部剖析器內容來產生 <see cref="T:System.Xaml.XamlObjectWriter" /> 的服務。</summary>
    </member>
    <member name="M:System.Xaml.IXamlObjectWriterFactory.GetParentSettings">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.Xaml.XamlObjectWriterSettings&quot; /&gt; from the original internal parser context.">從原始內部剖析器內容傳回 <see cref="T:System.Xaml.XamlObjectWriterSettings" />。</summary>
      <returns vsli:raw="The settings from the original internal parser context.">來自原始內部剖析器內容的設定。</returns>
    </member>
    <member name="M:System.Xaml.IXamlObjectWriterFactory.GetXamlObjectWriter(System.Xaml.XamlObjectWriterSettings)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt; that is based on active XAML schema context.">傳回以作用中 XAML 結構描述內容為基礎的 <see cref="T:System.Xaml.XamlObjectWriter" />。</summary>
      <param name="settings" vsli:raw="The settings to use for construction and initialization of the &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt;.">用於建構和初始化 <see cref="T:System.Xaml.XamlObjectWriter" /> 的設定。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt; that has the specified settings.">具有指定之設定的 <see cref="T:System.Xaml.XamlObjectWriter" />。</returns>
    </member>
    <member name="T:System.Xaml.IXamlSchemaContextProvider">
      <summary vsli:raw="Represents a service that provides XAML schema context information to type converters and markup extensions.">表示服務，這個服務會將 XAML 結構描述內容資訊提供給型別轉換器和標記延伸。</summary>
    </member>
    <member name="P:System.Xaml.IXamlSchemaContextProvider.SchemaContext">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt; that is reported by the service context.">取得服務內容所報告的 <see cref="T:System.Xaml.XamlSchemaContext" />。</summary>
      <returns vsli:raw="The XAML schema context that is reported by the service context.">服務內容所報告的 XAML 結構描述內容。</returns>
    </member>
    <member name="T:System.Xaml.NamespaceDeclaration">
      <summary vsli:raw="Declares the identifier and the prefix of a XAML namespace by storing these string values as separate properties.">宣告 XAML 命名空間的識別項和前置詞 (宣告的方式是將這些字串儲存為個別屬性)。</summary>
    </member>
    <member name="M:System.Xaml.NamespaceDeclaration.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.NamespaceDeclaration&quot; /&gt; class using initial property values.">使用初始屬性值，初始化 <see cref="T:System.Xaml.NamespaceDeclaration" /> 類別的新執行個體。</summary>
      <param name="ns" vsli:raw="The XAML namespace identifier, as a string.">字串形式的 XAML 命名空間識別項。</param>
      <param name="prefix" vsli:raw="The string prefix that is used for the namespace in prefix mappings.">在前置詞對應中用於命名空間的字串前置詞。</param>
    </member>
    <member name="P:System.Xaml.NamespaceDeclaration.Namespace">
      <summary vsli:raw="Gets the identifier component of a &lt;see cref=&quot;T:System.Xaml.NamespaceDeclaration&quot; /&gt;.">取得 <see cref="T:System.Xaml.NamespaceDeclaration" /> 的識別項部分。</summary>
      <returns vsli:raw="The identifier of the XAML namespace declaration.">XAML 命名空間宣告的識別項。</returns>
    </member>
    <member name="P:System.Xaml.NamespaceDeclaration.Prefix">
      <summary vsli:raw="Gets the prefix that is used as the XAML namespace mapping prefix for a &lt;see cref=&quot;T:System.Xaml.NamespaceDeclaration&quot; /&gt;.">取得前置詞，這個前置詞會做為 <see cref="T:System.Xaml.NamespaceDeclaration" /> 的 XAML 命名空間對應前置詞。</summary>
      <returns vsli:raw="The prefix string for this &lt;see cref=&quot;T:System.Xaml.NamespaceDeclaration&quot; /&gt;.">這個 <see cref="T:System.Xaml.NamespaceDeclaration" /> 的前置字串。</returns>
    </member>
    <member name="T:System.Xaml.Permissions.XamlAccessLevel">
      <summary>針對 XAML 載入目的，定義組件和型別的存取控制。</summary>
    </member>
    <member name="M:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessTo(System.Reflection.Assembly)">
      <summary>根據 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 所要求的組件傳回 <see cref="T:System.Reflection.Assembly" /> 執行個體。</summary>
      <param name="assembly">要求的組件。</param>
      <returns>
        <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 執行個體，其中使用 <paramref name="assembly" /> 值做為 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" /> 的來源資訊。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assembly" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessTo(System.Reflection.AssemblyName)">
      <summary>根據 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 所要求的組件傳回 <see cref="T:System.Reflection.AssemblyName" /> 執行個體。</summary>
      <param name="assemblyName">要求的組件名稱。</param>
      <returns>
        <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 執行個體，其中使用 <paramref name="assemblyName" /> 值做為 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" /> 的來源資訊。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyName" /> 不是有效的完整組件名稱。</exception>
    </member>
    <member name="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName">
      <summary>取得組件的 <see cref="T:System.Reflection.AssemblyName" />，這個 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 會決定此組件的使用權限。</summary>
      <returns>組件的 <see cref="T:System.Reflection.AssemblyName" />，這個 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 會決定此組件的使用權限。</returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessTo(System.String)">
      <summary>根據以限定名稱指定的特定型別，傳回 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 執行個體。</summary>
      <param name="assemblyQualifiedTypeName">剖析為組件限定型別名稱的字串。</param>
      <returns>
        <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 執行個體，其中使用 <paramref name="assemblyQualifiedTypeName" /> 值做為 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessToTypeName" /> 的來源資訊，並由型別上的反映來決定 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyQualifiedTypeName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyQualifiedTypeName" /> 不是有效的組件限定型別名稱。
-或-
<paramref name="assemblyQualifiedTypeName" /> 內的組件名稱不是有效的組件名稱。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessTo(System.Type)">
      <summary>根據 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 所指定的特定型別，傳回 <see cref="T:System.Type" /> 執行個體。</summary>
      <param name="type">要求存取的 <see cref="T:System.Type" />。</param>
      <returns>
        <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 執行個體，其中使用 <paramref name="type" /> 值做為 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessToTypeName" /> 的來源資訊，並由型別上的反映來決定 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessToTypeName">
      <summary>取得型別的未限定字串名稱，這個 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 會決定此型別的使用權限。</summary>
      <returns>型別的未限定字串名稱，這個 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 會決定此型別的使用權限。</returns>
    </member>
    <member name="T:System.Xaml.Permissions.XamlLoadPermission">
      <summary>針對從 XAML 讀取器或寫入器使用的組件中載入型別，宣告使用權限。</summary>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.#ctor(System.Collections.Generic.IEnumerable{System.Xaml.Permissions.XamlAccessLevel})">
      <summary>使用特定 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 值的可列舉集合，初始化 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 類別的新執行個體。</summary>
      <param name="allowedAccess">特定 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 值的可舉列集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="allowedAccess" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="allowedAccess" /> 包含無效的資訊，例如 Null 項目。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>使用現有的使用權限，初始化 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 類別的新執行個體。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 列舉值。</param>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.#ctor(System.Xaml.Permissions.XamlAccessLevel)">
      <summary>使用單一 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 值，初始化 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 類別的新執行個體。</summary>
      <param name="allowedAccess">定義性的 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="allowedAccess" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xaml.Permissions.XamlLoadPermission.AllowedAccess">
      <summary>取得這個 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 表示的所有 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 值的清單。</summary>
      <returns>
        <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 值的唯讀清單，或 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.Copy">
      <summary>建立並傳回目前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 的相同複本。</summary>
      <returns>目前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 的複本。</returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.Equals(System.Object)">
      <param name="obj" />
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.FromXml(System.Security.SecurityElement)">
      <summary>透過 XML 編碼，重新建構具有指定狀態的安全性物件。</summary>
      <param name="elem">用來重新建構安全性物件的 XML 編碼方式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elem" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elem" /> 不包含 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 的 XML 編碼方式。
-或-
不支援內 <paramref name="elem" /> 的版本屬性。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.GetHashCode" />
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.Includes(System.Xaml.Permissions.XamlAccessLevel)">
      <summary>傳回這個 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 的 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 清單中是否包括指定的 <see cref="P:System.Xaml.Permissions.XamlLoadPermission.AllowedAccess" />。</summary>
      <param name="requestedAccess">要檢查的特定 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />。</param>
      <returns>如果 <paramref name="requestedAccess" /> 是目前 <see cref="P:System.Xaml.Permissions.XamlLoadPermission.AllowedAccess" /> 的 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 清單中的項目，則為 <see langword="true" />。 否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestedAccess" /> 為 null。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.Intersect(System.Security.IPermission)">
      <summary>建立並傳回目前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 和指定之使用權限交集而成的 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />。</summary>
      <param name="target">要與目前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 交集的 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />。 可以是 <see langword="null" />。</param>
      <returns>新的使用權限，表示目前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 和指定之 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 的交集。 如果交集是空的，這個新權限就是 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 是 <see langword="null" /> 或不是 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>判斷目前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 是否為指定之使用權限的子集。</summary>
      <param name="target">要測試子集關聯性的權限。 可以是 <see langword="null" />。</param>
      <returns>如果目前的 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 是指定之使用權限的子集，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 是 <see langword="null" /> 或不是 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.IsUnrestricted">
      <summary>傳回這個 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 是否代表不受限制的使用權限。</summary>
      <returns>如果這個 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 代表不受限制的使用權限，則為 <see langword="true" />。 如果這個 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 在 <see cref="P:System.Xaml.Permissions.XamlLoadPermission.AllowedAccess" /> 中有特定的存取層級限制，或沒有使用權限，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.ToXml">
      <summary>建立這個 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 和其目前狀態的 XML 編碼。</summary>
      <returns>這個 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 的 XML 編碼，包含任何狀態資訊。</returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.Union(System.Security.IPermission)">
      <summary>建立目前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 和指定之使用權限聯集而成的使用權限。</summary>
      <param name="other">要與目前的 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 結合的 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />。 可以是 <see langword="null" />。</param>
      <returns>新 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />，表示目前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 和指定 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 的聯集。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 是 <see langword="null" /> 或不是 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />。</exception>
    </member>
    <member name="T:System.Xaml.Schema.AllowedMemberLocations">
      <summary vsli:raw="Specifies the syntax restrictions enforced on a property when it is set in XAML, as reported by a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt;.">指定在 XAML 中設定屬性時，在屬性上強制執行的語法限制 (如 <see cref="T:System.Xaml.XamlDirective" /> 所報告)。</summary>
    </member>
    <member name="F:System.Xaml.Schema.AllowedMemberLocations.Any">
      <summary vsli:raw="Property can be set in either &lt;see cref=&quot;F:System.Xaml.Schema.AllowedMemberLocations.Attribute&quot; /&gt; or &lt;see cref=&quot;F:System.Xaml.Schema.AllowedMemberLocations.MemberElement&quot; /&gt; location. (This enumeration member is defined as the combination of those values.)">可以在 <see cref="F:System.Xaml.Schema.AllowedMemberLocations.Attribute" /> 或 <see cref="F:System.Xaml.Schema.AllowedMemberLocations.MemberElement" /> 位置中設定屬性 (這個列舉成員是定義為這些值的組合)。 (這個列舉成員已定義為這些值的組合)。</summary>
    </member>
    <member name="F:System.Xaml.Schema.AllowedMemberLocations.Attribute">
      <summary vsli:raw="Property can be set in XAML attribute syntax.">可以在 XAML 屬性 (Attribute) 語法中設定屬性 (Property)。</summary>
    </member>
    <member name="F:System.Xaml.Schema.AllowedMemberLocations.MemberElement">
      <summary vsli:raw="Property can be set in XAML property element syntax.">可以在 XAML 屬性項目語法中設定屬性。</summary>
    </member>
    <member name="F:System.Xaml.Schema.AllowedMemberLocations.None">
      <summary vsli:raw="Property cannot be set in XAML at all. This is the default.">完全無法在 XAML 中設定屬性。 這是預設值。</summary>
    </member>
    <member name="T:System.Xaml.Schema.ShouldSerializeResult">
      <summary vsli:raw="Defines serialization behavior as reported by a &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt;.">定義 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 會報告的序列化行為。</summary>
    </member>
    <member name="F:System.Xaml.Schema.ShouldSerializeResult.Default">
      <summary vsli:raw="Unknown, defer to the type of the member.">未知，由成員的型別決定。</summary>
    </member>
    <member name="F:System.Xaml.Schema.ShouldSerializeResult.False">
      <summary vsli:raw="Do not serialize the result.">不要序列化結果。</summary>
    </member>
    <member name="F:System.Xaml.Schema.ShouldSerializeResult.True">
      <summary vsli:raw="Serialize the result.">序列化結果。</summary>
    </member>
    <member name="T:System.Xaml.Schema.XamlCollectionKind">
      <summary vsli:raw="Describes the collection metaphor (if any) used by a XAML member.">描述 XAML 成員使用的集合比喻 (如果有的話)。</summary>
    </member>
    <member name="F:System.Xaml.Schema.XamlCollectionKind.Array">
      <summary vsli:raw="XAML member supports an array collection.">XAML 成員支援陣列集合。</summary>
    </member>
    <member name="F:System.Xaml.Schema.XamlCollectionKind.Collection">
      <summary vsli:raw="XAML member supports a list or a collection.">XAML 成員支援清單或集合。</summary>
    </member>
    <member name="F:System.Xaml.Schema.XamlCollectionKind.Dictionary">
      <summary vsli:raw="XAML member supports a dictionary (key-value pairs).">XAML 成員支援字典 (機碼值組)。</summary>
    </member>
    <member name="F:System.Xaml.Schema.XamlCollectionKind.None">
      <summary vsli:raw="XAML member does not support a collection.">XAML 成員不支援集合。</summary>
    </member>
    <member name="T:System.Xaml.Schema.XamlMemberInvoker">
      <summary vsli:raw="Provides an extension point that can access member characteristics of a XAML member through techniques other than reflection.">提供延伸點，這個延伸點可透過反映以外的技術來存取 XAML 成員的成員特性。</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlMemberInvoker.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; class.">初始化 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlMemberInvoker.#ctor(System.Xaml.XamlMember)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; class, based on a provided &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">根據提供的 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />，初始化 <see cref="T:System.Xaml.XamlMember" /> 類別的新執行個體。</summary>
      <param name="member" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; value for the specific XAML member relevant to this &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt;.">特定 XAML 成員與這個 <see cref="T:System.Xaml.XamlMember" /> 相關的 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 值。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="member" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlMemberInvoker.GetValue(System.Object)">
      <summary vsli:raw="Gets a value of the relevant property from an instance.">從執行個體取得相關屬性的值。</summary>
      <param name="instance" vsli:raw="An instance of the owner type for the member.">成員的擁有者型別執行個體。</param>
      <returns vsli:raw="The requested property value.">要求的屬性值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="Invoked this method on a &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; that is based on an unknown &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; Invoked this method on a write-only member.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see cref=&quot;P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">在以未知 <see cref="T:System.Xaml.XamlMember" /> 為根據的 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 上，叫用這個方法。
-或-
在唯寫成員上叫用這個方法。
-或-
<see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlMemberInvoker.SetValue(System.Object,System.Object)">
      <summary vsli:raw="Sets a value of the relevant property on an instance.">設定執行個體上相關屬性的值。</summary>
      <param name="instance" vsli:raw="An instance of the owner type for the member.">成員的擁有者型別執行個體。</param>
      <param name="value" vsli:raw="The property value to set.">要設定的屬性值。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="Invoked this method on a &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; that is based on an unknown &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; Invoked this method on a read-only member.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see cref=&quot;P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">在以未知 <see cref="T:System.Xaml.XamlMember" /> 為根據的 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 上，叫用這個方法。
-或-
在唯讀成員上叫用這個方法。
-或-
<see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlMemberInvoker.ShouldSerializeValue(System.Object)">
      <summary vsli:raw="Indicates whether the value needs to be persisted by serialization processes.">表示值是否需要由序列化處理序保存。</summary>
      <param name="instance" vsli:raw="The instance with the property to be examined for persistence.">執行個體，具有需要檢查持續性的屬性。</param>
      <returns vsli:raw="A value of the enumeration.">列舉值。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; for the CLR method that gets values for the property that is relevant for this &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt;.">取得 CLR 方法的 <see cref="T:System.Reflection.MethodInfo" />，這個方法會取得與此 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 相關之屬性的值。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; for the CLR method that gets values for the property that is relevant for this &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt;.">CLR 方法的 <see cref="T:System.Reflection.MethodInfo" />，這個方法會取得與此 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 相關之屬性的值，或 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; for the CLR method that sets values for the property that is relevant for this &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt;.">取得 CLR 方法的 <see cref="T:System.Reflection.MethodInfo" />，這個方法會設定與此 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 相關之屬性的值。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; for the CLR method that sets values for the property that is relevant for this &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt;.">CLR 方法的 <see cref="T:System.Reflection.MethodInfo" />，這個方法會設定與此 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 相關之屬性的值，或 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker">
      <summary vsli:raw="Provides a static value that represents an unknown, not fully implemented &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt;.">提供靜態值，這個值表示未完整實作的未知 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />。</summary>
      <returns vsli:raw="A static value that represents an unknown, not fully implemented &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt;.">靜態值，表示未完整實作的未知 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />。</returns>
    </member>
    <member name="T:System.Xaml.Schema.XamlTypeInvoker">
      <summary vsli:raw="Provides an extension point that can construct instances of a XAML type through techniques other than reflection and constructors.">提供延伸點，這個延伸點可透過反映和建構函式以外的技術來建構 XAML 型別的執行個體。</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt; class.">初始化 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt; class, based on a provided &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">根據提供的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />，初始化 <see cref="T:System.Xaml.XamlType" /> 類別的新執行個體。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; value for the specific XAML type relevant to this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt;.">特定 XAML 型別與這個 <see cref="T:System.Xaml.XamlType" /> 相關的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 值。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
      <summary vsli:raw="Adds the provided item to an instance of the type that is relevant to this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt;.">將提供的項目加入至與這個 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 相關之類型的執行個體。</summary>
      <param name="instance" vsli:raw="An instance of the type specified by the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; used for constructing this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlType" /> (用於建構這個 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />) 所指定之類型的執行個體。</param>
      <param name="item" vsli:raw="The item to add.">要新增的項目。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Invoked this method on a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt; that is based on an unknown &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; Invoked this method on a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt; where the relevant type is not a collection.">在以未知 <see cref="T:System.Xaml.XamlType" /> 為根據的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上，叫用這個方法。
-或-
在其中的相關類型不是集合的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上，叫用這個方法。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Xaml.XamlSchemaException" vsli:raw="&lt;see cref=&quot;M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)&quot; /&gt; for this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt; returns &lt;see langword=&quot;null&quot; /&gt;.">這個 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 的 <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> 會傳回 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
      <summary vsli:raw="Adds the provided key and item value to an instance of the type that is relevant to this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt;.">將提供的索引鍵和項目值加入至與這個 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 相關之類型的執行個體。</summary>
      <param name="instance" vsli:raw="An instance of the type specified by the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; used for constructing this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlType" /> (用於建構這個 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />) 所指定之類型的執行個體。</param>
      <param name="key" vsli:raw="Dictionary key for the item to add.">要加入項目的字典索引鍵。</param>
      <param name="item" vsli:raw="The item value to add.">要加入的項目值。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Invoked this method on a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt; that is based on an unknown &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; Invoked this method on a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt; where the relevant type is not a dictionary.">在以未知 <see cref="T:System.Xaml.XamlType" /> 為根據的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上，叫用這個方法。
-或-
在其中的相關類型不是字典的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上，叫用這個方法。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Xaml.XamlSchemaException" vsli:raw="&lt;see cref=&quot;M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)&quot; /&gt; for this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt; returns &lt;see langword=&quot;null&quot; /&gt;.">這個 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 的 <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> 會傳回 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])">
      <summary vsli:raw="Creates an object instance based on the construction-initiated &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt;.">根據這個 <see cref="T:System.Xaml.XamlType" /> 之由建構啟始的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />，建立物件執行個體。</summary>
      <param name="arguments" vsli:raw="An array of objects that supply the &lt;see langword=&quot;x:ConstructorArgs&quot; /&gt; for the instance. May be &lt;see langword=&quot;null&quot; /&gt; for types that do not require or use &lt;see langword=&quot;x:ConstructorArgs&quot; /&gt;.">為執行個體提供 <see langword="x:ConstructorArgs" /> 的物件陣列。 對於不需要或不使用 <see langword="null" /> 的型別，可能為 <see langword="x:ConstructorArgs" />。</param>
      <returns vsli:raw="The created instance based on the construction-initiated &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt;.">已根據這個 <see cref="T:System.Xaml.XamlType" /> 之由建構啟始的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 所建立的執行個體。</returns>
      <exception cref="T:System.MissingMethodException" vsli:raw="Could not resolve a constructor.">無法解析建構函式。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
      <summary vsli:raw="Returns the relevant &lt;see langword=&quot;Add&quot; /&gt; method for a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt; that is relevant to a collection or dictionary.">針對與集合或字典相關的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />，傳回相關的 <see langword="Add" /> 方法。</summary>
      <param name="contentType" vsli:raw="&lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the item type that is used by the &lt;see langword=&quot;Add&quot; /&gt; method.">
        <see langword="Add" /> 方法所使用項目型別的 <see cref="T:System.Xaml.XamlType" />。</param>
      <returns vsli:raw="CLR &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; information for the &lt;see langword=&quot;Add&quot; /&gt; method, or null.">
        <see langword="Add" /> 方法的 CLR <see cref="T:System.Reflection.MethodInfo" /> 資訊，或 Null。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;contentType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="contentType" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod">
      <summary vsli:raw="Returns an object representing a method that can enumerate over items.">傳回物件，這個物件表示可列舉項目的方法。</summary>
      <returns vsli:raw="&lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; for an enumerator method, or &lt;see langword=&quot;null&quot; /&gt;.">列舉程式方法的 <see cref="T:System.Reflection.MethodInfo" />，或 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; object representing the set of items.">傳回表示項目集的 <see cref="T:System.Collections.IEnumerator" /> 物件。</summary>
      <param name="instance" vsli:raw="An instance of the type specified by the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; used for constructing this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlType" /> (用於建構這個 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />) 所指定之類型的執行個體。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; object, or &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Collections.IEnumerator" /> 物件，或 <see langword="null" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Invoked this method on a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt; that is based on an unknown &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; Invoked this method on a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt; where the relevant type is not a collection or dictionary.">在以未知 <see cref="T:System.Xaml.XamlType" /> 為根據的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上，叫用這個方法。
-或-
在 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上叫用這個方法，所在的相關型別不是集合或字典。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler">
      <summary vsli:raw="Gets the handler to use when a &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt; calls into an implemented &lt;see cref=&quot;T:System.Windows.Markup.MarkupExtension&quot; /&gt;.">取得當 <see cref="T:System.Xaml.XamlObjectWriter" /> 呼叫實作的 <see cref="T:System.Windows.Markup.MarkupExtension" /> 時，所要使用的處理常式。</summary>
      <returns vsli:raw="A handler implementation that handles this case.">處理這個案例的處理常式實作。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler">
      <summary vsli:raw="Gets the handler to use when a &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt; calls into a CLR-implemented &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt;.">取得當 <see cref="T:System.Xaml.XamlObjectWriter" /> 呼叫 CLR 實作的 <see cref="T:System.ComponentModel.TypeConverter" /> 時，所要使用的處理常式。</summary>
      <returns vsli:raw="A handler implementation that handles this case.">處理這個案例的處理常式實作。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker">
      <summary vsli:raw="Provides a static value that represents an unknown, not fully implemented &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt;.">提供靜態值，這個值表示未完整實作的未知 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />。</summary>
      <returns vsli:raw="A static value that represents an unknown, not fully implemented &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt;.">靜態值，表示未完整實作的未知 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />。</returns>
    </member>
    <member name="T:System.Xaml.Schema.XamlTypeName">
      <summary vsli:raw="Provides a means to specify a XAML type in terms of name and namespace.">提供以名稱和命名空間指定 XAML 型別的方法。</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; class.">初始化 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; class, based on name and namespace strings.">根據名稱和命名空間字串，初始化 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 類別的新執行個體。</summary>
      <param name="xamlNamespace" vsli:raw="The XAML namespace that contains name.">包含名稱的 XAML 命名空間。</param>
      <param name="name" vsli:raw="The name of the type to create a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; for.">要建立 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的型別名稱。</param>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Xaml.Schema.XamlTypeName})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; class, based on name and namespace strings as well as an array of type arguments.">根據名稱和命名空間以及型別引數陣列，初始化 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 類別的新執行個體。</summary>
      <param name="xamlNamespace" vsli:raw="The XAML namespace that contains &lt;paramref name=&quot;name&quot; /&gt;.">包含 <paramref name="name" /> 的 XAML 命名空間。</param>
      <param name="name" vsli:raw="The name of the type to create a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; for.">要建立 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的型別名稱。</param>
      <param name="typeArguments" vsli:raw="An array of type arguments, each of which must be a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt;.">型別引數的陣列，其中每個型別引數都必須是 <see cref="T:System.Xaml.Schema.XamlTypeName" />。</param>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.#ctor(System.Xaml.XamlType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; class, based on an existing &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">根據現有的 <see cref="T:System.Xaml.Schema.XamlTypeName" />，初始化 <see cref="T:System.Xaml.XamlType" /> 類別的新執行個體。</summary>
      <param name="xamlType" vsli:raw="An existing &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">現有的 <see cref="T:System.Xaml.XamlType" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xamlType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xamlType" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeName.Name">
      <summary vsli:raw="Gets the name used to construct this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt;.">取得用來建構這個 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的名稱。</summary>
      <returns vsli:raw="The name of the type.">型別的名稱。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeName.Namespace">
      <summary vsli:raw="Gets the XAML namespace identifier used to construct this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt;.">取得用來建構這個 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的 XAML 命名空間識別項。</summary>
      <returns vsli:raw="The XAML namespace identifier.">XAML 命名空間識別項。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.Parse(System.String,System.Xaml.IXamlNamespaceResolver)">
      <summary vsli:raw="Provides a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; value based on a type name and an object that can resolve a markup prefix into a namespace.">根據型別名稱和可將標記前置詞解析為命名空間的物件，提供 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 值。</summary>
      <param name="typeName" vsli:raw="The type name to create a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; value for.">要建立 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 值的型別名稱。</param>
      <param name="namespaceResolver" vsli:raw="An object or service provider that implements &lt;see cref=&quot;T:System.Xaml.IXamlNamespaceResolver&quot; /&gt;.">實作 <see cref="T:System.Xaml.IXamlNamespaceResolver" /> 的物件或服務提供者。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt;.">建立的 <see cref="T:System.Xaml.Schema.XamlTypeName" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;typeName&quot; /&gt; or &lt;paramref name=&quot;namespaceResolver&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="typeName" /> 或 <paramref name="namespaceResolver" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="String cannot be parsed.">無法剖析字串。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.ParseList(System.String,System.Xaml.IXamlNamespaceResolver)">
      <summary vsli:raw="Provides a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; value based on a string that can specify multiple type names, and an object that can resolve a markup prefix into a namespace.">根據可指定多個型別名稱的字串，以及可將標記前置詞解析為命名空間的物件，提供 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 值。</summary>
      <param name="typeNameList" vsli:raw="A string that contains multiple types.">包含多個型別的字串。</param>
      <param name="namespaceResolver" vsli:raw="An object or service provider that implements &lt;see cref=&quot;T:System.Xaml.IXamlNamespaceResolver&quot; /&gt;.">實作 <see cref="T:System.Xaml.IXamlNamespaceResolver" /> 的物件或服務提供者。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt;.">建立的 <see cref="T:System.Xaml.Schema.XamlTypeName" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;typeNameList&quot; /&gt; or &lt;paramref name=&quot;namespaceResolver&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="typeNameList" /> 或 <paramref name="namespaceResolver" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="String cannot be parsed.">無法剖析字串。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.ToString">
      <summary vsli:raw="Converts the value of this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; to its equivalent string representation.">將這個 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的值轉換成它的對等字串表示。</summary>
      <returns vsli:raw="The equivalent string representation of this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt;.">此 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的對等字串表示。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.ToString(System.Collections.Generic.IList{System.Xaml.Schema.XamlTypeName},System.Xaml.INamespacePrefixLookup)">
      <summary vsli:raw="Converts the value of this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; to its equivalent string representation, which can be used in markup syntax for an object element usage of multiple types.">將這個 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的值轉換為它的對等字串表示，此表示可用在標記語法中，讓物件項目使用多個型別。</summary>
      <param name="typeNameList" vsli:raw="A list of types.">型別清單。</param>
      <param name="prefixLookup" vsli:raw="A service reference for prefix lookup.">前置詞查閱的服務參考。</param>
      <returns vsli:raw="A concatenated string of all type results.">所有型別結果的串連字串。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;prefixLookup&quot; /&gt; or &lt;paramref name=&quot;typeNameList&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="prefixLookup" /> 或 <paramref name="typeNameList" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.ToString(System.Xaml.INamespacePrefixLookup)">
      <summary vsli:raw="Converts the value of this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; to its equivalent string representation, which can be used in markup syntax for an object element usage of a type.">將這個 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的值轉換為它的對等字串表示，此表示可用在標記語法中，讓物件項目使用某個型別。</summary>
      <param name="prefixLookup" vsli:raw="A service reference for prefix lookup.">前置詞查閱的服務參考。</param>
      <returns vsli:raw="A prefixed usage string.">含前置詞的使用字串。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;P:System.Xaml.Schema.XamlTypeName.Namespace&quot; /&gt; for this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see cref=&quot;P:System.Xaml.Schema.XamlTypeName.Name&quot; /&gt; is not valid.  &#xA;  &#xA; -or-  &#xA;  &#xA; Could not look up the prefix.">這個 <see cref="P:System.Xaml.Schema.XamlTypeName.Namespace" /> 的 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 為 <see langword="null" />。
-或-
<see cref="P:System.Xaml.Schema.XamlTypeName.Name" /> 無效。
-或-
無法查詢前置詞。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.TryParse(System.String,System.Xaml.IXamlNamespaceResolver,System.Xaml.Schema.XamlTypeName@)">
      <summary vsli:raw="Provides a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; value based on a type name and an object that can resolve a markup prefix into a namespace.">根據型別名稱和可將標記前置詞解析為命名空間的物件，提供 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 值。</summary>
      <param name="typeName" vsli:raw="The type name to create a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; value for.">要建立 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 值的型別名稱。</param>
      <param name="namespaceResolver" vsli:raw="An object or service provider that implements &lt;see cref=&quot;T:System.Xaml.IXamlNamespaceResolver&quot; /&gt;.">實作 <see cref="T:System.Xaml.IXamlNamespaceResolver" /> 的物件或服務提供者。</param>
      <param name="result" vsli:raw="Out parameter that contains the created &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; if the return value is &lt;see langword=&quot;true&quot; /&gt;.">如果傳回值為 <see langword="true" />，則為包含所建立 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的 Out 參數。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the parse was successful and &lt;paramref name=&quot;result&quot; /&gt; contains a useful value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果剖析成功則為 <see langword="true" />，而且 <paramref name="result" /> 包含有用的值，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;typeName&quot; /&gt; or &lt;paramref name=&quot;namespaceResolver&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="typeName" /> 或 <paramref name="namespaceResolver" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.TryParseList(System.String,System.Xaml.IXamlNamespaceResolver,System.Collections.Generic.IList{System.Xaml.Schema.XamlTypeName}@)">
      <summary vsli:raw="Provides a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; value based on a string that can specify multiple type names, and an object that can resolve a markup prefix into a namespace.">根據可指定多個型別名稱的字串，以及可將標記前置詞解析為命名空間的物件，提供 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 值。</summary>
      <param name="typeNameList" vsli:raw="A string that contains multiple types.">包含多個型別的字串。</param>
      <param name="namespaceResolver" vsli:raw="An object or service provider that implements &lt;see cref=&quot;T:System.Xaml.IXamlNamespaceResolver&quot; /&gt;.">實作 <see cref="T:System.Xaml.IXamlNamespaceResolver" /> 的物件或服務提供者。</param>
      <param name="result" vsli:raw="Out parameter that contains the created &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; if the return value is &lt;see langword=&quot;true&quot; /&gt;.">如果傳回值為 <see langword="true" />，則為包含所建立 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的 Out 參數。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the parse was successful and &lt;paramref name=&quot;result&quot; /&gt; contains a useful value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果剖析成功則為 <see langword="true" />，而且 <paramref name="result" /> 包含有用的值，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;typeNameList&quot; /&gt; or &lt;paramref name=&quot;namespaceResolver&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="typeNameList" /> 或 <paramref name="namespaceResolver" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeName.TypeArguments">
      <summary vsli:raw="Gets the type arguments used to construct this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt;.">取得用來建構這個 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的型別引數。</summary>
      <returns vsli:raw="The type arguments, if any. May be null.">型別引數 (如果有的話)。 可能是 Null。</returns>
    </member>
    <member name="T:System.Xaml.Schema.XamlTypeTypeConverter">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; object to and from a string that represents the type name. This functionality is used for XAML extensibility by markup definitions, via &lt;see cref=&quot;T:System.Windows.Markup.PropertyDefinition&quot; /&gt;.">將 <see cref="T:System.Xaml.XamlType" /> 物件轉換為代表類型名稱的字串，或從該字串轉換為物件。 這項功能透過 <see cref="T:System.Windows.Markup.PropertyDefinition" />，藉由標記定義用於提供 XAML 擴充性。</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeTypeConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeTypeConverter&quot; /&gt; class.">初始化 <see cref="T:System.Xaml.Schema.XamlTypeTypeConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines whether an object of the specified type can be converted to an instance of &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;, using the specified context.">使用指定的內容，判斷所指定型別的物件是否可轉換成 <see cref="T:System.Xaml.XamlType" /> 的執行個體。</summary>
      <param name="context" vsli:raw="A format context that provides information about the environment from which this converter is being invoked.">格式內容，提供正在叫用此轉換器之環境的相關資訊。</param>
      <param name="sourceType" vsli:raw="The type being evaluated for conversion.">正在評估以進行轉換的型別。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the operation; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個轉換子可以執行作業，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines whether an instance of &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; can be converted to the specified type, using the specified context.">使用指定的內容，判斷 <see cref="T:System.Xaml.XamlType" /> 的執行個體是否可以轉換成指定的型別。</summary>
      <param name="context" vsli:raw="A format context that provides information about the environment from which this converter is being invoked.">格式內容，提供正在叫用此轉換器之環境的相關資訊。</param>
      <param name="destinationType" vsli:raw="The type being evaluated for conversion.">正在評估以進行轉換的型別。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the operation; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個轉換子可以執行作業，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Attempts to convert the specified object to a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;, using the specified context.">使用指定的內容，嘗試將指定的物件轉換為 <see cref="T:System.Xaml.XamlType" />。</summary>
      <param name="context" vsli:raw="A format context that provides information about the environment from which this converter is being invoked.">格式內容，提供正在叫用此轉換器之環境的相關資訊。</param>
      <param name="culture" vsli:raw="Culture specific information.">特定文化特性 (Culture) 資訊。</param>
      <param name="value" vsli:raw="The object to convert.">要轉換的物件。</param>
      <returns vsli:raw="The converted object.">轉換的物件。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; cannot be converted.">無法轉換 <paramref name="value" />。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Attempts to convert a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; to the specified type, using the specified context.">使用指定的內容，嘗試將 <see cref="T:System.Xaml.XamlType" /> 轉換為指定的型別。</summary>
      <param name="context" vsli:raw="A format context that provides information about the environment from which this converter is being invoked.">格式內容，提供正在叫用此轉換器之環境的相關資訊。</param>
      <param name="culture" vsli:raw="Culture specific information.">特定文化特性 (Culture) 資訊。</param>
      <param name="value" vsli:raw="The object to convert.">要轉換的物件。</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">要將物件轉換成的類型。</param>
      <returns vsli:raw="The converted object.">轉換的物件。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; cannot be converted.">無法轉換 <paramref name="value" />。</exception>
    </member>
    <member name="T:System.Xaml.Schema.XamlValueConverter`1">
      <summary vsli:raw="Provides a common API surface for techniques that generate initialization or serialization values for XAML based on input other than the eventual destination type. This includes markup extensions and type converters.">針對根據最終目的型別以外之輸入產生 XAML 初始化及序列化值的技術，提供一般 API 介面。 這包括標記延伸和型別轉換子。</summary>
      <typeparam name="TConverterBase" vsli:raw="The CLR base class for the particular converter that this &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; represents. Typically this is one of the following: &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt;; &lt;see cref=&quot;T:System.Windows.Markup.MarkupExtension&quot; /&gt;; &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt;.">這個 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 所表示之特定轉換子的 CLR 基底類別。 這通常是下列其中一項：<see cref="T:System.ComponentModel.TypeConverter" />、<see cref="T:System.Windows.Markup.MarkupExtension" />、<see cref="T:System.Windows.Markup.ValueSerializer" />。</typeparam>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.#ctor(System.Type,System.Xaml.XamlType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; class, based on a converter implementing &lt;see cref=&quot;T:System.Type&quot; /&gt; and the target/destination type of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt;.">根據實作 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 的轉換子和 <see cref="T:System.Type" /> 的目標/目的型別，初始化 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 類別的新執行個體。</summary>
      <param name="converterType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; that implements the converter behavior.">實作轉換子行為的 <see cref="T:System.Type" />。</param>
      <param name="targetType" vsli:raw="The target/destination &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlType" /> 的目標/目的地 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />。</param>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.#ctor(System.Type,System.Xaml.XamlType,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; class, based on a converter implementing &lt;see cref=&quot;T:System.Type&quot; /&gt; the target/destination type of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt;, and a string name.">根據實作 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 的轉換子、<see cref="T:System.Type" /> 的目標/目的型別以及字串名稱，初始化 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 類別的新執行個體。</summary>
      <param name="converterType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; that implements the converter behavior.">實作轉換子行為的 <see cref="T:System.Type" />。</param>
      <param name="targetType" vsli:raw="The target/destination &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlType" /> 的目標/目的地 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />。</param>
      <param name="name" vsli:raw="The string name.">字串名稱。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="All three parameters are &lt;see langword=&quot;null&quot; /&gt; (at least one is required to be non-null).">這三個參數都是 <see langword="null" /> (至少有一個必須是非 Null 值)。</exception>
    </member>
    <member name="P:System.Xaml.Schema.XamlValueConverter`1.ConverterInstance">
      <summary vsli:raw="Gets a created instance of the converter implementation.">取得建立的轉換子實作執行個體。</summary>
      <returns vsli:raw="A created instance of the converter implementation, or &lt;see langword=&quot;null&quot; /&gt;.">建立的轉換子實作執行個體，或 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlValueConverter`1.ConverterType">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Type&quot; /&gt; for the class that implements the converter behavior.">取得實作轉換子行為的類別的 <see cref="T:System.Type" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; for the class that implements the converter behavior.">實作轉換子行為的類別的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.CreateInstance">
      <summary vsli:raw="Returns an instance of the converter implementation.">傳回轉換子實作執行個體。</summary>
      <returns vsli:raw="An instance of the converter implementation, or &lt;see langword=&quot;null&quot; /&gt;.">轉換子實作執行個體，或 <see langword="null" />。</returns>
      <exception cref="T:System.Xaml.XamlSchemaException" vsli:raw="Converter did not implement the correct base type.">轉換子未實作正確的基底型別。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.Equals(System.Object)">
      <summary vsli:raw="Determines whether this instance of &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; and a specified object, which must also be a &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; object, have the same value.">判斷這個 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 執行個體和指定之物件 (必須是 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 物件) 是否具有相同的值。</summary>
      <param name="obj" vsli:raw="The object to compare.">要比較的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is a &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; and its value is the same as this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 是 <paramref name="obj" />，且其值與這個執行個體相同，則為 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.Equals(System.Xaml.Schema.XamlValueConverter{`0})">
      <summary vsli:raw="Determines whether this instance of &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; and another &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; object have the same value.">判斷這個 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 執行個體和另一個 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 物件是否具有相同的值。</summary>
      <param name="other" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; to compare.">要比較的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;other&quot; /&gt; is a &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; and its value is the same as this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="other" /> 是 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />，且其值與這個執行個體相同，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.GetHashCode">
      <summary vsli:raw="Returns the hash code for this &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt;.">傳回這個 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 的雜湊程式碼。</summary>
      <returns vsli:raw="An integer hash code.">整數雜湊程式碼。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlValueConverter`1.Name">
      <summary vsli:raw="Gets a string name for this &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt;.">取得這個 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 的字串名稱。</summary>
      <returns vsli:raw="A string name for this &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt;.">這個 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 的字串名稱。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.op_Equality(System.Xaml.Schema.XamlValueConverter{`0},System.Xaml.Schema.XamlValueConverter{`0})">
      <summary vsli:raw="Determines whether two specified &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; objects have the same value.">判斷兩個指定的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 物件是否具有相同的值。</summary>
      <param name="converter1" vsli:raw="A &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 或 <see langword="null" />。</param>
      <param name="converter2" vsli:raw="A &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 或 <see langword="null" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of &lt;paramref name=&quot;converter1&quot; /&gt; is the same as the value of &lt;paramref name=&quot;converter2&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 的值與 <paramref name="converter1" /> 的值相同，則為 <paramref name="converter2" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.op_Inequality(System.Xaml.Schema.XamlValueConverter{`0},System.Xaml.Schema.XamlValueConverter{`0})">
      <summary vsli:raw="Determines whether two specified &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; objects have different values.">判斷兩個指定的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 物件是否具有不同的值。</summary>
      <param name="converter1" vsli:raw="A &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 或 <see langword="null" />。</param>
      <param name="converter2" vsli:raw="A &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 或 <see langword="null" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of &lt;paramref name=&quot;converter1&quot; /&gt; is different than the value of &lt;paramref name=&quot;converter2&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="converter1" /> 的值與 <paramref name="converter2" /> 的值不同，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlValueConverter`1.TargetType">
      <summary vsli:raw="Gets the target/destination &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt;.">取得 <see cref="T:System.Xaml.XamlType" /> 的目標/目的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />。</summary>
      <returns vsli:raw="The target/destination &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlType" /> 的目標/目的地 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.ToString">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.String&quot; /&gt; that represents this &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt;.">傳回表示這個 <see cref="T:System.String" /> 的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents this &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt;.">代表這個 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="T:System.Xaml.XamlBackgroundReader">
      <summary vsli:raw="Implements a double-buffered &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt; that can split reading and writing to different threads.">實作可將讀取和寫入分割至不同執行緒的雙重緩衝 <see cref="T:System.Xaml.XamlReader" />。</summary>
    </member>
    <member name="M:System.Xaml.XamlBackgroundReader.#ctor(System.Xaml.XamlReader)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlBackgroundReader&quot; /&gt; class.">初始化 <see cref="T:System.Xaml.XamlBackgroundReader" /> 類別的新執行個體。</summary>
      <param name="wrappedReader" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt; that this &lt;see cref=&quot;T:System.Xaml.XamlBackgroundReader&quot; /&gt; is based on.">這個 <see cref="T:System.Xaml.XamlReader" /> 所根據的 <see cref="T:System.Xaml.XamlBackgroundReader" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;wrappedReader&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="wrappedReader" /> 上所宣告的預設值是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlBackgroundReader.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.Xaml.XamlBackgroundReader&quot; /&gt; and optionally releases the managed resources.">釋放 <see cref="T:System.Xaml.XamlBackgroundReader" /> 所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release managed resources; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示釋放 Managed 資源，否則為 <see langword="false" />。</param>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.HasLineInfo">
      <summary vsli:raw="Gets a value that specifies whether line information is available.">取得值，這個值指定行資訊是否可供使用。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if line information is available; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果有可用的行資訊則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.IsEof">
      <summary vsli:raw="Gets a value that reports whether the reader position is at end-of-file.">取得值，這個值會報告讀取器是否位於檔案結尾。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the position is at end-of-file; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果位置在檔案的結尾則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.LineNumber">
      <summary vsli:raw="Gets the line number to report.">取得要報告的行號。</summary>
      <returns vsli:raw="The line number to report.">要報告的行號。</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.LinePosition">
      <summary vsli:raw="Gets the line position to report.">取得要報告的行位置。</summary>
      <returns vsli:raw="The line position to report.">要報告的行位置。</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.Member">
      <summary vsli:raw="Gets the current member at the reader position, if the reader position is on a &lt;see cref=&quot;F:System.Xaml.XamlNodeType.StartMember&quot; /&gt;.">如果讀取器位置在 <see cref="F:System.Xaml.XamlNodeType.StartMember" /> 上，則取得讀取器位置上的目前成員。</summary>
      <returns vsli:raw="The current member; or &lt;see langword=&quot;null&quot; /&gt;, if the position is not on a member.">目前的成員，如果這個位置不在成員上，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.Namespace">
      <summary vsli:raw="Gets the XAML namespace from the current node.">從目前的節點取得 XAML 命名空間。</summary>
      <returns vsli:raw="The XAML namespace, if it is available; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">XAML 命名空間 (如果有的話)，否則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.NodeType">
      <summary vsli:raw="Gets the type of the current node.">取得目前節點的類型。</summary>
      <returns vsli:raw="A value of the &lt;see cref=&quot;T:System.Xaml.XamlNodeType&quot; /&gt; enumeration.">
        <see cref="T:System.Xaml.XamlNodeType" /> 列舉的值。</returns>
    </member>
    <member name="M:System.Xaml.XamlBackgroundReader.Read">
      <summary vsli:raw="Provides the next XAML node from the source, if a node is available.">從來源中提供下一個 XAML 節點 (如果有節點的話)。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a node is available; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果有節點則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.SchemaContext">
      <summary vsli:raw="Gets an object that provides schema context information for the information set.">取得物件，這個物件會為資訊集提供結構描述內容資訊。</summary>
      <returns vsli:raw="An object that provides schema context information for the information set.">物件，為資訊集提供結構描述內容資訊。</returns>
    </member>
    <member name="M:System.Xaml.XamlBackgroundReader.StartThread">
      <summary vsli:raw="Creates and starts a new &lt;see cref=&quot;T:System.Threading.Thread&quot; /&gt; (constructed from &lt;see cref=&quot;T:System.Threading.ParameterizedThreadStart&quot; /&gt;) that handles a named thread for the &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt;.">建立及啟動新的 <see cref="T:System.Threading.Thread" /> (從 <see cref="T:System.Threading.ParameterizedThreadStart" /> 建構而成)，它會為 <see cref="T:System.Xaml.XamlReader" /> 處理具名執行緒。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The thread is already started.">執行緒已經啟動。</exception>
    </member>
    <member name="M:System.Xaml.XamlBackgroundReader.StartThread(System.String)">
      <summary vsli:raw="Creates and starts a new &lt;see cref=&quot;T:System.Threading.Thread&quot; /&gt; (constructed from &lt;see cref=&quot;T:System.Threading.ParameterizedThreadStart&quot; /&gt;) that handles a named thread for the &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt;. You specify the thread name as a parameter.">建立及啟動新的 <see cref="T:System.Threading.Thread" /> (從 <see cref="T:System.Threading.ParameterizedThreadStart" /> 建構而成)，它會為 <see cref="T:System.Xaml.XamlReader" /> 處理具名執行緒。 請指定執行緒名稱做為參數。</summary>
      <param name="threadName" vsli:raw="The name for the thread.">執行緒的名稱。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The thread is already started.">執行緒已經啟動。</exception>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.Type">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the current node.">取得目前節點的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the current node; or &lt;see langword=&quot;null&quot; /&gt;, if the current reader position is not on an object.">目前節點的 <see cref="T:System.Xaml.XamlType" />，如果目前讀取器位置不在物件上，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.Value">
      <summary vsli:raw="Gets the value of the current node.">取得目前節點的值。</summary>
      <returns vsli:raw="The value of the current node; or &lt;see langword=&quot;null&quot; /&gt;, if the current reader position is not on a &lt;see cref=&quot;F:System.Xaml.XamlNodeType.Value&quot; /&gt; node type.">目前節點的值，如果目前讀取器位置不在 <see cref="F:System.Xaml.XamlNodeType.Value" /> 節點型別上，則為 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xaml.XamlDeferringLoader">
      <summary vsli:raw="Represents a XAML reader behavior that loads and returns deferred content.">表示 XAML 讀取器行為，這個行為會載入並傳回延後的內容。</summary>
    </member>
    <member name="M:System.Xaml.XamlDeferringLoader.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlDeferringLoader&quot; /&gt; class.">初始化 <see cref="T:System.Xaml.XamlDeferringLoader" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xaml.XamlDeferringLoader.Load(System.Xaml.XamlReader,System.IServiceProvider)">
      <summary vsli:raw="Loads XAML content in a deferred mode, which is based on a &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt; and certain required services from a service provider.">根據 <see cref="T:System.Xaml.XamlReader" /> 和來自服務提供者的特定必要服務，以延後模式載入 XAML 內容。</summary>
      <param name="xamlReader" vsli:raw="The initiating reader that is returned on calls to &lt;see cref=&quot;M:System.Xaml.XamlDeferringLoader.Save(System.Object,System.IServiceProvider)&quot; /&gt;.">呼叫 <see cref="M:System.Xaml.XamlDeferringLoader.Save(System.Object,System.IServiceProvider)" /> 時傳回的啟始讀取器。</param>
      <param name="serviceProvider" vsli:raw="The service provider for the required services.">必要服務的服務提供者。</param>
      <returns vsli:raw="The root object that is produced by the input &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt;.">由輸入 <see cref="T:System.Xaml.XamlReader" /> 所產生的根物件。</returns>
    </member>
    <member name="M:System.Xaml.XamlDeferringLoader.Save(System.Object,System.IServiceProvider)">
      <summary vsli:raw="Commits a value for deferred loading.">認可要延後載入的值。</summary>
      <param name="value" vsli:raw="The input value to commit for deferred loading.">要認可延後載入的輸入值。</param>
      <param name="serviceProvider" vsli:raw="The service provider for the required services.">必要服務的服務提供者。</param>
      <returns vsli:raw="A XAML reader that can be used to obtain the deferred value as XAML node information.">XAML 讀取器，可用來取得延後的值做為 XAML 節點資訊。</returns>
    </member>
    <member name="T:System.Xaml.XamlDirective">
      <summary vsli:raw="Provides the XAML type system identifier for a member if the member is also a XAML directive. XAML readers and XAML writers use the &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; identifier during processing of member nodes. The identifier is used when the XAML reader is positioned on a &lt;see cref=&quot;F:System.Xaml.XamlNodeType.StartMember&quot; /&gt; and &lt;see cref=&quot;P:System.Xaml.XamlMember.IsDirective&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt;.">提供 XAML 型別系統識別項給某個成員 (如果此成員也是 XAML 指示詞的話)。 XAML 讀取器和 XAML 寫入器會在處理成員節點期間使用 <see cref="T:System.Xaml.XamlDirective" /> 識別項。 當 XAML 讀取器位在 <see cref="F:System.Xaml.XamlNodeType.StartMember" /> 上，而且 <see cref="P:System.Xaml.XamlMember.IsDirective" /> 為 <see langword="true" /> 時，會使用這個識別項。</summary>
    </member>
    <member name="M:System.Xaml.XamlDirective.#ctor(System.Collections.Generic.IEnumerable{System.String},System.String,System.Xaml.XamlType,System.Xaml.Schema.XamlValueConverter{System.ComponentModel.TypeConverter},System.Xaml.Schema.AllowedMemberLocations)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; class, specifying values for each per-case value of a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt;.">初始化 <see cref="T:System.Xaml.XamlDirective" /> 類別的新執行個體，針對 <see cref="T:System.Xaml.XamlDirective" /> 的每個個別案例值指定值。</summary>
      <param name="xamlNamespaces" vsli:raw="A set of XAML namespaces where this &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; can exist, passed as an enumerable set of the identifier strings.">這個 <see cref="T:System.Xaml.XamlDirective" /> 可能存在於其中的一組 XAML 命名空間，可當做識別項字串的可列舉集合傳遞。</param>
      <param name="name" vsli:raw="The identifying name of the &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlDirective" /> 的識別名稱。</param>
      <param name="xamlType" vsli:raw="The XAML type that backs the &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt;.">支援 <see cref="T:System.Xaml.XamlDirective" /> 的 XAML 型別。</param>
      <param name="typeConverter" vsli:raw="The type converter that this &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; uses for text syntax conversion.">這個 <see cref="T:System.Xaml.XamlDirective" /> 用來轉換文字語法的型別轉換器。</param>
      <param name="allowedLocation" vsli:raw="A value of the &lt;see cref=&quot;T:System.Xaml.Schema.AllowedMemberLocations&quot; /&gt; enumeration.">
        <see cref="T:System.Xaml.Schema.AllowedMemberLocations" /> 列舉的值。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;xamlType&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xamlType" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlDirective.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; class, specifying values for a name and a single XAML namespace. Use this signature only when you want or expect &lt;see cref=&quot;P:System.Xaml.XamlMember.IsUnknown&quot; /&gt; to report &lt;see langword=&quot;true&quot; /&gt; for the directive.">初始化 <see cref="T:System.Xaml.XamlDirective" /> 類別的新執行個體，並在其中指定名稱和單一 XAML 命名空間的值。 請只有當您想要或預期 <see cref="P:System.Xaml.XamlMember.IsUnknown" /> 會針對指示詞報告 <see langword="true" /> 時，才使用這個簽章。</summary>
      <param name="xamlNamespace" vsli:raw="The primary XAML namespace where this &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; can exist.">這個 <see cref="T:System.Xaml.XamlDirective" /> 可能存在的主要 XAML 命名空間。</param>
      <param name="name" vsli:raw="The identifying name of the &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlDirective" /> 的識別名稱。</param>
    </member>
    <member name="P:System.Xaml.XamlDirective.AllowedLocation">
      <summary vsli:raw="Gets a value that specifies the XAML node types where the directive can be specified.">取得值，這個值指定可以指定指示詞的 XAML 節點型別。</summary>
      <returns vsli:raw="A value of the enumeration. The default is the enumeration default, which is &lt;see cref=&quot;F:System.Xaml.Schema.AllowedMemberLocations.None&quot; /&gt;.">列舉值。 預設為列舉預設值，即 <see cref="F:System.Xaml.Schema.AllowedMemberLocations.None" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.GetHashCode">
      <summary vsli:raw="Returns the hash code for this object.">傳回這個物件的雜湊程式碼。</summary>
      <returns vsli:raw="An integer hash code.">整數雜湊程式碼。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.GetXamlNamespaces">
      <summary vsli:raw="Returns a list of XAML namespaces where this XAML member can exist.">傳回這個 XAML 成員可能存在之 XAML 命名空間的清單。</summary>
      <returns vsli:raw="A list of XAML namespace identifiers, as strings.">XAML 命名空間識別項的清單 (字串形式)。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupCustomAttributeProvider">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Reflection.ICustomAttributeProvider&quot; /&gt; implementation. This implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">傳回 <see cref="T:System.Reflection.ICustomAttributeProvider" /> 實作。 這個實作一律會傳回 <see langword="null" />。</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;null&quot; /&gt;.">一律傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupDeferringLoader">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; object, which is used during deferred loading of XAML-declared objects. This implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">傳回 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 物件，用於延後載入 XAML 宣告的物件。 這個實作一律會傳回 <see langword="null" />。</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;null&quot; /&gt;.">一律傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupDependsOn">
      <summary vsli:raw="Returns a list of &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; objects. The list reports the members where dependency relationships for initialization order exist relative to this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;. This implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">傳回 <see cref="T:System.Xaml.XamlMember" /> 物件的清單。 這個清單會報告具有和此 <see cref="T:System.Xaml.XamlMember" /> 相關的初始設定順序之相依關聯性的成員。 這個實作一律會傳回 <see langword="null" />。</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;null&quot; /&gt;.">一律傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupInvoker">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; that is associated with a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt;.">傳回與 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 相關聯的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; information for this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">這個 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 的 <see cref="T:System.Xaml.XamlMember" /> 資訊。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsAmbient">
      <summary vsli:raw="Returns whether this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; is reported as an ambient property.">傳回這個 <see cref="T:System.Xaml.XamlMember" /> 是否報告為環境屬性。</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;false&quot; /&gt;.">一律傳回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsEvent">
      <summary vsli:raw="Returns whether this &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; represents an event.">傳回這個 <see cref="T:System.Xaml.XamlDirective" /> 是否表示事件。</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;false&quot; /&gt;.">一律傳回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsReadOnly">
      <summary vsli:raw="Returns whether this &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; represents an intended read-only property.">傳回這個 <see cref="T:System.Xaml.XamlDirective" /> 是否表示所需的唯讀屬性。</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;false&quot; /&gt;.">一律傳回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsReadPublic">
      <summary vsli:raw="Returns whether this &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; represents a property that has a public &lt;see langword=&quot;get&quot; /&gt; accessor.">傳回這個 <see cref="T:System.Xaml.XamlDirective" /> 是否表示具有公用 <see langword="get" /> 存取子的屬性。</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;true&quot; /&gt;.">一律傳回 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsUnknown">
      <summary vsli:raw="Returns whether this &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; represents a member that is not resolvable by the backing system that is used for type and member resolution.">傳回這個 <see cref="T:System.Xaml.XamlDirective" /> 是否表示用於型別和成員解析的支援系統所無法解析的成員。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; represents a non-resolvable member; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個 <see cref="T:System.Xaml.XamlDirective" /> 表示無法解析的成員則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsWriteOnly">
      <summary vsli:raw="Returns whether this &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; represents an intended write-only property.">傳回這個 <see cref="T:System.Xaml.XamlDirective" /> 是否表示所需的唯寫屬性。</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;false&quot; /&gt;.">一律傳回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsWritePublic">
      <summary vsli:raw="Returns whether this &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; represents a property that has a public &lt;see langword=&quot;set&quot; /&gt; accessor.">傳回這個 <see cref="T:System.Xaml.XamlDirective" /> 是否表示具有公用 <see langword="set" /> 存取子的屬性。</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;true&quot; /&gt;.">一律傳回 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupTargetType">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the type where the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; can exist. This implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">傳回 <see cref="T:System.Xaml.XamlType" /> 可能存在之型別的 <see cref="T:System.Xaml.XamlMember" />。 這個實作一律會傳回 <see langword="null" />。</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;null&quot; /&gt;.">一律傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupType">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the type that is used by the member.">傳回成員所使用型別的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the type that is used by the member.">成員所使用型別的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupTypeConverter">
      <summary vsli:raw="Returns a type converter implementation that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt;.">傳回與這個 <see cref="T:System.Xaml.XamlDirective" /> 相關聯的型別轉換器實作。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; instance that has &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; constraint; or &lt;see langword=&quot;null&quot; /&gt;.">具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 條件約束的 <see cref="T:System.ComponentModel.TypeConverter" /> 執行個體，或 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupUnderlyingGetter">
      <summary vsli:raw="Returns a &lt;see langword=&quot;get&quot; /&gt; accessor that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt;. This implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">傳回與這個 <see cref="T:System.Xaml.XamlDirective" /> 相關聯的 <see langword="get" /> 存取子。 這個實作一律會傳回 <see langword="null" />。</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;null&quot; /&gt;.">一律傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupUnderlyingMember">
      <summary vsli:raw="Returns a CLR reflection &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt;. This implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">傳回與這個 <see cref="T:System.Reflection.MemberInfo" /> 相關聯的 CLR 反映 <see cref="T:System.Xaml.XamlDirective" />。 這個實作一律會傳回 <see langword="null" />。</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;null&quot; /&gt;.">一律傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupUnderlyingSetter">
      <summary vsli:raw="Returns a &lt;see langword=&quot;set&quot; /&gt; accessor that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt;. This implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">傳回與這個 <see cref="T:System.Xaml.XamlDirective" /> 相關聯的 <see langword="set" /> 存取子。 這個實作一律會傳回 <see langword="null" />。</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;null&quot; /&gt;.">一律傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.ToString">
      <summary vsli:raw="Returns a string representation of this &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt;.">傳回這個 <see cref="T:System.Xaml.XamlDirective" /> 的字串表示。</summary>
      <returns vsli:raw="A string representation of this &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt;.">這個 <see cref="T:System.Xaml.XamlDirective" /> 的字串表示。</returns>
    </member>
    <member name="T:System.Xaml.XamlDuplicateMemberException">
      <summary vsli:raw="The exception that is thrown when a XAML writer attempts to write a value for a duplicate member into the same object node.">當 XAML 寫入器嘗試將重複成員的值寫入至同一個物件節點時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlDuplicateMemberException&quot; /&gt; class with a system-supplied message that describes the error.">以系統提供的錯誤說明訊息，初始化 <see cref="T:System.Xaml.XamlDuplicateMemberException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlDuplicateMemberException&quot; /&gt; class with serialized data.">使用序列化資料，初始化 <see cref="T:System.Xaml.XamlDuplicateMemberException" /> 類別的新執行個體。</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">存放序列物件資料的物件。</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">關於來源或目的端的內容資訊。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> 上所宣告的預設值是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlDuplicateMemberException&quot; /&gt; class with a specified message that describes the error.">使用指定的錯誤說明訊息，初始化 <see cref="T:System.Xaml.XamlDuplicateMemberException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.">說明例外狀況的訊息。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlDuplicateMemberException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Xaml.XamlDuplicateMemberException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.">說明例外狀況的訊息。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
      <param name="innerException" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;innerException&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.#ctor(System.Xaml.XamlMember,System.Xaml.XamlType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlDuplicateMemberException&quot; /&gt; class with the relevant member and type information to report.">使用要報告的相關成員和型別資訊，初始化 <see cref="T:System.Xaml.XamlDuplicateMemberException" /> 類別的新執行個體。</summary>
      <param name="member" vsli:raw="The XAML member identifier to report.">要報告的 XAML 成員識別項。</param>
      <param name="type" vsli:raw="The XAML type identifier to report as the parent type.">要報告為父型別的 XAML 型別識別項。</param>
    </member>
    <member name="P:System.Xaml.XamlDuplicateMemberException.DuplicateMember">
      <summary vsli:raw="Gets or sets the XAML member identifier for the property to report as a duplicate.">取得或設定要報告為重複項之屬性的 XAML 成員識別項。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; object (XAML member identifier) to report.">要報告的 <see cref="T:System.Xaml.XamlMember" /> 物件 (XAML 成員識別項)。</returns>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlDuplicateMemberException&quot; /&gt; class with serialized data.">使用序列化資料，初始化 <see cref="T:System.Xaml.XamlDuplicateMemberException" /> 類別的新執行個體。</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">存放序列物件資料的物件。</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">關於來源或目的端的內容資訊。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> 上所宣告的預設值是 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xaml.XamlDuplicateMemberException.ParentType">
      <summary vsli:raw="Gets or sets the XAML type identifier to report as the parent type.">取得或設定要報告為父型別的 XAML 型別識別項。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; object (XAML type identifier) to report as the parent type.">要報告為父型別的 <see cref="T:System.Xaml.XamlType" /> 物件 (XAML 型別識別項)。</returns>
    </member>
    <member name="T:System.Xaml.XamlException">
      <summary vsli:raw="The exception that is thrown for a general XAML reader or XAML writer exception.">針對一般 XAML 讀取器或 XAML 寫入器例外狀況所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Xaml.XamlException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlException&quot; /&gt; class. The instance contains a system-supplied message that describes the error.">初始化 <see cref="T:System.Xaml.XamlException" /> 類別的新執行個體。 此執行個體包含描述錯誤、系統提供的訊息。</summary>
    </member>
    <member name="M:System.Xaml.XamlException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlException&quot; /&gt; class with serialized data.">使用序列化資料，初始化 <see cref="T:System.Xaml.XamlException" /> 類別的新執行個體。</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">存放序列物件資料的物件。</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">關於來源或目的端的內容資訊。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlException&quot; /&gt; class. The instance contains a specified message that describes the error.">初始化 <see cref="T:System.Xaml.XamlException" /> 類別的新執行個體。 此執行個體包含描述錯誤的指定訊息。</summary>
      <param name="message" vsli:raw="The message that describes the exception. The caller of this constructor must make sure that this string has been localized for the current system culture.">說明例外狀況的訊息。 這個建構函式的呼叫端必須確保這個字串已針對目前系統的文化特性，執行過當地語系化。</param>
    </member>
    <member name="M:System.Xaml.XamlException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlException&quot; /&gt; class. The instance contains a specified error message and a reference to the inner exception that is the cause of this exception.">初始化 <see cref="T:System.Xaml.XamlException" /> 類別的新執行個體。 此執行個體包含指定的錯誤訊息，以及造成此例外狀況之內部例外狀況的參考。</summary>
      <param name="message" vsli:raw="The message that describes the exception. The caller of this constructor must make sure that this string has been localized for the current system culture.">說明例外狀況的訊息。 這個建構函式的呼叫端必須確保這個字串已針對目前系統的文化特性，執行過當地語系化。</param>
      <param name="innerException" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;innerException&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="M:System.Xaml.XamlException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlException&quot; /&gt; class. The instance contains a specified error message, inner exception, and line information.">初始化 <see cref="T:System.Xaml.XamlException" /> 類別的新執行個體。 此執行個體包含指定的錯誤訊息、內部例外狀況和行資訊。</summary>
      <param name="message" vsli:raw="The message that describes the exception. The caller of this constructor must make sure that this string has been localized for the current system culture.">說明例外狀況的訊息。 這個建構函式的呼叫端必須確保這個字串已針對目前系統的文化特性，執行過當地語系化。</param>
      <param name="innerException" vsli:raw="The exception that is the cause of the current exception.">做為目前例外狀況發生原因的例外狀況。</param>
      <param name="lineNumber" vsli:raw="The line number to report to debugging or to line information consumers.">要向偵錯或行資訊消費者報告的行號。</param>
      <param name="linePosition" vsli:raw="The line position to report to debugging or line information consumers.">要向偵錯或行資訊消費者報告的行位置。</param>
    </member>
    <member name="M:System.Xaml.XamlException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Implements &lt;see cref=&quot;M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)&quot; /&gt; and provides serialization support for the line information data.">實作 <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />，並提供行資訊資料的序列化支援。</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">存放序列物件資料的物件。</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">關於來源或目的端的內容資訊。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xaml.XamlException.LineNumber">
      <summary vsli:raw="Gets or sets the line number component of XAML text line information that the exception reports.">取得或設定例外狀況所報告之 XAML 文字行資訊的行號部分。</summary>
      <returns vsli:raw="The line number component of the XAML text line information.">XAML 文字行資訊的行號部分。</returns>
    </member>
    <member name="P:System.Xaml.XamlException.LinePosition">
      <summary vsli:raw="Gets or sets the line position component of XAML text line information that the exception reports.">取得或設定例外狀況所報告之 XAML 文字行資訊的行位置部分。</summary>
      <returns vsli:raw="The line position component of XAML text line information.">XAML 文字行資訊的行位置部分。</returns>
    </member>
    <member name="P:System.Xaml.XamlException.Message">
      <summary vsli:raw="Gets or sets the exception message, and if line information is available, appends the line information to the message.">取得或設定例外狀況訊息，如果有行資訊，再將行資訊附加至訊息。</summary>
      <returns vsli:raw="The exception message that includes the appended line information.">包含附加行資訊的例外狀況訊息。</returns>
    </member>
    <member name="T:System.Xaml.XamlInternalException">
      <summary vsli:raw="The exception that is thrown for internal inconsistencies that occur during XAML reading and XAML writing.">在 XAML 讀取或 XAML 寫入期間，針對內部不一致情況所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Xaml.XamlInternalException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlInternalException&quot; /&gt; class with a system-supplied message that describes the error.">以系統提供的錯誤說明訊息，初始化 <see cref="T:System.Xaml.XamlInternalException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xaml.XamlInternalException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlInternalException&quot; /&gt; class with serialized data.">使用序列化資料，初始化 <see cref="T:System.Xaml.XamlInternalException" /> 類別的新執行個體。</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">存放序列物件資料的物件。</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.Xaml.XamlInternalException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlInternalException&quot; /&gt; class with a specified message that describes the error.">使用指定的錯誤說明訊息，初始化 <see cref="T:System.Xaml.XamlInternalException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="The message that describes the exception.">說明例外狀況的訊息。</param>
    </member>
    <member name="M:System.Xaml.XamlInternalException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlInternalException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Xaml.XamlInternalException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="The message that describes the exception.">說明例外狀況的訊息。</param>
      <param name="innerException" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;innerException&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="T:System.Xaml.XamlLanguage">
      <summary vsli:raw="Defines constants that provide strings or objects that are useful for XAML markup or for programming with XAML types. These strings or objects are relevant to XAML language concepts, to the implementation of XAML language concepts in .NET XAML Services, or to both.">定義常數，這些常數提供對 XAML 標記或 XAML 型別程式設計很有用的字串或物件。 這些字串或物件與 XAML 語言概念有關、與 .NET Framework XAML 服務中實作的 XAML 語言概念有關，或與兩者都有關。</summary>
    </member>
    <member name="P:System.Xaml.XamlLanguage.AllDirectives">
      <summary vsli:raw="Gets a read-only generic collection of each &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; identifier that is defined by .NET XAML Services.">取得 .NET Framework XAML 服務所定義之各個 <see cref="T:System.Xaml.XamlDirective" /> 識別項的唯讀泛型集合。</summary>
      <returns vsli:raw="A read-only generic collection of each &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; identifier that is defined by .NET XAML Services.">.NET Framework XAML 服務所定義之各個 <see cref="T:System.Xaml.XamlDirective" /> 識別項的唯讀泛型集合。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.AllTypes">
      <summary vsli:raw="Gets a read-only generic collection of individual &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; values that match, or alias, a XAML language intrinsic that is defined by .NET XAML Services.">取得個別 <see cref="T:System.Xaml.XamlType" /> 值的唯讀泛型集合，這些值符合或別名化由 .NET Framework XAML 服務定義的 XAML 語言本質。</summary>
      <returns vsli:raw="A read-only generic collection of each &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; that matches a XAML language intrinsic.">符合 XAML 語言本質之各個 <see cref="T:System.Xaml.XamlType" /> 的唯讀泛型集合。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Arguments">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Arguments&quot; /&gt; of a factory method or a generic usage.">取得 <see cref="T:System.Xaml.XamlDirective" /> 做為 Factory 方法的 <see langword="Arguments" /> 或用於一般用途。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Arguments&quot; /&gt; of a factory method or generic usage.">
        <see cref="T:System.Xaml.XamlDirective" />，做為 Factory 方法的 <see langword="Arguments" /> 或用於一般用途。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Array">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Array&quot; /&gt; XAML language intrinsic.">取得 <see langword="Array" /> XAML 語言本質的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Array&quot; /&gt; XAML language intrinsic.">
        <see langword="Array" /> XAML 語言本質的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.AsyncRecords">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;AsyncRecords&quot; /&gt; pseudomember.">取得 <see langword="AsyncRecords" /> 虛擬成員的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;AsyncRecords&quot; /&gt; pseudomember.">
        <see langword="AsyncRecords" /> 虛擬成員的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Base">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;base&quot; /&gt; directive from XML.">取得 XML 中之 <see langword="base" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;base&quot; /&gt; directive from XML.">XML 中之 <see langword="base" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Boolean">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Boolean&quot; /&gt; XAML language intrinsic.">取得 <see langword="Boolean" /> XAML 語言本質的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Boolean&quot; /&gt; XAML language intrinsic.">
        <see langword="Boolean" /> XAML 語言本質的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Byte">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Byte&quot; /&gt; XAML language intrinsic.">取得 <see langword="Byte" /> XAML 語言本質的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Byte&quot; /&gt; XAML language intrinsic.">
        <see langword="Byte" /> XAML 語言本質的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Char">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Char&quot; /&gt; XAML language intrinsic.">取得 <see langword="Char" /> XAML 語言本質的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Char&quot; /&gt; XAML language intrinsic.">
        <see langword="Char" /> XAML 語言本質的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Class">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Class&quot; /&gt; directive from XAML.">從 XAML 取得 <see langword="Class" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Class&quot; /&gt; directive from XAML.">XAML 中之 <see langword="Class" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.ClassAttributes">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;ClassAttributes&quot; /&gt; directive from XAML.">從 XAML 取得 <see langword="ClassAttributes" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;ClassAttributes&quot; /&gt; directive from XAML.">XAML 中之 <see langword="ClassAttributes" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.ClassModifier">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;ClassModifier&quot; /&gt; directive from XAML.">從 XAML 取得 <see langword="ClassModifier" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;ClassModifier&quot; /&gt; directive from XAML.">XAML 中之 <see langword="ClassModifier" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Code">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for &lt;see langword=&quot;Code&quot; /&gt; as detailed in [MS-XAML].">取得 [MS-XAML] 中所述之 <see langword="Code" /> 的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for &lt;see langword=&quot;Code&quot; /&gt; as detailed in [MS-XAML].">[MS-XAML] 中所述之 <see langword="Code" /> 的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.ConnectionId">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; that identifies a connection point for wiring events to handlers.">取得 <see cref="T:System.Xaml.XamlDirective" />，以識別將事件傳送至處理常式的連接點。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; that identifies a connection point for wiring events to handlers.">
        <see cref="T:System.Xaml.XamlDirective" />，識別將事件傳送至處理常式的連接點。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Decimal">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Decimal&quot; /&gt; XAML language intrinsic.">取得 <see langword="Decimal" /> XAML 語言本質的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Decimal&quot; /&gt; XAML language intrinsic.">
        <see langword="Decimal" /> XAML 語言本質的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Double">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Double&quot; /&gt; XAML language intrinsic.">取得 <see langword="Double" /> XAML 語言本質的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Double&quot; /&gt; XAML language intrinsic.">
        <see langword="Double" /> XAML 語言本質的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.FactoryMethod">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; that identifies a factory method for XAML.">取得 <see cref="T:System.Xaml.XamlDirective" />，以識別 XAML 的 Factory 方法。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; that identifies a factory method for XAML.">
        <see cref="T:System.Xaml.XamlDirective" />，識別 XAML 的 Factory 方法。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.FieldModifier">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;FieldModifier&quot; /&gt; directive from XAML.">從 XAML 取得 <see langword="FieldModifier" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;FieldModifier&quot; /&gt; directive from XAML.">XAML 中之 <see langword="FieldModifier" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Initialization">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Initialization&quot; /&gt; directive from XAML.">從 XAML 取得 <see langword="Initialization" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Initialization&quot; /&gt; directive from XAML.">XAML 中之 <see langword="Initialization" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Int16">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see cref=&quot;T:System.Int16&quot; /&gt; XAML language intrinsic.">取得 <see langword="Int16" /> XAML 語言本質的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see cref=&quot;T:System.Int16&quot; /&gt; XAML language intrinsic.">
        <see langword="Int16" /> XAML 語言本質的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Int32">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see cref=&quot;T:System.Int32&quot; /&gt; XAML language intrinsic.">取得 <see langword="Int32" /> XAML 語言本質的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see cref=&quot;T:System.Int32&quot; /&gt; XAML language intrinsic.">
        <see langword="Int32" /> XAML 語言本質的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Int64">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see cref=&quot;T:System.Int64&quot; /&gt; XAML language intrinsic.">取得 <see langword="Int64" /> XAML 語言本質的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see cref=&quot;T:System.Int64&quot; /&gt; XAML language intrinsic.">
        <see langword="Int64" /> XAML 語言本質的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Items">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Items&quot; /&gt; directive from XAML.">從 XAML 取得 <see langword="Items" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Items&quot; /&gt; directive from XAML.">XAML 中之 <see langword="Items" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Key">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Key&quot; /&gt; directive from XAML.">從 XAML 取得 <see langword="Key" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Key&quot; /&gt; directive from XAML.">XAML 中之 <see langword="Key" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Lang">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;lang&quot; /&gt; directive from XML.">取得 XML 中之 <see langword="lang" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;lang&quot; /&gt; directive from XML.">XML 中之 <see langword="lang" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Member">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the type that is the item type of &lt;see cref=&quot;P:System.Xaml.XamlLanguage.Members&quot; /&gt;.">取得型別的 <see cref="T:System.Xaml.XamlType" />，這個型別是 <see cref="P:System.Xaml.XamlLanguage.Members" /> 的項目型別。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the type that is the item type of &lt;see cref=&quot;P:System.Xaml.XamlLanguage.Members&quot; /&gt;.">型別的 <see cref="T:System.Xaml.XamlType" />，這個型別是 <see cref="P:System.Xaml.XamlLanguage.Members" /> 的項目型別。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Members">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Members&quot; /&gt; concept in XAML.">取得 XAML 中之 <see langword="Members" /> 概念的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Members&quot; /&gt; concept in XAML.">XAML 中之 <see langword="Members" /> 概念的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Name">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Name&quot; /&gt; directive from XAML.">從 XAML 取得 <see langword="Name" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Name&quot; /&gt; directive from XAML.">XAML 中之 <see langword="Name" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Null">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Null&quot; /&gt; or &lt;see langword=&quot;NullExtension&quot; /&gt; XAML language intrinsic.">取得 <see langword="Null" /> 或 <see langword="NullExtension" /> XAML 語言本質的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Null&quot; /&gt;/&lt;see langword=&quot;NullExtension&quot; /&gt; XAML language intrinsic.">XAML 語言內建函式的。 <see cref="T:System.Xaml.XamlType" /><see langword="Null" /> / <see langword="NullExtension" /></returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Object">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Object&quot; /&gt; XAML language concept.">取得 <see langword="Object" /> XAML 語言概念的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Object&quot; /&gt; XAML language concept.">
        <see langword="Object" /> XAML 語言概念的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.PositionalParameters">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;PositionalParameters&quot; /&gt; directive from XAML.">從 XAML 取得 <see langword="PositionalParameters" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;PositionalParameters&quot; /&gt; directive from XAML.">XAML 中之 <see langword="PositionalParameters" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Property">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Property&quot; /&gt; concept in XAML.">取得 XAML 中之 <see langword="Property" /> 概念的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Property&quot; /&gt; concept in XAML.">XAML 中之 <see langword="Property" /> 概念的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Reference">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; that represents a &lt;see langword=&quot;Reference&quot; /&gt; for XAML.">取得表示 XAML 之 <see langword="Reference" /> 的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; that represents a &lt;see langword=&quot;Reference&quot; /&gt; for XAML.">表示 XAML 之 <see langword="Reference" /> 的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Shared">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Shared&quot; /&gt; directive for XAML.">取得 XAML 之 <see langword="Shared" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Shared&quot; /&gt; directive for XAML.">XAML 之 <see langword="Shared" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Single">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;c&gt;Single&lt;/c&gt; XAML language intrinsic.">取得 <see langword="Single" /> XAML 語言本質的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;c&gt;Single&lt;/c&gt; XAML language intrinsic.">
        <see langword="Single" /> XAML 語言本質的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Space">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;space&quot; /&gt; directive from XML.">取得 XML 中之 <see langword="space" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;space&quot; /&gt; directive from XML.">XML 中之 <see langword="space" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Static">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Static&quot; /&gt;/&lt;see langword=&quot;StaticExtension&quot; /&gt; XAML language intrinsic.">取得 <see langword="Static" />/<see langword="StaticExtension" /> XAML 語言本質的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Static&quot; /&gt;/&lt;see langword=&quot;StaticExtension&quot; /&gt; XAML language intrinsic.">XAML 語言內建函式的。 <see cref="T:System.Xaml.XamlType" /><see langword="Static" /> / <see langword="StaticExtension" /></returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.String">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;String&quot; /&gt; XAML language intrinsic.">取得 <see langword="String" /> XAML 語言本質的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;String&quot; /&gt; XAML language intrinsic.">
        <see langword="String" /> XAML 語言本質的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Subclass">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Subclass&quot; /&gt; directive from XAML.">從 XAML 取得 <see langword="Subclass" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Subclass&quot; /&gt; directive from XAML.">XAML 中之 <see langword="Subclass" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.SynchronousMode">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; that enables loading XAML asynchronously if the XAML processor supports such a mode.">取得啟用非同步 XAML 載入模式的 <see cref="T:System.Xaml.XamlDirective" /> (如果 XAML 處理器支援這種模式的話)。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; that enables loading XAML asynchronously.">啟用非同步 XAML 載入模式的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.TimeSpan">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;TimeSpan&quot; /&gt; concept in XAML language.">取得 XAML 語言中之 <see langword="TimeSpan" /> 概念的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;TimeSpan&quot; /&gt; XAML language concept.">
        <see langword="TimeSpan" /> XAML 語言概念的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Type">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Type&quot; /&gt;/&lt;see langword=&quot;TypeExtension&quot; /&gt; XAML language intrinsic.">取得 <see langword="Type" />/<see langword="TypeExtension" /> XAML 語言本質的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Type&quot; /&gt;/&lt;see langword=&quot;TypeExtension&quot; /&gt; XAML language intrinsic.">XAML 語言內建函式的。 <see cref="T:System.Xaml.XamlType" /><see langword="Type" /> / <see langword="TypeExtension" /></returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.TypeArguments">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;TypeArguments&quot; /&gt; directive from XAML.">從 XAML 取得 <see langword="TypeArguments" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;TypeArguments&quot; /&gt; directive from XAML.">XAML 中之 <see langword="TypeArguments" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Uid">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Uid&quot; /&gt; directive from XAML.">從 XAML 取得 <see langword="Uid" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Uid&quot; /&gt; directive from XAML.">XAML 中之 <see langword="Uid" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.UnknownContent">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;UnknownContent&quot; /&gt; directive from XAML.">從 XAML 取得 <see langword="UnknownContent" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;UnknownContent&quot; /&gt; directive from XAML.">XAML 中之 <see langword="UnknownContent" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Uri">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Uri&quot; /&gt; XAML language concept.">取得 <see langword="Uri" /> XAML 語言概念的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Uri&quot; /&gt; XAML language concept.">
        <see langword="Uri" /> XAML 語言概念的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="F:System.Xaml.XamlLanguage.Xaml2006Namespace">
      <summary vsli:raw="Gets a string value for the string that identifies the XAML (2006) language namespace. That namespace corresponds to the XAML (2006) &quot;x&quot; prefixed namespace as defined in [MS-XAML] Section 5.1.1.">取得字串的字串值，這個字串識別 XAML (2006) 語言命名空間。 根據 [MS-XAML] 第 5.1.1 節 (英文) 中的定義，該命名空間對應至開頭為 XAML (2006) "x" 的命名空間。</summary>
    </member>
    <member name="P:System.Xaml.XamlLanguage.XamlNamespaces">
      <summary vsli:raw="Gets a collection of the namespace identifiers for XAML.">取得 XAML 之命名空間識別項的集合。</summary>
      <returns vsli:raw="A collection of the namespace identifiers for XAML.">XAML 之命名空間識別項的集合。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.XData">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the XAML type that backs an &lt;see langword=&quot;XData&quot; /&gt; block in XAML.">取得 XAML 型別的 <see cref="T:System.Xaml.XamlType" />，這個型別支援 XAML 中的 <see langword="XData" /> 區塊。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the XAML type that backs an &lt;see langword=&quot;XData&quot; /&gt; block. See [MS-XAML] Section 5.2.23.">支援 <see langword="XData" /> 區塊之 XAML 型別的 <see cref="T:System.Xaml.XamlType" />。 請參閱[MS-XAML] 區段 5.2.23。</returns>
    </member>
    <member name="F:System.Xaml.XamlLanguage.Xml1998Namespace">
      <summary vsli:raw="Gets a string value for the string that identifies the XML (1998) language namespace. That namespace corresponds to the XML &quot;xml&quot; prefixed namespace as referenced in [MS-XAML] Section 5.1.2.">取得字串的字串值，這個字串識別 XML (1998) 語言命名空間。 根據 [MS-XAML] 第 5.1.2 節 (英文) 中的描述，該命名空間對應至開頭為 XML "xml" 的命名空間。</summary>
    </member>
    <member name="P:System.Xaml.XamlLanguage.XmlNamespaces">
      <summary vsli:raw="Gets a collection of the namespace identifiers for XML.">取得 XML 之命名空間識別項的集合。</summary>
      <returns vsli:raw="A collection of the namespace identifiers for XML.">XML 之命名空間識別項的集合。</returns>
    </member>
    <member name="T:System.Xaml.XamlMember">
      <summary vsli:raw="Provides the XAML type system identifier for members of XAML types. The identifier is used by XAML readers and XAML writers during processing of member nodes (when the XAML reader is positioned on a &lt;see cref=&quot;F:System.Xaml.XamlNodeType.StartMember&quot; /&gt;) and also for general XAML type system logic.">提供 XAML 型別系統識別項給 XAML 型別的成員。 這個識別項會由 XAML 讀取器和 XAML 寫入器在處理成員節點期間 (當 XAML 讀取器位於 <see cref="F:System.Xaml.XamlNodeType.StartMember" /> 時) 使用，同時也會用於一般 XAML 型別系統邏輯。</summary>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; class using CLR type system &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; and a &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt;.">使用 CLR 型別系統 <see cref="T:System.Xaml.XamlMember" /> 和 <see cref="T:System.Reflection.EventInfo" />，初始化 <see cref="T:System.Xaml.XamlSchemaContext" /> 類別的新執行個體。</summary>
      <param name="eventInfo" vsli:raw="The CLR type system &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; that represents the event member.">表示事件成員的 CLR 型別系統 <see cref="T:System.Reflection.EventInfo" />。</param>
      <param name="schemaContext" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt; context that qualifies the member.">用來限定成員的 <see cref="T:System.Xaml.XamlSchemaContext" /> 內容。</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; class using CLR type system &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; and a &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt;, including &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; information.">使用 CLR 型別系統 <see cref="T:System.Xaml.XamlMember" /> 和 <see cref="T:System.Reflection.EventInfo" /> (包含 <see cref="T:System.Xaml.XamlSchemaContext" /> 資訊)，初始化 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 類別的新執行個體。</summary>
      <param name="eventInfo" vsli:raw="The CLR type system &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; that represents the event member.">表示事件成員的 CLR 型別系統 <see cref="T:System.Reflection.EventInfo" />。</param>
      <param name="schemaContext" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt; context that qualifies the member.">用來限定成員的 <see cref="T:System.Xaml.XamlSchemaContext" /> 內容。</param>
      <param name="invoker" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; implementation that handles run-time reflection calls against the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">
        <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 實作，可處理對 <see cref="T:System.Xaml.XamlMember" /> 的執行階段反映呼叫。</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; class using CLR type system &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; and a &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt;.">使用 CLR 型別系統 <see cref="T:System.Xaml.XamlMember" /> 和 <see cref="T:System.Reflection.PropertyInfo" />，初始化 <see cref="T:System.Xaml.XamlSchemaContext" /> 類別的新執行個體。</summary>
      <param name="propertyInfo" vsli:raw="The CLR type system &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; that represents the property member.">表示屬性成員的 CLR 型別系統 <see cref="T:System.Reflection.PropertyInfo" />。</param>
      <param name="schemaContext" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt; context that qualifies the member.">用來限定成員的 <see cref="T:System.Xaml.XamlSchemaContext" /> 內容。</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; class using reflection &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; and a &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt;, including &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; information.">使用反映 <see cref="T:System.Xaml.XamlMember" /> 和 <see cref="T:System.Reflection.PropertyInfo" /> (包含 <see cref="T:System.Xaml.XamlSchemaContext" /> 資訊)，初始化 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 類別的新執行個體。</summary>
      <param name="propertyInfo" vsli:raw="The CLR type system &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; that represents the property member.">表示屬性成員的 CLR 型別系統 <see cref="T:System.Reflection.PropertyInfo" />。</param>
      <param name="schemaContext" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt; context that qualifies the member.">用來限定成員的 <see cref="T:System.Xaml.XamlSchemaContext" /> 內容。</param>
      <param name="invoker" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; implementation that handles run-time invocation calls against the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">
        <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 實作，可處理對 <see cref="T:System.Xaml.XamlMember" /> 的執行階段叫用呼叫。</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; class for a &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; that represents an attachable property.">針對表示可附加屬性的 <see cref="T:System.Xaml.XamlMember" />，初始化 <see cref="T:System.Xaml.XamlMember" /> 類別的新執行個體。</summary>
      <param name="attachablePropertyName" vsli:raw="The string name of the attachable property.">可附加屬性的字串名稱。</param>
      <param name="getter" vsli:raw="The CLR type system &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; for the &lt;see langword=&quot;get&quot; /&gt; accessor of the attachable member's backing implementation.">可附加成員之支援實作的 <see langword="get" /> 存取子的 CLR 型別系統 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="setter" vsli:raw="The CLR type system &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; for the &lt;see langword=&quot;set&quot; /&gt; accessor of the attachable member's backing implementation.">可附加成員之支援實作的 <see langword="set" /> 存取子的 CLR 型別系統 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="schemaContext" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt; context that qualifies the member.">用來限定成員的 <see cref="T:System.Xaml.XamlSchemaContext" /> 內容。</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; class for a &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; that represents an attachable property, including &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; information.">針對表示可附加屬性的 <see cref="T:System.Xaml.XamlMember" /> (包含 <see cref="T:System.Xaml.XamlMember" /> 資訊)，初始化 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 類別的新執行個體。</summary>
      <param name="attachablePropertyName" vsli:raw="The string name of the attachable property.">可附加屬性的字串名稱。</param>
      <param name="getter" vsli:raw="The CLR type system &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; for the &lt;see langword=&quot;get&quot; /&gt; accessor of the attachable member's backing implementation.">可附加成員之支援實作的 <see langword="get" /> 存取子的 CLR 型別系統 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="setter" vsli:raw="The CLR type system &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; for the &lt;see langword=&quot;set&quot; /&gt; accessor of the attachable member's backing implementation.">可附加成員之支援實作的 <see langword="set" /> 存取子的 CLR 型別系統 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="schemaContext" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt; context that qualifies the member.">用來限定成員的 <see cref="T:System.Xaml.XamlSchemaContext" /> 內容。</param>
      <param name="invoker" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; implementation that handles run-time invocation calls against the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">
        <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 實作，可處理對 <see cref="T:System.Xaml.XamlMember" /> 的執行階段叫用呼叫。</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; class for a &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; that represents an attachable event.">針對表示可附加事件的 <see cref="T:System.Xaml.XamlMember" />，初始化 <see cref="T:System.Xaml.XamlMember" /> 類別的新執行個體。</summary>
      <param name="attachableEventName" vsli:raw="The string name of the attachable event.">可附加事件的字串名稱。</param>
      <param name="adder" vsli:raw="The CLR type system &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; for the handler &lt;see langword=&quot;Add&quot; /&gt; method of the attachable member's backing implementation.">可附加成員之支援實作的處理常式 <see langword="Add" /> 方法的 CLR 型別系統 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="schemaContext" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt; context that qualifies the member.">用來限定成員的 <see cref="T:System.Xaml.XamlSchemaContext" /> 內容。</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; class for a &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; that represents an attachable event, including &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; information.">針對表示可附加事件的 <see cref="T:System.Xaml.XamlMember" /> (包含 <see cref="T:System.Xaml.XamlMember" /> 資訊)，初始化 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 類別的新執行個體。</summary>
      <param name="attachableEventName" vsli:raw="The string name of the attachable event.">可附加事件的字串名稱。</param>
      <param name="adder" vsli:raw="The CLR type system &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; for the handler &lt;see langword=&quot;Add&quot; /&gt; method of the attachable member's backing implementation.">可附加成員之支援實作的處理常式 <see langword="Add" /> 方法的 CLR 型別系統 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="schemaContext" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt; context that qualifies the member.">用來限定成員的 <see cref="T:System.Xaml.XamlSchemaContext" /> 內容。</param>
      <param name="invoker" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; implementation that handles run-time invocation calls against the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">
        <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 實作，可處理對 <see cref="T:System.Xaml.XamlMember" /> 的執行階段叫用呼叫。</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; class using a string name and declaring &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; information. A &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; that is constructed with this signature has significant limitations.">使用字串名稱並宣告 <see cref="T:System.Xaml.XamlMember" /> 資訊，初始化 <see cref="T:System.Xaml.XamlType" /> 類別的新執行個體。 使用此簽章建構的 <see cref="T:System.Xaml.XamlMember" /> 具有諸多限制。</summary>
      <param name="name" vsli:raw="The string name of the member.">成員的字串名稱。</param>
      <param name="declaringType" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; information for the declaring type.">進行宣告的型別的 <see cref="T:System.Xaml.XamlType" /> 資訊。</param>
      <param name="isAttachable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the member is attachable; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示成員為可附加成員，否則為 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; or &lt;paramref name=&quot;declaringType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 或 <paramref name="declaringType" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xaml.XamlMember.DeclaringType">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the type that declares the member that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">取得型別的 <see cref="T:System.Xaml.XamlType" />，這個型別宣告與此 <see cref="T:System.Xaml.XamlMember" /> 相關聯的成員。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the type that declares the member that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">型別的 <see cref="T:System.Xaml.XamlType" />，這個型別宣告與此 <see cref="T:System.Xaml.XamlMember" /> 相關聯的成員。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.DeferringLoader">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; object, which is used for deferred loading of XAML declared objects.">取得 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 物件，這個物件用於延後載入 XAML 宣告的物件。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; with &lt;see cref=&quot;T:System.Xaml.XamlDeferringLoader&quot; /&gt; constraint on the generic.">
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />，對泛型具有 <see cref="T:System.Xaml.XamlDeferringLoader" /> 條件約束。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.DependsOn">
      <summary vsli:raw="Gets a list of &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; objects. These report the members where dependency relationships for initialization order exist relative to this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">取得 <see cref="T:System.Xaml.XamlMember" /> 物件的清單。 這些物件會報告因與此 <see cref="T:System.Xaml.XamlMember" /> 有相對初始設定順序而存在相依關聯性的成員。</summary>
      <returns vsli:raw="A list of &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; objects.">
        <see cref="T:System.Xaml.XamlMember" /> 物件的清單。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.Equals(System.Object)">
      <summary vsli:raw="Indicates whether the current object is equal to another object.">指出目前的物件和另一個物件是否相等。</summary>
      <param name="obj" vsli:raw="The object to compare with this object.">要與這個物件比較的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current object is equal to the &lt;paramref name=&quot;obj&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果目前的物件等於 <paramref name="obj" /> 參數，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.Equals(System.Xaml.XamlMember)">
      <summary vsli:raw="Indicates whether the current object is equal to another object of the same type.">指出目前的物件是否等於另一個具有相同型別的物件。</summary>
      <param name="other" vsli:raw="An object to compare with this object.">要與這個物件相互比較的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current object is equal to the &lt;paramref name=&quot;other&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果目前的物件等於 <paramref name="other" /> 參數，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.GetHashCode">
      <summary vsli:raw="Returns the hash code for this object.">傳回這個物件的雜湊程式碼。</summary>
      <returns vsli:raw="An integer hash code.">整數雜湊程式碼。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.GetXamlNamespaces">
      <summary vsli:raw="Returns a list of XAML namespaces where this XAML member can exist.">傳回這個 XAML 成員可能存在之 XAML 命名空間的清單。</summary>
      <returns vsli:raw="A list of XAML namespace identifiers as strings.">XAML 命名空間識別項的清單 (字串形式)。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.Invoker">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; implementation that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">取得與這個 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 相關聯的 <see cref="T:System.Xaml.XamlMember" /> 實作。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; implementation that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">與這個 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 相關聯的 <see cref="T:System.Xaml.XamlMember" /> 實作。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsAmbient">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; is reported as an ambient property.">取得值，這個值表示此 <see cref="T:System.Xaml.XamlMember" /> 是否報告為環境屬性。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; is reported as an ambient property; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個 <see cref="T:System.Xaml.XamlMember" /> 報告為環境屬性，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsAttachable">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; is an attachable member.">取得值，這個值表示此 <see cref="T:System.Xaml.XamlMember" /> 是否為可附加的成員。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; is an attachable member; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個 <see cref="T:System.Xaml.XamlMember" /> 是可附加的成員，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsDirective">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; is a XAML directive.">取得值，這個值表示此 <see cref="T:System.Xaml.XamlMember" /> 是否為 XAML 指示詞。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; is a XAML directive; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個 <see cref="T:System.Xaml.XamlMember" /> 是 XAML 指示詞，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsEvent">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents an event member.">取得值，這個值表示此 <see cref="T:System.Xaml.XamlMember" /> 是否表示事件成員。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents an event; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個 <see cref="T:System.Xaml.XamlMember" /> 表示事件，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsNameValid">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; is initialized with a valid &lt;see langword=&quot;xamlName&quot; /&gt; string as its &lt;see cref=&quot;P:System.Xaml.XamlMember.Name&quot; /&gt;.">取得值，這個值表示此 <see cref="T:System.Xaml.XamlMember" /> 是否是使用有效的 <see langword="xamlName" /> 字串做為其 <see cref="P:System.Xaml.XamlMember.Name" /> 進行初始化。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; is initialized with a valid &lt;see langword=&quot;xamlName&quot; /&gt; string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個 <see cref="T:System.Xaml.XamlMember" /> 是使用有效的 <see langword="true" /> 字串進行初始化，則為 <see langword="xamlName" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents a read-only member.">取得值，這個值表示此 <see cref="T:System.Xaml.XamlMember" /> 是否表示唯讀成員。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents a read-only member; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個 <see cref="T:System.Xaml.XamlMember" /> 表示唯讀成員，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsReadPublic">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents a member with a callable public &lt;see langword=&quot;get&quot; /&gt; accessor.">取得值，這個值表示此 <see cref="T:System.Xaml.XamlMember" /> 是否表示具有可呼叫之公用 <see langword="get" /> 存取子的成員。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents a callable public &lt;see langword=&quot;get&quot; /&gt; accessor; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個 <see cref="T:System.Xaml.XamlMember" /> 表示可呼叫的公用 <see langword="true" /> 存取子則為 <see langword="get" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsUnknown">
      <summary vsli:raw="Gets a value that indicates whether the member is not resolvable by the backing system that is used for type and member resolution.">取得值，這個值表示用於型別和成員解析的支援系統是否無法解析成員。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the member is not resolvable; &lt;see langword=&quot;false&quot; /&gt; if the member is resolvable.">如果無法解析成員則為 <see langword="true" />，如果可以解析成員則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsWriteOnly">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents a write-only member.">取得值，這個值表示此 <see cref="T:System.Xaml.XamlMember" /> 是否表示唯寫成員。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents a write-only member; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個 <see cref="T:System.Xaml.XamlMember" /> 表示唯寫成員，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsWritePublic">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents a member that has a callable public &lt;see langword=&quot;set&quot; /&gt; accessor.">取得值，這個值表示此 <see cref="T:System.Xaml.XamlMember" /> 是否表示具有可呼叫之公用 <see langword="set" /> 存取子的成員。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents a callable public &lt;see langword=&quot;set&quot; /&gt; accessor; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個 <see cref="T:System.Xaml.XamlMember" /> 表示可呼叫的公用 <see langword="true" /> 存取子則為 <see langword="set" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupCustomAttributeProvider">
      <summary vsli:raw="When implemented in a derived class, returns an &lt;see cref=&quot;T:System.Reflection.ICustomAttributeProvider&quot; /&gt; implementation.">在衍生類別中實作時，傳回 <see cref="T:System.Reflection.ICustomAttributeProvider" /> 實作。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Reflection.ICustomAttributeProvider&quot; /&gt; implementation.">
        <see cref="T:System.Reflection.ICustomAttributeProvider" /> 實作。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupDeferringLoader">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; object, which is used for deferred loading of XAML declared objects.">傳回 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 物件，這個物件用於延後載入 XAML 宣告的物件。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; that has a &lt;see cref=&quot;T:System.Xaml.XamlDeferringLoader&quot; /&gt; constraint on the generic.">
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />，具有對泛型的 <see cref="T:System.Xaml.XamlDeferringLoader" /> 條件約束。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupDependsOn">
      <summary vsli:raw="Returns a list of &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; objects. Items in the list report the members where dependency relationships for initialization order exist relative to this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">傳回 <see cref="T:System.Xaml.XamlMember" /> 物件的清單。 這個清單中的項目會報告因與這個 <see cref="T:System.Xaml.XamlMember" /> 有相對初始設定順序而存在相依關聯性的成員。</summary>
      <returns vsli:raw="A list of &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; objects.">
        <see cref="T:System.Xaml.XamlMember" /> 物件的清單。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupInvoker">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">傳回與這個 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 相關聯的 <see cref="T:System.Xaml.XamlMember" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; information for this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;; or &lt;see langword=&quot;null&quot; /&gt;.">這個 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 的 <see cref="T:System.Xaml.XamlMember" /> 資訊，否則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsAmbient">
      <summary vsli:raw="Returns whether this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; is reported as an ambient property.">傳回這個 <see cref="T:System.Xaml.XamlMember" /> 是否報告為環境屬性。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to report this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; as an ambient property; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 報告這個 <see cref="T:System.Xaml.XamlMember" /> 為環境屬性，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsEvent">
      <summary vsli:raw="Returns whether this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents an event.">傳回這個 <see cref="T:System.Xaml.XamlMember" /> 是否表示事件。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to report that this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents an event; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 報告這個 <see cref="T:System.Xaml.XamlMember" /> 表示事件，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsReadOnly">
      <summary vsli:raw="Returns whether this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents an intended read-only property.">傳回這個 <see cref="T:System.Xaml.XamlMember" /> 是否表示所需的唯讀屬性。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to report this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; as an intended read-only property; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 報告這個 <see cref="T:System.Xaml.XamlMember" /> 為所需的唯讀屬性，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsReadPublic">
      <summary vsli:raw="Returns whether this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents a property that has a public &lt;see langword=&quot;get&quot; /&gt; accessor.">傳回這個 <see cref="T:System.Xaml.XamlMember" /> 是否表示具有公用 <see langword="get" /> 存取子的屬性。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents a property that has a public &lt;see langword=&quot;get&quot; /&gt; accessor; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個 <see cref="T:System.Xaml.XamlMember" /> 表示具有公用 <see langword="true" /> 存取子的屬性，則為 <see langword="get" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsUnknown">
      <summary vsli:raw="Returns whether this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents a member that is not resolvable by the backing system that is used for type and member resolution.">傳回這個 <see cref="T:System.Xaml.XamlMember" /> 是否表示用於型別和成員解析的支援系統所無法解析的成員。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents a non-resolvable member; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個 <see cref="T:System.Xaml.XamlMember" /> 表示無法解析的成員則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsWriteOnly">
      <summary vsli:raw="Returns whether this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents a member that has a public &lt;see langword=&quot;set&quot; /&gt; accessor but not a public &lt;see langword=&quot;get&quot; /&gt; accessor.">傳回這個 <see cref="T:System.Xaml.XamlMember" /> 是否表示具有公用 <see langword="set" /> 存取子但沒有公用 <see langword="get" /> 存取子的成員。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents a write-only member; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個 <see cref="T:System.Xaml.XamlMember" /> 表示唯寫成員，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsWritePublic">
      <summary vsli:raw="Returns whether this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents a member that has a public &lt;see langword=&quot;set&quot; /&gt; accessor.">傳回這個 <see cref="T:System.Xaml.XamlMember" /> 是否表示具有公用 <see langword="set" /> 存取子的成員。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents a writable member; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個 <see cref="T:System.Xaml.XamlMember" /> 表示可寫入的成員，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupMarkupExtensionBracketCharacters">
      <summary vsli:raw="Returns the opening and closing bracket characters for a markup extension.">傳回標記延伸的左右括弧字元。</summary>
      <returns vsli:raw="A collection containing the opening and closing bracket characters.">包含左右括弧字元的集合。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupTargetType">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the type where the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; can exist.">傳回 <see cref="T:System.Xaml.XamlType" /> 可能存在之型別的 <see cref="T:System.Xaml.XamlMember" />。</summary>
      <returns vsli:raw="The type where the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; can exist.">
        <see cref="T:System.Xaml.XamlMember" /> 可能存在的型別。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupType">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the type that is used by the member.">傳回成員所使用型別的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the type that is used by the member.">成員所使用型別的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupTypeConverter">
      <summary vsli:raw="Returns a type converter implementation that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">傳回與這個 <see cref="T:System.Xaml.XamlMember" /> 相關聯的型別轉換器實作。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; instance with &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; constraint; or &lt;see langword=&quot;null&quot; /&gt;.">具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 條件約束的 <see cref="T:System.ComponentModel.TypeConverter" /> 執行個體，否則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupUnderlyingGetter">
      <summary vsli:raw="Returns a &lt;see langword=&quot;get&quot; /&gt; accessor that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">傳回與這個 <see cref="T:System.Xaml.XamlMember" /> 相關聯的 <see langword="get" /> 存取子。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; for the associated &lt;see langword=&quot;get&quot; /&gt; accessor; or &lt;see langword=&quot;null&quot; /&gt;.">相關聯 <see langword="get" /> 存取子的 <see cref="T:System.Reflection.MethodInfo" />，否則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupUnderlyingMember">
      <summary vsli:raw="Returns a CLR type system &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">傳回與這個 <see cref="T:System.Reflection.MemberInfo" /> 相關聯的 CLR 型別系統 <see cref="T:System.Xaml.XamlMember" />。</summary>
      <returns vsli:raw="A CLR type system &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; object that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;; or &lt;see langword=&quot;null&quot; /&gt;.">與這個 <see cref="T:System.Reflection.MemberInfo" /> 相關聯的 CLR 型別系統 <see cref="T:System.Xaml.XamlMember" /> 物件，否則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupUnderlyingSetter">
      <summary vsli:raw="Returns a &lt;see langword=&quot;set&quot; /&gt; accessor that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">傳回與這個 <see cref="T:System.Xaml.XamlMember" /> 相關聯的 <see langword="set" /> 存取子。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; for the associated &lt;see langword=&quot;set&quot; /&gt; accessor; or &lt;see langword=&quot;null&quot; /&gt;.">相關聯 <see langword="set" /> 存取子的 <see cref="T:System.Reflection.MethodInfo" />，否則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupValueSerializer">
      <summary vsli:raw="Returns a value serializer implementation that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">傳回與這個 <see cref="T:System.Xaml.XamlMember" /> 相關聯的值序列化程式實作。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; instance with &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; constraint, or &lt;see langword=&quot;null&quot; /&gt;.">具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 條件約束的 <see cref="T:System.Windows.Markup.ValueSerializer" /> 執行個體，或 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.MarkupExtensionBracketCharacters">
      <summary vsli:raw="Defines the opening and closing bracket characters for a markup extension.">定義標記延伸的左右括弧字元。</summary>
      <returns vsli:raw="A collection containing the opening and closing bracket characters.">包含左右括弧字元的集合。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.Name">
      <summary vsli:raw="Gets the &lt;see langword=&quot;xamlName&quot; /&gt; name string that declares this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">取得宣告此 <see cref="T:System.Xaml.XamlMember" /> 的 <see langword="xamlName" /> 名稱字串。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;xamlName&quot; /&gt; name string that declares this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">宣告這個 <see cref="T:System.Xaml.XamlMember" /> 的 <see langword="xamlName" /> 名稱字串。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)">
      <summary vsli:raw="Determines whether two specified &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; objects have the same value.">判斷兩個指定的 <see cref="T:System.Xaml.XamlMember" /> 物件是否具有相同的值。</summary>
      <param name="xamlMember1" vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlMember" /> 或 <see langword="null" />。</param>
      <param name="xamlMember2" vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlMember" /> 或 <see langword="null" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of &lt;paramref name=&quot;xamlMember1&quot; /&gt; is the same as the value of &lt;paramref name=&quot;xamlMember2&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 的值與 <paramref name="xamlMember1" /> 的值相同，則為 <paramref name="xamlMember2" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)">
      <summary vsli:raw="Determines whether two specified &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; objects have different values.">判斷兩個指定的 <see cref="T:System.Xaml.XamlMember" /> 物件是否具有不同的值。</summary>
      <param name="xamlMember1" vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlMember" /> 或 <see langword="null" />。</param>
      <param name="xamlMember2" vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlMember" /> 或 <see langword="null" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of &lt;paramref name=&quot;xamlMember1&quot; /&gt; differs from the value of &lt;paramref name=&quot;xamlMember2&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="xamlMember1" /> 的值與 <paramref name="xamlMember2" /> 的值不同，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.PreferredXamlNamespace">
      <summary vsli:raw="Gets the single XAML namespace URI that identifies the primary XAML namespace for this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">取得單一 XAML 命名空間 URI，這個 URI 識別此 <see cref="T:System.Xaml.XamlMember" /> 的主要 XAML 命名空間。</summary>
      <returns vsli:raw="The identifier for the primary XAML namespace for this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;, as a string.">這個 <see cref="T:System.Xaml.XamlMember" /> 之主要 XAML 命名空間的識別項 (字串形式)。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.SerializationVisibility">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.ComponentModel.DesignerSerializationVisibility&quot; /&gt; value, which indicates how a visual designer should process the member.">取得 <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> 值，這個值表示視覺化設計工具應該如何處理成員。</summary>
      <returns vsli:raw="A value of the &lt;see cref=&quot;T:System.ComponentModel.DesignerSerializationVisibility&quot; /&gt; enumeration. The default is &lt;see cref=&quot;F:System.ComponentModel.DesignerSerializationVisibility.Visible&quot; /&gt;.">
        <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> 列舉的值。 預設為 <see cref="F:System.ComponentModel.DesignerSerializationVisibility.Visible" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.TargetType">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the type where the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; can exist.">取得 <see cref="T:System.Xaml.XamlType" /> 可能存在之型別的 <see cref="T:System.Xaml.XamlMember" />。</summary>
      <returns vsli:raw="The type where the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; can exist.">
        <see cref="T:System.Xaml.XamlMember" /> 可能存在的型別。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.ToString">
      <summary vsli:raw="Returns a string representation of this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">傳回這個 <see cref="T:System.Xaml.XamlMember" /> 的字串表示。</summary>
      <returns vsli:raw="A string representation of this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">這個 <see cref="T:System.Xaml.XamlMember" /> 的字串表示。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.Type">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the type that is used by the member.">取得成員所使用型別的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the type that is used by the member.">成員所使用型別的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.TypeConverter">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; object, which can be used for type conversion construction of XAML declared objects.">取得 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 物件，這個物件可用於建構 XAML 宣告物件的型別轉換。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; value, with a &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; constraint on the generic.">
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />，對泛型具有 <see cref="T:System.ComponentModel.TypeConverter" /> 條件約束。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.UnderlyingMember">
      <summary vsli:raw="Gets the CLR type system &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; that is available for a member that is constructed by &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt;.">針對以 <see cref="T:System.Reflection.MemberInfo" />、<see cref="T:System.Reflection.PropertyInfo" /> 或 <see cref="T:System.Reflection.MethodInfo" /> 所建構的成員，取得可用的 CLR 型別系統 <see cref="T:System.Reflection.EventInfo" />。</summary>
      <returns vsli:raw="CLR type system &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; information, as cast from the initial constructor parameters. A &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; that is constructed with the &lt;see cref=&quot;M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)&quot; /&gt; signature returns &lt;see langword=&quot;null&quot; /&gt;.">從初始建構函式參數轉型的 CLR 型別系統 <see cref="T:System.Reflection.MemberInfo" /> 資訊。 以 <see cref="T:System.Xaml.XamlMember" /> 簽章建構的 <see cref="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)" /> 會傳回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.ValueSerializer">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; object, which is used for value serialization of XAML declared objects.">取得 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 物件，這個物件用於對 XAML 宣告的物件進行值序列化。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; with &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; constraint on the generic.">
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />，對泛型具有 <see cref="T:System.Windows.Markup.ValueSerializer" /> 條件約束。</returns>
    </member>
    <member name="T:System.Xaml.XamlNodeList">
      <summary vsli:raw="Provides a list of XAML nodes, which can be used for scenarios such as writing XAML nodes in a deferred manner.">提供 XAML 節點的清單，這些節點可用於以延後方式寫入 XAML 節點之類的情節。</summary>
    </member>
    <member name="M:System.Xaml.XamlNodeList.#ctor(System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlNodeList&quot; /&gt; class, using a provided schema context.">使用提供的結構描述內容，初始化 <see cref="T:System.Xaml.XamlNodeList" /> 類別的新執行個體。</summary>
      <param name="schemaContext" vsli:raw="The schema context to use for node operations.">要用於節點作業的結構描述內容。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="schemaContext" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlNodeList.#ctor(System.Xaml.XamlSchemaContext,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlNodeList&quot; /&gt; class, using a provided schema context and list size.">使用提供的結構描述內容和清單大小，初始化 <see cref="T:System.Xaml.XamlNodeList" /> 類別的新執行個體。</summary>
      <param name="schemaContext" vsli:raw="The schema context to use for node operations.">要用於節點作業的結構描述內容。</param>
      <param name="size" vsli:raw="The intended item count of the list.">想要的清單項目計數。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="schemaContext" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlNodeList.Clear">
      <summary vsli:raw="Clears the items in this list.">清除這個清單中的項目。</summary>
    </member>
    <member name="P:System.Xaml.XamlNodeList.Count">
      <summary vsli:raw="Gets the number of nodes in this &lt;see cref=&quot;T:System.Xaml.XamlNodeList&quot; /&gt;.">取得這個 <see cref="T:System.Xaml.XamlNodeList" /> 中的節點數目。</summary>
      <returns vsli:raw="The number of nodes in this &lt;see cref=&quot;T:System.Xaml.XamlNodeList&quot; /&gt;.">這個 <see cref="T:System.Xaml.XamlNodeList" /> 中的節點數目。</returns>
    </member>
    <member name="M:System.Xaml.XamlNodeList.GetReader">
      <summary vsli:raw="Returns a XAML reader implementation delegate.">傳回 XAML 讀取器實作委派。</summary>
      <returns vsli:raw="A XAML reader implementation delegate.">XAML 讀取器實作委派。</returns>
      <exception cref="T:System.Xaml.XamlException" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlNodeList&quot; /&gt; is still in Write mode.  &#xA;  &#xA; -or-  &#xA;  &#xA; The writer that is used for the node list has no schema context.">
        <see cref="T:System.Xaml.XamlNodeList" /> 仍處於寫入模式。
-或-
用於節點清單的寫入器有沒有結構描述內容。</exception>
    </member>
    <member name="P:System.Xaml.XamlNodeList.Writer">
      <summary vsli:raw="Gets the associated XAML writer.">取得相關聯的 XAML 寫入器。</summary>
      <returns vsli:raw="The associated XAML writer.">相關聯的 XAML 寫入器。</returns>
    </member>
    <member name="T:System.Xaml.XamlNodeQueue">
      <summary vsli:raw="Provides a buffer for writing nodes and reading them again.">提供可用於寫入節點和再次讀取這些節點的緩衝區。</summary>
    </member>
    <member name="M:System.Xaml.XamlNodeQueue.#ctor(System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlNodeQueue&quot; /&gt; class using a provided XAML schema context.">使用提供的 XAML 結構描述內容，初始化 <see cref="T:System.Xaml.XamlNodeQueue" /> 類別的新執行個體。</summary>
      <param name="schemaContext" vsli:raw="The schema context to use for node operations.">要用於節點作業的結構描述內容。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xamlSchemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xamlSchemaContext" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xaml.XamlNodeQueue.Count">
      <summary vsli:raw="Gets the number of nodes in the &lt;see cref=&quot;T:System.Xaml.XamlNodeQueue&quot; /&gt;.">取得 <see cref="T:System.Xaml.XamlNodeQueue" /> 中的節點數目。</summary>
      <returns vsli:raw="The number of nodes in the &lt;see cref=&quot;T:System.Xaml.XamlNodeQueue&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlNodeQueue" /> 中的節點數目。</returns>
    </member>
    <member name="P:System.Xaml.XamlNodeQueue.IsEmpty">
      <summary vsli:raw="Gets a value that determines whether this &lt;see cref=&quot;T:System.Xaml.XamlNodeQueue&quot; /&gt; does not contain nodes.">取得值，這個值決定此 <see cref="T:System.Xaml.XamlNodeQueue" /> 是否不含節點。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlNodeQueue&quot; /&gt; does not contain nodes; &lt;see langword=&quot;false&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlNodeQueue&quot; /&gt; contains nodes.">如果這個 <see cref="T:System.Xaml.XamlNodeQueue" /> 不含節點，則為 <see langword="true" />。如果這個 <see cref="T:System.Xaml.XamlNodeQueue" /> 包含節點，則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlNodeQueue.Reader">
      <summary vsli:raw="Gets a XAML reader implementation delegate.">取得 XAML 讀取器實作委派。</summary>
      <returns vsli:raw="A XAML reader implementation delegate.">XAML 讀取器實作委派。</returns>
      <exception cref="T:System.Xaml.XamlException" vsli:raw="The XAML writer that is used for the node list has no valid XAML schema context.">用於節點清單的 XAML 寫入器不具有有效的 XAML 結構描述內容。</exception>
    </member>
    <member name="P:System.Xaml.XamlNodeQueue.Writer">
      <summary vsli:raw="Gets the associated XAML writer.">取得相關聯的 XAML 寫入器。</summary>
      <returns vsli:raw="The associated XAML writer.">相關聯的 XAML 寫入器。</returns>
    </member>
    <member name="T:System.Xaml.XamlNodeType">
      <summary vsli:raw="Describes the type of the node that is currently being processed by a XAML reader.">描述 XAML 讀取器目前正在處理之節點的型別。</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.EndMember">
      <summary vsli:raw="The reader is at the end of a member node.">讀取器在成員節點的結尾。</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.EndObject">
      <summary vsli:raw="The reader is at the end of an object node.">讀取器在物件節點的結尾。</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.GetObject">
      <summary vsli:raw="The reader is within an object node and writing a default or implicit value, instead of being a specified object value.">讀取器在物件節點內，且正在寫入預設值或隱含值，而不是指定的物件值。</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.NamespaceDeclaration">
      <summary vsli:raw="The reader is within an XML namespace declaration.">讀取器在 XML 命名空間宣告內。</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.None">
      <summary vsli:raw="The reader is not positioned at a true node (for example, the reader might be at end-of-file).">讀取器不在真實節點上 (例如，讀取器可能在檔案結尾)。</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.StartMember">
      <summary vsli:raw="The reader is at the start of a member node.">讀取器在成員節點的開頭。</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.StartObject">
      <summary vsli:raw="The reader is at the start of an object node.">讀取器在物件節點的開頭。</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.Value">
      <summary vsli:raw="The reader is within a node and processing a value.">讀取器在節點內且正在處理值。</summary>
    </member>
    <member name="T:System.Xaml.XamlObjectEventArgs">
      <summary vsli:raw="Provides data for callbacks that can be inserted in the sequence for object initialization and property setting. This influences the object graph that is produced by &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt;.">提供用於回呼的資料，可以在物件初始設定和屬性設定值的序列中插入。 這會影響 <see cref="T:System.Xaml.XamlObjectWriter" /> 所產生的物件圖形。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectEventArgs.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectEventArgs&quot; /&gt; class.">初始化 <see cref="T:System.Xaml.XamlObjectEventArgs" /> 類別的新執行個體。</summary>
      <param name="instance" vsli:raw="The object instance that is relevant to the event data.">與事件資料相關的物件執行個體。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xaml.XamlObjectEventArgs.ElementLineNumber">
      <summary vsli:raw="Gets or sets the line number of the relevant object instance.">取得或設定相關物件執行個體的行號。</summary>
      <returns vsli:raw="The line number of the element.">項目的行號。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectEventArgs.ElementLinePosition">
      <summary vsli:raw="Gets or sets the position in the line of the relevant object instance.">取得或設定相關物件執行個體在一行中的位置。</summary>
      <returns vsli:raw="The position in the line of the element.">項目在行中的位置。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectEventArgs.Instance">
      <summary vsli:raw="Gets the object instance that is relevant to the event data.">取得與事件資料相關的物件執行個體。</summary>
      <returns vsli:raw="The object instance that is relevant to the event data.">與事件資料相關的物件執行個體。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectEventArgs.SourceBamlUri">
      <summary vsli:raw="Gets or sets the BAML URI of the relevant object instance.">取得或設定相關物件執行個體的 BAML URI。</summary>
      <returns vsli:raw="The BAML URI of the relevant object instance.">相關物件執行個體的 BAML URI。</returns>
    </member>
    <member name="T:System.Xaml.XamlObjectReader">
      <summary vsli:raw="Provides a &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt; implementation that reads object graphs and generates a XAML node stream.">提供 <see cref="T:System.Xaml.XamlReader" /> 實作，這個實作會讀取圖形並產生 XAML 節點資料流。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectReader.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectReader&quot; /&gt; class.">初始化 <see cref="T:System.Xaml.XamlObjectReader" /> 類別的新執行個體。</summary>
      <param name="instance" vsli:raw="The root of the object tree / object graph to read.">要讀取之物件樹狀結構/物件圖形的根。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectReader.#ctor(System.Object,System.Xaml.XamlObjectReaderSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectReader&quot; /&gt; class with the specified reader settings.">使用指定的讀取器設定，初始化 <see cref="T:System.Xaml.XamlObjectReader" /> 類別的新執行個體。</summary>
      <param name="instance" vsli:raw="The root of the object tree to read.">要讀取之物件樹狀結構的根物件。</param>
      <param name="settings" vsli:raw="A settings object.">設定物件。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectReader.#ctor(System.Object,System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectReader&quot; /&gt; class with the specified schema context.">使用指定的結構描述內容，初始化 <see cref="T:System.Xaml.XamlObjectReader" /> 類別的新執行個體。</summary>
      <param name="instance" vsli:raw="The root of the object tree to read.">要讀取之物件樹狀結構的根物件。</param>
      <param name="schemaContext" vsli:raw="The schema context for the reader to use.">供讀取器使用的結構描述內容。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="schemaContext" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectReader.#ctor(System.Object,System.Xaml.XamlSchemaContext,System.Xaml.XamlObjectReaderSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectReader&quot; /&gt; class with the specified schema context and reader settings.">使用指定的結構描述內容和讀取器設定，初始化 <see cref="T:System.Xaml.XamlObjectReader" /> 類別的新執行個體。</summary>
      <param name="instance" vsli:raw="The root of the object tree to read.">要讀取之物件樹狀結構的根物件。</param>
      <param name="schemaContext" vsli:raw="The schema context for the reader to use.">供讀取器使用的結構描述內容。</param>
      <param name="settings" vsli:raw="A settings object.">設定物件。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="schemaContext" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.Instance">
      <summary vsli:raw="Gets the object instance that is available at the current reader position.">取得目前讀取器位置上可用的物件執行個體。</summary>
      <returns vsli:raw="The object instance at the current reader position; or &lt;see langword=&quot;null&quot; /&gt; if the reader position is not on an object.">目前讀取器位置上的物件執行個體，如果讀取器位置不在物件上，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.IsEof">
      <summary vsli:raw="Gets a value that reports whether the reader position is at the end of the file.">取得值，這個值會報告讀取器是否位於檔案結尾。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader position is at the end of the file; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果讀取器位置在檔案的結尾則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.Member">
      <summary vsli:raw="Gets the current &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; at the reader position, if the reader position is on a &lt;see cref=&quot;F:System.Xaml.XamlNodeType.StartMember&quot; /&gt;.">如果讀取器位置在 <see cref="T:System.Xaml.XamlMember" /> 上，則取得讀取器位置上的目前 <see cref="F:System.Xaml.XamlNodeType.StartMember" />。</summary>
      <returns vsli:raw="The current member; or &lt;see langword=&quot;null&quot; /&gt; if the reader position is not on a member.">目前的成員，如果讀取器位置不在成員上，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.Namespace">
      <summary vsli:raw="Gets the XAML namespace declaration from the current reader position.">從目前的讀取器位置取得 XAML 命名空間宣告。</summary>
      <returns vsli:raw="The XAML namespace declaration if the reader is positioned on a &lt;see cref=&quot;F:System.Xaml.XamlNodeType.NamespaceDeclaration&quot; /&gt;; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">如果讀取器位於 <see cref="F:System.Xaml.XamlNodeType.NamespaceDeclaration" /> 上，則為 XAML 命名空間宣告，否則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.NodeType">
      <summary vsli:raw="Gets the type of the current node.">取得目前節點的類型。</summary>
      <returns vsli:raw="The type of the current node.">目前節點的型別。</returns>
    </member>
    <member name="M:System.Xaml.XamlObjectReader.Read">
      <summary vsli:raw="Provides the next XAML node from the source object graph, if a node is available.">從來源物件圖形中提供下一個 XAML 節點 (如果有節點的話)。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a node is available; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果有節點則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.SchemaContext">
      <summary vsli:raw="Gets an object that provides schema information for the information set.">取得物件，這個物件會為資訊集提供結構描述資訊。</summary>
      <returns vsli:raw="An object that provides schema information for the information set.">物件，會為資訊集提供結構描述資訊。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.Type">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the object at the current reader position.">取得目前讀取器位置上之物件的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the object at the current reader position; or &lt;see langword=&quot;null&quot; /&gt; if the position is not on an object.">目前讀取器位置上之物件的 <see cref="T:System.Xaml.XamlType" />，如果位置不在物件上，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.Value">
      <summary vsli:raw="Gets the value of the node at the current reader position.">取得目前讀取器位置上之節點的值。</summary>
      <returns vsli:raw="The value of the current node; or &lt;see langword=&quot;null&quot; /&gt;, if the reader position is not on a &lt;see cref=&quot;F:System.Xaml.XamlNodeType.Value&quot; /&gt; node type.">目前節點的值，如果讀取器位置不在 <see cref="F:System.Xaml.XamlNodeType.Value" /> 節點型別上，則為 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xaml.XamlObjectReaderException">
      <summary vsli:raw="The exception that is thrown by several &lt;see cref=&quot;T:System.Xaml.XamlObjectReader&quot; /&gt; internal helper APIs.">由數個 <see cref="T:System.Xaml.XamlObjectReader" /> 內部 Helper API 擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectReaderException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectReaderException&quot; /&gt; class with a system-supplied message that describes the error.">以系統提供的錯誤說明訊息，初始化 <see cref="T:System.Xaml.XamlObjectReaderException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectReaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectReaderException&quot; /&gt; class with serialized data.">使用序列化資料，初始化 <see cref="T:System.Xaml.XamlObjectReaderException" /> 類別的新執行個體。</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">存放序列物件資料的物件。</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectReaderException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectReaderException&quot; /&gt; class with a specified message that describes the error.">使用指定的錯誤說明訊息，初始化 <see cref="T:System.Xaml.XamlObjectReaderException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.">說明例外狀況的訊息。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectReaderException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectReaderException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Xaml.XamlObjectReaderException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.">說明例外狀況的訊息。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
      <param name="innerException" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;innerException&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="T:System.Xaml.XamlObjectReaderSettings">
      <summary vsli:raw="Specifies processing rules or option settings for a &lt;see cref=&quot;T:System.Xaml.XamlObjectReader&quot; /&gt;.">指定 <see cref="T:System.Xaml.XamlObjectReader" /> 的處理規則或選項設定。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectReaderSettings.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectReaderSettings&quot; /&gt; class.">初始化 <see cref="T:System.Xaml.XamlObjectReaderSettings" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xaml.XamlObjectReaderSettings.RequireExplicitContentVisibility">
      <summary vsli:raw="Gets or sets a value that determines whether writers that use the associated &lt;see cref=&quot;T:System.Xaml.XamlObjectReader&quot; /&gt; for context should use designer settings for writing content explicitly.">取得或設定值，這個值決定針對內容 (Context) 使用相關聯 <see cref="T:System.Xaml.XamlObjectReader" /> 的寫入器，是否應該明確使用設計工具設定來寫入內容 (Content)。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to specify that writers that use this context should use designer settings for writing any output content in cases where &lt;see cref=&quot;P:System.Xaml.XamlMember.IsWritePublic&quot; /&gt; reports &lt;see langword=&quot;false&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; if designer settings should be ignored.">
        <see langword="true" /> 表示在 <see cref="P:System.Xaml.XamlMember.IsWritePublic" /> 報告 <see langword="false" /> 的情況下，使用此內容的寫入器應該使用設計工具設定來寫入任何輸出。如果應該忽略設計工具設定，則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Xaml.XamlObjectWriter">
      <summary vsli:raw="Creates an object graph from a source XAML node stream.">從來源 XAML 節點資料流建立物件圖形。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt; class using  the XAML schema context that is used by a &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt;.">使用 <see cref="T:System.Xaml.XamlObjectWriter" /> 所使用的 XAML 結構描述內容，初始化 <see cref="T:System.Xaml.XamlReader" /> 類別的新執行個體。</summary>
      <param name="schemaContext" vsli:raw="A XAML schema context that is shared with the XAML reader that provides nodes for writing.">與提供寫入之節點的 XAML 讀取器共用的 XAML 結構描述內容。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="schemaContext" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext,System.Xaml.XamlObjectWriterSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt; class using the context that is used by a &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt; and its settings.">使用 <see cref="T:System.Xaml.XamlObjectWriter" /> 所使用的內容和其設定，初始化 <see cref="T:System.Xaml.XamlReader" /> 類別的新執行個體。</summary>
      <param name="schemaContext" vsli:raw="A XAML schema context that is shared with the XAML reader that provides nodes for writing.">與提供寫入之節點的 XAML 讀取器共用的 XAML 結構描述內容。</param>
      <param name="settings" vsli:raw="A settings object that specifies certain options for &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt; behavior and output.">指定 <see cref="T:System.Xaml.XamlObjectWriter" /> 行為和輸出之特定選項的設定物件。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="schemaContext" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.Clear">
      <summary vsli:raw="Resets all possible frames and clears the object graph.">重設所有可能的框架並清除物件圖形。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt;, and optionally, releases the managed resources.">釋放 <see cref="T:System.Xaml.XamlObjectWriter" /> 所使用的 Unmanaged 資源，並選擇性釋放 Managed 資源。</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release the managed resources; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示釋放 Managed 資源，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.OnAfterBeginInit(System.Object)">
      <summary vsli:raw="Invokes any &lt;see cref=&quot;P:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler&quot; /&gt; method that is associated with &lt;see cref=&quot;T:System.Xaml.XamlObjectWriterSettings&quot; /&gt; for this &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt;.">叫用與這個 <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler" /> 之 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 相關聯的任何 <see cref="T:System.Xaml.XamlObjectWriter" /> 方法。</summary>
      <param name="value" vsli:raw="The object to report on. The object is packaged into &lt;see cref=&quot;T:System.Xaml.XamlObjectEventArgs&quot; /&gt; when the handler is invoked.">要報告的物件。 叫用處理常式時，會將物件封裝至 <see cref="T:System.Xaml.XamlObjectEventArgs" /> 中。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.OnAfterEndInit(System.Object)">
      <summary vsli:raw="Invokes any &lt;see cref=&quot;P:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler&quot; /&gt; method that is associated with &lt;see cref=&quot;T:System.Xaml.XamlObjectWriterSettings&quot; /&gt; for this &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt;.">叫用與這個 <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler" /> 之 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 相關聯的任何 <see cref="T:System.Xaml.XamlObjectWriter" /> 方法。</summary>
      <param name="value" vsli:raw="The object to report on. The value  is packaged into &lt;see cref=&quot;T:System.Xaml.XamlObjectEventArgs&quot; /&gt; when the handler is invoked.">要報告的物件。 叫用處理常式時，值會封裝至 <see cref="T:System.Xaml.XamlObjectEventArgs" /> 中。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.OnAfterProperties(System.Object)">
      <summary vsli:raw="Invokes any &lt;see cref=&quot;P:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler&quot; /&gt; referenced method that is associated with &lt;see cref=&quot;T:System.Xaml.XamlObjectWriterSettings&quot; /&gt; for this &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt;.">叫用與這個 <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler" /> 之 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 相關聯的任何 <see cref="T:System.Xaml.XamlObjectWriter" /> 參考方法。</summary>
      <param name="value" vsli:raw="The object to report on. This is packaged into &lt;see cref=&quot;T:System.Xaml.XamlObjectEventArgs&quot; /&gt; when the handler is invoked.">要報告的物件。 會在叫用處理常式將其封裝至 <see cref="T:System.Xaml.XamlObjectEventArgs" /> 中。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.OnBeforeProperties(System.Object)">
      <summary vsli:raw="Invokes any &lt;see cref=&quot;P:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler&quot; /&gt; referenced method that is associated with &lt;see cref=&quot;T:System.Xaml.XamlObjectWriterSettings&quot; /&gt; for this &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt;.">叫用與這個 <see cref="P:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler" /> 之 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 相關聯的任何 <see cref="T:System.Xaml.XamlObjectWriter" /> 參考方法。</summary>
      <param name="value" vsli:raw="The value to pass through &lt;see cref=&quot;T:System.Xaml.XamlObjectEventArgs&quot; /&gt; when the handler is invoked.">在叫用處理常式時要透過 <see cref="T:System.Xaml.XamlObjectEventArgs" /> 傳遞的值。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.OnSetValue(System.Object,System.Xaml.XamlMember,System.Object)">
      <summary vsli:raw="Invokes any &lt;see cref=&quot;P:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler&quot; /&gt; referenced method that is associated with &lt;see cref=&quot;T:System.Xaml.XamlObjectWriterSettings&quot; /&gt; for this writer, as long as &lt;paramref name=&quot;handled&quot; /&gt; in &lt;see cref=&quot;T:System.Windows.Markup.XamlSetValueEventArgs&quot; /&gt; event data is not &lt;see langword=&quot;true&quot; /&gt;.">叫用與這個寫入器之 <see cref="P:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler" /> 相關聯的任何 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 參考方法 (只要 <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> 事件資料中的 <paramref name="handled" /> 不是 <see langword="true" /> 即可)。</summary>
      <param name="eventSender" vsli:raw="The object to report as the source to the handler.">要向處理常式報告做為來源的物件。</param>
      <param name="member" vsli:raw="The name of the property to set, which is passed to the handler as part of &lt;see cref=&quot;T:System.Windows.Markup.XamlSetValueEventArgs&quot; /&gt;.">要設定之屬性的名稱，這個名稱會在 <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> 中傳遞至處理常式。</param>
      <param name="value" vsli:raw="The value to provide for the property that is named by &lt;paramref name=&quot;property&quot; /&gt;. The value is passed to the handler as part of &lt;see cref=&quot;T:System.Windows.Markup.XamlSetValueEventArgs&quot; /&gt;.">要提供給由 <paramref name="property" /> 命名之屬性的值。 這個值會在 <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> 中傳遞至處理常式。</param>
      <returns vsli:raw="A Boolean value that is set by any associated handler; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">任何相關聯處理常式所設定的布林值，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriter.Result">
      <summary vsli:raw="Gets the last object that was written. Typically only called when the node stream is at its end and the object graph is complete.">取得最後一個寫入的物件。 通常只有在節點資料流位在結尾且物件圖形完成時才會加以呼叫。</summary>
      <returns vsli:raw="The last object written, or &lt;see langword=&quot;null&quot; /&gt;.">最後一個寫入的物件，或 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriter.RootNameScope">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Windows.Markup.INameScope&quot; /&gt; service that maintains the XAML namescope for the absolute node root of the XAML object writer.">取得 <see cref="T:System.Windows.Markup.INameScope" /> 服務，這個服務會維護 XAML 物件寫入器之絕對節點根的 XAML 名稱範圍。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Windows.Markup.INameScope&quot; /&gt; service that maintains the XAML namescope for the current root of the object writer.">
        <see cref="T:System.Windows.Markup.INameScope" /> 服務，這個服務會維護物件寫入器目前根的 XAML 名稱範圍。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriter.SchemaContext">
      <summary vsli:raw="Gets the active XAML schema context.">取得作用中 XAML 結構描述內容。</summary>
      <returns vsli:raw="The XAML schema context.">XAML 結構描述內容。</returns>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.SetLineInfo(System.Int32,System.Int32)">
      <summary vsli:raw="Implements &lt;see cref=&quot;M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)&quot; /&gt; and provides line information for exceptions.">實作 <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" />，並提供例外狀況的行資訊。</summary>
      <param name="lineNumber" vsli:raw="The line number from the reader.">來自讀取器的行號。</param>
      <param name="linePosition" vsli:raw="The line position from the reader.">來自讀取器的行位置。</param>
    </member>
    <member name="P:System.Xaml.XamlObjectWriter.ShouldProvideLineInfo">
      <summary vsli:raw="Gets a value that reports whether a line information service should provide values and therefore, should also call the &lt;see cref=&quot;M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)&quot; /&gt; method when it is relevant.">取得值，這個值會報告行資訊服務是否應該提供值 (因此也應該在必要時呼叫 <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" /> 方法)。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if line information is used by the writer; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果寫入器會使用行資訊，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteEndMember">
      <summary vsli:raw="Closes the current member scope, and may write the value of the member scope while it closes. The new scope becomes the parent object scope of the member.">關閉目前成員範圍，並且可能在關閉成員範圍期間寫入其值。 新的範圍會成為成員的父物件範圍。</summary>
      <exception cref="T:System.Xaml.XamlObjectWriterException" vsli:raw="Failed to create member value from a value node that is encountered between this call and a previous &lt;see langword=&quot;StartMember&quot; /&gt;.">無法從在這次呼叫和前一次 <see langword="StartMember" /> 之間遇到的值節點建立成員值。</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteEndObject">
      <summary vsli:raw="Closes the current object scope in the writer. The new object scope becomes the parent member scope.">關閉寫入器中的目前物件範圍。 新的物件範圍會成為父成員範圍。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteGetObject">
      <summary vsli:raw="Writes the conceptual &lt;see langword=&quot;StartObject&quot; /&gt; into the object graph when the specified object is a default or implicit value of the parent property. The implicit value comes from information that is obtained from the XAML schema context and backing type information, instead of being specified as an object value in the input XAML node set.">當指定之物件為父屬性的預設值或隱含值時，將概念 <see langword="StartObject" /> 寫入物件圖形。 隱含值來自從 XAML 結構描述內容及支援型別資訊取得的資訊，而非指定為在輸入 XAML 節點集中的物件值。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
      <summary vsli:raw="Defines a namespace declaration that applies to the next object scope or member scope.">定義會套用至下一個物件範圍或成員範圍的命名空間宣告。</summary>
      <param name="namespaceDeclaration" vsli:raw="The namespace declaration to write.">要寫入的命名空間宣告。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;namespaceDeclaration&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="namespaceDeclaration" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A component of &lt;paramref name=&quot;namespaceDeclaration&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="namespaceDeclaration" /> 的元件為 <see langword="null" />。</exception>
      <exception cref="T:System.Xaml.XamlObjectReaderException" vsli:raw="Tried to write a XAML namespace node in an invalid scope.">嘗試在無效的範圍中寫入 XAML 命名空間節點。</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
      <summary vsli:raw="Writes a new member node into the current object scope, and the scope becomes a new member scope.">將新的成員節點寫入至目前物件範圍，而這個範圍會成為新的成員範圍。</summary>
      <param name="property" vsli:raw="The XAML property to write. Typically you obtain this value from a XAML reader through the XAML node stream intermediate.">要寫入的 XAML 屬性。 您通常會從 XAML 讀取器透過 XAML 節點資料流媒介取得這個值。</param>
      <exception cref="T:System.Xaml.XamlObjectWriterException" vsli:raw="&lt;paramref name=&quot;property&quot; /&gt; has &lt;see cref=&quot;P:System.Xaml.XamlMember.IsUnknown&quot; /&gt; set to &lt;see langword=&quot;true&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see cref=&quot;P:System.Xaml.XamlLanguage.UnknownContent&quot; /&gt; passed, which indicates that the XAML node stream contained content for an object that does not support content.  &#xA;  &#xA; -or-  &#xA;  &#xA; Attempted to write a start member in an invalid scope.">
        <paramref name="property" /> 的 <see cref="P:System.Xaml.XamlMember.IsUnknown" /> 已設定為 <see langword="true" />。
-或-
傳遞 <see cref="P:System.Xaml.XamlLanguage.UnknownContent" />，表示不支援內容之物件內容所包含的 XAML 節點資料流。
-或-
嘗試在無效的範圍中寫入開始成員。</exception>
      <exception cref="T:System.Xaml.XamlDuplicateMemberException" vsli:raw="&lt;paramref name=&quot;property&quot; /&gt; specifies a property that is already explicitly set in the parent object scope.">
        <paramref name="property" /> 會指定已經在父代物件範圍中明確設定的屬性。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;property&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="property" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteStartObject(System.Xaml.XamlType)">
      <summary vsli:raw="Writes an object node into the current scope, and sets the scope to a new object scope.">將物件節點寫入至目前範圍，並將這個範圍設為新的物件範圍。</summary>
      <param name="xamlType" vsli:raw="The type to write. Typically you obtain this value from a XAML reader.">要寫入的型別。 您通常是從 XAML 讀取器取得這個值。</param>
      <exception cref="T:System.Xaml.XamlObjectWriterException" vsli:raw="Processing an &lt;see cref=&quot;P:System.Xaml.XamlType.IsUnknown&quot; /&gt; type and cannot create an object.  &#xA;  &#xA; -or-  &#xA;  &#xA; Attempted to write a start object in an invalid scope.">正在處理 <see cref="P:System.Xaml.XamlType.IsUnknown" /> 型別，而且無法建立物件。
-或-
嘗試在無效的範圍中寫入一個開始物件。</exception>
      <exception cref="T:System.Xaml.XamlParseException" vsli:raw="Attempted to write a root object when the root object was already provided in the settings.">嘗試於已經在設定中提供根物件時寫入根物件。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xamlType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xamlType" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteValue(System.Object)">
      <summary vsli:raw="Writes a value to the current member scope. If the current scope is inside a collection, dictionary, or array object, the value should be added to the collection, dictionary, or array.">將值寫入至目前成員範圍。 如果目前範圍在集合、字典或陣列物件內，則應將此值加入至集合、字典或陣列。</summary>
      <param name="value" vsli:raw="The value to write.">要寫入的值。</param>
      <exception cref="T:System.Xaml.XamlObjectWriterException" vsli:raw="Attempted to write a value in an invalid scope.">嘗試在無效的範圍中寫入值。</exception>
    </member>
    <member name="T:System.Xaml.XamlObjectWriterException">
      <summary vsli:raw="The exception that is thrown when a XAML writer (such as the &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt; class) encounters an error while attempting to produce object graphs from a XAML node stream.">在 XAML 寫入器 (例如 <see cref="T:System.Xaml.XamlObjectWriter" /> 類別) 嘗試從 XAML 節點資料流產生物件圖形而發生錯誤時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectWriterException&quot; /&gt; class with a system-supplied message that describes the error.">以系統提供的錯誤說明訊息，初始化 <see cref="T:System.Xaml.XamlObjectWriterException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectWriterException&quot; /&gt; class with serialized data.">使用序列化資料，初始化 <see cref="T:System.Xaml.XamlObjectWriterException" /> 類別的新執行個體。</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">存放序列物件資料的物件。</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectWriterException&quot; /&gt; class with a specified message that describes the error.">使用指定的錯誤說明訊息，初始化 <see cref="T:System.Xaml.XamlObjectWriterException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.">說明例外狀況的訊息。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectWriterException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Xaml.XamlObjectWriterException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.">說明例外狀況的訊息。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
      <param name="innerException" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;innerException&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="T:System.Xaml.XamlObjectWriterSettings">
      <summary vsli:raw="Provides specific XAML writer settings for &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt;.">提供 <see cref="T:System.Xaml.XamlObjectWriter" /> 的特定 XAML 寫入器設定。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterSettings.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectWriterSettings&quot; /&gt; class.">初始化 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterSettings.#ctor(System.Xaml.XamlObjectWriterSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectWriterSettings&quot; /&gt; class that is based on the copy of an existing instance.">初始化 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 類別的新執行個體，這個執行個體將會根據現有執行個體的複本產生。</summary>
      <param name="settings" vsli:raw="The settings instance to copy.">要複製的設定執行個體。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;settings&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="settings" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.AccessLevel">
      <summary vsli:raw="Gets or sets &lt;see cref=&quot;T:System.Xaml.Permissions.XamlAccessLevel&quot; /&gt; permissions that the XAML writer observes.">取得或設定 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> XAML 寫入器觀察的權限。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.Permissions.XamlAccessLevel&quot; /&gt; permissions.">
        <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 權限。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler">
      <summary vsli:raw="Gets or sets a reference to a callback that is invoked by the XAML writer at the &lt;see cref=&quot;M:System.ComponentModel.ISupportInitialize.BeginInit&quot; /&gt; phase of the object lifetime for each created object.">取得或設定回呼的參考，針對每個建立的物件，XAML 寫入器會在物件存留期的 <see cref="M:System.ComponentModel.ISupportInitialize.BeginInit" /> 階段叫用這個回呼。</summary>
      <returns vsli:raw="A callback that is invoked by the XAML writer at the &lt;see cref=&quot;M:System.ComponentModel.ISupportInitialize.BeginInit&quot; /&gt; phase of object lifetime.">由 XAML 寫入器在物件存留期 <see cref="M:System.ComponentModel.ISupportInitialize.BeginInit" /> 階段叫用的回呼。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler">
      <summary vsli:raw="Gets or sets a reference to a callback that is invoked by the XAML writer at the &lt;see cref=&quot;M:System.ComponentModel.ISupportInitialize.EndInit&quot; /&gt; phase of the object lifetime for each created object.">取得或設定回呼的參考，針對每個建立的物件，XAML 寫入器會在物件存留期的 <see cref="M:System.ComponentModel.ISupportInitialize.EndInit" /> 階段叫用這個回呼。</summary>
      <returns vsli:raw="A callback that is invoked by the XAML writer at the &lt;see cref=&quot;M:System.ComponentModel.ISupportInitialize.EndInit&quot; /&gt; phase of object lifetime.">由 XAML 寫入器在物件存留期 <see cref="M:System.ComponentModel.ISupportInitialize.EndInit" /> 階段叫用的回呼。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler">
      <summary vsli:raw="Gets or sets a reference to a callback that is invoked by the XAML writer at the post-member-write phase of the object lifetime for each created object.">取得或設定回呼的參考，針對每個建立的物件，XAML 寫入器會在物件存留期的後置成員寫入階段叫用這個回呼。</summary>
      <returns vsli:raw="A callback that is invoked by the XAML writer at the post-member-write phase of object lifetime.">回呼，由 XAML 寫入器在物件存留期的後置成員寫入階段叫用。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler">
      <summary vsli:raw="Gets or sets a reference to a callback that is invoked by the XAML writer at the pre-member-write phase of the object lifetime for each created object.">取得或設定回呼的參考，針對每個建立的物件，XAML 寫入器會在物件存留期的後置成員寫入階段叫用這個回呼。</summary>
      <returns vsli:raw="A callback that is invoked by the XAML writer at the pre-member-write phase of object lifetime.">由 XAML 寫入器在物件存留期後置成員寫入階段叫用的回呼。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.ExternalNameScope">
      <summary vsli:raw="Gets or sets the XAML namescope to use for registering names from the XAML writer if &lt;see cref=&quot;P:System.Xaml.XamlObjectWriterSettings.RegisterNamesOnExternalNamescope&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt;.">取得或設定當 <see cref="P:System.Xaml.XamlObjectWriterSettings.RegisterNamesOnExternalNamescope" /> 為 <see langword="true" /> 時，用於從 XAML 寫入器註冊名稱的名稱範圍。</summary>
      <returns vsli:raw="The XAML namescope to use for registering names. The default is &lt;see langword=&quot;null&quot; /&gt;.">用於註冊名稱的 XAML 名稱範圍。 預設為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.IgnoreCanConvert">
      <summary vsli:raw="Gets or sets a value that specifies whether the XAML writer should ignore (not call) &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)&quot; /&gt; implementations on a &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; in type-converter situations.">取得或設定值，這個值指定 XAML 寫入器是否應該在有型別轉換器的情況下忽略 (而不要呼叫) <see cref="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" /> 上的 <see cref="T:System.ComponentModel.TypeConverter" /> 實作。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the XAML writer ignores &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)&quot; /&gt; implementations; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">如果 XAML 寫入器會忽略 <see cref="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" /> 實作則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.PreferUnconvertedDictionaryKeys">
      <summary vsli:raw="Gets or sets a value that determines whether to disable a default &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt; feature that runs type conversion on the &lt;paramref name=&quot;K&quot; /&gt; component of a &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; before writing the object graph representation.">取得或設定值，這個值決定是否要停用會在寫入物件圖形表示之前對 <see cref="T:System.Xaml.XamlObjectWriter" /> 的 <paramref name="K" /> 元件執行型別轉換的預設 <see cref="T:System.Collections.Generic.Dictionary`2" /> 功能。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;K&quot; /&gt; type conversion for a &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; object should be disabled. &lt;see langword=&quot;false&quot; /&gt; if performing &lt;paramref name=&quot;K&quot; /&gt; type conversion for a &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; object applies. The default is &lt;see langword=&quot;false&quot; /&gt;.">如果要停用 <see cref="T:System.Collections.Generic.Dictionary`2" /> 物件的 <paramref name="K" /> 型別轉換，則為 <see langword="true" />。 如果要為適用的 <see cref="T:System.Collections.Generic.Dictionary`2" /> 物件執行 <paramref name="K" /> 型別轉換，則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.RegisterNamesOnExternalNamescope">
      <summary vsli:raw="Gets or sets a value that determines whether name registration should occur against the specified &lt;see cref=&quot;P:System.Xaml.XamlObjectWriterSettings.ExternalNameScope&quot; /&gt;.">取得或設定值，這個值決定是否應該向指定的 <see cref="P:System.Xaml.XamlObjectWriterSettings.ExternalNameScope" /> 進行名稱註冊。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if name registration should occur against the &lt;see cref=&quot;P:System.Xaml.XamlObjectWriterSettings.ExternalNameScope&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; if name registration should occur into the parent XAML namescope. The default is &lt;see langword=&quot;false&quot; /&gt;.">如果應該向 <see cref="P:System.Xaml.XamlObjectWriterSettings.ExternalNameScope" /> 進行名稱註冊，則為 <see langword="true" />。如果應該到父代 XAML 名稱範圍中進行名稱註冊，則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.RootObjectInstance">
      <summary vsli:raw="Gets or sets a preexisting root object for &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt; operations.">取得或設定 <see cref="T:System.Xaml.XamlObjectWriter" /> 作業的既有根物件。</summary>
      <returns vsli:raw="A preexisting root object for &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt; operations.">
        <see cref="T:System.Xaml.XamlObjectWriter" /> 作業的既有根物件。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.SkipDuplicatePropertyCheck">
      <summary vsli:raw="Gets or sets a value that determines whether the XAML writer omits to check for the code path that checks for duplicate properties.">取得或設定值，這個值決定 XAML 寫入器是否要省略檢查一個會檢查重複屬性的程式碼路徑。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the duplicate property check should be omitted; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果應省略重複屬性檢查則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.SkipProvideValueOnRoot">
      <summary vsli:raw="Gets or sets a value that indicates whether the &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt; should omit to call &lt;see langword=&quot;ProvideValue&quot; /&gt; on a markup extension, which is relevant when the markup extension represents the root of an object graph.">取得或設定值，這個值表示 <see cref="T:System.Xaml.XamlObjectWriter" /> 是否應該略過對標記延伸的 <see langword="ProvideValue" /> 呼叫，當標記延伸表示的是物件圖形的根時，這很重要。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt; should omit to call &lt;see langword=&quot;ProvideValue&quot; /&gt; on a markup extension; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="T:System.Xaml.XamlObjectWriter" /> 應該略過對標記延伸的 <see langword="true" /> 呼叫，則為 <see langword="ProvideValue" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.SourceBamlUri">
      <summary vsli:raw="Used in the &lt;see langword=&quot;BeginInitHandler&quot; /&gt; in place of the actual &lt;see langword=&quot;BaseUri&quot; /&gt;.">用於 <see langword="BeginInitHandler" />，取代實際的 <see langword="BaseUri" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Uri&quot; /&gt; to be used in place of the actual &lt;see langword=&quot;BaseUri&quot; /&gt;.">
        <see cref="T:System.Uri" /> 可用於取代實際的 <see langword="BaseUri" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler">
      <summary vsli:raw="Gets or sets the handler to use when the object writer calls into a CLR-implemented &lt;see langword=&quot;SetValue&quot; /&gt; for dependency properties.">取得或設定當物件寫入器對相依性屬性呼叫 CLR 實作的 <see langword="SetValue" /> 時，所要使用的處理常式。</summary>
      <returns vsli:raw="A handler implementation that handles this case.">處理這個案例的處理常式實作。</returns>
    </member>
    <member name="T:System.Xaml.XamlParseException">
      <summary vsli:raw="The exception that is thrown when a XAML reader cannot process elements of the XAML reader source into a XAML node stream.">當 XAML 讀取器無法將 XAML 讀取器來源的項目處理成 XAML 節點資料流時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Xaml.XamlParseException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlParseException&quot; /&gt; class with a system-supplied message that describes the error.">以系統提供的錯誤說明訊息，初始化 <see cref="T:System.Xaml.XamlParseException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xaml.XamlParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlParseException&quot; /&gt; class with serialized data.">使用序列化資料，初始化 <see cref="T:System.Xaml.XamlParseException" /> 類別的新執行個體。</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">存放序列物件資料的物件。</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.Xaml.XamlParseException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlParseException&quot; /&gt; class with a specified message that describes the error.">使用指定的錯誤說明訊息，初始化 <see cref="T:System.Xaml.XamlParseException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.">說明例外狀況的訊息。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
    </member>
    <member name="M:System.Xaml.XamlParseException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlParseException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Xaml.XamlParseException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.">說明例外狀況的訊息。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
      <param name="innerException" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;innerException&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="T:System.Xaml.XamlReader">
      <summary vsli:raw="Provides base definitions for classes that consume XAML input and produce XAML node streams.">針對會使用 XAML 輸入來產生 XAML 節點資料流的類別，提供基底定義。</summary>
    </member>
    <member name="M:System.Xaml.XamlReader.#ctor">
      <summary vsli:raw="Initializes the &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt; class.">初始化 <see cref="T:System.Xaml.XamlReader" /> 類別。</summary>
    </member>
    <member name="M:System.Xaml.XamlReader.Close">
      <summary vsli:raw="Closes the XAML node stream.">關閉 XAML 節點資料流。</summary>
    </member>
    <member name="M:System.Xaml.XamlReader.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt;, and optionally, releases the managed resources.">釋放 <see cref="T:System.Xaml.XamlReader" /> 所使用的 Unmanaged 資源，並選擇性釋放 Managed 資源。</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release the managed resources; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示釋放 Managed 資源，否則為 <see langword="false" />。</param>
    </member>
    <member name="P:System.Xaml.XamlReader.IsDisposed">
      <summary vsli:raw="Gets whether &lt;see cref=&quot;M:System.Xaml.XamlReader.Dispose(System.Boolean)&quot; /&gt; has been called.">取得是否已呼叫 <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.Xaml.XamlReader.Dispose(System.Boolean)&quot; /&gt; has been called; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已呼叫 <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.IsEof">
      <summary vsli:raw="When implemented in a derived class, gets a value that reports whether the reader position is at end-of-file.">在衍生類別中實作時取得值，這個值會報告讀取器位置是否在檔案結尾。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the position is at the conceptual end-of-file of the XAML node stream; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果位置是在 XAML 節點資料流的概念檔案結尾則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.Member">
      <summary vsli:raw="When implemented in a derived class, gets the current member at the reader position, if the reader position is on a &lt;see cref=&quot;F:System.Xaml.XamlNodeType.StartMember&quot; /&gt;.">在衍生類別中實作時，如果讀取器位置在 <see cref="F:System.Xaml.XamlNodeType.StartMember" /> 上，則取得讀取器位置上的目前成員。</summary>
      <returns vsli:raw="The current member; or &lt;see langword=&quot;null&quot; /&gt;, if the reader position is not on a member.">目前的成員，如果讀取器位置不在成員上，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.Namespace">
      <summary vsli:raw="When implemented in a derived class, gets the XAML namespace information from the current node.">在衍生類別中實作時，從目前節點取得 XAML 命名空間資訊。</summary>
      <returns vsli:raw="The XAML namespace information, if it is available; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">XAML 命名空間資訊 (如果有的話)，否則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.NodeType">
      <summary vsli:raw="When implemented in a derived class, gets the type of the current node.">在衍生類別中實作時，會取得目前節點的型別。</summary>
      <returns vsli:raw="A value of the &lt;see cref=&quot;T:System.Xaml.XamlNodeType&quot; /&gt; enumeration.">
        <see cref="T:System.Xaml.XamlNodeType" /> 列舉的值。</returns>
    </member>
    <member name="M:System.Xaml.XamlReader.Read">
      <summary vsli:raw="When implemented in a derived class, provides the next XAML node from the source, if a node is available.">在衍生類別中實作時，會從來源提供下一個 XAML 節點 (如果有節點的話)。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a node is available; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果有節點則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlReader.ReadSubtree">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt; that is based on the current &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt;, where the returned &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt; is used to iterate through a subtree of the XAML node structure.">傳回以目前 <see cref="T:System.Xaml.XamlReader" /> 為基礎的 <see cref="T:System.Xaml.XamlReader" />，而傳回的 <see cref="T:System.Xaml.XamlReader" /> 可用來逐一查看 XAML 節點結構的子樹狀結構。</summary>
      <returns vsli:raw="A new XAML reader instance for the subtree.">子樹狀結構的新 XAML 讀取器執行個體。</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.SchemaContext">
      <summary vsli:raw="When implemented in a derived class, gets an object that provides XAML schema context information for the information set.">在衍生類別中實作時取得物件，這個物件會為資訊集提供 XAML 結構描述內容資訊。</summary>
      <returns vsli:raw="An object that provides XAML schema context information for the information set.">為資訊集提供 XAML 結構描述內容資訊的物件。</returns>
    </member>
    <member name="M:System.Xaml.XamlReader.Skip">
      <summary vsli:raw="Skips the current node and advances the reader position to the next node.">略過目前節點，並使讀取器位置前進至下一個節點。</summary>
    </member>
    <member name="M:System.Xaml.XamlReader.System#IDisposable#Dispose">
      <summary vsli:raw="Releases all resources used by the current instance of the &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt; class.">釋放 <see cref="T:System.Xaml.XamlReader" /> 類別目前的執行個體所使用的全部資源。</summary>
    </member>
    <member name="P:System.Xaml.XamlReader.Type">
      <summary vsli:raw="When implemented in a derived class, gets the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the current node.">在衍生類別中實作時，會取得目前節點的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the current node; or &lt;see langword=&quot;null&quot; /&gt;, if the current reader position is not on an object.">目前節點的 <see cref="T:System.Xaml.XamlType" />，如果目前讀取器位置不在物件上，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.Value">
      <summary vsli:raw="When implemented in a derived class, gets the value of the current node.">在衍生類別中實作時，會取得目前節點的值。</summary>
      <returns vsli:raw="The value of the current node; or &lt;see langword=&quot;null&quot; /&gt;, if the current reader position is not on a &lt;see cref=&quot;F:System.Xaml.XamlNodeType.Value&quot; /&gt; node type.">目前節點的值，如果目前讀取器位置不在 <see cref="F:System.Xaml.XamlNodeType.Value" /> 節點型別上，則為 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xaml.XamlReaderSettings">
      <summary vsli:raw="Specifies processing rules or option settings for a &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt; implementation.">指定 <see cref="T:System.Xaml.XamlReader" /> 實作的處理規則或選項設定。</summary>
    </member>
    <member name="M:System.Xaml.XamlReaderSettings.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlReaderSettings&quot; /&gt; class.">初始化 <see cref="T:System.Xaml.XamlReaderSettings" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xaml.XamlReaderSettings.#ctor(System.Xaml.XamlReaderSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlReaderSettings&quot; /&gt; class based on values in another &lt;see cref=&quot;T:System.Xaml.XamlReaderSettings&quot; /&gt; object.">根據另一個 <see cref="T:System.Xaml.XamlReaderSettings" /> 物件中的值，初始化 <see cref="T:System.Xaml.XamlReaderSettings" /> 類別的新執行個體。</summary>
      <param name="settings" vsli:raw="An existing &lt;see cref=&quot;T:System.Xaml.XamlReaderSettings&quot; /&gt; object.">現有的 <see cref="T:System.Xaml.XamlReaderSettings" /> 物件。</param>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.AllowProtectedMembersOnRoot">
      <summary vsli:raw="Gets or sets a value that indicates whether the root object may include members that have a protected code access model when it reports the XAML type representation.">取得或設定值，這個值表示在報告 XAML 型別表示時，根物件是否可以包含具有受保護程式碼存取模型的成員。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the root object may include members that have a protected code access model; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果根物件可以包含具有受保護程式碼存取模型的成員，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.BaseUri">
      <summary vsli:raw="Gets or sets the base URI that is used to resolve relative paths.">取得或設定用來解析相對路徑的基底 URI。</summary>
      <returns vsli:raw="The base URI to use. The default is &lt;see langword=&quot;null&quot; /&gt;.">要使用的基底 URI。 預設為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.IgnoreUidsOnPropertyElements">
      <summary vsli:raw="Gets or sets a value that specifies whether the XAML reader should ignore values for &lt;see langword=&quot;x:Uid&quot; /&gt; attributes that exist on property elements.">取得或設定值，這個值指定 XAML 讀取器是否應該忽略存在於屬性 (Property) 項目中的 <see langword="x:Uid" /> 屬性 (Attribute) 值。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader should ignore values for &lt;see langword=&quot;x:Uid&quot; /&gt; attributes on property elements. &lt;see langword=&quot;false&quot; /&gt; if the reader should process &lt;see langword=&quot;x:Uid&quot; /&gt; attributes on property elements. The default is &lt;see langword=&quot;false&quot; /&gt;.">如果讀取器應該忽略屬性 (Property) 項目上之 <see langword="true" /> 屬性 (Attribute) 的值，則為 <see langword="x:Uid" />。 如果讀取器應該處理屬性 (Property) 項目上的 <see langword="false" /> 屬性 (Attribute)，則為 <see langword="x:Uid" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.LocalAssembly">
      <summary vsli:raw="Gets or sets the object that represents the current local assembly for processing. This assembly information is used for calls to helper APIs such as &lt;see cref=&quot;M:System.Xaml.XamlType.GetAllMembers&quot; /&gt;.">取得或設定物件，這個物件表示目前要處理的本機組件。 這項組件資訊會用於呼叫 Helper API，例如 <see cref="M:System.Xaml.XamlType.GetAllMembers" />。</summary>
      <returns vsli:raw="A CLR reflection &lt;see cref=&quot;T:System.Reflection.Assembly&quot; /&gt; object.">CLR 反映 <see cref="T:System.Reflection.Assembly" /> 物件。</returns>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.ProvideLineInfo">
      <summary vsli:raw="Gets or sets a value that specifies whether the reader can provide line number and position.">取得或設定值，這個值指定讀取器是否可以提供行號和位置。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader can provide line number and position information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果讀取器可以提供行號和位置資訊，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.ValuesMustBeString">
      <summary vsli:raw="Gets or sets a value that specifies whether the reader enforces that all &lt;see langword=&quot;Value&quot; /&gt; nodes are processed as a &lt;see langword=&quot;String&quot; /&gt; type.">取得或設定值，這個值指定讀取器是否強制將所有 <see langword="Value" /> 節點視為 <see langword="String" /> 型別來處理。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader enforces that only &lt;see langword=&quot;String&quot; /&gt; is contained in &lt;see langword=&quot;Value&quot; /&gt; nodes; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">如果讀取器強制規定 <see langword="true" /> 節點中只包含 <see langword="String" />，則為 <see langword="Value" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Xaml.XamlSchemaContext">
      <summary vsli:raw="Defines a reusable context for interpreting or mapping XAML types, and the types in the assemblies that underlie them.">定義可重複使用的內容，以解譯或對應 XAML 型別及其基礎組件中的型別。</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt; class.">初始化 <see cref="T:System.Xaml.XamlSchemaContext" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt; class, based on a set of reference assemblies.">根據參考組件集，初始化 <see cref="T:System.Xaml.XamlSchemaContext" /> 類別的新執行個體。</summary>
      <param name="referenceAssemblies" vsli:raw="An enumerable set of assembly information items. Each assembly information item is specified by an &lt;see cref=&quot;T:System.Reflection.Assembly&quot; /&gt; value.">組件資訊項目的可列舉集。 每一個組件資訊項目都是由 <see cref="T:System.Reflection.Assembly" /> 值指定。</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Xaml.XamlSchemaContextSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt; class, based on a set of reference assemblies and a settings object.">根據參考組件集和設定物件，初始化 <see cref="T:System.Xaml.XamlSchemaContext" /> 類別的新執行個體。</summary>
      <param name="referenceAssemblies" vsli:raw="An enumerable set of assembly information. Each assembly information item is specified by an &lt;see cref=&quot;T:System.Reflection.Assembly&quot; /&gt; value.">組件資訊的可列舉集。 每一個組件資訊項目都是由 <see cref="T:System.Reflection.Assembly" /> 值指定。</param>
      <param name="settings" vsli:raw="The settings object to use to construct the &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt;.">用於建構 <see cref="T:System.Xaml.XamlSchemaContext" /> 的設定物件。</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.#ctor(System.Xaml.XamlSchemaContextSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt; class, based on a settings object.">根據設定物件，初始化 <see cref="T:System.Xaml.XamlSchemaContext" /> 類別的新執行個體。</summary>
      <param name="settings" vsli:raw="The settings object to use to construct the &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt;.">用於建構 <see cref="T:System.Xaml.XamlSchemaContext" /> 的設定物件。</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.Finalize">
      <summary vsli:raw="Provides a nonstandard &lt;see langword=&quot;Finalize&quot; /&gt; implementation that does not invoke &lt;see langword=&quot;Dispose&quot; /&gt;.">提供不會叫用 <see langword="Finalize" /> 的非標準 <see langword="Dispose" /> 實作。</summary>
    </member>
    <member name="P:System.Xaml.XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces">
      <summary vsli:raw="Gets a value that specifies whether a XAML schema and its context use fully qualified assembly names in the values that are returned by the lookup API.">取得值，這個值指定 XAML 結構描述和其內容是否在查閱 API 所傳回的值中使用完整組件名稱。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a XAML schema and its context use fully qualified assembly names in the values that are returned by the lookup APIs; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 XAML 結構描述和其內容在查閱 API 所傳回的值中使用完整組件名稱，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetAllXamlNamespaces">
      <summary vsli:raw="Searches the assemblies that are held by this &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt; and returns a set of namespaces.">搜尋這個 <see cref="T:System.Xaml.XamlSchemaContext" /> 所持有的組件，並傳回命名空間集。</summary>
      <returns vsli:raw="An enumerable set of namespace identifiers. These identifiers are provided as strings.">命名空間識別項的可列舉集。 這些識別項是以字串形式提供。</returns>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetAllXamlTypes(System.String)">
      <summary vsli:raw="Searches the assemblies that are held by this &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt; and returns a set of types from the specified XAML namespace.">搜尋這個 <see cref="T:System.Xaml.XamlSchemaContext" /> 所持有的組件，並從指定的 XAML 命名空間傳回型別集。</summary>
      <param name="xamlNamespace" vsli:raw="The XAML namespace to return types for.">要傳回型別的 XAML 命名空間。</param>
      <returns vsli:raw="An enumerable set of XAML types. Each XAML type in the set is represented by a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; object.">XAML 型別的可列舉集。 集合中的每一個 XAML 型別都是以 <see cref="T:System.Xaml.XamlType" /> 物件表示。</returns>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetPreferredPrefix(System.String)">
      <summary vsli:raw="Gets a string that is reported as the preferred prefix for consumers to use when they map the specified XAML namespace.">取得字串，這個字串會報告為慣用的前置詞，供消費者在對應指定的 XAML 命名空間時使用。</summary>
      <param name="xmlns" vsli:raw="The XAML namespace to get the preferred prefix for.">要取得慣用前置詞的 XAML 命名空間。</param>
      <returns vsli:raw="A string that consumers should use when they map the specified XAML namespace for markup use.">消費者在對應指定的 XAML 命名空間做為標記之用時，應該使用的字串。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xmlns&quot; /&gt; is null.">
        <paramref name="xmlns" /> 為 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetValueConverter``1(System.Type,System.Xaml.XamlType)">
      <summary vsli:raw="Returns a value converter that can convert to the requested &lt;paramref name=&quot;targetType&quot; /&gt;.">傳回可轉換為所要求之 <paramref name="targetType" /> 的值轉換器。</summary>
      <param name="converterType" vsli:raw="The converter implementation.">轉換子實作。</param>
      <param name="targetType" vsli:raw="The desired destination type for the converter.">轉換器所需的目的型別。</param>
      <typeparam name="TConverterBase" vsli:raw="The specific converter base class.">特定的轉換器基底類別。</typeparam>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; with a constraint that matches the constraint that is put on the method call.">
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />，其條件約束符合方法呼叫上設定的條件約束。</returns>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetXamlDirective(System.String,System.String)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; value that represents a directive, either for the XAML language or for a particular implementation.">傳回 <see cref="T:System.Xaml.XamlDirective" /> 值，這個值表示用於 XAML 語言或特定實作的指示詞。</summary>
      <param name="xamlNamespace" vsli:raw="The XAML namespace that contains the named directive.">包含具名指示詞的 XAML 命名空間。</param>
      <param name="name" vsli:raw="The name of the directive to obtain.">要取得之指示詞的名稱。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; object that represents the requested directive.">
        <see cref="T:System.Xaml.XamlDirective" /> 物件，表示所要求的指示詞。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xamlNamespace&quot; /&gt; or &lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xamlNamespace" /> 或 <paramref name="name" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetXamlType(System.String,System.String,System.Xaml.XamlType[])">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; that is based on a XAML namespace and a string for the type name. This signature can specify the type arguments for cases where the desired type is a generic type.">傳回以 XAML 命名空間和型別名稱字串為基礎的 <see cref="T:System.Xaml.XamlType" />。 這個簽章可以在所需型別為泛型型別的情況下指定型別引數。</summary>
      <param name="xamlNamespace" vsli:raw="The XAML namespace that contains the desired type.">包含所需型別的 XAML 命名空間。</param>
      <param name="name" vsli:raw="The string name of the desired type.">所需型別的字串名稱。</param>
      <param name="typeArguments" vsli:raw="The initialization type arguments for a generic type.">泛型型別的初始化型別引數。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; that matches the input criteria.">與輸入準則相符的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetXamlType(System.Type)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; that is based on a CLR type identifier.">傳回以 CLR 型別識別項為基礎的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <param name="type" vsli:raw="The type to get a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for.">要取得 <see cref="T:System.Xaml.XamlType" /> 的型別。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; that matches the input &lt;paramref name=&quot;type&quot; /&gt;.">與輸入 <paramref name="type" /> 相符的 <see cref="T:System.Xaml.XamlType" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetXamlType(System.Xaml.Schema.XamlTypeName)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; that is based on a XAML system type name.">傳回以 XAML 系統型別名稱為基礎的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <param name="xamlTypeName" vsli:raw="The XAML type name to get a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for.">要取得 <see cref="T:System.Xaml.XamlType" /> 的 XAML 型別名稱。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; that matches the input &lt;paramref name=&quot;xamlTypeName&quot; /&gt;.">與輸入 <paramref name="xamlTypeName" /> 相符的 <see cref="T:System.Xaml.XamlType" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="A component of &lt;paramref name=&quot;xamlTypeName&quot; /&gt; (&lt;see cref=&quot;P:System.Xaml.Schema.XamlTypeName.Name&quot; /&gt; or &lt;see cref=&quot;P:System.Xaml.Schema.XamlTypeName.Namespace&quot; /&gt;) is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xamlTypeName" /> (<see cref="P:System.Xaml.Schema.XamlTypeName.Name" /> 或 <see cref="P:System.Xaml.Schema.XamlTypeName.Namespace" />) 的元件為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xamlTypeName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xamlTypeName" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.OnAssemblyResolve(System.String)">
      <summary vsli:raw="Called when operations use this schema context to resolve an assembly that is required in order to resolve the XAML namespaces that it contains.">當作業為了要解析組件所含的 XAML 命名空間，而使用這個結構描述內容來解析該組件時呼叫。</summary>
      <param name="assemblyName" vsli:raw="The name of the assembly to load.">要載入之組件的名稱。</param>
      <returns vsli:raw="The resolved assembly.">解析的組件。</returns>
    </member>
    <member name="P:System.Xaml.XamlSchemaContext.ReferenceAssemblies">
      <summary vsli:raw="Gets an enumerable set of reference assemblies for the XAML schema context.">取得 XAML 結構描述內容之參考組件的可列舉集。</summary>
      <returns vsli:raw="An enumerable set of reference assemblies for the schema context. Each assembly information item is specified by an &lt;see cref=&quot;T:System.Reflection.Assembly&quot; /&gt; value.">結構描述內容之參考組件的可列舉集。 每一個組件資訊項目都是由 <see cref="T:System.Reflection.Assembly" /> 值指定。</returns>
    </member>
    <member name="P:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity">
      <summary vsli:raw="Gets a value that specifies whether a XAML schema and its context support markup extensions that have two constructors with the same arity (number of input parameters).">取得值，這個值指定 XAML 結構描述和其內容是否支援標記延伸，而這種標記延伸具有兩個包含相同 Arity (即輸入參數的數目) 的建構函式。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the schema context permits markup extensions that have duplicate arity; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">如果結構描述內容允許具有重複 Arity 的標記延伸，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.TryGetCompatibleXamlNamespace(System.String,System.String@)">
      <summary vsli:raw="Returns the success or failure of a request for a compatible XAML namespace. A successful request reports that XAML namespace as an out parameter.">傳回針對相容 XAML 命名空間的要求是否成功。 如果要求成功，則會將這個 XAML 命名空間報告為 out 參數。</summary>
      <param name="xamlNamespace" vsli:raw="The &lt;see langword=&quot;xmlns&quot; /&gt; string for the XAML namespace to be checked for a compatible result.">
        <see langword="xmlns" /> 字串，表示要檢查是否有相容結果的 XAML 命名空間。</param>
      <param name="compatibleNamespace" vsli:raw="When this method returns, the &lt;see langword=&quot;xmlns&quot; /&gt; string for a compatible XAML namespace request. This might be identical to &lt;paramref name=&quot;xamlNamespace&quot; /&gt; if the method returns &lt;see langword=&quot;false&quot; /&gt;.">這個方法傳回時，為相容 XAML 命名空間要求的 <see langword="xmlns" /> 字串。 如果方法傳回 <see langword="false" />，這可能與 <paramref name="xamlNamespace" /> 相同。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;compatibleNamespace&quot; /&gt; contains a usable result; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="compatibleNamespace" /> 包含可使用的結果則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xamlNamespace&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xamlNamespace" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Xaml.XamlSchemaContextSettings">
      <summary vsli:raw="Provides optional settings for a &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt;.">提供 <see cref="T:System.Xaml.XamlSchemaContext" /> 的選擇性設定。</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaContextSettings.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlSchemaContextSettings&quot; /&gt; class.">初始化 <see cref="T:System.Xaml.XamlSchemaContextSettings" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaContextSettings.#ctor(System.Xaml.XamlSchemaContextSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlSchemaContextSettings&quot; /&gt; class by copying the values of an existing &lt;see cref=&quot;T:System.Xaml.XamlSchemaContextSettings&quot; /&gt; instance.">藉由複製現有 <see cref="T:System.Xaml.XamlSchemaContextSettings" /> 執行個體的值，初始化 <see cref="T:System.Xaml.XamlSchemaContextSettings" /> 類別的新執行個體。</summary>
      <param name="settings" vsli:raw="An existing &lt;see cref=&quot;T:System.Xaml.XamlSchemaContextSettings&quot; /&gt;.">現有的 <see cref="T:System.Xaml.XamlSchemaContextSettings" />。</param>
    </member>
    <member name="P:System.Xaml.XamlSchemaContextSettings.FullyQualifyAssemblyNamesInClrNamespaces">
      <summary vsli:raw="Gets or sets a value that specifies whether a XAML schema and its context use fully qualified assembly names in the values that are returned by the lookup API.">取得或設定值，這個值指定 XAML 結構描述和其內容是否在查閱 API 所傳回的值中使用完整組件名稱。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a XAML schema and its context use fully qualified assembly names in the values that are returned by the lookup APIs; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 XAML 結構描述和其內容在查閱 API 所傳回的值中使用完整組件名稱，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlSchemaContextSettings.SupportMarkupExtensionsWithDuplicateArity">
      <summary vsli:raw="Gets or sets a value that specifies whether a XAML schema context allows for markup extensions that have two constructors with the same arity (number of input parameters).">取得或設定值，這個值指定 XAML 結構描述內容是否允許標記延伸具有兩個包含相同 Arity (即輸入參數的數目) 的建構函式。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the schema context allows for markup extensions that have duplicate arity; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果結構描述內容允許具有重複 Arity 的標記延伸，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Xaml.XamlSchemaException">
      <summary vsli:raw="The exception that is thrown when a binding system or another schema representation system for XAML reports an exception to the schema context.">當 XAML 的繫結系統或其他結構描述表示系統向結構描述內容報告例外狀況時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlSchemaException&quot; /&gt; class with a system-supplied message that describes the error.">以系統提供的錯誤說明訊息，初始化 <see cref="T:System.Xaml.XamlSchemaException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlSchemaException&quot; /&gt; class with serialized data.">使用序列化資料，初始化 <see cref="T:System.Xaml.XamlSchemaException" /> 類別的新執行個體。</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">存放序列物件資料的物件。</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlSchemaException&quot; /&gt; class with a specified message that describes the error.">使用指定的錯誤說明訊息，初始化 <see cref="T:System.Xaml.XamlSchemaException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.">說明例外狀況的訊息。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlSchemaException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Xaml.XamlSchemaException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.">說明例外狀況的訊息。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
      <param name="innerException" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;innerException&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="T:System.Xaml.XamlServices">
      <summary vsli:raw="Provides higher-level services (static methods) for the common XAML tasks of reading XAML and writing an object graph; or reading an object graph and writing XAML file output for serialization purposes.">提供更高層級的服務 (靜態方法) 來用於一般 XAML 工作，包括讀取 XAML 和寫入物件圖形，或是讀取物件圖形和寫入 XAML 檔案輸出以進行序列化。</summary>
    </member>
    <member name="M:System.Xaml.XamlServices.Load(System.IO.Stream)">
      <summary vsli:raw="Loads a &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; source for a XAML reader and writes its output as an object graph.">載入 XAML 讀取器的 <see cref="T:System.IO.Stream" /> 來源，並寫入其輸出做為物件圖形。</summary>
      <param name="stream" vsli:raw="The stream to load as input.">要載入做為輸入的資料流。</param>
      <returns vsli:raw="The object graph that is written as output.">已做為輸出寫入的物件圖形。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;stream&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="stream" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Load(System.IO.TextReader)">
      <summary vsli:raw="Creates a XAML reader from a &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt;, and returns an object graph.">從 <see cref="T:System.IO.TextReader" /> 建立 XAML 讀取器，並傳回物件圖形。</summary>
      <param name="textReader" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; to use as the basis for the created &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt;.">要做為所建立 <see cref="T:System.IO.TextReader" /> 之基準的 <see cref="T:System.Xml.XmlReader" />。</param>
      <returns vsli:raw="The object graph that is returned.">所傳回的物件圖形。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;textReader&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="textReader" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Load(System.String)">
      <summary vsli:raw="Loads a &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; source for a XAML reader and returns an object graph.">載入 XAML 讀取器的 <see cref="T:System.IO.Stream" /> 來源並傳回物件圖形。</summary>
      <param name="fileName" vsli:raw="The file name to load and use as source.">要載入並做為來源的檔案名稱。</param>
      <returns vsli:raw="The object graph that is returned.">所傳回的物件圖形。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;fileName&quot; /&gt; input is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="fileName" /> 輸入是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Load(System.Xaml.XamlReader)">
      <summary vsli:raw="Loads a specific XAML reader implementation and returns an object graph.">載入特定的 XAML 讀取器實作並傳回物件圖形。</summary>
      <param name="xamlReader" vsli:raw="The XAML reader implementation to use as the reader for this &lt;see langword=&quot;Load&quot; /&gt; operation.">要做為這個 <see langword="Load" /> 作業之讀取器的 XAML 讀取器實作。</param>
      <returns vsli:raw="The object graph that is returned.">所傳回的物件圖形。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xamlReader&quot; /&gt; input is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xamlReader" /> 輸入是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Load(System.Xml.XmlReader)">
      <summary vsli:raw="Loads a specific XML reader implementation and returns an object graph.">載入特定的 XML 讀取器實作並傳回物件圖形。</summary>
      <param name="xmlReader" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; implementation to use as the reader for this &lt;see langword=&quot;Load&quot; /&gt; operation.">要做為這個 <see langword="Load" /> 作業之讀取器的 <see cref="T:System.Xml.XmlReader" /> 實作。</param>
      <returns vsli:raw="The output object graph.">輸出物件圖形。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xamlReader&quot; /&gt; input is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xamlReader" /> 輸入是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Parse(System.String)">
      <summary vsli:raw="Reads XAML as string output and returns an object graph.">讀取 XAML 做為字串輸出並傳回物件圖形。</summary>
      <param name="xaml" vsli:raw="The XAML string input to parse.">要剖析的 XAML 字串輸入。</param>
      <returns vsli:raw="The object graph that is returned.">所傳回的物件圖形。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xaml&quot; /&gt; input is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xaml" /> 輸入是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.IO.Stream,System.Object)">
      <summary vsli:raw="Processes a provided object graph into a XAML node representation and then into an output stream for serialization.">將提供的物件圖形處理成 XAML 節點表示，再處理成序列化的輸出資料流。</summary>
      <param name="stream" vsli:raw="The destination stream.">目的資料流。</param>
      <param name="instance" vsli:raw="The root of the object graph to process.">要處理之物件圖形的根目錄。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;stream&quot; /&gt; input is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="stream" /> 輸入是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.IO.TextWriter,System.Object)">
      <summary vsli:raw="Processes a provided object graph into a XAML node representation and then into an output that goes to the provided &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;.">將提供的物件圖形處理成 XAML 節點表示，再處理成流向所提供 <see cref="T:System.IO.TextWriter" /> 的輸出。</summary>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; that writes the output.">寫入輸出的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="instance" vsli:raw="The root of the object graph to process.">要處理之物件圖形的根目錄。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;writer&quot; /&gt; input is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="writer" /> 輸入是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.Object)">
      <summary vsli:raw="Processes a provided object tree into a XAML node representation, and returns a string representation of the output XAML.">將提供的物件樹狀結構處理成 XAML 節點表示，然後傳回輸出 XAML 的字串表示。</summary>
      <param name="instance" vsli:raw="The root of the object graph to process.">要處理之物件圖形的根目錄。</param>
      <returns vsli:raw="The XAML markup output as a string.">字串形式的 XAML 標記輸出。</returns>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.String,System.Object)">
      <summary vsli:raw="Processes a provided object graph into a XAML node representation and then writes it to an output file at a provided location.">將提供的物件圖形處理成 XAML 節點表示，然後寫入至所提供位置上的輸出檔。</summary>
      <param name="fileName" vsli:raw="The name and location of the file to write the output to.">要將輸出寫入之目標檔案的名稱和位置。</param>
      <param name="instance" vsli:raw="The root of the object graph to process.">要處理之物件圖形的根目錄。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;fileName&quot; /&gt; is an empty string.">
        <paramref name="fileName" /> 為空字串。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;fileName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="fileName" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.Xaml.XamlWriter,System.Object)">
      <summary vsli:raw="Processes a provided object graph into a XAML node representation and then writes it to the provided XAML writer.">將提供的物件圖形處理成 XAML 節點表示，然後寫入至提供的 XAML 寫入器。</summary>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlWriter&quot; /&gt; implementation to use.">要使用的 <see cref="T:System.Xaml.XamlWriter" /> 實作。</param>
      <param name="instance" vsli:raw="The root of the object graph to process.">要處理之物件圖形的根目錄。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;writer&quot; /&gt; input is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="writer" /> 輸入是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.Xml.XmlWriter,System.Object)">
      <summary vsli:raw="Processes a provided object graph into a XAML node representation and then writes it to the provided &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">將提供的物件圖形處理成 XAML 節點表示，然後寫入至提供的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; implementation to use.">要使用的 <see cref="T:System.Xml.XmlWriter" /> 實作。</param>
      <param name="instance" vsli:raw="The root of the object graph to process.">要處理之物件圖形的根目錄。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;writer&quot; /&gt; input is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="writer" /> 輸入是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Transform(System.Xaml.XamlReader,System.Xaml.XamlWriter)">
      <summary vsli:raw="Connects a &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt; and a &lt;see cref=&quot;T:System.Xaml.XamlWriter&quot; /&gt; to use a common XAML node set intermediary. Potentially transforms the content, depending on the types of readers and writers that are provided.">連接 <see cref="T:System.Xaml.XamlReader" /> 和 <see cref="T:System.Xaml.XamlWriter" /> 以使用常見的 XAML 節點集中繼項目。 可能會轉換內容，視提供的讀取器和寫入器類型而定。</summary>
      <param name="xamlReader" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt; implementation to use.">要使用的 <see cref="T:System.Xaml.XamlReader" /> 實作。</param>
      <param name="xamlWriter" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlWriter&quot; /&gt; to use.">要使用的 <see cref="T:System.Xaml.XamlWriter" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xamlReader&quot; /&gt; or &lt;paramref name=&quot;xamlWriter&quot; /&gt; input is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xamlReader" /> 或 <paramref name="xamlWriter" /> 輸入為 <see langword="null" />。</exception>
      <exception cref="T:System.Xaml.XamlException" vsli:raw="The XAML schema context does not match between the provided &lt;paramref name=&quot;xamlReader&quot; /&gt; and &lt;paramref name=&quot;xamlWriter&quot; /&gt;.">XAML 結構描述內容在提供的 <paramref name="xamlReader" /> 和 <paramref name="xamlWriter" /> 之間不相符。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Transform(System.Xaml.XamlReader,System.Xaml.XamlWriter,System.Boolean)">
      <summary vsli:raw="Connects a &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt; and a &lt;see cref=&quot;T:System.Xaml.XamlWriter&quot; /&gt; to use a common XAML node set intermediary. Potentially transforms the content, depending on the types of readers and writers that are provided. Provides a parameter for specifying whether to close the writer after the call is completed.">連接 <see cref="T:System.Xaml.XamlReader" /> 和 <see cref="T:System.Xaml.XamlWriter" /> 以使用常見的 XAML 節點集中繼項目。 可能會轉換內容，視提供的讀取器和寫入器類型而定。 提供參數來指定是否在完成呼叫後關閉寫入器。</summary>
      <param name="xamlReader" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt; implementation to use.">要使用的 <see cref="T:System.Xaml.XamlReader" /> 實作。</param>
      <param name="xamlWriter" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlWriter&quot; /&gt; to use.">要使用的 <see cref="T:System.Xaml.XamlWriter" />。</param>
      <param name="closeWriter" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to close the writer after the call is complete; &lt;see langword=&quot;false&quot; /&gt; to leave the writer active at the last written position.">
        <see langword="true" /> 表示在呼叫完成之後關閉寫入器，<see langword="false" /> 表示讓寫入器在最後寫入的位置上繼續保持開啟。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xamlReader&quot; /&gt; or &lt;paramref name=&quot;xamlWriter&quot; /&gt; input is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xamlReader" /> 或 <paramref name="xamlWriter" /> 輸入為 <see langword="null" />。</exception>
      <exception cref="T:System.Xaml.XamlException" vsli:raw="The XAML schema context does not match between the provided &lt;paramref name=&quot;xamlReader&quot; /&gt; and &lt;paramref name=&quot;xamlWriter&quot; /&gt;.">XAML 結構描述內容在提供的 <paramref name="xamlReader" /> 和 <paramref name="xamlWriter" /> 之間不相符。</exception>
    </member>
    <member name="T:System.Xaml.XamlType">
      <summary vsli:raw="Reports information about XAML types as part of the overall XAML system that is implemented in .NET XAML Services.">報告在 .NET Framework XAML 服務實作的整體 XAML 系統中，XAML 型別的相關資訊。</summary>
    </member>
    <member name="M:System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; class based on a string name for the type.">根據型別的字串名稱，初始化 <see cref="T:System.Xaml.XamlType" /> 類別的新執行個體。</summary>
      <param name="typeName" vsli:raw="The name of the type to create.">要建立之型別的名稱。</param>
      <param name="typeArguments" vsli:raw="The type arguments for a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; that represents a generic type. Can be (and often is) &lt;see langword=&quot;null&quot; /&gt;, which indicates that the represented type is not a generic type.">表示泛型型別之 <see cref="T:System.Xaml.XamlType" /> 的型別引數。 可以是 (而且通常是) <see langword="null" />，指出所表示的型別不是泛型型別。</param>
      <param name="schemaContext" vsli:raw="XAML schema context for XAML readers and XAML writers.">XAML 讀取器及 XAML 寫入器的 XAML 結構描述內容。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more of &lt;paramref name=&quot;typeName&quot; /&gt; or &lt;paramref name=&quot;schemaContext&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">一個或多個 <paramref name="typeName" /> 或 <paramref name="schemaContext" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; class based on the XAML namespace and a string name for the type. This constructor is exclusively for analysis and XAML-node recording of type usages that are known to not have backing in the supporting type system and XAML schema context.">根據型別的 XAML 命名空間和字串名稱，初始化 <see cref="T:System.Xaml.XamlType" /> 類別的新執行個體。 這個建構函式是專門針對已知在支援型別系統和 XAML 結構描述內容中沒有支援的型別使用方式，進行分析及 XAML 節點記錄。</summary>
      <param name="unknownTypeNamespace" vsli:raw="The XAML namespace for the type, as a string.">型別的 XAML 命名空間 (字串形式)。</param>
      <param name="unknownTypeName" vsli:raw="The name of the type in the provided &lt;paramref name=&quot;unknownTypeNamespace&quot; /&gt; XAML namespace.">型別在所提供 <paramref name="unknownTypeNamespace" /> XAML 命名空間中的名稱。</param>
      <param name="typeArguments" vsli:raw="The type arguments for a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; that represents a generic type. Can be (and often is) &lt;see langword=&quot;null&quot; /&gt;, which indicates that the represented type is not a generic type.">表示泛型型別之 <see cref="T:System.Xaml.XamlType" /> 的型別引數。 可以是 (而且通常是) <see langword="null" />，指出所表示的型別不是泛型型別。</param>
      <param name="schemaContext" vsli:raw="XAML schema context for XAML readers or XAML writers.">XAML 讀取器或 XAML 寫入器的 XAML 結構描述內容。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more of &lt;paramref name=&quot;unknownTypeNamespace&quot; /&gt;, &lt;paramref name=&quot;unknownTypeName&quot; /&gt;, or &lt;paramref name=&quot;schemaContext&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">一個或多個 <paramref name="unknownTypeNamespace" />、<paramref name="unknownTypeName" /> 或 <paramref name="schemaContext" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; class based on the underlying CLR type information.">根據基礎 CLR 型別資訊，初始化 <see cref="T:System.Xaml.XamlType" /> 類別的新執行個體。</summary>
      <param name="underlyingType" vsli:raw="The underlying CLR &lt;see cref=&quot;T:System.Type&quot; /&gt; for the XAML type to construct.">要建構之 XAML 型別的基礎 CLR <see cref="T:System.Type" />。</param>
      <param name="schemaContext" vsli:raw="XAML schema context for XAML readers or XAML writers.">XAML 讀取器或 XAML 寫入器的 XAML 結構描述內容。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more of &lt;paramref name=&quot;underlyingType&quot; /&gt; or &lt;paramref name=&quot;schemaContext&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">一個或多個 <paramref name="underlyingType" /> 或 <paramref name="schemaContext" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlTypeInvoker)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; class based on underlying type information and a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt; implementation.">根據基礎型別資訊和 <see cref="T:System.Xaml.XamlType" /> 實作，初始化 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 類別的新執行個體。</summary>
      <param name="underlyingType" vsli:raw="The underlying type for the XAML type to construct.">要建構之 XAML 型別的基礎型別。</param>
      <param name="schemaContext" vsli:raw="XAML schema context for the XAML reader.">XAML 讀取器的 XAML 結構描述內容。</param>
      <param name="invoker" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt; implementation that handles run-time reflection calls against the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">
        <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 實作，可處理對 <see cref="T:System.Xaml.XamlType" /> 的執行階段反映呼叫。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more of &lt;paramref name=&quot;underlyingType&quot; /&gt; or &lt;paramref name=&quot;schemaContext&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">一個或多個 <paramref name="underlyingType" /> 或 <paramref name="schemaContext" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xaml.XamlType.AllowedContentTypes">
      <summary vsli:raw="Gets a read-only collection of the types that are usable as the &lt;see cref=&quot;P:System.Xaml.XamlType.ContentProperty&quot; /&gt; value for this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">取得型別的唯讀集合，這些型別可做為這個 <see cref="P:System.Xaml.XamlType.ContentProperty" /> 的 <see cref="T:System.Xaml.XamlType" /> 值。</summary>
      <returns vsli:raw="A read-only collection of possible content types.">可能內容型別的唯讀集合。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.BaseType">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the immediate base type of this XAML type. Determination of this value is based on the underlying type of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; and schema context.">取得這個 XAML 型別之直接基底型別的 <see cref="T:System.Xaml.XamlType" />。 此值取決於這個 <see cref="T:System.Xaml.XamlType" /> 的基礎型別和結構描述內容。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the immediate base type of this XAML type.">這個 XAML 型別之直接基底型別的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)">
      <summary vsli:raw="Returns a value that indicates whether an instance of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; has the specified &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; in its list of assignable types.">傳回值，這個值表示在此 <see cref="T:System.Xaml.XamlType" /> 的執行個體的可指派型別清單中，是否有指定的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <param name="xamlType" vsli:raw="The type to check against the current &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; .">要根據目前 <see cref="T:System.Xaml.XamlType" /> 檢查的型別。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;xamlType&quot; /&gt; is in the assignable types list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="xamlType" /> 在可指派型別清單中則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.ConstructionRequiresArguments">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; must have arguments (generic constraints through &lt;see langword=&quot;x:TypeArguments&quot; /&gt;, initialization text, or other XAML techniques) to construct a valid instance of the type.">取得值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否必須有引數 (透過 <see langword="x:TypeArguments" />、初始設定文字或其他 XAML 技術的泛型條件約束)，才能建構型別的有效執行個體。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if construction of an instance requires some argument value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果建構執行個體時需要一些引數值則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.ContentProperty">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; information for the content property of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">取得這個 <see cref="T:System.Xaml.XamlMember" /> 之內容屬性的 <see cref="T:System.Xaml.XamlType" /> 資訊。</summary>
      <returns vsli:raw="&lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; information for the content property of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;. May be &lt;see langword=&quot;null&quot; /&gt; if no content property exists.">這個 <see cref="T:System.Xaml.XamlMember" /> 之內容屬性的 <see cref="T:System.Xaml.XamlType" /> 資訊。 如果沒有內容屬性，則可以是 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.ContentWrappers">
      <summary vsli:raw="Gets the types that are used to wrap content for a content property when it is not a strict type match, such as strings in a strongly typed &lt;see langword=&quot;Collection&amp;lt;T&amp;gt;&quot; /&gt;.">取得型別，這些型別會在內容屬性並非嚴格型別相符 (例如強型別 <see langword="Collection&lt;T&gt;" /> 中的字串) 時，用於包裝該內容屬性的內容。</summary>
      <returns vsli:raw="A read-only collection of possible content wrapper types; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">可能內容包裝函式的唯讀集合，否則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.DeferringLoader">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; that represents the deferred loading conversion behavior for this type.">取得表示此型別之延後載入轉換行為的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; with &lt;see cref=&quot;T:System.Xaml.XamlDeferringLoader&quot; /&gt; constraint that represents the deferred loading behavior for this type.">具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 條件約束的 <see cref="T:System.Xaml.XamlDeferringLoader" />，這個條件約束表示此型別的延後載入行為。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.Equals(System.Object)">
      <summary vsli:raw="Indicates whether the current object is equal to another object.">指出目前的物件和另一個物件是否相等。</summary>
      <param name="obj" vsli:raw="The object to compare with this object.">要與這個物件比較的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current object is equal to the &lt;paramref name=&quot;obj&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果目前的物件等於 <paramref name="obj" /> 參數，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.Equals(System.Xaml.XamlType)">
      <summary vsli:raw="Indicates whether the current object is equal to another object of the same type.">指出目前的物件是否等於另一個具有相同型別的物件。</summary>
      <param name="other" vsli:raw="An object to compare with this object.">要與這個物件相互比較的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current object is equal to the &lt;paramref name=&quot;other&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若目前的物件等於 <see langword="true" /> 參數，則為 <paramref name="other" />，否則即為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetAliasedProperty(System.Xaml.XamlDirective)">
      <summary vsli:raw="Returns the XAML member that is aliased to a XAML directive by this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">傳回由這個 <see cref="T:System.Xaml.XamlType" /> 別名化為 XAML 指示詞的 XAML 成員。</summary>
      <param name="directive" vsli:raw="The directive for which to find the aliased member.">要尋找別名化成員的指示詞。</param>
      <returns vsli:raw="The aliased member, if found; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">如果找到則為別名化成員，否則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetAllAttachableMembers">
      <summary vsli:raw="Returns a collection that contains all the attachable properties that are exposed by this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">傳回集合，這個集合包含由此 <see cref="T:System.Xaml.XamlType" /> 公開之所有可附加的屬性。</summary>
      <returns vsli:raw="A collection that contains zero or more &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; values.">集合，包含零個或更多個 <see cref="T:System.Xaml.XamlMember" /> 值。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetAllMembers">
      <summary vsli:raw="Returns a collection that contains all the members that are exposed by this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">傳回集合，這個集合包含由此 <see cref="T:System.Xaml.XamlType" /> 公開的所有成員。</summary>
      <returns vsli:raw="A collection that contains zero or more &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; values.">集合，包含零個或更多個 <see cref="T:System.Xaml.XamlMember" /> 值。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetAttachableMember(System.String)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; representing a specific named attachable member of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">傳回代表此 <see cref="T:System.Xaml.XamlType" /> 之指定具名可附加成員的 <see cref="T:System.Xaml.XamlMember" />。</summary>
      <param name="name" vsli:raw="The name of the attachable member to get, in &lt;c&gt;ownerTypeName.MemberName&lt;/c&gt; form.">要取得之可附加成員的名稱，格式為：<c>ownerTypeName.MemberName</c>。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; object for the requested attachable member; otherwise, &lt;see langword=&quot;null&quot; /&gt;, if no attachable member by that name exists.">代表要求之可附加成員的 <see cref="T:System.Xaml.XamlMember" /> 物件；如果沒有該名稱的可附加成員存在則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetHashCode">
      <summary vsli:raw="Returns the hash code for this object.">傳回這個物件的雜湊程式碼。</summary>
      <returns vsli:raw="An integer hash code.">整數雜湊程式碼。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetMember(System.String)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; for a specific named member from this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">從這個 <see cref="T:System.Xaml.XamlMember" /> 傳回特定具名成員的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <param name="name" vsli:raw="The name of the member to get (as a string).">要取得之成員的名稱 (字串形式)。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; information for the member, if such a member was found; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">如果找到成員，則為該成員的 <see cref="T:System.Xaml.XamlMember" /> 資訊，否則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)">
      <summary vsli:raw="For markup extension types, returns the types of the positional parameters that are supported in a specific markup extension usage for this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">如果是標記延伸型別，則傳回這個 <see cref="T:System.Xaml.XamlType" /> 的特定標記延伸用法所支援之位置參數的型別。</summary>
      <param name="parameterCount" vsli:raw="The count (arity) of the particular syntax or constructor mode that you want information about.">您想要取得相關資訊之特定語法或建構函式模式的計數 (Arity)。</param>
      <returns vsli:raw="A list of &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; values, where each &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; is the type for that position in the syntax. You must specify the types in the same order when you supply markup input for the markup extension.">
        <see cref="T:System.Xaml.XamlType" /> 值的清單，其中每個 <see cref="T:System.Xaml.XamlType" /> 都是語法中該位置適用的型別。 指定這些型別時，順序必須與您為標記延伸提供標記輸入時的順序相同。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetXamlNamespaces">
      <summary vsli:raw="Returns a list of string identifiers for XAML namespaces that the type is included in.">傳回字串識別項清單，這些字串識別項會識別型別所在的 XAML 命名空間。</summary>
      <returns vsli:raw="A list of string values, where each string is the URI identifier for a XAML namespace.">字串值的清單，其中每個字串都是 XAML 命名空間的 URI 識別項。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.Invoker">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt; implementation that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">取得與這個 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 相關聯的 <see cref="T:System.Xaml.XamlType" /> 實作。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt; implementation that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">與這個 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 相關聯的 <see cref="T:System.Xaml.XamlType" /> 實作。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsAmbient">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents an ambient type, as per the XAML definition.">取得值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表符合 XAML 定義的環境型別。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents an ambient type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個 <see cref="T:System.Xaml.XamlType" /> 表示環境型別，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsArray">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents an array.">取得值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表陣列。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents an array; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個 <see cref="T:System.Xaml.XamlType" /> 表示陣列，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsCollection">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a collection.">取得值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表集合。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個 <see cref="T:System.Xaml.XamlType" /> 表示集合，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsConstructible">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a constructible type, as per the XAML definition.">取得值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表符合 XAML 定義的可建構型別。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a constructible type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個 <see cref="T:System.Xaml.XamlType" /> 表示可建構的型別則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsDictionary">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a dictionary, as per the XAML definition.">取得值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表符合 XAML 定義的字典。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個 <see cref="T:System.Xaml.XamlType" /> 表示字典，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsGeneric">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a generic type.">取得值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表泛型型別。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a generic type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個 <see cref="T:System.Xaml.XamlType" /> 表示泛型型別，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsMarkupExtension">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a markup extension.">取得值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表標記延伸。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a markup extension; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個 <see cref="T:System.Xaml.XamlType" /> 表示標記延伸，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsNameScope">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a XAML namescope, as per the XAML definition.">取得值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表符合 XAML 定義的 XAML 名稱範圍。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a XAML namescope; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個 <see cref="T:System.Xaml.XamlType" /> 表示 XAML 名稱範圍，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsNameValid">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; is initialized by using a valid &lt;see langword=&quot;xamlName&quot; /&gt; string as its &lt;see cref=&quot;P:System.Xaml.XamlType.Name&quot; /&gt;.">取得值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否使用有效的 <see langword="xamlName" /> 字串做為其 <see cref="P:System.Xaml.XamlType.Name" /> 以進行初始化。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; is initialized by using a valid &lt;see langword=&quot;xamlName&quot; /&gt; string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Xaml.XamlType" /> 使用有效的 <see langword="true" /> 字串進行初始化則為 <see langword="xamlName" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsNullable">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a nullable type, as per the XAML definition.">取得值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表符合 XAML 定義之可為 Null 的型別。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a nullable type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Xaml.XamlType" /> 表示可為 Null 的型別則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsPublic">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a public type in the relevant type system.">取得值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表相關型別系統中的公用型別。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a public type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Xaml.XamlType" /> 表示公用型別則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsUnknown">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a type that cannot be resolved in the underlying type system.">取得值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表基礎型別系統中無法解析的型別。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents an unresolvable type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Xaml.XamlType" /> 表示無法解析的型別則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsUsableDuringInitialization">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; is built top-down during XAML initialization.">取得值，這個值表示在 XAML 初始化期間是否由上往下建立這個 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; is built top-down during XAML initialization; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">如果在 XAML 初始化期間由上往下建立這個 <see cref="T:System.Xaml.XamlType" />，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsWhitespaceSignificantCollection">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a whitespace significant collection, as per the XML definition.">取得值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表符合 XML 定義的空白有效集合。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a whitespace significant collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個 <see cref="T:System.Xaml.XamlType" /> 表示空白有效集合，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsXData">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents XML &lt;see langword=&quot;XDATA&quot; /&gt;, as per the XAML definition.">取得值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表符合 XAML 定義的 XML <see langword="XDATA" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents &lt;see langword=&quot;XDATA&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Xaml.XamlType" /> 表示 <see langword="true" /> 則為 <see langword="XDATA" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.ItemType">
      <summary vsli:raw="Gets a value that provides the type information for the &lt;see langword=&quot;Items&quot; /&gt; property of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">取得值，這個值提供此 <see cref="T:System.Xaml.XamlType" /> 之 <see langword="Items" /> 屬性的型別資訊。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; object for the type of the items in the collection; otherwise, &lt;see langword=&quot;null&quot; /&gt;, if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; does not represent a collection.">集合中之項目型別的 <see cref="T:System.Xaml.XamlType" /> 物件，如果此 <see cref="T:System.Xaml.XamlType" /> 不表示集合，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.KeyType">
      <summary vsli:raw="Gets a value that provides the type information for the key property of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;, if the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a dictionary.">取得值，如果 <see cref="T:System.Xaml.XamlType" /> 表示字典，則這個值提供此 <see cref="T:System.Xaml.XamlType" /> 之索引鍵屬性的型別資訊。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; object for the type of the key for dictionary usage, otherwise, &lt;see langword=&quot;null&quot; /&gt;, if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; does not represent a dictionary.">字典用法索引鍵型別的 <see cref="T:System.Xaml.XamlType" /> 物件，如果這個 <see cref="T:System.Xaml.XamlType" /> 不表示字典，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupAliasedProperty(System.Xaml.XamlDirective)">
      <summary vsli:raw="Returns the XAML member that is aliased to a XAML directive by this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">傳回由這個 <see cref="T:System.Xaml.XamlType" /> 別名化為 XAML 指示詞的 XAML 成員。</summary>
      <param name="directive" vsli:raw="The directive for which to find the aliased member.">要尋找別名化成員的指示詞。</param>
      <returns vsli:raw="The aliased member, if found; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">如果找到則為別名化成員，否則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupAllAttachableMembers">
      <summary vsli:raw="Returns an enumerable set that contains all attachable properties that are exposed by this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">傳回可列舉的集合，這個集合包含由此 <see cref="T:System.Xaml.XamlType" /> 公開之所有可附加的屬性。</summary>
      <returns vsli:raw="An enumerable set that contains zero or more &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; values; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">包含零個或更多個 <see cref="T:System.Xaml.XamlMember" /> 值的可列舉集合，否則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupAllMembers">
      <summary vsli:raw="Returns an enumerable set that contains all the members that are exposed by this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">傳回可列舉的集合，這個集合包含由此 <see cref="T:System.Xaml.XamlType" /> 公開的所有成員。</summary>
      <returns vsli:raw="An enumerable set that contains zero or more &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; values.">可舉列的集合，包含零個或更多個 <see cref="T:System.Xaml.XamlMember" /> 值。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupAllowedContentTypes">
      <summary vsli:raw="Returns a list of the types that are usable as the &lt;see cref=&quot;P:System.Xaml.XamlType.ContentProperty&quot; /&gt; value for this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">傳回型別的清單，這些型別可做為此 <see cref="P:System.Xaml.XamlType.ContentProperty" /> 的 <see cref="T:System.Xaml.XamlType" /> 值。</summary>
      <returns vsli:raw="A list of possible content types.">可能內容型別的清單。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupAttachableMember(System.String)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; for a specific named attachable from this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">從這個 <see cref="T:System.Xaml.XamlType" /> 傳回 <see cref="T:System.Xaml.XamlMember" /> 以代表特定的具名可附加成員。</summary>
      <param name="name" vsli:raw="The name of the attachable member to get, in &lt;c&gt;ownerTypeName.MemberName&lt;/c&gt; form.">要取得之可附加成員的名稱，格式為：<c>ownerTypeName.MemberName</c>。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; object for the requested attachable member; otherwise, &lt;see langword=&quot;null&quot; /&gt;, if no attachable member by that name exists.">代表要求之可附加成員的 <see cref="T:System.Xaml.XamlMember" /> 物件；如果沒有該名稱的可附加成員存在則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupBaseType">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the immediate base type of this XAML type. Determination of this value is based on the underlying type of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; and schema context.">傳回這個 XAML 型別之直接基底型別的 <see cref="T:System.Xaml.XamlType" />。 此值取決於這個 <see cref="T:System.Xaml.XamlType" /> 的基礎型別和結構描述內容。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the immediate base type of this XAML type.">這個 XAML 型別之直接基底型別的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupCollectionKind">
      <summary vsli:raw="Returns a value of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlCollectionKind&quot; /&gt; enumeration that declares which specific collection type this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; uses.">傳回 <see cref="T:System.Xaml.Schema.XamlCollectionKind" /> 列舉的值，這個值宣告此 <see cref="T:System.Xaml.XamlType" /> 使用的特定集合型別。</summary>
      <returns vsli:raw="A value of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlCollectionKind&quot; /&gt; enumeration.">
        <see cref="T:System.Xaml.Schema.XamlCollectionKind" /> 列舉的值。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupConstructionRequiresArguments">
      <summary vsli:raw="Returns a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; must have arguments (generic constraints through &lt;see langword=&quot;x:TypeArguments&quot; /&gt;, initialization text, or other XAML techniques) to construct a valid instance of the type.">傳回值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否必須有引數 (透過 <see langword="x:TypeArguments" /> 的泛型條件約束、初始設定文字或其他 XAML 技術)，才能建構型別的有效執行個體。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if construction of an instance requires some argument value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果建構執行個體時需要一些引數值則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupContentProperty">
      <summary vsli:raw="Returns &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; information for the content property of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">傳回這個 <see cref="T:System.Xaml.XamlMember" /> 之內容屬性的 <see cref="T:System.Xaml.XamlType" /> 資訊。</summary>
      <returns vsli:raw="&lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; information for the content property of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;. May be &lt;see langword=&quot;null&quot; /&gt;.">這個 <see cref="T:System.Xaml.XamlMember" /> 之內容屬性的 <see cref="T:System.Xaml.XamlType" /> 資訊。 可以是 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupContentWrappers">
      <summary vsli:raw="Gets a list of &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; values that represent the content wrappers for this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">取得 <see cref="T:System.Xaml.XamlType" /> 值的清單，這些值表示這個 <see cref="T:System.Xaml.XamlType" /> 的內容包裝函式。</summary>
      <returns vsli:raw="A list of &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; values that represent the content wrappers for this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlType" /> 值的清單，表示這個 <see cref="T:System.Xaml.XamlType" /> 的內容包裝函式。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupCustomAttributeProvider">
      <summary vsli:raw="When implemented in a derived class, returns an &lt;see cref=&quot;T:System.Reflection.ICustomAttributeProvider&quot; /&gt; implementation.">在衍生類別中實作時，傳回 <see cref="T:System.Reflection.ICustomAttributeProvider" /> 實作。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Reflection.ICustomAttributeProvider&quot; /&gt; implementation.">
        <see cref="T:System.Reflection.ICustomAttributeProvider" /> 實作。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupDeferringLoader">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; object, which is used for deferred loading of XAML-declared objects.">傳回 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 物件，這個物件用於延後載入 XAML 宣告的物件。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; that has a &lt;see cref=&quot;T:System.Xaml.XamlDeferringLoader&quot; /&gt; constraint on the generic.">
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />，具有對泛型的 <see cref="T:System.Xaml.XamlDeferringLoader" /> 條件約束。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupInvoker">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt; that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">傳回與這個 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 相關聯的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt; information for this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">這個 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 的 <see cref="T:System.Xaml.XamlType" /> 資訊，否則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsAmbient">
      <summary vsli:raw="Returns a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents an ambient type, as per the XAML definition.">傳回值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表符合 XAML 定義的環境型別。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents an ambient type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個 <see cref="T:System.Xaml.XamlType" /> 表示環境型別，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsConstructible">
      <summary vsli:raw="Returns a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a constructible type, as per the XAML definition.">傳回值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表符合 XAML 定義的可建構型別。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a constructible type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個 <see cref="T:System.Xaml.XamlType" /> 表示可建構的型別則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsMarkupExtension">
      <summary vsli:raw="Returns a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a markup extension.">傳回值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表標記延伸。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a markup extension; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個 <see cref="T:System.Xaml.XamlType" /> 表示標記延伸，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsNameScope">
      <summary vsli:raw="Returns a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a XAML namescope, as per the XAML definition.">傳回值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表符合 XAML 定義的 XAML 名稱範圍。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a XAML namescope; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個 <see cref="T:System.Xaml.XamlType" /> 表示 XAML 名稱範圍，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsNullable">
      <summary vsli:raw="Returns a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a nullable type, as per the XAML definition.">傳回值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表符合 XAML 定義之可為 Null 的型別。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a nullable type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Xaml.XamlType" /> 表示可為 Null 的型別則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsPublic">
      <summary vsli:raw="Returns a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a public type in the relevant type system.">傳回值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表相關型別系統中的公用型別。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a public type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Xaml.XamlType" /> 表示公用型別則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsUnknown">
      <summary vsli:raw="Returns a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a type that cannot be resolved in the underlying type system.">傳回值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表基礎型別系統中無法解析的型別。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a nonresolvable type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Xaml.XamlType" /> 表示無法解析的型別則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection">
      <summary vsli:raw="Returns a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a whitespace significant collection, as per the XML definition.">傳回值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表符合 XML 定義的空白有效集合。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a white-space significant collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Xaml.XamlType" /> 表示空白字元有效集合則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsXData">
      <summary vsli:raw="Returns a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents XML &lt;see langword=&quot;XDATA&quot; /&gt;, as per the XAML definition.">傳回值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表符合 XAML 定義的 XML <see langword="XDATA" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents &lt;see langword=&quot;XDATA&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Xaml.XamlType" /> 表示 <see langword="true" /> 則為 <see langword="XDATA" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupItemType">
      <summary vsli:raw="Returns a value that provides the type information for the &lt;see langword=&quot;Items&quot; /&gt; property of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">傳回值，這個值提供此 <see cref="T:System.Xaml.XamlType" /> 之 <see langword="Items" /> 屬性的型別資訊。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; object for the type of the items in the collection; otherwise, &lt;see langword=&quot;null&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; does not represent a collection.">集合中之項目型別的 <see cref="T:System.Xaml.XamlType" /> 物件，如果此 <see cref="T:System.Xaml.XamlType" /> 不表示集合，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupKeyType">
      <summary vsli:raw="Returns a value that provides the type information for the key property of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;, if the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a dictionary.">傳回值，如果 <see cref="T:System.Xaml.XamlType" /> 表示字典，則這個值提供此 <see cref="T:System.Xaml.XamlType" /> 之索引鍵屬性的型別資訊。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; object for the type of the key for dictionary usage, or &lt;see langword=&quot;null&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; does not represent a dictionary.">字典用法之索引鍵型別的 <see cref="T:System.Xaml.XamlType" /> 物件，如果這個 <see cref="T:System.Xaml.XamlType" /> 不表示字典，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupMarkupExtensionReturnType">
      <summary vsli:raw="Returns a value that provides the type information for the returned &lt;see langword=&quot;ProvideValue&quot; /&gt; of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;, if it represents a markup extension.">傳回值，這個值提供此 <see cref="T:System.Xaml.XamlType" /> (如果表示標記延伸的話) 傳回之 <see langword="ProvideValue" /> 的型別資訊。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; object for the return type for markup extension usage; otherwise, &lt;see langword=&quot;null&quot; /&gt;, if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; does not represent a markup extension.">標記延伸使用方式之傳回型別的 <see cref="T:System.Xaml.XamlType" /> 物件，如果這個 <see cref="T:System.Xaml.XamlType" /> 不表示標記延伸，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupMember(System.String,System.Boolean)">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; for a specific named member from this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">從這個 <see cref="T:System.Xaml.XamlMember" /> 傳回特定具名成員的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <param name="name" vsli:raw="The name of the member to get (as a string).">要取得之成員的名稱 (字串形式)。</param>
      <param name="skipReadOnlyCheck" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return a member even if that member has a &lt;see langword=&quot;true&quot; /&gt; value for &lt;see cref=&quot;P:System.Xaml.XamlMember.IsReadOnly&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; to not return a &lt;see cref=&quot;P:System.Xaml.XamlMember.IsReadOnly&quot; /&gt; member. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示即使成員的 <see cref="P:System.Xaml.XamlMember.IsReadOnly" /> 是 <see langword="true" /> 值，還是傳回該成員。<see langword="false" /> 表示不傳回 <see cref="P:System.Xaml.XamlMember.IsReadOnly" /> 成員。 預設為 <see langword="false" />。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; information for the member, if a member was found; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">如果找到成員，則為成員的 <see cref="T:System.Xaml.XamlMember" /> 資訊，否則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
      <summary vsli:raw="For markup extension types, returns the types of the positional parameters that are supported in a specific markup extension usage for this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">如果是標記延伸型別，則傳回這個 <see cref="T:System.Xaml.XamlType" /> 的特定標記延伸用法所支援之位置參數的型別。</summary>
      <param name="parameterCount" vsli:raw="The count (arity) of the particular syntax or constructor mode that you want information about.">您想要取得相關資訊之特定語法或建構函式模式的計數 (Arity)。</param>
      <returns vsli:raw="A list of &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; values where each such &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; is the type for that position in the syntax. You must specify those types in the same order when supplying markup input for the markup extension.">
        <see cref="T:System.Xaml.XamlType" /> 值的清單，其中每個 <see cref="T:System.Xaml.XamlType" /> 都是語法中該位置適用的型別。 為標記延伸提供標記輸入時，您必須以相同順序指定這些型別。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupSetMarkupExtensionHandler">
      <summary vsli:raw="Returns a handler callback to use for the set operations of markup extensions.">傳回用於標記延伸設定作業的處理常式回呼。</summary>
      <returns vsli:raw="A handler callback to use for the set operations of markup extensions.">用於標記延伸設定作業的處理常式回呼。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupSetTypeConverterHandler">
      <summary vsli:raw="Returns a handler to use for type converter setting cases.">傳回用於型別轉換子設定案例的處理常式。</summary>
      <returns vsli:raw="A handler to use for type converter setting cases.">用於型別轉換子設定案例的處理常式。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupTrimSurroundingWhitespace">
      <summary vsli:raw="Returns a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; should be serialized using a mode that  trims surrounding whitespace.">傳回值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否應使用修剪前後空白字元的模式進行序列化。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; should be serialized in a mode that trims surrounding whitespace; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Xaml.XamlType" /> 應以修剪前後空白字元的模式進行序列化則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupTypeConverter">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; that has a &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; constraint, which represents type-conversion behavior for values of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">傳回具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 條件約束的 <see cref="T:System.ComponentModel.TypeConverter" />，這個條件約束表示此 <see cref="T:System.Xaml.XamlType" /> 之值的型別轉換行為。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; with &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; constraint that represents type-conversion behavior for values of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 條件約束的 <see cref="T:System.ComponentModel.TypeConverter" /> (這個條件約束表示此 <see cref="T:System.Xaml.XamlType" /> 之值的型別轉換行為)，否則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupUnderlyingType">
      <summary vsli:raw="Returns the CLR &lt;see cref=&quot;T:System.Type&quot; /&gt; that underlies this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">傳回做為此 <see cref="T:System.Type" /> 之基礎的 CLR <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="The CLR &lt;see cref=&quot;T:System.Type&quot; /&gt; that underlies this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">做為此 <see cref="T:System.Type" /> 之基礎的 CLR <see cref="T:System.Xaml.XamlType" />，否則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupUsableDuringInitialization">
      <summary vsli:raw="Returns a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; is built top-down during XAML initialization.">傳回值，這個值表示在 XAML 初始化期間是否由上往下建立這個 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; is built top-down during XAML initialization; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在 XAML 初始化期間由上往下建立這個 <see cref="T:System.Xaml.XamlType" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupValueSerializer">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; that has a &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; constraint, which represents value serialization behavior for values of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">傳回具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 條件約束的 <see cref="T:System.Windows.Markup.ValueSerializer" />，這個條件約束表示此 <see cref="T:System.Xaml.XamlType" /> 之值的值序列化行為。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; with &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; constraint that represents value serialization behavior for values of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 條件約束的 <see cref="T:System.Windows.Markup.ValueSerializer" /> (這個條件約束表示此 <see cref="T:System.Xaml.XamlType" /> 之值的值序列化行為)，否則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.MarkupExtensionReturnType">
      <summary vsli:raw="Gets a value that provides the type information for the returned &lt;see langword=&quot;ProvideValue&quot; /&gt; of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;, if it represents a markup extension.">取得值，這個值提供此 <see cref="T:System.Xaml.XamlType" /> (如果表示標記延伸的話) 傳回之 <see langword="ProvideValue" /> 的型別資訊。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; object for the return type for markup extension usage; otherwise, &lt;see langword=&quot;null&quot; /&gt;, if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; does not represent a markup extension.">標記延伸使用方式之傳回型別的 <see cref="T:System.Xaml.XamlType" /> 物件，如果這個 <see cref="T:System.Xaml.XamlType" /> 不表示標記延伸，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.Name">
      <summary vsli:raw="Gets the string name of the type that this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents.">取得這個 <see cref="T:System.Xaml.XamlType" /> 表示之型別的字串名稱。</summary>
      <returns vsli:raw="The string name of this XAML type.">這個 XAML 型別的字串名稱。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.op_Equality(System.Xaml.XamlType,System.Xaml.XamlType)">
      <summary vsli:raw="Determines whether two specified &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; objects have the same value.">判斷兩個指定的 <see cref="T:System.Xaml.XamlType" /> 物件是否具有相同的值。</summary>
      <param name="xamlType1" vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlType" /> 或 <see langword="null" />。</param>
      <param name="xamlType2" vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlType" /> 或 <see langword="null" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of &lt;paramref name=&quot;xamlType1&quot; /&gt; is the same as the value of &lt;paramref name=&quot;xamlType2&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 的值與 <paramref name="xamlType1" /> 的值相同，則為 <paramref name="xamlType2" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.op_Inequality(System.Xaml.XamlType,System.Xaml.XamlType)">
      <summary vsli:raw="Determines whether two specified &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; objects have different values.">判斷兩個指定的 <see cref="T:System.Xaml.XamlType" /> 物件是否具有不同的值。</summary>
      <param name="xamlType1" vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlType" /> 或 <see langword="null" />。</param>
      <param name="xamlType2" vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlType" /> 或 <see langword="null" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of &lt;paramref name=&quot;xamlType1&quot; /&gt; is different from the value of &lt;paramref name=&quot;xamlType2&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="xamlType1" /> 的值與 <paramref name="xamlType2" /> 的值不同，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.PreferredXamlNamespace">
      <summary vsli:raw="Gets the single XAML namespace that is the primary XAML namespace for this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">取得單一 XAML 命名空間，這是此 <see cref="T:System.Xaml.XamlType" /> 的主要 XAML 命名空間。</summary>
      <returns vsli:raw="The identifier, as a string, of the primary XAML namespace for this XAML type.">這個 XAML 型別之主要 XAML 命名空間的識別項 (字串形式)。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.SchemaContext">
      <summary vsli:raw="Gets the active &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt; for processing this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">取得處理這個 <see cref="T:System.Xaml.XamlSchemaContext" /> 的作用中 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="The active &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt; for processing this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">用於處理這個 <see cref="T:System.Xaml.XamlSchemaContext" /> 的作用中 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.ToString">
      <summary vsli:raw="Returns a string representation of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">傳回這個 <see cref="T:System.Xaml.XamlType" /> 的字串表示。</summary>
      <returns vsli:raw="A string representation of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">這個 <see cref="T:System.Xaml.XamlType" /> 的字串表示。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.TrimSurroundingWhitespace">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; has whitespace handling behavior for serialization that trims the surrounding whitespace in its content.">取得值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否有序列化的空白字元處理行為會修剪其內容中的前後空白字元。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a type that uses whitespace trimming; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個 <see cref="T:System.Xaml.XamlType" /> 表示使用空白修剪的型別，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.TypeArguments">
      <summary vsli:raw="Gets a list of type arguments for cases where this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a generic.">當這個 <see cref="T:System.Xaml.XamlType" /> 表示泛型時，取得型別引數的清單。</summary>
      <returns vsli:raw="A list of type argument types; otherwise, &lt;see langword=&quot;null&quot; /&gt;, if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; does not represent a generic.">型別引數型別的清單，如果這個 <see cref="T:System.Xaml.XamlType" /> 不表示泛型，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.TypeConverter">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; with &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; constraint that represents type conversion behavior for values of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">取得具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 條件約束的 <see cref="T:System.ComponentModel.TypeConverter" />，這個條件約束表示此 <see cref="T:System.Xaml.XamlType" /> 之值的型別轉換行為。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; with &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; constraint that represents type conversion behavior for values of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 條件約束的 <see cref="T:System.ComponentModel.TypeConverter" />，這個條件約束表示此 <see cref="T:System.Xaml.XamlType" /> 之值的型別轉換行為。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.UnderlyingType">
      <summary vsli:raw="Gets the CLR &lt;see cref=&quot;T:System.Type&quot; /&gt; that underlies this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">取得做為此 <see cref="T:System.Type" /> 之基礎的 CLR <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="The CLR &lt;see cref=&quot;T:System.Type&quot; /&gt; that underlies this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">做為此 <see cref="T:System.Type" /> 之基礎的 CLR <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.ValueSerializer">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; with &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; constraint that represents value serialization behavior for values of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">取得具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 條件約束的 <see cref="T:System.Windows.Markup.ValueSerializer" />，這個條件約束表示此 <see cref="T:System.Xaml.XamlType" /> 之值的值序列化行為。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; with &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; constraint that represents value serialization behavior for values of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 條件約束的 <see cref="T:System.Windows.Markup.ValueSerializer" /> (這個條件約束表示此 <see cref="T:System.Xaml.XamlType" /> 之值的值序列化行為)，否則為 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xaml.XamlWriter">
      <summary vsli:raw="Provides default implementation and base class definitions for a XAML writer. This is not a working default XAML writer; you must either derive from &lt;see cref=&quot;T:System.Xaml.XamlWriter&quot; /&gt; and implement its abstract members, or use an existing &lt;see cref=&quot;T:System.Xaml.XamlWriter&quot; /&gt; derived class.">提供 XAML 寫入器的預設實作和基底類別定義。 這不是可直接使用的預設 XAML 寫入器；您必須衍生自 <see cref="T:System.Xaml.XamlWriter" /> 並實作其抽象成員，或使用現有 <see cref="T:System.Xaml.XamlWriter" /> 衍生類別。</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlWriter&quot; /&gt; class.">初始化 <see cref="T:System.Xaml.XamlWriter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.Close">
      <summary vsli:raw="Closes the XAML writer object.">關閉 XAML 寫入器物件。</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.Xaml.XamlWriter&quot; /&gt; and optionally releases the managed resources.">釋放 <see cref="T:System.Xaml.XamlWriter" /> 所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release the managed resources; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示釋放 Managed 資源，否則為 <see langword="false" />。</param>
    </member>
    <member name="P:System.Xaml.XamlWriter.IsDisposed">
      <summary vsli:raw="Gets whether &lt;see cref=&quot;M:System.Xaml.XamlWriter.Dispose(System.Boolean)&quot; /&gt; has been called.">取得是否已呼叫 <see cref="M:System.Xaml.XamlWriter.Dispose(System.Boolean)" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.Xaml.XamlWriter.Dispose(System.Boolean)&quot; /&gt; has been called; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已呼叫 <see cref="M:System.Xaml.XamlWriter.Dispose(System.Boolean)" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlWriter.SchemaContext">
      <summary vsli:raw="When implemented in a derived class, gets the active XAML schema context.">在衍生類別中實作時，取得作用中 XAML 結構描述內容。</summary>
      <returns vsli:raw="The active XAML schema context.">作用中 XAML 結構描述內容。</returns>
    </member>
    <member name="M:System.Xaml.XamlWriter.System#IDisposable#Dispose">
      <summary vsli:raw="See &lt;see cref=&quot;M:System.IDisposable.Dispose&quot; /&gt;.">請參閱 <see cref="M:System.IDisposable.Dispose" />。</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteEndMember">
      <summary vsli:raw="When implemented in a derived class, produces the representation of an end member node.">在衍生類別中實作時，產生結束成員節點的表示。</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteEndObject">
      <summary vsli:raw="When implemented in a derived class, produces the representation of an end object node.">在衍生類別中實作時，產生結束物件節點的表示。</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteGetObject">
      <summary vsli:raw="When implemented in a derived class, produces an object for cases where the object is a default or implicit value of the property being set, instead of being specified as a discrete object value in the input XAML node set.">在衍生類別中實作時，針對物件是所設定屬性的預設值或隱含值 (而非在輸入 XAML 節點集內特地以物件值指定) 的情況，產生物件。</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
      <summary vsli:raw="When implemented in a derived class, writes a XAML namespace declaration node.">在衍生類別中實作時，寫入 XAML 命名空間宣告節點。</summary>
      <param name="namespaceDeclaration" vsli:raw="The namespace declaration to write.">要寫入的命名空間宣告。</param>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteNode(System.Xaml.XamlReader)">
      <summary vsli:raw="Performs switching based on node type from the XAML reader (&lt;see cref=&quot;P:System.Xaml.XamlReader.NodeType&quot; /&gt;) and calls the relevant &lt;see langword=&quot;Write&quot; /&gt; method for the writer implementation.">根據來自 XAML 讀取器的節點型別 (<see cref="P:System.Xaml.XamlReader.NodeType" />) 執行切換，並呼叫寫入器實作的相關 <see langword="Write" /> 方法。</summary>
      <param name="reader" vsli:raw="The reader to use for node determination.">用於節點判斷的讀取器。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;reader&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="reader" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotImplementedException" vsli:raw="The default implementation encountered a &lt;see cref=&quot;T:System.Xaml.XamlNodeType&quot; /&gt; that is not in the default enumeration.">預設實作遇到不在預設列舉中的 <see cref="T:System.Xaml.XamlNodeType" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteStartMember(System.Xaml.XamlMember)">
      <summary vsli:raw="When implemented in a derived class, writes the representation of a start member node.">在衍生類別中實作時，寫入開始成員節點的表示。</summary>
      <param name="xamlMember" vsli:raw="The member node to write.">要寫入的成員節點。</param>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteStartObject(System.Xaml.XamlType)">
      <summary vsli:raw="When implemented in a derived class, writes the representation of a start object node.">在衍生類別中實作時，寫入開始物件節點的表示。</summary>
      <param name="type" vsli:raw="The XAML type of the object to write.">要寫入之物件的 XAML 型別。</param>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteValue(System.Object)">
      <summary vsli:raw="When implemented in a derived class, writes a value node.">在衍生類別中實作時，寫入值節點。</summary>
      <param name="value" vsli:raw="The value to write.">要寫入的值。</param>
    </member>
    <member name="T:System.Xaml.XamlWriterSettings">
      <summary vsli:raw="Provides initialization settings for a &lt;see cref=&quot;T:System.Xaml.XamlWriter&quot; /&gt; implementation.">提供 <see cref="T:System.Xaml.XamlWriter" /> 實作的初始化設定。</summary>
    </member>
    <member name="M:System.Xaml.XamlWriterSettings.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlWriterSettings&quot; /&gt; class.">初始化 <see cref="T:System.Xaml.XamlWriterSettings" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xaml.XamlWriterSettings.#ctor(System.Xaml.XamlWriterSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlWriterSettings&quot; /&gt; class using another existing settings instance.">使用另一個現有的設定執行個體，初始化 <see cref="T:System.Xaml.XamlWriterSettings" /> 類別的新執行個體。</summary>
      <param name="settings" vsli:raw="An existing &lt;see cref=&quot;T:System.Xaml.XamlWriterSettings&quot; /&gt; object.">現有的 <see cref="T:System.Xaml.XamlWriterSettings" /> 物件。</param>
    </member>
    <member name="T:System.Xaml.XamlXmlReader">
      <summary vsli:raw="Processes XAML markup from XML files by using an &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; intermediary, and produces a XAML node stream.">處理 XML 檔案中的 XAML 標記 (使用 <see cref="T:System.Xml.XmlReader" /> 媒介)，並產生 XAML 節點資料流。</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.Stream)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; class, based on a stream.">根據資料流，初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 類別的新執行個體。</summary>
      <param name="stream" vsli:raw="The initial stream to load into the reader.">要載入至讀取器的起始資料流。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;stream&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="stream" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.Stream,System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; class, based on a stream, and using a supplied XAML schema context.">根據資料流並使用提供的 XAML 結構描述內容，初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 類別的新執行個體。</summary>
      <param name="stream" vsli:raw="The initial stream to load into the reader.">要載入至讀取器的起始資料流。</param>
      <param name="schemaContext" vsli:raw="The XAML schema context for XAML processing.">用於 XAML 處理的 XAML 結構描述內容。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;stream&quot; /&gt; or &lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="stream" /> 或 <paramref name="schemaContext" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.Stream,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlReaderSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; class, based on a stream, with a supplied XAML schema context and XAML-specific settings.">根據資料流，並使用提供的 XAML 結構描述內容和 XAML 特定設定，初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 類別的新執行個體。</summary>
      <param name="stream" vsli:raw="The initial stream to load into the reader.">要載入至讀取器的起始資料流。</param>
      <param name="schemaContext" vsli:raw="The XAML schema context for XAML processing.">用於 XAML 處理的 XAML 結構描述內容。</param>
      <param name="settings" vsli:raw="The specific reader settings.">特定的讀取器設定。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;stream&quot; /&gt; or &lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="stream" /> 或 <paramref name="schemaContext" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.Stream,System.Xaml.XamlXmlReaderSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; class, based on a stream, with XAML-specific settings.">根據資料流和 XAML 特定設定，初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 類別的新執行個體。</summary>
      <param name="stream" vsli:raw="The initial stream to load into the reader.">要載入至讀取器的起始資料流。</param>
      <param name="settings" vsli:raw="The specific reader settings.">特定的讀取器設定。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;stream&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="stream" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.TextReader)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; class, based on a &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt;.">根據 <see cref="T:System.Xaml.XamlXmlReader" />，初始化 <see cref="T:System.IO.TextReader" /> 類別的新執行個體。</summary>
      <param name="textReader" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; to use for initialization.">用來進行初始設定的 <see cref="T:System.IO.TextReader" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;textReader&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="textReader" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.TextReader,System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; class, based on a &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt;, with a supplied schema context and XAML-specific settings.">根據 <see cref="T:System.Xaml.XamlXmlReader" /> 以及提供的結構描述內容和 XAML 特定設定，初始化 <see cref="T:System.IO.TextReader" /> 類別的新執行個體。</summary>
      <param name="textReader" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; to use for initialization.">用來進行初始設定的 <see cref="T:System.IO.TextReader" />。</param>
      <param name="schemaContext" vsli:raw="The XAML schema context for XAML processing.">用於 XAML 處理的 XAML 結構描述內容。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;textReader&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="textReader" /> 為 <see langword="null" />。
-或-
<paramref name="schemaContext" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.TextReader,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlReaderSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; class, based on a &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt;, and using a supplied schema context and XAML-specific settings.">根據 <see cref="T:System.Xaml.XamlXmlReader" /> 並使用提供的結構描述內容和 XAML 特定設定，初始化 <see cref="T:System.IO.TextReader" /> 類別的新執行個體。</summary>
      <param name="textReader" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; to use for initialization.">用來進行初始設定的 <see cref="T:System.IO.TextReader" />。</param>
      <param name="schemaContext" vsli:raw="The XAML schema context for XAML processing.">用於 XAML 處理的 XAML 結構描述內容。</param>
      <param name="settings" vsli:raw="The specific reader settings.">特定的讀取器設定。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;textReader&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="textReader" /> 為 <see langword="null" />。
-或-
<paramref name="schemaContext" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.TextReader,System.Xaml.XamlXmlReaderSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; class, based on a &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt;, and using XAML-specific settings.">根據 <see cref="T:System.Xaml.XamlXmlReader" /> 並使用 XAML 特定設定，初始化 <see cref="T:System.IO.TextReader" /> 類別的新執行個體。</summary>
      <param name="textReader" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; to use for initialization.">用來進行初始設定的 <see cref="T:System.IO.TextReader" />。</param>
      <param name="settings" vsli:raw="The specific reader settings.">特定的讀取器設定。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;textReader&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="textReader" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; class, based on a file name of a file to load into a default XML reader.">根據要載入至預設 XML 讀取器之檔案的檔案名稱，初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 類別的新執行個體。</summary>
      <param name="fileName" vsli:raw="The name of the XML file to load.">要載入之 XML 檔案的名稱。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;fileName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="fileName" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.String,System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; class, based on the file name of a file to load into a default XML reader, with a supplied XAML schema context.">根據要載入至預設 XML 讀取器之檔案的檔案名稱，並使用提供的 XAML 結構描述內容，初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 類別的新執行個體。</summary>
      <param name="fileName" vsli:raw="The name of the file to load.">要載入的檔案名稱。</param>
      <param name="schemaContext" vsli:raw="The XAML schema context for XAML processing.">用於 XAML 處理的 XAML 結構描述內容。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;fileName&quot; /&gt; or &lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="fileName" /> 或 <paramref name="schemaContext" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.String,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlReaderSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; class, based on the file name of a file to load into a default XML reader, and using a supplied XAML schema context and XAML-specific reader settings.">根據要載入至預設 XML 讀取器之檔案的檔案名稱，並使用提供的 XAML 結構描述內容和 XAML 特定設定，初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 類別的新執行個體。</summary>
      <param name="fileName" vsli:raw="The name of the XML file to load.">要載入之 XML 檔案的名稱。</param>
      <param name="schemaContext" vsli:raw="The XAML schema context for XAML processing.">用於 XAML 處理的 XAML 結構描述內容。</param>
      <param name="settings" vsli:raw="The specific reader settings.">特定的讀取器設定。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;fileName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="fileName" /> 為 <see langword="null" />。
-或-
<paramref name="schemaContext" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.String,System.Xaml.XamlXmlReaderSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; class, based on the file name of a file to load into a default XML reader, and using XAML-specific reader settings.">根據要載入至預設 XML 讀取器之檔案的檔案名稱，並使用 XAML 特定讀取器設定，初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 類別的新執行個體。</summary>
      <param name="fileName" vsli:raw="The name of the XML file to load.">要載入之 XML 檔案的名稱。</param>
      <param name="settings" vsli:raw="The specific reader settings.">特定的讀取器設定。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;fileName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="fileName" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.Xml.XmlReader)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; class using the provided &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt;.">使用所提供的 <see cref="T:System.Xml.XmlReader" />，初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 類別的新執行個體。</summary>
      <param name="xmlReader" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; to use as the intermediary XML processor.">用來做為媒介 XML 處理器的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xmlReader&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xmlReader" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.Xml.XmlReader,System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; class using the provided &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; and schema context.">使用提供的 <see cref="T:System.Xaml.XamlXmlReader" /> 和結構描述內容，初始化 <see cref="T:System.Xml.XmlReader" /> 類別的新執行個體。</summary>
      <param name="xmlReader" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; to use as the intermediary XML processor.">用來做為媒介 XML 處理器的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="schemaContext" vsli:raw="The XAML schema context for XAML processing.">用於 XAML 處理的 XAML 結構描述內容。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xmlReader&quot; /&gt; or &lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xmlReader" /> 或 <paramref name="schemaContext" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.Xml.XmlReader,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlReaderSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; class using the provided &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt;, schema context, and reader settings.">使用提供的 <see cref="T:System.Xaml.XamlXmlReader" />、結構描述內容和讀取器設定，初始化 <see cref="T:System.Xml.XmlReader" /> 類別的新執行個體。</summary>
      <param name="xmlReader" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; to use as the intermediary XML processor.">用來做為媒介 XML 處理器的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="schemaContext" vsli:raw="The XAML schema context for XAML processing.">用於 XAML 處理的 XAML 結構描述內容。</param>
      <param name="settings" vsli:raw="The specific XAML reader settings.">特定的 XAML 讀取器設定。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xmlReader&quot; /&gt; or &lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xmlReader" /> 或 <paramref name="schemaContext" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.Xml.XmlReader,System.Xaml.XamlXmlReaderSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; class, using the provided &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; and reader settings.">使用提供的 <see cref="T:System.Xaml.XamlXmlReader" /> 和讀取器設定，初始化 <see cref="T:System.Xml.XmlReader" /> 類別的新執行個體。</summary>
      <param name="xmlReader" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; to use as the intermediary XML processor.">用來做為媒介 XML 處理器的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="settings" vsli:raw="The specific XAML reader settings.">特定的 XAML 讀取器設定。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xmlReader&quot; /&gt; or &lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xmlReader" /> 或 <paramref name="schemaContext" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.HasLineInfo">
      <summary vsli:raw="Gets a value that specifies whether line information is available.">取得值，這個值指定行資訊是否可供使用。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if line information is available; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果有可用的行資訊則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.IsEof">
      <summary vsli:raw="Gets a value that reports whether the reader position in the XAML node stream is at end-of-file.">取得值，這個值會報告讀取器在 XAML 節點資料流中是否位於檔案結尾。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the position is at the conceptual end-of-file in the node stream; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果位置是在節點資料流中的概念檔案結尾則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.LineNumber">
      <summary vsli:raw="Gets the line number to report.">取得要報告的行號。</summary>
      <returns vsli:raw="The line number to report.">要報告的行號。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.LinePosition">
      <summary vsli:raw="Gets the line position to report.">取得要報告的行位置。</summary>
      <returns vsli:raw="The line position to report.">要報告的行位置。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.Member">
      <summary vsli:raw="Gets the current member at the reader position, if the current reader position is on a &lt;see cref=&quot;F:System.Xaml.XamlNodeType.StartMember&quot; /&gt;.">如果目前讀取器位置在 <see cref="F:System.Xaml.XamlNodeType.StartMember" /> 上，則取得讀取器位置上的目前成員。</summary>
      <returns vsli:raw="The current member; or &lt;see langword=&quot;null&quot; /&gt;, if the current reader position is not on a member.">目前的成員，如果目前讀取器位置不在成員上，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.Namespace">
      <summary vsli:raw="Gets the XAML namespace from the current node.">從目前的節點取得 XAML 命名空間。</summary>
      <returns vsli:raw="The XAML namespace from the current node, if it is available; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">目前節點中的 XAML 命名空間 (如果有的話)，否則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.NodeType">
      <summary vsli:raw="Gets the type of the current node.">取得目前節點的類型。</summary>
      <returns vsli:raw="A value of the &lt;see cref=&quot;T:System.Xaml.XamlNodeType&quot; /&gt; enumeration.">
        <see cref="T:System.Xaml.XamlNodeType" /> 列舉的值。</returns>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.Read">
      <summary vsli:raw="Provides the next XAML node from the loaded source, if a XAML node is available.">從載入的來源中提供下一個 XAML 節點 (如果有 XAML 節點的話)。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a node is available; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果有節點則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.SchemaContext">
      <summary vsli:raw="Gets an object that provides schema information for the information set.">取得物件，這個物件會為資訊集提供結構描述資訊。</summary>
      <returns vsli:raw="An object that provides schema information for the information set.">物件，會為資訊集提供結構描述資訊。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.Type">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the current node.">取得目前節點的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the current node; or &lt;see langword=&quot;null&quot; /&gt;, if the position is not on an object.">目前節點的 <see cref="T:System.Xaml.XamlType" />，如果位置不在物件上，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.Value">
      <summary vsli:raw="Gets the value of the current node.">取得目前節點的值。</summary>
      <returns vsli:raw="The value of the current node; or &lt;see langword=&quot;null&quot; /&gt;, if the position is not on a &lt;see cref=&quot;F:System.Xaml.XamlNodeType.Value&quot; /&gt; node type.">目前節點的值，如果位置不在 <see cref="F:System.Xaml.XamlNodeType.Value" /> 節點型別上，則為 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xaml.XamlXmlReaderSettings">
      <summary vsli:raw="Specifies processing rules or option settings for the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; XAML reader implementation.">指定 <see cref="T:System.Xaml.XamlXmlReader" /> XAML 讀取器實作的處理規則或選項設定。</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlReaderSettings.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReaderSettings&quot; /&gt; class.">初始化 <see cref="T:System.Xaml.XamlXmlReaderSettings" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlReaderSettings.#ctor(System.Xaml.XamlXmlReaderSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReaderSettings&quot; /&gt; class by copying settings from an existing &lt;see cref=&quot;T:System.Xaml.XamlXmlReaderSettings&quot; /&gt; object.">藉由從現有的 <see cref="T:System.Xaml.XamlXmlReaderSettings" /> 物件中複製設定，初始化 <see cref="T:System.Xaml.XamlXmlReaderSettings" /> 類別的新執行個體。</summary>
      <param name="settings" vsli:raw="The existing &lt;see cref=&quot;T:System.Xaml.XamlXmlReaderSettings&quot; /&gt; object to copy.">要複製的現有 <see cref="T:System.Xaml.XamlXmlReaderSettings" /> 物件。</param>
    </member>
    <member name="P:System.Xaml.XamlXmlReaderSettings.CloseInput">
      <summary vsli:raw="Gets or sets a value that indicates whether the underlying stream or text reader should be closed when the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; is closed.">取得或設定值，這個值表示是否應在關閉 <see cref="T:System.Xaml.XamlXmlReader" /> 時關閉基礎資料流或文字讀取器。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the underlying stream or reader should be closed when the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; is closed; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">如果關閉 <see cref="T:System.Xaml.XamlXmlReader" /> 時應該關閉基礎資料流或讀取器，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReaderSettings.SkipXmlCompatibilityProcessing">
      <summary vsli:raw="Gets or sets a value that determines whether the reader should differ from the default &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; behavior of how markup compatibility content is processed.">取得或設定值，這個值決定讀取器是否應該在處理標記相容性內容的方式上與預設的 <see cref="T:System.Xaml.XamlXmlReader" /> 行為有所不同。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the initiating reader is directly used, which means that XML compatibility markup is processed as part of the main stream and compatibility is not considered. &lt;see langword=&quot;false&quot; /&gt; if the default behavior is used, which processes XML compatibility separately. The default is &lt;see langword=&quot;false&quot; /&gt;.">如果直接使用啟始讀取器，也就是直接在主要資料流中處理 XML 相容性標記而不考慮相容性，則為 <see langword="true" />。 如果使用預設行為 (即個別處理 XML 相容性)，則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReaderSettings.XmlLang">
      <summary vsli:raw="Gets or sets the language setting value that the reader may promote to writers that write &lt;see langword=&quot;xml:lang&quot; /&gt; attributes in nodes.">取得或設定語言設定值，這個值表示讀取器可能提升為會在節點中寫入 <see langword="xml:lang" /> 屬性的寫入器。</summary>
      <returns vsli:raw="The string to use for possible &lt;see langword=&quot;xml:lang&quot; /&gt; output that is based on the reader.">用於可能根據讀取器輸出 <see langword="xml:lang" /> 的字串。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReaderSettings.XmlSpacePreserve">
      <summary vsli:raw="Gets or sets a value that determines whether the XAML reader instructs any XAML writers to write &lt;see langword=&quot;xml:space&quot; /&gt; attributes in nodes. If that behavior is desired, this information is passed through shared XAML schema context.">取得或設定值，這個值決定 XAML 讀取器是否指示任何 XAML 寫入器在節點中寫入 <see langword="xml:space" /> 屬性。 如果這是預期的行為，則會透過共用 XAML 結構描述內容傳遞此資訊。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if writers that are processing the XAML node stream can write &lt;c&gt;xml:space=&quot;preserve&quot;&lt;/c&gt; in output; &lt;see langword=&quot;false&quot; /&gt; if &lt;see langword=&quot;xml:space&quot; /&gt; attributes cannot be written in nodes.">
        <see langword="true" />如果處理 XAML 節點資料流程的寫入器可以在輸出中寫入<c>xml： space = "preserve"</c> ;如果無法在節點中寫入屬性，則<see langword="xml:space" />為。 <see langword="false" /></returns>
    </member>
    <member name="T:System.Xaml.XamlXmlWriter">
      <summary vsli:raw="Uses a &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; or &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; support class to write a XAML node stream to a text or markup serialized form.">使用 <see cref="T:System.IO.TextWriter" /> 或 <see cref="T:System.Xml.XmlWriter" /> 支援類別，將 XAML 節點資料流寫入成文字或標記序列化形式。</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.IO.Stream,System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; class from a stream.">從資料流初始化 <see cref="T:System.Xaml.XamlXmlWriter" /> 類別的新執行個體。</summary>
      <param name="stream" vsli:raw="The stream to write.">要寫入的資料流。</param>
      <param name="schemaContext" vsli:raw="The XAML schema context for the XAML writer.">XAML 寫入器的 XAML 結構描述內容。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;stream&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="stream" /> 為 <see langword="null" />。
-或-
<paramref name="schemaContext" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.IO.Stream,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlWriterSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; class from a stream using a writer settings object.">使用寫入器設定物件，從資料流初始化 <see cref="T:System.Xaml.XamlXmlWriter" /> 類別的新執行個體。</summary>
      <param name="stream" vsli:raw="The stream to write.">要寫入的資料流。</param>
      <param name="schemaContext" vsli:raw="The XAML schema context for the XAML writer.">XAML 寫入器的 XAML 結構描述內容。</param>
      <param name="settings" vsli:raw="An instance of &lt;see cref=&quot;T:System.Xaml.XamlXmlWriterSettings&quot; /&gt;, which typically has specific non-default settings.">
        <see cref="T:System.Xaml.XamlXmlWriterSettings" /> 的執行個體，通常具有特定非預設設定。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;stream&quot; /&gt; or &lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;">
        <paramref name="stream" /> 或 <paramref name="schemaContext" /> 是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.IO.TextWriter,System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; class from a &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; basis.">從 <see cref="T:System.Xaml.XamlXmlWriter" /> 基準初始化 <see cref="T:System.IO.TextWriter" /> 類別的新執行個體。</summary>
      <param name="textWriter" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; that writes the output.">寫入輸出的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="schemaContext" vsli:raw="The XAML schema context for the XAML writer.">XAML 寫入器的 XAML 結構描述內容。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;textWriter&quot; /&gt; or &lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="textWriter" /> 或 <paramref name="schemaContext" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.IO.TextWriter,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlWriterSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; class from a &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; basis using a settings object.">使用設定物件，從 <see cref="T:System.Xaml.XamlXmlWriter" /> 基準初始化 <see cref="T:System.IO.TextWriter" /> 類別的新執行個體。</summary>
      <param name="textWriter" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; that writes the output.">寫入輸出的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="schemaContext" vsli:raw="The XAML schema context for the XAML writer.">XAML 寫入器的 XAML 結構描述內容。</param>
      <param name="settings" vsli:raw="An instance of &lt;see cref=&quot;T:System.Xaml.XamlXmlWriterSettings&quot; /&gt;, which typically has specific non-default settings.">
        <see cref="T:System.Xaml.XamlXmlWriterSettings" /> 的執行個體，通常具有特定非預設設定。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;textWriter&quot; /&gt; or &lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="textWriter" /> 或 <paramref name="schemaContext" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.Xml.XmlWriter,System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; class from a &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; basis.">從 <see cref="T:System.Xaml.XamlXmlWriter" /> 基準初始化 <see cref="T:System.Xml.XmlWriter" /> 類別的新執行個體。</summary>
      <param name="xmlWriter" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; that writes the output.">寫入輸出的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="schemaContext" vsli:raw="The XAML schema context for the XAML writer.">XAML 寫入器的 XAML 結構描述內容。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xmlWriter&quot; /&gt; or &lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xmlWriter" /> 或 <paramref name="schemaContext" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.Xml.XmlWriter,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlWriterSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; class from a &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; basis using a settings object.">使用設定物件，從 <see cref="T:System.Xaml.XamlXmlWriter" /> 基準初始化 <see cref="T:System.Xml.XmlWriter" /> 類別的新執行個體。</summary>
      <param name="xmlWriter" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; that writes the output.">寫入輸出的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="schemaContext" vsli:raw="The XAML schema context for the XAML writer.">XAML 寫入器的 XAML 結構描述內容。</param>
      <param name="settings" vsli:raw="An instance of &lt;see cref=&quot;T:System.Xaml.XamlXmlWriterSettings&quot; /&gt;, which typically has specific non-default settings.">
        <see cref="T:System.Xaml.XamlXmlWriterSettings" /> 的執行個體，通常具有特定非預設設定。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xmlWriter&quot; /&gt; or &lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xmlWriter" /> 或 <paramref name="schemaContext" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; and optionally releases the managed resources.">釋放 <see cref="T:System.Xaml.XamlXmlWriter" /> 所使用的 Unmanaged 資源，並選擇性釋放 Managed 資源。</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release the unmanaged resources; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示釋放 Unmanaged 資源，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.Flush">
      <summary vsli:raw="Calls the &lt;see langword=&quot;Flush&quot; /&gt; method of the underlying &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; or &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;, which writes anything that is currently in the buffer, and then closes the writer.">呼叫基礎 <see cref="T:System.Xml.XmlWriter" /> 或 <see cref="T:System.IO.TextWriter" /> 的 <see langword="Flush" /> 方法 (這個方法會寫入目前在緩衝區的任何資料)，然後關閉寫入器。</summary>
    </member>
    <member name="P:System.Xaml.XamlXmlWriter.SchemaContext">
      <summary vsli:raw="Gets the XAML schema context that this &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; uses for processing.">取得這個 <see cref="T:System.Xaml.XamlXmlWriter" /> 處理時使用的 XAML 結構描述內容。</summary>
      <returns vsli:raw="The XAML schema context that this &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; uses for XAML processing.">這個 <see cref="T:System.Xaml.XamlXmlWriter" /> 處理 XAML 時使用的 XAML 結構描述內容。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlWriter.Settings">
      <summary vsli:raw="Gets the writer settings that this &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; uses for XAML processing.">取得這個 <see cref="T:System.Xaml.XamlXmlWriter" /> 處理 XAML 時使用的寫入器設定。</summary>
      <returns vsli:raw="The writer settings that this &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; uses for XAML processing.">這個 <see cref="T:System.Xaml.XamlXmlWriter" /> 處理 XAML 時使用的寫入器設定。</returns>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteEndMember">
      <summary vsli:raw="Writes a XAML end member node to the underlying &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; or &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;. Throws an exception if the current position of the XAML node stream is not within a member, or if the internal writer state does not support writing to an end member.">將 XAML 結束成員節點寫入至基礎 <see cref="T:System.Xml.XmlWriter" /> 或 <see cref="T:System.IO.TextWriter" />。 如果 XAML 節點資料流目前的位置不在成員內，或內部寫入器狀態不支援寫入至結束成員，則會擲回例外狀況。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current position of the XAML node stream is not within a member.">XAML 節點資料流的目前位置不在成員之內。</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException" vsli:raw="The current writer state does not support writing an end member.">目前的寫入器狀態並不支援寫入結尾成員。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteEndObject">
      <summary vsli:raw="Writes a XAML end object node to the underlying &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; or &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;. Throws an exception if the current position of the XAML node stream that is being processed is incompatible with writing an end object.">將 XAML 結束物件節點寫入至基礎 <see cref="T:System.Xml.XmlWriter" /> 或 <see cref="T:System.IO.TextWriter" />。 如果處理中 XAML 節點資料流目前的位置不適合寫入結束物件，則會擲回例外狀況。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current position of the XAML node stream is not in a scope where an end member can be written.">XAML 節點資料流目前的位置不在可寫入結尾成員的範圍中。</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException" vsli:raw="The current writer state does not support writing an end object.">目前的寫入器狀態並不支援寫入結尾物件。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteGetObject">
      <summary vsli:raw="Writes an object for cases where the specified object is a default or implicit value of the property that is being written, instead of being specified as an object value in the input XAML node set.">當指定之物件為寫入中屬性的預設值或隱含值 (而非指定為在輸入 XAML 節點集中的物件值) 時，寫入物件。</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
      <summary vsli:raw="Writes namespace information to the underlying &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; or &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;. May throw an exception for certain states; however, may instead defer writing the namespace information until the writer and the XAML node stream that is being processed reaches a position where a XAML namespace declaration can be inserted.">將命名空間資訊寫入至基礎 <see cref="T:System.Xml.XmlWriter" /> 或 <see cref="T:System.IO.TextWriter" />。 可能會針對特定狀態擲回例外狀況，但也可能會延後寫入命名空間資訊，直到寫入器及處理中 XAML 節點資料流到達可以插入 XAML 命名空間宣告的位置為止。</summary>
      <param name="namespaceDeclaration" vsli:raw="The XAML namespace declaration to write.">要寫入的 XAML 命名空間宣告。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;namespaceDeclaration&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="namespaceDeclaration" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;namespaceDeclaration&quot; /&gt; is not a valid XAML namespace declaration (has a null prefix or null identifier component).">
        <paramref name="namespaceDeclaration" /> 不是有效的 XAML 命名空間宣告 (具有 null 前置詞或 null 識別項元件)。</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException" vsli:raw="The current writer state does not support writing a XAML namespace declaration.">目前的寫入器狀態並不支援寫入 XAML 命名空間宣告。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteStartMember(System.Xaml.XamlMember)">
      <summary vsli:raw="Writes a XAML start member node to the underlying &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; or &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;. Throws an exception if the current position of the XAML node stream is within another member, or if it is not in a scope or writer state where a start member can be written.">將 XAML 開始成員節點寫入至基礎 <see cref="T:System.Xml.XmlWriter" /> 或 <see cref="T:System.IO.TextWriter" />。 如果 XAML 節點資料流目前的位置在另一個成員內，或是不在可寫入開始成員的範圍或寫入器狀態，則會擲回例外狀況。</summary>
      <param name="property" vsli:raw="The XAML member identifier for the member to write.">要寫入之成員的 XAML 成員識別項。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;property&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="property" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;property&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">
        <paramref name="property" /> 不是有效的 <see cref="T:System.Xaml.XamlMember" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current position of the XAML node stream is invalid for writing a start member.">XAML 節點資料流目前的位置不適用於寫入開始成員。</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException" vsli:raw="The writer state is not valid for writing a start member.  &#xA;  &#xA; -or-  &#xA;  &#xA; The XAML writer attempted to write a duplicate member. This exception may have a more precise inner exception.">寫入器狀態對於寫入開始成員無效。
-或-
XAML 寫入器嘗試寫入重複的成員。 這個例外狀況可能會有更精確的內部例外狀況。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteStartObject(System.Xaml.XamlType)">
      <summary vsli:raw="Writes a XAML start object node to the underlying &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; or &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;. Throws an exception if the current position of the XAML node stream is not in a scope where a start object can be written, or if the writer is not in a state that can write a start object.">將 XAML 開始物件節點寫入至基礎 <see cref="T:System.Xml.XmlWriter" /> 或 <see cref="T:System.IO.TextWriter" />。 如果 XAML 節點資料流目前的位置不在可寫入開始成員的範圍或狀態，或是寫入器不在可寫入開始物件的狀態，則會擲回例外狀況。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; (XAML type identifier) for the object to write.">要寫入之物件的 <see cref="T:System.Xaml.XamlType" /> (XAML 型別識別項)。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">
        <paramref name="type" /> 不是有效的 <see cref="T:System.Xaml.XamlType" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current position of the XAML node stream is not valid for writing a new start object.">XAML 節點資料流的目前位置對於寫入新的開始物件無效。</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException" vsli:raw="The state of the XAML writer is not valid for writing a new start object.">XAML 寫入器的狀態對於撰寫新的開始物件無效 。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteValue(System.Object)">
      <summary vsli:raw="Writes a XAML value node to the underlying &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; or &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;. Throws an exception if the current position of the XAML node stream is invalid for writing a value, or the writer is in a state where a value cannot be written.">將 XAML 值節點寫入至基礎 <see cref="T:System.Xml.XmlWriter" /> 或 <see cref="T:System.IO.TextWriter" />。 如果 XAML 節點資料流目前的位置不適合寫入值，或是寫入器處於無法寫入值的狀態，則會擲回例外狀況。</summary>
      <param name="value" vsli:raw="The value information to write.">要寫入的值資訊。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current position of the XAML node stream is not valid for writing a value.">XAML 節點資料流的目前位置對於寫入值無效。</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException" vsli:raw="The XAML writer state does not support the writing of a value node.">XAML 寫入器狀態並不支援寫入值節點。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; specifies a value that is not null or a string.">
        <paramref name="value" /> 指定非 null 或字串的値。</exception>
    </member>
    <member name="T:System.Xaml.XamlXmlWriterException">
      <summary vsli:raw="The exception that is thrown by certain &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; APIs.">由特定 <see cref="T:System.Xaml.XamlXmlWriter" /> API 所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlWriterException&quot; /&gt; class with a system-supplied message that describes the error.">以系統提供的錯誤說明訊息，初始化 <see cref="T:System.Xaml.XamlXmlWriterException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlWriterException&quot; /&gt; class with serialized data.">使用序列化資料，初始化 <see cref="T:System.Xaml.XamlXmlWriterException" /> 類別的新執行個體。</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">存放序列物件資料的物件。</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlWriterException&quot; /&gt; class with a specified message that describes the error.">使用指定的錯誤說明訊息，初始化 <see cref="T:System.Xaml.XamlXmlWriterException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.">說明例外狀況的訊息。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlWriterException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Xaml.XamlXmlWriterException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.">說明例外狀況的訊息。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
      <param name="innerException" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;innerException&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="T:System.Xaml.XamlXmlWriterSettings">
      <summary vsli:raw="Provides initialization settings for the &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; XAML writer implementation.">提供 <see cref="T:System.Xaml.XamlXmlWriter" /> XAML 寫入器實作的初始化設定。</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterSettings.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlWriterSettings&quot; /&gt; class.">初始化 <see cref="T:System.Xaml.XamlXmlWriterSettings" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xaml.XamlXmlWriterSettings.AssumeValidInput">
      <summary vsli:raw="Gets or sets a value that specifies whether the &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; should always assume valid XAML input for purposes of duplicate resolution or other error checking.">取得或設定值，這個值指定 <see cref="T:System.Xaml.XamlXmlWriter" /> 在解決重複項或檢查其他錯誤時，是否應該永遠假設 XAML 輸入有效。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; skips certain validation or error checks, such as throwing exceptions on duplicate members. &lt;see langword=&quot;false&quot; /&gt; if the &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; throws exceptions when invalid XAML is encountered. The default is &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="T:System.Xaml.XamlXmlWriter" /> 會略過特定的驗證或錯誤檢查 (例如在發現重複項時擲回例外狀況)，則為 <see langword="true" />。 如果 <see cref="T:System.Xaml.XamlXmlWriter" /> 會在發現無效的 XAML 時擲出例外狀況，則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlWriterSettings.CloseOutput">
      <summary vsli:raw="Gets or sets a value that specifies whether the &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; should close immediately on &lt;see langword=&quot;Dispose&quot; /&gt; or other operations, or whether the XAML writer should instead write the buffer output before closing. Use this setting with caution; closing immediately can result in invalid XAML that cannot be loaded again.">取得或設定值，這個值指定 <see cref="T:System.Xaml.XamlXmlWriter" /> 是否應該在 <see langword="Dispose" /> 或其他作業時立即關閉，或 XAML 寫入器是否應該在關閉之前寫入緩衝區。 請小心使用這個設定，立即關閉會導致 XAML 無效而無法重新載入。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; immediately closes on a &lt;see langword=&quot;Dispose&quot; /&gt; or similar operations. &lt;see langword=&quot;false&quot; /&gt; if the remaining buffer output is written before the &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; is released. The default is &lt;see langword=&quot;false&quot; /&gt;.">如果在 <see langword="true" /> 或類似作業時立即關閉 <see cref="T:System.Xaml.XamlXmlWriter" />，則為 <see langword="Dispose" />。 如果在釋放 <see cref="T:System.Xaml.XamlXmlWriter" /> 之前寫入剩餘緩衝區輸出，則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterSettings.Copy">
      <summary vsli:raw="Returns a copy of this &lt;see cref=&quot;T:System.Xaml.XamlXmlWriterSettings&quot; /&gt; instance.">傳回這個 <see cref="T:System.Xaml.XamlXmlWriterSettings" /> 執行個體的複本。</summary>
      <returns vsli:raw="The returned copy.">傳回的複本。</returns>
    </member>
  </members>
</doc>
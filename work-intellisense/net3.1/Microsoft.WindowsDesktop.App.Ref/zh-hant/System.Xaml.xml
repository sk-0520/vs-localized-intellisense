<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Xaml</name>
  </assembly>
  <members>
    <member name="T:System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute">
      <summary>標示 XAML 標記延伸特性的舊版報告型別。</summary>
    </member>
    <member name="M:System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute" /> 類別的新執行個體。</summary>
      <param name="type">這個屬性所報告的傳回型別。</param>
    </member>
    <member name="P:System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute.Type">
      <summary>取得或設定這個屬性所報告的傳回型別。</summary>
      <returns>這個屬性所報告的傳回型別。</returns>
    </member>
    <member name="T:System.Windows.Markup.AmbientAttribute">
      <summary>指定屬性或型別應該視為環境屬性。 環境概念與 XAML 處理器如何判斷成員類別擁有者有關。</summary>
    </member>
    <member name="M:System.Windows.Markup.AmbientAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.AmbientAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Windows.Markup.ArrayExtension">
      <summary>實作 .NET Framework XAML 服務的 <see langword="x:Array" /> 支援。</summary>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.ArrayExtension" /> 類別的新執行個體。 這會建立空陣列。</summary>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.#ctor(System.Array)">
      <summary>根據提供的原始陣列初始化 <see cref="T:System.Windows.Markup.ArrayExtension" /> 類別的新執行個體。</summary>
      <param name="elements">填入已建立陣列的陣列內容。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Windows.Markup.ArrayExtension" /> 類別的新執行個體，並初始化陣列的類型。</summary>
      <param name="arrayType">新陣列的物件類型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="arrayType" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.AddChild(System.Object)">
      <summary>將提供的物件附加至陣列的結尾。</summary>
      <param name="value">要加入至陣列結尾的物件。</param>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.AddText(System.String)">
      <summary>加入文字節點作為新的陣列項目。</summary>
      <param name="text">要加入陣列結尾處的文字。</param>
    </member>
    <member name="P:System.Windows.Markup.ArrayExtension.Items">
      <summary>取得陣列的內容。 可在 XAML 中透過 XAML 集合語法設定。</summary>
      <returns>陣列的內容。</returns>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.ProvideValue(System.IServiceProvider)">
      <summary>傳回陣列，這個陣列的大小調整為 <see cref="P:System.Windows.Markup.ArrayExtension.Items" /> 值中所提供的物件數。</summary>
      <param name="serviceProvider">可以為標記延伸提供服務的物件。</param>
      <returns>建立的陣列或 null。</returns>
      <exception cref="T:System.InvalidOperationException">已處理未提供有效 <see cref="P:System.Windows.Markup.ArrayExtension.Type" /> 的陣列。
-或-
陣列的已宣告 <see cref="P:System.Windows.Markup.ArrayExtension.Type" /> 與其一個或多個 <see cref="P:System.Windows.Markup.ArrayExtension.Items" /> 值之間的類型不符。</exception>
    </member>
    <member name="P:System.Windows.Markup.ArrayExtension.Type">
      <summary>取得或設定呼叫 <see cref="M:System.Windows.Markup.ArrayExtension.ProvideValue(System.IServiceProvider)" /> 時所要建立的陣列類型。</summary>
      <returns>陣列的類型。</returns>
    </member>
    <member name="T:System.Windows.Markup.ConstructorArgumentAttribute">
      <summary>指定可使用非無參數建構函式語法而初始化的物件，以及所指定名稱的屬性會提供建構資訊。  這項資訊主要供 XAML 序列化之用。</summary>
    </member>
    <member name="M:System.Windows.Markup.ConstructorArgumentAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Windows.Markup.ConstructorArgumentAttribute" /> 類別的新執行個體。</summary>
      <param name="argumentName">將初始化相關聯屬性之建構函式的名稱。</param>
    </member>
    <member name="P:System.Windows.Markup.ConstructorArgumentAttribute.ArgumentName">
      <summary>取得將初始化相關聯屬性的建構函式名稱參數。</summary>
      <returns>建構函式名稱 假設 CLR 支援，這會對應到相關建構函式參數的 <see cref="P:System.Reflection.ParameterInfo.Name" />。</returns>
    </member>
    <member name="T:System.Windows.Markup.ContentPropertyAttribute">
      <summary>指出類型的哪一個屬性是 XAML 內容屬性。 XAML 處理器會在處理屬性化類型之 XAML 表示的 XAML 子項目時，使用這項資訊。</summary>
    </member>
    <member name="M:System.Windows.Markup.ContentPropertyAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.ContentPropertyAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Windows.Markup.ContentPropertyAttribute.#ctor(System.String)">
      <summary>使用指定的名稱，初始化 <see cref="T:System.Windows.Markup.ContentPropertyAttribute" /> 類別的新執行個體。</summary>
      <param name="name">表示內容屬性之屬性的屬性名稱。</param>
    </member>
    <member name="P:System.Windows.Markup.ContentPropertyAttribute.Name">
      <summary>取得內容屬性之屬性的名稱。</summary>
      <returns>內容屬性之屬性的名稱。</returns>
    </member>
    <member name="T:System.Windows.Markup.ContentWrapperAttribute">
      <summary>在將用來包裝外部內容的相關聯集合類型上，指定一種或多種類型。</summary>
    </member>
    <member name="M:System.Windows.Markup.ContentWrapperAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Windows.Markup.ContentWrapperAttribute" /> 類別的新執行個體。</summary>
      <param name="contentWrapper">宣告為集合類型之內容包裝函式的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Windows.Markup.ContentWrapperAttribute.ContentWrapper">
      <summary>取得類型，這個類型宣告為與這個屬性相關聯之集合類型的內容包裝函式。</summary>
      <returns>宣告為集合類型之內容包裝函式的類型。</returns>
    </member>
    <member name="M:System.Windows.Markup.ContentWrapperAttribute.Equals(System.Object)">
      <summary>比較 <see cref="P:System.Windows.Markup.ContentWrapperAttribute.ContentWrapper" /> 屬性，來判斷指定的 <see cref="T:System.Windows.Markup.ContentWrapperAttribute" /> 是否等於這個 <see cref="T:System.Windows.Markup.ContentWrapperAttribute" />。</summary>
      <param name="obj">要比較的 <see cref="T:System.Windows.Markup.ContentWrapperAttribute" />。</param>
      <returns>如果 <see cref="P:System.Windows.Markup.ContentWrapperAttribute.ContentWrapper" /> 屬性相等，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Markup.ContentWrapperAttribute.GetHashCode">
      <summary>取得這個執行個體的雜湊碼。</summary>
      <returns>整數雜湊碼。</returns>
    </member>
    <member name="P:System.Windows.Markup.ContentWrapperAttribute.TypeId">
      <summary>取得這個屬性的唯一識別項。</summary>
      <returns>這個屬性的唯一識別項。</returns>
    </member>
    <member name="T:System.Windows.Markup.DateTimeValueSerializer">
      <summary>將 <see cref="T:System.String" /> 執行個體轉換為 <see cref="T:System.DateTime" /> 執行個體，以及反向操作。</summary>
    </member>
    <member name="M:System.Windows.Markup.DateTimeValueSerializer.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.DateTimeValueSerializer" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Windows.Markup.DateTimeValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>判斷指定的 <see cref="T:System.String" /> 是否可以轉換為 <see cref="T:System.DateTime" /> 的執行個體。</summary>
      <param name="value">要評估以進行轉換的字串。</param>
      <param name="context">用於轉換的內容資訊。</param>
      <returns>如果可以轉換值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Markup.DateTimeValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>判斷指定的物件是否可以轉換為 <see cref="T:System.String" />。</summary>
      <param name="value">要評估以進行轉換的物件。</param>
      <param name="context">用於轉換的內容資訊。</param>
      <returns>如果 <paramref name="value" /> 可以轉換為 <see cref="T:System.String" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Markup.DateTimeValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>將 <see cref="T:System.String" /> 轉換成 <see cref="T:System.DateTime" />。</summary>
      <param name="value">要轉換成 <see cref="T:System.DateTime" /> 的字串。</param>
      <param name="context">用於轉換的內容資訊。</param>
      <returns>根據所提供 <paramref name="value" /> 的新 <see cref="T:System.DateTime" /> 執行個體。</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Windows.Markup.DateTimeValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>將 <see cref="T:System.DateTime" /> 的執行個體轉換成 <see cref="T:System.String" />。</summary>
      <param name="value">要轉換為字串的物件。</param>
      <param name="context">用於轉換的內容資訊。</param>
      <returns>指定之 <see cref="T:System.DateTime" /> 的字串表示。</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> 不是 <see cref="T:System.DateTime" />，或為 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Windows.Markup.DependsOnAttribute">
      <summary>表示相屬性化 (Attribute) 屬性 (Property) 取決於其他屬性 (Property) 的值。</summary>
    </member>
    <member name="M:System.Windows.Markup.DependsOnAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Windows.Markup.DependsOnAttribute" /> 類別的新執行個體。</summary>
      <param name="name">與這個 <see cref="T:System.Windows.Markup.DependsOnAttribute" /> 相關聯之屬性相依的屬性。</param>
    </member>
    <member name="P:System.Windows.Markup.DependsOnAttribute.Name">
      <summary>取得這個 <see cref="T:System.Windows.Markup.DependsOnAttribute" /> 中宣告之相關屬性的名稱。</summary>
      <returns>相關屬性的名稱。</returns>
    </member>
    <member name="P:System.Windows.Markup.DependsOnAttribute.TypeId">
      <summary>取得這個 <see cref="T:System.Windows.Markup.DependsOnAttribute" />的唯一識別項。</summary>
      <returns>唯一的識別項。</returns>
    </member>
    <member name="T:System.Windows.Markup.DictionaryKeyPropertyAttribute">
      <summary>指定相關聯類別的屬性，這個屬性會提供隱含索引鍵值。 隱含索引鍵會用來做為索引鍵，而不是做為定義於 <see cref="T:System.Collections.IDictionary" /> 集合項目之 XAML 中的隱含 <see langword="x:Key" /> 屬性。</summary>
    </member>
    <member name="M:System.Windows.Markup.DictionaryKeyPropertyAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Windows.Markup.DictionaryKeyPropertyAttribute" /> 類別的新執行個體。</summary>
      <param name="name">提供隱含索引鍵值之屬性的名稱。</param>
    </member>
    <member name="P:System.Windows.Markup.DictionaryKeyPropertyAttribute.Name">
      <summary>取得提供隱含索引鍵值之屬性的名稱。</summary>
      <returns>提供隱含索引鍵值之屬性的名稱。</returns>
    </member>
    <member name="T:System.Windows.Markup.IComponentConnector">
      <summary>對具名 XAML 項目提供標記編譯及工具支援，以便將事件處理常式附加至這些項目。</summary>
    </member>
    <member name="M:System.Windows.Markup.IComponentConnector.Connect(System.Int32,System.Object)">
      <summary>附加事件和名稱至編譯內容。</summary>
      <param name="connectionId">要區分呼叫的識別項語彙基元。</param>
      <param name="target">要連接事件和名稱的目標。</param>
    </member>
    <member name="M:System.Windows.Markup.IComponentConnector.InitializeComponent">
      <summary>載入元件之編譯過的頁面。</summary>
    </member>
    <member name="T:System.Windows.Markup.INameScope">
      <summary>定義以下情況的合約：在特定 XAML 名稱範圍中存取項目名稱的方式，以及在該 XAML 名稱範圍中強制執行名稱唯一性的方式。</summary>
    </member>
    <member name="M:System.Windows.Markup.INameScope.FindName(System.String)">
      <summary>傳回具有所提供之識別名稱的物件。</summary>
      <param name="name">請求之物件的名稱識別項。</param>
      <returns>如果找到，則傳回該物件。 如果找不到該名稱的物件，則傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Windows.Markup.INameScope.RegisterName(System.String,System.Object)">
      <summary>將所提供的名稱註冊到目前的 XAML 名稱範圍中。</summary>
      <param name="name">要註冊的名稱。</param>
      <param name="scopedElement">提供的 <paramref name="name" /> 所參考的特定項目。</param>
    </member>
    <member name="M:System.Windows.Markup.INameScope.UnregisterName(System.String)">
      <summary>從目前的 XAML 名稱範圍移除註冊所提供的名稱。</summary>
      <param name="name">要移除註冊的名稱。</param>
    </member>
    <member name="T:System.Windows.Markup.INameScopeDictionary">
      <summary>整合可列舉型別、集合和字典支援，這些支援在 XAML 名稱範圍中公開名稱的字典時十分有用。</summary>
    </member>
    <member name="T:System.Windows.Markup.IProvideValueTarget">
      <summary>表示可報告情境式物件-屬性關聯性來評估標記延伸的服務。</summary>
    </member>
    <member name="P:System.Windows.Markup.IProvideValueTarget.TargetObject">
      <summary>取得正在報告的目標物件。</summary>
      <returns>正在報告的目標物件。</returns>
    </member>
    <member name="P:System.Windows.Markup.IProvideValueTarget.TargetProperty">
      <summary>取得所報告之目標屬性的識別項。</summary>
      <returns>所報告之目標屬性的識別項。</returns>
    </member>
    <member name="T:System.Windows.Markup.IQueryAmbient">
      <summary>查詢是否應該將指定的屬性視為目前範圍中的環境屬性。</summary>
    </member>
    <member name="M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)">
      <summary>查詢是否可以將指定的具名屬性視為目前範圍中的環境屬性。</summary>
      <param name="propertyName">要檢查環境狀態之屬性的名稱。</param>
      <returns>如果可將所要求的屬性視為環境屬性則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Windows.Markup.IUriContext">
      <summary>表示可以使用應用程式內容來解析所提供相對 URI 為絕對 URI 的服務。</summary>
    </member>
    <member name="P:System.Windows.Markup.IUriContext.BaseUri">
      <summary>取得或設定目前應用程式內容的基底 URI。</summary>
      <returns>應用程式內容的基底 URI。</returns>
    </member>
    <member name="T:System.Windows.Markup.IValueSerializerContext">
      <summary>定義提供給 <see cref="T:System.Windows.Markup.ValueSerializer" /> 的內容。 此內容可用於啟用序列化的特殊狀況或序列化的不同模式。</summary>
    </member>
    <member name="M:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor(System.ComponentModel.PropertyDescriptor)">
      <summary>取得指定之屬性描述項的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</summary>
      <param name="descriptor">正在轉換之屬性的描述項。</param>
      <returns>可以序列化指定之屬性的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</returns>
    </member>
    <member name="M:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor(System.Type)">
      <summary>取得與指定之型別相關聯的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</summary>
      <param name="type">正在轉換之值的型別。</param>
      <returns>可以序列化指定之型別的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</returns>
    </member>
    <member name="T:System.Windows.Markup.IXamlTypeResolver">
      <summary>表示可將 XAML 標記中的具名項目解析為適當 CLR 型別的服務。</summary>
    </member>
    <member name="M:System.Windows.Markup.IXamlTypeResolver.Resolve(System.String)">
      <summary>將具名 XAML 型別解析為對應的 CLR <see cref="T:System.Type" />。</summary>
      <param name="qualifiedTypeName">要解析的 XAML 型別名稱。 型別名稱可選擇性地以 XML 命名空間的前置詞限定， 否則會假設為目前的預設 XML 命名空間。</param>
      <returns>
        <paramref name="qualifiedTypeName" /> 的解析目標 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Windows.Markup.MarkupExtension">
      <summary>為 .NET Framework XAML 服務及其他 XAML 讀取器和 XAML 寫入器可支援的 XAML 標記延伸實作，提供基底類別。</summary>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtension.#ctor">
      <summary>初始化衍生自 <see cref="T:System.Windows.Markup.MarkupExtension" /> 之類別的新執行個體。</summary>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
      <summary>在衍生類別中實作時，傳回物件，這個物件提供為這個標記延伸的目標屬性值。</summary>
      <param name="serviceProvider">可以為標記延伸提供服務的服務提供者 Helper。</param>
      <returns>要在套用延伸的屬性上設定的物件值。</returns>
    </member>
    <member name="T:System.Windows.Markup.MarkupExtensionBracketCharactersAttribute">
      <summary>回報標記延伸可傳回的括弧字元。</summary>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtensionBracketCharactersAttribute.#ctor(System.Char,System.Char)">
      <summary>使用提供的字元，初始化 <see cref="T:System.Windows.Markup.MarkupExtensionBracketCharactersAttribute" /> 類別的新執行個體。</summary>
      <param name="openingBracket">
        <see cref="T:System.Char" />，會定義左括弧字元。</param>
      <param name="closingBracket">
        <see cref="T:System.Char" />，會定義右括弧字元。</param>
    </member>
    <member name="P:System.Windows.Markup.MarkupExtensionBracketCharactersAttribute.ClosingBracket">
      <summary>指定 <see cref="T:System.Windows.Markup.MarkupExtension" /> 中要用來做為結尾分隔符號的字元。</summary>
      <returns>
        <see cref="T:System.Char" />，表示字元。</returns>
    </member>
    <member name="P:System.Windows.Markup.MarkupExtensionBracketCharactersAttribute.OpeningBracket">
      <summary>指定 <see cref="T:System.Windows.Markup.MarkupExtension" /> 中要用來做為左分隔符號的字元。</summary>
      <returns>
        <see cref="T:System.Char" />，表示字元。</returns>
    </member>
    <member name="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute">
      <summary>報告標記延伸可以傳回的型別。</summary>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.#ctor(System.Type)">
      <summary>使用所提供的 <see cref="T:System.Type" />，初始化 <see cref="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute" /> 類別的新執行個體。</summary>
      <param name="returnType">這個屬性所報告的傳回型別。</param>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.#ctor(System.Type,System.Type)">
      <summary>已取代；請勿使用。</summary>
      <param name="returnType">這個 .NET Framework 屬性 回報的傳回型別。</param>
      <param name="expressionType">已取代；請勿使用。</param>
    </member>
    <member name="P:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.ExpressionType">
      <summary>已取代；請勿使用。</summary>
      <returns>已取代；請勿使用。</returns>
    </member>
    <member name="P:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.ReturnType">
      <summary>取得這個 .NET Framework 屬性 回報的 <see cref="T:System.Windows.Markup.MarkupExtension" /> 傳回型別。</summary>
      <returns>套用之標記延伸<see cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" /><see cref="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute" /> .NET Framework 屬性的特定執行的型別安全傳回型別。</returns>
    </member>
    <member name="T:System.Windows.Markup.MemberDefinition">
      <summary>提供可在宣告式 XAML 中定義類別成員之標記技術所使用的基底類別。</summary>
    </member>
    <member name="M:System.Windows.Markup.MemberDefinition.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.MemberDefinition" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Windows.Markup.MemberDefinition.Name">
      <summary>在衍生類別中實作時，取得或設定要定義的成員名稱。</summary>
      <returns>要定義的成員名稱。</returns>
    </member>
    <member name="T:System.Windows.Markup.NameReferenceConverter">
      <summary>提供型別轉換，以將字串名稱轉換為具有該名稱之物件的物件參考，或是從物件圖形傳回物件的名稱。</summary>
    </member>
    <member name="M:System.Windows.Markup.NameReferenceConverter.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.NameReferenceConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Windows.Markup.NameReferenceConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>傳回值，這個值指出這個轉換子是否可以將某個型別的物件轉換為其他物件。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType">
        <see cref="T:System.Type" />，表示您要轉換的來源類型。</param>
      <returns>如果這個轉換子可以執行轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Markup.NameReferenceConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>傳回值，這個值表示轉換子是否可以將物件轉換為指定的目的型別。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType">要轉換的目標類型。</param>
      <returns>如果這個轉換器可以執行轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Markup.NameReferenceConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>使用指定的內容和文化特性 (Culture) 資訊，將提供的物件轉換為其他物件。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">要用作目前文化特性的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">要轉換的參考名稱字串。</param>
      <returns>傳回的物件，可能是已在相關支援組件中完成型別對應且能夠在 XAML 中以 XAML 名稱參考宣告的任何物件。</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> 為 Null 字串或空字串。
-或-
<see cref="T:System.Xaml.IXamlNameResolver" /> 服務遺漏或不正確。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Windows.Markup.NameReferenceConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>將物件轉換成指定的型別。 這適合用來傳回物件圖形中物件的 XAML 參考名稱。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">要用作目前文化特性的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">要為其擷取參考名稱的物件。</param>
      <param name="destinationType">要傳回的類型。 您必須永遠參考 <see cref="T:System.String" /> 型別。</param>
      <returns>
        <paramref name="value" /> 輸入物件的參考名稱。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xaml.IXamlNameProvider" /> 服務遺漏或不正確。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Windows.Markup.NameScopePropertyAttribute">
      <summary>指定相關聯類別的屬性，這個屬性會提供 XAML 名稱範圍值。</summary>
    </member>
    <member name="M:System.Windows.Markup.NameScopePropertyAttribute.#ctor(System.String)">
      <summary>使用指定的名稱，初始化 <see cref="T:System.Windows.Markup.NameScopePropertyAttribute" /> 類別的新執行個體。</summary>
      <param name="name">屬性化 (Attributed) 型別上屬性 (Property) 的名稱，這個屬性 (Property) 可提供 XAML 名稱範圍。</param>
    </member>
    <member name="M:System.Windows.Markup.NameScopePropertyAttribute.#ctor(System.String,System.Type)">
      <summary>使用指定的名稱和型別，初始化 <see cref="T:System.Windows.Markup.NameScopePropertyAttribute" /> 類別的新執行個體。</summary>
      <param name="name">提供 XAML 名稱範圍之可附加成員的名稱。</param>
      <param name="type">提供 XAML 名稱範圍之可附加成員的擁有者類型。</param>
    </member>
    <member name="P:System.Windows.Markup.NameScopePropertyAttribute.Name">
      <summary>取得屬性的名稱，這個屬性提供 XAML 名稱範圍。</summary>
      <returns>字串值，這是屬性的名稱，這個屬性提供 XAML 名稱範圍。</returns>
    </member>
    <member name="P:System.Windows.Markup.NameScopePropertyAttribute.Type">
      <summary>取得提供 XAML 名稱範圍支援之附加屬性的擁有者型別。</summary>
      <returns>
        <see cref="T:System.Type" /> 值 (這個值是提供 XAML 名稱範圍支援之附加屬性的擁有者型別) 或 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Windows.Markup.NullExtension">
      <summary>實作 XAML 標記延伸以傳回 null 物件，您可以使用這個物件，在 XAML 中將值明確設定為 null。</summary>
    </member>
    <member name="M:System.Windows.Markup.NullExtension.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.NullExtension" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Windows.Markup.NullExtension.ProvideValue(System.IServiceProvider)">
      <summary>提供 <see langword="null" /> 以當做此標記延伸之輸出的值。</summary>
      <param name="serviceProvider">可以為標記延伸實作提供服務的物件。</param>
      <returns>null 參考。</returns>
    </member>
    <member name="T:System.Windows.Markup.PropertyDefinition">
      <summary>支援可在宣告式 XAML 中定義類別屬性的標記技術。</summary>
    </member>
    <member name="M:System.Windows.Markup.PropertyDefinition.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.PropertyDefinition" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Windows.Markup.PropertyDefinition.Attributes">
      <summary>取得關聯的 CLR 屬性清單。</summary>
      <returns>關聯的屬性清單。</returns>
    </member>
    <member name="P:System.Windows.Markup.PropertyDefinition.Modifier">
      <summary>取得或設定所定義之屬性的存取層級。</summary>
      <returns>所定義之屬性的存取層級。</returns>
    </member>
    <member name="P:System.Windows.Markup.PropertyDefinition.Name">
      <summary>取得或設定要定義的屬性名稱。</summary>
      <returns>要定義的屬性名稱。</returns>
    </member>
    <member name="P:System.Windows.Markup.PropertyDefinition.Type">
      <summary>取得或設定要定義之屬性的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>要定義之屬性的 XAML 型別識別項。</returns>
    </member>
    <member name="T:System.Windows.Markup.Reference">
      <summary>實作 <c>{x:Reference}</c> 標記延伸。</summary>
    </member>
    <member name="M:System.Windows.Markup.Reference.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.Reference" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Windows.Markup.Reference.#ctor(System.String)">
      <summary>使用 <paramref name="name" /> 引數來初始化 <see cref="T:System.Windows.Markup.Reference" /> 類別的新執行個體。</summary>
      <param name="name">要參考之項目的 XAML 名稱。</param>
    </member>
    <member name="P:System.Windows.Markup.Reference.Name">
      <summary>取得或設定要取得其參考的 XAML 名稱。</summary>
      <returns>要取得其參考的 XAML 名稱。</returns>
    </member>
    <member name="M:System.Windows.Markup.Reference.ProvideValue(System.IServiceProvider)">
      <summary>傳回物件，此物件是目標屬性的值。 對於 <see cref="T:System.Windows.Markup.Reference" /> 型別，這是提供 <see cref="P:System.Windows.Markup.Reference.Name" /> 參考的物件。</summary>
      <param name="serviceProvider">實作 <see cref="T:System.Xaml.IXamlNameResolver" /> 服務的類別。</param>
      <returns>目標屬性的值。 這可能是相關備份組件中的任一個型別對應物件。</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="serviceProvider" /> 值未實作 <see cref="T:System.Xaml.IXamlNameResolver" /> 服務。
-或-
<see cref="P:System.Windows.Markup.Reference.Name" /> 尚未透過建構或位置用法設定。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceProvider" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Windows.Markup.RootNamespaceAttribute">
      <summary>表示組件層級屬性，用來識別 Visual Studio 專案檔的 <see langword="RootNamespace" /> 屬性值。</summary>
    </member>
    <member name="M:System.Windows.Markup.RootNamespaceAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Windows.Markup.RootNamespaceAttribute" /> 類別的新執行個體。</summary>
      <param name="nameSpace">根命名空間值。</param>
    </member>
    <member name="P:System.Windows.Markup.RootNamespaceAttribute.Namespace">
      <summary>取得字串，該字串對應至 Visual Studio 專案檔中的 <see langword="RootNamespace" /> 屬性值。</summary>
      <returns>對應至 Visual Studio 專案檔中<see langword="RootNamespace" />屬性值的字串。</returns>
    </member>
    <member name="T:System.Windows.Markup.RuntimeNamePropertyAttribute">
      <summary>代表類型層級屬性，該屬性報告此類型中哪個屬性對應到 XAML x:Name 屬性。</summary>
    </member>
    <member name="M:System.Windows.Markup.RuntimeNamePropertyAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Windows.Markup.RuntimeNamePropertyAttribute" /> 類別的新執行個體。</summary>
      <param name="name">要當做類別之 <see langword="x:Name" /> 對等項目之屬性的名稱。</param>
    </member>
    <member name="P:System.Windows.Markup.RuntimeNamePropertyAttribute.Name">
      <summary>取得由這個 <see cref="T:System.Windows.Markup.RuntimeNamePropertyAttribute" /> 指定之執行階段名稱屬性的名稱。</summary>
      <returns>屬性的名稱。</returns>
    </member>
    <member name="T:System.Windows.Markup.StaticExtension">
      <summary>實作標記延伸，這個標記延伸會傳回靜態欄位及屬性參考。</summary>
    </member>
    <member name="M:System.Windows.Markup.StaticExtension.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.StaticExtension" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Windows.Markup.StaticExtension.#ctor(System.String)">
      <summary>使用所提供的 <paramref name="member" /> 字串初始化 <see cref="T:System.Windows.Markup.StaticExtension" /> 類別的新執行個體。</summary>
      <param name="member">識別要參考之成員的字串。 這個字串使用 <c>prefix:typeName.fieldOrPropertyName</c> 格式。 <c>prefix</c> 是 XAML 命名空間的對應前置詞，只有未對應至預設 XAML 命名空間的參考靜態值才需要。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Windows.Markup.StaticExtension.Member">
      <summary>取得或設定成員名稱字串，此字串用來根據服務提供的型別解析程式，解析靜態欄位或屬性。</summary>
      <returns>識別要參考之成員的字串。</returns>
      <exception cref="T:System.ArgumentNullException">嘗試將 <see cref="P:System.Windows.Markup.StaticExtension.Member" /> 設定為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Windows.Markup.StaticExtension.MemberType">
      <summary>取得或設定可定義要傳回之靜態成員的 <see cref="T:System.Type" />。</summary>
      <returns>可定義要傳回之靜態成員的 <see cref="T:System.Type" />。</returns>
      <exception cref="T:System.ArgumentNullException">嘗試將 <see cref="P:System.Windows.Markup.StaticExtension.MemberType" /> 設定為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Windows.Markup.StaticExtension.ProvideValue(System.IServiceProvider)">
      <summary>傳回要在套用這個延伸之屬性上設定的物件值。 如果是 <see cref="T:System.Windows.Markup.StaticExtension" />，則傳回值是針對所要求的靜態成員計算的靜態值。</summary>
      <param name="serviceProvider">可以為標記延伸提供服務的物件。 服務提供者必須能夠提供實作型別解析程式 (<see cref="T:System.Windows.Markup.IXamlTypeResolver" />) 的服務。</param>
      <returns>要在套用延伸的屬性上設定的靜態值。</returns>
      <exception cref="T:System.InvalidOperationException">評估時，擴充的 <paramref name="member" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">無法正確剖析 <paramref name="member" /> 字串的某個部分
-或-
<paramref name="serviceProvider" /> 未提供 <see cref="T:System.Windows.Markup.IXamlTypeResolver" /> 的服務
-或-
<paramref name="member" /> 值未解析為靜態成員。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceProvider" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Windows.Markup.TrimSurroundingWhitespaceAttribute">
      <summary>指定 XAML 處理器在進行序列化時，必須修剪標記中型別之項目周圍的空白。</summary>
    </member>
    <member name="M:System.Windows.Markup.TrimSurroundingWhitespaceAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.TrimSurroundingWhitespaceAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Windows.Markup.TypeExtension">
      <summary>實作會根據輸入字串傳回 <see cref="T:System.Type" /> 的標記延伸。</summary>
    </member>
    <member name="M:System.Windows.Markup.TypeExtension.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.TypeExtension" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Windows.Markup.TypeExtension.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Windows.Markup.TypeExtension" /> 類別的新執行個體，根據所提供 <see cref="P:System.Windows.Markup.TypeExtension.TypeName" /> 字串初始化 <paramref name="typeName" /> 值。</summary>
      <param name="typeName">識別要參考之類型的字串。 這個字串使用 <c>prefix:className</c> 格式。 <c>prefix</c> 是 XAML 命名空間的對應前置詞，只有未對應至預設 XAML 命名空間的參考類型才需要。</param>
      <exception cref="T:System.ArgumentNullException">嘗試指定 <paramref name="typeName" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Windows.Markup.TypeExtension.#ctor(System.Type)">
      <summary>直接宣告類型，初始化 <see cref="T:System.Windows.Markup.TypeExtension" /> 類別的新執行個體。</summary>
      <param name="type">這個 <see cref="T:System.Windows.Markup.TypeExtension" /> 所表示的類型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 是 <see langword="null" /></exception>
    </member>
    <member name="M:System.Windows.Markup.TypeExtension.ProvideValue(System.IServiceProvider)">
      <summary>傳回物件，這個物件應該設定於套用這個延伸的屬性上。 如果是 <see cref="T:System.Windows.Markup.TypeExtension" />，這是針對所要求的類型名稱評估的 <see cref="T:System.Type" /> 值。</summary>
      <param name="serviceProvider">可以為標記延伸提供服務的物件。 提供者必須能夠為 <see cref="T:System.Windows.Markup.IXamlTypeResolver" /> 提供服務。</param>
      <returns>要在套用延伸的屬性上設定的 <see cref="T:System.Type" />。</returns>
      <exception cref="T:System.InvalidOperationException">延伸的 <paramref name="member" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">未正確地剖析 <paramref name="typeName" /> 字串的某個部分。
-或-
<paramref name="serviceProvider" /> 未提供 <see cref="T:System.Windows.Markup.IXamlTypeResolver" /> 的服務
-或-
<paramref name="typeName" /> 值未解析為類型。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceProvider" /> 是 <see langword="null" /></exception>
    </member>
    <member name="P:System.Windows.Markup.TypeExtension.Type">
      <summary>取得或設定這個例外狀況的類型資訊。</summary>
      <returns>已建立的類型。 基於執行階段目的，此類型在進行 get 存取時可能為 <see langword="null" />，但無法設定為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">嘗試設定為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Windows.Markup.TypeExtension.TypeName">
      <summary>取得或設定以這個標記延伸表示的類型名稱。</summary>
      <returns>識別類型的字串。 這個字串使用首碼<c>：</c>className格式。 （prefix是 XML 命名空間的對應前置詞，只有未對應至 WPF 之預設 XML 命名空間的參考型別才需要（<c>http://schemas.microsoft.com/winfx/2006/xaml/presentation</c>）。</returns>
      <exception cref="T:System.ArgumentNullException">嘗試設定為 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Windows.Markup.UidPropertyAttribute">
      <summary>指出提供 x:Uid 指示詞值之類別的 CLR 屬性。</summary>
    </member>
    <member name="M:System.Windows.Markup.UidPropertyAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Windows.Markup.UidPropertyAttribute" /> 類別的新執行個體。</summary>
      <param name="name">提供 <see langword="x:Uid" /> 值的屬性名稱。</param>
    </member>
    <member name="P:System.Windows.Markup.UidPropertyAttribute.Name">
      <summary>取得表示 x:Uid 指示詞值的 CLR 屬性名稱。</summary>
      <returns>表示 x:Uid 指示詞的 CLR 屬性名稱。</returns>
    </member>
    <member name="T:System.Windows.Markup.UsableDuringInitializationAttribute">
      <summary>表示這個類型是否在 XAML 物件圖形建立期間由上而下建置。</summary>
    </member>
    <member name="M:System.Windows.Markup.UsableDuringInitializationAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.Windows.Markup.UsableDuringInitializationAttribute" /> 類別的新執行個體。</summary>
      <param name="usable">定義相關聯的類別是否可在初始化時使用。</param>
    </member>
    <member name="P:System.Windows.Markup.UsableDuringInitializationAttribute.Usable">
      <summary>取得值，這個值指出相關聯的類別是否可在初始化時使用。</summary>
      <returns>如果初始化時可使用相關聯的類別，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Windows.Markup.ValueSerializer">
      <summary>抽象類別，會定義從物件表示進行序列化的轉換行為。</summary>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.ValueSerializer" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>在衍生類別中覆寫時，判斷是否可以將指定的 <see cref="T:System.String" /> 轉換成 <see cref="T:System.Windows.Markup.ValueSerializer" /> 的實作所支援之類型的執行個體。</summary>
      <param name="value">要評估以進行轉換的字串。</param>
      <param name="context">用於轉換的內容資訊。</param>
      <returns>如果可以轉換值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>在衍生類別中覆寫時，判斷指定的物件是否可以轉換成 <see cref="T:System.String" />。</summary>
      <param name="value">要評估以進行轉換的物件。</param>
      <param name="context">用於轉換的內容資訊。</param>
      <returns>如果 <paramref name="value" /> 可以轉換成 <see cref="T:System.String" />，則為 <see langword="true" />；否則為 <see langword="false." />。</returns>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>在衍生類別中覆寫時，將 <see cref="T:System.String" /> 轉換成 <see cref="T:System.Windows.Markup.ValueSerializer" /> 的實作所支援之類型的執行個體。</summary>
      <param name="value">要轉換的字串。</param>
      <param name="context">用於轉換的內容資訊。</param>
      <returns>
        <see cref="T:System.Windows.Markup.ValueSerializer" /> 的實作所支援並以所提供 <paramref name="value" /> 為基礎之類型的新執行個體。</returns>
      <exception cref="T:System.NotSupportedException">無法轉換 <paramref name="value" />。</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>在衍生類別中覆寫時，將指定的物件轉換成 <see cref="T:System.String" />。</summary>
      <param name="value">要轉換為字串的物件。</param>
      <param name="context">用於轉換的內容資訊。</param>
      <returns>指定物件的字串表示。</returns>
      <exception cref="T:System.NotSupportedException">無法轉換 <paramref name="value" />。</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetConvertFromException(System.Object)">
      <summary>無法執行轉換時，會傳回要擲回的例外狀況。</summary>
      <param name="value">無法轉換的物件。</param>
      <returns>
        <see cref="T:System.Exception" /> 物件，表示無法執行 <see langword="ConvertFrom" /> 轉換時將擲回的例外狀況。</returns>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetConvertToException(System.Object,System.Type)">
      <summary>無法執行轉換時，會傳回要擲回的例外狀況。</summary>
      <param name="value">無法轉換的物件。</param>
      <param name="destinationType">型別，表示轉換嘗試轉換成的型別。</param>
      <returns>
        <see cref="T:System.Exception" /> 物件，表示無法執行 <see langword="ConvertTo" /> 轉換時將擲回的例外狀況。</returns>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)">
      <summary>藉由為屬性傳遞 CLR 屬性描述項，取得針對該屬性宣告的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</summary>
      <param name="descriptor">要序列化之屬性的 CLR 屬性描述項。</param>
      <returns>與指定之屬性相關聯的序列化程式。 可能傳回 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="descriptor" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor,System.Windows.Markup.IValueSerializerContext)">
      <summary>使用指定的內容，取得為指定之屬性宣告的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</summary>
      <param name="descriptor">要序列化之屬性的描述項。</param>
      <param name="context">用於轉換的內容資訊。</param>
      <returns>與指定之屬性相關聯的序列化程式。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="descriptor" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)">
      <summary>取得為指定之型別宣告的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</summary>
      <param name="type">要為之取得 <see cref="T:System.Windows.Markup.ValueSerializer" /> 的型別。</param>
      <returns>與指定之型別相關聯的序列化程式。 可能傳回 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type,System.Windows.Markup.IValueSerializerContext)">
      <summary>使用指定的內容，取得為指定之型別宣告的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</summary>
      <param name="type">要為之取得 <see cref="T:System.Windows.Markup.ValueSerializer" /> 的型別。</param>
      <param name="context">用於轉換的內容資訊。</param>
      <returns>與指定之型別相關聯的序列化程式。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.TypeReferences(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>取得 <see cref="T:System.Windows.Markup.ValueSerializer" /> 所參考之型別的列舉型別 (Enumeration)。</summary>
      <param name="value">正在序列化的值。</param>
      <param name="context">用於轉換的內容資訊。</param>
      <returns>由此序列化程式轉換的型別。</returns>
    </member>
    <member name="T:System.Windows.Markup.ValueSerializerAttribute">
      <summary>識別序列化時應該使用之類型或屬性的 <see cref="T:System.Windows.Markup.ValueSerializer" /> 類別。</summary>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializerAttribute.#ctor(System.String)">
      <summary>使用組件限定類型名稱字串初始化 <see cref="T:System.Windows.Markup.ValueSerializerAttribute" /> 類別的新執行個體。</summary>
      <param name="valueSerializerTypeName">供 <see cref="T:System.Windows.Markup.ValueSerializer" /> 類別使用的組件限定類型名稱字串。</param>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializerAttribute.#ctor(System.Type)">
      <summary>使用指定的類型，初始化 <see cref="T:System.Windows.Markup.ValueSerializerAttribute" /> 類別的新執行個體。</summary>
      <param name="valueSerializerType">表示 <see cref="T:System.Windows.Markup.ValueSerializer" /> 類別類型的類型。</param>
    </member>
    <member name="P:System.Windows.Markup.ValueSerializerAttribute.ValueSerializerType">
      <summary>取得這個屬性所報告之 <see cref="T:System.Windows.Markup.ValueSerializer" /> 類別的類型。</summary>
      <returns>
        <see cref="T:System.Windows.Markup.ValueSerializer" /> 的類型。</returns>
    </member>
    <member name="P:System.Windows.Markup.ValueSerializerAttribute.ValueSerializerTypeName">
      <summary>為這個類型或屬性取得 <see cref="T:System.Windows.Markup.ValueSerializer" /> 類型的組件限定名稱。</summary>
      <returns>類型的組件限定名稱。</returns>
    </member>
    <member name="T:System.Windows.Markup.WhitespaceSignificantCollectionAttribute">
      <summary>表示應該由 XAML 處理器來處理成未預期之空白字元的集合型別。</summary>
    </member>
    <member name="M:System.Windows.Markup.WhitespaceSignificantCollectionAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.WhitespaceSignificantCollectionAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Windows.Markup.XamlDeferLoadAttribute">
      <summary>表示類別或屬性具有 XAML 的延後載入使用方式 (例如，範本行為)，並報告啟用延後行為的類別及其目的型別/內容型別。</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlDeferLoadAttribute.#ctor(System.String,System.String)">
      <summary>使用型別的字串名稱，初始化 <see cref="T:System.Windows.Markup.XamlDeferLoadAttribute" /> 類別的新執行個體。</summary>
      <param name="loaderType">型別的字串名稱，即實作後用於延後載入行為的型別。</param>
      <param name="contentType">型別的字串名稱，即延後載入行為的目的型別/內容型別。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="loaderType" /> 或 <paramref name="contentType" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Windows.Markup.XamlDeferLoadAttribute.#ctor(System.Type,System.Type)">
      <summary>使用 CLR <see cref="T:System.Windows.Markup.XamlDeferLoadAttribute" /> 值，初始化 <see cref="T:System.Type" /> 類別的新執行個體。</summary>
      <param name="loaderType">CLR <see cref="T:System.Type" /> 值，即實作後用於延後載入行為的值。</param>
      <param name="contentType">CLR <see cref="T:System.Type" /> 值，即延後載入行為的目的型別/內容型別。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="loaderType" /> 或 <paramref name="contentType" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Windows.Markup.XamlDeferLoadAttribute.ContentType">
      <summary>取得 CLR <see cref="T:System.Type" /> 值，即延後載入行為的目的型別/內容型別。</summary>
      <returns>CLR <see cref="T:System.Type" /> 值，即延後載入行為的目的型別/內容型別。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlDeferLoadAttribute.ContentTypeName">
      <summary>取得型別的字串名稱，即實作後用於延後載入行為的型別。</summary>
      <returns>型別的字串名稱，即轉換子用於延後載入行為的型別。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlDeferLoadAttribute.LoaderType">
      <summary>取得 CLR <see cref="T:System.Type" /> 值，即實作後用於延後載入行為的值。</summary>
      <returns>CLR <see cref="T:System.Type" /> 值，即實作後用於延後載入行為的值。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlDeferLoadAttribute.LoaderTypeName">
      <summary>取得型別的字串名稱，即延後載入行為的目的型別/內容型別。</summary>
      <returns>型別的字串名稱，即延後載入行為的目的型別/內容型別。</returns>
    </member>
    <member name="T:System.Windows.Markup.XamlSetMarkupExtensionAttribute">
      <summary>表示類別可以使用標記延伸來提供值，以及參考要用於標記延伸設定作業的處理常式。</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlSetMarkupExtensionAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Windows.Markup.XamlSetMarkupExtensionAttribute" /> 類別的新執行個體。</summary>
      <param name="xamlSetMarkupExtensionHandler">用於標記延伸設定作業之處理常式的名稱。</param>
    </member>
    <member name="P:System.Windows.Markup.XamlSetMarkupExtensionAttribute.XamlSetMarkupExtensionHandler">
      <summary>取得用於標記延伸設定作業之處理常式的名稱。</summary>
      <returns>用於標記延伸設定作業之處理常式的名稱。</returns>
    </member>
    <member name="T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs">
      <summary>提供資料給回呼，該回呼會在 XAML 物件寫入器使用標記延伸來設定值時叫用。</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlSetMarkupExtensionEventArgs.#ctor(System.Xaml.XamlMember,System.Windows.Markup.MarkupExtension,System.IServiceProvider)">
      <summary>初始化 <see cref="T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs" /> 類別的新執行個體。</summary>
      <param name="member">正在設定之成員的 XAML 型別系統/結構描述資訊。</param>
      <param name="value">要提供給正在設定之成員的標記延伸參考。</param>
      <param name="serviceProvider">傳遞給標記延伸的服務提供者資訊。</param>
    </member>
    <member name="M:System.Windows.Markup.XamlSetMarkupExtensionEventArgs.CallBase">
      <summary>提供方法，以便依現用型別之基底類別中的定義叫用回呼。</summary>
    </member>
    <member name="P:System.Windows.Markup.XamlSetMarkupExtensionEventArgs.MarkupExtension">
      <summary>取得與這個 <see cref="T:System.Windows.Markup.MarkupExtension" /> 關聯的 <see cref="T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs" /> 參考。</summary>
      <returns>與這個 <see cref="T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs" /> 關聯的標記延伸。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetMarkupExtensionEventArgs.ServiceProvider">
      <summary>取得已傳遞給標記延伸的服務提供者資訊。</summary>
      <returns>已傳遞給標記延伸的服務提供者資訊。</returns>
    </member>
    <member name="T:System.Windows.Markup.XamlSetTypeConverterAttribute">
      <summary>指出類別可以使用型別轉換子來提供值，以及參考要用於型別轉換子設定情況的處理常式。</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlSetTypeConverterAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Windows.Markup.XamlSetTypeConverterAttribute" /> 類別的新執行個體。</summary>
      <param name="xamlSetTypeConverterHandler">處理常式的名稱，即要用於型別轉換子設定作業的處理常式。</param>
    </member>
    <member name="P:System.Windows.Markup.XamlSetTypeConverterAttribute.XamlSetTypeConverterHandler">
      <summary>取得在 <see cref="T:System.Windows.Markup.XamlSetTypeConverterAttribute" /> 中指定的 <paramref name="xamlSetTypeConverterHandler" /> 初始設定值 (處理常式名稱)。</summary>
      <returns>在 <see cref="T:System.Windows.Markup.XamlSetTypeConverterAttribute" /> 中指定的 <paramref name="xamlSetTypeConverterHandler" /> 值。</returns>
    </member>
    <member name="T:System.Windows.Markup.XamlSetTypeConverterEventArgs">
      <summary>提供資料給回呼，該回呼會在 XAML 寫入器使用型別轉換子呼叫來設定值時叫用。</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlSetTypeConverterEventArgs.#ctor(System.Xaml.XamlMember,System.ComponentModel.TypeConverter,System.Object,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo)">
      <summary>初始化 <see cref="T:System.Windows.Markup.XamlSetTypeConverterEventArgs" /> 類別的新執行個體。</summary>
      <param name="member">正在設定之成員的 XAML 型別系統/結構描述資訊。</param>
      <param name="typeConverter">正在叫用的特定型別轉換子執行個體。</param>
      <param name="value">要提供給正在設定之成員的值。</param>
      <param name="serviceProvider">可由 <paramref name="typeConverter" /> 類別使用的服務提供者資訊。</param>
      <param name="cultureInfo">可以在呼叫 <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" /> 或其他方法時，由 <paramref name="typeConverter" /> 類別使用的文化特性 (Culture) 資訊。</param>
    </member>
    <member name="M:System.Windows.Markup.XamlSetTypeConverterEventArgs.CallBase">
      <summary>提供方法，以便依現用型別之基底類別中的定義叫用回呼。</summary>
    </member>
    <member name="P:System.Windows.Markup.XamlSetTypeConverterEventArgs.CultureInfo">
      <summary>取得 <see cref="T:System.Globalization.CultureInfo" /> 資訊，該資訊可以在呼叫 <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" /> 和其他方法時由型別轉換子類別使用。</summary>
      <returns>可由型別轉換子類別使用的文化特性 (Culture) 資訊。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetTypeConverterEventArgs.ServiceProvider">
      <summary>取得可由型別轉換子類別使用的 <see cref="T:System.IServiceProvider" /> 資訊。</summary>
      <returns>可由 <paramref name="typeConverter" /> 類別使用的服務提供者資訊。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetTypeConverterEventArgs.TypeConverter">
      <summary>取得所叫用的 <see cref="T:System.ComponentModel.TypeConverter" /> 執行個體，以及提供型別轉換行為。</summary>
      <returns>可提供型別轉換行為的型別轉換子。</returns>
    </member>
    <member name="T:System.Windows.Markup.XamlSetValueEventArgs">
      <summary>提供資料給回呼，該回呼會在 <see cref="T:System.Xaml.XamlObjectWriter" /> 設定某些值時叫用。</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlSetValueEventArgs.#ctor(System.Xaml.XamlMember,System.Object)">
      <summary>初始化 <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> 類別的新執行個體。</summary>
      <param name="member">正在設定之成員的 XAML 型別系統/結構描述資訊。</param>
      <param name="value">要提供給成員的值。</param>
    </member>
    <member name="M:System.Windows.Markup.XamlSetValueEventArgs.CallBase">
      <summary>在衍生類別中覆寫時提供方式，以便依現用型別之基底類別中的定義叫用 <see langword="SetValue" /> 回呼。</summary>
    </member>
    <member name="P:System.Windows.Markup.XamlSetValueEventArgs.Handled">
      <summary>取得或設定值，這個值會判斷正在使用 <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> 的呼叫端是否不必呼叫 <see cref="M:System.Windows.Markup.XamlSetValueEventArgs.CallBase" /> 即可使用那些值。</summary>
      <returns>如果會用到這些值但不需要呼叫 <see cref="M:System.Windows.Markup.XamlSetValueEventArgs.CallBase" /> 則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetValueEventArgs.Member">
      <summary>取得正在設定之成員的 XAML 型別系統和 XAML 結構描述資訊。</summary>
      <returns>正在設定之成員的 XAML 型別系統和 XAML 結構描述資訊。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetValueEventArgs.Value">
      <summary>取得要提供給正在設定之成員的值。</summary>
      <returns>要提供給正在設定之成員的值。</returns>
    </member>
    <member name="T:System.Windows.Markup.XData">
      <summary>表示可以顯示為 <see langword="Value" /> 節點值的常值資料。</summary>
    </member>
    <member name="M:System.Windows.Markup.XData.#ctor">
      <summary>初始化 <see cref="T:System.Windows.Markup.XData" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Windows.Markup.XData.Text">
      <summary>取得或設定這個 <see cref="T:System.Windows.Markup.XData" /> 包裝的常值字串。</summary>
      <returns>常值字串。</returns>
    </member>
    <member name="P:System.Windows.Markup.XData.XmlReader">
      <summary>取得或設定常值資料的讀取器。</summary>
      <returns>常值資料的讀取器。</returns>
    </member>
    <member name="T:System.Windows.Markup.XmlLangPropertyAttribute">
      <summary>識別要與 xml:lang 屬性 (Attribute) 產生關聯的屬性 (Property)。</summary>
    </member>
    <member name="M:System.Windows.Markup.XmlLangPropertyAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Windows.Markup.XmlLangPropertyAttribute" /> 類別的新執行個體。</summary>
      <param name="name">要與 <see langword="xml:lang" /> 屬性 (Attribute) 產生關聯的屬性 (Property) 名稱。</param>
    </member>
    <member name="P:System.Windows.Markup.XmlLangPropertyAttribute.Name">
      <summary>取得這個屬性 (Attribute) 中指定之屬性 (Property) 的名稱。</summary>
      <returns>屬性的名稱。</returns>
    </member>
    <member name="T:System.Windows.Markup.XmlnsCompatibleWithAttribute">
      <summary>指定某個 XAML 命名空間可以由另一個 XAML 命名空間來歸類。 一般會在預先定義的 <see cref="T:System.Windows.Markup.XmlnsDefinitionAttribute" /> 中指出建立小計的 XAML 命名空間。</summary>
    </member>
    <member name="M:System.Windows.Markup.XmlnsCompatibleWithAttribute.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.Windows.Markup.XmlnsCompatibleWithAttribute" /> 類別的新執行個體。</summary>
      <param name="oldNamespace">參考 XAML 命名空間識別項。</param>
      <param name="newNamespace">歸類 XAML 命名空間識別項。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oldNamespace" /> 或 <paramref name="newNamespace" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Windows.Markup.XmlnsCompatibleWithAttribute.NewNamespace">
      <summary>取得此屬性報告的歸類命名空間識別項。</summary>
      <returns>此屬性中報告的歸類命名空間識別項。</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsCompatibleWithAttribute.OldNamespace">
      <summary>取得此屬性報告的參考命名空間識別項。</summary>
      <returns>參考命名空間識別項。</returns>
    </member>
    <member name="T:System.Windows.Markup.XmlnsDefinitionAttribute">
      <summary>指定 XAML 命名空間和 CLR 命名空間之間以每個組件為基礎的對應，然後讓 XAML 物件寫入器或 XAML 結構描述內容用於類型解析。</summary>
    </member>
    <member name="M:System.Windows.Markup.XmlnsDefinitionAttribute.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.Windows.Markup.XmlnsDefinitionAttribute" /> 類別的新執行個體。</summary>
      <param name="xmlNamespace">XAML 命名空間識別項。</param>
      <param name="clrNamespace">參考 CLR 命名空間名稱的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlNamespace" /> 或 <paramref name="clrNamespace" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Windows.Markup.XmlnsDefinitionAttribute.AssemblyName">
      <summary>取得或設定與此屬性相關聯之組件的名稱。</summary>
      <returns>組件名稱。</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsDefinitionAttribute.ClrNamespace">
      <summary>取得此屬性中所指定 CLR 命名空間的字串名稱。</summary>
      <returns>CLR 命名空間，指定為字串。</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsDefinitionAttribute.XmlNamespace">
      <summary>取得這個屬性中指定的 XAML 命名空間識別項。</summary>
      <returns>XAML 命名空間識別項。</returns>
    </member>
    <member name="T:System.Windows.Markup.XmlnsPrefixAttribute">
      <summary>識別在 XAML 檔案中撰寫項目和屬性時 (序列化)，或與具有 XAML 編輯功能的設計環境互動時，要與 XAML 使用方式的 XAML 命名空間產生關聯的建議前置詞。</summary>
    </member>
    <member name="M:System.Windows.Markup.XmlnsPrefixAttribute.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.Windows.Markup.XmlnsPrefixAttribute" /> 類別的新執行個體。</summary>
      <param name="xmlNamespace">XAML 命名空間識別項。</param>
      <param name="prefix">建議的前置字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlNamespace" /> 或 <paramref name="prefix" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Windows.Markup.XmlnsPrefixAttribute.Prefix">
      <summary>取得與這個屬性相關聯的建議前置詞。</summary>
      <returns>建議的前置字串。</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsPrefixAttribute.XmlNamespace">
      <summary>取得與這個屬性相關聯的 XAML 命名空間識別項。</summary>
      <returns>XAML 命名空間識別項。</returns>
    </member>
    <member name="T:System.Xaml.AmbientPropertyValue">
      <summary>報告環境屬性的相關資訊，做為 <see cref="T:System.Xaml.IAmbientProvider" /> 實作的一部分。</summary>
    </member>
    <member name="M:System.Xaml.AmbientPropertyValue.#ctor(System.Xaml.XamlMember,System.Object)">
      <summary>初始化 <see cref="T:System.Xaml.AmbientPropertyValue" /> 類別的新執行個體。</summary>
      <param name="property">表示環境屬性的識別項。</param>
      <param name="value">要報告的值。</param>
    </member>
    <member name="P:System.Xaml.AmbientPropertyValue.RetrievedProperty">
      <summary>取得表示環境屬性的 XAML 型別系統識別項 (<see cref="T:System.Xaml.XamlMember" />)。</summary>
      <returns>表示環境屬性的識別項。</returns>
    </member>
    <member name="P:System.Xaml.AmbientPropertyValue.Value">
      <summary>取得環境屬性的值。</summary>
      <returns>環境屬性的值。</returns>
    </member>
    <member name="T:System.Xaml.AttachableMemberIdentifier">
      <summary>提供可附加成員的 XAML 型別系統識別項表示。 識別項結構會針對可附加成員用法平行處理 <paramref name="declaringType" /><see langword="." /><paramref name="memberName" /> 字串格式。</summary>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.#ctor(System.Type,System.String)">
      <summary>初始化 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 類別的新執行個體。</summary>
      <param name="declaringType">識別項的 <paramref name="declaringType" /> 元件，這個元件應該符合宣告 <see cref="P:System.Xaml.XamlMember.Type" /> 的名稱。</param>
      <param name="memberName">識別項的 <paramref name="memberName" /> 元件，這個元件應該符合 <see cref="P:System.Xaml.XamlMember.Name" />。</param>
    </member>
    <member name="P:System.Xaml.AttachableMemberIdentifier.DeclaringType">
      <summary>取得或設定 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 的 <paramref name="declaringType" /> 元件值。</summary>
      <returns>
        <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 的 <paramref name="declaringType" /> 元件值。</returns>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.Equals(System.Object)">
      <summary>判斷這個 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 執行個體和指定的物件是否具有相同的值。</summary>
      <param name="obj">要與目前 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 比較的物件。</param>
      <returns>如果 <paramref name="obj" /> 是 <see cref="T:System.Xaml.AttachableMemberIdentifier" />，且其值與這個執行個體相同，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.Equals(System.Xaml.AttachableMemberIdentifier)">
      <summary>判斷這個執行個體和另一個指定的 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 物件是否具有相同的值。</summary>
      <param name="other">與目前的 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 相比較的 <see cref="T:System.Xaml.AttachableMemberIdentifier" />。</param>
      <returns>如果物件具有相同的值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.GetHashCode">
      <summary>傳回這個 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 的雜湊程式碼。</summary>
      <returns>整數雜湊程式碼。</returns>
    </member>
    <member name="P:System.Xaml.AttachableMemberIdentifier.MemberName">
      <summary>取得或設定 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 的 <paramref name="memberName" /> 元件值。</summary>
      <returns>
        <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 的 <paramref name="memberName" /> 元件值。</returns>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.op_Equality(System.Xaml.AttachableMemberIdentifier,System.Xaml.AttachableMemberIdentifier)">
      <summary>判斷兩個指定的 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 物件是否具有相同的值。</summary>
      <param name="left">
        <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 或 <see langword="null" />。</param>
      <param name="right">
        <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 或 <see langword="null" />。</param>
      <returns>如果 <see langword="true" /> 的值與 <paramref name="left" /> 的值相同，則為 <paramref name="right" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.op_Inequality(System.Xaml.AttachableMemberIdentifier,System.Xaml.AttachableMemberIdentifier)">
      <summary>判斷兩個指定的 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 物件是否具有不同的值。</summary>
      <param name="left">
        <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 或 <see langword="null" />。</param>
      <param name="right">
        <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 或 <see langword="null" />。</param>
      <returns>如果 <paramref name="left" /> 的值與 <paramref name="right" /> 的值不同，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.ToString">
      <summary>傳回表示目前 <see cref="T:System.String" /> 的 <see cref="T:System.Xaml.AttachableMemberIdentifier" /></summary>
      <returns>
        <see cref="T:System.String" />，代表示目前的 <see cref="T:System.Xaml.AttachableMemberIdentifier" />。</returns>
    </member>
    <member name="T:System.Xaml.AttachablePropertyServices">
      <summary>提供靜態 Helper 方法，這些方法會從可附加屬性中取得值和存取子方法資訊，並使用附加的屬性存放區。</summary>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.CopyPropertiesTo(System.Object,System.Collections.Generic.KeyValuePair{System.Xaml.AttachableMemberIdentifier,System.Object}[],System.Int32)">
      <summary>從指定的可附加屬性存放區，將所有可附加的屬性值組複製到目的陣列中。</summary>
      <param name="instance">實作 <see cref="T:System.Xaml.IAttachedPropertyStore" /> 的特定可附加屬性存放區，或任何要存取靜態預設可附加屬性存放區的非 null 物件。</param>
      <param name="array">目的陣列。 這個陣列為泛型陣列，應該以無維度形式傳遞，且應該具有 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 和 <see langword="object" /> 的部分。</param>
      <param name="index">要在其中進行複製的來源索引。</param>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.GetAttachedPropertyCount(System.Object)">
      <summary>傳回指定之存放區中可附加屬性項目的計數。</summary>
      <param name="instance">實作 <see cref="T:System.Xaml.IAttachedPropertyStore" /> 的特定可附加屬性存放區，或任何要存取靜態預設可附加屬性存放區的非 null 物件。</param>
      <returns>存放區中項目的整數計數。</returns>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.RemoveProperty(System.Object,System.Xaml.AttachableMemberIdentifier)">
      <summary>從指定的存放區中，移除指定之可附加屬性的項目。</summary>
      <param name="instance">實作 <see cref="T:System.Xaml.IAttachedPropertyStore" /> 的特定可附加屬性存放區，或任何要存取靜態預設可附加屬性存放區的非 null 物件。</param>
      <param name="name">要從存放區移除之可附加屬性項目的識別項。</param>
      <returns>如果已在存放區中找到並移除 <paramref name="name" /> 的可附加屬性項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.SetProperty(System.Object,System.Xaml.AttachableMemberIdentifier,System.Object)">
      <summary>在指定的存放區中，設定指定之可附加屬性的值。</summary>
      <param name="instance">實作 <see cref="T:System.Xaml.IAttachedPropertyStore" /> 的特定可附加屬性存放區，或任何要使用靜態預設可附加屬性存放區的非 null 物件。</param>
      <param name="name">要設定值之可附加屬性項目的識別項。</param>
      <param name="value">要設定的值。</param>
      <exception cref="T:System.InvalidOperationException">無法在存放區中設定值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.TryGetProperty(System.Object,System.Xaml.AttachableMemberIdentifier,System.Object@)">
      <summary>嘗試在指定的存放區中，取得指定之可附加屬性的值。 如果存放區中沒有特定的可附加屬性，則不要擲回例外狀況。</summary>
      <param name="instance">實作 <see cref="T:System.Xaml.IAttachedPropertyStore" /> 的特定可附加屬性存放區，或任何要使用靜態預設可附加屬性存放區的非 null 物件。</param>
      <param name="name">要取得值之可附加屬性項目的識別項。</param>
      <param name="value">Out 參數。 如果當這個方法傳回時，<paramref name="name" /> 存在存放區中且有一個值，則包含值的目的地物件。</param>
      <returns>如果已在存放區中找到 <paramref name="name" /> 的可附加屬性項目，且值已張貼至 <paramref name="value" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.TryGetProperty``1(System.Object,System.Xaml.AttachableMemberIdentifier,``0@)">
      <summary>嘗試在指定的存放區中取得指定之可附加屬性的值，並傳回泛型輸出格式。 如果存放區中沒有特定的可附加屬性，則不要擲回例外狀況。</summary>
      <param name="instance">實作 <see cref="T:System.Xaml.IAttachedPropertyStore" /> 的特定可附加屬性存放區，或任何要存取靜態預設可附加屬性存放區的非 null 物件。</param>
      <param name="name">要取得值之可附加屬性項目的識別項。</param>
      <param name="value">Out 參數。 如果當這個方法傳回時，<paramref name="name" /> 存在存放區中且有一個值，則包含值的目的地物件。</param>
      <typeparam name="T">預期的輸出型別。</typeparam>
      <returns>如果已在存放區中找到 <paramref name="name" /> 的可附加屬性項目，且值已張貼至 <paramref name="value" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Xaml.IAmbientProvider">
      <summary>表示服務，這個服務可以將環境屬性或環境型別的資訊項目傳回給型別轉換器和標記延伸。</summary>
    </member>
    <member name="M:System.Xaml.IAmbientProvider.GetAllAmbientValues(System.Collections.Generic.IEnumerable{System.Xaml.XamlType},System.Boolean,System.Collections.Generic.IEnumerable{System.Xaml.XamlType},System.Xaml.XamlMember[])">
      <summary>針對要求的型別和屬性集，傳回環境屬性資訊項目的可列舉集。</summary>
      <param name="ceilingTypes">指定一個或多個型別，當在物件圖形中往上周遊時遇到這些型別，即應該停止評估。 這個型別含有所需的環境屬性。 可以是 <see langword="null" />。</param>
      <param name="searchLiveStackOnly">
        <see langword="true" /> 表示不使用已儲存的內容，<see langword="false" /> 表示使用已儲存的內容。 預設為 <see langword="false" />。</param>
      <param name="types">指定一個或多個型別識別項物件，識別要視為環境的型別。</param>
      <param name="properties">指定一個或多個屬性識別項物件，這些物件識別要視為環境屬性的屬性。</param>
      <returns>要求的型別和屬性集之環境屬性資訊項目的可列舉集。 每個傳回之 <see cref="T:System.Xaml.AmbientPropertyValue" /> 的屬性資訊都會符合其中一個輸入 <paramref name="types" /> 或 <paramref name="properties" />。</returns>
    </member>
    <member name="M:System.Xaml.IAmbientProvider.GetAllAmbientValues(System.Collections.Generic.IEnumerable{System.Xaml.XamlType},System.Xaml.XamlMember[])">
      <summary>針對要求的屬性集，傳回環境屬性資訊項目的可列舉集。</summary>
      <param name="ceilingTypes">指定一個或多個型別，當在物件圖形中往上周遊時遇到這些型別，即應該停止評估。 這個型別含有所需的環境屬性。 可以是 <see langword="null" />。</param>
      <param name="properties">指定一個或多個屬性識別項物件，這些物件識別要視為環境屬性的屬性。</param>
      <returns>所要求屬性集之環境屬性資訊項目的可列舉集。 每個傳回之 <see cref="T:System.Xaml.AmbientPropertyValue" /> 的屬性資訊都會符合其中一個輸入 <paramref name="properties" />。</returns>
    </member>
    <member name="M:System.Xaml.IAmbientProvider.GetAllAmbientValues(System.Xaml.XamlType[])">
      <summary>針對要求的型別，傳回可能環境型別之物件執行個體的可列舉集。</summary>
      <param name="types">要從中擷取環境型別資訊的型別集。</param>
      <returns>物件的可列舉集，表示所要求 <see cref="T:System.Xaml.XamlType" /> 識別項集的值。</returns>
    </member>
    <member name="M:System.Xaml.IAmbientProvider.GetFirstAmbientValue(System.Collections.Generic.IEnumerable{System.Xaml.XamlType},System.Xaml.XamlMember[])">
      <summary>從要求的屬性集傳回單一環境屬性資訊項目，以第一個遇到的屬性為準。</summary>
      <param name="ceilingTypes">指定一個或多個型別，當在物件圖形中往上周遊時遇到這些型別，即應該停止評估。 這個型別含有所需的環境屬性。</param>
      <param name="properties">指定一個或多個物件，這些物件識別要視為環境屬性的屬性。</param>
      <returns>在 <paramref name="properties" /> 清單中發現的第一個環境屬性值的單一環境屬性資訊項目。</returns>
    </member>
    <member name="M:System.Xaml.IAmbientProvider.GetFirstAmbientValue(System.Xaml.XamlType[])">
      <summary>傳回第一個相符物件，這個物件可能是符合所要求型別的環境型別。</summary>
      <param name="types">要從中擷取環境型別資訊的型別集。</param>
      <returns>所要求之集合的第一個結果物件。</returns>
    </member>
    <member name="T:System.Xaml.IAttachedPropertyStore">
      <summary>表示物件 (其中設定了可附加成員) 的可附加成員存放區。 之後可以使用 <see cref="T:System.Xaml.AttachablePropertyServices" /> 參考這個可附加成員存放區。</summary>
    </member>
    <member name="M:System.Xaml.IAttachedPropertyStore.CopyPropertiesTo(System.Collections.Generic.KeyValuePair{System.Xaml.AttachableMemberIdentifier,System.Object}[],System.Int32)">
      <summary>從這個可附加成員存放區，將所有可附加成員/值組複製到目的陣列中。</summary>
      <param name="array">目的陣列。 這個陣列為泛型陣列，應該以無維度形式傳遞，且應該具有 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 和 <see langword="object" /> 的部分。</param>
      <param name="index">要開始進行複製的來源索引處。</param>
    </member>
    <member name="P:System.Xaml.IAttachedPropertyStore.PropertyCount">
      <summary>取得這個可附加成員存放區中可附加成員項目的計數。</summary>
      <returns>存放區中項目的整數計數。</returns>
    </member>
    <member name="M:System.Xaml.IAttachedPropertyStore.RemoveProperty(System.Xaml.AttachableMemberIdentifier)">
      <summary>從這個可附加成員存放區，移除指定之可附加成員的項目。</summary>
      <param name="attachableMemberIdentifier">要移除之可附加成員項目的 XAML 型別系統識別項。</param>
      <returns>如果已在存放區中找到並移除 <paramref name="attachableMemberIdentifier" /> 的可附加成員項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.IAttachedPropertyStore.SetProperty(System.Xaml.AttachableMemberIdentifier,System.Object)">
      <summary>在指定的存放區中，設定指定之可附加成員的值。</summary>
      <param name="attachableMemberIdentifier">要設定之可附加成員項目的 XAML 型別系統識別項。</param>
      <param name="value">要設定的值。</param>
    </member>
    <member name="M:System.Xaml.IAttachedPropertyStore.TryGetProperty(System.Xaml.AttachableMemberIdentifier,System.Object@)">
      <summary>嘗試在指定的存放區中，取得指定之可附加成員的值。</summary>
      <param name="attachableMemberIdentifier">要取得之可附加成員項目的 XAML 型別系統識別項。</param>
      <param name="value">Out 參數。 如果當這個方法傳回時，<paramref name="attachableMemberIdentifier" /> 存在存放區中且有一個值，則包含值的目的地物件。</param>
      <returns>如果已在存放區中找到 <paramref name="attachableMemberIdentifier" /> 的可附加成員項目，且值已張貼至 <paramref name="value" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Xaml.IDestinationTypeProvider">
      <summary>表示服務，這個服務可以傳回目的型別的 CLR 型別系統識別項。 當屬性設定作業的目的型別是透過反映或其他機制間接報告時，目的型別就顯得很重要。</summary>
    </member>
    <member name="M:System.Xaml.IDestinationTypeProvider.GetDestinationType">
      <summary>傳回 CLR <see cref="T:System.Type" />，這個項目識別相關型別轉換器或標記延伸的目的型別。</summary>
      <returns>目的型別的 CLR <see cref="T:System.Type" /> 值。</returns>
    </member>
    <member name="T:System.Xaml.INamespacePrefixLookup">
      <summary>表示服務，這個服務可以將 XAML 命名空間對應的建議前置詞傳回給消費者。 消費者可能包括設計環境或序列化程式。</summary>
    </member>
    <member name="M:System.Xaml.INamespacePrefixLookup.LookupPrefix(System.String)">
      <summary>傳回指定之 XAML 命名空間識別項的建議前置詞。</summary>
      <param name="ns">要取得前置詞的 XAML 命名空間識別項字串。</param>
      <returns>建議的前置字元。</returns>
    </member>
    <member name="T:System.Xaml.IRootObjectProvider">
      <summary>描述服務，此服務可以傳回正在剖析之標記的根物件。</summary>
    </member>
    <member name="P:System.Xaml.IRootObjectProvider.RootObject">
      <summary>從標記或從物件圖形取得根物件。</summary>
      <returns>根物件。</returns>
    </member>
    <member name="T:System.Xaml.IXamlIndexingReader">
      <summary>針對節點型 XAML 讀取器的簡單實作，提供表示索引節點控制的服務。</summary>
    </member>
    <member name="P:System.Xaml.IXamlIndexingReader.Count">
      <summary>取得目前外部節點集中的節點數。</summary>
      <returns>目前外部節點集中的節點數。</returns>
    </member>
    <member name="P:System.Xaml.IXamlIndexingReader.CurrentIndex">
      <summary>取得或設定在 XAML 節點索引清單檢視中，目前讀取器位置的索引編號。</summary>
      <returns>目前讀取器位置的索引編號。</returns>
    </member>
    <member name="T:System.Xaml.IXamlLineInfo">
      <summary>描述可在 XAML 讀取器實作中報告文字行資訊的服務。</summary>
    </member>
    <member name="P:System.Xaml.IXamlLineInfo.HasLineInfo">
      <summary>取得值，這個值指定行資訊是否可供使用。</summary>
      <returns>如果有可用的行資訊則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.IXamlLineInfo.LineNumber">
      <summary>取得要報告的行號。</summary>
      <returns>要報告的行號。</returns>
    </member>
    <member name="P:System.Xaml.IXamlLineInfo.LinePosition">
      <summary>取得要報告的行位置。</summary>
      <returns>要報告的行位置。</returns>
    </member>
    <member name="T:System.Xaml.IXamlLineInfoConsumer">
      <summary>描述服務，這項服務可供 XAML 寫入器使用所報告的行資訊，然後在輸出中納入此資訊。</summary>
    </member>
    <member name="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)">
      <summary>收集行資訊。</summary>
      <param name="lineNumber">要在輸出中使用的行號。</param>
      <param name="linePosition">要在輸出中使用的行位置。</param>
    </member>
    <member name="P:System.Xaml.IXamlLineInfoConsumer.ShouldProvideLineInfo">
      <summary>取得值，這個值決定行資訊服務是否應該提供值 (因此也應該在必要時呼叫 <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" />)。</summary>
      <returns>如果實作會使用行資訊，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Xaml.IXamlNameProvider">
      <summary>提供服務，這個服務會在儲存及寫入作業期間用來輸入物件和傳回 XAML 名稱。</summary>
    </member>
    <member name="M:System.Xaml.IXamlNameProvider.GetName(System.Object)">
      <summary>擷取指定物件的 XAML 名稱。</summary>
      <param name="value">要取得名稱的物件。</param>
      <returns>要求之物件的 XAML 名稱值。</returns>
    </member>
    <member name="T:System.Xaml.IXamlNameResolver">
      <summary>描述服務，這個服務可以傳回依 XAML 名稱指定的物件，或傳回會延後名稱解析的語彙基元。 該服務也可以傳回 XAML 名稱範圍中所有具名物件的可列舉集。</summary>
    </member>
    <member name="M:System.Xaml.IXamlNameResolver.GetAllNamesAndValuesInScope">
      <summary>傳回 XAML 名稱範圍中所有具名物件的可列舉集。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 物件的可列舉集。 在每個 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 中，<see cref="P:System.Collections.Generic.KeyValuePair`2.Key" /> 部分是字串，而 <see cref="P:System.Collections.Generic.KeyValuePair`2.Value" /> 部分是在 XAML 名稱範圍中使用 <see cref="P:System.Collections.Generic.KeyValuePair`2.Key" /> 名稱的部分。</returns>
    </member>
    <member name="M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Collections.Generic.IEnumerable{System.String})">
      <summary>傳回可修正會產生向前參考之特定標記模式的物件。</summary>
      <param name="names">可能之向前參考的名稱集合。</param>
      <returns>物件，提供將進行評估之查詢行為的語彙基元。</returns>
    </member>
    <member name="M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
      <summary>傳回可修正會產生向前參考之特定標記模式的物件。</summary>
      <param name="names">可能之向前參考的名稱集合。</param>
      <param name="canAssignDirectly">
        <see langword="true" /> 表示立即將已解析的名稱參考指派給目標屬性。 <see langword="false" /> 表示呼叫使用者程式碼以重新剖析。 預設行為是 <see langword="false" />。</param>
      <returns>物件，提供將進行評估之查詢行為的語彙基元。</returns>
    </member>
    <member name="P:System.Xaml.IXamlNameResolver.IsFixupTokenAvailable">
      <summary>取得值，這個值判斷是否可以呼叫 <see cref="M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Collections.Generic.IEnumerable{System.String},System.Boolean)" />，以便將名稱解析為正向解析的語彙基元。</summary>
      <returns>如果有 <see cref="M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Collections.Generic.IEnumerable{System.String},System.Boolean)" /> 可實作來傳回正向解析的有用語彙基元，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="E:System.Xaml.IXamlNameResolver.OnNameScopeInitializationComplete">
      <summary>發生於 XAML 處理器已將所有相關名稱註冊至支援 XAML 名稱範圍中時。</summary>
    </member>
    <member name="M:System.Xaml.IXamlNameResolver.Resolve(System.String)">
      <summary>從名稱參考解析物件。</summary>
      <param name="name">要解析的名稱參考。</param>
      <returns>已解析的物件，或是 null。</returns>
    </member>
    <member name="M:System.Xaml.IXamlNameResolver.Resolve(System.String,System.Boolean@)">
      <summary>從名稱參考來解析物件，並提供追蹤值，報告是否已針對物件圖形用途完整初始化物件。</summary>
      <param name="name">要解析的名稱參考。</param>
      <param name="isFullyInitialized">如果當這個方法傳回時，傳回的物件對未解析的參考具有任何相依性，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <returns>物件，提供將進行評估之查詢行為的語彙基元。</returns>
    </member>
    <member name="T:System.Xaml.IXamlNamespaceResolver">
      <summary>描述服務，這項服務可以傳回以 XAML 標記中對應的前置詞為基礎的 XAML 命名空間。</summary>
    </member>
    <member name="M:System.Xaml.IXamlNamespaceResolver.GetNamespace(System.String)">
      <summary>針對指定的前置字串擷取 XAML 命名空間識別項。</summary>
      <param name="prefix">要擷取 XAML 命名空間資訊的前置詞。</param>
      <returns>所要求的 XAML 命名空間識別項 (字串形式)。</returns>
    </member>
    <member name="M:System.Xaml.IXamlNamespaceResolver.GetNamespacePrefixes">
      <summary>傳回作用中 XAML 結構描述內容中所有可能的前置詞對 XAML 命名空間對應 (<see cref="T:System.Xaml.NamespaceDeclaration" /> 值)。</summary>
      <returns>
        <see cref="T:System.Xaml.NamespaceDeclaration" /> 值的可列舉集合。 若要取得所有前置字串，請從傳回之集合中的每個值取得 <see cref="P:System.Xaml.NamespaceDeclaration.Prefix" /> 值。 若要取得特定 XAML 命名空間的前置詞，請處理任何具有所需 <see cref="P:System.Xaml.NamespaceDeclaration.Namespace" /> 值的傳回值。</returns>
    </member>
    <member name="T:System.Xaml.IXamlObjectWriterFactory">
      <summary>表示會根據目前內部剖析器內容來產生 <see cref="T:System.Xaml.XamlObjectWriter" /> 的服務。</summary>
    </member>
    <member name="M:System.Xaml.IXamlObjectWriterFactory.GetParentSettings">
      <summary>從原始內部剖析器內容傳回 <see cref="T:System.Xaml.XamlObjectWriterSettings" />。</summary>
      <returns>來自原始內部剖析器內容的設定。</returns>
    </member>
    <member name="M:System.Xaml.IXamlObjectWriterFactory.GetXamlObjectWriter(System.Xaml.XamlObjectWriterSettings)">
      <summary>傳回以作用中 XAML 結構描述內容為基礎的 <see cref="T:System.Xaml.XamlObjectWriter" />。</summary>
      <param name="settings">用於建構和初始化 <see cref="T:System.Xaml.XamlObjectWriter" /> 的設定。</param>
      <returns>具有指定之設定的 <see cref="T:System.Xaml.XamlObjectWriter" />。</returns>
    </member>
    <member name="T:System.Xaml.IXamlSchemaContextProvider">
      <summary>表示服務，這個服務會將 XAML 結構描述內容資訊提供給型別轉換器和標記延伸。</summary>
    </member>
    <member name="P:System.Xaml.IXamlSchemaContextProvider.SchemaContext">
      <summary>取得服務內容所報告的 <see cref="T:System.Xaml.XamlSchemaContext" />。</summary>
      <returns>服務內容所報告的 XAML 結構描述內容。</returns>
    </member>
    <member name="T:System.Xaml.NamespaceDeclaration">
      <summary>宣告 XAML 命名空間的識別項和前置詞 (宣告的方式是將這些字串儲存為個別屬性)。</summary>
    </member>
    <member name="M:System.Xaml.NamespaceDeclaration.#ctor(System.String,System.String)">
      <summary>使用初始屬性值，初始化 <see cref="T:System.Xaml.NamespaceDeclaration" /> 類別的新執行個體。</summary>
      <param name="ns">字串形式的 XAML 命名空間識別項。</param>
      <param name="prefix">在前置詞對應中用於命名空間的字串前置詞。</param>
    </member>
    <member name="P:System.Xaml.NamespaceDeclaration.Namespace">
      <summary>取得 <see cref="T:System.Xaml.NamespaceDeclaration" /> 的識別項部分。</summary>
      <returns>XAML 命名空間宣告的識別項。</returns>
    </member>
    <member name="P:System.Xaml.NamespaceDeclaration.Prefix">
      <summary>取得前置詞，這個前置詞會做為 <see cref="T:System.Xaml.NamespaceDeclaration" /> 的 XAML 命名空間對應前置詞。</summary>
      <returns>這個 <see cref="T:System.Xaml.NamespaceDeclaration" /> 的前置字串。</returns>
    </member>
    <member name="T:System.Xaml.Permissions.XamlAccessLevel">
      <summary>針對 XAML 載入目的，定義組件和型別的存取控制。</summary>
    </member>
    <member name="M:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessTo(System.Reflection.Assembly)">
      <summary>根據 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 所要求的組件傳回 <see cref="T:System.Reflection.Assembly" /> 執行個體。</summary>
      <param name="assembly">要求的組件。</param>
      <returns>
        <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 執行個體，其中使用 <paramref name="assembly" /> 值做為 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" /> 的來源資訊。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assembly" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessTo(System.Reflection.AssemblyName)">
      <summary>根據 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 所要求的組件傳回 <see cref="T:System.Reflection.AssemblyName" /> 執行個體。</summary>
      <param name="assemblyName">要求的組件名稱。</param>
      <returns>
        <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 執行個體，其中使用 <paramref name="assemblyName" /> 值做為 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" /> 的來源資訊。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyName" /> 不是有效的完整組件名稱。</exception>
    </member>
    <member name="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName">
      <summary>取得組件的 <see cref="T:System.Reflection.AssemblyName" />，這個 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 會決定此組件的使用權限。</summary>
      <returns>組件的 <see cref="T:System.Reflection.AssemblyName" />，這個 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 會決定此組件的使用權限。</returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessTo(System.String)">
      <summary>根據以限定名稱指定的特定型別，傳回 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 執行個體。</summary>
      <param name="assemblyQualifiedTypeName">剖析為組件限定型別名稱的字串。</param>
      <returns>
        <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 執行個體，其中使用 <paramref name="assemblyQualifiedTypeName" /> 值做為 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessToTypeName" /> 的來源資訊，並由型別上的反映來決定 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyQualifiedTypeName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyQualifiedTypeName" /> 不是有效的組件限定型別名稱。
-或-
<paramref name="assemblyQualifiedTypeName" /> 內的組件名稱不是有效的組件名稱。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessTo(System.Type)">
      <summary>根據 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 所指定的特定型別，傳回 <see cref="T:System.Type" /> 執行個體。</summary>
      <param name="type">要求存取的 <see cref="T:System.Type" />。</param>
      <returns>
        <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 執行個體，其中使用 <paramref name="type" /> 值做為 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessToTypeName" /> 的來源資訊，並由型別上的反映來決定 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessToTypeName">
      <summary>取得型別的未限定字串名稱，這個 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 會決定此型別的使用權限。</summary>
      <returns>型別的未限定字串名稱，這個 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 會決定此型別的使用權限。</returns>
    </member>
    <member name="T:System.Xaml.Permissions.XamlLoadPermission">
      <summary>針對從 XAML 讀取器或寫入器使用的組件中載入型別，宣告使用權限。</summary>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.#ctor(System.Collections.Generic.IEnumerable{System.Xaml.Permissions.XamlAccessLevel})">
      <summary>使用特定 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 值的可列舉集合，初始化 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 類別的新執行個體。</summary>
      <param name="allowedAccess">特定 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 值的可舉列集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="allowedAccess" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="allowedAccess" /> 包含無效的資訊，例如 Null 項目。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>使用現有的使用權限，初始化 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 類別的新執行個體。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 列舉值。</param>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.#ctor(System.Xaml.Permissions.XamlAccessLevel)">
      <summary>使用單一 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 值，初始化 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 類別的新執行個體。</summary>
      <param name="allowedAccess">定義性的 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="allowedAccess" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xaml.Permissions.XamlLoadPermission.AllowedAccess">
      <summary>取得這個 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 表示的所有 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 值的清單。</summary>
      <returns>
        <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 值的唯讀清單，或 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.Copy">
      <summary>建立並傳回目前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 的相同複本。</summary>
      <returns>目前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 的複本。</returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.Equals(System.Object)">
      <param name="obj" />
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.FromXml(System.Security.SecurityElement)">
      <summary>透過 XML 編碼，重新建構具有指定狀態的安全性物件。</summary>
      <param name="elem">用來重新建構安全性物件的 XML 編碼方式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elem" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elem" /> 不包含 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 的 XML 編碼方式。
-或-
不支援內 <paramref name="elem" /> 的版本屬性。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.GetHashCode" />
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.Includes(System.Xaml.Permissions.XamlAccessLevel)">
      <summary>傳回這個 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 的 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 清單中是否包括指定的 <see cref="P:System.Xaml.Permissions.XamlLoadPermission.AllowedAccess" />。</summary>
      <param name="requestedAccess">要檢查的特定 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />。</param>
      <returns>如果 <paramref name="requestedAccess" /> 是目前 <see cref="P:System.Xaml.Permissions.XamlLoadPermission.AllowedAccess" /> 的 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 清單中的項目，則為 <see langword="true" />。 否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestedAccess" /> 為 null。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.Intersect(System.Security.IPermission)">
      <summary>建立並傳回目前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 和指定之使用權限交集而成的 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />。</summary>
      <param name="target">要與目前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 交集的 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />。 可以是 <see langword="null" />。</param>
      <returns>新的使用權限，表示目前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 和指定之 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 的交集。 如果交集是空的，這個新權限就是 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 是 <see langword="null" /> 或不是 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>判斷目前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 是否為指定之使用權限的子集。</summary>
      <param name="target">要測試子集關聯性的權限。 可以是 <see langword="null" />。</param>
      <returns>如果目前的 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 是指定之使用權限的子集，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 是 <see langword="null" /> 或不是 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.IsUnrestricted">
      <summary>傳回這個 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 是否代表不受限制的使用權限。</summary>
      <returns>如果這個 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 代表不受限制的使用權限，則為 <see langword="true" />。 如果這個 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 在 <see cref="P:System.Xaml.Permissions.XamlLoadPermission.AllowedAccess" /> 中有特定的存取層級限制，或沒有使用權限，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.ToXml">
      <summary>建立這個 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 和其目前狀態的 XML 編碼。</summary>
      <returns>這個 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 的 XML 編碼，包含任何狀態資訊。</returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.Union(System.Security.IPermission)">
      <summary>建立目前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 和指定之使用權限聯集而成的使用權限。</summary>
      <param name="other">要與目前的 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 結合的 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />。 可以是 <see langword="null" />。</param>
      <returns>新 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />，表示目前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 和指定 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 的聯集。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 是 <see langword="null" /> 或不是 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />。</exception>
    </member>
    <member name="T:System.Xaml.Schema.AllowedMemberLocations">
      <summary>指定在 XAML 中設定屬性時，在屬性上強制執行的語法限制 (如 <see cref="T:System.Xaml.XamlDirective" /> 所報告)。</summary>
    </member>
    <member name="F:System.Xaml.Schema.AllowedMemberLocations.Any">
      <summary>可以在 <see cref="F:System.Xaml.Schema.AllowedMemberLocations.Attribute" /> 或 <see cref="F:System.Xaml.Schema.AllowedMemberLocations.MemberElement" /> 位置中設定屬性 (這個列舉成員是定義為這些值的組合)。 (這個列舉成員已定義為這些值的組合)。</summary>
    </member>
    <member name="F:System.Xaml.Schema.AllowedMemberLocations.Attribute">
      <summary>可以在 XAML 屬性 (Attribute) 語法中設定屬性 (Property)。</summary>
    </member>
    <member name="F:System.Xaml.Schema.AllowedMemberLocations.MemberElement">
      <summary>可以在 XAML 屬性項目語法中設定屬性。</summary>
    </member>
    <member name="F:System.Xaml.Schema.AllowedMemberLocations.None">
      <summary>完全無法在 XAML 中設定屬性。 這是預設值。</summary>
    </member>
    <member name="T:System.Xaml.Schema.ShouldSerializeResult">
      <summary>定義 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 會報告的序列化行為。</summary>
    </member>
    <member name="F:System.Xaml.Schema.ShouldSerializeResult.Default">
      <summary>未知，由成員的型別決定。</summary>
    </member>
    <member name="F:System.Xaml.Schema.ShouldSerializeResult.False">
      <summary>不要序列化結果。</summary>
    </member>
    <member name="F:System.Xaml.Schema.ShouldSerializeResult.True">
      <summary>序列化結果。</summary>
    </member>
    <member name="T:System.Xaml.Schema.XamlCollectionKind">
      <summary>描述 XAML 成員使用的集合比喻 (如果有的話)。</summary>
    </member>
    <member name="F:System.Xaml.Schema.XamlCollectionKind.Array">
      <summary>XAML 成員支援陣列集合。</summary>
    </member>
    <member name="F:System.Xaml.Schema.XamlCollectionKind.Collection">
      <summary>XAML 成員支援清單或集合。</summary>
    </member>
    <member name="F:System.Xaml.Schema.XamlCollectionKind.Dictionary">
      <summary>XAML 成員支援字典 (機碼值組)。</summary>
    </member>
    <member name="F:System.Xaml.Schema.XamlCollectionKind.None">
      <summary>XAML 成員不支援集合。</summary>
    </member>
    <member name="T:System.Xaml.Schema.XamlMemberInvoker">
      <summary>提供延伸點，這個延伸點可透過反映以外的技術來存取 XAML 成員的成員特性。</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlMemberInvoker.#ctor">
      <summary>初始化 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlMemberInvoker.#ctor(System.Xaml.XamlMember)">
      <summary>根據提供的 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />，初始化 <see cref="T:System.Xaml.XamlMember" /> 類別的新執行個體。</summary>
      <param name="member">特定 XAML 成員與這個 <see cref="T:System.Xaml.XamlMember" /> 相關的 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlMemberInvoker.GetValue(System.Object)">
      <summary>從執行個體取得相關屬性的值。</summary>
      <param name="instance">成員的擁有者型別執行個體。</param>
      <returns>要求的屬性值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">在以未知 <see cref="T:System.Xaml.XamlMember" /> 為根據的 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 上，叫用這個方法。
-或-
在唯寫成員上叫用這個方法。
-或-
<see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlMemberInvoker.SetValue(System.Object,System.Object)">
      <summary>設定執行個體上相關屬性的值。</summary>
      <param name="instance">成員的擁有者型別執行個體。</param>
      <param name="value">要設定的屬性值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">在以未知 <see cref="T:System.Xaml.XamlMember" /> 為根據的 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 上，叫用這個方法。
-或-
在唯讀成員上叫用這個方法。
-或-
<see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlMemberInvoker.ShouldSerializeValue(System.Object)">
      <summary>表示值是否需要由序列化處理序保存。</summary>
      <param name="instance">執行個體，具有需要檢查持續性的屬性。</param>
      <returns>列舉值。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter">
      <summary>取得 CLR 方法的 <see cref="T:System.Reflection.MethodInfo" />，這個方法會取得與此 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 相關之屬性的值。</summary>
      <returns>CLR 方法的 <see cref="T:System.Reflection.MethodInfo" />，這個方法會取得與此 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 相關之屬性的值，或 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter">
      <summary>取得 CLR 方法的 <see cref="T:System.Reflection.MethodInfo" />，這個方法會設定與此 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 相關之屬性的值。</summary>
      <returns>CLR 方法的 <see cref="T:System.Reflection.MethodInfo" />，這個方法會設定與此 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 相關之屬性的值，或 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker">
      <summary>提供靜態值，這個值表示未完整實作的未知 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />。</summary>
      <returns>靜態值，表示未完整實作的未知 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />。</returns>
    </member>
    <member name="T:System.Xaml.Schema.XamlTypeInvoker">
      <summary>提供延伸點，這個延伸點可透過反映和建構函式以外的技術來建構 XAML 型別的執行個體。</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.#ctor">
      <summary>初始化 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)">
      <summary>根據提供的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />，初始化 <see cref="T:System.Xaml.XamlType" /> 類別的新執行個體。</summary>
      <param name="type">特定 XAML 型別與這個 <see cref="T:System.Xaml.XamlType" /> 相關的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
      <summary>將提供的項目加入至與這個 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 相關之類型的執行個體。</summary>
      <param name="instance">
        <see cref="T:System.Xaml.XamlType" /> (用於建構這個 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />) 所指定之類型的執行個體。</param>
      <param name="item">要新增的項目。</param>
      <exception cref="T:System.NotSupportedException">在以未知 <see cref="T:System.Xaml.XamlType" /> 為根據的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上，叫用這個方法。
-或-
在其中的相關類型不是集合的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上，叫用這個方法。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Xaml.XamlSchemaException">這個 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 的 <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> 會傳回 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
      <summary>將提供的索引鍵和項目值加入至與這個 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 相關之類型的執行個體。</summary>
      <param name="instance">
        <see cref="T:System.Xaml.XamlType" /> (用於建構這個 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />) 所指定之類型的執行個體。</param>
      <param name="key">要加入項目的字典索引鍵。</param>
      <param name="item">要加入的項目值。</param>
      <exception cref="T:System.NotSupportedException">在以未知 <see cref="T:System.Xaml.XamlType" /> 為根據的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上，叫用這個方法。
-或-
在其中的相關類型不是字典的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上，叫用這個方法。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Xaml.XamlSchemaException">這個 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 的 <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> 會傳回 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])">
      <summary>根據這個 <see cref="T:System.Xaml.XamlType" /> 之由建構啟始的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />，建立物件執行個體。</summary>
      <param name="arguments">為執行個體提供 <see langword="x:ConstructorArgs" /> 的物件陣列。 對於不需要或不使用 <see langword="null" /> 的型別，可能為 <see langword="x:ConstructorArgs" />。</param>
      <returns>已根據這個 <see cref="T:System.Xaml.XamlType" /> 之由建構啟始的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 所建立的執行個體。</returns>
      <exception cref="T:System.MissingMethodException">無法解析建構函式。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
      <summary>針對與集合或字典相關的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />，傳回相關的 <see langword="Add" /> 方法。</summary>
      <param name="contentType">
        <see langword="Add" /> 方法所使用項目型別的 <see cref="T:System.Xaml.XamlType" />。</param>
      <returns>
        <see langword="Add" /> 方法的 CLR <see cref="T:System.Reflection.MethodInfo" /> 資訊，或 Null。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contentType" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod">
      <summary>傳回物件，這個物件表示可列舉項目的方法。</summary>
      <returns>列舉程式方法的 <see cref="T:System.Reflection.MethodInfo" />，或 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
      <summary>傳回表示項目集的 <see cref="T:System.Collections.IEnumerator" /> 物件。</summary>
      <param name="instance">
        <see cref="T:System.Xaml.XamlType" /> (用於建構這個 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />) 所指定之類型的執行個體。</param>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 物件，或 <see langword="null" />。</returns>
      <exception cref="T:System.NotSupportedException">在以未知 <see cref="T:System.Xaml.XamlType" /> 為根據的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上，叫用這個方法。
-或-
在 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上叫用這個方法，所在的相關型別不是集合或字典。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler">
      <summary>取得當 <see cref="T:System.Xaml.XamlObjectWriter" /> 呼叫實作的 <see cref="T:System.Windows.Markup.MarkupExtension" /> 時，所要使用的處理常式。</summary>
      <returns>處理這個案例的處理常式實作。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler">
      <summary>取得當 <see cref="T:System.Xaml.XamlObjectWriter" /> 呼叫 CLR 實作的 <see cref="T:System.ComponentModel.TypeConverter" /> 時，所要使用的處理常式。</summary>
      <returns>處理這個案例的處理常式實作。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker">
      <summary>提供靜態值，這個值表示未完整實作的未知 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />。</summary>
      <returns>靜態值，表示未完整實作的未知 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />。</returns>
    </member>
    <member name="T:System.Xaml.Schema.XamlTypeName">
      <summary>提供以名稱和命名空間指定 XAML 型別的方法。</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.#ctor">
      <summary>初始化 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.#ctor(System.String,System.String)">
      <summary>根據名稱和命名空間字串，初始化 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 類別的新執行個體。</summary>
      <param name="xamlNamespace">包含名稱的 XAML 命名空間。</param>
      <param name="name">要建立 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的型別名稱。</param>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Xaml.Schema.XamlTypeName})">
      <summary>根據名稱和命名空間以及型別引數陣列，初始化 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 類別的新執行個體。</summary>
      <param name="xamlNamespace">包含 <paramref name="name" /> 的 XAML 命名空間。</param>
      <param name="name">要建立 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的型別名稱。</param>
      <param name="typeArguments">型別引數的陣列，其中每個型別引數都必須是 <see cref="T:System.Xaml.Schema.XamlTypeName" />。</param>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.#ctor(System.Xaml.XamlType)">
      <summary>根據現有的 <see cref="T:System.Xaml.Schema.XamlTypeName" />，初始化 <see cref="T:System.Xaml.XamlType" /> 類別的新執行個體。</summary>
      <param name="xamlType">現有的 <see cref="T:System.Xaml.XamlType" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlType" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeName.Name">
      <summary>取得用來建構這個 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的名稱。</summary>
      <returns>型別的名稱。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeName.Namespace">
      <summary>取得用來建構這個 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的 XAML 命名空間識別項。</summary>
      <returns>XAML 命名空間識別項。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.Parse(System.String,System.Xaml.IXamlNamespaceResolver)">
      <summary>根據型別名稱和可將標記前置詞解析為命名空間的物件，提供 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 值。</summary>
      <param name="typeName">要建立 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 值的型別名稱。</param>
      <param name="namespaceResolver">實作 <see cref="T:System.Xaml.IXamlNamespaceResolver" /> 的物件或服務提供者。</param>
      <returns>建立的 <see cref="T:System.Xaml.Schema.XamlTypeName" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 或 <paramref name="namespaceResolver" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">無法剖析字串。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.ParseList(System.String,System.Xaml.IXamlNamespaceResolver)">
      <summary>根據可指定多個型別名稱的字串，以及可將標記前置詞解析為命名空間的物件，提供 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 值。</summary>
      <param name="typeNameList">包含多個型別的字串。</param>
      <param name="namespaceResolver">實作 <see cref="T:System.Xaml.IXamlNamespaceResolver" /> 的物件或服務提供者。</param>
      <returns>建立的 <see cref="T:System.Xaml.Schema.XamlTypeName" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeNameList" /> 或 <paramref name="namespaceResolver" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">無法剖析字串。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.ToString">
      <summary>將這個 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的值轉換成它的對等字串表示。</summary>
      <returns>此 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的對等字串表示。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.ToString(System.Collections.Generic.IList{System.Xaml.Schema.XamlTypeName},System.Xaml.INamespacePrefixLookup)">
      <summary>將這個 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的值轉換為它的對等字串表示，此表示可用在標記語法中，讓物件項目使用多個型別。</summary>
      <param name="typeNameList">型別清單。</param>
      <param name="prefixLookup">前置詞查閱的服務參考。</param>
      <returns>所有型別結果的串連字串。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="prefixLookup" /> 或 <paramref name="typeNameList" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.ToString(System.Xaml.INamespacePrefixLookup)">
      <summary>將這個 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的值轉換為它的對等字串表示，此表示可用在標記語法中，讓物件項目使用某個型別。</summary>
      <param name="prefixLookup">前置詞查閱的服務參考。</param>
      <returns>含前置詞的使用字串。</returns>
      <exception cref="T:System.InvalidOperationException">這個 <see cref="P:System.Xaml.Schema.XamlTypeName.Namespace" /> 的 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 為 <see langword="null" />。
-或-
<see cref="P:System.Xaml.Schema.XamlTypeName.Name" /> 無效。
-或-
無法查詢前置詞。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.TryParse(System.String,System.Xaml.IXamlNamespaceResolver,System.Xaml.Schema.XamlTypeName@)">
      <summary>根據型別名稱和可將標記前置詞解析為命名空間的物件，提供 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 值。</summary>
      <param name="typeName">要建立 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 值的型別名稱。</param>
      <param name="namespaceResolver">實作 <see cref="T:System.Xaml.IXamlNamespaceResolver" /> 的物件或服務提供者。</param>
      <param name="result">如果傳回值為 <see langword="true" />，則為包含所建立 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的 Out 參數。</param>
      <returns>如果剖析成功則為 <see langword="true" />，而且 <paramref name="result" /> 包含有用的值，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 或 <paramref name="namespaceResolver" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.TryParseList(System.String,System.Xaml.IXamlNamespaceResolver,System.Collections.Generic.IList{System.Xaml.Schema.XamlTypeName}@)">
      <summary>根據可指定多個型別名稱的字串，以及可將標記前置詞解析為命名空間的物件，提供 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 值。</summary>
      <param name="typeNameList">包含多個型別的字串。</param>
      <param name="namespaceResolver">實作 <see cref="T:System.Xaml.IXamlNamespaceResolver" /> 的物件或服務提供者。</param>
      <param name="result">如果傳回值為 <see langword="true" />，則為包含所建立 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的 Out 參數。</param>
      <returns>如果剖析成功則為 <see langword="true" />，而且 <paramref name="result" /> 包含有用的值，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeNameList" /> 或 <paramref name="namespaceResolver" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeName.TypeArguments">
      <summary>取得用來建構這個 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的型別引數。</summary>
      <returns>型別引數 (如果有的話)。 可能是 Null。</returns>
    </member>
    <member name="T:System.Xaml.Schema.XamlTypeTypeConverter">
      <summary>將 <see cref="T:System.Xaml.XamlType" /> 物件轉換為代表類型名稱的字串，或從該字串轉換為物件。 這項功能透過 <see cref="T:System.Windows.Markup.PropertyDefinition" />，藉由標記定義用於提供 XAML 擴充性。</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeTypeConverter.#ctor">
      <summary>初始化 <see cref="T:System.Xaml.Schema.XamlTypeTypeConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>使用指定的內容，判斷所指定型別的物件是否可轉換成 <see cref="T:System.Xaml.XamlType" /> 的執行個體。</summary>
      <param name="context">格式內容，提供正在叫用此轉換器之環境的相關資訊。</param>
      <param name="sourceType">正在評估以進行轉換的型別。</param>
      <returns>如果這個轉換子可以執行作業，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>使用指定的內容，判斷 <see cref="T:System.Xaml.XamlType" /> 的執行個體是否可以轉換成指定的型別。</summary>
      <param name="context">格式內容，提供正在叫用此轉換器之環境的相關資訊。</param>
      <param name="destinationType">正在評估以進行轉換的型別。</param>
      <returns>如果這個轉換子可以執行作業，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>使用指定的內容，嘗試將指定的物件轉換為 <see cref="T:System.Xaml.XamlType" />。</summary>
      <param name="context">格式內容，提供正在叫用此轉換器之環境的相關資訊。</param>
      <param name="culture">特定文化特性 (Culture) 資訊。</param>
      <param name="value">要轉換的物件。</param>
      <returns>轉換的物件。</returns>
      <exception cref="T:System.NotSupportedException">無法轉換 <paramref name="value" />。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>使用指定的內容，嘗試將 <see cref="T:System.Xaml.XamlType" /> 轉換為指定的型別。</summary>
      <param name="context">格式內容，提供正在叫用此轉換器之環境的相關資訊。</param>
      <param name="culture">特定文化特性 (Culture) 資訊。</param>
      <param name="value">要轉換的物件。</param>
      <param name="destinationType">要將物件轉換成的類型。</param>
      <returns>轉換的物件。</returns>
      <exception cref="T:System.NotSupportedException">無法轉換 <paramref name="value" />。</exception>
    </member>
    <member name="T:System.Xaml.Schema.XamlValueConverter`1">
      <summary>針對根據最終目的型別以外之輸入產生 XAML 初始化及序列化值的技術，提供一般 API 介面。 這包括標記延伸和型別轉換子。</summary>
      <typeparam name="TConverterBase">這個 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 所表示之特定轉換子的 CLR 基底類別。 這通常是下列其中一項：<see cref="T:System.ComponentModel.TypeConverter" />、<see cref="T:System.Windows.Markup.MarkupExtension" />、<see cref="T:System.Windows.Markup.ValueSerializer" />。</typeparam>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.#ctor(System.Type,System.Xaml.XamlType)">
      <summary>根據實作 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 的轉換子和 <see cref="T:System.Type" /> 的目標/目的型別，初始化 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 類別的新執行個體。</summary>
      <param name="converterType">實作轉換子行為的 <see cref="T:System.Type" />。</param>
      <param name="targetType">
        <see cref="T:System.Xaml.XamlType" /> 的目標/目的地 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />。</param>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.#ctor(System.Type,System.Xaml.XamlType,System.String)">
      <summary>根據實作 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 的轉換子、<see cref="T:System.Type" /> 的目標/目的型別以及字串名稱，初始化 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 類別的新執行個體。</summary>
      <param name="converterType">實作轉換子行為的 <see cref="T:System.Type" />。</param>
      <param name="targetType">
        <see cref="T:System.Xaml.XamlType" /> 的目標/目的地 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />。</param>
      <param name="name">字串名稱。</param>
      <exception cref="T:System.ArgumentException">這三個參數都是 <see langword="null" /> (至少有一個必須是非 Null 值)。</exception>
    </member>
    <member name="P:System.Xaml.Schema.XamlValueConverter`1.ConverterInstance">
      <summary>取得建立的轉換子實作執行個體。</summary>
      <returns>建立的轉換子實作執行個體，或 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlValueConverter`1.ConverterType">
      <summary>取得實作轉換子行為的類別的 <see cref="T:System.Type" />。</summary>
      <returns>實作轉換子行為的類別的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.CreateInstance">
      <summary>傳回轉換子實作執行個體。</summary>
      <returns>轉換子實作執行個體，或 <see langword="null" />。</returns>
      <exception cref="T:System.Xaml.XamlSchemaException">轉換子未實作正確的基底型別。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.Equals(System.Object)">
      <summary>判斷這個 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 執行個體和指定之物件 (必須是 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 物件) 是否具有相同的值。</summary>
      <param name="obj">要比較的物件。</param>
      <returns>如果 <see langword="true" /> 是 <paramref name="obj" />，且其值與這個執行個體相同，則為 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.Equals(System.Xaml.Schema.XamlValueConverter{`0})">
      <summary>判斷這個 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 執行個體和另一個 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 物件是否具有相同的值。</summary>
      <param name="other">要比較的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />。</param>
      <returns>如果 <paramref name="other" /> 是 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />，且其值與這個執行個體相同，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.GetHashCode">
      <summary>傳回這個 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 的雜湊程式碼。</summary>
      <returns>整數雜湊程式碼。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlValueConverter`1.Name">
      <summary>取得這個 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 的字串名稱。</summary>
      <returns>這個 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 的字串名稱。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.op_Equality(System.Xaml.Schema.XamlValueConverter{`0},System.Xaml.Schema.XamlValueConverter{`0})">
      <summary>判斷兩個指定的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 物件是否具有相同的值。</summary>
      <param name="converter1">
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 或 <see langword="null" />。</param>
      <param name="converter2">
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 或 <see langword="null" />。</param>
      <returns>如果 <see langword="true" /> 的值與 <paramref name="converter1" /> 的值相同，則為 <paramref name="converter2" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.op_Inequality(System.Xaml.Schema.XamlValueConverter{`0},System.Xaml.Schema.XamlValueConverter{`0})">
      <summary>判斷兩個指定的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 物件是否具有不同的值。</summary>
      <param name="converter1">
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 或 <see langword="null" />。</param>
      <param name="converter2">
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 或 <see langword="null" />。</param>
      <returns>如果 <paramref name="converter1" /> 的值與 <paramref name="converter2" /> 的值不同，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlValueConverter`1.TargetType">
      <summary>取得 <see cref="T:System.Xaml.XamlType" /> 的目標/目的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlType" /> 的目標/目的地 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.ToString">
      <summary>傳回表示這個 <see cref="T:System.String" /> 的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />。</summary>
      <returns>代表這個 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="T:System.Xaml.XamlBackgroundReader">
      <summary>實作可將讀取和寫入分割至不同執行緒的雙重緩衝 <see cref="T:System.Xaml.XamlReader" />。</summary>
    </member>
    <member name="M:System.Xaml.XamlBackgroundReader.#ctor(System.Xaml.XamlReader)">
      <summary>初始化 <see cref="T:System.Xaml.XamlBackgroundReader" /> 類別的新執行個體。</summary>
      <param name="wrappedReader">這個 <see cref="T:System.Xaml.XamlReader" /> 所根據的 <see cref="T:System.Xaml.XamlBackgroundReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wrappedReader" /> 上所宣告的預設值是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlBackgroundReader.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.Xaml.XamlBackgroundReader" /> 所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示釋放 Managed 資源，否則為 <see langword="false" />。</param>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.HasLineInfo">
      <summary>取得值，這個值指定行資訊是否可供使用。</summary>
      <returns>如果有可用的行資訊則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.IsEof">
      <summary>取得值，這個值會報告讀取器是否位於檔案結尾。</summary>
      <returns>如果位置在檔案的結尾則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.LineNumber">
      <summary>取得要報告的行號。</summary>
      <returns>要報告的行號。</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.LinePosition">
      <summary>取得要報告的行位置。</summary>
      <returns>要報告的行位置。</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.Member">
      <summary>如果讀取器位置在 <see cref="F:System.Xaml.XamlNodeType.StartMember" /> 上，則取得讀取器位置上的目前成員。</summary>
      <returns>目前的成員，如果這個位置不在成員上，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.Namespace">
      <summary>從目前的節點取得 XAML 命名空間。</summary>
      <returns>XAML 命名空間 (如果有的話)，否則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.NodeType">
      <summary>取得目前節點的類型。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlNodeType" /> 列舉的值。</returns>
    </member>
    <member name="M:System.Xaml.XamlBackgroundReader.Read">
      <summary>從來源中提供下一個 XAML 節點 (如果有節點的話)。</summary>
      <returns>如果有節點則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.SchemaContext">
      <summary>取得物件，這個物件會為資訊集提供結構描述內容資訊。</summary>
      <returns>物件，為資訊集提供結構描述內容資訊。</returns>
    </member>
    <member name="M:System.Xaml.XamlBackgroundReader.StartThread">
      <summary>建立及啟動新的 <see cref="T:System.Threading.Thread" /> (從 <see cref="T:System.Threading.ParameterizedThreadStart" /> 建構而成)，它會為 <see cref="T:System.Xaml.XamlReader" /> 處理具名執行緒。</summary>
      <exception cref="T:System.InvalidOperationException">執行緒已經啟動。</exception>
    </member>
    <member name="M:System.Xaml.XamlBackgroundReader.StartThread(System.String)">
      <summary>建立及啟動新的 <see cref="T:System.Threading.Thread" /> (從 <see cref="T:System.Threading.ParameterizedThreadStart" /> 建構而成)，它會為 <see cref="T:System.Xaml.XamlReader" /> 處理具名執行緒。 請指定執行緒名稱做為參數。</summary>
      <param name="threadName">執行緒的名稱。</param>
      <exception cref="T:System.InvalidOperationException">執行緒已經啟動。</exception>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.Type">
      <summary>取得目前節點的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>目前節點的 <see cref="T:System.Xaml.XamlType" />，如果目前讀取器位置不在物件上，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.Value">
      <summary>取得目前節點的值。</summary>
      <returns>目前節點的值，如果目前讀取器位置不在 <see cref="F:System.Xaml.XamlNodeType.Value" /> 節點型別上，則為 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xaml.XamlDeferringLoader">
      <summary>表示 XAML 讀取器行為，這個行為會載入並傳回延後的內容。</summary>
    </member>
    <member name="M:System.Xaml.XamlDeferringLoader.#ctor">
      <summary>初始化 <see cref="T:System.Xaml.XamlDeferringLoader" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xaml.XamlDeferringLoader.Load(System.Xaml.XamlReader,System.IServiceProvider)">
      <summary>根據 <see cref="T:System.Xaml.XamlReader" /> 和來自服務提供者的特定必要服務，以延後模式載入 XAML 內容。</summary>
      <param name="xamlReader">呼叫 <see cref="M:System.Xaml.XamlDeferringLoader.Save(System.Object,System.IServiceProvider)" /> 時傳回的啟始讀取器。</param>
      <param name="serviceProvider">必要服務的服務提供者。</param>
      <returns>由輸入 <see cref="T:System.Xaml.XamlReader" /> 所產生的根物件。</returns>
    </member>
    <member name="M:System.Xaml.XamlDeferringLoader.Save(System.Object,System.IServiceProvider)">
      <summary>認可要延後載入的值。</summary>
      <param name="value">要認可延後載入的輸入值。</param>
      <param name="serviceProvider">必要服務的服務提供者。</param>
      <returns>XAML 讀取器，可用來取得延後的值做為 XAML 節點資訊。</returns>
    </member>
    <member name="T:System.Xaml.XamlDirective">
      <summary>提供 XAML 型別系統識別項給某個成員 (如果此成員也是 XAML 指示詞的話)。 XAML 讀取器和 XAML 寫入器會在處理成員節點期間使用 <see cref="T:System.Xaml.XamlDirective" /> 識別項。 當 XAML 讀取器位在 <see cref="F:System.Xaml.XamlNodeType.StartMember" /> 上，而且 <see cref="P:System.Xaml.XamlMember.IsDirective" /> 為 <see langword="true" /> 時，會使用這個識別項。</summary>
    </member>
    <member name="M:System.Xaml.XamlDirective.#ctor(System.Collections.Generic.IEnumerable{System.String},System.String,System.Xaml.XamlType,System.Xaml.Schema.XamlValueConverter{System.ComponentModel.TypeConverter},System.Xaml.Schema.AllowedMemberLocations)">
      <summary>初始化 <see cref="T:System.Xaml.XamlDirective" /> 類別的新執行個體，針對 <see cref="T:System.Xaml.XamlDirective" /> 的每個個別案例值指定值。</summary>
      <param name="xamlNamespaces">這個 <see cref="T:System.Xaml.XamlDirective" /> 可能存在於其中的一組 XAML 命名空間，可當做識別項字串的可列舉集合傳遞。</param>
      <param name="name">
        <see cref="T:System.Xaml.XamlDirective" /> 的識別名稱。</param>
      <param name="xamlType">支援 <see cref="T:System.Xaml.XamlDirective" /> 的 XAML 型別。</param>
      <param name="typeConverter">這個 <see cref="T:System.Xaml.XamlDirective" /> 用來轉換文字語法的型別轉換器。</param>
      <param name="allowedLocation">
        <see cref="T:System.Xaml.Schema.AllowedMemberLocations" /> 列舉的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlType" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlDirective.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.Xaml.XamlDirective" /> 類別的新執行個體，並在其中指定名稱和單一 XAML 命名空間的值。 請只有當您想要或預期 <see cref="P:System.Xaml.XamlMember.IsUnknown" /> 會針對指示詞報告 <see langword="true" /> 時，才使用這個簽章。</summary>
      <param name="xamlNamespace">這個 <see cref="T:System.Xaml.XamlDirective" /> 可能存在的主要 XAML 命名空間。</param>
      <param name="name">
        <see cref="T:System.Xaml.XamlDirective" /> 的識別名稱。</param>
    </member>
    <member name="P:System.Xaml.XamlDirective.AllowedLocation">
      <summary>取得值，這個值指定可以指定指示詞的 XAML 節點型別。</summary>
      <returns>列舉值。 預設為列舉預設值，即 <see cref="F:System.Xaml.Schema.AllowedMemberLocations.None" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.GetHashCode">
      <summary>傳回這個物件的雜湊程式碼。</summary>
      <returns>整數雜湊程式碼。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.GetXamlNamespaces">
      <summary>傳回這個 XAML 成員可能存在之 XAML 命名空間的清單。</summary>
      <returns>XAML 命名空間識別項的清單 (字串形式)。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupCustomAttributeProvider">
      <summary>傳回 <see cref="T:System.Reflection.ICustomAttributeProvider" /> 實作。 這個實作一律會傳回 <see langword="null" />。</summary>
      <returns>一律傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupDeferringLoader">
      <summary>傳回 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 物件，用於延後載入 XAML 宣告的物件。 這個實作一律會傳回 <see langword="null" />。</summary>
      <returns>一律傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupDependsOn">
      <summary>傳回 <see cref="T:System.Xaml.XamlMember" /> 物件的清單。 這個清單會報告具有和此 <see cref="T:System.Xaml.XamlMember" /> 相關的初始設定順序之相依關聯性的成員。 這個實作一律會傳回 <see langword="null" />。</summary>
      <returns>一律傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupInvoker">
      <summary>傳回與 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 相關聯的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns>這個 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 的 <see cref="T:System.Xaml.XamlMember" /> 資訊。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsAmbient">
      <summary>傳回這個 <see cref="T:System.Xaml.XamlMember" /> 是否報告為環境屬性。</summary>
      <returns>一律傳回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsEvent">
      <summary>傳回這個 <see cref="T:System.Xaml.XamlDirective" /> 是否表示事件。</summary>
      <returns>一律傳回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsReadOnly">
      <summary>傳回這個 <see cref="T:System.Xaml.XamlDirective" /> 是否表示所需的唯讀屬性。</summary>
      <returns>一律傳回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsReadPublic">
      <summary>傳回這個 <see cref="T:System.Xaml.XamlDirective" /> 是否表示具有公用 <see langword="get" /> 存取子的屬性。</summary>
      <returns>一律傳回 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsUnknown">
      <summary>傳回這個 <see cref="T:System.Xaml.XamlDirective" /> 是否表示用於型別和成員解析的支援系統所無法解析的成員。</summary>
      <returns>如果這個 <see cref="T:System.Xaml.XamlDirective" /> 表示無法解析的成員則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsWriteOnly">
      <summary>傳回這個 <see cref="T:System.Xaml.XamlDirective" /> 是否表示所需的唯寫屬性。</summary>
      <returns>一律傳回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsWritePublic">
      <summary>傳回這個 <see cref="T:System.Xaml.XamlDirective" /> 是否表示具有公用 <see langword="set" /> 存取子的屬性。</summary>
      <returns>一律傳回 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupTargetType">
      <summary>傳回 <see cref="T:System.Xaml.XamlType" /> 可能存在之型別的 <see cref="T:System.Xaml.XamlMember" />。 這個實作一律會傳回 <see langword="null" />。</summary>
      <returns>一律傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupType">
      <summary>傳回成員所使用型別的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>成員所使用型別的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupTypeConverter">
      <summary>傳回與這個 <see cref="T:System.Xaml.XamlDirective" /> 相關聯的型別轉換器實作。</summary>
      <returns>具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 條件約束的 <see cref="T:System.ComponentModel.TypeConverter" /> 執行個體，或 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupUnderlyingGetter">
      <summary>傳回與這個 <see cref="T:System.Xaml.XamlDirective" /> 相關聯的 <see langword="get" /> 存取子。 這個實作一律會傳回 <see langword="null" />。</summary>
      <returns>一律傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupUnderlyingMember">
      <summary>傳回與這個 <see cref="T:System.Reflection.MemberInfo" /> 相關聯的 CLR 反映 <see cref="T:System.Xaml.XamlDirective" />。 這個實作一律會傳回 <see langword="null" />。</summary>
      <returns>一律傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupUnderlyingSetter">
      <summary>傳回與這個 <see cref="T:System.Xaml.XamlDirective" /> 相關聯的 <see langword="set" /> 存取子。 這個實作一律會傳回 <see langword="null" />。</summary>
      <returns>一律傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.ToString">
      <summary>傳回這個 <see cref="T:System.Xaml.XamlDirective" /> 的字串表示。</summary>
      <returns>這個 <see cref="T:System.Xaml.XamlDirective" /> 的字串表示。</returns>
    </member>
    <member name="T:System.Xaml.XamlDuplicateMemberException">
      <summary>當 XAML 寫入器嘗試將重複成員的值寫入至同一個物件節點時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.#ctor">
      <summary>以系統提供的錯誤說明訊息，初始化 <see cref="T:System.Xaml.XamlDuplicateMemberException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.Xaml.XamlDuplicateMemberException" /> 類別的新執行個體。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 上所宣告的預設值是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.#ctor(System.String)">
      <summary>使用指定的錯誤說明訊息，初始化 <see cref="T:System.Xaml.XamlDuplicateMemberException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況的訊息。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Xaml.XamlDuplicateMemberException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況的訊息。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.#ctor(System.Xaml.XamlMember,System.Xaml.XamlType)">
      <summary>使用要報告的相關成員和型別資訊，初始化 <see cref="T:System.Xaml.XamlDuplicateMemberException" /> 類別的新執行個體。</summary>
      <param name="member">要報告的 XAML 成員識別項。</param>
      <param name="type">要報告為父型別的 XAML 型別識別項。</param>
    </member>
    <member name="P:System.Xaml.XamlDuplicateMemberException.DuplicateMember">
      <summary>取得或設定要報告為重複項之屬性的 XAML 成員識別項。</summary>
      <returns>要報告的 <see cref="T:System.Xaml.XamlMember" /> 物件 (XAML 成員識別項)。</returns>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.Xaml.XamlDuplicateMemberException" /> 類別的新執行個體。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 上所宣告的預設值是 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xaml.XamlDuplicateMemberException.ParentType">
      <summary>取得或設定要報告為父型別的 XAML 型別識別項。</summary>
      <returns>要報告為父型別的 <see cref="T:System.Xaml.XamlType" /> 物件 (XAML 型別識別項)。</returns>
    </member>
    <member name="T:System.Xaml.XamlException">
      <summary>針對一般 XAML 讀取器或 XAML 寫入器例外狀況所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Xaml.XamlException.#ctor">
      <summary>初始化 <see cref="T:System.Xaml.XamlException" /> 類別的新執行個體。 此執行個體包含描述錯誤、系統提供的訊息。</summary>
    </member>
    <member name="M:System.Xaml.XamlException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.Xaml.XamlException" /> 類別的新執行個體。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Xaml.XamlException" /> 類別的新執行個體。 此執行個體包含描述錯誤的指定訊息。</summary>
      <param name="message">說明例外狀況的訊息。 這個建構函式的呼叫端必須確保這個字串已針對目前系統的文化特性，執行過當地語系化。</param>
    </member>
    <member name="M:System.Xaml.XamlException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Xaml.XamlException" /> 類別的新執行個體。 此執行個體包含指定的錯誤訊息，以及造成此例外狀況之內部例外狀況的參考。</summary>
      <param name="message">說明例外狀況的訊息。 這個建構函式的呼叫端必須確保這個字串已針對目前系統的文化特性，執行過當地語系化。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="M:System.Xaml.XamlException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary>初始化 <see cref="T:System.Xaml.XamlException" /> 類別的新執行個體。 此執行個體包含指定的錯誤訊息、內部例外狀況和行資訊。</summary>
      <param name="message">說明例外狀況的訊息。 這個建構函式的呼叫端必須確保這個字串已針對目前系統的文化特性，執行過當地語系化。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。</param>
      <param name="lineNumber">要向偵錯或行資訊消費者報告的行號。</param>
      <param name="linePosition">要向偵錯或行資訊消費者報告的行位置。</param>
    </member>
    <member name="M:System.Xaml.XamlException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>實作 <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />，並提供行資訊資料的序列化支援。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xaml.XamlException.LineNumber">
      <summary>取得或設定例外狀況所報告之 XAML 文字行資訊的行號部分。</summary>
      <returns>XAML 文字行資訊的行號部分。</returns>
    </member>
    <member name="P:System.Xaml.XamlException.LinePosition">
      <summary>取得或設定例外狀況所報告之 XAML 文字行資訊的行位置部分。</summary>
      <returns>XAML 文字行資訊的行位置部分。</returns>
    </member>
    <member name="P:System.Xaml.XamlException.Message">
      <summary>取得或設定例外狀況訊息，如果有行資訊，再將行資訊附加至訊息。</summary>
      <returns>包含附加行資訊的例外狀況訊息。</returns>
    </member>
    <member name="T:System.Xaml.XamlInternalException">
      <summary>在 XAML 讀取或 XAML 寫入期間，針對內部不一致情況所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Xaml.XamlInternalException.#ctor">
      <summary>以系統提供的錯誤說明訊息，初始化 <see cref="T:System.Xaml.XamlInternalException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xaml.XamlInternalException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.Xaml.XamlInternalException" /> 類別的新執行個體。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.Xaml.XamlInternalException.#ctor(System.String)">
      <summary>使用指定的錯誤說明訊息，初始化 <see cref="T:System.Xaml.XamlInternalException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況的訊息。</param>
    </member>
    <member name="M:System.Xaml.XamlInternalException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Xaml.XamlInternalException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況的訊息。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="T:System.Xaml.XamlLanguage">
      <summary>定義常數，這些常數提供對 XAML 標記或 XAML 型別程式設計很有用的字串或物件。 這些字串或物件與 XAML 語言概念有關、與 .NET Framework XAML 服務中實作的 XAML 語言概念有關，或與兩者都有關。</summary>
    </member>
    <member name="P:System.Xaml.XamlLanguage.AllDirectives">
      <summary>取得 .NET Framework XAML 服務所定義之各個 <see cref="T:System.Xaml.XamlDirective" /> 識別項的唯讀泛型集合。</summary>
      <returns>.NET Framework XAML 服務所定義之各個 <see cref="T:System.Xaml.XamlDirective" /> 識別項的唯讀泛型集合。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.AllTypes">
      <summary>取得個別 <see cref="T:System.Xaml.XamlType" /> 值的唯讀泛型集合，這些值符合或別名化由 .NET Framework XAML 服務定義的 XAML 語言本質。</summary>
      <returns>符合 XAML 語言本質之各個 <see cref="T:System.Xaml.XamlType" /> 的唯讀泛型集合。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Arguments">
      <summary>取得 <see cref="T:System.Xaml.XamlDirective" /> 做為 Factory 方法的 <see langword="Arguments" /> 或用於一般用途。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlDirective" />，做為 Factory 方法的 <see langword="Arguments" /> 或用於一般用途。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Array">
      <summary>取得 <see langword="Array" /> XAML 語言本質的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>
        <see langword="Array" /> XAML 語言本質的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.AsyncRecords">
      <summary>取得 <see langword="AsyncRecords" /> 虛擬成員的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns>
        <see langword="AsyncRecords" /> 虛擬成員的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Base">
      <summary>取得 XML 中之 <see langword="base" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns>XML 中之 <see langword="base" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Boolean">
      <summary>取得 <see langword="Boolean" /> XAML 語言本質的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>
        <see langword="Boolean" /> XAML 語言本質的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Byte">
      <summary>取得 <see langword="Byte" /> XAML 語言本質的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>
        <see langword="Byte" /> XAML 語言本質的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Char">
      <summary>取得 <see langword="Char" /> XAML 語言本質的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>
        <see langword="Char" /> XAML 語言本質的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Class">
      <summary>從 XAML 取得 <see langword="Class" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns>XAML 中之 <see langword="Class" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.ClassAttributes">
      <summary>從 XAML 取得 <see langword="ClassAttributes" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns>XAML 中之 <see langword="ClassAttributes" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.ClassModifier">
      <summary>從 XAML 取得 <see langword="ClassModifier" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns>XAML 中之 <see langword="ClassModifier" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Code">
      <summary>取得 [MS-XAML] 中所述之 <see langword="Code" /> 的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns>[MS-XAML] 中所述之 <see langword="Code" /> 的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.ConnectionId">
      <summary>取得 <see cref="T:System.Xaml.XamlDirective" />，以識別將事件傳送至處理常式的連接點。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlDirective" />，識別將事件傳送至處理常式的連接點。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Decimal">
      <summary>取得 <see langword="Decimal" /> XAML 語言本質的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>
        <see langword="Decimal" /> XAML 語言本質的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Double">
      <summary>取得 <see langword="Double" /> XAML 語言本質的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>
        <see langword="Double" /> XAML 語言本質的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.FactoryMethod">
      <summary>取得 <see cref="T:System.Xaml.XamlDirective" />，以識別 XAML 的 Factory 方法。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlDirective" />，識別 XAML 的 Factory 方法。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.FieldModifier">
      <summary>從 XAML 取得 <see langword="FieldModifier" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns>XAML 中之 <see langword="FieldModifier" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Initialization">
      <summary>從 XAML 取得 <see langword="Initialization" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns>XAML 中之 <see langword="Initialization" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Int16">
      <summary>取得 <see langword="Int16" /> XAML 語言本質的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>
        <see langword="Int16" /> XAML 語言本質的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Int32">
      <summary>取得 <see langword="Int32" /> XAML 語言本質的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>
        <see langword="Int32" /> XAML 語言本質的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Int64">
      <summary>取得 <see langword="Int64" /> XAML 語言本質的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>
        <see langword="Int64" /> XAML 語言本質的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Items">
      <summary>從 XAML 取得 <see langword="Items" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns>XAML 中之 <see langword="Items" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Key">
      <summary>從 XAML 取得 <see langword="Key" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns>XAML 中之 <see langword="Key" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Lang">
      <summary>取得 XML 中之 <see langword="lang" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns>XML 中之 <see langword="lang" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Member">
      <summary>取得型別的 <see cref="T:System.Xaml.XamlType" />，這個型別是 <see cref="P:System.Xaml.XamlLanguage.Members" /> 的項目型別。</summary>
      <returns>型別的 <see cref="T:System.Xaml.XamlType" />，這個型別是 <see cref="P:System.Xaml.XamlLanguage.Members" /> 的項目型別。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Members">
      <summary>取得 XAML 中之 <see langword="Members" /> 概念的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns>XAML 中之 <see langword="Members" /> 概念的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Name">
      <summary>從 XAML 取得 <see langword="Name" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns>XAML 中之 <see langword="Name" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Null">
      <summary>取得 <see langword="Null" /> 或 <see langword="NullExtension" /> XAML 語言本質的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>XAML 語言內建函式的。 <see cref="T:System.Xaml.XamlType" /><see langword="Null" /> / <see langword="NullExtension" /></returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Object">
      <summary>取得 <see langword="Object" /> XAML 語言概念的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>
        <see langword="Object" /> XAML 語言概念的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.PositionalParameters">
      <summary>從 XAML 取得 <see langword="PositionalParameters" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns>XAML 中之 <see langword="PositionalParameters" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Property">
      <summary>取得 XAML 中之 <see langword="Property" /> 概念的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>XAML 中之 <see langword="Property" /> 概念的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Reference">
      <summary>取得表示 XAML 之 <see langword="Reference" /> 的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>表示 XAML 之 <see langword="Reference" /> 的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Shared">
      <summary>取得 XAML 之 <see langword="Shared" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns>XAML 之 <see langword="Shared" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Single">
      <summary>取得 <see langword="Single" /> XAML 語言本質的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>
        <see langword="Single" /> XAML 語言本質的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Space">
      <summary>取得 XML 中之 <see langword="space" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns>XML 中之 <see langword="space" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Static">
      <summary>取得 <see langword="Static" />/<see langword="StaticExtension" /> XAML 語言本質的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>XAML 語言內建函式的。 <see cref="T:System.Xaml.XamlType" /><see langword="Static" /> / <see langword="StaticExtension" /></returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.String">
      <summary>取得 <see langword="String" /> XAML 語言本質的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>
        <see langword="String" /> XAML 語言本質的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Subclass">
      <summary>從 XAML 取得 <see langword="Subclass" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns>XAML 中之 <see langword="Subclass" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.SynchronousMode">
      <summary>取得啟用非同步 XAML 載入模式的 <see cref="T:System.Xaml.XamlDirective" /> (如果 XAML 處理器支援這種模式的話)。</summary>
      <returns>啟用非同步 XAML 載入模式的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.TimeSpan">
      <summary>取得 XAML 語言中之 <see langword="TimeSpan" /> 概念的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>
        <see langword="TimeSpan" /> XAML 語言概念的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Type">
      <summary>取得 <see langword="Type" />/<see langword="TypeExtension" /> XAML 語言本質的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>XAML 語言內建函式的。 <see cref="T:System.Xaml.XamlType" /><see langword="Type" /> / <see langword="TypeExtension" /></returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.TypeArguments">
      <summary>從 XAML 取得 <see langword="TypeArguments" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns>XAML 中之 <see langword="TypeArguments" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Uid">
      <summary>從 XAML 取得 <see langword="Uid" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns>XAML 中之 <see langword="Uid" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.UnknownContent">
      <summary>從 XAML 取得 <see langword="UnknownContent" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns>XAML 中之 <see langword="UnknownContent" /> 指示詞的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Uri">
      <summary>取得 <see langword="Uri" /> XAML 語言概念的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>
        <see langword="Uri" /> XAML 語言概念的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="F:System.Xaml.XamlLanguage.Xaml2006Namespace">
      <summary>取得字串的字串值，這個字串識別 XAML (2006) 語言命名空間。 根據 [MS-XAML] 第 5.1.1 節 (英文) 中的定義，該命名空間對應至開頭為 XAML (2006) "x" 的命名空間。</summary>
    </member>
    <member name="P:System.Xaml.XamlLanguage.XamlNamespaces">
      <summary>取得 XAML 之命名空間識別項的集合。</summary>
      <returns>XAML 之命名空間識別項的集合。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.XData">
      <summary>取得 XAML 型別的 <see cref="T:System.Xaml.XamlType" />，這個型別支援 XAML 中的 <see langword="XData" /> 區塊。</summary>
      <returns>支援 <see langword="XData" /> 區塊之 XAML 型別的 <see cref="T:System.Xaml.XamlType" />。 請參閱[MS-XAML] 區段 5.2.23。</returns>
    </member>
    <member name="F:System.Xaml.XamlLanguage.Xml1998Namespace">
      <summary>取得字串的字串值，這個字串識別 XML (1998) 語言命名空間。 根據 [MS-XAML] 第 5.1.2 節 (英文) 中的描述，該命名空間對應至開頭為 XML "xml" 的命名空間。</summary>
    </member>
    <member name="P:System.Xaml.XamlLanguage.XmlNamespaces">
      <summary>取得 XML 之命名空間識別項的集合。</summary>
      <returns>XML 之命名空間識別項的集合。</returns>
    </member>
    <member name="T:System.Xaml.XamlMember">
      <summary>提供 XAML 型別系統識別項給 XAML 型別的成員。 這個識別項會由 XAML 讀取器和 XAML 寫入器在處理成員節點期間 (當 XAML 讀取器位於 <see cref="F:System.Xaml.XamlNodeType.StartMember" /> 時) 使用，同時也會用於一般 XAML 型別系統邏輯。</summary>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)">
      <summary>使用 CLR 型別系統 <see cref="T:System.Xaml.XamlMember" /> 和 <see cref="T:System.Reflection.EventInfo" />，初始化 <see cref="T:System.Xaml.XamlSchemaContext" /> 類別的新執行個體。</summary>
      <param name="eventInfo">表示事件成員的 CLR 型別系統 <see cref="T:System.Reflection.EventInfo" />。</param>
      <param name="schemaContext">用來限定成員的 <see cref="T:System.Xaml.XamlSchemaContext" /> 內容。</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
      <summary>使用 CLR 型別系統 <see cref="T:System.Xaml.XamlMember" /> 和 <see cref="T:System.Reflection.EventInfo" /> (包含 <see cref="T:System.Xaml.XamlSchemaContext" /> 資訊)，初始化 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 類別的新執行個體。</summary>
      <param name="eventInfo">表示事件成員的 CLR 型別系統 <see cref="T:System.Reflection.EventInfo" />。</param>
      <param name="schemaContext">用來限定成員的 <see cref="T:System.Xaml.XamlSchemaContext" /> 內容。</param>
      <param name="invoker">
        <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 實作，可處理對 <see cref="T:System.Xaml.XamlMember" /> 的執行階段反映呼叫。</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)">
      <summary>使用 CLR 型別系統 <see cref="T:System.Xaml.XamlMember" /> 和 <see cref="T:System.Reflection.PropertyInfo" />，初始化 <see cref="T:System.Xaml.XamlSchemaContext" /> 類別的新執行個體。</summary>
      <param name="propertyInfo">表示屬性成員的 CLR 型別系統 <see cref="T:System.Reflection.PropertyInfo" />。</param>
      <param name="schemaContext">用來限定成員的 <see cref="T:System.Xaml.XamlSchemaContext" /> 內容。</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
      <summary>使用反映 <see cref="T:System.Xaml.XamlMember" /> 和 <see cref="T:System.Reflection.PropertyInfo" /> (包含 <see cref="T:System.Xaml.XamlSchemaContext" /> 資訊)，初始化 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 類別的新執行個體。</summary>
      <param name="propertyInfo">表示屬性成員的 CLR 型別系統 <see cref="T:System.Reflection.PropertyInfo" />。</param>
      <param name="schemaContext">用來限定成員的 <see cref="T:System.Xaml.XamlSchemaContext" /> 內容。</param>
      <param name="invoker">
        <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 實作，可處理對 <see cref="T:System.Xaml.XamlMember" /> 的執行階段叫用呼叫。</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
      <summary>針對表示可附加屬性的 <see cref="T:System.Xaml.XamlMember" />，初始化 <see cref="T:System.Xaml.XamlMember" /> 類別的新執行個體。</summary>
      <param name="attachablePropertyName">可附加屬性的字串名稱。</param>
      <param name="getter">可附加成員之支援實作的 <see langword="get" /> 存取子的 CLR 型別系統 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="setter">可附加成員之支援實作的 <see langword="set" /> 存取子的 CLR 型別系統 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="schemaContext">用來限定成員的 <see cref="T:System.Xaml.XamlSchemaContext" /> 內容。</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
      <summary>針對表示可附加屬性的 <see cref="T:System.Xaml.XamlMember" /> (包含 <see cref="T:System.Xaml.XamlMember" /> 資訊)，初始化 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 類別的新執行個體。</summary>
      <param name="attachablePropertyName">可附加屬性的字串名稱。</param>
      <param name="getter">可附加成員之支援實作的 <see langword="get" /> 存取子的 CLR 型別系統 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="setter">可附加成員之支援實作的 <see langword="set" /> 存取子的 CLR 型別系統 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="schemaContext">用來限定成員的 <see cref="T:System.Xaml.XamlSchemaContext" /> 內容。</param>
      <param name="invoker">
        <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 實作，可處理對 <see cref="T:System.Xaml.XamlMember" /> 的執行階段叫用呼叫。</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
      <summary>針對表示可附加事件的 <see cref="T:System.Xaml.XamlMember" />，初始化 <see cref="T:System.Xaml.XamlMember" /> 類別的新執行個體。</summary>
      <param name="attachableEventName">可附加事件的字串名稱。</param>
      <param name="adder">可附加成員之支援實作的處理常式 <see langword="Add" /> 方法的 CLR 型別系統 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="schemaContext">用來限定成員的 <see cref="T:System.Xaml.XamlSchemaContext" /> 內容。</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
      <summary>針對表示可附加事件的 <see cref="T:System.Xaml.XamlMember" /> (包含 <see cref="T:System.Xaml.XamlMember" /> 資訊)，初始化 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 類別的新執行個體。</summary>
      <param name="attachableEventName">可附加事件的字串名稱。</param>
      <param name="adder">可附加成員之支援實作的處理常式 <see langword="Add" /> 方法的 CLR 型別系統 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="schemaContext">用來限定成員的 <see cref="T:System.Xaml.XamlSchemaContext" /> 內容。</param>
      <param name="invoker">
        <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 實作，可處理對 <see cref="T:System.Xaml.XamlMember" /> 的執行階段叫用呼叫。</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
      <summary>使用字串名稱並宣告 <see cref="T:System.Xaml.XamlMember" /> 資訊，初始化 <see cref="T:System.Xaml.XamlType" /> 類別的新執行個體。 使用此簽章建構的 <see cref="T:System.Xaml.XamlMember" /> 具有諸多限制。</summary>
      <param name="name">成員的字串名稱。</param>
      <param name="declaringType">進行宣告的型別的 <see cref="T:System.Xaml.XamlType" /> 資訊。</param>
      <param name="isAttachable">
        <see langword="true" /> 表示成員為可附加成員，否則為 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 或 <paramref name="declaringType" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xaml.XamlMember.DeclaringType">
      <summary>取得型別的 <see cref="T:System.Xaml.XamlType" />，這個型別宣告與此 <see cref="T:System.Xaml.XamlMember" /> 相關聯的成員。</summary>
      <returns>型別的 <see cref="T:System.Xaml.XamlType" />，這個型別宣告與此 <see cref="T:System.Xaml.XamlMember" /> 相關聯的成員。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.DeferringLoader">
      <summary>取得 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 物件，這個物件用於延後載入 XAML 宣告的物件。</summary>
      <returns>
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />，對泛型具有 <see cref="T:System.Xaml.XamlDeferringLoader" /> 條件約束。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.DependsOn">
      <summary>取得 <see cref="T:System.Xaml.XamlMember" /> 物件的清單。 這些物件會報告因與此 <see cref="T:System.Xaml.XamlMember" /> 有相對初始設定順序而存在相依關聯性的成員。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlMember" /> 物件的清單。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.Equals(System.Object)">
      <summary>指出目前的物件和另一個物件是否相等。</summary>
      <param name="obj">要與這個物件比較的物件。</param>
      <returns>如果目前的物件等於 <paramref name="obj" /> 參數，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.Equals(System.Xaml.XamlMember)">
      <summary>指出目前的物件是否等於另一個具有相同型別的物件。</summary>
      <param name="other">要與這個物件相互比較的物件。</param>
      <returns>如果目前的物件等於 <paramref name="other" /> 參數，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.GetHashCode">
      <summary>傳回這個物件的雜湊程式碼。</summary>
      <returns>整數雜湊程式碼。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.GetXamlNamespaces">
      <summary>傳回這個 XAML 成員可能存在之 XAML 命名空間的清單。</summary>
      <returns>XAML 命名空間識別項的清單 (字串形式)。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.Invoker">
      <summary>取得與這個 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 相關聯的 <see cref="T:System.Xaml.XamlMember" /> 實作。</summary>
      <returns>與這個 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 相關聯的 <see cref="T:System.Xaml.XamlMember" /> 實作。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsAmbient">
      <summary>取得值，這個值表示此 <see cref="T:System.Xaml.XamlMember" /> 是否報告為環境屬性。</summary>
      <returns>如果這個 <see cref="T:System.Xaml.XamlMember" /> 報告為環境屬性，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsAttachable">
      <summary>取得值，這個值表示此 <see cref="T:System.Xaml.XamlMember" /> 是否為可附加的成員。</summary>
      <returns>如果這個 <see cref="T:System.Xaml.XamlMember" /> 是可附加的成員，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsDirective">
      <summary>取得值，這個值表示此 <see cref="T:System.Xaml.XamlMember" /> 是否為 XAML 指示詞。</summary>
      <returns>如果這個 <see cref="T:System.Xaml.XamlMember" /> 是 XAML 指示詞，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsEvent">
      <summary>取得值，這個值表示此 <see cref="T:System.Xaml.XamlMember" /> 是否表示事件成員。</summary>
      <returns>如果這個 <see cref="T:System.Xaml.XamlMember" /> 表示事件，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsNameValid">
      <summary>取得值，這個值表示此 <see cref="T:System.Xaml.XamlMember" /> 是否是使用有效的 <see langword="xamlName" /> 字串做為其 <see cref="P:System.Xaml.XamlMember.Name" /> 進行初始化。</summary>
      <returns>如果這個 <see cref="T:System.Xaml.XamlMember" /> 是使用有效的 <see langword="true" /> 字串進行初始化，則為 <see langword="xamlName" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsReadOnly">
      <summary>取得值，這個值表示此 <see cref="T:System.Xaml.XamlMember" /> 是否表示唯讀成員。</summary>
      <returns>如果這個 <see cref="T:System.Xaml.XamlMember" /> 表示唯讀成員，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsReadPublic">
      <summary>取得值，這個值表示此 <see cref="T:System.Xaml.XamlMember" /> 是否表示具有可呼叫之公用 <see langword="get" /> 存取子的成員。</summary>
      <returns>如果這個 <see cref="T:System.Xaml.XamlMember" /> 表示可呼叫的公用 <see langword="true" /> 存取子則為 <see langword="get" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsUnknown">
      <summary>取得值，這個值表示用於型別和成員解析的支援系統是否無法解析成員。</summary>
      <returns>如果無法解析成員則為 <see langword="true" />，如果可以解析成員則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsWriteOnly">
      <summary>取得值，這個值表示此 <see cref="T:System.Xaml.XamlMember" /> 是否表示唯寫成員。</summary>
      <returns>如果這個 <see cref="T:System.Xaml.XamlMember" /> 表示唯寫成員，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsWritePublic">
      <summary>取得值，這個值表示此 <see cref="T:System.Xaml.XamlMember" /> 是否表示具有可呼叫之公用 <see langword="set" /> 存取子的成員。</summary>
      <returns>如果這個 <see cref="T:System.Xaml.XamlMember" /> 表示可呼叫的公用 <see langword="true" /> 存取子則為 <see langword="set" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupCustomAttributeProvider">
      <summary>在衍生類別中實作時，傳回 <see cref="T:System.Reflection.ICustomAttributeProvider" /> 實作。</summary>
      <returns>
        <see cref="T:System.Reflection.ICustomAttributeProvider" /> 實作。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupDeferringLoader">
      <summary>傳回 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 物件，這個物件用於延後載入 XAML 宣告的物件。</summary>
      <returns>
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />，具有對泛型的 <see cref="T:System.Xaml.XamlDeferringLoader" /> 條件約束。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupDependsOn">
      <summary>傳回 <see cref="T:System.Xaml.XamlMember" /> 物件的清單。 這個清單中的項目會報告因與這個 <see cref="T:System.Xaml.XamlMember" /> 有相對初始設定順序而存在相依關聯性的成員。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlMember" /> 物件的清單。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupInvoker">
      <summary>傳回與這個 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 相關聯的 <see cref="T:System.Xaml.XamlMember" />。</summary>
      <returns>這個 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 的 <see cref="T:System.Xaml.XamlMember" /> 資訊，否則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsAmbient">
      <summary>傳回這個 <see cref="T:System.Xaml.XamlMember" /> 是否報告為環境屬性。</summary>
      <returns>
        <see langword="true" /> 報告這個 <see cref="T:System.Xaml.XamlMember" /> 為環境屬性，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsEvent">
      <summary>傳回這個 <see cref="T:System.Xaml.XamlMember" /> 是否表示事件。</summary>
      <returns>
        <see langword="true" /> 報告這個 <see cref="T:System.Xaml.XamlMember" /> 表示事件，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsReadOnly">
      <summary>傳回這個 <see cref="T:System.Xaml.XamlMember" /> 是否表示所需的唯讀屬性。</summary>
      <returns>
        <see langword="true" /> 報告這個 <see cref="T:System.Xaml.XamlMember" /> 為所需的唯讀屬性，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsReadPublic">
      <summary>傳回這個 <see cref="T:System.Xaml.XamlMember" /> 是否表示具有公用 <see langword="get" /> 存取子的屬性。</summary>
      <returns>如果這個 <see cref="T:System.Xaml.XamlMember" /> 表示具有公用 <see langword="true" /> 存取子的屬性，則為 <see langword="get" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsUnknown">
      <summary>傳回這個 <see cref="T:System.Xaml.XamlMember" /> 是否表示用於型別和成員解析的支援系統所無法解析的成員。</summary>
      <returns>如果這個 <see cref="T:System.Xaml.XamlMember" /> 表示無法解析的成員則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsWriteOnly">
      <summary>傳回這個 <see cref="T:System.Xaml.XamlMember" /> 是否表示具有公用 <see langword="set" /> 存取子但沒有公用 <see langword="get" /> 存取子的成員。</summary>
      <returns>如果這個 <see cref="T:System.Xaml.XamlMember" /> 表示唯寫成員，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsWritePublic">
      <summary>傳回這個 <see cref="T:System.Xaml.XamlMember" /> 是否表示具有公用 <see langword="set" /> 存取子的成員。</summary>
      <returns>如果這個 <see cref="T:System.Xaml.XamlMember" /> 表示可寫入的成員，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupMarkupExtensionBracketCharacters">
      <summary>傳回標記延伸的左右括弧字元。</summary>
      <returns>包含左右括弧字元的集合。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupTargetType">
      <summary>傳回 <see cref="T:System.Xaml.XamlType" /> 可能存在之型別的 <see cref="T:System.Xaml.XamlMember" />。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlMember" /> 可能存在的型別。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupType">
      <summary>傳回成員所使用型別的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>成員所使用型別的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupTypeConverter">
      <summary>傳回與這個 <see cref="T:System.Xaml.XamlMember" /> 相關聯的型別轉換器實作。</summary>
      <returns>具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 條件約束的 <see cref="T:System.ComponentModel.TypeConverter" /> 執行個體，否則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupUnderlyingGetter">
      <summary>傳回與這個 <see cref="T:System.Xaml.XamlMember" /> 相關聯的 <see langword="get" /> 存取子。</summary>
      <returns>相關聯 <see langword="get" /> 存取子的 <see cref="T:System.Reflection.MethodInfo" />，否則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupUnderlyingMember">
      <summary>傳回與這個 <see cref="T:System.Reflection.MemberInfo" /> 相關聯的 CLR 型別系統 <see cref="T:System.Xaml.XamlMember" />。</summary>
      <returns>與這個 <see cref="T:System.Reflection.MemberInfo" /> 相關聯的 CLR 型別系統 <see cref="T:System.Xaml.XamlMember" /> 物件，否則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupUnderlyingSetter">
      <summary>傳回與這個 <see cref="T:System.Xaml.XamlMember" /> 相關聯的 <see langword="set" /> 存取子。</summary>
      <returns>相關聯 <see langword="set" /> 存取子的 <see cref="T:System.Reflection.MethodInfo" />，否則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupValueSerializer">
      <summary>傳回與這個 <see cref="T:System.Xaml.XamlMember" /> 相關聯的值序列化程式實作。</summary>
      <returns>具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 條件約束的 <see cref="T:System.Windows.Markup.ValueSerializer" /> 執行個體，或 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.MarkupExtensionBracketCharacters">
      <summary>定義標記延伸的左右括弧字元。</summary>
      <returns>包含左右括弧字元的集合。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.Name">
      <summary>取得宣告此 <see cref="T:System.Xaml.XamlMember" /> 的 <see langword="xamlName" /> 名稱字串。</summary>
      <returns>宣告這個 <see cref="T:System.Xaml.XamlMember" /> 的 <see langword="xamlName" /> 名稱字串。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)">
      <summary>判斷兩個指定的 <see cref="T:System.Xaml.XamlMember" /> 物件是否具有相同的值。</summary>
      <param name="xamlMember1">
        <see cref="T:System.Xaml.XamlMember" /> 或 <see langword="null" />。</param>
      <param name="xamlMember2">
        <see cref="T:System.Xaml.XamlMember" /> 或 <see langword="null" />。</param>
      <returns>如果 <see langword="true" /> 的值與 <paramref name="xamlMember1" /> 的值相同，則為 <paramref name="xamlMember2" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)">
      <summary>判斷兩個指定的 <see cref="T:System.Xaml.XamlMember" /> 物件是否具有不同的值。</summary>
      <param name="xamlMember1">
        <see cref="T:System.Xaml.XamlMember" /> 或 <see langword="null" />。</param>
      <param name="xamlMember2">
        <see cref="T:System.Xaml.XamlMember" /> 或 <see langword="null" />。</param>
      <returns>如果 <paramref name="xamlMember1" /> 的值與 <paramref name="xamlMember2" /> 的值不同，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.PreferredXamlNamespace">
      <summary>取得單一 XAML 命名空間 URI，這個 URI 識別此 <see cref="T:System.Xaml.XamlMember" /> 的主要 XAML 命名空間。</summary>
      <returns>這個 <see cref="T:System.Xaml.XamlMember" /> 之主要 XAML 命名空間的識別項 (字串形式)。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.SerializationVisibility">
      <summary>取得 <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> 值，這個值表示視覺化設計工具應該如何處理成員。</summary>
      <returns>
        <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> 列舉的值。 預設為 <see cref="F:System.ComponentModel.DesignerSerializationVisibility.Visible" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.TargetType">
      <summary>取得 <see cref="T:System.Xaml.XamlType" /> 可能存在之型別的 <see cref="T:System.Xaml.XamlMember" />。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlMember" /> 可能存在的型別。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.ToString">
      <summary>傳回這個 <see cref="T:System.Xaml.XamlMember" /> 的字串表示。</summary>
      <returns>這個 <see cref="T:System.Xaml.XamlMember" /> 的字串表示。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.Type">
      <summary>取得成員所使用型別的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>成員所使用型別的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.TypeConverter">
      <summary>取得 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 物件，這個物件可用於建構 XAML 宣告物件的型別轉換。</summary>
      <returns>
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />，對泛型具有 <see cref="T:System.ComponentModel.TypeConverter" /> 條件約束。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.UnderlyingMember">
      <summary>針對以 <see cref="T:System.Reflection.MemberInfo" />、<see cref="T:System.Reflection.PropertyInfo" /> 或 <see cref="T:System.Reflection.MethodInfo" /> 所建構的成員，取得可用的 CLR 型別系統 <see cref="T:System.Reflection.EventInfo" />。</summary>
      <returns>從初始建構函式參數轉型的 CLR 型別系統 <see cref="T:System.Reflection.MemberInfo" /> 資訊。 以 <see cref="T:System.Xaml.XamlMember" /> 簽章建構的 <see cref="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)" /> 會傳回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.ValueSerializer">
      <summary>取得 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 物件，這個物件用於對 XAML 宣告的物件進行值序列化。</summary>
      <returns>
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />，對泛型具有 <see cref="T:System.Windows.Markup.ValueSerializer" /> 條件約束。</returns>
    </member>
    <member name="T:System.Xaml.XamlNodeList">
      <summary>提供 XAML 節點的清單，這些節點可用於以延後方式寫入 XAML 節點之類的情節。</summary>
    </member>
    <member name="M:System.Xaml.XamlNodeList.#ctor(System.Xaml.XamlSchemaContext)">
      <summary>使用提供的結構描述內容，初始化 <see cref="T:System.Xaml.XamlNodeList" /> 類別的新執行個體。</summary>
      <param name="schemaContext">要用於節點作業的結構描述內容。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemaContext" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlNodeList.#ctor(System.Xaml.XamlSchemaContext,System.Int32)">
      <summary>使用提供的結構描述內容和清單大小，初始化 <see cref="T:System.Xaml.XamlNodeList" /> 類別的新執行個體。</summary>
      <param name="schemaContext">要用於節點作業的結構描述內容。</param>
      <param name="size">想要的清單項目計數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemaContext" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlNodeList.Clear">
      <summary>清除這個清單中的項目。</summary>
    </member>
    <member name="P:System.Xaml.XamlNodeList.Count">
      <summary>取得這個 <see cref="T:System.Xaml.XamlNodeList" /> 中的節點數目。</summary>
      <returns>這個 <see cref="T:System.Xaml.XamlNodeList" /> 中的節點數目。</returns>
    </member>
    <member name="M:System.Xaml.XamlNodeList.GetReader">
      <summary>傳回 XAML 讀取器實作委派。</summary>
      <returns>XAML 讀取器實作委派。</returns>
      <exception cref="T:System.Xaml.XamlException">
        <see cref="T:System.Xaml.XamlNodeList" /> 仍處於寫入模式。
-或-
用於節點清單的寫入器有沒有結構描述內容。</exception>
    </member>
    <member name="P:System.Xaml.XamlNodeList.Writer">
      <summary>取得相關聯的 XAML 寫入器。</summary>
      <returns>相關聯的 XAML 寫入器。</returns>
    </member>
    <member name="T:System.Xaml.XamlNodeQueue">
      <summary>提供可用於寫入節點和再次讀取這些節點的緩衝區。</summary>
    </member>
    <member name="M:System.Xaml.XamlNodeQueue.#ctor(System.Xaml.XamlSchemaContext)">
      <summary>使用提供的 XAML 結構描述內容，初始化 <see cref="T:System.Xaml.XamlNodeQueue" /> 類別的新執行個體。</summary>
      <param name="schemaContext">要用於節點作業的結構描述內容。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlSchemaContext" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xaml.XamlNodeQueue.Count">
      <summary>取得 <see cref="T:System.Xaml.XamlNodeQueue" /> 中的節點數目。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlNodeQueue" /> 中的節點數目。</returns>
    </member>
    <member name="P:System.Xaml.XamlNodeQueue.IsEmpty">
      <summary>取得值，這個值決定此 <see cref="T:System.Xaml.XamlNodeQueue" /> 是否不含節點。</summary>
      <returns>如果這個 <see cref="T:System.Xaml.XamlNodeQueue" /> 不含節點，則為 <see langword="true" />。如果這個 <see cref="T:System.Xaml.XamlNodeQueue" /> 包含節點，則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlNodeQueue.Reader">
      <summary>取得 XAML 讀取器實作委派。</summary>
      <returns>XAML 讀取器實作委派。</returns>
      <exception cref="T:System.Xaml.XamlException">用於節點清單的 XAML 寫入器不具有有效的 XAML 結構描述內容。</exception>
    </member>
    <member name="P:System.Xaml.XamlNodeQueue.Writer">
      <summary>取得相關聯的 XAML 寫入器。</summary>
      <returns>相關聯的 XAML 寫入器。</returns>
    </member>
    <member name="T:System.Xaml.XamlNodeType">
      <summary>描述 XAML 讀取器目前正在處理之節點的型別。</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.EndMember">
      <summary>讀取器在成員節點的結尾。</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.EndObject">
      <summary>讀取器在物件節點的結尾。</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.GetObject">
      <summary>讀取器在物件節點內，且正在寫入預設值或隱含值，而不是指定的物件值。</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.NamespaceDeclaration">
      <summary>讀取器在 XML 命名空間宣告內。</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.None">
      <summary>讀取器不在真實節點上 (例如，讀取器可能在檔案結尾)。</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.StartMember">
      <summary>讀取器在成員節點的開頭。</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.StartObject">
      <summary>讀取器在物件節點的開頭。</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.Value">
      <summary>讀取器在節點內且正在處理值。</summary>
    </member>
    <member name="T:System.Xaml.XamlObjectEventArgs">
      <summary>提供用於回呼的資料，可以在物件初始設定和屬性設定值的序列中插入。 這會影響 <see cref="T:System.Xaml.XamlObjectWriter" /> 所產生的物件圖形。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectEventArgs.#ctor(System.Object)">
      <summary>初始化 <see cref="T:System.Xaml.XamlObjectEventArgs" /> 類別的新執行個體。</summary>
      <param name="instance">與事件資料相關的物件執行個體。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xaml.XamlObjectEventArgs.ElementLineNumber">
      <summary>取得或設定相關物件執行個體的行號。</summary>
      <returns>項目的行號。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectEventArgs.ElementLinePosition">
      <summary>取得或設定相關物件執行個體在一行中的位置。</summary>
      <returns>項目在行中的位置。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectEventArgs.Instance">
      <summary>取得與事件資料相關的物件執行個體。</summary>
      <returns>與事件資料相關的物件執行個體。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectEventArgs.SourceBamlUri">
      <summary>取得或設定相關物件執行個體的 BAML URI。</summary>
      <returns>相關物件執行個體的 BAML URI。</returns>
    </member>
    <member name="T:System.Xaml.XamlObjectReader">
      <summary>提供 <see cref="T:System.Xaml.XamlReader" /> 實作，這個實作會讀取圖形並產生 XAML 節點資料流。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectReader.#ctor(System.Object)">
      <summary>初始化 <see cref="T:System.Xaml.XamlObjectReader" /> 類別的新執行個體。</summary>
      <param name="instance">要讀取之物件樹狀結構/物件圖形的根。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectReader.#ctor(System.Object,System.Xaml.XamlObjectReaderSettings)">
      <summary>使用指定的讀取器設定，初始化 <see cref="T:System.Xaml.XamlObjectReader" /> 類別的新執行個體。</summary>
      <param name="instance">要讀取之物件樹狀結構的根物件。</param>
      <param name="settings">設定物件。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectReader.#ctor(System.Object,System.Xaml.XamlSchemaContext)">
      <summary>使用指定的結構描述內容，初始化 <see cref="T:System.Xaml.XamlObjectReader" /> 類別的新執行個體。</summary>
      <param name="instance">要讀取之物件樹狀結構的根物件。</param>
      <param name="schemaContext">供讀取器使用的結構描述內容。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemaContext" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectReader.#ctor(System.Object,System.Xaml.XamlSchemaContext,System.Xaml.XamlObjectReaderSettings)">
      <summary>使用指定的結構描述內容和讀取器設定，初始化 <see cref="T:System.Xaml.XamlObjectReader" /> 類別的新執行個體。</summary>
      <param name="instance">要讀取之物件樹狀結構的根物件。</param>
      <param name="schemaContext">供讀取器使用的結構描述內容。</param>
      <param name="settings">設定物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemaContext" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.Instance">
      <summary>取得目前讀取器位置上可用的物件執行個體。</summary>
      <returns>目前讀取器位置上的物件執行個體，如果讀取器位置不在物件上，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.IsEof">
      <summary>取得值，這個值會報告讀取器是否位於檔案結尾。</summary>
      <returns>如果讀取器位置在檔案的結尾則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.Member">
      <summary>如果讀取器位置在 <see cref="T:System.Xaml.XamlMember" /> 上，則取得讀取器位置上的目前 <see cref="F:System.Xaml.XamlNodeType.StartMember" />。</summary>
      <returns>目前的成員，如果讀取器位置不在成員上，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.Namespace">
      <summary>從目前的讀取器位置取得 XAML 命名空間宣告。</summary>
      <returns>如果讀取器位於 <see cref="F:System.Xaml.XamlNodeType.NamespaceDeclaration" /> 上，則為 XAML 命名空間宣告，否則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.NodeType">
      <summary>取得目前節點的類型。</summary>
      <returns>目前節點的型別。</returns>
    </member>
    <member name="M:System.Xaml.XamlObjectReader.Read">
      <summary>從來源物件圖形中提供下一個 XAML 節點 (如果有節點的話)。</summary>
      <returns>如果有節點則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.SchemaContext">
      <summary>取得物件，這個物件會為資訊集提供結構描述資訊。</summary>
      <returns>物件，會為資訊集提供結構描述資訊。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.Type">
      <summary>取得目前讀取器位置上之物件的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>目前讀取器位置上之物件的 <see cref="T:System.Xaml.XamlType" />，如果位置不在物件上，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.Value">
      <summary>取得目前讀取器位置上之節點的值。</summary>
      <returns>目前節點的值，如果讀取器位置不在 <see cref="F:System.Xaml.XamlNodeType.Value" /> 節點型別上，則為 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xaml.XamlObjectReaderException">
      <summary>由數個 <see cref="T:System.Xaml.XamlObjectReader" /> 內部 Helper API 擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectReaderException.#ctor">
      <summary>以系統提供的錯誤說明訊息，初始化 <see cref="T:System.Xaml.XamlObjectReaderException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectReaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.Xaml.XamlObjectReaderException" /> 類別的新執行個體。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectReaderException.#ctor(System.String)">
      <summary>使用指定的錯誤說明訊息，初始化 <see cref="T:System.Xaml.XamlObjectReaderException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況的訊息。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectReaderException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Xaml.XamlObjectReaderException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況的訊息。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="T:System.Xaml.XamlObjectReaderSettings">
      <summary>指定 <see cref="T:System.Xaml.XamlObjectReader" /> 的處理規則或選項設定。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectReaderSettings.#ctor">
      <summary>初始化 <see cref="T:System.Xaml.XamlObjectReaderSettings" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xaml.XamlObjectReaderSettings.RequireExplicitContentVisibility">
      <summary>取得或設定值，這個值決定針對內容 (Context) 使用相關聯 <see cref="T:System.Xaml.XamlObjectReader" /> 的寫入器，是否應該明確使用設計工具設定來寫入內容 (Content)。</summary>
      <returns>
        <see langword="true" /> 表示在 <see cref="P:System.Xaml.XamlMember.IsWritePublic" /> 報告 <see langword="false" /> 的情況下，使用此內容的寫入器應該使用設計工具設定來寫入任何輸出。如果應該忽略設計工具設定，則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Xaml.XamlObjectWriter">
      <summary>從來源 XAML 節點資料流建立物件圖形。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext)">
      <summary>使用 <see cref="T:System.Xaml.XamlObjectWriter" /> 所使用的 XAML 結構描述內容，初始化 <see cref="T:System.Xaml.XamlReader" /> 類別的新執行個體。</summary>
      <param name="schemaContext">與提供寫入之節點的 XAML 讀取器共用的 XAML 結構描述內容。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemaContext" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext,System.Xaml.XamlObjectWriterSettings)">
      <summary>使用 <see cref="T:System.Xaml.XamlObjectWriter" /> 所使用的內容和其設定，初始化 <see cref="T:System.Xaml.XamlReader" /> 類別的新執行個體。</summary>
      <param name="schemaContext">與提供寫入之節點的 XAML 讀取器共用的 XAML 結構描述內容。</param>
      <param name="settings">指定 <see cref="T:System.Xaml.XamlObjectWriter" /> 行為和輸出之特定選項的設定物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemaContext" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.Clear">
      <summary>重設所有可能的框架並清除物件圖形。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.Xaml.XamlObjectWriter" /> 所使用的 Unmanaged 資源，並選擇性釋放 Managed 資源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示釋放 Managed 資源，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.OnAfterBeginInit(System.Object)">
      <summary>叫用與這個 <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler" /> 之 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 相關聯的任何 <see cref="T:System.Xaml.XamlObjectWriter" /> 方法。</summary>
      <param name="value">要報告的物件。 叫用處理常式時，會將物件封裝至 <see cref="T:System.Xaml.XamlObjectEventArgs" /> 中。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.OnAfterEndInit(System.Object)">
      <summary>叫用與這個 <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler" /> 之 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 相關聯的任何 <see cref="T:System.Xaml.XamlObjectWriter" /> 方法。</summary>
      <param name="value">要報告的物件。 叫用處理常式時，值會封裝至 <see cref="T:System.Xaml.XamlObjectEventArgs" /> 中。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.OnAfterProperties(System.Object)">
      <summary>叫用與這個 <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler" /> 之 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 相關聯的任何 <see cref="T:System.Xaml.XamlObjectWriter" /> 參考方法。</summary>
      <param name="value">要報告的物件。 會在叫用處理常式將其封裝至 <see cref="T:System.Xaml.XamlObjectEventArgs" /> 中。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.OnBeforeProperties(System.Object)">
      <summary>叫用與這個 <see cref="P:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler" /> 之 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 相關聯的任何 <see cref="T:System.Xaml.XamlObjectWriter" /> 參考方法。</summary>
      <param name="value">在叫用處理常式時要透過 <see cref="T:System.Xaml.XamlObjectEventArgs" /> 傳遞的值。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.OnSetValue(System.Object,System.Xaml.XamlMember,System.Object)">
      <summary>叫用與這個寫入器之 <see cref="P:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler" /> 相關聯的任何 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 參考方法 (只要 <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> 事件資料中的 <paramref name="handled" /> 不是 <see langword="true" /> 即可)。</summary>
      <param name="eventSender">要向處理常式報告做為來源的物件。</param>
      <param name="member">要設定之屬性的名稱，這個名稱會在 <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> 中傳遞至處理常式。</param>
      <param name="value">要提供給由 <paramref name="property" /> 命名之屬性的值。 這個值會在 <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> 中傳遞至處理常式。</param>
      <returns>任何相關聯處理常式所設定的布林值，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriter.Result">
      <summary>取得最後一個寫入的物件。 通常只有在節點資料流位在結尾且物件圖形完成時才會加以呼叫。</summary>
      <returns>最後一個寫入的物件，或 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriter.RootNameScope">
      <summary>取得 <see cref="T:System.Windows.Markup.INameScope" /> 服務，這個服務會維護 XAML 物件寫入器之絕對節點根的 XAML 名稱範圍。</summary>
      <returns>
        <see cref="T:System.Windows.Markup.INameScope" /> 服務，這個服務會維護物件寫入器目前根的 XAML 名稱範圍。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriter.SchemaContext">
      <summary>取得作用中 XAML 結構描述內容。</summary>
      <returns>XAML 結構描述內容。</returns>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.SetLineInfo(System.Int32,System.Int32)">
      <summary>實作 <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" />，並提供例外狀況的行資訊。</summary>
      <param name="lineNumber">來自讀取器的行號。</param>
      <param name="linePosition">來自讀取器的行位置。</param>
    </member>
    <member name="P:System.Xaml.XamlObjectWriter.ShouldProvideLineInfo">
      <summary>取得值，這個值會報告行資訊服務是否應該提供值 (因此也應該在必要時呼叫 <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" /> 方法)。</summary>
      <returns>如果寫入器會使用行資訊，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteEndMember">
      <summary>關閉目前成員範圍，並且可能在關閉成員範圍期間寫入其值。 新的範圍會成為成員的父物件範圍。</summary>
      <exception cref="T:System.Xaml.XamlObjectWriterException">無法從在這次呼叫和前一次 <see langword="StartMember" /> 之間遇到的值節點建立成員值。</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteEndObject">
      <summary>關閉寫入器中的目前物件範圍。 新的物件範圍會成為父成員範圍。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteGetObject">
      <summary>當指定之物件為父屬性的預設值或隱含值時，將概念 <see langword="StartObject" /> 寫入物件圖形。 隱含值來自從 XAML 結構描述內容及支援型別資訊取得的資訊，而非指定為在輸入 XAML 節點集中的物件值。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
      <summary>定義會套用至下一個物件範圍或成員範圍的命名空間宣告。</summary>
      <param name="namespaceDeclaration">要寫入的命名空間宣告。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="namespaceDeclaration" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="namespaceDeclaration" /> 的元件為 <see langword="null" />。</exception>
      <exception cref="T:System.Xaml.XamlObjectReaderException">嘗試在無效的範圍中寫入 XAML 命名空間節點。</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
      <summary>將新的成員節點寫入至目前物件範圍，而這個範圍會成為新的成員範圍。</summary>
      <param name="property">要寫入的 XAML 屬性。 您通常會從 XAML 讀取器透過 XAML 節點資料流媒介取得這個值。</param>
      <exception cref="T:System.Xaml.XamlObjectWriterException">
        <paramref name="property" /> 的 <see cref="P:System.Xaml.XamlMember.IsUnknown" /> 已設定為 <see langword="true" />。
-或-
傳遞 <see cref="P:System.Xaml.XamlLanguage.UnknownContent" />，表示不支援內容之物件內容所包含的 XAML 節點資料流。
-或-
嘗試在無效的範圍中寫入開始成員。</exception>
      <exception cref="T:System.Xaml.XamlDuplicateMemberException">
        <paramref name="property" /> 會指定已經在父代物件範圍中明確設定的屬性。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteStartObject(System.Xaml.XamlType)">
      <summary>將物件節點寫入至目前範圍，並將這個範圍設為新的物件範圍。</summary>
      <param name="xamlType">要寫入的型別。 您通常是從 XAML 讀取器取得這個值。</param>
      <exception cref="T:System.Xaml.XamlObjectWriterException">正在處理 <see cref="P:System.Xaml.XamlType.IsUnknown" /> 型別，而且無法建立物件。
-或-
嘗試在無效的範圍中寫入一個開始物件。</exception>
      <exception cref="T:System.Xaml.XamlParseException">嘗試於已經在設定中提供根物件時寫入根物件。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlType" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteValue(System.Object)">
      <summary>將值寫入至目前成員範圍。 如果目前範圍在集合、字典或陣列物件內，則應將此值加入至集合、字典或陣列。</summary>
      <param name="value">要寫入的值。</param>
      <exception cref="T:System.Xaml.XamlObjectWriterException">嘗試在無效的範圍中寫入值。</exception>
    </member>
    <member name="T:System.Xaml.XamlObjectWriterException">
      <summary>在 XAML 寫入器 (例如 <see cref="T:System.Xaml.XamlObjectWriter" /> 類別) 嘗試從 XAML 節點資料流產生物件圖形而發生錯誤時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterException.#ctor">
      <summary>以系統提供的錯誤說明訊息，初始化 <see cref="T:System.Xaml.XamlObjectWriterException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.Xaml.XamlObjectWriterException" /> 類別的新執行個體。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterException.#ctor(System.String)">
      <summary>使用指定的錯誤說明訊息，初始化 <see cref="T:System.Xaml.XamlObjectWriterException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況的訊息。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Xaml.XamlObjectWriterException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況的訊息。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="T:System.Xaml.XamlObjectWriterSettings">
      <summary>提供 <see cref="T:System.Xaml.XamlObjectWriter" /> 的特定 XAML 寫入器設定。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterSettings.#ctor">
      <summary>初始化 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterSettings.#ctor(System.Xaml.XamlObjectWriterSettings)">
      <summary>初始化 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 類別的新執行個體，這個執行個體將會根據現有執行個體的複本產生。</summary>
      <param name="settings">要複製的設定執行個體。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="settings" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.AccessLevel">
      <summary>取得或設定 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> XAML 寫入器觀察的權限。</summary>
      <returns>
        <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 權限。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler">
      <summary>取得或設定回呼的參考，針對每個建立的物件，XAML 寫入器會在物件存留期的 <see cref="M:System.ComponentModel.ISupportInitialize.BeginInit" /> 階段叫用這個回呼。</summary>
      <returns>由 XAML 寫入器在物件存留期 <see cref="M:System.ComponentModel.ISupportInitialize.BeginInit" /> 階段叫用的回呼。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler">
      <summary>取得或設定回呼的參考，針對每個建立的物件，XAML 寫入器會在物件存留期的 <see cref="M:System.ComponentModel.ISupportInitialize.EndInit" /> 階段叫用這個回呼。</summary>
      <returns>由 XAML 寫入器在物件存留期 <see cref="M:System.ComponentModel.ISupportInitialize.EndInit" /> 階段叫用的回呼。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler">
      <summary>取得或設定回呼的參考，針對每個建立的物件，XAML 寫入器會在物件存留期的後置成員寫入階段叫用這個回呼。</summary>
      <returns>回呼，由 XAML 寫入器在物件存留期的後置成員寫入階段叫用。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler">
      <summary>取得或設定回呼的參考，針對每個建立的物件，XAML 寫入器會在物件存留期的後置成員寫入階段叫用這個回呼。</summary>
      <returns>由 XAML 寫入器在物件存留期後置成員寫入階段叫用的回呼。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.ExternalNameScope">
      <summary>取得或設定當 <see cref="P:System.Xaml.XamlObjectWriterSettings.RegisterNamesOnExternalNamescope" /> 為 <see langword="true" /> 時，用於從 XAML 寫入器註冊名稱的名稱範圍。</summary>
      <returns>用於註冊名稱的 XAML 名稱範圍。 預設為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.IgnoreCanConvert">
      <summary>取得或設定值，這個值指定 XAML 寫入器是否應該在有型別轉換器的情況下忽略 (而不要呼叫) <see cref="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" /> 上的 <see cref="T:System.ComponentModel.TypeConverter" /> 實作。</summary>
      <returns>如果 XAML 寫入器會忽略 <see cref="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" /> 實作則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.PreferUnconvertedDictionaryKeys">
      <summary>取得或設定值，這個值決定是否要停用會在寫入物件圖形表示之前對 <see cref="T:System.Xaml.XamlObjectWriter" /> 的 <paramref name="K" /> 元件執行型別轉換的預設 <see cref="T:System.Collections.Generic.Dictionary`2" /> 功能。</summary>
      <returns>如果要停用 <see cref="T:System.Collections.Generic.Dictionary`2" /> 物件的 <paramref name="K" /> 型別轉換，則為 <see langword="true" />。 如果要為適用的 <see cref="T:System.Collections.Generic.Dictionary`2" /> 物件執行 <paramref name="K" /> 型別轉換，則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.RegisterNamesOnExternalNamescope">
      <summary>取得或設定值，這個值決定是否應該向指定的 <see cref="P:System.Xaml.XamlObjectWriterSettings.ExternalNameScope" /> 進行名稱註冊。</summary>
      <returns>如果應該向 <see cref="P:System.Xaml.XamlObjectWriterSettings.ExternalNameScope" /> 進行名稱註冊，則為 <see langword="true" />。如果應該到父代 XAML 名稱範圍中進行名稱註冊，則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.RootObjectInstance">
      <summary>取得或設定 <see cref="T:System.Xaml.XamlObjectWriter" /> 作業的既有根物件。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlObjectWriter" /> 作業的既有根物件。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.SkipDuplicatePropertyCheck">
      <summary>取得或設定值，這個值決定 XAML 寫入器是否要省略檢查一個會檢查重複屬性的程式碼路徑。</summary>
      <returns>如果應省略重複屬性檢查則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.SkipProvideValueOnRoot">
      <summary>取得或設定值，這個值表示 <see cref="T:System.Xaml.XamlObjectWriter" /> 是否應該略過對標記延伸的 <see langword="ProvideValue" /> 呼叫，當標記延伸表示的是物件圖形的根時，這很重要。</summary>
      <returns>如果 <see cref="T:System.Xaml.XamlObjectWriter" /> 應該略過對標記延伸的 <see langword="true" /> 呼叫，則為 <see langword="ProvideValue" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.SourceBamlUri">
      <summary>用於 <see langword="BeginInitHandler" />，取代實際的 <see langword="BaseUri" />。</summary>
      <returns>
        <see cref="T:System.Uri" /> 可用於取代實際的 <see langword="BaseUri" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler">
      <summary>取得或設定當物件寫入器對相依性屬性呼叫 CLR 實作的 <see langword="SetValue" /> 時，所要使用的處理常式。</summary>
      <returns>處理這個案例的處理常式實作。</returns>
    </member>
    <member name="T:System.Xaml.XamlParseException">
      <summary>當 XAML 讀取器無法將 XAML 讀取器來源的項目處理成 XAML 節點資料流時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Xaml.XamlParseException.#ctor">
      <summary>以系統提供的錯誤說明訊息，初始化 <see cref="T:System.Xaml.XamlParseException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xaml.XamlParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.Xaml.XamlParseException" /> 類別的新執行個體。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.Xaml.XamlParseException.#ctor(System.String)">
      <summary>使用指定的錯誤說明訊息，初始化 <see cref="T:System.Xaml.XamlParseException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況的訊息。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
    </member>
    <member name="M:System.Xaml.XamlParseException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Xaml.XamlParseException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況的訊息。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="T:System.Xaml.XamlReader">
      <summary>針對會使用 XAML 輸入來產生 XAML 節點資料流的類別，提供基底定義。</summary>
    </member>
    <member name="M:System.Xaml.XamlReader.#ctor">
      <summary>初始化 <see cref="T:System.Xaml.XamlReader" /> 類別。</summary>
    </member>
    <member name="M:System.Xaml.XamlReader.Close">
      <summary>關閉 XAML 節點資料流。</summary>
    </member>
    <member name="M:System.Xaml.XamlReader.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.Xaml.XamlReader" /> 所使用的 Unmanaged 資源，並選擇性釋放 Managed 資源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示釋放 Managed 資源，否則為 <see langword="false" />。</param>
    </member>
    <member name="P:System.Xaml.XamlReader.IsDisposed">
      <summary>取得是否已呼叫 <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" />。</summary>
      <returns>如果已呼叫 <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.IsEof">
      <summary>在衍生類別中實作時取得值，這個值會報告讀取器位置是否在檔案結尾。</summary>
      <returns>如果位置是在 XAML 節點資料流的概念檔案結尾則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.Member">
      <summary>在衍生類別中實作時，如果讀取器位置在 <see cref="F:System.Xaml.XamlNodeType.StartMember" /> 上，則取得讀取器位置上的目前成員。</summary>
      <returns>目前的成員，如果讀取器位置不在成員上，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.Namespace">
      <summary>在衍生類別中實作時，從目前節點取得 XAML 命名空間資訊。</summary>
      <returns>XAML 命名空間資訊 (如果有的話)，否則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.NodeType">
      <summary>在衍生類別中實作時，會取得目前節點的型別。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlNodeType" /> 列舉的值。</returns>
    </member>
    <member name="M:System.Xaml.XamlReader.Read">
      <summary>在衍生類別中實作時，會從來源提供下一個 XAML 節點 (如果有節點的話)。</summary>
      <returns>如果有節點則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlReader.ReadSubtree">
      <summary>傳回以目前 <see cref="T:System.Xaml.XamlReader" /> 為基礎的 <see cref="T:System.Xaml.XamlReader" />，而傳回的 <see cref="T:System.Xaml.XamlReader" /> 可用來逐一查看 XAML 節點結構的子樹狀結構。</summary>
      <returns>子樹狀結構的新 XAML 讀取器執行個體。</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.SchemaContext">
      <summary>在衍生類別中實作時取得物件，這個物件會為資訊集提供 XAML 結構描述內容資訊。</summary>
      <returns>為資訊集提供 XAML 結構描述內容資訊的物件。</returns>
    </member>
    <member name="M:System.Xaml.XamlReader.Skip">
      <summary>略過目前節點，並使讀取器位置前進至下一個節點。</summary>
    </member>
    <member name="M:System.Xaml.XamlReader.System#IDisposable#Dispose">
      <summary>釋放 <see cref="T:System.Xaml.XamlReader" /> 類別目前的執行個體所使用的全部資源。</summary>
    </member>
    <member name="P:System.Xaml.XamlReader.Type">
      <summary>在衍生類別中實作時，會取得目前節點的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>目前節點的 <see cref="T:System.Xaml.XamlType" />，如果目前讀取器位置不在物件上，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.Value">
      <summary>在衍生類別中實作時，會取得目前節點的值。</summary>
      <returns>目前節點的值，如果目前讀取器位置不在 <see cref="F:System.Xaml.XamlNodeType.Value" /> 節點型別上，則為 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xaml.XamlReaderSettings">
      <summary>指定 <see cref="T:System.Xaml.XamlReader" /> 實作的處理規則或選項設定。</summary>
    </member>
    <member name="M:System.Xaml.XamlReaderSettings.#ctor">
      <summary>初始化 <see cref="T:System.Xaml.XamlReaderSettings" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xaml.XamlReaderSettings.#ctor(System.Xaml.XamlReaderSettings)">
      <summary>根據另一個 <see cref="T:System.Xaml.XamlReaderSettings" /> 物件中的值，初始化 <see cref="T:System.Xaml.XamlReaderSettings" /> 類別的新執行個體。</summary>
      <param name="settings">現有的 <see cref="T:System.Xaml.XamlReaderSettings" /> 物件。</param>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.AllowProtectedMembersOnRoot">
      <summary>取得或設定值，這個值表示在報告 XAML 型別表示時，根物件是否可以包含具有受保護程式碼存取模型的成員。</summary>
      <returns>如果根物件可以包含具有受保護程式碼存取模型的成員，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.BaseUri">
      <summary>取得或設定用來解析相對路徑的基底 URI。</summary>
      <returns>要使用的基底 URI。 預設為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.IgnoreUidsOnPropertyElements">
      <summary>取得或設定值，這個值指定 XAML 讀取器是否應該忽略存在於屬性 (Property) 項目中的 <see langword="x:Uid" /> 屬性 (Attribute) 值。</summary>
      <returns>如果讀取器應該忽略屬性 (Property) 項目上之 <see langword="true" /> 屬性 (Attribute) 的值，則為 <see langword="x:Uid" />。 如果讀取器應該處理屬性 (Property) 項目上的 <see langword="false" /> 屬性 (Attribute)，則為 <see langword="x:Uid" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.LocalAssembly">
      <summary>取得或設定物件，這個物件表示目前要處理的本機組件。 這項組件資訊會用於呼叫 Helper API，例如 <see cref="M:System.Xaml.XamlType.GetAllMembers" />。</summary>
      <returns>CLR 反映 <see cref="T:System.Reflection.Assembly" /> 物件。</returns>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.ProvideLineInfo">
      <summary>取得或設定值，這個值指定讀取器是否可以提供行號和位置。</summary>
      <returns>如果讀取器可以提供行號和位置資訊，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.ValuesMustBeString">
      <summary>取得或設定值，這個值指定讀取器是否強制將所有 <see langword="Value" /> 節點視為 <see langword="String" /> 型別來處理。</summary>
      <returns>如果讀取器強制規定 <see langword="true" /> 節點中只包含 <see langword="String" />，則為 <see langword="Value" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Xaml.XamlSchemaContext">
      <summary>定義可重複使用的內容，以解譯或對應 XAML 型別及其基礎組件中的型別。</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.#ctor">
      <summary>初始化 <see cref="T:System.Xaml.XamlSchemaContext" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
      <summary>根據參考組件集，初始化 <see cref="T:System.Xaml.XamlSchemaContext" /> 類別的新執行個體。</summary>
      <param name="referenceAssemblies">組件資訊項目的可列舉集。 每一個組件資訊項目都是由 <see cref="T:System.Reflection.Assembly" /> 值指定。</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Xaml.XamlSchemaContextSettings)">
      <summary>根據參考組件集和設定物件，初始化 <see cref="T:System.Xaml.XamlSchemaContext" /> 類別的新執行個體。</summary>
      <param name="referenceAssemblies">組件資訊的可列舉集。 每一個組件資訊項目都是由 <see cref="T:System.Reflection.Assembly" /> 值指定。</param>
      <param name="settings">用於建構 <see cref="T:System.Xaml.XamlSchemaContext" /> 的設定物件。</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.#ctor(System.Xaml.XamlSchemaContextSettings)">
      <summary>根據設定物件，初始化 <see cref="T:System.Xaml.XamlSchemaContext" /> 類別的新執行個體。</summary>
      <param name="settings">用於建構 <see cref="T:System.Xaml.XamlSchemaContext" /> 的設定物件。</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.Finalize">
      <summary>提供不會叫用 <see langword="Finalize" /> 的非標準 <see langword="Dispose" /> 實作。</summary>
    </member>
    <member name="P:System.Xaml.XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces">
      <summary>取得值，這個值指定 XAML 結構描述和其內容是否在查閱 API 所傳回的值中使用完整組件名稱。</summary>
      <returns>如果 XAML 結構描述和其內容在查閱 API 所傳回的值中使用完整組件名稱，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetAllXamlNamespaces">
      <summary>搜尋這個 <see cref="T:System.Xaml.XamlSchemaContext" /> 所持有的組件，並傳回命名空間集。</summary>
      <returns>命名空間識別項的可列舉集。 這些識別項是以字串形式提供。</returns>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetAllXamlTypes(System.String)">
      <summary>搜尋這個 <see cref="T:System.Xaml.XamlSchemaContext" /> 所持有的組件，並從指定的 XAML 命名空間傳回型別集。</summary>
      <param name="xamlNamespace">要傳回型別的 XAML 命名空間。</param>
      <returns>XAML 型別的可列舉集。 集合中的每一個 XAML 型別都是以 <see cref="T:System.Xaml.XamlType" /> 物件表示。</returns>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetPreferredPrefix(System.String)">
      <summary>取得字串，這個字串會報告為慣用的前置詞，供消費者在對應指定的 XAML 命名空間時使用。</summary>
      <param name="xmlns">要取得慣用前置詞的 XAML 命名空間。</param>
      <returns>消費者在對應指定的 XAML 命名空間做為標記之用時，應該使用的字串。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlns" /> 為 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetValueConverter``1(System.Type,System.Xaml.XamlType)">
      <summary>傳回可轉換為所要求之 <paramref name="targetType" /> 的值轉換器。</summary>
      <param name="converterType">轉換子實作。</param>
      <param name="targetType">轉換器所需的目的型別。</param>
      <typeparam name="TConverterBase">特定的轉換器基底類別。</typeparam>
      <returns>
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />，其條件約束符合方法呼叫上設定的條件約束。</returns>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetXamlDirective(System.String,System.String)">
      <summary>傳回 <see cref="T:System.Xaml.XamlDirective" /> 值，這個值表示用於 XAML 語言或特定實作的指示詞。</summary>
      <param name="xamlNamespace">包含具名指示詞的 XAML 命名空間。</param>
      <param name="name">要取得之指示詞的名稱。</param>
      <returns>
        <see cref="T:System.Xaml.XamlDirective" /> 物件，表示所要求的指示詞。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlNamespace" /> 或 <paramref name="name" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetXamlType(System.String,System.String,System.Xaml.XamlType[])">
      <summary>傳回以 XAML 命名空間和型別名稱字串為基礎的 <see cref="T:System.Xaml.XamlType" />。 這個簽章可以在所需型別為泛型型別的情況下指定型別引數。</summary>
      <param name="xamlNamespace">包含所需型別的 XAML 命名空間。</param>
      <param name="name">所需型別的字串名稱。</param>
      <param name="typeArguments">泛型型別的初始化型別引數。</param>
      <returns>與輸入準則相符的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetXamlType(System.Type)">
      <summary>傳回以 CLR 型別識別項為基礎的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <param name="type">要取得 <see cref="T:System.Xaml.XamlType" /> 的型別。</param>
      <returns>與輸入 <paramref name="type" /> 相符的 <see cref="T:System.Xaml.XamlType" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetXamlType(System.Xaml.Schema.XamlTypeName)">
      <summary>傳回以 XAML 系統型別名稱為基礎的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <param name="xamlTypeName">要取得 <see cref="T:System.Xaml.XamlType" /> 的 XAML 型別名稱。</param>
      <returns>與輸入 <paramref name="xamlTypeName" /> 相符的 <see cref="T:System.Xaml.XamlType" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="xamlTypeName" /> (<see cref="P:System.Xaml.Schema.XamlTypeName.Name" /> 或 <see cref="P:System.Xaml.Schema.XamlTypeName.Namespace" />) 的元件為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlTypeName" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.OnAssemblyResolve(System.String)">
      <summary>當作業為了要解析組件所含的 XAML 命名空間，而使用這個結構描述內容來解析該組件時呼叫。</summary>
      <param name="assemblyName">要載入之組件的名稱。</param>
      <returns>解析的組件。</returns>
    </member>
    <member name="P:System.Xaml.XamlSchemaContext.ReferenceAssemblies">
      <summary>取得 XAML 結構描述內容之參考組件的可列舉集。</summary>
      <returns>結構描述內容之參考組件的可列舉集。 每一個組件資訊項目都是由 <see cref="T:System.Reflection.Assembly" /> 值指定。</returns>
    </member>
    <member name="P:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity">
      <summary>取得值，這個值指定 XAML 結構描述和其內容是否支援標記延伸，而這種標記延伸具有兩個包含相同 Arity (即輸入參數的數目) 的建構函式。</summary>
      <returns>如果結構描述內容允許具有重複 Arity 的標記延伸，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.TryGetCompatibleXamlNamespace(System.String,System.String@)">
      <summary>傳回針對相容 XAML 命名空間的要求是否成功。 如果要求成功，則會將這個 XAML 命名空間報告為 out 參數。</summary>
      <param name="xamlNamespace">
        <see langword="xmlns" /> 字串，表示要檢查是否有相容結果的 XAML 命名空間。</param>
      <param name="compatibleNamespace">這個方法傳回時，為相容 XAML 命名空間要求的 <see langword="xmlns" /> 字串。 如果方法傳回 <see langword="false" />，這可能與 <paramref name="xamlNamespace" /> 相同。</param>
      <returns>如果 <paramref name="compatibleNamespace" /> 包含可使用的結果則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlNamespace" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Xaml.XamlSchemaContextSettings">
      <summary>提供 <see cref="T:System.Xaml.XamlSchemaContext" /> 的選擇性設定。</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaContextSettings.#ctor">
      <summary>初始化 <see cref="T:System.Xaml.XamlSchemaContextSettings" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaContextSettings.#ctor(System.Xaml.XamlSchemaContextSettings)">
      <summary>藉由複製現有 <see cref="T:System.Xaml.XamlSchemaContextSettings" /> 執行個體的值，初始化 <see cref="T:System.Xaml.XamlSchemaContextSettings" /> 類別的新執行個體。</summary>
      <param name="settings">現有的 <see cref="T:System.Xaml.XamlSchemaContextSettings" />。</param>
    </member>
    <member name="P:System.Xaml.XamlSchemaContextSettings.FullyQualifyAssemblyNamesInClrNamespaces">
      <summary>取得或設定值，這個值指定 XAML 結構描述和其內容是否在查閱 API 所傳回的值中使用完整組件名稱。</summary>
      <returns>如果 XAML 結構描述和其內容在查閱 API 所傳回的值中使用完整組件名稱，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlSchemaContextSettings.SupportMarkupExtensionsWithDuplicateArity">
      <summary>取得或設定值，這個值指定 XAML 結構描述內容是否允許標記延伸具有兩個包含相同 Arity (即輸入參數的數目) 的建構函式。</summary>
      <returns>如果結構描述內容允許具有重複 Arity 的標記延伸，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Xaml.XamlSchemaException">
      <summary>當 XAML 的繫結系統或其他結構描述表示系統向結構描述內容報告例外狀況時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaException.#ctor">
      <summary>以系統提供的錯誤說明訊息，初始化 <see cref="T:System.Xaml.XamlSchemaException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.Xaml.XamlSchemaException" /> 類別的新執行個體。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaException.#ctor(System.String)">
      <summary>使用指定的錯誤說明訊息，初始化 <see cref="T:System.Xaml.XamlSchemaException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況的訊息。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Xaml.XamlSchemaException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況的訊息。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="T:System.Xaml.XamlServices">
      <summary>提供更高層級的服務 (靜態方法) 來用於一般 XAML 工作，包括讀取 XAML 和寫入物件圖形，或是讀取物件圖形和寫入 XAML 檔案輸出以進行序列化。</summary>
    </member>
    <member name="M:System.Xaml.XamlServices.Load(System.IO.Stream)">
      <summary>載入 XAML 讀取器的 <see cref="T:System.IO.Stream" /> 來源，並寫入其輸出做為物件圖形。</summary>
      <param name="stream">要載入做為輸入的資料流。</param>
      <returns>已做為輸出寫入的物件圖形。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Load(System.IO.TextReader)">
      <summary>從 <see cref="T:System.IO.TextReader" /> 建立 XAML 讀取器，並傳回物件圖形。</summary>
      <param name="textReader">要做為所建立 <see cref="T:System.IO.TextReader" /> 之基準的 <see cref="T:System.Xml.XmlReader" />。</param>
      <returns>所傳回的物件圖形。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textReader" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Load(System.String)">
      <summary>載入 XAML 讀取器的 <see cref="T:System.IO.Stream" /> 來源並傳回物件圖形。</summary>
      <param name="fileName">要載入並做為來源的檔案名稱。</param>
      <returns>所傳回的物件圖形。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 輸入是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Load(System.Xaml.XamlReader)">
      <summary>載入特定的 XAML 讀取器實作並傳回物件圖形。</summary>
      <param name="xamlReader">要做為這個 <see langword="Load" /> 作業之讀取器的 XAML 讀取器實作。</param>
      <returns>所傳回的物件圖形。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlReader" /> 輸入是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Load(System.Xml.XmlReader)">
      <summary>載入特定的 XML 讀取器實作並傳回物件圖形。</summary>
      <param name="xmlReader">要做為這個 <see langword="Load" /> 作業之讀取器的 <see cref="T:System.Xml.XmlReader" /> 實作。</param>
      <returns>輸出物件圖形。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlReader" /> 輸入是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Parse(System.String)">
      <summary>讀取 XAML 做為字串輸出並傳回物件圖形。</summary>
      <param name="xaml">要剖析的 XAML 字串輸入。</param>
      <returns>所傳回的物件圖形。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xaml" /> 輸入是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.IO.Stream,System.Object)">
      <summary>將提供的物件圖形處理成 XAML 節點表示，再處理成序列化的輸出資料流。</summary>
      <param name="stream">目的資料流。</param>
      <param name="instance">要處理之物件圖形的根目錄。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 輸入是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.IO.TextWriter,System.Object)">
      <summary>將提供的物件圖形處理成 XAML 節點表示，再處理成流向所提供 <see cref="T:System.IO.TextWriter" /> 的輸出。</summary>
      <param name="writer">寫入輸出的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="instance">要處理之物件圖形的根目錄。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 輸入是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.Object)">
      <summary>將提供的物件樹狀結構處理成 XAML 節點表示，然後傳回輸出 XAML 的字串表示。</summary>
      <param name="instance">要處理之物件圖形的根目錄。</param>
      <returns>字串形式的 XAML 標記輸出。</returns>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.String,System.Object)">
      <summary>將提供的物件圖形處理成 XAML 節點表示，然後寫入至所提供位置上的輸出檔。</summary>
      <param name="fileName">要將輸出寫入之目標檔案的名稱和位置。</param>
      <param name="instance">要處理之物件圖形的根目錄。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fileName" /> 為空字串。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.Xaml.XamlWriter,System.Object)">
      <summary>將提供的物件圖形處理成 XAML 節點表示，然後寫入至提供的 XAML 寫入器。</summary>
      <param name="writer">要使用的 <see cref="T:System.Xaml.XamlWriter" /> 實作。</param>
      <param name="instance">要處理之物件圖形的根目錄。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 輸入是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.Xml.XmlWriter,System.Object)">
      <summary>將提供的物件圖形處理成 XAML 節點表示，然後寫入至提供的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要使用的 <see cref="T:System.Xml.XmlWriter" /> 實作。</param>
      <param name="instance">要處理之物件圖形的根目錄。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 輸入是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Transform(System.Xaml.XamlReader,System.Xaml.XamlWriter)">
      <summary>連接 <see cref="T:System.Xaml.XamlReader" /> 和 <see cref="T:System.Xaml.XamlWriter" /> 以使用常見的 XAML 節點集中繼項目。 可能會轉換內容，視提供的讀取器和寫入器類型而定。</summary>
      <param name="xamlReader">要使用的 <see cref="T:System.Xaml.XamlReader" /> 實作。</param>
      <param name="xamlWriter">要使用的 <see cref="T:System.Xaml.XamlWriter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlReader" /> 或 <paramref name="xamlWriter" /> 輸入為 <see langword="null" />。</exception>
      <exception cref="T:System.Xaml.XamlException">XAML 結構描述內容在提供的 <paramref name="xamlReader" /> 和 <paramref name="xamlWriter" /> 之間不相符。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Transform(System.Xaml.XamlReader,System.Xaml.XamlWriter,System.Boolean)">
      <summary>連接 <see cref="T:System.Xaml.XamlReader" /> 和 <see cref="T:System.Xaml.XamlWriter" /> 以使用常見的 XAML 節點集中繼項目。 可能會轉換內容，視提供的讀取器和寫入器類型而定。 提供參數來指定是否在完成呼叫後關閉寫入器。</summary>
      <param name="xamlReader">要使用的 <see cref="T:System.Xaml.XamlReader" /> 實作。</param>
      <param name="xamlWriter">要使用的 <see cref="T:System.Xaml.XamlWriter" />。</param>
      <param name="closeWriter">
        <see langword="true" /> 表示在呼叫完成之後關閉寫入器，<see langword="false" /> 表示讓寫入器在最後寫入的位置上繼續保持開啟。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlReader" /> 或 <paramref name="xamlWriter" /> 輸入為 <see langword="null" />。</exception>
      <exception cref="T:System.Xaml.XamlException">XAML 結構描述內容在提供的 <paramref name="xamlReader" /> 和 <paramref name="xamlWriter" /> 之間不相符。</exception>
    </member>
    <member name="T:System.Xaml.XamlType">
      <summary>報告在 .NET Framework XAML 服務實作的整體 XAML 系統中，XAML 型別的相關資訊。</summary>
    </member>
    <member name="M:System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
      <summary>根據型別的字串名稱，初始化 <see cref="T:System.Xaml.XamlType" /> 類別的新執行個體。</summary>
      <param name="typeName">要建立之型別的名稱。</param>
      <param name="typeArguments">表示泛型型別之 <see cref="T:System.Xaml.XamlType" /> 的型別引數。 可以是 (而且通常是) <see langword="null" />，指出所表示的型別不是泛型型別。</param>
      <param name="schemaContext">XAML 讀取器及 XAML 寫入器的 XAML 結構描述內容。</param>
      <exception cref="T:System.ArgumentNullException">一個或多個 <paramref name="typeName" /> 或 <paramref name="schemaContext" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
      <summary>根據型別的 XAML 命名空間和字串名稱，初始化 <see cref="T:System.Xaml.XamlType" /> 類別的新執行個體。 這個建構函式是專門針對已知在支援型別系統和 XAML 結構描述內容中沒有支援的型別使用方式，進行分析及 XAML 節點記錄。</summary>
      <param name="unknownTypeNamespace">型別的 XAML 命名空間 (字串形式)。</param>
      <param name="unknownTypeName">型別在所提供 <paramref name="unknownTypeNamespace" /> XAML 命名空間中的名稱。</param>
      <param name="typeArguments">表示泛型型別之 <see cref="T:System.Xaml.XamlType" /> 的型別引數。 可以是 (而且通常是) <see langword="null" />，指出所表示的型別不是泛型型別。</param>
      <param name="schemaContext">XAML 讀取器或 XAML 寫入器的 XAML 結構描述內容。</param>
      <exception cref="T:System.ArgumentNullException">一個或多個 <paramref name="unknownTypeNamespace" />、<paramref name="unknownTypeName" /> 或 <paramref name="schemaContext" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext)">
      <summary>根據基礎 CLR 型別資訊，初始化 <see cref="T:System.Xaml.XamlType" /> 類別的新執行個體。</summary>
      <param name="underlyingType">要建構之 XAML 型別的基礎 CLR <see cref="T:System.Type" />。</param>
      <param name="schemaContext">XAML 讀取器或 XAML 寫入器的 XAML 結構描述內容。</param>
      <exception cref="T:System.ArgumentNullException">一個或多個 <paramref name="underlyingType" /> 或 <paramref name="schemaContext" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlTypeInvoker)">
      <summary>根據基礎型別資訊和 <see cref="T:System.Xaml.XamlType" /> 實作，初始化 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 類別的新執行個體。</summary>
      <param name="underlyingType">要建構之 XAML 型別的基礎型別。</param>
      <param name="schemaContext">XAML 讀取器的 XAML 結構描述內容。</param>
      <param name="invoker">
        <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 實作，可處理對 <see cref="T:System.Xaml.XamlType" /> 的執行階段反映呼叫。</param>
      <exception cref="T:System.ArgumentNullException">一個或多個 <paramref name="underlyingType" /> 或 <paramref name="schemaContext" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xaml.XamlType.AllowedContentTypes">
      <summary>取得型別的唯讀集合，這些型別可做為這個 <see cref="P:System.Xaml.XamlType.ContentProperty" /> 的 <see cref="T:System.Xaml.XamlType" /> 值。</summary>
      <returns>可能內容型別的唯讀集合。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.BaseType">
      <summary>取得這個 XAML 型別之直接基底型別的 <see cref="T:System.Xaml.XamlType" />。 此值取決於這個 <see cref="T:System.Xaml.XamlType" /> 的基礎型別和結構描述內容。</summary>
      <returns>這個 XAML 型別之直接基底型別的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)">
      <summary>傳回值，這個值表示在此 <see cref="T:System.Xaml.XamlType" /> 的執行個體的可指派型別清單中，是否有指定的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <param name="xamlType">要根據目前 <see cref="T:System.Xaml.XamlType" /> 檢查的型別。</param>
      <returns>如果 <paramref name="xamlType" /> 在可指派型別清單中則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.ConstructionRequiresArguments">
      <summary>取得值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否必須有引數 (透過 <see langword="x:TypeArguments" />、初始設定文字或其他 XAML 技術的泛型條件約束)，才能建構型別的有效執行個體。</summary>
      <returns>如果建構執行個體時需要一些引數值則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.ContentProperty">
      <summary>取得這個 <see cref="T:System.Xaml.XamlMember" /> 之內容屬性的 <see cref="T:System.Xaml.XamlType" /> 資訊。</summary>
      <returns>這個 <see cref="T:System.Xaml.XamlMember" /> 之內容屬性的 <see cref="T:System.Xaml.XamlType" /> 資訊。 如果沒有內容屬性，則可以是 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.ContentWrappers">
      <summary>取得型別，這些型別會在內容屬性並非嚴格型別相符 (例如強型別 <see langword="Collection&lt;T&gt;" /> 中的字串) 時，用於包裝該內容屬性的內容。</summary>
      <returns>可能內容包裝函式的唯讀集合，否則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.DeferringLoader">
      <summary>取得表示此型別之延後載入轉換行為的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />。</summary>
      <returns>具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 條件約束的 <see cref="T:System.Xaml.XamlDeferringLoader" />，這個條件約束表示此型別的延後載入行為。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.Equals(System.Object)">
      <summary>指出目前的物件和另一個物件是否相等。</summary>
      <param name="obj">要與這個物件比較的物件。</param>
      <returns>如果目前的物件等於 <paramref name="obj" /> 參數，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.Equals(System.Xaml.XamlType)">
      <summary>指出目前的物件是否等於另一個具有相同型別的物件。</summary>
      <param name="other">要與這個物件相互比較的物件。</param>
      <returns>若目前的物件等於 <see langword="true" /> 參數，則為 <paramref name="other" />，否則即為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetAliasedProperty(System.Xaml.XamlDirective)">
      <summary>傳回由這個 <see cref="T:System.Xaml.XamlType" /> 別名化為 XAML 指示詞的 XAML 成員。</summary>
      <param name="directive">要尋找別名化成員的指示詞。</param>
      <returns>如果找到則為別名化成員，否則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetAllAttachableMembers">
      <summary>傳回集合，這個集合包含由此 <see cref="T:System.Xaml.XamlType" /> 公開之所有可附加的屬性。</summary>
      <returns>集合，包含零個或更多個 <see cref="T:System.Xaml.XamlMember" /> 值。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetAllMembers">
      <summary>傳回集合，這個集合包含由此 <see cref="T:System.Xaml.XamlType" /> 公開的所有成員。</summary>
      <returns>集合，包含零個或更多個 <see cref="T:System.Xaml.XamlMember" /> 值。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetAttachableMember(System.String)">
      <summary>傳回代表此 <see cref="T:System.Xaml.XamlType" /> 之指定具名可附加成員的 <see cref="T:System.Xaml.XamlMember" />。</summary>
      <param name="name">要取得之可附加成員的名稱，格式為：<c>ownerTypeName.MemberName</c>。</param>
      <returns>代表要求之可附加成員的 <see cref="T:System.Xaml.XamlMember" /> 物件；如果沒有該名稱的可附加成員存在則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetHashCode">
      <summary>傳回這個物件的雜湊程式碼。</summary>
      <returns>整數雜湊程式碼。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetMember(System.String)">
      <summary>從這個 <see cref="T:System.Xaml.XamlMember" /> 傳回特定具名成員的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <param name="name">要取得之成員的名稱 (字串形式)。</param>
      <returns>如果找到成員，則為該成員的 <see cref="T:System.Xaml.XamlMember" /> 資訊，否則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)">
      <summary>如果是標記延伸型別，則傳回這個 <see cref="T:System.Xaml.XamlType" /> 的特定標記延伸用法所支援之位置參數的型別。</summary>
      <param name="parameterCount">您想要取得相關資訊之特定語法或建構函式模式的計數 (Arity)。</param>
      <returns>
        <see cref="T:System.Xaml.XamlType" /> 值的清單，其中每個 <see cref="T:System.Xaml.XamlType" /> 都是語法中該位置適用的型別。 指定這些型別時，順序必須與您為標記延伸提供標記輸入時的順序相同。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetXamlNamespaces">
      <summary>傳回字串識別項清單，這些字串識別項會識別型別所在的 XAML 命名空間。</summary>
      <returns>字串值的清單，其中每個字串都是 XAML 命名空間的 URI 識別項。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.Invoker">
      <summary>取得與這個 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 相關聯的 <see cref="T:System.Xaml.XamlType" /> 實作。</summary>
      <returns>與這個 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 相關聯的 <see cref="T:System.Xaml.XamlType" /> 實作。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsAmbient">
      <summary>取得值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表符合 XAML 定義的環境型別。</summary>
      <returns>如果這個 <see cref="T:System.Xaml.XamlType" /> 表示環境型別，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsArray">
      <summary>取得值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表陣列。</summary>
      <returns>如果這個 <see cref="T:System.Xaml.XamlType" /> 表示陣列，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsCollection">
      <summary>取得值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表集合。</summary>
      <returns>如果這個 <see cref="T:System.Xaml.XamlType" /> 表示集合，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsConstructible">
      <summary>取得值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表符合 XAML 定義的可建構型別。</summary>
      <returns>如果這個 <see cref="T:System.Xaml.XamlType" /> 表示可建構的型別則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsDictionary">
      <summary>取得值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表符合 XAML 定義的字典。</summary>
      <returns>如果這個 <see cref="T:System.Xaml.XamlType" /> 表示字典，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsGeneric">
      <summary>取得值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表泛型型別。</summary>
      <returns>如果這個 <see cref="T:System.Xaml.XamlType" /> 表示泛型型別，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsMarkupExtension">
      <summary>取得值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表標記延伸。</summary>
      <returns>如果這個 <see cref="T:System.Xaml.XamlType" /> 表示標記延伸，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsNameScope">
      <summary>取得值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表符合 XAML 定義的 XAML 名稱範圍。</summary>
      <returns>如果這個 <see cref="T:System.Xaml.XamlType" /> 表示 XAML 名稱範圍，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsNameValid">
      <summary>取得值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否使用有效的 <see langword="xamlName" /> 字串做為其 <see cref="P:System.Xaml.XamlType.Name" /> 以進行初始化。</summary>
      <returns>如果此 <see cref="T:System.Xaml.XamlType" /> 使用有效的 <see langword="true" /> 字串進行初始化則為 <see langword="xamlName" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsNullable">
      <summary>取得值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表符合 XAML 定義之可為 Null 的型別。</summary>
      <returns>如果此 <see cref="T:System.Xaml.XamlType" /> 表示可為 Null 的型別則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsPublic">
      <summary>取得值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表相關型別系統中的公用型別。</summary>
      <returns>如果此 <see cref="T:System.Xaml.XamlType" /> 表示公用型別則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsUnknown">
      <summary>取得值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表基礎型別系統中無法解析的型別。</summary>
      <returns>如果此 <see cref="T:System.Xaml.XamlType" /> 表示無法解析的型別則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsUsableDuringInitialization">
      <summary>取得值，這個值表示在 XAML 初始化期間是否由上往下建立這個 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>如果在 XAML 初始化期間由上往下建立這個 <see cref="T:System.Xaml.XamlType" />，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsWhitespaceSignificantCollection">
      <summary>取得值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表符合 XML 定義的空白有效集合。</summary>
      <returns>如果這個 <see cref="T:System.Xaml.XamlType" /> 表示空白有效集合，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsXData">
      <summary>取得值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表符合 XAML 定義的 XML <see langword="XDATA" />。</summary>
      <returns>如果此 <see cref="T:System.Xaml.XamlType" /> 表示 <see langword="true" /> 則為 <see langword="XDATA" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.ItemType">
      <summary>取得值，這個值提供此 <see cref="T:System.Xaml.XamlType" /> 之 <see langword="Items" /> 屬性的型別資訊。</summary>
      <returns>集合中之項目型別的 <see cref="T:System.Xaml.XamlType" /> 物件，如果此 <see cref="T:System.Xaml.XamlType" /> 不表示集合，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.KeyType">
      <summary>取得值，如果 <see cref="T:System.Xaml.XamlType" /> 表示字典，則這個值提供此 <see cref="T:System.Xaml.XamlType" /> 之索引鍵屬性的型別資訊。</summary>
      <returns>字典用法索引鍵型別的 <see cref="T:System.Xaml.XamlType" /> 物件，如果這個 <see cref="T:System.Xaml.XamlType" /> 不表示字典，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupAliasedProperty(System.Xaml.XamlDirective)">
      <summary>傳回由這個 <see cref="T:System.Xaml.XamlType" /> 別名化為 XAML 指示詞的 XAML 成員。</summary>
      <param name="directive">要尋找別名化成員的指示詞。</param>
      <returns>如果找到則為別名化成員，否則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupAllAttachableMembers">
      <summary>傳回可列舉的集合，這個集合包含由此 <see cref="T:System.Xaml.XamlType" /> 公開之所有可附加的屬性。</summary>
      <returns>包含零個或更多個 <see cref="T:System.Xaml.XamlMember" /> 值的可列舉集合，否則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupAllMembers">
      <summary>傳回可列舉的集合，這個集合包含由此 <see cref="T:System.Xaml.XamlType" /> 公開的所有成員。</summary>
      <returns>可舉列的集合，包含零個或更多個 <see cref="T:System.Xaml.XamlMember" /> 值。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupAllowedContentTypes">
      <summary>傳回型別的清單，這些型別可做為此 <see cref="P:System.Xaml.XamlType.ContentProperty" /> 的 <see cref="T:System.Xaml.XamlType" /> 值。</summary>
      <returns>可能內容型別的清單。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupAttachableMember(System.String)">
      <summary>從這個 <see cref="T:System.Xaml.XamlType" /> 傳回 <see cref="T:System.Xaml.XamlMember" /> 以代表特定的具名可附加成員。</summary>
      <param name="name">要取得之可附加成員的名稱，格式為：<c>ownerTypeName.MemberName</c>。</param>
      <returns>代表要求之可附加成員的 <see cref="T:System.Xaml.XamlMember" /> 物件；如果沒有該名稱的可附加成員存在則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupBaseType">
      <summary>傳回這個 XAML 型別之直接基底型別的 <see cref="T:System.Xaml.XamlType" />。 此值取決於這個 <see cref="T:System.Xaml.XamlType" /> 的基礎型別和結構描述內容。</summary>
      <returns>這個 XAML 型別之直接基底型別的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupCollectionKind">
      <summary>傳回 <see cref="T:System.Xaml.Schema.XamlCollectionKind" /> 列舉的值，這個值宣告此 <see cref="T:System.Xaml.XamlType" /> 使用的特定集合型別。</summary>
      <returns>
        <see cref="T:System.Xaml.Schema.XamlCollectionKind" /> 列舉的值。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupConstructionRequiresArguments">
      <summary>傳回值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否必須有引數 (透過 <see langword="x:TypeArguments" /> 的泛型條件約束、初始設定文字或其他 XAML 技術)，才能建構型別的有效執行個體。</summary>
      <returns>如果建構執行個體時需要一些引數值則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupContentProperty">
      <summary>傳回這個 <see cref="T:System.Xaml.XamlMember" /> 之內容屬性的 <see cref="T:System.Xaml.XamlType" /> 資訊。</summary>
      <returns>這個 <see cref="T:System.Xaml.XamlMember" /> 之內容屬性的 <see cref="T:System.Xaml.XamlType" /> 資訊。 可以是 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupContentWrappers">
      <summary>取得 <see cref="T:System.Xaml.XamlType" /> 值的清單，這些值表示這個 <see cref="T:System.Xaml.XamlType" /> 的內容包裝函式。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlType" /> 值的清單，表示這個 <see cref="T:System.Xaml.XamlType" /> 的內容包裝函式。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupCustomAttributeProvider">
      <summary>在衍生類別中實作時，傳回 <see cref="T:System.Reflection.ICustomAttributeProvider" /> 實作。</summary>
      <returns>
        <see cref="T:System.Reflection.ICustomAttributeProvider" /> 實作。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupDeferringLoader">
      <summary>傳回 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 物件，這個物件用於延後載入 XAML 宣告的物件。</summary>
      <returns>
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />，具有對泛型的 <see cref="T:System.Xaml.XamlDeferringLoader" /> 條件約束。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupInvoker">
      <summary>傳回與這個 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 相關聯的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>這個 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 的 <see cref="T:System.Xaml.XamlType" /> 資訊，否則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsAmbient">
      <summary>傳回值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表符合 XAML 定義的環境型別。</summary>
      <returns>如果這個 <see cref="T:System.Xaml.XamlType" /> 表示環境型別，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsConstructible">
      <summary>傳回值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表符合 XAML 定義的可建構型別。</summary>
      <returns>如果這個 <see cref="T:System.Xaml.XamlType" /> 表示可建構的型別則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsMarkupExtension">
      <summary>傳回值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表標記延伸。</summary>
      <returns>如果這個 <see cref="T:System.Xaml.XamlType" /> 表示標記延伸，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsNameScope">
      <summary>傳回值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表符合 XAML 定義的 XAML 名稱範圍。</summary>
      <returns>如果這個 <see cref="T:System.Xaml.XamlType" /> 表示 XAML 名稱範圍，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsNullable">
      <summary>傳回值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表符合 XAML 定義之可為 Null 的型別。</summary>
      <returns>如果此 <see cref="T:System.Xaml.XamlType" /> 表示可為 Null 的型別則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsPublic">
      <summary>傳回值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表相關型別系統中的公用型別。</summary>
      <returns>如果此 <see cref="T:System.Xaml.XamlType" /> 表示公用型別則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsUnknown">
      <summary>傳回值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表基礎型別系統中無法解析的型別。</summary>
      <returns>如果此 <see cref="T:System.Xaml.XamlType" /> 表示無法解析的型別則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection">
      <summary>傳回值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表符合 XML 定義的空白有效集合。</summary>
      <returns>如果此 <see cref="T:System.Xaml.XamlType" /> 表示空白字元有效集合則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsXData">
      <summary>傳回值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否代表符合 XAML 定義的 XML <see langword="XDATA" />。</summary>
      <returns>如果此 <see cref="T:System.Xaml.XamlType" /> 表示 <see langword="true" /> 則為 <see langword="XDATA" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupItemType">
      <summary>傳回值，這個值提供此 <see cref="T:System.Xaml.XamlType" /> 之 <see langword="Items" /> 屬性的型別資訊。</summary>
      <returns>集合中之項目型別的 <see cref="T:System.Xaml.XamlType" /> 物件，如果此 <see cref="T:System.Xaml.XamlType" /> 不表示集合，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupKeyType">
      <summary>傳回值，如果 <see cref="T:System.Xaml.XamlType" /> 表示字典，則這個值提供此 <see cref="T:System.Xaml.XamlType" /> 之索引鍵屬性的型別資訊。</summary>
      <returns>字典用法之索引鍵型別的 <see cref="T:System.Xaml.XamlType" /> 物件，如果這個 <see cref="T:System.Xaml.XamlType" /> 不表示字典，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupMarkupExtensionReturnType">
      <summary>傳回值，這個值提供此 <see cref="T:System.Xaml.XamlType" /> (如果表示標記延伸的話) 傳回之 <see langword="ProvideValue" /> 的型別資訊。</summary>
      <returns>標記延伸使用方式之傳回型別的 <see cref="T:System.Xaml.XamlType" /> 物件，如果這個 <see cref="T:System.Xaml.XamlType" /> 不表示標記延伸，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupMember(System.String,System.Boolean)">
      <summary>從這個 <see cref="T:System.Xaml.XamlMember" /> 傳回特定具名成員的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <param name="name">要取得之成員的名稱 (字串形式)。</param>
      <param name="skipReadOnlyCheck">
        <see langword="true" /> 表示即使成員的 <see cref="P:System.Xaml.XamlMember.IsReadOnly" /> 是 <see langword="true" /> 值，還是傳回該成員。<see langword="false" /> 表示不傳回 <see cref="P:System.Xaml.XamlMember.IsReadOnly" /> 成員。 預設為 <see langword="false" />。</param>
      <returns>如果找到成員，則為成員的 <see cref="T:System.Xaml.XamlMember" /> 資訊，否則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
      <summary>如果是標記延伸型別，則傳回這個 <see cref="T:System.Xaml.XamlType" /> 的特定標記延伸用法所支援之位置參數的型別。</summary>
      <param name="parameterCount">您想要取得相關資訊之特定語法或建構函式模式的計數 (Arity)。</param>
      <returns>
        <see cref="T:System.Xaml.XamlType" /> 值的清單，其中每個 <see cref="T:System.Xaml.XamlType" /> 都是語法中該位置適用的型別。 為標記延伸提供標記輸入時，您必須以相同順序指定這些型別。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupSetMarkupExtensionHandler">
      <summary>傳回用於標記延伸設定作業的處理常式回呼。</summary>
      <returns>用於標記延伸設定作業的處理常式回呼。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupSetTypeConverterHandler">
      <summary>傳回用於型別轉換子設定案例的處理常式。</summary>
      <returns>用於型別轉換子設定案例的處理常式。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupTrimSurroundingWhitespace">
      <summary>傳回值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否應使用修剪前後空白字元的模式進行序列化。</summary>
      <returns>如果此 <see cref="T:System.Xaml.XamlType" /> 應以修剪前後空白字元的模式進行序列化則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupTypeConverter">
      <summary>傳回具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 條件約束的 <see cref="T:System.ComponentModel.TypeConverter" />，這個條件約束表示此 <see cref="T:System.Xaml.XamlType" /> 之值的型別轉換行為。</summary>
      <returns>具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 條件約束的 <see cref="T:System.ComponentModel.TypeConverter" /> (這個條件約束表示此 <see cref="T:System.Xaml.XamlType" /> 之值的型別轉換行為)，否則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupUnderlyingType">
      <summary>傳回做為此 <see cref="T:System.Type" /> 之基礎的 CLR <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>做為此 <see cref="T:System.Type" /> 之基礎的 CLR <see cref="T:System.Xaml.XamlType" />，否則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupUsableDuringInitialization">
      <summary>傳回值，這個值表示在 XAML 初始化期間是否由上往下建立這個 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>如果在 XAML 初始化期間由上往下建立這個 <see cref="T:System.Xaml.XamlType" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupValueSerializer">
      <summary>傳回具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 條件約束的 <see cref="T:System.Windows.Markup.ValueSerializer" />，這個條件約束表示此 <see cref="T:System.Xaml.XamlType" /> 之值的值序列化行為。</summary>
      <returns>具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 條件約束的 <see cref="T:System.Windows.Markup.ValueSerializer" /> (這個條件約束表示此 <see cref="T:System.Xaml.XamlType" /> 之值的值序列化行為)，否則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.MarkupExtensionReturnType">
      <summary>取得值，這個值提供此 <see cref="T:System.Xaml.XamlType" /> (如果表示標記延伸的話) 傳回之 <see langword="ProvideValue" /> 的型別資訊。</summary>
      <returns>標記延伸使用方式之傳回型別的 <see cref="T:System.Xaml.XamlType" /> 物件，如果這個 <see cref="T:System.Xaml.XamlType" /> 不表示標記延伸，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.Name">
      <summary>取得這個 <see cref="T:System.Xaml.XamlType" /> 表示之型別的字串名稱。</summary>
      <returns>這個 XAML 型別的字串名稱。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.op_Equality(System.Xaml.XamlType,System.Xaml.XamlType)">
      <summary>判斷兩個指定的 <see cref="T:System.Xaml.XamlType" /> 物件是否具有相同的值。</summary>
      <param name="xamlType1">
        <see cref="T:System.Xaml.XamlType" /> 或 <see langword="null" />。</param>
      <param name="xamlType2">
        <see cref="T:System.Xaml.XamlType" /> 或 <see langword="null" />。</param>
      <returns>如果 <see langword="true" /> 的值與 <paramref name="xamlType1" /> 的值相同，則為 <paramref name="xamlType2" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.op_Inequality(System.Xaml.XamlType,System.Xaml.XamlType)">
      <summary>判斷兩個指定的 <see cref="T:System.Xaml.XamlType" /> 物件是否具有不同的值。</summary>
      <param name="xamlType1">
        <see cref="T:System.Xaml.XamlType" /> 或 <see langword="null" />。</param>
      <param name="xamlType2">
        <see cref="T:System.Xaml.XamlType" /> 或 <see langword="null" />。</param>
      <returns>如果 <paramref name="xamlType1" /> 的值與 <paramref name="xamlType2" /> 的值不同，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.PreferredXamlNamespace">
      <summary>取得單一 XAML 命名空間，這是此 <see cref="T:System.Xaml.XamlType" /> 的主要 XAML 命名空間。</summary>
      <returns>這個 XAML 型別之主要 XAML 命名空間的識別項 (字串形式)。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.SchemaContext">
      <summary>取得處理這個 <see cref="T:System.Xaml.XamlSchemaContext" /> 的作用中 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>用於處理這個 <see cref="T:System.Xaml.XamlSchemaContext" /> 的作用中 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.ToString">
      <summary>傳回這個 <see cref="T:System.Xaml.XamlType" /> 的字串表示。</summary>
      <returns>這個 <see cref="T:System.Xaml.XamlType" /> 的字串表示。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.TrimSurroundingWhitespace">
      <summary>取得值，這個值表示此 <see cref="T:System.Xaml.XamlType" /> 是否有序列化的空白字元處理行為會修剪其內容中的前後空白字元。</summary>
      <returns>如果這個 <see cref="T:System.Xaml.XamlType" /> 表示使用空白修剪的型別，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.TypeArguments">
      <summary>當這個 <see cref="T:System.Xaml.XamlType" /> 表示泛型時，取得型別引數的清單。</summary>
      <returns>型別引數型別的清單，如果這個 <see cref="T:System.Xaml.XamlType" /> 不表示泛型，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.TypeConverter">
      <summary>取得具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 條件約束的 <see cref="T:System.ComponentModel.TypeConverter" />，這個條件約束表示此 <see cref="T:System.Xaml.XamlType" /> 之值的型別轉換行為。</summary>
      <returns>具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 條件約束的 <see cref="T:System.ComponentModel.TypeConverter" />，這個條件約束表示此 <see cref="T:System.Xaml.XamlType" /> 之值的型別轉換行為。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.UnderlyingType">
      <summary>取得做為此 <see cref="T:System.Type" /> 之基礎的 CLR <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>做為此 <see cref="T:System.Type" /> 之基礎的 CLR <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.ValueSerializer">
      <summary>取得具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 條件約束的 <see cref="T:System.Windows.Markup.ValueSerializer" />，這個條件約束表示此 <see cref="T:System.Xaml.XamlType" /> 之值的值序列化行為。</summary>
      <returns>具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 條件約束的 <see cref="T:System.Windows.Markup.ValueSerializer" /> (這個條件約束表示此 <see cref="T:System.Xaml.XamlType" /> 之值的值序列化行為)，否則為 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xaml.XamlWriter">
      <summary>提供 XAML 寫入器的預設實作和基底類別定義。 這不是可直接使用的預設 XAML 寫入器；您必須衍生自 <see cref="T:System.Xaml.XamlWriter" /> 並實作其抽象成員，或使用現有 <see cref="T:System.Xaml.XamlWriter" /> 衍生類別。</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.#ctor">
      <summary>初始化 <see cref="T:System.Xaml.XamlWriter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.Close">
      <summary>關閉 XAML 寫入器物件。</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.Xaml.XamlWriter" /> 所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示釋放 Managed 資源，否則為 <see langword="false" />。</param>
    </member>
    <member name="P:System.Xaml.XamlWriter.IsDisposed">
      <summary>取得是否已呼叫 <see cref="M:System.Xaml.XamlWriter.Dispose(System.Boolean)" />。</summary>
      <returns>如果已呼叫 <see cref="M:System.Xaml.XamlWriter.Dispose(System.Boolean)" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlWriter.SchemaContext">
      <summary>在衍生類別中實作時，取得作用中 XAML 結構描述內容。</summary>
      <returns>作用中 XAML 結構描述內容。</returns>
    </member>
    <member name="M:System.Xaml.XamlWriter.System#IDisposable#Dispose">
      <summary>請參閱 <see cref="M:System.IDisposable.Dispose" />。</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteEndMember">
      <summary>在衍生類別中實作時，產生結束成員節點的表示。</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteEndObject">
      <summary>在衍生類別中實作時，產生結束物件節點的表示。</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteGetObject">
      <summary>在衍生類別中實作時，針對物件是所設定屬性的預設值或隱含值 (而非在輸入 XAML 節點集內特地以物件值指定) 的情況，產生物件。</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
      <summary>在衍生類別中實作時，寫入 XAML 命名空間宣告節點。</summary>
      <param name="namespaceDeclaration">要寫入的命名空間宣告。</param>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteNode(System.Xaml.XamlReader)">
      <summary>根據來自 XAML 讀取器的節點型別 (<see cref="P:System.Xaml.XamlReader.NodeType" />) 執行切換，並呼叫寫入器實作的相關 <see langword="Write" /> 方法。</summary>
      <param name="reader">用於節點判斷的讀取器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotImplementedException">預設實作遇到不在預設列舉中的 <see cref="T:System.Xaml.XamlNodeType" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteStartMember(System.Xaml.XamlMember)">
      <summary>在衍生類別中實作時，寫入開始成員節點的表示。</summary>
      <param name="xamlMember">要寫入的成員節點。</param>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteStartObject(System.Xaml.XamlType)">
      <summary>在衍生類別中實作時，寫入開始物件節點的表示。</summary>
      <param name="type">要寫入之物件的 XAML 型別。</param>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteValue(System.Object)">
      <summary>在衍生類別中實作時，寫入值節點。</summary>
      <param name="value">要寫入的值。</param>
    </member>
    <member name="T:System.Xaml.XamlWriterSettings">
      <summary>提供 <see cref="T:System.Xaml.XamlWriter" /> 實作的初始化設定。</summary>
    </member>
    <member name="M:System.Xaml.XamlWriterSettings.#ctor">
      <summary>初始化 <see cref="T:System.Xaml.XamlWriterSettings" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xaml.XamlWriterSettings.#ctor(System.Xaml.XamlWriterSettings)">
      <summary>使用另一個現有的設定執行個體，初始化 <see cref="T:System.Xaml.XamlWriterSettings" /> 類別的新執行個體。</summary>
      <param name="settings">現有的 <see cref="T:System.Xaml.XamlWriterSettings" /> 物件。</param>
    </member>
    <member name="T:System.Xaml.XamlXmlReader">
      <summary>處理 XML 檔案中的 XAML 標記 (使用 <see cref="T:System.Xml.XmlReader" /> 媒介)，並產生 XAML 節點資料流。</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.Stream)">
      <summary>根據資料流，初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 類別的新執行個體。</summary>
      <param name="stream">要載入至讀取器的起始資料流。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.Stream,System.Xaml.XamlSchemaContext)">
      <summary>根據資料流並使用提供的 XAML 結構描述內容，初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 類別的新執行個體。</summary>
      <param name="stream">要載入至讀取器的起始資料流。</param>
      <param name="schemaContext">用於 XAML 處理的 XAML 結構描述內容。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 或 <paramref name="schemaContext" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.Stream,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlReaderSettings)">
      <summary>根據資料流，並使用提供的 XAML 結構描述內容和 XAML 特定設定，初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 類別的新執行個體。</summary>
      <param name="stream">要載入至讀取器的起始資料流。</param>
      <param name="schemaContext">用於 XAML 處理的 XAML 結構描述內容。</param>
      <param name="settings">特定的讀取器設定。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 或 <paramref name="schemaContext" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.Stream,System.Xaml.XamlXmlReaderSettings)">
      <summary>根據資料流和 XAML 特定設定，初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 類別的新執行個體。</summary>
      <param name="stream">要載入至讀取器的起始資料流。</param>
      <param name="settings">特定的讀取器設定。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.TextReader)">
      <summary>根據 <see cref="T:System.Xaml.XamlXmlReader" />，初始化 <see cref="T:System.IO.TextReader" /> 類別的新執行個體。</summary>
      <param name="textReader">用來進行初始設定的 <see cref="T:System.IO.TextReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textReader" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.TextReader,System.Xaml.XamlSchemaContext)">
      <summary>根據 <see cref="T:System.Xaml.XamlXmlReader" /> 以及提供的結構描述內容和 XAML 特定設定，初始化 <see cref="T:System.IO.TextReader" /> 類別的新執行個體。</summary>
      <param name="textReader">用來進行初始設定的 <see cref="T:System.IO.TextReader" />。</param>
      <param name="schemaContext">用於 XAML 處理的 XAML 結構描述內容。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textReader" /> 為 <see langword="null" />。
-或-
<paramref name="schemaContext" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.TextReader,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlReaderSettings)">
      <summary>根據 <see cref="T:System.Xaml.XamlXmlReader" /> 並使用提供的結構描述內容和 XAML 特定設定，初始化 <see cref="T:System.IO.TextReader" /> 類別的新執行個體。</summary>
      <param name="textReader">用來進行初始設定的 <see cref="T:System.IO.TextReader" />。</param>
      <param name="schemaContext">用於 XAML 處理的 XAML 結構描述內容。</param>
      <param name="settings">特定的讀取器設定。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textReader" /> 為 <see langword="null" />。
-或-
<paramref name="schemaContext" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.TextReader,System.Xaml.XamlXmlReaderSettings)">
      <summary>根據 <see cref="T:System.Xaml.XamlXmlReader" /> 並使用 XAML 特定設定，初始化 <see cref="T:System.IO.TextReader" /> 類別的新執行個體。</summary>
      <param name="textReader">用來進行初始設定的 <see cref="T:System.IO.TextReader" />。</param>
      <param name="settings">特定的讀取器設定。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textReader" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.String)">
      <summary>根據要載入至預設 XML 讀取器之檔案的檔案名稱，初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 類別的新執行個體。</summary>
      <param name="fileName">要載入之 XML 檔案的名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.String,System.Xaml.XamlSchemaContext)">
      <summary>根據要載入至預設 XML 讀取器之檔案的檔案名稱，並使用提供的 XAML 結構描述內容，初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 類別的新執行個體。</summary>
      <param name="fileName">要載入的檔案名稱。</param>
      <param name="schemaContext">用於 XAML 處理的 XAML 結構描述內容。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 或 <paramref name="schemaContext" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.String,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlReaderSettings)">
      <summary>根據要載入至預設 XML 讀取器之檔案的檔案名稱，並使用提供的 XAML 結構描述內容和 XAML 特定設定，初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 類別的新執行個體。</summary>
      <param name="fileName">要載入之 XML 檔案的名稱。</param>
      <param name="schemaContext">用於 XAML 處理的 XAML 結構描述內容。</param>
      <param name="settings">特定的讀取器設定。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 為 <see langword="null" />。
-或-
<paramref name="schemaContext" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.String,System.Xaml.XamlXmlReaderSettings)">
      <summary>根據要載入至預設 XML 讀取器之檔案的檔案名稱，並使用 XAML 特定讀取器設定，初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 類別的新執行個體。</summary>
      <param name="fileName">要載入之 XML 檔案的名稱。</param>
      <param name="settings">特定的讀取器設定。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.Xml.XmlReader)">
      <summary>使用所提供的 <see cref="T:System.Xml.XmlReader" />，初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 類別的新執行個體。</summary>
      <param name="xmlReader">用來做為媒介 XML 處理器的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlReader" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.Xml.XmlReader,System.Xaml.XamlSchemaContext)">
      <summary>使用提供的 <see cref="T:System.Xaml.XamlXmlReader" /> 和結構描述內容，初始化 <see cref="T:System.Xml.XmlReader" /> 類別的新執行個體。</summary>
      <param name="xmlReader">用來做為媒介 XML 處理器的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="schemaContext">用於 XAML 處理的 XAML 結構描述內容。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlReader" /> 或 <paramref name="schemaContext" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.Xml.XmlReader,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlReaderSettings)">
      <summary>使用提供的 <see cref="T:System.Xaml.XamlXmlReader" />、結構描述內容和讀取器設定，初始化 <see cref="T:System.Xml.XmlReader" /> 類別的新執行個體。</summary>
      <param name="xmlReader">用來做為媒介 XML 處理器的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="schemaContext">用於 XAML 處理的 XAML 結構描述內容。</param>
      <param name="settings">特定的 XAML 讀取器設定。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlReader" /> 或 <paramref name="schemaContext" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.Xml.XmlReader,System.Xaml.XamlXmlReaderSettings)">
      <summary>使用提供的 <see cref="T:System.Xaml.XamlXmlReader" /> 和讀取器設定，初始化 <see cref="T:System.Xml.XmlReader" /> 類別的新執行個體。</summary>
      <param name="xmlReader">用來做為媒介 XML 處理器的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="settings">特定的 XAML 讀取器設定。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlReader" /> 或 <paramref name="schemaContext" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.HasLineInfo">
      <summary>取得值，這個值指定行資訊是否可供使用。</summary>
      <returns>如果有可用的行資訊則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.IsEof">
      <summary>取得值，這個值會報告讀取器在 XAML 節點資料流中是否位於檔案結尾。</summary>
      <returns>如果位置是在節點資料流中的概念檔案結尾則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.LineNumber">
      <summary>取得要報告的行號。</summary>
      <returns>要報告的行號。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.LinePosition">
      <summary>取得要報告的行位置。</summary>
      <returns>要報告的行位置。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.Member">
      <summary>如果目前讀取器位置在 <see cref="F:System.Xaml.XamlNodeType.StartMember" /> 上，則取得讀取器位置上的目前成員。</summary>
      <returns>目前的成員，如果目前讀取器位置不在成員上，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.Namespace">
      <summary>從目前的節點取得 XAML 命名空間。</summary>
      <returns>目前節點中的 XAML 命名空間 (如果有的話)，否則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.NodeType">
      <summary>取得目前節點的類型。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlNodeType" /> 列舉的值。</returns>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.Read">
      <summary>從載入的來源中提供下一個 XAML 節點 (如果有 XAML 節點的話)。</summary>
      <returns>如果有節點則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.SchemaContext">
      <summary>取得物件，這個物件會為資訊集提供結構描述資訊。</summary>
      <returns>物件，會為資訊集提供結構描述資訊。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.Type">
      <summary>取得目前節點的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns>目前節點的 <see cref="T:System.Xaml.XamlType" />，如果位置不在物件上，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.Value">
      <summary>取得目前節點的值。</summary>
      <returns>目前節點的值，如果位置不在 <see cref="F:System.Xaml.XamlNodeType.Value" /> 節點型別上，則為 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xaml.XamlXmlReaderSettings">
      <summary>指定 <see cref="T:System.Xaml.XamlXmlReader" /> XAML 讀取器實作的處理規則或選項設定。</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlReaderSettings.#ctor">
      <summary>初始化 <see cref="T:System.Xaml.XamlXmlReaderSettings" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlReaderSettings.#ctor(System.Xaml.XamlXmlReaderSettings)">
      <summary>藉由從現有的 <see cref="T:System.Xaml.XamlXmlReaderSettings" /> 物件中複製設定，初始化 <see cref="T:System.Xaml.XamlXmlReaderSettings" /> 類別的新執行個體。</summary>
      <param name="settings">要複製的現有 <see cref="T:System.Xaml.XamlXmlReaderSettings" /> 物件。</param>
    </member>
    <member name="P:System.Xaml.XamlXmlReaderSettings.CloseInput">
      <summary>取得或設定值，這個值表示是否應在關閉 <see cref="T:System.Xaml.XamlXmlReader" /> 時關閉基礎資料流或文字讀取器。</summary>
      <returns>如果關閉 <see cref="T:System.Xaml.XamlXmlReader" /> 時應該關閉基礎資料流或讀取器，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReaderSettings.SkipXmlCompatibilityProcessing">
      <summary>取得或設定值，這個值決定讀取器是否應該在處理標記相容性內容的方式上與預設的 <see cref="T:System.Xaml.XamlXmlReader" /> 行為有所不同。</summary>
      <returns>如果直接使用啟始讀取器，也就是直接在主要資料流中處理 XML 相容性標記而不考慮相容性，則為 <see langword="true" />。 如果使用預設行為 (即個別處理 XML 相容性)，則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReaderSettings.XmlLang">
      <summary>取得或設定語言設定值，這個值表示讀取器可能提升為會在節點中寫入 <see langword="xml:lang" /> 屬性的寫入器。</summary>
      <returns>用於可能根據讀取器輸出 <see langword="xml:lang" /> 的字串。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReaderSettings.XmlSpacePreserve">
      <summary>取得或設定值，這個值決定 XAML 讀取器是否指示任何 XAML 寫入器在節點中寫入 <see langword="xml:space" /> 屬性。 如果這是預期的行為，則會透過共用 XAML 結構描述內容傳遞此資訊。</summary>
      <returns>
        <see langword="true" />如果處理 XAML 節點資料流程的寫入器可以在輸出中寫入<c>xml： space = "preserve"</c> ;如果無法在節點中寫入屬性，則<see langword="xml:space" />為。 <see langword="false" /></returns>
    </member>
    <member name="T:System.Xaml.XamlXmlWriter">
      <summary>使用 <see cref="T:System.IO.TextWriter" /> 或 <see cref="T:System.Xml.XmlWriter" /> 支援類別，將 XAML 節點資料流寫入成文字或標記序列化形式。</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.IO.Stream,System.Xaml.XamlSchemaContext)">
      <summary>從資料流初始化 <see cref="T:System.Xaml.XamlXmlWriter" /> 類別的新執行個體。</summary>
      <param name="stream">要寫入的資料流。</param>
      <param name="schemaContext">XAML 寫入器的 XAML 結構描述內容。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 為 <see langword="null" />。
-或-
<paramref name="schemaContext" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.IO.Stream,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlWriterSettings)">
      <summary>使用寫入器設定物件，從資料流初始化 <see cref="T:System.Xaml.XamlXmlWriter" /> 類別的新執行個體。</summary>
      <param name="stream">要寫入的資料流。</param>
      <param name="schemaContext">XAML 寫入器的 XAML 結構描述內容。</param>
      <param name="settings">
        <see cref="T:System.Xaml.XamlXmlWriterSettings" /> 的執行個體，通常具有特定非預設設定。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 或 <paramref name="schemaContext" /> 是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.IO.TextWriter,System.Xaml.XamlSchemaContext)">
      <summary>從 <see cref="T:System.Xaml.XamlXmlWriter" /> 基準初始化 <see cref="T:System.IO.TextWriter" /> 類別的新執行個體。</summary>
      <param name="textWriter">寫入輸出的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="schemaContext">XAML 寫入器的 XAML 結構描述內容。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textWriter" /> 或 <paramref name="schemaContext" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.IO.TextWriter,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlWriterSettings)">
      <summary>使用設定物件，從 <see cref="T:System.Xaml.XamlXmlWriter" /> 基準初始化 <see cref="T:System.IO.TextWriter" /> 類別的新執行個體。</summary>
      <param name="textWriter">寫入輸出的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="schemaContext">XAML 寫入器的 XAML 結構描述內容。</param>
      <param name="settings">
        <see cref="T:System.Xaml.XamlXmlWriterSettings" /> 的執行個體，通常具有特定非預設設定。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textWriter" /> 或 <paramref name="schemaContext" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.Xml.XmlWriter,System.Xaml.XamlSchemaContext)">
      <summary>從 <see cref="T:System.Xaml.XamlXmlWriter" /> 基準初始化 <see cref="T:System.Xml.XmlWriter" /> 類別的新執行個體。</summary>
      <param name="xmlWriter">寫入輸出的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="schemaContext">XAML 寫入器的 XAML 結構描述內容。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlWriter" /> 或 <paramref name="schemaContext" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.Xml.XmlWriter,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlWriterSettings)">
      <summary>使用設定物件，從 <see cref="T:System.Xaml.XamlXmlWriter" /> 基準初始化 <see cref="T:System.Xml.XmlWriter" /> 類別的新執行個體。</summary>
      <param name="xmlWriter">寫入輸出的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="schemaContext">XAML 寫入器的 XAML 結構描述內容。</param>
      <param name="settings">
        <see cref="T:System.Xaml.XamlXmlWriterSettings" /> 的執行個體，通常具有特定非預設設定。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlWriter" /> 或 <paramref name="schemaContext" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.Xaml.XamlXmlWriter" /> 所使用的 Unmanaged 資源，並選擇性釋放 Managed 資源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示釋放 Unmanaged 資源，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.Flush">
      <summary>呼叫基礎 <see cref="T:System.Xml.XmlWriter" /> 或 <see cref="T:System.IO.TextWriter" /> 的 <see langword="Flush" /> 方法 (這個方法會寫入目前在緩衝區的任何資料)，然後關閉寫入器。</summary>
    </member>
    <member name="P:System.Xaml.XamlXmlWriter.SchemaContext">
      <summary>取得這個 <see cref="T:System.Xaml.XamlXmlWriter" /> 處理時使用的 XAML 結構描述內容。</summary>
      <returns>這個 <see cref="T:System.Xaml.XamlXmlWriter" /> 處理 XAML 時使用的 XAML 結構描述內容。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlWriter.Settings">
      <summary>取得這個 <see cref="T:System.Xaml.XamlXmlWriter" /> 處理 XAML 時使用的寫入器設定。</summary>
      <returns>這個 <see cref="T:System.Xaml.XamlXmlWriter" /> 處理 XAML 時使用的寫入器設定。</returns>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteEndMember">
      <summary>將 XAML 結束成員節點寫入至基礎 <see cref="T:System.Xml.XmlWriter" /> 或 <see cref="T:System.IO.TextWriter" />。 如果 XAML 節點資料流目前的位置不在成員內，或內部寫入器狀態不支援寫入至結束成員，則會擲回例外狀況。</summary>
      <exception cref="T:System.InvalidOperationException">XAML 節點資料流的目前位置不在成員之內。</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException">目前的寫入器狀態並不支援寫入結尾成員。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteEndObject">
      <summary>將 XAML 結束物件節點寫入至基礎 <see cref="T:System.Xml.XmlWriter" /> 或 <see cref="T:System.IO.TextWriter" />。 如果處理中 XAML 節點資料流目前的位置不適合寫入結束物件，則會擲回例外狀況。</summary>
      <exception cref="T:System.InvalidOperationException">XAML 節點資料流目前的位置不在可寫入結尾成員的範圍中。</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException">目前的寫入器狀態並不支援寫入結尾物件。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteGetObject">
      <summary>當指定之物件為寫入中屬性的預設值或隱含值 (而非指定為在輸入 XAML 節點集中的物件值) 時，寫入物件。</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
      <summary>將命名空間資訊寫入至基礎 <see cref="T:System.Xml.XmlWriter" /> 或 <see cref="T:System.IO.TextWriter" />。 可能會針對特定狀態擲回例外狀況，但也可能會延後寫入命名空間資訊，直到寫入器及處理中 XAML 節點資料流到達可以插入 XAML 命名空間宣告的位置為止。</summary>
      <param name="namespaceDeclaration">要寫入的 XAML 命名空間宣告。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="namespaceDeclaration" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="namespaceDeclaration" /> 不是有效的 XAML 命名空間宣告 (具有 null 前置詞或 null 識別項元件)。</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException">目前的寫入器狀態並不支援寫入 XAML 命名空間宣告。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteStartMember(System.Xaml.XamlMember)">
      <summary>將 XAML 開始成員節點寫入至基礎 <see cref="T:System.Xml.XmlWriter" /> 或 <see cref="T:System.IO.TextWriter" />。 如果 XAML 節點資料流目前的位置在另一個成員內，或是不在可寫入開始成員的範圍或寫入器狀態，則會擲回例外狀況。</summary>
      <param name="property">要寫入之成員的 XAML 成員識別項。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="property" /> 不是有效的 <see cref="T:System.Xaml.XamlMember" />。</exception>
      <exception cref="T:System.InvalidOperationException">XAML 節點資料流目前的位置不適用於寫入開始成員。</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException">寫入器狀態對於寫入開始成員無效。
-或-
XAML 寫入器嘗試寫入重複的成員。 這個例外狀況可能會有更精確的內部例外狀況。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteStartObject(System.Xaml.XamlType)">
      <summary>將 XAML 開始物件節點寫入至基礎 <see cref="T:System.Xml.XmlWriter" /> 或 <see cref="T:System.IO.TextWriter" />。 如果 XAML 節點資料流目前的位置不在可寫入開始成員的範圍或狀態，或是寫入器不在可寫入開始物件的狀態，則會擲回例外狀況。</summary>
      <param name="type">要寫入之物件的 <see cref="T:System.Xaml.XamlType" /> (XAML 型別識別項)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不是有效的 <see cref="T:System.Xaml.XamlType" />。</exception>
      <exception cref="T:System.InvalidOperationException">XAML 節點資料流的目前位置對於寫入新的開始物件無效。</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException">XAML 寫入器的狀態對於撰寫新的開始物件無效 。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteValue(System.Object)">
      <summary>將 XAML 值節點寫入至基礎 <see cref="T:System.Xml.XmlWriter" /> 或 <see cref="T:System.IO.TextWriter" />。 如果 XAML 節點資料流目前的位置不適合寫入值，或是寫入器處於無法寫入值的狀態，則會擲回例外狀況。</summary>
      <param name="value">要寫入的值資訊。</param>
      <exception cref="T:System.InvalidOperationException">XAML 節點資料流的目前位置對於寫入值無效。</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException">XAML 寫入器狀態並不支援寫入值節點。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 指定非 null 或字串的値。</exception>
    </member>
    <member name="T:System.Xaml.XamlXmlWriterException">
      <summary>由特定 <see cref="T:System.Xaml.XamlXmlWriter" /> API 所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterException.#ctor">
      <summary>以系統提供的錯誤說明訊息，初始化 <see cref="T:System.Xaml.XamlXmlWriterException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.Xaml.XamlXmlWriterException" /> 類別的新執行個體。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterException.#ctor(System.String)">
      <summary>使用指定的錯誤說明訊息，初始化 <see cref="T:System.Xaml.XamlXmlWriterException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況的訊息。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Xaml.XamlXmlWriterException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況的訊息。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="T:System.Xaml.XamlXmlWriterSettings">
      <summary>提供 <see cref="T:System.Xaml.XamlXmlWriter" /> XAML 寫入器實作的初始化設定。</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterSettings.#ctor">
      <summary>初始化 <see cref="T:System.Xaml.XamlXmlWriterSettings" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xaml.XamlXmlWriterSettings.AssumeValidInput">
      <summary>取得或設定值，這個值指定 <see cref="T:System.Xaml.XamlXmlWriter" /> 在解決重複項或檢查其他錯誤時，是否應該永遠假設 XAML 輸入有效。</summary>
      <returns>如果 <see cref="T:System.Xaml.XamlXmlWriter" /> 會略過特定的驗證或錯誤檢查 (例如在發現重複項時擲回例外狀況)，則為 <see langword="true" />。 如果 <see cref="T:System.Xaml.XamlXmlWriter" /> 會在發現無效的 XAML 時擲出例外狀況，則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlWriterSettings.CloseOutput">
      <summary>取得或設定值，這個值指定 <see cref="T:System.Xaml.XamlXmlWriter" /> 是否應該在 <see langword="Dispose" /> 或其他作業時立即關閉，或 XAML 寫入器是否應該在關閉之前寫入緩衝區。 請小心使用這個設定，立即關閉會導致 XAML 無效而無法重新載入。</summary>
      <returns>如果在 <see langword="true" /> 或類似作業時立即關閉 <see cref="T:System.Xaml.XamlXmlWriter" />，則為 <see langword="Dispose" />。 如果在釋放 <see cref="T:System.Xaml.XamlXmlWriter" /> 之前寫入剩餘緩衝區輸出，則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterSettings.Copy">
      <summary>傳回這個 <see cref="T:System.Xaml.XamlXmlWriterSettings" /> 執行個體的複本。</summary>
      <returns>傳回的複本。</returns>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.CodeDom</name>
  </assembly>
  <members>
    <member name="T:Microsoft.CSharp.CSharpCodeProvider">
      <summary vsli:raw="Provides access to instances of the C# code generator and code compiler.">Proporciona acceso a instancias del generador de código y del compilador de código de C#.</summary>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:Microsoft.CSharp.CSharpCodeProvider&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:Microsoft.CSharp.CSharpCodeProvider" />.</summary>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:Microsoft.CSharp.CSharpCodeProvider&quot; /&gt; class by using the specified provider options.">Inicializa una nueva instancia de la clase <see cref="T:Microsoft.CSharp.CSharpCodeProvider" /> usando las opciones del proveedor especificado.</summary>
      <param name="providerOptions" vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; object that contains the provider options.">Objeto <see cref="T:System.Collections.Generic.IDictionary`2" /> que contiene las opciones de proveedor del archivo de configuración.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;providerOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="providerOptions" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.CreateCompiler">
      <summary vsli:raw="Gets an instance of the C# code compiler.">Obtiene una instancia del compilador de código de C#.</summary>
      <returns vsli:raw="An instance of the C# &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeCompiler&quot; /&gt; implementation.">Instancia de la implementación de <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> de C#.</returns>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.CreateGenerator">
      <summary vsli:raw="Gets an instance of the C# code generator.">Obtiene una instancia del generador de código de C#.</summary>
      <returns vsli:raw="An instance of the C# &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeGenerator&quot; /&gt; implementation.">Instancia de la implementación de <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> de C#.</returns>
    </member>
    <member name="P:Microsoft.CSharp.CSharpCodeProvider.FileExtension">
      <summary vsli:raw="Gets the file name extension to use when creating source code files.">Obtiene la extensión de nombre de archivo que se usará al crear archivos de código fuente.</summary>
      <returns vsli:raw="The file name extension to use for generated source code files.">Extensión de nombre de archivo que se usará en los archivos de código fuente generados.</returns>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified class member using the specified text writer and code generator options.">Genera código para el miembro de clase especificado usando las opciones del generador de código y el programa de escritura de texto especificados.</summary>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; to generate code for.">
        <see cref="T:System.CodeDom.CodeTypeMember" /> para el que se va a generar código.</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to write to.">
        <see cref="T:System.IO.TextWriter" /> en el que se va a escribir.</param>
      <param name="options" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; to use when generating the code.">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que se usarán para generar el código.</param>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.GetConverter(System.Type)">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified type of object.">Obtiene un <see cref="T:System.ComponentModel.TypeConverter" /> para el tipo de objeto especificado.</summary>
      <param name="type" vsli:raw="The type of object to retrieve a type converter for.">Tipo de objeto para el que se recupera un convertidor de tipo.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified type.">
        <see cref="T:System.ComponentModel.TypeConverter" /> para el tipo especificado.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.VBCodeProvider">
      <summary vsli:raw="Provides access to instances of the Visual Basic code generator and code compiler.">Proporciona acceso a instancias del generador de código y del compilador de código de Visual Basic.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:Microsoft.VisualBasic.VBCodeProvider&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:Microsoft.VisualBasic.VBCodeProvider" />.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:Microsoft.VisualBasic.VBCodeProvider&quot; /&gt; class by using the specified provider options.">Inicializa una nueva instancia de la clase <see cref="T:Microsoft.VisualBasic.VBCodeProvider" /> usando las opciones del proveedor especificado.</summary>
      <param name="providerOptions" vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; object that contains the provider options.">Objeto <see cref="T:System.Collections.Generic.IDictionary`2" /> que contiene las opciones de proveedor del archivo de configuración.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;providerOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="providerOptions" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.CreateCompiler">
      <summary vsli:raw="Gets an instance of the Visual Basic code compiler.">Obtiene una instancia del compilador de código de Visual Basic.</summary>
      <returns vsli:raw="An instance of the Visual Basic &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeCompiler&quot; /&gt; implementation.">Instancia de la implementación de la interfaz <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> de Visual Basic</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.CreateGenerator">
      <summary vsli:raw="Gets an instance of the Visual Basic code generator.">Obtiene una instancia del generador de código de Visual Basic.</summary>
      <returns vsli:raw="An instance of the Visual Basic &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeGenerator&quot; /&gt; implementation.">Instancia de la implementación de la interfaz <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> de Visual Basic</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.VBCodeProvider.FileExtension">
      <summary vsli:raw="Gets the file name extension to use when creating source code files.">Obtiene la extensión de nombre de archivo que se utilizará al crear archivos de código fuente.</summary>
      <returns vsli:raw="The file name extension to use for generated source code files.">Extensión de nombre de archivo que se usará en los archivos de código fuente generados.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified class member using the specified text writer and code generator options.">Genera código para el miembro de clase especificado usando las opciones del generador de código y el programa de escritura de texto especificados.</summary>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; to generate code for.">
        <see cref="T:System.CodeDom.CodeTypeMember" /> para el que se va a generar código.</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to write to.">
        <see cref="T:System.IO.TextWriter" /> en el que se va a escribir.</param>
      <param name="options" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; to use when generating the code.">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que se usarán para generar el código.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.GetConverter(System.Type)">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified type of object.">Obtiene un <see cref="T:System.ComponentModel.TypeConverter" /> para el tipo de objeto especificado.</summary>
      <param name="type" vsli:raw="The type of object to retrieve a type converter for.">Tipo de objeto para el que se recupera un convertidor de tipo.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified type.">
        <see cref="T:System.ComponentModel.TypeConverter" /> para el tipo especificado.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.VBCodeProvider.LanguageOptions">
      <summary vsli:raw="Gets a language features identifier.">Obtiene un identificador de características de lenguaje.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.LanguageOptions&quot; /&gt; that indicates special features of the language.">
        <see cref="T:System.CodeDom.Compiler.LanguageOptions" /> que indica las características especiales del lenguaje.</returns>
    </member>
    <member name="T:System.CodeDom.CodeArgumentReferenceExpression">
      <summary vsli:raw="Represents a reference to the value of an argument passed to a method.">Representa una referencia para el valor de un argumento que se ha pasado a un método.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArgumentReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArgumentReferenceExpression&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArgumentReferenceExpression.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArgumentReferenceExpression&quot; /&gt; class using the specified parameter name.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" /> utilizando el nombre de parámetro especificado.</summary>
      <param name="parameterName" vsli:raw="The name of the parameter to reference.">Nombre del parámetro al que se hace referencia.</param>
    </member>
    <member name="P:System.CodeDom.CodeArgumentReferenceExpression.ParameterName">
      <summary vsli:raw="Gets or sets the name of the parameter this expression references.">Obtiene o establece el nombre del parámetro al que hace referencia esta expresión.</summary>
      <returns vsli:raw="The name of the parameter to reference.">Nombre del parámetro al que se hace referencia.</returns>
    </member>
    <member name="T:System.CodeDom.CodeArrayCreateExpression">
      <summary vsli:raw="Represents an expression that creates an array.">Representa una expresión que crea una matriz.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeArrayCreateExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type and code expression indicating the number of indexes for the array.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> con el tipo de datos especificado de la matriz y la expresión de código que indica el número de índices de la matriz.</summary>
      <param name="createType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; indicating the data type of the array to create.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo de datos de la matriz que se va a crear.</param>
      <param name="size" vsli:raw="An expression that indicates the number of indexes of the array to create.">Expresión que indica el número de índices de la matriz que se va a crear.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type and initialization expressions.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> con el tipo de datos especificados y la expresión de inicialización de la matriz.</summary>
      <param name="createType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the array to create.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo de datos de la matriz que se va a crear.</param>
      <param name="initializers" vsli:raw="An array of expressions to use to initialize the array.">Matriz de expresiones que se van a usar para inicializar la matriz.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type and number of indexes for the array.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> con el tipo de datos especificados de la matriz y el número de índices de la matriz.</summary>
      <param name="createType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; indicating the data type of the array to create.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo de datos de la matriz que se va a crear.</param>
      <param name="size" vsli:raw="The number of indexes of the array to create.">Número de índices de la matriz que se va a crear.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type name and code expression indicating the number of indexes for the array.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> con el nombre del tipo de datos especificado de la matriz y la expresión de código que indica el número de índices de la matriz.</summary>
      <param name="createType" vsli:raw="The name of the data type of the array to create.">Nombre del tipo de datos de la matriz que se va a crear.</param>
      <param name="size" vsli:raw="An expression that indicates the number of indexes of the array to create.">Expresión que indica el número de índices de la matriz que se va a crear.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type name and initializers.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> con el tipo de datos y los inicializadores especificados de la matriz.</summary>
      <param name="createType" vsli:raw="The name of the data type of the array to create.">Nombre del tipo de datos de la matriz que se va a crear.</param>
      <param name="initializers" vsli:raw="An array of expressions to use to initialize the array.">Matriz de expresiones que se van a usar para inicializar la matriz.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type name and number of indexes for the array.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> con el nombre del tipo de datos especificado y el número de índices de la matriz.</summary>
      <param name="createType" vsli:raw="The name of the data type of the array to create.">Nombre del tipo de datos de la matriz que se va a crear.</param>
      <param name="size" vsli:raw="The number of indexes of the array to create.">Número de índices de la matriz que se va a crear.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type and code expression indicating the number of indexes for the array.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> con el tipo de datos especificado de la matriz y la expresión de código que indica el número de índices de la matriz.</summary>
      <param name="createType" vsli:raw="The data type of the array to create.">Tipo de datos de la matriz que se va a crear.</param>
      <param name="size" vsli:raw="An expression that indicates the number of indexes of the array to create.">Expresión que indica el número de índices de la matriz que se va a crear.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type and initializers.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> con el tipo de datos y los inicializadores especificados para la matriz.</summary>
      <param name="createType" vsli:raw="The data type of the array to create.">Tipo de datos de la matriz que se va a crear.</param>
      <param name="initializers" vsli:raw="An array of expressions to use to initialize the array.">Matriz de expresiones que se van a usar para inicializar la matriz.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type and number of indexes for the array.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> con el tipo de datos especificados de la matriz y el número de índices de la matriz.</summary>
      <param name="createType" vsli:raw="The data type of the array to create.">Tipo de datos de la matriz que se va a crear.</param>
      <param name="size" vsli:raw="The number of indexes of the array to create.">Número de índices de la matriz que se va a crear.</param>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.CreateType">
      <summary vsli:raw="Gets or sets the type of array to create.">Obtiene o establece el tipo de matriz que se va a crear.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type of the array.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo de la matriz.</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.Initializers">
      <summary vsli:raw="Gets the initializers with which to initialize the array.">Obtiene o establece el inicializador con el que se inicializa la matriz.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that indicates the initialization values.">
        <see cref="T:System.CodeDom.CodeExpressionCollection" /> que indica los valores de inicialización.</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.Size">
      <summary vsli:raw="Gets or sets the number of indexes in the array.">Obtiene o establece el número de índices de la matriz.</summary>
      <returns vsli:raw="The number of indexes in the array.">Número de índices de la matriz.</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.SizeExpression">
      <summary vsli:raw="Gets or sets the expression that indicates the size of the array.">Obtiene o establece la expresión que indica el tamaño de la matriz.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the size of the array.">
        <see cref="T:System.CodeDom.CodeExpression" /> que indica el tamaño de la matriz.</returns>
    </member>
    <member name="T:System.CodeDom.CodeArrayIndexerExpression">
      <summary vsli:raw="Represents a reference to an index of an array.">Representa una referencia a un índice de una matriz.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayIndexerExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayIndexerExpression&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeArrayIndexerExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayIndexerExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayIndexerExpression&quot; /&gt; class using the specified target object and indexes.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeArrayIndexerExpression" /> mediante el objeto de destino e índices especificados.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the array the indexer targets.">
        <see cref="T:System.CodeDom.CodeExpression" /> que indica la matriz a la que se orienta el indizador.</param>
      <param name="indices" vsli:raw="The index or indexes to reference.">Índice o índices a los que se hace referencia.</param>
    </member>
    <member name="P:System.CodeDom.CodeArrayIndexerExpression.Indices">
      <summary vsli:raw="Gets or sets the index or indexes of the indexer expression.">Obtiene o establece el índice o índices de la expresión de indizador.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that indicates the index or indexes of the indexer expression.">
        <see cref="T:System.CodeDom.CodeExpressionCollection" /> que indica los índices de la expresión de indizador.</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayIndexerExpression.TargetObject">
      <summary vsli:raw="Gets or sets the target object of the array indexer.">Obtiene o establece el objeto de destino del indizador de matriz.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that represents the array being indexed.">
        <see cref="T:System.CodeDom.CodeExpression" /> que representa la matriz que se indiza.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAssignStatement">
      <summary vsli:raw="Represents a simple assignment statement.">Representa una instrucción de asignación simple.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAssignStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAssignStatement&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeAssignStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAssignStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAssignStatement&quot; /&gt; class using the specified expressions.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeAssignStatement" /> con las expresiones especificadas.</summary>
      <param name="left" vsli:raw="The variable to assign to.">Variable que se va a asignar.</param>
      <param name="right" vsli:raw="The value to assign.">Valor que se va a asignar.</param>
    </member>
    <member name="P:System.CodeDom.CodeAssignStatement.Left">
      <summary vsli:raw="Gets or sets the expression representing the object or reference to assign to.">Obtiene o establece la expresión que representa el objeto o referencia al que se asigna.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object or reference to assign to.">
        <see cref="T:System.CodeDom.CodeExpression" /> que indica el objeto o referencia al que se va a asignar.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAssignStatement.Right">
      <summary vsli:raw="Gets or sets the expression representing the object or reference to assign.">Obtiene o establece la expresión que representa el objeto o referencia que se asigna.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object or reference to assign.">
        <see cref="T:System.CodeDom.CodeExpression" /> que indica el objeto o referencia que se va a asignar.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttachEventStatement">
      <summary vsli:raw="Represents a statement that attaches an event-handler delegate to an event.">Representa una instrucción que adjunta un delegado controlador de eventos a un evento.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttachEventStatement&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeAttachEventStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor(System.CodeDom.CodeEventReferenceExpression,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttachEventStatement&quot; /&gt; class using the specified event and delegate.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeAttachEventStatement" /> con el evento y delegado especificado.</summary>
      <param name="eventRef" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeEventReferenceExpression&quot; /&gt; that indicates the event to attach an event handler to.">
        <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> que indica el evento al que se va a asociar un controlador de eventos.</param>
      <param name="listener" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the new event handler.">
        <see cref="T:System.CodeDom.CodeExpression" /> que indica el nuevo controlador de eventos.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttachEventStatement&quot; /&gt; class using the specified object containing the event, event name, and event-handler delegate.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeAttachEventStatement" /> con el objeto especificado que contiene el evento, el nombre de evento y el delegado controlador de eventos especificados.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the event.">Objeto <see cref="T:System.CodeDom.CodeExpression" /> que indica el objeto que contiene el evento.</param>
      <param name="eventName" vsli:raw="The name of the event to attach an event handler to.">Nombre del evento al que hay que asociar un controlador de eventos.</param>
      <param name="listener" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the new event handler.">
        <see cref="T:System.CodeDom.CodeExpression" /> que indica el nuevo controlador de eventos.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttachEventStatement.Event">
      <summary vsli:raw="Gets or sets the event to attach an event-handler delegate to.">Obtiene o establece el evento al que se va a asociar un delegado controlador de eventos.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeEventReferenceExpression&quot; /&gt; that indicates the event to attach an event handler to.">
        <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> que indica el evento al que se va a asociar un controlador de eventos.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttachEventStatement.Listener">
      <summary vsli:raw="Gets or sets the new event-handler delegate to attach to the event.">Obtiene o establece el nuevo delegado controlador de eventos que se va a asociar al evento.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the new event handler to attach.">
        <see cref="T:System.CodeDom.CodeExpression" /> que indica el nuevo controlador de eventos que se va a asociar.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeArgument">
      <summary vsli:raw="Represents an argument used in a metadata attribute declaration.">Representa un argumento utilizado en una declaración de atributo de metadatos.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeAttributeArgument" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; class using the specified value.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeAttributeArgument" /> utilizando el valor especificado.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that represents the value of the argument.">Un objeto <see cref="T:System.CodeDom.CodeExpression" /> que representa el valor del argumento.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; class using the specified name and value.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeAttributeArgument" /> con el nombre y el valor especificados.</summary>
      <param name="name" vsli:raw="The name of the attribute property the argument applies to.">Nombre de la propiedad de atributo a la que se aplica el argumento.</param>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that represents the value of the argument.">Un objeto <see cref="T:System.CodeDom.CodeExpression" /> que representa el valor del argumento.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgument.Name">
      <summary vsli:raw="Gets or sets the name of the attribute.">Obtiene o establece el nombre del atributo.</summary>
      <returns vsli:raw="The name of the attribute property the argument is for.">Nombre de la propiedad de atributo a la que corresponde el argumento.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgument.Value">
      <summary vsli:raw="Gets or sets the value for the attribute argument.">Obtiene o establece el valor del argumento de atributo.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the value for the attribute argument.">Un objeto <see cref="T:System.CodeDom.CodeExpression" /> que indica el valor del argumento de atributo.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeArgumentCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; objects.">Representa una colección de objetos <see cref="T:System.CodeDom.CodeAttributeArgument" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor(System.CodeDom.CodeAttributeArgument[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; objects.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> que contiene la matriz especificada de objetos <see cref="T:System.CodeDom.CodeAttributeArgument" />.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; objects with which to initialize the collection.">Matriz de objetos <see cref="T:System.CodeDom.CodeAttributeArgument" /> con los que se inicializará la colección.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more objects in the array are &lt;see langword=&quot;null&quot; /&gt;.">Uno o más objetos de la matriz son <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor(System.CodeDom.CodeAttributeArgumentCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; class containing the elements of the specified source collection.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> que contiene los elementos de la colección de origen especificada.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; with which to initialize the collection.">Objeto <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> con el que se inicializa la colección.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Add(System.CodeDom.CodeAttributeArgument)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object to the collection.">Agrega a la colección el objeto <see cref="T:System.CodeDom.CodeAttributeArgument" /> especificado.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object to add.">Objeto <see cref="T:System.CodeDom.CodeAttributeArgument" /> que se agrega.</param>
      <returns vsli:raw="The index at which the new element was inserted.">Índice donde se insertó el nuevo elemento.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.AddRange(System.CodeDom.CodeAttributeArgument[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; array to the end of the collection.">Copia los elementos de la matriz <see cref="T:System.CodeDom.CodeAttributeArgument" /> especificada al final de la colección.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; that contains the objects to add to the collection.">Matriz de tipo <see cref="T:System.CodeDom.CodeAttributeArgument" /> que contiene los objetos que se van a agregar a la colección.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.AddRange(System.CodeDom.CodeAttributeArgumentCollection)">
      <summary vsli:raw="Copies the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; object to the end of the collection.">Copia el contenido de otro objeto <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> al final de la colección.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; that contains the objects to add to the collection.">
        <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> que contiene los objetos que se van a agregar a la colección.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Contains(System.CodeDom.CodeAttributeArgument)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object.">Obtiene un valor que indica si la colección contiene el objeto <see cref="T:System.CodeDom.CodeAttributeArgument" /> especificado.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object to locate in the collection.">Objeto <see cref="T:System.CodeDom.CodeAttributeArgument" /> que se va a buscar en la colección.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la colección contiene el objeto especificado; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.CopyTo(System.CodeDom.CodeAttributeArgument[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance beginning at the specified index.">Copia los objetos de colección en una instancia <see cref="T:System.Array" /> unidimensional, comenzando a partir del índice especificado.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los valores copiados de la colección.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">Índice de la matriz donde debe comenzar la inserción.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">La matriz de destino es multidimensional.
o bien
El número de elementos de la clase <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> es mayor que el espacio disponible entre el índice de la matriz de destino especificada por el parámetro <paramref name="index" /> y el final de la matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">El parámetro <paramref name="index" /> es menor que el índice mínimo de la matriz de destino.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.IndexOf(System.CodeDom.CodeAttributeArgument)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object in the collection, if it exists in the collection.">Obtiene el índice del objeto <see cref="T:System.CodeDom.CodeAttributeArgument" /> especificado en la colección, si existe en la colección.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object to locate in the collection.">Objeto <see cref="T:System.CodeDom.CodeAttributeArgument" /> que se va a buscar en la colección.</param>
      <returns vsli:raw="The index of the specified object, if found, in the collection; otherwise, -1.">Índice del objeto especificado, si se encuentra en la colección; de lo contrario, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Insert(System.Int32,System.CodeDom.CodeAttributeArgument)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object into the collection at the specified index.">Inserta el objeto <see cref="T:System.CodeDom.CodeAttributeArgument" /> especificado en el índice especificado de la colección.</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">Índice de base cero donde debe insertarse el objeto especificado.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object to insert.">Objeto <see cref="T:System.CodeDom.CodeAttributeArgument" /> que se va a insertar.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgumentCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object at the specified index in the collection.">Obtiene o establece el objeto <see cref="T:System.CodeDom.CodeAttributeArgument" /> en el índice especificado de la colección.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">Índice de la colección a la que se obtendrá acceso.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; at each valid index.">Una clase <see cref="T:System.CodeDom.CodeAttributeArgument" /> en cada índice válido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">El parámetro <paramref name="index" /> está fuera del intervalo válido de índices de la colección.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Remove(System.CodeDom.CodeAttributeArgument)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object from the collection.">Quita el objeto <see cref="T:System.CodeDom.CodeAttributeArgument" /> especificado de la colección.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object to remove from the collection.">Objeto <see cref="T:System.CodeDom.CodeAttributeArgument" /> que se va a quitar de la colección.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">No se encuentra el objeto especificado en la colección.</exception>
    </member>
    <member name="T:System.CodeDom.CodeAttributeDeclaration">
      <summary vsli:raw="Represents an attribute declaration.">Representa una declaración de atributo.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeAttributeDeclaration" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; class using the specified code type reference.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> utilizando la referencia al tipo de código especificado.</summary>
      <param name="attributeType" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that identifies the attribute.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que identifica el atributo.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeAttributeArgument[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; class using the specified code type reference and arguments.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> utilizando la referencia al tipo de código y los argumentos especificados.</summary>
      <param name="attributeType" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that identifies the attribute.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que identifica el atributo.</param>
      <param name="arguments" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; that contains the arguments for the attribute.">Matriz de tipo <see cref="T:System.CodeDom.CodeAttributeArgument" /> que contiene los argumentos correspondientes del atributo.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; class using the specified name.">Inicializa una instancia nueva de la clase <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> usando el nombre especificado.</summary>
      <param name="name" vsli:raw="The name of the attribute.">El nombre del atributo.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.String,System.CodeDom.CodeAttributeArgument[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; class using the specified name and arguments.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> con el nombre y los argumentos especificados.</summary>
      <param name="name" vsli:raw="The name of the attribute.">El nombre del atributo.</param>
      <param name="arguments" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; that contains the arguments for the attribute.">Matriz de tipo <see cref="T:System.CodeDom.CodeAttributeArgument" /> que contiene los argumentos correspondientes del atributo.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.Arguments">
      <summary vsli:raw="Gets the arguments for the attribute.">Obtiene los argumentos del atributo.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; that contains the arguments for the attribute.">
        <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> que contiene los argumentos del atributo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.AttributeType">
      <summary vsli:raw="Gets the code type reference for the code attribute declaration.">Obtiene la referencia del tipo de código de la declaración de atributos del código.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that identifies the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt;.">Objeto <see cref="T:System.CodeDom.CodeTypeReference" /> que identifica al objeto <see cref="T:System.CodeDom.CodeAttributeDeclaration" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.Name">
      <summary vsli:raw="Gets or sets the name of the attribute being declared.">Obtiene o establece el nombre del atributo que se está declarando.</summary>
      <returns vsli:raw="The name of the attribute.">El nombre del atributo.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeDeclarationCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; objects.">Representa una colección de objetos <see cref="T:System.CodeDom.CodeAttributeDeclaration" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor(System.CodeDom.CodeAttributeDeclaration[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; objects.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> que contiene la matriz especificada de objetos <see cref="T:System.CodeDom.CodeAttributeDeclaration" />.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; objects with which to initialize the collection.">Matriz de objetos <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> con los que se inicializará la colección.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more objects in the array are &lt;see langword=&quot;null&quot; /&gt;.">Uno o más objetos de la matriz son <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; class containing the elements of the specified source collection.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> que contiene los elementos de la colección de origen especificada.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; with which to initialize the collection.">Objeto <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> con el que se inicializa la colección.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Add(System.CodeDom.CodeAttributeDeclaration)">
      <summary vsli:raw="Adds a &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object with the specified value to the collection.">Agrega a la colección un objeto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> con el valor especificado.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object to add.">Objeto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> que se agrega.</param>
      <returns vsli:raw="The index at which the new element was inserted.">Índice donde se insertó el nuevo elemento.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.AddRange(System.CodeDom.CodeAttributeDeclaration[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; array to the end of the collection.">Copia los elementos de la matriz <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> especificada al final de la colección.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; that contains the objects to add to the collection.">Matriz de tipo <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> que contiene los objetos que se van a agregar a la colección.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.AddRange(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary vsli:raw="Copies the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; object to the end of the collection.">Copia el contenido de otro objeto <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> al final de la colección.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; that contains the objects to add to the collection.">
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> que contiene los objetos que se van a agregar a la colección.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Contains(System.CodeDom.CodeAttributeDeclaration)">
      <summary vsli:raw="Gets or sets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object.">Obtiene o establece un valor que indica si la colección contiene el objeto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> especificado.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object to locate.">Objeto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> que se va a buscar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la colección contiene el objeto especificado; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.CopyTo(System.CodeDom.CodeAttributeDeclaration[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance beginning at the specified index.">Copia los objetos de colección en una instancia <see cref="T:System.Array" /> unidimensional, comenzando a partir del índice especificado.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los valores copiados de la colección.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">Índice de la matriz donde debe comenzar la inserción.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">La matriz de destino es multidimensional.
O bien
El número de elementos de la clase <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> es mayor que el espacio disponible entre el índice de la matriz de destino especificada por el parámetro <paramref name="index" /> y el final de la matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">El parámetro <paramref name="index" /> es menor que el índice mínimo de la matriz de destino.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.IndexOf(System.CodeDom.CodeAttributeDeclaration)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object in the collection, if it exists in the collection.">Obtiene el índice del objeto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> especificado en la colección, si existe en la colección.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object to locate in the collection.">Objeto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> que se va a buscar en la colección.</param>
      <returns vsli:raw="The index in the collection of the specified object, if found; otherwise, -1.">Índice de la colección a la que corresponde el objeto especificado, si se encuentra; de lo contrario, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Insert(System.Int32,System.CodeDom.CodeAttributeDeclaration)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object into the collection at the specified index.">Inserta el objeto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> especificado en el índice especificado de la colección.</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">Índice de base cero donde debe insertarse el objeto especificado.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object to insert.">Objeto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> que se va a insertar.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclarationCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object at the specified index.">Obtiene o establece el objeto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> que se encuentra en el índice especificado.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">Índice de la colección a la que se obtendrá acceso.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; at each valid index.">Una clase <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> en cada índice válido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">El parámetro <paramref name="index" /> está fuera del intervalo válido de índices de la colección.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Remove(System.CodeDom.CodeAttributeDeclaration)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object from the collection.">Quita el objeto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> especificado de la colección.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object to remove from the collection.">Objeto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> que se va a quitar de la colección.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">No se encuentra el objeto especificado en la colección.</exception>
    </member>
    <member name="T:System.CodeDom.CodeBaseReferenceExpression">
      <summary vsli:raw="Represents a reference to the base class.">Representa una referencia a la clase base.</summary>
    </member>
    <member name="M:System.CodeDom.CodeBaseReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeBaseReferenceExpression&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeBaseReferenceExpression" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeBinaryOperatorExpression">
      <summary vsli:raw="Represents an expression that consists of a binary operation between two expressions.">Representa una expresión que consta de una operación binaria entre dos expresiones.</summary>
    </member>
    <member name="M:System.CodeDom.CodeBinaryOperatorExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeBinaryOperatorExpression&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeBinaryOperatorExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeBinaryOperatorType,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeBinaryOperatorExpression&quot; /&gt; class using the specified parameters.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" /> utilizando los parámetros especificados.</summary>
      <param name="left" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; on the left of the operator.">
        <see cref="T:System.CodeDom.CodeExpression" /> a la izquierda del operador.</param>
      <param name="op" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeBinaryOperatorType&quot; /&gt; indicating the type of operator.">
        <see cref="T:System.CodeDom.CodeBinaryOperatorType" /> que indica el tipo de operador.</param>
      <param name="right" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; on the right of the operator.">
        <see cref="T:System.CodeDom.CodeExpression" /> a la derecha del operador.</param>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Left">
      <summary vsli:raw="Gets or sets the code expression on the left of the operator.">Obtiene o establece la expresión de código a la izquierda del operador.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the left operand.">
        <see cref="T:System.CodeDom.CodeExpression" /> que indica el operando izquierdo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Operator">
      <summary vsli:raw="Gets or sets the operator in the binary operator expression.">Obtiene o establece el operador de la expresión de operador binario.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeBinaryOperatorType&quot; /&gt; that indicates the type of operator in the expression.">
        <see cref="T:System.CodeDom.CodeBinaryOperatorType" /> que indica el tipo de operador de la expresión.</returns>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Right">
      <summary vsli:raw="Gets or sets the code expression on the right of the operator.">Obtiene o establece la expresión de código a la derecha del operador.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the right operand.">
        <see cref="T:System.CodeDom.CodeExpression" /> que indica el operando derecho.</returns>
    </member>
    <member name="T:System.CodeDom.CodeBinaryOperatorType">
      <summary vsli:raw="Defines identifiers for supported binary operators.">Define identificadores para operadores binarios compatibles.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Add">
      <summary vsli:raw="Addition operator.">Operador de suma.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Assign">
      <summary vsli:raw="Assignment operator.">Operador de asignación.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BitwiseAnd">
      <summary vsli:raw="Bitwise and operator.">Operador AND bit a bit.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BitwiseOr">
      <summary vsli:raw="Bitwise or operator.">Operador OR bit a bit.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BooleanAnd">
      <summary vsli:raw="Boolean and operator. This represents a short circuiting operator. A short circuiting operator will evaluate only as many expressions as necessary before returning a correct value.">Operador booleano AND. Representa un operador de evaluación "cortocircuitada". Un operador de evaluación "cortocircuitada" sólo evaluará las expresiones necesarias antes de devolver un valor correcto.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BooleanOr">
      <summary vsli:raw="Boolean or operator. This represents a short circuiting operator. A short circuiting operator will evaluate only as many expressions as necessary before returning a correct value.">Operador booleano OR. Representa un operador de evaluación "cortocircuitada". Un operador de evaluación "cortocircuitada" sólo evaluará las expresiones necesarias antes de devolver un valor correcto.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Divide">
      <summary vsli:raw="Division operator.">Operador de división.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.GreaterThan">
      <summary vsli:raw="Greater than operator.">Operador Mayor que.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.GreaterThanOrEqual">
      <summary vsli:raw="Greater than or equal operator.">Operador Mayor que o igual.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.IdentityEquality">
      <summary vsli:raw="Identity equal operator.">Operador de identidad Igual.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.IdentityInequality">
      <summary vsli:raw="Identity not equal operator.">Operador de identidad No igual.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.LessThan">
      <summary vsli:raw="Less than operator.">Operador Menor que.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.LessThanOrEqual">
      <summary vsli:raw="Less than or equal operator.">Operador Menor que o igual.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Modulus">
      <summary vsli:raw="Modulus operator.">Operador de módulo.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Multiply">
      <summary vsli:raw="Multiplication operator.">Operador de multiplicación.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Subtract">
      <summary vsli:raw="Subtraction operator.">Operador de resta.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.ValueEquality">
      <summary vsli:raw="Value equal operator.">Operador de valor Igual.</summary>
    </member>
    <member name="T:System.CodeDom.CodeCastExpression">
      <summary vsli:raw="Represents an expression cast to a data type or interface.">Representa una expresión que se convierte a un tipo de datos o una interfaz.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCastExpression&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeCastExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCastExpression&quot; /&gt; class using the specified destination type and expression.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeCastExpression" /> con el tipo de destino y la expresión especificados.</summary>
      <param name="targetType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the destination type of the cast.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo de destino de la conversión.</param>
      <param name="expression" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; to cast.">
        <see cref="T:System.CodeDom.CodeExpression" /> que se va a convertir.</param>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCastExpression&quot; /&gt; class using the specified destination type and expression.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeCastExpression" /> con el tipo de destino y la expresión especificados.</summary>
      <param name="targetType" vsli:raw="The name of the destination type of the cast.">Nombre del tipo de destino de la conversión.</param>
      <param name="expression" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; to cast.">
        <see cref="T:System.CodeDom.CodeExpression" /> que se va a convertir.</param>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.Type,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCastExpression&quot; /&gt; class using the specified destination type and expression.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeCastExpression" /> con el tipo de destino y la expresión especificados.</summary>
      <param name="targetType" vsli:raw="The destination data type of the cast.">Tipo de datos de destino de la conversión.</param>
      <param name="expression" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; to cast.">
        <see cref="T:System.CodeDom.CodeExpression" /> que se va a convertir.</param>
    </member>
    <member name="P:System.CodeDom.CodeCastExpression.Expression">
      <summary vsli:raw="Gets or sets the expression to cast.">Obtiene o establece la expresión que se va a convertir.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the code to cast.">
        <see cref="T:System.CodeDom.CodeExpression" /> que indica el código que se va a convertir.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCastExpression.TargetType">
      <summary vsli:raw="Gets or sets the destination type of the cast.">Obtiene o establece el tipo de destino de la conversión.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the destination type to cast to.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo de destino al que se va a convertir.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCatchClause">
      <summary vsli:raw="Represents a &lt;see langword=&quot;catch&quot; /&gt; exception block of a &lt;see langword=&quot;try/catch&quot; /&gt; statement.">Representa un bloque de excepción <see langword="catch" /> de una instrucción <see langword="try/catch" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeCatchClause" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; class using the specified local variable name for the exception.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeCatchClause" /> utilizando el nombre de la variable local especificada para la excepción.</summary>
      <param name="localName" vsli:raw="The name of the local variable declared in the catch clause for the exception. This is optional.">Nombre de la variable local declarada en la conversión de la cláusula catch para la excepción. De uso opcional.</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String,System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; class using the specified local variable name for the exception and exception type.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeCatchClause" /> utilizando la variable local especificada para la excepción.</summary>
      <param name="localName" vsli:raw="The name of the local variable declared in the catch clause for the exception. This is optional.">Nombre de la variable local declarada en la conversión de la cláusula catch para la excepción. De uso opcional.</param>
      <param name="catchExceptionType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type of exception to catch.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo de excepción que se desea detectar.</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String,System.CodeDom.CodeTypeReference,System.CodeDom.CodeStatement[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; class using the specified local variable name for the exception, exception type and statement collection.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeCatchClause" /> utilizando el nombre de la variable local para la excepción, el tipo de excepción y la colección de instrucciones especificados.</summary>
      <param name="localName" vsli:raw="The name of the local variable declared in the catch clause for the exception. This is optional.">Nombre de la variable local declarada en la conversión de la cláusula catch para la excepción. De uso opcional.</param>
      <param name="catchExceptionType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type of exception to catch.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo de excepción que se desea detectar.</param>
      <param name="statements" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects that represent the contents of the catch block.">Matriz de objetos <see cref="T:System.CodeDom.CodeStatement" /> que representa el contenido del bloque catch.</param>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.CatchExceptionType">
      <summary vsli:raw="Gets or sets the type of the exception to handle with the catch block.">Obtiene o establece el tipo de excepción que se debe controlar con el bloque catch.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type of the exception to handle.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo de excepción que se va a controlar.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.LocalName">
      <summary vsli:raw="Gets or sets the variable name of the exception that the &lt;see langword=&quot;catch&quot; /&gt; clause handles.">Obtiene o establece el nombre de variable de la excepción que controla la cláusula <see langword="catch" />.</summary>
      <returns vsli:raw="The name for the exception variable that the &lt;see langword=&quot;catch&quot; /&gt; clause handles.">Nombre de la variable de la excepción que controla la cláusula <see langword="catch" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.Statements">
      <summary vsli:raw="Gets the statements within the catch block.">Obtiene las instrucciones dentro del bloque catch.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; containing the statements within the catch block.">
        <see cref="T:System.CodeDom.CodeStatementCollection" /> que contiene las instrucciones dentro del bloque catch.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCatchClauseCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; objects.">Representa una colección de objetos <see cref="T:System.CodeDom.CodeCatchClause" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeCatchClauseCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor(System.CodeDom.CodeCatchClause[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; objects.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> que contiene la matriz especificada de objetos <see cref="T:System.CodeDom.CodeCatchClause" />.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; objects with which to initialize the collection.">Matriz de objetos <see cref="T:System.CodeDom.CodeCatchClause" /> con los que se inicializará la colección.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more objects in the array are &lt;see langword=&quot;null&quot; /&gt;.">Uno o más objetos de la matriz son <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor(System.CodeDom.CodeCatchClauseCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; class containing the elements of the specified source collection.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> que contiene los elementos de la colección de origen especificada.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; with which to initialize the collection.">Objeto <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> con el que se inicializa la colección.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Add(System.CodeDom.CodeCatchClause)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object to the collection.">Agrega a la colección el objeto <see cref="T:System.CodeDom.CodeCatchClause" /> especificado.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object to add.">Objeto <see cref="T:System.CodeDom.CodeCatchClause" /> que se agrega.</param>
      <returns vsli:raw="The index at which the new element was inserted.">Índice donde se insertó el nuevo elemento.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.AddRange(System.CodeDom.CodeCatchClause[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; array to the end of the collection.">Copia los elementos de la matriz <see cref="T:System.CodeDom.CodeCatchClause" /> especificada al final de la colección.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; that contains the objects to add to the collection.">Matriz de tipo <see cref="T:System.CodeDom.CodeCatchClause" /> que contiene los objetos que se van a agregar a la colección.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.AddRange(System.CodeDom.CodeCatchClauseCollection)">
      <summary vsli:raw="Copies the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; object to the end of the collection.">Copia el contenido de otro objeto <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> al final de la colección.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; that contains the objects to add to the collection.">
        <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> que contiene los objetos que se van a agregar a la colección.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Contains(System.CodeDom.CodeCatchClause)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object.">Obtiene un valor que indica si la colección contiene el objeto <see cref="T:System.CodeDom.CodeCatchClause" /> especificado.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object to locate in the collection.">Objeto <see cref="T:System.CodeDom.CodeCatchClause" /> que se va a buscar en la colección.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la colección contiene el objeto especificado; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.CopyTo(System.CodeDom.CodeCatchClause[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance beginning at the specified index.">Copia los objetos de colección en una instancia <see cref="T:System.Array" /> unidimensional, comenzando a partir del índice especificado.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los valores copiados de la colección.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">Índice de la matriz donde debe comenzar la inserción.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">La matriz de destino es multidimensional.
o bien
El número de elementos de la clase <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> es mayor que el espacio disponible entre el índice de la matriz de destino especificada por el parámetro <paramref name="index" /> y el final de la matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">El parámetro <paramref name="index" /> es menor que el índice mínimo de la matriz de destino.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.IndexOf(System.CodeDom.CodeCatchClause)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object in the collection, if it exists in the collection.">Obtiene el índice del objeto <see cref="T:System.CodeDom.CodeCatchClause" /> especificado en la colección, si existe en la colección.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object to locate in the collection.">Objeto <see cref="T:System.CodeDom.CodeCatchClause" /> que se va a buscar en la colección.</param>
      <returns vsli:raw="The index of the specified object, if found, in the collection; otherwise, -1.">Índice del objeto especificado, si se encuentra en la colección; de lo contrario, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Insert(System.Int32,System.CodeDom.CodeCatchClause)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object into the collection at the specified index.">Inserta el objeto <see cref="T:System.CodeDom.CodeCatchClause" /> especificado en el índice especificado de la colección.</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">Índice de base cero donde debe insertarse el objeto especificado.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object to insert.">Objeto <see cref="T:System.CodeDom.CodeCatchClause" /> que se va a insertar.</param>
    </member>
    <member name="P:System.CodeDom.CodeCatchClauseCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object at the specified index in the collection.">Obtiene o establece el objeto <see cref="T:System.CodeDom.CodeCatchClause" /> en el índice especificado de la colección.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">Índice de la colección a la que se obtendrá acceso.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object at each valid index.">Objeto <see cref="T:System.CodeDom.CodeCatchClause" /> que se encuentra en cada índice válido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">El parámetro <paramref name="index" /> está fuera del intervalo válido de índices de la colección.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Remove(System.CodeDom.CodeCatchClause)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object from the collection.">Quita el objeto <see cref="T:System.CodeDom.CodeCatchClause" /> especificado de la colección.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object to remove from the collection.">Objeto <see cref="T:System.CodeDom.CodeCatchClause" /> que se va a quitar de la colección.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">No se encuentra el objeto especificado en la colección.</exception>
    </member>
    <member name="T:System.CodeDom.CodeChecksumPragma">
      <summary vsli:raw="Represents a code checksum pragma code entity.">Representa una entidad de código pragma de suma de comprobación de código.</summary>
    </member>
    <member name="M:System.CodeDom.CodeChecksumPragma.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeChecksumPragma&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeChecksumPragma" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeChecksumPragma.#ctor(System.String,System.Guid,System.Byte[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeChecksumPragma&quot; /&gt; class using a file name, a GUID representing the checksum algorithm, and a byte stream representing the checksum data.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeChecksumPragma" /> utilizando un nombre de archivo, un GUID que representa el algoritmo de suma de comprobación y una secuencia de bytes que representa los datos de la suma de comprobación.</summary>
      <param name="fileName" vsli:raw="The path to the checksum file.">Ruta de acceso al archivo de suma de comprobación.</param>
      <param name="checksumAlgorithmId" vsli:raw="A &lt;see cref=&quot;T:System.Guid&quot; /&gt; that identifies the checksum algorithm to use.">
        <see cref="T:System.Guid" /> que identifica el algoritmo de suma de comprobación que se va a utilizar.</param>
      <param name="checksumData" vsli:raw="A byte array that contains the checksum data.">Matriz de bytes que contiene los datos de la suma de comprobación.</param>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.ChecksumAlgorithmId">
      <summary vsli:raw="Gets or sets a GUID that identifies the checksum algorithm to use.">Obtiene o establece un GUID que identifica el algoritmo de suma de comprobación que se va a utilizar.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Guid&quot; /&gt; that identifies the checksum algorithm to use.">
        <see cref="T:System.Guid" /> que identifica el algoritmo de suma de comprobación que se va a utilizar.</returns>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.ChecksumData">
      <summary vsli:raw="Gets or sets the value of the data for the checksum calculation.">Obtiene o establece el valor de los datos para el cálculo de la suma de comprobación.</summary>
      <returns vsli:raw="A byte array that contains the data for the checksum calculation.">Matriz de bytes que contiene los datos para el cálculo de la suma de comprobación.</returns>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.FileName">
      <summary vsli:raw="Gets or sets the path to the checksum file.">Obtiene o establece la ruta de acceso al archivo de suma de comprobación.</summary>
      <returns vsli:raw="The path to the checksum file.">Ruta de acceso al archivo de suma de comprobación.</returns>
    </member>
    <member name="T:System.CodeDom.CodeComment">
      <summary vsli:raw="Represents a comment.">Representa un comentario.</summary>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeComment&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeComment" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeComment&quot; /&gt; class with the specified text as contents.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeComment" /> con el texto especificado como contenido.</summary>
      <param name="text" vsli:raw="The contents of the comment.">Contenido del comentario.</param>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor(System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeComment&quot; /&gt; class using the specified text and documentation comment flag.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeComment" /> mediante el texto especificado y el marcador de comentario de documentación.</summary>
      <param name="text" vsli:raw="The contents of the comment.">Contenido del comentario.</param>
      <param name="docComment" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the comment is a documentation comment; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el comentario es de documentación; en caso contrario, <see langword="false" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeComment.DocComment">
      <summary vsli:raw="Gets or sets a value that indicates whether the comment is a documentation comment.">Obtiene o establece un valor que indica si el comentario es de documentación.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the comment is a documentation comment; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el comentario es de documentación; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeComment.Text">
      <summary vsli:raw="Gets or sets the text of the comment.">Obtiene o establece el texto del comentario.</summary>
      <returns vsli:raw="A string containing the comment text.">Cadena que contiene el texto de comentario.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCommentStatement">
      <summary vsli:raw="Represents a statement consisting of a single comment.">Representa una instrucción que se compone de un solo comentario.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeCommentStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.CodeDom.CodeComment)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; class using the specified comment.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeCommentStatement" /> mediante el comentario especificado.</summary>
      <param name="comment" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeComment&quot; /&gt; that indicates the comment.">
        <see cref="T:System.CodeDom.CodeComment" /> que indica el comentario.</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; class using the specified text as contents.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeCommentStatement" />, usando el texto especificado como contenido.</summary>
      <param name="text" vsli:raw="The contents of the comment.">Contenido del comentario.</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; class using the specified text and documentation comment flag.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeCommentStatement" /> mediante el texto especificado y el marcador de comentario de documentación.</summary>
      <param name="text" vsli:raw="The contents of the comment.">Contenido del comentario.</param>
      <param name="docComment" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the comment is a documentation comment; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el comentario es de documentación; en caso contrario, <see langword="false" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeCommentStatement.Comment">
      <summary vsli:raw="Gets or sets the contents of the comment.">Obtiene o establece el contenido del comentario.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeComment&quot; /&gt; that indicates the comment.">
        <see cref="T:System.CodeDom.CodeComment" /> que indica el comentario.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCommentStatementCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; objects.">Representa una colección de objetos <see cref="T:System.CodeDom.CodeCommentStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeCommentStatementCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor(System.CodeDom.CodeCommentStatement[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; objects.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> que contiene la matriz especificada de objetos <see cref="T:System.CodeDom.CodeCommentStatement" />.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; objects with which to initialize the collection.">Matriz de objetos <see cref="T:System.CodeDom.CodeCommentStatement" /> con los que se inicializará la colección.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more objects in the array are &lt;see langword=&quot;null&quot; /&gt;.">Uno o más objetos de la matriz son <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor(System.CodeDom.CodeCommentStatementCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; class containing the elements of the specified source collection.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> que contiene los elementos de la colección de origen especificada.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; with which to initialize the collection.">Objeto <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> con el que se inicializa la colección.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Add(System.CodeDom.CodeCommentStatement)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object to the collection.">Agrega a la colección el objeto <see cref="T:System.CodeDom.CodeCommentStatement" /> especificado.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object to add.">Objeto <see cref="T:System.CodeDom.CodeCommentStatement" /> que se agrega.</param>
      <returns vsli:raw="The index at which the new element was inserted.">Índice donde se insertó el nuevo elemento.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.AddRange(System.CodeDom.CodeCommentStatement[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; array to the end of the collection.">Copia los elementos de la matriz <see cref="T:System.CodeDom.CodeCommentStatement" /> especificada al final de la colección.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; that contains the objects to add to the collection.">Matriz de tipo <see cref="T:System.CodeDom.CodeCommentStatement" /> que contiene los objetos que se van a agregar a la colección.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.AddRange(System.CodeDom.CodeCommentStatementCollection)">
      <summary vsli:raw="Copies the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; object to the end of the collection.">Copia el contenido de otro objeto <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> al final de la colección.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; that contains the objects to add to the collection.">
        <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> que contiene los objetos que se van a agregar a la colección.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Contains(System.CodeDom.CodeCommentStatement)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object.">Obtiene un valor que indica si la colección contiene el objeto <see cref="T:System.CodeDom.CodeCommentStatement" /> especificado.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; to search for in the collection.">
        <see cref="T:System.CodeDom.CodeCommentStatement" /> que se va a buscar en la colección.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la colección contiene el objeto especificado; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.CopyTo(System.CodeDom.CodeCommentStatement[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to the specified one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; beginning at the specified index.">Copia los objetos de la colección en el <see cref="T:System.Array" /> unidimensional especificado, a partir del índice especificado.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los valores copiados de la colección.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">Índice de la matriz donde debe comenzar la inserción.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">La matriz de destino es multidimensional.
o bien
El número de elementos de la clase <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> es mayor que el espacio disponible entre el índice de la matriz de destino especificada por el parámetro <paramref name="index" /> y el final de la matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">El parámetro <paramref name="index" /> es menor que el índice mínimo de la matriz de destino.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.IndexOf(System.CodeDom.CodeCommentStatement)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object in the collection, if it exists in the collection.">Obtiene el índice del objeto <see cref="T:System.CodeDom.CodeCommentStatement" /> especificado en la colección, si existe en la colección.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object to locate.">Objeto <see cref="T:System.CodeDom.CodeCommentStatement" /> que se va a buscar.</param>
      <returns vsli:raw="The index of the specified object, if found, in the collection; otherwise, -1.">Índice del objeto especificado, si se encuentra en la colección; de lo contrario, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Insert(System.Int32,System.CodeDom.CodeCommentStatement)">
      <summary vsli:raw="Inserts a &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object into the collection at the specified index.">Inserta un objeto <see cref="T:System.CodeDom.CodeCommentStatement" /> en la colección, en el índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index where the item should be inserted.">Índice de base cero donde debe insertarse el elemento.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object to insert.">Objeto <see cref="T:System.CodeDom.CodeCommentStatement" /> que se va a insertar.</param>
    </member>
    <member name="P:System.CodeDom.CodeCommentStatementCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object at the specified index in the collection.">Obtiene o establece el objeto <see cref="T:System.CodeDom.CodeCommentStatement" /> en el índice especificado de la colección.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">Índice de la colección a la que se obtendrá acceso.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object at each valid index.">Objeto <see cref="T:System.CodeDom.CodeCommentStatement" /> que se encuentra en cada índice válido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">El parámetro <paramref name="index" /> está fuera del intervalo válido de índices de la colección.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Remove(System.CodeDom.CodeCommentStatement)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object from the collection.">Quita el objeto <see cref="T:System.CodeDom.CodeCommentStatement" /> especificado de la colección.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object to remove from the collection.">Objeto <see cref="T:System.CodeDom.CodeCommentStatement" /> que se va a quitar de la colección.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">No se encuentra el objeto especificado en la colección.</exception>
    </member>
    <member name="T:System.CodeDom.CodeCompileUnit">
      <summary vsli:raw="Provides a container for a CodeDOM program graph.">Proporciona un contenedor para un gráfico de programa CodeDOM.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCompileUnit.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.AssemblyCustomAttributes">
      <summary vsli:raw="Gets a collection of custom attributes for the generated assembly.">Obtiene una colección de atributos personalizados para el ensamblado generado.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; that indicates the custom attributes for the generated assembly.">
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> que indica los atributos personalizados para el ensamblado generado.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.EndDirectives">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing end directives.">Obtiene un objeto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> que contiene las directivas End.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing end directives.">Un objeto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> que contiene las directivas End.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.Namespaces">
      <summary vsli:raw="Gets the collection of namespaces.">Obtiene la colección de espacios de nombres.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; that indicates the namespaces that the compile unit uses.">
        <see cref="T:System.CodeDom.CodeNamespaceCollection" /> que indica los espacios de nombres que utiliza la unidad de compilación.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.ReferencedAssemblies">
      <summary vsli:raw="Gets the referenced assemblies.">Obtiene los ensamblados a los que se hace referencia.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Specialized.StringCollection&quot; /&gt; that contains the file names of the referenced assemblies.">
        <see cref="T:System.Collections.Specialized.StringCollection" /> que contiene los nombres de archivo de los ensamblados a los que se hace referencia.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.StartDirectives">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing start directives.">Obtiene un objeto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> que contiene las directivas Start.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing start directives.">Un objeto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> que contiene las directivas Start.</returns>
    </member>
    <member name="T:System.CodeDom.CodeConditionStatement">
      <summary vsli:raw="Represents a conditional branch statement, typically represented as an &lt;see langword=&quot;if&quot; /&gt; statement.">Representa una instrucción condicional de bifurcación que normalmente se representa como una instrucción <see langword="if" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeConditionStatement&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeConditionStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeStatement[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeConditionStatement&quot; /&gt; class using the specified condition and statements.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeConditionStatement" /> con las condiciones e instrucciones especificadas.</summary>
      <param name="condition" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the expression to evaluate.">
        <see cref="T:System.CodeDom.CodeExpression" /> que indica la expresión que se va a evaluar.</param>
      <param name="trueStatements" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the statements to execute if the condition is &lt;see langword=&quot;true&quot; /&gt;.">Matriz de tipo <see cref="T:System.CodeDom.CodeStatement" /> que contiene las instrucciones que se ejecutarán si la condición es <see langword="true" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeStatement[],System.CodeDom.CodeStatement[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeConditionStatement&quot; /&gt; class using the specified condition and statements.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeConditionStatement" /> con las condiciones e instrucciones especificadas.</summary>
      <param name="condition" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the condition to evaluate.">
        <see cref="T:System.CodeDom.CodeExpression" /> que indica la condición que se va a evaluar.</param>
      <param name="trueStatements" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the statements to execute if the condition is &lt;see langword=&quot;true&quot; /&gt;.">Matriz de tipo <see cref="T:System.CodeDom.CodeStatement" /> que contiene las instrucciones que se ejecutarán si la condición es <see langword="true" />.</param>
      <param name="falseStatements" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the statements to execute if the condition is &lt;see langword=&quot;false&quot; /&gt;.">Matriz de tipo <see cref="T:System.CodeDom.CodeStatement" /> que contiene las instrucciones que se ejecutarán si la condición es <see langword="false" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.Condition">
      <summary vsli:raw="Gets or sets the expression to evaluate &lt;see langword=&quot;true&quot; /&gt; or &lt;see langword=&quot;false&quot; /&gt;.">Obtiene o establece la expresión que se evalúa en <see langword="true" /> o <see langword="false" />.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; to evaluate &lt;see langword=&quot;true&quot; /&gt; or &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.CodeDom.CodeExpression" /> que se va a evaluar en <see langword="true" /> o <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.FalseStatements">
      <summary vsli:raw="Gets the collection of statements to execute if the conditional expression evaluates to &lt;see langword=&quot;false&quot; /&gt;.">Obtiene la colección de instrucciones que se ejecutarán, si la expresión condicional es <see langword="false" />.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; containing the statements to execute if the conditional expression evaluates to &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.CodeDom.CodeStatementCollection" /> que contiene las instrucciones que se ejecutarán si la condición es <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.TrueStatements">
      <summary vsli:raw="Gets the collection of statements to execute if the conditional expression evaluates to &lt;see langword=&quot;true&quot; /&gt;.">Obtiene la colección de instrucciones que se ejecutarán, si la expresión condicional es <see langword="true" />.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; containing the statements to execute if the conditional expression evaluates to &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="T:System.CodeDom.CodeStatementCollection" /> que contiene las instrucciones que se ejecutarán si la condición es <see langword="true" />.</returns>
    </member>
    <member name="T:System.CodeDom.CodeConstructor">
      <summary vsli:raw="Represents a declaration for an instance constructor of a type.">Representa una declaración de un constructor de instancia para un tipo.</summary>
    </member>
    <member name="M:System.CodeDom.CodeConstructor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeConstructor&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeConstructor" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeConstructor.BaseConstructorArgs">
      <summary vsli:raw="Gets the collection of base constructor arguments.">Obtiene la colección de argumentos constructores base.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that contains the base constructor arguments.">
        <see cref="T:System.CodeDom.CodeExpressionCollection" /> que contiene los argumentos del constructor base.</returns>
    </member>
    <member name="P:System.CodeDom.CodeConstructor.ChainedConstructorArgs">
      <summary vsli:raw="Gets the collection of chained constructor arguments.">Obtiene la colección de argumentos constructores encadenados.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that contains the chained constructor arguments.">
        <see cref="T:System.CodeDom.CodeExpressionCollection" /> que contiene los argumentos de constructor encadenados.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDefaultValueExpression">
      <summary vsli:raw="Represents a reference to a default value.">Representa una referencia a un valor predeterminado.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDefaultValueExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDefaultValueExpression&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeDefaultValueExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDefaultValueExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDefaultValueExpression&quot; /&gt; class using the specified code type reference.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeDefaultValueExpression" /> utilizando la referencia al tipo de código especificado.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that specifies the reference to a value type.">Clase <see cref="T:System.CodeDom.CodeTypeReference" /> que especifica la referencia a un tipo de valor.</param>
    </member>
    <member name="P:System.CodeDom.CodeDefaultValueExpression.Type">
      <summary vsli:raw="Gets or sets the data type reference for a default value.">Obtiene o establece la referencia al tipo de datos para un valor predeterminado.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; object representing a data type that has a default value.">Un objeto <see cref="T:System.CodeDom.CodeTypeReference" /> que representa un tipo de datos que tiene un valor predeterminado.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDelegateCreateExpression">
      <summary vsli:raw="Represents an expression that creates a delegate.">Representa una expresión que crea un delegado.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateCreateExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDelegateCreateExpression&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeDelegateCreateExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDelegateCreateExpression&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeDelegateCreateExpression" />.</summary>
      <param name="delegateType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the delegate.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo de datos del delegado.</param>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object containing the event-handler method.">
        <see cref="T:System.CodeDom.CodeExpression" /> que indica el objeto que contiene el método de control de eventos.</param>
      <param name="methodName" vsli:raw="The name of the event-handler method.">Nombre del método de control de eventos.</param>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.DelegateType">
      <summary vsli:raw="Gets or sets the data type of the delegate.">Obtiene o establece el tipo de datos del delegado.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the delegate.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo de datos del delegado.</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.MethodName">
      <summary vsli:raw="Gets or sets the name of the event handler method.">Obtiene o establece el nombre del método de control de eventos.</summary>
      <returns vsli:raw="The name of the event handler method.">Nombre del método de control de eventos.</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.TargetObject">
      <summary vsli:raw="Gets or sets the object that contains the event-handler method.">Obtiene o establece el objeto que contiene el método de control de eventos.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object containing the event-handler method.">
        <see cref="T:System.CodeDom.CodeExpression" /> que indica el objeto que contiene el método de control de eventos.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDelegateInvokeExpression">
      <summary vsli:raw="Represents an expression that raises an event.">Representa una expresión que genera un evento.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDelegateInvokeExpression&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDelegateInvokeExpression&quot; /&gt; class using the specified target object.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" /> mediante el objeto de destino especificado.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the target object.">
        <see cref="T:System.CodeDom.CodeExpression" /> que indica el objeto de destino.</param>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDelegateInvokeExpression&quot; /&gt; class using the specified target object and parameters.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" /> mediante el objeto de destino y los parámetros especificados.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the target object.">
        <see cref="T:System.CodeDom.CodeExpression" /> que indica el objeto de destino.</param>
      <param name="parameters" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects that indicate the parameters.">Matriz de objetos <see cref="T:System.CodeDom.CodeExpression" /> que indican los parámetros.</param>
    </member>
    <member name="P:System.CodeDom.CodeDelegateInvokeExpression.Parameters">
      <summary vsli:raw="Gets or sets the parameters to pass to the event handling methods attached to the event.">Obtiene o establece los parámetros que se pasan a los métodos de control de eventos asociados al evento.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the parameters to pass to the event handling methods attached to the event.">
        <see cref="T:System.CodeDom.CodeExpression" /> que indica los parámetros que se pasan a los métodos de control de eventos asociados al evento.</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateInvokeExpression.TargetObject">
      <summary vsli:raw="Gets or sets the event to invoke.">Obtiene o establece el evento que se va a invocar.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the event to invoke.">
        <see cref="T:System.CodeDom.CodeExpression" /> que indica el evento que se va a invocar.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDirectionExpression">
      <summary vsli:raw="Represents an expression used as a method invoke parameter along with a reference direction indicator.">Representa una expresión que se utiliza como parámetro de invocación de método junto con un indicador de dirección de referencia.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectionExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDirectionExpression&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeDirectionExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectionExpression.#ctor(System.CodeDom.FieldDirection,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDirectionExpression&quot; /&gt; class using the specified field direction and expression.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeDirectionExpression" /> utilizando la expresión y la dirección de campo especificadas.</summary>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.FieldDirection&quot; /&gt; that indicates the field direction of the expression.">
        <see cref="T:System.CodeDom.FieldDirection" /> que indica la dirección de campo de la expresión.</param>
      <param name="expression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the code expression to represent.">
        <see cref="T:System.CodeDom.CodeExpression" /> que indica la expresión de código que se va a representar.</param>
    </member>
    <member name="P:System.CodeDom.CodeDirectionExpression.Direction">
      <summary vsli:raw="Gets or sets the field direction for this direction expression.">Obtiene o establece la dirección de campo de esta expresión de dirección.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.FieldDirection&quot; /&gt; that indicates the field direction for this direction expression.">
        <see cref="T:System.CodeDom.FieldDirection" /> que indica la dirección de campo de esta expresión de dirección.</returns>
    </member>
    <member name="P:System.CodeDom.CodeDirectionExpression.Expression">
      <summary vsli:raw="Gets or sets the code expression to represent.">Obtiene o establece la expresión de código que se va a representar.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the expression to represent.">
        <see cref="T:System.CodeDom.CodeExpression" /> que indica la expresión que se va a representar.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDirective">
      <summary vsli:raw="Serves as the base class for code directive classes.">Actúa como la clase base de las clases de directivas de código.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirective.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeDirective" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeDirectiveCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; objects.">Representa una colección de objetos <see cref="T:System.CodeDom.CodeDirective" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeDirectiveCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor(System.CodeDom.CodeDirective[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; class with the code directive objects in the specified array.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeDirectiveCollection" /> con los objetos de directiva de código de la matriz especificada.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; objects with which to initialize the collection.">Matriz de objetos <see cref="T:System.CodeDom.CodeDirective" /> con los que se inicializará la colección.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor(System.CodeDom.CodeDirectiveCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; class with the elements in the specified code directive collection.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeDirectiveCollection" /> con los elementos de la colección de directivas de código especificada.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object with which to initialize the collection.">Objeto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> con el que se inicializa la colección.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Add(System.CodeDom.CodeDirective)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object to the collection.">Agrega a la colección el objeto <see cref="T:System.CodeDom.CodeDirective" /> especificado.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object to add.">Objeto <see cref="T:System.CodeDom.CodeDirective" /> que se agrega.</param>
      <returns vsli:raw="The index position at which the new element was inserted.">Posición de índice en la que se insertó el nuevo elemento.</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.AddRange(System.CodeDom.CodeDirective[])">
      <summary vsli:raw="Adds an array of &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; objects to the end of the collection.">Agrega una matriz de objetos <see cref="T:System.CodeDom.CodeDirective" /> al final de la colección.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; objects to add to the collection.">Matriz de objetos <see cref="T:System.CodeDom.CodeDirective" /> que se agregará a la colección.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.AddRange(System.CodeDom.CodeDirectiveCollection)">
      <summary vsli:raw="Adds the contents of the specified &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object to the end of the collection.">Agrega al final de la colección el contenido del objeto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> especificado.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing the &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; objects to add to the collection.">Objeto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> que contiene los objetos <see cref="T:System.CodeDom.CodeDirective" /> que se van a agregar a la colección.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Contains(System.CodeDom.CodeDirective)">
      <summary vsli:raw="Gets a value indicating whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object.">Obtiene un valor que indica si la colección contiene el objeto <see cref="T:System.CodeDom.CodeDirective" /> especificado.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object to search for in the collection.">Objeto <see cref="T:System.CodeDom.CodeDirective" /> que se va a buscar en la colección.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la colección contiene el objeto especificado; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.CopyTo(System.CodeDom.CodeDirective[],System.Int32)">
      <summary vsli:raw="Copies the contents of the collection to a one-dimensional array beginning at the specified index.">Copia el contenido de la colección en una matriz unidimensional, a partir del índice especificado.</summary>
      <param name="array" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; that is the destination of the values copied from the collection.">Matriz de tipo <see cref="T:System.CodeDom.CodeDirective" /> que constituye el destino de los valores copiados desde la colección.</param>
      <param name="index" vsli:raw="The index in the array at which to begin inserting collection objects.">Índice de la matriz donde debe comenzar la inserción de objetos de la colección.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; is greater than the available space between the index of the target array specified by &lt;paramref name=&quot;index&quot; /&gt; and the end of the target array.">La matriz de destino es multidimensional.
o bien
El número de elementos de <see cref="T:System.CodeDom.CodeDirectiveCollection" /> es mayor que el espacio disponible entre el índice de la matriz de destino especificada por <paramref name="index" /> y el final de la matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than the target array's minimum index.">
        <paramref name="index" /> es menor que el índice mínimo de la matriz de destino.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.IndexOf(System.CodeDom.CodeDirective)">
      <summary vsli:raw="Gets the index in the collection of the specified &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object, if it exists in the collection.">Obtiene el índice que ocupa en la colección el objeto <see cref="T:System.CodeDom.CodeDirective" /> especificado, si existe en la colección.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object to locate in the collection.">Objeto <see cref="T:System.CodeDom.CodeDirective" /> que se va a buscar en la colección.</param>
      <returns vsli:raw="The index position in the collection of the specified object, if found; otherwise, -1.">Posición de índice que ocupa en la colección el objeto especificado, si se encuentra; de lo contrario, es -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Insert(System.Int32,System.CodeDom.CodeDirective)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object into the collection at the specified index.">Inserta el objeto <see cref="T:System.CodeDom.CodeDirective" /> especificado en el índice especificado de la colección.</summary>
      <param name="index" vsli:raw="The zero-based index position where the specified object should be inserted.">Posición de índice de base cero donde debe insertarse el objeto especificado.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object to insert.">Objeto <see cref="T:System.CodeDom.CodeDirective" /> que se va a insertar.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is greater than &lt;see cref=&quot;P:System.Collections.CollectionBase.Count&quot; /&gt;.">
        <paramref name="index" /> es menor que 0.
o bien
<paramref name="index" /> es mayor que <see cref="P:System.Collections.CollectionBase.Count" />.</exception>
    </member>
    <member name="P:System.CodeDom.CodeDirectiveCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object at the specified index in the collection.">Obtiene o establece el objeto <see cref="T:System.CodeDom.CodeDirective" /> en el índice especificado de la colección.</summary>
      <param name="index" vsli:raw="The index position to access.">Posición de índice a la que se obtiene acceso.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; at the index position.">
        <see cref="T:System.CodeDom.CodeDirective" /> en la posición de índice.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is outside the valid range of index positions for the collection.">
        <paramref name="index" /> se encuentra fuera del intervalo de posiciones de índice válido para la colección.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Remove(System.CodeDom.CodeDirective)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object from the collection.">Quita el objeto <see cref="T:System.CodeDom.CodeDirective" /> especificado de la colección.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object to remove from the collection.">Objeto <see cref="T:System.CodeDom.CodeDirective" /> que se va a quitar de la colección.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">No se encuentra el objeto especificado en la colección.</exception>
    </member>
    <member name="T:System.CodeDom.CodeEntryPointMethod">
      <summary vsli:raw="Represents the entry point method of an executable.">Representa el método de punto de entrada de un ejecutable.</summary>
    </member>
    <member name="M:System.CodeDom.CodeEntryPointMethod.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeEntryPointMethod&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeEntryPointMethod" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeEventReferenceExpression">
      <summary vsli:raw="Represents a reference to an event.">Representa una referencia a un evento.</summary>
    </member>
    <member name="M:System.CodeDom.CodeEventReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeEventReferenceExpression&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeEventReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeEventReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeEventReferenceExpression&quot; /&gt; class using the specified target object and event name.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> mediante el objeto de destino y el nombre de evento especificados.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the event.">Objeto <see cref="T:System.CodeDom.CodeExpression" /> que indica el objeto que contiene el evento.</param>
      <param name="eventName" vsli:raw="The name of the event to reference.">Nombre del evento al que se hará referencia.</param>
    </member>
    <member name="P:System.CodeDom.CodeEventReferenceExpression.EventName">
      <summary vsli:raw="Gets or sets the name of the event.">Obtiene o establece el nombre del evento.</summary>
      <returns vsli:raw="The name of the event.">Nombre del evento.</returns>
    </member>
    <member name="P:System.CodeDom.CodeEventReferenceExpression.TargetObject">
      <summary vsli:raw="Gets or sets the object that contains the event.">Obtiene o establece el objeto que contiene el evento.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the event.">Objeto <see cref="T:System.CodeDom.CodeExpression" /> que indica el objeto que contiene el evento.</returns>
    </member>
    <member name="T:System.CodeDom.CodeExpression">
      <summary vsli:raw="Represents a code expression. This is a base class for other code expression objects that is never instantiated.">Representa una expresión de código. Ésta es una clase base para otros objetos de expresión de código para la cual nunca se crea ninguna instancia.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeExpression" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeExpressionCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects.">Representa una colección de objetos <see cref="T:System.CodeDom.CodeExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeExpressionCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor(System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeExpressionCollection" /> que contiene la matriz especificada de objetos <see cref="T:System.CodeDom.CodeExpression" />.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects with which to initialize the collection.">Matriz de objetos <see cref="T:System.CodeDom.CodeExpression" /> con los que se inicializará la colección.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more objects in the array are &lt;see langword=&quot;null&quot; /&gt;.">Uno o más objetos de la matriz son <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor(System.CodeDom.CodeExpressionCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; class containing the elements of the specified source collection.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeExpressionCollection" /> que contiene los elementos de la colección de origen especificada.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; with which to initialize the collection.">Objeto <see cref="T:System.CodeDom.CodeExpressionCollection" /> con el que se inicializa la colección.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">El valor de <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Add(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to the collection.">Agrega a la colección el objeto <see cref="T:System.CodeDom.CodeExpression" /> especificado.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to add.">Objeto <see cref="T:System.CodeDom.CodeExpression" /> que se agrega.</param>
      <returns vsli:raw="The index at which the new element was inserted.">Índice donde se insertó el nuevo elemento.</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.AddRange(System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Copies the elements of the specified array to the end of the collection.">Copia los elementos de la matriz especificada al final de la colección.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that contains the objects to add to the collection.">Matriz de tipo <see cref="T:System.CodeDom.CodeExpression" /> que contiene los objetos que se van a agregar a la colección.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">El valor de <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.AddRange(System.CodeDom.CodeExpressionCollection)">
      <summary vsli:raw="Copies the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; object to the end of the collection.">Copia el contenido de otro objeto <see cref="T:System.CodeDom.CodeExpressionCollection" /> al final de la colección.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that contains the objects to add to the collection.">
        <see cref="T:System.CodeDom.CodeExpressionCollection" /> que contiene los objetos que se van a agregar a la colección.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Contains(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object.">Obtiene un valor que indica si la colección contiene el objeto <see cref="T:System.CodeDom.CodeExpression" /> especificado.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to locate in the collection.">Objeto <see cref="T:System.CodeDom.CodeExpression" /> que se va a buscar en la colección.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la colección contiene el objeto especificado; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.CopyTo(System.CodeDom.CodeExpression[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance beginning at the specified index.">Copia los objetos de colección en una instancia <see cref="T:System.Array" /> unidimensional, comenzando a partir del índice especificado.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los valores copiados de la colección.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">Índice de la matriz donde debe comenzar la inserción.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">La matriz de destino es multidimensional.
O bien
El número de elementos de la clase <see cref="T:System.CodeDom.CodeExpressionCollection" /> es mayor que el espacio disponible entre el índice de la matriz de destino especificada por el parámetro <paramref name="index" /> y el final de la matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">El parámetro <paramref name="index" /> es menor que el índice mínimo de la matriz de destino.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.IndexOf(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object in the collection, if it exists in the collection.">Obtiene el índice del objeto <see cref="T:System.CodeDom.CodeExpression" /> especificado en la colección, si existe en la colección.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to locate in the collection.">Objeto <see cref="T:System.CodeDom.CodeExpression" /> que se va a buscar en la colección.</param>
      <returns vsli:raw="The index of the specified object, if found, in the collection; otherwise, -1.">Índice del objeto especificado, si se encuentra en la colección; de lo contrario, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Insert(System.Int32,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object into the collection at the specified index.">Inserta el objeto <see cref="T:System.CodeDom.CodeExpression" /> especificado en el índice especificado de la colección.</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">Índice de base cero donde debe insertarse el objeto especificado.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to insert.">Objeto <see cref="T:System.CodeDom.CodeExpression" /> que se va a insertar.</param>
    </member>
    <member name="P:System.CodeDom.CodeExpressionCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object at the specified index in the collection.">Obtiene o establece el objeto <see cref="T:System.CodeDom.CodeExpression" /> en el índice especificado de la colección.</summary>
      <param name="index" vsli:raw="The zero-based index of the collection to access.">Índice de base cero de la colección a la que se obtendrá acceso.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object at each valid index.">Objeto <see cref="T:System.CodeDom.CodeExpression" /> que se encuentra en cada índice válido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">El parámetro <paramref name="index" /> está fuera del intervalo válido de índices de la colección.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Remove(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object from the collection.">Quita el objeto <see cref="T:System.CodeDom.CodeExpression" /> especificado de la colección.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to remove from the collection.">Objeto <see cref="T:System.CodeDom.CodeExpression" /> que se va a quitar de la colección.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">No se encuentra el objeto especificado en la colección.</exception>
    </member>
    <member name="T:System.CodeDom.CodeExpressionStatement">
      <summary vsli:raw="Represents a statement that consists of a single expression.">Representa una instrucción que contiene una sola expresión.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeExpressionStatement&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeExpressionStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeExpressionStatement&quot; /&gt; class by using the specified expression.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeExpressionStatement" /> usando la expresión especificada.</summary>
      <param name="expression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; for the statement.">
        <see cref="T:System.CodeDom.CodeExpression" /> para la instrucción.</param>
    </member>
    <member name="P:System.CodeDom.CodeExpressionStatement.Expression">
      <summary vsli:raw="Gets or sets the expression for the statement.">Obtiene o establece la expresión de la instrucción.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the expression for the statement.">
        <see cref="T:System.CodeDom.CodeExpression" /> que indica la expresión de la instrucción.</returns>
    </member>
    <member name="T:System.CodeDom.CodeFieldReferenceExpression">
      <summary vsli:raw="Represents a reference to a field.">Representa una referencia a un campo.</summary>
    </member>
    <member name="M:System.CodeDom.CodeFieldReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeFieldReferenceExpression&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeFieldReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeFieldReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeFieldReferenceExpression&quot; /&gt; class using the specified target object and field name.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeFieldReferenceExpression" /> mediante el objeto de destino y el nombre de campo especificados.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the field.">Instancia de <see cref="T:System.CodeDom.CodeExpression" /> que indica el objeto que contiene el campo.</param>
      <param name="fieldName" vsli:raw="The name of the field.">Nombre del campo.</param>
    </member>
    <member name="P:System.CodeDom.CodeFieldReferenceExpression.FieldName">
      <summary vsli:raw="Gets or sets the name of the field to reference.">Obtiene o establece el nombre del campo al que se hará referencia.</summary>
      <returns vsli:raw="A string containing the field name.">Una cadena que contiene el nombre de campo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeFieldReferenceExpression.TargetObject">
      <summary vsli:raw="Gets or sets the object that contains the field to reference.">Obtiene o establece el objeto que contiene el campo al que se hace referencia.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the field to reference.">Una instancia de <see cref="T:System.CodeDom.CodeExpression" /> que indica el objeto que contiene el campo al que se hace referencia.</returns>
    </member>
    <member name="T:System.CodeDom.CodeGotoStatement">
      <summary vsli:raw="Represents a &lt;see langword=&quot;goto&quot; /&gt; statement.">Representa una instrucción <see langword="goto" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeGotoStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeGotoStatement&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeGotoStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeGotoStatement.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeGotoStatement&quot; /&gt; class using the specified label name.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeGotoStatement" /> con el nombre de etiqueta especificado.</summary>
      <param name="label" vsli:raw="The name of the label at which to continue program execution.">Etiqueta en la que va a continuar la ejecución del programa.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;Label&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="Label" /> es <see langword="null" />.</exception>
    </member>
    <member name="P:System.CodeDom.CodeGotoStatement.Label">
      <summary vsli:raw="Gets or sets the name of the label at which to continue program execution.">Obtiene o establece el nombre de la etiqueta en la que va a continuar la ejecución del programa.</summary>
      <returns vsli:raw="A string that indicates the name of the label at which to continue program execution.">Cadena que indica el nombre de la etiqueta en la que va a continuar la ejecución del programa.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The label cannot be set because &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or an empty string.">La etiqueta no se puede establecer porque <paramref name="value" /> es <see langword="null" /> o una cadena vacía.</exception>
    </member>
    <member name="T:System.CodeDom.CodeIndexerExpression">
      <summary vsli:raw="Represents a reference to an indexer property of an object.">Representa una referencia para una propiedad del indizador de un objeto.</summary>
    </member>
    <member name="M:System.CodeDom.CodeIndexerExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeIndexerExpression&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeIndexerExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeIndexerExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeIndexerExpression&quot; /&gt; class using the specified target object and index.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeIndexerExpression" /> con el objeto de destino y el índice especificados.</summary>
      <param name="targetObject" vsli:raw="The target object.">Objeto de destino.</param>
      <param name="indices" vsli:raw="The index or indexes of the indexer expression.">Índices de la expresión de indizador.</param>
    </member>
    <member name="P:System.CodeDom.CodeIndexerExpression.Indices">
      <summary vsli:raw="Gets the collection of indexes of the indexer expression.">Obtiene la colección de índices de la expresión de indizador.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that indicates the index or indexes of the indexer expression.">
        <see cref="T:System.CodeDom.CodeExpressionCollection" /> que indica los índices de la expresión de indizador.</returns>
    </member>
    <member name="P:System.CodeDom.CodeIndexerExpression.TargetObject">
      <summary vsli:raw="Gets or sets the target object that can be indexed.">Obtiene o establece el objeto de destino que se puede indizar.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the indexer object.">
        <see cref="T:System.CodeDom.CodeExpression" /> que indica el objeto indizador.</returns>
    </member>
    <member name="T:System.CodeDom.CodeIterationStatement">
      <summary vsli:raw="Represents a &lt;see langword=&quot;for&quot; /&gt; statement, or a loop through a block of statements, using a test expression as a condition for continuing to loop.">Representa una instrucción <see langword="for" /> o un bucle a través de un bloque de instrucciones mediante una expresión de comprobación utilizada como una condición para la continuación del bucle.</summary>
    </member>
    <member name="M:System.CodeDom.CodeIterationStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeIterationStatement&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeIterationStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeIterationStatement.#ctor(System.CodeDom.CodeStatement,System.CodeDom.CodeExpression,System.CodeDom.CodeStatement,System.CodeDom.CodeStatement[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeIterationStatement&quot; /&gt; class using the specified parameters.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeIterationStatement" /> utilizando los parámetros especificados.</summary>
      <param name="initStatement" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the loop initialization statement.">
        <see cref="T:System.CodeDom.CodeStatement" /> que contiene la instrucción de inicialización del bucle.</param>
      <param name="testExpression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; containing the expression to test for exit condition.">
        <see cref="T:System.CodeDom.CodeExpression" /> que contiene la expresión en la que se va a probar la condición de salida.</param>
      <param name="incrementStatement" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the per-cycle increment statement.">
        <see cref="T:System.CodeDom.CodeStatement" /> que contiene la instrucción de incremento por ciclo.</param>
      <param name="statements" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the statements within the loop.">Matriz de tipo <see cref="T:System.CodeDom.CodeStatement" /> que contiene las instrucciones dentro del bucle.</param>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.IncrementStatement">
      <summary vsli:raw="Gets or sets the statement that is called after each loop cycle.">Obtiene o establece la instrucción a la que se llama después de cada ciclo del bucle.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; that indicates the per cycle increment statement.">
        <see cref="T:System.CodeDom.CodeStatement" /> que indica la instrucción de incremento por ciclo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.InitStatement">
      <summary vsli:raw="Gets or sets the loop initialization statement.">Obtiene o establece la instrucción de inicialización del bucle.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; that indicates the loop initialization statement.">
        <see cref="T:System.CodeDom.CodeStatement" /> que indica la instrucción de inicialización del bucle.</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.Statements">
      <summary vsli:raw="Gets the collection of statements to be executed within the loop.">Obtiene o establece las instrucciones que se ejecutarán dentro del bucle.</summary>
      <returns vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; that indicates the statements within the loop.">Matriz de tipo <see cref="T:System.CodeDom.CodeStatement" /> que indica las instrucciones dentro del bucle.</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.TestExpression">
      <summary vsli:raw="Gets or sets the expression to test as the condition that continues the loop.">Obtiene o establece la expresión que se va a probar como condición para continuar el bucle.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the expression to test.">
        <see cref="T:System.CodeDom.CodeExpression" /> que indica la expresión que se va a evaluar.</returns>
    </member>
    <member name="T:System.CodeDom.CodeLabeledStatement">
      <summary vsli:raw="Represents a labeled statement or a stand-alone label.">Representa una instrucción con etiqueta o una etiqueta independiente.</summary>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeLabeledStatement&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeLabeledStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeLabeledStatement&quot; /&gt; class using the specified label name.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeLabeledStatement" /> con el nombre de etiqueta especificado.</summary>
      <param name="label" vsli:raw="The name of the label.">Nombre de la etiqueta.</param>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor(System.String,System.CodeDom.CodeStatement)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeLabeledStatement&quot; /&gt; class using the specified label name and statement.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeLabeledStatement" /> con el nombre de la etiqueta e instrucción especificadas.</summary>
      <param name="label" vsli:raw="The name of the label.">Nombre de la etiqueta.</param>
      <param name="statement" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; to associate with the label.">
        <see cref="T:System.CodeDom.CodeStatement" /> que se va a asociar a la etiqueta.</param>
    </member>
    <member name="P:System.CodeDom.CodeLabeledStatement.Label">
      <summary vsli:raw="Gets or sets the name of the label.">Obtiene o establece el nombre de la etiqueta.</summary>
      <returns vsli:raw="The name of the label.">Nombre de la etiqueta.</returns>
    </member>
    <member name="P:System.CodeDom.CodeLabeledStatement.Statement">
      <summary vsli:raw="Gets or sets the optional associated statement.">Obtiene o establece la instrucción asociada opcional.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; that indicates the statement associated with the label.">
        <see cref="T:System.CodeDom.CodeStatement" /> que indica la instrucción asociada con la etiqueta.</returns>
    </member>
    <member name="T:System.CodeDom.CodeLinePragma">
      <summary vsli:raw="Represents a specific location within a specific file.">Representa la ubicación específica de un archivo determinado.</summary>
    </member>
    <member name="M:System.CodeDom.CodeLinePragma.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeLinePragma&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeLinePragma" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeLinePragma.#ctor(System.String,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeLinePragma&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeLinePragma" />.</summary>
      <param name="fileName" vsli:raw="The file name of the associated file.">El nombre del archivo asociado.</param>
      <param name="lineNumber" vsli:raw="The line number to store a reference to.">Número de línea donde se almacena una referencia.</param>
    </member>
    <member name="P:System.CodeDom.CodeLinePragma.FileName">
      <summary vsli:raw="Gets or sets the name of the associated file.">Obtiene o establece el nombre del archivo asociado.</summary>
      <returns vsli:raw="The file name of the associated file.">El nombre del archivo asociado.</returns>
    </member>
    <member name="P:System.CodeDom.CodeLinePragma.LineNumber">
      <summary vsli:raw="Gets or sets the line number of the associated reference.">Obtiene o establece el número de línea de la referencia asociada.</summary>
      <returns vsli:raw="The line number.">Número de línea.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberEvent">
      <summary vsli:raw="Represents a declaration for an event of a type.">Representa una declaración para un evento de un tipo.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberEvent.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMemberEvent&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeMemberEvent" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.ImplementationTypes">
      <summary vsli:raw="Gets or sets the data type that the member event implements.">Obtiene o establece el tipo de datos que implementa el evento de miembro.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; that indicates the data type or types that the member event implements.">
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> que indica el tipo de datos que implementa el evento de miembro.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.PrivateImplementationType">
      <summary vsli:raw="Gets or sets the privately implemented data type, if any.">Obtiene o establece el tipo de datos implementado de forma privada, en caso de haber alguno.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type that the event privately implements.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo de datos que implementa el evento de forma privada.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.Type">
      <summary vsli:raw="Gets or sets the data type of the delegate type that handles the event.">Obtiene o establece el tipo de datos del tipo de delegado que controla el evento.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the delegate type that handles the event.">Clase <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo de delegado que controla el evento.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberField">
      <summary vsli:raw="Represents a declaration for a field of a type.">Representa una declaración para un campo de un tipo.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMemberField&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeMemberField" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMemberField&quot; /&gt; class using the specified field type and field name.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeMemberField" /> con el tipo y el nombre de campo especificados.</summary>
      <param name="type" vsli:raw="An object that indicates the type of the field.">Un objeto que indica el tipo del campo.</param>
      <param name="name" vsli:raw="The name of the field.">Nombre del campo.</param>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMemberField&quot; /&gt; class using the specified field type and field name.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeMemberField" /> con el tipo y el nombre de campo especificados.</summary>
      <param name="type" vsli:raw="The type of the field.">Tipo del campo.</param>
      <param name="name" vsli:raw="The name of the field.">Nombre del campo.</param>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.Type,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMemberField&quot; /&gt; class using the specified field type and field name.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeMemberField" /> con el tipo y el nombre de campo especificados.</summary>
      <param name="type" vsli:raw="The type of the field.">Tipo del campo.</param>
      <param name="name" vsli:raw="The name of the field.">Nombre del campo.</param>
    </member>
    <member name="P:System.CodeDom.CodeMemberField.InitExpression">
      <summary vsli:raw="Gets or sets the initialization expression for the field.">Obtiene o establece la expresión de inicialización para el campo.</summary>
      <returns vsli:raw="The initialization expression for the field.">Expresión de inicialización para el campo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberField.Type">
      <summary vsli:raw="Gets or sets the type of the field.">Obtiene o establece el tipo del campo.</summary>
      <returns vsli:raw="The type of the field.">Tipo del campo.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberMethod">
      <summary vsli:raw="Represents a declaration for a method of a type.">Representa una declaración para un método de un tipo.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberMethod.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMemberMethod&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeMemberMethod" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ImplementationTypes">
      <summary vsli:raw="Gets the data types of the interfaces implemented by this method, unless it is a private method implementation, which is indicated by the &lt;see cref=&quot;P:System.CodeDom.CodeMemberMethod.PrivateImplementationType&quot; /&gt; property.">Obtiene los tipos de datos de las interfaces implementadas mediante este método que se indica mediante la propiedad <see cref="P:System.CodeDom.CodeMemberMethod.PrivateImplementationType" />, a menos que sea una implementación de método privado.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; that indicates the interfaces implemented by this method.">
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> que indica las interfaces implementadas por este método.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.Parameters">
      <summary vsli:raw="Gets the parameter declarations for the method.">Obtiene las declaraciones de parámetros del método.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; that indicates the method parameters.">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> que indica los parámetros del método.</returns>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateImplementationTypes">
      <summary vsli:raw="An event that will be raised the first time the &lt;see cref=&quot;P:System.CodeDom.CodeMemberMethod.ImplementationTypes&quot; /&gt; collection is accessed.">Evento que se desencadena la primera vez que se tiene acceso a la colección <see cref="P:System.CodeDom.CodeMemberMethod.ImplementationTypes" />.</summary>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateParameters">
      <summary vsli:raw="An event that will be raised the first time the &lt;see cref=&quot;P:System.CodeDom.CodeMemberMethod.Parameters&quot; /&gt; collection is accessed.">Evento que se desencadena la primera vez que se tiene acceso a la colección <see cref="P:System.CodeDom.CodeMemberMethod.Parameters" />.</summary>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateStatements">
      <summary vsli:raw="An event that will be raised the first time the &lt;see cref=&quot;P:System.CodeDom.CodeMemberMethod.Statements&quot; /&gt; collection is accessed.">Evento que se desencadena la primera vez que se tiene acceso a la colección <see cref="P:System.CodeDom.CodeMemberMethod.Statements" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.PrivateImplementationType">
      <summary vsli:raw="Gets or sets the data type of the interface this method, if private, implements a method of, if any.">Obtiene o establece el tipo de datos de la interfaz que implementa este método, si es privado, e implementa un método de la interfaz, si existe.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the interface with the method that the private method whose declaration is represented by this &lt;see cref=&quot;T:System.CodeDom.CodeMemberMethod&quot; /&gt; implements.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> indica el tipo de datos de la interfaz con el método que implementa el método privado cuya declaración representa <see cref="T:System.CodeDom.CodeMemberMethod" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ReturnType">
      <summary vsli:raw="Gets or sets the data type of the return value of the method.">Obtiene o establece el tipo de datos del valor devuelto del método.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the value returned by the method.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que indica los tipos de datos del valor devuelto por el método.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ReturnTypeCustomAttributes">
      <summary vsli:raw="Gets the custom attributes of the return type of the method.">Obtiene los atributos personalizados del tipo de valor devuelto del método.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; that indicates the custom attributes.">
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> que indica los atributos personalizados.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.Statements">
      <summary vsli:raw="Gets the statements within the method.">Obtiene las instrucciones del método.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; that indicates the statements within the method.">
        <see cref="T:System.CodeDom.CodeStatementCollection" /> que indica las instrucciones del método.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.TypeParameters">
      <summary vsli:raw="Gets the type parameters for the current generic method.">Obtiene los parámetros de tipo del método genérico actual.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; that contains the type parameters for the generic method.">
        <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> que contiene los parámetros de tipo del método genérico.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberProperty">
      <summary vsli:raw="Represents a declaration for a property of a type.">Representa una declaración para una propiedad de un tipo.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberProperty.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMemberProperty&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeMemberProperty" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.GetStatements">
      <summary vsli:raw="Gets the collection of &lt;see langword=&quot;get&quot; /&gt; statements for the property.">Obtiene la colección de instrucciones <see langword="get" /> de la propiedad.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; that contains the &lt;see langword=&quot;get&quot; /&gt; statements for the member property.">
        <see cref="T:System.CodeDom.CodeStatementCollection" /> que contiene las instrucciones <see langword="get" /> de la propiedad miembro.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.HasGet">
      <summary vsli:raw="Gets or sets a value indicating whether the property has a &lt;see langword=&quot;get&quot; /&gt; method accessor.">Obtiene o establece un valor que indica si la propiedad posee un descriptor de acceso de método <see langword="get" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see langword=&quot;Count&quot; /&gt; property of the &lt;see cref=&quot;P:System.CodeDom.CodeMemberProperty.GetStatements&quot; /&gt; collection is non-zero, or if the value of this property has been set to &lt;see langword=&quot;true&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" />, si la propiedad <see langword="Count" /> de la colección <see cref="P:System.CodeDom.CodeMemberProperty.GetStatements" /> es distinta de cero, o si el valor de esta propiedad se ha establecido en <see langword="true" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.HasSet">
      <summary vsli:raw="Gets or sets a value indicating whether the property has a &lt;see langword=&quot;set&quot; /&gt; method accessor.">Obtiene o establece un valor que indica si la propiedad posee un descriptor de acceso de método <see langword="set" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;P:System.Collections.CollectionBase.Count&quot; /&gt; property of the &lt;see cref=&quot;P:System.CodeDom.CodeMemberProperty.SetStatements&quot; /&gt; collection is non-zero; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si la propiedad <see cref="P:System.Collections.CollectionBase.Count" /> de la colección <see cref="P:System.CodeDom.CodeMemberProperty.SetStatements" /> es distinta de cero; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.ImplementationTypes">
      <summary vsli:raw="Gets the data types of any interfaces that the property implements.">Obtiene los tipos de datos de las interfaces que implementa esta propiedad.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; that indicates the data types the property implements.">
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> que indica los tipos de datos que implementa la propiedad.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.Parameters">
      <summary vsli:raw="Gets the collection of declaration expressions for the property.">Obtiene la colección de instrucciones de declaración de la propiedad.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; that indicates the declaration expressions for the property.">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> que indica las expresiones de declaración de la propiedad.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.PrivateImplementationType">
      <summary vsli:raw="Gets or sets the data type of the interface, if any, this property, if private, implements.">Obtiene o establece el tipo de datos de la interfaz, si existe, que implementa esta propiedad, si es privada.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the interface, if any, the property, if private, implements.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo de datos de la interfaz, si existe, que implementa la propiedad, si es privada.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.SetStatements">
      <summary vsli:raw="Gets the collection of &lt;see langword=&quot;set&quot; /&gt; statements for the property.">Obtiene la colección de instrucciones <see langword="set" /> de la propiedad.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; that contains the &lt;see langword=&quot;set&quot; /&gt; statements for the member property.">
        <see cref="T:System.CodeDom.CodeStatementCollection" /> que contiene las instrucciones <see langword="set" /> de la propiedad miembro.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.Type">
      <summary vsli:raw="Gets or sets the data type of the property.">Obtiene o establece el tipo de datos de la propiedad.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the property.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo de datos de la propiedad.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodInvokeExpression">
      <summary vsli:raw="Represents an expression that invokes a method.">Representa una expresión que invoca a un método.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodInvokeExpression&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeMethodInvokeExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodInvokeExpression&quot; /&gt; class using the specified target object, method name, and parameters.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeMethodInvokeExpression" /> con el objeto de destino, el nombre de método y los parámetros especificados.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the target object with the method to invoke.">Objeto <see cref="T:System.CodeDom.CodeExpression" /> que indica el objeto de destino con el método que se va a invocar.</param>
      <param name="methodName" vsli:raw="The name of the method to invoke.">Nombre del método que se va a invocar.</param>
      <param name="parameters" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects that indicate the parameters to call the method with.">Matriz de objetos <see cref="T:System.CodeDom.CodeExpression" /> que indica los parámetros con los que llamar al método.</param>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor(System.CodeDom.CodeMethodReferenceExpression,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodInvokeExpression&quot; /&gt; class using the specified method and parameters.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeMethodInvokeExpression" /> con el método y los parámetros especificados.</summary>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeMethodReferenceExpression&quot; /&gt; that indicates the method to invoke.">Objeto <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> que indica el método que se va a invocar.</param>
      <param name="parameters" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects that indicate the parameters with which to invoke the method.">Matriz de objetos <see cref="T:System.CodeDom.CodeExpression" /> que indica los parámetros con los que se invocará al método.</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodInvokeExpression.Method">
      <summary vsli:raw="Gets or sets the method to invoke.">Obtiene o establece el método que se va a invocar.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeMethodReferenceExpression&quot; /&gt; that indicates the method to invoke.">Objeto <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> que indica el método que se va a invocar.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodInvokeExpression.Parameters">
      <summary vsli:raw="Gets the parameters to invoke the method with.">Obtiene los parámetros con los que invocará al método.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that indicates the parameters to invoke the method with.">Objeto <see cref="T:System.CodeDom.CodeExpressionCollection" /> que indica los parámetros con los que se va a invocar al método.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodReferenceExpression">
      <summary vsli:raw="Represents a reference to a method.">Representa una referencia a un método.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodReferenceExpression&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodReferenceExpression&quot; /&gt; class using the specified target object and method name.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> con el objeto de destino y el nombre de método especificados.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object to target.">Clase <see cref="T:System.CodeDom.CodeExpression" /> que indica el objeto al que se va a dirigir.</param>
      <param name="methodName" vsli:raw="The name of the method to call.">Nombre del método al que se va a llamar.</param>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeTypeReference[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodReferenceExpression&quot; /&gt; class using the specified target object, method name, and generic type arguments.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> con el objeto de destino, el nombre de método y los argumentos de tipo genérico especificados.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object to target.">Clase <see cref="T:System.CodeDom.CodeExpression" /> que indica el objeto al que se va a dirigir.</param>
      <param name="methodName" vsli:raw="The name of the method to call.">Nombre del método al que se va a llamar.</param>
      <param name="typeParameters" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; values that specify the &lt;see cref=&quot;P:System.CodeDom.CodeMethodReferenceExpression.TypeArguments&quot; /&gt; for this &lt;see cref=&quot;T:System.CodeDom.CodeMethodReferenceExpression&quot; /&gt;.">Matriz de valores de <see cref="T:System.CodeDom.CodeTypeReference" /> que especifican la propiedad <see cref="P:System.CodeDom.CodeMethodReferenceExpression.TypeArguments" /> de esta clase <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.MethodName">
      <summary vsli:raw="Gets or sets the name of the method to reference.">Obtiene o establece el nombre del método al que se hará referencia.</summary>
      <returns vsli:raw="The name of the method to reference.">Nombre del método al que se hace referencia.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.TargetObject">
      <summary vsli:raw="Gets or sets the expression that indicates the method to reference.">Obtiene o establece la expresión que indica el método al que se hará referencia.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that represents the method to reference.">Clase <see cref="T:System.CodeDom.CodeExpression" /> que representa el método al que se hará referencia.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.TypeArguments">
      <summary vsli:raw="Gets the type arguments for the current generic method reference expression.">Obtiene los argumentos de tipo para la expresión de referencia al método genérico actual.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; containing the type arguments for the current code &lt;see cref=&quot;T:System.CodeDom.CodeMethodReferenceExpression&quot; /&gt;.">Clase <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> que contiene los argumentos de tipo para el código de la clase <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> actual.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodReturnStatement">
      <summary vsli:raw="Represents a return value statement.">Representa una instrucción de valor devuelto.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReturnStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodReturnStatement&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeMethodReturnStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReturnStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodReturnStatement&quot; /&gt; class using the specified expression.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeMethodReturnStatement" /> utilizando la expresión especificada.</summary>
      <param name="expression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the return value.">
        <see cref="T:System.CodeDom.CodeExpression" /> que indica el valor devuelto.</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodReturnStatement.Expression">
      <summary vsli:raw="Gets or sets the return value.">Obtiene o establece el valor devuelto.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the value to return for the return statement, or &lt;see langword=&quot;null&quot; /&gt; if the statement is part of a subroutine.">
        <see cref="T:System.CodeDom.CodeExpression" /> que indica el valor devuelto por la instrucción return, o <see langword="null" /> si la instrucción forma parte de una subrutina.</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespace">
      <summary vsli:raw="Represents a namespace declaration.">Representa una declaración de espacio de nombres.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespace.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeNamespace" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespace.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; class using the specified name.">Inicializa una instancia nueva de la clase <see cref="T:System.CodeDom.CodeNamespace" /> usando el nombre especificado.</summary>
      <param name="name" vsli:raw="The name of the namespace being declared.">Nombre del espacio de nombres que se declara.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Comments">
      <summary vsli:raw="Gets the comments for the namespace.">Obtiene los comentarios para el espacio de nombres.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; that indicates the comments for the namespace.">Un objeto <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> que indica los comentarios para el espacio de nombres.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Imports">
      <summary vsli:raw="Gets the collection of namespace import directives used by the namespace.">Obtiene la colección de directivas de importación de espacios de nombres utilizadas por el espacio de nombres.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImportCollection&quot; /&gt; that indicates the namespace import directives used by the namespace.">Una colección <see cref="T:System.CodeDom.CodeNamespaceImportCollection" /> que indica las directivas de importación de espacios de nombres utilizadas por el espacio de nombres.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Name">
      <summary vsli:raw="Gets or sets the name of the namespace.">Obtiene o establece el nombre del espacio de nombres.</summary>
      <returns vsli:raw="The name of the namespace.">Nombre del espacio de nombres.</returns>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateComments">
      <summary vsli:raw="An event that will be raised the first time the &lt;see cref=&quot;P:System.CodeDom.CodeNamespace.Comments&quot; /&gt; collection is accessed.">Evento que se desencadena la primera vez que se tiene acceso a la colección <see cref="P:System.CodeDom.CodeNamespace.Comments" />.</summary>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateImports">
      <summary vsli:raw="An event that will be raised the first time the &lt;see cref=&quot;P:System.CodeDom.CodeNamespace.Imports&quot; /&gt; collection is accessed.">Evento que se desencadena la primera vez que se tiene acceso a la colección <see cref="P:System.CodeDom.CodeNamespace.Imports" />.</summary>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateTypes">
      <summary vsli:raw="An event that will be raised the first time the &lt;see cref=&quot;P:System.CodeDom.CodeNamespace.Types&quot; /&gt; collection is accessed.">Evento que se desencadena la primera vez que se tiene acceso a la colección <see cref="P:System.CodeDom.CodeNamespace.Types" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Types">
      <summary vsli:raw="Gets the collection of types that the namespace contains.">Obtiene la colección de tipos que contiene el espacio de nombres.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; that indicates the types contained in the namespace.">Una colección <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> que indica los tipos que se incluyen en el espacio de nombres.</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; objects.">Representa una colección de objetos <see cref="T:System.CodeDom.CodeNamespace" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeNamespaceCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor(System.CodeDom.CodeNamespace[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; class that contains the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; objects.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeNamespaceCollection" /> que contiene la matriz especificada de objetos <see cref="T:System.CodeDom.CodeNamespace" />.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; objects with which to initialize the collection.">Matriz de objetos <see cref="T:System.CodeDom.CodeNamespace" /> con los que se inicializará la colección.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more objects in the array are &lt;see langword=&quot;null&quot; /&gt;.">Uno o más objetos de la matriz son <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor(System.CodeDom.CodeNamespaceCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; class that contains the elements of the specified source collection.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeNamespaceCollection" /> que contiene los elementos de la colección de origen especificada.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; with which to initialize the collection.">El objeto <see cref="T:System.CodeDom.CodeNamespaceCollection" /> con que inicializar la colección.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Add(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; object to the collection.">Agrega a la colección el objeto <see cref="T:System.CodeDom.CodeNamespace" /> especificado.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; to add.">
        <see cref="T:System.CodeDom.CodeNamespace" /> que se va a agregar.</param>
      <returns vsli:raw="The index at which the new element was inserted.">Índice donde se insertó el nuevo elemento.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.AddRange(System.CodeDom.CodeNamespace[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; array to the end of the collection.">Copia los elementos de la matriz <see cref="T:System.CodeDom.CodeNamespace" /> especificada al final de la colección.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; that contains the objects to add to the collection.">Matriz de tipo <see cref="T:System.CodeDom.CodeNamespace" /> que contiene los objetos que se van a agregar a la colección.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.AddRange(System.CodeDom.CodeNamespaceCollection)">
      <summary vsli:raw="Adds the contents of the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; object to the end of the collection.">Agrega al final de la colección el contenido del objeto <see cref="T:System.CodeDom.CodeNamespaceCollection" /> especificado.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; that contains the objects to add to the collection.">
        <see cref="T:System.CodeDom.CodeNamespaceCollection" /> que contiene los objetos que se van a agregar a la colección.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Contains(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; object.">Obtiene un valor que indica si la colección contiene el objeto <see cref="T:System.CodeDom.CodeNamespace" /> especificado.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; to search for in the collection.">
        <see cref="T:System.CodeDom.CodeNamespace" /> que se va a buscar en la colección.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; is contained in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si la colección contiene <see cref="T:System.CodeDom.CodeNamespace" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.CopyTo(System.CodeDom.CodeNamespace[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance, starting at the specified index.">Copia los objetos de la colección en una instancia de <see cref="T:System.Array" /> unidimensional, empezando en el índice especificado.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los valores copiados de la colección.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">Índice de la matriz donde debe comenzar la inserción.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">La matriz de destino es multidimensional.
o bien
El número de elementos de la clase <see cref="T:System.CodeDom.CodeNamespaceCollection" /> es mayor que el espacio disponible entre el índice de la matriz de destino especificada por el parámetro <paramref name="index" /> y el final de la matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">El parámetro <paramref name="index" /> es menor que el índice mínimo de la matriz de destino.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.IndexOf(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; object in the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt;, if it exists in the collection.">Obtiene el índice del objeto <see cref="T:System.CodeDom.CodeNamespace" /> especificado en <see cref="T:System.CodeDom.CodeNamespaceCollection" /> si existe en la colección.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; to locate.">Clase <see cref="T:System.CodeDom.CodeNamespace" /> que se va a localizar.</param>
      <returns vsli:raw="The index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt;, if it is found, in the collection; otherwise, -1.">Índice de objeto <see cref="T:System.CodeDom.CodeNamespace" /> especificado, si se encuentra en la colección; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Insert(System.Int32,System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; object into the collection at the specified index.">Inserta el objeto <see cref="T:System.CodeDom.CodeNamespace" /> especificado en el índice especificado de la colección.</summary>
      <param name="index" vsli:raw="The zero-based index where the new item should be inserted.">Índice de base cero donde debe insertarse el elemento nuevo.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; to insert.">
        <see cref="T:System.CodeDom.CodeNamespace" /> que se va a insertar.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; object at the specified index in the collection.">Obtiene o establece el objeto <see cref="T:System.CodeDom.CodeNamespaceCollection" /> en el índice especificado de la colección.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">Índice de la colección a la que se obtendrá acceso.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; at each valid index.">Una clase <see cref="T:System.CodeDom.CodeNamespace" /> en cada índice válido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">El parámetro <paramref name="index" /> está fuera del intervalo válido de índices de la colección.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Remove(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; object from the collection.">Quita el objeto <see cref="T:System.CodeDom.CodeNamespace" /> especificado de la colección.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; to remove from the collection.">
        <see cref="T:System.CodeDom.CodeNamespace" /> que se va a quitar de la colección.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">No se encuentra el objeto especificado en la colección.</exception>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceImport">
      <summary vsli:raw="Represents a namespace import directive that indicates a namespace to use.">Representa una directiva de importación de espacio de nombres que indica el espacio de nombres que se va a utilizar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImport.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeNamespaceImport" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImport.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; class using the specified namespace to import.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeNamespaceImport" /> mediante el espacio de nombres especificado que se va a importar.</summary>
      <param name="nameSpace" vsli:raw="The name of the namespace to import.">Nombre del espacio de nombres que se va a importar.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImport.LinePragma">
      <summary vsli:raw="Gets or sets the line and file the statement occurs on.">Obtiene o establece la línea y archivo donde se produce la instrucción.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeLinePragma&quot; /&gt; that indicates the context of the statement.">
        <see cref="T:System.CodeDom.CodeLinePragma" /> que indica el contexto de la instrucción.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImport.Namespace">
      <summary vsli:raw="Gets or sets the namespace to import.">Obtiene o establece el espacio de nombres que se va a importar.</summary>
      <returns vsli:raw="The name of the namespace to import.">Nombre del espacio de nombres que se va a importar.</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceImportCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; objects.">Representa una colección de objetos <see cref="T:System.CodeDom.CodeNamespaceImport" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImportCollection&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeNamespaceImportCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.Add(System.CodeDom.CodeNamespaceImport)">
      <summary vsli:raw="Adds a &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; object to the collection.">Agrega un objeto <see cref="T:System.CodeDom.CodeNamespaceImport" /> a la colección.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; object to add to the collection.">Objeto <see cref="T:System.CodeDom.CodeNamespaceImport" /> que se va a agregar a la colección.</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.AddRange(System.CodeDom.CodeNamespaceImport[])">
      <summary vsli:raw="Adds a set of &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; objects to the collection.">Agrega un conjunto de objetos <see cref="T:System.CodeDom.CodeNamespaceImport" /> a la colección.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; that contains the objects to add to the collection.">Matriz de tipo <see cref="T:System.CodeDom.CodeNamespaceImport" /> que contiene los objetos que se van a agregar a la colección.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.Clear">
      <summary vsli:raw="Clears the collection of members.">Borra la colección de miembros.</summary>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.Count">
      <summary vsli:raw="Gets the number of namespaces in the collection.">Obtiene el número de espacios de nombres de la colección.</summary>
      <returns vsli:raw="The number of namespaces in the collection.">El número de espacios de nombres de la colección.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.GetEnumerator">
      <summary vsli:raw="Gets an enumerator that enumerates the collection members.">Obtiene un enumerador que enumera los miembros de la colección.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that indicates the collection members.">
        <see cref="T:System.Collections.IEnumerator" /> que indica los miembros de la colección.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; object at the specified index in the collection.">Obtiene o establece el objeto <see cref="T:System.CodeDom.CodeNamespaceImport" /> en el índice especificado de la colección.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">Índice de la colección a la que se obtendrá acceso.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; object at each valid index.">Objeto <see cref="T:System.CodeDom.CodeNamespaceImport" /> que se encuentra en cada índice válido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">El parámetro <paramref name="index" /> está fuera del intervalo válido de índices de la colección.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">Copia los elementos de <see cref="T:System.Collections.ICollection" /> en <see cref="T:System.Array" />, empezando por un índice determinado de <see cref="T:System.Array" />.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The array must have zero-based indexing.">Matriz <see cref="T:System.Array" /> unidimensional que constituye el destino de los elementos copiados desde la colección <see cref="T:System.Collections.ICollection" />. La matriz debe tener una indización de base cero.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the number of elements contained in the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Obtiene el número de elementos incluidos en <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Número de elementos contenidos en <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Obtiene un valor que indica si el acceso a la interfaz <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;. This property always returns &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos); de lo contrario, es <see langword="false" />. Esta propiedad devuelve siempre <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Obtiene un objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.  This property always returns &lt;see langword=&quot;null&quot; /&gt;.">Objeto que se puede utilizar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.  Esta propiedad devuelve siempre <see langword="null" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that can iterate through a collection.">Devuelve un enumerador que puede recorrer en iteración una colección.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">
        <see cref="T:System.Collections.IEnumerator" /> que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an object to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Agrega un objeto a <see cref="T:System.Collections.IList" />.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to add to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Object" /> que se va a agregar a <see cref="T:System.Collections.IList" />.</param>
      <returns vsli:raw="The position at which the new element was inserted.">Posición donde se insertó el nuevo elemento.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Quita todos los elementos de <see cref="T:System.Collections.IList" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; contains a specific value.">Determina si <see cref="T:System.Collections.IList" /> contiene un valor específico.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Objeto <see cref="T:System.Object" /> que se va a buscar en la interfaz <see cref="T:System.Collections.IList" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value is in the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el valor está en la lista; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Determina el índice de un elemento específico de <see cref="T:System.Collections.IList" />.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Objeto <see cref="T:System.Object" /> que se va a buscar en la interfaz <see cref="T:System.Collections.IList" />.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if it is found in the list; otherwise, -1.">Índice de <paramref name="value" /> si se encuentra en la lista; en caso contrario, es -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; at the specified position.">Inserta un elemento en <see cref="T:System.Collections.IList" />, en la posición especificada.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">Índice basado en cero en el que debe insertarse <paramref name="value" />.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to insert into the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Objeto <see cref="T:System.Object" /> que se va a insertar en <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size.">Obtiene un valor que indica si la interfaz <see cref="T:System.Collections.IList" /> tiene un tamaño fijo.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This property always returns &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si la interfaz <see cref="T:System.Collections.IList" /> tiene un tamaño fijo; de lo contrario, es <see langword="false" />.  Esta propiedad devuelve siempre <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; is read-only.">Obtiene un valor que indica si <see cref="T:System.Collections.IList" /> es de solo lectura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This property always returns &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si la interfaz <see cref="T:System.Collections.IList" /> es de solo lectura; de lo contrario, es <see langword="false" />.  Esta propiedad devuelve siempre <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the element at the specified index.">Obtiene o establece el elemento en el índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get or set.">Índice de base cero del elemento que se va a obtener o establecer.</param>
      <returns vsli:raw="The element at the specified index.">Elemento en el índice especificado.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Quita la primera aparición de un objeto específico de la interfaz <see cref="T:System.Collections.IList" />.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to remove from the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Object" /> que se va a quitar de <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the element at the specified index of the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Quita el elemento situado en el índice especificado de <see cref="T:System.Collections.IList" />.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to remove.">Índice de base cero del elemento que se va a quitar.</param>
    </member>
    <member name="T:System.CodeDom.CodeObject">
      <summary vsli:raw="Provides a common base class for most Code Document Object Model (CodeDOM) objects.">Proporciona una clase base común para la mayoría de los objetos CodeDOM (Code Document Object Model).</summary>
    </member>
    <member name="M:System.CodeDom.CodeObject.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeObject&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeObject" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeObject.UserData">
      <summary vsli:raw="Gets the user-definable data for the current object.">Obtiene los datos definibles por el usuario para el objeto actual.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; containing user data for the current object.">Una interfaz <see cref="T:System.Collections.IDictionary" /> que contiene datos de usuario para el objeto actual.</returns>
    </member>
    <member name="T:System.CodeDom.CodeObjectCreateExpression">
      <summary vsli:raw="Represents an expression that creates a new instance of a type.">Representa una expresión que crea una nueva instancia de un tipo.</summary>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeObjectCreateExpression&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeObjectCreateExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeObjectCreateExpression&quot; /&gt; class using the specified type and parameters.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> con el tipo y los parámetros especificados.</summary>
      <param name="createType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the object to create.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo de datos del objeto que se va a crear.</param>
      <param name="parameters" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects that indicates the parameters to use to create the object.">Matriz de objetos <see cref="T:System.CodeDom.CodeExpression" /> que indica los parámetros que se utilizarán para crear el objeto.</param>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeObjectCreateExpression&quot; /&gt; class using the specified type and parameters.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> con el tipo y los parámetros especificados.</summary>
      <param name="createType" vsli:raw="The name of the data type of object to create.">Nombre del tipo de datos del objeto que se va a crear.</param>
      <param name="parameters" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects that indicates the parameters to use to create the object.">Matriz de objetos <see cref="T:System.CodeDom.CodeExpression" /> que indica los parámetros que se utilizarán para crear el objeto.</param>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeObjectCreateExpression&quot; /&gt; class using the specified type and parameters.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> con el tipo y los parámetros especificados.</summary>
      <param name="createType" vsli:raw="The data type of the object to create.">Tipo de datos del objeto que se va a crear.</param>
      <param name="parameters" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects that indicates the parameters to use to create the object.">Matriz de objetos <see cref="T:System.CodeDom.CodeExpression" /> que indica los parámetros que se utilizarán para crear el objeto.</param>
    </member>
    <member name="P:System.CodeDom.CodeObjectCreateExpression.CreateType">
      <summary vsli:raw="Gets or sets the data type of the object to create.">Obtiene o establece el tipo de datos del objeto que se va a crear.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to the data type of the object to create.">Referencia <see cref="T:System.CodeDom.CodeTypeReference" /> al tipo de datos del objeto que se va a crear.</returns>
    </member>
    <member name="P:System.CodeDom.CodeObjectCreateExpression.Parameters">
      <summary vsli:raw="Gets or sets the parameters to use in creating the object.">Obtiene o establece los parámetros que se utilizan para crear el objeto.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that indicates the parameters to use when creating the object.">
        <see cref="T:System.CodeDom.CodeExpressionCollection" /> que indica los parámetros con los que se va a crear el objeto.</returns>
    </member>
    <member name="T:System.CodeDom.CodeParameterDeclarationExpression">
      <summary vsli:raw="Represents a parameter declaration for a method, property, or constructor.">Representa una declaración de parámetros para un método, una propiedad o un constructor.</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; class using the specified parameter type and name.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> con el tipo y el nombre de parámetro especificados.</summary>
      <param name="type" vsli:raw="An object that indicates the type of the parameter to declare.">Objeto que indica el tipo del parámetro que se va a declarar.</param>
      <param name="name" vsli:raw="The name of the parameter to declare.">Nombre del parámetro que se va a declarar.</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; class using the specified parameter type and name.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> con el tipo y el nombre de parámetro especificados.</summary>
      <param name="type" vsli:raw="The type of the parameter to declare.">Tipo de parámetro que se va a declarar.</param>
      <param name="name" vsli:raw="The name of the parameter to declare.">Nombre del parámetro que se va a declarar.</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.Type,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; class using the specified parameter type and name.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> con el tipo y el nombre de parámetro especificados.</summary>
      <param name="type" vsli:raw="The type of the parameter to declare.">Tipo de parámetro que se va a declarar.</param>
      <param name="name" vsli:raw="The name of the parameter to declare.">Nombre del parámetro que se va a declarar.</param>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.CustomAttributes">
      <summary vsli:raw="Gets or sets the custom attributes for the parameter declaration.">Obtiene o establece los atributos personalizados de la declaración de parámetros.</summary>
      <returns vsli:raw="An object that indicates the custom attributes.">Objeto que indica los atributos personalizados.</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Direction">
      <summary vsli:raw="Gets or sets the direction of the field.">Obtiene o establece la dirección del campo.</summary>
      <returns vsli:raw="An object that indicates the direction of the field.">Un objeto que indica la dirección del campo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Name">
      <summary vsli:raw="Gets or sets the name of the parameter.">Obtiene o establece el nombre del parámetro.</summary>
      <returns vsli:raw="The name of the parameter.">Nombre del parámetro.</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Type">
      <summary vsli:raw="Gets or sets the type of the parameter.">Obtiene o establece el tipo del parámetro.</summary>
      <returns vsli:raw="The type of the parameter.">Tipo del parámetro.</returns>
    </member>
    <member name="T:System.CodeDom.CodeParameterDeclarationExpressionCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; objects.">Representa una colección de objetos <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor(System.CodeDom.CodeParameterDeclarationExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; objects.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> que contiene la matriz especificada de objetos <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; objects with which to initialize the collection.">Matriz de objetos <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> con los que se inicializará la colección.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="one or more objects in the array are &lt;see langword=&quot;null&quot; /&gt;.">uno o más objetos de la matriz son <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; class containing the elements of the specified source collection.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> que contiene los elementos de la colección de origen especificada.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; with which to initialize the collection.">Objeto <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> con el que se inicializa la colección.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">El valor de <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Add(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; to the collection.">Agrega el <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> especificado a la colección.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; to add.">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> que se va a agregar.</param>
      <returns vsli:raw="The index at which the new element was inserted.">Índice donde se insertó el nuevo elemento.</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.AddRange(System.CodeDom.CodeParameterDeclarationExpression[])">
      <summary vsli:raw="Copies the elements of the specified array to the end of the collection.">Copia los elementos de la matriz especificada al final de la colección.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; containing the objects to add to the collection.">Matriz de tipo <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> que contiene los objetos que se agregarán a la colección.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.AddRange(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary vsli:raw="Adds the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; to the end of the collection.">Agrega el contenido de otro objeto <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> al final de la colección.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; containing the objects to add to the collection.">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> que contiene los objetos que se agregarán a la colección.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Contains(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary vsli:raw="Gets a value indicating whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt;.">Obtiene un valor que indica si la colección contiene el objeto <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> especificado.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; to search for in the collection.">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> para buscar en la colección.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la colección contiene el objeto especificado; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.CopyTo(System.CodeDom.CodeParameterDeclarationExpression[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance beginning at the specified index.">Copia los objetos de colección en una instancia <see cref="T:System.Array" /> unidimensional, comenzando a partir del índice especificado.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los valores copiados de la colección.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">Índice de la matriz donde debe comenzar la inserción.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">La matriz de destino es multidimensional.
o bien
El número de elementos de la clase <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> es mayor que el espacio disponible entre el índice de la matriz de destino especificada por el parámetro <paramref name="index" /> y el final de la matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">El parámetro <paramref name="index" /> es menor que el índice mínimo de la matriz de destino.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.IndexOf(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary vsli:raw="Gets the index in the collection of the specified &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt;, if it exists in the collection.">Obtiene el índice de la colección del objeto <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> especificado, si existe en la colección.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; to locate in the collection.">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> que se va a buscar en la colección.</param>
      <returns vsli:raw="The index in the collection of the specified object, if found; otherwise, -1.">Índice de la colección a la que corresponde el objeto especificado, si se encuentra; de lo contrario, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Insert(System.Int32,System.CodeDom.CodeParameterDeclarationExpression)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; into the collection at the specified index.">Inserta la clase <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> especificada en el índice especificado de la colección.</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">Índice de base cero donde debe insertarse el objeto especificado.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; to insert.">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> que se va a insertar.</param>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpressionCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; at the specified index in the collection.">Obtiene o establece <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> en el índice especificado de la colección.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">Índice de la colección a la que se obtendrá acceso.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; at each valid index.">Una clase <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> en cada índice válido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">El parámetro <paramref name="index" /> está fuera del intervalo válido de índices de la colección.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Remove(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; from the collection.">Quita el objeto <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> especificado de la colección.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; to remove from the collection.">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> que se va a quitar de la colección.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">No se encuentra el objeto especificado en la colección.</exception>
    </member>
    <member name="T:System.CodeDom.CodePrimitiveExpression">
      <summary vsli:raw="Represents a primitive data type value.">Representa un valor de tipos de datos primitivos.</summary>
    </member>
    <member name="M:System.CodeDom.CodePrimitiveExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodePrimitiveExpression&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodePrimitiveExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodePrimitiveExpression.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodePrimitiveExpression&quot; /&gt; class using the specified object.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodePrimitiveExpression" /> usando el objeto especificado.</summary>
      <param name="value" vsli:raw="The object to represent.">Objeto que se va a representar.</param>
    </member>
    <member name="P:System.CodeDom.CodePrimitiveExpression.Value">
      <summary vsli:raw="Gets or sets the primitive data type to represent.">Obtiene o establece el tipo de datos primitivo que se va a representar.</summary>
      <returns vsli:raw="The primitive data type instance to represent the value of.">Instancia de tipo de datos primitivo cuyo valor se representa.</returns>
    </member>
    <member name="T:System.CodeDom.CodePropertyReferenceExpression">
      <summary vsli:raw="Represents a reference to the value of a property.">Representa una referencia al valor de una propiedad.</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertyReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodePropertyReferenceExpression&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodePropertyReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertyReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodePropertyReferenceExpression&quot; /&gt; class using the specified target object and property name.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodePropertyReferenceExpression" /> con el objeto de destino y el nombre de propiedad especificados.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the property to reference.">
        <see cref="T:System.CodeDom.CodeExpression" /> que indica el objeto que contiene la propiedad a la que se hace referencia.</param>
      <param name="propertyName" vsli:raw="The name of the property to reference.">Nombre de la propiedad a la que se hará referencia.</param>
    </member>
    <member name="P:System.CodeDom.CodePropertyReferenceExpression.PropertyName">
      <summary vsli:raw="Gets or sets the name of the property to reference.">Obtiene o establece el nombre de la propiedad a la que se hará referencia.</summary>
      <returns vsli:raw="The name of the property to reference.">Nombre de la propiedad a la que se hará referencia.</returns>
    </member>
    <member name="P:System.CodeDom.CodePropertyReferenceExpression.TargetObject">
      <summary vsli:raw="Gets or sets the object that contains the property to reference.">Obtiene o establece el objeto que contiene la propiedad a la que se hace referencia.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the property to reference.">
        <see cref="T:System.CodeDom.CodeExpression" /> que indica el objeto que contiene la propiedad a la que se hace referencia.</returns>
    </member>
    <member name="T:System.CodeDom.CodePropertySetValueReferenceExpression">
      <summary vsli:raw="Represents the value argument of a property set method call within a property set method.">Representa el argumento de valor de una llamada al método set de una propiedad dentro de un método set de una propiedad.</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertySetValueReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodePropertySetValueReferenceExpression&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodePropertySetValueReferenceExpression" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeRegionDirective">
      <summary vsli:raw="Specifies the name and mode for a code region.">Especifica el nombre y el modo de una región de código.</summary>
    </member>
    <member name="M:System.CodeDom.CodeRegionDirective.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeRegionDirective&quot; /&gt; class with default values.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeRegionDirective" /> con valores predeterminados.</summary>
    </member>
    <member name="M:System.CodeDom.CodeRegionDirective.#ctor(System.CodeDom.CodeRegionMode,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeRegionDirective&quot; /&gt; class, specifying its mode and name.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeRegionDirective" />, especificando su modo y su nombre.</summary>
      <param name="regionMode" vsli:raw="One of the &lt;see cref=&quot;T:System.CodeDom.CodeRegionMode&quot; /&gt; values.">Uno de los valores de <see cref="T:System.CodeDom.CodeRegionMode" />.</param>
      <param name="regionText" vsli:raw="The name for the region.">Nombre de la región.</param>
    </member>
    <member name="P:System.CodeDom.CodeRegionDirective.RegionMode">
      <summary vsli:raw="Gets or sets the mode for the region directive.">Obtiene o establece el modo de la directiva de región.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.CodeDom.CodeRegionMode&quot; /&gt; values. The default is &lt;see cref=&quot;F:System.CodeDom.CodeRegionMode.None&quot; /&gt;.">Uno de los valores de <see cref="T:System.CodeDom.CodeRegionMode" />. De manera predeterminada, es <see cref="F:System.CodeDom.CodeRegionMode.None" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeRegionDirective.RegionText">
      <summary vsli:raw="Gets or sets the name of the region.">Obtiene o establece el nombre de la región.</summary>
      <returns vsli:raw="The name of the region.">El nombre de la región.</returns>
    </member>
    <member name="T:System.CodeDom.CodeRegionMode">
      <summary vsli:raw="Specifies the start or end of a code region.">Especifica el inicio o el final de una región de código.</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.End">
      <summary vsli:raw="End of the region.">Final de la región.</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.None">
      <summary vsli:raw="Not used.">No se utiliza.</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.Start">
      <summary vsli:raw="Start of the region.">Inicio de la región.</summary>
    </member>
    <member name="T:System.CodeDom.CodeRemoveEventStatement">
      <summary vsli:raw="Represents a statement that removes an event handler.">Representa una instrucción que quita un controlador de eventos.</summary>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeRemoveEventStatement&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeRemoveEventStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor(System.CodeDom.CodeEventReferenceExpression,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeRemoveEventStatement&quot; /&gt; class with the specified event and event handler.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeRemoveEventStatement" /> con el evento y el controlador de eventos especificados.</summary>
      <param name="eventRef" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeEventReferenceExpression&quot; /&gt; that indicates the event to detach the event handler from.">Un objeto <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> que indica el evento del que se va a desasociar el controlador de eventos.</param>
      <param name="listener" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the event handler to remove.">Un objeto <see cref="T:System.CodeDom.CodeExpression" /> que indica el controlador de eventos que se va a quitar.</param>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeRemoveEventStatement&quot; /&gt; class using the specified target object, event name, and event handler.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeRemoveEventStatement" /> con el objeto de destino, el nombre de evento y el controlador de eventos especificados.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the event.">Objeto <see cref="T:System.CodeDom.CodeExpression" /> que indica el objeto que contiene el evento.</param>
      <param name="eventName" vsli:raw="The name of the event.">Nombre del evento.</param>
      <param name="listener" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the event handler to remove.">Un objeto <see cref="T:System.CodeDom.CodeExpression" /> que indica el controlador de eventos que se va a quitar.</param>
    </member>
    <member name="P:System.CodeDom.CodeRemoveEventStatement.Event">
      <summary vsli:raw="Gets or sets the event to remove a listener from.">Obtiene o establece el evento del que se va a quitar un agente de escucha.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeEventReferenceExpression&quot; /&gt; that indicates the event to remove a listener from.">Un objeto <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> que indica el evento del que se va a quitar un agente de escucha.</returns>
    </member>
    <member name="P:System.CodeDom.CodeRemoveEventStatement.Listener">
      <summary vsli:raw="Gets or sets the event handler to remove.">Obtiene o establece el controlador de eventos que se va a quitar.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the event handler to remove.">Un objeto <see cref="T:System.CodeDom.CodeExpression" /> que indica el controlador de eventos que se va a quitar.</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetCompileUnit">
      <summary vsli:raw="Represents a literal code fragment that can be compiled.">Representa un fragmento de código literal compilable.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetCompileUnit.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetCompileUnit&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeSnippetCompileUnit" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetCompileUnit.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetCompileUnit&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeSnippetCompileUnit" />.</summary>
      <param name="value" vsli:raw="The literal code fragment to represent.">Fragmento de código literal que se va a representar.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetCompileUnit.LinePragma">
      <summary vsli:raw="Gets or sets the line and file information about where the code is located in a source code document.">Obtiene o establece la información de línea o de archivo relativa a la ubicación del código en un documento en código fuente.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeLinePragma&quot; /&gt; that indicates the position of the code fragment.">
        <see cref="T:System.CodeDom.CodeLinePragma" /> que indica la posición del fragmento de código.</returns>
    </member>
    <member name="P:System.CodeDom.CodeSnippetCompileUnit.Value">
      <summary vsli:raw="Gets or sets the literal code fragment to represent.">Obtiene o establece el fragmento de código literal que se va a representar.</summary>
      <returns vsli:raw="The literal code fragment.">Fragmento de código literal.</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetExpression">
      <summary vsli:raw="Represents a literal expression.">Representa una expresión literal.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetExpression&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeSnippetExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetExpression.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetExpression&quot; /&gt; class using the specified literal expression.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeSnippetExpression" /> utilizando la expresión literal especificada.</summary>
      <param name="value" vsli:raw="The literal expression to represent.">Expresión literal que se va a representar.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetExpression.Value">
      <summary vsli:raw="Gets or sets the literal string of code.">Obtiene o establece la cadena de código literal.</summary>
      <returns vsli:raw="The literal string.">Cadena literal.</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetStatement">
      <summary vsli:raw="Represents a statement using a literal code fragment.">Representa una instrucción utilizando un fragmento de código literal.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetStatement&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeSnippetStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetStatement.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetStatement&quot; /&gt; class using the specified code fragment.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeSnippetStatement" /> mediante el fragmento de código especificado.</summary>
      <param name="value" vsli:raw="The literal code fragment of the statement to represent.">Fragmento de código literal de la instrucción que se va a representar.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetStatement.Value">
      <summary vsli:raw="Gets or sets the literal code fragment statement.">Obtiene o establece la instrucción de fragmento de código literal.</summary>
      <returns vsli:raw="The literal code fragment statement.">Instrucción de fragmento de código literal.</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetTypeMember">
      <summary vsli:raw="Represents a member of a type using a literal code fragment.">Representa un miembro de un tipo con un fragmento de código literal.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetTypeMember.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetTypeMember&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeSnippetTypeMember" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetTypeMember.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetTypeMember&quot; /&gt; class using the specified text.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeSnippetTypeMember" /> con el texto especificado.</summary>
      <param name="text" vsli:raw="The literal code fragment for the type member.">Fragmento de código literal del miembro de tipo.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetTypeMember.Text">
      <summary vsli:raw="Gets or sets the literal code fragment for the type member.">Obtiene o establece el fragmento de código literal del miembro de tipo.</summary>
      <returns vsli:raw="The literal code fragment for the type member.">Fragmento de código literal del miembro de tipo.</returns>
    </member>
    <member name="T:System.CodeDom.CodeStatement">
      <summary vsli:raw="Represents the &lt;see langword=&quot;abstract&quot; /&gt; base class from which all code statements derive.">Representa la clase base <see langword="abstract" /> de la que derivan todas las instrucciones de código.</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeStatement" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeStatement.EndDirectives">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object that contains end directives.">Obtiene un objeto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> que contiene las directivas End.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing end directives.">Un objeto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> que contiene las directivas End.</returns>
    </member>
    <member name="P:System.CodeDom.CodeStatement.LinePragma">
      <summary vsli:raw="Gets or sets the line on which the code statement occurs.">Obtiene o establece la línea en la que se ejecuta la instrucción de código.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeLinePragma&quot; /&gt; object that indicates the context of the code statement.">Un objeto <see cref="T:System.CodeDom.CodeLinePragma" /> que indica el contexto de la instrucción de código.</returns>
    </member>
    <member name="P:System.CodeDom.CodeStatement.StartDirectives">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object that contains start directives.">Obtiene un objeto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> que contiene las directivas Start.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing start directives.">Un objeto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> que contiene las directivas Start.</returns>
    </member>
    <member name="T:System.CodeDom.CodeStatementCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects.">Representa una colección de objetos <see cref="T:System.CodeDom.CodeStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeStatementCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor(System.CodeDom.CodeStatement[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; class that contains the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeStatementCollection" /> que contiene la matriz especificada de objetos <see cref="T:System.CodeDom.CodeStatement" />.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects with which to initialize the collection.">Matriz de objetos <see cref="T:System.CodeDom.CodeStatement" /> con los que se inicializará la colección.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor(System.CodeDom.CodeStatementCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; class that contains the elements of the specified source collection.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeStatementCollection" /> que contiene los elementos de la colección de origen especificada.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; object with which to initialize the collection.">Objeto <see cref="T:System.CodeDom.CodeStatementCollection" /> con el que se inicializa la colección.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Add(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to the collection.">Agrega a la colección el objeto <see cref="T:System.CodeDom.CodeExpression" /> especificado.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to add.">Objeto <see cref="T:System.CodeDom.CodeExpression" /> que se agrega.</param>
      <returns vsli:raw="The index at which the new element was inserted.">Índice donde se insertó el nuevo elemento.</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Add(System.CodeDom.CodeStatement)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object to the collection.">Agrega a la colección el objeto <see cref="T:System.CodeDom.CodeStatement" /> especificado.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object to add.">Objeto <see cref="T:System.CodeDom.CodeStatement" /> que se agrega.</param>
      <returns vsli:raw="The index at which the new element was inserted.">Índice donde se insertó el nuevo elemento.</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.AddRange(System.CodeDom.CodeStatement[])">
      <summary vsli:raw="Adds a set of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects to the collection.">Agrega un conjunto de objetos <see cref="T:System.CodeDom.CodeStatement" /> a la colección.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects to add to the collection.">Matriz de objetos <see cref="T:System.CodeDom.CodeStatement" /> que se agregará a la colección.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.AddRange(System.CodeDom.CodeStatementCollection)">
      <summary vsli:raw="Adds the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; object to the end of the collection.">Agrega el contenido de otro objeto <see cref="T:System.CodeDom.CodeStatementCollection" /> al final de la colección.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; object that contains the objects to add to the collection.">Objeto <see cref="T:System.CodeDom.CodeStatementCollection" /> que contiene los objetos que se van a agregar a la colección.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Contains(System.CodeDom.CodeStatement)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object.">Obtiene un valor que indica si la colección contiene el objeto <see cref="T:System.CodeDom.CodeStatement" /> especificado.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object to search for in the collection.">Objeto <see cref="T:System.CodeDom.CodeStatement" /> que se va a buscar en la colección.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la colección contiene el objeto especificado; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.CopyTo(System.CodeDom.CodeStatement[],System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; object to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance, starting at the specified index.">Copia los elementos del objeto <see cref="T:System.CodeDom.CodeStatementCollection" /> en una instancia de <see cref="T:System.Array" /> unidimensional, empezando en el índice especificado.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los valores copiados de la colección.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">Índice de la matriz donde debe comenzar la inserción.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">La matriz de destino es multidimensional.
O bien
El número de elementos de la clase <see cref="T:System.CodeDom.CodeStatementCollection" /> es mayor que el espacio disponible entre el índice de la matriz de destino especificada por el parámetro <paramref name="index" /> y el final de la matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">El parámetro <paramref name="index" /> es menor que el índice mínimo de la matriz de destino.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.IndexOf(System.CodeDom.CodeStatement)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object in the &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt;, if it exists in the collection.">Obtiene el índice del objeto <see cref="T:System.CodeDom.CodeStatement" /> especificado en <see cref="T:System.CodeDom.CodeStatementCollection" /> si existe en la colección.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; to locate in the collection.">
        <see cref="T:System.CodeDom.CodeStatement" /> que se va a buscar en la colección.</param>
      <returns vsli:raw="The index of the specified object, if it is found, in the collection; otherwise, -1.">Índice del objeto especificado de la colección, si se encuentra; de lo contrario, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Insert(System.Int32,System.CodeDom.CodeStatement)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object into the collection at the specified index.">Inserta el objeto <see cref="T:System.CodeDom.CodeStatement" /> especificado en el índice especificado de la colección.</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">Índice de base cero donde debe insertarse el objeto especificado.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object to insert.">Objeto <see cref="T:System.CodeDom.CodeStatement" /> que se va a insertar.</param>
    </member>
    <member name="P:System.CodeDom.CodeStatementCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object at the specified index in the collection.">Obtiene o establece el objeto <see cref="T:System.CodeDom.CodeStatement" /> en el índice especificado de la colección.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">Índice de la colección a la que se obtendrá acceso.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; at each valid index.">Una clase <see cref="T:System.CodeDom.CodeStatement" /> en cada índice válido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">El parámetro <paramref name="index" /> está fuera del intervalo válido de índices de la colección.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Remove(System.CodeDom.CodeStatement)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object from the collection.">Quita el objeto <see cref="T:System.CodeDom.CodeStatement" /> especificado de la colección.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; to remove from the collection.">
        <see cref="T:System.CodeDom.CodeStatement" /> que se va a quitar de la colección.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">No se encuentra el objeto especificado en la colección.</exception>
    </member>
    <member name="T:System.CodeDom.CodeThisReferenceExpression">
      <summary vsli:raw="Represents a reference to the current local class instance.">Representa una referencia a la instancia de clase local actual.</summary>
    </member>
    <member name="M:System.CodeDom.CodeThisReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeThisReferenceExpression&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeThisReferenceExpression" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeThrowExceptionStatement">
      <summary vsli:raw="Represents a statement that throws an exception.">Representa una instrucción que produce una excepción.</summary>
    </member>
    <member name="M:System.CodeDom.CodeThrowExceptionStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeThrowExceptionStatement&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeThrowExceptionStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeThrowExceptionStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeThrowExceptionStatement&quot; /&gt; class with the specified exception type instance.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeThrowExceptionStatement" /> con la instancia del tipo de excepción especificada.</summary>
      <param name="toThrow" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the exception to throw.">Objeto <see cref="T:System.CodeDom.CodeExpression" /> que indica la excepción que se va a producir.</param>
    </member>
    <member name="P:System.CodeDom.CodeThrowExceptionStatement.ToThrow">
      <summary vsli:raw="Gets or sets the exception to throw.">Obtiene o establece la excepción que se va a producir.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; representing an instance of the exception to throw.">Objeto <see cref="T:System.CodeDom.CodeExpression" /> que representa una instancia de la excepción que se va a producir.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTryCatchFinallyStatement">
      <summary vsli:raw="Represents a &lt;see langword=&quot;try&quot; /&gt; block with any number of &lt;see langword=&quot;catch&quot; /&gt; clauses and, optionally, a &lt;see langword=&quot;finally&quot; /&gt; block.">Representa un bloque <see langword="try" /> con cualquier número de cláusulas <see langword="catch" /> y, opcionalmente, un bloque <see langword="finally" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTryCatchFinallyStatement&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor(System.CodeDom.CodeStatement[],System.CodeDom.CodeCatchClause[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTryCatchFinallyStatement&quot; /&gt; class using the specified statements for try and catch clauses.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" /> con las instrucciones especificadas para las cláusulas try y catch.</summary>
      <param name="tryStatements" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects that indicate the statements to try.">Matriz de objetos <see cref="T:System.CodeDom.CodeStatement" /> que indican las instrucciones que se procesarán mediante un bloque try.</param>
      <param name="catchClauses" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; objects that indicate the clauses to catch.">Matriz de objetos <see cref="T:System.CodeDom.CodeCatchClause" /> que indican las instrucciones que se procesarán mediante un bloque catch.</param>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor(System.CodeDom.CodeStatement[],System.CodeDom.CodeCatchClause[],System.CodeDom.CodeStatement[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTryCatchFinallyStatement&quot; /&gt; class using the specified statements for try, catch clauses, and finally statements.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" /> con las instrucciones especificadas para las instrucciones try, catch y finally.</summary>
      <param name="tryStatements" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects that indicate the statements to try.">Matriz de objetos <see cref="T:System.CodeDom.CodeStatement" /> que indican las instrucciones que se procesarán mediante un bloque try.</param>
      <param name="catchClauses" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; objects that indicate the clauses to catch.">Matriz de objetos <see cref="T:System.CodeDom.CodeCatchClause" /> que indican las instrucciones que se procesarán mediante un bloque catch.</param>
      <param name="finallyStatements" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects that indicate the finally statements to use.">Matriz de objetos <see cref="T:System.CodeDom.CodeStatement" /> que indican las instrucciones finally que se utilizarán.</param>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.CatchClauses">
      <summary vsli:raw="Gets the catch clauses to use.">Obtiene las cláusulas catch que se deben utilizar.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; that indicates the catch clauses to use.">Una clase <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> que indica las cláusulas catch que se van a utilizar.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.FinallyStatements">
      <summary vsli:raw="Gets the finally statements to use.">Obtiene las instrucciones finally que se van a utilizar.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; that indicates the finally statements.">Una clase <see cref="T:System.CodeDom.CodeStatementCollection" /> que indica las instrucciones finally.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.TryStatements">
      <summary vsli:raw="Gets the statements to try.">Obtiene las instrucciones try.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; that indicates the statements to try.">Una clase <see cref="T:System.CodeDom.CodeStatementCollection" /> que indica las instrucciones que se van a procesar mediante un bloque try.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeConstructor">
      <summary vsli:raw="Represents a static constructor for a class.">Representa un constructor estático de una clase.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeConstructor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeConstructor&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeConstructor" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeTypeDeclaration">
      <summary vsli:raw="Represents a type declaration for a class, structure, interface, or enumeration.">Representa una declaración de tipos para una clase, estructura, interfaz o enumeración.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclaration.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeDeclaration" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclaration.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; class with the specified name.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeDeclaration" /> con el nombre especificado.</summary>
      <param name="name" vsli:raw="The name for the new type.">Nombre del nuevo tipo.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
      <summary vsli:raw="Gets the base types of the type.">Obtiene los tipos base del tipo.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; object that indicates the base types of the type.">Objeto <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> que indica los tipos base del tipo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsClass">
      <summary vsli:raw="Gets or sets a value indicating whether the type is a class or reference type.">Obtiene o establece un valor que indica si el tipo es una clase o un tipo de referencia.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is a class or reference type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el tipo es una clase o un tipo de referencia; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsEnum">
      <summary vsli:raw="Gets or sets a value indicating whether the type is an enumeration.">Obtiene o establece un valor que indica si el tipo es una enumeración.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is an enumeration; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el tipo es una enumeración; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsInterface">
      <summary vsli:raw="Gets or sets a value indicating whether the type is an interface.">Obtiene o establece un valor que indica si el tipo es una interfaz.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is an interface; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el tipo es una interfaz; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
      <summary vsli:raw="Gets or sets a value indicating whether the type declaration is complete or partial.">Obtiene o establece un valor que indica si la declaración de tipos es completa o parcial.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the class or structure declaration is a partial representation of the implementation; &lt;see langword=&quot;false&quot; /&gt; if the declaration is a complete implementation of the class or structure. The default is &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si la declaración de clase o de estructura es una representación parcial de la implementación; es <see langword="false" /> si la declaración es una implementación completa de la clase o la estructura. De manera predeterminada, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsStruct">
      <summary vsli:raw="Gets or sets a value indicating whether the type is a value type (struct).">Obtiene o establece un valor que indica si el tipo es un tipo de valor (struct).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is a value type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el tipo es un tipo de valor; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.Members">
      <summary vsli:raw="Gets the collection of class members for the represented type.">Obtiene la colección de miembros de clase del tipo representado.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; object that indicates the class members.">Objeto <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> que indica los miembros de la clase.</returns>
    </member>
    <member name="E:System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes">
      <summary vsli:raw="Occurs when the &lt;see cref=&quot;P:System.CodeDom.CodeTypeDeclaration.BaseTypes&quot; /&gt; collection is accessed for the first time.">Se produce cuando se obtiene acceso a la colección <see cref="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" /> por primera vez.</summary>
    </member>
    <member name="E:System.CodeDom.CodeTypeDeclaration.PopulateMembers">
      <summary vsli:raw="Occurs when the &lt;see cref=&quot;P:System.CodeDom.CodeTypeDeclaration.Members&quot; /&gt; collection is accessed for the first time.">Se produce cuando se obtiene acceso a la colección <see cref="P:System.CodeDom.CodeTypeDeclaration.Members" /> por primera vez.</summary>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
      <summary vsli:raw="Gets or sets the attributes of the type.">Obtiene o establece los atributos del tipo.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.TypeAttributes&quot; /&gt; object that indicates the attributes of the type.">Objeto <see cref="T:System.Reflection.TypeAttributes" /> que indica los atributos del tipo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.TypeParameters">
      <summary vsli:raw="Gets the type parameters for the type declaration.">Obtiene los parámetros de tipo para la declaración de tipos.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; that contains the type parameters for the type declaration.">Colección <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> que contiene los parámetros de tipo para la declaración de tipos.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeDeclarationCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; objects.">Representa una colección de objetos <see cref="T:System.CodeDom.CodeTypeDeclaration" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor(System.CodeDom.CodeTypeDeclaration[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; class that contains the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; objects.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> que contiene la matriz especificada de objetos <see cref="T:System.CodeDom.CodeTypeDeclaration" />.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; objects with which to initialize the collection.">Matriz de objetos <see cref="T:System.CodeDom.CodeTypeDeclaration" /> con los que se inicializará la colección.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor(System.CodeDom.CodeTypeDeclarationCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; class that contains the elements of the specified source collection.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> que contiene los elementos de la colección de origen especificada.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; object with which to initialize the collection.">Objeto <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> con el que se inicializa la colección.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Add(System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object to the collection.">Agrega a la colección el objeto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> especificado.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object to add.">Objeto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> que se agrega.</param>
      <returns vsli:raw="The index at which the new element was inserted.">Índice donde se insertó el nuevo elemento.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.AddRange(System.CodeDom.CodeTypeDeclaration[])">
      <summary vsli:raw="Copies the elements of the specified array to the end of the collection.">Copia los elementos de la matriz especificada al final de la colección.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; that contains the objects to add to the collection.">Matriz de tipo <see cref="T:System.CodeDom.CodeTypeDeclaration" /> que contiene los objetos que se van a agregar a la colección.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.AddRange(System.CodeDom.CodeTypeDeclarationCollection)">
      <summary vsli:raw="Adds the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; object to the end of the collection.">Agrega el contenido de otro objeto <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> al final de la colección.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; object that contains the objects to add to the collection.">Objeto <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> que contiene los objetos que se van a agregar a la colección.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Contains(System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object.">Obtiene un valor que indica si la colección contiene el objeto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> especificado.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object to search for in the collection.">Objeto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> que se va a buscar en la colección.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la colección contiene el objeto especificado; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.CopyTo(System.CodeDom.CodeTypeDeclaration[],System.Int32)">
      <summary vsli:raw="Copies the elements in the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; object to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance, starting at the specified index.">Copia los elementos del objeto <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> en una instancia de <see cref="T:System.Array" /> unidimensional, empezando en el índice especificado.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los valores copiados de la colección.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">Índice de la matriz donde debe comenzar la inserción.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">La matriz de destino es multidimensional.
O bien
El número de elementos de la clase <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> es mayor que el espacio disponible entre el índice de la matriz de destino especificada por el parámetro <paramref name="index" /> y el final de la matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">El parámetro <paramref name="index" /> es menor que el índice mínimo de la matriz de destino.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.IndexOf(System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object in the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt;, if it exists in the collection.">Obtiene el índice del objeto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> especificado en <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> si existe en la colección.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; to locate in the collection.">
        <see cref="T:System.CodeDom.CodeTypeDeclaration" /> que se va a buscar en la colección.</param>
      <returns vsli:raw="The index of the specified object, if it is found, in the collection; otherwise, -1.">Índice del objeto especificado de la colección, si se encuentra; de lo contrario, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Insert(System.Int32,System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object into the collection at the specified index.">Inserta el objeto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> especificado en el índice especificado de la colección.</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">Índice de base cero donde debe insertarse el objeto especificado.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object to insert.">Objeto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> que se va a insertar.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclarationCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object at the specified index in the collection.">Obtiene o establece el objeto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> en el índice especificado de la colección.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">Índice de la colección a la que se obtendrá acceso.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; at each valid index.">Una clase <see cref="T:System.CodeDom.CodeTypeDeclaration" /> en cada índice válido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">El parámetro <paramref name="index" /> está fuera del intervalo válido de índices de la colección.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Remove(System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object from the collection.">Quita el objeto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> especificado de la colección.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; to remove from the collection.">
        <see cref="T:System.CodeDom.CodeTypeDeclaration" /> que se va a quitar de la colección.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">No se encuentra el objeto especificado en la colección.</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeDelegate">
      <summary vsli:raw="Represents a delegate declaration.">Representa una declaración de delegado.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDelegate.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDelegate&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeDelegate" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDelegate.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDelegate&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeDelegate" />.</summary>
      <param name="name" vsli:raw="The name of the delegate.">Nombre del delegado.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDelegate.Parameters">
      <summary vsli:raw="Gets the parameters of the delegate.">Obtiene los parámetros del delegado.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; that indicates the parameters of the delegate.">Un objeto <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> que indica los parámetros del delegado.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDelegate.ReturnType">
      <summary vsli:raw="Gets or sets the return type of the delegate.">Obtiene o establece el tipo de valor devuelto por el delegado.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the return type of the delegate.">Objeto <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo de valor devuelto por el delegado.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeMember">
      <summary vsli:raw="Provides a base class for a member of a type. Type members include fields, methods, properties, constructors and nested types.">Proporciona una clase base para un miembro de tipo. Los miembros de tipo son campos, métodos, propiedades, constructores y tipos anidados.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMember.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeMember" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Attributes">
      <summary vsli:raw="Gets or sets the attributes of the member.">Obtiene o establece los atributos del miembro.</summary>
      <returns vsli:raw="A bitwise combination of the &lt;see cref=&quot;T:System.CodeDom.MemberAttributes&quot; /&gt; values used to indicate the attributes of the member. The default value is &lt;see cref=&quot;F:System.CodeDom.MemberAttributes.Private&quot; /&gt; | &lt;see cref=&quot;F:System.CodeDom.MemberAttributes.Final&quot; /&gt;.">Una combinación bit a bit de los valores de la enumeración <see cref="T:System.CodeDom.MemberAttributes" /> que se utilizan para indicar los atributos del miembro. El valor predeterminado es  <see cref="F:System.CodeDom.MemberAttributes.Private" /> .   |  <see cref="F:System.CodeDom.MemberAttributes.Final" /></returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Comments">
      <summary vsli:raw="Gets the collection of comments for the type member.">Obtiene la colección de comentarios del miembro del tipo.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; that indicates the comments for the member.">
        <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> que indica los comentarios del miembro.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.CustomAttributes">
      <summary vsli:raw="Gets or sets the custom attributes of the member.">Obtiene o establece los atributos personalizados del miembro.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; that indicates the custom attributes of the member.">
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> que indica los atributos personalizados del miembro.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.EndDirectives">
      <summary vsli:raw="Gets the end directives for the member.">Obtiene las directivas End para el miembro.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing end directives.">Un objeto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> que contiene las directivas End.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.LinePragma">
      <summary vsli:raw="Gets or sets the line on which the type member statement occurs.">Obtiene o establece la línea en la que se produce la instrucción del miembro del tipo.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeLinePragma&quot; /&gt; object that indicates the location of the type member declaration.">Objeto <see cref="T:System.CodeDom.CodeLinePragma" /> que indica la ubicación de la declaración del miembro del tipo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Name">
      <summary vsli:raw="Gets or sets the name of the member.">Obtiene o establece el nombre del miembro.</summary>
      <returns vsli:raw="The name of the member.">Nombre del miembro.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.StartDirectives">
      <summary vsli:raw="Gets the start directives for the member.">Obtiene las directivas Start para el miembro.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing start directives.">Un objeto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> que contiene las directivas Start.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeMemberCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; objects.">Representa una colección de objetos <see cref="T:System.CodeDom.CodeTypeMember" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeMemberCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor(System.CodeDom.CodeTypeMember[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; objects.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> que contiene la matriz especificada de objetos <see cref="T:System.CodeDom.CodeTypeMember" />.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; objects with which to initialize the collection.">Matriz de objetos <see cref="T:System.CodeDom.CodeTypeMember" /> con los que se inicializará la colección.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor(System.CodeDom.CodeTypeMemberCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; class containing the elements of the specified source collection.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> que contiene los elementos de la colección de origen especificada.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; with which to initialize the collection.">Objeto <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> con el que se inicializa la colección.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Add(System.CodeDom.CodeTypeMember)">
      <summary vsli:raw="Adds a &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; with the specified value to the collection.">Agrega un objeto <see cref="T:System.CodeDom.CodeTypeMember" /> con el valor especificado a la colección.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; to add.">
        <see cref="T:System.CodeDom.CodeTypeMember" /> que se va a agregar.</param>
      <returns vsli:raw="The index at which the new element was inserted.">Índice donde se insertó el nuevo elemento.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.AddRange(System.CodeDom.CodeTypeMember[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; array to the end of the collection.">Copia los elementos de la matriz <see cref="T:System.CodeDom.CodeTypeMember" /> especificada al final de la colección.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; containing the objects to add to the collection.">Matriz de tipo <see cref="T:System.CodeDom.CodeTypeMember" /> que contiene los objetos que se agregarán a la colección.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.AddRange(System.CodeDom.CodeTypeMemberCollection)">
      <summary vsli:raw="Adds the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; to the end of the collection.">Agrega el contenido de otro objeto <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> al final de la colección.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; containing the objects to add to the collection.">
        <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> que contiene los objetos que se agregarán a la colección.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Contains(System.CodeDom.CodeTypeMember)">
      <summary vsli:raw="Gets a value indicating whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt;.">Obtiene un valor que indica si la colección contiene el objeto <see cref="T:System.CodeDom.CodeTypeMember" /> especificado.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; to search for in the collection.">
        <see cref="T:System.CodeDom.CodeTypeMember" /> que se va a buscar en la colección.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la colección contiene el objeto especificado; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.CopyTo(System.CodeDom.CodeTypeMember[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance, beginning at the specified index.">Copia los objetos de colección en una instancia de <see cref="T:System.Array" /> unidimensional, comenzando a partir del índice especificado.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los valores copiados de la colección.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">Índice de la matriz donde debe comenzar la inserción.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">La matriz de destino es multidimensional.
O bien
El número de elementos de la clase <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> es mayor que el espacio disponible entre el índice de la matriz de destino especificada por el parámetro <paramref name="index" /> y el final de la matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">El parámetro <paramref name="index" /> es menor que el índice mínimo de la matriz de destino.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.IndexOf(System.CodeDom.CodeTypeMember)">
      <summary vsli:raw="Gets the index in the collection of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt;, if it exists in the collection.">Obtiene el índice de la colección del objeto <see cref="T:System.CodeDom.CodeTypeMember" /> especificado, si existe en la colección.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; to locate in the collection.">
        <see cref="T:System.CodeDom.CodeTypeMember" /> que se va a buscar en la colección.</param>
      <returns vsli:raw="The index in the collection of the specified object, if found; otherwise, -1.">Índice de la colección a la que corresponde el objeto especificado, si se encuentra; de lo contrario, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Insert(System.Int32,System.CodeDom.CodeTypeMember)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; into the collection at the specified index.">Inserta la clase <see cref="T:System.CodeDom.CodeTypeMember" /> especificada en el índice especificado de la colección.</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">Índice de base cero donde debe insertarse el objeto especificado.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; to insert.">
        <see cref="T:System.CodeDom.CodeTypeMember" /> que se va a insertar.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeMemberCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; at the specified index in the collection.">Obtiene o establece <see cref="T:System.CodeDom.CodeTypeMember" /> en el índice especificado de la colección.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">Índice de la colección a la que se obtendrá acceso.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; at each valid index.">Una clase <see cref="T:System.CodeDom.CodeTypeMember" /> en cada índice válido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">El parámetro <paramref name="index" /> está fuera del intervalo válido de índices de la colección.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Remove(System.CodeDom.CodeTypeMember)">
      <summary vsli:raw="Removes a specific &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; from the collection.">Quita una clase <see cref="T:System.CodeDom.CodeTypeMember" /> específica de la colección.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; to remove from the collection.">
        <see cref="T:System.CodeDom.CodeTypeMember" /> que se va a quitar de la colección.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">No se encuentra el objeto especificado en la colección.</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeOfExpression">
      <summary vsli:raw="Represents a &lt;see langword=&quot;typeof&quot; /&gt; expression, an expression that returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; for a specified type name.">Representa una expresión <see langword="typeof" /> que devuelve <see cref="T:System.Type" /> para un nombre de tipo especificado.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeOfExpression&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeOfExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeOfExpression&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeOfExpression" />.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type for the &lt;see langword=&quot;typeof&quot; /&gt; expression.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo de datos de la expresión <see langword="typeof" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeOfExpression&quot; /&gt; class using the specified type.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeOfExpression" /> utilizando el tipo especificado.</summary>
      <param name="type" vsli:raw="The name of the data type for the &lt;see langword=&quot;typeof&quot; /&gt; expression.">Nombre del tipo de datos de la expresión <see langword="typeof" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeOfExpression&quot; /&gt; class using the specified type.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeOfExpression" /> utilizando el tipo especificado.</summary>
      <param name="type" vsli:raw="The data type of the data type of the &lt;see langword=&quot;typeof&quot; /&gt; expression.">Tipo de datos de la expresión <see langword="typeof" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeOfExpression.Type">
      <summary vsli:raw="Gets or sets the data type referenced by the &lt;see langword=&quot;typeof&quot; /&gt; expression.">Obtiene o establece el tipo de datos al que hace referencia la expresión <see langword="typeof" />.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type referenced by the &lt;see langword=&quot;typeof&quot; /&gt; expression. This property will never return &lt;see langword=&quot;null&quot; /&gt;, and defaults to the &lt;see cref=&quot;T:System.Void&quot; /&gt; type.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo de datos al que hace referencia la expresión <see langword="typeof" />. Esta propiedad nunca devolverá el valor <see langword="null" /> y adopta el tipo <see cref="T:System.Void" /> de forma predeterminada.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeParameter">
      <summary vsli:raw="Represents a type parameter of a generic type or method.">Representa un parámetro de tipo de un método o un tipo genérico.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeParameter" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameter.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; class with the specified type parameter name.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeParameter" /> con el nombre del parámetro de tipo especificado.</summary>
      <param name="name" vsli:raw="The name of the type parameter.">El nombre del parámetro de tipo.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.Constraints">
      <summary vsli:raw="Gets the constraints for the type parameter.">Obtiene las restricciones del parámetro de tipo.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; object that contains the constraints for the type parameter.">Un objeto <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> que contiene las restricciones del parámetro de tipo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.CustomAttributes">
      <summary vsli:raw="Gets the custom attributes of the type parameter.">Obtiene los atributos personalizados del parámetro de tipo.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; that indicates the custom attributes of the type parameter. The default is &lt;see langword=&quot;null&quot; /&gt;.">Una clase <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> que indica los atributos personalizados del parámetro de tipo. De manera predeterminada, es <see langword="null" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.HasConstructorConstraint">
      <summary vsli:raw="Gets or sets a value indicating whether the type parameter has a constructor constraint.">Obtiene o establece un valor que indica si el parámetro de tipo tiene una restricción de constructor.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type parameter has a constructor constraint; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el parámetro de tipo tiene una restricción de constructor; en caso contrario, <see langword="false" />. De manera predeterminada, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.Name">
      <summary vsli:raw="Gets or sets the name of the type parameter.">Obtiene o establece el nombre del parámetro de tipo.</summary>
      <returns vsli:raw="The name of the type parameter. The default is an empty string (&quot;&quot;).">El nombre del parámetro de tipo. El valor predeterminado es una cadena vacía ("").</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeParameterCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; objects.">Representa una colección de objetos <see cref="T:System.CodeDom.CodeTypeParameter" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor">
      <summary vsli:raw="Initializes a new, empty instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; class.">Inicializa una nueva instancia vacía de la clase <see cref="T:System.CodeDom.CodeTypeParameterCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor(System.CodeDom.CodeTypeParameter[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; objects.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> que contiene la matriz especificada de objetos <see cref="T:System.CodeDom.CodeTypeParameter" />.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; objects with which to initialize the collection.">Matriz de objetos <see cref="T:System.CodeDom.CodeTypeParameter" /> con los que se inicializará la colección.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor(System.CodeDom.CodeTypeParameterCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; class containing the elements of the specified source collection.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> que contiene los elementos de la colección de origen especificada.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; with which to initialize the collection.">Objeto <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> con el que se inicializa la colección.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Add(System.CodeDom.CodeTypeParameter)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object to the collection.">Agrega a la colección el objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> especificado.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; to add.">
        <see cref="T:System.CodeDom.CodeTypeParameter" /> que se va a agregar.</param>
      <returns vsli:raw="The zero-based index at which the new element was inserted.">El índice de base cero donde se ha insertado el nuevo elemento.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Add(System.String)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object to the collection using the specified data type name.">Agrega el objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> especificado a la colección utilizando el nombre del tipo de datos especificado.</summary>
      <param name="value" vsli:raw="The name of a data type for which to add the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object to the collection.">Nombre de un tipo de datos para el que se va a agregar el objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> a la colección.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.AddRange(System.CodeDom.CodeTypeParameter[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; array to the end of the collection.">Copia los elementos de la matriz <see cref="T:System.CodeDom.CodeTypeParameter" /> especificada al final de la colección.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; containing the objects to add to the collection.">Matriz de tipo <see cref="T:System.CodeDom.CodeTypeParameter" /> que contiene los objetos que se agregarán a la colección.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.AddRange(System.CodeDom.CodeTypeParameterCollection)">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; to the end of the collection.">Copia los elementos de la colección <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> especificada al final de la colección.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; containing the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; objects to add to the collection.">Clase <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> que contiene los objetos <see cref="T:System.CodeDom.CodeTypeParameter" /> que se agregarán a la colección.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Contains(System.CodeDom.CodeTypeParameter)">
      <summary vsli:raw="Determines whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object.">Determina si la colección contiene el objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> especificado.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object to search for in the collection.">Objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> que se va a buscar en la colección.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object is contained in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la colección contiene el objeto <see cref="T:System.CodeDom.CodeTypeParameter" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.CopyTo(System.CodeDom.CodeTypeParameter[],System.Int32)">
      <summary vsli:raw="Copies the items in the collection to the specified one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; at the specified index.">Copia los elementos de la colección en la matriz (<see cref="T:System.Array" />) unidimensional especificada en el índice especificado.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los valores copiados de la colección.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">Índice de la matriz donde debe comenzar la inserción.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; is greater than the available space between the index of the target array specified by &lt;paramref name=&quot;index&quot; /&gt; and the end of the target array.">
        <paramref name="array" /> es multidimensional.
O bien
El número de elementos de <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> es mayor que el espacio disponible entre el índice de la matriz de destino especificada por <paramref name="index" /> y el final de la matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than the target array's lowest index.">
        <paramref name="index" /> es menor que el índice mínimo de la matriz de destino.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.IndexOf(System.CodeDom.CodeTypeParameter)">
      <summary vsli:raw="Gets the index in the collection of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object, if it exists in the collection.">Obtiene el índice que ocupa en la colección el objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> especificado, si existe en la colección.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object to locate in the collection.">Objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> que se va a buscar en la colección.</param>
      <returns vsli:raw="The zero-based index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object in the collection if found; otherwise, -1.">El índice de base cero del objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> especificado en la colección, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Insert(System.Int32,System.CodeDom.CodeTypeParameter)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object into the collection at the specified index.">Inserta el objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> especificado en el índice especificado de la colección.</summary>
      <param name="index" vsli:raw="The zero-based index at which to insert the item.">Índice de base cero donde se inserta el elemento.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object to insert.">Objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> que se va a insertar.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameterCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object at the specified index in the collection.">Obtiene o establece el objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> en el índice especificado de la colección.</summary>
      <param name="index" vsli:raw="The zero-based index of the collection object to access.">Índice de base cero de la colección a la que se obtendrá acceso.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object at the specified index.">Objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> en el índice especificado.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is outside the valid range of indexes for the collection.">
        <paramref name="index" /> está fuera del intervalo válido de índices de la colección.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Remove(System.CodeDom.CodeTypeParameter)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object from the collection.">Quita el objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> especificado de la colección.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object to remove from the collection.">Objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> que se va a quitar de la colección.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">No se encuentra el objeto especificado en la colección.</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeReference">
      <summary vsli:raw="Represents a reference to a type.">Representa una referencia a un tipo.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeReference" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeParameter)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified code type parameter.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeReference" /> utilizando el parámetro de tipo de código especificado.</summary>
      <param name="typeParameter" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; that represents the type of the type parameter.">Objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> que representa el tipo del parámetro de tipo.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeReference,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified array type and rank.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeReference" /> con el tipo de matriz y el rango especificados.</summary>
      <param name="arrayType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type of the array.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo de la matriz.</param>
      <param name="rank" vsli:raw="The number of dimensions in the array.">Número de dimensiones de la matriz.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified type name.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeReference" /> con el nombre de tipo especificado.</summary>
      <param name="typeName" vsli:raw="The name of the type to reference.">Nombre del tipo al que se va a hacer referencia.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReference[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified type name and type arguments.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeReference" /> utilizando el nombre de tipo y los argumentos de tipo especificados.</summary>
      <param name="typeName" vsli:raw="The name of the type to reference.">Nombre del tipo al que se va a hacer referencia.</param>
      <param name="typeArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; values.">Matriz de valores <see cref="T:System.CodeDom.CodeTypeReference" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReferenceOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified type name and code type reference option.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeReference" /> utilizando el nombre de tipo y la opción de referencia de tipo de código especificados.</summary>
      <param name="typeName" vsli:raw="The name of the type to reference.">Nombre del tipo al que se va a hacer referencia.</param>
      <param name="codeTypeReferenceOption" vsli:raw="The code type reference option, one of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceOptions&quot; /&gt; values.">Opción de referencia de tipo de código, uno de los valores de <see cref="T:System.CodeDom.CodeTypeReferenceOptions" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified array type name and rank.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeReference" /> con el nombre del tipo de matriz y el rango especificados.</summary>
      <param name="baseType" vsli:raw="The name of the type of the elements of the array.">Nombre del tipo de los elementos de la matriz.</param>
      <param name="rank" vsli:raw="The number of dimensions of the array.">Número de dimensiones de la matriz.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified type.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeReference" /> utilizando el tipo especificado.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to reference.">Objeto <see cref="T:System.Type" /> al que se va a hacer referencia.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.Type,System.CodeDom.CodeTypeReferenceOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified type and code type reference.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeReference" /> utilizando el tipo y la referencia de tipo de código especificados.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to reference.">Objeto <see cref="T:System.Type" /> al que se va a hacer referencia.</param>
      <param name="codeTypeReferenceOption" vsli:raw="The code type reference option, one of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceOptions&quot; /&gt; values.">Opción de referencia de tipo de código, uno de los valores de <see cref="T:System.CodeDom.CodeTypeReferenceOptions" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.ArrayElementType">
      <summary vsli:raw="Gets or sets the type of the elements in the array.">Obtiene o establece el tipo de los elementos de la matriz.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type of the array elements.">Objeto <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo de los elementos de la matriz.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.ArrayRank">
      <summary vsli:raw="Gets or sets the array rank of the array.">Obtiene o establece el rango de matrices de la matriz.</summary>
      <returns vsli:raw="The number of dimensions of the array.">Número de dimensiones de la matriz.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.BaseType">
      <summary vsli:raw="Gets or sets the name of the type being referenced.">Obtiene o establece el nombre del tipo al que se hace referencia.</summary>
      <returns vsli:raw="The name of the type being referenced.">El nombre del tipo al que se hace referencia.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.Options">
      <summary vsli:raw="Gets or sets the code type reference option.">Obtiene o establece la opción de referencia de tipo de código.</summary>
      <returns vsli:raw="A bitwise combination of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceOptions&quot; /&gt; values.">Combinación bit a bit de los valores de <see cref="T:System.CodeDom.CodeTypeReferenceOptions" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.TypeArguments">
      <summary vsli:raw="Gets the type arguments for the current generic type reference.">Obtiene los argumentos de tipo para la referencia de tipo genérico actual.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; containing the type arguments for the current &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; object.">Colección <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> que contiene los argumentos de tipo para el objeto <see cref="T:System.CodeDom.CodeTypeReference" /> actual.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; objects.">Representa una colección de objetos <see cref="T:System.CodeDom.CodeTypeReference" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor(System.CodeDom.CodeTypeReference[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; objects.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> que contiene la matriz especificada de objetos <see cref="T:System.CodeDom.CodeTypeReference" />.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; objects with which to initialize the collection.">Matriz de objetos <see cref="T:System.CodeDom.CodeTypeReference" /> con los que se inicializará la colección.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor(System.CodeDom.CodeTypeReferenceCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; class containing the elements of the specified source collection.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> que contiene los elementos de la colección de origen especificada.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; with which to initialize the collection.">Objeto <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> con el que se inicializa la colección.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to the collection.">Agrega el <see cref="T:System.CodeDom.CodeTypeReference" /> especificado a la colección.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to add.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que se va a agregar.</param>
      <returns vsli:raw="The index at which the new element was inserted.">Índice donde se insertó el nuevo elemento.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.String)">
      <summary vsli:raw="Adds a &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to the collection using the specified data type name.">Agrega un objeto <see cref="T:System.CodeDom.CodeTypeReference" /> a la colección con el nombre del tipo de datos especificado.</summary>
      <param name="value" vsli:raw="The name of a data type for which to add a &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to the collection.">Nombre de un tipo de datos para el que se va a agregar un objeto <see cref="T:System.CodeDom.CodeTypeReference" /> a la colección.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.Type)">
      <summary vsli:raw="Adds a &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to the collection using the specified data type.">Agrega un objeto <see cref="T:System.CodeDom.CodeTypeReference" /> a la colección con el tipo de datos especificado.</summary>
      <param name="value" vsli:raw="The data type for which to add a &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to the collection.">Tipo de datos para el que se va a agregar un objeto <see cref="T:System.CodeDom.CodeTypeReference" /> a la colección.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.AddRange(System.CodeDom.CodeTypeReference[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; array to the end of the collection.">Copia los elementos de la matriz <see cref="T:System.CodeDom.CodeTypeReference" /> especificada al final de la colección.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; containing the objects to add to the collection.">Matriz de tipo <see cref="T:System.CodeDom.CodeTypeReference" /> que contiene los objetos que se agregarán a la colección.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.AddRange(System.CodeDom.CodeTypeReferenceCollection)">
      <summary vsli:raw="Adds the contents of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; to the end of the collection.">Agrega el contenido de la clase <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> especificada al final de la colección.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; containing the objects to add to the collection.">
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> que contiene los objetos que se agregarán a la colección.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Contains(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Gets a value indicating whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt;.">Obtiene un valor que indica si la colección contiene el objeto <see cref="T:System.CodeDom.CodeTypeReference" /> especificado.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to search for in the collection.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que se va a buscar en la colección.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; is contained in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si la colección contiene <see cref="T:System.CodeDom.CodeTypeReference" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.CopyTo(System.CodeDom.CodeTypeReference[],System.Int32)">
      <summary vsli:raw="Copies the items in the collection to the specified one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; at the specified index.">Copia los elementos de la colección en la matriz (<see cref="T:System.Array" />) unidimensional especificada en el índice especificado.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los valores copiados de la colección.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">Índice de la matriz donde debe comenzar la inserción.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">El parámetro <paramref name="array" /> es multidimensional.
o bien
El número de elementos de la clase <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> es mayor que el espacio disponible entre el índice de la matriz de destino especificada por el parámetro <paramref name="index" /> y el final de la matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">El parámetro <paramref name="index" /> es menor que el índice mínimo de la matriz de destino.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.IndexOf(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Gets the index in the collection of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt;, if it exists in the collection.">Obtiene el índice de la colección del objeto <see cref="T:System.CodeDom.CodeTypeReference" /> especificado, si existe en la colección.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to locate in the collection.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que se va a buscar en la colección.</param>
      <returns vsli:raw="The index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; in the collection if found; otherwise, -1.">El índice del objeto <see cref="T:System.CodeDom.CodeTypeReference" /> especificado en la colección, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Insert(System.Int32,System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Inserts a &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; into the collection at the specified index.">Inserta un objeto <see cref="T:System.CodeDom.CodeTypeReference" /> en la colección, en el índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index where the item should be inserted.">Índice de base cero donde debe insertarse el elemento.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to insert.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que se va a insertar.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReferenceCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; at the specified index in the collection.">Obtiene o establece <see cref="T:System.CodeDom.CodeTypeReference" /> en el índice especificado de la colección.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">Índice de la colección a la que se obtendrá acceso.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; at each valid index.">Una clase <see cref="T:System.CodeDom.CodeTypeReference" /> en cada índice válido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">El parámetro <paramref name="index" /> está fuera del intervalo válido de índices de la colección.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Remove(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; from the collection.">Quita el <see cref="T:System.CodeDom.CodeTypeReference" /> especificado de la colección.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to remove from the collection.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que se va a quitar de la colección.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">No se encuentra el objeto especificado en la colección.</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceExpression">
      <summary vsli:raw="Represents a reference to a data type.">Representa una referencia a un tipo de datos.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceExpression&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceExpression&quot; /&gt; class using the specified type.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> utilizando el tipo especificado.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type to reference.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo de datos al que se va a hacer referencia.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceExpression&quot; /&gt; class using the specified data type name.">Inicializa una instancia nueva de la clase <see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> utilizando el nombre del tipo de datos especificado.</summary>
      <param name="type" vsli:raw="The name of the data type to reference.">Nombre del tipo de datos al que se va a hacer referencia.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceExpression&quot; /&gt; class using the specified data type.">Inicializa una instancia nueva de la clase <see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> utilizando el tipo de datos especificado.</summary>
      <param name="type" vsli:raw="An instance of the data type to reference.">Instancia del tipo de datos al que se va a hacer referencia.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReferenceExpression.Type">
      <summary vsli:raw="Gets or sets the data type to reference.">Obtiene o establece el tipo de datos al que se va a hacer referencia.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type to reference.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo de datos al que se va a hacer referencia.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceOptions">
      <summary vsli:raw="Specifies how the code type reference is to be resolved.">Especifica cómo se va a resolver la referencia de tipo de código.</summary>
    </member>
    <member name="F:System.CodeDom.CodeTypeReferenceOptions.GenericTypeParameter">
      <summary vsli:raw="Resolve the type from the type parameter.">Resuelve el tipo a partir del parámetro de tipo.</summary>
    </member>
    <member name="F:System.CodeDom.CodeTypeReferenceOptions.GlobalReference">
      <summary vsli:raw="Resolve the type from the root namespace.">Resuelve el tipo a partir del espacio de nombres raíz.</summary>
    </member>
    <member name="T:System.CodeDom.CodeVariableDeclarationStatement">
      <summary vsli:raw="Represents a variable declaration.">Representa una declaración de variable.</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableDeclarationStatement&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableDeclarationStatement&quot; /&gt; class using the specified type and name.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> utilizando el tipo y el nombre que se hayan especificado.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the variable.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo de datos de la variable.</param>
      <param name="name" vsli:raw="The name of the variable.">Nombre de la variable.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.CodeDom.CodeTypeReference,System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableDeclarationStatement&quot; /&gt; class using the specified data type, variable name, and initialization expression.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> con el tipo de datos, el nombre de variable y la expresión de inicialización que se hayan especificado.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type of the variable.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo de la variable.</param>
      <param name="name" vsli:raw="The name of the variable.">Nombre de la variable.</param>
      <param name="initExpression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the initialization expression for the variable.">
        <see cref="T:System.CodeDom.CodeExpression" /> que indica la expresión de inicialización de la variable.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableDeclarationStatement&quot; /&gt; class using the specified data type name and variable name.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> utilizando el nombre de tipo de datos y el nombre de variable que se hayan especificado.</summary>
      <param name="type" vsli:raw="The name of the data type of the variable.">Nombre del tipo de datos de la variable.</param>
      <param name="name" vsli:raw="The name of the variable.">Nombre de la variable.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.String,System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableDeclarationStatement&quot; /&gt; class using the specified data type, variable name, and initialization expression.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> con el tipo de datos, el nombre de variable y la expresión de inicialización que se hayan especificado.</summary>
      <param name="type" vsli:raw="The name of the data type of the variable.">Nombre del tipo de datos de la variable.</param>
      <param name="name" vsli:raw="The name of the variable.">Nombre de la variable.</param>
      <param name="initExpression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the initialization expression for the variable.">
        <see cref="T:System.CodeDom.CodeExpression" /> que indica la expresión de inicialización de la variable.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.Type,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableDeclarationStatement&quot; /&gt; class using the specified data type and variable name.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> utilizando el tipo de datos y el nombre de variable que se hayan especificado.</summary>
      <param name="type" vsli:raw="The data type for the variable.">Tipo de datos de la variable.</param>
      <param name="name" vsli:raw="The name of the variable.">Nombre de la variable.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.Type,System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableDeclarationStatement&quot; /&gt; class using the specified data type, variable name, and initialization expression.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> con el tipo de datos, el nombre de variable y la expresión de inicialización que se hayan especificado.</summary>
      <param name="type" vsli:raw="The data type of the variable.">Tipo de datos de la variable.</param>
      <param name="name" vsli:raw="The name of the variable.">Nombre de la variable.</param>
      <param name="initExpression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the initialization expression for the variable.">
        <see cref="T:System.CodeDom.CodeExpression" /> que indica la expresión de inicialización de la variable.</param>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.InitExpression">
      <summary vsli:raw="Gets or sets the initialization expression for the variable.">Obtiene o establece la expresión de inicialización de la variable.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the initialization expression for the variable.">
        <see cref="T:System.CodeDom.CodeExpression" /> que indica la expresión de inicialización de la variable.</returns>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.Name">
      <summary vsli:raw="Gets or sets the name of the variable.">Obtiene o establece el nombre de la variable.</summary>
      <returns vsli:raw="The name of the variable.">Nombre de la variable.</returns>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.Type">
      <summary vsli:raw="Gets or sets the data type of the variable.">Obtiene o establece el tipo de datos de la variable.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the variable.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo de datos de la variable.</returns>
    </member>
    <member name="T:System.CodeDom.CodeVariableReferenceExpression">
      <summary vsli:raw="Represents a reference to a local variable.">Representa una referencia a una variable local.</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableReferenceExpression&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeVariableReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableReferenceExpression.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableReferenceExpression&quot; /&gt; class using the specified local variable name.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeVariableReferenceExpression" /> con el nombre especificado de la variable local.</summary>
      <param name="variableName" vsli:raw="The name of the local variable to reference.">Nombre de la variable local a la que se hará referencia.</param>
    </member>
    <member name="P:System.CodeDom.CodeVariableReferenceExpression.VariableName">
      <summary vsli:raw="Gets or sets the name of the local variable to reference.">Obtiene o establece el nombre de la variable local a la que se hará referencia.</summary>
      <returns vsli:raw="The name of the local variable to reference.">Nombre de la variable local a la que se hará referencia.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeCompiler">
      <summary vsli:raw="Provides an example implementation of the &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeCompiler&quot; /&gt; interface.">Proporciona una implementación de ejemplo de la interfaz <see cref="T:System.CodeDom.Compiler.ICodeCompiler" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeCompiler&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.Compiler.CodeCompiler" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.CmdArgsFromParameters(System.CodeDom.Compiler.CompilerParameters)">
      <summary vsli:raw="Gets the command arguments to be passed to the compiler from the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt;.">Obtiene los argumentos de comando que se van a pasar al compilador desde el <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> especificado.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; that indicates the compiler options.">
        <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica las opciones del compilador.</param>
      <returns vsli:raw="The command arguments.">Argumentos de comando.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeCompiler.CompilerName">
      <summary vsli:raw="Gets the name of the compiler executable.">Obtiene el nombre del ejecutable del compilador.</summary>
      <returns vsli:raw="The name of the compiler executable.">Nombre del ejecutable del compilador.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeCompiler.FileExtension">
      <summary vsli:raw="Gets the file name extension to use for source files.">Obtiene la extensión de archivo que se utilizará en archivos de código fuente.</summary>
      <returns vsli:raw="The file name extension to use for source files.">Extensión de archivo que se utilizará en archivos de código fuente.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary vsli:raw="Compiles the specified compile unit using the specified options, and returns the results from the compilation.">Compila la unidad de compilación especificada utilizando las opciones indicadas y devuelve los resultados de la compilación.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica las opciones del compilador.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; object that indicates the source to compile.">Objeto <see cref="T:System.CodeDom.CodeCompileUnit" /> que indica el código fuente que se va a compilar.</param>
      <returns vsli:raw="The results of compilation.">Resultados de la compilación.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary vsli:raw="Compiles the specified compile units using the specified options, and returns the results from the compilation.">Compila las unidades de compilación especificadas utilizando las opciones indicadas y devuelve los resultados de la compilación.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica las opciones del compilador.</param>
      <param name="ea" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; objects that indicates the source to compile.">Matriz de objetos <see cref="T:System.CodeDom.CodeCompileUnit" /> que indica el código fuente que se va a compilar.</param>
      <returns vsli:raw="The results of compilation.">Resultados de la compilación.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;ea&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> es <see langword="null" />.
o bien
<paramref name="ea" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary vsli:raw="Compiles the specified file using the specified options, and returns the results from the compilation.">Compila el archivo especificado utilizando las opciones indicadas y devuelve los resultados de la compilación.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica las opciones del compilador.</param>
      <param name="fileName" vsli:raw="The file name to compile.">Nombre del archivo que se va a compilar.</param>
      <returns vsli:raw="The results of compilation.">Resultados de la compilación.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;fileName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> es <see langword="null" />.
O bien
<paramref name="fileName" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="Compiles the specified files using the specified options, and returns the results from the compilation.">Compila los archivos especificados utilizando las opciones indicadas y devuelve los resultados de la compilación.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica las opciones del compilador.</param>
      <param name="fileNames" vsli:raw="An array of strings that indicates the file names of the files to compile.">Matriz de cadenas que indica los nombres de archivo de los archivos que se van a compilar.</param>
      <returns vsli:raw="The results of compilation.">Resultados de la compilación.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;fileNames&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> es <see langword="null" />.
O bien
<paramref name="fileNames" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary vsli:raw="Compiles the specified source code string using the specified options, and returns the results from the compilation.">Compila la cadena de código fuente especificada utilizando las opciones indicadas y devuelve los resultados de la compilación.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica las opciones del compilador.</param>
      <param name="source" vsli:raw="The source code string to compile.">Cadena de código fuente que se va a compilar.</param>
      <returns vsli:raw="The results of compilation.">Resultados de la compilación.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="Compiles the specified source code strings using the specified options, and returns the results from the compilation.">Compila las cadenas del código fuente especificadas utilizando las opciones indicadas y devuelve los resultados de la compilación.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica las opciones del compilador.</param>
      <param name="sources" vsli:raw="An array of strings containing the source code to compile.">Matriz de cadenas que contiene el código fuente que se va a compilar.</param>
      <returns vsli:raw="The results of compilation.">Resultados de la compilación.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;sources&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> es <see langword="null" />.
O bien
<paramref name="sources" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.GetResponseFileCmdArgs(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary vsli:raw="Gets the command arguments to use when invoking the compiler to generate a response file.">Obtiene los argumentos de comando que se van a utilizar cuando se invoque al compilador para generar un archivo de respuesta.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica las opciones del compilador.</param>
      <param name="cmdArgs" vsli:raw="A command arguments string.">Cadena de argumentos de comando.</param>
      <returns vsli:raw="The command arguments to use to generate a response file, or &lt;see langword=&quot;null&quot; /&gt; if there are no response file arguments.">Argumentos de comando que se van a utilizar para generar un archivo de respuesta o <see langword="null" /> si no hay argumentos para el archivo de respuesta.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.JoinStringArray(System.String[],System.String)">
      <summary vsli:raw="Joins the specified string arrays.">Combina las matrices de cadenas especificadas.</summary>
      <param name="sa" vsli:raw="The array of strings to join.">Matriz de cadenas que se va a combinar.</param>
      <param name="separator" vsli:raw="The separator to use.">Separador que se va a utilizar.</param>
      <returns vsli:raw="The concatenated string.">Cadena concatenada.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.ProcessCompilerOutputLine(System.CodeDom.Compiler.CompilerResults,System.String)">
      <summary vsli:raw="Processes the specified line from the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt;.">Procesa la línea especificada de los <see cref="T:System.CodeDom.Compiler.CompilerResults" /> especificados.</summary>
      <param name="results" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; that indicates the results of compilation.">
        <see cref="T:System.CodeDom.Compiler.CompilerResults" /> que indica los resultados de la compilación.</param>
      <param name="line" vsli:raw="The line to process.">Línea que se va a procesar.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)&quot; /&gt;.">Para una descripción de este miembro, vea <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)" />.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica las opciones del compilador.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; that indicates the source to compile.">
        <see cref="T:System.CodeDom.CodeCompileUnit" /> que indica el código fuente que se va a compilar.</param>
      <returns vsli:raw="The results of compilation.">Resultados de la compilación.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])&quot; /&gt;.">Para una descripción de este miembro, vea <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])" />.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica las opciones del compilador.</param>
      <param name="ea" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; objects that indicates the source to compile.">Matriz de objetos <see cref="T:System.CodeDom.CodeCompileUnit" /> que indica el código fuente que se va a compilar.</param>
      <returns vsli:raw="The results of compilation.">Resultados de la compilación.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)&quot; /&gt;.">Para una descripción de este miembro, vea <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)" />.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica las opciones del compilador.</param>
      <param name="fileName" vsli:raw="The file name to compile.">Nombre del archivo que se va a compilar.</param>
      <returns vsli:raw="The results of compilation.">Resultados de la compilación.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])&quot; /&gt;.">Para una descripción de este miembro, vea <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])" />.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica las opciones del compilador.</param>
      <param name="fileNames" vsli:raw="An array of strings that indicates the file names to compile.">Matriz de cadenas que indica los nombres de los archivos que se van a compilar.</param>
      <returns vsli:raw="The results of compilation.">Resultados de la compilación.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)&quot; /&gt;.">Para una descripción de este miembro, vea <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)" />.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica las opciones del compilador.</param>
      <param name="source" vsli:raw="A string that indicates the source code to compile.">Cadena que indica el código fuente que se va a compilar.</param>
      <returns vsli:raw="The results of compilation.">Resultados de la compilación.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])&quot; /&gt;.">Para obtener una descripción de este miembro, vea <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])" />.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica las opciones del compilador.</param>
      <param name="sources" vsli:raw="An array of strings that indicates the source code to compile.">Matriz de cadenas que indica el código fuente que se va a compilar.</param>
      <returns vsli:raw="The results of compilation.">Resultados de la compilación.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> es <see langword="null" />.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeDomProvider">
      <summary vsli:raw="Provides a base class for &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementations. This class is abstract.">Proporciona la clase base para las implementaciones de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />. Esta clase es abstracta.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary vsli:raw="Compiles an assembly based on the &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; trees contained in the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; objects, using the specified compiler settings.">Compila un ensamblado basado en los árboles <see cref="N:System.CodeDom" /> que contiene la matriz especificada de objetos <see cref="T:System.CodeDom.CodeCompileUnit" />, utilizando la configuración del compilador especificada.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for the compilation.">Objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica la configuración de la compilación.</param>
      <param name="compilationUnits" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; that indicates the code to compile.">Matriz de tipo <see cref="T:System.CodeDom.CodeCompileUnit" /> que indica el código que se va a compilar.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of the compilation.">Objeto <see cref="T:System.CodeDom.Compiler.CompilerResults" /> que indica los resultados de la compilación.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler&quot; /&gt; method is overridden in a derived class.">Este método y el método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> no se reemplazan en una clase derivada.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="Compiles an assembly from the source code contained in the specified files, using the specified compiler settings.">Compila un ensamblado a partir del código fuente que contienen los archivos especificados, utilizando la configuración de compilador especificada.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for the compilation.">Objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica la configuración de la compilación.</param>
      <param name="fileNames" vsli:raw="An array of the names of the files to compile.">Matriz de los nombres de los archivos que se van a compilar.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">Objeto <see cref="T:System.CodeDom.Compiler.CompilerResults" /> que indica los resultados de la compilación.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler&quot; /&gt; method is overridden in a derived class.">Este método y el método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> no se reemplazan en una clase derivada.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="Compiles an assembly from the specified array of strings containing source code, using the specified compiler settings.">Compila un ensamblado basado en la matriz especificada de cadenas que contiene el código fuente, utilizando la configuración del compilador especificada.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler settings for this compilation.">Objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica la configuración de compilador para esta compilación.</param>
      <param name="sources" vsli:raw="An array of source code strings to compile.">Matriz de cadenas de código fuente que se van a compilar.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">Objeto <see cref="T:System.CodeDom.Compiler.CompilerResults" /> que indica los resultados de la compilación.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler&quot; /&gt; method is overridden in a derived class.">Este método y el método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> no se reemplazan en una clase derivada.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler">
      <summary vsli:raw="When overridden in a derived class, creates a new code compiler.">Cuando se reemplaza en una clase derivada, crea un nuevo compilador de código.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeCompiler&quot; /&gt; that can be used for compilation of &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; based source code representations.">
        <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> que puede utilizarse para la compilación de representaciones de código fuente basadas en el espacio de nombres <see cref="N:System.CodeDom" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
      <summary vsli:raw="Creates an escaped identifier for the specified value.">Crea un identificador de escape para el valor especificado.</summary>
      <param name="value" vsli:raw="The string for which to create an escaped identifier.">Cadena para la que se va a crear un identificador de escape.</param>
      <returns vsli:raw="The escaped identifier for the value.">Identificador de escape para el valor.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Este método y el método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> no se reemplazan en una clase derivada.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator">
      <summary vsli:raw="When overridden in a derived class, creates a new code generator.">Cuando se reemplaza en una clase derivada, crea un nuevo generador de código.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeGenerator&quot; /&gt; that can be used to generate &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; based source code representations.">
        <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> que puede utilizarse para generar representaciones de código fuente basadas en el espacio de nombres <see cref="N:System.CodeDom" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.IO.TextWriter)">
      <summary vsli:raw="When overridden in a derived class, creates a new code generator using the specified &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; for output.">Cuando se reemplaza en una clase derivada, crea un nuevo generador de código utilizando el <see cref="T:System.IO.TextWriter" /> especificado para los resultados.</summary>
      <param name="output" vsli:raw="A &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to use to output.">
        <see cref="T:System.IO.TextWriter" /> que se va a utilizar para los resultados.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeGenerator&quot; /&gt; that can be used to generate &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; based source code representations.">
        <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> que puede utilizarse para generar representaciones de código fuente basadas en el espacio de nombres <see cref="N:System.CodeDom" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.String)">
      <summary vsli:raw="When overridden in a derived class, creates a new code generator using the specified file name for output.">Cuando se reemplaza en una clase derivada, crea un nuevo generador de código utilizando el nombre de archivo especificado para los resultados.</summary>
      <param name="fileName" vsli:raw="The file name to output to.">Nombre del archivo de resultados.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeGenerator&quot; /&gt; that can be used to generate &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; based source code representations.">
        <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> que puede utilizarse para generar representaciones de código fuente basadas en el espacio de nombres <see cref="N:System.CodeDom" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser">
      <summary vsli:raw="When overridden in a derived class, creates a new code parser.">Cuando se reemplaza en una clase derivada, crea un nuevo analizador de código.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeParser&quot; /&gt; that can be used to parse source code. The base implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.CodeDom.Compiler.ICodeParser" /> que puede utilizarse para analizar código fuente. La implementación base siempre devuelve <see langword="null" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; instance for the specified language.">Obtiene una instancia de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> para el lenguaje especificado.</summary>
      <param name="language" vsli:raw="The language name.">Nombre del lenguaje.</param>
      <returns vsli:raw="A CodeDOM provider that is implemented for the specified language name.">Proveedor CodeDOM que se implementa para el nombre de lenguaje especificado.</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException" vsli:raw="The &lt;paramref name=&quot;language&quot; /&gt; does not have a configured provider on this computer.">
        <paramref name="language" /> no tiene un proveedor configurado en este equipo.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;language&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">El valor de <paramref name="language" /> es <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">El llamador no dispone del permiso requerido.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; instance for the specified language and provider options.">Obtiene una instancia de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> para el lenguaje y opciones de proveedor especificados.</summary>
      <param name="language" vsli:raw="The language name.">Nombre del lenguaje.</param>
      <param name="providerOptions" vsli:raw="A collection of provider options from the configuration file.">Una colección de opciones de proveedor extraídas del archivo de configuración.</param>
      <returns vsli:raw="A CodeDOM provider that is implemented for the specified language name and options.">Un proveedor CodeDOM que se implementa para el nombre del lenguaje y opciones especificados.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
      <summary vsli:raw="Creates a valid identifier for the specified value.">Crea un identificador válido para el valor especificado.</summary>
      <param name="value" vsli:raw="The string for which to generate a valid identifier.">Cadena para la que se va a generar un identificador válido.</param>
      <returns vsli:raw="A valid identifier for the specified value.">Identificador válido para el valor especificado.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Este método y el método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> no se reemplazan en una clase derivada.</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeDomProvider.FileExtension">
      <summary vsli:raw="Gets the default file name extension to use for source code files in the current language.">Obtiene la extensión de archivo predeterminada que se utilizará para los archivos de código fuente en el lenguaje actual.</summary>
      <returns vsli:raw="A file name extension corresponding to the extension of the source files of the current language. The base implementation always returns &lt;see cref=&quot;F:System.String.Empty&quot; /&gt;.">Extensión de archivo correspondiente a la extensión de los archivos de código fuente del lenguaje actual. La implementación base siempre devuelve <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) compilation unit and sends it to the specified text writer, using the specified options.">Genera código para la unidad de compilación CodeDOM (Code Document Object Model) especificada y lo envía al escritor de texto especificado utilizando las opciones igualmente especificadas.</summary>
      <param name="compileUnit" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; for which to generate code.">
        <see cref="T:System.CodeDom.CodeCompileUnit" /> para el que se va a generar código.</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which the output code is sent.">
        <see cref="T:System.IO.TextWriter" /> al que se envía el código de salida.</param>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que indica las opciones que se van a utilizar para generar código.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Este método y el método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> no se reemplazan en una clase derivada.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) expression and sends it to the specified text writer, using the specified options.">Genera código para la expresión CodeDOM (Code Document Object Model) especificada y lo envía al escritor de texto especificado utilizando las opciones igualmente especificadas.</summary>
      <param name="expression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object that indicates the expression for which to generate code.">Objeto <see cref="T:System.CodeDom.CodeExpression" /> que indica la expresión para la que se va a generar código.</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which output code is sent.">
        <see cref="T:System.IO.TextWriter" /> al que se envía el código de salida.</param>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que indica las opciones que se van a utilizar para generar código.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Este método y el método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> no se reemplazan en una clase derivada.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) member declaration and sends it to the specified text writer, using the specified options.">Genera código para la declaración de miembro CodeDOM (Code Document Object Model) especificada y lo envía al escritor de texto especificado utilizando las opciones igualmente especificadas.</summary>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; object that indicates the member for which to generate code.">Objeto <see cref="T:System.CodeDom.CodeTypeMember" /> que indica el miembro para el que se va a generar código.</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which output code is sent.">
        <see cref="T:System.IO.TextWriter" /> al que se envía el código de salida.</param>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que indica las opciones que se van a utilizar para generar código.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="This method is not overridden in a derived class.">Este método no se reemplaza en una clase derivada.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) namespace and sends it to the specified text writer, using the specified options.">Genera código para el espacio de nombres CodeDOM (Code Document Object Model) especificado y lo envía al escritor de texto especificado utilizando las opciones igualmente especificadas.</summary>
      <param name="codeNamespace" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; object that indicates the namespace for which to generate code.">Objeto <see cref="T:System.CodeDom.CodeNamespace" /> que indica el espacio de nombres para el que se va a generar código.</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which output code is sent.">
        <see cref="T:System.IO.TextWriter" /> al que se envía el código de salida.</param>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que indica las opciones que se van a utilizar para generar código.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Este método y el método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> no se reemplazan en una clase derivada.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) statement and sends it to the specified text writer, using the specified options.">Genera código para la instrucción CodeDOM (Code Document Object Model) especificada y lo envía al escritor de texto especificado utilizando las opciones igualmente especificadas.</summary>
      <param name="statement" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the CodeDOM elements for which to generate code.">
        <see cref="T:System.CodeDom.CodeStatement" /> que contiene los elementos CodeDOM para los que se va a generar código.</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which output code is sent.">
        <see cref="T:System.IO.TextWriter" /> al que se envía el código de salida.</param>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que indica las opciones que se van a utilizar para generar código.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Este método y el método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> no se reemplazan en una clase derivada.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) type declaration and sends it to the specified text writer, using the specified options.">Genera código para la declaración de tipos CodeDOM (Code Document Object Model) especificada y lo envía al escritor de texto especificado utilizando las opciones igualmente especificadas.</summary>
      <param name="codeType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object that indicates the type for which to generate code.">Objeto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> que indica el tipo para el que se va a generar código.</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which output code is sent.">
        <see cref="T:System.IO.TextWriter" /> al que se envía el código de salida.</param>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que indica las opciones que se van a utilizar para generar código.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Este método y el método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> no se reemplazan en una clase derivada.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo">
      <summary vsli:raw="Returns the language provider and compiler configuration settings for this computer.">Devuelve los valores de configuración del proveedor y compilador de lenguaje de este equipo.</summary>
      <returns vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerInfo&quot; /&gt; representing the settings of all configured &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementations.">Matriz de tipo <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> que representa los valores de configuración de todas las implementaciones de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> configuradas.</returns>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">El llamador no dispone del permiso requerido.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
      <summary vsli:raw="Returns the language provider and compiler configuration settings for the specified language.">Devuelve la configuración del proveedor y compilador del lenguaje especificado.</summary>
      <param name="language" vsli:raw="A language name.">Nombre de lenguaje.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerInfo&quot; /&gt; object populated with settings of the configured &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementation.">Objeto <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> que contiene los valores de configuración de la implementación de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> configurada.</returns>
      <exception cref="T:System.Configuration.ConfigurationException" vsli:raw="The &lt;paramref name=&quot;language&quot; /&gt; does not have a configured provider on this computer.">
        <paramref name="language" /> no tiene un proveedor configurado en este equipo.</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException" vsli:raw="The &lt;paramref name=&quot;language&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">El valor de <paramref name="language" /> es <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">El llamador no dispone del permiso requerido.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetConverter(System.Type)">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified data type.">Obtiene un <see cref="T:System.ComponentModel.TypeConverter" /> para el tipo de datos especificado.</summary>
      <param name="type" vsli:raw="The type of object to retrieve a type converter for.">Tipo de objeto para el que se recupera un convertidor de tipo.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified type, or &lt;see langword=&quot;null&quot; /&gt; if a &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified type cannot be found.">
        <see cref="T:System.ComponentModel.TypeConverter" /> para el tipo especificado o <see langword="null" /> si no se encuentra <see cref="T:System.ComponentModel.TypeConverter" /> para el tipo especificado.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
      <summary vsli:raw="Returns a language name associated with the specified file name extension, as configured in the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; compiler configuration section.">Devuelve un nombre de lenguaje asociado a la extensión de nombre de archivo especificada, tal como se define en la sección de configuración del compilador <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />.</summary>
      <param name="extension" vsli:raw="A file name extension.">Extensión de nombre de archivo.</param>
      <returns vsli:raw="A language name associated with the file name extension, as configured in the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; compiler configuration settings.">Nombre de lenguaje asociado a la extensión de nombre de archivo, tal como se define en la configuración del compilador <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />.</returns>
      <exception cref="T:System.Configuration.ConfigurationException" vsli:raw="The &lt;paramref name=&quot;extension&quot; /&gt; does not have a configured language provider on this computer.">
        <paramref name="extension" /> no tiene un proveedor de lenguaje configurado en este equipo.</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException" vsli:raw="The &lt;paramref name=&quot;extension&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">El valor de <paramref name="extension" /> es <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">El llamador no dispone del permiso requerido.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Gets the type indicated by the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt;.">Obtiene el tipo indicado por el <see cref="T:System.CodeDom.CodeTypeReference" /> especificado.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type to return.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo que se va a devolver.</param>
      <returns vsli:raw="A text representation of the specified type, formatted for the language in which code is generated by this code generator. In Visual Basic, for example, passing in a &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; for the &lt;see cref=&quot;T:System.Int32&quot; /&gt; type will return &quot;Integer&quot;.">Representación de texto del tipo especificado, con el formato que corresponde al lenguaje en el que este generador de código genera el código. En Visual Basic, por ejemplo, al pasar <see cref="T:System.CodeDom.CodeTypeReference" /> para el tipo <see cref="T:System.Int32" />, se devolverá "Integer".</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Este método y el método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> no se reemplazan en una clase derivada.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
      <summary vsli:raw="Tests whether a file name extension has an associated &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementation configured on the computer.">Comprueba si una extensión de nombre de archivo tiene configurada una implementación de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> asociada en el equipo.</summary>
      <param name="extension" vsli:raw="A file name extension.">Extensión de nombre de archivo.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementation is configured for the specified file name extension; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si se ha configurado una implementación de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> para la extensión de nombre de archivo especificada; de lo contrario, es <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;extension&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">El valor de <paramref name="extension" /> es <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">El llamador no dispone del permiso requerido.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
      <summary vsli:raw="Tests whether a language has a &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementation configured on the computer.">Comprueba si un lenguaje tiene una implementación de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> configurada en el equipo.</summary>
      <param name="language" vsli:raw="The language name.">Nombre del lenguaje.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementation is configured for the specified language; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si se ha configurado una implementación de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> para el lenguaje especificado; de lo contrario, es <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;language&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">El valor de <paramref name="language" /> es <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">El llamador no dispone del permiso requerido.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
      <summary vsli:raw="Returns a value that indicates whether the specified value is a valid identifier for the current language.">Devuelve un valor que indica si el valor especificado es un identificador válido para el lenguaje actual.</summary>
      <param name="value" vsli:raw="The value to verify as a valid identifier.">Valor que se va a comprobar como identificador válido.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;value&quot; /&gt; parameter is a valid identifier; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el parámetro <paramref name="value" /> es un identificador válido; en caso contrario, es <see langword="false" />.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Este método y el método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> no se reemplazan en una clase derivada.</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeDomProvider.LanguageOptions">
      <summary vsli:raw="Gets a language features identifier.">Obtiene un identificador de características de lenguaje.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.LanguageOptions&quot; /&gt; that indicates special features of the language.">
        <see cref="T:System.CodeDom.Compiler.LanguageOptions" /> que indica las características especiales del lenguaje.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
      <summary vsli:raw="Compiles the code read from the specified text stream into a &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt;.">Compila en <see cref="T:System.CodeDom.CodeCompileUnit" /> el código leído de la secuencia de texto especificada.</summary>
      <param name="codeStream" vsli:raw="A &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; object that is used to read the code to be parsed.">Objeto <see cref="T:System.IO.TextReader" /> que se utiliza para leer el código que se va a analizar.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; that contains a representation of the parsed code.">Un objeto <see cref="T:System.CodeDom.CodeCompileUnit" /> que contiene una representación del código analizado.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Este método y el método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> no se reemplazan en una clase derivada.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary vsli:raw="Returns a value indicating whether the specified code generation support is provided.">Devuelve un valor que indica si se proporciona la compatibilidad especificada para la generación de código.</summary>
      <param name="generatorSupport" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.GeneratorSupport&quot; /&gt; object that indicates the type of code generation support to verify.">Objeto <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> que indica el tipo de compatibilidad para generación de código que se va a comprobar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified code generation support is provided; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si se proporciona la compatibilidad de generación de código especificada; en caso contrario, es <see langword="false" />.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Este método y el método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> no se reemplazan en una clase derivada.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeGenerator">
      <summary vsli:raw="Provides an example implementation of the &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeGenerator&quot; /&gt; interface. This class is abstract.">Proporciona una implementación de ejemplo de la interfaz <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />. Esta clase es abstracta.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGenerator&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.Compiler.CodeGenerator" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ContinueOnNewLine(System.String)">
      <summary vsli:raw="Generates a line-continuation character and outputs the specified string on a new line.">Genera un carácter de continuación de línea y envía la cadena especificada a una nueva línea.</summary>
      <param name="st" vsli:raw="The string to write on the new line.">Cadena que se va a escribir en la línea nueva.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.CreateEscapedIdentifier(System.String)">
      <summary vsli:raw="Creates an escaped identifier for the specified value.">Crea un identificador de escape para el valor especificado.</summary>
      <param name="value" vsli:raw="The string to create an escaped identifier for.">Cadena para crear un identificador de escape.</param>
      <returns vsli:raw="The escaped identifier for the value.">Identificador de escape para el valor.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.CreateValidIdentifier(System.String)">
      <summary vsli:raw="Creates a valid identifier for the specified value.">Crea un identificador válido para el valor especificado.</summary>
      <param name="value" vsli:raw="A string to create a valid identifier for.">Cadena para crear un identificador válido.</param>
      <returns vsli:raw="A valid identifier for the value.">Identificador válido para el valor.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentClass">
      <summary vsli:raw="Gets the code type declaration for the current class.">Obtiene la declaración de tipos de código para la clase actual.</summary>
      <returns vsli:raw="The code type declaration for the current class.">Declaración de tipos de código para la clase actual.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentMember">
      <summary vsli:raw="Gets the current member of the class.">Obtiene el miembro actual de la clase.</summary>
      <returns vsli:raw="The current member of the class.">Miembro actual de la clase.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentMemberName">
      <summary vsli:raw="Gets the current member name.">Obtiene el nombre del miembro actual.</summary>
      <returns vsli:raw="The name of the current member.">Nombre del miembro actual.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentTypeName">
      <summary vsli:raw="Gets the current class name.">Obtiene el nombre de la clase actual.</summary>
      <returns vsli:raw="The current class name.">Nombre de la clase actual.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArgumentReferenceExpression(System.CodeDom.CodeArgumentReferenceExpression)">
      <summary vsli:raw="Generates code for the specified argument reference expression.">Genera código para la expresión de referencia de argumento especificada.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeArgumentReferenceExpression&quot; /&gt; that indicates the expression to generate code for.">
        <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" /> que indica la expresión para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArrayCreateExpression(System.CodeDom.CodeArrayCreateExpression)">
      <summary vsli:raw="Generates code for the specified array creation expression.">Genera código para la expresión de creación de matrices especificada.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; that indicates the expression to generate code for.">
        <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> que indica la expresión para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArrayIndexerExpression(System.CodeDom.CodeArrayIndexerExpression)">
      <summary vsli:raw="Generates code for the specified array indexer expression.">Genera código para la expresión de indizador de matrices especificada.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeArrayIndexerExpression&quot; /&gt; that indicates the expression to generate code for.">
        <see cref="T:System.CodeDom.CodeArrayIndexerExpression" /> que indica la expresión para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAssignStatement(System.CodeDom.CodeAssignStatement)">
      <summary vsli:raw="Generates code for the specified assignment statement.">Genera código para la instrucción de asignación especificada.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAssignStatement&quot; /&gt; that indicates the statement to generate code for.">
        <see cref="T:System.CodeDom.CodeAssignStatement" /> que indica la instrucción para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttachEventStatement(System.CodeDom.CodeAttachEventStatement)">
      <summary vsli:raw="Generates code for the specified attach event statement.">Genera código para la instrucción especificada de eventos relacionados.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttachEventStatement&quot; /&gt; that indicates the statement to generate code for.">
        <see cref="T:System.CodeDom.CodeAttachEventStatement" /> que indica la instrucción para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttributeDeclarationsEnd(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary vsli:raw="Generates code for the specified attribute block end.">Genera código para el final del bloque de atributos especificado.</summary>
      <param name="attributes" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; that indicates the end of the attribute block to generate code for.">
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> que indica el final del bloque de atributos para el que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttributeDeclarationsStart(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary vsli:raw="Generates code for the specified attribute block start.">Genera código para el inicio del bloque de atributos especificado.</summary>
      <param name="attributes" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; that indicates the start of the attribute block to generate code for.">
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> que indica el inicio del bloque de atributos para el que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateBaseReferenceExpression(System.CodeDom.CodeBaseReferenceExpression)">
      <summary vsli:raw="Generates code for the specified base reference expression.">Genera código para la expresión de referencia base especificada.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeBaseReferenceExpression&quot; /&gt; that indicates the expression to generate code for.">
        <see cref="T:System.CodeDom.CodeBaseReferenceExpression" /> que indica la expresión para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateBinaryOperatorExpression(System.CodeDom.CodeBinaryOperatorExpression)">
      <summary vsli:raw="Generates code for the specified binary operator expression.">Genera código para la expresión de operador binario especificada.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeBinaryOperatorExpression&quot; /&gt; that indicates the expression to generate code for.">
        <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" /> que indica la expresión para la que se va a generar código.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;e&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="e" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCastExpression(System.CodeDom.CodeCastExpression)">
      <summary vsli:raw="Generates code for the specified cast expression.">Genera código para la expresión de conversión especificada.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCastExpression&quot; /&gt; that indicates the expression to generate code for.">
        <see cref="T:System.CodeDom.CodeCastExpression" /> que indica la expresión para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified class member using the specified text writer and code generator options.">Genera código para el miembro de clase especificado usando las opciones del generador de código y el programa de escritura de texto especificados.</summary>
      <param name="member" vsli:raw="The class member to generate code for.">Miembro de clase para el que se va a generar código.</param>
      <param name="writer" vsli:raw="The text writer to output code to.">Escritor de texto que recibe la salida de código.</param>
      <param name="options" vsli:raw="The options to use when generating the code.">Opciones que se utilizarán cuando se genere el código.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.CodeDom.Compiler.CodeGenerator.Output&quot; /&gt; property is not &lt;see langword=&quot;null&quot; /&gt;.">La propiedad <see cref="P:System.CodeDom.Compiler.CodeGenerator.Output" /> no es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateComment(System.CodeDom.CodeComment)">
      <summary vsli:raw="Generates code for the specified comment.">Genera código para el comentario especificado.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeComment&quot; /&gt; to generate code for.">
        <see cref="T:System.CodeDom.CodeComment" /> para el que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCommentStatement(System.CodeDom.CodeCommentStatement)">
      <summary vsli:raw="Generates code for the specified comment statement.">Genera código para la instrucción de comentario especificada.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">Instrucción para la que se va a generar código.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;P:System.CodeDom.CodeCommentStatement.Comment&quot; /&gt; property of &lt;paramref name=&quot;e&quot; /&gt; is not set.">La propiedad <see cref="P:System.CodeDom.CodeCommentStatement.Comment" /> de <paramref name="e" /> no está establecida.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCommentStatements(System.CodeDom.CodeCommentStatementCollection)">
      <summary vsli:raw="Generates code for the specified comment statements.">Genera código para las instrucciones de comentarios especificadas.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Expresión para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnit(System.CodeDom.CodeCompileUnit)">
      <summary vsli:raw="Generates code for the specified compile unit.">Genera código para la unidad de compilación especificada.</summary>
      <param name="e" vsli:raw="The compile unit to generate code for.">Unidad de compilación para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnitEnd(System.CodeDom.CodeCompileUnit)">
      <summary vsli:raw="Generates code for the end of a compile unit.">Genera código para el final de una unidad de compilación.</summary>
      <param name="e" vsli:raw="The compile unit to generate code for.">Unidad de compilación para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnitStart(System.CodeDom.CodeCompileUnit)">
      <summary vsli:raw="Generates code for the start of a compile unit.">Genera código para el inicio de una unidad de compilación.</summary>
      <param name="e" vsli:raw="The compile unit to generate code for.">Unidad de compilación para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateConditionStatement(System.CodeDom.CodeConditionStatement)">
      <summary vsli:raw="Generates code for the specified conditional statement.">Genera código para la instrucción condicional especificada.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">Instrucción para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateConstructor(System.CodeDom.CodeConstructor,System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Generates code for the specified constructor.">Genera código para el constructor especificado.</summary>
      <param name="e" vsli:raw="The constructor to generate code for.">Constructor para el que se va a generar código.</param>
      <param name="c" vsli:raw="The type of the object that this constructor constructs.">Tipo del objeto que construye este constructor.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDecimalValue(System.Decimal)">
      <summary vsli:raw="Generates code for the specified decimal value.">Genera código para el valor decimal especificado.</summary>
      <param name="d" vsli:raw="The decimal value to generate code for.">Valor decimal para el que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDefaultValueExpression(System.CodeDom.CodeDefaultValueExpression)">
      <summary vsli:raw="Generates code for the specified reference to a default value.">Genera código para la referencia especificada a un valor predeterminado.</summary>
      <param name="e" vsli:raw="The reference to generate code for.">Referencia para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDelegateCreateExpression(System.CodeDom.CodeDelegateCreateExpression)">
      <summary vsli:raw="Generates code for the specified delegate creation expression.">Genera código para la expresión de creación de delegado especificada.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Expresión para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDelegateInvokeExpression(System.CodeDom.CodeDelegateInvokeExpression)">
      <summary vsli:raw="Generates code for the specified delegate invoke expression.">Genera código para la expresión de invocación de delegado especificada.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Expresión para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDirectionExpression(System.CodeDom.CodeDirectionExpression)">
      <summary vsli:raw="Generates code for the specified direction expression.">Genera código para la expresión de dirección especificada.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Expresión para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDirectives(System.CodeDom.CodeDirectiveCollection)">
      <summary vsli:raw="Generates code for the specified code directives.">Genera código para las directivas de código especificadas.</summary>
      <param name="directives" vsli:raw="The code directives to generate code for.">Directivas de código para las que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDoubleValue(System.Double)">
      <summary vsli:raw="Generates code for a double-precision floating point number.">Genera código para un número de punto flotante de precisión doble.</summary>
      <param name="d" vsli:raw="The value to generate code for.">Valor para el que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEntryPointMethod(System.CodeDom.CodeEntryPointMethod,System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Generates code for the specified entry point method.">Genera código para el método de punto de entrada especificado.</summary>
      <param name="e" vsli:raw="The entry point for the code.">Punto de entrada del código.</param>
      <param name="c" vsli:raw="The code that declares the type.">Código que declara el tipo.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEvent(System.CodeDom.CodeMemberEvent,System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Generates code for the specified event.">Genera código para el evento especificado.</summary>
      <param name="e" vsli:raw="The member event to generate code for.">Evento de miembro para el que se va generar código.</param>
      <param name="c" vsli:raw="The type of the object that this event occurs on.">Tipo del objeto en el que se produce este evento.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEventReferenceExpression(System.CodeDom.CodeEventReferenceExpression)">
      <summary vsli:raw="Generates code for the specified event reference expression.">Genera código para la expresión de referencia de evento especificada.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Expresión para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateExpression(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Generates code for the specified code expression.">Genera código para la expresión de código especificada.</summary>
      <param name="e" vsli:raw="The code expression to generate code for.">Expresión de código para la que se va a generar código.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;e&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="e" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;e&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt;.">
        <paramref name="e" /> no es un <see cref="T:System.CodeDom.CodeStatement" /> válido.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateExpressionStatement(System.CodeDom.CodeExpressionStatement)">
      <summary vsli:raw="Generates code for the specified expression statement.">Genera código para la instrucción de expresión especificada.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">Instrucción para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateField(System.CodeDom.CodeMemberField)">
      <summary vsli:raw="Generates code for the specified member field.">Genera código para el campo de miembro especificado.</summary>
      <param name="e" vsli:raw="The field to generate code for.">Campo para el que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateFieldReferenceExpression(System.CodeDom.CodeFieldReferenceExpression)">
      <summary vsli:raw="Generates code for the specified field reference expression.">Genera código para la expresión de referencia de campo especificada.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Expresión para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateGotoStatement(System.CodeDom.CodeGotoStatement)">
      <summary vsli:raw="Generates code for the specified &lt;see langword=&quot;goto&quot; /&gt; statement.">Genera código para la instrucción <see langword="goto" /> especificada.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Expresión para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateIndexerExpression(System.CodeDom.CodeIndexerExpression)">
      <summary vsli:raw="Generates code for the specified indexer expression.">Genera código para la expresión de indizador especificada.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Expresión para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateIterationStatement(System.CodeDom.CodeIterationStatement)">
      <summary vsli:raw="Generates code for the specified iteration statement.">Genera código para la instrucción de iteración especificada.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">Instrucción para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLabeledStatement(System.CodeDom.CodeLabeledStatement)">
      <summary vsli:raw="Generates code for the specified labeled statement.">Genera código para la instrucción con etiqueta especificada.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">Instrucción para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLinePragmaEnd(System.CodeDom.CodeLinePragma)">
      <summary vsli:raw="Generates code for the specified line pragma end.">Genera código para el final de línea pragma especificado.</summary>
      <param name="e" vsli:raw="The end of the line pragma to generate code for.">Final de línea pragma para el que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLinePragmaStart(System.CodeDom.CodeLinePragma)">
      <summary vsli:raw="Generates code for the specified line pragma start.">Genera código para el inicio de línea pragma especificado.</summary>
      <param name="e" vsli:raw="The start of the line pragma to generate code for.">Inicio de línea pragma para el que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethod(System.CodeDom.CodeMemberMethod,System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Generates code for the specified method.">Genera código para el método especificado.</summary>
      <param name="e" vsli:raw="The member method to generate code for.">Método de miembro para el que se va a generar código.</param>
      <param name="c" vsli:raw="The type of the object that this method occurs on.">Tipo del objeto en el que se ejecuta este método.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodInvokeExpression(System.CodeDom.CodeMethodInvokeExpression)">
      <summary vsli:raw="Generates code for the specified method invoke expression.">Genera código para la expresión de invocación de método especificada.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Expresión para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodReferenceExpression(System.CodeDom.CodeMethodReferenceExpression)">
      <summary vsli:raw="Generates code for the specified method reference expression.">Genera código para la expresión de referencia de método especificada.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Expresión para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodReturnStatement(System.CodeDom.CodeMethodReturnStatement)">
      <summary vsli:raw="Generates code for the specified method return statement.">Genera código para la instrucción return de método especificada.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">Instrucción para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespace(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Generates code for the specified namespace.">Genera código para el espacio de nombres especificado.</summary>
      <param name="e" vsli:raw="The namespace to generate code for.">Espacio de nombres para el que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceEnd(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Generates code for the end of a namespace.">Genera código para el final de un espacio de nombres.</summary>
      <param name="e" vsli:raw="The namespace to generate code for.">Espacio de nombres para el que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceImport(System.CodeDom.CodeNamespaceImport)">
      <summary vsli:raw="Generates code for the specified namespace import.">Genera código para la importación de espacio de nombres especificada.</summary>
      <param name="e" vsli:raw="The namespace import to generate code for.">Importación de espacio de nombres para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceImports(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Generates code for the specified namespace import.">Genera código para la importación de espacio de nombres especificada.</summary>
      <param name="e" vsli:raw="The namespace import to generate code for.">Importación de espacio de nombres para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaces(System.CodeDom.CodeCompileUnit)">
      <summary vsli:raw="Generates code for the namespaces in the specified compile unit.">Genera código para el espacio de nombres en la unidad de compilación especificada.</summary>
      <param name="e" vsli:raw="The compile unit to generate namespaces for.">Unidad de compilación para la que se van a generar espacios de nombres.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceStart(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Generates code for the start of a namespace.">Genera código para el inicio de un espacio de nombres.</summary>
      <param name="e" vsli:raw="The namespace to generate code for.">Espacio de nombres para el que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateObjectCreateExpression(System.CodeDom.CodeObjectCreateExpression)">
      <summary vsli:raw="Generates code for the specified object creation expression.">Genera código para la expresión de creación de objeto especificada.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Expresión para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateParameterDeclarationExpression(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary vsli:raw="Generates code for the specified parameter declaration expression.">Genera código para la expresión de declaración de parámetros especificada.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Expresión para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePrimitiveExpression(System.CodeDom.CodePrimitiveExpression)">
      <summary vsli:raw="Generates code for the specified primitive expression.">Genera código para la expresión primitiva especificada.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Expresión para la que se va a generar código.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;e&quot; /&gt; uses an invalid data type. Only the following data types are valid:  &#xA;  &#xA;- string  &#xA;  &#xA;- char  &#xA;  &#xA;- byte  &#xA;  &#xA;- Int16  &#xA;  &#xA;- Int32  &#xA;  &#xA;- Int64  &#xA;&#xA;- Half&#xA;  &#xA;- Single  &#xA;  &#xA;- Double  &#xA;  &#xA;- Decimal">
        <paramref name="e" /> utiliza un tipo de datos no válido. Sólo los tipos de datos siguientes son válidos:

string
char
byte
Int16
Int32
Int64
Single
Double
Decimal</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateProperty(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Generates code for the specified property.">Genera código para la propiedad especificada.</summary>
      <param name="e" vsli:raw="The property to generate code for.">Propiedad para la que se va a generar código.</param>
      <param name="c" vsli:raw="The type of the object that this property occurs on.">Tipo del objeto en el que tiene lugar esta propiedad.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePropertyReferenceExpression(System.CodeDom.CodePropertyReferenceExpression)">
      <summary vsli:raw="Generates code for the specified property reference expression.">Genera código para la expresión de referencia de propiedad especificada.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Expresión para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePropertySetValueReferenceExpression(System.CodeDom.CodePropertySetValueReferenceExpression)">
      <summary vsli:raw="Generates code for the specified property set value reference expression.">Genera código para la expresión de referencia especificada del valor del conjunto de propiedades.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Expresión para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateRemoveEventStatement(System.CodeDom.CodeRemoveEventStatement)">
      <summary vsli:raw="Generates code for the specified remove event statement.">Genera código para la instrucción de eliminación de evento especificada.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">Instrucción para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSingleFloatValue(System.Single)">
      <summary vsli:raw="Generates code for a single-precision floating point number.">Genera código para un número de punto flotante de precisión sencilla.</summary>
      <param name="s" vsli:raw="The value to generate code for.">Valor para el que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetCompileUnit(System.CodeDom.CodeSnippetCompileUnit)">
      <summary vsli:raw="Outputs the code of the specified literal code fragment compile unit.">Proporciona el código de la unidad de compilación de fragmento de código literal que se especifique.</summary>
      <param name="e" vsli:raw="The literal code fragment compile unit to generate code for.">Unidad de compilación de fragmento de código literal para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetExpression(System.CodeDom.CodeSnippetExpression)">
      <summary vsli:raw="Outputs the code of the specified literal code fragment expression.">Proporciona los resultados relacionados con el código de la expresión de fragmento de código literal que se especifique.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Expresión para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetMember(System.CodeDom.CodeSnippetTypeMember)">
      <summary vsli:raw="Outputs the code of the specified literal code fragment class member.">Proporciona los resultados relacionados con el código del miembro de clase de fragmento de código literal que se especifique.</summary>
      <param name="e" vsli:raw="The member to generate code for.">Miembro para el que se va generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetStatement(System.CodeDom.CodeSnippetStatement)">
      <summary vsli:raw="Outputs the code of the specified literal code fragment statement.">Proporciona los resultados relacionados con el código de la instrucción de fragmento de código literal que se especifique.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">Instrucción para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateStatement(System.CodeDom.CodeStatement)">
      <summary vsli:raw="Generates code for the specified statement.">Genera código para la instrucción especificada.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">Instrucción para la que se va a generar código.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;e&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt;.">
        <paramref name="e" /> no es un <see cref="T:System.CodeDom.CodeStatement" /> válido.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateStatements(System.CodeDom.CodeStatementCollection)">
      <summary vsli:raw="Generates code for the specified statement collection.">Genera código para la colección de instrucciones especificada.</summary>
      <param name="stms">Instrucciones para las que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateThisReferenceExpression(System.CodeDom.CodeThisReferenceExpression)">
      <summary vsli:raw="Generates code for the specified this reference expression.">Genera código para la expresión de referencia especificada.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Expresión para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateThrowExceptionStatement(System.CodeDom.CodeThrowExceptionStatement)">
      <summary vsli:raw="Generates code for the specified throw exception statement.">Genera código para la instrucción de producción de excepción especificada.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">Instrucción para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTryCatchFinallyStatement(System.CodeDom.CodeTryCatchFinallyStatement)">
      <summary vsli:raw="Generates code for the specified &lt;c&gt;try-catch-finally&lt;/c&gt; statement.">Genera código para la instrucción <see langword="try...catch...finally" /> especificada.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">Instrucción para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeConstructor(System.CodeDom.CodeTypeConstructor)">
      <summary vsli:raw="Generates code for the specified class constructor.">Genera código para el constructor de clase especificado.</summary>
      <param name="e" vsli:raw="The class constructor to generate code for.">Constructor de clase para el que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeEnd(System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Generates code for the specified end of the class.">Genera código para el final de la clase especificado.</summary>
      <param name="e" vsli:raw="The end of the class to generate code for.">Final de la clase para el que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeOfExpression(System.CodeDom.CodeTypeOfExpression)">
      <summary vsli:raw="Generates code for the specified type of expression.">Genera código para el tipo de expresión especificado.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Expresión para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeReferenceExpression(System.CodeDom.CodeTypeReferenceExpression)">
      <summary vsli:raw="Generates code for the specified type reference expression.">Genera código para la expresión de referencia de tipo especificada.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Expresión para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypes(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Generates code for the specified namespace and the classes it contains.">Genera código para el espacio de nombres especificado y para las clases que contiene.</summary>
      <param name="e" vsli:raw="The namespace to generate classes for.">Espacio de nombres para el que se van a generar clases.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeStart(System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Generates code for the specified start of the class.">Genera código para el inicio especificado de la clase.</summary>
      <param name="e" vsli:raw="The start of the class to generate code for.">Inicio de la clase para el que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateVariableDeclarationStatement(System.CodeDom.CodeVariableDeclarationStatement)">
      <summary vsli:raw="Generates code for the specified variable declaration statement.">Genera código para la instrucción de declaración de variables especificada.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">Instrucción para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateVariableReferenceExpression(System.CodeDom.CodeVariableReferenceExpression)">
      <summary vsli:raw="Generates code for the specified variable reference expression.">Genera código para la expresión de referencia de variable especificada.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Expresión para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Gets the name of the specified data type.">Obtiene el nombre del tipo de datos especificado.</summary>
      <param name="value" vsli:raw="The type whose name will be returned.">Tipo cuyo nombre se devolverá.</param>
      <returns vsli:raw="The name of the data type reference.">Nombre de la referencia de tipo de datos.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Indent">
      <summary vsli:raw="Gets or sets the amount of spaces to indent each indentation level.">Obtiene o establece los espacios que se van a aplicar a cada nivel de sangría.</summary>
      <returns vsli:raw="The number of spaces to indent for each indentation level.">Número de espacios donde aplicar una sangría a cada nivel de sangría.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentClass">
      <summary vsli:raw="Gets a value indicating whether the current object being generated is a class.">Obtiene un valor que indica si el objeto que se está generando en la actualidad es una clase.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current object is a class; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el objeto actual es una clase; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentDelegate">
      <summary vsli:raw="Gets a value indicating whether the current object being generated is a delegate.">Obtiene un valor que indica si el objeto que se está generando en la actualidad es un delegado.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current object is a delegate; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el objeto actual es un delegado; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentEnum">
      <summary vsli:raw="Gets a value indicating whether the current object being generated is an enumeration.">Obtiene un valor que indica si el objeto que se está generando en la actualidad es una enumeración.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current object is an enumeration; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el objeto actual es una enumeración; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentInterface">
      <summary vsli:raw="Gets a value indicating whether the current object being generated is an interface.">Obtiene un valor que indica si el objeto que se está generando en la actualidad es una interfaz.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current object is an interface; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el objeto actual es una interfaz; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentStruct">
      <summary vsli:raw="Gets a value indicating whether the current object being generated is a value type or struct.">Obtiene un valor que indica si el objeto que se está generando en la actualidad es un tipo de valor o struct.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current object is a value type or struct; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el objeto actual es un tipo de valor o struct; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.IsValidIdentifier(System.String)">
      <summary vsli:raw="Gets a value indicating whether the specified value is a valid identifier.">Obtiene un valor que indica si el valor especificado es un identificador válido.</summary>
      <param name="value" vsli:raw="The value to test for conflicts with valid identifiers.">Valor que hay que comprobar para ver si existen conflictos con identificadores válidos.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value is a valid identifier; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el valor es un identificador válido; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.IsValidLanguageIndependentIdentifier(System.String)">
      <summary vsli:raw="Gets a value indicating whether the specified string is a valid identifier.">Obtiene un valor que indica si la cadena especificada es un identificador válido.</summary>
      <param name="value" vsli:raw="The string to test for validity.">Cadena que hay que comprobar para ver si es válida.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified string is a valid identifier; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si la cadena especificada es un identificador válido; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.NullToken">
      <summary vsli:raw="Gets the token that represents &lt;see langword=&quot;null&quot; /&gt;.">Obtiene el token que representa <see langword="null" />.</summary>
      <returns vsli:raw="The token that represents &lt;see langword=&quot;null&quot; /&gt;.">Token que representa <see langword="null" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Options">
      <summary vsli:raw="Gets the options to be used by the code generator.">Obtiene las opciones que va a utilizar el generador de código.</summary>
      <returns vsli:raw="An object that indicates the options for the code generator to use.">Objeto que indica las opciones que va a utilizar el generador de código.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Output">
      <summary vsli:raw="Gets the text writer to use for output.">Obtiene el escritor de texto que se va a utilizar para la salida.</summary>
      <returns vsli:raw="The text writer to use for output.">Escritor de texto que se va a utilizar para la salida.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputAttributeArgument(System.CodeDom.CodeAttributeArgument)">
      <summary vsli:raw="Outputs an argument in an attribute block.">Devuelve un argumento dentro de un bloque de atributos.</summary>
      <param name="arg" vsli:raw="The attribute argument to generate code for.">Argumento de atributo para el que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputAttributeDeclarations(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary vsli:raw="Generates code for the specified attribute declaration collection.">Genera código para la colección de declaraciones de atributos especificada.</summary>
      <param name="attributes" vsli:raw="The attributes to generate code for.">Atributos para los que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputDirection(System.CodeDom.FieldDirection)">
      <summary vsli:raw="Generates code for the specified &lt;see cref=&quot;T:System.CodeDom.FieldDirection&quot; /&gt;.">Genera código para el <see cref="T:System.CodeDom.FieldDirection" /> especificado.</summary>
      <param name="dir" vsli:raw="One of the enumeration values that indicates the attribute of the field.">Uno de los valores de enumeración que indica el atributo del campo.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputExpressionList(System.CodeDom.CodeExpressionCollection)">
      <summary vsli:raw="Generates code for the specified expression list.">Genera código para la lista de expresiones especificada.</summary>
      <param name="expressions" vsli:raw="The expressions to generate code for.">Expresiones para las que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputExpressionList(System.CodeDom.CodeExpressionCollection,System.Boolean)">
      <summary vsli:raw="Generates code for the specified expression list.">Genera código para la lista de expresiones especificada.</summary>
      <param name="expressions" vsli:raw="The expressions to generate code for.">Expresiones para las que se va a generar código.</param>
      <param name="newlineBetweenItems" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to insert a new line after each item; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para insertar una línea nueva después de cada elemento; de lo contrario, <see langword="false" />.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputFieldScopeModifier(System.CodeDom.MemberAttributes)">
      <summary vsli:raw="Outputs a field scope modifier that corresponds to the specified attributes.">Devuelve un modificador de ámbito de campo que se corresponde con los atributos especificados.</summary>
      <param name="attributes" vsli:raw="One of the enumeration values that specifies the attributes.">Uno de los valores de enumeración que especifica los atributos.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputIdentifier(System.String)">
      <summary vsli:raw="Outputs the specified identifier.">Devuelve el identificador especificado.</summary>
      <param name="ident" vsli:raw="The identifier to output.">Identificador que se va a devolver.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputMemberAccessModifier(System.CodeDom.MemberAttributes)">
      <summary vsli:raw="Generates code for the specified member access modifier.">Genera código para el modificador de acceso de miembro especificado.</summary>
      <param name="attributes" vsli:raw="One of the enumeration values that indicates the member access modifier to generate code for.">Uno de los valores de enumeración que indica el modificador de acceso de miembro para el que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputMemberScopeModifier(System.CodeDom.MemberAttributes)">
      <summary vsli:raw="Generates code for the specified member scope modifier.">Genera código para el modificador de ámbito de miembro especificado.</summary>
      <param name="attributes" vsli:raw="One of the enumeration values that indicates the member scope modifier to generate code for.">Uno de los valores de enumeración que indica el modificador de ámbito de miembro para el que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputOperator(System.CodeDom.CodeBinaryOperatorType)">
      <summary vsli:raw="Generates code for the specified operator.">Genera código para el operador especificado.</summary>
      <param name="op" vsli:raw="The operator to generate code for.">Operador para el que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputParameters(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary vsli:raw="Generates code for the specified parameters.">Genera código para los parámetros especificados.</summary>
      <param name="parameters" vsli:raw="The parameter declaration expressions to generate code for.">Expresiones de declaración de parámetros para las que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputType(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Generates code for the specified type.">Genera código para el tipo especificado.</summary>
      <param name="typeRef" vsli:raw="The type to generate code for.">Tipo para el que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputTypeAttributes(System.Reflection.TypeAttributes,System.Boolean,System.Boolean)">
      <summary vsli:raw="Generates code for the specified type attributes.">Genera código para los atributos de tipo especificados.</summary>
      <param name="attributes" vsli:raw="One of the enumeration values that indicates the type attributes to generate code for.">Uno de los valores de enumeración que indica los atributos de tipo para los que se va a generar código.</param>
      <param name="isStruct" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is a struct; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el tipo es un struct; en caso contrario, es <see langword="false" />.</param>
      <param name="isEnum" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is an enum; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el tipo es una enumeración; en caso contrario, es <see langword="false" />.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputTypeNamePair(System.CodeDom.CodeTypeReference,System.String)">
      <summary vsli:raw="Generates code for the specified object type and name pair.">Genera código para el par de tipo y nombre de objeto especificado.</summary>
      <param name="typeRef" vsli:raw="The type.">Tipo.</param>
      <param name="name" vsli:raw="The name for the object.">Nombre para el objeto.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.QuoteSnippetString(System.String)">
      <summary vsli:raw="Converts the specified string by formatting it with escape codes.">Convierte la cadena especificada dándole formato con códigos de escape.</summary>
      <param name="value" vsli:raw="The string to convert.">Cadena que se va a convertir.</param>
      <returns vsli:raw="The converted string.">Cadena convertida.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary vsli:raw="Gets a value indicating whether the specified code generation support is provided.">Obtiene un valor que indica si se proporciona la compatibilidad de generación de código especificada.</summary>
      <param name="support" vsli:raw="The type of code generation support to test for.">Tipo de compatibilidad de generación de código que se va a comprobar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified code generation support is provided; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si se proporciona la compatibilidad de generación de código especificada; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#CreateEscapedIdentifier(System.String)">
      <summary vsli:raw="Creates an escaped identifier for the specified value.">Crea un identificador de escape para el valor especificado.</summary>
      <param name="value" vsli:raw="The string to create an escaped identifier for.">Cadena para crear un identificador de escape.</param>
      <returns vsli:raw="The escaped identifier for the value.">Identificador de escape para el valor.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#CreateValidIdentifier(System.String)">
      <summary vsli:raw="Creates a valid identifier for the specified value.">Crea un identificador válido para el valor especificado.</summary>
      <param name="value" vsli:raw="The string to generate a valid identifier for.">Cadena para generar un identificador válido.</param>
      <returns vsli:raw="A valid identifier for the specified value.">Identificador válido para el valor especificado.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) compilation unit and outputs it to the specified text writer using the specified options.">Genera código para la unidad de compilación de Code Document Object Model (CodeDOM) especificada y lo envía al escritor de texto especificado mediante las opciones especificadas.</summary>
      <param name="e" vsli:raw="The CodeDOM compilation unit to generate code for.">Unidad de compilación CodeDOM para la que se va a generar código.</param>
      <param name="w" vsli:raw="The text writer to output code to.">Escritor de texto que recibe la salida de código.</param>
      <param name="o" vsli:raw="The options to use for generating code.">Opciones que se van a usar para generar código.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;w&quot; /&gt; is not available. &lt;paramref name=&quot;w&quot; /&gt; may have been closed before the method call was made.">
        <paramref name="w" /> no está disponible. <paramref name="w" /> se puede haber cerrado antes de realiza la llamada al método.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) expression and outputs it to the specified text writer.">Genera código para la expresión de Code Document Object Model (CodeDOM) especificada y lo envía al escritor de texto especificado.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Expresión para la que se va a generar código.</param>
      <param name="w" vsli:raw="The text writer to output code to.">Escritor de texto que recibe la salida de código.</param>
      <param name="o" vsli:raw="The options to use for generating code.">Opciones que se van a usar para generar código.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;w&quot; /&gt; is not available. &lt;paramref name=&quot;w&quot; /&gt; may have been closed before the method call was made.">
        <paramref name="w" /> no está disponible. <paramref name="w" /> se puede haber cerrado antes de realiza la llamada al método.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) namespace and outputs it to the specified text writer using the specified options.">Genera código para el espacio de nombres de Code Document Object Model (CodeDOM) especificado y lo envía al escritor de texto especificado mediante las opciones especificadas.</summary>
      <param name="e" vsli:raw="The namespace to generate code for.">Espacio de nombres para el que se va a generar código.</param>
      <param name="w" vsli:raw="The text writer to output code to.">Escritor de texto que recibe la salida de código.</param>
      <param name="o" vsli:raw="The options to use for generating code.">Opciones que se van a usar para generar código.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;w&quot; /&gt; is not available. &lt;paramref name=&quot;w&quot; /&gt; may have been closed before the method call was made.">
        <paramref name="w" /> no está disponible. <paramref name="w" /> se puede haber cerrado antes de realiza la llamada al método.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) statement and outputs it to the specified text writer using the specified options.">Genera código para la instrucción de Code Document Object Model (CodeDOM) especificada y lo envía al escritor de texto especificado mediante las opciones especificadas.</summary>
      <param name="e" vsli:raw="The statement that contains the CodeDOM elements to translate.">Instrucción que contiene los elementos CodeDOM que se van a traducir.</param>
      <param name="w" vsli:raw="The text writer to output code to.">Escritor de texto que recibe la salida de código.</param>
      <param name="o" vsli:raw="The options to use for generating code.">Opciones que se van a usar para generar código.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;w&quot; /&gt; is not available. &lt;paramref name=&quot;w&quot; /&gt; may have been closed before the method call was made.">
        <paramref name="w" /> no está disponible. <paramref name="w" /> se puede haber cerrado antes de realiza la llamada al método.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) type declaration and outputs it to the specified text writer using the specified options.">Genera código para la declaración de Code Document Object Model (CodeDOM) especificada y lo envía al escritor de texto especificado mediante las opciones especificadas.</summary>
      <param name="e" vsli:raw="The type to generate code for.">Tipo para el que se va a generar código.</param>
      <param name="w" vsli:raw="The text writer to output code to.">Escritor de texto que recibe la salida de código.</param>
      <param name="o" vsli:raw="The options to use for generating code.">Opciones que se van a usar para generar código.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;w&quot; /&gt; is not available. &lt;paramref name=&quot;w&quot; /&gt; may have been closed before the method call was made.">
        <paramref name="w" /> no está disponible. <paramref name="w" /> se puede haber cerrado antes de realiza la llamada al método.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Gets the type indicated by the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt;.">Obtiene el tipo indicado por el <see cref="T:System.CodeDom.CodeTypeReference" /> especificado.</summary>
      <param name="type" vsli:raw="The type to return.">Tipo que se devuelve.</param>
      <returns vsli:raw="The name of the data type reference.">Nombre de la referencia de tipo de datos.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#IsValidIdentifier(System.String)">
      <summary vsli:raw="Gets a value that indicates whether the specified value is a valid identifier for the current language.">Obtiene un valor que indica si el valor especificado es un identificador válido para el lenguaje actual.</summary>
      <param name="value" vsli:raw="The value to test.">Valor que se va a comprobar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;value&quot; /&gt; parameter is a valid identifier; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el parámetro <paramref name="value" /> es un identificador válido; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary vsli:raw="Gets a value indicating whether the generator provides support for the language features represented by the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.GeneratorSupport&quot; /&gt; object.">Obtiene un valor que indica si el generador proporciona compatibilidad para las características de lenguaje representadas por el objeto <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> especificado.</summary>
      <param name="support" vsli:raw="The capabilities to test the generator for.">Características para las que se va a comprobar el generador.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified capabilities are supported; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si se admiten las funciones especificadas; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#ValidateIdentifier(System.String)">
      <summary vsli:raw="Throws an exception if the specified value is not a valid identifier.">Provoca una excepción si el valor especificado no es un identificador válido.</summary>
      <param name="value" vsli:raw="The identifier to validate.">El identificador que se debe validar.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifier(System.String)">
      <summary vsli:raw="Throws an exception if the specified string is not a valid identifier.">Inicia una excepción si la cadena especificada no es un identificador válido.</summary>
      <param name="value" vsli:raw="The identifier to test for validity as an identifier.">Identificador que hay que comprobar si es válido como tal.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified identifier is invalid or conflicts with reserved or language keywords.">Si el identificador especificado no es válido o se producen conflictos con palabras clave o reservadas del lenguaje.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifiers(System.CodeDom.CodeObject)">
      <summary vsli:raw="Attempts to validate each identifier field contained in the specified &lt;see cref=&quot;T:System.CodeDom.CodeObject&quot; /&gt; or &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; tree.">Intenta validar cada campo identificador que está dentro del <see cref="T:System.CodeDom.CodeObject" /> o árbol <see cref="N:System.CodeDom" /> especificados.</summary>
      <param name="e" vsli:raw="An object to test for invalid identifiers.">Objeto que se someterá a pruebas en busca de identificadores no válidos.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified &lt;see cref=&quot;T:System.CodeDom.CodeObject&quot; /&gt; contains an invalid identifier.">El <see cref="T:System.CodeDom.CodeObject" /> especificado contiene un identificador no válido.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeGeneratorOptions">
      <summary vsli:raw="Represents a set of options used by a code generator.">Representa un conjunto de opciones utilizadas por un generador de código.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGeneratorOptions.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />.</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.BlankLinesBetweenMembers">
      <summary vsli:raw="Gets or sets a value indicating whether to insert blank lines between members.">Obtiene o establece un valor que indica si deben insertarse líneas en blanco entre miembros.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if blank lines should be inserted; otherwise, &lt;see langword=&quot;false&quot; /&gt;. By default, the value of this property is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> si deben insertarse líneas en blanco; en caso contrario, <see langword="false" />. De forma predeterminada, el valor de esta propiedad es <see langword="true" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.BracingStyle">
      <summary vsli:raw="Gets or sets the style to use for bracing.">Obtiene o establece el estilo que se va a utilizar para insertar llaves.</summary>
      <returns vsli:raw="A string containing the bracing style to use.">Cadena que contiene el estilo de inserción de llaves que se va a utilizar.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.ElseOnClosing">
      <summary vsli:raw="Gets or sets a value indicating whether to append an &lt;see langword=&quot;else&quot; /&gt;, &lt;see langword=&quot;catch&quot; /&gt;, or &lt;see langword=&quot;finally&quot; /&gt; block, including brackets, at the closing line of each previous &lt;see langword=&quot;if&quot; /&gt; or &lt;see langword=&quot;try&quot; /&gt; block.">Obtiene o establece un valor que indica si hay que agregar un bloque <see langword="else" />, <see langword="catch" /> o <see langword="finally" />, incluido entre llaves, en la línea de cierre de cada bloque <see langword="if" /> o <see langword="try" /> anterior.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an else should be appended; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default value of this property is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si hay que agregar un bloque else; en caso contrario, <see langword="false" />. El valor predeterminado de esta propiedad es <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.IndentString">
      <summary vsli:raw="Gets or sets the string to use for indentations.">Obtiene o establece la cadena que se va a utilizar para aplicar sangrías.</summary>
      <returns vsli:raw="A string containing the characters to use for indentations.">Cadena que contiene los caracteres que se van a utilizar para aplicar sangrías.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.Item(System.String)">
      <summary vsli:raw="Gets or sets the object at the specified index.">Obtiene o establece el objeto que se encuentra en el índice especificado.</summary>
      <param name="index" vsli:raw="The name associated with the object to retrieve.">Nombre asociado con el objeto que se va a recuperar.</param>
      <returns vsli:raw="The object associated with the specified name. If no object associated with the specified name exists in the collection, &lt;see langword=&quot;null&quot; /&gt;.">Objeto asociado con el nombre especificado. Si no existe ningún objeto asociado al nombre especificado en la colección, es <see langword="null" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.VerbatimOrder">
      <summary vsli:raw="Gets or sets a value indicating whether to generate members in the order in which they occur in member collections.">Obtiene o establece un valor que indica si se generan los miembros en el orden en el que aparecen en las colecciones de miembros.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to generate the members in the order in which they occur in the member collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default value of this property is &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> para generar los miembros en el orden en el que aparecen en la colección de miembros; de lo contrario, es <see langword="false" />. El valor predeterminado de esta propiedad es <see langword="false" />.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeParser">
      <summary vsli:raw="Provides an empty implementation of the &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeParser&quot; /&gt; interface.">Proporciona una implementación vacía de la interfaz <see cref="T:System.CodeDom.Compiler.ICodeParser" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeParser.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeParser&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.Compiler.CodeParser" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeParser.Parse(System.IO.TextReader)">
      <summary vsli:raw="Compiles the specified text stream into a &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt;.">Compila la secuencia de texto especificada en <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
      <param name="codeStream" vsli:raw="A &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; that is used to read the code to be parsed.">
        <see cref="T:System.IO.TextReader" /> que se utiliza para leer el código que se va a analizar.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; containing the code model produced from parsing the code.">
        <see cref="T:System.CodeDom.CodeCompileUnit" />que contiene el modelo de código que se produce a partir del análisis del código.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerError">
      <summary vsli:raw="Represents a compiler error or warning.">Representa una advertencia o un error del compilador.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.Compiler.CompilerError" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.#ctor(System.String,System.Int32,System.Int32,System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; class using the specified file name, line, column, error number, and error text.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.Compiler.CompilerError" /> que utiliza el nombre de archivo, línea, columna, número de error y texto de error especificados.</summary>
      <param name="fileName" vsli:raw="The file name of the file that the compiler was compiling when it encountered the error.">Nombre de archivo del archivo que el compilador estaba compilando cuando se produjo el error.</param>
      <param name="line" vsli:raw="The line of the source of the error.">Línea del origen del error.</param>
      <param name="column" vsli:raw="The column of the source of the error.">Columna del origen del error.</param>
      <param name="errorNumber" vsli:raw="The error number of the error.">Número del error.</param>
      <param name="errorText" vsli:raw="The error message text.">Texto del mensaje de error.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.Column">
      <summary vsli:raw="Gets or sets the column number where the source of the error occurs.">Obtiene o establece el número de columna donde se produce el origen del error.</summary>
      <returns vsli:raw="The column number of the source file where the compiler encountered the error.">Número de columna del archivo de código fuente donde el compilador detectó el error.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.ErrorNumber">
      <summary vsli:raw="Gets or sets the error number.">Obtiene o establece el número de error.</summary>
      <returns vsli:raw="The error number as a string.">Número de error en forma de cadena.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.ErrorText">
      <summary vsli:raw="Gets or sets the text of the error message.">Obtiene o establece el texto del mensaje de error.</summary>
      <returns vsli:raw="The text of the error message.">Texto del mensaje de error.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.FileName">
      <summary vsli:raw="Gets or sets the file name of the source file that contains the code which caused the error.">Obtiene o establece el nombre del archivo de código fuente que contiene el código que provocó el error.</summary>
      <returns vsli:raw="The file name of the source file that contains the code which caused the error.">Nombre del archivo de código fuente que contiene el código que provocó el error.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.IsWarning">
      <summary vsli:raw="Gets or sets a value that indicates whether the error is a warning.">Obtiene o establece un valor que indica si el error es una advertencia.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the error is a warning; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el error es una advertencia; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.Line">
      <summary vsli:raw="Gets or sets the line number where the source of the error occurs.">Obtiene o establece el número de línea donde se produce el origen del error.</summary>
      <returns vsli:raw="The line number of the source file where the compiler encountered the error.">Número de línea del archivo de código fuente donde el compilador detectó el error.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.ToString">
      <summary vsli:raw="Provides an implementation of Object's &lt;see cref=&quot;M:System.Object.ToString&quot; /&gt; method.">Proporciona una implementación del método <see cref="M:System.Object.ToString" /> de Object.</summary>
      <returns vsli:raw="A string representation of the compiler error.">Una representación de cadena del error del compilador.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerErrorCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; objects.">Representa una colección de objetos <see cref="T:System.CodeDom.Compiler.CompilerError" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor(System.CodeDom.Compiler.CompilerError[])">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt; that contains the specified array of &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; objects.">Inicializa una nueva instancia de <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> que contiene la matriz especificada de objetos <see cref="T:System.CodeDom.Compiler.CompilerError" />.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; objects to initialize the collection with.">Matriz de objetos <see cref="T:System.CodeDom.Compiler.CompilerError" /> con los que se inicializa la colección.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor(System.CodeDom.Compiler.CompilerErrorCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt; class that contains the contents of the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt;.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> que incluye el contenido de la clase <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> especificada.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt; object with which to initialize the collection.">Objeto <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> con el que se inicializa la colección.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Add(System.CodeDom.Compiler.CompilerError)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; object to the error collection.">Agrega el objeto <see cref="T:System.CodeDom.Compiler.CompilerError" /> especificado a la colección de errores.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; object to add.">Objeto <see cref="T:System.CodeDom.Compiler.CompilerError" /> que se agrega.</param>
      <returns vsli:raw="The index at which the new element was inserted.">Índice donde se insertó el nuevo elemento.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.AddRange(System.CodeDom.Compiler.CompilerError[])">
      <summary vsli:raw="Copies the elements of an array to the end of the error collection.">Copia los elementos de una matriz al final de la colección de errores.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; that contains the objects to add to the collection.">Matriz de tipo <see cref="T:System.CodeDom.Compiler.CompilerError" /> que contiene los objetos que se van a agregar a la colección.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.AddRange(System.CodeDom.Compiler.CompilerErrorCollection)">
      <summary vsli:raw="Adds the contents of the specified compiler error collection to the end of the error collection.">Agrega el contenido de la colección de errores del compilador especificada al final de la colección de errores.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt; object that contains the objects to add to the collection.">Objeto <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> que contiene los objetos que se van a agregar a la colección.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Contains(System.CodeDom.Compiler.CompilerError)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; object.">Obtiene un valor que indica si la colección contiene el objeto <see cref="T:System.CodeDom.Compiler.CompilerError" /> especificado.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; to locate.">Clase <see cref="T:System.CodeDom.Compiler.CompilerError" /> que se va a localizar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; is contained in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si la colección contiene <see cref="T:System.CodeDom.Compiler.CompilerError" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.CopyTo(System.CodeDom.Compiler.CompilerError[],System.Int32)">
      <summary vsli:raw="Copies the collection values to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance at the specified index.">Copia los valores de la colección en una instancia <see cref="T:System.Array" /> unidimensional en el índice especificado.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt;.">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los valores copiados desde la clase <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />.</param>
      <param name="index" vsli:raw="The index in the array at which to start copying.">Índice de la matriz donde se va a comenzar a copiar.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The array indicated by the &lt;paramref name=&quot;array&quot; /&gt; parameter is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt; is greater than the available space between the index value of the &lt;paramref name=&quot;arrayIndex&quot; /&gt; parameter in the array indicated by the &lt;paramref name=&quot;array&quot; /&gt; parameter and the end of the array indicated by the &lt;paramref name=&quot;array&quot; /&gt; parameter.">La matriz indicada por el parámetro <paramref name="array" /> es multidimensional.
o bien
El número de elementos de <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> es mayor que el espacio disponible entre el valor de índice del parámetro <paramref name="arrayIndex" /> en la matriz indicada por el parámetro <paramref name="array" /> y el final de la matriz indicada por el parámetro <paramref name="array" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">El parámetro <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the lowbound of the array indicated by the &lt;paramref name=&quot;array&quot; /&gt; parameter.">El parámetro <paramref name="index" /> es menor que el límite inferior de la matriz indicada por el parámetro <paramref name="array" />.</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.HasErrors">
      <summary vsli:raw="Gets a value that indicates whether the collection contains errors.">Obtiene un valor que indica si la colección contiene errores.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains errors; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la colección contiene errores; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.HasWarnings">
      <summary vsli:raw="Gets a value that indicates whether the collection contains warnings.">Obtiene un valor que indica si la colección contiene advertencias.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains warnings; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la colección contiene advertencias; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.IndexOf(System.CodeDom.Compiler.CompilerError)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; object in the collection, if it exists in the collection.">Obtiene el índice del objeto <see cref="T:System.CodeDom.Compiler.CompilerError" /> especificado en la colección, si existe en la colección.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; to locate.">Clase <see cref="T:System.CodeDom.Compiler.CompilerError" /> que se va a localizar.</param>
      <returns vsli:raw="The index of the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; in the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt;, if found; otherwise, -1.">Índice de <see cref="T:System.CodeDom.Compiler.CompilerError" /> especificado en <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />, si se encuentra; de lo contrario, -1.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Insert(System.Int32,System.CodeDom.Compiler.CompilerError)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; into the collection at the specified index.">Inserta la clase <see cref="T:System.CodeDom.Compiler.CompilerError" /> especificada en el índice especificado de la colección.</summary>
      <param name="index" vsli:raw="The zero-based index where the compiler error should be inserted.">Índice de base cero donde debe insertarse el error del compilador.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; to insert.">
        <see cref="T:System.CodeDom.Compiler.CompilerError" /> que se va a insertar.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; at the specified index.">Obtiene o establece la clase <see cref="T:System.CodeDom.Compiler.CompilerError" /> en el índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index of the entry to locate in the collection.">Índice de base cero de la entrada que se va a localizar en la colección.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; at each valid index.">Una clase <see cref="T:System.CodeDom.Compiler.CompilerError" /> en cada índice válido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The index value indicated by the &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">El valor de índice indicado por el parámetro <paramref name="index" /> se encuentra fuera del intervalo de índices válido para la colección.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Remove(System.CodeDom.Compiler.CompilerError)">
      <summary vsli:raw="Removes a specific &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; from the collection.">Quita una clase <see cref="T:System.CodeDom.Compiler.CompilerError" /> específica de la colección.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; to remove from the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt;.">
        <see cref="T:System.CodeDom.Compiler.CompilerError" /> que se va a quitar de <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">No se encuentra el objeto especificado en la colección.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerInfo">
      <summary vsli:raw="Represents the configuration settings of a language provider. This class cannot be inherited.">Representa los valores de configuración de un proveedor de lenguaje. Esta clase no puede heredarse.</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerInfo.CodeDomProviderType">
      <summary vsli:raw="Gets the type of the configured &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementation.">Obtiene el tipo de la implementación de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> configurada.</summary>
      <returns vsli:raw="A read-only &lt;see cref=&quot;T:System.Type&quot; /&gt; instance that represents the configured language provider type.">Una instancia de <see cref="T:System.Type" /> de sólo lectura que representa el tipo de proveedor de lenguaje configurado.</returns>
      <exception cref="T:System.Configuration.ConfigurationException" vsli:raw="The language provider is not configured on this computer.">El proveedor de lenguaje no está configurado en este equipo.</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException" vsli:raw="Cannot locate the type because it is a &lt;see langword=&quot;null&quot; /&gt; or empty string.  &#xA;  &#xA; -or-  &#xA;  &#xA; Cannot locate the type because the name for the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; cannot be found in the configuration file.">No se pueda encontrar el tipo porque es un valor <see langword="null" /> o una cadena vacía.
O bien
No se puede encontrar el tipo porque el nombre de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> no se puede encontrar en el archivo de configuración.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateDefaultCompilerParameters">
      <summary vsli:raw="Gets the configured compiler settings for the language provider implementation.">Obtiene los valores del compilador configurado para la implementación del proveedor de lenguaje.</summary>
      <returns vsli:raw="A read-only &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; instance that contains the compiler options and settings configured for the language provider.">Una instancia de <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> de sólo lectura que contiene las opciones y valores del compilador configurados para el proveedor de lenguaje.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateProvider">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; instance for the current language provider settings.">Devuelve una instancia de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> para la configuración del proveedor de lenguaje actual.</summary>
      <returns vsli:raw="A CodeDOM provider associated with the language provider configuration.">Proveedor CodeDOM asociado a la configuración del proveedor de lenguaje.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateProvider(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; instance for the current language provider settings and specified options.">Devuelve una instancia de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> para la configuración del proveedor de lenguaje actual y las opciones especificadas.</summary>
      <param name="providerOptions" vsli:raw="A collection of provider options from the configuration file.">Una colección de opciones de proveedor extraídas del archivo de configuración.</param>
      <returns vsli:raw="A CodeDOM provider associated with the language provider configuration and specified options.">Un proveedor CodeDOM asociado a la configuración de proveedor de lenguaje y a las opciones especificadas.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;providerOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="providerOptions" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The provider does not support options.">El proveedor no admite opciones.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified object represents the same language provider and compiler settings as the current &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerInfo&quot; /&gt;.">Determina si el objeto especificado representa la misma configuración del compilador y del proveedor de lenguaje que el objeto <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> actual.</summary>
      <param name="o" vsli:raw="The object to compare with the current &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerInfo&quot; /&gt;.">Objeto que se va a comparar con el objeto <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> actual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;o&quot; /&gt; is a &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerInfo&quot; /&gt; object and its value is the same as this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="o" /> es un objeto <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> y tiene el mismo valor que la instancia en cuestión; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetExtensions">
      <summary vsli:raw="Returns the file name extensions supported by the language provider.">Devuelve las extensiones de nombre de archivo admitidas por el proveedor de lenguaje.</summary>
      <returns vsli:raw="An array of file name extensions supported by the language provider.">Una matriz de extensiones de nombre de archivo admitidas por el proveedor de lenguaje.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetHashCode">
      <summary vsli:raw="Returns the hash code for the current instance.">Devuelve el código hash de la instancia actual.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code for the current &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerInfo&quot; /&gt; instance, suitable for use in hashing algorithms and data structures such as a hash table.">Un código hash de un entero de 32 bits con signo para la instancia actual de <see cref="T:System.CodeDom.Compiler.CompilerInfo" />, adecuado para su utilización en estructuras de datos y algoritmos hash tales como una tabla hash.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetLanguages">
      <summary vsli:raw="Gets the language names supported by the language provider.">Obtiene los nombres de lenguajes admitidos por el proveedor de lenguaje.</summary>
      <returns vsli:raw="An array of language names supported by the language provider.">Una matriz de nombres de lenguajes admitidos por el proveedor de lenguaje.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerInfo.IsCodeDomProviderTypeValid">
      <summary vsli:raw="Returns a value indicating whether the language provider implementation is configured on the computer.">Devuelve un valor que indica si la implementación del proveedor de lenguaje está configurada en el equipo.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the language provider implementation type is configured on the computer; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el tipo de implementación del proveedor de lenguaje está configurado en el equipo; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerParameters">
      <summary vsli:raw="Represents the parameters used to invoke a compiler.">Representa los parámetros utilizados para invocar a un compilador.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.Compiler.CompilerParameters" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; class using the specified assembly names.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> con los nombres de ensamblado especificados.</summary>
      <param name="assemblyNames" vsli:raw="The names of the assemblies to reference.">Nombres de los ensamblados a los que hay que hacer referencia.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; class using the specified assembly names and output file name.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> con los nombres de ensamblado y el nombre del archivo de salida especificados.</summary>
      <param name="assemblyNames" vsli:raw="The names of the assemblies to reference.">Nombres de los ensamblados a los que hay que hacer referencia.</param>
      <param name="outputName" vsli:raw="The output file name.">Nombre del archivo de salida.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; class using the specified assembly names, output name, and a value indicating whether to include debug information.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> con los nombres de ensamblado y el nombre de los resultados especificados, y un valor que indica si se va a incluir información de depuración.</summary>
      <param name="assemblyNames" vsli:raw="The names of the assemblies to reference.">Nombres de los ensamblados a los que hay que hacer referencia.</param>
      <param name="outputName" vsli:raw="The output file name.">Nombre del archivo de salida.</param>
      <param name="includeDebugInformation" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include debug information; &lt;see langword=&quot;false&quot; /&gt; to exclude debug information.">
        <see langword="true" /> para incluir información de depuración; <see langword="false" /> para excluir la información de depuración.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.CompilerOptions">
      <summary vsli:raw="Gets or sets optional command-line arguments to use when invoking the compiler.">Obtiene o establece los argumentos de la línea de comandos opcionales que se utilizará al invocar al compilador.</summary>
      <returns vsli:raw="Any additional command-line arguments for the compiler.">Otros argumentos de la línea de comandos adicionales para el compilador.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.CoreAssemblyFileName">
      <summary vsli:raw="Gets or sets the name of the core or standard assembly that contains basic types such as &lt;see cref=&quot;T:System.Object&quot; /&gt;, &lt;see cref=&quot;T:System.String&quot; /&gt;, or &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">Obtiene o establece el nombre del ensamblado principal o estándar que contiene tipos básicos como <see cref="T:System.Object" />, <see cref="T:System.String" /> o <see cref="T:System.Int32" />.</summary>
      <returns vsli:raw="The name of the core assembly that contains basic types.">Nombre del ensamblado central que contiene tipos básicos.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources">
      <summary vsli:raw="Gets the .NET resource files to include when compiling the assembly output.">Obtiene los archivos de recursos de .NET Framework que se van a incluir al compilar el ensamblado resultante.</summary>
      <returns vsli:raw="A collection that contains the file paths of .NET resources to include in the generated assembly.">Colección que contiene las rutas de acceso del archivo de recursos de .NET Framework que se van a incluir en el ensamblado generado.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable">
      <summary vsli:raw="Gets or sets a value indicating whether to generate an executable.">Obtiene o establece un valor que indica si debe generarse un ejecutable.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an executable should be generated; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si debe generarse un ejecutable; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.GenerateInMemory">
      <summary vsli:raw="Gets or sets a value indicating whether to generate the output in memory.">Obtiene o establece un valor que indica si los resultados deben generarse en memoria.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the compiler should generate the output in memory; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el compilador debe generar los resultados en memoria; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.IncludeDebugInformation">
      <summary vsli:raw="Gets or sets a value indicating whether to include debug information in the compiled executable.">Obtiene o establece un valor que indica si debe incluirse información de depuración en el ejecutable compilado.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if debug information should be generated; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si debe generarse información de depuración; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.LinkedResources">
      <summary vsli:raw="Gets the .NET resource files that are referenced in the current source.">Obtiene los archivos de recursos de .NET Framework a los que se hace referencia en el código fuente actual.</summary>
      <returns vsli:raw="A collection that contains the file paths of .NET resources that are referenced by the source.">Colección que contiene las rutas de acceso al archivo de recursos de .NET Framework a los que se hace referencia en el código fuente.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.MainClass">
      <summary vsli:raw="Gets or sets the name of the main class.">Obtiene o establece el nombre de la clase principal.</summary>
      <returns vsli:raw="The name of the main class.">Nombre de la clase principal.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.OutputAssembly">
      <summary vsli:raw="Gets or sets the name of the output assembly.">Obtiene o establece el nombre del ensamblado resultante.</summary>
      <returns vsli:raw="The name of the output assembly.">Nombre del ensamblado resultante.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies">
      <summary vsli:raw="Gets the assemblies referenced by the current project.">Obtiene los ensamblados a los que hace referencia el proyecto actual.</summary>
      <returns vsli:raw="A collection that contains the assembly names that are referenced by the source to compile.">Colección que contiene los nombres de ensamblado a los que hace referencia el código fuente que se va a compilar.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.TempFiles">
      <summary vsli:raw="Gets or sets the collection that contains the temporary files.">Obtiene o establece la colección que contiene los archivos temporales.</summary>
      <returns vsli:raw="A collection that contains the temporary files.">Colección que contiene los archivos temporales.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.TreatWarningsAsErrors">
      <summary vsli:raw="Gets or sets a value indicating whether to treat warnings as errors.">Obtiene o establece un valor que indica si las advertencias deben tratarse como si fueran errores.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if warnings should be treated as errors; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si las advertencias deben tratarse como errores; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.UserToken">
      <summary vsli:raw="Gets or sets the user token to use when creating the compiler process.">Obtiene o establece el token de usuario que se utilizará al crear el proceso compilador.</summary>
      <returns vsli:raw="The user token to use.">Token de usuario que se utilizará.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.WarningLevel">
      <summary vsli:raw="Gets or sets the warning level at which the compiler aborts compilation.">Obtiene o establece el nivel de advertencia en el que el compilador anula la compilación.</summary>
      <returns vsli:raw="The warning level at which the compiler aborts compilation.">Nivel de advertencia en el que el compilador anula la compilación.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.Win32Resource">
      <summary vsli:raw="Gets or sets the file name of a Win32 resource file to link into the compiled assembly.">Obtiene o establece el nombre de archivo de recursos de Win32 que se va a vincular al ensamblado compilado.</summary>
      <returns vsli:raw="A Win32 resource file that will be linked into the compiled assembly.">Archivo de recursos de Win32 que se vinculará al ensamblado compilado.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerResults">
      <summary vsli:raw="Represents the results of compilation that are returned from a compiler.">Representa los resultados de la compilación devueltos desde un compilador.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerResults.#ctor(System.CodeDom.Compiler.TempFileCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; class that uses the specified temporary files.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.Compiler.CompilerResults" /> que utiliza los archivos temporales especificados.</summary>
      <param name="tempFiles" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; with which to manage and store references to intermediate files generated during compilation.">Un <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> con el que administrar y almacenar referencias en archivos intermedios generados durante la compilación.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.CompiledAssembly">
      <summary vsli:raw="Gets or sets the compiled assembly.">Obtiene o establece el ensamblado compilado.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Reflection.Assembly&quot; /&gt; that indicates the compiled assembly.">
        <see cref="T:System.Reflection.Assembly" /> que indica el ensamblado compilado.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.Errors">
      <summary vsli:raw="Gets the collection of compiler errors and warnings.">Obtiene la colección de errores y advertencias del compilador.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt; that indicates the errors and warnings resulting from compilation, if any.">
        <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> que indica los errores y las advertencias resultantes de la compilación, si los hubiera.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.NativeCompilerReturnValue">
      <summary vsli:raw="Gets or sets the compiler's return value.">Obtiene o establece el valor devuelto del compilador.</summary>
      <returns vsli:raw="The compiler's return value.">Valor devuelto del compilador.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.Output">
      <summary vsli:raw="Gets the compiler output messages.">Obtiene los mensajes de salida del compilador.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Specialized.StringCollection&quot; /&gt; that contains the output messages.">
        <see cref="T:System.Collections.Specialized.StringCollection" /> que contiene los mensajes de salida.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.PathToAssembly">
      <summary vsli:raw="Gets or sets the path of the compiled assembly.">Obtiene o establece la ruta de acceso del ensamblado compilado.</summary>
      <returns vsli:raw="The path of the assembly, or &lt;see langword=&quot;null&quot; /&gt; if the assembly was generated in memory.">La ruta de acceso del ensamblado, o <see langword="null" /> si el ensamblado se generó en memoria.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.TempFiles">
      <summary vsli:raw="Gets or sets the temporary file collection to use.">Obtiene o establece la colección de archivos temporales que se va utilizar.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; with which to manage and store references to intermediate files generated during compilation.">Un <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> con el que administrar y almacenar referencias en archivos intermedios generados durante la compilación.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.Executor">
      <summary vsli:raw="Provides command execution functions for invoking compilers. This class cannot be inherited.">Proporciona funciones de ejecución de comandos para invocar a compiladores. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWait(System.String,System.CodeDom.Compiler.TempFileCollection)">
      <summary vsli:raw="Executes the command using the specified temporary files and waits for the call to return.">Ejecuta el comando utilizando los archivos temporales especificados y espera a que vuelva la llamada.</summary>
      <param name="cmd" vsli:raw="The command to execute.">Comando que se va a ejecutar.</param>
      <param name="tempFiles" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; with which to manage and store references to intermediate files generated during compilation.">Un <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> con el que administrar y almacenar referencias en archivos intermedios generados durante la compilación.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.IntPtr,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary vsli:raw="Executes the specified command using the specified user token and temporary files, and waits for the call to return, storing output and error information from the compiler in the specified strings.">Ejecuta el comando especificado utilizando el token de usuario y los archivos temporales especificados y espera a que vuelva la llamada, almacenando los resultados y la información de los errores del compilador en las cadenas especificadas.</summary>
      <param name="userToken" vsli:raw="The token to start the compiler process with.">Token con el que comenzar el proceso del compilador.</param>
      <param name="cmd" vsli:raw="The command to execute.">Comando que se va a ejecutar.</param>
      <param name="tempFiles" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; with which to manage and store references to intermediate files generated during compilation.">Un <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> con el que administrar y almacenar referencias en archivos intermedios generados durante la compilación.</param>
      <param name="outputName" vsli:raw="A reference to a string that will store the compiler's message output.">Referencia a una cadena que almacenará los resultados del mensaje del compilador.</param>
      <param name="errorName" vsli:raw="A reference to a string that will store the name of the error or errors encountered.">Referencia a una cadena que almacenará el nombre de los errores encontrados.</param>
      <returns vsli:raw="The return value from the compiler.">Valor devuelto del compilador.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.IntPtr,System.String,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary vsli:raw="Executes the specified command using the specified user token, current directory, and temporary files; then waits for the call to return, storing output and error information from the compiler in the specified strings.">Ejecuta el comando especificado utilizando el token de usuario, el directorio actual y los archivos temporales especificados; a continuación, espera a que vuelva la llamada, almacenando los resultados del compilador en las cadenas especificadas.</summary>
      <param name="userToken" vsli:raw="The token to start the compiler process with.">Token con el que comenzar el proceso del compilador.</param>
      <param name="cmd" vsli:raw="The command to execute.">Comando que se va a ejecutar.</param>
      <param name="currentDir" vsli:raw="The directory to start the process in.">Directorio en el que va a comenzar el proceso.</param>
      <param name="tempFiles" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; with which to manage and store references to intermediate files generated during compilation.">Un <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> con el que administrar y almacenar referencias en archivos intermedios generados durante la compilación.</param>
      <param name="outputName" vsli:raw="A reference to a string that will store the compiler's message output.">Referencia a una cadena que almacenará los resultados del mensaje del compilador.</param>
      <param name="errorName" vsli:raw="A reference to a string that will store the name of the error or errors encountered.">Referencia a una cadena que almacenará el nombre de los errores encontrados.</param>
      <returns vsli:raw="The return value from the compiler.">Valor devuelto del compilador.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary vsli:raw="Executes the specified command using the specified temporary files and waits for the call to return, storing output and error information from the compiler in the specified strings.">Ejecuta el comando especificado utilizando los archivos temporales especificados y espera a que vuelva la llamada, almacenando los resultados y la información de los errores del compilador en las cadenas especificadas.</summary>
      <param name="cmd" vsli:raw="The command to execute.">Comando que se va a ejecutar.</param>
      <param name="tempFiles" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; with which to manage and store references to intermediate files generated during compilation.">Un <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> con el que administrar y almacenar referencias en archivos intermedios generados durante la compilación.</param>
      <param name="outputName" vsli:raw="A reference to a string that will store the compiler's message output.">Referencia a una cadena que almacenará los resultados del mensaje del compilador.</param>
      <param name="errorName" vsli:raw="A reference to a string that will store the name of the error or errors encountered.">Referencia a una cadena que almacenará el nombre de los errores encontrados.</param>
      <returns vsli:raw="The return value from the compiler.">Valor devuelto del compilador.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.String,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary vsli:raw="Executes the specified command using the specified current directory and temporary files, and waits for the call to return, storing output and error information from the compiler in the specified strings.">Ejecuta el comando especificado utilizando los archivos temporales y el directorio actual especificados y espera a que vuelva la llamada, almacenando los resultados y la información de los errores del compilador en las cadenas especificadas.</summary>
      <param name="cmd" vsli:raw="The command to execute.">Comando que se va a ejecutar.</param>
      <param name="currentDir" vsli:raw="The current directory.">El directorio actual.</param>
      <param name="tempFiles" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; with which to manage and store references to intermediate files generated during compilation.">Un <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> con el que administrar y almacenar referencias en archivos intermedios generados durante la compilación.</param>
      <param name="outputName" vsli:raw="A reference to a string that will store the compiler's message output.">Referencia a una cadena que almacenará los resultados del mensaje del compilador.</param>
      <param name="errorName" vsli:raw="A reference to a string that will store the name of the error or errors encountered.">Referencia a una cadena que almacenará el nombre de los errores encontrados.</param>
      <returns vsli:raw="The return value from the compiler.">Valor devuelto del compilador.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.GeneratorSupport">
      <summary vsli:raw="Defines identifiers used to determine whether a code generator supports certain types of code elements.">Define los identificadores utilizados para determinar si un generador de código es compatible con ciertos tipos de elementos de código.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ArraysOfArrays">
      <summary vsli:raw="Indicates the generator supports arrays of arrays.">Indica si el generador es compatible con matrices de matrices.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.AssemblyAttributes">
      <summary vsli:raw="Indicates the generator supports assembly attributes.">Indica si el generador es compatible con atributos de ensamblados.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ChainedConstructorArguments">
      <summary vsli:raw="Indicates the generator supports chained constructor arguments.">Indica si el generador es compatible con los argumentos constructores encadenados.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ComplexExpressions">
      <summary vsli:raw="Indicates the generator supports complex expressions.">Indica si el generador es compatible con expresiones complejas.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareDelegates">
      <summary vsli:raw="Indicates the generator supports delegate declarations.">Indica si el generador es compatible con declaraciones de delegados.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareEnums">
      <summary vsli:raw="Indicates the generator supports enumeration declarations.">Indica si el generador es compatible con declaraciones de enumeración.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareEvents">
      <summary vsli:raw="Indicates the generator supports event declarations.">Indica si el generador es compatible con declaraciones de eventos.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareIndexerProperties">
      <summary vsli:raw="Indicates the generator supports the declaration of indexer properties.">Indica si el generador es compatible con la declaración de propiedades del indizador.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareInterfaces">
      <summary vsli:raw="Indicates the generator supports interface declarations.">Indica si el generador es compatible con declaraciones de interfaz.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareValueTypes">
      <summary vsli:raw="Indicates the generator supports value type declarations.">Indica si el generador es compatible con declaraciones de tipos de valor.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.EntryPointMethod">
      <summary vsli:raw="Indicates the generator supports a program entry point method designation. This is used when building executables.">Indica si el generador es compatible con una designación de método de punto de entrada de programa. Se utiliza cuando se compilan los ejecutables.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GenericTypeDeclaration">
      <summary vsli:raw="Indicates the generator supports generic type declarations.">Indica si el generador es compatible con declaraciones de tipos genéricos.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GenericTypeReference">
      <summary vsli:raw="Indicates the generator supports generic type references.">Indica si el generador es compatible con referencias de tipos genéricos.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GotoStatements">
      <summary vsli:raw="Indicates the generator supports goto statements.">Indica si el generador es compatible con instrucciones goto.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.MultidimensionalArrays">
      <summary vsli:raw="Indicates the generator supports referencing multidimensional arrays. Currently, the CodeDom cannot be used to instantiate multidimensional arrays.">Indica si el generador es compatible con matrices multidimensionales de referencia. Actualmente, no se puede utilizar CodeDom para crear una instancia de matrices multidimensionales.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.MultipleInterfaceMembers">
      <summary vsli:raw="Indicates the generator supports the declaration of members that implement multiple interfaces.">Indica si el generador es compatible con la declaración de miembros que implementan múltiples interfaces.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.NestedTypes">
      <summary vsli:raw="Indicates the generator supports the declaration of nested types.">Indica si el generador es compatible con la declaración de tipos anidados.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ParameterAttributes">
      <summary vsli:raw="Indicates the generator supports parameter attributes.">Indica si el generador es compatible con atributos de parámetros.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.PartialTypes">
      <summary vsli:raw="Indicates the generator supports partial type declarations.">Indica si el generador es compatible con declaraciones de tipos genéricos.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.PublicStaticMembers">
      <summary vsli:raw="Indicates the generator supports public static members.">Indica si el generador es compatible con miembros estáticos públicos.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ReferenceParameters">
      <summary vsli:raw="Indicates the generator supports reference and out parameters.">Indica si el generador es compatible con parámetros de referencia y de salida.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.Resources">
      <summary vsli:raw="Indicates the generator supports compilation with .NET resources. These can be default resources compiled directly into an assembly, or resources referenced in a satellite assembly.">Indica si el generador admite la compilación con recursos de .NET Framework. Éstos pueden ser recursos predeterminados compilados directamente en un ensamblado o recursos a los que se hace referencia en un ensamblado satélite.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ReturnTypeAttributes">
      <summary vsli:raw="Indicates the generator supports return type attribute declarations.">Indica si el generador es compatible con declaraciones de atributos de tipo de valor devuelto.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.StaticConstructors">
      <summary vsli:raw="Indicates the generator supports static constructors.">Indica si el generador es compatible con constructores estáticos.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.TryCatchStatements">
      <summary vsli:raw="Indicates the generator supports &lt;c&gt;try-catch&lt;/c&gt; statements.">Indica si el generador es compatible con instrucciones <see langword="try...catch" />.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.Win32Resources">
      <summary vsli:raw="Indicates the generator supports compilation with Win32 resources.">Indica si el generador es compatible con la compilación de recursos Win32.</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeCompiler">
      <summary vsli:raw="Defines an interface for invoking compilation of source code or a CodeDOM tree using a specific compiler.">Define una interfaz para invocar a la compilación de código fuente o a un árbol CodeDOM con un compilador específico.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary vsli:raw="Compiles an assembly from the &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; tree contained in the specified &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt;, using the specified compiler settings.">Compila un ensamblado basado en el árbol <see cref="N:System.CodeDom" /> que contiene el objeto<see cref="T:System.CodeDom.CodeCompileUnit" /> especificado, utilizando la configuración del compilador especificado.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for compilation.">Objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica la configuración de la compilación.</param>
      <param name="compilationUnit" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; that indicates the code to compile.">
        <see cref="T:System.CodeDom.CodeCompileUnit" /> que indica el código que se va a compilar.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">Objeto <see cref="T:System.CodeDom.Compiler.CompilerResults" /> que indica los resultados de la compilación.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary vsli:raw="Compiles an assembly based on the &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; trees contained in the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; objects, using the specified compiler settings.">Compila un ensamblado basado en los árboles <see cref="N:System.CodeDom" /> que contiene la matriz especificada de objetos <see cref="T:System.CodeDom.CodeCompileUnit" />, utilizando la configuración del compilador especificada.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for compilation.">Objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica la configuración de la compilación.</param>
      <param name="compilationUnits" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; that indicates the code to compile.">Matriz de tipo <see cref="T:System.CodeDom.CodeCompileUnit" /> que indica el código que se va a compilar.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">Objeto <see cref="T:System.CodeDom.Compiler.CompilerResults" /> que indica los resultados de la compilación.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary vsli:raw="Compiles an assembly from the source code contained within the specified file, using the specified compiler settings.">Compila un ensamblado basado en el código fuente que contiene el archivo especificado, utilizando la configuración especificada del compilador.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for compilation.">Objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica la configuración de la compilación.</param>
      <param name="fileName" vsli:raw="The file name of the file that contains the source code to compile.">Nombre del archivo que contiene el código fuente que se va a compilar.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">Objeto <see cref="T:System.CodeDom.Compiler.CompilerResults" /> que indica los resultados de la compilación.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="Compiles an assembly from the source code contained within the specified files, using the specified compiler settings.">Compila un ensamblado basado en el código fuente que contienen los archivos especificados, utilizando la configuración especificada del compilador.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for compilation.">Objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica la configuración de la compilación.</param>
      <param name="fileNames" vsli:raw="The file names of the files to compile.">Nombres de archivo de los archivos que se van a compilar.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">Objeto <see cref="T:System.CodeDom.Compiler.CompilerResults" /> que indica los resultados de la compilación.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary vsli:raw="Compiles an assembly from the specified string containing source code, using the specified compiler settings.">Compila un ensamblado basado en la cadena especificada que contiene el código fuente, utilizando la configuración especificada del compilador.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for compilation.">Objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica la configuración de la compilación.</param>
      <param name="source" vsli:raw="The source code to compile.">Código fuente que se va a compilar.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">Objeto <see cref="T:System.CodeDom.Compiler.CompilerResults" /> que indica los resultados de la compilación.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="Compiles an assembly from the specified array of strings containing source code, using the specified compiler settings.">Compila un ensamblado basado en la matriz especificada de cadenas que contiene el código fuente, utilizando la configuración del compilador especificada.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for compilation.">Objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica la configuración de la compilación.</param>
      <param name="sources" vsli:raw="The source code strings to compile.">Cadenas de código fuente que se van a compilar.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">Objeto <see cref="T:System.CodeDom.Compiler.CompilerResults" /> que indica los resultados de la compilación.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeGenerator">
      <summary vsli:raw="Defines an interface for generating code.">Define una interfaz para generar código.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.CreateEscapedIdentifier(System.String)">
      <summary vsli:raw="Creates an escaped identifier for the specified value.">Crea un identificador de escape para el valor especificado.</summary>
      <param name="value" vsli:raw="The string to create an escaped identifier for.">Cadena para crear un identificador de escape.</param>
      <returns vsli:raw="The escaped identifier for the value.">Identificador de escape para el valor.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier(System.String)">
      <summary vsli:raw="Creates a valid identifier for the specified value.">Crea un identificador válido para el valor especificado.</summary>
      <param name="value" vsli:raw="The string to generate a valid identifier for.">Cadena para generar un identificador válido.</param>
      <returns vsli:raw="A valid identifier for the specified value.">Identificador válido para el valor especificado.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) compilation unit and outputs it to the specified text writer using the specified options.">Genera código para la unidad de compilación de Code Document Object Model (CodeDOM) especificada y lo envía al escritor de texto especificado mediante las opciones especificadas.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; to generate code for.">
        <see cref="T:System.CodeDom.CodeCompileUnit" /> para el que se va a generar código.</param>
      <param name="w" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to output code to.">
        <see cref="T:System.IO.TextWriter" /> al que se envía el código.</param>
      <param name="o" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que indica las opciones que se van a utilizar para generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) expression and outputs it to the specified text writer.">Genera código para la expresión de Code Document Object Model (CodeDOM) especificada y lo envía al escritor de texto especificado.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the expression to generate code for.">
        <see cref="T:System.CodeDom.CodeExpression" /> que indica la expresión para la que se va a generar código.</param>
      <param name="w" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to output code to.">
        <see cref="T:System.IO.TextWriter" /> al que se envía el código.</param>
      <param name="o" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que indica las opciones que se van a utilizar para generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) namespace and outputs it to the specified text writer using the specified options.">Genera código para el espacio de nombres de Code Document Object Model (CodeDOM) especificado y lo envía al escritor de texto especificado mediante las opciones especificadas.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; that indicates the namespace to generate code for.">
        <see cref="T:System.CodeDom.CodeNamespace" /> que indica el espacio de nombres para el que se va a generar código.</param>
      <param name="w" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to output code to.">
        <see cref="T:System.IO.TextWriter" /> al que se envía el código.</param>
      <param name="o" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que indica las opciones que se van a utilizar para generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) statement and outputs it to the specified text writer using the specified options.">Genera código para la instrucción de Code Document Object Model (CodeDOM) especificada y lo envía al escritor de texto especificado mediante las opciones especificadas.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the CodeDOM elements to translate.">
        <see cref="T:System.CodeDom.CodeStatement" /> que contiene los elementos CodeDOM que se van a traducir.</param>
      <param name="w" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to output code to.">
        <see cref="T:System.IO.TextWriter" /> al que se envía el código.</param>
      <param name="o" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que indica las opciones que se van a utilizar para generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) type declaration and outputs it to the specified text writer using the specified options.">Genera código para la declaración de Code Document Object Model (CodeDOM) especificada y lo envía al escritor de texto especificado mediante las opciones especificadas.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; that indicates the type to generate code for.">
        <see cref="T:System.CodeDom.CodeTypeDeclaration" /> que indica el tipo para el que se va a generar código.</param>
      <param name="w" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to output code to.">
        <see cref="T:System.IO.TextWriter" /> al que se envía el código.</param>
      <param name="o" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que indica las opciones que se van a utilizar para generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Gets the type indicated by the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt;.">Obtiene el tipo indicado por el <see cref="T:System.CodeDom.CodeTypeReference" /> especificado.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type to return.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo que se va a devolver.</param>
      <returns vsli:raw="A text representation of the specified type for the language this code generator is designed to generate code in. For example, in Visual Basic, passing in type System.Int32 will return &quot;Integer&quot;.">Representación de texto del tipo especificado para el lenguaje para el que se ha diseñado la generación de código de este generador de código. Por ejemplo, en Visual Basic, al pasar un tipo System.Int32 se devolverá "Integer".</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.IsValidIdentifier(System.String)">
      <summary vsli:raw="Gets a value that indicates whether the specified value is a valid identifier for the current language.">Obtiene un valor que indica si el valor especificado es un identificador válido para el lenguaje actual.</summary>
      <param name="value" vsli:raw="The value to test for being a valid identifier.">Valor que hay que comprobar para ver si es un identificador válido.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;value&quot; /&gt; parameter is a valid identifier; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el parámetro <paramref name="value" /> es un identificador válido; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary vsli:raw="Gets a value indicating whether the generator provides support for the language features represented by the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.GeneratorSupport&quot; /&gt; object.">Obtiene un valor que indica si el generador proporciona compatibilidad para las características de lenguaje representadas por el objeto <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> especificado.</summary>
      <param name="supports" vsli:raw="The capabilities to test the generator for.">Características para las que se va a comprobar el generador.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified capabilities are supported; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si se admiten las funciones especificadas; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.ValidateIdentifier(System.String)">
      <summary vsli:raw="Throws an exception if the specified value is not a valid identifier.">Provoca una excepción si el valor especificado no es un identificador válido.</summary>
      <param name="value" vsli:raw="The identifier to validate.">El identificador que se debe validar.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The identifier is not valid.">El identificador no es válido.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeParser">
      <summary vsli:raw="Defines an interface for parsing code into a &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt;.">Define una interfaz para analizar código como un objeto <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeParser.Parse(System.IO.TextReader)">
      <summary vsli:raw="When implemented in a derived class, compiles the specified text stream into a &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt;.">Cuando se implementa en una clase derivada, compila la secuencia de texto especificada como un objeto <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
      <param name="codeStream" vsli:raw="A &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; that can be used to read the code to be compiled.">Un objeto <see cref="T:System.IO.TextReader" /> que se puede utilizar para leer el código que se va a compilar.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; that contains a representation of the parsed code.">Un objeto <see cref="T:System.CodeDom.CodeCompileUnit" /> que contiene una representación del código analizado.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.LanguageOptions">
      <summary vsli:raw="Defines identifiers that indicate special features of a language.">Define los identificadores que indican las características especiales de un lenguaje.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.LanguageOptions.CaseInsensitive">
      <summary vsli:raw="The language is case-insensitive.">El lenguaje no distingue entre mayúsculas y minúsculas.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.LanguageOptions.None">
      <summary vsli:raw="The language has default characteristics.">El lenguaje tiene características predeterminadas.</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.TempFileCollection">
      <summary vsli:raw="Represents a collection of temporary files.">Representa una colección de archivos temporales.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; class with default values.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> con valores predeterminados.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; class using the specified temporary directory that is set to delete the temporary files after their generation and use, by default.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> utilizando el directorio temporal especificado que está establecido para eliminar los archivos temporales una vez generados y utilizados, de manera predeterminada.</summary>
      <param name="tempDir" vsli:raw="A path to the temporary directory to use for storing the temporary files.">Ruta de acceso al directorio temporal que se va a utilizar para almacenar los archivos temporales.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor(System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; class using the specified temporary directory and specified value indicating whether to keep or delete the temporary files after their generation and use, by default.">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> utilizando el directorio temporal y el valor especificados, lo que indicará si deben mantenerse o eliminarse los archivos temporales una vez generados y utilizados, de manera predeterminada.</summary>
      <param name="tempDir" vsli:raw="A path to the temporary directory to use for storing the temporary files.">Ruta de acceso al directorio temporal que se va a utilizar para almacenar los archivos temporales.</param>
      <param name="keepFiles" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the temporary files should be kept after use; &lt;see langword=&quot;false&quot; /&gt; if the temporary files should be deleted.">Es <see langword="true" /> si los archivos temporales han de mantenerse una vez utilizados; es <see langword="false" /> si los archivos temporales deben eliminarse.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddExtension(System.String)">
      <summary vsli:raw="Adds a file name with the specified file name extension to the collection.">Agrega a la colección un nombre de archivo con la extensión del nombre de archivo especificado.</summary>
      <param name="fileExtension" vsli:raw="The file name extension for the auto-generated temporary file name to add to the collection.">Extensión del nombre de archivo para el nombre de archivo temporal generado de forma automática que se agrega a la colección.</param>
      <returns vsli:raw="A file name with the specified extension that was just added to the collection.">Nombre de archivo con la extensión del nombre de archivo especificado que se ha agregado a la colección.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddExtension(System.String,System.Boolean)">
      <summary vsli:raw="Adds a file name with the specified file name extension to the collection, using the specified value indicating whether the file should be deleted or retained.">Agrega a la colección un nombre de archivo con la extensión de archivo especificada utilizando el valor especificado que indica si el archivo debe eliminarse o conservarse.</summary>
      <param name="fileExtension" vsli:raw="The file name extension for the auto-generated temporary file name to add to the collection.">Extensión del nombre de archivo para el nombre de archivo temporal generado de forma automática que se agrega a la colección.</param>
      <param name="keepFile" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the file should be kept after use; &lt;see langword=&quot;false&quot; /&gt; if the file should be deleted.">Es <see langword="true" /> si al archivo ha de mantenerse una vez utilizado; es <see langword="false" /> si el archivo debe eliminarse.</param>
      <returns vsli:raw="A file name with the specified extension that was just added to the collection.">Nombre de archivo con la extensión del nombre de archivo especificado que se ha agregado a la colección.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;fileExtension&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or an empty string.">
        <paramref name="fileExtension" /> es <see langword="null" /> o una cadena vacía.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddFile(System.String,System.Boolean)">
      <summary vsli:raw="Adds the specified file to the collection, using the specified value indicating whether to keep the file after the collection is disposed or when the &lt;see cref=&quot;M:System.CodeDom.Compiler.TempFileCollection.Delete&quot; /&gt; method is called.">Agrega el archivo especificado a la colección utilizando el valor especificado que indica si debe mantenerse el archivo una vez se haya deshecho de la colección o al llamar al método <see cref="M:System.CodeDom.Compiler.TempFileCollection.Delete" />.</summary>
      <param name="fileName" vsli:raw="The name of the file to add to the collection.">Nombre del archivo que se va a agregar a la colección.</param>
      <param name="keepFile" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the file should be kept after use; &lt;see langword=&quot;false&quot; /&gt; if the file should be deleted.">Es <see langword="true" /> si al archivo ha de mantenerse una vez utilizado; es <see langword="false" /> si el archivo debe eliminarse.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;fileName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or an empty string.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;fileName&quot; /&gt; is a duplicate.">
        <paramref name="fileName" /> es <see langword="null" /> o una cadena vacía.
O bien
<paramref name="fileName" /> es un duplicado.</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.BasePath">
      <summary vsli:raw="Gets the full path to the base file name, without a file name extension, on the temporary directory path, that is used to generate temporary file names for the collection.">Obtiene la ruta de acceso completa al nombre de archivo base, sin una extensión de nombre de archivo en la ruta de directorio temporal que se utiliza para generar los nombres de archivo temporales para la colección.</summary>
      <returns vsli:raw="The full path to the base file name, without a file name extension, on the temporary directory path, that is used to generate temporary file names for the collection.">Ruta de acceso completa al nombre de archivo base, sin una extensión de nombre de archivo en la ruta de directorio temporal que se utiliza para generar los nombres de archivos temporales para la colección.</returns>
      <exception cref="T:System.Security.SecurityException" vsli:raw="If the &lt;see cref=&quot;P:System.CodeDom.Compiler.TempFileCollection.BasePath&quot; /&gt; property has not been set or is set to &lt;see langword=&quot;null&quot; /&gt;, and &lt;see cref=&quot;F:System.Security.Permissions.FileIOPermissionAccess.AllAccess&quot; /&gt; is not granted for the temporary directory indicated by the &lt;see cref=&quot;P:System.CodeDom.Compiler.TempFileCollection.TempDir&quot; /&gt; property.">Si la propiedad <see cref="P:System.CodeDom.Compiler.TempFileCollection.BasePath" /> no se ha establecido o se ha establecido en <see langword="null" /> y no se concede <see cref="F:System.Security.Permissions.FileIOPermissionAccess.AllAccess" /> para el directorio temporal indicado por la propiedad <see cref="P:System.CodeDom.Compiler.TempFileCollection.TempDir" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.CopyTo(System.String[],System.Int32)">
      <summary vsli:raw="Copies the members of the collection to the specified string, beginning at the specified index.">Copia todos los miembros de la colección en la cadena especificada a partir del índice especificado.</summary>
      <param name="fileNames" vsli:raw="The array of strings to copy to.">Matriz de cadenas que se va a copiar.</param>
      <param name="start" vsli:raw="The index of the array to begin copying to.">Índice de la matriz donde se va a iniciar la copia.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.Count">
      <summary vsli:raw="Gets the number of files in the collection.">Obtiene el número de archivos de la colección.</summary>
      <returns vsli:raw="The number of files in the collection.">Número de archivos de la colección.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Delete">
      <summary vsli:raw="Deletes the temporary files within this collection that were not marked to be kept.">Elimina los archivos temporales dentro de esta colección que no están marcados para conservarse.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; and optionally releases the managed resources.">Libera los recursos no administrados que usa <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> y, de forma opcional, libera los recursos administrados.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Finalize">
      <summary vsli:raw="Attempts to delete the temporary files before this object is reclaimed by garbage collection.">Intenta eliminar los archivos temporales antes de que la recolección de elementos no utilizados reclame este objeto.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.GetEnumerator">
      <summary vsli:raw="Gets an enumerator that can enumerate the members of the collection.">Obtiene un enumerador que puede enumerar los miembros de la colección.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that contains the collection's members.">
        <see cref="T:System.Collections.IEnumerator" /> que contiene los miembros de la colección.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.KeepFiles">
      <summary vsli:raw="Gets or sets a value indicating whether to keep the files, by default, when the &lt;see cref=&quot;M:System.CodeDom.Compiler.TempFileCollection.Delete&quot; /&gt; method is called or the collection is disposed.">Obtiene o establece un valor que indica si se deben mantener los archivos de manera predeterminada al llamar al método <see cref="M:System.CodeDom.Compiler.TempFileCollection.Delete" /> o eliminar la colección.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the files should be kept; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" />si deben mantenerse los archivos; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the collection to an array, starting at the specified index of the target array.">Copia los elementos de la colección en una matriz, empezando en el índice especificado de la matriz de destino.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los elementos copiados de <see cref="T:System.Collections.ICollection" />. <see cref="T:System.Array" /> debe tener una indización de base cero.</param>
      <param name="start" vsli:raw="The zero-based index in array at which copying begins.">Índice de base cero de la matriz donde comienza la copia.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the number of elements contained in the collection.">Obtiene el número de elementos contenido en la colección.</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Número de elementos contenidos en <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the collection is synchronized (thread safe).">Obtiene un valor que indica si el acceso a la colección está sincronizado (es seguro para la ejecución de subprocesos).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos); de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the collection.">Obtiene un objeto que se puede utilizar para sincronizar el acceso a la colección.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">
        <see cref="T:System.Collections.IEnumerator" /> que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#IDisposable#Dispose">
      <summary vsli:raw="Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.">Realiza tareas definidas por la aplicación asociadas a la liberación o al restablecimiento de recursos no administrados.</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.TempDir">
      <summary vsli:raw="Gets the temporary directory to store the temporary files in.">Obtiene el directorio temporal en el que van a almacenarse los archivos temporales.</summary>
      <returns vsli:raw="The temporary directory to store the temporary files in.">Directorio temporal en el que van a almacenarse los archivos temporales.</returns>
    </member>
    <member name="T:System.CodeDom.FieldDirection">
      <summary vsli:raw="Defines identifiers used to indicate the direction of parameter and argument declarations.">Define los identificadores que se utilizan para indicar la dirección del parámetro y las declaraciones de argumentos.</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.In">
      <summary vsli:raw="An incoming field.">Campo entrante.</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.Out">
      <summary vsli:raw="An outgoing field.">Campo de salida.</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.Ref">
      <summary vsli:raw="A field by reference.">Campo por referencia.</summary>
    </member>
    <member name="T:System.CodeDom.MemberAttributes">
      <summary vsli:raw="Defines member attribute identifiers for class members.">Define los identificadores de atributos de miembro para miembros de clase.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Abstract">
      <summary vsli:raw="An abstract member.">Miembro abstracto.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.AccessMask">
      <summary vsli:raw="An access mask.">Máscara de acceso.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Assembly">
      <summary vsli:raw="A member that is accessible to any class within the same assembly.">Un miembro que es accesible a cualquier clase dentro del mismo ensamblado.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Const">
      <summary vsli:raw="A constant member.">Miembro constante.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Family">
      <summary vsli:raw="A member that is accessible within the family of its class and derived classes.">Un miembro que es accesible dentro de la familia de su clase y clases derivadas.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.FamilyAndAssembly">
      <summary vsli:raw="A member that is accessible within its class, and derived classes in the same assembly.">Un miembro que es accesible dentro de su clase y de las clases derivadas en el mismo ensamblado.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.FamilyOrAssembly">
      <summary vsli:raw="A member that is accessible within its class, its derived classes in any assembly, and any class in the same assembly.">Un miembro que es accesible dentro de su clase, sus clases derivadas en cualquier ensamblado y cualquier clase en el mismo ensamblado.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Final">
      <summary vsli:raw="A member that cannot be overridden in a derived class.">Un miembro que no puede reemplazarse en una clase derivada.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.New">
      <summary vsli:raw="A new member.">Nuevo miembro.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Overloaded">
      <summary vsli:raw="An overloaded member. Some languages, such as Visual Basic, require overloaded members to be explicitly indicated.">Miembro sobrecargado. En algunos lenguajes, como Visual Basic, requieren que los miembros sobrecargados estén indicados de forma explícita.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Override">
      <summary vsli:raw="A member that overrides a base class member.">Un miembro que reemplaza un miembro de clase base.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Private">
      <summary vsli:raw="A private member.">Miembro privado.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Public">
      <summary vsli:raw="A public member.">Miembro público.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.ScopeMask">
      <summary vsli:raw="A scope mask.">Máscara de ámbito.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Static">
      <summary vsli:raw="A static member. In Visual Basic, this is equivalent to the &lt;see langword=&quot;Shared&quot; /&gt; keyword.">Miembro estático. En Visual Basic, esto es equivalente a la palabra clave <see langword="Shared" />.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.VTableMask">
      <summary vsli:raw="A VTable mask.">Máscara de VTable.</summary>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.CodeDom</name>
  </assembly>
  <members>
    <member name="T:Microsoft.CSharp.CSharpCodeProvider">
      <summary vsli:raw="Provides access to instances of the C# code generator and code compiler.">Donne accès aux instances du générateur de code et du compilateur de code C#.</summary>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:Microsoft.CSharp.CSharpCodeProvider&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:Microsoft.CSharp.CSharpCodeProvider" />.</summary>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:Microsoft.CSharp.CSharpCodeProvider&quot; /&gt; class by using the specified provider options.">Initialise une nouvelle instance de la classe <see cref="T:Microsoft.CSharp.CSharpCodeProvider" /> en utilisant les options de fournisseur spécifiées.</summary>
      <param name="providerOptions" vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; object that contains the provider options.">Objet <see cref="T:System.Collections.Generic.IDictionary`2" /> qui contient les options de fournisseur du fichier de configuration.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;providerOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="providerOptions" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.CreateCompiler">
      <summary vsli:raw="Gets an instance of the C# code compiler.">Obtient une instance du compilateur de code C#.</summary>
      <returns vsli:raw="An instance of the C# &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeCompiler&quot; /&gt; implementation.">Instance de l'implémentation C# de <see cref="T:System.CodeDom.Compiler.ICodeCompiler" />.</returns>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.CreateGenerator">
      <summary vsli:raw="Gets an instance of the C# code generator.">Obtient une instance du générateur de code C#.</summary>
      <returns vsli:raw="An instance of the C# &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeGenerator&quot; /&gt; implementation.">Instance de l'implémentation C# de <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />.</returns>
    </member>
    <member name="P:Microsoft.CSharp.CSharpCodeProvider.FileExtension">
      <summary vsli:raw="Gets the file name extension to use when creating source code files.">Obtient l'extension de nom de fichier à utiliser pendant la création de fichiers de code source.</summary>
      <returns vsli:raw="The file name extension to use for generated source code files.">Extension de nom de fichier à utiliser pour les fichiers de code source générés.</returns>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified class member using the specified text writer and code generator options.">Génère du code pour le membre de classe spécifié en utilisant les options spécifiées du TextWriter et du générateur de code.</summary>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; to generate code for.">
        <see cref="T:System.CodeDom.CodeTypeMember" /> pour lequel du code doit être généré.</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to write to.">
        <see cref="T:System.IO.TextWriter" /> dans lequel écrire.</param>
      <param name="options" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; to use when generating the code.">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> à utiliser pendant la génération du code.</param>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.GetConverter(System.Type)">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified type of object.">Obtient un <see cref="T:System.ComponentModel.TypeConverter" /> pour le type d'objet spécifié.</summary>
      <param name="type" vsli:raw="The type of object to retrieve a type converter for.">Type d'objet pour lequel un convertisseur de type doit être récupéré.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified type.">
        <see cref="T:System.ComponentModel.TypeConverter" /> pour le type spécifié.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.VBCodeProvider">
      <summary vsli:raw="Provides access to instances of the Visual Basic code generator and code compiler.">Fournit l'accès aux instances du générateur de code et du compilateur de code Visual Basic.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:Microsoft.VisualBasic.VBCodeProvider&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:Microsoft.VisualBasic.VBCodeProvider" />.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:Microsoft.VisualBasic.VBCodeProvider&quot; /&gt; class by using the specified provider options.">Initialise une nouvelle instance de la classe <see cref="T:Microsoft.VisualBasic.VBCodeProvider" /> en utilisant les options de fournisseur spécifiées.</summary>
      <param name="providerOptions" vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; object that contains the provider options.">Objet <see cref="T:System.Collections.Generic.IDictionary`2" /> qui contient les options de fournisseur du fichier de configuration.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;providerOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="providerOptions" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.CreateCompiler">
      <summary vsli:raw="Gets an instance of the Visual Basic code compiler.">Obtient une instance du compilateur de code Visual Basic.</summary>
      <returns vsli:raw="An instance of the Visual Basic &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeCompiler&quot; /&gt; implementation.">Instance de l'implémentation Visual Basic de <see cref="T:System.CodeDom.Compiler.ICodeCompiler" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.CreateGenerator">
      <summary vsli:raw="Gets an instance of the Visual Basic code generator.">Obtient une instance du générateur de code Visual Basic.</summary>
      <returns vsli:raw="An instance of the Visual Basic &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeGenerator&quot; /&gt; implementation.">Instance de l'implémentation Visual Basic de <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.VBCodeProvider.FileExtension">
      <summary vsli:raw="Gets the file name extension to use when creating source code files.">Obtient l'extension du nom de fichier à utiliser lors de la création de fichiers de code source.</summary>
      <returns vsli:raw="The file name extension to use for generated source code files.">Extension de nom de fichier à utiliser pour les fichiers de code source générés.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified class member using the specified text writer and code generator options.">Génère du code pour le membre de classe spécifié en utilisant les options spécifiées du TextWriter et du générateur de code.</summary>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; to generate code for.">
        <see cref="T:System.CodeDom.CodeTypeMember" /> pour lequel du code doit être généré.</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to write to.">
        <see cref="T:System.IO.TextWriter" /> dans lequel écrire.</param>
      <param name="options" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; to use when generating the code.">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> à utiliser pendant la génération du code.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.GetConverter(System.Type)">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified type of object.">Obtient un <see cref="T:System.ComponentModel.TypeConverter" /> pour le type d'objet spécifié.</summary>
      <param name="type" vsli:raw="The type of object to retrieve a type converter for.">Type d'objet pour lequel un convertisseur de type doit être récupéré.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified type.">
        <see cref="T:System.ComponentModel.TypeConverter" /> pour le type spécifié.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.VBCodeProvider.LanguageOptions">
      <summary vsli:raw="Gets a language features identifier.">Obtient un identificateur de fonctionnalités de langage.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.LanguageOptions&quot; /&gt; that indicates special features of the language.">
        <see cref="T:System.CodeDom.Compiler.LanguageOptions" /> qui indique les fonctionnalités spéciales d'un langage.</returns>
    </member>
    <member name="T:System.CodeDom.CodeArgumentReferenceExpression">
      <summary vsli:raw="Represents a reference to the value of an argument passed to a method.">Représente une référence à la valeur d'un argument passé à une méthode.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArgumentReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArgumentReferenceExpression&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArgumentReferenceExpression.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArgumentReferenceExpression&quot; /&gt; class using the specified parameter name.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" /> avec le nom de paramètre spécifié.</summary>
      <param name="parameterName" vsli:raw="The name of the parameter to reference.">Nom du paramètre à référencer.</param>
    </member>
    <member name="P:System.CodeDom.CodeArgumentReferenceExpression.ParameterName">
      <summary vsli:raw="Gets or sets the name of the parameter this expression references.">Obtient ou définit le nom du paramètre auquel l'expression fait référence.</summary>
      <returns vsli:raw="The name of the parameter to reference.">Nom du paramètre à référencer.</returns>
    </member>
    <member name="T:System.CodeDom.CodeArrayCreateExpression">
      <summary vsli:raw="Represents an expression that creates an array.">Représente une expression qui crée un tableau.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeArrayCreateExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type and code expression indicating the number of indexes for the array.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> avec le type de données et l'expression de code indiquant le nombre d'index qui ont été spécifiés pour le tableau.</summary>
      <param name="createType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; indicating the data type of the array to create.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> indiquant le type de données du tableau à créer.</param>
      <param name="size" vsli:raw="An expression that indicates the number of indexes of the array to create.">Expression indiquant le nombre d'index du tableau à créer.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type and initialization expressions.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> avec le type de données et les expressions d'initialisation qui ont été spécifiés pour le tableau.</summary>
      <param name="createType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the array to create.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> qui indique le type de données du tableau à créer.</param>
      <param name="initializers" vsli:raw="An array of expressions to use to initialize the array.">Tableau des expressions à utiliser pour initialiser le tableau.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type and number of indexes for the array.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> avec le type de données et le nombre d'index qui ont été spécifiés pour le tableau.</summary>
      <param name="createType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; indicating the data type of the array to create.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> indiquant le type de données du tableau à créer.</param>
      <param name="size" vsli:raw="The number of indexes of the array to create.">Nombre d'index du tableau à créer.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type name and code expression indicating the number of indexes for the array.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> avec le nom du type de données et l'expression de code indiquant le nombre d'index qui ont été spécifiés pour le tableau.</summary>
      <param name="createType" vsli:raw="The name of the data type of the array to create.">Nom du type de données du tableau à créer.</param>
      <param name="size" vsli:raw="An expression that indicates the number of indexes of the array to create.">Expression indiquant le nombre d'index du tableau à créer.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type name and initializers.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> avec le nom du type de données et les initialiseurs spécifiés pour le tableau.</summary>
      <param name="createType" vsli:raw="The name of the data type of the array to create.">Nom du type de données du tableau à créer.</param>
      <param name="initializers" vsli:raw="An array of expressions to use to initialize the array.">Tableau des expressions à utiliser pour initialiser le tableau.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type name and number of indexes for the array.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> avec le nom du type de données et le nombre d'index qui ont été spécifiés pour le tableau.</summary>
      <param name="createType" vsli:raw="The name of the data type of the array to create.">Nom du type de données du tableau à créer.</param>
      <param name="size" vsli:raw="The number of indexes of the array to create.">Nombre d'index du tableau à créer.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type and code expression indicating the number of indexes for the array.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> avec le type de données et l'expression de code indiquant le nombre d'index qui ont été spécifiés pour le tableau.</summary>
      <param name="createType" vsli:raw="The data type of the array to create.">Type de données du tableau à créer.</param>
      <param name="size" vsli:raw="An expression that indicates the number of indexes of the array to create.">Expression indiquant le nombre d'index du tableau à créer.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type and initializers.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> avec le type de données et les initialiseurs spécifiés pour le tableau.</summary>
      <param name="createType" vsli:raw="The data type of the array to create.">Type de données du tableau à créer.</param>
      <param name="initializers" vsli:raw="An array of expressions to use to initialize the array.">Tableau des expressions à utiliser pour initialiser le tableau.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type and number of indexes for the array.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> avec le type de données et le nombre d'index qui ont été spécifiés pour le tableau.</summary>
      <param name="createType" vsli:raw="The data type of the array to create.">Type de données du tableau à créer.</param>
      <param name="size" vsli:raw="The number of indexes of the array to create.">Nombre d'index du tableau à créer.</param>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.CreateType">
      <summary vsli:raw="Gets or sets the type of array to create.">Obtient ou définit le type de tableau à créer.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type of the array.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> qui indique le type de tableau.</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.Initializers">
      <summary vsli:raw="Gets the initializers with which to initialize the array.">Obtient les initialiseurs à utiliser pour initialiser le tableau.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that indicates the initialization values.">
        <see cref="T:System.CodeDom.CodeExpressionCollection" /> indiquant les valeurs d'initialisation.</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.Size">
      <summary vsli:raw="Gets or sets the number of indexes in the array.">Obtient ou définit le nombre d'index du tableau.</summary>
      <returns vsli:raw="The number of indexes in the array.">Nombre d'index du tableau.</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.SizeExpression">
      <summary vsli:raw="Gets or sets the expression that indicates the size of the array.">Obtient ou définit l'expression qui indique la taille du tableau.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the size of the array.">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant la taille du tableau.</returns>
    </member>
    <member name="T:System.CodeDom.CodeArrayIndexerExpression">
      <summary vsli:raw="Represents a reference to an index of an array.">Représente une référence à un index d'un tableau.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayIndexerExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayIndexerExpression&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeArrayIndexerExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayIndexerExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayIndexerExpression&quot; /&gt; class using the specified target object and indexes.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeArrayIndexerExpression" /> avec l'objet et les index cibles spécifiés.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the array the indexer targets.">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant le tableau visé par l'indexeur.</param>
      <param name="indices" vsli:raw="The index or indexes to reference.">Index à référencer.</param>
    </member>
    <member name="P:System.CodeDom.CodeArrayIndexerExpression.Indices">
      <summary vsli:raw="Gets or sets the index or indexes of the indexer expression.">Obtient ou définit l'index ou les index de l'expression d'indexeur.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that indicates the index or indexes of the indexer expression.">
        <see cref="T:System.CodeDom.CodeExpressionCollection" /> qui indique l'index ou les index de l'expression d'indexeur.</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayIndexerExpression.TargetObject">
      <summary vsli:raw="Gets or sets the target object of the array indexer.">Obtient ou définit l'objet cible de l'indexeur de tableau.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that represents the array being indexed.">
        <see cref="T:System.CodeDom.CodeExpression" /> représentant le tableau indexé.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAssignStatement">
      <summary vsli:raw="Represents a simple assignment statement.">Représente une instruction d'assignation simple.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAssignStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAssignStatement&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeAssignStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAssignStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAssignStatement&quot; /&gt; class using the specified expressions.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeAssignStatement" /> avec les expressions spécifiées.</summary>
      <param name="left" vsli:raw="The variable to assign to.">Variable à assigner.</param>
      <param name="right" vsli:raw="The value to assign.">Valeur à attribuer.</param>
    </member>
    <member name="P:System.CodeDom.CodeAssignStatement.Left">
      <summary vsli:raw="Gets or sets the expression representing the object or reference to assign to.">Obtient ou définit l'expression représentant l'objet ou la référence faisant l'objet de l'assignation.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object or reference to assign to.">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'objet ou la référence faisant l'objet de l'assignation.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAssignStatement.Right">
      <summary vsli:raw="Gets or sets the expression representing the object or reference to assign.">Obtient ou définit l'expression représentant l'objet ou la référence à assigner.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object or reference to assign.">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'objet ou la référence à assigner.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttachEventStatement">
      <summary vsli:raw="Represents a statement that attaches an event-handler delegate to an event.">Représente une instruction qui attache un délégué de gestionnaire d'événements à un événement.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttachEventStatement&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeAttachEventStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor(System.CodeDom.CodeEventReferenceExpression,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttachEventStatement&quot; /&gt; class using the specified event and delegate.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeAttachEventStatement" /> avec l'événement et le délégué spécifiés.</summary>
      <param name="eventRef" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeEventReferenceExpression&quot; /&gt; that indicates the event to attach an event handler to.">
        <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> indiquant l'événement auquel un gestionnaire d'événements doit être attaché.</param>
      <param name="listener" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the new event handler.">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant le nouveau gestionnaire d'événements.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttachEventStatement&quot; /&gt; class using the specified object containing the event, event name, and event-handler delegate.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeAttachEventStatement" /> avec l'objet contenant l'événement, le nom d'événement et le délégué de gestionnaire d'événements spécifiés.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the event.">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'objet qui contient l'événement.</param>
      <param name="eventName" vsli:raw="The name of the event to attach an event handler to.">Nom de l'événement auquel un gestionnaire d'événements doit être attaché.</param>
      <param name="listener" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the new event handler.">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant le nouveau gestionnaire d'événements.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttachEventStatement.Event">
      <summary vsli:raw="Gets or sets the event to attach an event-handler delegate to.">Obtient ou définit l'événement auquel un délégué de gestionnaire d'événements doit être attaché.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeEventReferenceExpression&quot; /&gt; that indicates the event to attach an event handler to.">
        <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> indiquant l'événement auquel un gestionnaire d'événements doit être attaché.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttachEventStatement.Listener">
      <summary vsli:raw="Gets or sets the new event-handler delegate to attach to the event.">Obtient ou définit le nouveau délégué de gestionnaire d'événements à attacher à l'événement.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the new event handler to attach.">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant le nouveau gestionnaire d'événements à attacher.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeArgument">
      <summary vsli:raw="Represents an argument used in a metadata attribute declaration.">Représente un argument utilisé dans une déclaration attribute de métadonnées.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeAttributeArgument" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; class using the specified value.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeAttributeArgument" /> avec la valeur spécifiée.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that represents the value of the argument.">
        <see cref="T:System.CodeDom.CodeExpression" /> représentant la valeur de l'argument.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; class using the specified name and value.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeAttributeArgument" /> avec la valeur et le nom spécifiés.</summary>
      <param name="name" vsli:raw="The name of the attribute property the argument applies to.">Nom de la propriété d'attribut à laquelle s'applique l'argument.</param>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that represents the value of the argument.">
        <see cref="T:System.CodeDom.CodeExpression" /> représentant la valeur de l'argument.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgument.Name">
      <summary vsli:raw="Gets or sets the name of the attribute.">Obtient ou définit le nom de l'attribut.</summary>
      <returns vsli:raw="The name of the attribute property the argument is for.">Nom de la propriété d'attribut à laquelle s'applique l'argument.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgument.Value">
      <summary vsli:raw="Gets or sets the value for the attribute argument.">Obtient ou définit la valeur de l'argument d'attribut.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the value for the attribute argument.">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant la valeur de l'argument d'attribut.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeArgumentCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; objects.">Représente une collection d'objets <see cref="T:System.CodeDom.CodeAttributeArgument" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor(System.CodeDom.CodeAttributeArgument[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; objects.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> contenant le tableau d'objets <see cref="T:System.CodeDom.CodeAttributeArgument" /> spécifié.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; objects with which to initialize the collection.">Tableau d'objets <see cref="T:System.CodeDom.CodeAttributeArgument" /> à utiliser pour initialiser la collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more objects in the array are &lt;see langword=&quot;null&quot; /&gt;.">Un ou plusieurs objets du tableau ont la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor(System.CodeDom.CodeAttributeArgumentCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; class containing the elements of the specified source collection.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> contenant les éléments de la collection source spécifiée.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; with which to initialize the collection.">
        <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> utilisé pour initialiser la collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Add(System.CodeDom.CodeAttributeArgument)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object to the collection.">Ajoute l'objet <see cref="T:System.CodeDom.CodeAttributeArgument" /> spécifié à la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object to add.">Objet <see cref="T:System.CodeDom.CodeAttributeArgument" /> à ajouter.</param>
      <returns vsli:raw="The index at which the new element was inserted.">Index au niveau duquel le nouvel élément a été inséré.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.AddRange(System.CodeDom.CodeAttributeArgument[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; array to the end of the collection.">Copie les éléments du tableau <see cref="T:System.CodeDom.CodeAttributeArgument" /> spécifié à la fin de la collection.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; that contains the objects to add to the collection.">Tableau de type <see cref="T:System.CodeDom.CodeAttributeArgument" /> qui contient les objets à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.AddRange(System.CodeDom.CodeAttributeArgumentCollection)">
      <summary vsli:raw="Copies the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; object to the end of the collection.">Copie le contenu d'un autre objet <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> à la fin de la collection.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; that contains the objects to add to the collection.">
        <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> qui contient les objets à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Contains(System.CodeDom.CodeAttributeArgument)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object.">Obtient une valeur qui indique si la collection contient l'<see cref="T:System.CodeDom.CodeAttributeArgument" /> spécifiée.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object to locate in the collection.">Objet <see cref="T:System.CodeDom.CodeAttributeArgument" /> à placer dans la collection.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la collection contient l'objet spécifié ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.CopyTo(System.CodeDom.CodeAttributeArgument[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance beginning at the specified index.">Copie la collection d'objets dans une instance à une dimension <see cref="T:System.Array" /> en commençant à l'index spécifié.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">
        <see cref="T:System.Array" /> unidimensionnel qui représente la destination des valeurs copiées à partir de la collection.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">Index du tableau à partir duquel commencer l'insertion.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">Le tableau de destination est multidimensionnel.

ou -
Le nombre d'éléments dans le <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> est supérieur à l'espace disponible entre l'index du tableau cible spécifié par le paramètre <paramref name="index" /> et la fin du tableau cible.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">Le paramètre <paramref name="index" /> est inférieur à l'index minimal du tableau cible.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.IndexOf(System.CodeDom.CodeAttributeArgument)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object in the collection, if it exists in the collection.">Obtient l'index de l'objet <see cref="T:System.CodeDom.CodeAttributeArgument" /> spécifié dans la collection, s'il existe dans la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object to locate in the collection.">Objet <see cref="T:System.CodeDom.CodeAttributeArgument" /> à placer dans la collection.</param>
      <returns vsli:raw="The index of the specified object, if found, in the collection; otherwise, -1.">Index de l'objet spécifié, s'il existe, dans la collection ; sinon, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Insert(System.Int32,System.CodeDom.CodeAttributeArgument)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object into the collection at the specified index.">Insère l'objet <see cref="T:System.CodeDom.CodeAttributeArgument" /> indiqué dans la collection à l'index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">Index de base zéro dans lequel l'objet spécifié doit être inséré.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object to insert.">Objet <see cref="T:System.CodeDom.CodeAttributeArgument" /> à insérer.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgumentCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object at the specified index in the collection.">Obtient ou définit l'objet <see cref="T:System.CodeDom.CodeAttributeArgument" /> à l'index spécifié dans la collection.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">Index de la collection à laquelle accéder.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; at each valid index.">
        <see cref="T:System.CodeDom.CodeAttributeArgument" /> pour chaque index valide.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">Le paramètre <paramref name="index" /> est en dehors de la plage valide des index pour la collection.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Remove(System.CodeDom.CodeAttributeArgument)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object from the collection.">Supprime l'objet <see cref="T:System.CodeDom.CodeAttributeArgument" /> spécifié de la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object to remove from the collection.">Objet <see cref="T:System.CodeDom.CodeAttributeArgument" /> à supprimer de la collection.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">L'objet spécifié est introuvable dans la collection.</exception>
    </member>
    <member name="T:System.CodeDom.CodeAttributeDeclaration">
      <summary vsli:raw="Represents an attribute declaration.">Représente une déclaration attribute.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeAttributeDeclaration" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; class using the specified code type reference.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> en utilisant la référence du type de code spécifiée.</summary>
      <param name="attributeType" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that identifies the attribute.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> qui identifie l'attribut.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeAttributeArgument[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; class using the specified code type reference and arguments.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> en utilisant la référence du type de code et les arguments spécifiés.</summary>
      <param name="attributeType" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that identifies the attribute.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> qui identifie l'attribut.</param>
      <param name="arguments" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; that contains the arguments for the attribute.">Tableau de type <see cref="T:System.CodeDom.CodeAttributeArgument" /> qui contient les arguments pour l'attribut.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; class using the specified name.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> avec le nom spécifié.</summary>
      <param name="name" vsli:raw="The name of the attribute.">Nom de l'attribut.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.String,System.CodeDom.CodeAttributeArgument[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; class using the specified name and arguments.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> avec le nom et les arguments spécifiés.</summary>
      <param name="name" vsli:raw="The name of the attribute.">Nom de l'attribut.</param>
      <param name="arguments" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; that contains the arguments for the attribute.">Tableau de type <see cref="T:System.CodeDom.CodeAttributeArgument" /> qui contient les arguments pour l'attribut.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.Arguments">
      <summary vsli:raw="Gets the arguments for the attribute.">Obtient les arguments de l'attribut.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; that contains the arguments for the attribute.">
        <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> qui contient les arguments pour l'attribut.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.AttributeType">
      <summary vsli:raw="Gets the code type reference for the code attribute declaration.">Obtient la référence de type de code pour la déclaration d'attribut de code.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that identifies the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt;.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> qui identifie <see cref="T:System.CodeDom.CodeAttributeDeclaration" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.Name">
      <summary vsli:raw="Gets or sets the name of the attribute being declared.">Obtient ou définit le nom de l'attribut en cours de déclaration.</summary>
      <returns vsli:raw="The name of the attribute.">Nom de l'attribut.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeDeclarationCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; objects.">Représente une collection d'objets <see cref="T:System.CodeDom.CodeAttributeDeclaration" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor(System.CodeDom.CodeAttributeDeclaration[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; objects.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> contenant le tableau d'objets <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> spécifié.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; objects with which to initialize the collection.">Tableau d'objets <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> à utiliser pour initialiser la collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more objects in the array are &lt;see langword=&quot;null&quot; /&gt;.">Un ou plusieurs objets du tableau ont la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; class containing the elements of the specified source collection.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> contenant les éléments de la collection source spécifiée.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; with which to initialize the collection.">
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> utilisé pour initialiser la collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Add(System.CodeDom.CodeAttributeDeclaration)">
      <summary vsli:raw="Adds a &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object with the specified value to the collection.">Ajoute un objet <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> possédant la valeur spécifiée à la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object to add.">Objet <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> à ajouter.</param>
      <returns vsli:raw="The index at which the new element was inserted.">Index au niveau duquel le nouvel élément a été inséré.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.AddRange(System.CodeDom.CodeAttributeDeclaration[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; array to the end of the collection.">Copie les éléments du tableau <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> spécifié à la fin de la collection.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; that contains the objects to add to the collection.">Tableau de type <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> qui contient les objets à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.AddRange(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary vsli:raw="Copies the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; object to the end of the collection.">Copie le contenu d'un autre objet <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> à la fin de la collection.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; that contains the objects to add to the collection.">
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> qui contient les objets à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Contains(System.CodeDom.CodeAttributeDeclaration)">
      <summary vsli:raw="Gets or sets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object.">Obtient ou définit une valeur qui indique si la collection contient l'objet <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> spécifié.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object to locate.">Objet <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> à rechercher.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la collection contient l'objet spécifié ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.CopyTo(System.CodeDom.CodeAttributeDeclaration[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance beginning at the specified index.">Copie la collection d'objets dans une instance à une dimension <see cref="T:System.Array" /> en commençant à l'index spécifié.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">
        <see cref="T:System.Array" /> unidimensionnel qui représente la destination des valeurs copiées à partir de la collection.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">Index du tableau à partir duquel commencer l'insertion.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">Le tableau de destination est multidimensionnel.

ou -
Le nombre d'éléments dans le <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> est supérieur à l'espace disponible entre l'index du tableau cible spécifié par le paramètre <paramref name="index" /> et la fin du tableau cible.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">Le paramètre <paramref name="index" /> est inférieur à l'index minimal du tableau cible.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.IndexOf(System.CodeDom.CodeAttributeDeclaration)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object in the collection, if it exists in the collection.">Obtient l'index de l'objet <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> spécifié dans la collection, s'il existe dans la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object to locate in the collection.">Objet <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> à placer dans la collection.</param>
      <returns vsli:raw="The index in the collection of the specified object, if found; otherwise, -1.">Index de l'objet spécifié dans la collection (s'il existe) ; sinon, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Insert(System.Int32,System.CodeDom.CodeAttributeDeclaration)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object into the collection at the specified index.">Insère l'objet <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> indiqué dans la collection à l'index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">Index de base zéro dans lequel l'objet spécifié doit être inséré.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object to insert.">Objet <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> à insérer.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclarationCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object at the specified index.">Obtient ou définit l'objet <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> à l'index spécifié.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">Index de la collection à laquelle accéder.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; at each valid index.">
        <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> pour chaque index valide.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">Le paramètre <paramref name="index" /> est en dehors de la plage valide des index pour la collection.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Remove(System.CodeDom.CodeAttributeDeclaration)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object from the collection.">Supprime l'objet <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> spécifié de la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object to remove from the collection.">Objet <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> à supprimer de la collection.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">L'objet spécifié est introuvable dans la collection.</exception>
    </member>
    <member name="T:System.CodeDom.CodeBaseReferenceExpression">
      <summary vsli:raw="Represents a reference to the base class.">Représente une référence à la classe de base.</summary>
    </member>
    <member name="M:System.CodeDom.CodeBaseReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeBaseReferenceExpression&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeBaseReferenceExpression" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeBinaryOperatorExpression">
      <summary vsli:raw="Represents an expression that consists of a binary operation between two expressions.">Représente une expression consistant en une opération binaire entre deux expressions.</summary>
    </member>
    <member name="M:System.CodeDom.CodeBinaryOperatorExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeBinaryOperatorExpression&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeBinaryOperatorExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeBinaryOperatorType,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeBinaryOperatorExpression&quot; /&gt; class using the specified parameters.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" /> à l'aide des paramètres spécifiés.</summary>
      <param name="left" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; on the left of the operator.">
        <see cref="T:System.CodeDom.CodeExpression" /> à gauche de l'opérateur.</param>
      <param name="op" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeBinaryOperatorType&quot; /&gt; indicating the type of operator.">
        <see cref="T:System.CodeDom.CodeBinaryOperatorType" /> indiquant le type de l'opérateur.</param>
      <param name="right" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; on the right of the operator.">
        <see cref="T:System.CodeDom.CodeExpression" /> à droite de l'opérateur.</param>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Left">
      <summary vsli:raw="Gets or sets the code expression on the left of the operator.">Obtient ou définit l'expression de code située à gauche de l'opérateur.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the left operand.">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'opérande de gauche.</returns>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Operator">
      <summary vsli:raw="Gets or sets the operator in the binary operator expression.">Obtient ou définit l'opérateur dans l'expression d'opérateur binaire.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeBinaryOperatorType&quot; /&gt; that indicates the type of operator in the expression.">
        <see cref="T:System.CodeDom.CodeBinaryOperatorType" /> indiquant le type de l'opérateur dans l'expression.</returns>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Right">
      <summary vsli:raw="Gets or sets the code expression on the right of the operator.">Obtient ou définit l'expression de code située à droite de l'opérateur.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the right operand.">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'opérande de droite.</returns>
    </member>
    <member name="T:System.CodeDom.CodeBinaryOperatorType">
      <summary vsli:raw="Defines identifiers for supported binary operators.">Définit les identificateurs pour les opérateurs binaires pris en charge.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Add">
      <summary vsli:raw="Addition operator.">Opérateur d'addition.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Assign">
      <summary vsli:raw="Assignment operator.">Opérateur d'assignation.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BitwiseAnd">
      <summary vsli:raw="Bitwise and operator.">Opérateur de bits AND.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BitwiseOr">
      <summary vsli:raw="Bitwise or operator.">Opérateur de bits OR.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BooleanAnd">
      <summary vsli:raw="Boolean and operator. This represents a short circuiting operator. A short circuiting operator will evaluate only as many expressions as necessary before returning a correct value.">Opérateur booléen AND. Ceci représente un opérateur de court-circuit. Un opérateur de court-circuit évaluera uniquement le nombre d'expressions nécessaire en retournant une valeur correcte.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BooleanOr">
      <summary vsli:raw="Boolean or operator. This represents a short circuiting operator. A short circuiting operator will evaluate only as many expressions as necessary before returning a correct value.">Opérateur booléen OR. Ceci représente un opérateur de court-circuit. Un opérateur de court-circuit évaluera uniquement le nombre d'expressions nécessaire en retournant une valeur correcte.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Divide">
      <summary vsli:raw="Division operator.">Opérateur de division.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.GreaterThan">
      <summary vsli:raw="Greater than operator.">Opérateur supérieur à.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.GreaterThanOrEqual">
      <summary vsli:raw="Greater than or equal operator.">Opérateur supérieur ou égal à.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.IdentityEquality">
      <summary vsli:raw="Identity equal operator.">Opérateur d'identité égal à.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.IdentityInequality">
      <summary vsli:raw="Identity not equal operator.">Opérateur d'identité différent de.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.LessThan">
      <summary vsli:raw="Less than operator.">Opérateur inférieur à.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.LessThanOrEqual">
      <summary vsli:raw="Less than or equal operator.">Opérateur inférieur ou égal à.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Modulus">
      <summary vsli:raw="Modulus operator.">Opérateur modulo.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Multiply">
      <summary vsli:raw="Multiplication operator.">Opérateur de multiplication.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Subtract">
      <summary vsli:raw="Subtraction operator.">Opérateur de soustraction.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.ValueEquality">
      <summary vsli:raw="Value equal operator.">Opérateur de valeur égale à.</summary>
    </member>
    <member name="T:System.CodeDom.CodeCastExpression">
      <summary vsli:raw="Represents an expression cast to a data type or interface.">Représente une expression de cast en type de données ou en interface.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCastExpression&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeCastExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCastExpression&quot; /&gt; class using the specified destination type and expression.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeCastExpression" /> avec le type de destination et l'expression spécifiés.</summary>
      <param name="targetType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the destination type of the cast.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> indiquant le type de destination du cast.</param>
      <param name="expression" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; to cast.">
        <see cref="T:System.CodeDom.CodeExpression" /> devant faire l'objet d'un cast.</param>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCastExpression&quot; /&gt; class using the specified destination type and expression.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeCastExpression" /> avec le type de destination et l'expression spécifiés.</summary>
      <param name="targetType" vsli:raw="The name of the destination type of the cast.">Nom du type de destination du cast.</param>
      <param name="expression" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; to cast.">
        <see cref="T:System.CodeDom.CodeExpression" /> devant faire l'objet d'un cast.</param>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.Type,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCastExpression&quot; /&gt; class using the specified destination type and expression.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeCastExpression" /> avec le type de destination et l'expression spécifiés.</summary>
      <param name="targetType" vsli:raw="The destination data type of the cast.">Type de données de destination du cast.</param>
      <param name="expression" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; to cast.">
        <see cref="T:System.CodeDom.CodeExpression" /> devant faire l'objet d'un cast.</param>
    </member>
    <member name="P:System.CodeDom.CodeCastExpression.Expression">
      <summary vsli:raw="Gets or sets the expression to cast.">Obtient ou définit l'expression devant faire l'objet d'un cast.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the code to cast.">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant le code devant faire l'objet d'un cast.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCastExpression.TargetType">
      <summary vsli:raw="Gets or sets the destination type of the cast.">Obtient ou définit le type de destination du cast.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the destination type to cast to.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> indiquant le type de destination du cast.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCatchClause">
      <summary vsli:raw="Represents a &lt;see langword=&quot;catch&quot; /&gt; exception block of a &lt;see langword=&quot;try/catch&quot; /&gt; statement.">Représente un bloc d'exception <see langword="catch" /> d'une instruction <see langword="try/catch" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeCatchClause" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; class using the specified local variable name for the exception.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeCatchClause" /> avec le nom de variable locale spécifié pour l'exception.</summary>
      <param name="localName" vsli:raw="The name of the local variable declared in the catch clause for the exception. This is optional.">Nom de la variable locale déclarée dans la clause catch pour l'exception. Cette option est facultative.</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String,System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; class using the specified local variable name for the exception and exception type.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeCatchClause" /> avec le nom de variable locale spécifié pour l'exception et le type d'exception.</summary>
      <param name="localName" vsli:raw="The name of the local variable declared in the catch clause for the exception. This is optional.">Nom de la variable locale déclarée dans la clause catch pour l'exception. Cette option est facultative.</param>
      <param name="catchExceptionType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type of exception to catch.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> indiquant le type d'exception à intercepter.</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String,System.CodeDom.CodeTypeReference,System.CodeDom.CodeStatement[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; class using the specified local variable name for the exception, exception type and statement collection.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeCatchClause" /> avec le nom de variable locale spécifié pour l'exception, le type d'exception et la collection d'instructions.</summary>
      <param name="localName" vsli:raw="The name of the local variable declared in the catch clause for the exception. This is optional.">Nom de la variable locale déclarée dans la clause catch pour l'exception. Cette option est facultative.</param>
      <param name="catchExceptionType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type of exception to catch.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> indiquant le type d'exception à intercepter.</param>
      <param name="statements" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects that represent the contents of the catch block.">Tableau d'objets <see cref="T:System.CodeDom.CodeStatement" /> représentant le contenu du bloc catch.</param>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.CatchExceptionType">
      <summary vsli:raw="Gets or sets the type of the exception to handle with the catch block.">Obtient ou définit le type d'exception à gérer à l'aide du bloc catch.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type of the exception to handle.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> indiquant le type d'exception à gérer.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.LocalName">
      <summary vsli:raw="Gets or sets the variable name of the exception that the &lt;see langword=&quot;catch&quot; /&gt; clause handles.">Obtient ou définit le nom de la variable d'exception gérée par la clause <see langword="catch" />.</summary>
      <returns vsli:raw="The name for the exception variable that the &lt;see langword=&quot;catch&quot; /&gt; clause handles.">Nom de la variable d'exception gérée par la clause <see langword="catch" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.Statements">
      <summary vsli:raw="Gets the statements within the catch block.">Obtient les instructions au sein du bloc catch.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; containing the statements within the catch block.">
        <see cref="T:System.CodeDom.CodeStatementCollection" /> contenant les instructions au sein du bloc catch.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCatchClauseCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; objects.">Représente une collection d'objets <see cref="T:System.CodeDom.CodeCatchClause" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeCatchClauseCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor(System.CodeDom.CodeCatchClause[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; objects.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> contenant le tableau d'objets <see cref="T:System.CodeDom.CodeCatchClause" /> spécifié.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; objects with which to initialize the collection.">Tableau d'objets <see cref="T:System.CodeDom.CodeCatchClause" /> à utiliser pour initialiser la collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more objects in the array are &lt;see langword=&quot;null&quot; /&gt;.">Un ou plusieurs objets du tableau ont la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor(System.CodeDom.CodeCatchClauseCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; class containing the elements of the specified source collection.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> contenant les éléments de la collection source spécifiée.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; with which to initialize the collection.">
        <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> utilisé pour initialiser la collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Add(System.CodeDom.CodeCatchClause)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object to the collection.">Ajoute l'objet <see cref="T:System.CodeDom.CodeCatchClause" /> spécifié à la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object to add.">Objet <see cref="T:System.CodeDom.CodeCatchClause" /> à ajouter.</param>
      <returns vsli:raw="The index at which the new element was inserted.">Index au niveau duquel le nouvel élément a été inséré.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.AddRange(System.CodeDom.CodeCatchClause[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; array to the end of the collection.">Copie les éléments du tableau <see cref="T:System.CodeDom.CodeCatchClause" /> spécifié à la fin de la collection.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; that contains the objects to add to the collection.">Tableau de type <see cref="T:System.CodeDom.CodeCatchClause" /> qui contient les objets à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.AddRange(System.CodeDom.CodeCatchClauseCollection)">
      <summary vsli:raw="Copies the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; object to the end of the collection.">Copie le contenu d'un autre objet <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> à la fin de la collection.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; that contains the objects to add to the collection.">
        <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> qui contient les objets à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Contains(System.CodeDom.CodeCatchClause)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object.">Obtient une valeur qui indique si la collection contient l'<see cref="T:System.CodeDom.CodeCatchClause" /> spécifiée.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object to locate in the collection.">Objet <see cref="T:System.CodeDom.CodeCatchClause" /> à placer dans la collection.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la collection contient l'objet spécifié ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.CopyTo(System.CodeDom.CodeCatchClause[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance beginning at the specified index.">Copie la collection d'objets dans une instance à une dimension <see cref="T:System.Array" /> en commençant à l'index spécifié.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">
        <see cref="T:System.Array" /> unidimensionnel qui représente la destination des valeurs copiées à partir de la collection.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">Index du tableau à partir duquel commencer l'insertion.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">Le tableau de destination est multidimensionnel.
ou
Le nombre d'éléments dans le <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> est supérieur à l'espace disponible entre l'index du tableau cible spécifié par le paramètre <paramref name="index" /> et la fin du tableau cible.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">Le paramètre <paramref name="index" /> est inférieur à l'index minimal du tableau cible.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.IndexOf(System.CodeDom.CodeCatchClause)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object in the collection, if it exists in the collection.">Obtient l'index de l'objet <see cref="T:System.CodeDom.CodeCatchClause" /> spécifié dans la collection, s'il existe dans la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object to locate in the collection.">Objet <see cref="T:System.CodeDom.CodeCatchClause" /> à placer dans la collection.</param>
      <returns vsli:raw="The index of the specified object, if found, in the collection; otherwise, -1.">Index de l'objet spécifié, s'il existe, dans la collection ; sinon, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Insert(System.Int32,System.CodeDom.CodeCatchClause)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object into the collection at the specified index.">Insère l'objet <see cref="T:System.CodeDom.CodeCatchClause" /> indiqué dans la collection à l'index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">Index de base zéro dans lequel l'objet spécifié doit être inséré.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object to insert.">Objet <see cref="T:System.CodeDom.CodeCatchClause" /> à insérer.</param>
    </member>
    <member name="P:System.CodeDom.CodeCatchClauseCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object at the specified index in the collection.">Obtient ou définit l'objet <see cref="T:System.CodeDom.CodeCatchClause" /> à l'index spécifié dans la collection.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">Index de la collection à laquelle accéder.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object at each valid index.">Objet <see cref="T:System.CodeDom.CodeCatchClause" /> à chaque index valide.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">Le paramètre <paramref name="index" /> est en dehors de la plage valide des index pour la collection.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Remove(System.CodeDom.CodeCatchClause)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object from the collection.">Supprime l'objet <see cref="T:System.CodeDom.CodeCatchClause" /> spécifié de la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object to remove from the collection.">Objet <see cref="T:System.CodeDom.CodeCatchClause" /> à supprimer de la collection.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">L'objet spécifié est introuvable dans la collection.</exception>
    </member>
    <member name="T:System.CodeDom.CodeChecksumPragma">
      <summary vsli:raw="Represents a code checksum pragma code entity.">Représente une entité de code pragma de checksum.</summary>
    </member>
    <member name="M:System.CodeDom.CodeChecksumPragma.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeChecksumPragma&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeChecksumPragma" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeChecksumPragma.#ctor(System.String,System.Guid,System.Byte[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeChecksumPragma&quot; /&gt; class using a file name, a GUID representing the checksum algorithm, and a byte stream representing the checksum data.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeChecksumPragma" /> à l'aide d'un nom de fichier, d'un GUID représentant l'algorithme de checksum et d'un flux d'octets représentant les données de checksum.</summary>
      <param name="fileName" vsli:raw="The path to the checksum file.">Chemin d'accès au fichier de checksum.</param>
      <param name="checksumAlgorithmId" vsli:raw="A &lt;see cref=&quot;T:System.Guid&quot; /&gt; that identifies the checksum algorithm to use.">
        <see cref="T:System.Guid" /> qui identifie l'algorithme de checksum à utiliser.</param>
      <param name="checksumData" vsli:raw="A byte array that contains the checksum data.">Tableau d'octets qui contient les données de checksum.</param>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.ChecksumAlgorithmId">
      <summary vsli:raw="Gets or sets a GUID that identifies the checksum algorithm to use.">Obtient ou définit un GUID qui identifie l'algorithme de checksum à utiliser.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Guid&quot; /&gt; that identifies the checksum algorithm to use.">
        <see cref="T:System.Guid" /> qui identifie l'algorithme de checksum à utiliser.</returns>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.ChecksumData">
      <summary vsli:raw="Gets or sets the value of the data for the checksum calculation.">Obtient ou définit la valeur des données pour le calcul du checksum.</summary>
      <returns vsli:raw="A byte array that contains the data for the checksum calculation.">Tableau d'octets qui contient les données pour le calcul du checksum.</returns>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.FileName">
      <summary vsli:raw="Gets or sets the path to the checksum file.">Obtient ou définit le chemin d'accès au fichier de checksum.</summary>
      <returns vsli:raw="The path to the checksum file.">Chemin d'accès au fichier de checksum.</returns>
    </member>
    <member name="T:System.CodeDom.CodeComment">
      <summary vsli:raw="Represents a comment.">Représente un commentaire.</summary>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeComment&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeComment" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeComment&quot; /&gt; class with the specified text as contents.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeComment" /> avec le texte spécifié comme contenu.</summary>
      <param name="text" vsli:raw="The contents of the comment.">Contenu du commentaire.</param>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor(System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeComment&quot; /&gt; class using the specified text and documentation comment flag.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeComment" /> avec le texte et l'indicateur de commentaire de documentation spécifiés.</summary>
      <param name="text" vsli:raw="The contents of the comment.">Contenu du commentaire.</param>
      <param name="docComment" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the comment is a documentation comment; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le commentaire est un commentaire de la documentation ; sinon, <see langword="false" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeComment.DocComment">
      <summary vsli:raw="Gets or sets a value that indicates whether the comment is a documentation comment.">Obtient ou définit une valeur qui indique si le commentaire est un commentaire de la documentation.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the comment is a documentation comment; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le commentaire est un commentaire de la documentation ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeComment.Text">
      <summary vsli:raw="Gets or sets the text of the comment.">Obtient ou définit le texte du commentaire.</summary>
      <returns vsli:raw="A string containing the comment text.">Chaîne contenant le texte du commentaire.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCommentStatement">
      <summary vsli:raw="Represents a statement consisting of a single comment.">Représente une instruction constituée d'un seul commentaire.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeCommentStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.CodeDom.CodeComment)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; class using the specified comment.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeCommentStatement" /> avec le commentaire spécifié.</summary>
      <param name="comment" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeComment&quot; /&gt; that indicates the comment.">
        <see cref="T:System.CodeDom.CodeComment" /> indiquant le commentaire.</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; class using the specified text as contents.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeCommentStatement" /> avec le texte spécifié comme contenu.</summary>
      <param name="text" vsli:raw="The contents of the comment.">Contenu du commentaire.</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; class using the specified text and documentation comment flag.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeCommentStatement" /> avec le texte et l'indicateur de commentaire de documentation spécifiés.</summary>
      <param name="text" vsli:raw="The contents of the comment.">Contenu du commentaire.</param>
      <param name="docComment" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the comment is a documentation comment; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le commentaire est un commentaire de la documentation ; sinon, <see langword="false" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeCommentStatement.Comment">
      <summary vsli:raw="Gets or sets the contents of the comment.">Obtient ou définit le contenu du commentaire.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeComment&quot; /&gt; that indicates the comment.">
        <see cref="T:System.CodeDom.CodeComment" /> indiquant le commentaire.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCommentStatementCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; objects.">Représente une collection d'objets <see cref="T:System.CodeDom.CodeCommentStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeCommentStatementCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor(System.CodeDom.CodeCommentStatement[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; objects.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> contenant le tableau d'objets <see cref="T:System.CodeDom.CodeCommentStatement" /> spécifié.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; objects with which to initialize the collection.">Tableau d'objets <see cref="T:System.CodeDom.CodeCommentStatement" /> à utiliser pour initialiser la collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more objects in the array are &lt;see langword=&quot;null&quot; /&gt;.">Un ou plusieurs objets du tableau ont la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor(System.CodeDom.CodeCommentStatementCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; class containing the elements of the specified source collection.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> contenant les éléments de la collection source spécifiée.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; with which to initialize the collection.">
        <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> utilisé pour initialiser la collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Add(System.CodeDom.CodeCommentStatement)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object to the collection.">Ajoute l'objet <see cref="T:System.CodeDom.CodeCommentStatement" /> spécifié à la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object to add.">Objet <see cref="T:System.CodeDom.CodeCommentStatement" /> à ajouter.</param>
      <returns vsli:raw="The index at which the new element was inserted.">Index au niveau duquel le nouvel élément a été inséré.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.AddRange(System.CodeDom.CodeCommentStatement[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; array to the end of the collection.">Copie les éléments du tableau <see cref="T:System.CodeDom.CodeCommentStatement" /> spécifié à la fin de la collection.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; that contains the objects to add to the collection.">Tableau de type <see cref="T:System.CodeDom.CodeCommentStatement" /> qui contient les objets à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.AddRange(System.CodeDom.CodeCommentStatementCollection)">
      <summary vsli:raw="Copies the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; object to the end of the collection.">Copie le contenu d'un autre objet <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> à la fin de la collection.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; that contains the objects to add to the collection.">
        <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> qui contient les objets à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Contains(System.CodeDom.CodeCommentStatement)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object.">Obtient une valeur qui indique si la collection contient l'<see cref="T:System.CodeDom.CodeCommentStatement" /> spécifiée.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; to search for in the collection.">
        <see cref="T:System.CodeDom.CodeCommentStatement" /> à rechercher dans la collection.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la collection contient l'objet spécifié ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.CopyTo(System.CodeDom.CodeCommentStatement[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to the specified one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; beginning at the specified index.">Copie les objets de la collection vers le <see cref="T:System.Array" /> unidimensionnel spécifié, en commençant à l'index spécifié.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">
        <see cref="T:System.Array" /> unidimensionnel qui représente la destination des valeurs copiées à partir de la collection.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">Index du tableau à partir duquel commencer l'insertion.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">Le tableau de destination est multidimensionnel.

ou -
Le nombre d'éléments dans le <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> est supérieur à l'espace disponible entre l'index du tableau cible spécifié par le paramètre <paramref name="index" /> et la fin du tableau cible.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">Le paramètre <paramref name="index" /> est inférieur à l'index minimal du tableau cible.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.IndexOf(System.CodeDom.CodeCommentStatement)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object in the collection, if it exists in the collection.">Obtient l'index de l'objet <see cref="T:System.CodeDom.CodeCommentStatement" /> spécifié dans la collection, s'il existe dans la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object to locate.">Objet <see cref="T:System.CodeDom.CodeCommentStatement" /> à rechercher.</param>
      <returns vsli:raw="The index of the specified object, if found, in the collection; otherwise, -1.">Index de l'objet spécifié, s'il existe, dans la collection ; sinon, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Insert(System.Int32,System.CodeDom.CodeCommentStatement)">
      <summary vsli:raw="Inserts a &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object into the collection at the specified index.">Insère un objet <see cref="T:System.CodeDom.CodeCommentStatement" /> dans la collection à l'index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index where the item should be inserted.">Index de base zéro dans lequel l'élément doit être inséré.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object to insert.">Objet <see cref="T:System.CodeDom.CodeCommentStatement" /> à insérer.</param>
    </member>
    <member name="P:System.CodeDom.CodeCommentStatementCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object at the specified index in the collection.">Obtient ou définit l'objet <see cref="T:System.CodeDom.CodeCommentStatement" /> à l'index spécifié dans la collection.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">Index de la collection à laquelle accéder.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object at each valid index.">Objet <see cref="T:System.CodeDom.CodeCommentStatement" /> à chaque index valide.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">Le paramètre <paramref name="index" /> est en dehors de la plage valide des index pour la collection.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Remove(System.CodeDom.CodeCommentStatement)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object from the collection.">Supprime l'objet <see cref="T:System.CodeDom.CodeCommentStatement" /> spécifié de la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object to remove from the collection.">Objet <see cref="T:System.CodeDom.CodeCommentStatement" /> à supprimer de la collection.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">L'objet spécifié est introuvable dans la collection.</exception>
    </member>
    <member name="T:System.CodeDom.CodeCompileUnit">
      <summary vsli:raw="Provides a container for a CodeDOM program graph.">Fournit un conteneur pour un graphique de programme CodeDOM.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCompileUnit.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.AssemblyCustomAttributes">
      <summary vsli:raw="Gets a collection of custom attributes for the generated assembly.">Obtient une collection d'attributs personnalisés pour l'assembly généré.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; that indicates the custom attributes for the generated assembly.">
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> indiquant les attributs personnalisés pour l'assembly généré.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.EndDirectives">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing end directives.">Obtient un objet <see cref="T:System.CodeDom.CodeDirectiveCollection" /> qui contient des directives de fin.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing end directives.">Objet <see cref="T:System.CodeDom.CodeDirectiveCollection" /> qui contient des directives de fin.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.Namespaces">
      <summary vsli:raw="Gets the collection of namespaces.">Obtient la collection d'espaces de noms.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; that indicates the namespaces that the compile unit uses.">
        <see cref="T:System.CodeDom.CodeNamespaceCollection" /> indiquant les espaces de noms utilisés par l'unité de compilation.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.ReferencedAssemblies">
      <summary vsli:raw="Gets the referenced assemblies.">Obtient les assemblys référencés.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Specialized.StringCollection&quot; /&gt; that contains the file names of the referenced assemblies.">
        <see cref="T:System.Collections.Specialized.StringCollection" /> contenant les noms de fichiers des assemblys référencés.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.StartDirectives">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing start directives.">Obtient un objet <see cref="T:System.CodeDom.CodeDirectiveCollection" /> qui contient des directives de début.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing start directives.">Objet <see cref="T:System.CodeDom.CodeDirectiveCollection" /> qui contient des directives de début.</returns>
    </member>
    <member name="T:System.CodeDom.CodeConditionStatement">
      <summary vsli:raw="Represents a conditional branch statement, typically represented as an &lt;see langword=&quot;if&quot; /&gt; statement.">Représente une instruction de branchement conditionnel, qui est généralement représentée par une instruction <see langword="if" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeConditionStatement&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeConditionStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeStatement[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeConditionStatement&quot; /&gt; class using the specified condition and statements.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeConditionStatement" /> avec la condition et les instructions spécifiées.</summary>
      <param name="condition" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the expression to evaluate.">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'expression à évaluer.</param>
      <param name="trueStatements" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the statements to execute if the condition is &lt;see langword=&quot;true&quot; /&gt;.">Tableau de type <see cref="T:System.CodeDom.CodeStatement" /> contenant les instructions à exécuter si la condition a la valeur <see langword="true" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeStatement[],System.CodeDom.CodeStatement[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeConditionStatement&quot; /&gt; class using the specified condition and statements.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeConditionStatement" /> avec la condition et les instructions spécifiées.</summary>
      <param name="condition" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the condition to evaluate.">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant la condition à évaluer.</param>
      <param name="trueStatements" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the statements to execute if the condition is &lt;see langword=&quot;true&quot; /&gt;.">Tableau de type <see cref="T:System.CodeDom.CodeStatement" /> contenant les instructions à exécuter si la condition a la valeur <see langword="true" />.</param>
      <param name="falseStatements" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the statements to execute if the condition is &lt;see langword=&quot;false&quot; /&gt;.">Tableau de type <see cref="T:System.CodeDom.CodeStatement" /> contenant les instructions à exécuter si la condition a la valeur <see langword="false" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.Condition">
      <summary vsli:raw="Gets or sets the expression to evaluate &lt;see langword=&quot;true&quot; /&gt; or &lt;see langword=&quot;false&quot; /&gt;.">Obtient ou définit l'expression correspondant à <see langword="true" /> ou à <see langword="false" />.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; to evaluate &lt;see langword=&quot;true&quot; /&gt; or &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.CodeDom.CodeExpression" /> correspondant à <see langword="true" /> ou à <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.FalseStatements">
      <summary vsli:raw="Gets the collection of statements to execute if the conditional expression evaluates to &lt;see langword=&quot;false&quot; /&gt;.">Obtient la collection d'instructions à exécuter si l'expression conditionnelle a la valeur <see langword="false" />.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; containing the statements to execute if the conditional expression evaluates to &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.CodeDom.CodeStatementCollection" /> contenant les instructions à exécuter si l'expression conditionnelle a la valeur <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.TrueStatements">
      <summary vsli:raw="Gets the collection of statements to execute if the conditional expression evaluates to &lt;see langword=&quot;true&quot; /&gt;.">Obtient la collection d'instructions à exécuter si l'expression conditionnelle a la valeur <see langword="true" />.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; containing the statements to execute if the conditional expression evaluates to &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="T:System.CodeDom.CodeStatementCollection" /> contenant les instructions à exécuter si l'expression conditionnelle a la valeur <see langword="true" />.</returns>
    </member>
    <member name="T:System.CodeDom.CodeConstructor">
      <summary vsli:raw="Represents a declaration for an instance constructor of a type.">Représente une déclaration d'un constructeur d'instance pour un type.</summary>
    </member>
    <member name="M:System.CodeDom.CodeConstructor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeConstructor&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeConstructor" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeConstructor.BaseConstructorArgs">
      <summary vsli:raw="Gets the collection of base constructor arguments.">Obtient la collection des arguments de constructeur de base.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that contains the base constructor arguments.">
        <see cref="T:System.CodeDom.CodeExpressionCollection" /> contenant les arguments de constructeur de base.</returns>
    </member>
    <member name="P:System.CodeDom.CodeConstructor.ChainedConstructorArgs">
      <summary vsli:raw="Gets the collection of chained constructor arguments.">Obtient la collection des arguments chaînés du constructeur.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that contains the chained constructor arguments.">
        <see cref="T:System.CodeDom.CodeExpressionCollection" /> contenant les arguments de constructeur chaînés.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDefaultValueExpression">
      <summary vsli:raw="Represents a reference to a default value.">Représente une référence à une valeur par défaut.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDefaultValueExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDefaultValueExpression&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeDefaultValueExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDefaultValueExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDefaultValueExpression&quot; /&gt; class using the specified code type reference.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeDefaultValueExpression" /> en utilisant la référence du type de code spécifiée.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that specifies the reference to a value type.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> qui spécifie la référence à un type valeur.</param>
    </member>
    <member name="P:System.CodeDom.CodeDefaultValueExpression.Type">
      <summary vsli:raw="Gets or sets the data type reference for a default value.">Obtient ou définit la référence au type de données pour une valeur par défaut.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; object representing a data type that has a default value.">Objet <see cref="T:System.CodeDom.CodeTypeReference" /> représentant un type de données qui possède une valeur par défaut.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDelegateCreateExpression">
      <summary vsli:raw="Represents an expression that creates a delegate.">Représente une expression qui crée un délégué.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateCreateExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDelegateCreateExpression&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeDelegateCreateExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDelegateCreateExpression&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeDelegateCreateExpression" />.</summary>
      <param name="delegateType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the delegate.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> indiquant le type de données du délégué.</param>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object containing the event-handler method.">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'objet contenant la méthode de gestionnaire d'événements.</param>
      <param name="methodName" vsli:raw="The name of the event-handler method.">Nom de la méthode de gestionnaire d'événements.</param>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.DelegateType">
      <summary vsli:raw="Gets or sets the data type of the delegate.">Obtient ou définit le type de données du délégué.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the delegate.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> indiquant le type de données du délégué.</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.MethodName">
      <summary vsli:raw="Gets or sets the name of the event handler method.">Obtient ou définit le nom de la méthode de gestionnaire d'événements.</summary>
      <returns vsli:raw="The name of the event handler method.">Nom de la méthode de gestionnaire d'événements.</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.TargetObject">
      <summary vsli:raw="Gets or sets the object that contains the event-handler method.">Obtient ou définit l'objet qui contient la méthode de gestionnaire d'événements.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object containing the event-handler method.">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'objet contenant la méthode de gestionnaire d'événements.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDelegateInvokeExpression">
      <summary vsli:raw="Represents an expression that raises an event.">Représente une expression qui déclenche un événement.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDelegateInvokeExpression&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDelegateInvokeExpression&quot; /&gt; class using the specified target object.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" /> avec l'objet cible spécifié.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the target object.">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'objet cible.</param>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDelegateInvokeExpression&quot; /&gt; class using the specified target object and parameters.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" /> avec l'objet cible et les paramètres spécifiés.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the target object.">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'objet cible.</param>
      <param name="parameters" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects that indicate the parameters.">Tableau d'objets <see cref="T:System.CodeDom.CodeExpression" /> indiquant les paramètres.</param>
    </member>
    <member name="P:System.CodeDom.CodeDelegateInvokeExpression.Parameters">
      <summary vsli:raw="Gets or sets the parameters to pass to the event handling methods attached to the event.">Obtient ou définit les paramètres à passer aux méthodes de gestion d'événements attachées à l'événement.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the parameters to pass to the event handling methods attached to the event.">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant les paramètres à passer aux méthodes de gestion d'événements attachées à l'événement.</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateInvokeExpression.TargetObject">
      <summary vsli:raw="Gets or sets the event to invoke.">Obtient ou définit l'événement à appeler.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the event to invoke.">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'événement à appeler.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDirectionExpression">
      <summary vsli:raw="Represents an expression used as a method invoke parameter along with a reference direction indicator.">Représente une expression utilisée en tant que paramètre d'appel de méthode avec un indicateur de direction de référence.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectionExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDirectionExpression&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeDirectionExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectionExpression.#ctor(System.CodeDom.FieldDirection,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDirectionExpression&quot; /&gt; class using the specified field direction and expression.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeDirectionExpression" /> avec la direction de champ spécifié et l'expression.</summary>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.FieldDirection&quot; /&gt; that indicates the field direction of the expression.">
        <see cref="T:System.CodeDom.FieldDirection" /> indiquant la direction de champ de l'expression.</param>
      <param name="expression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the code expression to represent.">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'expression de code à représenter.</param>
    </member>
    <member name="P:System.CodeDom.CodeDirectionExpression.Direction">
      <summary vsli:raw="Gets or sets the field direction for this direction expression.">Obtient ou définit la direction de champ pour cette expression de direction.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.FieldDirection&quot; /&gt; that indicates the field direction for this direction expression.">
        <see cref="T:System.CodeDom.FieldDirection" /> indiquant la direction de champ de cette expression de direction.</returns>
    </member>
    <member name="P:System.CodeDom.CodeDirectionExpression.Expression">
      <summary vsli:raw="Gets or sets the code expression to represent.">Obtient ou définit l'expression de code à représenter.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the expression to represent.">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'expression à représenter.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDirective">
      <summary vsli:raw="Serves as the base class for code directive classes.">Sert de classe de base pour les classes des directives de code.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirective.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeDirective" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeDirectiveCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; objects.">Représente une collection d'objets <see cref="T:System.CodeDom.CodeDirective" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeDirectiveCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor(System.CodeDom.CodeDirective[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; class with the code directive objects in the specified array.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeDirectiveCollection" /> avec les objets de directive de code contenus dans le tableau spécifié.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; objects with which to initialize the collection.">Tableau d'objets <see cref="T:System.CodeDom.CodeDirective" /> à utiliser pour initialiser la collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor(System.CodeDom.CodeDirectiveCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; class with the elements in the specified code directive collection.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeDirectiveCollection" /> avec les éléments contenus dans la collection des directives de code.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object with which to initialize the collection.">Objet <see cref="T:System.CodeDom.CodeDirectiveCollection" /> à utiliser pour initialiser la collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Add(System.CodeDom.CodeDirective)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object to the collection.">Ajoute l'objet <see cref="T:System.CodeDom.CodeDirective" /> spécifié à la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object to add.">Objet <see cref="T:System.CodeDom.CodeDirective" /> à ajouter.</param>
      <returns vsli:raw="The index position at which the new element was inserted.">Position d'index à laquelle le nouvel élément a été inséré.</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.AddRange(System.CodeDom.CodeDirective[])">
      <summary vsli:raw="Adds an array of &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; objects to the end of the collection.">Ajoute un tableau d'objets <see cref="T:System.CodeDom.CodeDirective" /> à la fin de la collection.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; objects to add to the collection.">Tableau d'objets <see cref="T:System.CodeDom.CodeDirective" /> à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.AddRange(System.CodeDom.CodeDirectiveCollection)">
      <summary vsli:raw="Adds the contents of the specified &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object to the end of the collection.">Ajoute le contenu de l'objet <see cref="T:System.CodeDom.CodeDirectiveCollection" /> spécifié à la fin de la collection.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing the &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; objects to add to the collection.">Objet <see cref="T:System.CodeDom.CodeDirectiveCollection" /> contenant les objets <see cref="T:System.CodeDom.CodeDirective" /> à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Contains(System.CodeDom.CodeDirective)">
      <summary vsli:raw="Gets a value indicating whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object.">Obtient une valeur indiquant si la collection contient l'objet <see cref="T:System.CodeDom.CodeDirective" /> spécifié.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object to search for in the collection.">Objet <see cref="T:System.CodeDom.CodeDirective" /> à rechercher dans la collection.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la collection contient l'objet spécifié ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.CopyTo(System.CodeDom.CodeDirective[],System.Int32)">
      <summary vsli:raw="Copies the contents of the collection to a one-dimensional array beginning at the specified index.">Copie le contenu de la collection dans un tableau unidimensionnel en commençant à l'index spécifié.</summary>
      <param name="array" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; that is the destination of the values copied from the collection.">Tableau de type <see cref="T:System.CodeDom.CodeDirective" /> qui est la destination des valeurs copiées à partir de la collection.</param>
      <param name="index" vsli:raw="The index in the array at which to begin inserting collection objects.">Index du tableau à partir duquel commencer l'insertion des objets d'une collection.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; is greater than the available space between the index of the target array specified by &lt;paramref name=&quot;index&quot; /&gt; and the end of the target array.">Le tableau de destination est multidimensionnel.

ou -
Le nombre d'éléments dans le <see cref="T:System.CodeDom.CodeDirectiveCollection" /> est supérieur à l'espace disponible entre l'index du tableau cible spécifié par <paramref name="index" /> et la fin du tableau cible.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than the target array's minimum index.">
        <paramref name="index" /> est inférieur à l'index minimal du tableau cible.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.IndexOf(System.CodeDom.CodeDirective)">
      <summary vsli:raw="Gets the index in the collection of the specified &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object, if it exists in the collection.">Obtient l'index dans la collection de l'objet <see cref="T:System.CodeDom.CodeDirective" /> spécifié, s'il existe dans la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object to locate in the collection.">Objet <see cref="T:System.CodeDom.CodeDirective" /> à placer dans la collection.</param>
      <returns vsli:raw="The index position in the collection of the specified object, if found; otherwise, -1.">Position d'index de l'objet spécifié dans la collection (s'il existe) ; sinon, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Insert(System.Int32,System.CodeDom.CodeDirective)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object into the collection at the specified index.">Insère l'objet <see cref="T:System.CodeDom.CodeDirective" /> indiqué dans la collection à l'index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index position where the specified object should be inserted.">Position d'index de base zéro à laquelle l'objet spécifié doit être inséré.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object to insert.">Objet <see cref="T:System.CodeDom.CodeDirective" /> à insérer.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is greater than &lt;see cref=&quot;P:System.Collections.CollectionBase.Count&quot; /&gt;.">
        <paramref name="index" /> est inférieur à 0.
ou
<paramref name="index" /> est supérieur à <see cref="P:System.Collections.CollectionBase.Count" />.</exception>
    </member>
    <member name="P:System.CodeDom.CodeDirectiveCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object at the specified index in the collection.">Obtient ou définit l'objet <see cref="T:System.CodeDom.CodeDirective" /> à l'index spécifié dans la collection.</summary>
      <param name="index" vsli:raw="The index position to access.">Position d'index à atteindre.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; at the index position.">
        <see cref="T:System.CodeDom.CodeDirective" /> à la position d'index.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is outside the valid range of index positions for the collection.">
        <paramref name="index" /> se trouve à l'extérieur de la plage valide de positions d'index pour la collection.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Remove(System.CodeDom.CodeDirective)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object from the collection.">Supprime l'objet <see cref="T:System.CodeDom.CodeDirective" /> spécifié de la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object to remove from the collection.">Objet <see cref="T:System.CodeDom.CodeDirective" /> à supprimer de la collection.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">L'objet spécifié est introuvable dans la collection.</exception>
    </member>
    <member name="T:System.CodeDom.CodeEntryPointMethod">
      <summary vsli:raw="Represents the entry point method of an executable.">Représente la méthode de point d'entrée d'un exécutable.</summary>
    </member>
    <member name="M:System.CodeDom.CodeEntryPointMethod.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeEntryPointMethod&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeEntryPointMethod" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeEventReferenceExpression">
      <summary vsli:raw="Represents a reference to an event.">Représente une référence à un événement.</summary>
    </member>
    <member name="M:System.CodeDom.CodeEventReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeEventReferenceExpression&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeEventReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeEventReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeEventReferenceExpression&quot; /&gt; class using the specified target object and event name.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> avec l'objet cible et le nom d'événement spécifiés.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the event.">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'objet qui contient l'événement.</param>
      <param name="eventName" vsli:raw="The name of the event to reference.">Nom de l'événement à référencer.</param>
    </member>
    <member name="P:System.CodeDom.CodeEventReferenceExpression.EventName">
      <summary vsli:raw="Gets or sets the name of the event.">Obtient ou définit le nom de l'événement.</summary>
      <returns vsli:raw="The name of the event.">Nom de l’événement.</returns>
    </member>
    <member name="P:System.CodeDom.CodeEventReferenceExpression.TargetObject">
      <summary vsli:raw="Gets or sets the object that contains the event.">Obtient ou définit l'objet qui contient l'événement.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the event.">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'objet qui contient l'événement.</returns>
    </member>
    <member name="T:System.CodeDom.CodeExpression">
      <summary vsli:raw="Represents a code expression. This is a base class for other code expression objects that is never instantiated.">Représente une expression de code. Pour d'autres objets expression de code, il s'agit d'une classe de base qui n'est jamais instanciée.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeExpression" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeExpressionCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects.">Représente une collection d'objets <see cref="T:System.CodeDom.CodeExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeExpressionCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor(System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeExpressionCollection" /> contenant le tableau d'objets <see cref="T:System.CodeDom.CodeExpression" /> spécifié.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects with which to initialize the collection.">Tableau d'objets <see cref="T:System.CodeDom.CodeExpression" /> à utiliser pour initialiser la collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more objects in the array are &lt;see langword=&quot;null&quot; /&gt;.">Un ou plusieurs objets du tableau ont la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor(System.CodeDom.CodeExpressionCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; class containing the elements of the specified source collection.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeExpressionCollection" /> contenant les éléments de la collection source spécifiée.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; with which to initialize the collection.">
        <see cref="T:System.CodeDom.CodeExpressionCollection" /> utilisé pour initialiser la collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Add(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to the collection.">Ajoute l'objet <see cref="T:System.CodeDom.CodeExpression" /> spécifié à la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to add.">Objet <see cref="T:System.CodeDom.CodeExpression" /> à ajouter.</param>
      <returns vsli:raw="The index at which the new element was inserted.">Index au niveau duquel le nouvel élément a été inséré.</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.AddRange(System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Copies the elements of the specified array to the end of the collection.">Copie les éléments du tableau spécifié à la fin de la collection.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that contains the objects to add to the collection.">Tableau de type <see cref="T:System.CodeDom.CodeExpression" /> qui contient les objets à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.AddRange(System.CodeDom.CodeExpressionCollection)">
      <summary vsli:raw="Copies the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; object to the end of the collection.">Copie le contenu d'un autre objet <see cref="T:System.CodeDom.CodeExpressionCollection" /> à la fin de la collection.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that contains the objects to add to the collection.">
        <see cref="T:System.CodeDom.CodeExpressionCollection" /> qui contient les objets à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Contains(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object.">Obtient une valeur qui indique si la collection contient l'<see cref="T:System.CodeDom.CodeExpression" /> spécifiée.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to locate in the collection.">Objet <see cref="T:System.CodeDom.CodeExpression" /> à placer dans la collection.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la collection contient l'objet spécifié ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.CopyTo(System.CodeDom.CodeExpression[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance beginning at the specified index.">Copie la collection d'objets dans une instance à une dimension <see cref="T:System.Array" /> en commençant à l'index spécifié.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">
        <see cref="T:System.Array" /> unidimensionnel qui représente la destination des valeurs copiées à partir de la collection.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">Index du tableau à partir duquel commencer l'insertion.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">Le tableau de destination est multidimensionnel.
ou
Le nombre d'éléments dans le <see cref="T:System.CodeDom.CodeExpressionCollection" /> est supérieur à l'espace disponible entre l'index du tableau cible spécifié par le paramètre <paramref name="index" /> et la fin du tableau cible.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">Le paramètre <paramref name="index" /> est inférieur à l'index minimal du tableau cible.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.IndexOf(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object in the collection, if it exists in the collection.">Obtient l'index de l'objet <see cref="T:System.CodeDom.CodeExpression" /> spécifié dans la collection, s'il existe dans la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to locate in the collection.">Objet <see cref="T:System.CodeDom.CodeExpression" /> à placer dans la collection.</param>
      <returns vsli:raw="The index of the specified object, if found, in the collection; otherwise, -1.">Index de l'objet spécifié, s'il existe, dans la collection ; sinon, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Insert(System.Int32,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object into the collection at the specified index.">Insère l'objet <see cref="T:System.CodeDom.CodeExpression" /> indiqué dans la collection à l'index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">Index de base zéro dans lequel l'objet spécifié doit être inséré.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to insert.">Objet <see cref="T:System.CodeDom.CodeExpression" /> à insérer.</param>
    </member>
    <member name="P:System.CodeDom.CodeExpressionCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object at the specified index in the collection.">Obtient ou définit l'objet <see cref="T:System.CodeDom.CodeExpression" /> à l'index spécifié dans la collection.</summary>
      <param name="index" vsli:raw="The zero-based index of the collection to access.">Index de base zéro de la collection à laquelle vous souhaitez accéder.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object at each valid index.">Objet <see cref="T:System.CodeDom.CodeExpression" /> à chaque index valide.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">Le paramètre <paramref name="index" /> est en dehors de la plage valide des index pour la collection.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Remove(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object from the collection.">Supprime l'objet <see cref="T:System.CodeDom.CodeExpression" /> spécifié de la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to remove from the collection.">Objet <see cref="T:System.CodeDom.CodeExpression" /> à supprimer de la collection.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">L'objet spécifié est introuvable dans la collection.</exception>
    </member>
    <member name="T:System.CodeDom.CodeExpressionStatement">
      <summary vsli:raw="Represents a statement that consists of a single expression.">Représente une instruction constituée d'une expression unique.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeExpressionStatement&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeExpressionStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeExpressionStatement&quot; /&gt; class by using the specified expression.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeExpressionStatement" /> à l'aide de l'expression spécifiée.</summary>
      <param name="expression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; for the statement.">
        <see cref="T:System.CodeDom.CodeExpression" /> pour l'instruction.</param>
    </member>
    <member name="P:System.CodeDom.CodeExpressionStatement.Expression">
      <summary vsli:raw="Gets or sets the expression for the statement.">Obtient ou définit l'expression pour l'instruction.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the expression for the statement.">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'expression pour l'instruction.</returns>
    </member>
    <member name="T:System.CodeDom.CodeFieldReferenceExpression">
      <summary vsli:raw="Represents a reference to a field.">Représente une référence à un champ.</summary>
    </member>
    <member name="M:System.CodeDom.CodeFieldReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeFieldReferenceExpression&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeFieldReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeFieldReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeFieldReferenceExpression&quot; /&gt; class using the specified target object and field name.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeFieldReferenceExpression" /> avec le nom de l'objet cible et le champ spécifiés.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the field.">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'objet qui contient le champ.</param>
      <param name="fieldName" vsli:raw="The name of the field.">Nom du champ.</param>
    </member>
    <member name="P:System.CodeDom.CodeFieldReferenceExpression.FieldName">
      <summary vsli:raw="Gets or sets the name of the field to reference.">Obtient ou définit le nom du champ à référencer.</summary>
      <returns vsli:raw="A string containing the field name.">Chaîne contenant le nom de champ.</returns>
    </member>
    <member name="P:System.CodeDom.CodeFieldReferenceExpression.TargetObject">
      <summary vsli:raw="Gets or sets the object that contains the field to reference.">Obtient ou définit l'objet contenant le champ à référencer.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the field to reference.">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'objet qui contient le champ à référencer.</returns>
    </member>
    <member name="T:System.CodeDom.CodeGotoStatement">
      <summary vsli:raw="Represents a &lt;see langword=&quot;goto&quot; /&gt; statement.">Représente une instruction <see langword="goto" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeGotoStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeGotoStatement&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeGotoStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeGotoStatement.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeGotoStatement&quot; /&gt; class using the specified label name.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeGotoStatement" /> en utilisant le nom d'étiquette spécifié.</summary>
      <param name="label" vsli:raw="The name of the label at which to continue program execution.">Nom de l'étiquette au niveau de laquelle poursuivre l'exécution du programme.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;Label&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="Label" /> est <see langword="null" />.</exception>
    </member>
    <member name="P:System.CodeDom.CodeGotoStatement.Label">
      <summary vsli:raw="Gets or sets the name of the label at which to continue program execution.">Obtient ou définit le nom de l'étiquette au niveau de laquelle poursuivre l'exécution du programme.</summary>
      <returns vsli:raw="A string that indicates the name of the label at which to continue program execution.">Chaîne indiquant le nom de l'étiquette au niveau de laquelle poursuivre l'exécution du programme.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The label cannot be set because &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or an empty string.">L’étiquette ne peut pas être définie car <paramref name="value" /> est <see langword="null" /> ou une chaîne vide.</exception>
    </member>
    <member name="T:System.CodeDom.CodeIndexerExpression">
      <summary vsli:raw="Represents a reference to an indexer property of an object.">Représente une référence à une propriété d'indexeur d'un objet.</summary>
    </member>
    <member name="M:System.CodeDom.CodeIndexerExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeIndexerExpression&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeIndexerExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeIndexerExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeIndexerExpression&quot; /&gt; class using the specified target object and index.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeIndexerExpression" /> avec l'objet cible et l'index spécifiés.</summary>
      <param name="targetObject" vsli:raw="The target object.">Objet cible.</param>
      <param name="indices" vsli:raw="The index or indexes of the indexer expression.">Index de l'expression d'indexeur.</param>
    </member>
    <member name="P:System.CodeDom.CodeIndexerExpression.Indices">
      <summary vsli:raw="Gets the collection of indexes of the indexer expression.">Obtient la collection d'index de l'expression d'indexeur.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that indicates the index or indexes of the indexer expression.">
        <see cref="T:System.CodeDom.CodeExpressionCollection" /> qui indique l'index ou les index de l'expression d'indexeur.</returns>
    </member>
    <member name="P:System.CodeDom.CodeIndexerExpression.TargetObject">
      <summary vsli:raw="Gets or sets the target object that can be indexed.">Obtient ou définit l'objet cible qui peut être indexé.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the indexer object.">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'objet indexeur.</returns>
    </member>
    <member name="T:System.CodeDom.CodeIterationStatement">
      <summary vsli:raw="Represents a &lt;see langword=&quot;for&quot; /&gt; statement, or a loop through a block of statements, using a test expression as a condition for continuing to loop.">Représente une instruction <see langword="for" />, ou une boucle dans un bloc d'instructions, qui utilise une expression de test comme condition pour continuer d'exécuter la boucle.</summary>
    </member>
    <member name="M:System.CodeDom.CodeIterationStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeIterationStatement&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeIterationStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeIterationStatement.#ctor(System.CodeDom.CodeStatement,System.CodeDom.CodeExpression,System.CodeDom.CodeStatement,System.CodeDom.CodeStatement[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeIterationStatement&quot; /&gt; class using the specified parameters.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeIterationStatement" /> à l'aide des paramètres spécifiés.</summary>
      <param name="initStatement" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the loop initialization statement.">
        <see cref="T:System.CodeDom.CodeStatement" /> contenant l'instruction d'initialisation de la boucle.</param>
      <param name="testExpression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; containing the expression to test for exit condition.">
        <see cref="T:System.CodeDom.CodeExpression" /> contenant l'expression à vérifier pour la condition de sortie.</param>
      <param name="incrementStatement" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the per-cycle increment statement.">
        <see cref="T:System.CodeDom.CodeStatement" /> contenant l'instruction d'incrémentation par cycle.</param>
      <param name="statements" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the statements within the loop.">Tableau de type <see cref="T:System.CodeDom.CodeStatement" /> contenant les instructions à l'intérieur de la boucle.</param>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.IncrementStatement">
      <summary vsli:raw="Gets or sets the statement that is called after each loop cycle.">Obtient ou définit l'instruction appelée pour chaque cycle de boucle.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; that indicates the per cycle increment statement.">
        <see cref="T:System.CodeDom.CodeStatement" /> indiquant l'instruction d'incrémentation par cycle.</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.InitStatement">
      <summary vsli:raw="Gets or sets the loop initialization statement.">Obtient ou définit l'instruction d'initialisation de la boucle.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; that indicates the loop initialization statement.">
        <see cref="T:System.CodeDom.CodeStatement" /> indiquant l'instruction d'initialisation de la boucle.</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.Statements">
      <summary vsli:raw="Gets the collection of statements to be executed within the loop.">Obtient la collection des instructions à exécuter dans la boucle.</summary>
      <returns vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; that indicates the statements within the loop.">Tableau de type <see cref="T:System.CodeDom.CodeStatement" /> indiquant les instructions à l'intérieur de la boucle.</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.TestExpression">
      <summary vsli:raw="Gets or sets the expression to test as the condition that continues the loop.">Obtient ou définit l'expression à vérifier comme condition qui continue la boucle.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the expression to test.">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'expression à vérifier.</returns>
    </member>
    <member name="T:System.CodeDom.CodeLabeledStatement">
      <summary vsli:raw="Represents a labeled statement or a stand-alone label.">Représente une instruction étiquetée ou une étiquette autonome.</summary>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeLabeledStatement&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeLabeledStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeLabeledStatement&quot; /&gt; class using the specified label name.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeLabeledStatement" /> en utilisant le nom d'étiquette spécifié.</summary>
      <param name="label" vsli:raw="The name of the label.">Nom de l'étiquette.</param>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor(System.String,System.CodeDom.CodeStatement)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeLabeledStatement&quot; /&gt; class using the specified label name and statement.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeLabeledStatement" /> avec le nom d'étiquette et l'instruction spécifiés.</summary>
      <param name="label" vsli:raw="The name of the label.">Nom de l'étiquette.</param>
      <param name="statement" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; to associate with the label.">
        <see cref="T:System.CodeDom.CodeStatement" /> à associer à l'étiquette.</param>
    </member>
    <member name="P:System.CodeDom.CodeLabeledStatement.Label">
      <summary vsli:raw="Gets or sets the name of the label.">Obtient ou définit le nom de l'étiquette.</summary>
      <returns vsli:raw="The name of the label.">Nom de l'étiquette.</returns>
    </member>
    <member name="P:System.CodeDom.CodeLabeledStatement.Statement">
      <summary vsli:raw="Gets or sets the optional associated statement.">Obtient ou définit l'instruction associée facultative.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; that indicates the statement associated with the label.">
        <see cref="T:System.CodeDom.CodeStatement" /> indiquant l'instruction associée à l'étiquette.</returns>
    </member>
    <member name="T:System.CodeDom.CodeLinePragma">
      <summary vsli:raw="Represents a specific location within a specific file.">Représente un emplacement spécifique dans un fichier spécifique.</summary>
    </member>
    <member name="M:System.CodeDom.CodeLinePragma.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeLinePragma&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeLinePragma" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeLinePragma.#ctor(System.String,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeLinePragma&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeLinePragma" />.</summary>
      <param name="fileName" vsli:raw="The file name of the associated file.">Nom du fichier associé.</param>
      <param name="lineNumber" vsli:raw="The line number to store a reference to.">Numéro de ligne dans laquelle stocker une référence.</param>
    </member>
    <member name="P:System.CodeDom.CodeLinePragma.FileName">
      <summary vsli:raw="Gets or sets the name of the associated file.">Obtient ou définit le nom du fichier associé.</summary>
      <returns vsli:raw="The file name of the associated file.">Nom du fichier associé.</returns>
    </member>
    <member name="P:System.CodeDom.CodeLinePragma.LineNumber">
      <summary vsli:raw="Gets or sets the line number of the associated reference.">Obtient ou définit le numéro de ligne de la référence associée.</summary>
      <returns vsli:raw="The line number.">Numéro de ligne.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberEvent">
      <summary vsli:raw="Represents a declaration for an event of a type.">Représente une déclaration pour un événement d'un type.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberEvent.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMemberEvent&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeMemberEvent" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.ImplementationTypes">
      <summary vsli:raw="Gets or sets the data type that the member event implements.">Obtient ou définit le type de données implémenté par l'événement de membre.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; that indicates the data type or types that the member event implements.">
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> indiquant les types de données implémentés par l'événement de membre.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.PrivateImplementationType">
      <summary vsli:raw="Gets or sets the privately implemented data type, if any.">Obtient ou définit le type de données implémenté en mode privé, le cas échéant.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type that the event privately implements.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> indiquant le type de données implémenté en mode privé par l'événement.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.Type">
      <summary vsli:raw="Gets or sets the data type of the delegate type that handles the event.">Obtient ou définit le type de données du type de délégué gérant l'événement.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the delegate type that handles the event.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> qui indique le type de délégué gérant l'événement.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberField">
      <summary vsli:raw="Represents a declaration for a field of a type.">Représente une déclaration pour un champ d'un type.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMemberField&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeMemberField" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMemberField&quot; /&gt; class using the specified field type and field name.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeMemberField" /> avec les type et nom de champ spécifiés.</summary>
      <param name="type" vsli:raw="An object that indicates the type of the field.">Objet qui indique le type du champ.</param>
      <param name="name" vsli:raw="The name of the field.">Nom du champ.</param>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMemberField&quot; /&gt; class using the specified field type and field name.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeMemberField" /> avec les type et nom de champ spécifiés.</summary>
      <param name="type" vsli:raw="The type of the field.">Type du champ.</param>
      <param name="name" vsli:raw="The name of the field.">Nom du champ.</param>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.Type,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMemberField&quot; /&gt; class using the specified field type and field name.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeMemberField" /> avec les type et nom de champ spécifiés.</summary>
      <param name="type" vsli:raw="The type of the field.">Type du champ.</param>
      <param name="name" vsli:raw="The name of the field.">Nom du champ.</param>
    </member>
    <member name="P:System.CodeDom.CodeMemberField.InitExpression">
      <summary vsli:raw="Gets or sets the initialization expression for the field.">Obtient ou définit l'expression d'initialisation pour le champ.</summary>
      <returns vsli:raw="The initialization expression for the field.">Expression d'initialisation pour le champ.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberField.Type">
      <summary vsli:raw="Gets or sets the type of the field.">Obtient ou définit le type du champ.</summary>
      <returns vsli:raw="The type of the field.">Type du champ.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberMethod">
      <summary vsli:raw="Represents a declaration for a method of a type.">Représente une déclaration pour une méthode d'un type.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberMethod.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMemberMethod&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeMemberMethod" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ImplementationTypes">
      <summary vsli:raw="Gets the data types of the interfaces implemented by this method, unless it is a private method implementation, which is indicated by the &lt;see cref=&quot;P:System.CodeDom.CodeMemberMethod.PrivateImplementationType&quot; /&gt; property.">Obtient les types de données des interfaces implémentées par cette méthode, sauf s'il s'agit d'une implémentation de méthode privée, ce qui est indiqué par la propriété <see cref="P:System.CodeDom.CodeMemberMethod.PrivateImplementationType" />.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; that indicates the interfaces implemented by this method.">
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> indiquant les interfaces implémentées par cette méthode.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.Parameters">
      <summary vsli:raw="Gets the parameter declarations for the method.">Obtient les déclarations de paramètre pour la méthode.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; that indicates the method parameters.">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> indiquant les paramètres de la méthode.</returns>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateImplementationTypes">
      <summary vsli:raw="An event that will be raised the first time the &lt;see cref=&quot;P:System.CodeDom.CodeMemberMethod.ImplementationTypes&quot; /&gt; collection is accessed.">Événement qui sera déclenché lors du premier accès à la collection <see cref="P:System.CodeDom.CodeMemberMethod.ImplementationTypes" />.</summary>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateParameters">
      <summary vsli:raw="An event that will be raised the first time the &lt;see cref=&quot;P:System.CodeDom.CodeMemberMethod.Parameters&quot; /&gt; collection is accessed.">Événement qui sera déclenché lors du premier accès à la collection <see cref="P:System.CodeDom.CodeMemberMethod.Parameters" />.</summary>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateStatements">
      <summary vsli:raw="An event that will be raised the first time the &lt;see cref=&quot;P:System.CodeDom.CodeMemberMethod.Statements&quot; /&gt; collection is accessed.">Événement qui sera déclenché lors du premier accès à la collection <see cref="P:System.CodeDom.CodeMemberMethod.Statements" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.PrivateImplementationType">
      <summary vsli:raw="Gets or sets the data type of the interface this method, if private, implements a method of, if any.">Obtient ou définit le type de données de l'interface pour laquelle cette méthode, s'il s'agit d'une méthode privée, implémente une méthode, le cas échéant.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the interface with the method that the private method whose declaration is represented by this &lt;see cref=&quot;T:System.CodeDom.CodeMemberMethod&quot; /&gt; implements.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> qui indique le type de données de l'interface pour laquelle la méthode privée, dont la déclaration est représentée par <see cref="T:System.CodeDom.CodeMemberMethod" />, implémente une méthode.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ReturnType">
      <summary vsli:raw="Gets or sets the data type of the return value of the method.">Obtient ou définit le type de la valeur de retour de la méthode.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the value returned by the method.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> indiquant le type de la valeur retournée par la méthode.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ReturnTypeCustomAttributes">
      <summary vsli:raw="Gets the custom attributes of the return type of the method.">Obtient les attributs personnalisés du type de retour de la méthode.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; that indicates the custom attributes.">
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> indiquant les attributs personnalisés.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.Statements">
      <summary vsli:raw="Gets the statements within the method.">Obtient les instructions au sein de la méthode.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; that indicates the statements within the method.">
        <see cref="T:System.CodeDom.CodeStatementCollection" /> indiquant les instructions au sein de la méthode.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.TypeParameters">
      <summary vsli:raw="Gets the type parameters for the current generic method.">Obtient les paramètres de type de la méthode générique actuelle.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; that contains the type parameters for the generic method.">
        <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> qui contient les paramètres de type pour la méthode générique.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberProperty">
      <summary vsli:raw="Represents a declaration for a property of a type.">Représente une déclaration pour une propriété d'un type.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberProperty.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMemberProperty&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeMemberProperty" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.GetStatements">
      <summary vsli:raw="Gets the collection of &lt;see langword=&quot;get&quot; /&gt; statements for the property.">Obtient la collection des instructions <see langword="get" /> pour la propriété.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; that contains the &lt;see langword=&quot;get&quot; /&gt; statements for the member property.">
        <see cref="T:System.CodeDom.CodeStatementCollection" /> qui contient les instructions <see langword="get" /> pour la propriété de membre.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.HasGet">
      <summary vsli:raw="Gets or sets a value indicating whether the property has a &lt;see langword=&quot;get&quot; /&gt; method accessor.">Obtient ou définit une valeur indiquant si la propriété dispose d'un accesseur de méthode <see langword="get" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see langword=&quot;Count&quot; /&gt; property of the &lt;see cref=&quot;P:System.CodeDom.CodeMemberProperty.GetStatements&quot; /&gt; collection is non-zero, or if the value of this property has been set to &lt;see langword=&quot;true&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la propriété <see langword="Count" /> de la collection <see cref="P:System.CodeDom.CodeMemberProperty.GetStatements" /> n'est pas égale à zéro, ou si <see langword="true" /> a été affecté à la valeur de cette propriété ; sinon <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.HasSet">
      <summary vsli:raw="Gets or sets a value indicating whether the property has a &lt;see langword=&quot;set&quot; /&gt; method accessor.">Obtient ou définit une valeur indiquant si la propriété dispose d'un accesseur de méthode <see langword="set" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;P:System.Collections.CollectionBase.Count&quot; /&gt; property of the &lt;see cref=&quot;P:System.CodeDom.CodeMemberProperty.SetStatements&quot; /&gt; collection is non-zero; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la propriété <see cref="P:System.Collections.CollectionBase.Count" /> de la collection <see cref="P:System.CodeDom.CodeMemberProperty.SetStatements" /> n'est pas égale à zéro ; sinon <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.ImplementationTypes">
      <summary vsli:raw="Gets the data types of any interfaces that the property implements.">Obtient les types de données des interfaces implémentées par la propriété.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; that indicates the data types the property implements.">
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> indiquant les types de données implémentés par la propriété.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.Parameters">
      <summary vsli:raw="Gets the collection of declaration expressions for the property.">Obtient la collection des expressions de déclaration pour la propriété.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; that indicates the declaration expressions for the property.">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> indiquant les expressions de déclaration pour la propriété.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.PrivateImplementationType">
      <summary vsli:raw="Gets or sets the data type of the interface, if any, this property, if private, implements.">Obtient ou définit le type de données de l'interface que cette propriété (s'il s'agit d'une propriété privée) implémente, le cas échéant.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the interface, if any, the property, if private, implements.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> qui indique le type de données de l'interface que cette propriété (s'il s'agit d'une propriété privée) implémente, le cas échéant.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.SetStatements">
      <summary vsli:raw="Gets the collection of &lt;see langword=&quot;set&quot; /&gt; statements for the property.">Obtient la collection des instructions <see langword="set" /> pour la propriété.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; that contains the &lt;see langword=&quot;set&quot; /&gt; statements for the member property.">
        <see cref="T:System.CodeDom.CodeStatementCollection" /> qui contient les instructions <see langword="set" /> pour la propriété de membre.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.Type">
      <summary vsli:raw="Gets or sets the data type of the property.">Obtient ou définit le type de données de la propriété.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the property.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> indiquant le type de données de la propriété.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodInvokeExpression">
      <summary vsli:raw="Represents an expression that invokes a method.">Représente une expression qui appelle une méthode.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodInvokeExpression&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeMethodInvokeExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodInvokeExpression&quot; /&gt; class using the specified target object, method name, and parameters.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeMethodInvokeExpression" /> avec l'objet cible, le nom de la méthode et les paramètres spécifiés.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the target object with the method to invoke.">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'objet cible associé à la méthode à appeler.</param>
      <param name="methodName" vsli:raw="The name of the method to invoke.">Nom de la méthode à appeler.</param>
      <param name="parameters" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects that indicate the parameters to call the method with.">Tableau d'objets <see cref="T:System.CodeDom.CodeExpression" /> indiquant les paramètres à utiliser pour appeler la méthode.</param>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor(System.CodeDom.CodeMethodReferenceExpression,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodInvokeExpression&quot; /&gt; class using the specified method and parameters.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeMethodInvokeExpression" /> avec la méthode et les paramètres spécifiés.</summary>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeMethodReferenceExpression&quot; /&gt; that indicates the method to invoke.">
        <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> indiquant la méthode à appeler.</param>
      <param name="parameters" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects that indicate the parameters with which to invoke the method.">Tableau d'objets <see cref="T:System.CodeDom.CodeExpression" /> indiquant les paramètres à utiliser pour appeler la méthode.</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodInvokeExpression.Method">
      <summary vsli:raw="Gets or sets the method to invoke.">Obtient ou définit la méthode à appeler.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeMethodReferenceExpression&quot; /&gt; that indicates the method to invoke.">
        <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> indiquant la méthode à appeler.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodInvokeExpression.Parameters">
      <summary vsli:raw="Gets the parameters to invoke the method with.">Obtient les paramètres à utiliser pour appeler la méthode.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that indicates the parameters to invoke the method with.">
        <see cref="T:System.CodeDom.CodeExpressionCollection" /> indiquant les paramètres à utiliser pour appeler la méthode.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodReferenceExpression">
      <summary vsli:raw="Represents a reference to a method.">Représente une référence à une méthode.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodReferenceExpression&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodReferenceExpression&quot; /&gt; class using the specified target object and method name.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> avec l'objet cible et le nom de méthode spécifiés.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object to target.">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'objet à viser.</param>
      <param name="methodName" vsli:raw="The name of the method to call.">Nom de la méthode à appeler.</param>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeTypeReference[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodReferenceExpression&quot; /&gt; class using the specified target object, method name, and generic type arguments.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> à l'aide de l'objet cible, du nom de la méthode et des arguments de type générique spécifiés.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object to target.">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'objet à viser.</param>
      <param name="methodName" vsli:raw="The name of the method to call.">Nom de la méthode à appeler.</param>
      <param name="typeParameters" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; values that specify the &lt;see cref=&quot;P:System.CodeDom.CodeMethodReferenceExpression.TypeArguments&quot; /&gt; for this &lt;see cref=&quot;T:System.CodeDom.CodeMethodReferenceExpression&quot; /&gt;.">Tableau des valeurs <see cref="T:System.CodeDom.CodeTypeReference" /> qui spécifient le <see cref="P:System.CodeDom.CodeMethodReferenceExpression.TypeArguments" /> pour ce <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.MethodName">
      <summary vsli:raw="Gets or sets the name of the method to reference.">Obtient ou définit le nom de la méthode à référencer.</summary>
      <returns vsli:raw="The name of the method to reference.">Nom de la méthode à référencer.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.TargetObject">
      <summary vsli:raw="Gets or sets the expression that indicates the method to reference.">Obtient ou définit l'expression indiquant la méthode à référencer.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that represents the method to reference.">
        <see cref="T:System.CodeDom.CodeExpression" /> représentant la méthode à référencer.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.TypeArguments">
      <summary vsli:raw="Gets the type arguments for the current generic method reference expression.">Obtient les arguments de type pour l'expression de référence de méthode générique actuelle.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; containing the type arguments for the current code &lt;see cref=&quot;T:System.CodeDom.CodeMethodReferenceExpression&quot; /&gt;.">
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> qui contient les arguments de type pour le code <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> actuel.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodReturnStatement">
      <summary vsli:raw="Represents a return value statement.">Représente une instruction return value.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReturnStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodReturnStatement&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeMethodReturnStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReturnStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodReturnStatement&quot; /&gt; class using the specified expression.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeMethodReturnStatement" /> avec l'expression spécifiée.</summary>
      <param name="expression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the return value.">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant la valeur de retour.</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodReturnStatement.Expression">
      <summary vsli:raw="Gets or sets the return value.">Obtient ou définit la valeur de retour.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the value to return for the return statement, or &lt;see langword=&quot;null&quot; /&gt; if the statement is part of a subroutine.">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant la valeur de retour pour l'instruction return, ou <see langword="null" /> si l'instruction fait partie d'une sous-routine.</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespace">
      <summary vsli:raw="Represents a namespace declaration.">Représente une déclaration d'espace de noms.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespace.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeNamespace" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespace.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; class using the specified name.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeNamespace" /> avec le nom spécifié.</summary>
      <param name="name" vsli:raw="The name of the namespace being declared.">Nom de l'espace de noms déclaré.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Comments">
      <summary vsli:raw="Gets the comments for the namespace.">Obtient les commentaires pour l'espace de noms.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; that indicates the comments for the namespace.">
        <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> indiquant les commentaires pour l'espace de noms.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Imports">
      <summary vsli:raw="Gets the collection of namespace import directives used by the namespace.">Obtient la collection des directives d'importation d'espaces de noms utilisées par l'espace de noms.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImportCollection&quot; /&gt; that indicates the namespace import directives used by the namespace.">
        <see cref="T:System.CodeDom.CodeNamespaceImportCollection" /> indiquant les directives d'importation d'espaces de noms utilisées par l'espace de noms.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Name">
      <summary vsli:raw="Gets or sets the name of the namespace.">Obtient ou définit le nom de l'espace de noms.</summary>
      <returns vsli:raw="The name of the namespace.">Nom de l'espace de noms.</returns>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateComments">
      <summary vsli:raw="An event that will be raised the first time the &lt;see cref=&quot;P:System.CodeDom.CodeNamespace.Comments&quot; /&gt; collection is accessed.">Événement qui sera déclenché lors du premier accès à la collection <see cref="P:System.CodeDom.CodeNamespace.Comments" />.</summary>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateImports">
      <summary vsli:raw="An event that will be raised the first time the &lt;see cref=&quot;P:System.CodeDom.CodeNamespace.Imports&quot; /&gt; collection is accessed.">Événement qui sera déclenché lors du premier accès à la collection <see cref="P:System.CodeDom.CodeNamespace.Imports" />.</summary>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateTypes">
      <summary vsli:raw="An event that will be raised the first time the &lt;see cref=&quot;P:System.CodeDom.CodeNamespace.Types&quot; /&gt; collection is accessed.">Événement qui sera déclenché lors du premier accès à la collection <see cref="P:System.CodeDom.CodeNamespace.Types" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Types">
      <summary vsli:raw="Gets the collection of types that the namespace contains.">Obtient la collection des types contenus dans l'espace de noms.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; that indicates the types contained in the namespace.">
        <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> indiquant les types contenus dans l'espace de noms.</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; objects.">Représente une collection d'objets <see cref="T:System.CodeDom.CodeNamespace" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeNamespaceCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor(System.CodeDom.CodeNamespace[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; class that contains the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; objects.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeNamespaceCollection" /> qui contient le tableau d'objets <see cref="T:System.CodeDom.CodeNamespace" /> spécifié.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; objects with which to initialize the collection.">Tableau d'objets <see cref="T:System.CodeDom.CodeNamespace" /> à utiliser pour initialiser la collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more objects in the array are &lt;see langword=&quot;null&quot; /&gt;.">Un ou plusieurs objets du tableau ont la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor(System.CodeDom.CodeNamespaceCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; class that contains the elements of the specified source collection.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeNamespaceCollection" /> qui contient les éléments de la collection source spécifiée.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; with which to initialize the collection.">
        <see cref="T:System.CodeDom.CodeNamespaceCollection" /> avec lequel initialiser la collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Add(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; object to the collection.">Ajoute l'objet <see cref="T:System.CodeDom.CodeNamespace" /> spécifié à la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; to add.">
        <see cref="T:System.CodeDom.CodeNamespace" /> à ajouter.</param>
      <returns vsli:raw="The index at which the new element was inserted.">Index au niveau duquel le nouvel élément a été inséré.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.AddRange(System.CodeDom.CodeNamespace[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; array to the end of the collection.">Copie les éléments du tableau <see cref="T:System.CodeDom.CodeNamespace" /> spécifié à la fin de la collection.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; that contains the objects to add to the collection.">Tableau de type <see cref="T:System.CodeDom.CodeNamespace" /> qui contient les objets à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.AddRange(System.CodeDom.CodeNamespaceCollection)">
      <summary vsli:raw="Adds the contents of the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; object to the end of the collection.">Ajoute le contenu de l'objet <see cref="T:System.CodeDom.CodeNamespaceCollection" /> spécifié à la fin de la collection.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; that contains the objects to add to the collection.">
        <see cref="T:System.CodeDom.CodeNamespaceCollection" /> qui contient les objets à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Contains(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; object.">Obtient une valeur qui indique si la collection contient l'<see cref="T:System.CodeDom.CodeNamespace" /> spécifiée.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; to search for in the collection.">
        <see cref="T:System.CodeDom.CodeNamespace" /> à rechercher dans la collection.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; is contained in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.CodeDom.CodeNamespace" /> est contenu dans la collection ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.CopyTo(System.CodeDom.CodeNamespace[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance, starting at the specified index.">Copie les objets de la collection dans une instance <see cref="T:System.Array" /> unidimensionnelle, en commençant à l'index spécifié.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">
        <see cref="T:System.Array" /> unidimensionnel qui représente la destination des valeurs copiées à partir de la collection.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">Index du tableau à partir duquel commencer l'insertion.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">Le tableau de destination est multidimensionnel.

ou -
Le nombre d'éléments dans le <see cref="T:System.CodeDom.CodeNamespaceCollection" /> est supérieur à l'espace disponible entre l'index du tableau cible spécifié par le paramètre <paramref name="index" /> et la fin du tableau cible.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">Le paramètre <paramref name="index" /> est inférieur à l'index minimal du tableau cible.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.IndexOf(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; object in the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt;, if it exists in the collection.">Obtient l'index de l'objet <see cref="T:System.CodeDom.CodeNamespace" /> spécifié dans la <see cref="T:System.CodeDom.CodeNamespaceCollection" />, s'il existe dans la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; to locate.">
        <see cref="T:System.CodeDom.CodeNamespace" /> à rechercher.</param>
      <returns vsli:raw="The index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt;, if it is found, in the collection; otherwise, -1.">Index du <see cref="T:System.CodeDom.CodeNamespace" /> spécifié, s'il existe, dans la collection ; sinon, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Insert(System.Int32,System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; object into the collection at the specified index.">Insère l'objet <see cref="T:System.CodeDom.CodeNamespace" /> indiqué dans la collection à l'index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index where the new item should be inserted.">Index de base zéro dans lequel le nouvel élément doit être inséré.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; to insert.">
        <see cref="T:System.CodeDom.CodeNamespace" /> à insérer.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; object at the specified index in the collection.">Obtient ou définit l'objet <see cref="T:System.CodeDom.CodeNamespaceCollection" /> à l'index spécifié dans la collection.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">Index de la collection à laquelle accéder.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; at each valid index.">
        <see cref="T:System.CodeDom.CodeNamespace" /> pour chaque index valide.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">Le paramètre <paramref name="index" /> est en dehors de la plage valide des index pour la collection.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Remove(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; object from the collection.">Supprime l'objet <see cref="T:System.CodeDom.CodeNamespace" /> spécifié de la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; to remove from the collection.">
        <see cref="T:System.CodeDom.CodeNamespace" /> à supprimer de la collection.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">L'objet spécifié est introuvable dans la collection.</exception>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceImport">
      <summary vsli:raw="Represents a namespace import directive that indicates a namespace to use.">Représente une directive d'importation d'espace de noms indiquant l'espace de noms à utiliser.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImport.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeNamespaceImport" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImport.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; class using the specified namespace to import.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeNamespaceImport" /> avec l'espace de noms à importer spécifié.</summary>
      <param name="nameSpace" vsli:raw="The name of the namespace to import.">Nom de l'espace de noms à importer.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImport.LinePragma">
      <summary vsli:raw="Gets or sets the line and file the statement occurs on.">Obtient ou définit la ligne et le fichier contenant l'instruction.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeLinePragma&quot; /&gt; that indicates the context of the statement.">
        <see cref="T:System.CodeDom.CodeLinePragma" /> indiquant le contexte de l'instruction.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImport.Namespace">
      <summary vsli:raw="Gets or sets the namespace to import.">Obtient ou définit l'espace de noms à importer.</summary>
      <returns vsli:raw="The name of the namespace to import.">Nom de l'espace de noms à importer.</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceImportCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; objects.">Représente une collection d'objets <see cref="T:System.CodeDom.CodeNamespaceImport" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImportCollection&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeNamespaceImportCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.Add(System.CodeDom.CodeNamespaceImport)">
      <summary vsli:raw="Adds a &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; object to the collection.">Ajoute un objet <see cref="T:System.CodeDom.CodeNamespaceImport" /> à la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; object to add to the collection.">Objet <see cref="T:System.CodeDom.CodeNamespaceImport" /> à ajouter à la collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.AddRange(System.CodeDom.CodeNamespaceImport[])">
      <summary vsli:raw="Adds a set of &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; objects to the collection.">Ajoute un ensemble d'objets <see cref="T:System.CodeDom.CodeNamespaceImport" /> à la collection.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; that contains the objects to add to the collection.">Tableau de type <see cref="T:System.CodeDom.CodeNamespaceImport" /> qui contient les objets à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.Clear">
      <summary vsli:raw="Clears the collection of members.">Efface la collection des membres.</summary>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.Count">
      <summary vsli:raw="Gets the number of namespaces in the collection.">Obtient le nombre d'espaces de noms dans la collection.</summary>
      <returns vsli:raw="The number of namespaces in the collection.">Nombre d'espaces de noms dans la collection.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.GetEnumerator">
      <summary vsli:raw="Gets an enumerator that enumerates the collection members.">Obtient un énumérateur qui énumère les membres de la collection.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that indicates the collection members.">
        <see cref="T:System.Collections.IEnumerator" /> indiquant les membres de la collection.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; object at the specified index in the collection.">Obtient ou définit l'objet <see cref="T:System.CodeDom.CodeNamespaceImport" /> à l'index spécifié dans la collection.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">Index de la collection à laquelle accéder.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; object at each valid index.">Objet <see cref="T:System.CodeDom.CodeNamespaceImport" /> à chaque index valide.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">Le paramètre <paramref name="index" /> est en dehors de la plage valide des index pour la collection.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">Copie les éléments de <see cref="T:System.Collections.ICollection" /> dans <see cref="T:System.Array" />, à partir d'un index particulier de <see cref="T:System.Array" />.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The array must have zero-based indexing.">
        <see cref="T:System.Array" /> unidimensionnel qui constitue la destination des éléments copiés à partir de la <see cref="T:System.Collections.ICollection" />. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the number of elements contained in the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Obtient le nombre d'éléments contenus dans le <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Nombre d'éléments contenus dans <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Obtient une valeur indiquant si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;. This property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe) ; sinon <see langword="false" />. Cette propriété retourne toujours <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Obtient un objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.  This property always returns &lt;see langword=&quot;null&quot; /&gt;.">Objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.  Cette propriété retourne toujours <see langword="null" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that can iterate through a collection.">Retourne un énumérateur qui peut itérer au sein d'une collection.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">
        <see cref="T:System.Collections.IEnumerator" /> qui peut être utilisé pour itérer au sein de la collection.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an object to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Ajoute un objet à <see cref="T:System.Collections.IList" />.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to add to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Object" /> à ajouter à <see cref="T:System.Collections.IList" />.</param>
      <returns vsli:raw="The position at which the new element was inserted.">Position à laquelle le nouvel élément a été inséré.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Supprime tous les éléments de <see cref="T:System.Collections.IList" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; contains a specific value.">Détermine si <see cref="T:System.Collections.IList" /> contient une valeur spécifique.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Object" /> à rechercher dans <see cref="T:System.Collections.IList" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value is in the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la valeur existe dans la liste ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Détermine l'index d'un élément spécifique d'<see cref="T:System.Collections.IList" />.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Object" /> à rechercher dans <see cref="T:System.Collections.IList" />.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if it is found in the list; otherwise, -1.">Index de <paramref name="value" /> s'il figure dans la liste ; sinon, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; at the specified position.">Insère un élément dans <see cref="T:System.Collections.IList" /> à l'index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">Index de base zéro au niveau duquel <paramref name="value" /> doit être inséré.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to insert into the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Le <see cref="T:System.Object" /> à insérer dans le <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size.">Obtient une valeur indiquant si <see cref="T:System.Collections.IList" /> est de taille fixe.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Collections.IList" /> est de taille fixe ; sinon, <see langword="false" />.  Cette propriété retourne toujours <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; is read-only.">Obtient une valeur indiquant si <see cref="T:System.Collections.IList" /> est en lecture seule.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Collections.IList" /> est en lecture seule ; sinon, <see langword="false" />.  Cette propriété retourne toujours <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the element at the specified index.">Obtient ou définit l'élément au niveau de l'index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get or set.">Index de base zéro de l'élément à obtenir ou à définir.</param>
      <returns vsli:raw="The element at the specified index.">Élément au niveau de l'index spécifié.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Supprime la première occurrence d'un objet spécifique de <see cref="T:System.Collections.IList" />.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to remove from the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Object" /> à supprimer de <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the element at the specified index of the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Supprime l'élément au niveau de l'index spécifié de <see cref="T:System.Collections.IList" />.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to remove.">Index de base zéro de l'élément à supprimer.</param>
    </member>
    <member name="T:System.CodeDom.CodeObject">
      <summary vsli:raw="Provides a common base class for most Code Document Object Model (CodeDOM) objects.">Fournit une classe de base commune pour la plupart des objets CodeDOM (Code Document Object Model).</summary>
    </member>
    <member name="M:System.CodeDom.CodeObject.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeObject&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeObject" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeObject.UserData">
      <summary vsli:raw="Gets the user-definable data for the current object.">Obtient les données définissables par l'utilisateur pour l'objet en cours.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; containing user data for the current object.">
        <see cref="T:System.Collections.IDictionary" /> contenant des données utilisateur pour l'objet en cours.</returns>
    </member>
    <member name="T:System.CodeDom.CodeObjectCreateExpression">
      <summary vsli:raw="Represents an expression that creates a new instance of a type.">Représente une expression créant une nouvelle instance d'un type.</summary>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeObjectCreateExpression&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeObjectCreateExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeObjectCreateExpression&quot; /&gt; class using the specified type and parameters.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> avec le type et les paramètres spécifiés.</summary>
      <param name="createType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the object to create.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> indiquant le type de données de l'objet à créer.</param>
      <param name="parameters" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects that indicates the parameters to use to create the object.">Tableau d'objets <see cref="T:System.CodeDom.CodeExpression" /> indiquant les paramètres à utiliser pour créer l'objet.</param>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeObjectCreateExpression&quot; /&gt; class using the specified type and parameters.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> avec le type et les paramètres spécifiés.</summary>
      <param name="createType" vsli:raw="The name of the data type of object to create.">Nom du type de données de l'objet à créer.</param>
      <param name="parameters" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects that indicates the parameters to use to create the object.">Tableau d'objets <see cref="T:System.CodeDom.CodeExpression" /> indiquant les paramètres à utiliser pour créer l'objet.</param>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeObjectCreateExpression&quot; /&gt; class using the specified type and parameters.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> avec le type et les paramètres spécifiés.</summary>
      <param name="createType" vsli:raw="The data type of the object to create.">Type de données de l'objet à créer.</param>
      <param name="parameters" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects that indicates the parameters to use to create the object.">Tableau d'objets <see cref="T:System.CodeDom.CodeExpression" /> indiquant les paramètres à utiliser pour créer l'objet.</param>
    </member>
    <member name="P:System.CodeDom.CodeObjectCreateExpression.CreateType">
      <summary vsli:raw="Gets or sets the data type of the object to create.">Obtient ou définit le type de données de l'objet à créer.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to the data type of the object to create.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> référençant le type de données de l'objet à créer.</returns>
    </member>
    <member name="P:System.CodeDom.CodeObjectCreateExpression.Parameters">
      <summary vsli:raw="Gets or sets the parameters to use in creating the object.">Obtient ou définit les paramètres à utiliser lors de la création de l'objet.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that indicates the parameters to use when creating the object.">
        <see cref="T:System.CodeDom.CodeExpressionCollection" /> indiquant les paramètres à utiliser lors de la création de l'objet.</returns>
    </member>
    <member name="T:System.CodeDom.CodeParameterDeclarationExpression">
      <summary vsli:raw="Represents a parameter declaration for a method, property, or constructor.">Représente une déclaration de paramètre pour une méthode, une propriété ou un constructeur.</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; class using the specified parameter type and name.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> avec le type et le nom de paramètre spécifiés.</summary>
      <param name="type" vsli:raw="An object that indicates the type of the parameter to declare.">Objet qui indique le type du paramètre à déclarer.</param>
      <param name="name" vsli:raw="The name of the parameter to declare.">Nom du paramètre à déclarer.</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; class using the specified parameter type and name.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> avec le type et le nom de paramètre spécifiés.</summary>
      <param name="type" vsli:raw="The type of the parameter to declare.">Type du paramètre à déclarer.</param>
      <param name="name" vsli:raw="The name of the parameter to declare.">Nom du paramètre à déclarer.</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.Type,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; class using the specified parameter type and name.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> avec le type et le nom de paramètre spécifiés.</summary>
      <param name="type" vsli:raw="The type of the parameter to declare.">Type du paramètre à déclarer.</param>
      <param name="name" vsli:raw="The name of the parameter to declare.">Nom du paramètre à déclarer.</param>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.CustomAttributes">
      <summary vsli:raw="Gets or sets the custom attributes for the parameter declaration.">Obtient ou définit les attributs personnalisés de la déclaration de paramètre.</summary>
      <returns vsli:raw="An object that indicates the custom attributes.">Objet qui indique les attributs personnalisés.</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Direction">
      <summary vsli:raw="Gets or sets the direction of the field.">Obtient ou définit la direction du champ.</summary>
      <returns vsli:raw="An object that indicates the direction of the field.">Objet qui indique la direction du champ.</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Name">
      <summary vsli:raw="Gets or sets the name of the parameter.">Obtient ou définit le nom du paramètre.</summary>
      <returns vsli:raw="The name of the parameter.">Nom du paramètre.</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Type">
      <summary vsli:raw="Gets or sets the type of the parameter.">Obtient ou définit le type du paramètre.</summary>
      <returns vsli:raw="The type of the parameter.">Type du paramètre.</returns>
    </member>
    <member name="T:System.CodeDom.CodeParameterDeclarationExpressionCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; objects.">Représente une collection d'objets <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor(System.CodeDom.CodeParameterDeclarationExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; objects.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> contenant le tableau d'objets <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> spécifié.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; objects with which to initialize the collection.">Tableau d'objets <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> à utiliser pour initialiser la collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="one or more objects in the array are &lt;see langword=&quot;null&quot; /&gt;.">un ou plusieurs objets du tableau sont <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; class containing the elements of the specified source collection.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> contenant les éléments de la collection source spécifiée.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; with which to initialize the collection.">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> utilisé pour initialiser la collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Add(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; to the collection.">Ajoute l'objet <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> spécifié à la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; to add.">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> à ajouter.</param>
      <returns vsli:raw="The index at which the new element was inserted.">Index au niveau duquel le nouvel élément a été inséré.</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.AddRange(System.CodeDom.CodeParameterDeclarationExpression[])">
      <summary vsli:raw="Copies the elements of the specified array to the end of the collection.">Copie les éléments du tableau spécifié à la fin de la collection.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; containing the objects to add to the collection.">Tableau de type <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> contenant les objets à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.AddRange(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary vsli:raw="Adds the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; to the end of the collection.">Ajoute le contenu d'une autre <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> à la fin de la collection.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; containing the objects to add to the collection.">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> contenant les objets à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Contains(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary vsli:raw="Gets a value indicating whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt;.">Obtient une valeur indiquant si la collection comporte le <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> spécifié.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; to search for in the collection.">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> à rechercher dans la collection.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la collection contient l'objet spécifié ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.CopyTo(System.CodeDom.CodeParameterDeclarationExpression[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance beginning at the specified index.">Copie la collection d'objets dans une instance à une dimension <see cref="T:System.Array" /> en commençant à l'index spécifié.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">
        <see cref="T:System.Array" /> unidimensionnel qui représente la destination des valeurs copiées à partir de la collection.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">Index du tableau à partir duquel commencer l'insertion.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">Le tableau de destination est multidimensionnel.

ou -
Le nombre d'éléments dans le <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> est supérieur à l'espace disponible entre l'index du tableau cible spécifié par le paramètre <paramref name="index" /> et la fin du tableau cible.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">Le paramètre <paramref name="index" /> est inférieur à l'index minimal du tableau cible.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.IndexOf(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary vsli:raw="Gets the index in the collection of the specified &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt;, if it exists in the collection.">Obtient l'index de la collection du <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> spécifié, s'il existe dans la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; to locate in the collection.">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> à rechercher dans la collection.</param>
      <returns vsli:raw="The index in the collection of the specified object, if found; otherwise, -1.">Index de l'objet spécifié dans la collection (s'il existe) ; sinon, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Insert(System.Int32,System.CodeDom.CodeParameterDeclarationExpression)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; into the collection at the specified index.">Insère le <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> spécifié dans la collection, à l'index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">Index de base zéro dans lequel l'objet spécifié doit être inséré.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; to insert.">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> à insérer.</param>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpressionCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; at the specified index in the collection.">Obtient ou définit le <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> dans la collection à l'index spécifié.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">Index de la collection à laquelle accéder.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; at each valid index.">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> pour chaque index valide.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">Le paramètre <paramref name="index" /> est en dehors de la plage valide des index pour la collection.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Remove(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; from the collection.">Supprime l’objet <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> spécifié de la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; to remove from the collection.">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> à supprimer de la collection.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">L'objet spécifié est introuvable dans la collection.</exception>
    </member>
    <member name="T:System.CodeDom.CodePrimitiveExpression">
      <summary vsli:raw="Represents a primitive data type value.">Représente une valeur de type de données primitif.</summary>
    </member>
    <member name="M:System.CodeDom.CodePrimitiveExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodePrimitiveExpression&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodePrimitiveExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodePrimitiveExpression.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodePrimitiveExpression&quot; /&gt; class using the specified object.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodePrimitiveExpression" /> à l'aide de l'objet spécifié.</summary>
      <param name="value" vsli:raw="The object to represent.">Objet à représenter.</param>
    </member>
    <member name="P:System.CodeDom.CodePrimitiveExpression.Value">
      <summary vsli:raw="Gets or sets the primitive data type to represent.">Obtient ou définit le type de données primitif à représenter.</summary>
      <returns vsli:raw="The primitive data type instance to represent the value of.">Instance de type de données primitif dont la valeur doit être représentée.</returns>
    </member>
    <member name="T:System.CodeDom.CodePropertyReferenceExpression">
      <summary vsli:raw="Represents a reference to the value of a property.">Représente une référence à la valeur d'une propriété.</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertyReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodePropertyReferenceExpression&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodePropertyReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertyReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodePropertyReferenceExpression&quot; /&gt; class using the specified target object and property name.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodePropertyReferenceExpression" /> avec l'objet cible et le nom de la propriété spécifiés.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the property to reference.">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'objet qui contient la propriété à référencer.</param>
      <param name="propertyName" vsli:raw="The name of the property to reference.">Nom de la propriété à référencer.</param>
    </member>
    <member name="P:System.CodeDom.CodePropertyReferenceExpression.PropertyName">
      <summary vsli:raw="Gets or sets the name of the property to reference.">Obtient ou définit le nom de la propriété à référencer.</summary>
      <returns vsli:raw="The name of the property to reference.">Nom de la propriété à référencer.</returns>
    </member>
    <member name="P:System.CodeDom.CodePropertyReferenceExpression.TargetObject">
      <summary vsli:raw="Gets or sets the object that contains the property to reference.">Obtient ou définit l'objet contenant la propriété à référencer.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the property to reference.">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'objet qui contient la propriété à référencer.</returns>
    </member>
    <member name="T:System.CodeDom.CodePropertySetValueReferenceExpression">
      <summary vsli:raw="Represents the value argument of a property set method call within a property set method.">Représente l'argument valeur d'un appel à une méthode Property Set au sein d'une méthode Property Set.</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertySetValueReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodePropertySetValueReferenceExpression&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodePropertySetValueReferenceExpression" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeRegionDirective">
      <summary vsli:raw="Specifies the name and mode for a code region.">Spécifie le nom et le mode d'une zone de code.</summary>
    </member>
    <member name="M:System.CodeDom.CodeRegionDirective.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeRegionDirective&quot; /&gt; class with default values.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeRegionDirective" /> avec des valeurs par défaut.</summary>
    </member>
    <member name="M:System.CodeDom.CodeRegionDirective.#ctor(System.CodeDom.CodeRegionMode,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeRegionDirective&quot; /&gt; class, specifying its mode and name.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeRegionDirective" />, en spécifiant son mode et son nom.</summary>
      <param name="regionMode" vsli:raw="One of the &lt;see cref=&quot;T:System.CodeDom.CodeRegionMode&quot; /&gt; values.">Une des valeurs de l'objet <see cref="T:System.CodeDom.CodeRegionMode" />.</param>
      <param name="regionText" vsli:raw="The name for the region.">Nom de la zone.</param>
    </member>
    <member name="P:System.CodeDom.CodeRegionDirective.RegionMode">
      <summary vsli:raw="Gets or sets the mode for the region directive.">Obtient ou définit le mode de la directive de zone.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.CodeDom.CodeRegionMode&quot; /&gt; values. The default is &lt;see cref=&quot;F:System.CodeDom.CodeRegionMode.None&quot; /&gt;.">Une des valeurs de l'objet <see cref="T:System.CodeDom.CodeRegionMode" />. La valeur par défaut est <see cref="F:System.CodeDom.CodeRegionMode.None" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeRegionDirective.RegionText">
      <summary vsli:raw="Gets or sets the name of the region.">Obtient ou définit le nom de la zone.</summary>
      <returns vsli:raw="The name of the region.">Nom de la région.</returns>
    </member>
    <member name="T:System.CodeDom.CodeRegionMode">
      <summary vsli:raw="Specifies the start or end of a code region.">Spécifie le début ou la fin d'une zone de code.</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.End">
      <summary vsli:raw="End of the region.">Fin de la zone.</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.None">
      <summary vsli:raw="Not used.">Non utilisé.</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.Start">
      <summary vsli:raw="Start of the region.">Début de la zone.</summary>
    </member>
    <member name="T:System.CodeDom.CodeRemoveEventStatement">
      <summary vsli:raw="Represents a statement that removes an event handler.">Représente une instruction qui supprime un gestionnaire d'événements.</summary>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeRemoveEventStatement&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeRemoveEventStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor(System.CodeDom.CodeEventReferenceExpression,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeRemoveEventStatement&quot; /&gt; class with the specified event and event handler.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeRemoveEventStatement" /> avec l'événement et le gestionnaire d'événements spécifiés.</summary>
      <param name="eventRef" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeEventReferenceExpression&quot; /&gt; that indicates the event to detach the event handler from.">
        <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> indiquant l'événement duquel le gestionnaire d'événements doit être détaché.</param>
      <param name="listener" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the event handler to remove.">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant le gestionnaire d'événements à supprimer.</param>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeRemoveEventStatement&quot; /&gt; class using the specified target object, event name, and event handler.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeRemoveEventStatement" /> avec l'objet cible, le nom d'événement et le gestionnaire d'événements spécifiés.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the event.">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'objet qui contient l'événement.</param>
      <param name="eventName" vsli:raw="The name of the event.">Nom de l’événement.</param>
      <param name="listener" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the event handler to remove.">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant le gestionnaire d'événements à supprimer.</param>
    </member>
    <member name="P:System.CodeDom.CodeRemoveEventStatement.Event">
      <summary vsli:raw="Gets or sets the event to remove a listener from.">Obtient ou définit l'événement duquel un écouteur doit être supprimé.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeEventReferenceExpression&quot; /&gt; that indicates the event to remove a listener from.">
        <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> indiquant l'événement duquel un écouteur doit être supprimé.</returns>
    </member>
    <member name="P:System.CodeDom.CodeRemoveEventStatement.Listener">
      <summary vsli:raw="Gets or sets the event handler to remove.">Obtient ou définit le gestionnaire d'événements à supprimer.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the event handler to remove.">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant le gestionnaire d'événements à supprimer.</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetCompileUnit">
      <summary vsli:raw="Represents a literal code fragment that can be compiled.">Représente un fragment de code littéral pouvant être compilé.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetCompileUnit.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetCompileUnit&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeSnippetCompileUnit" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetCompileUnit.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetCompileUnit&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeSnippetCompileUnit" />.</summary>
      <param name="value" vsli:raw="The literal code fragment to represent.">Fragment de code littéral à représenter.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetCompileUnit.LinePragma">
      <summary vsli:raw="Gets or sets the line and file information about where the code is located in a source code document.">Obtient ou définit les informations sur la ligne et le fichier concernant l'endroit où se trouve le code dans un document de code source.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeLinePragma&quot; /&gt; that indicates the position of the code fragment.">
        <see cref="T:System.CodeDom.CodeLinePragma" /> indiquant la position du fragment de code.</returns>
    </member>
    <member name="P:System.CodeDom.CodeSnippetCompileUnit.Value">
      <summary vsli:raw="Gets or sets the literal code fragment to represent.">Obtient ou définit le fragment de code littéral à représenter.</summary>
      <returns vsli:raw="The literal code fragment.">Fragment de code littéral.</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetExpression">
      <summary vsli:raw="Represents a literal expression.">Représente une expression littérale.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetExpression&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeSnippetExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetExpression.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetExpression&quot; /&gt; class using the specified literal expression.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeSnippetExpression" /> avec l'expression littérale spécifiée.</summary>
      <param name="value" vsli:raw="The literal expression to represent.">Expression littérale à représenter.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetExpression.Value">
      <summary vsli:raw="Gets or sets the literal string of code.">Obtient ou définit la chaîne de code littérale.</summary>
      <returns vsli:raw="The literal string.">Chaîne littérale.</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetStatement">
      <summary vsli:raw="Represents a statement using a literal code fragment.">Représente une instruction utilisant un fragment de code littéral.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetStatement&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeSnippetStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetStatement.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetStatement&quot; /&gt; class using the specified code fragment.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeSnippetStatement" /> avec le fragment de code spécifié.</summary>
      <param name="value" vsli:raw="The literal code fragment of the statement to represent.">Fragment de code littéral de l'instruction à représenter.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetStatement.Value">
      <summary vsli:raw="Gets or sets the literal code fragment statement.">Obtient ou définit l'instruction de fragment de code littéral.</summary>
      <returns vsli:raw="The literal code fragment statement.">Instruction de fragment de code littéral.</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetTypeMember">
      <summary vsli:raw="Represents a member of a type using a literal code fragment.">Représente un membre d'un type avec un fragment de code littéral.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetTypeMember.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetTypeMember&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeSnippetTypeMember" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetTypeMember.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetTypeMember&quot; /&gt; class using the specified text.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeSnippetTypeMember" /> avec le texte spécifié.</summary>
      <param name="text" vsli:raw="The literal code fragment for the type member.">Fragment de code littéral pour le membre type.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetTypeMember.Text">
      <summary vsli:raw="Gets or sets the literal code fragment for the type member.">Obtient ou définit le fragment de code littéral pour le membre type.</summary>
      <returns vsli:raw="The literal code fragment for the type member.">Fragment de code littéral pour le membre type.</returns>
    </member>
    <member name="T:System.CodeDom.CodeStatement">
      <summary vsli:raw="Represents the &lt;see langword=&quot;abstract&quot; /&gt; base class from which all code statements derive.">Représente la classe de base <see langword="abstract" /> à partir de laquelle toutes les instructions de code dérivent.</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeStatement" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeStatement.EndDirectives">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object that contains end directives.">Obtient un objet <see cref="T:System.CodeDom.CodeDirectiveCollection" /> qui contient des directives de fin.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing end directives.">Objet <see cref="T:System.CodeDom.CodeDirectiveCollection" /> qui contient des directives de fin.</returns>
    </member>
    <member name="P:System.CodeDom.CodeStatement.LinePragma">
      <summary vsli:raw="Gets or sets the line on which the code statement occurs.">Obtient ou définit la ligne sur laquelle l'instruction de code se produit.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeLinePragma&quot; /&gt; object that indicates the context of the code statement.">Objet <see cref="T:System.CodeDom.CodeLinePragma" /> qui indique le contexte de l'instruction de code.</returns>
    </member>
    <member name="P:System.CodeDom.CodeStatement.StartDirectives">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object that contains start directives.">Obtient un objet <see cref="T:System.CodeDom.CodeDirectiveCollection" /> qui contient des directives de début.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing start directives.">Objet <see cref="T:System.CodeDom.CodeDirectiveCollection" /> qui contient des directives de début.</returns>
    </member>
    <member name="T:System.CodeDom.CodeStatementCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects.">Représente une collection d'objets <see cref="T:System.CodeDom.CodeStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeStatementCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor(System.CodeDom.CodeStatement[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; class that contains the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeStatementCollection" /> qui contient le tableau d'objets <see cref="T:System.CodeDom.CodeStatement" /> spécifié.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects with which to initialize the collection.">Tableau d'objets <see cref="T:System.CodeDom.CodeStatement" /> à utiliser pour initialiser la collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor(System.CodeDom.CodeStatementCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; class that contains the elements of the specified source collection.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeStatementCollection" /> qui contient les éléments de la collection source spécifiée.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; object with which to initialize the collection.">Objet <see cref="T:System.CodeDom.CodeStatementCollection" /> à utiliser pour initialiser la collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Add(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to the collection.">Ajoute l'objet <see cref="T:System.CodeDom.CodeExpression" /> spécifié à la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to add.">Objet <see cref="T:System.CodeDom.CodeExpression" /> à ajouter.</param>
      <returns vsli:raw="The index at which the new element was inserted.">Index au niveau duquel le nouvel élément a été inséré.</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Add(System.CodeDom.CodeStatement)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object to the collection.">Ajoute l'objet <see cref="T:System.CodeDom.CodeStatement" /> spécifié à la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object to add.">Objet <see cref="T:System.CodeDom.CodeStatement" /> à ajouter.</param>
      <returns vsli:raw="The index at which the new element was inserted.">Index au niveau duquel le nouvel élément a été inséré.</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.AddRange(System.CodeDom.CodeStatement[])">
      <summary vsli:raw="Adds a set of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects to the collection.">Ajoute un ensemble d'objets <see cref="T:System.CodeDom.CodeStatement" /> à la collection.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects to add to the collection.">Tableau d'objets <see cref="T:System.CodeDom.CodeStatement" /> à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.AddRange(System.CodeDom.CodeStatementCollection)">
      <summary vsli:raw="Adds the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; object to the end of the collection.">Ajoute le contenu d'un autre objet <see cref="T:System.CodeDom.CodeStatementCollection" /> à la fin de la collection.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; object that contains the objects to add to the collection.">Objet <see cref="T:System.CodeDom.CodeStatementCollection" /> qui contient les objets à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Contains(System.CodeDom.CodeStatement)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object.">Obtient une valeur qui indique si la collection contient l'<see cref="T:System.CodeDom.CodeStatement" /> spécifiée.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object to search for in the collection.">Objet <see cref="T:System.CodeDom.CodeStatement" /> à rechercher dans la collection.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la collection contient l'objet spécifié ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.CopyTo(System.CodeDom.CodeStatement[],System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; object to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance, starting at the specified index.">Copie les éléments de l'objet <see cref="T:System.CodeDom.CodeStatementCollection" /> dans une instance <see cref="T:System.Array" /> unidimensionnelle, en commençant à l'index spécifié.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">
        <see cref="T:System.Array" /> unidimensionnel qui représente la destination des valeurs copiées à partir de la collection.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">Index du tableau à partir duquel commencer l'insertion.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">Le tableau de destination est multidimensionnel.
ou
Le nombre d'éléments dans le <see cref="T:System.CodeDom.CodeStatementCollection" /> est supérieur à l'espace disponible entre l'index du tableau cible spécifié par le paramètre <paramref name="index" /> et la fin du tableau cible.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">Le paramètre <paramref name="index" /> est inférieur à l'index minimal du tableau cible.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.IndexOf(System.CodeDom.CodeStatement)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object in the &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt;, if it exists in the collection.">Obtient l'index de l'objet <see cref="T:System.CodeDom.CodeStatement" /> spécifié dans la <see cref="T:System.CodeDom.CodeStatementCollection" />, s'il existe dans la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; to locate in the collection.">
        <see cref="T:System.CodeDom.CodeStatement" /> à rechercher dans la collection.</param>
      <returns vsli:raw="The index of the specified object, if it is found, in the collection; otherwise, -1.">Index de l'objet spécifié, s'il existe, dans la collection ; sinon, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Insert(System.Int32,System.CodeDom.CodeStatement)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object into the collection at the specified index.">Insère l'objet <see cref="T:System.CodeDom.CodeStatement" /> indiqué dans la collection à l'index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">Index de base zéro dans lequel l'objet spécifié doit être inséré.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object to insert.">Objet <see cref="T:System.CodeDom.CodeStatement" /> à insérer.</param>
    </member>
    <member name="P:System.CodeDom.CodeStatementCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object at the specified index in the collection.">Obtient ou définit l'objet <see cref="T:System.CodeDom.CodeStatement" /> à l'index spécifié dans la collection.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">Index de la collection à laquelle accéder.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; at each valid index.">
        <see cref="T:System.CodeDom.CodeStatement" /> pour chaque index valide.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">Le paramètre <paramref name="index" /> est en dehors de la plage valide des index pour la collection.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Remove(System.CodeDom.CodeStatement)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object from the collection.">Supprime l'objet <see cref="T:System.CodeDom.CodeStatement" /> spécifié de la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; to remove from the collection.">
        <see cref="T:System.CodeDom.CodeStatement" /> à supprimer de la collection.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">L'objet spécifié est introuvable dans la collection.</exception>
    </member>
    <member name="T:System.CodeDom.CodeThisReferenceExpression">
      <summary vsli:raw="Represents a reference to the current local class instance.">Représente une référence à l'instance de classe locale en cours.</summary>
    </member>
    <member name="M:System.CodeDom.CodeThisReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeThisReferenceExpression&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeThisReferenceExpression" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeThrowExceptionStatement">
      <summary vsli:raw="Represents a statement that throws an exception.">Représente une instruction qui lève une exception.</summary>
    </member>
    <member name="M:System.CodeDom.CodeThrowExceptionStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeThrowExceptionStatement&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeThrowExceptionStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeThrowExceptionStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeThrowExceptionStatement&quot; /&gt; class with the specified exception type instance.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeThrowExceptionStatement" /> avec l'instance de type d'exception spécifiée.</summary>
      <param name="toThrow" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the exception to throw.">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'exception à lever.</param>
    </member>
    <member name="P:System.CodeDom.CodeThrowExceptionStatement.ToThrow">
      <summary vsli:raw="Gets or sets the exception to throw.">Obtient ou définit l'exception à lever.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; representing an instance of the exception to throw.">
        <see cref="T:System.CodeDom.CodeExpression" /> représentant une instance de l'exception à lever.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTryCatchFinallyStatement">
      <summary vsli:raw="Represents a &lt;see langword=&quot;try&quot; /&gt; block with any number of &lt;see langword=&quot;catch&quot; /&gt; clauses and, optionally, a &lt;see langword=&quot;finally&quot; /&gt; block.">Représente un bloc <see langword="try" />, contenant n'importe quel nombre de clauses <see langword="catch" /> et, éventuellement, un bloc <see langword="finally" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTryCatchFinallyStatement&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor(System.CodeDom.CodeStatement[],System.CodeDom.CodeCatchClause[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTryCatchFinallyStatement&quot; /&gt; class using the specified statements for try and catch clauses.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" /> avec les instructions spécifiées pour les clauses try et catch.</summary>
      <param name="tryStatements" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects that indicate the statements to try.">Tableau d'objets <see cref="T:System.CodeDom.CodeStatement" /> indiquant les instructions à essayer.</param>
      <param name="catchClauses" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; objects that indicate the clauses to catch.">Tableau d'objets <see cref="T:System.CodeDom.CodeCatchClause" /> indiquant les clauses à intercepter.</param>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor(System.CodeDom.CodeStatement[],System.CodeDom.CodeCatchClause[],System.CodeDom.CodeStatement[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTryCatchFinallyStatement&quot; /&gt; class using the specified statements for try, catch clauses, and finally statements.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" /> avec les instructions spécifiées pour les clauses try et catch et les instructions finally.</summary>
      <param name="tryStatements" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects that indicate the statements to try.">Tableau d'objets <see cref="T:System.CodeDom.CodeStatement" /> indiquant les instructions à essayer.</param>
      <param name="catchClauses" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; objects that indicate the clauses to catch.">Tableau d'objets <see cref="T:System.CodeDom.CodeCatchClause" /> indiquant les clauses à intercepter.</param>
      <param name="finallyStatements" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects that indicate the finally statements to use.">Tableau d'objets <see cref="T:System.CodeDom.CodeStatement" /> indiquant les instructions finally à utiliser.</param>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.CatchClauses">
      <summary vsli:raw="Gets the catch clauses to use.">Obtient les clauses catch à utiliser.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; that indicates the catch clauses to use.">
        <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> indiquant les clauses catch à utiliser.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.FinallyStatements">
      <summary vsli:raw="Gets the finally statements to use.">Obtient les instructions finally à utiliser.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; that indicates the finally statements.">
        <see cref="T:System.CodeDom.CodeStatementCollection" /> indiquant les instructions finally.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.TryStatements">
      <summary vsli:raw="Gets the statements to try.">Obtient les instructions à essayer.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; that indicates the statements to try.">
        <see cref="T:System.CodeDom.CodeStatementCollection" /> indiquant les instructions à essayer.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeConstructor">
      <summary vsli:raw="Represents a static constructor for a class.">Représente un constructeur statique d'une classe.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeConstructor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeConstructor&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeConstructor" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeTypeDeclaration">
      <summary vsli:raw="Represents a type declaration for a class, structure, interface, or enumeration.">Représente une déclaration de type pour une classe, une structure, une interface ou une énumération.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclaration.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeDeclaration" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclaration.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; class with the specified name.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeDeclaration" /> avec le nom spécifié.</summary>
      <param name="name" vsli:raw="The name for the new type.">Nom du nouveau type.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
      <summary vsli:raw="Gets the base types of the type.">Obtient les types de base du type.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; object that indicates the base types of the type.">Objet <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> qui indique les types de base du type.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsClass">
      <summary vsli:raw="Gets or sets a value indicating whether the type is a class or reference type.">Obtient ou définit une valeur indiquant si le type est une classe ou un type référence.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is a class or reference type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le type est une classe ou un type référence ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsEnum">
      <summary vsli:raw="Gets or sets a value indicating whether the type is an enumeration.">Obtient ou définit une valeur indiquant si le type est une énumération.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is an enumeration; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le type est une énumération ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsInterface">
      <summary vsli:raw="Gets or sets a value indicating whether the type is an interface.">Obtient ou définit une valeur indiquant si le type est une interface.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is an interface; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le type est une interface ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
      <summary vsli:raw="Gets or sets a value indicating whether the type declaration is complete or partial.">Obtient ou définit une valeur indiquant si la déclaration de type est complète ou partielle.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the class or structure declaration is a partial representation of the implementation; &lt;see langword=&quot;false&quot; /&gt; if the declaration is a complete implementation of the class or structure. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la déclaration de classe ou de structure est une représentation partielle de l'implémentation ; <see langword="false" /> si la déclaration est une implémentation complète de la classe ou de la structure. La valeur par défaut est <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsStruct">
      <summary vsli:raw="Gets or sets a value indicating whether the type is a value type (struct).">Obtient ou définit une valeur indiquant si le type est un type valeur (structure).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is a value type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le type est un type valeur ; sinon <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.Members">
      <summary vsli:raw="Gets the collection of class members for the represented type.">Obtient la collection des membres de classe pour le type représenté.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; object that indicates the class members.">Objet <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> qui indique les membres de la classe.</returns>
    </member>
    <member name="E:System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes">
      <summary vsli:raw="Occurs when the &lt;see cref=&quot;P:System.CodeDom.CodeTypeDeclaration.BaseTypes&quot; /&gt; collection is accessed for the first time.">Se produit lors du premier accès à la collection <see cref="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" />.</summary>
    </member>
    <member name="E:System.CodeDom.CodeTypeDeclaration.PopulateMembers">
      <summary vsli:raw="Occurs when the &lt;see cref=&quot;P:System.CodeDom.CodeTypeDeclaration.Members&quot; /&gt; collection is accessed for the first time.">Se produit lors du premier accès à la collection <see cref="P:System.CodeDom.CodeTypeDeclaration.Members" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
      <summary vsli:raw="Gets or sets the attributes of the type.">Obtient ou définit les attributs du type.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.TypeAttributes&quot; /&gt; object that indicates the attributes of the type.">Objet <see cref="T:System.Reflection.TypeAttributes" /> qui indique les attributs du type.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.TypeParameters">
      <summary vsli:raw="Gets the type parameters for the type declaration.">Obtient les paramètres de type pour la déclaration de type.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; that contains the type parameters for the type declaration.">
        <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> qui contient les paramètres de type pour la déclaration de type.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeDeclarationCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; objects.">Représente une collection d'objets <see cref="T:System.CodeDom.CodeTypeDeclaration" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor(System.CodeDom.CodeTypeDeclaration[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; class that contains the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; objects.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> qui contient le tableau d'objets <see cref="T:System.CodeDom.CodeTypeDeclaration" /> spécifié.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; objects with which to initialize the collection.">Tableau d'objets <see cref="T:System.CodeDom.CodeTypeDeclaration" /> à utiliser pour initialiser la collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor(System.CodeDom.CodeTypeDeclarationCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; class that contains the elements of the specified source collection.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> qui contient les éléments de la collection source spécifiée.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; object with which to initialize the collection.">Objet <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> à utiliser pour initialiser la collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Add(System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object to the collection.">Ajoute l'objet <see cref="T:System.CodeDom.CodeTypeDeclaration" /> spécifié à la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object to add.">Objet <see cref="T:System.CodeDom.CodeTypeDeclaration" /> à ajouter.</param>
      <returns vsli:raw="The index at which the new element was inserted.">Index au niveau duquel le nouvel élément a été inséré.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.AddRange(System.CodeDom.CodeTypeDeclaration[])">
      <summary vsli:raw="Copies the elements of the specified array to the end of the collection.">Copie les éléments du tableau spécifié à la fin de la collection.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; that contains the objects to add to the collection.">Tableau de type <see cref="T:System.CodeDom.CodeTypeDeclaration" /> qui contient les objets à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.AddRange(System.CodeDom.CodeTypeDeclarationCollection)">
      <summary vsli:raw="Adds the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; object to the end of the collection.">Ajoute le contenu d'un autre objet <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> à la fin de la collection.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; object that contains the objects to add to the collection.">Objet <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> qui contient les objets à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Contains(System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object.">Obtient une valeur qui indique si la collection contient l'<see cref="T:System.CodeDom.CodeTypeDeclaration" /> spécifiée.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object to search for in the collection.">Objet <see cref="T:System.CodeDom.CodeTypeDeclaration" /> à rechercher dans la collection.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la collection contient l'objet spécifié ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.CopyTo(System.CodeDom.CodeTypeDeclaration[],System.Int32)">
      <summary vsli:raw="Copies the elements in the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; object to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance, starting at the specified index.">Copie les éléments de l'objet <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> dans une instance <see cref="T:System.Array" /> unidimensionnelle, en commençant à l'index spécifié.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">
        <see cref="T:System.Array" /> unidimensionnel qui représente la destination des valeurs copiées à partir de la collection.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">Index du tableau à partir duquel commencer l'insertion.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">Le tableau de destination est multidimensionnel.
ou
Le nombre d'éléments dans le <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> est supérieur à l'espace disponible entre l'index du tableau cible spécifié par le paramètre <paramref name="index" /> et la fin du tableau cible.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">Le paramètre <paramref name="index" /> est inférieur à l'index minimal du tableau cible.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.IndexOf(System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object in the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt;, if it exists in the collection.">Obtient l'index de l'objet <see cref="T:System.CodeDom.CodeTypeDeclaration" /> spécifié dans la <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" />, s'il existe dans la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; to locate in the collection.">
        <see cref="T:System.CodeDom.CodeTypeDeclaration" /> à rechercher dans la collection.</param>
      <returns vsli:raw="The index of the specified object, if it is found, in the collection; otherwise, -1.">Index de l'objet spécifié, s'il existe, dans la collection ; sinon, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Insert(System.Int32,System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object into the collection at the specified index.">Insère l'objet <see cref="T:System.CodeDom.CodeTypeDeclaration" /> indiqué dans la collection à l'index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">Index de base zéro dans lequel l'objet spécifié doit être inséré.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object to insert.">Objet <see cref="T:System.CodeDom.CodeTypeDeclaration" /> à insérer.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclarationCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object at the specified index in the collection.">Obtient ou définit l'objet <see cref="T:System.CodeDom.CodeTypeDeclaration" /> à l'index spécifié dans la collection.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">Index de la collection à laquelle accéder.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; at each valid index.">
        <see cref="T:System.CodeDom.CodeTypeDeclaration" /> pour chaque index valide.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">Le paramètre <paramref name="index" /> est en dehors de la plage valide des index pour la collection.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Remove(System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object from the collection.">Supprime l'objet <see cref="T:System.CodeDom.CodeTypeDeclaration" /> spécifié de la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; to remove from the collection.">
        <see cref="T:System.CodeDom.CodeTypeDeclaration" /> à supprimer de la collection.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">L'objet spécifié est introuvable dans la collection.</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeDelegate">
      <summary vsli:raw="Represents a delegate declaration.">Représente une déclaration delegate.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDelegate.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDelegate&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeDelegate" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDelegate.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDelegate&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeDelegate" />.</summary>
      <param name="name" vsli:raw="The name of the delegate.">Nom du délégué.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDelegate.Parameters">
      <summary vsli:raw="Gets the parameters of the delegate.">Obtient les paramètres du délégué.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; that indicates the parameters of the delegate.">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> indiquant les paramètres du délégué.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDelegate.ReturnType">
      <summary vsli:raw="Gets or sets the return type of the delegate.">Obtient ou définit le type de retour du délégué.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the return type of the delegate.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> indiquant le type de retour du délégué.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeMember">
      <summary vsli:raw="Provides a base class for a member of a type. Type members include fields, methods, properties, constructors and nested types.">Fournit une classe de base pour un membre d'un type. Les membres de type peuvent être des champs, des méthodes, des propriétés, des constructeurs et des types imbriqués.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMember.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeMember" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Attributes">
      <summary vsli:raw="Gets or sets the attributes of the member.">Obtient ou définit les attributs du membre.</summary>
      <returns vsli:raw="A bitwise combination of the &lt;see cref=&quot;T:System.CodeDom.MemberAttributes&quot; /&gt; values used to indicate the attributes of the member. The default value is &lt;see cref=&quot;F:System.CodeDom.MemberAttributes.Private&quot; /&gt; | &lt;see cref=&quot;F:System.CodeDom.MemberAttributes.Final&quot; /&gt;.">Combinaison d'opérations de bits des valeurs <see cref="T:System.CodeDom.MemberAttributes" /> utilisée pour indiquer les attributs du membre. La valeur par défaut <see cref="F:System.CodeDom.MemberAttributes.Private" />est  |  <see cref="F:System.CodeDom.MemberAttributes.Final" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Comments">
      <summary vsli:raw="Gets the collection of comments for the type member.">Obtient la collection de commentaires pour le membre de type.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; that indicates the comments for the member.">
        <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> indiquant les commentaires du membre.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.CustomAttributes">
      <summary vsli:raw="Gets or sets the custom attributes of the member.">Obtient ou définit les attributs personnalisés du membre.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; that indicates the custom attributes of the member.">
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> indiquant les attributs personnalisés du membre.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.EndDirectives">
      <summary vsli:raw="Gets the end directives for the member.">Obtient les directives de fin pour le membre.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing end directives.">Objet <see cref="T:System.CodeDom.CodeDirectiveCollection" /> qui contient des directives de fin.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.LinePragma">
      <summary vsli:raw="Gets or sets the line on which the type member statement occurs.">Obtient ou définit la ligne à laquelle l'instruction de membre de type apparaît.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeLinePragma&quot; /&gt; object that indicates the location of the type member declaration.">Objet <see cref="T:System.CodeDom.CodeLinePragma" /> qui indique l'emplacement de la déclaration du membre de type.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Name">
      <summary vsli:raw="Gets or sets the name of the member.">Obtient ou définit le nom du membre.</summary>
      <returns vsli:raw="The name of the member.">Nom du membre.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.StartDirectives">
      <summary vsli:raw="Gets the start directives for the member.">Obtient les directives de début pour le membre.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing start directives.">Objet <see cref="T:System.CodeDom.CodeDirectiveCollection" /> qui contient des directives de début.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeMemberCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; objects.">Représente une collection d'objets <see cref="T:System.CodeDom.CodeTypeMember" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeMemberCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor(System.CodeDom.CodeTypeMember[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; objects.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> contenant le tableau d'objets <see cref="T:System.CodeDom.CodeTypeMember" /> spécifié.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; objects with which to initialize the collection.">Tableau d'objets <see cref="T:System.CodeDom.CodeTypeMember" /> à utiliser pour initialiser la collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor(System.CodeDom.CodeTypeMemberCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; class containing the elements of the specified source collection.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> contenant les éléments de la collection source spécifiée.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; with which to initialize the collection.">
        <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> utilisé pour initialiser la collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Add(System.CodeDom.CodeTypeMember)">
      <summary vsli:raw="Adds a &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; with the specified value to the collection.">Ajoute à la collection un <see cref="T:System.CodeDom.CodeTypeMember" /> possédant la valeur spécifiée.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; to add.">
        <see cref="T:System.CodeDom.CodeTypeMember" /> à ajouter.</param>
      <returns vsli:raw="The index at which the new element was inserted.">Index au niveau duquel le nouvel élément a été inséré.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.AddRange(System.CodeDom.CodeTypeMember[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; array to the end of the collection.">Copie les éléments du tableau <see cref="T:System.CodeDom.CodeTypeMember" /> spécifié à la fin de la collection.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; containing the objects to add to the collection.">Tableau de type <see cref="T:System.CodeDom.CodeTypeMember" /> contenant les objets à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.AddRange(System.CodeDom.CodeTypeMemberCollection)">
      <summary vsli:raw="Adds the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; to the end of the collection.">Ajoute le contenu d'une autre <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> à la fin de la collection.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; containing the objects to add to the collection.">
        <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> contenant les objets à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Contains(System.CodeDom.CodeTypeMember)">
      <summary vsli:raw="Gets a value indicating whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt;.">Obtient une valeur indiquant si la collection comporte le <see cref="T:System.CodeDom.CodeTypeMember" /> spécifié.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; to search for in the collection.">
        <see cref="T:System.CodeDom.CodeTypeMember" /> à rechercher dans la collection.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la collection contient l'objet spécifié ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.CopyTo(System.CodeDom.CodeTypeMember[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance, beginning at the specified index.">Copie la collection d'objets dans une instance à une dimension <see cref="T:System.Array" /> en commençant à l'index spécifié.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">
        <see cref="T:System.Array" /> unidimensionnel qui représente la destination des valeurs copiées à partir de la collection.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">Index du tableau à partir duquel commencer l'insertion.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">Le tableau de destination est multidimensionnel.

ou -
Le nombre d'éléments dans le <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> est supérieur à l'espace disponible entre l'index du tableau cible spécifié par le paramètre <paramref name="index" /> et la fin du tableau cible.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">Le paramètre <paramref name="index" /> est inférieur à l'index minimal du tableau cible.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.IndexOf(System.CodeDom.CodeTypeMember)">
      <summary vsli:raw="Gets the index in the collection of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt;, if it exists in the collection.">Obtient l'index de la collection du <see cref="T:System.CodeDom.CodeTypeMember" /> spécifié, s'il existe dans la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; to locate in the collection.">
        <see cref="T:System.CodeDom.CodeTypeMember" /> à rechercher dans la collection.</param>
      <returns vsli:raw="The index in the collection of the specified object, if found; otherwise, -1.">Index de l'objet spécifié dans la collection (s'il existe) ; sinon, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Insert(System.Int32,System.CodeDom.CodeTypeMember)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; into the collection at the specified index.">Insère le <see cref="T:System.CodeDom.CodeTypeMember" /> spécifié dans la collection, à l'index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">Index de base zéro dans lequel l'objet spécifié doit être inséré.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; to insert.">
        <see cref="T:System.CodeDom.CodeTypeMember" /> à insérer.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeMemberCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; at the specified index in the collection.">Obtient ou définit le <see cref="T:System.CodeDom.CodeTypeMember" /> dans la collection à l'index spécifié.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">Index de la collection à laquelle accéder.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; at each valid index.">
        <see cref="T:System.CodeDom.CodeTypeMember" /> pour chaque index valide.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">Le paramètre <paramref name="index" /> est en dehors de la plage valide des index pour la collection.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Remove(System.CodeDom.CodeTypeMember)">
      <summary vsli:raw="Removes a specific &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; from the collection.">Supprime un <see cref="T:System.CodeDom.CodeTypeMember" /> spécifique dans la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; to remove from the collection.">
        <see cref="T:System.CodeDom.CodeTypeMember" /> à supprimer de la collection.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">L'objet spécifié est introuvable dans la collection.</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeOfExpression">
      <summary vsli:raw="Represents a &lt;see langword=&quot;typeof&quot; /&gt; expression, an expression that returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; for a specified type name.">Représente une expression <see langword="typeof" />, qui retourne <see cref="T:System.Type" /> pour un nom de type spécifié.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeOfExpression&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeOfExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeOfExpression&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeOfExpression" />.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type for the &lt;see langword=&quot;typeof&quot; /&gt; expression.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> indiquant le type de données de l'expression <see langword="typeof" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeOfExpression&quot; /&gt; class using the specified type.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeOfExpression" /> à l'aide du type spécifié.</summary>
      <param name="type" vsli:raw="The name of the data type for the &lt;see langword=&quot;typeof&quot; /&gt; expression.">Nom du type de données de l'expression <see langword="typeof" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeOfExpression&quot; /&gt; class using the specified type.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeOfExpression" /> à l'aide du type spécifié.</summary>
      <param name="type" vsli:raw="The data type of the data type of the &lt;see langword=&quot;typeof&quot; /&gt; expression.">Type de données de l'expression <see langword="typeof" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeOfExpression.Type">
      <summary vsli:raw="Gets or sets the data type referenced by the &lt;see langword=&quot;typeof&quot; /&gt; expression.">Obtient ou définit le type de données référencé par l'expression <see langword="typeof" />.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type referenced by the &lt;see langword=&quot;typeof&quot; /&gt; expression. This property will never return &lt;see langword=&quot;null&quot; /&gt;, and defaults to the &lt;see cref=&quot;T:System.Void&quot; /&gt; type.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> indiquant le type de données référencé par l'expression <see langword="typeof" />. Cette propriété ne retourne jamais <see langword="null" /> et utilise par défaut le type <see cref="T:System.Void" />.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeParameter">
      <summary vsli:raw="Represents a type parameter of a generic type or method.">Représente un paramètre de type d'un type ou d'une méthode générique.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeParameter" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameter.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; class with the specified type parameter name.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeParameter" /> avec le nom du paramètre de type spécifié.</summary>
      <param name="name" vsli:raw="The name of the type parameter.">Nom du paramètre de type.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.Constraints">
      <summary vsli:raw="Gets the constraints for the type parameter.">Obtient les contraintes pour le paramètre de type.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; object that contains the constraints for the type parameter.">Objet <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> qui contient les contraintes pour le paramètre de type.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.CustomAttributes">
      <summary vsli:raw="Gets the custom attributes of the type parameter.">Obtient les attributs personnalisés du paramètre de type.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; that indicates the custom attributes of the type parameter. The default is &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> qui indique les attributs personnalisés du paramètre de type. La valeur par défaut est <see langword="null" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.HasConstructorConstraint">
      <summary vsli:raw="Gets or sets a value indicating whether the type parameter has a constructor constraint.">Obtient ou définit une valeur qui indique si le paramètre de type possède une contrainte de constructeur.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type parameter has a constructor constraint; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le paramètre de type possède une contrainte de constructeur ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.Name">
      <summary vsli:raw="Gets or sets the name of the type parameter.">Obtient ou définit le nom du paramètre de type.</summary>
      <returns vsli:raw="The name of the type parameter. The default is an empty string (&quot;&quot;).">Nom du paramètre de type. La valeur par défaut est une chaîne vide ("").</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeParameterCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; objects.">Représente une collection d'objets <see cref="T:System.CodeDom.CodeTypeParameter" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor">
      <summary vsli:raw="Initializes a new, empty instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; class.">Initialise une nouvelle instance vide de la classe <see cref="T:System.CodeDom.CodeTypeParameterCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor(System.CodeDom.CodeTypeParameter[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; objects.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> contenant le tableau d'objets <see cref="T:System.CodeDom.CodeTypeParameter" /> spécifié.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; objects with which to initialize the collection.">Tableau d'objets <see cref="T:System.CodeDom.CodeTypeParameter" /> à utiliser pour initialiser la collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor(System.CodeDom.CodeTypeParameterCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; class containing the elements of the specified source collection.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> contenant les éléments de la collection source spécifiée.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; with which to initialize the collection.">
        <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> utilisé pour initialiser la collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Add(System.CodeDom.CodeTypeParameter)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object to the collection.">Ajoute l'objet <see cref="T:System.CodeDom.CodeTypeParameter" /> spécifié à la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; to add.">
        <see cref="T:System.CodeDom.CodeTypeParameter" /> à ajouter.</param>
      <returns vsli:raw="The zero-based index at which the new element was inserted.">Index de base zéro au niveau duquel le nouvel élément a été inséré.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Add(System.String)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object to the collection using the specified data type name.">Ajoute l'objet <see cref="T:System.CodeDom.CodeTypeParameter" /> spécifié à la collection en utilisant le nom du type de données spécifié.</summary>
      <param name="value" vsli:raw="The name of a data type for which to add the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object to the collection.">Nom d'un type de données pour lequel ajouter l'objet <see cref="T:System.CodeDom.CodeTypeParameter" /> à la collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.AddRange(System.CodeDom.CodeTypeParameter[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; array to the end of the collection.">Copie les éléments du tableau <see cref="T:System.CodeDom.CodeTypeParameter" /> spécifié à la fin de la collection.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; containing the objects to add to the collection.">Tableau de type <see cref="T:System.CodeDom.CodeTypeParameter" /> contenant les objets à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.AddRange(System.CodeDom.CodeTypeParameterCollection)">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; to the end of the collection.">Copie les éléments du <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> spécifié à la fin de la collection.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; containing the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; objects to add to the collection.">
        <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> comportant les objets <see cref="T:System.CodeDom.CodeTypeParameter" /> à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Contains(System.CodeDom.CodeTypeParameter)">
      <summary vsli:raw="Determines whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object.">Détermine si la collection contient l'objet <see cref="T:System.CodeDom.CodeTypeParameter" /> spécifié.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object to search for in the collection.">Objet <see cref="T:System.CodeDom.CodeTypeParameter" /> à rechercher dans la collection.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object is contained in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la collection contient l'objet <see cref="T:System.CodeDom.CodeTypeParameter" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.CopyTo(System.CodeDom.CodeTypeParameter[],System.Int32)">
      <summary vsli:raw="Copies the items in the collection to the specified one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; at the specified index.">Copie les éléments de la collection vers le <see cref="T:System.Array" /> à une dimension spécifiée, à l'index déterminé.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">
        <see cref="T:System.Array" /> unidimensionnel qui représente la destination des valeurs copiées à partir de la collection.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">Index du tableau à partir duquel commencer l'insertion.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; is greater than the available space between the index of the target array specified by &lt;paramref name=&quot;index&quot; /&gt; and the end of the target array.">
        <paramref name="array" /> est multidimensionnel.

ou -
Le nombre d'éléments dans le <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> est supérieur à l'espace disponible entre l'index du tableau cible spécifié par <paramref name="index" /> et la fin du tableau cible.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than the target array's lowest index.">
        <paramref name="index" /> est inférieur à l'index le plus bas du tableau cible.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.IndexOf(System.CodeDom.CodeTypeParameter)">
      <summary vsli:raw="Gets the index in the collection of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object, if it exists in the collection.">Obtient l'index dans la collection de l'objet <see cref="T:System.CodeDom.CodeTypeParameter" /> spécifié, s'il existe dans la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object to locate in the collection.">Objet <see cref="T:System.CodeDom.CodeTypeParameter" /> à placer dans la collection.</param>
      <returns vsli:raw="The zero-based index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object in the collection if found; otherwise, -1.">Index de base zéro de l'objet <see cref="T:System.CodeDom.CodeTypeParameter" /> spécifié dans la collection, s'il appartient à la collection ; sinon, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Insert(System.Int32,System.CodeDom.CodeTypeParameter)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object into the collection at the specified index.">Insère l'objet <see cref="T:System.CodeDom.CodeTypeParameter" /> indiqué dans la collection à l'index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index at which to insert the item.">Index de base zéro au niveau duquel insérer l'élément.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object to insert.">Objet <see cref="T:System.CodeDom.CodeTypeParameter" /> à insérer.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameterCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object at the specified index in the collection.">Obtient ou définit l'objet <see cref="T:System.CodeDom.CodeTypeParameter" /> à l'index spécifié dans la collection.</summary>
      <param name="index" vsli:raw="The zero-based index of the collection object to access.">Index de base zéro de l'objet de la collection auquel vous souhaitez accéder.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object at the specified index.">Objet <see cref="T:System.CodeDom.CodeTypeParameter" /> au niveau de l’index spécifié.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is outside the valid range of indexes for the collection.">
        <paramref name="index" /> est en dehors de la plage valide des index pour la collection.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Remove(System.CodeDom.CodeTypeParameter)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object from the collection.">Supprime l'objet <see cref="T:System.CodeDom.CodeTypeParameter" /> spécifié de la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object to remove from the collection.">Objet <see cref="T:System.CodeDom.CodeTypeParameter" /> à supprimer de la collection.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">L'objet spécifié est introuvable dans la collection.</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeReference">
      <summary vsli:raw="Represents a reference to a type.">Représente une référence à un type.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeReference" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeParameter)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified code type parameter.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeReference" /> à l'aide du paramètre du type de code spécifié.</summary>
      <param name="typeParameter" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; that represents the type of the type parameter.">
        <see cref="T:System.CodeDom.CodeTypeParameter" /> qui représente le type du paramètre de type.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeReference,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified array type and rank.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeReference" /> avec le rang et le type de tableau spécifiés.</summary>
      <param name="arrayType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type of the array.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> qui indique le type de tableau.</param>
      <param name="rank" vsli:raw="The number of dimensions in the array.">Nombre de dimensions dans le tableau.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified type name.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeReference" /> à l'aide du nom du type spécifié.</summary>
      <param name="typeName" vsli:raw="The name of the type to reference.">Nom du type à référencer.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReference[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified type name and type arguments.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeReference" /> à l'aide du nom de type et des arguments de type spécifiés.</summary>
      <param name="typeName" vsli:raw="The name of the type to reference.">Nom du type à référencer.</param>
      <param name="typeArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; values.">Tableau de valeurs <see cref="T:System.CodeDom.CodeTypeReference" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReferenceOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified type name and code type reference option.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeReference" /> à l'aide du nom de type spécifié et de l'option de référence de type de code.</summary>
      <param name="typeName" vsli:raw="The name of the type to reference.">Nom du type à référencer.</param>
      <param name="codeTypeReferenceOption" vsli:raw="The code type reference option, one of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceOptions&quot; /&gt; values.">Option de référence de type de code, une des valeurs <see cref="T:System.CodeDom.CodeTypeReferenceOptions" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified array type name and rank.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeReference" /> avec le rang et le nom du type de tableau spécifiés.</summary>
      <param name="baseType" vsli:raw="The name of the type of the elements of the array.">Nom du type des éléments du tableau.</param>
      <param name="rank" vsli:raw="The number of dimensions of the array.">Nombre de dimensions du tableau.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified type.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeReference" /> à l'aide du type spécifié.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to reference.">
        <see cref="T:System.Type" /> à référencer.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.Type,System.CodeDom.CodeTypeReferenceOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified type and code type reference.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeReference" /> à l'aide du type spécifié et de la référence de type de code.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to reference.">
        <see cref="T:System.Type" /> à référencer.</param>
      <param name="codeTypeReferenceOption" vsli:raw="The code type reference option, one of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceOptions&quot; /&gt; values.">Option de référence de type de code, une des valeurs <see cref="T:System.CodeDom.CodeTypeReferenceOptions" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.ArrayElementType">
      <summary vsli:raw="Gets or sets the type of the elements in the array.">Obtient ou définit le type des éléments du tableau.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type of the array elements.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> qui indique le type des éléments du tableau.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.ArrayRank">
      <summary vsli:raw="Gets or sets the array rank of the array.">Obtient ou définit le rang du tableau.</summary>
      <returns vsli:raw="The number of dimensions of the array.">Nombre de dimensions du tableau.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.BaseType">
      <summary vsli:raw="Gets or sets the name of the type being referenced.">Obtient ou définit le nom du type référencé.</summary>
      <returns vsli:raw="The name of the type being referenced.">Nom du type référencé.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.Options">
      <summary vsli:raw="Gets or sets the code type reference option.">Obtient ou définit l'option de référence de type de code.</summary>
      <returns vsli:raw="A bitwise combination of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceOptions&quot; /&gt; values.">Combinaison d'opérations de bits des valeurs <see cref="T:System.CodeDom.CodeTypeReferenceOptions" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.TypeArguments">
      <summary vsli:raw="Gets the type arguments for the current generic type reference.">Obtient les arguments de type pour la référence de type générique actuelle.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; containing the type arguments for the current &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; object.">
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> qui contient les arguments de type pour l'objet <see cref="T:System.CodeDom.CodeTypeReference" /> actuel.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; objects.">Représente une collection d'objets <see cref="T:System.CodeDom.CodeTypeReference" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor(System.CodeDom.CodeTypeReference[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; objects.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> contenant le tableau d'objets <see cref="T:System.CodeDom.CodeTypeReference" /> spécifié.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; objects with which to initialize the collection.">Tableau d'objets <see cref="T:System.CodeDom.CodeTypeReference" /> à utiliser pour initialiser la collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor(System.CodeDom.CodeTypeReferenceCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; class containing the elements of the specified source collection.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> contenant les éléments de la collection source spécifiée.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; with which to initialize the collection.">
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> utilisé pour initialiser la collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to the collection.">Ajoute l'objet <see cref="T:System.CodeDom.CodeTypeReference" /> spécifié à la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to add.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> à ajouter.</param>
      <returns vsli:raw="The index at which the new element was inserted.">Index au niveau duquel le nouvel élément a été inséré.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.String)">
      <summary vsli:raw="Adds a &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to the collection using the specified data type name.">Ajoute un <see cref="T:System.CodeDom.CodeTypeReference" /> à la collection avec le nom du type de données spécifié.</summary>
      <param name="value" vsli:raw="The name of a data type for which to add a &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to the collection.">Nom d'un type de données pour lequel ajouter <see cref="T:System.CodeDom.CodeTypeReference" /> à la collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.Type)">
      <summary vsli:raw="Adds a &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to the collection using the specified data type.">Ajoute un <see cref="T:System.CodeDom.CodeTypeReference" /> à la collection avec le type de données spécifié.</summary>
      <param name="value" vsli:raw="The data type for which to add a &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to the collection.">Type de données pour lequel ajouter <see cref="T:System.CodeDom.CodeTypeReference" /> à la collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.AddRange(System.CodeDom.CodeTypeReference[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; array to the end of the collection.">Copie les éléments du tableau <see cref="T:System.CodeDom.CodeTypeReference" /> spécifié à la fin de la collection.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; containing the objects to add to the collection.">Tableau de type <see cref="T:System.CodeDom.CodeTypeReference" /> contenant les objets à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.AddRange(System.CodeDom.CodeTypeReferenceCollection)">
      <summary vsli:raw="Adds the contents of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; to the end of the collection.">Ajoute le contenu du <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> spécifié à la fin de la collection.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; containing the objects to add to the collection.">
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> contenant les objets à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Contains(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Gets a value indicating whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt;.">Obtient une valeur indiquant si la collection comporte le <see cref="T:System.CodeDom.CodeTypeReference" /> spécifié.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to search for in the collection.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> à rechercher dans la collection.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; is contained in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.CodeDom.CodeTypeReference" /> est contenu dans la collection ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.CopyTo(System.CodeDom.CodeTypeReference[],System.Int32)">
      <summary vsli:raw="Copies the items in the collection to the specified one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; at the specified index.">Copie les éléments de la collection vers le <see cref="T:System.Array" /> à une dimension spécifiée, à l'index déterminé.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">
        <see cref="T:System.Array" /> unidimensionnel qui représente la destination des valeurs copiées à partir de la collection.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">Index du tableau à partir duquel commencer l'insertion.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">Le paramètre <paramref name="array" /> est multidimensionnel.

ou -
Le nombre d'éléments dans le <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> est supérieur à l'espace disponible entre l'index du tableau cible spécifié par le paramètre <paramref name="index" /> et la fin du tableau cible.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">Le paramètre <paramref name="index" /> est inférieur à l'index minimal du tableau cible.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.IndexOf(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Gets the index in the collection of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt;, if it exists in the collection.">Obtient l'index de la collection du <see cref="T:System.CodeDom.CodeTypeReference" /> spécifié, s'il existe dans la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to locate in the collection.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> à rechercher dans la collection.</param>
      <returns vsli:raw="The index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; in the collection if found; otherwise, -1.">Index du <see cref="T:System.CodeDom.CodeTypeReference" /> spécifié dans la collection (s'il en existe) ; sinon, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Insert(System.Int32,System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Inserts a &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; into the collection at the specified index.">Insère un <see cref="T:System.CodeDom.CodeTypeReference" /> dans la collection au niveau de l'index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index where the item should be inserted.">Index de base zéro dans lequel l'élément doit être inséré.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to insert.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> à insérer.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReferenceCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; at the specified index in the collection.">Obtient ou définit le <see cref="T:System.CodeDom.CodeTypeReference" /> dans la collection à l'index spécifié.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">Index de la collection à laquelle accéder.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; at each valid index.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> pour chaque index valide.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">Le paramètre <paramref name="index" /> est en dehors de la plage valide des index pour la collection.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Remove(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; from the collection.">Enlève le <see cref="T:System.CodeDom.CodeTypeReference" /> spécifié de la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to remove from the collection.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> à supprimer de la collection.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">L'objet spécifié est introuvable dans la collection.</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceExpression">
      <summary vsli:raw="Represents a reference to a data type.">Représente une référence à un type de données.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceExpression&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceExpression&quot; /&gt; class using the specified type.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> à l'aide du type spécifié.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type to reference.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> indiquant le type de données à référencer.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceExpression&quot; /&gt; class using the specified data type name.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> avec le nom de type de données spécifié.</summary>
      <param name="type" vsli:raw="The name of the data type to reference.">Nom du type de données à référencer.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceExpression&quot; /&gt; class using the specified data type.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> avec le type de données spécifié.</summary>
      <param name="type" vsli:raw="An instance of the data type to reference.">Obtient ou définit le type de données à référencer.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReferenceExpression.Type">
      <summary vsli:raw="Gets or sets the data type to reference.">Obtient ou définit le type de données à référencer.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type to reference.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> indiquant le type de données à référencer.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceOptions">
      <summary vsli:raw="Specifies how the code type reference is to be resolved.">Spécifie comment la référence de type de code doit être résolue.</summary>
    </member>
    <member name="F:System.CodeDom.CodeTypeReferenceOptions.GenericTypeParameter">
      <summary vsli:raw="Resolve the type from the type parameter.">Résolvez le type à partir du paramètre de type.</summary>
    </member>
    <member name="F:System.CodeDom.CodeTypeReferenceOptions.GlobalReference">
      <summary vsli:raw="Resolve the type from the root namespace.">Résolvez le type à partir de l'espace de noms racine.</summary>
    </member>
    <member name="T:System.CodeDom.CodeVariableDeclarationStatement">
      <summary vsli:raw="Represents a variable declaration.">Représente une déclaration de variable.</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableDeclarationStatement&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableDeclarationStatement&quot; /&gt; class using the specified type and name.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> avec le type et le nom spécifiés.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the variable.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> indiquant le type de données de la variable.</param>
      <param name="name" vsli:raw="The name of the variable.">Nom de la variable.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.CodeDom.CodeTypeReference,System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableDeclarationStatement&quot; /&gt; class using the specified data type, variable name, and initialization expression.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> avec le type de données, le nom de variable et l'expression d'initialisation spécifiés.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type of the variable.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> indiquant le type de la variable.</param>
      <param name="name" vsli:raw="The name of the variable.">Nom de la variable.</param>
      <param name="initExpression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the initialization expression for the variable.">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'expression d'initialisation pour la variable.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableDeclarationStatement&quot; /&gt; class using the specified data type name and variable name.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> avec le nom du type de données et le nom de variable spécifiés.</summary>
      <param name="type" vsli:raw="The name of the data type of the variable.">Nom du type de données de la variable.</param>
      <param name="name" vsli:raw="The name of the variable.">Nom de la variable.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.String,System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableDeclarationStatement&quot; /&gt; class using the specified data type, variable name, and initialization expression.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> avec le type de données, le nom de variable et l'expression d'initialisation spécifiés.</summary>
      <param name="type" vsli:raw="The name of the data type of the variable.">Nom du type de données de la variable.</param>
      <param name="name" vsli:raw="The name of the variable.">Nom de la variable.</param>
      <param name="initExpression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the initialization expression for the variable.">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'expression d'initialisation pour la variable.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.Type,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableDeclarationStatement&quot; /&gt; class using the specified data type and variable name.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> avec le nom du type de données et le nom de variable spécifiés.</summary>
      <param name="type" vsli:raw="The data type for the variable.">Type de données de la variable.</param>
      <param name="name" vsli:raw="The name of the variable.">Nom de la variable.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.Type,System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableDeclarationStatement&quot; /&gt; class using the specified data type, variable name, and initialization expression.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> avec le type de données, le nom de variable et l'expression d'initialisation spécifiés.</summary>
      <param name="type" vsli:raw="The data type of the variable.">Type de données de la variable.</param>
      <param name="name" vsli:raw="The name of the variable.">Nom de la variable.</param>
      <param name="initExpression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the initialization expression for the variable.">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'expression d'initialisation pour la variable.</param>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.InitExpression">
      <summary vsli:raw="Gets or sets the initialization expression for the variable.">Obtient ou définit l'expression d'initialisation pour la variable.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the initialization expression for the variable.">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'expression d'initialisation pour la variable.</returns>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.Name">
      <summary vsli:raw="Gets or sets the name of the variable.">Obtient ou définit le nom de la variable.</summary>
      <returns vsli:raw="The name of the variable.">Nom de la variable.</returns>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.Type">
      <summary vsli:raw="Gets or sets the data type of the variable.">Obtient ou définit le type de données de la variable.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the variable.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> indiquant le type de données de la variable.</returns>
    </member>
    <member name="T:System.CodeDom.CodeVariableReferenceExpression">
      <summary vsli:raw="Represents a reference to a local variable.">Représente une référence à une variable locale.</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableReferenceExpression&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeVariableReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableReferenceExpression.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableReferenceExpression&quot; /&gt; class using the specified local variable name.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeVariableReferenceExpression" /> avec le nom de variable locale spécifié.</summary>
      <param name="variableName" vsli:raw="The name of the local variable to reference.">Nom de la variable locale à référencer.</param>
    </member>
    <member name="P:System.CodeDom.CodeVariableReferenceExpression.VariableName">
      <summary vsli:raw="Gets or sets the name of the local variable to reference.">Obtient ou définit le nom de la variable locale à référencer.</summary>
      <returns vsli:raw="The name of the local variable to reference.">Nom de la variable locale à référencer.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeCompiler">
      <summary vsli:raw="Provides an example implementation of the &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeCompiler&quot; /&gt; interface.">Fournit un exemple d'implémentation de l'interface <see cref="T:System.CodeDom.Compiler.ICodeCompiler" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeCompiler&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.Compiler.CodeCompiler" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.CmdArgsFromParameters(System.CodeDom.Compiler.CompilerParameters)">
      <summary vsli:raw="Gets the command arguments to be passed to the compiler from the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt;.">Obtient les arguments de commande à passer au compilateur à partir du <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> spécifié.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; that indicates the compiler options.">
        <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> indiquant les options du compilateur.</param>
      <returns vsli:raw="The command arguments.">Arguments de commande.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeCompiler.CompilerName">
      <summary vsli:raw="Gets the name of the compiler executable.">Obtient le nom de l'exécutable du compilateur.</summary>
      <returns vsli:raw="The name of the compiler executable.">Nom de l'exécutable du compilateur.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeCompiler.FileExtension">
      <summary vsli:raw="Gets the file name extension to use for source files.">Obtient l'extension du nom de fichier à utiliser pour les fichiers sources.</summary>
      <returns vsli:raw="The file name extension to use for source files.">Extension du nom de fichier à utiliser pour les fichiers sources.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary vsli:raw="Compiles the specified compile unit using the specified options, and returns the results from the compilation.">Compile le fichier spécifié à l'aide des options spécifiées et retourne les résultats de la compilation.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Objet <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> qui indique les options du compilateur.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; object that indicates the source to compile.">Objet <see cref="T:System.CodeDom.CodeCompileUnit" /> qui indique la source à compiler.</param>
      <returns vsli:raw="The results of compilation.">Résultats de la compilation.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary vsli:raw="Compiles the specified compile units using the specified options, and returns the results from the compilation.">Compile les unités de compilation spécifiées à l'aide des options spécifiées et retourne le résultat de la compilation.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Objet <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> qui indique les options du compilateur.</param>
      <param name="ea" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; objects that indicates the source to compile.">Tableau d'objets <see cref="T:System.CodeDom.CodeCompileUnit" /> indiquant la source à compiler.</param>
      <returns vsli:raw="The results of compilation.">Résultats de la compilation.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;ea&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> a la valeur <see langword="null" />.

ou -
<paramref name="ea" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary vsli:raw="Compiles the specified file using the specified options, and returns the results from the compilation.">Compile le fichier spécifié à l'aide des options spécifiées et retourne le résultat de la compilation.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Objet <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> qui indique les options du compilateur.</param>
      <param name="fileName" vsli:raw="The file name to compile.">Nom du fichier à compiler.</param>
      <returns vsli:raw="The results of compilation.">Résultats de la compilation.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;fileName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> a la valeur <see langword="null" />.

ou -
<paramref name="fileName" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="Compiles the specified files using the specified options, and returns the results from the compilation.">Compile les fichiers spécifiés à l'aide des options spécifiées et retourne les résultats de la compilation.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Objet <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> qui indique les options du compilateur.</param>
      <param name="fileNames" vsli:raw="An array of strings that indicates the file names of the files to compile.">Tableau de chaînes indiquant les noms des fichiers à compiler.</param>
      <returns vsli:raw="The results of compilation.">Résultats de la compilation.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;fileNames&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> est <see langword="null" />.

ou -
<paramref name="fileNames" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary vsli:raw="Compiles the specified source code string using the specified options, and returns the results from the compilation.">Compile les chaînes de code source spécifiées à l'aide des options spécifiées et retourne les résultats de la compilation.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Objet <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> qui indique les options du compilateur.</param>
      <param name="source" vsli:raw="The source code string to compile.">Chaînes de code source à compiler.</param>
      <returns vsli:raw="The results of compilation.">Résultats de la compilation.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="Compiles the specified source code strings using the specified options, and returns the results from the compilation.">Compile les chaînes de code source spécifiées à l'aide des options spécifiées et retourne les résultats de la compilation.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Objet <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> qui indique les options du compilateur.</param>
      <param name="sources" vsli:raw="An array of strings containing the source code to compile.">Tableau de chaînes contenant le code source à compiler.</param>
      <returns vsli:raw="The results of compilation.">Résultats de la compilation.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;sources&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> a la valeur <see langword="null" />.

ou -
<paramref name="sources" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.GetResponseFileCmdArgs(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary vsli:raw="Gets the command arguments to use when invoking the compiler to generate a response file.">Obtient les arguments de commande à utiliser lors de l'appel au compilateur pour générer un fichier réponse.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Objet <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> qui indique les options du compilateur.</param>
      <param name="cmdArgs" vsli:raw="A command arguments string.">Chaîne d'arguments de commande.</param>
      <returns vsli:raw="The command arguments to use to generate a response file, or &lt;see langword=&quot;null&quot; /&gt; if there are no response file arguments.">Arguments de commande à utiliser pour générer un fichier réponse ou <see langword="null" /> s'il n'y a pas d'arguments de fichier réponse.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.JoinStringArray(System.String[],System.String)">
      <summary vsli:raw="Joins the specified string arrays.">Joint les tableaux de chaînes spécifiés.</summary>
      <param name="sa" vsli:raw="The array of strings to join.">Tableau de chaînes à joindre.</param>
      <param name="separator" vsli:raw="The separator to use.">Séparateur à utiliser.</param>
      <returns vsli:raw="The concatenated string.">Chaînes concaténées.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.ProcessCompilerOutputLine(System.CodeDom.Compiler.CompilerResults,System.String)">
      <summary vsli:raw="Processes the specified line from the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt;.">Traite la ligne spécifiée des <see cref="T:System.CodeDom.Compiler.CompilerResults" /> spécifiés.</summary>
      <param name="results" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; that indicates the results of compilation.">
        <see cref="T:System.CodeDom.Compiler.CompilerResults" /> indiquant les résultats de la compilation.</param>
      <param name="line" vsli:raw="The line to process.">Ligne à traiter.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)&quot; /&gt;.">Pour obtenir une description de ce membre, consultez <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)" />.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Objet <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> qui indique les options du compilateur.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; that indicates the source to compile.">Un <see cref="T:System.CodeDom.CodeCompileUnit" /> indiquant la source à compiler.</param>
      <returns vsli:raw="The results of compilation.">Résultats de la compilation.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])&quot; /&gt;.">Pour obtenir une description de ce membre, consultez <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])" />.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Objet <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> qui indique les options du compilateur.</param>
      <param name="ea" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; objects that indicates the source to compile.">Tableau d'objets <see cref="T:System.CodeDom.CodeCompileUnit" /> indiquant la source à compiler.</param>
      <returns vsli:raw="The results of compilation.">Résultats de la compilation.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)&quot; /&gt;.">Pour obtenir une description de ce membre, consultez <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)" />.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Objet <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> qui indique les options du compilateur.</param>
      <param name="fileName" vsli:raw="The file name to compile.">Nom du fichier à compiler.</param>
      <returns vsli:raw="The results of compilation.">Résultats de la compilation.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])&quot; /&gt;.">Pour obtenir une description de ce membre, consultez <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])" />.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Objet <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> qui indique les options du compilateur.</param>
      <param name="fileNames" vsli:raw="An array of strings that indicates the file names to compile.">Tableau de chaînes indiquant les noms des fichiers à compiler.</param>
      <returns vsli:raw="The results of compilation.">Résultats de la compilation.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)&quot; /&gt;.">Pour obtenir une description de ce membre, consultez <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)" />.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Objet <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> qui indique les options du compilateur.</param>
      <param name="source" vsli:raw="A string that indicates the source code to compile.">Chaîne qui indique le code source à compiler.</param>
      <returns vsli:raw="The results of compilation.">Résultats de la compilation.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])&quot; /&gt;.">Pour obtenir une description de ce membre, consultez <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])" />.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Objet <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> qui indique les options du compilateur.</param>
      <param name="sources" vsli:raw="An array of strings that indicates the source code to compile.">Tableau de chaînes qui indique le code source à compiler.</param>
      <returns vsli:raw="The results of compilation.">Résultats de la compilation.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeDomProvider">
      <summary vsli:raw="Provides a base class for &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementations. This class is abstract.">Fournit une classe de base pour les implémentations de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />. Cette classe est abstraite.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary vsli:raw="Compiles an assembly based on the &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; trees contained in the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; objects, using the specified compiler settings.">Compile un assembly basé sur les arborescences <see cref="N:System.CodeDom" /> contenues dans le tableau d'objets <see cref="T:System.CodeDom.CodeCompileUnit" /> spécifié, à l'aide des paramètres du compilateur spécifiés.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for the compilation.">Objet <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> indiquant les paramètres de la compilation.</param>
      <param name="compilationUnits" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; that indicates the code to compile.">Tableau de type <see cref="T:System.CodeDom.CodeCompileUnit" /> indiquant le code à compiler.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of the compilation.">Objet <see cref="T:System.CodeDom.Compiler.CompilerResults" /> indiquant les résultats de la compilation.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler&quot; /&gt; method is overridden in a derived class.">Ni cette méthode ni la méthode <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> ne sont substituées dans une classe dérivée.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="Compiles an assembly from the source code contained in the specified files, using the specified compiler settings.">Compile un assembly à partir du code source contenu dans les fichiers spécifiés, à l'aide des paramètres du compilateur spécifiés.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for the compilation.">Objet <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> indiquant les paramètres de la compilation.</param>
      <param name="fileNames" vsli:raw="An array of the names of the files to compile.">Tableau des noms des fichiers à compiler.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">Objet <see cref="T:System.CodeDom.Compiler.CompilerResults" /> indiquant les résultats de la compilation.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler&quot; /&gt; method is overridden in a derived class.">Ni cette méthode ni la méthode <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> ne sont substituées dans une classe dérivée.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="Compiles an assembly from the specified array of strings containing source code, using the specified compiler settings.">Compile un assembly à partir du tableau de chaînes spécifié contenant le code source, à l'aide des paramètres du compilateur spécifiés.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler settings for this compilation.">Objet <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> indiquant les paramètres du compilateur pour cette compilation.</param>
      <param name="sources" vsli:raw="An array of source code strings to compile.">Tableau de chaînes de code source à compiler.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">Objet <see cref="T:System.CodeDom.Compiler.CompilerResults" /> indiquant les résultats de la compilation.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler&quot; /&gt; method is overridden in a derived class.">Ni cette méthode ni la méthode <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> ne sont substituées dans une classe dérivée.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler">
      <summary vsli:raw="When overridden in a derived class, creates a new code compiler.">En cas de substitution dans une classe dérivée, crée un nouveau compilateur de code.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeCompiler&quot; /&gt; that can be used for compilation of &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; based source code representations.">
        <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> pouvant être utilisé pour la compilation de représentations du code source basées sur <see cref="N:System.CodeDom" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
      <summary vsli:raw="Creates an escaped identifier for the specified value.">Crée un identificateur avec séquence d'échappement pour la valeur spécifiée.</summary>
      <param name="value" vsli:raw="The string for which to create an escaped identifier.">Chaîne pour laquelle un identificateur avec séquence d'échappement doit être créé.</param>
      <returns vsli:raw="The escaped identifier for the value.">Identificateur avec séquence d'échappement pour la valeur.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Ni cette méthode ni la méthode <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> ne sont substituées dans une classe dérivée.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator">
      <summary vsli:raw="When overridden in a derived class, creates a new code generator.">En cas de substitution dans une classe dérivée, crée un nouveau générateur de code.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeGenerator&quot; /&gt; that can be used to generate &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; based source code representations.">
        <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> pouvant être utilisé pour générer des représentations du code source basées sur <see cref="N:System.CodeDom" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.IO.TextWriter)">
      <summary vsli:raw="When overridden in a derived class, creates a new code generator using the specified &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; for output.">En cas de substitution dans une classe dérivée, crée un nouveau générateur de code à l'aide du <see cref="T:System.IO.TextWriter" /> spécifié pour la sortie.</summary>
      <param name="output" vsli:raw="A &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to use to output.">
        <see cref="T:System.IO.TextWriter" /> à utiliser pour effectuer la sortie.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeGenerator&quot; /&gt; that can be used to generate &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; based source code representations.">
        <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> pouvant être utilisé pour générer des représentations du code source basées sur <see cref="N:System.CodeDom" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.String)">
      <summary vsli:raw="When overridden in a derived class, creates a new code generator using the specified file name for output.">En cas de substitution dans une classe dérivée, crée un nouveau générateur de code à l'aide du nom de fichier spécifié pour la sortie.</summary>
      <param name="fileName" vsli:raw="The file name to output to.">Nom du fichier vers lequel effectuer la sortie.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeGenerator&quot; /&gt; that can be used to generate &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; based source code representations.">
        <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> pouvant être utilisé pour générer des représentations du code source basées sur <see cref="N:System.CodeDom" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser">
      <summary vsli:raw="When overridden in a derived class, creates a new code parser.">En cas de substitution dans une classe dérivée, crée un nouvel analyseur de code.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeParser&quot; /&gt; that can be used to parse source code. The base implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.CodeDom.Compiler.ICodeParser" /> pouvant être utilisé pour analyser le code source. L'implémentation de base retourne toujours <see langword="null" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; instance for the specified language.">Crée une instance de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> pour le langage spécifié.</summary>
      <param name="language" vsli:raw="The language name.">Nom du langage.</param>
      <returns vsli:raw="A CodeDOM provider that is implemented for the specified language name.">Fournisseur CodeDOM  qui est implémentée pour le nom du langage spécifié.</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException" vsli:raw="The &lt;paramref name=&quot;language&quot; /&gt; does not have a configured provider on this computer.">Le <paramref name="language" /> n'a pas de fournisseur configuré sur cet ordinateur.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;language&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="language" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">L'appelant n'a pas l'autorisation requise.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; instance for the specified language and provider options.">Obtient une instance <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> pour le langage et les options de fournisseur spécifiés.</summary>
      <param name="language" vsli:raw="The language name.">Nom du langage.</param>
      <param name="providerOptions" vsli:raw="A collection of provider options from the configuration file.">Collection d'options de fournisseur issue du fichier de configuration.</param>
      <returns vsli:raw="A CodeDOM provider that is implemented for the specified language name and options.">Fournisseur CodeDOM implémenté pour le nom de langage et les options spécifiés.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
      <summary vsli:raw="Creates a valid identifier for the specified value.">Crée un identificateur valide pour la valeur spécifiée.</summary>
      <param name="value" vsli:raw="The string for which to generate a valid identifier.">Chaîne pour laquelle un identificateur valide doit être généré.</param>
      <returns vsli:raw="A valid identifier for the specified value.">Identificateur valide pour la valeur spécifiée.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Ni cette méthode ni la méthode <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> ne sont substituées dans une classe dérivée.</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeDomProvider.FileExtension">
      <summary vsli:raw="Gets the default file name extension to use for source code files in the current language.">Définit l'extension du nom de fichier par défaut à utiliser pour les fichiers de code source dans le langage actuel.</summary>
      <returns vsli:raw="A file name extension corresponding to the extension of the source files of the current language. The base implementation always returns &lt;see cref=&quot;F:System.String.Empty&quot; /&gt;.">Extension du nom de fichier correspondant à l'extension des fichiers sources du langage actuel. L'implémentation de base retourne toujours <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) compilation unit and sends it to the specified text writer, using the specified options.">Génère du code pour l'unité de compilation CodeDOM (Code Document Object Model) spécifiée et l'envoie au writer de texte spécifié, à l'aide des options définies.</summary>
      <param name="compileUnit" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; for which to generate code.">
        <see cref="T:System.CodeDom.CodeCompileUnit" /> pour lequel du code doit être généré.</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which the output code is sent.">
        <see cref="T:System.IO.TextWriter" /> auquel le code de sortie est envoyé.</param>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> qui indique les options à utiliser pour générer le code.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Ni cette méthode ni la méthode <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> ne sont substituées dans une classe dérivée.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) expression and sends it to the specified text writer, using the specified options.">Génère du code pour l'expression CodeDOM (Code Document Object Model) spécifiée et l'envoie au writer de texte spécifié, à l'aide des options définies.</summary>
      <param name="expression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object that indicates the expression for which to generate code.">Objet <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'expression pour laquelle du code doit être généré.</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which output code is sent.">
        <see cref="T:System.IO.TextWriter" /> auquel le code de sortie est envoyé.</param>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> qui indique les options à utiliser pour générer le code.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Ni cette méthode ni la méthode <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> ne sont substituées dans une classe dérivée.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) member declaration and sends it to the specified text writer, using the specified options.">Génère du code pour la déclaration de membre CodeDOM (Code Document Object Model) spécifiée et l'envoie au writer de texte spécifié, à l'aide des options définies.</summary>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; object that indicates the member for which to generate code.">Objet <see cref="T:System.CodeDom.CodeTypeMember" /> indiquant le membre pour lequel du code doit être généré.</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which output code is sent.">
        <see cref="T:System.IO.TextWriter" /> auquel le code de sortie est envoyé.</param>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> qui indique les options à utiliser pour générer le code.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="This method is not overridden in a derived class.">Cette méthode n'est pas substituée dans une classe dérivée.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) namespace and sends it to the specified text writer, using the specified options.">Génère du code pour l'espace de noms CodeDOM (Code Document Object Model) spécifié et l'envoie au writer de texte spécifié, à l'aide des options définies.</summary>
      <param name="codeNamespace" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; object that indicates the namespace for which to generate code.">Objet <see cref="T:System.CodeDom.CodeNamespace" /> indiquant l'espace de noms pour lequel du code doit être généré.</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which output code is sent.">
        <see cref="T:System.IO.TextWriter" /> auquel le code de sortie est envoyé.</param>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> qui indique les options à utiliser pour générer le code.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Ni cette méthode ni la méthode <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> ne sont substituées dans une classe dérivée.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) statement and sends it to the specified text writer, using the specified options.">Génère du code pour l'instruction CodeDOM (Code Document Object Model) spécifiée et l'envoie au writer de texte spécifié, à l'aide des options définies.</summary>
      <param name="statement" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the CodeDOM elements for which to generate code.">
        <see cref="T:System.CodeDom.CodeStatement" /> qui contient les éléments CodeDOM pour lesquels du code doit être généré.</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which output code is sent.">
        <see cref="T:System.IO.TextWriter" /> auquel le code de sortie est envoyé.</param>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> qui indique les options à utiliser pour générer le code.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Ni cette méthode ni la méthode <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> ne sont substituées dans une classe dérivée.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) type declaration and sends it to the specified text writer, using the specified options.">Génère du code pour la déclaration de type CodeDOM (Code Document Object Model) spécifiée et l'envoie au writer de texte spécifié, à l'aide des options définies.</summary>
      <param name="codeType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object that indicates the type for which to generate code.">Objet <see cref="T:System.CodeDom.CodeTypeDeclaration" /> indiquant le type pour lequel du code doit être généré.</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which output code is sent.">
        <see cref="T:System.IO.TextWriter" /> auquel le code de sortie est envoyé.</param>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> qui indique les options à utiliser pour générer le code.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Ni cette méthode ni la méthode <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> ne sont substituées dans une classe dérivée.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo">
      <summary vsli:raw="Returns the language provider and compiler configuration settings for this computer.">Retourne le fournisseur de langages et les paramètres de configuration de compilateur pour cet ordinateur.</summary>
      <returns vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerInfo&quot; /&gt; representing the settings of all configured &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementations.">Tableau de type <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> qui représente les paramètres de toutes les implémentations de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> configurées.</returns>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">L'appelant n'a pas l'autorisation requise.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
      <summary vsli:raw="Returns the language provider and compiler configuration settings for the specified language.">Retourne le fournisseur de langages et les paramètres de configuration de compilateur pour le langage spécifié.</summary>
      <param name="language" vsli:raw="A language name.">Nom de langage.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerInfo&quot; /&gt; object populated with settings of the configured &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementation.">Objet <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> rempli avec les paramètres de l'implémentation de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> configurée.</returns>
      <exception cref="T:System.Configuration.ConfigurationException" vsli:raw="The &lt;paramref name=&quot;language&quot; /&gt; does not have a configured provider on this computer.">Le <paramref name="language" /> n'a pas de fournisseur configuré sur cet ordinateur.</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException" vsli:raw="The &lt;paramref name=&quot;language&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="language" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">L'appelant n'a pas l'autorisation requise.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetConverter(System.Type)">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified data type.">Obtient <see cref="T:System.ComponentModel.TypeConverter" /> pour le type de données spécifié.</summary>
      <param name="type" vsli:raw="The type of object to retrieve a type converter for.">Type d'objet pour lequel un convertisseur de type doit être récupéré.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified type, or &lt;see langword=&quot;null&quot; /&gt; if a &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified type cannot be found.">
        <see cref="T:System.ComponentModel.TypeConverter" /> pour le type spécifié, ou <see langword="null" /> si aucun <see cref="T:System.ComponentModel.TypeConverter" /> n'est trouvé pour le type spécifié.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
      <summary vsli:raw="Returns a language name associated with the specified file name extension, as configured in the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; compiler configuration section.">Retourne un nom de langage associé à l'extension de nom de fichier spécifiée, comme configuré dans la section de configuration de compilateur <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />.</summary>
      <param name="extension" vsli:raw="A file name extension.">Extension de nom de fichier.</param>
      <returns vsli:raw="A language name associated with the file name extension, as configured in the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; compiler configuration settings.">Nom de langage associé à l'extension de nom de fichier, comme configuré dans les paramètres de configuration de compilateur <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />.</returns>
      <exception cref="T:System.Configuration.ConfigurationException" vsli:raw="The &lt;paramref name=&quot;extension&quot; /&gt; does not have a configured language provider on this computer.">Le <paramref name="extension" /> n'a pas de fournisseur de langages configuré sur cet ordinateur.</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException" vsli:raw="The &lt;paramref name=&quot;extension&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="extension" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">L'appelant n'a pas l'autorisation requise.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Gets the type indicated by the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt;.">Obtient le type indiqué par le <see cref="T:System.CodeDom.CodeTypeReference" /> spécifié.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type to return.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> qui indique le type à retourner.</param>
      <returns vsli:raw="A text representation of the specified type, formatted for the language in which code is generated by this code generator. In Visual Basic, for example, passing in a &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; for the &lt;see cref=&quot;T:System.Int32&quot; /&gt; type will return &quot;Integer&quot;.">Représentation textuelle du type spécifié, mise en forme pour le langage dans lequel du code est généré par ce générateur de code. En Visual Basic, par exemple, passer <see cref="T:System.CodeDom.CodeTypeReference" /> pour le type <see cref="T:System.Int32" /> retourne "Integer".</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Ni cette méthode ni la méthode <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> ne sont substituées dans une classe dérivée.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
      <summary vsli:raw="Tests whether a file name extension has an associated &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementation configured on the computer.">Vérifie si une implémentation de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> configurée sur l'ordinateur est associée à une extension de nom de fichier.</summary>
      <param name="extension" vsli:raw="A file name extension.">Extension de nom de fichier.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementation is configured for the specified file name extension; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si une implémentation de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> est configurée pour l'extension de nom de fichier spécifiée ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;extension&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="extension" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">L'appelant n'a pas l'autorisation requise.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
      <summary vsli:raw="Tests whether a language has a &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementation configured on the computer.">Vérifie si un langage dispose d'une implémentation de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> configurée sur l'ordinateur.</summary>
      <param name="language" vsli:raw="The language name.">Nom du langage.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementation is configured for the specified language; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si une implémentation de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> est configurée pour le langage spécifié ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;language&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="language" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">L'appelant n'a pas l'autorisation requise.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
      <summary vsli:raw="Returns a value that indicates whether the specified value is a valid identifier for the current language.">Retourne une valeur indiquant si la valeur spécifiée est un identificateur valide pour le langage actuel.</summary>
      <param name="value" vsli:raw="The value to verify as a valid identifier.">Valeur à vérifier comme identificateur valide.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;value&quot; /&gt; parameter is a valid identifier; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le paramètre <paramref name="value" /> est un identificateur valide ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Ni cette méthode ni la méthode <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> ne sont substituées dans une classe dérivée.</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeDomProvider.LanguageOptions">
      <summary vsli:raw="Gets a language features identifier.">Obtient un identificateur de fonctionnalités de langage.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.LanguageOptions&quot; /&gt; that indicates special features of the language.">
        <see cref="T:System.CodeDom.Compiler.LanguageOptions" /> qui indique les fonctionnalités spéciales d'un langage.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
      <summary vsli:raw="Compiles the code read from the specified text stream into a &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt;.">Compile le code lu à partir du flux de texte spécifié dans <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
      <param name="codeStream" vsli:raw="A &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; object that is used to read the code to be parsed.">Objet <see cref="T:System.IO.TextReader" /> utilisé pour lire le code à analyser.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; that contains a representation of the parsed code.">
        <see cref="T:System.CodeDom.CodeCompileUnit" /> contenant une représentation du code analysé.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Ni cette méthode ni la méthode <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> ne sont substituées dans une classe dérivée.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary vsli:raw="Returns a value indicating whether the specified code generation support is provided.">Retourne une valeur indiquant si la prise en charge de la génération de code spécifiée est fournie.</summary>
      <param name="generatorSupport" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.GeneratorSupport&quot; /&gt; object that indicates the type of code generation support to verify.">Objet <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> indiquant le type de prise en charge de la génération de code à vérifier.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified code generation support is provided; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la prise en charge de la génération de code spécifiée est fournie ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Ni cette méthode ni la méthode <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> ne sont substituées dans une classe dérivée.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeGenerator">
      <summary vsli:raw="Provides an example implementation of the &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeGenerator&quot; /&gt; interface. This class is abstract.">Fournit un exemple d'implémentation de l'interface <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />. Cette classe est abstraite.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGenerator&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.Compiler.CodeGenerator" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ContinueOnNewLine(System.String)">
      <summary vsli:raw="Generates a line-continuation character and outputs the specified string on a new line.">Génère un caractère de continuation de ligne et renvoie la chaîne spécifiée sur une nouvelle ligne.</summary>
      <param name="st" vsli:raw="The string to write on the new line.">Chaîne à écrire dans la nouvelle ligne.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.CreateEscapedIdentifier(System.String)">
      <summary vsli:raw="Creates an escaped identifier for the specified value.">Crée un identificateur avec séquence d'échappement pour la valeur spécifiée.</summary>
      <param name="value" vsli:raw="The string to create an escaped identifier for.">Chaîne pour laquelle un identificateur avec séquence d'échappement doit être créé.</param>
      <returns vsli:raw="The escaped identifier for the value.">Identificateur avec séquence d'échappement pour la valeur.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.CreateValidIdentifier(System.String)">
      <summary vsli:raw="Creates a valid identifier for the specified value.">Crée un identificateur valide pour la valeur spécifiée.</summary>
      <param name="value" vsli:raw="A string to create a valid identifier for.">Chaîne pour laquelle un identificateur valide doit être créé.</param>
      <returns vsli:raw="A valid identifier for the value.">Identificateur valide pour la valeur.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentClass">
      <summary vsli:raw="Gets the code type declaration for the current class.">Obtient la déclaration du type de code pour la classe en cours.</summary>
      <returns vsli:raw="The code type declaration for the current class.">Déclaration du type de code pour la classe en cours.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentMember">
      <summary vsli:raw="Gets the current member of the class.">Obtient le membre actuel de la classe.</summary>
      <returns vsli:raw="The current member of the class.">Membre actuel de la classe.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentMemberName">
      <summary vsli:raw="Gets the current member name.">Obtient le nom du membre actuel.</summary>
      <returns vsli:raw="The name of the current member.">Nom du membre actuel.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentTypeName">
      <summary vsli:raw="Gets the current class name.">Obtient le nom de la classe actuelle.</summary>
      <returns vsli:raw="The current class name.">Nom de la classe actuelle.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArgumentReferenceExpression(System.CodeDom.CodeArgumentReferenceExpression)">
      <summary vsli:raw="Generates code for the specified argument reference expression.">Génère du code pour l'expression de référence de l'argument spécifiée.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeArgumentReferenceExpression&quot; /&gt; that indicates the expression to generate code for.">
        <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" /> indiquant l'expression pour laquelle du code doit être généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArrayCreateExpression(System.CodeDom.CodeArrayCreateExpression)">
      <summary vsli:raw="Generates code for the specified array creation expression.">Génère du code pour l'expression de création du tableau spécifiée.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; that indicates the expression to generate code for.">
        <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> indiquant l'expression pour laquelle du code doit être généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArrayIndexerExpression(System.CodeDom.CodeArrayIndexerExpression)">
      <summary vsli:raw="Generates code for the specified array indexer expression.">Génère du code pour l'expression de l'indexeur du tableau spécifiée.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeArrayIndexerExpression&quot; /&gt; that indicates the expression to generate code for.">
        <see cref="T:System.CodeDom.CodeArrayIndexerExpression" /> indiquant l'expression pour laquelle du code doit être généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAssignStatement(System.CodeDom.CodeAssignStatement)">
      <summary vsli:raw="Generates code for the specified assignment statement.">Génère du code pour l'instruction d'assignation spécifiée.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAssignStatement&quot; /&gt; that indicates the statement to generate code for.">
        <see cref="T:System.CodeDom.CodeAssignStatement" /> qui indique l'instruction pour laquelle du code doit être généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttachEventStatement(System.CodeDom.CodeAttachEventStatement)">
      <summary vsli:raw="Generates code for the specified attach event statement.">Génère du code pour l'instruction Attach event spécifiée.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttachEventStatement&quot; /&gt; that indicates the statement to generate code for.">
        <see cref="T:System.CodeDom.CodeAttachEventStatement" /> qui indique l'instruction pour laquelle du code doit être généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttributeDeclarationsEnd(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary vsli:raw="Generates code for the specified attribute block end.">Génère du code pour la fin du bloc d'attributs spécifiée.</summary>
      <param name="attributes" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; that indicates the end of the attribute block to generate code for.">
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> indiquant la fin du bloc d'attributs pour laquelle du code doit être généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttributeDeclarationsStart(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary vsli:raw="Generates code for the specified attribute block start.">Génère du code pour le début du bloc d'attributs spécifié.</summary>
      <param name="attributes" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; that indicates the start of the attribute block to generate code for.">
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> indiquant le début du bloc d'attributs pour lequel du code doit être généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateBaseReferenceExpression(System.CodeDom.CodeBaseReferenceExpression)">
      <summary vsli:raw="Generates code for the specified base reference expression.">Génère du code pour l'expression de référence de base spécifiée.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeBaseReferenceExpression&quot; /&gt; that indicates the expression to generate code for.">
        <see cref="T:System.CodeDom.CodeBaseReferenceExpression" /> indiquant l'expression pour laquelle du code doit être généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateBinaryOperatorExpression(System.CodeDom.CodeBinaryOperatorExpression)">
      <summary vsli:raw="Generates code for the specified binary operator expression.">Génère du code pour l'expression de l'opérateur binaire spécifiée.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeBinaryOperatorExpression&quot; /&gt; that indicates the expression to generate code for.">
        <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" /> indiquant l'expression pour laquelle du code doit être généré.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;e&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="e" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCastExpression(System.CodeDom.CodeCastExpression)">
      <summary vsli:raw="Generates code for the specified cast expression.">Génère du code pour l'expression de cast spécifiée.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCastExpression&quot; /&gt; that indicates the expression to generate code for.">
        <see cref="T:System.CodeDom.CodeCastExpression" /> indiquant l'expression pour laquelle du code doit être généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified class member using the specified text writer and code generator options.">Génère du code pour le membre de classe spécifié en utilisant les options spécifiées du TextWriter et du générateur de code.</summary>
      <param name="member" vsli:raw="The class member to generate code for.">Membre de classe pour lequel générer le code.</param>
      <param name="writer" vsli:raw="The text writer to output code to.">Le TextWriter vers lequel le code est exporté.</param>
      <param name="options" vsli:raw="The options to use when generating the code.">Options à utiliser lors de la génération du code.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.CodeDom.Compiler.CodeGenerator.Output&quot; /&gt; property is not &lt;see langword=&quot;null&quot; /&gt;.">La propriété <see cref="P:System.CodeDom.Compiler.CodeGenerator.Output" /> n’est pas <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateComment(System.CodeDom.CodeComment)">
      <summary vsli:raw="Generates code for the specified comment.">Génère du code pour le commentaire spécifié.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeComment&quot; /&gt; to generate code for.">
        <see cref="T:System.CodeDom.CodeComment" /> pour lequel du code doit être généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCommentStatement(System.CodeDom.CodeCommentStatement)">
      <summary vsli:raw="Generates code for the specified comment statement.">Génère du code pour l'instruction Comment spécifiée.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">Instruction pour laquelle générer le code.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;P:System.CodeDom.CodeCommentStatement.Comment&quot; /&gt; property of &lt;paramref name=&quot;e&quot; /&gt; is not set.">La propriété <see cref="P:System.CodeDom.CodeCommentStatement.Comment" /> de <paramref name="e" /> n’est pas définie.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCommentStatements(System.CodeDom.CodeCommentStatementCollection)">
      <summary vsli:raw="Generates code for the specified comment statements.">Génère du code pour les instructions Comment spécifiées.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">L’expression pour laquelle le code est généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnit(System.CodeDom.CodeCompileUnit)">
      <summary vsli:raw="Generates code for the specified compile unit.">Génère du code pour l'unité de compilation spécifiée.</summary>
      <param name="e" vsli:raw="The compile unit to generate code for.">Unité de compilation pour laquelle générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnitEnd(System.CodeDom.CodeCompileUnit)">
      <summary vsli:raw="Generates code for the end of a compile unit.">Génère du code pour la fin de l'unité de compilation.</summary>
      <param name="e" vsli:raw="The compile unit to generate code for.">Unité de compilation pour laquelle générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnitStart(System.CodeDom.CodeCompileUnit)">
      <summary vsli:raw="Generates code for the start of a compile unit.">Génère du code pour le début de l'unité de compilation.</summary>
      <param name="e" vsli:raw="The compile unit to generate code for.">Unité de compilation pour laquelle générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateConditionStatement(System.CodeDom.CodeConditionStatement)">
      <summary vsli:raw="Generates code for the specified conditional statement.">Génère du code pour l'instruction conditionnelle spécifiée.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">Instruction pour laquelle générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateConstructor(System.CodeDom.CodeConstructor,System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Generates code for the specified constructor.">Génère du code pour le constructeur spécifié.</summary>
      <param name="e" vsli:raw="The constructor to generate code for.">Constructeur pour lequel générer le code.</param>
      <param name="c" vsli:raw="The type of the object that this constructor constructs.">Type de l'objet construit par ce constructeur.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDecimalValue(System.Decimal)">
      <summary vsli:raw="Generates code for the specified decimal value.">Génère du code pour la valeur décimale spécifiée.</summary>
      <param name="d" vsli:raw="The decimal value to generate code for.">Valeur décimale pour laquelle du code doit être généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDefaultValueExpression(System.CodeDom.CodeDefaultValueExpression)">
      <summary vsli:raw="Generates code for the specified reference to a default value.">Génère du code pour la référence spécifiée à une valeur par défaut.</summary>
      <param name="e" vsli:raw="The reference to generate code for.">Référence pour laquelle générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDelegateCreateExpression(System.CodeDom.CodeDelegateCreateExpression)">
      <summary vsli:raw="Generates code for the specified delegate creation expression.">Génère du code pour l'expression de création du délégué spécifiée.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">L’expression pour laquelle le code est généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDelegateInvokeExpression(System.CodeDom.CodeDelegateInvokeExpression)">
      <summary vsli:raw="Generates code for the specified delegate invoke expression.">Génère du code pour l'expression d'appel de délégué spécifiée.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">L’expression pour laquelle le code est généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDirectionExpression(System.CodeDom.CodeDirectionExpression)">
      <summary vsli:raw="Generates code for the specified direction expression.">Génère du code pour l'expression de direction spécifiée.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">L’expression pour laquelle le code est généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDirectives(System.CodeDom.CodeDirectiveCollection)">
      <summary vsli:raw="Generates code for the specified code directives.">Génère du code pour les directives de code spécifiées.</summary>
      <param name="directives" vsli:raw="The code directives to generate code for.">Directives de code pour lesquelles générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDoubleValue(System.Double)">
      <summary vsli:raw="Generates code for a double-precision floating point number.">Génère du code pour le nombre à virgule flottante double précision.</summary>
      <param name="d" vsli:raw="The value to generate code for.">Valeur pour laquelle générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEntryPointMethod(System.CodeDom.CodeEntryPointMethod,System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Generates code for the specified entry point method.">Génère du code pour la méthode de point d'entrée spécifiée.</summary>
      <param name="e" vsli:raw="The entry point for the code.">Point d'entrée pour le code.</param>
      <param name="c" vsli:raw="The code that declares the type.">Code qui déclare le type.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEvent(System.CodeDom.CodeMemberEvent,System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Generates code for the specified event.">Génère du code pour l'événement spécifié.</summary>
      <param name="e" vsli:raw="The member event to generate code for.">Événement membre pour lequel générer le code.</param>
      <param name="c" vsli:raw="The type of the object that this event occurs on.">Type de l'objet sur lequel cet événement se produit.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEventReferenceExpression(System.CodeDom.CodeEventReferenceExpression)">
      <summary vsli:raw="Generates code for the specified event reference expression.">Génère du code pour l'expression de référence de l'événement spécifiée.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">L’expression pour laquelle le code est généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateExpression(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Generates code for the specified code expression.">Génère du code pour l'expression de code spécifiée.</summary>
      <param name="e" vsli:raw="The code expression to generate code for.">Expression de code pour laquelle générer le code.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;e&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="e" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;e&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt;.">
        <paramref name="e" /> n’est pas un <see cref="T:System.CodeDom.CodeStatement" /> valide.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateExpressionStatement(System.CodeDom.CodeExpressionStatement)">
      <summary vsli:raw="Generates code for the specified expression statement.">Génère du code pour l'instruction d'expression spécifiée.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">Instruction pour laquelle générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateField(System.CodeDom.CodeMemberField)">
      <summary vsli:raw="Generates code for the specified member field.">Génère du code pour le champ de membre spécifié.</summary>
      <param name="e" vsli:raw="The field to generate code for.">Champ pour lequel générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateFieldReferenceExpression(System.CodeDom.CodeFieldReferenceExpression)">
      <summary vsli:raw="Generates code for the specified field reference expression.">Génère du code pour l'expression de référence du champ spécifiée.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">L’expression pour laquelle le code est généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateGotoStatement(System.CodeDom.CodeGotoStatement)">
      <summary vsli:raw="Generates code for the specified &lt;see langword=&quot;goto&quot; /&gt; statement.">Génère du code pour l'instruction <see langword="goto" /> spécifiée.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">L’expression pour laquelle le code est généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateIndexerExpression(System.CodeDom.CodeIndexerExpression)">
      <summary vsli:raw="Generates code for the specified indexer expression.">Génère du code pour l'expression de l'indexeur spécifiée.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">L’expression pour laquelle le code est généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateIterationStatement(System.CodeDom.CodeIterationStatement)">
      <summary vsli:raw="Generates code for the specified iteration statement.">Génère du code pour l'instruction d'itération spécifiée.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">Instruction pour laquelle générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLabeledStatement(System.CodeDom.CodeLabeledStatement)">
      <summary vsli:raw="Generates code for the specified labeled statement.">Génère du code pour l'instruction étiquetée spécifiée.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">Instruction pour laquelle générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLinePragmaEnd(System.CodeDom.CodeLinePragma)">
      <summary vsli:raw="Generates code for the specified line pragma end.">Génère du code pour la fin du pragma de ligne spécifiée.</summary>
      <param name="e" vsli:raw="The end of the line pragma to generate code for.">Fin du pragma de ligne pour lequel générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLinePragmaStart(System.CodeDom.CodeLinePragma)">
      <summary vsli:raw="Generates code for the specified line pragma start.">Génère du code pour le début du pragma de ligne spécifié.</summary>
      <param name="e" vsli:raw="The start of the line pragma to generate code for.">Début du pragma de ligne pour lequel générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethod(System.CodeDom.CodeMemberMethod,System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Generates code for the specified method.">Génère du code pour la méthode spécifiée.</summary>
      <param name="e" vsli:raw="The member method to generate code for.">Méthode membre pour laquelle générer le code.</param>
      <param name="c" vsli:raw="The type of the object that this method occurs on.">Type de l'objet sur lequel cette méthode se produit.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodInvokeExpression(System.CodeDom.CodeMethodInvokeExpression)">
      <summary vsli:raw="Generates code for the specified method invoke expression.">Génère du code pour l'expression d'appel de méthode spécifiée.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">L’expression pour laquelle le code est généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodReferenceExpression(System.CodeDom.CodeMethodReferenceExpression)">
      <summary vsli:raw="Generates code for the specified method reference expression.">Génère du code pour l'expression de référence de méthode spécifiée.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">L’expression pour laquelle le code est généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodReturnStatement(System.CodeDom.CodeMethodReturnStatement)">
      <summary vsli:raw="Generates code for the specified method return statement.">Génère du code pour l'instruction return de méthode spécifiée.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">Instruction pour laquelle générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespace(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Generates code for the specified namespace.">Génère du code pour l'espace de noms spécifié.</summary>
      <param name="e" vsli:raw="The namespace to generate code for.">Espace de noms pour lequel le code doit être généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceEnd(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Generates code for the end of a namespace.">Génère du code pour la fin d'un espace de noms.</summary>
      <param name="e" vsli:raw="The namespace to generate code for.">Espace de noms pour lequel le code doit être généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceImport(System.CodeDom.CodeNamespaceImport)">
      <summary vsli:raw="Generates code for the specified namespace import.">Génère du code pour l'importation de l'espace de noms spécifiée.</summary>
      <param name="e" vsli:raw="The namespace import to generate code for.">Importation d'espace de noms pour laquelle générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceImports(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Generates code for the specified namespace import.">Génère du code pour l'importation de l'espace de noms spécifiée.</summary>
      <param name="e" vsli:raw="The namespace import to generate code for.">Importation d'espace de noms pour laquelle générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaces(System.CodeDom.CodeCompileUnit)">
      <summary vsli:raw="Generates code for the namespaces in the specified compile unit.">Génère du code pour les espaces de noms dans l'unité de compilation spécifiée.</summary>
      <param name="e" vsli:raw="The compile unit to generate namespaces for.">Unité de compilation pour laquelle générer les espaces de noms.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceStart(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Generates code for the start of a namespace.">Génère du code pour le début d'un espace de noms.</summary>
      <param name="e" vsli:raw="The namespace to generate code for.">Espace de noms pour lequel le code doit être généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateObjectCreateExpression(System.CodeDom.CodeObjectCreateExpression)">
      <summary vsli:raw="Generates code for the specified object creation expression.">Génère du code pour l'expression de création de l'objet spécifiée.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">L’expression pour laquelle le code est généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateParameterDeclarationExpression(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary vsli:raw="Generates code for the specified parameter declaration expression.">Génère du code pour l'expression de déclaration de paramètre spécifiée.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">L’expression pour laquelle le code est généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePrimitiveExpression(System.CodeDom.CodePrimitiveExpression)">
      <summary vsli:raw="Generates code for the specified primitive expression.">Génère du code pour l'expression primitive spécifiée.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">L’expression pour laquelle le code est généré.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;e&quot; /&gt; uses an invalid data type. Only the following data types are valid:  &#xA;  &#xA;- string  &#xA;  &#xA;- char  &#xA;  &#xA;- byte  &#xA;  &#xA;- Int16  &#xA;  &#xA;- Int32  &#xA;  &#xA;- Int64  &#xA;&#xA;- Half&#xA;  &#xA;- Single  &#xA;  &#xA;- Double  &#xA;  &#xA;- Decimal">
        <paramref name="e" /> utilise un type de données non valide. Seuls les types de données suivants sont valides :

string
char
byte
Int16
Int32
Int64
Single
Double
Decimal</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateProperty(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Generates code for the specified property.">Génère du code pour la propriété spécifiée.</summary>
      <param name="e" vsli:raw="The property to generate code for.">Propriété pour laquelle générer le code.</param>
      <param name="c" vsli:raw="The type of the object that this property occurs on.">Type de l'objet sur lequel cette propriété se produit.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePropertyReferenceExpression(System.CodeDom.CodePropertyReferenceExpression)">
      <summary vsli:raw="Generates code for the specified property reference expression.">Génère du code pour l'expression de référence de la propriété spécifiée.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">L’expression pour laquelle le code est généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePropertySetValueReferenceExpression(System.CodeDom.CodePropertySetValueReferenceExpression)">
      <summary vsli:raw="Generates code for the specified property set value reference expression.">Génère du code pour l'expression de référence de la valeur affectée à la propriété spécifiée.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">L’expression pour laquelle le code est généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateRemoveEventStatement(System.CodeDom.CodeRemoveEventStatement)">
      <summary vsli:raw="Generates code for the specified remove event statement.">Génère du code pour l'instruction Remove event spécifiée.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">Instruction pour laquelle générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSingleFloatValue(System.Single)">
      <summary vsli:raw="Generates code for a single-precision floating point number.">Génère du code pour le nombre à virgule flottante simple précision.</summary>
      <param name="s" vsli:raw="The value to generate code for.">Valeur pour laquelle générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetCompileUnit(System.CodeDom.CodeSnippetCompileUnit)">
      <summary vsli:raw="Outputs the code of the specified literal code fragment compile unit.">Renvoie le code de l'unité de compilation du fragment de code littéral spécifié.</summary>
      <param name="e" vsli:raw="The literal code fragment compile unit to generate code for.">Unité de compilation de fragment de code littéral pour laquelle générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetExpression(System.CodeDom.CodeSnippetExpression)">
      <summary vsli:raw="Outputs the code of the specified literal code fragment expression.">Renvoie le code de l'expression du fragment de code littéral spécifié.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">L’expression pour laquelle le code est généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetMember(System.CodeDom.CodeSnippetTypeMember)">
      <summary vsli:raw="Outputs the code of the specified literal code fragment class member.">Renvoie le code du membre de classe du fragment de code littéral spécifié.</summary>
      <param name="e" vsli:raw="The member to generate code for.">Membre pour lequel générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetStatement(System.CodeDom.CodeSnippetStatement)">
      <summary vsli:raw="Outputs the code of the specified literal code fragment statement.">Renvoie le code de l'instruction du fragment de code littéral spécifié.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">Instruction pour laquelle générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateStatement(System.CodeDom.CodeStatement)">
      <summary vsli:raw="Generates code for the specified statement.">Génère du code pour l'instruction spécifiée.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">Instruction pour laquelle générer le code.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;e&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt;.">
        <paramref name="e" /> n’est pas un <see cref="T:System.CodeDom.CodeStatement" /> valide.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateStatements(System.CodeDom.CodeStatementCollection)">
      <summary vsli:raw="Generates code for the specified statement collection.">Génère du code pour la collection d'instructions spécifiée.</summary>
      <param name="stms">Instructions pour lesquelles générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateThisReferenceExpression(System.CodeDom.CodeThisReferenceExpression)">
      <summary vsli:raw="Generates code for the specified this reference expression.">Génère du code pour l'expression de référence This spécifiée.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">L’expression pour laquelle le code est généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateThrowExceptionStatement(System.CodeDom.CodeThrowExceptionStatement)">
      <summary vsli:raw="Generates code for the specified throw exception statement.">Génère du code pour l'instruction de levée d'exception spécifiée.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">Instruction pour laquelle générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTryCatchFinallyStatement(System.CodeDom.CodeTryCatchFinallyStatement)">
      <summary vsli:raw="Generates code for the specified &lt;c&gt;try-catch-finally&lt;/c&gt; statement.">Génère du code pour l'instruction <see langword="try...catch...finally" /> spécifiée.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">Instruction pour laquelle générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeConstructor(System.CodeDom.CodeTypeConstructor)">
      <summary vsli:raw="Generates code for the specified class constructor.">Génère du code pour le constructeur de classe spécifié.</summary>
      <param name="e" vsli:raw="The class constructor to generate code for.">Constructeur de classe pour lequel générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeEnd(System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Generates code for the specified end of the class.">Génère du code pour la fin spécifiée de la classe.</summary>
      <param name="e" vsli:raw="The end of the class to generate code for.">Fin de la classe pour laquelle générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeOfExpression(System.CodeDom.CodeTypeOfExpression)">
      <summary vsli:raw="Generates code for the specified type of expression.">Génère du code pour le type spécifié de l'expression.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">L’expression pour laquelle le code est généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeReferenceExpression(System.CodeDom.CodeTypeReferenceExpression)">
      <summary vsli:raw="Generates code for the specified type reference expression.">Génère du code pour l'expression de référence du type spécifiée.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">L’expression pour laquelle le code est généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypes(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Generates code for the specified namespace and the classes it contains.">Génère du code pour l'espace de noms spécifié et les classes qu'il contient.</summary>
      <param name="e" vsli:raw="The namespace to generate classes for.">Espace de noms pour lequel générer des classes.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeStart(System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Generates code for the specified start of the class.">Génère du code pour le début spécifié de la classe.</summary>
      <param name="e" vsli:raw="The start of the class to generate code for.">Début de la classe pour lequel générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateVariableDeclarationStatement(System.CodeDom.CodeVariableDeclarationStatement)">
      <summary vsli:raw="Generates code for the specified variable declaration statement.">Génère du code pour l'instruction de déclaration de variable spécifiée.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">Instruction pour laquelle générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateVariableReferenceExpression(System.CodeDom.CodeVariableReferenceExpression)">
      <summary vsli:raw="Generates code for the specified variable reference expression.">Génère du code pour l'expression de référence de la variable spécifiée.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">L’expression pour laquelle le code est généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Gets the name of the specified data type.">Obtient le nom du type de données spécifié.</summary>
      <param name="value" vsli:raw="The type whose name will be returned.">Type dont le nom sera retourné.</param>
      <returns vsli:raw="The name of the data type reference.">Nom de la référence du type de données.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Indent">
      <summary vsli:raw="Gets or sets the amount of spaces to indent each indentation level.">Obtient ou définit le nombre d'espaces de mise en retrait de chaque niveau.</summary>
      <returns vsli:raw="The number of spaces to indent for each indentation level.">Nombre d'espaces de mise en retrait de chaque niveau.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentClass">
      <summary vsli:raw="Gets a value indicating whether the current object being generated is a class.">Obtient une valeur indiquant si l'objet actuellement généré est une classe.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current object is a class; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'objet en cours est une classe ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentDelegate">
      <summary vsli:raw="Gets a value indicating whether the current object being generated is a delegate.">Obtient une valeur indiquant si l'objet actuellement généré est un délégué.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current object is a delegate; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'objet en cours est un délégué ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentEnum">
      <summary vsli:raw="Gets a value indicating whether the current object being generated is an enumeration.">Obtient une valeur indiquant si l'objet actuellement généré est une énumération.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current object is an enumeration; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'objet en cours est une énumération ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentInterface">
      <summary vsli:raw="Gets a value indicating whether the current object being generated is an interface.">Obtient une valeur indiquant si l'objet actuellement généré est une interface.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current object is an interface; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'objet en cours est une interface ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentStruct">
      <summary vsli:raw="Gets a value indicating whether the current object being generated is a value type or struct.">Obtient une valeur indiquant si l'objet actuellement généré est un type valeur ou un struct.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current object is a value type or struct; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'objet en cours est un type valeur ou un struct ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.IsValidIdentifier(System.String)">
      <summary vsli:raw="Gets a value indicating whether the specified value is a valid identifier.">Obtient une valeur indiquant si la valeur spécifiée est un identificateur valide.</summary>
      <param name="value" vsli:raw="The value to test for conflicts with valid identifiers.">Valeur dont les conflits avec des identificateurs valides doivent être testés.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value is a valid identifier; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la valeur est un identificateur valide ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.IsValidLanguageIndependentIdentifier(System.String)">
      <summary vsli:raw="Gets a value indicating whether the specified string is a valid identifier.">Obtient une valeur indiquant si la chaîne spécifiée est un identificateur valide.</summary>
      <param name="value" vsli:raw="The string to test for validity.">Chaîne dont la validité doit être testée.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified string is a valid identifier; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la chaîne spécifiée est un identificateur valide ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.NullToken">
      <summary vsli:raw="Gets the token that represents &lt;see langword=&quot;null&quot; /&gt;.">Obtient le jeton qui représente <see langword="null" />.</summary>
      <returns vsli:raw="The token that represents &lt;see langword=&quot;null&quot; /&gt;.">Jeton qui représente <see langword="null" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Options">
      <summary vsli:raw="Gets the options to be used by the code generator.">Obtient les options que le générateur de code doit utiliser.</summary>
      <returns vsli:raw="An object that indicates the options for the code generator to use.">Objet indiquant les options que le générateur de code doit utiliser.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Output">
      <summary vsli:raw="Gets the text writer to use for output.">Obtient le TextWriter à utiliser pour la sortie.</summary>
      <returns vsli:raw="The text writer to use for output.">TextWriter à utiliser pour la sortie.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputAttributeArgument(System.CodeDom.CodeAttributeArgument)">
      <summary vsli:raw="Outputs an argument in an attribute block.">Renvoie un argument dans un bloc d'attributs.</summary>
      <param name="arg" vsli:raw="The attribute argument to generate code for.">Argument d'attribut pour lequel générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputAttributeDeclarations(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary vsli:raw="Generates code for the specified attribute declaration collection.">Génère du code pour la collection de déclarations attribute spécifiée.</summary>
      <param name="attributes" vsli:raw="The attributes to generate code for.">Attributs pour lesquels générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputDirection(System.CodeDom.FieldDirection)">
      <summary vsli:raw="Generates code for the specified &lt;see cref=&quot;T:System.CodeDom.FieldDirection&quot; /&gt;.">Génère du code pour le <see cref="T:System.CodeDom.FieldDirection" /> spécifié.</summary>
      <param name="dir" vsli:raw="One of the enumeration values that indicates the attribute of the field.">Une des valeurs d'énumération indiquant l'attribut du champ.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputExpressionList(System.CodeDom.CodeExpressionCollection)">
      <summary vsli:raw="Generates code for the specified expression list.">Génère du code pour la liste d'expressions spécifiée.</summary>
      <param name="expressions" vsli:raw="The expressions to generate code for.">Expressions pour lesquelles générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputExpressionList(System.CodeDom.CodeExpressionCollection,System.Boolean)">
      <summary vsli:raw="Generates code for the specified expression list.">Génère du code pour la liste d'expressions spécifiée.</summary>
      <param name="expressions" vsli:raw="The expressions to generate code for.">Expressions pour lesquelles générer le code.</param>
      <param name="newlineBetweenItems" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to insert a new line after each item; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour insérer une nouvelle ligne après chaque élément ; sinon, <see langword="false" />.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputFieldScopeModifier(System.CodeDom.MemberAttributes)">
      <summary vsli:raw="Outputs a field scope modifier that corresponds to the specified attributes.">Renvoie un modificateur de portée du champ qui correspond aux attributs spécifiés.</summary>
      <param name="attributes" vsli:raw="One of the enumeration values that specifies the attributes.">Une des valeurs d'énumération qui spécifie les attributs.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputIdentifier(System.String)">
      <summary vsli:raw="Outputs the specified identifier.">Renvoie l'identificateur spécifié.</summary>
      <param name="ident" vsli:raw="The identifier to output.">Identificateur à renvoyer.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputMemberAccessModifier(System.CodeDom.MemberAttributes)">
      <summary vsli:raw="Generates code for the specified member access modifier.">Génère du code pour le modificateur d'accès au membre spécifié.</summary>
      <param name="attributes" vsli:raw="One of the enumeration values that indicates the member access modifier to generate code for.">Une des valeurs d'énumération qui indique le modificateur d'accès au membre pour lequel générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputMemberScopeModifier(System.CodeDom.MemberAttributes)">
      <summary vsli:raw="Generates code for the specified member scope modifier.">Génère du code pour le modificateur de portée de membres spécifié.</summary>
      <param name="attributes" vsli:raw="One of the enumeration values that indicates the member scope modifier to generate code for.">Une des valeurs d'énumération qui indique le modificateur de portée du membre pour lequel générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputOperator(System.CodeDom.CodeBinaryOperatorType)">
      <summary vsli:raw="Generates code for the specified operator.">Génère du code pour l'opérateur spécifié.</summary>
      <param name="op" vsli:raw="The operator to generate code for.">Opérateur pour lequel générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputParameters(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary vsli:raw="Generates code for the specified parameters.">Génère du code pour les paramètres spécifiés.</summary>
      <param name="parameters" vsli:raw="The parameter declaration expressions to generate code for.">Expressions de déclaration de paramètre pour lesquelles générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputType(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Generates code for the specified type.">Génère du code pour le type spécifié.</summary>
      <param name="typeRef" vsli:raw="The type to generate code for.">Type pour lequel le code doit être généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputTypeAttributes(System.Reflection.TypeAttributes,System.Boolean,System.Boolean)">
      <summary vsli:raw="Generates code for the specified type attributes.">Génère du code pour les attributs de type spécifiés.</summary>
      <param name="attributes" vsli:raw="One of the enumeration values that indicates the type attributes to generate code for.">Une des valeurs d'énumération qui indique les attributs de type pour lesquels générer le code.</param>
      <param name="isStruct" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is a struct; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le type est un struct ; sinon, <see langword="false" />.</param>
      <param name="isEnum" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is an enum; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le type est un enum ; sinon, <see langword="false" />.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputTypeNamePair(System.CodeDom.CodeTypeReference,System.String)">
      <summary vsli:raw="Generates code for the specified object type and name pair.">Génère du code pour la paire nom/type de l'objet spécifiée.</summary>
      <param name="typeRef" vsli:raw="The type.">Type.</param>
      <param name="name" vsli:raw="The name for the object.">Nom de l'objet.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.QuoteSnippetString(System.String)">
      <summary vsli:raw="Converts the specified string by formatting it with escape codes.">Convertit la chaîne spécifiée en la mettant en forme avec les codes d'échappement.</summary>
      <param name="value" vsli:raw="The string to convert.">Chaîne à convertir.</param>
      <returns vsli:raw="The converted string.">Chaîne convertie.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary vsli:raw="Gets a value indicating whether the specified code generation support is provided.">Obtient une valeur indiquant si la prise en charge de la génération de code spécifiée est fournie.</summary>
      <param name="support" vsli:raw="The type of code generation support to test for.">Type de prise en charge de génération du code à tester.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified code generation support is provided; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la prise en charge de la génération de code spécifiée est fournie ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#CreateEscapedIdentifier(System.String)">
      <summary vsli:raw="Creates an escaped identifier for the specified value.">Crée un identificateur avec séquence d'échappement pour la valeur spécifiée.</summary>
      <param name="value" vsli:raw="The string to create an escaped identifier for.">Chaîne pour laquelle un identificateur avec séquence d'échappement doit être créé.</param>
      <returns vsli:raw="The escaped identifier for the value.">Identificateur avec séquence d'échappement pour la valeur.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#CreateValidIdentifier(System.String)">
      <summary vsli:raw="Creates a valid identifier for the specified value.">Crée un identificateur valide pour la valeur spécifiée.</summary>
      <param name="value" vsli:raw="The string to generate a valid identifier for.">Chaîne pour laquelle un identificateur valide doit être généré.</param>
      <returns vsli:raw="A valid identifier for the specified value.">Identificateur valide pour la valeur spécifiée.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) compilation unit and outputs it to the specified text writer using the specified options.">Génère du code pour l’unité de compilation CodeDOM (Code Document Object Model) spécifiée et l’exporte vers le TextWriter spécifié à l’aide des options spécifiées.</summary>
      <param name="e" vsli:raw="The CodeDOM compilation unit to generate code for.">Unité de compilation CodeDOM pour laquelle générer le code.</param>
      <param name="w" vsli:raw="The text writer to output code to.">Le TextWriter vers lequel le code est exporté.</param>
      <param name="o" vsli:raw="The options to use for generating code.">Les options à utiliser pour générer le code.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;w&quot; /&gt; is not available. &lt;paramref name=&quot;w&quot; /&gt; may have been closed before the method call was made.">
        <paramref name="w" /> n’est pas disponible. <paramref name="w" /> peut avoir été fermé avant que l’appel de la méthode n’ait été effectué.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) expression and outputs it to the specified text writer.">Génère du code pour l’expression CodeDOM (Code Document Object Model) spécifié et l’exporte vers le TextWriter spécifié.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">L’expression pour laquelle le code est généré.</param>
      <param name="w" vsli:raw="The text writer to output code to.">Le TextWriter vers lequel le code est exporté.</param>
      <param name="o" vsli:raw="The options to use for generating code.">Les options à utiliser pour générer le code.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;w&quot; /&gt; is not available. &lt;paramref name=&quot;w&quot; /&gt; may have been closed before the method call was made.">
        <paramref name="w" /> n’est pas disponible. <paramref name="w" /> peut avoir été fermé avant que l’appel de la méthode n’ait été effectué.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) namespace and outputs it to the specified text writer using the specified options.">Génère du code pour l’espace de noms CodeDOM (Code Document Object Model) spécifié et l’exporte vers le TextWriter spécifié à l’aide des options spécifiées.</summary>
      <param name="e" vsli:raw="The namespace to generate code for.">Espace de noms pour lequel le code doit être généré.</param>
      <param name="w" vsli:raw="The text writer to output code to.">Le TextWriter vers lequel le code est exporté.</param>
      <param name="o" vsli:raw="The options to use for generating code.">Les options à utiliser pour générer le code.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;w&quot; /&gt; is not available. &lt;paramref name=&quot;w&quot; /&gt; may have been closed before the method call was made.">
        <paramref name="w" /> n’est pas disponible. <paramref name="w" /> peut avoir été fermé avant que l’appel de la méthode n’ait été effectué.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) statement and outputs it to the specified text writer using the specified options.">Génère du code pour l’instruction CodeDOM (Code Document Object Model) spécifiée et l’exporte vers le TextWriter spécifié à l’aide des options spécifiées.</summary>
      <param name="e" vsli:raw="The statement that contains the CodeDOM elements to translate.">Instruction qui contient les éléments CodeDOM à traduire.</param>
      <param name="w" vsli:raw="The text writer to output code to.">TextWriter vers lequel exporter le code.</param>
      <param name="o" vsli:raw="The options to use for generating code.">Les options à utiliser pour générer le code.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;w&quot; /&gt; is not available. &lt;paramref name=&quot;w&quot; /&gt; may have been closed before the method call was made.">
        <paramref name="w" /> n’est pas disponible. <paramref name="w" /> peut avoir été fermé avant que l’appel de la méthode n’ait été effectué.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) type declaration and outputs it to the specified text writer using the specified options.">Génère du code pour la déclaration de type CodeDOM (Code Document Object Model) spécifiée et l’exporte vers le TextWriter spécifié à l’aide des options spécifiées.</summary>
      <param name="e" vsli:raw="The type to generate code for.">Type pour lequel le code doit être généré.</param>
      <param name="w" vsli:raw="The text writer to output code to.">Le TextWriter vers lequel le code est exporté.</param>
      <param name="o" vsli:raw="The options to use for generating code.">Les options à utiliser pour générer le code.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;w&quot; /&gt; is not available. &lt;paramref name=&quot;w&quot; /&gt; may have been closed before the method call was made.">
        <paramref name="w" /> n’est pas disponible. <paramref name="w" /> peut avoir été fermé avant que l’appel de la méthode n’ait été effectué.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Gets the type indicated by the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt;.">Obtient le type indiqué par le <see cref="T:System.CodeDom.CodeTypeReference" /> spécifié.</summary>
      <param name="type" vsli:raw="The type to return.">Type à retourner.</param>
      <returns vsli:raw="The name of the data type reference.">Nom de la référence du type de données.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#IsValidIdentifier(System.String)">
      <summary vsli:raw="Gets a value that indicates whether the specified value is a valid identifier for the current language.">Obtient une valeur indiquant si la valeur spécifiée est un identificateur valide pour le langage actuel.</summary>
      <param name="value" vsli:raw="The value to test.">Valeur à tester.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;value&quot; /&gt; parameter is a valid identifier; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le paramètre <paramref name="value" /> est un identificateur valide ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary vsli:raw="Gets a value indicating whether the generator provides support for the language features represented by the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.GeneratorSupport&quot; /&gt; object.">Obtient une valeur indiquant si le générateur prend en charge les fonctionnalités de langage représentées par l'objet <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> spécifié.</summary>
      <param name="support" vsli:raw="The capabilities to test the generator for.">Fonctionnalités à tester pour le générateur.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified capabilities are supported; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si les fonctionnalités spécifiées sont prises en charge ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#ValidateIdentifier(System.String)">
      <summary vsli:raw="Throws an exception if the specified value is not a valid identifier.">Lève une exception si la valeur spécifiée n'est pas un identificateur valide.</summary>
      <param name="value" vsli:raw="The identifier to validate.">Identificateur à valider.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifier(System.String)">
      <summary vsli:raw="Throws an exception if the specified string is not a valid identifier.">Lève une exception si la chaîne spécifiée n'est pas un identificateur valide.</summary>
      <param name="value" vsli:raw="The identifier to test for validity as an identifier.">Identificateur dont la validité en tant qu'identificateur doit être testée.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified identifier is invalid or conflicts with reserved or language keywords.">Si l'identificateur spécifié n'est pas valide ou s'il est en conflit avec les mots clés réservés ou les mots clés du langage.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifiers(System.CodeDom.CodeObject)">
      <summary vsli:raw="Attempts to validate each identifier field contained in the specified &lt;see cref=&quot;T:System.CodeDom.CodeObject&quot; /&gt; or &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; tree.">Tente de valider chaque champ d'identificateur dans l'arborescence <see cref="T:System.CodeDom.CodeObject" /> ou <see cref="N:System.CodeDom" /> spécifiée.</summary>
      <param name="e" vsli:raw="An object to test for invalid identifiers.">Objet à tester pour rechercher les identificateurs non valides.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified &lt;see cref=&quot;T:System.CodeDom.CodeObject&quot; /&gt; contains an invalid identifier.">Le <see cref="T:System.CodeDom.CodeObject" /> spécifié contient un identificateur non valide.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeGeneratorOptions">
      <summary vsli:raw="Represents a set of options used by a code generator.">Représente un ensemble d'options utilisées par un générateur de code.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGeneratorOptions.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />.</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.BlankLinesBetweenMembers">
      <summary vsli:raw="Gets or sets a value indicating whether to insert blank lines between members.">Obtient ou définit une valeur indiquant s'il faut insérer des lignes vides entre les membres.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if blank lines should be inserted; otherwise, &lt;see langword=&quot;false&quot; /&gt;. By default, the value of this property is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> si les lignes vides doivent être insérées ; sinon, <see langword="false" />. Par défaut, la valeur de cette propriété est <see langword="true" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.BracingStyle">
      <summary vsli:raw="Gets or sets the style to use for bracing.">Obtient ou définit le style à utiliser pour les accolades.</summary>
      <returns vsli:raw="A string containing the bracing style to use.">Chaîne contenant le style d'accolade à utiliser.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.ElseOnClosing">
      <summary vsli:raw="Gets or sets a value indicating whether to append an &lt;see langword=&quot;else&quot; /&gt;, &lt;see langword=&quot;catch&quot; /&gt;, or &lt;see langword=&quot;finally&quot; /&gt; block, including brackets, at the closing line of each previous &lt;see langword=&quot;if&quot; /&gt; or &lt;see langword=&quot;try&quot; /&gt; block.">Obtient ou définit une valeur indiquant s'il faut ajouter un bloc <see langword="else" />, <see langword="catch" /> ou <see langword="finally" />, y compris les parenthèses, au niveau de la ligne fermante de chaque bloc <see langword="if" /> ou <see langword="try" /> précédent.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an else should be appended; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default value of this property is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si un Else doit être ajouté ; sinon, <see langword="false" />. La valeur par défaut de cette propriété est <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.IndentString">
      <summary vsli:raw="Gets or sets the string to use for indentations.">Obtient ou définit la chaîne à utiliser pour les mises en retrait.</summary>
      <returns vsli:raw="A string containing the characters to use for indentations.">Chaîne contenant les caractères à utiliser pour les mises en retrait.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.Item(System.String)">
      <summary vsli:raw="Gets or sets the object at the specified index.">Obtient ou définit l'objet à l'index spécifié.</summary>
      <param name="index" vsli:raw="The name associated with the object to retrieve.">Nom associé à l'objet à récupérer.</param>
      <returns vsli:raw="The object associated with the specified name. If no object associated with the specified name exists in the collection, &lt;see langword=&quot;null&quot; /&gt;.">Objet associé au nom spécifié. Si la collection ne contient aucun objet associé au nom spécifié, <see langword="null" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.VerbatimOrder">
      <summary vsli:raw="Gets or sets a value indicating whether to generate members in the order in which they occur in member collections.">Obtient ou définit une valeur qui indique s'il faut générer des membres dans l'ordre dans lequel ils se produisent dans les collections de membres.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to generate the members in the order in which they occur in the member collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default value of this property is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour générer les membres dans l'ordre dans lequel ils se produisent dans la collection de membres ; sinon, <see langword="false" />. La valeur par défaut de cette propriété est <see langword="false" />.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeParser">
      <summary vsli:raw="Provides an empty implementation of the &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeParser&quot; /&gt; interface.">Fournit une implémentation vide de l'interface <see cref="T:System.CodeDom.Compiler.ICodeParser" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeParser.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeParser&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.Compiler.CodeParser" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeParser.Parse(System.IO.TextReader)">
      <summary vsli:raw="Compiles the specified text stream into a &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt;.">Compile le flux de texte spécifié en <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
      <param name="codeStream" vsli:raw="A &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; that is used to read the code to be parsed.">
        <see cref="T:System.IO.TextReader" /> utilisé pour lire le code à analyser.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; containing the code model produced from parsing the code.">
        <see cref="T:System.CodeDom.CodeCompileUnit" /> contenant le modèle de code généré par l'analyse de code.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerError">
      <summary vsli:raw="Represents a compiler error or warning.">Représente une erreur ou un avertissement du compilateur.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.Compiler.CompilerError" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.#ctor(System.String,System.Int32,System.Int32,System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; class using the specified file name, line, column, error number, and error text.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.Compiler.CompilerError" /> avec le nom de fichier, la ligne, la colonne, le numéro d'erreur et le texte d'erreur spécifiés.</summary>
      <param name="fileName" vsli:raw="The file name of the file that the compiler was compiling when it encountered the error.">Nom du fichier que le compilateur était en train de compiler lorsqu'une erreur s'est produite.</param>
      <param name="line" vsli:raw="The line of the source of the error.">Ligne de la source de l'erreur.</param>
      <param name="column" vsli:raw="The column of the source of the error.">Colonne de la source de l'erreur.</param>
      <param name="errorNumber" vsli:raw="The error number of the error.">Numéro de l'erreur.</param>
      <param name="errorText" vsli:raw="The error message text.">Texte du message d'erreur.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.Column">
      <summary vsli:raw="Gets or sets the column number where the source of the error occurs.">Obtient ou définit le numéro de la colonne où l'erreur s'est produite.</summary>
      <returns vsli:raw="The column number of the source file where the compiler encountered the error.">Numéro de colonne du fichier source où le compilateur a détecté l'erreur.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.ErrorNumber">
      <summary vsli:raw="Gets or sets the error number.">Obtient ou définit le numéro de l'erreur.</summary>
      <returns vsli:raw="The error number as a string.">Numéro de l'erreur en tant que chaîne.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.ErrorText">
      <summary vsli:raw="Gets or sets the text of the error message.">Obtient ou définit le texte du message d'erreur.</summary>
      <returns vsli:raw="The text of the error message.">Texte du message d'erreur.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.FileName">
      <summary vsli:raw="Gets or sets the file name of the source file that contains the code which caused the error.">Obtient ou définit le nom du fichier source qui contient le code ayant provoqué l'erreur.</summary>
      <returns vsli:raw="The file name of the source file that contains the code which caused the error.">Nom du fichier source qui contient le code ayant provoqué l'erreur.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.IsWarning">
      <summary vsli:raw="Gets or sets a value that indicates whether the error is a warning.">Obtient ou définit une valeur indiquant si l'erreur est un avertissement.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the error is a warning; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'erreur est un avertissement ; sinon <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.Line">
      <summary vsli:raw="Gets or sets the line number where the source of the error occurs.">Obtient ou définit le numéro de la ligne où l'erreur s'est produite.</summary>
      <returns vsli:raw="The line number of the source file where the compiler encountered the error.">Numéro de ligne du fichier source où le compilateur a détecté l'erreur.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.ToString">
      <summary vsli:raw="Provides an implementation of Object's &lt;see cref=&quot;M:System.Object.ToString&quot; /&gt; method.">Fournit une implémentation de la méthode <see cref="M:System.Object.ToString" /> de l'objet.</summary>
      <returns vsli:raw="A string representation of the compiler error.">Représentation sous forme de chaîne de l'erreur du compilateur.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerErrorCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; objects.">Représente une collection d'objets <see cref="T:System.CodeDom.Compiler.CompilerError" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor(System.CodeDom.Compiler.CompilerError[])">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt; that contains the specified array of &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; objects.">Initialise une nouvelle instance de <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> qui contient le tableau spécifié d'objets <see cref="T:System.CodeDom.Compiler.CompilerError" />.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; objects to initialize the collection with.">Tableau d'objets <see cref="T:System.CodeDom.Compiler.CompilerError" /> à utiliser pour initialiser la collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor(System.CodeDom.Compiler.CompilerErrorCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt; class that contains the contents of the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt;.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> qui comprend le contenu de la <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> spécifiée.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt; object with which to initialize the collection.">Objet <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> à utiliser pour initialiser la collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Add(System.CodeDom.Compiler.CompilerError)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; object to the error collection.">Ajoute l'objet <see cref="T:System.CodeDom.Compiler.CompilerError" /> spécifié à la collection d'erreurs.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; object to add.">Objet <see cref="T:System.CodeDom.Compiler.CompilerError" /> à ajouter.</param>
      <returns vsli:raw="The index at which the new element was inserted.">Index au niveau duquel le nouvel élément a été inséré.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.AddRange(System.CodeDom.Compiler.CompilerError[])">
      <summary vsli:raw="Copies the elements of an array to the end of the error collection.">Copie les éléments d'un tableau à la fin de la collection d'erreurs.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; that contains the objects to add to the collection.">Tableau de type <see cref="T:System.CodeDom.Compiler.CompilerError" /> qui contient les objets à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.AddRange(System.CodeDom.Compiler.CompilerErrorCollection)">
      <summary vsli:raw="Adds the contents of the specified compiler error collection to the end of the error collection.">Ajoute le contenu de la collection d'erreurs du compilateur spécifiée à la fin de celle-ci.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt; object that contains the objects to add to the collection.">Objet <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> qui contient les objets à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Contains(System.CodeDom.Compiler.CompilerError)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; object.">Obtient une valeur qui indique si la collection contient l'<see cref="T:System.CodeDom.Compiler.CompilerError" /> spécifiée.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; to locate.">
        <see cref="T:System.CodeDom.Compiler.CompilerError" /> à rechercher.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; is contained in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.CodeDom.Compiler.CompilerError" /> est contenu dans la collection ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.CopyTo(System.CodeDom.Compiler.CompilerError[],System.Int32)">
      <summary vsli:raw="Copies the collection values to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance at the specified index.">Copie les valeurs de la collection vers une instance de <see cref="T:System.Array" /> à une dimension, à l'index spécifié.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt;.">
        <see cref="T:System.Array" /> unidimensionnel qui correspond à la destination des valeurs copiées à partir de <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />.</param>
      <param name="index" vsli:raw="The index in the array at which to start copying.">Index du tableau à partir duquel commencer la copie.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The array indicated by the &lt;paramref name=&quot;array&quot; /&gt; parameter is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt; is greater than the available space between the index value of the &lt;paramref name=&quot;arrayIndex&quot; /&gt; parameter in the array indicated by the &lt;paramref name=&quot;array&quot; /&gt; parameter and the end of the array indicated by the &lt;paramref name=&quot;array&quot; /&gt; parameter.">Le tableau indiqué par le paramètre <paramref name="array" /> est multidimensionnel.

ou -
Le nombre d'éléments dans <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> est supérieur à la quantité d'espace disponible entre la valeur d'index du paramètre <paramref name="arrayIndex" /> dans le tableau indiqué par le paramètre <paramref name="array" /> et la fin du tableau indiquée par le paramètre <paramref name="array" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the lowbound of the array indicated by the &lt;paramref name=&quot;array&quot; /&gt; parameter.">Le paramètre <paramref name="index" /> est inférieur à la limite inférieure du tableau indiquée par le paramètre <paramref name="array" />.</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.HasErrors">
      <summary vsli:raw="Gets a value that indicates whether the collection contains errors.">Obtient une valeur indiquant si la collection contient des erreurs.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains errors; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la collection contient des erreurs ; sinon <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.HasWarnings">
      <summary vsli:raw="Gets a value that indicates whether the collection contains warnings.">Obtient une valeur indiquant si la collection contient des avertissements.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains warnings; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la collection contient des avertissements ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.IndexOf(System.CodeDom.Compiler.CompilerError)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; object in the collection, if it exists in the collection.">Obtient l'index de l'objet <see cref="T:System.CodeDom.Compiler.CompilerError" /> spécifié dans la collection, s'il existe dans la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; to locate.">
        <see cref="T:System.CodeDom.Compiler.CompilerError" /> à rechercher.</param>
      <returns vsli:raw="The index of the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; in the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt;, if found; otherwise, -1.">Index du <see cref="T:System.CodeDom.Compiler.CompilerError" /> spécifié dans le <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />, s'il existe ; sinon -1.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Insert(System.Int32,System.CodeDom.Compiler.CompilerError)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; into the collection at the specified index.">Insère le <see cref="T:System.CodeDom.Compiler.CompilerError" /> spécifié dans la collection, à l'index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index where the compiler error should be inserted.">Index de base zéro où l'erreur du compilateur doit être insérée.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; to insert.">
        <see cref="T:System.CodeDom.Compiler.CompilerError" /> à insérer.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; at the specified index.">Obtient ou définit le <see cref="T:System.CodeDom.Compiler.CompilerError" /> à l'index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index of the entry to locate in the collection.">Index de base zéro de l'entrée à rechercher dans la collection.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; at each valid index.">
        <see cref="T:System.CodeDom.Compiler.CompilerError" /> pour chaque index valide.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The index value indicated by the &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">La valeur d'index indiquée par le paramètre <paramref name="index" /> est hors de la plage valide des index pour la collection.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Remove(System.CodeDom.Compiler.CompilerError)">
      <summary vsli:raw="Removes a specific &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; from the collection.">Supprime un <see cref="T:System.CodeDom.Compiler.CompilerError" /> spécifique dans la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; to remove from the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt;.">
        <see cref="T:System.CodeDom.Compiler.CompilerError" /> à supprimer de <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">L'objet spécifié est introuvable dans la collection.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerInfo">
      <summary vsli:raw="Represents the configuration settings of a language provider. This class cannot be inherited.">Représente les paramètres de configuration d'un fournisseur de langages. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerInfo.CodeDomProviderType">
      <summary vsli:raw="Gets the type of the configured &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementation.">Obtient le type de l'implémentation configurée de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />.</summary>
      <returns vsli:raw="A read-only &lt;see cref=&quot;T:System.Type&quot; /&gt; instance that represents the configured language provider type.">Instance de <see cref="T:System.Type" /> en lecture seule qui représente le type de fournisseur de langages configuré.</returns>
      <exception cref="T:System.Configuration.ConfigurationException" vsli:raw="The language provider is not configured on this computer.">Le fournisseur de langages n'est pas configuré sur cet ordinateur.</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException" vsli:raw="Cannot locate the type because it is a &lt;see langword=&quot;null&quot; /&gt; or empty string.  &#xA;  &#xA; -or-  &#xA;  &#xA; Cannot locate the type because the name for the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; cannot be found in the configuration file.">Impossible de localiser le type car il est <see langword="null" /> ou c'est une chaîne vide.

ou -
Impossible de localiser le type car le nom de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> est introuvable dans le fichier de configuration.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateDefaultCompilerParameters">
      <summary vsli:raw="Gets the configured compiler settings for the language provider implementation.">Obtient les paramètres de compilateur configurés pour l'implémentation du fournisseur de langages.</summary>
      <returns vsli:raw="A read-only &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; instance that contains the compiler options and settings configured for the language provider.">Instance de <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> en lecture seule qui contient les options du compilateur et les paramètres configurés pour le fournisseur de langages.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateProvider">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; instance for the current language provider settings.">Retourne une instance de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> pour les paramètres du fournisseur de langages actuels.</summary>
      <returns vsli:raw="A CodeDOM provider associated with the language provider configuration.">Fournisseur CodeDOM associé à la configuration du fournisseur de langage.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateProvider(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; instance for the current language provider settings and specified options.">Retourne une instance de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> pour les paramètres du fournisseur de langage actuel et les options spécifiées.</summary>
      <param name="providerOptions" vsli:raw="A collection of provider options from the configuration file.">Collection d'options de fournisseur issue du fichier de configuration.</param>
      <returns vsli:raw="A CodeDOM provider associated with the language provider configuration and specified options.">Fournisseur CodeDOM associé à la configuration du fournisseur de langage et aux options spécifiées.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;providerOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="providerOptions" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The provider does not support options.">Le fournisseur ne prend pas en charge d'options.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified object represents the same language provider and compiler settings as the current &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerInfo&quot; /&gt;.">Détermine si l'objet spécifié représente le même fournisseur de langages et les mêmes paramètres de compilateur que l'instance actuelle de <see cref="T:System.CodeDom.Compiler.CompilerInfo" />.</summary>
      <param name="o" vsli:raw="The object to compare with the current &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerInfo&quot; /&gt;.">Objet à comparer au <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> en cours.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;o&quot; /&gt; is a &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerInfo&quot; /&gt; object and its value is the same as this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="o" /> est un objet <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> et possède la même valeur que cette instance ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetExtensions">
      <summary vsli:raw="Returns the file name extensions supported by the language provider.">Retourne les extensions de nom de fichier prises en charge par le fournisseur de langages.</summary>
      <returns vsli:raw="An array of file name extensions supported by the language provider.">Tableau d'extensions de nom de fichier prises en charge par le fournisseur de langages.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetHashCode">
      <summary vsli:raw="Returns the hash code for the current instance.">Retourne le code de hachage pour l'instance actuelle.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code for the current &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerInfo&quot; /&gt; instance, suitable for use in hashing algorithms and data structures such as a hash table.">Code de hachage d'entier signé 32 bits pour l'instance actuelle de <see cref="T:System.CodeDom.Compiler.CompilerInfo" />, utilisable dans des algorithmes de hachage et des structures de données, telles qu'une table de hachage.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetLanguages">
      <summary vsli:raw="Gets the language names supported by the language provider.">Obtient les noms de langages pris en charge par le fournisseur de langages.</summary>
      <returns vsli:raw="An array of language names supported by the language provider.">Tableau de noms de langages pris en charge par le fournisseur de langages.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerInfo.IsCodeDomProviderTypeValid">
      <summary vsli:raw="Returns a value indicating whether the language provider implementation is configured on the computer.">Retourne une valeur qui indique si l'implémentation du fournisseur de langages est configurée sur l'ordinateur.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the language provider implementation type is configured on the computer; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le type d'implémentation du fournisseur de langages est configuré sur l'ordinateur ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerParameters">
      <summary vsli:raw="Represents the parameters used to invoke a compiler.">Représente les paramètres utilisés pour appeler un compilateur.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.Compiler.CompilerParameters" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; class using the specified assembly names.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> avec les noms d'assemblys spécifiés.</summary>
      <param name="assemblyNames" vsli:raw="The names of the assemblies to reference.">Noms des assemblys à référencer.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; class using the specified assembly names and output file name.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> avec les noms d'assemblys et le nom du fichier de sortie spécifiés.</summary>
      <param name="assemblyNames" vsli:raw="The names of the assemblies to reference.">Noms des assemblys à référencer.</param>
      <param name="outputName" vsli:raw="The output file name.">Nom du fichier de sortie.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; class using the specified assembly names, output name, and a value indicating whether to include debug information.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> avec les noms d'assemblys spécifiés, le nom de sortie spécifié et une valeur indiquant s'il faut inclure les informations de débogage.</summary>
      <param name="assemblyNames" vsli:raw="The names of the assemblies to reference.">Noms des assemblys à référencer.</param>
      <param name="outputName" vsli:raw="The output file name.">Nom du fichier de sortie.</param>
      <param name="includeDebugInformation" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include debug information; &lt;see langword=&quot;false&quot; /&gt; to exclude debug information.">
        <see langword="true" /> pour inclure des informations de débogage ; <see langword="false" /> pour exclure les informations de débogage.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.CompilerOptions">
      <summary vsli:raw="Gets or sets optional command-line arguments to use when invoking the compiler.">Obtient ou définit les arguments de ligne de commande facultatifs à utiliser lorsque le compilateur est appelé.</summary>
      <returns vsli:raw="Any additional command-line arguments for the compiler.">Arguments de la ligne de commande supplémentaires pour le compilateur.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.CoreAssemblyFileName">
      <summary vsli:raw="Gets or sets the name of the core or standard assembly that contains basic types such as &lt;see cref=&quot;T:System.Object&quot; /&gt;, &lt;see cref=&quot;T:System.String&quot; /&gt;, or &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">Obtient ou définit le nom de l'assembly principal ou standard qui contient des types de base tels que <see cref="T:System.Object" />, <see cref="T:System.String" /> ou <see cref="T:System.Int32" />.</summary>
      <returns vsli:raw="The name of the core assembly that contains basic types.">Nom de l'assembly principal qui contient des types de base.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources">
      <summary vsli:raw="Gets the .NET resource files to include when compiling the assembly output.">Obtient les fichiers de ressources .NET Framework à inclure lors de la compilation de la sortie d'assembly.</summary>
      <returns vsli:raw="A collection that contains the file paths of .NET resources to include in the generated assembly.">Collection qui contient les chemins d'accès des ressources .NET Framework à inclure dans l'assembly généré.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable">
      <summary vsli:raw="Gets or sets a value indicating whether to generate an executable.">Obtient ou définit une valeur indiquant si un exécutable doit être généré.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an executable should be generated; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si un exécutable doit être généré ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.GenerateInMemory">
      <summary vsli:raw="Gets or sets a value indicating whether to generate the output in memory.">Obtient ou définit une valeur indiquant si le résultat doit être généré dans la mémoire.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the compiler should generate the output in memory; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le compilateur doit générer le résultat dans la mémoire ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.IncludeDebugInformation">
      <summary vsli:raw="Gets or sets a value indicating whether to include debug information in the compiled executable.">Obtient ou définit une valeur indiquant si les informations de débogage doivent être incluses dans l'exécutable compilé.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if debug information should be generated; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si les informations de débogage doivent être générées ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.LinkedResources">
      <summary vsli:raw="Gets the .NET resource files that are referenced in the current source.">Obtient les fichiers de ressources .NET Framework qui sont référencés dans la source actuelle.</summary>
      <returns vsli:raw="A collection that contains the file paths of .NET resources that are referenced by the source.">Collection qui contient les chemins d'accès des ressources .NET Framework qui sont référencées par la source.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.MainClass">
      <summary vsli:raw="Gets or sets the name of the main class.">Obtient ou définit le nom de la classe principale.</summary>
      <returns vsli:raw="The name of the main class.">Nom de la classe principale.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.OutputAssembly">
      <summary vsli:raw="Gets or sets the name of the output assembly.">Obtient ou définit le nom de l'assembly de sortie.</summary>
      <returns vsli:raw="The name of the output assembly.">Nom de l'assembly de sortie.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies">
      <summary vsli:raw="Gets the assemblies referenced by the current project.">Obtient les assemblys référencés par le projet actuel.</summary>
      <returns vsli:raw="A collection that contains the assembly names that are referenced by the source to compile.">Collection qui contient les noms d'assembly qui sont référencés par la source à compiler.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.TempFiles">
      <summary vsli:raw="Gets or sets the collection that contains the temporary files.">Obtient ou définit la collection qui contient les fichiers temporaires.</summary>
      <returns vsli:raw="A collection that contains the temporary files.">Collection qui contient les fichiers temporaires.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.TreatWarningsAsErrors">
      <summary vsli:raw="Gets or sets a value indicating whether to treat warnings as errors.">Obtient ou définit une valeur indiquant s'il faut traiter les avertissements comme des erreurs.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if warnings should be treated as errors; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si les avertissements doivent être traités comme des erreurs ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.UserToken">
      <summary vsli:raw="Gets or sets the user token to use when creating the compiler process.">Obtient ou définit le jeton utilisateur à employer à la création du processus de compilation.</summary>
      <returns vsli:raw="The user token to use.">Jeton utilisateur à employer.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.WarningLevel">
      <summary vsli:raw="Gets or sets the warning level at which the compiler aborts compilation.">Obtient ou définit le niveau d'avertissement auquel le compilateur abandonne la compilation.</summary>
      <returns vsli:raw="The warning level at which the compiler aborts compilation.">Niveau d'avertissement auquel le compilateur abandonne la compilation.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.Win32Resource">
      <summary vsli:raw="Gets or sets the file name of a Win32 resource file to link into the compiled assembly.">Obtient ou définit le nom d'un fichier de ressources Win32 à lier à l'assembly compilé.</summary>
      <returns vsli:raw="A Win32 resource file that will be linked into the compiled assembly.">Fichier de ressources Win32 à lier à l'assembly compilé.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerResults">
      <summary vsli:raw="Represents the results of compilation that are returned from a compiler.">Représente les résultats de la compilation qui sont retournés par un compilateur.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerResults.#ctor(System.CodeDom.Compiler.TempFileCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; class that uses the specified temporary files.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.Compiler.CompilerResults" /> qui utilise les fichiers temporaires spécifiés.</summary>
      <param name="tempFiles" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; with which to manage and store references to intermediate files generated during compilation.">Une <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> permettant de gérer et stocker les références aux fichiers intermédiaires générés pendant la compilation.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.CompiledAssembly">
      <summary vsli:raw="Gets or sets the compiled assembly.">Obtient ou définit l'assembly compilé.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Reflection.Assembly&quot; /&gt; that indicates the compiled assembly.">
        <see cref="T:System.Reflection.Assembly" /> qui indique l'assembly compilé.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.Errors">
      <summary vsli:raw="Gets the collection of compiler errors and warnings.">Obtient la collection des erreurs et avertissements générés par le compilateur.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt; that indicates the errors and warnings resulting from compilation, if any.">
        <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> qui indique les erreurs et avertissements éventuels résultant de la compilation.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.NativeCompilerReturnValue">
      <summary vsli:raw="Gets or sets the compiler's return value.">Obtient ou définit la valeur de retour du compilateur.</summary>
      <returns vsli:raw="The compiler's return value.">Valeur de retour du compilateur.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.Output">
      <summary vsli:raw="Gets the compiler output messages.">Obtient les messages de résultats de la compilation.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Specialized.StringCollection&quot; /&gt; that contains the output messages.">
        <see cref="T:System.Collections.Specialized.StringCollection" /> qui contient les messages de sortie.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.PathToAssembly">
      <summary vsli:raw="Gets or sets the path of the compiled assembly.">Obtient ou définit le chemin d'accès de l'assembly compilé.</summary>
      <returns vsli:raw="The path of the assembly, or &lt;see langword=&quot;null&quot; /&gt; if the assembly was generated in memory.">Chemin d'accès de l'assembly, ou <see langword="null" /> si l'assembly a été généré en mémoire.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.TempFiles">
      <summary vsli:raw="Gets or sets the temporary file collection to use.">Obtient ou définit la collection de fichiers temporaires à utiliser.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; with which to manage and store references to intermediate files generated during compilation.">Une <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> permettant de gérer et stocker les références aux fichiers intermédiaires générés pendant la compilation.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.Executor">
      <summary vsli:raw="Provides command execution functions for invoking compilers. This class cannot be inherited.">Fournit les fonctions d'exécution de commande pour appeler les compilateurs. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWait(System.String,System.CodeDom.Compiler.TempFileCollection)">
      <summary vsli:raw="Executes the command using the specified temporary files and waits for the call to return.">Exécute la commande en utilisant les fichiers temporaires spécifiés et attend le retour de l’appel.</summary>
      <param name="cmd" vsli:raw="The command to execute.">La commande à exécuter.</param>
      <param name="tempFiles" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; with which to manage and store references to intermediate files generated during compilation.">Une <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> permettant de gérer et stocker les références aux fichiers intermédiaires générés pendant la compilation.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.IntPtr,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary vsli:raw="Executes the specified command using the specified user token and temporary files, and waits for the call to return, storing output and error information from the compiler in the specified strings.">Exécute la commande spécifiée à l'aide du jeton utilisateur et des fichiers temporaires définis puis attend le retour de l'appel, en enregistrant les résultats et les erreurs de la compilation dans les chaînes spécifiées.</summary>
      <param name="userToken" vsli:raw="The token to start the compiler process with.">Jeton de démarrage du processus du compilateur.</param>
      <param name="cmd" vsli:raw="The command to execute.">La commande à exécuter.</param>
      <param name="tempFiles" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; with which to manage and store references to intermediate files generated during compilation.">Une <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> permettant de gérer et stocker les références aux fichiers intermédiaires générés pendant la compilation.</param>
      <param name="outputName" vsli:raw="A reference to a string that will store the compiler's message output.">Référence à une chaîne qui stockera le message de sortie du compilateur.</param>
      <param name="errorName" vsli:raw="A reference to a string that will store the name of the error or errors encountered.">Référence à une chaîne qui stockera le nom des erreurs rencontrées.</param>
      <returns vsli:raw="The return value from the compiler.">Valeur de retour du compilateur.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.IntPtr,System.String,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary vsli:raw="Executes the specified command using the specified user token, current directory, and temporary files; then waits for the call to return, storing output and error information from the compiler in the specified strings.">Exécute la commande spécifiée à l'aide du jeton utilisateur, du répertoire en cours et des fichiers temporaires définis puis attend le retour de l'appel, en enregistrant les résultats et les erreurs de la compilation dans les chaînes spécifiées.</summary>
      <param name="userToken" vsli:raw="The token to start the compiler process with.">Jeton de démarrage du processus du compilateur.</param>
      <param name="cmd" vsli:raw="The command to execute.">La commande à exécuter.</param>
      <param name="currentDir" vsli:raw="The directory to start the process in.">Répertoire dans lequel le processus doit être commencé.</param>
      <param name="tempFiles" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; with which to manage and store references to intermediate files generated during compilation.">Une <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> permettant de gérer et stocker les références aux fichiers intermédiaires générés pendant la compilation.</param>
      <param name="outputName" vsli:raw="A reference to a string that will store the compiler's message output.">Référence à une chaîne qui stockera le message de sortie du compilateur.</param>
      <param name="errorName" vsli:raw="A reference to a string that will store the name of the error or errors encountered.">Référence à une chaîne qui stockera le nom des erreurs rencontrées.</param>
      <returns vsli:raw="The return value from the compiler.">Valeur de retour du compilateur.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary vsli:raw="Executes the specified command using the specified temporary files and waits for the call to return, storing output and error information from the compiler in the specified strings.">Exécute la commande spécifiée à l'aide des fichiers temporaires définis puis attend le retour de l'appel, en enregistrant les résultats et les erreurs de la compilation dans les chaînes spécifiées.</summary>
      <param name="cmd" vsli:raw="The command to execute.">La commande à exécuter.</param>
      <param name="tempFiles" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; with which to manage and store references to intermediate files generated during compilation.">Une <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> permettant de gérer et stocker les références aux fichiers intermédiaires générés pendant la compilation.</param>
      <param name="outputName" vsli:raw="A reference to a string that will store the compiler's message output.">Référence à une chaîne qui stockera le message de sortie du compilateur.</param>
      <param name="errorName" vsli:raw="A reference to a string that will store the name of the error or errors encountered.">Référence à une chaîne qui stockera le nom des erreurs rencontrées.</param>
      <returns vsli:raw="The return value from the compiler.">Valeur de retour du compilateur.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.String,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary vsli:raw="Executes the specified command using the specified current directory and temporary files, and waits for the call to return, storing output and error information from the compiler in the specified strings.">Exécute la commande spécifiée à l'aide du répertoire en cours et des fichiers temporaires définis puis attend le retour de l'appel, en enregistrant les résultats et les erreurs de la compilation dans les chaînes spécifiées.</summary>
      <param name="cmd" vsli:raw="The command to execute.">La commande à exécuter.</param>
      <param name="currentDir" vsli:raw="The current directory.">Le répertoire actif.</param>
      <param name="tempFiles" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; with which to manage and store references to intermediate files generated during compilation.">Une <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> permettant de gérer et stocker les références aux fichiers intermédiaires générés pendant la compilation.</param>
      <param name="outputName" vsli:raw="A reference to a string that will store the compiler's message output.">Référence à une chaîne qui stockera le message de sortie du compilateur.</param>
      <param name="errorName" vsli:raw="A reference to a string that will store the name of the error or errors encountered.">Référence à une chaîne qui stockera le nom des erreurs rencontrées.</param>
      <returns vsli:raw="The return value from the compiler.">Valeur de retour du compilateur.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.GeneratorSupport">
      <summary vsli:raw="Defines identifiers used to determine whether a code generator supports certain types of code elements.">Définit les identificateurs utilisés pour déterminer si un générateur de code prend en charge certains types d'éléments de code.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ArraysOfArrays">
      <summary vsli:raw="Indicates the generator supports arrays of arrays.">Indique que le générateur prend en charge les tableaux de tableaux.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.AssemblyAttributes">
      <summary vsli:raw="Indicates the generator supports assembly attributes.">Indique que le générateur prend en charge les attributs d'assembly.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ChainedConstructorArguments">
      <summary vsli:raw="Indicates the generator supports chained constructor arguments.">Indique que le générateur prend en charge les arguments chaînés du constructeur.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ComplexExpressions">
      <summary vsli:raw="Indicates the generator supports complex expressions.">Indique que le générateur prend en charge les expressions complexes.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareDelegates">
      <summary vsli:raw="Indicates the generator supports delegate declarations.">Indique que le générateur prend en charge les déclarations delegate.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareEnums">
      <summary vsli:raw="Indicates the generator supports enumeration declarations.">Indique que le générateur prend en charge les déclarations enumeration.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareEvents">
      <summary vsli:raw="Indicates the generator supports event declarations.">Indique que le générateur prend en charge les déclarations event.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareIndexerProperties">
      <summary vsli:raw="Indicates the generator supports the declaration of indexer properties.">Indique que le générateur prend en charge la déclaration des propriétés d'indexeur.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareInterfaces">
      <summary vsli:raw="Indicates the generator supports interface declarations.">Indique que le générateur prend en charge les déclarations interface.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareValueTypes">
      <summary vsli:raw="Indicates the generator supports value type declarations.">Indique que le générateur prend en charge les déclarations de type valeur.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.EntryPointMethod">
      <summary vsli:raw="Indicates the generator supports a program entry point method designation. This is used when building executables.">Indique que le générateur prend en charge une désignation de méthode de point d'entrée de programme, en vue de la génération d'exécutables.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GenericTypeDeclaration">
      <summary vsli:raw="Indicates the generator supports generic type declarations.">Indique que le générateur prend en charge les déclarations de type générique.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GenericTypeReference">
      <summary vsli:raw="Indicates the generator supports generic type references.">Indique que le générateur prend en charge les références de type générique.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GotoStatements">
      <summary vsli:raw="Indicates the generator supports goto statements.">Indique que le générateur prend en charge les instructions Goto.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.MultidimensionalArrays">
      <summary vsli:raw="Indicates the generator supports referencing multidimensional arrays. Currently, the CodeDom cannot be used to instantiate multidimensional arrays.">Indique que le générateur prend en charge le référencement des tableaux multidimensionnels. Actuellement, CodeDom ne peut pas servir à instancier les tableaux multidimensionnels.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.MultipleInterfaceMembers">
      <summary vsli:raw="Indicates the generator supports the declaration of members that implement multiple interfaces.">Indique que le générateur prend en charge la déclaration des membres implémentant plusieurs interfaces.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.NestedTypes">
      <summary vsli:raw="Indicates the generator supports the declaration of nested types.">Indique que le générateur prend en charge la déclaration des types imbriqués.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ParameterAttributes">
      <summary vsli:raw="Indicates the generator supports parameter attributes.">Indique que le générateur prend en charge les attributs de paramètre.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.PartialTypes">
      <summary vsli:raw="Indicates the generator supports partial type declarations.">Indique que le générateur prend en charge les déclarations de type partiel.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.PublicStaticMembers">
      <summary vsli:raw="Indicates the generator supports public static members.">Indique que le générateur prend en charge les membres statiques publics.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ReferenceParameters">
      <summary vsli:raw="Indicates the generator supports reference and out parameters.">Indique que le générateur prend en charge les paramètres de référence et les paramètres out.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.Resources">
      <summary vsli:raw="Indicates the generator supports compilation with .NET resources. These can be default resources compiled directly into an assembly, or resources referenced in a satellite assembly.">Indique que le générateur prend en charge la compilation à l'aide de ressources .NET Framework. Il peut s'agir de ressources par défaut compilées directement dans un assembly ou de ressources référencées dans un assembly satellite.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ReturnTypeAttributes">
      <summary vsli:raw="Indicates the generator supports return type attribute declarations.">Indique que le générateur prend en charge les déclarations attribute de types de retour.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.StaticConstructors">
      <summary vsli:raw="Indicates the generator supports static constructors.">Indique que le générateur prend en charge les constructeurs statiques.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.TryCatchStatements">
      <summary vsli:raw="Indicates the generator supports &lt;c&gt;try-catch&lt;/c&gt; statements.">Indique que le générateur prend en charge les instructions <see langword="try...catch" />.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.Win32Resources">
      <summary vsli:raw="Indicates the generator supports compilation with Win32 resources.">Indique que le générateur prend en charge la compilation à l'aide de ressources Win32.</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeCompiler">
      <summary vsli:raw="Defines an interface for invoking compilation of source code or a CodeDOM tree using a specific compiler.">Définit une interface pour appeler la compilation de code source ou une arborescence CodeDom à l'aide d'un compilateur spécifique.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary vsli:raw="Compiles an assembly from the &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; tree contained in the specified &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt;, using the specified compiler settings.">Compile un assembly à partir de l'arborescence <see cref="N:System.CodeDom" /> contenue dans le <see cref="T:System.CodeDom.CodeCompileUnit" /> spécifié, à l'aide des paramètres du compilateur spécifiés.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for compilation.">Objet <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> indiquant les paramètres de la compilation.</param>
      <param name="compilationUnit" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; that indicates the code to compile.">
        <see cref="T:System.CodeDom.CodeCompileUnit" /> indiquant le code à compiler.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">Objet <see cref="T:System.CodeDom.Compiler.CompilerResults" /> indiquant les résultats de la compilation.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary vsli:raw="Compiles an assembly based on the &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; trees contained in the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; objects, using the specified compiler settings.">Compile un assembly basé sur les arborescences <see cref="N:System.CodeDom" /> contenues dans le tableau d'objets <see cref="T:System.CodeDom.CodeCompileUnit" /> spécifié, à l'aide des paramètres du compilateur spécifiés.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for compilation.">Objet <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> indiquant les paramètres de la compilation.</param>
      <param name="compilationUnits" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; that indicates the code to compile.">Tableau de type <see cref="T:System.CodeDom.CodeCompileUnit" /> indiquant le code à compiler.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">Objet <see cref="T:System.CodeDom.Compiler.CompilerResults" /> indiquant les résultats de la compilation.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary vsli:raw="Compiles an assembly from the source code contained within the specified file, using the specified compiler settings.">Compile un assembly à partir du code source contenu dans le fichier spécifié, à l'aide des paramètres du compilateur spécifiés.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for compilation.">Objet <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> indiquant les paramètres de la compilation.</param>
      <param name="fileName" vsli:raw="The file name of the file that contains the source code to compile.">Nom du fichier contenant le code source à compiler.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">Objet <see cref="T:System.CodeDom.Compiler.CompilerResults" /> indiquant les résultats de la compilation.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="Compiles an assembly from the source code contained within the specified files, using the specified compiler settings.">Compile un assembly à partir du code source contenu dans les fichiers spécifiés, à l'aide des paramètres du compilateur spécifiés.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for compilation.">Objet <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> indiquant les paramètres de la compilation.</param>
      <param name="fileNames" vsli:raw="The file names of the files to compile.">noms de fichiers des fichiers à compiler.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">Objet <see cref="T:System.CodeDom.Compiler.CompilerResults" /> indiquant les résultats de la compilation.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary vsli:raw="Compiles an assembly from the specified string containing source code, using the specified compiler settings.">Compile un assembly à partir de la chaîne spécifiée contenant le code source, à l'aide des paramètres du compilateur spécifiés.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for compilation.">Objet <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> indiquant les paramètres de la compilation.</param>
      <param name="source" vsli:raw="The source code to compile.">Code source à compiler.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">Objet <see cref="T:System.CodeDom.Compiler.CompilerResults" /> indiquant les résultats de la compilation.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="Compiles an assembly from the specified array of strings containing source code, using the specified compiler settings.">Compile un assembly à partir du tableau de chaînes spécifié contenant le code source, à l'aide des paramètres du compilateur spécifiés.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for compilation.">Objet <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> indiquant les paramètres de la compilation.</param>
      <param name="sources" vsli:raw="The source code strings to compile.">Chaînes de code source à compiler.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">Objet <see cref="T:System.CodeDom.Compiler.CompilerResults" /> indiquant les résultats de la compilation.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeGenerator">
      <summary vsli:raw="Defines an interface for generating code.">Définit une interface pour générer du code.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.CreateEscapedIdentifier(System.String)">
      <summary vsli:raw="Creates an escaped identifier for the specified value.">Crée un identificateur avec séquence d'échappement pour la valeur spécifiée.</summary>
      <param name="value" vsli:raw="The string to create an escaped identifier for.">Chaîne pour laquelle un identificateur avec séquence d'échappement doit être créé.</param>
      <returns vsli:raw="The escaped identifier for the value.">Identificateur avec séquence d'échappement pour la valeur.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier(System.String)">
      <summary vsli:raw="Creates a valid identifier for the specified value.">Crée un identificateur valide pour la valeur spécifiée.</summary>
      <param name="value" vsli:raw="The string to generate a valid identifier for.">Chaîne pour laquelle un identificateur valide doit être généré.</param>
      <returns vsli:raw="A valid identifier for the specified value.">Identificateur valide pour la valeur spécifiée.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) compilation unit and outputs it to the specified text writer using the specified options.">Génère du code pour l’unité de compilation CodeDOM (Code Document Object Model) spécifiée et l’exporte vers le TextWriter spécifié à l’aide des options spécifiées.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; to generate code for.">
        <see cref="T:System.CodeDom.CodeCompileUnit" /> pour lequel du code doit être généré.</param>
      <param name="w" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to output code to.">
        <see cref="T:System.IO.TextWriter" /> vers lequel exporter le code.</param>
      <param name="o" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> qui indique les options à utiliser pour générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) expression and outputs it to the specified text writer.">Génère du code pour l’expression CodeDOM (Code Document Object Model) spécifié et l’exporte vers le TextWriter spécifié.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the expression to generate code for.">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'expression pour laquelle du code doit être généré.</param>
      <param name="w" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to output code to.">
        <see cref="T:System.IO.TextWriter" /> vers lequel exporter le code.</param>
      <param name="o" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> qui indique les options à utiliser pour générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) namespace and outputs it to the specified text writer using the specified options.">Génère du code pour l’espace de noms CodeDOM (Code Document Object Model) spécifié et l’exporte vers le TextWriter spécifié à l’aide des options spécifiées.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; that indicates the namespace to generate code for.">
        <see cref="T:System.CodeDom.CodeNamespace" /> indiquant l'espace de noms pour lequel du code doit être généré.</param>
      <param name="w" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to output code to.">
        <see cref="T:System.IO.TextWriter" /> vers lequel exporter le code.</param>
      <param name="o" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> qui indique les options à utiliser pour générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) statement and outputs it to the specified text writer using the specified options.">Génère du code pour l’instruction CodeDOM (Code Document Object Model) spécifiée et l’exporte vers le TextWriter spécifié à l’aide des options spécifiées.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the CodeDOM elements to translate.">
        <see cref="T:System.CodeDom.CodeStatement" /> contenant les éléments CodeDOM à traduire.</param>
      <param name="w" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to output code to.">
        <see cref="T:System.IO.TextWriter" /> vers lequel exporter le code.</param>
      <param name="o" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> qui indique les options à utiliser pour générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) type declaration and outputs it to the specified text writer using the specified options.">Génère du code pour la déclaration de type CodeDOM (Code Document Object Model) spécifiée et l’exporte vers le TextWriter spécifié à l’aide des options spécifiées.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; that indicates the type to generate code for.">
        <see cref="T:System.CodeDom.CodeTypeDeclaration" /> qui indique le type pour lequel du code doit être généré.</param>
      <param name="w" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to output code to.">
        <see cref="T:System.IO.TextWriter" /> vers lequel exporter le code.</param>
      <param name="o" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> qui indique les options à utiliser pour générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Gets the type indicated by the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt;.">Obtient le type indiqué par le <see cref="T:System.CodeDom.CodeTypeReference" /> spécifié.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type to return.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> qui indique le type à retourner.</param>
      <returns vsli:raw="A text representation of the specified type for the language this code generator is designed to generate code in. For example, in Visual Basic, passing in type System.Int32 will return &quot;Integer&quot;.">Représentation textuelle du type spécifié pour le langage dans lequel du code est généré par ce générateur de code. Par exemple, en Visual Basic, le passage du type System.Int32 retourne "Integer".</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.IsValidIdentifier(System.String)">
      <summary vsli:raw="Gets a value that indicates whether the specified value is a valid identifier for the current language.">Obtient une valeur indiquant si la valeur spécifiée est un identificateur valide pour le langage actuel.</summary>
      <param name="value" vsli:raw="The value to test for being a valid identifier.">Valeur dont la validité en tant qu'identificateur doit être testée.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;value&quot; /&gt; parameter is a valid identifier; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le paramètre <paramref name="value" /> est un identificateur valide ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary vsli:raw="Gets a value indicating whether the generator provides support for the language features represented by the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.GeneratorSupport&quot; /&gt; object.">Obtient une valeur indiquant si le générateur prend en charge les fonctionnalités de langage représentées par l'objet <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> spécifié.</summary>
      <param name="supports" vsli:raw="The capabilities to test the generator for.">Fonctionnalités à tester pour le générateur.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified capabilities are supported; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si les fonctionnalités spécifiées sont prises en charge ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.ValidateIdentifier(System.String)">
      <summary vsli:raw="Throws an exception if the specified value is not a valid identifier.">Lève une exception si la valeur spécifiée n'est pas un identificateur valide.</summary>
      <param name="value" vsli:raw="The identifier to validate.">Identificateur à valider.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The identifier is not valid.">L'identificateur n'est pas valide.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeParser">
      <summary vsli:raw="Defines an interface for parsing code into a &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt;.">Définit une interface pour analyser du code dans <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeParser.Parse(System.IO.TextReader)">
      <summary vsli:raw="When implemented in a derived class, compiles the specified text stream into a &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt;.">Lors d'une d'implémentation dans une classe dérivée, compile le flux de texte spécifié dans <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
      <param name="codeStream" vsli:raw="A &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; that can be used to read the code to be compiled.">
        <see cref="T:System.IO.TextReader" /> qui peut être utilisé pour lire le code à compiler.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; that contains a representation of the parsed code.">
        <see cref="T:System.CodeDom.CodeCompileUnit" /> contenant une représentation du code analysé.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.LanguageOptions">
      <summary vsli:raw="Defines identifiers that indicate special features of a language.">Définit les identificateurs qui indiquent les fonctionnalités spéciales d'un langage.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.LanguageOptions.CaseInsensitive">
      <summary vsli:raw="The language is case-insensitive.">Le langage ne respecte pas la casse.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.LanguageOptions.None">
      <summary vsli:raw="The language has default characteristics.">Le langage possède des caractéristiques par défaut.</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.TempFileCollection">
      <summary vsli:raw="Represents a collection of temporary files.">Représente une collection de fichiers temporaires.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; class with default values.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> avec des valeurs par défaut.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; class using the specified temporary directory that is set to delete the temporary files after their generation and use, by default.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> avec le répertoire temporaire spécifié, défini de façon à supprimer par défaut les fichiers temporaires après leur génération et leur utilisation.</summary>
      <param name="tempDir" vsli:raw="A path to the temporary directory to use for storing the temporary files.">Chemin d'accès du répertoire temporaire destiné à recevoir les fichiers temporaires.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor(System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; class using the specified temporary directory and specified value indicating whether to keep or delete the temporary files after their generation and use, by default.">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> avec le répertoire temporaire spécifié et la valeur spécifiée indiquant si les fichiers temporaires doivent être conservés ou supprimés par défaut après leur génération et leur utilisation.</summary>
      <param name="tempDir" vsli:raw="A path to the temporary directory to use for storing the temporary files.">Chemin d'accès du répertoire temporaire destiné à recevoir les fichiers temporaires.</param>
      <param name="keepFiles" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the temporary files should be kept after use; &lt;see langword=&quot;false&quot; /&gt; if the temporary files should be deleted.">
        <see langword="true" /> si les fichiers temporaires doivent être conservés après utilisation ; <see langword="false" /> s'ils doivent être supprimés.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddExtension(System.String)">
      <summary vsli:raw="Adds a file name with the specified file name extension to the collection.">Ajoute à la collection un nom de fichier doté de l'extension de nom de fichier spécifiée.</summary>
      <param name="fileExtension" vsli:raw="The file name extension for the auto-generated temporary file name to add to the collection.">Extension assignée au nom de fichier temporaire généré automatiquement qui doit être ajouté à la collection.</param>
      <returns vsli:raw="A file name with the specified extension that was just added to the collection.">Nom de fichier doté de l'extension spécifiée qui a été ajouté à la collection.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddExtension(System.String,System.Boolean)">
      <summary vsli:raw="Adds a file name with the specified file name extension to the collection, using the specified value indicating whether the file should be deleted or retained.">Ajoute à la collection un nom de fichier doté de l'extension de nom de fichier spécifiée, en utilisant la valeur spécifiée qui indique si le fichier doit être supprimé ou conservé.</summary>
      <param name="fileExtension" vsli:raw="The file name extension for the auto-generated temporary file name to add to the collection.">Extension assignée au nom de fichier temporaire généré automatiquement qui doit être ajouté à la collection.</param>
      <param name="keepFile" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the file should be kept after use; &lt;see langword=&quot;false&quot; /&gt; if the file should be deleted.">
        <see langword="true" /> si le fichier doit être conservé après utilisation ; <see langword="false" /> s'il doit être supprimé.</param>
      <returns vsli:raw="A file name with the specified extension that was just added to the collection.">Nom de fichier doté de l'extension spécifiée qui a été ajouté à la collection.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;fileExtension&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or an empty string.">
        <paramref name="fileExtension" /> est <see langword="null" /> ou est une chaîne vide.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddFile(System.String,System.Boolean)">
      <summary vsli:raw="Adds the specified file to the collection, using the specified value indicating whether to keep the file after the collection is disposed or when the &lt;see cref=&quot;M:System.CodeDom.Compiler.TempFileCollection.Delete&quot; /&gt; method is called.">Ajoute le fichier spécifié à la collection, en utilisant la valeur spécifiée qui indique si le fichier doit être supprimé ou conservé lorsque la collection est supprimée ou que la méthode <see cref="M:System.CodeDom.Compiler.TempFileCollection.Delete" /> est appelée.</summary>
      <param name="fileName" vsli:raw="The name of the file to add to the collection.">Nom du fichier à ajouter à la collection.</param>
      <param name="keepFile" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the file should be kept after use; &lt;see langword=&quot;false&quot; /&gt; if the file should be deleted.">
        <see langword="true" /> si le fichier doit être conservé après utilisation ; <see langword="false" /> s'il doit être supprimé.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;fileName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or an empty string.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;fileName&quot; /&gt; is a duplicate.">
        <paramref name="fileName" /> est <see langword="null" /> ou est une chaîne vide.

ou -
<paramref name="fileName" /> est un doublon.</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.BasePath">
      <summary vsli:raw="Gets the full path to the base file name, without a file name extension, on the temporary directory path, that is used to generate temporary file names for the collection.">Obtient le chemin d'accès complet du nom de fichier de base, sans extension de fichier, dans le chemin d'accès du répertoire temporaire, utilisé pour générer les noms de fichiers temporaires pour la collection.</summary>
      <returns vsli:raw="The full path to the base file name, without a file name extension, on the temporary directory path, that is used to generate temporary file names for the collection.">Chemin d'accès complet du nom de fichier de base, sans extension de fichier, dans le chemin d'accès du répertoire temporaire, utilisé pour générer les noms de fichiers temporaires pour la collection.</returns>
      <exception cref="T:System.Security.SecurityException" vsli:raw="If the &lt;see cref=&quot;P:System.CodeDom.Compiler.TempFileCollection.BasePath&quot; /&gt; property has not been set or is set to &lt;see langword=&quot;null&quot; /&gt;, and &lt;see cref=&quot;F:System.Security.Permissions.FileIOPermissionAccess.AllAccess&quot; /&gt; is not granted for the temporary directory indicated by the &lt;see cref=&quot;P:System.CodeDom.Compiler.TempFileCollection.TempDir&quot; /&gt; property.">Si la valeur de la propriété <see cref="P:System.CodeDom.Compiler.TempFileCollection.BasePath" /> est <see langword="null" /> ou si elle n'a pas été définie, et que <see cref="F:System.Security.Permissions.FileIOPermissionAccess.AllAccess" /> n'est pas accordé au répertoire temporaire spécifié par la propriété <see cref="P:System.CodeDom.Compiler.TempFileCollection.TempDir" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.CopyTo(System.String[],System.Int32)">
      <summary vsli:raw="Copies the members of the collection to the specified string, beginning at the specified index.">Copie les membres de la collection dans la chaîne spécifiée, en commençant à l'index indiqué.</summary>
      <param name="fileNames" vsli:raw="The array of strings to copy to.">Tableau de chaînes dans lequel la copie doit être effectuée.</param>
      <param name="start" vsli:raw="The index of the array to begin copying to.">Index du tableau auquel la copie commence.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.Count">
      <summary vsli:raw="Gets the number of files in the collection.">Obtient le nombre de fichiers contenus dans la collection.</summary>
      <returns vsli:raw="The number of files in the collection.">Nombre de fichiers de la collection.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Delete">
      <summary vsli:raw="Deletes the temporary files within this collection that were not marked to be kept.">Supprime de cette collection les fichiers temporaires qui ont été marqués pour être supprimés.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; and optionally releases the managed resources.">Libère les ressources non managées utilisées par <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> et libère éventuellement les ressources managées.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">
        <see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour libérer uniquement les ressources non managées.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Finalize">
      <summary vsli:raw="Attempts to delete the temporary files before this object is reclaimed by garbage collection.">Tente de supprimer les fichiers temporaires avant que cet objet ne soit récupéré par un garbage collection.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.GetEnumerator">
      <summary vsli:raw="Gets an enumerator that can enumerate the members of the collection.">Obtient un énumérateur pouvant énumérer les membres de la collection.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that contains the collection's members.">
        <see cref="T:System.Collections.IEnumerator" /> qui contient les membres de la collection.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.KeepFiles">
      <summary vsli:raw="Gets or sets a value indicating whether to keep the files, by default, when the &lt;see cref=&quot;M:System.CodeDom.Compiler.TempFileCollection.Delete&quot; /&gt; method is called or the collection is disposed.">Obtient ou définit une valeur indiquant si les fichiers doivent être conservés, par défaut, lors de l'appel à la méthode <see cref="M:System.CodeDom.Compiler.TempFileCollection.Delete" /> ou de la suppression de la collection.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the files should be kept; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si les fichiers doivent être conservés ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the collection to an array, starting at the specified index of the target array.">Copie les éléments de la collection dans un tableau, en commençant à l'index spécifié du tableau cible.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> unidimensionnel qui constitue la destination des éléments copiés à partir de <see cref="T:System.Collections.ICollection" />. <see cref="T:System.Array" /> doit avoir une indexation de base zéro.</param>
      <param name="start" vsli:raw="The zero-based index in array at which copying begins.">Index de base zéro dans un tableau au niveau duquel commencer la copie.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the number of elements contained in the collection.">Obtient le nombre d’éléments contenus dans la collection.</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Nombre d'éléments contenus dans <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the collection is synchronized (thread safe).">Obtient une valeur indiquant si l’accès à la collection est synchronisé (thread-safe).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe) ; sinon <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the collection.">Obtient un objet qui peut être utilisé pour synchroniser l’accès à la collection.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Retourne un énumérateur qui itère au sein d’une collection.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">
        <see cref="T:System.Collections.IEnumerator" /> qui peut être utilisé pour itérer au sein de la collection.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#IDisposable#Dispose">
      <summary vsli:raw="Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.">Exécute les tâches définies par l'application associées à la libération ou à la redéfinition des ressources non managées.</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.TempDir">
      <summary vsli:raw="Gets the temporary directory to store the temporary files in.">Obtient le répertoire temporaire dans lequel les fichiers temporaires doivent être stockés.</summary>
      <returns vsli:raw="The temporary directory to store the temporary files in.">Répertoire temporaire dans lequel les fichiers doivent être stockés.</returns>
    </member>
    <member name="T:System.CodeDom.FieldDirection">
      <summary vsli:raw="Defines identifiers used to indicate the direction of parameter and argument declarations.">Définit les identificateurs utilisés pour indiquer la direction des déclarations de paramètres et d'arguments.</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.In">
      <summary vsli:raw="An incoming field.">Champ d'entrée.</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.Out">
      <summary vsli:raw="An outgoing field.">Champ de sortie.</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.Ref">
      <summary vsli:raw="A field by reference.">Champ par référence.</summary>
    </member>
    <member name="T:System.CodeDom.MemberAttributes">
      <summary vsli:raw="Defines member attribute identifiers for class members.">Définit les identificateurs des attributs de membre pour les membres de classe.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Abstract">
      <summary vsli:raw="An abstract member.">Membre abstract.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.AccessMask">
      <summary vsli:raw="An access mask.">Masque d'accès.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Assembly">
      <summary vsli:raw="A member that is accessible to any class within the same assembly.">Membre qui est accessible à n'importe quelle classe dans le même assembly.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Const">
      <summary vsli:raw="A constant member.">Membre de constante.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Family">
      <summary vsli:raw="A member that is accessible within the family of its class and derived classes.">Membre qui est accessible dans la famille de sa classe et des classes dérivées.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.FamilyAndAssembly">
      <summary vsli:raw="A member that is accessible within its class, and derived classes in the same assembly.">Membre qui est accessible dans sa classe et dans les classes dérivées du même assembly.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.FamilyOrAssembly">
      <summary vsli:raw="A member that is accessible within its class, its derived classes in any assembly, and any class in the same assembly.">Membre qui est accessible dans sa classe, ses classes dérivées dans n'importe quel assembly et n'importe quelle classe dans le même assembly.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Final">
      <summary vsli:raw="A member that cannot be overridden in a derived class.">Membre qui ne peut pas être substitué dans une classe dérivée.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.New">
      <summary vsli:raw="A new member.">Membre new.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Overloaded">
      <summary vsli:raw="An overloaded member. Some languages, such as Visual Basic, require overloaded members to be explicitly indicated.">Membre surchargé. Dans certains langages, tels que Visual Basic, les membres surchargés doivent être explicitement indiqués.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Override">
      <summary vsli:raw="A member that overrides a base class member.">Membre qui substitue un membre de la classe de base.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Private">
      <summary vsli:raw="A private member.">Membre private.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Public">
      <summary vsli:raw="A public member.">Membre public.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.ScopeMask">
      <summary vsli:raw="A scope mask.">Masque de portée.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Static">
      <summary vsli:raw="A static member. In Visual Basic, this is equivalent to the &lt;see langword=&quot;Shared&quot; /&gt; keyword.">Membre statique. En Visual Basic, ce membre est l'équivalent du mot clé <see langword="Shared" />.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.VTableMask">
      <summary vsli:raw="A VTable mask.">Masque VTable.</summary>
    </member>
  </members>
</doc>
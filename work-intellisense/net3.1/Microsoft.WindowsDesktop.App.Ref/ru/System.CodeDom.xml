<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.CodeDom</name>
  </assembly>
  <members>
    <member name="T:Microsoft.CSharp.CSharpCodeProvider">
      <summary>Предоставляет доступ к экземплярам генератора и компилятора кода C#.</summary>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:Microsoft.CSharp.CSharpCodeProvider" />.</summary>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:Microsoft.CSharp.CSharpCodeProvider" /> с помощью указанных параметров поставщика.</summary>
      <param name="providerOptions">Объект <see cref="T:System.Collections.Generic.IDictionary`2" />, содержащий параметры поставщика из файла конфигурации.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="providerOptions" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.CreateCompiler">
      <summary>Получает экземпляр компилятора кода C#.</summary>
      <returns>Экземпляр реализации <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> C#.</returns>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.CreateGenerator">
      <summary>Получает экземпляр генератора кода C#.</summary>
      <returns>Экземпляр реализации <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> C#.</returns>
    </member>
    <member name="P:Microsoft.CSharp.CSharpCodeProvider.FileExtension">
      <summary>Получает расширение имени файла, используемое при создании файлов исходного кода.</summary>
      <returns>Расширение имени файла, используемое при создании файлов исходного кода.</returns>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Создает код для заданного члена класса, используя заданные параметры модуля записи текста и генератора кода.</summary>
      <param name="member">Класс <see cref="T:System.CodeDom.CodeTypeMember" />, для которого создается код.</param>
      <param name="writer">Экземпляр <see cref="T:System.IO.TextWriter" />, в который выполняется запись.</param>
      <param name="options">Параметры <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />, используемые при создании кода.</param>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.GetConverter(System.Type)">
      <summary>Получает <see cref="T:System.ComponentModel.TypeConverter" /> для заданного типа объекта.</summary>
      <param name="type">Тип объекта, для которого извлекается преобразователь типов.</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter" /> для заданного типа.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.VBCodeProvider">
      <summary>Предоставляет доступ к экземплярам генератора и компилятора кода Visual Basic.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:Microsoft.VisualBasic.VBCodeProvider" />.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:Microsoft.VisualBasic.VBCodeProvider" /> с помощью указанных параметров поставщика.</summary>
      <param name="providerOptions">Объект <see cref="T:System.Collections.Generic.IDictionary`2" />, содержащий параметры поставщика из файла конфигурации.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="providerOptions" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.CreateCompiler">
      <summary>Получает экземпляр компилятора кода Visual Basic.</summary>
      <returns>Экземпляр реализации <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> Visual Basic.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.CreateGenerator">
      <summary>Получает экземпляр генератора кода Visual Basic.</summary>
      <returns>Экземпляр реализации <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> Visual Basic.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.VBCodeProvider.FileExtension">
      <summary>Получает расширение имени файла, используемое при создании файлов исходного кода.</summary>
      <returns>Расширение имени файла, используемое при создании файлов исходного кода.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Создает код для заданного члена класса, используя заданные параметры модуля записи текста и генератора кода.</summary>
      <param name="member">Класс <see cref="T:System.CodeDom.CodeTypeMember" />, для которого создается код.</param>
      <param name="writer">Экземпляр <see cref="T:System.IO.TextWriter" />, в который выполняется запись.</param>
      <param name="options">Параметры <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />, используемые при создании кода.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.GetConverter(System.Type)">
      <summary>Получает <see cref="T:System.ComponentModel.TypeConverter" /> для заданного типа объекта.</summary>
      <param name="type">Тип объекта, для которого извлекается преобразователь типов.</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter" /> для заданного типа.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.VBCodeProvider.LanguageOptions">
      <summary>Получает идентификатор особенностей языка.</summary>
      <returns>
        <see cref="T:System.CodeDom.Compiler.LanguageOptions" /> указывает особенности языка.</returns>
    </member>
    <member name="T:System.CodeDom.CodeArgumentReferenceExpression">
      <summary>Представляет ссылку на значение аргумента, передаваемого методу.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArgumentReferenceExpression.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArgumentReferenceExpression.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" />, используя указанное имя параметра.</summary>
      <param name="parameterName">Имя параметра для ссылки.</param>
    </member>
    <member name="P:System.CodeDom.CodeArgumentReferenceExpression.ParameterName">
      <summary>Получает или задает имя параметра, на которое ссылается данное выражение.</summary>
      <returns>Имя параметра для ссылки.</returns>
    </member>
    <member name="T:System.CodeDom.CodeArrayCreateExpression">
      <summary>Представляет выражение, создающее массив.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeArrayCreateExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.CodeDom.CodeArrayCreateExpression" />, используя указанные тип данных массива и кодовое выражение, показывающее число индексов для массива.</summary>
      <param name="createType">
        <see cref="T:System.CodeDom.CodeTypeReference" />, указывающий тип данных создаваемого массива.</param>
      <param name="size">Выражение, показывающее число индексов создаваемого массива.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression[])">
      <summary>Инициализирует новый экземпляр <see cref="T:System.CodeDom.CodeArrayCreateExpression" />, используя указанные тип данных массива и выражения инициализации.</summary>
      <param name="createType">
        <see cref="T:System.CodeDom.CodeTypeReference" /> указывает тип данных создаваемого массива.</param>
      <param name="initializers">Массив выражений, используемых для инициализации массива.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.Int32)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.CodeDom.CodeArrayCreateExpression" />, используя указанные тип данных массива и число индексов для массива.</summary>
      <param name="createType">
        <see cref="T:System.CodeDom.CodeTypeReference" />, указывающий тип данных создаваемого массива.</param>
      <param name="size">Число индексов создаваемого массива.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.CodeDom.CodeArrayCreateExpression" />, используя указанные имя типа данных массива и кодовое выражение, показывающее число индексов для массива.</summary>
      <param name="createType">Имя типа данных создаваемого массива.</param>
      <param name="size">Выражение, показывающее число индексов создаваемого массива.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression[])">
      <summary>Инициализирует новый экземпляр <see cref="T:System.CodeDom.CodeArrayCreateExpression" />, используя указанные имя типа данных массива и инициализаторы.</summary>
      <param name="createType">Имя типа данных создаваемого массива.</param>
      <param name="initializers">Массив выражений, используемых для инициализации массива.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.Int32)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.CodeDom.CodeArrayCreateExpression" />, используя указанные имя типа данных массива и число индексов для массива.</summary>
      <param name="createType">Имя типа данных создаваемого массива.</param>
      <param name="size">Число индексов создаваемого массива.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.CodeDom.CodeArrayCreateExpression" />, используя указанные тип данных массива и кодовое выражение, показывающее число индексов для массива.</summary>
      <param name="createType">Тип данных создаваемого массива.</param>
      <param name="size">Выражение, показывающее число индексов создаваемого массива.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression[])">
      <summary>Инициализирует новый экземпляр <see cref="T:System.CodeDom.CodeArrayCreateExpression" />, используя указанные тип данных массива и инициализаторы.</summary>
      <param name="createType">Тип данных создаваемого массива.</param>
      <param name="initializers">Массив выражений, используемых для инициализации массива.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.Int32)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.CodeDom.CodeArrayCreateExpression" />, используя указанные тип данных массива и число индексов для массива.</summary>
      <param name="createType">Тип данных создаваемого массива.</param>
      <param name="size">Число индексов создаваемого массива.</param>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.CreateType">
      <summary>Возвращает или задает тип создаваемого массива.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" />, указывающий тип массива.</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.Initializers">
      <summary>Получает инициализаторы, которыми следует инициализировать массив.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpressionCollection" />, указывающий значения инициализации.</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.Size">
      <summary>Возвращает или задает число индексов в массиве.</summary>
      <returns>Число индексов в массиве.</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.SizeExpression">
      <summary>Возвращает или задает выражение, указывающее размер массива.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />, указывающий размер массива.</returns>
    </member>
    <member name="T:System.CodeDom.CodeArrayIndexerExpression">
      <summary>Представляет ссылку на индекс массива.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayIndexerExpression.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeArrayIndexerExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayIndexerExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeArrayIndexerExpression" />, используя указанный конечный объект и индексы.</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" />, указывающий массив, являющийся конечным для индексатора.</param>
      <param name="indices">Индекс или индексы для ссылки.</param>
    </member>
    <member name="P:System.CodeDom.CodeArrayIndexerExpression.Indices">
      <summary>Получает или задает индекс или индексы выражения индексатора.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpressionCollection" />, указывающий индекс или индексы выражения индексатора.</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayIndexerExpression.TargetObject">
      <summary>Получает или задает конечный объект индексатора массива.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />, представляющий индексируемый массив.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAssignStatement">
      <summary>Представляет простой оператор присваивания.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAssignStatement.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeAssignStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAssignStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeAssignStatement" />, используя указанные выражения.</summary>
      <param name="left">Переменная, которой следует присвоить значение.</param>
      <param name="right">Присваиваемое значение.</param>
    </member>
    <member name="P:System.CodeDom.CodeAssignStatement.Left">
      <summary>Получает или задает выражение, представляющее объект или ссылку для присваивания.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> указывает объект или ссылку для присваивания.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAssignStatement.Right">
      <summary>Получает или задает выражение, представляющее объект или ссылку для присваивания.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />, указывающий объект или ссылку для присваивания.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttachEventStatement">
      <summary>Представляет оператор, присоединяющий делегат обработчика событий к событию.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeAttachEventStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor(System.CodeDom.CodeEventReferenceExpression,System.CodeDom.CodeExpression)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeAttachEventStatement" />, используя указанное событие и делегат.</summary>
      <param name="eventRef">
        <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> указывает событие, к которому следует присоединить обработчик событий.</param>
      <param name="listener">
        <see cref="T:System.CodeDom.CodeExpression" /> указывает новый обработчик событий.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeAttachEventStatement" />, используя указанный объект, содержащий событие, имя события и делегат обработчика событий.</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" /> указывает содержащий событие объект.</param>
      <param name="eventName">Имя события, к которому следует присоединить обработчик событий.</param>
      <param name="listener">
        <see cref="T:System.CodeDom.CodeExpression" /> указывает новый обработчик событий.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttachEventStatement.Event">
      <summary>Получает или задает событие, к которому следует присоединить делегат обработчика событий.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> указывает событие, к которому следует присоединить обработчик событий.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttachEventStatement.Listener">
      <summary>Получает или задает новый делегат обработчика событий, который следует присоединить к событию.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />, указывающий новый присоединяемый обработчик событий.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeArgument">
      <summary>Представляет аргумент, используемый в объявлении атрибута метаданных.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeAttributeArgument" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor(System.CodeDom.CodeExpression)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeAttributeArgument" />, используя указанное значение.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeExpression" />, представляющий значение аргумента.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeAttributeArgument" />, используя указанное имя и значение.</summary>
      <param name="name">Имя свойства атрибута, к которому применяется аргумент.</param>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeExpression" />, представляющий значение аргумента.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgument.Name">
      <summary>Получает или задает имя атрибута.</summary>
      <returns>Имя свойства атрибута, которому предназначается аргумент.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgument.Value">
      <summary>Получает или задает значение для аргумента атрибута.</summary>
      <returns>Объект <see cref="T:System.CodeDom.CodeExpression" />, указывающий значение для аргумента атрибута.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeArgumentCollection">
      <summary>Представляет коллекцию объектов <see cref="T:System.CodeDom.CodeAttributeArgument" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor(System.CodeDom.CodeAttributeArgument[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" />, содержащий указанный массив объектов <see cref="T:System.CodeDom.CodeAttributeArgument" />.</summary>
      <param name="value">Массив объектов <see cref="T:System.CodeDom.CodeAttributeArgument" />, которыми следует инициализировать коллекцию.</param>
      <exception cref="T:System.ArgumentNullException">Один или несколько объектов в массиве имеют значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor(System.CodeDom.CodeAttributeArgumentCollection)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" />, содержащий элементы указанной исходной коллекции.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" />, с помощью которого следует инициализировать коллекцию.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="value" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Add(System.CodeDom.CodeAttributeArgument)">
      <summary>Добавляет указанный объект <see cref="T:System.CodeDom.CodeAttributeArgument" /> в коллекцию.</summary>
      <param name="value">Добавляемый объект <see cref="T:System.CodeDom.CodeAttributeArgument" />.</param>
      <returns>Индекс, указывающий, куда был вставлен новый элемент.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.AddRange(System.CodeDom.CodeAttributeArgument[])">
      <summary>Копирует элементы указанного массива <see cref="T:System.CodeDom.CodeAttributeArgument" /> в конец коллекции.</summary>
      <param name="value">Массив типа <see cref="T:System.CodeDom.CodeAttributeArgument" />, содержащий объекты, добавляемые в коллекцию.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="value" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.AddRange(System.CodeDom.CodeAttributeArgumentCollection)">
      <summary>Копирует содержимое другого объекта <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> в конец коллекции.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" />, содержащий объекты, добавляемые в коллекцию.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="value" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Contains(System.CodeDom.CodeAttributeArgument)">
      <summary>Получает значение, которое указывает, содержит ли коллекция заданный объект <see cref="T:System.CodeDom.CodeAttributeArgument" />.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeAttributeArgument" />, который требуется найти в коллекции.</param>
      <returns>Значение <see langword="true" />, если коллекция содержит указанный объект; в обратном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.CopyTo(System.CodeDom.CodeAttributeArgument[],System.Int32)">
      <summary>Копирует объекты коллекции в одномерный экземпляр <see cref="T:System.Array" />, начинающийся с указанного индекса.</summary>
      <param name="array">Одномерный объект <see cref="T:System.Array" />, являющийся целевым для значений, скопированных из коллекции.</param>
      <param name="index">Индекс в массиве, с позиции которого требуется начать вставку.</param>
      <exception cref="T:System.ArgumentException">Массив назначения является многомерным.

или -
Количество элементов в <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> превышает доступное пространство между индексом конечного массива, указанного параметром <paramref name="index" />, и концом конечного массива.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="array" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="index" /> меньше, чем минимальный индекс целевого массива.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.IndexOf(System.CodeDom.CodeAttributeArgument)">
      <summary>Получает индекс в коллекции указанного объекта <see cref="T:System.CodeDom.CodeAttributeArgument" />, если он существует в коллекции.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeAttributeArgument" />, который требуется найти в коллекции.</param>
      <returns>Индекс в коллекции указанного объекта, если найден; в противном случае — значение -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Insert(System.Int32,System.CodeDom.CodeAttributeArgument)">
      <summary>Вставляет указанный объект <see cref="T:System.CodeDom.CodeAttributeArgument" /> в коллекцию по указанному индексу.</summary>
      <param name="index">Индекс, отсчитываемый от нуля, по которому следует вставить указанный объект.</param>
      <param name="value">Вставляемый объект <see cref="T:System.CodeDom.CodeAttributeArgument" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgumentCollection.Item(System.Int32)">
      <summary>Получает или задает объект <see cref="T:System.CodeDom.CodeAttributeArgument" /> по указанному индексу в коллекции.</summary>
      <param name="index">Индекс коллекции, к которой требуется получить доступ.</param>
      <returns>Объект <see cref="T:System.CodeDom.CodeAttributeArgument" /> по каждому допустимому индексу.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="index" /> находится вне допустимого диапазона индексов для коллекции.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Remove(System.CodeDom.CodeAttributeArgument)">
      <summary>Удаляет указанный объект <see cref="T:System.CodeDom.CodeAttributeArgument" /> из коллекции.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeAttributeArgument" />, удаляемый из коллекции.</param>
      <exception cref="T:System.ArgumentException">Указанный объект не найден в коллекции.</exception>
    </member>
    <member name="T:System.CodeDom.CodeAttributeDeclaration">
      <summary>Представляет объявление атрибута.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeAttributeDeclaration" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.CodeDom.CodeTypeReference)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeAttributeDeclaration" />, используя указанную ссылку типа кода.</summary>
      <param name="attributeType">Объект <see cref="T:System.CodeDom.CodeTypeReference" />, идентифицирующий атрибут.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeAttributeArgument[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeAttributeDeclaration" />, используя указанную ссылку типа кода и аргументы.</summary>
      <param name="attributeType">Объект <see cref="T:System.CodeDom.CodeTypeReference" />, идентифицирующий атрибут.</param>
      <param name="arguments">Массив типа <see cref="T:System.CodeDom.CodeAttributeArgument" />, содержащий аргументы для атрибута.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> с использованием указанного имени.</summary>
      <param name="name">Имя атрибута.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.String,System.CodeDom.CodeAttributeArgument[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeAttributeDeclaration" />, используя указанные имя и аргументы.</summary>
      <param name="name">Имя атрибута.</param>
      <param name="arguments">Массив типа <see cref="T:System.CodeDom.CodeAttributeArgument" />, содержащий аргументы для атрибута.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.Arguments">
      <summary>Получает аргументы для атрибута.</summary>
      <returns>Объект <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" />, содержащий аргументы для атрибута.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.AttributeType">
      <summary>Получает ссылку типа кода для объявления атрибута кода.</summary>
      <returns>Объект <see cref="T:System.CodeDom.CodeTypeReference" />, идентифицирующий <see cref="T:System.CodeDom.CodeAttributeDeclaration" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.Name">
      <summary>Получает или задает имя объявляемого атрибута.</summary>
      <returns>Имя атрибута.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeDeclarationCollection">
      <summary>Представляет коллекцию объектов <see cref="T:System.CodeDom.CodeAttributeDeclaration" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor(System.CodeDom.CodeAttributeDeclaration[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />, содержащий указанный массив объектов <see cref="T:System.CodeDom.CodeAttributeDeclaration" />.</summary>
      <param name="value">Массив объектов <see cref="T:System.CodeDom.CodeAttributeDeclaration" />, которыми следует инициализировать коллекцию.</param>
      <exception cref="T:System.ArgumentNullException">Один или несколько объектов в массиве имеют значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />, содержащий элементы указанной исходной коллекции.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />, с помощью которого следует инициализировать коллекцию.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="value" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Add(System.CodeDom.CodeAttributeDeclaration)">
      <summary>Добавляет объект <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> с указанным значением к коллекции.</summary>
      <param name="value">Добавляемый объект <see cref="T:System.CodeDom.CodeAttributeDeclaration" />.</param>
      <returns>Индекс, указывающий, куда был вставлен новый элемент.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.AddRange(System.CodeDom.CodeAttributeDeclaration[])">
      <summary>Копирует элементы указанного массива <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> в конец коллекции.</summary>
      <param name="value">Массив типа <see cref="T:System.CodeDom.CodeAttributeDeclaration" />, содержащий объекты, добавляемые в коллекцию.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="value" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.AddRange(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>Копирует содержимое другого объекта <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> в конец коллекции.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />, содержащий объекты, добавляемые в коллекцию.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="value" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Contains(System.CodeDom.CodeAttributeDeclaration)">
      <summary>Получает или задает значение, которое указывает, содержит ли коллекция заданный объект <see cref="T:System.CodeDom.CodeAttributeDeclaration" />.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeAttributeDeclaration" />, который требуется обнаружить.</param>
      <returns>Значение <see langword="true" />, если коллекция содержит указанный объект; в обратном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.CopyTo(System.CodeDom.CodeAttributeDeclaration[],System.Int32)">
      <summary>Копирует объекты коллекции в одномерный экземпляр <see cref="T:System.Array" />, начинающийся с указанного индекса.</summary>
      <param name="array">Одномерный объект <see cref="T:System.Array" />, являющийся целевым для значений, скопированных из коллекции.</param>
      <param name="index">Индекс в массиве, с позиции которого требуется начать вставку.</param>
      <exception cref="T:System.ArgumentException">Массив назначения является многомерным.
-или-
Количество элементов в <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> превышает доступное пространство между индексом конечного массива, указанного параметром <paramref name="index" />, и концом конечного массива.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="array" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="index" /> меньше, чем минимальный индекс целевого массива.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.IndexOf(System.CodeDom.CodeAttributeDeclaration)">
      <summary>Получает индекс в коллекции указанного объекта <see cref="T:System.CodeDom.CodeAttributeDeclaration" />, если он существует в коллекции.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeAttributeDeclaration" />, который требуется найти в коллекции.</param>
      <returns>Индекс в коллекции указанного объекта, если найден; в противном случае — значение -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Insert(System.Int32,System.CodeDom.CodeAttributeDeclaration)">
      <summary>Вставляет указанный объект <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> в коллекцию по указанному индексу.</summary>
      <param name="index">Индекс, отсчитываемый от нуля, по которому следует вставить указанный объект.</param>
      <param name="value">Вставляемый объект <see cref="T:System.CodeDom.CodeAttributeDeclaration" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclarationCollection.Item(System.Int32)">
      <summary>Возвращает или задает объект <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> по указанному индексу.</summary>
      <param name="index">Индекс коллекции, к которой требуется получить доступ.</param>
      <returns>Объект <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> по каждому допустимому индексу.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="index" /> находится вне допустимого диапазона индексов для коллекции.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Remove(System.CodeDom.CodeAttributeDeclaration)">
      <summary>Удаляет указанный объект <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> из коллекции.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeAttributeDeclaration" />, удаляемый из коллекции.</param>
      <exception cref="T:System.ArgumentException">Указанный объект не найден в коллекции.</exception>
    </member>
    <member name="T:System.CodeDom.CodeBaseReferenceExpression">
      <summary>Представляет ссылку на базовый класс.</summary>
    </member>
    <member name="M:System.CodeDom.CodeBaseReferenceExpression.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeBaseReferenceExpression" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeBinaryOperatorExpression">
      <summary>Представляет выражение, состоящее из бинарной операции между двумя выражениями.</summary>
    </member>
    <member name="M:System.CodeDom.CodeBinaryOperatorExpression.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeBinaryOperatorExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeBinaryOperatorType,System.CodeDom.CodeExpression)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" />, используя заданные параметры.</summary>
      <param name="left">
        <see cref="T:System.CodeDom.CodeExpression" /> слева от оператора.</param>
      <param name="op">
        <see cref="T:System.CodeDom.CodeBinaryOperatorType" />, указывающий тип оператора.</param>
      <param name="right">
        <see cref="T:System.CodeDom.CodeExpression" /> справа от оператора.</param>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Left">
      <summary>Получает или задает кодовое выражение слева от оператора.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />, указывающий левый операнд.</returns>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Operator">
      <summary>Получает или задает оператор в выражении бинарного оператора.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeBinaryOperatorType" />, указывающий тип оператора в выражении.</returns>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Right">
      <summary>Получает или задает кодовое выражение справа от оператора.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />, указывающий правый операнд.</returns>
    </member>
    <member name="T:System.CodeDom.CodeBinaryOperatorType">
      <summary>Определяет идентификаторы для поддерживаемых бинарных операторов.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Add">
      <summary>Оператор сложения.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Assign">
      <summary>Оператор присвоения.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BitwiseAnd">
      <summary>Оператор "Битовое и".</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BitwiseOr">
      <summary>Оператор "Битовое или".</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BooleanAnd">
      <summary>Оператор "Логическое и". Представляет оператор сокращенного вычисления. Оператор сокращенного вычисления вычисляет только то количество выражений, которое необходимо для возврата правильного значения.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BooleanOr">
      <summary>Оператор "Логическое или". Представляет оператор сокращенного вычисления. Оператор сокращенного вычисления вычисляет только то количество выражений, которое необходимо для возврата правильного значения.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Divide">
      <summary>Оператор деления.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.GreaterThan">
      <summary>Оператор "Больше чем".</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.GreaterThanOrEqual">
      <summary>Оператор "Больше чем или равно".</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.IdentityEquality">
      <summary>Оператор "Идентификатор равен".</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.IdentityInequality">
      <summary>Оператор "Идентификатор не равен".</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.LessThan">
      <summary>Оператор "Меньше чем".</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.LessThanOrEqual">
      <summary>Оператор "Меньше чем или равно".</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Modulus">
      <summary>Оператор модуля.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Multiply">
      <summary>Оператор умножения.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Subtract">
      <summary>Оператор вычитания.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.ValueEquality">
      <summary>Оператор "Значение равно".</summary>
    </member>
    <member name="T:System.CodeDom.CodeCastExpression">
      <summary>Представляет приведение выражения к типу данных или интерфейсу.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeCastExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeCastExpression" />, используя указанные конечный тип и выражение.</summary>
      <param name="targetType">
        <see cref="T:System.CodeDom.CodeTypeReference" />, указывающий конечный тип приведения.</param>
      <param name="expression">
        <see cref="T:System.CodeDom.CodeExpression" /> для приведения.</param>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeCastExpression" />, используя указанные конечный тип и выражение.</summary>
      <param name="targetType">Имя конечного типа приведения.</param>
      <param name="expression">
        <see cref="T:System.CodeDom.CodeExpression" /> для приведения.</param>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.Type,System.CodeDom.CodeExpression)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeCastExpression" />, используя указанные конечный тип и выражение.</summary>
      <param name="targetType">Конечный тип данных приведения.</param>
      <param name="expression">
        <see cref="T:System.CodeDom.CodeExpression" /> для приведения.</param>
    </member>
    <member name="P:System.CodeDom.CodeCastExpression.Expression">
      <summary>Получает или задает выражение для приведения.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />, указывающий код для приведения.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCastExpression.TargetType">
      <summary>Получает или задает конечный тип приведения.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" />, указывающий конечный тип, к которому следует привести.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCatchClause">
      <summary>Представляет блок исключений <see langword="catch" /> оператора <see langword="try/catch" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeCatchClause" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeCatchClause" />, используя указанное имя локальной переменной для исключения.</summary>
      <param name="localName">Имя локальной переменной, объявленное в предложении перехвата для исключения. Делать это не обязательно.</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String,System.CodeDom.CodeTypeReference)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeCatchClause" />, используя указанное имя локальной переменной для исключения и тип исключения.</summary>
      <param name="localName">Имя локальной переменной, объявленное в предложении перехвата для исключения. Делать это не обязательно.</param>
      <param name="catchExceptionType">
        <see cref="T:System.CodeDom.CodeTypeReference" />, указывающий тип исключения для перехвата.</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String,System.CodeDom.CodeTypeReference,System.CodeDom.CodeStatement[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeCatchClause" />, используя указанное имя локальной переменной для исключения, тип исключения и коллекцию операторов.</summary>
      <param name="localName">Имя локальной переменной, объявленное в предложении перехвата для исключения. Делать это не обязательно.</param>
      <param name="catchExceptionType">
        <see cref="T:System.CodeDom.CodeTypeReference" />, указывающий тип исключения для перехвата.</param>
      <param name="statements">Массив объектов <see cref="T:System.CodeDom.CodeStatement" />, представляющий содержимое блока перехвата.</param>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.CatchExceptionType">
      <summary>Получает или задает тип исключения для обработки с помощью блока перехвата.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" />, указывающий тип исключения для обработки.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.LocalName">
      <summary>Получает или задает имя переменной исключения, обрабатываемого предложением <see langword="catch" />.</summary>
      <returns>Имя для переменной исключения, обрабатываемого предложением <see langword="catch" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.Statements">
      <summary>Получает операторы внутри блока перехвата.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatementCollection" /> содержит операторы внутри блока перехвата.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCatchClauseCollection">
      <summary>Представляет коллекцию объектов <see cref="T:System.CodeDom.CodeCatchClause" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeCatchClauseCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor(System.CodeDom.CodeCatchClause[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeCatchClauseCollection" />, содержащий указанный массив объектов <see cref="T:System.CodeDom.CodeCatchClause" />.</summary>
      <param name="value">Массив объектов <see cref="T:System.CodeDom.CodeCatchClause" />, которыми следует инициализировать коллекцию.</param>
      <exception cref="T:System.ArgumentNullException">Один или несколько объектов в массиве имеют значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor(System.CodeDom.CodeCatchClauseCollection)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeCatchClauseCollection" />, содержащий элементы указанной исходной коллекции.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeCatchClauseCollection" />, с помощью которого следует инициализировать коллекцию.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> — <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Add(System.CodeDom.CodeCatchClause)">
      <summary>Добавляет указанный объект <see cref="T:System.CodeDom.CodeCatchClause" /> в коллекцию.</summary>
      <param name="value">Добавляемый объект <see cref="T:System.CodeDom.CodeCatchClause" />.</param>
      <returns>Индекс, указывающий, куда был вставлен новый элемент.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.AddRange(System.CodeDom.CodeCatchClause[])">
      <summary>Копирует элементы указанного массива <see cref="T:System.CodeDom.CodeCatchClause" /> в конец коллекции.</summary>
      <param name="value">Массив типа <see cref="T:System.CodeDom.CodeCatchClause" />, содержащий объекты, добавляемые в коллекцию.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="value" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.AddRange(System.CodeDom.CodeCatchClauseCollection)">
      <summary>Копирует содержимое другого объекта <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> в конец коллекции.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeCatchClauseCollection" />, содержащий объекты, добавляемые в коллекцию.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="value" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Contains(System.CodeDom.CodeCatchClause)">
      <summary>Получает значение, которое указывает, содержит ли коллекция заданный объект <see cref="T:System.CodeDom.CodeCatchClause" />.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeCatchClause" />, который требуется найти в коллекции.</param>
      <returns>Значение <see langword="true" />, если коллекция содержит указанный объект; в обратном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.CopyTo(System.CodeDom.CodeCatchClause[],System.Int32)">
      <summary>Копирует объекты коллекции в одномерный экземпляр <see cref="T:System.Array" />, начинающийся с указанного индекса.</summary>
      <param name="array">Одномерный объект <see cref="T:System.Array" />, являющийся целевым для значений, скопированных из коллекции.</param>
      <param name="index">Индекс в массиве, с позиции которого требуется начать вставку.</param>
      <exception cref="T:System.ArgumentException">Массив назначения является многомерным.

или -
Количество элементов в <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> превышает доступное пространство между индексом конечного массива, указанного параметром <paramref name="index" />, и концом конечного массива.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="array" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="index" /> меньше, чем минимальный индекс целевого массива.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.IndexOf(System.CodeDom.CodeCatchClause)">
      <summary>Получает индекс в коллекции указанного объекта <see cref="T:System.CodeDom.CodeCatchClause" />, если он существует в коллекции.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeCatchClause" />, который требуется найти в коллекции.</param>
      <returns>Индекс в коллекции указанного объекта, если найден; в противном случае — значение -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Insert(System.Int32,System.CodeDom.CodeCatchClause)">
      <summary>Вставляет указанный объект <see cref="T:System.CodeDom.CodeCatchClause" /> в коллекцию по указанному индексу.</summary>
      <param name="index">Индекс, отсчитываемый от нуля, по которому следует вставить указанный объект.</param>
      <param name="value">Вставляемый объект <see cref="T:System.CodeDom.CodeCatchClause" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeCatchClauseCollection.Item(System.Int32)">
      <summary>Получает или задает объект <see cref="T:System.CodeDom.CodeCatchClause" /> по указанному индексу в коллекции.</summary>
      <param name="index">Индекс коллекции, к которой требуется получить доступ.</param>
      <returns>Объект <see cref="T:System.CodeDom.CodeCatchClause" /> на каждом допустимом индексе.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="index" /> находится вне допустимого диапазона индексов для коллекции.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Remove(System.CodeDom.CodeCatchClause)">
      <summary>Удаляет указанный объект <see cref="T:System.CodeDom.CodeCatchClause" /> из коллекции.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeCatchClause" />, удаляемый из коллекции.</param>
      <exception cref="T:System.ArgumentException">Указанный объект не найден в коллекции.</exception>
    </member>
    <member name="T:System.CodeDom.CodeChecksumPragma">
      <summary>Представляет сущность кода pragma для контрольной суммы кода.</summary>
    </member>
    <member name="M:System.CodeDom.CodeChecksumPragma.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeChecksumPragma" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeChecksumPragma.#ctor(System.String,System.Guid,System.Byte[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeChecksumPragma" /> с использованием имени файла, GUID, представляющего алгоритм контрольной суммы и потока байтов, представляющего данные контрольной суммы.</summary>
      <param name="fileName">Путь к файлу контрольной суммы.</param>
      <param name="checksumAlgorithmId">Значение <see cref="T:System.Guid" />, идентифицирующее используемый алгоритм контрольной суммы.</param>
      <param name="checksumData">Массив байтов, содержащий данные контрольной суммы.</param>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.ChecksumAlgorithmId">
      <summary>Получает или задает GUID, идентифицирующий используемый алгоритм контрольной суммы.</summary>
      <returns>Значение <see cref="T:System.Guid" />, идентифицирующее используемый алгоритм контрольной суммы.</returns>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.ChecksumData">
      <summary>Получает или задает значение данных для расчета контрольной суммы.</summary>
      <returns>Массив байтов, содержащий данные для расчета контрольной суммы.</returns>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.FileName">
      <summary>Получает или задает путь к файлу контрольной суммы.</summary>
      <returns>Путь к файлу контрольной суммы.</returns>
    </member>
    <member name="T:System.CodeDom.CodeComment">
      <summary>Представляет комментарий.</summary>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeComment" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeComment" /> с указанным текстом в качестве содержимого.</summary>
      <param name="text">Содержимое комментария.</param>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor(System.String,System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeComment" />, используя указанный текст и флаг комментария документации.</summary>
      <param name="text">Содержимое комментария.</param>
      <param name="docComment">Значение <see langword="true" />, если комментарий является комментарием документации; в противном случае — <see langword="false" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeComment.DocComment">
      <summary>Получает или задает значение, указывающее, является ли комментарий комментарием документации.</summary>
      <returns>Значение <see langword="true" />, если комментарий является комментарием документации; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeComment.Text">
      <summary>Получает или задает текст комментария.</summary>
      <returns>Строка, содержащая текст комментария.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCommentStatement">
      <summary>Представляет оператор, состоящий из одного комментария.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeCommentStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.CodeDom.CodeComment)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeCommentStatement" />, используя указанный комментарий.</summary>
      <param name="comment">
        <see cref="T:System.CodeDom.CodeComment" />, указывающий комментарий.</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeCommentStatement" />, используя указанный текст в качестве содержимого.</summary>
      <param name="text">Содержимое комментария.</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.String,System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeCommentStatement" />, используя указанный текст и флаг комментария документации.</summary>
      <param name="text">Содержимое комментария.</param>
      <param name="docComment">Значение <see langword="true" />, если комментарий является комментарием документации; в противном случае — <see langword="false" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeCommentStatement.Comment">
      <summary>Получает или задает содержимое комментария.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeComment" />, указывающий комментарий.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCommentStatementCollection">
      <summary>Представляет коллекцию объектов <see cref="T:System.CodeDom.CodeCommentStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeCommentStatementCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor(System.CodeDom.CodeCommentStatement[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeCommentStatementCollection" />, содержащий указанный массив объектов <see cref="T:System.CodeDom.CodeCommentStatement" />.</summary>
      <param name="value">Массив объектов <see cref="T:System.CodeDom.CodeCommentStatement" />, которыми следует инициализировать коллекцию.</param>
      <exception cref="T:System.ArgumentNullException">Один или несколько объектов в массиве имеют значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor(System.CodeDom.CodeCommentStatementCollection)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeCommentStatementCollection" />, содержащий элементы указанной исходной коллекции.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeCommentStatementCollection" />, с помощью которого следует инициализировать коллекцию.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> — <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Add(System.CodeDom.CodeCommentStatement)">
      <summary>Добавляет указанный объект <see cref="T:System.CodeDom.CodeCommentStatement" /> в коллекцию.</summary>
      <param name="value">Добавляемый объект <see cref="T:System.CodeDom.CodeCommentStatement" />.</param>
      <returns>Индекс, указывающий, куда был вставлен новый элемент.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.AddRange(System.CodeDom.CodeCommentStatement[])">
      <summary>Копирует элементы указанного массива <see cref="T:System.CodeDom.CodeCommentStatement" /> в конец коллекции.</summary>
      <param name="value">Массив типа <see cref="T:System.CodeDom.CodeCommentStatement" />, содержащий объекты, добавляемые в коллекцию.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> — <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.AddRange(System.CodeDom.CodeCommentStatementCollection)">
      <summary>Копирует содержимое другого объекта <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> в конец коллекции.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeCommentStatementCollection" />, содержащий объекты, добавляемые в коллекцию.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="value" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Contains(System.CodeDom.CodeCommentStatement)">
      <summary>Получает значение, которое указывает, содержит ли коллекция заданный объект <see cref="T:System.CodeDom.CodeCommentStatement" />.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeCommentStatement" /> для поиска в коллекции.</param>
      <returns>Значение <see langword="true" />, если коллекция содержит указанный объект; в обратном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.CopyTo(System.CodeDom.CodeCommentStatement[],System.Int32)">
      <summary>Копирует объекты коллекции в указанный одномерный экземпляр <see cref="T:System.Array" />, начинающийся с указанного индекса.</summary>
      <param name="array">Одномерный объект <see cref="T:System.Array" />, являющийся целевым для значений, скопированных из коллекции.</param>
      <param name="index">Индекс в массиве, с позиции которого требуется начать вставку.</param>
      <exception cref="T:System.ArgumentException">Массив назначения является многомерным.

или -
Количество элементов в <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> превышает доступное пространство между индексом конечного массива, указанного параметром <paramref name="index" />, и концом конечного массива.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="array" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="index" /> меньше, чем минимальный индекс целевого массива.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.IndexOf(System.CodeDom.CodeCommentStatement)">
      <summary>Получает индекс в коллекции указанного объекта <see cref="T:System.CodeDom.CodeCommentStatement" />, если он существует в коллекции.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeCommentStatement" />, который требуется обнаружить.</param>
      <returns>Индекс в коллекции указанного объекта, если найден; в противном случае — значение -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Insert(System.Int32,System.CodeDom.CodeCommentStatement)">
      <summary>Вставляет объект <see cref="T:System.CodeDom.CodeCommentStatement" /> в коллекцию по указанному индексу.</summary>
      <param name="index">Индекс, отсчитываемый от нуля, по которому следует вставить элемент.</param>
      <param name="value">Вставляемый объект <see cref="T:System.CodeDom.CodeCommentStatement" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeCommentStatementCollection.Item(System.Int32)">
      <summary>Получает или задает объект <see cref="T:System.CodeDom.CodeCommentStatement" /> по указанному индексу в коллекции.</summary>
      <param name="index">Индекс коллекции, к которой требуется получить доступ.</param>
      <returns>Объект <see cref="T:System.CodeDom.CodeCommentStatement" /> на каждом допустимом индексе.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="index" /> находится вне допустимого диапазона индексов для коллекции.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Remove(System.CodeDom.CodeCommentStatement)">
      <summary>Удаляет указанный объект <see cref="T:System.CodeDom.CodeCommentStatement" /> из коллекции.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeCommentStatement" />, удаляемый из коллекции.</param>
      <exception cref="T:System.ArgumentException">Указанный объект не найден в коллекции.</exception>
    </member>
    <member name="T:System.CodeDom.CodeCompileUnit">
      <summary>Предусматривает контейнер для программного графа CodeDOM.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCompileUnit.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.AssemblyCustomAttributes">
      <summary>Получает коллекцию пользовательских атрибутов для создаваемой сборки.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />, указывающий пользовательские атрибуты для создаваемой сборки.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.EndDirectives">
      <summary>Получает объект <see cref="T:System.CodeDom.CodeDirectiveCollection" />, содержащий конечные директивы.</summary>
      <returns>Объект <see cref="T:System.CodeDom.CodeDirectiveCollection" />, содержащий конечные директивы.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.Namespaces">
      <summary>Получает коллекцию пространств имен.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeNamespaceCollection" />, указывающий используемые единицей компиляции пространства имен.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.ReferencedAssemblies">
      <summary>Получает сборки, на которые осуществляется ссылка.</summary>
      <returns>
        <see cref="T:System.Collections.Specialized.StringCollection" />, содержащий имена файлов сборок, на которые осуществляется ссылка.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.StartDirectives">
      <summary>Получает объект <see cref="T:System.CodeDom.CodeDirectiveCollection" />, содержащий начальные директивы.</summary>
      <returns>Объект <see cref="T:System.CodeDom.CodeDirectiveCollection" />, содержащий начальные директивы.</returns>
    </member>
    <member name="T:System.CodeDom.CodeConditionStatement">
      <summary>Представляет условный оператор перехода, обычно представляемый как <see langword="if" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeConditionStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeStatement[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeConditionStatement" />, используя указанное условие и операторы.</summary>
      <param name="condition">
        <see cref="T:System.CodeDom.CodeExpression" />, указывающий выражение для вычисления.</param>
      <param name="trueStatements">Массив типа <see cref="T:System.CodeDom.CodeStatement" />, содержащий операторы для выполнения, если условие равно <see langword="true" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeStatement[],System.CodeDom.CodeStatement[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeConditionStatement" />, используя указанное условие и операторы.</summary>
      <param name="condition">
        <see cref="T:System.CodeDom.CodeExpression" />, указывающий условие для вычисления.</param>
      <param name="trueStatements">Массив типа <see cref="T:System.CodeDom.CodeStatement" />, содержащий операторы для выполнения, если условие равно <see langword="true" />.</param>
      <param name="falseStatements">Массив типа <see cref="T:System.CodeDom.CodeStatement" />, содержащий операторы для выполнения, если условие равно <see langword="false" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.Condition">
      <summary>Получает или задает выражение для вычисления <see langword="true" /> или <see langword="false" />.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> для вычисления <see langword="true" /> или <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.FalseStatements">
      <summary>Получает коллекцию операторов для выполнения, если условное выражение вычислено как <see langword="false" />.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatementCollection" />, содержащий операторы для выполнения, если условное выражение вычислено как <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.TrueStatements">
      <summary>Получает коллекцию операторов для выполнения, если условное выражение вычислено как <see langword="true" />.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatementCollection" />, содержащий операторы для выполнения, если условное выражение вычислено как <see langword="true" />.</returns>
    </member>
    <member name="T:System.CodeDom.CodeConstructor">
      <summary>Представляет объявление для конструктора экземпляра типа.</summary>
    </member>
    <member name="M:System.CodeDom.CodeConstructor.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeConstructor" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeConstructor.BaseConstructorArgs">
      <summary>Получает коллекцию аргументов базового конструктора.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpressionCollection" />, содержащий аргументы базового конструктора.</returns>
    </member>
    <member name="P:System.CodeDom.CodeConstructor.ChainedConstructorArgs">
      <summary>Получает коллекцию аргументов цепного конструктора.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpressionCollection" />, содержащий аргументы цепного конструктора.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDefaultValueExpression">
      <summary>Представляет ссылку на значение по умолчанию.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDefaultValueExpression.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeDefaultValueExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDefaultValueExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeDefaultValueExpression" />, используя указанную ссылку типа кода.</summary>
      <param name="type">Свойство <see cref="T:System.CodeDom.CodeTypeReference" />, указывающее тип значения для ссылки.</param>
    </member>
    <member name="P:System.CodeDom.CodeDefaultValueExpression.Type">
      <summary>Получает или задает ссылку типа данных для значения по умолчанию.</summary>
      <returns>Объект <see cref="T:System.CodeDom.CodeTypeReference" />, представляющий тип данных, имеющий значение по умолчанию.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDelegateCreateExpression">
      <summary>Представляет создающее делегат выражение.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateCreateExpression.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeDelegateCreateExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeDelegateCreateExpression" />.</summary>
      <param name="delegateType">Значение <see cref="T:System.CodeDom.CodeTypeReference" />, указывающее тип данных делегата.</param>
      <param name="targetObject">Значение <see cref="T:System.CodeDom.CodeExpression" />, указывающее объект, содержащий метод обработчика событий.</param>
      <param name="methodName">Имя метода обработчика событий.</param>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.DelegateType">
      <summary>Получает или задает тип данных делегата.</summary>
      <returns>Значение <see cref="T:System.CodeDom.CodeTypeReference" />, указывающее тип данных делегата.</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.MethodName">
      <summary>Получает или задает имя метода обработчика событий.</summary>
      <returns>Имя метода обработчика событий.</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.TargetObject">
      <summary>Получает или задает объект, содержащий метод обработчика событий.</summary>
      <returns>Значение <see cref="T:System.CodeDom.CodeExpression" />, указывающее объект, содержащий метод обработчика событий.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDelegateInvokeExpression">
      <summary>Представляет выражение, вызывающее событие.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor(System.CodeDom.CodeExpression)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" />, используя указанный целевой объект.</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" />, указывающий целевой объект.</param>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" />, используя указанные целевой объект и параметры.</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" />, указывающий целевой объект.</param>
      <param name="parameters">Массив объектов <see cref="T:System.CodeDom.CodeExpression" />, указывающих параметры.</param>
    </member>
    <member name="P:System.CodeDom.CodeDelegateInvokeExpression.Parameters">
      <summary>Получает или задает параметры для передачи методам обработки событий, вложенным в событие.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />, указывающий параметры для передачи методам обработки событий, вложенным в событие.</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateInvokeExpression.TargetObject">
      <summary>Получает или задает событие для вызова.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />, указывающий событие для вызова.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDirectionExpression">
      <summary>Представляет выражение, используемое как параметр вызова метода вместе с индикатором направления ссылки.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectionExpression.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeDirectionExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectionExpression.#ctor(System.CodeDom.FieldDirection,System.CodeDom.CodeExpression)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeDirectionExpression" />, используя указанное направление поля и выражение.</summary>
      <param name="direction">
        <see cref="T:System.CodeDom.FieldDirection" /> указывает направление поля выражения.</param>
      <param name="expression">
        <see cref="T:System.CodeDom.CodeExpression" /> указывает кодовое выражение для представления.</param>
    </member>
    <member name="P:System.CodeDom.CodeDirectionExpression.Direction">
      <summary>Получает или задает направление поля для выражения направления.</summary>
      <returns>
        <see cref="T:System.CodeDom.FieldDirection" /> указывает направление поля для данного выражения направления.</returns>
    </member>
    <member name="P:System.CodeDom.CodeDirectionExpression.Expression">
      <summary>Получает или задает кодовое выражение для представления.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />, указывающий выражение для представления.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDirective">
      <summary>Служит базовым классом для классов директивы кода.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirective.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeDirective" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeDirectiveCollection">
      <summary>Представляет коллекцию объектов <see cref="T:System.CodeDom.CodeDirective" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeDirectiveCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor(System.CodeDom.CodeDirective[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeDirectiveCollection" /> с объектами директивы кода в заданном массиве.</summary>
      <param name="value">Массив объектов <see cref="T:System.CodeDom.CodeDirective" />, которыми следует инициализировать коллекцию.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> — <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor(System.CodeDom.CodeDirectiveCollection)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeDirectiveCollection" /> с элементами в заданной коллекции директив кода.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeDirectiveCollection" />, с помощью которого следует инициализировать коллекцию.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="value" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Add(System.CodeDom.CodeDirective)">
      <summary>Добавляет указанный объект <see cref="T:System.CodeDom.CodeDirective" /> в коллекцию.</summary>
      <param name="value">Добавляемый объект <see cref="T:System.CodeDom.CodeDirective" />.</param>
      <returns>Позиция индекса, на которой был вставлен новый элемент.</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.AddRange(System.CodeDom.CodeDirective[])">
      <summary>Добавляет массив объектов <see cref="T:System.CodeDom.CodeDirective" /> к концу коллекции.</summary>
      <param name="value">Массив объектов <see cref="T:System.CodeDom.CodeDirective" />, добавляемый в коллекцию.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> — <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.AddRange(System.CodeDom.CodeDirectiveCollection)">
      <summary>Добавляет содержимое указанного объекта <see cref="T:System.CodeDom.CodeDirectiveCollection" /> в конец коллекции.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeDirectiveCollection" />, содержащий объекты <see cref="T:System.CodeDom.CodeDirective" /> для добавления к коллекции.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="value" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Contains(System.CodeDom.CodeDirective)">
      <summary>Получает значение, указывающее, содержится ли указанный объект <see cref="T:System.CodeDom.CodeDirective" /> в коллекции.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeDirective" /> для поиска в коллекции.</param>
      <returns>Значение <see langword="true" />, если коллекция содержит указанный объект; в обратном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.CopyTo(System.CodeDom.CodeDirective[],System.Int32)">
      <summary>Копирует содержимое коллекции в одномерный массив, начиная с указанного индекса.</summary>
      <param name="array">Массив типа <see cref="T:System.CodeDom.CodeDirective" />, являющийся назначением для значений, скопированных из коллекции.</param>
      <param name="index">Индекс в массиве, с позиции которого требуется начать вставку объектов коллекции.</param>
      <exception cref="T:System.ArgumentException">Массив назначения является многомерным.

или -
Количество элементов в <see cref="T:System.CodeDom.CodeDirectiveCollection" /> превышает доступное пространство между индексом конечного массива, указанного <paramref name="index" />, и концом конечного массива.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> — <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> меньше минимального индекса целевого массива.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.IndexOf(System.CodeDom.CodeDirective)">
      <summary>Получает индекс в коллекции указанного объекта <see cref="T:System.CodeDom.CodeDirective" />, если он существует в коллекции.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeDirective" />, который требуется найти в коллекции.</param>
      <returns>Позиция индекса в коллекции указанного объекта, если найден; в противном случае — значение -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Insert(System.Int32,System.CodeDom.CodeDirective)">
      <summary>Вставляет указанный объект <see cref="T:System.CodeDom.CodeDirective" /> в коллекцию по указанному индексу.</summary>
      <param name="index">Позиция индекса, отсчитываемая от нуля, по которой следует вставить указанный объект.</param>
      <param name="value">Вставляемый объект <see cref="T:System.CodeDom.CodeDirective" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="index" /> меньше 0.
-или-
Значение <paramref name="index" /> больше значения <see cref="P:System.Collections.CollectionBase.Count" />.</exception>
    </member>
    <member name="P:System.CodeDom.CodeDirectiveCollection.Item(System.Int32)">
      <summary>Получает или задает объект <see cref="T:System.CodeDom.CodeDirective" /> по указанному индексу в коллекции.</summary>
      <param name="index">Позиция индекса, по которому производится доступ.</param>
      <returns>Объект <see cref="T:System.CodeDom.CodeDirective" /> на позиции индекса.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="index" /> находится вне диапазона допустимых позиций индексов коллекции.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Remove(System.CodeDom.CodeDirective)">
      <summary>Удаляет указанный объект <see cref="T:System.CodeDom.CodeDirective" /> из коллекции.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeDirective" />, удаляемый из коллекции.</param>
      <exception cref="T:System.ArgumentException">Указанный объект не найден в коллекции.</exception>
    </member>
    <member name="T:System.CodeDom.CodeEntryPointMethod">
      <summary>Представляет метод точки входа исполняемого файла.</summary>
    </member>
    <member name="M:System.CodeDom.CodeEntryPointMethod.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeEntryPointMethod" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeEventReferenceExpression">
      <summary>Представляет ссылку на событие.</summary>
    </member>
    <member name="M:System.CodeDom.CodeEventReferenceExpression.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeEventReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeEventReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeEventReferenceExpression" />, используя указанные конечный объект и имя события.</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" /> указывает содержащий событие объект.</param>
      <param name="eventName">Имя события для ссылки.</param>
    </member>
    <member name="P:System.CodeDom.CodeEventReferenceExpression.EventName">
      <summary>Получает или задает имя события.</summary>
      <returns>Имя события.</returns>
    </member>
    <member name="P:System.CodeDom.CodeEventReferenceExpression.TargetObject">
      <summary>Получает или задает объект, содержащий событие.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> указывает содержащий событие объект.</returns>
    </member>
    <member name="T:System.CodeDom.CodeExpression">
      <summary>Представляет кодовое выражение. Это базовый класс для других объектов кодовых выражений, который никогда не создается.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpression.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeExpression" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeExpressionCollection">
      <summary>Представляет коллекцию объектов <see cref="T:System.CodeDom.CodeExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeExpressionCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor(System.CodeDom.CodeExpression[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeExpressionCollection" />, содержащий указанный массив объектов <see cref="T:System.CodeDom.CodeExpression" />.</summary>
      <param name="value">Массив объектов <see cref="T:System.CodeDom.CodeExpression" />, которыми следует инициализировать коллекцию.</param>
      <exception cref="T:System.ArgumentNullException">Один или несколько объектов в массиве имеют значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor(System.CodeDom.CodeExpressionCollection)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeExpressionCollection" />, содержащий элементы указанной исходной коллекции.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeExpressionCollection" />, с помощью которого следует инициализировать коллекцию.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="value" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Add(System.CodeDom.CodeExpression)">
      <summary>Добавляет указанный объект <see cref="T:System.CodeDom.CodeExpression" /> в коллекцию.</summary>
      <param name="value">Добавляемый объект <see cref="T:System.CodeDom.CodeExpression" />.</param>
      <returns>Индекс, указывающий, куда был вставлен новый элемент.</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.AddRange(System.CodeDom.CodeExpression[])">
      <summary>Копирует элементы указанного массива в конец коллекции.</summary>
      <param name="value">Массив типа <see cref="T:System.CodeDom.CodeExpression" />, содержащий объекты, добавляемые в коллекцию.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="value" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.AddRange(System.CodeDom.CodeExpressionCollection)">
      <summary>Копирует содержимое другого объекта <see cref="T:System.CodeDom.CodeExpressionCollection" /> в конец коллекции.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeExpressionCollection" />, содержащий объекты, добавляемые в коллекцию.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="value" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Contains(System.CodeDom.CodeExpression)">
      <summary>Получает значение, которое указывает, содержит ли коллекция заданный объект <see cref="T:System.CodeDom.CodeExpression" />.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeExpression" />, который требуется найти в коллекции.</param>
      <returns>Значение <see langword="true" />, если коллекция содержит указанный объект; в обратном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.CopyTo(System.CodeDom.CodeExpression[],System.Int32)">
      <summary>Копирует объекты коллекции в одномерный экземпляр <see cref="T:System.Array" />, начинающийся с указанного индекса.</summary>
      <param name="array">Одномерный объект <see cref="T:System.Array" />, являющийся целевым для значений, скопированных из коллекции.</param>
      <param name="index">Индекс в массиве, с позиции которого требуется начать вставку.</param>
      <exception cref="T:System.ArgumentException">Массив назначения является многомерным.
-или-
Количество элементов в <see cref="T:System.CodeDom.CodeExpressionCollection" /> превышает доступное пространство между индексом конечного массива, указанного параметром <paramref name="index" />, и концом конечного массива.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="array" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="index" /> меньше, чем минимальный индекс целевого массива.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.IndexOf(System.CodeDom.CodeExpression)">
      <summary>Получает индекс в коллекции указанного объекта <see cref="T:System.CodeDom.CodeExpression" />, если он существует в коллекции.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeExpression" />, который требуется найти в коллекции.</param>
      <returns>Индекс в коллекции указанного объекта, если найден; в противном случае — значение -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Insert(System.Int32,System.CodeDom.CodeExpression)">
      <summary>Вставляет указанный объект <see cref="T:System.CodeDom.CodeExpression" /> в коллекцию по указанному индексу.</summary>
      <param name="index">Индекс, отсчитываемый от нуля, по которому следует вставить указанный объект.</param>
      <param name="value">Вставляемый объект <see cref="T:System.CodeDom.CodeExpression" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeExpressionCollection.Item(System.Int32)">
      <summary>Получает или задает объект <see cref="T:System.CodeDom.CodeExpression" /> по указанному индексу в коллекции.</summary>
      <param name="index">Индекс коллекции для доступа, отсчитываемый от нуля.</param>
      <returns>Объект <see cref="T:System.CodeDom.CodeExpression" /> на каждом допустимом индексе.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="index" /> находится вне допустимого диапазона индексов для коллекции.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Remove(System.CodeDom.CodeExpression)">
      <summary>Удаляет указанный объект <see cref="T:System.CodeDom.CodeExpression" /> из коллекции.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeExpression" />, удаляемый из коллекции.</param>
      <exception cref="T:System.ArgumentException">Указанный объект не найден в коллекции.</exception>
    </member>
    <member name="T:System.CodeDom.CodeExpressionStatement">
      <summary>Представляет оператор, состоящий из одного выражения.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionStatement.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeExpressionStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeExpressionStatement" />, используя указанное выражение.</summary>
      <param name="expression">
        <see cref="T:System.CodeDom.CodeExpression" /> для оператора.</param>
    </member>
    <member name="P:System.CodeDom.CodeExpressionStatement.Expression">
      <summary>Получает или задает выражение для оператора.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> указывает выражение для оператора.</returns>
    </member>
    <member name="T:System.CodeDom.CodeFieldReferenceExpression">
      <summary>Представляет ссылку на поле.</summary>
    </member>
    <member name="M:System.CodeDom.CodeFieldReferenceExpression.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeFieldReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeFieldReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeFieldReferenceExpression" />, используя указанные конечный объект и имя поля.</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" />, указывающий содержащий поле объект.</param>
      <param name="fieldName">Имя поля.</param>
    </member>
    <member name="P:System.CodeDom.CodeFieldReferenceExpression.FieldName">
      <summary>Получает или задает имя поля для ссылки.</summary>
      <returns>Строка, содержащая имя поля.</returns>
    </member>
    <member name="P:System.CodeDom.CodeFieldReferenceExpression.TargetObject">
      <summary>Получает или задает объект, содержащий поле для ссылки.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />, указывающий объект, содержащий поле для ссылки.</returns>
    </member>
    <member name="T:System.CodeDom.CodeGotoStatement">
      <summary>Представляет оператор <see langword="goto" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeGotoStatement.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeGotoStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeGotoStatement.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeGotoStatement" />, используя указанное имя метки.</summary>
      <param name="label">Имя метки, откуда следует продолжить выполнение программы.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Label" /> — <see langword="null" />.</exception>
    </member>
    <member name="P:System.CodeDom.CodeGotoStatement.Label">
      <summary>Получает или задает имя метки, откуда следует продолжить выполнение программы.</summary>
      <returns>Строка, указывающая имя метки, откуда следует продолжить выполнение программы.</returns>
      <exception cref="T:System.ArgumentNullException">Метка не может быть задана, так как <paramref name="value" /> имеет значение <see langword="null" /> или является пустой строкой.</exception>
    </member>
    <member name="T:System.CodeDom.CodeIndexerExpression">
      <summary>Представляет ссылку на свойство индексатора объекта.</summary>
    </member>
    <member name="M:System.CodeDom.CodeIndexerExpression.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeIndexerExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeIndexerExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeIndexerExpression" />, используя указанные целевой объект и индекс.</summary>
      <param name="targetObject">Целевой объект.</param>
      <param name="indices">Индекс или индексы выражения индексатора.</param>
    </member>
    <member name="P:System.CodeDom.CodeIndexerExpression.Indices">
      <summary>Получает коллекцию индексов выражения индексатора.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpressionCollection" />, указывающий индекс или индексы выражения индексатора.</returns>
    </member>
    <member name="P:System.CodeDom.CodeIndexerExpression.TargetObject">
      <summary>Получает или задает целевой объект, который может быть проиндексирован.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />, указывающий объект индексатора.</returns>
    </member>
    <member name="T:System.CodeDom.CodeIterationStatement">
      <summary>Представляет оператор <see langword="for" /> или цикл по блоку операторов, использующие выражение проверки как условие для продолжения цикла.</summary>
    </member>
    <member name="M:System.CodeDom.CodeIterationStatement.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeIterationStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeIterationStatement.#ctor(System.CodeDom.CodeStatement,System.CodeDom.CodeExpression,System.CodeDom.CodeStatement,System.CodeDom.CodeStatement[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeIterationStatement" />, используя заданные параметры.</summary>
      <param name="initStatement">
        <see cref="T:System.CodeDom.CodeStatement" /> содержит оператор инициализации цикла.</param>
      <param name="testExpression">
        <see cref="T:System.CodeDom.CodeExpression" /> содержит выражение для проверки выходного условия.</param>
      <param name="incrementStatement">
        <see cref="T:System.CodeDom.CodeStatement" /> содержит оператор приращения по циклам.</param>
      <param name="statements">Массив типа <see cref="T:System.CodeDom.CodeStatement" />, содержащий операторы внутри цикла.</param>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.IncrementStatement">
      <summary>Получает или задает оператор, вызываемый после каждого прохода цикла.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatement" />, указывающий оператор приращения по циклам.</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.InitStatement">
      <summary>Получает или задает оператор инициализации цикла.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatement" />, указывающий оператор инициализации цикла.</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.Statements">
      <summary>Получает коллекцию операторов для выполнения внутри цикла.</summary>
      <returns>Массив типа <see cref="T:System.CodeDom.CodeStatement" />, указывающий операторы внутри цикла.</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.TestExpression">
      <summary>Получает или задает выражение для проверки как условие продолжения цикла.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />, указывающий выражение для проверки.</returns>
    </member>
    <member name="T:System.CodeDom.CodeLabeledStatement">
      <summary>Представляет оператор с меткой или отдельную метку.</summary>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeLabeledStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeLabeledStatement" />, используя указанное имя метки.</summary>
      <param name="label">Имя метки.</param>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor(System.String,System.CodeDom.CodeStatement)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeLabeledStatement" />, используя указанные имя метки и оператор.</summary>
      <param name="label">Имя метки.</param>
      <param name="statement">
        <see cref="T:System.CodeDom.CodeStatement" /> для связи с меткой.</param>
    </member>
    <member name="P:System.CodeDom.CodeLabeledStatement.Label">
      <summary>Получает или задает имя метки.</summary>
      <returns>Имя метки.</returns>
    </member>
    <member name="P:System.CodeDom.CodeLabeledStatement.Statement">
      <summary>Получает или задает необязательный соответствующий оператор.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatement" />, указывающий связанный с меткой оператор.</returns>
    </member>
    <member name="T:System.CodeDom.CodeLinePragma">
      <summary>Представляет конкретное место внутри конкретного файла.</summary>
    </member>
    <member name="M:System.CodeDom.CodeLinePragma.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeLinePragma" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeLinePragma.#ctor(System.String,System.Int32)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeLinePragma" />.</summary>
      <param name="fileName">Имя связанного файла.</param>
      <param name="lineNumber">Номер строки для сохранения ссылки.</param>
    </member>
    <member name="P:System.CodeDom.CodeLinePragma.FileName">
      <summary>Получает или задает имя связанного файла.</summary>
      <returns>Имя связанного файла.</returns>
    </member>
    <member name="P:System.CodeDom.CodeLinePragma.LineNumber">
      <summary>Получает или задает номер строки связанной ссылки.</summary>
      <returns>Номер строки.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberEvent">
      <summary>Представляет объявление для события типа.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberEvent.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeMemberEvent" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.ImplementationTypes">
      <summary>Получает или задает тип данных, которые реализует событие члена.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />, указывающий тип или типы данных, реализуемых событием члена.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.PrivateImplementationType">
      <summary>Получает или задает закрыто реализованный тип данных, если он имеется.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" />, указывающий тип данных, приватно реализуемый событием.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.Type">
      <summary>Получает или задает тип данных типа делегата, который обрабатывает событие.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" />, указывающий тип делегата, обрабатывающего событие.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberField">
      <summary>Представляет объявление для поля типа.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeMemberField" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeMemberField" />, используя указанные тип и имя поля.</summary>
      <param name="type">Объект, указывающий тип поля.</param>
      <param name="name">Имя поля.</param>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.String,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeMemberField" />, используя указанные тип и имя поля.</summary>
      <param name="type">Тип поля.</param>
      <param name="name">Имя поля.</param>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.Type,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeMemberField" />, используя указанные тип и имя поля.</summary>
      <param name="type">Тип поля.</param>
      <param name="name">Имя поля.</param>
    </member>
    <member name="P:System.CodeDom.CodeMemberField.InitExpression">
      <summary>Получает или задает выражение инициализации для поля.</summary>
      <returns>Выражение инициализации для поля.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberField.Type">
      <summary>Получает или задает тип поля.</summary>
      <returns>Тип поля.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberMethod">
      <summary>Представляет объявление для метода типа.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberMethod.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeMemberMethod" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ImplementationTypes">
      <summary>Получает типы данных интерфейсов, реализованных данным методом, только если это не закрытая реализация метода, на которую указывает свойство <see cref="P:System.CodeDom.CodeMemberMethod.PrivateImplementationType" />.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />, указывающий реализованные данным методом интерфейсы.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.Parameters">
      <summary>Получает объявления параметра для метода.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />, указывающий параметры метода.</returns>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateImplementationTypes">
      <summary>Событие, которое будет вызвано в первый раз при доступе к коллекции <see cref="P:System.CodeDom.CodeMemberMethod.ImplementationTypes" />.</summary>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateParameters">
      <summary>Событие, которое будет вызвано в первый раз при доступе к коллекции <see cref="P:System.CodeDom.CodeMemberMethod.Parameters" />.</summary>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateStatements">
      <summary>Событие, которое будет вызвано в первый раз при доступе к коллекции <see cref="P:System.CodeDom.CodeMemberMethod.Statements" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.PrivateImplementationType">
      <summary>Получает или задает тип данных метода интерфейса, который данный метод, если он является частным, реализует (при наличии).</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" />, указывающий тип данных интерфейса с методом, который реализуется с помощью частного метода, чье объявление представлено как <see cref="T:System.CodeDom.CodeMemberMethod" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ReturnType">
      <summary>Получает или задает тип данных возвращаемого значения метода.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" />, указывающий тип данных возвращаемого методом значения.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ReturnTypeCustomAttributes">
      <summary>Получает пользовательские атрибуты возвращенного типа метода.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />, указывающий пользовательские атрибуты.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.Statements">
      <summary>Получает операторы внутри метода.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatementCollection" />, указывающий операторы внутри метода.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.TypeParameters">
      <summary>Получает параметры типа для текущего универсального метода.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeParameterCollection" />, содержащий параметры типа для универсального метода.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberProperty">
      <summary>Представляет объявление для свойства типа.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberProperty.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeMemberProperty" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.GetStatements">
      <summary>Получает коллекцию операторов <see langword="get" /> для свойства.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatementCollection" />, содержащий операторы <see langword="get" /> для свойства элемента.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.HasGet">
      <summary>Получает или задает значение, указывающее, имеет ли свойство метод доступа <see langword="get" />.</summary>
      <returns>Значение <see langword="true" />, если свойство <see langword="Count" /> коллекции <see cref="P:System.CodeDom.CodeMemberProperty.GetStatements" /> отлично от нуля или если значение данного свойства было задано как <see langword="true" />; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.HasSet">
      <summary>Получает или задает значение, указывающее, имеет ли свойство метод доступа <see langword="set" />.</summary>
      <returns>Значение <see langword="true" />, если свойство <see cref="P:System.Collections.CollectionBase.Count" /> коллекции <see cref="P:System.CodeDom.CodeMemberProperty.SetStatements" /> отлично от нуля; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.ImplementationTypes">
      <summary>Получает типы данных любого интерфейса, реализованного свойством.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />, указывающий типы данных, реализуемых свойством.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.Parameters">
      <summary>Получает коллекцию выражений объявлений для свойства.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />, указывающий выражение объявлений для свойства.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.PrivateImplementationType">
      <summary>Получает или задает тип данных интерфейса (при наличии), который реализует данное свойство, если оно является закрытым.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" /> указывает тип данных интерфейса (при наличии), который свойство, если оно является частным, реализует.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.SetStatements">
      <summary>Получает коллекцию операторов <see langword="set" /> для свойства.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatementCollection" />, содержащий операторы <see langword="set" /> для свойства элемента.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.Type">
      <summary>Получает или задает тип данных свойства.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" />, указывающий тип данных свойства.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodInvokeExpression">
      <summary>Представляет выражение, вызывающее метод.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeMethodInvokeExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeMethodInvokeExpression" />, используя указанный конечный объект, имя метода и параметры.</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" />, указывающий конечный объект с методом для вызова.</param>
      <param name="methodName">Имя вызываемого метода.</param>
      <param name="parameters">Массив объектов <see cref="T:System.CodeDom.CodeExpression" />, указывающий параметры вызова метода.</param>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor(System.CodeDom.CodeMethodReferenceExpression,System.CodeDom.CodeExpression[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeMethodInvokeExpression" />, используя указанный метод и параметры.</summary>
      <param name="method">
        <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />, указывающий метод для вызова.</param>
      <param name="parameters">Массив объектов <see cref="T:System.CodeDom.CodeExpression" />, указывающих параметры вызова метода.</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodInvokeExpression.Method">
      <summary>Получает или задает метод для вызова.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />, указывающий метод для вызова.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodInvokeExpression.Parameters">
      <summary>Получает параметры вызова метода.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpressionCollection" />, указывающий параметры вызова метода.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodReferenceExpression">
      <summary>Представляет ссылку на метод.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />, используя указанные целевой объект и имя метода.</summary>
      <param name="targetObject">Объект <see cref="T:System.CodeDom.CodeExpression" />, указывающий объект цели.</param>
      <param name="methodName">Имя вызываемого метода.</param>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeTypeReference[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />, используя указанные целевой объект, имя метода и аргументы универсального типа.</summary>
      <param name="targetObject">Объект <see cref="T:System.CodeDom.CodeExpression" />, указывающий объект цели.</param>
      <param name="methodName">Имя вызываемого метода.</param>
      <param name="typeParameters">Массив значений <see cref="T:System.CodeDom.CodeTypeReference" />, указывающих свойство <see cref="P:System.CodeDom.CodeMethodReferenceExpression.TypeArguments" /> для данного объекта <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.MethodName">
      <summary>Получает или задает имя метода для ссылки.</summary>
      <returns>Имя метода для ссылки.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.TargetObject">
      <summary>Получает или задает выражение, указывающее метод для ссылки.</summary>
      <returns>Объект <see cref="T:System.CodeDom.CodeExpression" />, представляющий метод для ссылки.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.TypeArguments">
      <summary>Получает аргументы типа для выражения ссылки текущего универсального метода.</summary>
      <returns>Объект <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />, содержащий аргументы типа для объекта <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> в текущем коде.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodReturnStatement">
      <summary>Представляет оператор возвращаемого значения.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReturnStatement.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeMethodReturnStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReturnStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeMethodReturnStatement" />, используя указанное выражение.</summary>
      <param name="expression">
        <see cref="T:System.CodeDom.CodeExpression" /> указывает возвращаемое значение.</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodReturnStatement.Expression">
      <summary>Получает или задает возвращаемое значение.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />, указывающий возвращаемое значение для возвращаемого оператора или <see langword="null" />, если оператор является частью подпрограммы.</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespace">
      <summary>Представляет объявление пространства имен.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespace.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeNamespace" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespace.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeNamespace" /> с использованием указанного имени.</summary>
      <param name="name">Имя объявляемого пространства имен.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Comments">
      <summary>Получает комментарии для пространства имен.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> указывает комментарии для пространства имен.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Imports">
      <summary>Получает коллекцию директив импорта пространства имен, используемую пространством имен.</summary>
      <returns>Свойство <see cref="T:System.CodeDom.CodeNamespaceImportCollection" /> указывает директивы импорта пространства имен, используемые пространством имен.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Name">
      <summary>Получает или задает имя пространства имен.</summary>
      <returns>Имя пространства имен.</returns>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateComments">
      <summary>Событие, которое будет вызвано в первый раз при доступе к коллекции <see cref="P:System.CodeDom.CodeNamespace.Comments" />.</summary>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateImports">
      <summary>Событие, которое будет вызвано в первый раз при доступе к коллекции <see cref="P:System.CodeDom.CodeNamespace.Imports" />.</summary>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateTypes">
      <summary>Событие, которое будет вызвано в первый раз при доступе к коллекции <see cref="P:System.CodeDom.CodeNamespace.Types" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Types">
      <summary>Получает коллекцию типов, содержащихся в пространстве имен.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> указывает типы, содержащиеся в пространстве имен.</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceCollection">
      <summary>Представляет коллекцию объектов <see cref="T:System.CodeDom.CodeNamespace" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeNamespaceCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor(System.CodeDom.CodeNamespace[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeNamespaceCollection" />, содержащий указанный массив объектов <see cref="T:System.CodeDom.CodeNamespace" />.</summary>
      <param name="value">Массив объектов <see cref="T:System.CodeDom.CodeNamespace" />, которыми следует инициализировать коллекцию.</param>
      <exception cref="T:System.ArgumentNullException">Один или несколько объектов в массиве имеют значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor(System.CodeDom.CodeNamespaceCollection)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeNamespaceCollection" />, содержащий элементы указанной исходной коллекции.</summary>
      <param name="value">С помощью <see cref="T:System.CodeDom.CodeNamespaceCollection" /> следует инициализировать коллекцию.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="value" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Add(System.CodeDom.CodeNamespace)">
      <summary>Добавляет указанный объект <see cref="T:System.CodeDom.CodeNamespace" /> в коллекцию.</summary>
      <param name="value">Добавляемый объект <see cref="T:System.CodeDom.CodeNamespace" />.</param>
      <returns>Индекс, указывающий, куда был вставлен новый элемент.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.AddRange(System.CodeDom.CodeNamespace[])">
      <summary>Копирует элементы указанного массива <see cref="T:System.CodeDom.CodeNamespace" /> в конец коллекции.</summary>
      <param name="value">Массив типа <see cref="T:System.CodeDom.CodeNamespace" />, содержащий объекты, добавляемые в коллекцию.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="value" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.AddRange(System.CodeDom.CodeNamespaceCollection)">
      <summary>Добавляет содержимое указанного объекта <see cref="T:System.CodeDom.CodeNamespaceCollection" /> в конец коллекции.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeNamespaceCollection" />, содержащий объекты, добавляемые в коллекцию.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> — <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Contains(System.CodeDom.CodeNamespace)">
      <summary>Получает значение, которое указывает, содержит ли коллекция заданный объект <see cref="T:System.CodeDom.CodeNamespace" />.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeNamespace" /> для поиска в коллекции.</param>
      <returns>Возвращается <see langword="true" />, если коллекция содержит элемент <see cref="T:System.CodeDom.CodeNamespace" />. В противном случае возвращается <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.CopyTo(System.CodeDom.CodeNamespace[],System.Int32)">
      <summary>Копирует объекты коллекции в одномерный экземпляр <see cref="T:System.Array" />, начиная с указанного индекса.</summary>
      <param name="array">Одномерный объект <see cref="T:System.Array" />, являющийся целевым для значений, скопированных из коллекции.</param>
      <param name="index">Индекс в массиве, с позиции которого требуется начать вставку.</param>
      <exception cref="T:System.ArgumentException">Массив назначения является многомерным.

или -
Количество элементов в <see cref="T:System.CodeDom.CodeNamespaceCollection" /> превышает доступное пространство между индексом конечного массива, указанного параметром <paramref name="index" />, и концом конечного массива.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="array" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="index" /> меньше, чем минимальный индекс целевого массива.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.IndexOf(System.CodeDom.CodeNamespace)">
      <summary>Получает значение указанного объекта <see cref="T:System.CodeDom.CodeNamespace" /> в <see cref="T:System.CodeDom.CodeNamespaceCollection" />, если он существует в коллекции.</summary>
      <param name="value">Искомый объект <see cref="T:System.CodeDom.CodeNamespace" />.</param>
      <returns>Индекс указанной <see cref="T:System.CodeDom.CodeNamespace" /> в коллекции, если найден; в противном случае — значение -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Insert(System.Int32,System.CodeDom.CodeNamespace)">
      <summary>Вставляет указанный объект <see cref="T:System.CodeDom.CodeNamespace" /> в коллекцию по указанному индексу.</summary>
      <param name="index">Индекс, отсчитываемый от нуля, по которому следует вставить новый элемент.</param>
      <param name="value">Вставляемый объект <see cref="T:System.CodeDom.CodeNamespace" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceCollection.Item(System.Int32)">
      <summary>Получает или задает объект <see cref="T:System.CodeDom.CodeNamespaceCollection" /> по указанному индексу в коллекции.</summary>
      <param name="index">Индекс коллекции, к которой требуется получить доступ.</param>
      <returns>Объект <see cref="T:System.CodeDom.CodeNamespace" /> по каждому допустимому индексу.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="index" /> находится вне допустимого диапазона индексов для коллекции.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Remove(System.CodeDom.CodeNamespace)">
      <summary>Удаляет указанный объект <see cref="T:System.CodeDom.CodeNamespace" /> из коллекции.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeNamespace" />, который требуется удалить из коллекции.</param>
      <exception cref="T:System.ArgumentException">Указанный объект не найден в коллекции.</exception>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceImport">
      <summary>Представляет директиву импорта пространства имен, указывающую пространство имен для использования.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImport.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeNamespaceImport" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImport.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeNamespaceImport" />, используя указанное импортируемое пространство имен.</summary>
      <param name="nameSpace">Имя пространства имен для импорта.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImport.LinePragma">
      <summary>Получает или задает строку и файл, где происходит оператор.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeLinePragma" />, указывающий контекст оператора.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImport.Namespace">
      <summary>Получает или задает пространство имен для импорта.</summary>
      <returns>Имя пространства имен для импорта.</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceImportCollection">
      <summary>Представляет коллекцию объектов <see cref="T:System.CodeDom.CodeNamespaceImport" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeNamespaceImportCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.Add(System.CodeDom.CodeNamespaceImport)">
      <summary>Добавляет объект <see cref="T:System.CodeDom.CodeNamespaceImport" /> в коллекцию.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeNamespaceImport" /> для добавления в коллекцию.</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.AddRange(System.CodeDom.CodeNamespaceImport[])">
      <summary>Добавляет набор объектов <see cref="T:System.CodeDom.CodeNamespaceImport" /> в коллекцию.</summary>
      <param name="value">Массив типа <see cref="T:System.CodeDom.CodeNamespaceImport" />, содержащий объекты, добавляемые в коллекцию.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> — <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.Clear">
      <summary>Очищает коллекцию элементов.</summary>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.Count">
      <summary>Получает число пространств имен в коллекции.</summary>
      <returns>Число пространств имен в коллекции.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.GetEnumerator">
      <summary>Получает перечислитель, который перечисляет члены коллекции.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />, указывающий элементы коллекции.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.Item(System.Int32)">
      <summary>Получает или задает объект <see cref="T:System.CodeDom.CodeNamespaceImport" /> по указанному индексу в коллекции.</summary>
      <param name="index">Индекс коллекции, к которой требуется получить доступ.</param>
      <returns>Объект <see cref="T:System.CodeDom.CodeNamespaceImport" /> на каждом допустимом индексе.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="index" /> находится вне допустимого диапазона индексов для коллекции.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Копирует элементы коллекции <see cref="T:System.Collections.ICollection" /> в массив <see cref="T:System.Array" />, начиная с указанного индекса массива <see cref="T:System.Array" />.</summary>
      <param name="array">Одномерный массив <see cref="T:System.Array" />, в который копируются элементы коллекции <see cref="T:System.Collections.ICollection" />. Индекс в массиве должен начинаться с нуля.</param>
      <param name="index">Отсчитываемый от нуля индекс в массиве <paramref name="array" />, указывающий начало копирования.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#Count">
      <summary>Получает число элементов, содержащихся в интерфейсе <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Число элементов, содержащихся в интерфейсе <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Получает значение, показывающее, является ли доступ к коллекции <see cref="T:System.Collections.ICollection" /> синхронизированным (потокобезопасным).</summary>
      <returns>
        <see langword="true" />, если доступ к классу <see cref="T:System.Collections.ICollection" /> является синхронизированным (потокобезопасным); в противном случае — <see langword="false" />. Данное свойство всегда возвращает значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#SyncRoot">
      <summary>Получает объект, с помощью которого можно синхронизировать доступ к коллекции <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Объект, который может использоваться для синхронизации доступа к <see cref="T:System.Collections.ICollection" />.  Данное свойство всегда возвращает значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель, который может выполнять итерацию коллекции.</summary>
      <returns>Объект <see cref="T:System.Collections.IEnumerator" />, который может использоваться для итерации элементов коллекции.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Add(System.Object)">
      <summary>Добавляет объект в <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">Объект <see cref="T:System.Object" />, добавляемый в список <see cref="T:System.Collections.IList" />.</param>
      <returns>Позиция, в которой был вставлен новый элемент.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Clear">
      <summary>Удаляет все элементы из коллекции <see cref="T:System.Collections.IList" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Contains(System.Object)">
      <summary>Определяет, содержит ли коллекция <see cref="T:System.Collections.IList" /> указанное значение.</summary>
      <param name="value">Объект <see cref="T:System.Object" />, который требуется найти в коллекции <see cref="T:System.Collections.IList" />.</param>
      <returns>Значение <see langword="true" />, если значение присутствует в списке; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>Определяет индекс заданного элемента в списке <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">Объект <see cref="T:System.Object" />, который требуется найти в коллекции <see cref="T:System.Collections.IList" />.</param>
      <returns>Индекс <paramref name="value" />, если он существует в коллекции; в противном случае — значение -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Вставляет элемент <see cref="T:System.Collections.IList" /> на указанную позицию.</summary>
      <param name="index">Отсчитываемый от нуля индекс, по которому следует вставить элемент <paramref name="value" />.</param>
      <param name="value">Объект <see cref="T:System.Object" />, вставляемый в <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IsFixedSize">
      <summary>Получает значение, указывающее, имеет ли список <see cref="T:System.Collections.IList" /> фиксированный размер.</summary>
      <returns>Значение <see langword="true" />, если словарь <see cref="T:System.Collections.IList" /> имеет фиксированный размер; в противном случае — значение <see langword="false" />.  Данное свойство всегда возвращает значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IsReadOnly">
      <summary>Получает значение, указывающее, является ли объект <see cref="T:System.Collections.IList" /> доступным только для чтения.</summary>
      <returns>Значение <see langword="true" />, если интерфейс <see cref="T:System.Collections.IList" /> доступен только для чтения; в противном случае — значение <see langword="false" />.  Данное свойство всегда возвращает значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Item(System.Int32)">
      <summary>Возвращает или задает элемент по указанному индексу.</summary>
      <param name="index">Отсчитываемый от нуля индекс элемента, который требуется возвратить или задать.</param>
      <returns>Элемент, расположенный по указанному индексу.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Remove(System.Object)">
      <summary>Удаляет первое вхождение указанного объекта из коллекции <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">Элемент <see cref="T:System.Object" />, который требуется удалить из <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Удаляет элемент по указанному индексу из коллекции <see cref="T:System.Collections.IList" />.</summary>
      <param name="index">Индекс (с нуля) элемента, который требуется удалить.</param>
    </member>
    <member name="T:System.CodeDom.CodeObject">
      <summary>Обеспечивает основной базовый класс для большинства объектов модели объектов документов кода (CodeDOM).</summary>
    </member>
    <member name="M:System.CodeDom.CodeObject.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeObject" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeObject.UserData">
      <summary>Получает определяемые пользователем данные для текущего объекта.</summary>
      <returns>
        <see cref="T:System.Collections.IDictionary" />, содержащий пользовательские данные для текущего объекта.</returns>
    </member>
    <member name="T:System.CodeDom.CodeObjectCreateExpression">
      <summary>Представляет выражение, создающее новый экземпляр типа.</summary>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeObjectCreateExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeObjectCreateExpression" />, используя указанные тип и параметры.</summary>
      <param name="createType">
        <see cref="T:System.CodeDom.CodeTypeReference" />, указывающий тип данных объекта для создания.</param>
      <param name="parameters">Массив объектов <see cref="T:System.CodeDom.CodeExpression" />, указывающий используемые для создания объекта параметры.</param>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeObjectCreateExpression" />, используя указанные тип и параметры.</summary>
      <param name="createType">Имя типа данных создаваемого объекта.</param>
      <param name="parameters">Массив объектов <see cref="T:System.CodeDom.CodeExpression" />, указывающий используемые для создания объекта параметры.</param>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeObjectCreateExpression" />, используя указанные тип и параметры.</summary>
      <param name="createType">Тип данных создаваемого объекта.</param>
      <param name="parameters">Массив объектов <see cref="T:System.CodeDom.CodeExpression" />, указывающий используемые для создания объекта параметры.</param>
    </member>
    <member name="P:System.CodeDom.CodeObjectCreateExpression.CreateType">
      <summary>Получает или задает тип данных создаваемого объекта.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" /> на тип данных создаваемого объекта.</returns>
    </member>
    <member name="P:System.CodeDom.CodeObjectCreateExpression.Parameters">
      <summary>Получает или задает параметры для использования при создании объекта.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpressionCollection" /> указывает параметры для использования при создании объекта.</returns>
    </member>
    <member name="T:System.CodeDom.CodeParameterDeclarationExpression">
      <summary>Представляет объявление параметра для метода, свойства или конструктора.</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />, используя имя и указанный тип параметра.</summary>
      <param name="type">Объект, указывающий тип параметра для объявления.</param>
      <param name="name">Имя параметра для объявления.</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.String,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />, используя имя и указанный тип параметра.</summary>
      <param name="type">Тип объявляемого параметра.</param>
      <param name="name">Имя параметра для объявления.</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.Type,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />, используя имя и указанный тип параметра.</summary>
      <param name="type">Тип объявляемого параметра.</param>
      <param name="name">Имя параметра для объявления.</param>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.CustomAttributes">
      <summary>Получает или задает пользовательские атрибуты для объявления параметра.</summary>
      <returns>Объект, указывающий пользовательские атрибуты.</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Direction">
      <summary>Получает или задает направление поля.</summary>
      <returns>Объект, указывающий направление поля.</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Name">
      <summary>Возвращает или задает имя параметра.</summary>
      <returns>Имя параметра.</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Type">
      <summary>Получает или задает тип параметра.</summary>
      <returns>Тип параметра.</returns>
    </member>
    <member name="T:System.CodeDom.CodeParameterDeclarationExpressionCollection">
      <summary>Представляет коллекцию объектов <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor(System.CodeDom.CodeParameterDeclarationExpression[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />, содержащий указанный массив объектов <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />.</summary>
      <param name="value">Массив объектов <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />, которыми следует инициализировать коллекцию.</param>
      <exception cref="T:System.ArgumentNullException">один или несколько объектов в массиве имеют значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />, содержащий элементы указанной исходной коллекции.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />, с помощью которого следует инициализировать коллекцию.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="value" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Add(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>Добавляет указанный параметр <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> в коллекцию.</summary>
      <param name="value">Добавляемый объект <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />.</param>
      <returns>Индекс, указывающий, куда был вставлен новый элемент.</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.AddRange(System.CodeDom.CodeParameterDeclarationExpression[])">
      <summary>Копирует элементы указанного массива в конец коллекции.</summary>
      <param name="value">Массив типа <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />, содержащий объекты для добавления к коллекции.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="value" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.AddRange(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary>Добавляет содержимое другого объекта <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> в конец коллекции.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />, содержащий объекты для добавления в коллекцию.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> — <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Contains(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>Получает значение, показывающее, содержит ли коллекция указанную <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> для поиска в коллекции.</param>
      <returns>Значение <see langword="true" />, если коллекция содержит указанный объект; в обратном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.CopyTo(System.CodeDom.CodeParameterDeclarationExpression[],System.Int32)">
      <summary>Копирует объекты коллекции в одномерный экземпляр <see cref="T:System.Array" />, начинающийся с указанного индекса.</summary>
      <param name="array">Одномерный объект <see cref="T:System.Array" />, являющийся целевым для значений, скопированных из коллекции.</param>
      <param name="index">Индекс в массиве, с позиции которого требуется начать вставку.</param>
      <exception cref="T:System.ArgumentException">Массив назначения является многомерным.

или -
Количество элементов в <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> превышает доступное пространство между индексом конечного массива, указанного параметром <paramref name="index" />, и концом конечного массива.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="array" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="index" /> меньше, чем минимальный индекс целевого массива.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.IndexOf(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>Получает индекс в коллекции указанной <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />, если он существует в коллекции.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> для поиска в коллекции.</param>
      <returns>Индекс в коллекции указанного объекта, если найден; в противном случае — значение -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Insert(System.Int32,System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>Вставляет в коллекцию заданный объект <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> по указанному индексу.</summary>
      <param name="index">Индекс, отсчитываемый от нуля, по которому следует вставить указанный объект.</param>
      <param name="value">Вставляемый объект <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpressionCollection.Item(System.Int32)">
      <summary>Получает или задает <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> по указанному индексу в коллекции.</summary>
      <param name="index">Индекс коллекции, к которой требуется получить доступ.</param>
      <returns>Объект <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> по каждому допустимому индексу.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="index" /> находится вне допустимого диапазона индексов для коллекции.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Remove(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>Удаляет указанный объект <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> из коллекции.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />, который требуется удалить из коллекции.</param>
      <exception cref="T:System.ArgumentException">Указанный объект не найден в коллекции.</exception>
    </member>
    <member name="T:System.CodeDom.CodePrimitiveExpression">
      <summary>Представляет значение простого типа данных.</summary>
    </member>
    <member name="M:System.CodeDom.CodePrimitiveExpression.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodePrimitiveExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodePrimitiveExpression.#ctor(System.Object)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodePrimitiveExpression" />, используя заданный объект.</summary>
      <param name="value">Объект для представления.</param>
    </member>
    <member name="P:System.CodeDom.CodePrimitiveExpression.Value">
      <summary>Получает или задает простой тип данных для представления.</summary>
      <returns>Экземпляр простого типа данных для представления значения.</returns>
    </member>
    <member name="T:System.CodeDom.CodePropertyReferenceExpression">
      <summary>Представляет ссылку на значение свойства.</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertyReferenceExpression.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodePropertyReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertyReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodePropertyReferenceExpression" />, используя указанные целевой объект и имя свойства.</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" /> указывает объект, содержащий свойство для ссылки.</param>
      <param name="propertyName">Имя свойства для ссылки.</param>
    </member>
    <member name="P:System.CodeDom.CodePropertyReferenceExpression.PropertyName">
      <summary>Получает или задает имя свойства для ссылки.</summary>
      <returns>Имя свойства для ссылки.</returns>
    </member>
    <member name="P:System.CodeDom.CodePropertyReferenceExpression.TargetObject">
      <summary>Получает или задает объект, содержащий свойство для ссылки.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> указывает объект, содержащий свойство для ссылки.</returns>
    </member>
    <member name="T:System.CodeDom.CodePropertySetValueReferenceExpression">
      <summary>Представляет аргумент значения вызова метода набора свойств внутри метода набора свойств.</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertySetValueReferenceExpression.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodePropertySetValueReferenceExpression" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeRegionDirective">
      <summary>Задает имя и режим для области кода.</summary>
    </member>
    <member name="M:System.CodeDom.CodeRegionDirective.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeRegionDirective" /> со значениями по умолчанию.</summary>
    </member>
    <member name="M:System.CodeDom.CodeRegionDirective.#ctor(System.CodeDom.CodeRegionMode,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeRegionDirective" />, указывая его режим и имя.</summary>
      <param name="regionMode">Одно из значений перечисления <see cref="T:System.CodeDom.CodeRegionMode" />.</param>
      <param name="regionText">Имя для области.</param>
    </member>
    <member name="P:System.CodeDom.CodeRegionDirective.RegionMode">
      <summary>Получает или задает режим для директивы области.</summary>
      <returns>Одно из значений <see cref="T:System.CodeDom.CodeRegionMode" />. Значение по умолчанию — <see cref="F:System.CodeDom.CodeRegionMode.None" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeRegionDirective.RegionText">
      <summary>Получает или задает имя области.</summary>
      <returns>Имя области.</returns>
    </member>
    <member name="T:System.CodeDom.CodeRegionMode">
      <summary>Указывает начало или конец области кода.</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.End">
      <summary>Конец области.</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.None">
      <summary>Не используется.</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.Start">
      <summary>Начало области.</summary>
    </member>
    <member name="T:System.CodeDom.CodeRemoveEventStatement">
      <summary>Представляет оператор, удаляющий обработчик событий.</summary>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeRemoveEventStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor(System.CodeDom.CodeEventReferenceExpression,System.CodeDom.CodeExpression)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeRemoveEventStatement" /> с указанным событием и обработчиком событий.</summary>
      <param name="eventRef">
        <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> указывает событие, от которого следует отделить обработчик событий.</param>
      <param name="listener">
        <see cref="T:System.CodeDom.CodeExpression" /> указывает обработчик событий для удаления.</param>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeRemoveEventStatement" />, используя указанные конечный объект, имя события и обработчик событий.</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" /> указывает содержащий событие объект.</param>
      <param name="eventName">Имя события.</param>
      <param name="listener">
        <see cref="T:System.CodeDom.CodeExpression" /> указывает обработчик событий для удаления.</param>
    </member>
    <member name="P:System.CodeDom.CodeRemoveEventStatement.Event">
      <summary>Получает или задает событие, из которого следует удалить прослушиватель.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> указывает событие, из которого следует удалить прослушиватель.</returns>
    </member>
    <member name="P:System.CodeDom.CodeRemoveEventStatement.Listener">
      <summary>Получает или задает обработчик событий для удаления.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> указывает обработчик событий для удаления.</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetCompileUnit">
      <summary>Представляет компилируемый фрагмент исходного кода.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetCompileUnit.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeSnippetCompileUnit" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetCompileUnit.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeSnippetCompileUnit" />.</summary>
      <param name="value">Фрагмент исходного кода для представления.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetCompileUnit.LinePragma">
      <summary>Получает или задает строку и данные файла о расположении кода в документе исходного кода.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeLinePragma" />, указывающий позицию фрагмента кода.</returns>
    </member>
    <member name="P:System.CodeDom.CodeSnippetCompileUnit.Value">
      <summary>Получает или задает фрагмент исходного кода для представления.</summary>
      <returns>Фрагмент исходного кода.</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetExpression">
      <summary>Представляет исходное выражение.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetExpression.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeSnippetExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetExpression.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeSnippetExpression" />, используя указанное исходное выражение.</summary>
      <param name="value">Исходное выражение для представления.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetExpression.Value">
      <summary>Получает или задает исходную строку кода.</summary>
      <returns>Исходная строка.</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetStatement">
      <summary>Представляет оператор, использующий фрагмент исходного кода.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetStatement.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeSnippetStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetStatement.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeSnippetStatement" />, используя указанный фрагмент кода.</summary>
      <param name="value">Фрагмент исходного кода оператора для представления.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetStatement.Value">
      <summary>Получает или задает оператор фрагмента исходного кода.</summary>
      <returns>Оператор фрагмента исходного кода.</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetTypeMember">
      <summary>Представляет элемент типа с помощью фрагмента исходного кода.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetTypeMember.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeSnippetTypeMember" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetTypeMember.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeSnippetTypeMember" /> с помощью указанного текста.</summary>
      <param name="text">Фрагмент исходного кода для элемента типа.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetTypeMember.Text">
      <summary>Получает или задает фрагмент исходного кода для элемента типа.</summary>
      <returns>Фрагмент исходного кода для элемента типа.</returns>
    </member>
    <member name="T:System.CodeDom.CodeStatement">
      <summary>Представляет базовый класс <see langword="abstract" />, от которого наследуются все операторы кода.</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatement.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeStatement" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeStatement.EndDirectives">
      <summary>Получает объект <see cref="T:System.CodeDom.CodeDirectiveCollection" />, содержащий конечные директивы.</summary>
      <returns>Объект <see cref="T:System.CodeDom.CodeDirectiveCollection" />, содержащий конечные директивы.</returns>
    </member>
    <member name="P:System.CodeDom.CodeStatement.LinePragma">
      <summary>Получает или задает строку, в которой содержится оператор кода.</summary>
      <returns>Объект <see cref="T:System.CodeDom.CodeLinePragma" />, указывающий контекст оператора кода.</returns>
    </member>
    <member name="P:System.CodeDom.CodeStatement.StartDirectives">
      <summary>Получает объект <see cref="T:System.CodeDom.CodeDirectiveCollection" />, содержащий начальные директивы.</summary>
      <returns>Объект <see cref="T:System.CodeDom.CodeDirectiveCollection" />, содержащий начальные директивы.</returns>
    </member>
    <member name="T:System.CodeDom.CodeStatementCollection">
      <summary>Представляет коллекцию объектов <see cref="T:System.CodeDom.CodeStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeStatementCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor(System.CodeDom.CodeStatement[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeStatementCollection" />, содержащий указанный массив объектов <see cref="T:System.CodeDom.CodeStatement" />.</summary>
      <param name="value">Массив объектов <see cref="T:System.CodeDom.CodeStatement" />, которыми следует инициализировать коллекцию.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="value" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor(System.CodeDom.CodeStatementCollection)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeStatementCollection" />, содержащий элементы указанной исходной коллекции.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeStatementCollection" />, с помощью которого следует инициализировать коллекцию.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="value" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Add(System.CodeDom.CodeExpression)">
      <summary>Добавляет указанный объект <see cref="T:System.CodeDom.CodeExpression" /> в коллекцию.</summary>
      <param name="value">Добавляемый объект <see cref="T:System.CodeDom.CodeExpression" />.</param>
      <returns>Индекс, указывающий, куда был вставлен новый элемент.</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Add(System.CodeDom.CodeStatement)">
      <summary>Добавляет указанный объект <see cref="T:System.CodeDom.CodeStatement" /> в коллекцию.</summary>
      <param name="value">Добавляемый объект <see cref="T:System.CodeDom.CodeStatement" />.</param>
      <returns>Индекс, указывающий, куда был вставлен новый элемент.</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.AddRange(System.CodeDom.CodeStatement[])">
      <summary>Добавляет набор объектов <see cref="T:System.CodeDom.CodeStatement" /> в коллекцию.</summary>
      <param name="value">Массив объектов <see cref="T:System.CodeDom.CodeStatement" />, добавляемый в коллекцию.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="value" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.AddRange(System.CodeDom.CodeStatementCollection)">
      <summary>Добавляет содержимое другого объекта <see cref="T:System.CodeDom.CodeStatementCollection" /> в конец коллекции.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeStatementCollection" />, содержащий объекты, добавляемые в коллекцию.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="value" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Contains(System.CodeDom.CodeStatement)">
      <summary>Получает значение, которое указывает, содержит ли коллекция заданный объект <see cref="T:System.CodeDom.CodeStatement" />.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeStatement" /> для поиска в коллекции.</param>
      <returns>Значение <see langword="true" />, если коллекция содержит указанный объект; в обратном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.CopyTo(System.CodeDom.CodeStatement[],System.Int32)">
      <summary>Копирует элементы объекта <see cref="T:System.CodeDom.CodeStatementCollection" /> в одномерный экземпляр <see cref="T:System.Array" /> начиная с указанного индекса.</summary>
      <param name="array">Одномерный объект <see cref="T:System.Array" />, являющийся целевым для значений, скопированных из коллекции.</param>
      <param name="index">Индекс в массиве, с позиции которого требуется начать вставку.</param>
      <exception cref="T:System.ArgumentException">Массив назначения является многомерным.

или -
Количество элементов в <see cref="T:System.CodeDom.CodeStatementCollection" /> превышает доступное пространство между индексом конечного массива, указанного параметром <paramref name="index" />, и концом конечного массива.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="array" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="index" /> меньше, чем минимальный индекс целевого массива.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.IndexOf(System.CodeDom.CodeStatement)">
      <summary>Получает значение указанного объекта <see cref="T:System.CodeDom.CodeStatement" /> в <see cref="T:System.CodeDom.CodeStatementCollection" />, если он существует в коллекции.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeStatement" /> для поиска в коллекции.</param>
      <returns>Индекс указанного объекта, если найден в коллекции; в противном случае — значение -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Insert(System.Int32,System.CodeDom.CodeStatement)">
      <summary>Вставляет указанный объект <see cref="T:System.CodeDom.CodeStatement" /> в коллекцию по указанному индексу.</summary>
      <param name="index">Индекс, отсчитываемый от нуля, по которому следует вставить указанный объект.</param>
      <param name="value">Вставляемый объект <see cref="T:System.CodeDom.CodeStatement" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeStatementCollection.Item(System.Int32)">
      <summary>Получает или задает объект <see cref="T:System.CodeDom.CodeStatement" /> по указанному индексу в коллекции.</summary>
      <param name="index">Индекс коллекции, к которой требуется получить доступ.</param>
      <returns>Объект <see cref="T:System.CodeDom.CodeStatement" /> по каждому допустимому индексу.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="index" /> находится вне допустимого диапазона индексов для коллекции.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Remove(System.CodeDom.CodeStatement)">
      <summary>Удаляет указанный объект <see cref="T:System.CodeDom.CodeStatement" /> из коллекции.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeStatement" />, который требуется удалить из коллекции.</param>
      <exception cref="T:System.ArgumentException">Указанный объект не найден в коллекции.</exception>
    </member>
    <member name="T:System.CodeDom.CodeThisReferenceExpression">
      <summary>Представляет ссылку на экземпляр текущего локального класса.</summary>
    </member>
    <member name="M:System.CodeDom.CodeThisReferenceExpression.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeThisReferenceExpression" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeThrowExceptionStatement">
      <summary>Представляет оператор, вызывающий исключение.</summary>
    </member>
    <member name="M:System.CodeDom.CodeThrowExceptionStatement.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeThrowExceptionStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeThrowExceptionStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeThrowExceptionStatement" /> с указанным экземпляром типа исключения.</summary>
      <param name="toThrow">
        <see cref="T:System.CodeDom.CodeExpression" />, указывающий создаваемое исключение.</param>
    </member>
    <member name="P:System.CodeDom.CodeThrowExceptionStatement.ToThrow">
      <summary>Получает или задает создаваемое исключение.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />, представляющий экземпляр создаваемого исключения.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTryCatchFinallyStatement">
      <summary>Представляет блок <see langword="try" /> с произвольным количеством предложений <see langword="catch" /> и (опционально) блок <see langword="finally" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor(System.CodeDom.CodeStatement[],System.CodeDom.CodeCatchClause[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" />, используя указанные операторы для предложений try и catch.</summary>
      <param name="tryStatements">Массив объектов <see cref="T:System.CodeDom.CodeStatement" />, указывающий операторы, к которым следует применить try.</param>
      <param name="catchClauses">Массив объектов <see cref="T:System.CodeDom.CodeCatchClause" />, указывающий предложения, к которым следует применить catch.</param>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor(System.CodeDom.CodeStatement[],System.CodeDom.CodeCatchClause[],System.CodeDom.CodeStatement[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" />, используя указанные операторы для предложений try, catch и операторы finally.</summary>
      <param name="tryStatements">Массив объектов <see cref="T:System.CodeDom.CodeStatement" />, указывающий операторы, к которым следует применить try.</param>
      <param name="catchClauses">Массив объектов <see cref="T:System.CodeDom.CodeCatchClause" />, указывающий предложения, к которым следует применить catch.</param>
      <param name="finallyStatements">Массив объектов <see cref="T:System.CodeDom.CodeStatement" />, указывающий операторы finally для использования.</param>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.CatchClauses">
      <summary>Возвращает предложения catch для использования.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> указывает предложения catch для использования.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.FinallyStatements">
      <summary>Возвращает операторы finally для использования.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatementCollection" />, которая указывает операторы finally.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.TryStatements">
      <summary>Получает операторы для try.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatementCollection" />, которая указывает операторы для try.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeConstructor">
      <summary>Представляет статический конструктор для класса.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeConstructor.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeTypeConstructor" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeTypeDeclaration">
      <summary>Представляет объявление типа для класса, структуры, интерфейса или перечисления.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclaration.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeTypeDeclaration" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclaration.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeTypeDeclaration" /> с указанным именем.</summary>
      <param name="name">Имя нового типа.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
      <summary>Получает базовые типы типа.</summary>
      <returns>Объект <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />, указывающий базовые типы типа.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsClass">
      <summary>Получает или задает значение, показывающее, является ли тип классом или ссылочным типом.</summary>
      <returns>Значение <see langword="true" />, если тип является классом или ссылочным типом; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsEnum">
      <summary>Получает или задает значение, указывающее, является ли тип перечислением.</summary>
      <returns>Значение <see langword="true" />, если тип является перечислением; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsInterface">
      <summary>Получает или задает значение, указывающее, является ли тип интерфейсом.</summary>
      <returns>Значение <see langword="true" />, если тип является интерфейсом; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
      <summary>Получает или задает значение, указывающее, является ли объявление типа полным или разделяемым.</summary>
      <returns>Значение <see langword="true" />, если объявление класса или структуры является частичным представлением реализации; значение <see langword="false" />, если объявление является полной реализацией класса или структуры. Значение по умолчанию — <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsStruct">
      <summary>Получает или задает значение, указывающее, являются ли тип типом значения (структурой).</summary>
      <returns>Значение <see langword="true" />, если тип является типом значения; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.Members">
      <summary>Получает коллекцию элементов класса для представленного типа.</summary>
      <returns>Объект <see cref="T:System.CodeDom.CodeTypeMemberCollection" />, указывающий элементы класса.</returns>
    </member>
    <member name="E:System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes">
      <summary>Происходит при первом доступе к коллекции <see cref="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" />.</summary>
    </member>
    <member name="E:System.CodeDom.CodeTypeDeclaration.PopulateMembers">
      <summary>Происходит при первом доступе к коллекции <see cref="P:System.CodeDom.CodeTypeDeclaration.Members" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
      <summary>Получает или задает атрибуты типа.</summary>
      <returns>Объект <see cref="T:System.Reflection.TypeAttributes" />, указывающий атрибуты типа.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.TypeParameters">
      <summary>Получает параметры типа для объявления типа.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeParameterCollection" />, содержащий параметры типа для объявления типа.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeDeclarationCollection">
      <summary>Представляет коллекцию объектов <see cref="T:System.CodeDom.CodeTypeDeclaration" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor(System.CodeDom.CodeTypeDeclaration[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" />, содержащий указанный массив объектов <see cref="T:System.CodeDom.CodeTypeDeclaration" />.</summary>
      <param name="value">Массив объектов <see cref="T:System.CodeDom.CodeTypeDeclaration" />, которыми следует инициализировать коллекцию.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor(System.CodeDom.CodeTypeDeclarationCollection)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" />, содержащий элементы указанной исходной коллекции.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" />, с помощью которого следует инициализировать коллекцию.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Add(System.CodeDom.CodeTypeDeclaration)">
      <summary>Добавляет указанный объект <see cref="T:System.CodeDom.CodeTypeDeclaration" /> в коллекцию.</summary>
      <param name="value">Добавляемый объект <see cref="T:System.CodeDom.CodeTypeDeclaration" />.</param>
      <returns>Индекс, указывающий, куда был вставлен новый элемент.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.AddRange(System.CodeDom.CodeTypeDeclaration[])">
      <summary>Копирует элементы указанного массива в конец коллекции.</summary>
      <param name="value">Массив типа <see cref="T:System.CodeDom.CodeTypeDeclaration" />, содержащий объекты, добавляемые в коллекцию.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> — <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.AddRange(System.CodeDom.CodeTypeDeclarationCollection)">
      <summary>Добавляет содержимое другого объекта <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> в конец коллекции.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" />, содержащий объекты, добавляемые в коллекцию.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="value" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Contains(System.CodeDom.CodeTypeDeclaration)">
      <summary>Получает значение, которое указывает, содержит ли коллекция заданный объект <see cref="T:System.CodeDom.CodeTypeDeclaration" />.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeTypeDeclaration" /> для поиска в коллекции.</param>
      <returns>Значение <see langword="true" />, если коллекция содержит указанный объект; в обратном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.CopyTo(System.CodeDom.CodeTypeDeclaration[],System.Int32)">
      <summary>Копирует элементы в объекте <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> в одномерный экземпляр <see cref="T:System.Array" /> начиная с указанного индекса.</summary>
      <param name="array">Одномерный объект <see cref="T:System.Array" />, являющийся целевым для значений, скопированных из коллекции.</param>
      <param name="index">Индекс в массиве, с позиции которого требуется начать вставку.</param>
      <exception cref="T:System.ArgumentException">Массив назначения является многомерным.
-или-
Количество элементов в <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> превышает доступное пространство между индексом конечного массива, указанного параметром <paramref name="index" />, и концом конечного массива.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="array" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="index" /> меньше, чем минимальный индекс целевого массива.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.IndexOf(System.CodeDom.CodeTypeDeclaration)">
      <summary>Получает значение указанного объекта <see cref="T:System.CodeDom.CodeTypeDeclaration" /> в <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" />, если он существует в коллекции.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeTypeDeclaration" /> для поиска в коллекции.</param>
      <returns>Индекс указанного объекта, если найден в коллекции; в противном случае — значение -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Insert(System.Int32,System.CodeDom.CodeTypeDeclaration)">
      <summary>Вставляет указанный объект <see cref="T:System.CodeDom.CodeTypeDeclaration" /> в коллекцию по указанному индексу.</summary>
      <param name="index">Индекс, отсчитываемый от нуля, по которому следует вставить указанный объект.</param>
      <param name="value">Вставляемый объект <see cref="T:System.CodeDom.CodeTypeDeclaration" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclarationCollection.Item(System.Int32)">
      <summary>Получает или задает объект <see cref="T:System.CodeDom.CodeTypeDeclaration" /> по указанному индексу в коллекции.</summary>
      <param name="index">Индекс коллекции, к которой требуется получить доступ.</param>
      <returns>Объект <see cref="T:System.CodeDom.CodeTypeDeclaration" /> по каждому допустимому индексу.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="index" /> находится вне допустимого диапазона индексов для коллекции.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Remove(System.CodeDom.CodeTypeDeclaration)">
      <summary>Удаляет указанный объект <see cref="T:System.CodeDom.CodeTypeDeclaration" /> из коллекции.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeTypeDeclaration" />, который требуется удалить из коллекции.</param>
      <exception cref="T:System.ArgumentException">Указанный объект не найден в коллекции.</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeDelegate">
      <summary>Представляет объявление делегата.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDelegate.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeTypeDelegate" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDelegate.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeTypeDelegate" />.</summary>
      <param name="name">Имя делегата.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDelegate.Parameters">
      <summary>Получает параметры делегата.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />, указывающий параметры делегата.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDelegate.ReturnType">
      <summary>Получает или задает возвращаемый тип делегата.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" />, указывающий возвращаемый тип делегата.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeMember">
      <summary>Предоставляет базовый класс для элемента типа. Элементы типа включают в себя поля, методы, свойства, конструкторы и вложенные типы.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMember.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeTypeMember" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Attributes">
      <summary>Получает или задает атрибуты элемента.</summary>
      <returns>Поразрядная комбинация значений <see cref="T:System.CodeDom.MemberAttributes" />, используемая для указания атрибутов элемента. Значение по умолчанию <see cref="F:System.CodeDom.MemberAttributes.Private" />—  |  <see cref="F:System.CodeDom.MemberAttributes.Final" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Comments">
      <summary>Получает коллекцию комментариев для элемента типа.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeCommentStatementCollection" />, указывающий комментарии для элемента.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.CustomAttributes">
      <summary>Получает или задает пользовательские атрибуты элемента.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />, указывающий пользовательские атрибуты элемента.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.EndDirectives">
      <summary>Получает конечные директивы для элемента.</summary>
      <returns>Объект <see cref="T:System.CodeDom.CodeDirectiveCollection" />, содержащий конечные директивы.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.LinePragma">
      <summary>Получает или задает строку, на которой происходит оператор элемента типа.</summary>
      <returns>Объект <see cref="T:System.CodeDom.CodeLinePragma" />, указывающий местоположение объявления элемента типа.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Name">
      <summary>Получает или задает имя элемента.</summary>
      <returns>Имя элемента.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.StartDirectives">
      <summary>Получает начальные директивы для элемента.</summary>
      <returns>Объект <see cref="T:System.CodeDom.CodeDirectiveCollection" />, содержащий начальные директивы.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeMemberCollection">
      <summary>Представляет коллекцию объектов <see cref="T:System.CodeDom.CodeTypeMember" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeTypeMemberCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor(System.CodeDom.CodeTypeMember[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeTypeMemberCollection" />, содержащий указанный массив объектов <see cref="T:System.CodeDom.CodeTypeMember" />.</summary>
      <param name="value">Массив объектов <see cref="T:System.CodeDom.CodeTypeMember" />, которыми следует инициализировать коллекцию.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor(System.CodeDom.CodeTypeMemberCollection)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeTypeMemberCollection" />, содержащий элементы указанной исходной коллекции.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeTypeMemberCollection" />, с помощью которого следует инициализировать коллекцию.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Add(System.CodeDom.CodeTypeMember)">
      <summary>Добавляет <see cref="T:System.CodeDom.CodeTypeMember" /> с указанным значением к коллекции.</summary>
      <param name="value">Добавляемый объект <see cref="T:System.CodeDom.CodeTypeMember" />.</param>
      <returns>Индекс, указывающий, куда был вставлен новый элемент.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.AddRange(System.CodeDom.CodeTypeMember[])">
      <summary>Копирует элементы указанного массива <see cref="T:System.CodeDom.CodeTypeMember" /> в конец коллекции.</summary>
      <param name="value">Массив типа <see cref="T:System.CodeDom.CodeTypeMember" />, содержащий объекты для добавления к коллекции.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="value" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.AddRange(System.CodeDom.CodeTypeMemberCollection)">
      <summary>Добавляет содержимое другого объекта <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> в конец коллекции.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeTypeMemberCollection" />, содержащий объекты для добавления в коллекцию.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="value" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Contains(System.CodeDom.CodeTypeMember)">
      <summary>Получает значение, показывающее, содержит ли коллекция указанную <see cref="T:System.CodeDom.CodeTypeMember" />.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeTypeMember" /> для поиска в коллекции.</param>
      <returns>Значение <see langword="true" />, если коллекция содержит указанный объект; в обратном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.CopyTo(System.CodeDom.CodeTypeMember[],System.Int32)">
      <summary>Копирует объекты коллекции в одномерный экземпляр <see cref="T:System.Array" />, начинающийся с указанного индекса.</summary>
      <param name="array">Одномерный объект <see cref="T:System.Array" />, являющийся целевым для значений, скопированных из коллекции.</param>
      <param name="index">Индекс в массиве, с позиции которого требуется начать вставку.</param>
      <exception cref="T:System.ArgumentException">Массив назначения является многомерным.
-или-
Количество элементов в <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> превышает доступное пространство между индексом конечного массива, указанного параметром <paramref name="index" />, и концом конечного массива.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="array" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="index" /> меньше, чем минимальный индекс целевого массива.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.IndexOf(System.CodeDom.CodeTypeMember)">
      <summary>Получает индекс в коллекции указанной <see cref="T:System.CodeDom.CodeTypeMember" />, если он существует в коллекции.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeTypeMember" /> для поиска в коллекции.</param>
      <returns>Индекс в коллекции указанного объекта, если найден; в противном случае — значение -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Insert(System.Int32,System.CodeDom.CodeTypeMember)">
      <summary>Вставляет в коллекцию заданный объект <see cref="T:System.CodeDom.CodeTypeMember" /> по указанному индексу.</summary>
      <param name="index">Индекс, отсчитываемый от нуля, по которому следует вставить указанный объект.</param>
      <param name="value">Вставляемый объект <see cref="T:System.CodeDom.CodeTypeMember" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeMemberCollection.Item(System.Int32)">
      <summary>Получает или задает <see cref="T:System.CodeDom.CodeTypeMember" /> по указанному индексу в коллекции.</summary>
      <param name="index">Индекс коллекции, к которой требуется получить доступ.</param>
      <returns>Объект <see cref="T:System.CodeDom.CodeTypeMember" /> по каждому допустимому индексу.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="index" /> находится вне допустимого диапазона индексов для коллекции.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Remove(System.CodeDom.CodeTypeMember)">
      <summary>Удаляет указанный объект <see cref="T:System.CodeDom.CodeTypeMember" /> из коллекции.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeTypeMember" />, который требуется удалить из коллекции.</param>
      <exception cref="T:System.ArgumentException">Указанный объект не найден в коллекции.</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeOfExpression">
      <summary>Представляет выражение <see langword="typeof" />, возвращающее <see cref="T:System.Type" /> для указанного имени типа.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeTypeOfExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeTypeOfExpression" />.</summary>
      <param name="type">
        <see cref="T:System.CodeDom.CodeTypeReference" />, указывающий тип данных для выражения <see langword="typeof" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeTypeOfExpression" />, используя указанный тип.</summary>
      <param name="type">Имя типа данных для выражения <see langword="typeof" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.Type)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeTypeOfExpression" />, используя указанный тип.</summary>
      <param name="type">Тип данных типа данных для выражения <see langword="typeof" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeOfExpression.Type">
      <summary>Получает или задает тип данных, на который ссылается выражение <see langword="typeof" />.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" />, указывающий тип данных, на который ссылается выражение <see langword="typeof" />. Данное свойство никогда не возвращает <see langword="null" /> и по умолчанию относится к типу <see cref="T:System.Void" />.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeParameter">
      <summary>Представляет параметр типа универсального типа или метода.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeTypeParameter" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameter.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.CodeDom.CodeTypeParameter" /> с указанным именем параметра типа.</summary>
      <param name="name">Имя параметра типа.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.Constraints">
      <summary>Получает ограничения для параметра типа.</summary>
      <returns>Объект <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />, содержащий ограничения для параметра типа.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.CustomAttributes">
      <summary>Получает пользовательские атрибуты параметра типа.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />, указывающий пользовательские атрибуты параметра типа. Значение по умолчанию — <see langword="null" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.HasConstructorConstraint">
      <summary>Возвращает или задает значение, указывающее, имеет ли параметр типа ограничение конструктора.</summary>
      <returns>Значение <see langword="true" />, если параметр типа имеет ограничение конструктора; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.Name">
      <summary>Возвращает или задает имя типа параметра.</summary>
      <returns>Имя параметра типа. Значение по умолчанию — пустая строка ("").</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeParameterCollection">
      <summary>Представляет коллекцию объектов <see cref="T:System.CodeDom.CodeTypeParameter" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor">
      <summary>Инициализирует новый пустой экземпляр класса <see cref="T:System.CodeDom.CodeTypeParameterCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor(System.CodeDom.CodeTypeParameter[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeTypeParameterCollection" />, содержащий указанный массив объектов <see cref="T:System.CodeDom.CodeTypeParameter" />.</summary>
      <param name="value">Массив объектов <see cref="T:System.CodeDom.CodeTypeParameter" />, которыми следует инициализировать коллекцию.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor(System.CodeDom.CodeTypeParameterCollection)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeTypeParameterCollection" />, содержащий элементы указанной исходной коллекции.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeTypeParameterCollection" />, с помощью которого следует инициализировать коллекцию.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Add(System.CodeDom.CodeTypeParameter)">
      <summary>Добавляет указанный объект <see cref="T:System.CodeDom.CodeTypeParameter" /> в коллекцию.</summary>
      <param name="value">Добавляемый объект <see cref="T:System.CodeDom.CodeTypeParameter" />.</param>
      <returns>Индекс (с нуля), указывающий, куда был вставлен новый элемент.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Add(System.String)">
      <summary>Добавляет указанный объект <see cref="T:System.CodeDom.CodeTypeParameter" /> к коллекции, используя указанное имя типа данных.</summary>
      <param name="value">Имя типа данных, для которого следует добавить объект <see cref="T:System.CodeDom.CodeTypeParameter" /> к коллекции.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.AddRange(System.CodeDom.CodeTypeParameter[])">
      <summary>Копирует элементы указанного массива <see cref="T:System.CodeDom.CodeTypeParameter" /> в конец коллекции.</summary>
      <param name="value">Массив типа <see cref="T:System.CodeDom.CodeTypeParameter" />, содержащий объекты для добавления к коллекции.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="value" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.AddRange(System.CodeDom.CodeTypeParameterCollection)">
      <summary>Копирует элементы указанного объекта <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> в конец коллекции.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeTypeParameterCollection" />, содержащий объекты <see cref="T:System.CodeDom.CodeTypeParameter" />, для добавления в коллекцию.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="value" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Contains(System.CodeDom.CodeTypeParameter)">
      <summary>Определяет, содержит ли коллекция указанный объект <see cref="T:System.CodeDom.CodeTypeParameter" />.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeTypeParameter" /> для поиска в коллекции.</param>
      <returns>Значение <see langword="true" />, если объект <see cref="T:System.CodeDom.CodeTypeParameter" /> находится в коллекции; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.CopyTo(System.CodeDom.CodeTypeParameter[],System.Int32)">
      <summary>Копирует элементы коллекции в указанный одномерный <see cref="T:System.Array" /> по указанному индексу.</summary>
      <param name="array">Одномерный объект <see cref="T:System.Array" />, являющийся целевым для значений, скопированных из коллекции.</param>
      <param name="index">Индекс в массиве, с позиции которого требуется начать вставку.</param>
      <exception cref="T:System.ArgumentException">Массив <paramref name="array" /> является многомерным.

или -
Количество элементов в <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> превышает доступное пространство между индексом конечного массива, указанного <paramref name="index" />, и концом конечного массива.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> — <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> меньше наименьшего индекса целевого массива.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.IndexOf(System.CodeDom.CodeTypeParameter)">
      <summary>Получает индекс в коллекции указанного объекта <see cref="T:System.CodeDom.CodeTypeParameter" />, если он существует в коллекции.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeTypeParameter" />, который требуется найти в коллекции.</param>
      <returns>Отсчитываемый с нуля индекс указанного объекта <see cref="T:System.CodeDom.CodeTypeParameter" /> в коллекции (если найден); в противном случае — значение -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Insert(System.Int32,System.CodeDom.CodeTypeParameter)">
      <summary>Вставляет указанный объект <see cref="T:System.CodeDom.CodeTypeParameter" /> в коллекцию по указанному индексу.</summary>
      <param name="index">Отсчитываемый с нуля индекс, по которому должен быть вставлен элемент.</param>
      <param name="value">Вставляемый объект <see cref="T:System.CodeDom.CodeTypeParameter" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameterCollection.Item(System.Int32)">
      <summary>Получает или задает объект <see cref="T:System.CodeDom.CodeTypeParameter" /> по указанному индексу в коллекции.</summary>
      <param name="index">Отсчитываемый с нуля индекс объект коллекции, к которому производится доступ.</param>
      <returns>Объект <see cref="T:System.CodeDom.CodeTypeParameter" />, расположенный по указанному индексу.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> находится вне допустимого диапазона индексов для коллекции.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Remove(System.CodeDom.CodeTypeParameter)">
      <summary>Удаляет указанный объект <see cref="T:System.CodeDom.CodeTypeParameter" /> из коллекции.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeTypeParameter" />, удаляемый из коллекции.</param>
      <exception cref="T:System.ArgumentException">Указанный объект не найден в коллекции.</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeReference">
      <summary>Представляет ссылку на тип.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeTypeReference" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeParameter)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeTypeReference" />, используя указанный параметр типа кода.</summary>
      <param name="typeParameter">Тип <see cref="T:System.CodeDom.CodeTypeParameter" />, представляющий тип параметра типа.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeReference,System.Int32)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeTypeReference" />, используя указанный тип массива и ранг.</summary>
      <param name="arrayType">
        <see cref="T:System.CodeDom.CodeTypeReference" />, указывающий тип массива.</param>
      <param name="rank">Число измерений в массиве.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeTypeReference" />, используя указанное имя типа.</summary>
      <param name="typeName">Имя типа для ссылки.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReference[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeTypeReference" />, используя указанное имя типа и аргументы типа.</summary>
      <param name="typeName">Имя типа для ссылки.</param>
      <param name="typeArguments">Массив значений <see cref="T:System.CodeDom.CodeTypeReference" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReferenceOptions)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeTypeReference" />, используя указанное имя типа и параметр ссылки типа кода.</summary>
      <param name="typeName">Имя типа для ссылки.</param>
      <param name="codeTypeReferenceOption">Параметр ссылки типа кода, одно из значений <see cref="T:System.CodeDom.CodeTypeReferenceOptions" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.Int32)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeTypeReference" />, используя указанные имя типа массива и ранг.</summary>
      <param name="baseType">Имя типов элемента массива.</param>
      <param name="rank">Число измерений в массиве.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.Type)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeTypeReference" />, используя указанный тип.</summary>
      <param name="type">
        <see cref="T:System.Type" /> для ссылки.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> — <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.Type,System.CodeDom.CodeTypeReferenceOptions)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeTypeReference" />, используя указанный тип и ссылку типа кода.</summary>
      <param name="type">
        <see cref="T:System.Type" /> для ссылки.</param>
      <param name="codeTypeReferenceOption">Параметр ссылки типа кода, одно из значений <see cref="T:System.CodeDom.CodeTypeReferenceOptions" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.ArrayElementType">
      <summary>Получает или задает тип элементов в массиве.</summary>
      <returns>Тип <see cref="T:System.CodeDom.CodeTypeReference" />, представляющий тип элементов массива.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.ArrayRank">
      <summary>Получает или задает ранг массива.</summary>
      <returns>Число измерений в массиве.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.BaseType">
      <summary>Получает или задает имя типа, на который происходит ссылка.</summary>
      <returns>Имя типа, на который дается ссылка.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.Options">
      <summary>Получает или задает параметр ссылки типа кода.</summary>
      <returns>Поразрядное сочетание значений <see cref="T:System.CodeDom.CodeTypeReferenceOptions" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.TypeArguments">
      <summary>Получает аргументы типа для текущей универсальной ссылки типа.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />, содержащий аргументы типа для текущего объекта <see cref="T:System.CodeDom.CodeTypeReference" />.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceCollection">
      <summary>Представляет коллекцию объектов <see cref="T:System.CodeDom.CodeTypeReference" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor(System.CodeDom.CodeTypeReference[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />, содержащий указанный массив объектов <see cref="T:System.CodeDom.CodeTypeReference" />.</summary>
      <param name="value">Массив объектов <see cref="T:System.CodeDom.CodeTypeReference" />, которыми следует инициализировать коллекцию.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor(System.CodeDom.CodeTypeReferenceCollection)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />, содержащий элементы указанной исходной коллекции.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />, с помощью которого следует инициализировать коллекцию.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.CodeDom.CodeTypeReference)">
      <summary>Добавляет указанный параметр <see cref="T:System.CodeDom.CodeTypeReference" /> в коллекцию.</summary>
      <param name="value">Добавляемый объект <see cref="T:System.CodeDom.CodeTypeReference" />.</param>
      <returns>Индекс, указывающий, куда был вставлен новый элемент.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.String)">
      <summary>Добавляет <see cref="T:System.CodeDom.CodeTypeReference" /> к коллекции, используя указанное имя типа данных.</summary>
      <param name="value">Имя типа данных, для которого следует добавить <see cref="T:System.CodeDom.CodeTypeReference" /> к коллекции.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.Type)">
      <summary>Добавляет <see cref="T:System.CodeDom.CodeTypeReference" /> к коллекции, используя указанный тип данных.</summary>
      <param name="value">Тип данных, для которого следует добавить <see cref="T:System.CodeDom.CodeTypeReference" /> к коллекции.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.AddRange(System.CodeDom.CodeTypeReference[])">
      <summary>Копирует элементы указанного массива <see cref="T:System.CodeDom.CodeTypeReference" /> в конец коллекции.</summary>
      <param name="value">Массив типа <see cref="T:System.CodeDom.CodeTypeReference" />, содержащий объекты для добавления к коллекции.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> — <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.AddRange(System.CodeDom.CodeTypeReferenceCollection)">
      <summary>Добавляет содержимое указанной <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> в конец коллекции.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />, содержащий объекты для добавления в коллекцию.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="value" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Contains(System.CodeDom.CodeTypeReference)">
      <summary>Получает значение, показывающее, содержит ли коллекция указанную <see cref="T:System.CodeDom.CodeTypeReference" />.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeTypeReference" /> для поиска в коллекции.</param>
      <returns>Возвращается <see langword="true" />, если коллекция содержит элемент <see cref="T:System.CodeDom.CodeTypeReference" />. В противном случае возвращается <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.CopyTo(System.CodeDom.CodeTypeReference[],System.Int32)">
      <summary>Копирует элементы коллекции в указанный одномерный <see cref="T:System.Array" /> по указанному индексу.</summary>
      <param name="array">Одномерный объект <see cref="T:System.Array" />, являющийся целевым для значений, скопированных из коллекции.</param>
      <param name="index">Индекс в массиве, с позиции которого требуется начать вставку.</param>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="array" /> является многомерным.

или -
Количество элементов в <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> превышает доступное пространство между индексом конечного массива, указанного параметром <paramref name="index" />, и концом конечного массива.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="array" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="index" /> меньше, чем минимальный индекс целевого массива.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.IndexOf(System.CodeDom.CodeTypeReference)">
      <summary>Получает индекс в коллекции указанной <see cref="T:System.CodeDom.CodeTypeReference" />, если он существует в коллекции.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeTypeReference" /> для поиска в коллекции.</param>
      <returns>Индекс указанной <see cref="T:System.CodeDom.CodeTypeReference" /> в коллекции, если найден; в противном случае — значение -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Insert(System.Int32,System.CodeDom.CodeTypeReference)">
      <summary>Вставляет описание <see cref="T:System.CodeDom.CodeTypeReference" /> в коллекцию по указанному индексу.</summary>
      <param name="index">Индекс, отсчитываемый от нуля, по которому следует вставить элемент.</param>
      <param name="value">Вставляемый объект <see cref="T:System.CodeDom.CodeTypeReference" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReferenceCollection.Item(System.Int32)">
      <summary>Получает или задает <see cref="T:System.CodeDom.CodeTypeReference" /> по указанному индексу в коллекции.</summary>
      <param name="index">Индекс коллекции, к которой требуется получить доступ.</param>
      <returns>Объект <see cref="T:System.CodeDom.CodeTypeReference" /> по каждому допустимому индексу.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="index" /> находится вне допустимого диапазона индексов для коллекции.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Remove(System.CodeDom.CodeTypeReference)">
      <summary>Удаляет указанный объект <see cref="T:System.CodeDom.CodeTypeReference" /> из коллекции.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.CodeTypeReference" />, который требуется удалить из коллекции.</param>
      <exception cref="T:System.ArgumentException">Указанный объект не найден в коллекции.</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceExpression">
      <summary>Представляет ссылку на тип данных.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeTypeReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeTypeReferenceExpression" />, используя указанный тип.</summary>
      <param name="type">
        <see cref="T:System.CodeDom.CodeTypeReference" /> указывает тип данных для ссылки.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeTypeReferenceExpression" />, используя указанное имя типа данных.</summary>
      <param name="type">Имя типа данных для ссылки.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.Type)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeTypeReferenceExpression" />, используя указанный тип данных.</summary>
      <param name="type">Экземпляр типа данных для ссылки.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReferenceExpression.Type">
      <summary>Получает или задает тип данных для ссылки.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" /> указывает тип данных для ссылки.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceOptions">
      <summary>Указывает способ разрешения ссылки на тип кода.</summary>
    </member>
    <member name="F:System.CodeDom.CodeTypeReferenceOptions.GenericTypeParameter">
      <summary>Распознайте тип из параметра типа.</summary>
    </member>
    <member name="F:System.CodeDom.CodeTypeReferenceOptions.GlobalReference">
      <summary>Распознайте тип из корневого пространства имен.</summary>
    </member>
    <member name="T:System.CodeDom.CodeVariableDeclarationStatement">
      <summary>Представляет объявление переменной.</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" />, используя указанные имя и тип.</summary>
      <param name="type">
        <see cref="T:System.CodeDom.CodeTypeReference" />, указывающий тип данных переменной.</param>
      <param name="name">Имя переменной.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.CodeDom.CodeTypeReference,System.String,System.CodeDom.CodeExpression)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" />, используя указанные тип данных, имя переменной и выражение инициализации.</summary>
      <param name="type">
        <see cref="T:System.CodeDom.CodeTypeReference" />, указывающий тип переменной.</param>
      <param name="name">Имя переменной.</param>
      <param name="initExpression">
        <see cref="T:System.CodeDom.CodeExpression" />, указывающий выражение инициализации для переменной.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.String,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" />, используя указанное имя типа данных и имя переменной.</summary>
      <param name="type">Имя типа данных переменной.</param>
      <param name="name">Имя переменной.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.String,System.String,System.CodeDom.CodeExpression)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" />, используя указанные тип данных, имя переменной и выражение инициализации.</summary>
      <param name="type">Имя типа данных переменной.</param>
      <param name="name">Имя переменной.</param>
      <param name="initExpression">
        <see cref="T:System.CodeDom.CodeExpression" />, указывающий выражение инициализации для переменной.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.Type,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" />, используя указанные тип данных и имя переменной.</summary>
      <param name="type">Тип данных для переменной.</param>
      <param name="name">Имя переменной.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.Type,System.String,System.CodeDom.CodeExpression)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" />, используя указанные тип данных, имя переменной и выражение инициализации.</summary>
      <param name="type">Тип данных переменной.</param>
      <param name="name">Имя переменной.</param>
      <param name="initExpression">
        <see cref="T:System.CodeDom.CodeExpression" />, указывающий выражение инициализации для переменной.</param>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.InitExpression">
      <summary>Получает или задает выражение инициализации для переменной.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />, указывающий выражение инициализации для переменной.</returns>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.Name">
      <summary>Получает или задает имя переменной.</summary>
      <returns>Имя переменной.</returns>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.Type">
      <summary>Получает или задает тип данных переменной.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" />, указывающий тип данных переменной.</returns>
    </member>
    <member name="T:System.CodeDom.CodeVariableReferenceExpression">
      <summary>Представляет ссылку на локальную переменную.</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableReferenceExpression.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeVariableReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableReferenceExpression.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeVariableReferenceExpression" />, используя указанное имя локальной переменной.</summary>
      <param name="variableName">Имя локальной переменной для ссылки.</param>
    </member>
    <member name="P:System.CodeDom.CodeVariableReferenceExpression.VariableName">
      <summary>Получает или задает имя локальной переменной для ссылки.</summary>
      <returns>Имя локальной переменной для ссылки.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeCompiler">
      <summary>Предоставляет пример реализации интерфейса <see cref="T:System.CodeDom.Compiler.ICodeCompiler" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.Compiler.CodeCompiler" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.CmdArgsFromParameters(System.CodeDom.Compiler.CompilerParameters)">
      <summary>Получает аргументы команды для передачи компилятору из указанного объекта <see cref="T:System.CodeDom.Compiler.CompilerParameters" />.</summary>
      <param name="options">Объект <see cref="T:System.CodeDom.Compiler.CompilerParameters" />, указывающий параметры компилятора.</param>
      <returns>Аргументы команды.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeCompiler.CompilerName">
      <summary>Получает имя исполняемого файла компилятора.</summary>
      <returns>Имя исполняемого файла компилятора.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeCompiler.FileExtension">
      <summary>Получает расширение имени файла для использования для файлов исходного кода.</summary>
      <returns>Расширение имени файла для использования для файлов исходного кода.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary>Компилирует указанную единицу компиляции, используя указанные параметры, и возвращает результаты компиляции.</summary>
      <param name="options">Объект <see cref="T:System.CodeDom.Compiler.CompilerParameters" />, указывающий параметры компилятора.</param>
      <param name="e">Объект <see cref="T:System.CodeDom.CodeCompileUnit" />, указывающий источник для компиляции.</param>
      <returns>Результаты компиляции.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> — <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary>Компилирует указанные единицы компиляции, используя указанные параметры, и возвращает результаты компиляции.</summary>
      <param name="options">Объект <see cref="T:System.CodeDom.Compiler.CompilerParameters" />, указывающий параметры компилятора.</param>
      <param name="ea">Массив объектов <see cref="T:System.CodeDom.CodeCompileUnit" />, указывающий источник для компиляции.</param>
      <returns>Результаты компиляции.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> — <see langword="null" />.

или -
<paramref name="ea" /> — <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>Компилирует указанный файл, используя указанные параметры, и возвращает результаты компиляции.</summary>
      <param name="options">Объект <see cref="T:System.CodeDom.Compiler.CompilerParameters" />, указывающий параметры компилятора.</param>
      <param name="fileName">Имя файла для компиляции.</param>
      <returns>Результаты компиляции.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> — <see langword="null" />.
-или-
<paramref name="fileName" /> — <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>Компилирует указанные файлы, используя указанные параметры, и возвращает результаты компиляции.</summary>
      <param name="options">Объект <see cref="T:System.CodeDom.Compiler.CompilerParameters" />, указывающий параметры компилятора.</param>
      <param name="fileNames">Массив строк, указывающий имена файлов для компиляции.</param>
      <returns>Результаты компиляции.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> — <see langword="null" />.

или -
<paramref name="fileNames" /> — <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>Компилирует указанную строку исходного кода, используя указанные параметры, и возвращает результаты компиляции.</summary>
      <param name="options">Объект <see cref="T:System.CodeDom.Compiler.CompilerParameters" />, указывающий параметры компилятора.</param>
      <param name="source">Строка исходного кода для компиляции.</param>
      <returns>Результаты компиляции.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> — <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>Компилирует указанные строки исходного кода, используя указанные параметры, и возвращает результаты компиляции.</summary>
      <param name="options">Объект <see cref="T:System.CodeDom.Compiler.CompilerParameters" />, указывающий параметры компилятора.</param>
      <param name="sources">Массив строк, содержащий исходный код для компиляции.</param>
      <returns>Результаты компиляции.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> — <see langword="null" />.

или -
<paramref name="sources" /> — <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.GetResponseFileCmdArgs(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>Получает командные аргументы, используемые при вызове компилятора для создания файла ответа.</summary>
      <param name="options">Объект <see cref="T:System.CodeDom.Compiler.CompilerParameters" />, указывающий параметры компилятора.</param>
      <param name="cmdArgs">Строка аргументов команды.</param>
      <returns>Аргументы команды, используемые для создания файла ответа, или значение <see langword="null" />, если аргументы файла ответа отсутствуют.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.JoinStringArray(System.String[],System.String)">
      <summary>Объединяет указанные массивы строк.</summary>
      <param name="sa">Массив строк для объединения.</param>
      <param name="separator">Используемый разделитель.</param>
      <returns>Сцепленная строка.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.ProcessCompilerOutputLine(System.CodeDom.Compiler.CompilerResults,System.String)">
      <summary>Обрабатывает указанную строку из указанного объекта <see cref="T:System.CodeDom.Compiler.CompilerResults" />.</summary>
      <param name="results">Объект <see cref="T:System.CodeDom.Compiler.CompilerResults" />, показывающий результаты компиляции.</param>
      <param name="line">Строка для обработки.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary>Описание этого члена см. в разделе <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)" />.</summary>
      <param name="options">Объект <see cref="T:System.CodeDom.Compiler.CompilerParameters" />, указывающий параметры компилятора.</param>
      <param name="e">Объект <see cref="T:System.CodeDom.CodeCompileUnit" />, указывающий источник для компиляции.</param>
      <returns>Результаты компиляции.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> — <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary>Описание этого элемента см. в разделе <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])" />.</summary>
      <param name="options">Объект <see cref="T:System.CodeDom.Compiler.CompilerParameters" />, указывающий параметры компилятора.</param>
      <param name="ea">Массив объектов <see cref="T:System.CodeDom.CodeCompileUnit" />, указывающий источник для компиляции.</param>
      <returns>Результаты компиляции.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>Описание этого члена см. в разделе <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)" />.</summary>
      <param name="options">Объект <see cref="T:System.CodeDom.Compiler.CompilerParameters" />, указывающий параметры компилятора.</param>
      <param name="fileName">Имя файла для компиляции.</param>
      <returns>Результаты компиляции.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> — <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>Описание этого члена см. в разделе <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])" />.</summary>
      <param name="options">Объект <see cref="T:System.CodeDom.Compiler.CompilerParameters" />, указывающий параметры компилятора.</param>
      <param name="fileNames">Массив строк, указывающий имена файлов для компиляции.</param>
      <returns>Результаты компиляции.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>Описание этого члена см. в разделе <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)" />.</summary>
      <param name="options">Объект <see cref="T:System.CodeDom.Compiler.CompilerParameters" />, указывающий параметры компилятора.</param>
      <param name="source">Строка, указывающая исходный код для компиляции.</param>
      <returns>Результаты компиляции.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> — <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>Описание этого члена см. в разделе <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])" />.</summary>
      <param name="options">Объект <see cref="T:System.CodeDom.Compiler.CompilerParameters" />, указывающий параметры компилятора.</param>
      <param name="sources">Массив строк, указывающий исходный код для компиляции.</param>
      <returns>Результаты компиляции.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> — <see langword="null" />.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeDomProvider">
      <summary>Предоставляет базовый класс для реализаций <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />. Это абстрактный класс.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary>Компилирует сборку на основе деревьев <see cref="N:System.CodeDom" />, содержащихся в указанном массиве объектов <see cref="T:System.CodeDom.CodeCompileUnit" />, используя указанные параметры компилятора.</summary>
      <param name="options">Объект <see cref="T:System.CodeDom.Compiler.CompilerParameters" />, задающий параметры компиляции.</param>
      <param name="compilationUnits">Массив типа <see cref="T:System.CodeDom.CodeCompileUnit" />, указывающий код для компиляции.</param>
      <returns>Объект <see cref="T:System.CodeDom.Compiler.CompilerResults" />, показывающий результаты компиляции.</returns>
      <exception cref="T:System.NotImplementedException">В производном классе нельзя переопределить ни этот метод, ни метод <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>Компилирует сборку из исходного кода, содержащегося в указанных файлах, используя указанные параметры компилятора.</summary>
      <param name="options">Объект <see cref="T:System.CodeDom.Compiler.CompilerParameters" />, задающий параметры компиляции.</param>
      <param name="fileNames">Массив имен файлов для компиляции.</param>
      <returns>Объект <see cref="T:System.CodeDom.Compiler.CompilerResults" />, показывающий результаты компиляции.</returns>
      <exception cref="T:System.NotImplementedException">В производном классе нельзя переопределить ни этот метод, ни метод <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>Компилирует сборку из указанного массива строк, содержащего исходный код, используя указанные параметры компилятора.</summary>
      <param name="options">Объект <see cref="T:System.CodeDom.Compiler.CompilerParameters" />, задающий параметры компилятора для компиляции.</param>
      <param name="sources">Массив строк исходного кода для компиляции.</param>
      <returns>Объект <see cref="T:System.CodeDom.Compiler.CompilerResults" />, показывающий результаты компиляции.</returns>
      <exception cref="T:System.NotImplementedException">В производном классе нельзя переопределить ни этот метод, ни метод <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler">
      <summary>При переопределении в производном классе создает новый компилятор кода.</summary>
      <returns>Объект <see cref="T:System.CodeDom.Compiler.ICodeCompiler" />, который может использоваться для компиляции представлений исходного кода на основе <see cref="N:System.CodeDom" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
      <summary>Создает Escape-идентификатор для заданного значения.</summary>
      <param name="value">Строка, для которой создается Escape-идентификатор.</param>
      <returns>Escape-идентификатор для данного значения.</returns>
      <exception cref="T:System.NotImplementedException">В производном классе нельзя переопределить ни этот метод, ни метод <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator">
      <summary>При переопределении в производном классе создает новый генератор кода.</summary>
      <returns>Объект <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />, который может использоваться для генерации представлений исходного кода на основе <see cref="N:System.CodeDom" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.IO.TextWriter)">
      <summary>При переопределении в производном классе создает новый генератор кода, используя для вывода указанный объект <see cref="T:System.IO.TextWriter" />.</summary>
      <param name="output">Объект <see cref="T:System.IO.TextWriter" />, который следует использовать для вывода.</param>
      <returns>Объект <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />, который может использоваться для генерации представлений исходного кода на основе <see cref="N:System.CodeDom" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.String)">
      <summary>При переопределении в производном классе создает новый генератор кода, используя указанное имя файла для выходных данных.</summary>
      <param name="fileName">Имя файла для выходных данных.</param>
      <returns>Объект <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />, который может использоваться для генерации представлений исходного кода на основе <see cref="N:System.CodeDom" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser">
      <summary>При переопределении в производном классе создает новый анализатор кода.</summary>
      <returns>Объект <see cref="T:System.CodeDom.Compiler.ICodeParser" />, который может использоваться для анализа исходного кода. Базовая реализация всегда возвращает значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
      <summary>Получает экземпляр <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> для заданного языка.</summary>
      <param name="language">Имя языка.</param>
      <returns>Поставщик CodeDOM, реализованный для заданного имени языка.</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">Для языка, заданного в параметре <paramref name="language" />, на данном компьютере не настроен поставщик.</exception>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="language" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException">У вызывающего объекта отсутствует необходимое разрешение.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>Получает экземпляр <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> для заданного языка и параметров поставщика.</summary>
      <param name="language">Имя языка.</param>
      <param name="providerOptions">Коллекция параметров поставщика из файла конфигурации.</param>
      <returns>Поставщик CodeDOM, реализованный для заданного имени языка и параметров.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
      <summary>Создает допустимый идентификатор для указанного значения.</summary>
      <param name="value">Строка, для которой создается допустимый идентификатор.</param>
      <returns>Допустимый идентификатор для указанного значения.</returns>
      <exception cref="T:System.NotImplementedException">В производном классе нельзя переопределить ни этот метод, ни метод <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />.</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeDomProvider.FileExtension">
      <summary>Получает расширение имени файла по умолчанию для использования в файлах исходного кода в текущем языке.</summary>
      <returns>Расширение имени файла, соответствующее расширению исходных файлов текущего языка. Базовая реализация всегда возвращает значение <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Создает код для указанной единицы компиляции объектной модели документов кода (CodeDOM) и направляет его указанному модулю записи текста, используя заданные параметры.</summary>
      <param name="compileUnit">Объект <see cref="T:System.CodeDom.CodeCompileUnit" />, для которого создается код.</param>
      <param name="writer">Объект <see cref="T:System.IO.TextWriter" />, которому направляется выходной код.</param>
      <param name="options">Объект <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />, указывающий параметры для использования при создании кода.</param>
      <exception cref="T:System.NotImplementedException">В производном классе нельзя переопределить ни этот метод, ни метод <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Создает код для указанного выражения объектной модели документов кода (CodeDOM) и направляет его указанному модулю записи текста, используя заданные параметры.</summary>
      <param name="expression">Объект <see cref="T:System.CodeDom.CodeExpression" />, указывающий выражение, для которого создается код.</param>
      <param name="writer">Объект <see cref="T:System.IO.TextWriter" />, которому направляется выходной код.</param>
      <param name="options">Объект <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />, указывающий параметры для использования при создании кода.</param>
      <exception cref="T:System.NotImplementedException">В производном классе нельзя переопределить ни этот метод, ни метод <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Создает код для указанного объявления члена объектной модели документов кода (CodeDOM) и направляет его указанному модулю записи текста, используя заданные параметры.</summary>
      <param name="member">Объект <see cref="T:System.CodeDom.CodeTypeMember" />, указывающий член, для которого создается код.</param>
      <param name="writer">Объект <see cref="T:System.IO.TextWriter" />, которому направляется выходной код.</param>
      <param name="options">Объект <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />, указывающий параметры для использования при создании кода.</param>
      <exception cref="T:System.NotImplementedException">Этот метод не переопределяется в производном классе.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Создает код для указанного пространства имен объектной модели документов кода (CodeDOM) и направляет его указанному модулю записи текста, используя заданные параметры.</summary>
      <param name="codeNamespace">Объект <see cref="T:System.CodeDom.CodeNamespace" />, указывающий пространство имен, для которого создается код.</param>
      <param name="writer">Объект <see cref="T:System.IO.TextWriter" />, которому направляется выходной код.</param>
      <param name="options">Объект <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />, указывающий параметры для использования при создании кода.</param>
      <exception cref="T:System.NotImplementedException">В производном классе нельзя переопределить ни этот метод, ни метод <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Создает код для указанного оператора языка объектной модели документов кода (CodeDOM) и направляет его указанному модулю записи текста, используя заданные параметры.</summary>
      <param name="statement">Объект <see cref="T:System.CodeDom.CodeStatement" />, содержащий элементы CodeDOM, для которых генерируется код.</param>
      <param name="writer">Объект <see cref="T:System.IO.TextWriter" />, которому направляется выходной код.</param>
      <param name="options">Объект <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />, указывающий параметры для использования при создании кода.</param>
      <exception cref="T:System.NotImplementedException">В производном классе нельзя переопределить ни этот метод, ни метод <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Создает код для указанного объявления типа объектной модели документов кода (CodeDOM) и направляет его указанному модулю записи текста, используя заданные параметры.</summary>
      <param name="codeType">Объект <see cref="T:System.CodeDom.CodeTypeDeclaration" />, указывающий тип, для которого создается код.</param>
      <param name="writer">Объект <see cref="T:System.IO.TextWriter" />, которому направляется выходной код.</param>
      <param name="options">Объект <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />, указывающий параметры для использования при создании кода.</param>
      <exception cref="T:System.NotImplementedException">В производном классе нельзя переопределить ни этот метод, ни метод <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo">
      <summary>Возвращает параметры поставщика и компилятора языка для данного компьютера.</summary>
      <returns>Массив типа <see cref="T:System.CodeDom.Compiler.CompilerInfo" />, представляющий параметры всех настроенных реализаций <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />.</returns>
      <exception cref="T:System.Security.SecurityException">У вызывающего объекта отсутствует необходимое разрешение.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
      <summary>Возвращает параметры поставщика и компилятора языка для заданного языка.</summary>
      <param name="language">Имя языка.</param>
      <returns>Объект <see cref="T:System.CodeDom.Compiler.CompilerInfo" />, заполненный параметрами настроенной реализации <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />.</returns>
      <exception cref="T:System.Configuration.ConfigurationException">Для языка, заданного в параметре <paramref name="language" />, на данном компьютере не настроен поставщик.</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">Свойство <paramref name="language" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException">У вызывающего объекта отсутствует необходимое разрешение.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetConverter(System.Type)">
      <summary>Получает <see cref="T:System.ComponentModel.TypeConverter" /> для указанного типа данных.</summary>
      <param name="type">Тип объекта, для которого извлекается преобразователь типов.</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter" /> для указанного типа или <see langword="null" />, если <see cref="T:System.ComponentModel.TypeConverter" /> для указанного типа не найден.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
      <summary>Возвращает имя языка, связанное с определенным расширением имени файла, как настроено в разделе конфигурации компилятора <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />.</summary>
      <param name="extension">Расширение имени файла.</param>
      <returns>Имя языка, связанное с определенным расширением имени файла, как настроено в параметрах конфигурации компилятора <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />.</returns>
      <exception cref="T:System.Configuration.ConfigurationException">Для языка, заданного в параметре <paramref name="extension" />, на данном компьютере не настроен поставщик языка.</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">Значение параметра <paramref name="extension" /> — <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException">У вызывающего объекта отсутствует необходимое разрешение.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary>Получает тип, на который указывает заданный объект <see cref="T:System.CodeDom.CodeTypeReference" />.</summary>
      <param name="type">
        <see cref="T:System.CodeDom.CodeTypeReference" /> указывает возвращаемый тип.</param>
      <returns>Текстовое представление указанного типа, отформатированное для языка, на котором создается код данным генератором кода. Например, в Visual Basic передача объекта <see cref="T:System.CodeDom.CodeTypeReference" /> для типа <see cref="T:System.Int32" /> вернет "Integer".</returns>
      <exception cref="T:System.NotImplementedException">В производном классе нельзя переопределить ни этот метод, ни метод <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
      <summary>Проверяет, имеется ли связанная ли с данным расширением имени файла реализация <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />, настроенная на данном компьютере.</summary>
      <param name="extension">Расширение имени файла.</param>
      <returns>
        <see langword="true" />, если реализация <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> настроена для определенного имени файла; в противном случае — <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="extension" /> — <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException">У вызывающего объекта отсутствует необходимое разрешение.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
      <summary>Проверяет, имеется ли связанная ли с данным языком реализация <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />, настроенная на данном компьютере.</summary>
      <param name="language">Имя языка.</param>
      <returns>
        <see langword="true" />, если реализация <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> настроена для заданного языка; в противном случае — <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="language" /> — <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException">У вызывающего объекта отсутствует необходимое разрешение.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
      <summary>Возвращает значение, показывающее, является ли указанное значение допустимым идентификатором для текущего языка.</summary>
      <param name="value">Значение для проверки на допустимый идентификатор.</param>
      <returns>
        <see langword="true" />, если параметр <paramref name="value" /> является допустимым идентификатором; в противном случае — <see langword="false" />.</returns>
      <exception cref="T:System.NotImplementedException">В производном классе нельзя переопределить ни этот метод, ни метод <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />.</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeDomProvider.LanguageOptions">
      <summary>Получает идентификатор возможностей языка.</summary>
      <returns>
        <see cref="T:System.CodeDom.Compiler.LanguageOptions" /> указывает особенности языка.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
      <summary>Компилирует код, прочитанный из заданного текстового потока, в объект <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
      <param name="codeStream">Объект <see cref="T:System.IO.TextReader" />, используемый для чтения анализируемого кода.</param>
      <returns>Объект <see cref="T:System.CodeDom.CodeCompileUnit" />, содержащий представление анализируемого кода.</returns>
      <exception cref="T:System.NotImplementedException">В производном классе нельзя переопределить ни этот метод, ни метод <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary>Возвращает значение, показывающее, обеспечивается ли указанная поддержка создания кода.</summary>
      <param name="generatorSupport">Объект <see cref="T:System.CodeDom.Compiler.GeneratorSupport" />, указывающий тип поддержки создания кода, который следует проверить.</param>
      <returns>
        <see langword="true" />, если указанная поддержка создания кода осуществляется; в противном случае — <see langword="false" />.</returns>
      <exception cref="T:System.NotImplementedException">В производном классе нельзя переопределить ни этот метод, ни метод <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeGenerator">
      <summary>Предоставляет пример реализации интерфейса <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />. Это абстрактный класс.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.Compiler.CodeGenerator" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ContinueOnNewLine(System.String)">
      <summary>Создает знак продолжения строки и переносит строку.</summary>
      <param name="st">Строка для записи с новой строки.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.CreateEscapedIdentifier(System.String)">
      <summary>Создает Escape-идентификатор для заданного значения.</summary>
      <param name="value">Строка, для которой создается Escape-идентификатор.</param>
      <returns>Escape-идентификатор для данного значения.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.CreateValidIdentifier(System.String)">
      <summary>Создает допустимый идентификатор для указанного значения.</summary>
      <param name="value">Строка, для которой создается допустимый идентификатор.</param>
      <returns>Допустимый идентификатор для значения.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentClass">
      <summary>Получает объявление типа кода для текущего класса.</summary>
      <returns>Объявление типа кода для текущего класса.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentMember">
      <summary>Получает текущий элемент класса.</summary>
      <returns>Текущий член класса.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentMemberName">
      <summary>Получает имя текущего элемента.</summary>
      <returns>Имя текущего члена.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentTypeName">
      <summary>Получает имя текущего класса.</summary>
      <returns>Имя текущего класса.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArgumentReferenceExpression(System.CodeDom.CodeArgumentReferenceExpression)">
      <summary>Создает код для указанного выражения ссылки на аргумент.</summary>
      <param name="e">Объект <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" />, указывающий выражение, для которого создается код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArrayCreateExpression(System.CodeDom.CodeArrayCreateExpression)">
      <summary>Создает код для указанного выражения создания массива.</summary>
      <param name="e">Объект <see cref="T:System.CodeDom.CodeArrayCreateExpression" />, указывающий выражение, для которого создается код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArrayIndexerExpression(System.CodeDom.CodeArrayIndexerExpression)">
      <summary>Создает код для указанного выражения индексатора массива.</summary>
      <param name="e">Объект <see cref="T:System.CodeDom.CodeArrayIndexerExpression" />, указывающий выражение, для которого создается код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAssignStatement(System.CodeDom.CodeAssignStatement)">
      <summary>Создает код для указанного оператора присваивания.</summary>
      <param name="e">Объект <see cref="T:System.CodeDom.CodeAssignStatement" />, указывающий оператор, для которого создается код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttachEventStatement(System.CodeDom.CodeAttachEventStatement)">
      <summary>Создает код для указанного оператора присоединения события.</summary>
      <param name="e">Объект <see cref="T:System.CodeDom.CodeAttachEventStatement" />, указывающий оператор, для которого создается код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttributeDeclarationsEnd(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>Создает код для указанного конца блока атрибута.</summary>
      <param name="attributes">Объект <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />, указывающий конец блока атрибута, для которого создается код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttributeDeclarationsStart(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>Создает код для указанного начала блока атрибута.</summary>
      <param name="attributes">Объект <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />, указывающий начало блока атрибута, для которого создается код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateBaseReferenceExpression(System.CodeDom.CodeBaseReferenceExpression)">
      <summary>Создает код для указанного выражения базовой ссылки.</summary>
      <param name="e">Объект <see cref="T:System.CodeDom.CodeBaseReferenceExpression" />, указывающий выражение, для которого создается код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateBinaryOperatorExpression(System.CodeDom.CodeBinaryOperatorExpression)">
      <summary>Создает код для указанного выражения двоичного оператора.</summary>
      <param name="e">Объект <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" />, указывающий выражение, для которого создается код.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> — <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCastExpression(System.CodeDom.CodeCastExpression)">
      <summary>Создает код для указанного выражения приведения.</summary>
      <param name="e">Объект <see cref="T:System.CodeDom.CodeCastExpression" />, указывающий выражение, для которого создается код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Создает код для заданного члена класса, используя заданные параметры модуля записи текста и генератора кода.</summary>
      <param name="member">Член класса, для которого необходимо создать код.</param>
      <param name="writer">Модуль записи текста для вывода кода.</param>
      <param name="options">Параметры, которые следует использовать при создании кода.</param>
      <exception cref="T:System.InvalidOperationException">Значение свойства <see cref="P:System.CodeDom.Compiler.CodeGenerator.Output" /> не равно <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateComment(System.CodeDom.CodeComment)">
      <summary>Создает код для указанного комментария.</summary>
      <param name="e">Класс <see cref="T:System.CodeDom.CodeComment" />, для которого создается код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCommentStatement(System.CodeDom.CodeCommentStatement)">
      <summary>Создает код для указанного оператора комментария.</summary>
      <param name="e">Оператор, для которого необходимо создать код.</param>
      <exception cref="T:System.ArgumentException">Свойство <see cref="P:System.CodeDom.CodeCommentStatement.Comment" /> параметра <paramref name="e" /> не задано.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCommentStatements(System.CodeDom.CodeCommentStatementCollection)">
      <summary>Создает код для указанных операторов комментария.</summary>
      <param name="e">Выражение, для которого формируется код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnit(System.CodeDom.CodeCompileUnit)">
      <summary>Создает код для указанной единицы компиляции.</summary>
      <param name="e">Единица компиляции, для которой необходимо создать код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnitEnd(System.CodeDom.CodeCompileUnit)">
      <summary>Создает код для конца единицы компиляции.</summary>
      <param name="e">Единица компиляции, для которой необходимо создать код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnitStart(System.CodeDom.CodeCompileUnit)">
      <summary>Создает код для начала единицы компиляции.</summary>
      <param name="e">Единица компиляции, для которой необходимо создать код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateConditionStatement(System.CodeDom.CodeConditionStatement)">
      <summary>Создает код для указанного условного оператора.</summary>
      <param name="e">Оператор, для которого необходимо создать код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateConstructor(System.CodeDom.CodeConstructor,System.CodeDom.CodeTypeDeclaration)">
      <summary>Создает код для указанного конструктора.</summary>
      <param name="e">Конструктор, для которого необходимо создать код.</param>
      <param name="c">Тип объекта, создаваемый этим конструктором.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDecimalValue(System.Decimal)">
      <summary>Создает код для указанного десятичного значения.</summary>
      <param name="d">Десятичное значение, для которого создается код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDefaultValueExpression(System.CodeDom.CodeDefaultValueExpression)">
      <summary>Создает код для заданной ссылки на значение по умолчанию.</summary>
      <param name="e">Ссылка, для которой необходимо создать код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDelegateCreateExpression(System.CodeDom.CodeDelegateCreateExpression)">
      <summary>Создает код для указанного выражения создания делегата.</summary>
      <param name="e">Выражение, для которого формируется код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDelegateInvokeExpression(System.CodeDom.CodeDelegateInvokeExpression)">
      <summary>Создает код для указанного выражения вызова делегата.</summary>
      <param name="e">Выражение, для которого формируется код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDirectionExpression(System.CodeDom.CodeDirectionExpression)">
      <summary>Создает код для указанного направляющего выражения.</summary>
      <param name="e">Выражение, для которого формируется код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDirectives(System.CodeDom.CodeDirectiveCollection)">
      <summary>Создает код для указанных директив кода.</summary>
      <param name="directives">Директивы кода, для которых необходимо создать код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDoubleValue(System.Double)">
      <summary>Создает код для числа двойной точности с плавающей запятой.</summary>
      <param name="d">Значение, для которого необходимо создать код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEntryPointMethod(System.CodeDom.CodeEntryPointMethod,System.CodeDom.CodeTypeDeclaration)">
      <summary>Создает код для указанного метода точки входа.</summary>
      <param name="e">Точка входа для кода.</param>
      <param name="c">Код, объявляющий тип.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEvent(System.CodeDom.CodeMemberEvent,System.CodeDom.CodeTypeDeclaration)">
      <summary>Создает код для указанного события.</summary>
      <param name="e">Событие члена, для которого необходимо создать код.</param>
      <param name="c">Тип объекта, в котором происходит это событие.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEventReferenceExpression(System.CodeDom.CodeEventReferenceExpression)">
      <summary>Создает код для указанного выражения ссылки на событие.</summary>
      <param name="e">Выражение, для которого формируется код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateExpression(System.CodeDom.CodeExpression)">
      <summary>Создает код для указанного выражения кода.</summary>
      <param name="e">Выражение кода, для которого необходимо создать код.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> — <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="e" /> не является допустимым <see cref="T:System.CodeDom.CodeStatement" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateExpressionStatement(System.CodeDom.CodeExpressionStatement)">
      <summary>Создает код для указанного оператора выражения.</summary>
      <param name="e">Оператор, для которого необходимо создать код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateField(System.CodeDom.CodeMemberField)">
      <summary>Создает код для указанного поля-члена.</summary>
      <param name="e">Поле, для которого необходимо создать код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateFieldReferenceExpression(System.CodeDom.CodeFieldReferenceExpression)">
      <summary>Создает код для указанного выражения ссылки на поле.</summary>
      <param name="e">Выражение, для которого формируется код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateGotoStatement(System.CodeDom.CodeGotoStatement)">
      <summary>Создает код для указанного оператора <see langword="goto" />.</summary>
      <param name="e">Выражение, для которого формируется код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateIndexerExpression(System.CodeDom.CodeIndexerExpression)">
      <summary>Создает код для указанного выражения индексатора.</summary>
      <param name="e">Выражение, для которого формируется код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateIterationStatement(System.CodeDom.CodeIterationStatement)">
      <summary>Создает код для указанного оператора итерации.</summary>
      <param name="e">Оператор, для которого необходимо создать код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLabeledStatement(System.CodeDom.CodeLabeledStatement)">
      <summary>Создает код для указанного оператора с меткой.</summary>
      <param name="e">Оператор, для которого необходимо создать код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLinePragmaEnd(System.CodeDom.CodeLinePragma)">
      <summary>Создает код для указанного конца строки директивы pragma.</summary>
      <param name="e">Конец строки директивы pragma, для которой необходимо создать код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLinePragmaStart(System.CodeDom.CodeLinePragma)">
      <summary>Создает код для указанного начала строки директивы pragma.</summary>
      <param name="e">Начало строки директивы pragma, для которого необходимо создать код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethod(System.CodeDom.CodeMemberMethod,System.CodeDom.CodeTypeDeclaration)">
      <summary>Создает код для указанного метода.</summary>
      <param name="e">Метод члена, для которого необходимо создать код.</param>
      <param name="c">Тип объекта, в котором выполняется этот метод.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodInvokeExpression(System.CodeDom.CodeMethodInvokeExpression)">
      <summary>Создает код для указанного выражения вызова метода.</summary>
      <param name="e">Выражение, для которого формируется код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodReferenceExpression(System.CodeDom.CodeMethodReferenceExpression)">
      <summary>Создает код для указанного выражения ссылки на метод.</summary>
      <param name="e">Выражение, для которого формируется код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodReturnStatement(System.CodeDom.CodeMethodReturnStatement)">
      <summary>Создает код для указанного оператора возврата метода.</summary>
      <param name="e">Оператор, для которого необходимо создать код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespace(System.CodeDom.CodeNamespace)">
      <summary>Создает код для указанного пространства имен.</summary>
      <param name="e">Пространство имен, для которого формируется код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceEnd(System.CodeDom.CodeNamespace)">
      <summary>Создает код для конца пространства имен.</summary>
      <param name="e">Пространство имен, для которого формируется код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceImport(System.CodeDom.CodeNamespaceImport)">
      <summary>Создает код для указанного импорта пространства имен.</summary>
      <param name="e">Импорт пространства имен, для которого необходимо создать код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceImports(System.CodeDom.CodeNamespace)">
      <summary>Создает код для указанного импорта пространства имен.</summary>
      <param name="e">Импорт пространства имен, для которого необходимо создать код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaces(System.CodeDom.CodeCompileUnit)">
      <summary>Создает код для пространств имен в указанной единице компиляции.</summary>
      <param name="e">Единица компиляции, для которой необходимо создать пространства имен.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceStart(System.CodeDom.CodeNamespace)">
      <summary>Создает код для начала пространства имен.</summary>
      <param name="e">Пространство имен, для которого формируется код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateObjectCreateExpression(System.CodeDom.CodeObjectCreateExpression)">
      <summary>Создает код для указанного выражения создания объекта.</summary>
      <param name="e">Выражение, для которого формируется код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateParameterDeclarationExpression(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>Создает код для указанного выражения объявления параметра.</summary>
      <param name="e">Выражение, для которого формируется код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePrimitiveExpression(System.CodeDom.CodePrimitiveExpression)">
      <summary>Создает код для указанного элементарного выражения.</summary>
      <param name="e">Выражение, для которого формируется код.</param>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="e" /> использует недопустимый тип данных. Допустимы только следующие типы данных:
– string
– char
– byte
– Int16
– Int32
– Int64
– Single
– Double
– Decimal</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateProperty(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeTypeDeclaration)">
      <summary>Создает код для указанного свойства.</summary>
      <param name="e">Свойство, для которого необходимо создать код.</param>
      <param name="c">Тип объекта, в котором реализуется это свойство.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePropertyReferenceExpression(System.CodeDom.CodePropertyReferenceExpression)">
      <summary>Создает код для указанного выражения ссылки на свойство.</summary>
      <param name="e">Выражение, для которого формируется код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePropertySetValueReferenceExpression(System.CodeDom.CodePropertySetValueReferenceExpression)">
      <summary>Создает код для указанного выражения ссылки на значение, задаваемое для свойства.</summary>
      <param name="e">Выражение, для которого формируется код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateRemoveEventStatement(System.CodeDom.CodeRemoveEventStatement)">
      <summary>Создает код для указанного оператора удаления события.</summary>
      <param name="e">Оператор, для которого необходимо создать код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSingleFloatValue(System.Single)">
      <summary>Создает код для числа одинарной точности с плавающей запятой.</summary>
      <param name="s">Значение, для которого необходимо создать код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetCompileUnit(System.CodeDom.CodeSnippetCompileUnit)">
      <summary>Выводит код указанной единицы компиляции фрагмента исходного кода.</summary>
      <param name="e">Единица компиляции литерального фрагмента исходного кода, для которой необходимо создать код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetExpression(System.CodeDom.CodeSnippetExpression)">
      <summary>Выводит код указанного выражения, заданного в виде литерального фрагмента кода.</summary>
      <param name="e">Выражение, для которого формируется код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetMember(System.CodeDom.CodeSnippetTypeMember)">
      <summary>Выводит код члена класса, заданного в виде литерального фрагмента кода.</summary>
      <param name="e">Член, для которого необходимо создать код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetStatement(System.CodeDom.CodeSnippetStatement)">
      <summary>Выводит код оператора, заданного в виде литерального фрагмента кода.</summary>
      <param name="e">Оператор, для которого необходимо создать код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateStatement(System.CodeDom.CodeStatement)">
      <summary>Создает код для указанного оператора.</summary>
      <param name="e">Оператор, для которого необходимо создать код.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="e" /> не является допустимым <see cref="T:System.CodeDom.CodeStatement" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateStatements(System.CodeDom.CodeStatementCollection)">
      <summary>Создает код для указанной коллекции операторов.</summary>
      <param name="stms">Операторы, для которых необходимо создать код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateThisReferenceExpression(System.CodeDom.CodeThisReferenceExpression)">
      <summary>Создает код для указанного выражения ссылки this.</summary>
      <param name="e">Выражение, для которого формируется код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateThrowExceptionStatement(System.CodeDom.CodeThrowExceptionStatement)">
      <summary>Создает код для указанного оператора выброса исключения.</summary>
      <param name="e">Оператор, для которого необходимо создать код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTryCatchFinallyStatement(System.CodeDom.CodeTryCatchFinallyStatement)">
      <summary>Создает код для указанного оператора <see langword="try...catch...finally" />.</summary>
      <param name="e">Оператор, для которого необходимо создать код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeConstructor(System.CodeDom.CodeTypeConstructor)">
      <summary>Создает код для указанного конструктора класса.</summary>
      <param name="e">Конструктор класса, для которого необходимо создать код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeEnd(System.CodeDom.CodeTypeDeclaration)">
      <summary>Создает код для заданного конца класса.</summary>
      <param name="e">Конец класса, для которого необходимо создать код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeOfExpression(System.CodeDom.CodeTypeOfExpression)">
      <summary>Создает код для указанного типа выражения.</summary>
      <param name="e">Выражение, для которого формируется код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeReferenceExpression(System.CodeDom.CodeTypeReferenceExpression)">
      <summary>Создает код для указанного выражения ссылки на тип.</summary>
      <param name="e">Выражение, для которого формируется код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypes(System.CodeDom.CodeNamespace)">
      <summary>Создает код для указанного пространства имен и содержащихся в нем классов.</summary>
      <param name="e">Пространство имен, для которого необходимо создать классы.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeStart(System.CodeDom.CodeTypeDeclaration)">
      <summary>Создает код для заданного начала класса.</summary>
      <param name="e">Начало класса, для которого необходимо создать код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateVariableDeclarationStatement(System.CodeDom.CodeVariableDeclarationStatement)">
      <summary>Создает код для указанного оператора объявления переменной.</summary>
      <param name="e">Оператор, для которого необходимо создать код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateVariableReferenceExpression(System.CodeDom.CodeVariableReferenceExpression)">
      <summary>Создает код для указанного выражения ссылки на переменную.</summary>
      <param name="e">Выражение, для которого формируется код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary>Возвращает имя указанного типа данных.</summary>
      <param name="value">Тип, имя которого будет возвращено.</param>
      <returns>Имя ссылки на тип данных.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Indent">
      <summary>Возвращает или задает количество пробелов для каждого уровня отступа.</summary>
      <returns>Количество пробелов для каждого уровня отступа.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentClass">
      <summary>Получает значение, указывающее, является ли создаваемый в данный момент объект классом.</summary>
      <returns>
        <see langword="true" />, если текущий объект является классом; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentDelegate">
      <summary>Получает значение, указывающее, является ли создаваемый в данный момент объект делегатом.</summary>
      <returns>
        <see langword="true" />, если текущий объект является делегатом; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentEnum">
      <summary>Получает значение, указывающее, является ли создаваемый в данный момент объект перечислением.</summary>
      <returns>
        <see langword="true" />, если текущий объект является перечислением; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentInterface">
      <summary>Получает значение, указывающее, является ли создаваемый в данный момент объект интерфейсом.</summary>
      <returns>
        <see langword="true" />, если текущий объект является интерфейсом; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentStruct">
      <summary>Получает значение, указывающее, является ли создаваемый объект размерным типом значения или структурой.</summary>
      <returns>
        <see langword="true" />, если текущий объект является типом значения или структурой; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.IsValidIdentifier(System.String)">
      <summary>Получает значение, показывающее, является ли указанное значение допустимым идентификатором.</summary>
      <param name="value">Значение для проверки на наличие конфликтов с допустимыми идентификаторами.</param>
      <returns>
        <see langword="true" />, если значение является допустимым идентификатором; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.IsValidLanguageIndependentIdentifier(System.String)">
      <summary>Получает значение, показывающее, является ли указанная строка допустимым идентификатором.</summary>
      <param name="value">Строка для проверки на истинность.</param>
      <returns>
        <see langword="true" />, если указанная строка является допустимым идентификатором; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.NullToken">
      <summary>Получает токен, представляющий <see langword="null" />.</summary>
      <returns>Лексема, представляющая <see langword="null" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Options">
      <summary>Получает параметры для использования генератором кода.</summary>
      <returns>Объект, который указывает параметры, предназначенные для использования генератором кода.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Output">
      <summary>Получает модуль записи текста, предназначенный для вывода данных.</summary>
      <returns>Модуль записи текста, предназначенный для вывода данных.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputAttributeArgument(System.CodeDom.CodeAttributeArgument)">
      <summary>Выводит аргумент в блоке атрибута.</summary>
      <param name="arg">Аргумент атрибута, для которого необходимо создать код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputAttributeDeclarations(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>Создает код для указанной коллекции объявлений атрибута.</summary>
      <param name="attributes">Атрибуты, для которых необходимо создать код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputDirection(System.CodeDom.FieldDirection)">
      <summary>Создает код для указанного <see cref="T:System.CodeDom.FieldDirection" />.</summary>
      <param name="dir">Одно из значений перечисления, обозначающее атрибут поля.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputExpressionList(System.CodeDom.CodeExpressionCollection)">
      <summary>Создает код для указанного списка выражений.</summary>
      <param name="expressions">Выражения, для которых необходимо создать код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputExpressionList(System.CodeDom.CodeExpressionCollection,System.Boolean)">
      <summary>Создает код для указанного списка выражений.</summary>
      <param name="expressions">Выражения, для которых необходимо создать код.</param>
      <param name="newlineBetweenItems">
        <see langword="true" /> для вставки новой строки после каждого элемента; в противном случае — <see langword="false" />.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputFieldScopeModifier(System.CodeDom.MemberAttributes)">
      <summary>Выводит модификатор области поля, относящийся к указанным атрибутам.</summary>
      <param name="attributes">Одно из значений перечисления, задающее атрибуты.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputIdentifier(System.String)">
      <summary>Выводит указанный идентификатор.</summary>
      <param name="ident">Идентификатор для вывода.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputMemberAccessModifier(System.CodeDom.MemberAttributes)">
      <summary>Создает код для указанного модификатора доступа элемента.</summary>
      <param name="attributes">Одно из значений перечисления, обозначающее модификатор доступа к члену, для которого необходимо создать код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputMemberScopeModifier(System.CodeDom.MemberAttributes)">
      <summary>Создает код для указанного модификатора области элемента.</summary>
      <param name="attributes">Одно из значений перечисления, обозначающее модификатор области действия члена, для которого необходимо создать код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputOperator(System.CodeDom.CodeBinaryOperatorType)">
      <summary>Создает код для указанного оператора.</summary>
      <param name="op">Оператор, для которого необходимо создать код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputParameters(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary>Создает код для указанных параметров.</summary>
      <param name="parameters">Выражения объявления параметра, для которых необходимо создать код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputType(System.CodeDom.CodeTypeReference)">
      <summary>Создает код для указанного типа.</summary>
      <param name="typeRef">Тип, для которого формируется код.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputTypeAttributes(System.Reflection.TypeAttributes,System.Boolean,System.Boolean)">
      <summary>Создает код для указанных атрибутов типа.</summary>
      <param name="attributes">Одно из значений перечисления, обозначающее атрибуты типа, для которых необходимо создать код.</param>
      <param name="isStruct">
        <see langword="true" />, если тип является структурой; в противном случае — <see langword="false" />.</param>
      <param name="isEnum">
        <see langword="true" />, если тип является перечислением; в противном случае — <see langword="false" />.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputTypeNamePair(System.CodeDom.CodeTypeReference,System.String)">
      <summary>Создает код для указанной пары, состоящей из типа и имени объекта.</summary>
      <param name="typeRef">Тип.</param>
      <param name="name">Имя для объекта.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.QuoteSnippetString(System.String)">
      <summary>Преобразует указанную строку, форматируя ее с помощью Escape-кодов.</summary>
      <param name="value">Преобразуемая строка.</param>
      <returns>Преобразованная строка.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary>Возвращает значение, показывающее, обеспечивается ли указанная поддержка создания кода.</summary>
      <param name="support">Тип поддержки создания кода, который необходимо протестировать.</param>
      <returns>
        <see langword="true" />, если указанная поддержка создания кода осуществляется; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#CreateEscapedIdentifier(System.String)">
      <summary>Создает Escape-идентификатор для заданного значения.</summary>
      <param name="value">Строка, для которой создается Escape-идентификатор.</param>
      <returns>Escape-идентификатор для данного значения.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#CreateValidIdentifier(System.String)">
      <summary>Создает допустимый идентификатор для указанного значения.</summary>
      <param name="value">Строка, для которой создается допустимый идентификатор.</param>
      <returns>Допустимый идентификатор для указанного значения.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Создает код для указанной единицы компиляции Code Document Object Model (CodeDOM) и выводит его в указанный текстовый редактор, используя указанные параметры.</summary>
      <param name="e">Единица компиляции CodeDOM, для которой создается код.</param>
      <param name="w">Модуль записи текста для вывода кода.</param>
      <param name="o">Параметры, используемые для создания кода.</param>
      <exception cref="T:System.InvalidOperationException">Параметр <paramref name="w" /> недоступен. Возможно, параметр <paramref name="w" /> закрыт до вызова метода.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Формирует код для указанного выражения Code Document Object Model (CodeDOM) и выводит его в определенный модуль записи текста.</summary>
      <param name="e">Выражение, для которого формируется код.</param>
      <param name="w">Модуль записи текста для вывода кода.</param>
      <param name="o">Параметры, используемые для создания кода.</param>
      <exception cref="T:System.InvalidOperationException">Параметр <paramref name="w" /> недоступен. Возможно, параметр <paramref name="w" /> закрыт до вызова метода.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Формирует код для указанного пространства имен Code Document Object Model (CodeDOM) и выводит его в определенный модуль записи текста, используя заданные параметры.</summary>
      <param name="e">Пространство имен, для которого формируется код.</param>
      <param name="w">Модуль записи текста для вывода кода.</param>
      <param name="o">Параметры, используемые для создания кода.</param>
      <exception cref="T:System.InvalidOperationException">Параметр <paramref name="w" /> недоступен. Возможно, параметр <paramref name="w" /> закрыт до вызова метода.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Формирует код для указанной инструкции Code Document Object Model (CodeDOM) и выводит его в определенный модуль записи текста, используя заданные параметры.</summary>
      <param name="e">Инструкция, содержащая элементы CodeDOM, которые необходимо преобразовать.</param>
      <param name="w">Модуль записи текста для вывода кода.</param>
      <param name="o">Параметры, используемые для создания кода.</param>
      <exception cref="T:System.InvalidOperationException">Параметр <paramref name="w" /> недоступен. Возможно, параметр <paramref name="w" /> закрыт до вызова метода.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Формирует код для указанного объявления типа Code Document Object Model (CodeDOM) и выводит его в определенный модуль записи текста, используя заданные параметры.</summary>
      <param name="e">Тип, для которого формируется код.</param>
      <param name="w">Модуль записи текста для вывода кода.</param>
      <param name="o">Параметры, используемые для создания кода.</param>
      <exception cref="T:System.InvalidOperationException">Параметр <paramref name="w" /> недоступен. Возможно, параметр <paramref name="w" /> закрыт до вызова метода.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary>Получает тип, на который указывает заданный объект <see cref="T:System.CodeDom.CodeTypeReference" />.</summary>
      <param name="type">Возвращаемый тип.</param>
      <returns>Имя ссылки на тип данных.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#IsValidIdentifier(System.String)">
      <summary>Получает значение, показывающее, является ли указанное значение допустимым идентификатором для текущего языка.</summary>
      <param name="value">Значение для тестирования.</param>
      <returns>
        <see langword="true" />, если параметр <paramref name="value" /> является допустимым идентификатором; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary>Получает значение, показывающее, предоставляет ли генератор поддержку средств языка, представленных указанным объектом <see cref="T:System.CodeDom.Compiler.GeneratorSupport" />.</summary>
      <param name="support">Возможности, на наличие которых следует проверить генератор.</param>
      <returns>
        <see langword="true" />, если указанные возможности поддерживаются; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#ValidateIdentifier(System.String)">
      <summary>Выбрасывает исключение, если указанное значение не является допустимым идентификатором.</summary>
      <param name="value">Идентификатор для проверки на допустимость.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifier(System.String)">
      <summary>Выдает исключение, если указанная строка не является допустимым идентификатором.</summary>
      <param name="value">Идентификатор для проверки на допустимость использования в качестве идентификатора.</param>
      <exception cref="T:System.ArgumentException">Если указанный идентификатор является недопустимым или конфликтует с зарезервированными ключевыми словами языка.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifiers(System.CodeDom.CodeObject)">
      <summary>Пытается проверить каждое поле идентификатора, содержащееся в указанном <see cref="T:System.CodeDom.CodeObject" /> или дереве <see cref="N:System.CodeDom" />.</summary>
      <param name="e">Объект, который необходимо протестировать на наличие недопустимых идентификаторов.</param>
      <exception cref="T:System.ArgumentException">Указанный <see cref="T:System.CodeDom.CodeObject" /> содержит недопустимый идентификатор.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeGeneratorOptions">
      <summary>Представляет набор параметров, используемых генератором кода.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGeneratorOptions.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />.</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.BlankLinesBetweenMembers">
      <summary>Получает или задает значение, указывающее, следует ли вставлять пустые строки между членами.</summary>
      <returns>
        <see langword="true" />, если следует вставлять пустые строки; в противном случае — <see langword="false" />. По умолчанию значением этого свойства является <see langword="true" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.BracingStyle">
      <summary>Получает или задает стиль, применяемый для скобок.</summary>
      <returns>Строка, содержащая применяемый для скобок стиль.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.ElseOnClosing">
      <summary>Получает или задает значение, показывающее, добавлять ли блоки <see langword="else" />, <see langword="catch" /> или <see langword="finally" />, включая скобки, к заключительной строке каждого предыдущего блока <see langword="if" /> или <see langword="try" />.</summary>
      <returns>
        <see langword="true" />, если следует добавлять else; в противном случае — <see langword="false" />. По умолчанию этому свойству присваивается значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.IndentString">
      <summary>Получает или задает строку, используемую для отступов.</summary>
      <returns>Строка, содержащая используемые для отступов знаки.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.Item(System.String)">
      <summary>Получает или задает объект по указанному индексу.</summary>
      <param name="index">Имя, связанное с извлекаемым объектом.</param>
      <returns>Объект, связанный с заданным именем. Если объекта, связанного с данным именем, в коллекции не существует, то <see langword="null" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.VerbatimOrder">
      <summary>Получает или задает значение, указывающее, следует ли генерировать члены в том порядке, в котором они расположены в коллекции членов.</summary>
      <returns>
        <see langword="true" />, чтобы члены генерировались в том порядке, в котором они расположены в коллекции членов, в противном случае — <see langword="false" />. По умолчанию этому свойству присваивается значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeParser">
      <summary>Предоставляет пустую реализацию интерфейса <see cref="T:System.CodeDom.Compiler.ICodeParser" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeParser.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.Compiler.CodeParser" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeParser.Parse(System.IO.TextReader)">
      <summary>Компилирует указанный текстовый поток в объект <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
      <param name="codeStream">Объект <see cref="T:System.IO.TextReader" />, используемый для чтения кода, подлежащего анализу.</param>
      <returns>Объект <see cref="T:System.CodeDom.CodeCompileUnit" />, содержащий модель кода, полученную в результате анализа кода.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerError">
      <summary>Представляет ошибку или предупреждение компилятора.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.Compiler.CompilerError" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.#ctor(System.String,System.Int32,System.Int32,System.String,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.Compiler.CompilerError" />, используя указанное имя файла, строку, столбец, номер и текст ошибки.</summary>
      <param name="fileName">Имя файла, который обрабатывался компилятором во время обнаружения ошибки.</param>
      <param name="line">Номер строки источника ошибки.</param>
      <param name="column">Столбец источника ошибки.</param>
      <param name="errorNumber">Номер ошибки.</param>
      <param name="errorText">Текст сообщения об ошибке.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.Column">
      <summary>Получает или задает номер столбца, в котором находится источник ошибки.</summary>
      <returns>Номер столбца исходного файла, в котором компилятор обнаружил ошибку.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.ErrorNumber">
      <summary>Получает или задает номер ошибки.</summary>
      <returns>Номер ошибки в виде строки.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.ErrorText">
      <summary>Получает или задает текст сообщения об ошибке.</summary>
      <returns>Текст сообщения об ошибке.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.FileName">
      <summary>Получает или задает имя исходного файла, содержащего вызвавший ошибку код.</summary>
      <returns>Имя исходного файла, содержащего вызвавший ошибку код.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.IsWarning">
      <summary>Получает или задает значение, указывающее, является ли ошибка предупреждением.</summary>
      <returns>
        <see langword="true" />, если ошибка является предупреждением; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.Line">
      <summary>Получает или задает номер строки, в которой находится источник ошибки.</summary>
      <returns>Номер строки исходного файла, в котором компилятор обнаружил ошибку.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.ToString">
      <summary>Предоставляет реализацию метода <see cref="M:System.Object.ToString" /> класса Object.</summary>
      <returns>Строковое представление ошибки компилятора.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerErrorCollection">
      <summary>Представляет коллекцию объектов <see cref="T:System.CodeDom.Compiler.CompilerError" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor(System.CodeDom.Compiler.CompilerError[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />, содержащий указанный массив объектов <see cref="T:System.CodeDom.Compiler.CompilerError" />.</summary>
      <param name="value">Массив объектов <see cref="T:System.CodeDom.Compiler.CompilerError" />, используемых для инициализации коллекции.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> — <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor(System.CodeDom.Compiler.CompilerErrorCollection)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />, содержащий заданный объект <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />, с помощью которого следует инициализировать коллекцию.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="value" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Add(System.CodeDom.Compiler.CompilerError)">
      <summary>Добавляет заданный объект <see cref="T:System.CodeDom.Compiler.CompilerError" /> в коллекцию ошибок.</summary>
      <param name="value">Добавляемый объект <see cref="T:System.CodeDom.Compiler.CompilerError" />.</param>
      <returns>Индекс, указывающий, куда был вставлен новый элемент.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.AddRange(System.CodeDom.Compiler.CompilerError[])">
      <summary>Копирует элементы массива в конец коллекции ошибок.</summary>
      <param name="value">Массив типа <see cref="T:System.CodeDom.Compiler.CompilerError" />, содержащий объекты, добавляемые в коллекцию.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="value" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.AddRange(System.CodeDom.Compiler.CompilerErrorCollection)">
      <summary>Добавляет содержимое указанной коллекции ошибок компилятора в конец коллекции ошибок.</summary>
      <param name="value">Объект <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />, содержащий объекты, добавляемые в коллекцию.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> — <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Contains(System.CodeDom.Compiler.CompilerError)">
      <summary>Получает значение, которое указывает, содержит ли коллекция заданный объект <see cref="T:System.CodeDom.Compiler.CompilerError" />.</summary>
      <param name="value">Искомый объект <see cref="T:System.CodeDom.Compiler.CompilerError" />.</param>
      <returns>Возвращается <see langword="true" />, если коллекция содержит элемент <see cref="T:System.CodeDom.Compiler.CompilerError" />. В противном случае возвращается <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.CopyTo(System.CodeDom.Compiler.CompilerError[],System.Int32)">
      <summary>Копирует значения коллекции в одномерный экземпляр <see cref="T:System.Array" /> по указанному индексу.</summary>
      <param name="array">Одномерный объект <see cref="T:System.Array" />, который является назначением значений, копируемых из коллекции <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />.</param>
      <param name="index">Индекс в массиве назначения, с которого начинается копирование.</param>
      <exception cref="T:System.ArgumentException">Массив, заданный параметром <paramref name="array" />, является многомерным.

или -
Количество элементов в <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> превышает доступный промежуток между заданным в параметре <paramref name="arrayIndex" /> значением индекса в массиве, указанном в параметре <paramref name="array" />, и концом массива, указанного в параметре <paramref name="array" />.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="array" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="index" /> меньше нижней границы массива, указанного параметром <paramref name="array" />.</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.HasErrors">
      <summary>Получает значение, показывающее, содержит ли коллекция ошибки.</summary>
      <returns>
        <see langword="true" />, если коллекция содержит ошибки, в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.HasWarnings">
      <summary>Получает значение, показывающее, содержит ли коллекция предупреждения.</summary>
      <returns>
        <see langword="true" />, если коллекция содержит предупреждения, в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.IndexOf(System.CodeDom.Compiler.CompilerError)">
      <summary>Получает индекс в коллекции указанного объекта <see cref="T:System.CodeDom.Compiler.CompilerError" />, если он существует в коллекции.</summary>
      <param name="value">Искомый объект <see cref="T:System.CodeDom.Compiler.CompilerError" />.</param>
      <returns>Индекс указанного объекта <see cref="T:System.CodeDom.Compiler.CompilerError" /> в <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />, если он найден; в противном случае — значение -1.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Insert(System.Int32,System.CodeDom.Compiler.CompilerError)">
      <summary>Вставляет в коллекцию заданный объект <see cref="T:System.CodeDom.Compiler.CompilerError" /> по указанному индексу.</summary>
      <param name="index">Отсчитываемый от нуля индекс, по которому следует вставить ошибку компилятора.</param>
      <param name="value">Вставляемый объект <see cref="T:System.CodeDom.Compiler.CompilerError" />.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.Item(System.Int32)">
      <summary>Возвращает или задает объект <see cref="T:System.CodeDom.Compiler.CompilerError" /> с заданным индексом.</summary>
      <param name="index">Индекс (с нуля) записи, местоположение которой требуется определить в коллекции.</param>
      <returns>Объект <see cref="T:System.CodeDom.Compiler.CompilerError" /> по каждому допустимому индексу.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение индекса, заданное параметром <paramref name="index" />, находится вне допустимого диапазона индексов для коллекции.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Remove(System.CodeDom.Compiler.CompilerError)">
      <summary>Удаляет указанный объект <see cref="T:System.CodeDom.Compiler.CompilerError" /> из коллекции.</summary>
      <param name="value">Элемент <see cref="T:System.CodeDom.Compiler.CompilerError" />, который требуется удалить из <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />.</param>
      <exception cref="T:System.ArgumentException">Указанный объект не найден в коллекции.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerInfo">
      <summary>Представляет параметры конфигурации для поставщика языка. Этот класс не наследуется.</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerInfo.CodeDomProviderType">
      <summary>Получает тип настроенной реализации <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />.</summary>
      <returns>Доступный только для чтения экземпляр <see cref="T:System.Type" />, представляющий настроенный тип поставщика языка.</returns>
      <exception cref="T:System.Configuration.ConfigurationException">На данном компьютере поставщик языка не настроен.</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">Не удается найти тип, поскольку он является значением <see langword="null" /> или пустой строкой.

или -
Не удается найти тип, поскольку в файле конфигурации не найдено имя <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateDefaultCompilerParameters">
      <summary>Получает настроенные параметры компилятора для реализации поставщика и языка.</summary>
      <returns>Доступный только для чтения экземпляр <see cref="T:System.CodeDom.Compiler.CompilerParameters" />, содержащий параметры компилятора и установки, настроенные для поставщика языка.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateProvider">
      <summary>Возвращает экземпляр <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> для параметров поставщика текущего языка.</summary>
      <returns>Поставщик CodeDOM, связанный с конфигурацией поставщика языка.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateProvider(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>Возвращает экземпляр <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> для параметров поставщика текущего языка и заданных параметров.</summary>
      <param name="providerOptions">Коллекция параметров поставщика из файла конфигурации.</param>
      <returns>Поставщик CodeDOM, связанный с конфигурацией поставщика языка и заданными параметрами.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="providerOptions" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Поставщик не поддерживает параметры.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.Equals(System.Object)">
      <summary>Определяет, представляет ли указанный объект тот же поставщик языка и те же параметры компилятора, что и текущий объект <see cref="T:System.CodeDom.Compiler.CompilerInfo" />.</summary>
      <param name="o">Объект для сравнения с текущим объектом <see cref="T:System.CodeDom.Compiler.CompilerInfo" />.</param>
      <returns>Значение <see langword="true" />, если параметр <paramref name="o" /> является объектом <see cref="T:System.CodeDom.Compiler.CompilerInfo" />, а его значение совпадает с данным экземпляром; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetExtensions">
      <summary>Возвращает расширения имен файлов, поддерживаемые поставщиком языка.</summary>
      <returns>Массив расширений имен файлов, поддерживаемых поставщиком языка.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetHashCode">
      <summary>Возвращает хэш-код текущего экземпляра.</summary>
      <returns>Хэш-код в виде 32-битового целого числа со знаком для текущего экземпляра <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> который можно использовать в алгоритмах и структурах данных хэширования, например в хэш-таблице.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetLanguages">
      <summary>Получает имена языков, поддерживаемые поставщиком языка.</summary>
      <returns>Массив имен языков, поддерживаемых поставщиком языка.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerInfo.IsCodeDomProviderTypeValid">
      <summary>Возвращает значение, указывающее, настроена ли на данном компьютере реализация поставщика языка.</summary>
      <returns>
        <see langword="true" />, если на данном компьютере настроена реализация поставщика языка; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerParameters">
      <summary>Представляет параметры, используемые для вызова компилятора.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.Compiler.CompilerParameters" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> с использованием указанных имен сборок.</summary>
      <param name="assemblyNames">Имя сборок для ссылки.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.Compiler.CompilerParameters" />, используя указанные имена сборок и имя выходного файла.</summary>
      <param name="assemblyNames">Имя сборок для ссылки.</param>
      <param name="outputName">Имя выходного файла.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String,System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.Compiler.CompilerParameters" />, используя указанные имена сборок, имя выходного файла и значение, показывающее, следует ли включать сведения об отладке.</summary>
      <param name="assemblyNames">Имя сборок для ссылки.</param>
      <param name="outputName">Имя выходного файла.</param>
      <param name="includeDebugInformation">Значение <see langword="true" />, чтобы включить отладочные данные; значение <see langword="false" />, чтобы исключить отладочные данные.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.CompilerOptions">
      <summary>Получает или задает необязательный аргументы командной строки для использования при вызове компилятора.</summary>
      <returns>Аргументы дополнительной командной строки для компилятора.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.CoreAssemblyFileName">
      <summary>Получает или задает имя основной или стандартной сборки, которая содержит базовые типы, такие как <see cref="T:System.Object" />, <see cref="T:System.String" /> или <see cref="T:System.Int32" />.</summary>
      <returns>Имя основной сборки, содержащей базовые типы.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources">
      <summary>Получает файлы ресурсов платформы .NET Framework для включения при компиляции вывода сборки.</summary>
      <returns>Коллекция, содержащая пути к файлам ресурсов платформы .NET Framework для включения в созданную сборку.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable">
      <summary>Получает или задает значение, показывающее, следует ли создавать исполняемый файл.</summary>
      <returns>
        <see langword="true" />, если следует создавать исполняемый файл; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.GenerateInMemory">
      <summary>Получает или задает значение, показывающее, следует ли создавать выходной файл в памяти.</summary>
      <returns>
        <see langword="true" />, если компилятор должен создавать выходной файл в памяти; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.IncludeDebugInformation">
      <summary>Получает или задает значение, показывающее, следует ли включать сведения об отладке в компилируемый исполняемый файл.</summary>
      <returns>
        <see langword="true" />, если следует создавать сведения об отладке; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.LinkedResources">
      <summary>Получает файлы ресурсов платформы .NET Framework, на которые имеются ссылки в текущем источнике.</summary>
      <returns>Коллекция, содержащая пути к файлам ресурсов платформы .NET Framework, на которые имеются ссылки в данном источнике.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.MainClass">
      <summary>Получает или задает имя главного класса.</summary>
      <returns>Имя главного класса.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.OutputAssembly">
      <summary>Получает или задает имя выходной сборки.</summary>
      <returns>Имя выходной сборки.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies">
      <summary>Получает или задает сборки, на которые ссылается текущий проект.</summary>
      <returns>Коллекция, содержащая имена сборок, на которые ссылается источник, для компиляции.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.TempFiles">
      <summary>Получает или задает коллекцию временных файлов.</summary>
      <returns>Коллекция, содержащая временные файлы.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.TreatWarningsAsErrors">
      <summary>Получает или задает значение, указывающее, следует ли интерпретировать предупреждения как ошибки.</summary>
      <returns>
        <see langword="true" />, если следует интерпретировать предупреждения как ошибки; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.UserToken">
      <summary>Получает или задает пользовательский токен, используемый при создании процесса компилятора.</summary>
      <returns>Пользовательский токен для использования.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.WarningLevel">
      <summary>Получает или задает уровень предупреждения, на котором компилятор прекращает компиляцию.</summary>
      <returns>Уровень предупреждения, на котором компилятор прекращает компиляцию.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.Win32Resource">
      <summary>Получает или задает имя файла ресурса Win32 для связывания с компилируемой сборкой.</summary>
      <returns>Файл ресурса Win32, который будет связан с компилируемой сборкой.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerResults">
      <summary>Представляет результаты компиляции, возвращаемые компилятором.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerResults.#ctor(System.CodeDom.Compiler.TempFileCollection)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.Compiler.CompilerResults" />, использующий указанные временные файлы.</summary>
      <param name="tempFiles">Объект <see cref="T:System.CodeDom.Compiler.TempFileCollection" />, с помощью которого необходимо сохранять ссылки на промежуточные файлы, созданные во время компиляции, и управлять ими.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.CompiledAssembly">
      <summary>Получает или задает откомпилированную сборку.</summary>
      <returns>Объект <see cref="T:System.Reflection.Assembly" />, указывающий откомпилированную сборку.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.Errors">
      <summary>Получает коллекцию ошибок компилятора и предупреждений.</summary>
      <returns>
        <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> показывает ошибки и предупреждения, полученные во время компиляции, если они есть.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.NativeCompilerReturnValue">
      <summary>Получает или задает возвращаемое значение компилятора.</summary>
      <returns>Возвращаемое значение компилятора.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.Output">
      <summary>Получает выходные сообщения компилятора.</summary>
      <returns>Объект <see cref="T:System.Collections.Specialized.StringCollection" />, содержащий выходные сообщения.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.PathToAssembly">
      <summary>Получает или задает путь к откомпилированной сборке.</summary>
      <returns>Путь к сборке или значение <see langword="null" />, если сборка была создана в памяти.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.TempFiles">
      <summary>Получает или задает коллекцию временных файлов для использования.</summary>
      <returns>Объект <see cref="T:System.CodeDom.Compiler.TempFileCollection" />, с помощью которого необходимо сохранять ссылки на промежуточные файлы, созданные во время компиляции, и управлять ими.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.Executor">
      <summary>Предоставляет функции выполнения команд для вызова компиляторов. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWait(System.String,System.CodeDom.Compiler.TempFileCollection)">
      <summary>Выполняет команду, используя указанные временные файлы, и ожидает возврата вызова.</summary>
      <param name="cmd">Команда для выполнения.</param>
      <param name="tempFiles">Объект <see cref="T:System.CodeDom.Compiler.TempFileCollection" />, с помощью которого необходимо сохранять ссылки на промежуточные файлы, созданные во время компиляции, и управлять ими.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.IntPtr,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary>Выполняет указанную команду, используя указанные временные файлы и пользовательскую лексему, и ожидает возврата из вызова, сохраняя в указанных строках выходные данные и сведения об ошибках, полученные от компилятора.</summary>
      <param name="userToken">токен, с которого следует начать процесс компилятора.</param>
      <param name="cmd">Команда для выполнения.</param>
      <param name="tempFiles">Объект <see cref="T:System.CodeDom.Compiler.TempFileCollection" />, с помощью которого необходимо сохранять ссылки на промежуточные файлы, созданные во время компиляции, и управлять ими.</param>
      <param name="outputName">Ссылка на строку, где будут сохранены выходные сообщения компилятора.</param>
      <param name="errorName">Ссылка на строку, где будут сохранены имена обнаруженных ошибок.</param>
      <returns>Значение, возвращаемое компилятором.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.IntPtr,System.String,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary>Выполняет указанную команду, используя указанную пользовательскую лексему, текущий каталог и временные файлы, после чего ожидает возврата вызова, сохраняя в указанных строках выходные данные и сведения об ошибках, полученные от компилятора.</summary>
      <param name="userToken">токен, с которого следует начать процесс компилятора.</param>
      <param name="cmd">Команда для выполнения.</param>
      <param name="currentDir">Каталог, в котором следует начать процесс.</param>
      <param name="tempFiles">Объект <see cref="T:System.CodeDom.Compiler.TempFileCollection" />, с помощью которого необходимо сохранять ссылки на промежуточные файлы, созданные во время компиляции, и управлять ими.</param>
      <param name="outputName">Ссылка на строку, где будут сохранены выходные сообщения компилятора.</param>
      <param name="errorName">Ссылка на строку, где будут сохранены имена обнаруженных ошибок.</param>
      <returns>Значение, возвращаемое компилятором.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary>Выполняет указанную команду, используя указанные временные файлы, и ожидает возврата из вызова, сохраняя в указанных строках выходные данные и сведения об ошибках, полученные от компилятора.</summary>
      <param name="cmd">Команда для выполнения.</param>
      <param name="tempFiles">Объект <see cref="T:System.CodeDom.Compiler.TempFileCollection" />, с помощью которого необходимо сохранять ссылки на промежуточные файлы, созданные во время компиляции, и управлять ими.</param>
      <param name="outputName">Ссылка на строку, где будут сохранены выходные сообщения компилятора.</param>
      <param name="errorName">Ссылка на строку, где будут сохранены имена обнаруженных ошибок.</param>
      <returns>Значение, возвращаемое компилятором.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.String,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary>Выполняет указанную команду, используя указанный текущий каталог и временные файлы, после чего ожидает возврата из вызова, сохраняя в указанных строках выходные данные и сведения об ошибках, полученные от компилятора.</summary>
      <param name="cmd">Команда для выполнения.</param>
      <param name="currentDir">Текущий каталог.</param>
      <param name="tempFiles">Объект <see cref="T:System.CodeDom.Compiler.TempFileCollection" />, с помощью которого необходимо сохранять ссылки на промежуточные файлы, созданные во время компиляции, и управлять ими.</param>
      <param name="outputName">Ссылка на строку, где будут сохранены выходные сообщения компилятора.</param>
      <param name="errorName">Ссылка на строку, где будут сохранены имена обнаруженных ошибок.</param>
      <returns>Значение, возвращаемое компилятором.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.GeneratorSupport">
      <summary>Задает идентификаторы, определяющие наличие поддержки генератором кода определенных типов элементов кода.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ArraysOfArrays">
      <summary>Показывает, поддерживает ли генератор массивы массивов.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.AssemblyAttributes">
      <summary>Показывает, поддерживает ли генератор атрибуты сборки.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ChainedConstructorArguments">
      <summary>Показывает, поддерживает ли генератор аргументы цепного конструктора.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ComplexExpressions">
      <summary>Показывает, поддерживает ли генератор составные выражения.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareDelegates">
      <summary>Показывает, поддерживает ли генератор объявления делегата.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareEnums">
      <summary>Показывает, поддерживает ли генератор объявления перечисления.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareEvents">
      <summary>Показывает, поддерживает ли генератор объявления события.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareIndexerProperties">
      <summary>Показывает, поддерживает ли генератор объявление свойств индексатора.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareInterfaces">
      <summary>Показывает, поддерживает ли генератор объявления интерфейса.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareValueTypes">
      <summary>Показывает, поддерживает ли генератор объявления типа значения.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.EntryPointMethod">
      <summary>Показывает, поддерживает ли генератор определение метода точки входа программы. Используется при построении исполняемых файлов.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GenericTypeDeclaration">
      <summary>Показывает, поддерживает ли генератор объявления универсальных типов.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GenericTypeReference">
      <summary>Показывает, поддерживает ли генератор объявления ссылок универсальных типов.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GotoStatements">
      <summary>Показывает, поддерживает ли генератор операторы goto языка.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.MultidimensionalArrays">
      <summary>Показывает, поддерживает ли генератор ссылки на многомерные массивы. В настоящий момент CodeDom не может использоваться для создания экземпляров многомерных массивов.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.MultipleInterfaceMembers">
      <summary>Показывает, поддерживает ли генератор объявление членов, реализующих несколько интерфейсов.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.NestedTypes">
      <summary>Показывает, поддерживает ли генератор объявление вложенных типов.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ParameterAttributes">
      <summary>Показывает, поддерживает ли генератор атрибуты параметра.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.PartialTypes">
      <summary>Показывает, поддерживает ли генератор объявления частичных типов.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.PublicStaticMembers">
      <summary>Показывает, поддерживает ли генератор открытые статические члены.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ReferenceParameters">
      <summary>Показывает, поддерживает ли генератор параметры, передаваемые по ссылке, и выходные параметры.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.Resources">
      <summary>Показывает, поддерживает ли генератор компиляцию с ресурсами платформы .NET Framework. Это могут быть ресурсы по умолчанию, откомпилированные прямо в сборку, или ресурсы, указанные во вспомогательной сборке.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ReturnTypeAttributes">
      <summary>Показывает, поддерживает ли генератор объявления атрибутов возвращаемого типа.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.StaticConstructors">
      <summary>Показывает, поддерживает ли генератор статические конструкторы.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.TryCatchStatements">
      <summary>Показывает, поддерживает ли генератор операторы языка <see langword="try...catch" />.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.Win32Resources">
      <summary>Показывает, поддерживает ли генератор компиляцию с ресурсами Win32.</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeCompiler">
      <summary>Определяет интерфейс для запуска компиляции исходного кода или дерева CodeDOM, используя определенный компилятор.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary>Компилирует сборку из дерева <see cref="N:System.CodeDom" />, содержащегося в указанном <see cref="T:System.CodeDom.CodeCompileUnit" />, используя указанные параметры компилятора.</summary>
      <param name="options">Объект <see cref="T:System.CodeDom.Compiler.CompilerParameters" />, задающий параметры компиляции.</param>
      <param name="compilationUnit">Объект <see cref="T:System.CodeDom.CodeCompileUnit" />, задающий код для компиляции.</param>
      <returns>Объект <see cref="T:System.CodeDom.Compiler.CompilerResults" />, показывающий результаты компиляции.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary>Компилирует сборку на основе деревьев <see cref="N:System.CodeDom" />, содержащихся в указанном массиве объектов <see cref="T:System.CodeDom.CodeCompileUnit" />, используя указанные параметры компилятора.</summary>
      <param name="options">Объект <see cref="T:System.CodeDom.Compiler.CompilerParameters" />, задающий параметры компиляции.</param>
      <param name="compilationUnits">Массив типа <see cref="T:System.CodeDom.CodeCompileUnit" />, указывающий код для компиляции.</param>
      <returns>Объект <see cref="T:System.CodeDom.Compiler.CompilerResults" />, показывающий результаты компиляции.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>Компилирует сборку из исходного кода, содержащегося в указанном файле, используя указанные параметры компилятора.</summary>
      <param name="options">Объект <see cref="T:System.CodeDom.Compiler.CompilerParameters" />, задающий параметры компиляции.</param>
      <param name="fileName">Имя файла, содержащего исходный код для компиляции.</param>
      <returns>Объект <see cref="T:System.CodeDom.Compiler.CompilerResults" />, показывающий результаты компиляции.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>Компилирует сборку из исходного кода, содержащегося в указанных файлах, используя указанные параметры компилятора.</summary>
      <param name="options">Объект <see cref="T:System.CodeDom.Compiler.CompilerParameters" />, задающий параметры компиляции.</param>
      <param name="fileNames">Имена файлов для компиляции.</param>
      <returns>Объект <see cref="T:System.CodeDom.Compiler.CompilerResults" />, показывающий результаты компиляции.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>Компилирует сборку из указанной строки, содержащей исходный код, используя указанные параметры компилятора.</summary>
      <param name="options">Объект <see cref="T:System.CodeDom.Compiler.CompilerParameters" />, задающий параметры компиляции.</param>
      <param name="source">Исходный код для компиляции.</param>
      <returns>Объект <see cref="T:System.CodeDom.Compiler.CompilerResults" />, показывающий результаты компиляции.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>Компилирует сборку из указанного массива строк, содержащего исходный код, используя указанные параметры компилятора.</summary>
      <param name="options">Объект <see cref="T:System.CodeDom.Compiler.CompilerParameters" />, задающий параметры компиляции.</param>
      <param name="sources">Строки исходного кода для компиляции.</param>
      <returns>Объект <see cref="T:System.CodeDom.Compiler.CompilerResults" />, показывающий результаты компиляции.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeGenerator">
      <summary>Определяет интерфейс для создания кода.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.CreateEscapedIdentifier(System.String)">
      <summary>Создает Escape-идентификатор для заданного значения.</summary>
      <param name="value">Строка, для которой создается Escape-идентификатор.</param>
      <returns>Escape-идентификатор для данного значения.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier(System.String)">
      <summary>Создает допустимый идентификатор для указанного значения.</summary>
      <param name="value">Строка, для которой создается допустимый идентификатор.</param>
      <returns>Допустимый идентификатор для указанного значения.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Создает код для указанной единицы компиляции Code Document Object Model (CodeDOM) и выводит его в указанный текстовый редактор, используя указанные параметры.</summary>
      <param name="e">Класс <see cref="T:System.CodeDom.CodeCompileUnit" />, для которого создается код.</param>
      <param name="w">Объект <see cref="T:System.IO.TextWriter" />, куда будет выводиться код.</param>
      <param name="o">Объект <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />, указывающий параметры для использования при создании кода.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Формирует код для указанного выражения Code Document Object Model (CodeDOM) и выводит его в определенный модуль записи текста.</summary>
      <param name="e">Объект <see cref="T:System.CodeDom.CodeExpression" />, указывающий выражение, для которого создается код.</param>
      <param name="w">Объект <see cref="T:System.IO.TextWriter" />, куда будет выводиться код.</param>
      <param name="o">Объект <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />, указывающий параметры для использования при создании кода.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Формирует код для указанного пространства имен Code Document Object Model (CodeDOM) и выводит его в определенный модуль записи текста, используя заданные параметры.</summary>
      <param name="e">Объект <see cref="T:System.CodeDom.CodeNamespace" />, указывающий пространство имен, для которого создается код.</param>
      <param name="w">Объект <see cref="T:System.IO.TextWriter" />, куда будет выводиться код.</param>
      <param name="o">Объект <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />, указывающий параметры для использования при создании кода.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Формирует код для указанной инструкции Code Document Object Model (CodeDOM) и выводит его в определенный модуль записи текста, используя заданные параметры.</summary>
      <param name="e">Объект <see cref="T:System.CodeDom.CodeStatement" />, содержащий элементы CodeDOM для преобразования.</param>
      <param name="w">Объект <see cref="T:System.IO.TextWriter" />, куда будет выводиться код.</param>
      <param name="o">Объект <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />, указывающий параметры для использования при создании кода.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Формирует код для указанного объявления типа Code Document Object Model (CodeDOM) и выводит его в определенный модуль записи текста, используя заданные параметры.</summary>
      <param name="e">Объект <see cref="T:System.CodeDom.CodeTypeDeclaration" />, задающий тип, для которого создается код.</param>
      <param name="w">Объект <see cref="T:System.IO.TextWriter" />, куда будет выводиться код.</param>
      <param name="o">Объект <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />, указывающий параметры для использования при создании кода.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary>Получает тип, на который указывает заданный объект <see cref="T:System.CodeDom.CodeTypeReference" />.</summary>
      <param name="type">
        <see cref="T:System.CodeDom.CodeTypeReference" /> указывает возвращаемый тип.</param>
      <returns>Текстовое представление указанного типа для языка, код которого создает данный генератор. Например, в Visual Basic при передаче типа System.Int32 будет возвращено значение Integer.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.IsValidIdentifier(System.String)">
      <summary>Получает значение, показывающее, является ли указанное значение допустимым идентификатором для текущего языка.</summary>
      <param name="value">Значение, которое следует проверить на предмет того, является ли оно допустимым идентификатором.</param>
      <returns>
        <see langword="true" />, если параметр <paramref name="value" /> является допустимым идентификатором; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary>Получает значение, показывающее, предоставляет ли генератор поддержку средств языка, представленных указанным объектом <see cref="T:System.CodeDom.Compiler.GeneratorSupport" />.</summary>
      <param name="supports">Возможности, на наличие которых следует проверить генератор.</param>
      <returns>
        <see langword="true" />, если указанные возможности поддерживаются; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.ValidateIdentifier(System.String)">
      <summary>Выбрасывает исключение, если указанное значение не является допустимым идентификатором.</summary>
      <param name="value">Идентификатор для проверки на допустимость.</param>
      <exception cref="T:System.ArgumentException">Недопустимый идентификатор.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeParser">
      <summary>Определяет интерфейс для анализа кода в <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeParser.Parse(System.IO.TextReader)">
      <summary>При реализации в производном классе компилирует указанный текстовый поток в <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
      <param name="codeStream">
        <see cref="T:System.IO.TextReader" /> применяется для чтения предназначенного для компиляции кода.</param>
      <returns>Объект <see cref="T:System.CodeDom.CodeCompileUnit" />, содержащий представление анализируемого кода.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.LanguageOptions">
      <summary>Определяет идентификаторы, указывающие особенности языка.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.LanguageOptions.CaseInsensitive">
      <summary>В языке регистр не учитывается.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.LanguageOptions.None">
      <summary>Язык имеет характеристики по умолчанию.</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.TempFileCollection">
      <summary>Представляет коллекцию временных файлов.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> со значениями по умолчанию.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.CodeDom.Compiler.TempFileCollection" />, используя указанный временный каталог, из которого временные файлы будут удалены по умолчанию после создания и использования.</summary>
      <param name="tempDir">Путь к временному каталогу для сохранения временных файлов.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor(System.String,System.Boolean)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.CodeDom.Compiler.TempFileCollection" />, используя указанный временный каталог и значение, показывающее, следует ли по умолчанию сохранить или удалить временные файлы после создания и использования.</summary>
      <param name="tempDir">Путь к временному каталогу для сохранения временных файлов.</param>
      <param name="keepFiles">
        <see langword="true" />, если после использования временные файлы следует оставить; <see langword="false" />, если временные файлы должны быть удалены.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddExtension(System.String)">
      <summary>Добавляет к коллекции имя файла с указанным расширением имени файла.</summary>
      <param name="fileExtension">Расширение имени файла для автоматически создаваемого имени временного файла, добавляемого к коллекции.</param>
      <returns>Имя файла с указанным расширением, добавленное к коллекции.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddExtension(System.String,System.Boolean)">
      <summary>Добавляет к коллекции имя файла с указанным расширением имени файла, используя указанное значение, показывающее, удалить файл или сохранить.</summary>
      <param name="fileExtension">Расширение имени файла для автоматически создаваемого имени временного файла, добавляемого к коллекции.</param>
      <param name="keepFile">
        <see langword="true" />, если после использования временный файл следует оставить; <see langword="false" />, если файл должен быть удален.</param>
      <returns>Имя файла с указанным расширением, добавленное к коллекции.</returns>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="fileExtension" /> имеет значение <see langword="null" /> или является пустой строкой.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddFile(System.String,System.Boolean)">
      <summary>Добавляет к коллекции указанный файл, используя указанное значение, показывающее, следует ли оставлять файл после удаления коллекции или при вызове метода <see cref="M:System.CodeDom.Compiler.TempFileCollection.Delete" />.</summary>
      <param name="fileName">Имя файла для добавления к коллекции.</param>
      <param name="keepFile">
        <see langword="true" />, если после использования временный файл следует оставить; <see langword="false" />, если файл должен быть удален.</param>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="fileName" /> имеет значение <see langword="null" /> или является пустой строкой.

или -
Значение <paramref name="fileName" /> является дубликатом.</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.BasePath">
      <summary>Получает полный путь к базовому имени файла, без расширения имени файла, по пути временного каталога, используемого при создании имен временных файлов для коллекции.</summary>
      <returns>Полный путь к базовому имени файла, без расширения имени файла, по пути временного каталога, используемого при создании имен временных файлов для коллекции.</returns>
      <exception cref="T:System.Security.SecurityException">Если свойство <see cref="P:System.CodeDom.Compiler.TempFileCollection.BasePath" /> не было задано или оно задано как <see langword="null" />, а разрешение <see cref="F:System.Security.Permissions.FileIOPermissionAccess.AllAccess" /> не предоставлено для временного каталога, указанного свойством <see cref="P:System.CodeDom.Compiler.TempFileCollection.TempDir" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.CopyTo(System.String[],System.Int32)">
      <summary>Копирует члены коллекции в указанную строку начиная с указанного индекса.</summary>
      <param name="fileNames">Массив строк, в который выполняется копирование.</param>
      <param name="start">Индекс в массиве, с которого следует начать копирование.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.Count">
      <summary>Получает число файлов в коллекции.</summary>
      <returns>Число файлов в коллекции.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Delete">
      <summary>Удаляет из данной коллекции временные файлы, не помеченные для сохранения.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Dispose(System.Boolean)">
      <summary>Освобождает неуправляемые ресурсы, используемые объектом <see cref="T:System.CodeDom.Compiler.TempFileCollection" />, а при необходимости освобождает также управляемые ресурсы.</summary>
      <param name="disposing">Значение <see langword="true" /> позволяет освободить управляемые и неуправляемые ресурсы; значение <see langword="false" /> позволяет освободить только неуправляемые ресурсы.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Finalize">
      <summary>Пытается удалить временные файлы перед тем, как данный объект будет утилизирован при сборке мусора.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.GetEnumerator">
      <summary>Получает перечислитель, который перечисляет члены коллекции.</summary>
      <returns>Перечислитель <see cref="T:System.Collections.IEnumerator" />, содержащий члены коллекции.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.KeepFiles">
      <summary>Возвращает или задает значение, показывающее, следует ли по умолчанию сохранять файлы при вызове метода <see cref="M:System.CodeDom.Compiler.TempFileCollection.Delete" /> или удалении коллекции.</summary>
      <returns>
        <see langword="true" />, если файлы следует сохранить; в противном случае <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Копирует элементы коллекции в массив начиная с заданного индекса в целевом массиве.</summary>
      <param name="array">Одномерный массив <see cref="T:System.Array" />, в который копируются элементы из интерфейса <see cref="T:System.Collections.ICollection" />. Массив <see cref="T:System.Array" /> должен иметь индексацию, начинающуюся с нуля.</param>
      <param name="start">Отсчитываемый от нуля индекс в массиве, с которого начинается копирование.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#Count">
      <summary>Возвращает количество элементов, содержащихся в коллекции.</summary>
      <returns>Число элементов, содержащихся в интерфейсе <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Возвращает значение, указывающее, является ли доступ к коллекции синхронизированным (потокобезопасным).</summary>
      <returns>
        <see langword="true" />, если доступ к классу <see cref="T:System.Collections.ICollection" /> является синхронизированным (потокобезопасным); в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#SyncRoot">
      <summary>Возвращает объект, который можно использовать для синхронизации доступа к коллекции.</summary>
      <returns>Объект, который может использоваться для синхронизации доступа к <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель, который осуществляет итерацию по коллекции.</summary>
      <returns>Объект <see cref="T:System.Collections.IEnumerator" />, который может использоваться для итерации элементов коллекции.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#IDisposable#Dispose">
      <summary>Выполняет определяемые приложением задачи, связанные с удалением, высвобождением или сбросом неуправляемых ресурсов.</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.TempDir">
      <summary>Получает временный каталог для хранения временных файлов.</summary>
      <returns>Временный каталог для хранения временных файлов.</returns>
    </member>
    <member name="T:System.CodeDom.FieldDirection">
      <summary>Определяет идентификаторы, используемые для указания направления параметра и объявлений аргумента.</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.In">
      <summary>Входящее поле.</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.Out">
      <summary>Выходящее поле.</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.Ref">
      <summary>Поле по ссылке.</summary>
    </member>
    <member name="T:System.CodeDom.MemberAttributes">
      <summary>Определяет идентификаторы атрибута элемента для элементов класса.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Abstract">
      <summary>Абстрактный элемент.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.AccessMask">
      <summary>Маска доступа.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Assembly">
      <summary>Элемент, доступный для любого класса в одной сборке.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Const">
      <summary>Постоянный элемент.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Family">
      <summary>Элемент, доступный в семействе своего класса и производных классах.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.FamilyAndAssembly">
      <summary>Элемент, доступный в своем классе и производных классах в одной сборке.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.FamilyOrAssembly">
      <summary>Элемент, доступный в своем классе, производных классах в любой сборке и любом классе в одной сборке.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Final">
      <summary>Элемент, который не может быть переопределен в производном классе.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.New">
      <summary>Новый элемент.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Overloaded">
      <summary>Перегруженный элемент. В некоторых языках, например в Visual Basic, необходимо явно указывать перегруженные члены.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Override">
      <summary>Элемент, переопределяющий элемент базового класса.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Private">
      <summary>Закрытый элемент.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Public">
      <summary>Открытый элемент.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.ScopeMask">
      <summary>Маска области.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Static">
      <summary>Статический элемент. (Эквивалентно ключевому слову <see langword="Shared" /> в Visual Basic).</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.VTableMask">
      <summary>Маска VTable.</summary>
    </member>
  </members>
</doc>
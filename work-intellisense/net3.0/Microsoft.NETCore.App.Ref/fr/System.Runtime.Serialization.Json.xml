<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Runtime.Serialization.Json</name>
  </assembly>
  <members>
    <member name="T:System.Runtime.Serialization.DateTimeFormat">
      <summary vsli:raw="Specifies date-time format options.">Spécifie les options du format de date/heure.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.DateTimeFormat.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.Serialization.DateTimeFormat&quot; /&gt; class using the format string.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.Serialization.DateTimeFormat" /> à l'aide de la chaîne de format spécifiée.</summary>
      <param name="formatString" vsli:raw="The format string.">Chaîne de format.</param>
    </member>
    <member name="M:System.Runtime.Serialization.DateTimeFormat.#ctor(System.String,System.IFormatProvider)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.Serialization.DateTimeFormat&quot; /&gt; class using the format string and format provider.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.Serialization.DateTimeFormat" /> avec la chaîne de format et le fournisseur de format spécifiés.</summary>
      <param name="formatString" vsli:raw="The format sting.">Chaîne de format.</param>
      <param name="formatProvider" vsli:raw="The format provider.">Fournisseur de format.</param>
    </member>
    <member name="P:System.Runtime.Serialization.DateTimeFormat.DateTimeStyles">
      <summary vsli:raw="Gets or sets the formatting options that customize string parsing for some date and time parsing methods.">Obtient ou définit les options de mise en forme qui personnalisent l'analyse de chaîne pour certaines méthodes d'analyse de la date et de l'heure.</summary>
      <returns vsli:raw="The formatting options that customize string parsing for some date and time parsing methods.">Options de mise en forme qui personnalisent l'analyse de chaîne pour plusieurs méthodes d'analyse de date et d'heure.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.DateTimeFormat.FormatProvider">
      <summary vsli:raw="Gets an object that controls formatting.">Obtient un objet qui contrôle la mise en forme.</summary>
    </member>
    <member name="P:System.Runtime.Serialization.DateTimeFormat.FormatString">
      <summary vsli:raw="Gets the format strings to control the formatting produced when a date or time is represented as a string.">Obtient les chaînes de format permettant de contrôler la mise en forme produite lorsqu'une date ou une heure est représentée sous forme de chaîne.</summary>
      <returns vsli:raw="The format strings to control the formatting produced when a date or time is represented as a string.">Chaînes de format permettant de contrôler la mise en forme produite lorsqu'une date ou une heure est représentée sous forme de chaîne.</returns>
    </member>
    <member name="T:System.Runtime.Serialization.EmitTypeInformation">
      <summary vsli:raw="Specifies how often to emit type information.">Spécifie la fréquence d'émission des informations de type.</summary>
    </member>
    <member name="F:System.Runtime.Serialization.EmitTypeInformation.Always">
      <summary vsli:raw="Always to emit type information.">Est toujours en mesure d'émettre des informations de type.</summary>
    </member>
    <member name="F:System.Runtime.Serialization.EmitTypeInformation.AsNeeded">
      <summary vsli:raw="As needed emit type information.">Selon les besoins, émission des informations de type.</summary>
    </member>
    <member name="F:System.Runtime.Serialization.EmitTypeInformation.Never">
      <summary vsli:raw="Never to emit type information.">Ne jamais émettre des informations de type.</summary>
    </member>
    <member name="T:System.Runtime.Serialization.Json.DataContractJsonSerializer">
      <summary vsli:raw="Serializes objects to the JavaScript Object Notation (JSON) and deserializes JSON data to objects. This class cannot be inherited.">Sérialise des objets au format JSON (JavaScript Object Notation) et désérialise les données JSON vers des objets. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.Serialization.Json.DataContractJsonSerializer&quot; /&gt; class to serialize or deserialize an object of the specified type.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> pour sérialiser ou désérialiser un objet du type spécifié.</summary>
      <param name="type" vsli:raw="The type of the instances that is serialized or deserialized.">Type des instances sérialisées ou désérialisées.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Type})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.Serialization.Json.DataContractJsonSerializer&quot; /&gt; class to serialize or deserialize an object of the specified type, with a collection of known types that may be present in the object graph.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> pour sérialiser ou désérialiser un objet du type spécifié, avec une collection de types connus pouvant être présents dans le graphique d'objets.</summary>
      <param name="type" vsli:raw="The type of the instances that are serialized or deserialized.">Type des instances sérialisées ou désérialisées.</param>
      <param name="knownTypes" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; of &lt;see cref=&quot;T:System.Type&quot; /&gt; that contains the types that may be present in the object graph.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> de <see cref="T:System.Type" /> qui contient les types pouvant être présents dans le graphique d'objets.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Runtime.Serialization.Json.DataContractJsonSerializerSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.Serialization.Json.DataContractJsonSerializer&quot; /&gt; class to serialize or deserialize an object of the specified type and serializer settings.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> pour sérialiser ou désérialiser un objet avec le type et les paramètres de sérialiseur spécifiés.</summary>
      <param name="type" vsli:raw="The type of the instances that is serialized or deserialized.">Type des instances sérialisées ou désérialisées.</param>
      <param name="settings" vsli:raw="The serializer settings for the JSON serializer.">Paramètres de sérialiseur pour le sérialiseur JSON.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.Serialization.Json.DataContractJsonSerializer&quot; /&gt; class to serialize or deserialize an object of a specified type using the XML root element specified by a parameter.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> pour sérialiser ou désérialiser un objet d'un type spécifié à l'aide de l'élément racine XML spécifié par un paramètre.</summary>
      <param name="type" vsli:raw="The type of the instances that is serialized or deserialized.">Type des instances sérialisées ou désérialisées.</param>
      <param name="rootName" vsli:raw="The name of the XML element that encloses the content to serialize or deserialize.">Nom de l'élément XML renfermant le contenu à sérialiser ou désérialiser.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.String,System.Collections.Generic.IEnumerable{System.Type})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.Serialization.Json.DataContractJsonSerializer&quot; /&gt; class to serialize or deserialize an object of a specified type using the XML root element specified by a parameter, with a collection of known types that may be present in the object graph.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> pour sérialiser ou désérialiser un objet d’un type spécifié à l’aide de l’élément racine XML spécifié par un paramètre, avec une collection des types connus pouvant être présents dans le graphique d’objets.</summary>
      <param name="type" vsli:raw="The type of the instances that is serialized or deserialized.">Type des instances sérialisées ou désérialisées.</param>
      <param name="rootName" vsli:raw="The name of the XML element that encloses the content to serialize or deserialize. The default is &quot;root&quot;.">Nom de l'élément XML renfermant le contenu à sérialiser ou désérialiser. La valeur par défaut est « racine ».</param>
      <param name="knownTypes" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; of &lt;see cref=&quot;T:System.Type&quot; /&gt; that contains the types that may be present in the object graph.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> de <see cref="T:System.Type" /> qui contient les types pouvant être présents dans le graphique d'objets.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Xml.XmlDictionaryString)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.Serialization.Json.DataContractJsonSerializer&quot; /&gt; class to serialize or deserialize an object of a specified type using the XML root element specified by a parameter of type &lt;see cref=&quot;T:System.Xml.XmlDictionaryString&quot; /&gt;.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> pour sérialiser ou désérialiser un objet d'un type spécifié à l'aide de l'élément racine XML spécifié par un paramètre de type <see cref="T:System.Xml.XmlDictionaryString" />.</summary>
      <param name="type" vsli:raw="The type of the instances that is serialized or deserialized.">Type des instances sérialisées ou désérialisées.</param>
      <param name="rootName" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlDictionaryString&quot; /&gt; that contains the root element name of the content.">
        <see cref="T:System.Xml.XmlDictionaryString" /> qui contient le nom de l'élément racine du contenu.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Xml.XmlDictionaryString,System.Collections.Generic.IEnumerable{System.Type})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.Serialization.Json.DataContractJsonSerializer&quot; /&gt; class to serialize or deserialize an object of a specified type using the XML root element specified by a parameter of type &lt;see cref=&quot;T:System.Xml.XmlDictionaryString&quot; /&gt;, with a collection of known types that may be present in the object graph.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> pour sérialiser ou désérialiser un objet d'un type spécifié à l'aide de l'élément racine XML spécifié par un paramètre de type <see cref="T:System.Xml.XmlDictionaryString" />, avec une collection des types connus pouvant être présents dans le graphique d'objets.</summary>
      <param name="type" vsli:raw="The type of the instances that is serialized or deserialized.">Type des instances sérialisées ou désérialisées.</param>
      <param name="rootName" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlDictionaryString&quot; /&gt; that contains the root element name of the content.">
        <see cref="T:System.Xml.XmlDictionaryString" /> qui contient le nom de l'élément racine du contenu.</param>
      <param name="knownTypes" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; of &lt;see cref=&quot;T:System.Type&quot; /&gt; that contains the types that may be present in the object graph.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> de <see cref="T:System.Type" /> qui contient les types pouvant être présents dans le graphique d'objets.</param>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.DateTimeFormat">
      <summary vsli:raw="Gets the format of the date and time type items in object graph.">Obtient le format des éléments de type date et heure dans le graphique d'objet.</summary>
      <returns vsli:raw="The format of the date and time type items in object graph.">Format des éléments de type date et heure dans le graphique d'objet.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.EmitTypeInformation">
      <summary vsli:raw="Gets or sets the data contract JSON serializer settings to emit type information.">Obtient ou définit les paramètres du sérialiseur JSON de contrat de données pour l'émission des informations de type.</summary>
      <returns vsli:raw="The data contract JSON serializer settings to emit type information.">Paramètres du sérialiseur JSON de contrat de données pour l'émission des informations de type.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.IgnoreExtensionDataObject">
      <summary vsli:raw="Gets a value that specifies whether unknown data is ignored on deserialization and whether the &lt;see cref=&quot;T:System.Runtime.Serialization.IExtensibleDataObject&quot; /&gt; interface is ignored on serialization.">Obtient une valeur qui spécifie si les données inconnues sont ignorées lors de la désérialisation, et si l’interface <see cref="T:System.Runtime.Serialization.IExtensibleDataObject" /> est ignorée lors de la sérialisation.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to ignore unknown data and &lt;see cref=&quot;T:System.Runtime.Serialization.IExtensibleDataObject&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour ignorer des données inconnues et <see cref="T:System.Runtime.Serialization.IExtensibleDataObject" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.IsStartObject(System.Xml.XmlDictionaryReader)">
      <summary vsli:raw="Gets a value that specifies whether the &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; is positioned over an XML element that represents an object the serializer can deserialize from.">Obtient une valeur qui spécifie si le <see cref="T:System.Xml.XmlDictionaryReader" /> est positionné au-dessus d'un élément XML représentant un objet pouvant être désérialisé par le sérialiseur.</summary>
      <param name="reader" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; used to read the XML stream mapped from JSON.">
        <see cref="T:System.Xml.XmlDictionaryReader" /> utilisé pour lire le flux XML mappé depuis JSON.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader is positioned correctly; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le lecteur est correctement positionné ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.IsStartObject(System.Xml.XmlReader)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is positioned on an object that can be deserialized.">Détermine si la classe <see cref="T:System.Xml.XmlReader" /> est positionnée sur un objet pouvant être désérialisé.</summary>
      <param name="reader" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; used to read the XML stream.">
        <see cref="T:System.Xml.XmlReader" /> utilisé pour lire le flux XML.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader is positioned correctly; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le lecteur est correctement positionné ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.KnownTypes">
      <summary vsli:raw="Gets a collection of types that may be present in the object graph serialized using this instance of the &lt;see cref=&quot;T:System.Runtime.Serialization.Json.DataContractJsonSerializer&quot; /&gt;.">Obtient une collection des types pouvant être présents dans le graphique d'objets sérialisé à l'aide de cette instance de <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" />.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.ObjectModel.ReadOnlyCollection`1&quot; /&gt; that contains the expected types passed in as known types to the &lt;see cref=&quot;T:System.Runtime.Serialization.Json.DataContractJsonSerializer&quot; /&gt; constructor.">
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> qui contient les types attendus passés en tant que types connus au constructeur <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" />.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.MaxItemsInObjectGraph">
      <summary vsli:raw="Gets the maximum number of items in an object graph that the serializer serializes or deserializes in one read or write call.">Obtient le nombre maximal d'éléments dans un graphique d'objets que le sérialiseur sérialise ou désérialise au cours d'un appel de lecture ou d'écriture.</summary>
      <returns vsli:raw="The maximum number of items to serialize or deserialize.">Nombre maximal d'éléments à sérialiser ou à désérialiser.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The number of items exceeds the maximum value.">Le nombre d'éléments dépasse la valeur maximale.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.IO.Stream)">
      <summary vsli:raw="Reads a document stream in the JSON (JavaScript Object Notation) format and returns the deserialized object.">Lit un flux de document au format JSON (JavaScript Object Notation) et retourne l'objet désérialisé.</summary>
      <param name="stream" vsli:raw="The &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; to be read.">
        <see cref="T:System.IO.Stream" /> à lire.</param>
      <returns vsli:raw="The deserialized object.">L'objet désérialisé.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.Xml.XmlDictionaryReader)">
      <summary vsli:raw="Reads the XML document mapped from JSON (JavaScript Object Notation) with an &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; and returns the deserialized object.">Lit le document XML mappé depuis JSON (JavaScript Object Notation) avec un <see cref="T:System.Xml.XmlDictionaryReader" /> et retourne l'objet désérialisé.</summary>
      <param name="reader" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; used to read the XML document mapped from JSON.">
        <see cref="T:System.Xml.XmlDictionaryReader" /> utilisé pour lire le document XML mappé de JSON.</param>
      <returns vsli:raw="The deserialized object.">L'objet désérialisé.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.Xml.XmlDictionaryReader,System.Boolean)">
      <summary vsli:raw="Reads the XML document mapped from JSON with an &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; and returns the deserialized object; it also enables you to specify whether the serializer should verify that it is positioned on an appropriate element before attempting to deserialize.">Lit le document XML mappé depuis JSON avec un <see cref="T:System.Xml.XmlDictionaryReader" /> et retourne l'objet désérialisé ; il vous permet également de spécifier si le sérialiseur doit vérifier s'il est positionné sur un élément approprié avant de tenter de le désérialiser.</summary>
      <param name="reader" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; used to read the XML document mapped from JSON.">
        <see cref="T:System.Xml.XmlDictionaryReader" /> utilisé pour lire le document XML mappé de JSON.</param>
      <param name="verifyObjectName" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to check whether the enclosing XML element name and namespace correspond to the expected name and namespace; otherwise, &lt;see langword=&quot;false&quot; /&gt; to skip the verification. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> pour vérifier si le nom et l'espace de noms de l'élément XML englobant correspondent au nom et à l'espace de noms attendus ; sinon, <see langword="false" /> pour ignorer la vérification. La valeur par défaut est <see langword="true" />.</param>
      <returns vsli:raw="The deserialized object.">L'objet désérialisé.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.Xml.XmlReader)">
      <summary vsli:raw="Reads the XML document mapped from JSON (JavaScript Object Notation) with an &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; and returns the deserialized object.">Lit le document XML mappé depuis JSON (JavaScript Object Notation) avec un <see cref="T:System.Xml.XmlReader" /> et retourne l'objet désérialisé.</summary>
      <param name="reader" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; used to read the XML document mapped from JSON.">
        <see cref="T:System.Xml.XmlReader" /> utilisé pour lire le document XML mappé de JSON.</param>
      <returns vsli:raw="The deserialized object.">L'objet désérialisé.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.Xml.XmlReader,System.Boolean)">
      <summary vsli:raw="Reads an XML document mapped from JSON with an &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; and returns the deserialized object; it also enables you to specify whether the serializer should verify that it is positioned on an appropriate element before attempting to deserialize.">Lit un document XML mappé depuis JSON avec un <see cref="T:System.Xml.XmlReader" /> et retourne l'objet désérialisé ; il vous permet également de spécifier si le sérialiseur doit vérifier s'il est positionné sur un élément approprié avant de tenter de le désérialiser.</summary>
      <param name="reader" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; used to read the XML document mapped from JSON.">
        <see cref="T:System.Xml.XmlReader" /> utilisé pour lire le document XML mappé de JSON.</param>
      <param name="verifyObjectName" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to check whether the enclosing XML element name and namespace correspond to the expected name and namespace; otherwise, &lt;see langword=&quot;false&quot; /&gt;, which skips the verification. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> pour vérifier si le nom et l'espace de noms de l'élément XML englobant correspondent au nom et à l'espace de noms attendus ; sinon, <see langword="false" /> pour ignorer la vérification. La valeur par défaut est <see langword="true" />.</param>
      <returns vsli:raw="The deserialized object.">L'objet désérialisé.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.SerializeReadOnlyTypes">
      <summary vsli:raw="Gets or sets a value that specifies whether to serialize read only types.">Obtient ou définit une valeur qui spécifie s'il faut sérialiser des types de lecture seule.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to serialize read only types; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour sérialiser des types en lecture seule ; sinon <see langword="false" />.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.UseSimpleDictionaryFormat">
      <summary vsli:raw="Gets a value that specifies whether to use a simple dictionary format.">Obtient une valeur qui spécifie s’il faut utiliser un format de dictionnaire simple.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to use a simple dictionary format; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour utiliser un format de dictionnaire simple ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteEndObject(System.Xml.XmlDictionaryWriter)">
      <summary vsli:raw="Writes the closing XML element to an XML document, using an &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt;, which can be mapped to JavaScript Object Notation (JSON).">Écrit l'élément XML de fermeture dans un document XML, à l'aide d'un <see cref="T:System.Xml.XmlDictionaryWriter" /> qui peut être mappé avec JSON (JavaScript Object Notation).</summary>
      <param name="writer" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; used to write the XML document to map to JSON.">
        <see cref="T:System.Xml.XmlDictionaryWriter" /> utilisé pour écrire le document XML à mapper à JSON.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteEndObject(System.Xml.XmlWriter)">
      <summary vsli:raw="Writes the closing XML element to an XML document, using an &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;, which can be mapped to JavaScript Object Notation (JSON).">Écrit l'élément XML de fermeture dans un document XML, à l'aide d'un <see cref="T:System.Xml.XmlWriter" /> qui peut être mappé avec JSON (JavaScript Object Notation).</summary>
      <param name="writer" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; used to write the XML document mapped to JSON.">
        <see cref="T:System.Xml.XmlWriter" /> utilisé pour écrire le document XML mappé à JSON.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObject(System.IO.Stream,System.Object)">
      <summary vsli:raw="Serializes a specified object to JavaScript Object Notation (JSON) data and writes the resulting JSON to a stream.">Sérialise un objet spécifié vers des données JSON (JavaScript Objet Notation) et écrit le JSON obtenu dans un flux.</summary>
      <param name="stream" vsli:raw="The &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; that is written to.">
        <see cref="T:System.IO.Stream" /> dans lequel il est écrit.</param>
      <param name="graph" vsli:raw="The object that contains the data to write to the stream.">Objet contenant les données à écrire dans le flux.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException" vsli:raw="The type being serialized does not conform to data contract rules. For example, the &lt;see cref=&quot;T:System.Runtime.Serialization.DataContractAttribute&quot; /&gt; attribute has not been applied to the type.">Le type en cours de sérialisation n'est pas conforme aux règles de contrat de données. Par exemple, l'attribut <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> n'a pas été appliqué au type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="There is a problem with the instance being written.">Il y a un problème avec l'instance en cours d'écriture.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException" vsli:raw="The maximum number of objects to serialize has been exceeded. Check the &lt;see cref=&quot;P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph&quot; /&gt; property.">Le nombre maximal d'objets à sérialiser a été dépassé. Vérifiez la propriété <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" />.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObject(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary vsli:raw="Serializes an object to XML that may be mapped to JavaScript Object Notation (JSON). Writes all the object data, including the starting XML element, content, and closing element, with an &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt;.">Sérialise un objet au format XML pouvant être mappé à JSON (JavaScript Object Notation). Écrit toutes les données d'objet, notamment l'élément XML de début, le contenu et l'élément de fermeture, à l'aide de <see cref="T:System.Xml.XmlDictionaryWriter" />.</summary>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; used to write the XML document or stream to map to JSON.">
        <see cref="T:System.Xml.XmlDictionaryWriter" /> utilisé pour écrire le flux ou le document XML à mapper à JSON.</param>
      <param name="graph" vsli:raw="The object that contains the data to write.">Objet qui contient les données à écrire.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException" vsli:raw="The type being serialized does not conform to data contract rules. For example, the &lt;see cref=&quot;T:System.Runtime.Serialization.DataContractAttribute&quot; /&gt; attribute has not been applied to the type.">Le type en cours de sérialisation n'est pas conforme aux règles de contrat de données. Par exemple, l'attribut <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> n'a pas été appliqué au type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="There is a problem with the instance being written.">Il y a un problème avec l'instance en cours d'écriture.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException" vsli:raw="The maximum number of objects to serialize has been exceeded. Check the &lt;see cref=&quot;P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph&quot; /&gt; property.">Le nombre maximal d'objets à sérialiser a été dépassé. Vérifiez la propriété <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" />.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObject(System.Xml.XmlWriter,System.Object)">
      <summary vsli:raw="Serializes an object to XML that may be mapped to JavaScript Object Notation (JSON). Writes all the object data, including the starting XML element, content, and closing element, with an &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">Sérialise un objet au format XML pouvant être mappé à JSON (JavaScript Object Notation). Écrit toutes les données d'objet, notamment l'élément XML de début, le contenu et l'élément de fermeture, à l'aide de <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; used to write the XML document to map to JSON.">
        <see cref="T:System.Xml.XmlWriter" /> utilisé pour écrire le document XML à mapper à JSON.</param>
      <param name="graph" vsli:raw="The object that contains the data to write.">Objet qui contient les données à écrire.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException" vsli:raw="The type being serialized does not conform to data contract rules. For example, the &lt;see cref=&quot;T:System.Runtime.Serialization.DataContractAttribute&quot; /&gt; attribute has not been applied to the type.">Le type en cours de sérialisation n'est pas conforme aux règles de contrat de données. Par exemple, l'attribut <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> n'a pas été appliqué au type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="There is a problem with the instance being written.">Il y a un problème avec l'instance en cours d'écriture.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException" vsli:raw="The maximum number of objects to serialize has been exceeded. Check the &lt;see cref=&quot;P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph&quot; /&gt; property.">Le nombre maximal d'objets à sérialiser a été dépassé. Vérifiez la propriété <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" />.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObjectContent(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary vsli:raw="Writes the XML content that can be mapped to JavaScript Object Notation (JSON) using an &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt;.">Écrit le contenu XML qui peut être mappé à JSON (JavaScript Object Notation) à l'aide d'un <see cref="T:System.Xml.XmlDictionaryWriter" />.</summary>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; to write to.">
        <see cref="T:System.Xml.XmlDictionaryWriter" /> dans lequel écrire.</param>
      <param name="graph" vsli:raw="The object to write.">Objet à écrire.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException" vsli:raw="The type being serialized does not conform to data contract rules. For example, the &lt;see cref=&quot;T:System.Runtime.Serialization.DataContractAttribute&quot; /&gt; attribute has not been applied to the type.">Le type en cours de sérialisation n'est pas conforme aux règles de contrat de données. Par exemple, l'attribut <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> n'a pas été appliqué au type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="There is a problem with the instance being written.">Il y a un problème avec l'instance en cours d'écriture.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException" vsli:raw="The maximum number of objects to serialize has been exceeded. Check the &lt;see cref=&quot;P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph&quot; /&gt; property.">Le nombre maximal d'objets à sérialiser a été dépassé. Vérifiez la propriété <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" />.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObjectContent(System.Xml.XmlWriter,System.Object)">
      <summary vsli:raw="Writes the XML content that can be mapped to JavaScript Object Notation (JSON) using an &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">Écrit le contenu XML qui peut être mappé à JSON (JavaScript Object Notation) à l'aide d'un <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; used to write to.">
        <see cref="T:System.Xml.XmlWriter" /> utilisé pour l'écriture.</param>
      <param name="graph" vsli:raw="The object to write.">Objet à écrire.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException" vsli:raw="The type being serialized does not conform to data contract rules. For example, the &lt;see cref=&quot;T:System.Runtime.Serialization.DataContractAttribute&quot; /&gt; attribute has not been applied to the type.">Le type en cours de sérialisation n'est pas conforme aux règles de contrat de données. Par exemple, l'attribut <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> n'a pas été appliqué au type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="There is a problem with the instance being written.">Il y a un problème avec l'instance en cours d'écriture.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException" vsli:raw="The maximum number of objects to serialize has been exceeded. Check the &lt;see cref=&quot;P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph&quot; /&gt; property.">Le nombre maximal d'objets à sérialiser a été dépassé. Vérifiez la propriété <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" />.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteStartObject(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary vsli:raw="Writes the opening XML element for serializing an object to XML that can be mapped to JavaScript Object Notation (JSON) using an &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt;.">Écrit l'élément XML de début pour sérialiser un objet dans XML qui peut être mappé à JSON (JavaScript Object Notation) à l'aide d'un <see cref="T:System.Xml.XmlDictionaryWriter" />.</summary>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; used to write the XML start element.">
        <see cref="T:System.Xml.XmlDictionaryWriter" /> utilisé pour écrire l'élément XML de début.</param>
      <param name="graph" vsli:raw="The object to write.">Objet à écrire.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteStartObject(System.Xml.XmlWriter,System.Object)">
      <summary vsli:raw="Writes the opening XML element for serializing an object to XML that can be mapped to JavaScript Object Notation (JSON) using an &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">Écrit l'élément XML de début pour sérialiser un objet dans XML qui peut être mappé à JSON (JavaScript Object Notation) à l'aide d'un <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; used to write the XML start element.">
        <see cref="T:System.Xml.XmlWriter" /> utilisé pour écrire l'élément XML de début.</param>
      <param name="graph" vsli:raw="The object to write.">Objet à écrire.</param>
    </member>
    <member name="T:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings">
      <summary vsli:raw="Specifies &lt;see cref=&quot;T:System.Runtime.Serialization.Json.DataContractJsonSerializer&quot; /&gt; settings.">Spécifie les paramètres <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" />.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings" />.</summary>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.DateTimeFormat">
      <summary vsli:raw="Gets or sets a DateTimeFormat that defines the culturally appropriate format of displaying dates and times.">Obtient ou définit un DateTimeFormat qui définit le format d'affichage des dates et de l'heure approprié pour la culture.</summary>
      <returns vsli:raw="The DateTimeFormat that defines the culturally appropriate format of displaying dates and times.">DateTimeFormat qui définit le format d'affichage des dates et de l'heure approprié pour la culture.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.EmitTypeInformation">
      <summary vsli:raw="Gets or sets the data contract JSON serializer settings to emit type information.">Obtient ou définit les paramètres du sérialiseur JSON de contrat de données pour l'émission des informations de type.</summary>
      <returns vsli:raw="The data contract JSON serializer settings to emit type information.">Paramètres du sérialiseur JSON de contrat de données pour l'émission des informations de type.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.IgnoreExtensionDataObject">
      <summary vsli:raw="Gets or sets a value that specifies whether to ignore data supplied by an extension of the class when the class is being serialized or deserialized.">Obtient ou définit une valeur qui spécifie s'il faut ignorer les données fournies par une extension de la classe en cours de sérialisation ou de désérialisation.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to ignore data supplied by an extension of the class when the class is being serialized or deserialized; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour ignorer les données fournies par une extension de la classe lors de la sérialisation ou la désérialisation de la classe, sinon <see langword="false" />.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.KnownTypes">
      <summary vsli:raw="Gets or sets a collection of types that may be present in the object graph serialized using this instance the DataContractJsonSerializerSettings.">Obtient ou définit une collection des types pouvant être présents dans le graphique d'objets sérialisé à l'aide de l'instance DataContractJsonSerializerSettings.</summary>
      <returns vsli:raw="A collection of types that may be present in the object graph serialized using this instance the DataContractJsonSerializerSettings.">Collection des types pouvant être présents dans le graphique d'objets sérialisé à l'aide de cette instance DataContractJsonSerializerSettings.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.MaxItemsInObjectGraph">
      <summary vsli:raw="Gets or sets the maximum number of items in an object graph to serialize or deserialize.">Obtient ou définit le nombre maximal d'éléments à sérialiser ou désérialiser dans un graphique d'objets.</summary>
      <returns vsli:raw="The maximum number of items in an object graph to serialize or deserialize.">Nombre maximal d'éléments à sérialiser ou désérialiser dans un graphique d'objets.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.RootName">
      <summary vsli:raw="Gets or sets the root name of the selected object.">Obtient ou définit le nom racine de l'objet sélectionné.</summary>
      <returns vsli:raw="The root name of the selected object.">Nom racine de l'objet sélectionné.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.SerializeReadOnlyTypes">
      <summary vsli:raw="Gets or sets a value that specifies whether to serialize read only types.">Obtient ou définit une valeur qui spécifie s'il faut sérialiser des types de lecture seule.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to serialize read only types; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour sérialiser des types en lecture seule ; sinon <see langword="false" />.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.UseSimpleDictionaryFormat">
      <summary vsli:raw="Gets or sets a value that specifies whether to use a simple dictionary format.">Obtient ou définit une valeur qui spécifie s'il faut utiliser un format de dictionnaire simple.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to use a simple dictionary format; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour utiliser un format de dictionnaire simple ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Runtime.Serialization.Json.IXmlJsonReaderInitializer">
      <summary vsli:raw="Specifies the interface for initializing a JavaScript Object Notation (JSON) reader when reusing them to read from a particular stream or buffer.">Spécifie l'interface permettant d'initialiser un lecteur JSON (JavaScript Objet Notation) lorsque vous le réutilisez pour lire un flux ou une mémoire tampon particulière.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Json.IXmlJsonReaderInitializer.SetInput(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
      <summary vsli:raw="Reinitializes a JavaScript Object Notation (JSON) enabled reader to a specified buffer that contains JSON-encoded data.">Réinitialise un lecteur JSON (JavaScript Object Notation) dans une mémoire tampon spécifiée qui contient des données encodées en JSON.</summary>
      <param name="buffer" vsli:raw="The input &lt;see cref=&quot;T:System.Byte&quot; /&gt; buffer array from which to read.">Tableau de mémoire tampon <see cref="T:System.Byte" /> d'entrée dans lequel lire.</param>
      <param name="offset" vsli:raw="The starting position from which to read in &lt;paramref name=&quot;buffer&quot; /&gt;.">La position de départ à partir de laquelle effectuer la lecture dans <paramref name="buffer" />.</param>
      <param name="count" vsli:raw="The number of bytes that can be read from &lt;paramref name=&quot;buffer&quot; /&gt;.">Le nombre d'octets pouvant être lus à partir de <paramref name="buffer" />.</param>
      <param name="encoding" vsli:raw="The &lt;see cref=&quot;T:System.Text.Encoding&quot; /&gt; used by the reader.">
        <see cref="T:System.Text.Encoding" /> utilisé par le lecteur.</param>
      <param name="quotas" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDictionaryReaderQuotas&quot; /&gt; to apply.">
        <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> à appliquer.</param>
      <param name="onClose" vsli:raw="The &lt;see cref=&quot;T:System.Xml.OnXmlDictionaryReaderClose&quot; /&gt; delegate to call when the reader is closed.">Délégué <see cref="T:System.Xml.OnXmlDictionaryReaderClose" /> à appeler lorsque le lecteur est fermé.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.IXmlJsonReaderInitializer.SetInput(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
      <summary vsli:raw="Reinitializes a JavaScript Object Notation (JSON) enabled reader to a specified stream that contains JSON-encoded data.">Réinitialise un lecteur JSON (JavaScript Object Notation) dans un flux spécifié qui contient des données encodées en JSON.</summary>
      <param name="stream" vsli:raw="The input &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; from which to read.">
        <see cref="T:System.IO.Stream" /> d'entrée à partir duquel effectuer la lecture.</param>
      <param name="encoding" vsli:raw="The &lt;see cref=&quot;T:System.Text.Encoding&quot; /&gt; used by the reader.">
        <see cref="T:System.Text.Encoding" /> utilisé par le lecteur.</param>
      <param name="quotas" vsli:raw="&lt;see cref=&quot;T:System.Xml.XmlDictionaryReaderQuotas&quot; /&gt; to apply.">
        <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> à appliquer.</param>
      <param name="onClose" vsli:raw="Delegate to call when the reader is closed.">Délégué à appeler lorsque le lecteur est fermé.</param>
    </member>
    <member name="T:System.Runtime.Serialization.Json.IXmlJsonWriterInitializer">
      <summary vsli:raw="Specifies the interface for initializing a JavaScript Object Notation (JSON) writer when reusing them to write to a particular output stream.">Spécifie l'interface permettant d'initialiser un writer JSON (JavaScript Objet Notation) si vous le réutilisez pour écrire un flux de sortie particulier.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Json.IXmlJsonWriterInitializer.SetOutput(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary vsli:raw="Initializes (or reinitializes) a JavaScript Object Notation (JSON) writer to a specified output stream with specified character encoding.">Initialise (ou réinitialise) un writer JSON (JavaScript Objet Notation) dans un flux de sortie spécifié avec un codage de caractères spécifié.</summary>
      <param name="stream" vsli:raw="The output &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; to which the writer writes.">
        <see cref="T:System.IO.Stream" /> de sortie dans lequel le writer écrit.</param>
      <param name="encoding" vsli:raw="The &lt;see cref=&quot;T:System.Text.Encoding&quot; /&gt; that specifies the character encoding of the output stream.">Objet <see cref="T:System.Text.Encoding" /> qui spécifie le codage de caractères du flux de sortie.</param>
      <param name="ownsStream" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, the output stream is closed by the writer when done; otherwise &lt;see langword=&quot;false&quot; /&gt;.">Si la valeur est <see langword="true" />, le flux de sortie est fermé par le writer lorsqu'il est terminé ; sinon, la valeur est <see langword="false" />.</param>
    </member>
    <member name="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory">
      <summary vsli:raw="Produces instances of &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; that can read data encoded with JavaScript Object Notation (JSON) from a stream or buffer and map it to an XML Infoset and instances of &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; that can map an XML Infoset to JSON and write JSON-encoded data to a stream.">Produit des instances de <see cref="T:System.Xml.XmlDictionaryReader" /> permettant de lire des données encodées en JSON (JavaScript Object Notation) d'un flux ou d'une mémoire tampon et de les mapper sur un Infoset XML et sur les instances de <see cref="T:System.Xml.XmlDictionaryWriter" /> capables de mapper un Infoset XML à sa contrepartie JSON et d'écrire des données encodées en JSON dans un flux de données.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; that can map buffers encoded with JavaScript Object Notation (JSON), with a specified size and offset and character encoding, to an XML Infoset.">Crée un objet <see cref="T:System.Xml.XmlDictionaryReader" /> capable de mapper des mémoires tampons encodées en JSON (JavaScript Object Notation), dont la taille, le décalage et le codage de caractères sont précisés, à un Infoset XML.</summary>
      <param name="buffer" vsli:raw="The input &lt;see cref=&quot;T:System.Byte&quot; /&gt; buffer array from which to read.">Tableau de mémoire tampon <see cref="T:System.Byte" /> d'entrée dans lequel lire.</param>
      <param name="offset" vsli:raw="Starting position from which to read in &lt;paramref name=&quot;buffer&quot; /&gt;.">Position de départ à partir de laquelle effectuer la lecture dans <paramref name="buffer" />.</param>
      <param name="count" vsli:raw="Number of bytes that can be read from &lt;paramref name=&quot;buffer&quot; /&gt;.">Nombre d'octets pouvant être lus à partir de <paramref name="buffer" />.</param>
      <param name="encoding" vsli:raw="The &lt;see cref=&quot;T:System.Text.Encoding&quot; /&gt; that specifies the character encoding used by the reader. If &lt;see langword=&quot;null&quot; /&gt; is specified as the value, the reader attempts to auto-detect the encoding.">
        <see cref="T:System.Text.Encoding" /> qui spécifie l'encodage de caractère utilisé par le lecteur. Si <see langword="null" /> est spécifié comme valeur, le lecteur essaie de détecter automatiquement l'encodage.</param>
      <param name="quotas" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDictionaryReaderQuotas&quot; /&gt; used to prevent Denial of Service attacks when reading untrusted data.">
        <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> utilisé pour empêcher les attaques par déni de service lors de la lecture de données non fiables.</param>
      <param name="onClose" vsli:raw="The &lt;see cref=&quot;T:System.Xml.OnXmlDictionaryReaderClose&quot; /&gt; delegate to call when the reader is closed. The default value is &lt;see langword=&quot;null&quot; /&gt;.">Délégué <see cref="T:System.Xml.OnXmlDictionaryReaderClose" /> à appeler lorsque le lecteur est fermé. La valeur par défaut est <see langword="null" />.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; that can read JavaScript Object Notation (JSON).">
        <see cref="T:System.Xml.XmlDictionaryReader" /> capable de lire des données JSON (JavaScript Object Notation).</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; that can map buffers encoded with JavaScript Object Notation (JSON), of a specified size and offset, to an XML Infoset.">Crée un objet <see cref="T:System.Xml.XmlDictionaryReader" /> capable de mapper des mémoires tampons encodées en JSON (JavaScript Object Notation), dont la taille et le décalage sont précisés, à un Infoset XML.</summary>
      <param name="buffer" vsli:raw="The input &lt;see cref=&quot;T:System.Byte&quot; /&gt; buffer array from which to read.">Tableau de mémoire tampon <see cref="T:System.Byte" /> d'entrée dans lequel lire.</param>
      <param name="offset" vsli:raw="Starting position from which to read in &lt;paramref name=&quot;buffer&quot; /&gt;.">Position de départ à partir de laquelle effectuer la lecture dans <paramref name="buffer" />.</param>
      <param name="count" vsli:raw="Number of bytes that can be read from &lt;paramref name=&quot;buffer&quot; /&gt;.">Nombre d'octets pouvant être lus à partir de <paramref name="buffer" />.</param>
      <param name="quotas" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDictionaryReaderQuotas&quot; /&gt; used to prevent Denial of Service attacks when reading untrusted data.">
        <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> utilisé pour empêcher les attaques par déni de service lors de la lecture de données non fiables.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; that can read JavaScript Object Notation (JSON).">
        <see cref="T:System.Xml.XmlDictionaryReader" /> capable de lire des données JSON (JavaScript Object Notation).</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; that can map buffers encoded with JavaScript Object Notation (JSON) to an XML Infoset.">Crée un objet <see cref="T:System.Xml.XmlDictionaryReader" /> capable de mapper des mémoires tampons encodées en JSON (JavaScript Object Notation) à un Infoset XML.</summary>
      <param name="buffer" vsli:raw="The input &lt;see cref=&quot;T:System.Byte&quot; /&gt; buffer array from which to read.">Tableau de mémoire tampon <see cref="T:System.Byte" /> d'entrée dans lequel lire.</param>
      <param name="quotas" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDictionaryReaderQuotas&quot; /&gt; used to prevent Denial of Service attacks when reading untrusted data.">
        <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> utilisé pour empêcher les attaques par déni de service lors de la lecture de données non fiables.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; that can process JavaScript Object Notation (JSON) data.">
        <see cref="T:System.Xml.XmlDictionaryReader" /> capable de traiter les données JSON (JavaScript Objet Notation).</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; that can map streams encoded with JavaScript Object Notation (JSON), of a specified size and offset, to an XML Infoset.">Crée un objet <see cref="T:System.Xml.XmlDictionaryReader" /> capable de mapper des flux encodés en JSON (JavaScript Object Notation), dont la taille et le décalage sont précisés, à un Infoset XML.</summary>
      <param name="stream" vsli:raw="The input &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; from which to read.">
        <see cref="T:System.IO.Stream" /> d'entrée à partir duquel effectuer la lecture.</param>
      <param name="encoding" vsli:raw="The &lt;see cref=&quot;T:System.Text.Encoding&quot; /&gt; that specifies the character encoding used by the reader. If &lt;see langword=&quot;null&quot; /&gt; is specified as the value, the reader attempts to auto-detect the encoding.">
        <see cref="T:System.Text.Encoding" /> qui spécifie l'encodage de caractère utilisé par le lecteur. Si <see langword="null" /> est spécifié comme valeur, le lecteur essaie de détecter automatiquement l'encodage.</param>
      <param name="quotas" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDictionaryReaderQuotas&quot; /&gt; used to prevent Denial of Service attacks when reading untrusted data.">
        <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> utilisé pour empêcher les attaques par déni de service lors de la lecture de données non fiables.</param>
      <param name="onClose" vsli:raw="The &lt;see cref=&quot;T:System.Xml.OnXmlDictionaryReaderClose&quot; /&gt; delegate to call when the reader is closed.">Délégué <see cref="T:System.Xml.OnXmlDictionaryReaderClose" /> à appeler lorsque le lecteur est fermé.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; that can read JavaScript Object Notation (JSON).">
        <see cref="T:System.Xml.XmlDictionaryReader" /> capable de lire des données JSON (JavaScript Object Notation).</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; that can map streams encoded with JavaScript Object Notation (JSON) to an XML Infoset.">Crée un objet <see cref="T:System.Xml.XmlDictionaryReader" /> capable de mapper des flux encodés en JSON (JavaScript Object Notation) à un Infoset XML.</summary>
      <param name="stream" vsli:raw="The input &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; from which to read.">
        <see cref="T:System.IO.Stream" /> d'entrée à partir duquel effectuer la lecture.</param>
      <param name="quotas" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDictionaryReaderQuotas&quot; /&gt; used to prevent Denial of Service attacks when reading untrusted data.">
        <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> utilisé pour empêcher les attaques par déni de service lors de la lecture de données non fiables.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; that can read JavaScript Object Notation (JSON).">
        <see cref="T:System.Xml.XmlDictionaryReader" /> capable de lire des données JSON (JavaScript Object Notation).</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; that writes data encoded with JSON to a stream.">Crée un objet <see cref="T:System.Xml.XmlDictionaryWriter" /> qui écrit des données encodées par JSON dans un flux.</summary>
      <param name="stream" vsli:raw="The output &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; for the JSON writer.">
        <see cref="T:System.IO.Stream" /> de sortie pour le générateur JSON.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; that writes data encoded with JSON to the stream based on an XML Infoset.">
        <see cref="T:System.Xml.XmlDictionaryWriter" /> qui écrit des données encodées par JSON dans un flux s'appuyant sur un Infoset XML.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; that writes data encoded with JSON to a stream with a specified character encoding.">Crée un objet <see cref="T:System.Xml.XmlDictionaryWriter" /> qui écrit des données encodées par JSON dans un flux d'après un codage de caractères indiqué.</summary>
      <param name="stream" vsli:raw="The output &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; for the JSON writer.">
        <see cref="T:System.IO.Stream" /> de sortie pour le générateur JSON.</param>
      <param name="encoding" vsli:raw="The &lt;see cref=&quot;T:System.Text.Encoding&quot; /&gt; that specifies the character encoding used by the writer. The default encoding is UTF-8.">
        <see cref="T:System.Text.Encoding" /> qui spécifie l'encodage de caractères utilisé par le générateur. L'encodage par défaut est UTF-8.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; that writes data encoded with JSON to the stream based on an XML Infoset.">
        <see cref="T:System.Xml.XmlDictionaryWriter" /> qui écrit des données encodées par JSON dans un flux s'appuyant sur un Infoset XML.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; that writes data encoded with JSON to a stream with a specified character encoding.">Crée un objet <see cref="T:System.Xml.XmlDictionaryWriter" /> qui écrit des données encodées par JSON dans un flux d'après un codage de caractères indiqué.</summary>
      <param name="stream" vsli:raw="The output &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; for the JSON writer.">
        <see cref="T:System.IO.Stream" /> de sortie pour le générateur JSON.</param>
      <param name="encoding" vsli:raw="The &lt;see cref=&quot;T:System.Text.Encoding&quot; /&gt; that specifies the character encoding used by the writer. The default encoding is UTF-8.">
        <see cref="T:System.Text.Encoding" /> qui spécifie l'encodage de caractères utilisé par le générateur. L'encodage par défaut est UTF-8.</param>
      <param name="ownsStream" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, the output stream is closed by the writer when done; otherwise &lt;see langword=&quot;false&quot; /&gt;. The default value is &lt;see langword=&quot;true&quot; /&gt;.">Si la valeur est <see langword="true" />, le flux de sortie est fermé par le writer lorsqu'il est terminé ; sinon, la valeur est <see langword="false" />. La valeur par défaut est <see langword="true" />.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; that writes data encoded with JSON to the stream based on an XML Infoset.">
        <see cref="T:System.Xml.XmlDictionaryWriter" /> qui écrit des données encodées par JSON dans un flux s'appuyant sur un Infoset XML.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; that writes data encoded with JSON to a stream with a specified character.">Crée un objet <see cref="T:System.Xml.XmlDictionaryWriter" /> qui écrit des données encodées par JSON dans un flux d'après un caractère spécifié.</summary>
      <param name="stream" vsli:raw="The output &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; for the JSON writer.">
        <see cref="T:System.IO.Stream" /> de sortie pour le générateur JSON.</param>
      <param name="encoding" vsli:raw="The &lt;see cref=&quot;T:System.Text.Encoding&quot; /&gt; that specifies the character encoding used by the writer. The default encoding is UTF-8.">
        <see cref="T:System.Text.Encoding" /> qui spécifie l'encodage de caractères utilisé par le générateur. L'encodage par défaut est UTF-8.</param>
      <param name="ownsStream" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, the output stream is closed by the writer when done; otherwise &lt;see langword=&quot;false&quot; /&gt;. The default value is &lt;see langword=&quot;true&quot; /&gt;.">Si la valeur est <see langword="true" />, le flux de sortie est fermé par le writer lorsqu'il est terminé ; sinon, la valeur est <see langword="false" />. La valeur par défaut est <see langword="true" />.</param>
      <param name="indent" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, the output uses multiline format, indenting each level properly; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Si la valeur est <see langword="true" />, la sortie utilise le format multiligne, mettant en retrait chaque niveau correctement ; sinon, <see langword="false" />.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; that writes data encoded with JSON to the stream based on an XML Infoset.">
        <see cref="T:System.Xml.XmlDictionaryWriter" /> qui écrit des données encodées par JSON dans un flux s'appuyant sur un Infoset XML.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean,System.String)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; that writes data encoded with JSON to a stream with a specified character.">Crée un objet <see cref="T:System.Xml.XmlDictionaryWriter" /> qui écrit des données encodées par JSON dans un flux d'après un caractère spécifié.</summary>
      <param name="stream" vsli:raw="The output &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; for the JSON writer.">
        <see cref="T:System.IO.Stream" /> de sortie pour le générateur JSON.</param>
      <param name="encoding" vsli:raw="The &lt;see cref=&quot;T:System.Text.Encoding&quot; /&gt; that specifies the character encoding used by the writer. The default encoding is UTF-8.">
        <see cref="T:System.Text.Encoding" /> qui spécifie l'encodage de caractères utilisé par le générateur. L'encodage par défaut est UTF-8.</param>
      <param name="ownsStream" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, the output stream is closed by the writer when done; otherwise &lt;see langword=&quot;false&quot; /&gt;. The default value is &lt;see langword=&quot;true&quot; /&gt;.">Si la valeur est <see langword="true" />, le flux de sortie est fermé par le writer lorsqu'il est terminé ; sinon, la valeur est <see langword="false" />. La valeur par défaut est <see langword="true" />.</param>
      <param name="indent" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, the output uses multiline format, indenting each level properly; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Si la valeur est <see langword="true" />, la sortie utilise le format multiligne, mettant en retrait chaque niveau correctement ; sinon, <see langword="false" />.</param>
      <param name="indentChars" vsli:raw="The string used to indent each level.">Chaîne utilisée pour mettre en retrait chaque niveau.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; that writes data encoded with JSON to the stream based on an XML Infoset.">
        <see cref="T:System.Xml.XmlDictionaryWriter" /> qui écrit des données encodées par JSON dans un flux s'appuyant sur un Infoset XML.</returns>
    </member>
  </members>
</doc>
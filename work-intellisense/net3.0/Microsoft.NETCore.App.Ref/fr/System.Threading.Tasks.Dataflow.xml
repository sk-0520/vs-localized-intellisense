<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Threading.Tasks.Dataflow</name>
  </assembly>
  <members>
    <member name="T:System.Threading.Tasks.Dataflow.ActionBlock`1">
      <summary vsli:raw="Provides a dataflow block that invokes a provided &lt;see cref=&quot;T:System.Action`1&quot; /&gt; delegate for every data element received.">Fournit un bloc de flux de données qui appelle un délégué <see cref="T:System.Action`1" /> fourni pour chaque élément de données reçu.</summary>
      <typeparam name="TInput" vsli:raw="The type of data that this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ActionBlock`1&quot; /&gt; operates on.">Type de données sur lequel ce <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> intervient.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Action{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ActionBlock`1&quot; /&gt; class with the specified action.">Initialise une nouvelle instance de la classe <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> avec l'action spécifiée.</summary>
      <param name="action" vsli:raw="The action to invoke with each data element received.">Action à appeler à chaque élément de données reçu.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;action&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="action" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Action{`0},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ActionBlock`1&quot; /&gt; class with the specified action and configuration options.">Initialise une nouvelle instance de la classe <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> avec l'action et les options de configuration spécifiées.</summary>
      <param name="action" vsli:raw="The action to invoke with each data element received.">Action à appeler à chaque élément de données reçu.</param>
      <param name="dataflowBlockOptions" vsli:raw="The options with which to configure this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ActionBlock`1&quot; /&gt;.">Options permettant de configurer ce <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;action&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="action" /> a la valeur <see langword="null" />.  

ou - 
<paramref name="dataflowBlockOptions" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Func{`0,System.Threading.Tasks.Task})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ActionBlock`1&quot; /&gt; class with the specified action.">Initialise une nouvelle instance de la classe <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> avec l'action spécifiée.</summary>
      <param name="action" vsli:raw="The action to invoke with each data element received.">Action à appeler à chaque élément de données reçu.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;action&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="action" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Func{`0,System.Threading.Tasks.Task},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ActionBlock`1&quot; /&gt; class with the specified action and configuration options.">Initialise une nouvelle instance de la classe <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> avec l'action et les options de configuration spécifiées.</summary>
      <param name="action" vsli:raw="The action to invoke with each data element received.">Action à appeler à chaque élément de données reçu.</param>
      <param name="dataflowBlockOptions" vsli:raw="The options with which to configure this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ActionBlock`1&quot; /&gt;.">Options permettant de configurer ce <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;action&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="action" /> a la valeur <see langword="null" />.  

ou - 
<paramref name="dataflowBlockOptions" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.Complete">
      <summary vsli:raw="Signals to the dataflow block  that it shouldn't accept or produce any more messages and shouldn't consume any more postponed messages.">Signale au bloc de flux de données qu’il ne doit plus recevoir ni produire de messages ou utiliser des messages différés.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.ActionBlock`1.Completion">
      <summary vsli:raw="Gets a  &lt;see cref=&quot;T:System.Threading.Tasks.Task&quot; /&gt; object that represents the asynchronous operation and completion of the dataflow block.">Obtient un objet <see cref="T:System.Threading.Tasks.Task" /> qui représente l’opération asynchrone et l’achèvement du bloc de flux de données.</summary>
      <returns vsli:raw="The completed task.">Tâche terminée.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.ActionBlock`1.InputCount">
      <summary vsli:raw="Gets the number of input items waiting to be processed by this block.">Obtient le nombre d'éléments d'entrée en attente de traitement par ce bloc.</summary>
      <returns vsli:raw="The number of input items waiting to be processed by this block.">Nombre d'éléments d'entrée en attente de traitement par ce bloc.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.Post(`0)">
      <summary vsli:raw="Posts an item to the target dataflow block.">Publie un élément dans le bloc cible de flux de données.</summary>
      <param name="item" vsli:raw="The item being offered to the target.">Élément qui est proposé à la cible.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item is posted to the dataflow block; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'élément est publié dans le bloc de flux de données ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary vsli:raw="Causes the dataflow block to complete in a faulted state.">Provoque la fin du bloc de flux de données avec un état d'erreur.</summary>
      <param name="exception" vsli:raw="The exception that caused the faulting.">Exception ayant provoqué l'erreur.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;exception&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="exception" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary vsli:raw="Offers a message to the dataflow block, and gives it the opportunity to consume or postpone the message.">Offre un message au bloc de flux de données et lui donne la possibilité de le consommer ou le différer.</summary>
      <param name="messageHeader" vsli:raw="The header of the message being offered.">En-tête du message proposé.</param>
      <param name="messageValue" vsli:raw="The value of the message being offered.">Valeur du message proposé.</param>
      <param name="source" vsli:raw="The dataflow block that is offering the message. This may be &lt;see langword=&quot;null&quot; /&gt;.">Bloc de flux de données qui offre le message. Celui-ci peut être <see langword="null" />.</param>
      <param name="consumeToAccept" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to instruct the target to call &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)&quot; /&gt; synchronously during the call to &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)&quot; /&gt;, prior to returning &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted&quot; /&gt;, in order to consume the message; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour indiquer à la cible d’appeler <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> de façon synchrone pendant l’appel à <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />, avant de retourner <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />, pour consommer le message ; sinon, <see langword="false" />.</param>
      <returns vsli:raw="The status of the offered message.  If the message was accepted by the target, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted&quot; /&gt; is returned, and the source should no longer use the offered message, because it is now owned by the target. If the message was postponed by the target, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed&quot; /&gt; is returned as a notification that the target may later attempt to consume or reserve the message; in the meantime, the source still owns the message and may offer it to other blocks.  &#xA;  &#xA; If the target would have otherwise postponed message, but source was &lt;see langword=&quot;null&quot; /&gt;, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined&quot; /&gt; is returned.  &#xA;  &#xA; If the target tried to accept the message but missed it due to the source delivering the message to another target or simply discarding it, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable&quot; /&gt; is returned.  &#xA;  &#xA; If the target chose not to accept the message, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined&quot; /&gt; is returned. If the target chose not to accept the message and will never accept another message from this source, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently&quot; /&gt; is returned.">État du message proposé.  Si le message a été accepté par la cible, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> est retourné, et la source ne doit plus utiliser le message envoyé, car elle est désormais la propriété de la cible. Si le message a été différé par la cible, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> est retournée comme notification que la cible peut ensuite essayer d'utiliser ou de réserver un message ; parallèlement, la source possède le message et peut toujours le proposer à d'autres blocs.  
Si la cible avait autrement différé le message alors que la source avait la valeur <see langword="null" />, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> aurait été retourné.  
Si la cible a tenté de recevoir le message mais a échoué en raison de la source fournissant un message à une autre cible ou en l'ignorant simplement, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" /> est retourné.  
Si la cible a choisi de ne pas recevoir le message, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> est retourné. Si la cible a choisi de ne pas recevoir le message et ne recevra jamais un autre message de cette source, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" /> est retourné.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.  &#xA;  &#xA; -or- &lt;paramref name=&quot;consumeToAccept&quot; /&gt; may be &lt;see langword=&quot;true&quot; /&gt; only if provided with a non-null &lt;paramref name=&quot;source&quot; /&gt;.">
        <paramref name="messageHeader" /> n'est pas valide.  
ou <paramref name="consumeToAccept" /> peut avoir la valeur <see langword="true" /> uniquement s’il est fourni avec un <paramref name="source" /> différent de Null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.ToString">
      <summary vsli:raw="Returns a string that represents the formatted name of this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">Retourne une chaîne qui représente le nom mis en forme de cette instance <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</summary>
      <returns vsli:raw="A string that represents the formatted name of this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">Chaîne qui représente le nom mis en forme de cette instance <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BatchBlock`1">
      <summary vsli:raw="Provides a dataflow block that batches inputs into arrays.">Fournit un bloc de flux de données qui traite par lot les entrées dans les tableaux.</summary>
      <typeparam name="T" vsli:raw="Specifies the type of data put into batches.">Spécifie le type de données mis en lots.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BatchBlock`1&quot; /&gt; with the specified batch size.">Initialise un nouveau <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" /> avec la taille de lot spécifiée.</summary>
      <param name="batchSize" vsli:raw="The number of items to group into a batch.">Nombre d'éléments à regrouper en un lot.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;batchSize&quot; /&gt; must be positive.">La <paramref name="batchSize" /> doit être positive.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.#ctor(System.Int32,System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BatchBlock`1&quot; /&gt; with the specified batch size, declining option, and block options.">Initialise un nouveau <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" /> avec la taille de lot, l'option de refus et les options de bloc spécifiées.</summary>
      <param name="batchSize" vsli:raw="The number of items to group into a batch.">Nombre d'éléments à regrouper en un lot.</param>
      <param name="dataflowBlockOptions" vsli:raw="The options with which to configure this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BatchBlock`1&quot; /&gt;.">Options permettant de configurer ce <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;batchSize&quot; /&gt; must be positive.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;batchSize&quot; /&gt; must be smaller than the value of the &lt;see cref=&quot;P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.BoundedCapacity&quot; /&gt; option if a non-default value has been set.">La <paramref name="batchSize" /> doit être positive.  

ou - 
La <paramref name="batchSize" /> doit être inférieure à la valeur de l'option <see cref="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.BoundedCapacity" /> si une valeur autre que la valeur par défaut a été définie.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dataflowBlockOptions" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchSize">
      <summary vsli:raw="Gets the size of the batches generated by this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BatchBlock`1&quot; /&gt;.">Obtient la taille des lots générés par ce <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" />.</summary>
      <returns vsli:raw="The batch size.">Taille du lot</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.Complete">
      <summary vsli:raw="Signals to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; that it should not accept nor produce any more messages nor consume any more postponed messages.">Signale à <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> qu'il ne doit plus recevoir ni produire de messages ou utiliser des messages différés.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.Completion">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Threading.Tasks.Task&quot; /&gt; that represents the asynchronous operation and completion of the dataflow block.">Obtient une <see cref="T:System.Threading.Tasks.Task" /> qui représente l'opération asynchrone et l'achèvement du bloc de flux de données.</summary>
      <returns vsli:raw="The task.">Tâche.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0[]},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary vsli:raw="Links the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; to the specified  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; .">Lie le <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> au <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> spécifié.</summary>
      <param name="target" vsli:raw="The  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to which to connect this source.">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> auquel connecter cette source.</param>
      <param name="linkOptions" vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowLinkOptions&quot; /&gt; instance that configures the link.">Instance <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> qui configure le lien.</param>
      <returns vsli:raw="An IDisposable that, upon calling Dispose, will unlink the source from the target.">IDisposable qui, en appelant Dispose, dissocie la source de la cible.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;target&quot; /&gt; is null (Nothing in Visual Basic) or  &lt;paramref name=&quot;linkOptions&quot; /&gt; is null (Nothing in Visual Basic).">
        <paramref name="target" /> est Null (Nothing en Visual Basic) ou <paramref name="linkOptions" /> est Null (Nothing en Visual Basic).</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.OutputCount">
      <summary vsli:raw="Gets the number of output items available to be received from this block.">Obtient le nombre d'éléments de sortie disponibles en provenance de ce bloc.</summary>
      <returns vsli:raw="The number of output items.">Nombre d'éléments de sortie.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary vsli:raw="Causes the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; to complete in a  &lt;see cref=&quot;F:System.Threading.Tasks.TaskStatus.Faulted&quot; /&gt; state.">Provoque l’achèvement du <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> à l’état <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.</summary>
      <param name="exception" vsli:raw="The &lt;see cref=&quot;T:System.Exception&quot; /&gt; that caused the faulting.">
        <see cref="T:System.Exception" /> ayant provoqué l'erreur.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;exception&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="exception" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T[]}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0[]},System.Boolean@)">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to accept and consume a &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; previously offered by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; .">Appelé par un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> lié pour recevoir et consommer un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> précédemment proposé par ce <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message being consumed.">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> du message en cours d'utilisation.</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; consuming the message.">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> absorbant le message.</param>
      <param name="messageConsumed" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully consumed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le message a été consommé avec succès ; sinon <see langword="false" />.</param>
      <returns vsli:raw="The value of the consumed message. This may correspond to a different &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance than was previously reserved and passed as the &lt;paramref name=&quot;messageHeader&quot; /&gt; to &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)&quot; /&gt;. The consuming &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; must use the returned value instead of the value passed as messageValue through &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)&quot; /&gt;.  &#xA;  &#xA; If the message requested is not available, the return value will be &lt;see langword=&quot;null&quot; /&gt;.">Valeur du message consommé. Cela peut correspondre à une autre instance <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> qui a été précédemment réservée et transmise comme <paramref name="messageHeader" /> à <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />. Le <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> consommateur doit utiliser la valeur retournée au lieu de la valeur passée comme messageValue via <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />.  
Si le message demandé n'est pas disponible, la valeur de retour est <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The  &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" /> n’est pas valide.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T[]}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0[]})">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to release a previously reserved &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">Appelé par un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> lié pour libérer un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> précédemment réservé par ce <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the reserved message being released.">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> du message réservé en cours de libération.</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; releasing the message it previously reserved.">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> libérant le message précédemment réservé.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" /> n'est pas valide.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; did not have the message reserved.">La <paramref name="target" /> ne contient pas le message réservé.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T[]}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0[]})">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to reserve a previously offered &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">Appelé par un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> lié pour réserver un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> précédemment proposé par ce <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message being reserved.">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> du message en cours de réservation.</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; reserving the message.">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> réservant le message.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully reserved; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le message a été réservé avec succès ; sinon <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" /> n'est pas valide.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary vsli:raw="Offers a message to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;, giving the target the opportunity to consume or postpone the message.">Offre un message au <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, donnant à la cible la possibilité d'utiliser ou de différer le message.</summary>
      <param name="messageHeader" vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance that represents the header of the message being offered.">Instance <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> qui représente l'en-tête du message qui est proposé.</param>
      <param name="messageValue" vsli:raw="The value of the message being offered.">Valeur du message proposé.</param>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; offering the message. This may be null.">
        <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> qui transmet le message. Il peut s'agir d'une valeur null.</param>
      <param name="consumeToAccept" vsli:raw="Set to &lt;see langword=&quot;true&quot; /&gt; to instruct the target to call &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)&quot; /&gt; synchronously during the call to &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)&quot; /&gt;, prior to returning &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted&quot; /&gt;, in order to consume the message.">Définit sur <see langword="true" /> pour indiquer à la cible d'appeler <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> de façon synchrone pendant l'appel à <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />, avant de renvoyer <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> pour utiliser le message.</param>
      <returns vsli:raw="The status of the offered message. If the message was accepted by the target, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted&quot; /&gt; is returned, and the source should no longer use the offered message, because it is now owned by the target. If the message was postponed by the target, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed&quot; /&gt; is returned as a notification that the target may later attempt to consume or reserve the message; in the meantime, the source still owns the message and may offer it to other blocks.  &#xA;  &#xA; If the target would have otherwise postponed message, but &lt;paramref name=&quot;source&quot; /&gt; was &lt;see langword=&quot;null&quot; /&gt;, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined&quot; /&gt; is instead returned.  &#xA;  &#xA; If the target tried to accept the message but missed it due to the source delivering the message to another target or simply discarding it, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable&quot; /&gt; is returned.  &#xA;  &#xA; If the target chose not to accept the message, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined&quot; /&gt; is returned. If the target chose not to accept the message and will never accept another message from this source, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently&quot; /&gt; is returned.">État du message proposé. Si le message a été accepté par la cible, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> est retourné, et la source ne doit plus utiliser le message envoyé, car elle est désormais la propriété de la cible. Si le message a été différé par la cible, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> est retournée comme notification que la cible peut ensuite essayer d'utiliser ou de réserver un message ; parallèlement, la source possède le message et peut toujours le proposer à d'autres blocs.  
Si la cible avait par contre un message différé mais que la <paramref name="source" /> avait la valeur <see langword="null" />, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> serait retourné à la place.  
Si la cible a tenté de recevoir le message mais a échoué en raison de la source fournissant un message à une autre cible ou en l'ignorant simplement, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" /> est retourné.  
Si la cible a choisi de ne pas recevoir le message, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> est retourné. Si la cible a choisi de ne pas recevoir le message et ne recevra jamais un autre message de cette source, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" /> est retourné.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The  &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.  &#xA;  &#xA; -or- &lt;paramref name=&quot;consumeToAccept&quot; /&gt; may only be true if provided with a non-null &lt;paramref name=&quot;source&quot; /&gt;.">
        <paramref name="messageHeader" /> n’est pas valide.  
ou <paramref name="consumeToAccept" /> peut avoir la valeur true uniquement s’il est fourni avec une <paramref name="source" /> non Null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.ToString">
      <summary vsli:raw="Returns a string that represents the formatted name of this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">Retourne une chaîne qui représente le nom mis en forme de cette instance de <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</summary>
      <returns vsli:raw="A string that represents the formatted name of this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">Chaîne qui représente le nom mis en forme de cette instance de <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.TriggerBatch">
      <summary vsli:raw="Triggers the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BatchBlock`1&quot; /&gt; to initiate a batching operation even if the number of currently queued or postponed items is less than the &lt;see cref=&quot;P:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchSize&quot; /&gt;.">Déclenche <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" /> pour démarrer une opération de traitement par lots, même si le nombre d'éléments actuellement en file d'attente ou différés est inférieur à <see cref="P:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchSize" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.TryReceive(System.Predicate{`0[]},`0[]@)">
      <summary vsli:raw="Attempts to synchronously receive an available output item from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">Tente de recevoir de façon synchrone un élément de sortie disponible de <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="filter" vsli:raw="The predicate a value must successfully pass in order for it to be received.  &lt;paramref name=&quot;filter&quot; /&gt; may be &lt;see langword=&quot;null&quot; /&gt;, in which case all items will pass.">Attribut qu'une valeur doit passer avec succès pour sa réception.  <paramref name="filter" /> peut être <see langword="null" />, dans ce cas, tous les éléments aboutissent.</param>
      <param name="item" vsli:raw="The item received from the source.">Élément envoyé à partir de la source.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an item could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si un élément peut être reçu ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.TryReceiveAll(System.Collections.Generic.IList{`0[]}@)">
      <summary vsli:raw="Attempts to synchronously receive all available items from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">Tente de recevoir de façon synchrone tous les éléments disponibles de <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="items" vsli:raw="The items received from the source.">Éléments reçus de la source.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more items could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si un ou plusieurs éléments peuvent être reçus ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2">
      <summary vsli:raw="Provides a dataflow block that batches a specified number of inputs of potentially differing types provided to one or more of its targets.">Fournit un bloc de flux de données qui traite par lot un nombre spécifié d'entrées de types potentiellement différents fournis à une ou plusieurs de ses cibles.</summary>
      <typeparam name="T1" vsli:raw="Specifies the type of data accepted by the block's first target.">Spécifie le type de données accepté par la première cible du bloc.</typeparam>
      <typeparam name="T2" vsli:raw="Specifies the type of data accepted by the block's second target.">Spécifie le type de données accepté par la deuxième cible du bloc.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2&quot; /&gt; with the specified configuration.">Initialise un nouveau <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" /> avec la configuration spécifiée.</summary>
      <param name="batchSize" vsli:raw="The number of items to group into a batch.">Nombre d'éléments à regrouper en un lot.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;batchSize&quot; /&gt; must be positive.">La <paramref name="batchSize" /> doit être positive.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.#ctor(System.Int32,System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2&quot; /&gt; with the specified configuration.">Initialise un nouveau <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" /> avec la configuration spécifiée.</summary>
      <param name="batchSize" vsli:raw="The number of items to group into a batch.">Nombre d'éléments à regrouper en un lot.</param>
      <param name="dataflowBlockOptions" vsli:raw="The options with which to configure this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2&quot; /&gt;.">Options permettant de configurer ce <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dataflowBlockOptions" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;batchSize&quot; /&gt; is less than one.">
        <paramref name="batchSize" /> est inférieur à un.</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.BatchSize">
      <summary vsli:raw="Gets the size of the batches generated by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2&quot; /&gt;.">Obtient la taille des lots générés par ce <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" />.</summary>
      <returns vsli:raw="The batch size.">Taille du lot</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.Complete">
      <summary vsli:raw="Signals to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; that it should not accept nor produce any more messages nor consume any more postponed messages.">Signale à <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> qu'il ne doit plus recevoir ni produire de messages ou utiliser des messages différés.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.Completion">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Threading.Tasks.Task&quot; /&gt; that represents the asynchronous operation and completion of the dataflow block.">Obtient une <see cref="T:System.Threading.Tasks.Task" /> qui représente l'opération asynchrone et l'achèvement du bloc de flux de données.</summary>
      <returns vsli:raw="The task.">Tâche.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary vsli:raw="Links the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; to the specified  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; .">Lie le <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> au <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> spécifié.</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to which to connect this source.">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> auquel connecter cette source.</param>
      <param name="linkOptions" vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowLinkOptions&quot; /&gt; instance that configures the link.">Instance <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> qui configure le lien.</param>
      <returns vsli:raw="An IDisposable that, upon calling Dispose, will unlink the source from the target.">IDisposable qui, en appelant Dispose, dissocie la source de la cible.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; (Nothing in Visual Basic) or  &lt;paramref name=&quot;linkOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; (Nothing in Visual Basic).">
        <paramref name="target" /> est Null (Nothing en Visual Basic) ou <paramref name="linkOptions" /> est Null (Nothing en Visual Basic).</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.OutputCount">
      <summary vsli:raw="Gets the number of output items available to be received from this block.">Obtient le nombre d'éléments de sortie disponibles en provenance de ce bloc.</summary>
      <returns vsli:raw="The number of output items.">Nombre d'éléments de sortie.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary vsli:raw="Causes the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; to complete in a  &lt;see cref=&quot;F:System.Threading.Tasks.TaskStatus.Faulted&quot; /&gt; state.">Provoque l’achèvement du <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> à l’état <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.</summary>
      <param name="exception" vsli:raw="The &lt;see cref=&quot;T:System.Exception&quot; /&gt; that caused the faulting.">
        <see cref="T:System.Exception" /> ayant provoqué l'erreur.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;exception&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="exception" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}}}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}},System.Boolean@)">
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message that is to be consumed." />
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; for which the message is to be consumed." />
      <param name="messageConsumed" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully consumed. &lt;see langword=&quot;false&quot; /&gt; otherwise." />
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}}}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}})">
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the reserved message." />
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; that currently holds the reservation." />
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}}}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}})">
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message that is to be reserved." />
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; for which the message is to be reserved." />
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.Target1">
      <summary vsli:raw="Gets a target that may be used to offer messages of the first type.">Obtient une cible qui peut être utilisée pour offrir des messages du premier type.</summary>
      <returns vsli:raw="The target.">Cible.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.Target2">
      <summary vsli:raw="Gets a target that may be used to offer messages of the second type.">Obtient une cible qui peut être utilisée pour offrir des messages du deuxième type.</summary>
      <returns vsli:raw="The target.">Cible.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.ToString">
      <summary vsli:raw="Returns a string that represents the formatted name of this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">Retourne une chaîne qui représente le nom mis en forme de cette instance de <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</summary>
      <returns vsli:raw="A string that represents the formatted name of this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">Chaîne qui représente le nom mis en forme de cette instance de <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.TryReceive(System.Predicate{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}},System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}@)">
      <summary vsli:raw="Attempts to synchronously receive an available output item from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">Tente de recevoir de façon synchrone un élément de sortie disponible de <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="filter" vsli:raw="The predicate a value must successfully pass in order for it to be received.  &lt;paramref name=&quot;filter&quot; /&gt; may be &lt;see langword=&quot;null&quot; /&gt;, in which case all items will pass.">Attribut qu'une valeur doit passer avec succès pour sa réception.  <paramref name="filter" /> peut être <see langword="null" />, dans ce cas, tous les éléments aboutissent.</param>
      <param name="item" vsli:raw="The item received from the source.">Élément envoyé à partir de la source.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an item could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si un élément peut être reçu ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}}@)">
      <summary vsli:raw="Attempts to synchronously receive all available items from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">Tente de recevoir de façon synchrone tous les éléments disponibles de <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="items" vsli:raw="The items received from the source.">Éléments reçus de la source.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more items could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si un ou plusieurs éléments peuvent être reçus ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3">
      <summary vsli:raw="Provides a dataflow block that batches a specified number of inputs of potentially differing types provided to one or more of its targets.">Fournit un bloc de flux de données qui traite par lot un nombre spécifié d'entrées de types potentiellement différents fournis à une ou plusieurs de ses cibles.</summary>
      <typeparam name="T1" vsli:raw="Specifies the type of data accepted by the block's first target.">Spécifie le type de données accepté par la première cible du bloc.</typeparam>
      <typeparam name="T2" vsli:raw="Specifies the type of data accepted by the block's second target.">Spécifie le type de données accepté par la deuxième cible du bloc.</typeparam>
      <typeparam name="T3" vsli:raw="Specifies the type of data accepted by the block's third target.">Spécifie le type de données accepté par la troisième cible du bloc.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3&quot; /&gt; with the specified configuration.">Initialise un nouveau <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3" /> avec la configuration spécifiée.</summary>
      <param name="batchSize" vsli:raw="The number of items to group into a batch.">Nombre d'éléments à regrouper en un lot.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;batchSize&quot; /&gt; must be positive.">La <paramref name="batchSize" /> doit être positive.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.#ctor(System.Int32,System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3&quot; /&gt; with the specified configuration.">Initialise un nouveau <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3" /> avec la configuration spécifiée.</summary>
      <param name="batchSize" vsli:raw="The number of items to group into a batch.">Nombre d'éléments à regrouper en un lot.</param>
      <param name="dataflowBlockOptions" vsli:raw="The options with which to configure this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2&quot; /&gt;.">Options avec lesquelles configurer ce <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;batchSize&quot; /&gt; must be positive.">La <paramref name="batchSize" /> doit être positive.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dataflowBlockOptions" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.BatchSize">
      <summary vsli:raw="Gets the size of the batches generated by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3&quot; /&gt;.">Obtient la taille des lots générés par ce <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3" />.</summary>
      <returns vsli:raw="The batch size.">Taille du lot</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Complete">
      <summary vsli:raw="Signals to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; that it should not accept nor produce any more messages nor consume any more postponed messages.">Signale à <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> qu'il ne doit plus recevoir ni produire de messages ou utiliser des messages différés.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Completion">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Threading.Tasks.Task&quot; /&gt; that represents the asynchronous operation and completion of the dataflow block.">Obtient une <see cref="T:System.Threading.Tasks.Task" /> qui représente l'opération asynchrone et l'achèvement du bloc de flux de données.</summary>
      <returns vsli:raw="The task.">Tâche.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary vsli:raw="Links the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; to the specified  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; .">Lie le <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> au <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> spécifié.</summary>
      <param name="target" vsli:raw="The  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to which to connect this source.">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> auquel connecter cette source.</param>
      <param name="linkOptions" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the source should unlink from the target after successfully propagating a single message; &lt;see langword=&quot;false&quot; /&gt; to remain connected even after a single message has been propagated.">
        <see langword="true" /> si le lien entre la source et la cible doit être supprimé après la propagation effective d'un message unique ; <see langword="false" /> pour rester connecté même après la propagation du message unique.</param>
      <returns vsli:raw="An IDisposable that, upon calling Dispose, will unlink the source from the target.">IDisposable qui, en appelant Dispose, dissocie la source de la cible.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; (Nothing in Visual Basic) or  &lt;paramref name=&quot;linkOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; (Nothing in Visual Basic).">
        <paramref name="target" /> est Null (Nothing en Visual Basic) ou <paramref name="linkOptions" /> est Null (Nothing en Visual Basic).</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.OutputCount">
      <summary vsli:raw="Gets the number of output items available to be received from this block.">Obtient le nombre d'éléments de sortie disponibles en provenance de ce bloc.</summary>
      <returns vsli:raw="The number of output items.">Nombre d'éléments de sortie.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary vsli:raw="Causes the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; to complete in a  &lt;see cref=&quot;F:System.Threading.Tasks.TaskStatus.Faulted&quot; /&gt; state.">Provoque l’achèvement du <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> à l’état <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.</summary>
      <param name="exception" vsli:raw="The &lt;see cref=&quot;T:System.Exception&quot; /&gt; that caused the faulting.">
        <see cref="T:System.Exception" /> ayant provoqué l'erreur.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;exception&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="exception" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}@System#Collections#Generic#IList{T3}}}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}},System.Boolean@)">
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message that is to be consumed." />
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; for which the message is to be consumed." />
      <param name="messageConsumed" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully consumed. &lt;see langword=&quot;false&quot; /&gt; otherwise." />
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}@System#Collections#Generic#IList{T3}}}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}})">
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the reserved message." />
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; that currently holds the reservation." />
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}@System#Collections#Generic#IList{T3}}}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}})">
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message that is to be reserved." />
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; for which the message is to be reserved." />
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Target1">
      <summary vsli:raw="Gets a target that may be used to offer messages of the first type.">Obtient une cible qui peut être utilisée pour offrir des messages du premier type.</summary>
      <returns vsli:raw="The target.">Cible.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Target2">
      <summary vsli:raw="Gets a target that may be used to offer messages of the second type.">Obtient une cible qui peut être utilisée pour offrir des messages du deuxième type.</summary>
      <returns vsli:raw="The target.">Cible.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Target3">
      <summary vsli:raw="Gets a target that may be used to offer messages of the third type.">Obtient une cible qui peut être utilisée pour offrir des messages du troisième type.</summary>
      <returns vsli:raw="The target.">Cible.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.ToString">
      <summary vsli:raw="Returns a string that represents the formatted name of this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">Retourne une chaîne qui représente le nom mis en forme de cette instance de <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</summary>
      <returns vsli:raw="A string that represents the formatted name of this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">Chaîne qui représente le nom mis en forme de cette instance de <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.TryReceive(System.Predicate{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}},System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}@)">
      <summary vsli:raw="Attempts to synchronously receive an available output item from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">Tente de recevoir de façon synchrone un élément de sortie disponible de <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="filter" vsli:raw="The predicate a value must successfully pass in order for it to be received.  &lt;paramref name=&quot;filter&quot; /&gt; may be &lt;see langword=&quot;null&quot; /&gt; in which case all items will pass.">Attribut qu'une valeur doit passer avec succès pour sa réception.  <paramref name="filter" /> peut être <see langword="null" /> dans ce cas, tous les éléments aboutissent.</param>
      <param name="item" vsli:raw="The item received from the source.">Élément envoyé à partir de la source.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an item could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si un élément peut être reçu ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}}@)">
      <summary vsli:raw="Attempts to synchronously receive all available items from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">Tente de recevoir de façon synchrone tous les éléments disponibles de <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="items" vsli:raw="The items received from the source.">Éléments reçus de la source.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more items could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si un ou plusieurs éléments peuvent être reçus ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1">
      <summary vsli:raw="Provides a buffer for storing at most one element at time, overwriting each message with the next as it arrives.">Fournit une mémoire tampon pour stocker au plus un élément à la fois, en remplaçant chaque message par le suivant lorsque ce dernier arrive.</summary>
      <typeparam name="T" vsli:raw="Specifies the type of the data buffered by this dataflow block.">Spécifie le type des données mises en mémoire tampon par ce bloc de flux de données.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.#ctor(System.Func{`0,`0})">
      <summary vsli:raw="Initializes the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BroadcastBlock`1&quot; /&gt; with the specified cloning function.">Initialise <see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1" /> avec la fonction de clonage spécifiée.</summary>
      <param name="cloningFunction" vsli:raw="The function to use to clone the data when offered to other blocks.">Fonction à utiliser pour cloner des données après envoi à d'autres blocs.</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.#ctor(System.Func{`0,`0},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary vsli:raw="Initializes the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BroadcastBlock`1&quot; /&gt; with the specified cloning function and  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowBlockOptions&quot; /&gt;.">Initialise <see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1" /> avec la fonction de clonage et le <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" /> spécifiés.</summary>
      <param name="cloningFunction" vsli:raw="The function to use to clone the data when offered to other blocks.">Fonction à utiliser pour cloner des données après envoi à d'autres blocs.</param>
      <param name="dataflowBlockOptions" vsli:raw="The options with which to configure this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BroadcastBlock`1&quot; /&gt;.">Options avec lesquelles configurer ce <see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dataflowBlockOptions" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.Complete">
      <summary vsli:raw="Signals to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; that it should not accept nor produce any more messages nor consume any more postponed messages.">Signale à <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> qu'il ne doit plus recevoir ni produire de messages ou utiliser des messages différés.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BroadcastBlock`1.Completion">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Threading.Tasks.Task&quot; /&gt; that represents the asynchronous operation and completion of the dataflow block.">Obtient une <see cref="T:System.Threading.Tasks.Task" /> qui représente l'opération asynchrone et l'achèvement du bloc de flux de données.</summary>
      <returns vsli:raw="The task.">Tâche.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary vsli:raw="Links the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; to the specified  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;.">Lie le <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> au <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> spécifié.</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to which to connect this source.">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> auquel connecter cette source.</param>
      <param name="linkOptions" vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowLinkOptions&quot; /&gt; instance that configures the link.">Instance <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> qui configure le lien.</param>
      <returns vsli:raw="An IDisposable that, upon calling Dispose, will unlink the source from the target.">IDisposable qui, en appelant Dispose, dissocie la source de la cible.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;target&quot; /&gt; is null (Nothing in Visual Basic) or  &lt;paramref name=&quot;linkOptions&quot; /&gt; is null (Nothing in Visual Basic).">
        <paramref name="target" /> est Null (Nothing en Visual Basic) ou <paramref name="linkOptions" /> est Null (Nothing en Visual Basic).</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary vsli:raw="Causes the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; to complete in a &lt;see cref=&quot;F:System.Threading.Tasks.TaskStatus.Faulted&quot; /&gt; state.">Provoque l'achèvement du <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> à l'état <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.</summary>
      <param name="exception" vsli:raw="The  &lt;see cref=&quot;T:System.Exception&quot; /&gt; that caused the faulting.">
        <see cref="T:System.Exception" /> ayant provoqué l’erreur.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;exception&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="exception" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#IReceivableSourceBlock{T}#TryReceiveAll(System.Collections.Generic.IList{`0}@)">
      <summary vsli:raw="Attempts to synchronously receive all available items from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">Tente de recevoir de façon synchrone tous les éléments disponibles de <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="items" vsli:raw="The items received from the source.">Éléments reçus de la source.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more items could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si un ou plusieurs éléments peuvent être reçus ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to accept and consume a &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; previously offered by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">Appelé par un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> lié pour recevoir et utiliser un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> précédemment proposé par ce <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message being consumed.">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> du message en cours d'utilisation.</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; consuming the message.">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> absorbant le message.</param>
      <param name="messageConsumed" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully consumed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le message a été consommé avec succès ; sinon <see langword="false" />.</param>
      <returns vsli:raw="The value of the consumed message. This may correspond to a different  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance than was previously reserved and passed as the &lt;paramref name=&quot;messageHeader&quot; /&gt; to &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)&quot; /&gt;. The consuming &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; must use the returned value instead of the value passed as &lt;paramref name=&quot;messageValue&quot; /&gt; through &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)&quot; /&gt;.  &#xA;  &#xA; If the message requested is not available, the return value will be &lt;see langword=&quot;null&quot; /&gt;.">Valeur du message consommé. Cela peut correspondre à une instance de <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> différente de celle qui a été précédemment réservée et transmise comme <paramref name="messageHeader" /> à <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />. Le <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> consommateur doit utiliser la valeur retournée au lieu de la valeur passée comme <paramref name="messageValue" /> via <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />.  
Si le message demandé n'est pas disponible, la valeur de retour est <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" /> n'est pas valide.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to release a previously reserved &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">Appelé par un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> lié pour libérer un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> précédemment réservé par ce <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the reserved message being released.">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> du message réservé en cours de libération.</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; releasing the message it previously reserved.">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> libérant le message précédemment réservé.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" /> n'est pas valide.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; did not have the message reserved.">La <paramref name="target" /> ne contient pas le message réservé.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to reserve a previously offered &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">Appelé par un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> lié pour réserver un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> précédemment proposé par ce <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message being reserved.">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> du message en cours de réservation.</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; reserving the message.">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> réservant le message.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully reserved; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le message a été réservé avec succès ; sinon <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" /> n'est pas valide.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary vsli:raw="Offers a message to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;, giving the target the opportunity to consume or postpone the message.">Offre un message au <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, donnant à la cible la possibilité d'utiliser ou de différer le message.</summary>
      <param name="messageHeader" vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance that represents the header of the message being offered.">Instance <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> qui représente l'en-tête du message qui est proposé.</param>
      <param name="messageValue" vsli:raw="The value of the message being offered.">Valeur du message proposé.</param>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; offering the message. This may be null.">
        <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> qui transmet le message. Il peut s'agir d'une valeur null.</param>
      <param name="consumeToAccept" vsli:raw="Set to &lt;see langword=&quot;true&quot; /&gt; to instruct the target to call &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)&quot; /&gt; synchronously during the call to &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)&quot; /&gt;, prior to returning &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted&quot; /&gt;, in order to consume the message.">Définit sur <see langword="true" /> pour indiquer à la cible d'appeler <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> de façon synchrone pendant l'appel à <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />, avant de renvoyer <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> pour utiliser le message.</param>
      <returns vsli:raw="The status of the offered message. If the message was accepted by the target, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted&quot; /&gt; is returned, and the source should no longer use the offered message, because it is now owned by the target. If the message was postponed by the target, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed&quot; /&gt; is returned as a notification that the target may later attempt to consume or reserve the message; in the meantime, the source still owns the message and may offer it to other blocks.  &#xA;  &#xA; If the target would have otherwise postponed message, but &lt;paramref name=&quot;source&quot; /&gt; was &lt;see langword=&quot;null&quot; /&gt;, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined&quot; /&gt; is instead returned.  &#xA;  &#xA; If the target tried to accept the message but missed it due to the source delivering the message to another target or simply discarding it, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable&quot; /&gt; is returned.  &#xA;  &#xA; If the target chose not to accept the message, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined&quot; /&gt; is returned. If the target chose not to accept the message and will never accept another message from this source, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently&quot; /&gt; is returned.">État du message proposé. Si le message a été accepté par la cible, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> est retourné, et la source ne doit plus utiliser le message envoyé, car elle est désormais la propriété de la cible. Si le message a été différé par la cible, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> est retournée comme notification que la cible peut ensuite essayer d'utiliser ou de réserver un message ; parallèlement, la source possède le message et peut toujours le proposer à d'autres blocs.  
Si la cible avait par contre un message différé mais que la <paramref name="source" /> avait la valeur <see langword="null" />, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> serait retourné à la place.  
Si la cible a tenté de recevoir le message mais a échoué en raison de la source fournissant un message à une autre cible ou en l'ignorant simplement, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" /> est retourné.  
Si la cible a choisi de ne pas recevoir le message, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> est retourné. Si la cible a choisi de ne pas recevoir le message et ne recevra jamais un autre message de cette source, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" /> est retourné.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The  &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.  &#xA;  &#xA; -or- &lt;paramref name=&quot;consumeToAccept&quot; /&gt; may only be true if provided with a non-null &lt;paramref name=&quot;source&quot; /&gt;.">
        <paramref name="messageHeader" /> n’est pas valide.  
ou <paramref name="consumeToAccept" /> peut avoir la valeur true uniquement s’il est fourni avec une <paramref name="source" /> non Null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.ToString">
      <summary vsli:raw="Returns a string that represents the formatted name of this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">Retourne une chaîne qui représente le nom mis en forme de cette instance de <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</summary>
      <returns vsli:raw="A string that represents the formatted name of this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">Chaîne qui représente le nom mis en forme de cette instance <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.TryReceive(System.Predicate{`0},`0@)">
      <summary vsli:raw="Attempts to synchronously receive an available output item from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">Tente de recevoir de façon synchrone un élément de sortie disponible de <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="filter" vsli:raw="The predicate a value must successfully pass in order for it to be received.  &lt;paramref name=&quot;filter&quot; /&gt; may be &lt;see langword=&quot;null&quot; /&gt;, in which case all items will pass.">Attribut qu'une valeur doit passer avec succès pour sa réception.  <paramref name="filter" /> peut être <see langword="null" />, dans ce cas, tous les éléments aboutissent.</param>
      <param name="item" vsli:raw="The item received from the source.">Élément envoyé à partir de la source.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an item could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si un élément peut être reçu ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BufferBlock`1">
      <summary vsli:raw="Provides a buffer for storing data for a Dataflow.">Fournit une mémoire tampon pour stocker des données pour un flux de données.</summary>
      <typeparam name="T" vsli:raw="Specifies the type of the data buffered by this dataflow block.">Spécifie le type des données mises en mémoire tampon par ce bloc de flux de données.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.#ctor">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BufferBlock`1&quot; /&gt;.">Initialise un nouveau <see cref="T:System.Threading.Tasks.Dataflow.BufferBlock`1" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.#ctor(System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BufferBlock`1&quot; /&gt; with the specified  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowBlockOptions&quot; /&gt;.">Initialise un nouveau <see cref="T:System.Threading.Tasks.Dataflow.BufferBlock`1" /> avec le <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" /> spécifié.</summary>
      <param name="dataflowBlockOptions" vsli:raw="The options with which to configure this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BufferBlock`1&quot; /&gt;.">Options avec lesquelles configurer ce <see cref="T:System.Threading.Tasks.Dataflow.BufferBlock`1" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dataflowBlockOptions" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.Complete">
      <summary vsli:raw="Signals to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; that it should not accept nor produce any more messages nor consume any more postponed messages.">Signale à <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> qu'il ne doit plus recevoir ni produire de messages ou utiliser des messages différés.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BufferBlock`1.Completion">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Threading.Tasks.Task&quot; /&gt; that represents the asynchronous operation and completion of the dataflow block.">Obtient une <see cref="T:System.Threading.Tasks.Task" /> qui représente l'opération asynchrone et l'achèvement du bloc de flux de données.</summary>
      <returns vsli:raw="The task.">Tâche.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BufferBlock`1.Count">
      <summary vsli:raw="Gets the number of items currently stored in the buffer.">Obtient le nombre d'éléments actuellement stockés dans la mémoire tampon.</summary>
      <returns vsli:raw="The number of items.">Nombre d'éléments.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary vsli:raw="Links the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; to the specified  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;.">Lie le <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> au <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> spécifié.</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to which to connect this source.">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> auquel connecter cette source.</param>
      <param name="linkOptions" vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowLinkOptions&quot; /&gt; instance that configures the link.">Instance <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> qui configure le lien.</param>
      <returns vsli:raw="An IDisposable that, upon calling Dispose, will unlink the source from the target.">IDisposable qui, en appelant Dispose, dissocie la source de la cible.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;target&quot; /&gt; is null (Nothing in Visual Basic) or  &lt;paramref name=&quot;linkOptions&quot; /&gt; is null (Nothing in Visual Basic).">
        <paramref name="target" /> est Null (Nothing en Visual Basic) ou <paramref name="linkOptions" /> est Null (Nothing en Visual Basic).</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary vsli:raw="Causes the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; to complete in a &lt;see cref=&quot;F:System.Threading.Tasks.TaskStatus.Faulted&quot; /&gt; state.">Provoque l’achèvement du <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> à l’état <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.</summary>
      <param name="exception" vsli:raw="The  &lt;see cref=&quot;T:System.Exception&quot; /&gt; that caused the faulting.">
        <see cref="T:System.Exception" /> ayant provoqué l’erreur.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;exception&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="exception" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to accept and consume a &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; previously offered by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">Appelé par un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> lié pour recevoir et utiliser un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> précédemment proposé par ce <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message being consumed.">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> du message en cours d'utilisation.</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; consuming the message.">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> absorbant le message.</param>
      <param name="messageConsumed" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully consumed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le message a été consommé avec succès ; sinon <see langword="false" />.</param>
      <returns vsli:raw="The value of the consumed message. This may correspond to a different  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance than was previously reserved and passed as the &lt;paramref name=&quot;messageHeader&quot; /&gt; to  &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)&quot; /&gt;. The consuming &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; must use the returned value instead of the value passed as &lt;paramref name=&quot;messageValue&quot; /&gt; through &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)&quot; /&gt;.  &#xA;  &#xA; If the message requested is not available, the return value will be &lt;see langword=&quot;null&quot; /&gt;.">Valeur du message consommé. Cela peut correspondre à une instance de <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> différente de celle qui a été précédemment réservée et transmise comme <paramref name="messageHeader" /> à <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />. Le <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> consommateur doit utiliser la valeur retournée au lieu de la valeur passée comme <paramref name="messageValue" /> via <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />.  
Si le message demandé n'est pas disponible, la valeur de retour est <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" /> n'est pas valide.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to release a previously reserved &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">Appelé par un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> lié pour libérer un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> précédemment réservé par ce <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the reserved message being released.">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> du message réservé en cours de libération.</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; releasing the message it previously reserved.">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> libérant le message précédemment réservé.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" /> n'est pas valide.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; did not have the message reserved.">La <paramref name="target" /> ne contient pas le message réservé.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to reserve a previously offered &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">Appelé par un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> lié pour réserver un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> précédemment proposé par ce <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message being reserved.">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> du message en cours de réservation.</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; reserving the message.">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> réservant le message.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully reserved; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le message a été réservé avec succès ; sinon <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" /> n'est pas valide.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary vsli:raw="Offers a message to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;, giving the target the opportunity to consume or postpone the message.">Offre un message au <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, donnant à la cible la possibilité d'utiliser ou de différer le message.</summary>
      <param name="messageHeader" vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance that represents the header of the message being offered.">Instance <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> qui représente l'en-tête du message qui est proposé.</param>
      <param name="messageValue" vsli:raw="The value of the message being offered.">Valeur du message proposé.</param>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; offering the message. This may be &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> qui transmet le message. Celui-ci peut être <see langword="null" />.</param>
      <param name="consumeToAccept" vsli:raw="Set to true to instruct the target to call &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)&quot; /&gt; synchronously during the call to &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)&quot; /&gt;, prior to returning &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted&quot; /&gt;, in order to consume the message.">Définit sur true pour indiquer à la cible d’appeler <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> de façon synchrone pendant l’appel à <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />, avant de retourner <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />, pour consommer le message.</param>
      <returns vsli:raw="The status of the offered message. If the message was accepted by the target, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted&quot; /&gt; is returned, and the source should no longer use the offered message, because it is now owned by the target. If the message was postponed by the target, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed&quot; /&gt; is returned as a notification that the target may later attempt to consume or reserve the message; in the meantime, the source still owns the message and may offer it to other blocks.  &#xA;  &#xA; If the target would have otherwise postponed message, but &lt;paramref name=&quot;source&quot; /&gt; was &lt;see langword=&quot;null&quot; /&gt;, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined&quot; /&gt; is instead returned.  &#xA;  &#xA; If the target tried to accept the message but missed it due to the source delivering the message to another target or simply discarding it, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable&quot; /&gt; is returned.  &#xA;  &#xA; If the target chose not to accept the message, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined&quot; /&gt; is returned. If the target chose not to accept the message and will never accept another message from this source, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently&quot; /&gt; is returned.">État du message proposé. Si le message a été accepté par la cible, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> est retourné, et la source ne doit plus utiliser le message envoyé, car elle est désormais la propriété de la cible. Si le message a été différé par la cible, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> est retournée comme notification que la cible peut ensuite essayer d'utiliser ou de réserver un message ; parallèlement, la source possède le message et peut toujours le proposer à d'autres blocs.  
Si la cible avait par contre un message différé mais que la <paramref name="source" /> avait la valeur <see langword="null" />, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> serait retourné à la place.  
Si la cible a tenté de recevoir le message mais a échoué en raison de la source fournissant un message à une autre cible ou en l'ignorant simplement, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" /> est retourné.  
Si la cible a choisi de ne pas recevoir le message, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> est retourné. Si la cible a choisi de ne pas recevoir le message et ne recevra jamais un autre message de cette source, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" /> est retourné.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The  &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.  &#xA;  &#xA; -or- &lt;paramref name=&quot;consumeToAccept&quot; /&gt; may only be true if provided with a non-null &lt;paramref name=&quot;source&quot; /&gt;.">
        <paramref name="messageHeader" /> n’est pas valide.  
ou <paramref name="consumeToAccept" /> peut avoir la valeur true uniquement s’il est fourni avec une <paramref name="source" /> non Null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.ToString">
      <summary vsli:raw="Returns a string that represents the formatted name of this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">Retourne une chaîne qui représente le nom mis en forme de cette instance de <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</summary>
      <returns vsli:raw="A string that represents the formatted name of this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">Chaîne qui représente le nom mis en forme de cette instance de <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.TryReceive(System.Predicate{`0},`0@)">
      <summary vsli:raw="Attempts to synchronously receive an available output item from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">Tente de recevoir de façon synchrone un élément de sortie disponible de <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="filter" vsli:raw="The predicate value must successfully pass in order for it to be received. &lt;paramref name=&quot;filter&quot; /&gt; may be &lt;see langword=&quot;null&quot; /&gt;, in which case all items will pass.">Attribut qu'une valeur doit passer avec succès pour sa réception. <paramref name="filter" /> peut être <see langword="null" />, dans ce cas, tous les éléments aboutissent.</param>
      <param name="item" vsli:raw="The item received from the source.">Élément envoyé à partir de la source.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an item could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si un élément peut être reçu ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.TryReceiveAll(System.Collections.Generic.IList{`0}@)">
      <summary vsli:raw="Attempts to synchronously receive all available items from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">Tente de recevoir de façon synchrone tous les éléments disponibles de <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="items" vsli:raw="The items received from the source.">Éléments reçus de la source.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more items could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si un ou plusieurs éléments peuvent être reçus ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowBlock">
      <summary vsli:raw="Provides a set of static (Shared in Visual Basic) methods for working with dataflow blocks.">Fournit un ensemble de méthodes statiques (Shared en Visual Basic) pour utiliser des blocs de flux de données.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.AsObservable``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.IObservable`1&quot; /&gt; abstraction over the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">Crée une abstraction <see cref="T:System.IObservable`1" /> sur <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="source" vsli:raw="The source to wrap.">Source à inclure dans un wrapper.</param>
      <typeparam name="TOutput" vsli:raw="Specifies the type of data contained in the source.">Spécifie le type de données contenu dans la source.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.IObservable`1&quot; /&gt; that enables observers to be subscribed to the source.">
        <see cref="T:System.IObservable`1" /> qui permet aux observateurs de s'abonner à la source.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.AsObserver``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0})">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.IObserver`1&quot; /&gt; abstraction over the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;.">Crée une abstraction <see cref="T:System.IObserver`1" /> sur <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</summary>
      <param name="target" vsli:raw="The target to wrap.">Cible à encapsuler.</param>
      <typeparam name="TInput" vsli:raw="Specifies the type of input accepted by the target block.">Spécifie le type d'entrée accepté par le bloc cible.</typeparam>
      <returns vsli:raw="An observer that wraps the target block.">Observateur qui encapsule le bloc cible.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1})">
      <summary vsli:raw="Monitors two dataflow sources, invoking the provided handler for whichever source makes data available first.">Surveille deux sources de flux de données, en appelant le gestionnaire fourni pour toute source qui rend les données disponibles en premier.</summary>
      <param name="source1" vsli:raw="The first source.">Première source.</param>
      <param name="action1" vsli:raw="The handler to execute on data from the first source.">Gestionnaire à exécuter sur les données de la première source.</param>
      <param name="source2" vsli:raw="The second source.">Deuxième source.</param>
      <param name="action2" vsli:raw="The handler to execute on data from the second source.">Gestionnaire à exécuter sur les données de la deuxième source.</param>
      <typeparam name="T1" vsli:raw="Specifies type of data contained in the first source.">Spécifie le type de données contenu dans la première source.</typeparam>
      <typeparam name="T2" vsli:raw="Specifies type of data contained in the second source.">Spécifie le type de données contenu dans la deuxième source.</typeparam>
      <returns vsli:raw="A  &lt;see cref=&quot;T:System.Threading.Tasks.Task`1&quot; /&gt; that represents the asynchronous choice. If both sources are completed prior to the choice completing, the resulting task will be canceled. When one of the sources has data available and successfully propagates it to the choice, the resulting task will complete when the handler completes; if the handler throws an exception, the task will end in the &lt;see cref=&quot;F:System.Threading.Tasks.TaskStatus.Faulted&quot; /&gt; state and will contain the unhandled exception. Otherwise, the task will end with its &lt;see cref=&quot;P:System.Threading.Tasks.Task`1.Result&quot; /&gt; set to either 0 or 1 to represent the first or second source, respectively.  &#xA;  &#xA; This method will only consume an element from one of the two data sources, never both.">
        <see cref="T:System.Threading.Tasks.Task`1" /> qui représente le choix asynchrone. Si les deux sources sont terminées avant d'avoir effectué un choix, la tâche résultante est annulée. Lorsque l'une des sources a des données disponibles et les propage avec succès au choix, la tâche résultante s'achève lorsque le gestionnaire se termine. Si le gestionnaire lève une exception, la tâche se termine à l'état <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> et contiendra l'exception non gérée. Sinon, la tâche se termine avec son <see cref="P:System.Threading.Tasks.Task`1.Result" /> défini sur 0 ou 1 pour représenter la première ou la deuxième source, respectivement.  
Cette méthode consommera un seul élément de l'une des deux sources de données, jamais les deux.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;source1&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The  &lt;paramref name=&quot;action1&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;source2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;action2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source1" /> a la valeur <see langword="null" />.  

ou - 
<paramref name="action1" /> a la valeur <see langword="null" />.  

ou - 
<paramref name="source2" /> a la valeur <see langword="null" />.  

ou - 
<paramref name="action2" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary vsli:raw="Monitors two dataflow sources, invoking the provided handler for whichever source makes data available first.">Surveille deux sources de flux de données, en appelant le gestionnaire fourni pour toute source qui rend les données disponibles en premier.</summary>
      <param name="source1" vsli:raw="The first source.">Première source.</param>
      <param name="action1" vsli:raw="The handler to execute on data from the first source.">Gestionnaire à exécuter sur les données de la première source.</param>
      <param name="source2" vsli:raw="The second source.">Deuxième source.</param>
      <param name="action2" vsli:raw="The handler to execute on data from the second source.">Gestionnaire à exécuter sur les données de la deuxième source.</param>
      <param name="dataflowBlockOptions" vsli:raw="The options with which to configure this choice.">Options permettant de configurer ce choix.</param>
      <typeparam name="T1" vsli:raw="Specifies type of data contained in the first source.">Spécifie le type de données contenu dans la première source.</typeparam>
      <typeparam name="T2" vsli:raw="Specifies type of data contained in the second source.">Spécifie le type de données contenu dans la deuxième source.</typeparam>
      <returns vsli:raw="A  &lt;see cref=&quot;T:System.Threading.Tasks.Task`1&quot; /&gt; that represents the asynchronous choice. If both sources are completed prior to the choice completing, or if the &lt;see cref=&quot;T:System.Threading.CancellationToken&quot; /&gt; provided as part of &lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is canceled prior to the choice completing, the resulting task will be canceled. When one of the sources has data available and successfully propagates it to the choice, the resulting task will complete when the handler completes; if the handler throws an exception, the task will end in the &lt;see cref=&quot;F:System.Threading.Tasks.TaskStatus.Faulted&quot; /&gt; state and will contain the unhandled exception. Otherwise, the task will end with its &lt;see cref=&quot;P:System.Threading.Tasks.Task`1.Result&quot; /&gt; set to either 0 or 1 to represent the first or second source, respectively.">
        <see cref="T:System.Threading.Tasks.Task`1" /> qui représente le choix asynchrone. Si les deux sources sont terminées avant d'avoir effectué un choix, ou si le <see cref="T:System.Threading.CancellationToken" /> fourni dans le cadre des <paramref name="dataflowBlockOptions" /> est annulé avant d'avoir effectué un choix, la tâche résultante est annulée. Lorsque l'une des sources a des données disponibles et les propage avec succès au choix, la tâche résultante s'achève lorsque le gestionnaire se termine. Si le gestionnaire lève une exception, la tâche se termine à l'état <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> et contiendra l'exception non gérée. Sinon, la tâche se termine avec son <see cref="P:System.Threading.Tasks.Task`1.Result" /> défini sur 0 ou 1 pour représenter la première ou la deuxième source, respectivement.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;source1&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;action1&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;source2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;action2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source1" /> a la valeur <see langword="null" />.  
ou 
<paramref name="action1" /> a la valeur <see langword="null" />.  

ou - 
<paramref name="source2" /> a la valeur <see langword="null" />.  

ou - 
<paramref name="action2" /> a la valeur <see langword="null" />.  

ou - 
<paramref name="dataflowBlockOptions" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2})">
      <summary vsli:raw="Monitors three dataflow sources, invoking the provided handler for whichever source makes data available first.">Surveille trois sources de flux de données, en appelant le gestionnaire fourni pour toute source qui rend les données disponibles en premier.</summary>
      <param name="source1" vsli:raw="The first source.">Première source.</param>
      <param name="action1" vsli:raw="The handler to execute on data from the first source.">Gestionnaire à exécuter sur les données de la première source.</param>
      <param name="source2" vsli:raw="The second source.">Deuxième source.</param>
      <param name="action2" vsli:raw="The handler to execute on data from the second source.">Gestionnaire à exécuter sur les données de la deuxième source.</param>
      <param name="source3" vsli:raw="The third source.">Troisième source.</param>
      <param name="action3" vsli:raw="The handler to execute on data from the third source.">Gestionnaire à exécuter sur les données de la troisième source.</param>
      <typeparam name="T1" vsli:raw="Specifies type of data contained in the first source.">Spécifie le type de données contenu dans la première source.</typeparam>
      <typeparam name="T2" vsli:raw="Specifies type of data contained in the second source.">Spécifie le type de données contenu dans la deuxième source.</typeparam>
      <typeparam name="T3" vsli:raw="Specifies type of data contained in the third source.">Spécifie le type de données contenu dans la troisième source.</typeparam>
      <returns vsli:raw="A  &lt;see cref=&quot;T:System.Threading.Tasks.Task`1&quot; /&gt; that represents the asynchronous choice. If all sources are completed prior to the choice completing, the resulting task will be canceled. When one of the sources has data available and successfully propagates it to the choice, the resulting task will complete when the handler completes; if the handler throws an exception, the task will end in the &lt;see cref=&quot;F:System.Threading.Tasks.TaskStatus.Faulted&quot; /&gt; state and will contain the unhandled exception. Otherwise, the task will end with its &lt;see cref=&quot;P:System.Threading.Tasks.Task`1.Result&quot; /&gt; set to the 0-based index of the source.  &#xA;  &#xA; This method will only consume an element from one of the data sources, never more than one.">
        <see cref="T:System.Threading.Tasks.Task`1" /> qui représente le choix asynchrone. Si toutes les sources sont terminées avant d'avoir effectué un choix, la tâche résultante est annulée. Lorsque l'une des sources a des données disponibles et les propage avec succès au choix, la tâche résultante s'achève lorsque le gestionnaire se termine. Si le gestionnaire lève une exception, la tâche se termine à l'état <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> et contiendra l'exception non gérée. Sinon, la tâche se termine avec son <see cref="P:System.Threading.Tasks.Task`1.Result" /> défini sur l'index de base 0 de la source.  
Cette méthode consommera un seul élément de l'une des sources de données, jamais plusieurs.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;source1&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;action1&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;source2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;action2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;source3&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;action3&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source1" /> a la valeur <see langword="null" />.  
ou 
<paramref name="action1" /> a la valeur <see langword="null" />.  

ou - 
<paramref name="source2" /> a la valeur <see langword="null" />.  

ou 
<paramref name="action2" /> a la valeur <see langword="null" />.  
ou 
<paramref name="source3" /> a la valeur <see langword="null" />.  

ou - 
<paramref name="action3" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary vsli:raw="Monitors three dataflow sources, invoking the provided handler for whichever source makes data available first.">Surveille trois sources de flux de données, en appelant le gestionnaire fourni pour toute source qui rend les données disponibles en premier.</summary>
      <param name="source1" vsli:raw="The first source.">Première source.</param>
      <param name="action1" vsli:raw="The handler to execute on data from the first source.">Gestionnaire à exécuter sur les données de la première source.</param>
      <param name="source2" vsli:raw="The second source.">Deuxième source.</param>
      <param name="action2" vsli:raw="The handler to execute on data from the second source.">Gestionnaire à exécuter sur les données de la deuxième source.</param>
      <param name="source3" vsli:raw="The third source.">Troisième source.</param>
      <param name="action3" vsli:raw="The handler to execute on data from the third source.">Gestionnaire à exécuter sur les données de la troisième source.</param>
      <param name="dataflowBlockOptions" vsli:raw="The options with which to configure this choice.">Options permettant de configurer ce choix.</param>
      <typeparam name="T1" vsli:raw="Specifies type of data contained in the first source.">Spécifie le type de données contenu dans la première source.</typeparam>
      <typeparam name="T2" vsli:raw="Specifies type of data contained in the second source.">Spécifie le type de données contenu dans la deuxième source.</typeparam>
      <typeparam name="T3" vsli:raw="Specifies type of data contained in the third source.">Spécifie le type de données contenu dans la troisième source.</typeparam>
      <returns vsli:raw="A  &lt;see cref=&quot;T:System.Threading.Tasks.Task`1&quot; /&gt; that represents the asynchronous choice. If all sources are completed prior to the choice completing, or if the &lt;see cref=&quot;T:System.Threading.CancellationToken&quot; /&gt; provided as part of &lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is canceled prior to the choice completing, the resulting task will be canceled. When one of the sources has data available and successfully propagates it to the choice, the resulting task will complete when the handler completes; if the handler throws an exception, the task will end in the &lt;see cref=&quot;F:System.Threading.Tasks.TaskStatus.Faulted&quot; /&gt; state and will contain the unhandled exception. Otherwise, the task will end with its &lt;see cref=&quot;P:System.Threading.Tasks.Task`1.Result&quot; /&gt; set to the 0-based index of the source.  &#xA;  &#xA; This method will only consume an element from one of the data sources, never more than one. If cancellation is requested after an element has been received, the cancellation request will be ignored, and the relevant handler will be allowed to execute.">
        <see cref="T:System.Threading.Tasks.Task`1" /> qui représente le choix asynchrone. Si toutes les sources sont terminées avant d'avoir effectué un choix, ou si le <see cref="T:System.Threading.CancellationToken" /> fourni dans le cadre des <paramref name="dataflowBlockOptions" /> est annulé avant d'avoir effectué un choix, la tâche résultante est annulée. Lorsque l'une des sources a des données disponibles et les propage avec succès au choix, la tâche résultante s'achève lorsque le gestionnaire se termine. Si le gestionnaire lève une exception, la tâche se termine à l'état <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> et contiendra l'exception non gérée. Sinon, la tâche se termine avec son <see cref="P:System.Threading.Tasks.Task`1.Result" /> défini sur l'index de base 0 de la source.  
Cette méthode consommera un seul élément de l'une des sources de données, jamais plusieurs. Si l'annulation est demandée une fois qu'un élément a été reçu, la demande d'annulation est ignorée, et le gestionnaire approprié est autorisé à s'exécuter.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;source1&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;action1&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;source2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;action2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;source3&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;action3&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source1" /> a la valeur <see langword="null" />.  

ou - 
<paramref name="action1" /> a la valeur <see langword="null" />.  

ou - 
<paramref name="source2" /> a la valeur <see langword="null" />.  

ou - 
<paramref name="action2" /> a la valeur <see langword="null" />.  


ou 
<paramref name="source3" /> a la valeur <see langword="null" />.  

ou - 
<paramref name="action3" /> a la valeur <see langword="null" />.  

ou - 
<paramref name="dataflowBlockOptions" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate``2(System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1})">
      <summary vsli:raw="Encapsulates a target and a source into a single propagator.">Encapsule une cible et une source dans un propagateur unique.</summary>
      <param name="target" vsli:raw="The target to encapsulate.">Cible à encapsuler.</param>
      <param name="source" vsli:raw="The source to encapsulate.">Source à encapsuler.</param>
      <typeparam name="TInput" vsli:raw="Specifies the type of input expected by the target.">Spécifie le type d'entrée attendu par la cible.</typeparam>
      <typeparam name="TOutput" vsli:raw="Specifies the type of output produced by the source.">Spécifie le type de sortie produit par la source.</typeparam>
      <returns vsli:raw="The encapsulated target and source.">Cible et source encapsulées.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0})">
      <summary vsli:raw="Links the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; to the specified  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;.">Lie le <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> au <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> spécifié.</summary>
      <param name="source" vsli:raw="The source from which to link.">Source à partir de laquelle effectuer la liaison.</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to which to connect the source.">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> auquel connecter la source.</param>
      <typeparam name="TOutput" vsli:raw="Specifies the type of data contained in the source.">Spécifie le type de données contenu dans la source.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.IDisposable&quot; /&gt; that, upon calling &lt;see langword=&quot;Dispose&quot; /&gt;, will unlink the source from the target.">
        <see cref="T:System.IDisposable" /> qui, en appelant <see langword="Dispose" />, dissocie la source de la cible.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> a la valeur <see langword="null" />.  

ou - 
<paramref name="target" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Predicate{``0})">
      <summary vsli:raw="Links the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; to the specified  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; using the specified filter.">Lie le <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> au <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> spécifié à l’aide du filtre spécifié.</summary>
      <param name="source" vsli:raw="The source from which to link.">Source à partir de laquelle effectuer la liaison.</param>
      <param name="target" vsli:raw="The  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to which to connect the source.">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> auquel connecter la source.</param>
      <param name="predicate" vsli:raw="The filter a message must pass in order for it to propagate from the source to the target.">Filtre qu'un message doit respecter pour être propagé de la source à la cible.</param>
      <typeparam name="TOutput" vsli:raw="Specifies the type of data contained in the source.">Spécifie le type de données contenu dans la source.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.IDisposable&quot; /&gt; that, upon calling &lt;see langword=&quot;Dispose&quot; /&gt;, will unlink the source from the target.">
        <see cref="T:System.IDisposable" /> qui, en appelant <see langword="Dispose" />, dissocie la source de la cible.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> a la valeur <see langword="null" />.  

ou - 
<paramref name="target" /> a la valeur <see langword="null" />.  

ou 
<paramref name="predicate" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Predicate{``0})">
      <summary vsli:raw="Links the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; to the specified  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; using the specified filter.">Lie le <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> au <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> spécifié à l’aide du filtre spécifié.</summary>
      <param name="source" vsli:raw="The source from which to link.">Source à partir de laquelle effectuer la liaison.</param>
      <param name="target" vsli:raw="The  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to which to connect the source.">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> auquel connecter la source.</param>
      <param name="linkOptions" vsli:raw="One of the enumeration values that specifies how to configure a link between dataflow blocks.">L'une des valeurs d'énumération qui spécifie comment configurer un lien entre les blocs de flux de données.</param>
      <param name="predicate" vsli:raw="The filter a message must pass in order for it to propagate from the source to the target.">Filtre qu'un message doit respecter pour être propagé de la source à la cible.</param>
      <typeparam name="TOutput" vsli:raw="Specifies the type of data contained in the source.">Spécifie le type de données contenu dans la source.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.IDisposable&quot; /&gt; that, upon calling &lt;see langword=&quot;Dispose&quot; /&gt;, will unlink the source from the target.">
        <see cref="T:System.IDisposable" /> qui, en appelant <see langword="Dispose" />, dissocie la source de la cible.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The  &lt;paramref name=&quot;source&quot; /&gt; is null (Nothing in Visual Basic).  &#xA;  &#xA; -or-  &#xA;  &#xA; The  &lt;paramref name=&quot;target&quot; /&gt; is null (Nothing in Visual Basic).  &#xA;  &#xA; -or-  &#xA;  &#xA; The  &lt;paramref name=&quot;linkOptions&quot; /&gt; is null (Nothing in Visual Basic).  &#xA;  &#xA; -or-  &#xA;  &#xA; The  &lt;paramref name=&quot;predicate&quot; /&gt; is null (Nothing in Visual Basic).">
        <paramref name="source" /> est Null (Nothing en Visual Basic).  

ou - 
<paramref name="target" /> est Null (Nothing en Visual Basic).  

ou - 
<paramref name="linkOptions" /> est Null (Nothing en Visual Basic).  


ou 
<paramref name="predicate" /> est Null (Nothing en Visual Basic).</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.NullTarget``1">
      <summary vsli:raw="Gets a target block that synchronously accepts all messages offered to it and drops them.">Obtient un bloc cible qui reçoit de façon synchrone tous les messages fournis à ce dernier et les supprime.</summary>
      <typeparam name="TInput" vsli:raw="The type of the messages this block can accept.">Type des messages que ce bloc peut accepter.</typeparam>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; that accepts and subsequently drops all offered messages.">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> qui reçoit et dépose ensuite tous les messages transmis.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})">
      <summary vsli:raw="Provides a &lt;see cref=&quot;T:System.Threading.Tasks.Task`1&quot; /&gt; that asynchronously monitors the source for available output.">Fournit un <see cref="T:System.Threading.Tasks.Task`1" /> qui surveille de façon asynchrone la source de la sortie disponible.</summary>
      <param name="source" vsli:raw="The source to monitor.">Source à surveiller.</param>
      <typeparam name="TOutput" vsli:raw="Specifies the type of data contained in the source.">Spécifie le type de données contenu dans la source.</typeparam>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Task`1&quot; /&gt; that informs of whether and when more output is available. If, when the task completes, its &lt;see cref=&quot;P:System.Threading.Tasks.Task`1.Result&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt;, more output is available in the source (though another consumer of the source may retrieve the data).  &#xA;  &#xA; If it returns &lt;see langword=&quot;false&quot; /&gt;, more output is not and will never be available, due to the source completing prior to output being available.">
        <see cref="T:System.Threading.Tasks.Task`1" /> qui avertit si une sortie supplémentaire sera disponible et quand. Si, lorsque la tâche se termine, son <see cref="P:System.Threading.Tasks.Task`1.Result" /> a la valeur <see langword="true" />, une sortie supplémentaire sera disponible dans la source (même si un autre consommateur de la source peut récupérer les données).  
Si elle retourne <see langword="false" />, une sortie supplémentaire n'est pas et ne sera jamais disponible, en raison d'une source qui se termine avant la disponibilité de la sortie.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)">
      <summary vsli:raw="Provides a  &lt;see cref=&quot;T:System.Threading.Tasks.Task`1&quot; /&gt; that asynchronously monitors the source for available output.">Fournit un <see cref="T:System.Threading.Tasks.Task`1" /> qui surveille de façon asynchrone la source de la sortie disponible.</summary>
      <param name="source" vsli:raw="The source to monitor.">Source à surveiller.</param>
      <param name="cancellationToken" vsli:raw="The cancellation token with which to cancel the asynchronous operation.">Jeton d'annulation utilisé pour annuler l'opération asynchrone.</param>
      <typeparam name="TOutput" vsli:raw="Specifies the type of data contained in the source.">Spécifie le type de données contenu dans la source.</typeparam>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Task`1&quot; /&gt; that informs of whether and when more output is available. If, when the task completes, its &lt;see cref=&quot;P:System.Threading.Tasks.Task`1.Result&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt;, more output is available in the source (though another consumer of the source may retrieve the data). If it returns &lt;see langword=&quot;false&quot; /&gt;, more output is not and will never be available, due to the source completing prior to output being available.">
        <see cref="T:System.Threading.Tasks.Task`1" /> qui avertit si une sortie supplémentaire sera disponible et quand. Si, lorsque la tâche se termine, son <see cref="P:System.Threading.Tasks.Task`1.Result" /> a la valeur <see langword="true" />, une sortie supplémentaire sera disponible dans la source (même si un autre consommateur de la source peut récupérer les données). Si elle retourne <see langword="false" />, une sortie supplémentaire n'est pas et ne sera jamais disponible, en raison d'une source qui se termine avant la disponibilité de la sortie.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Post``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)">
      <summary vsli:raw="Posts an item to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;.">Publie un élément à <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</summary>
      <param name="target" vsli:raw="The target block.">Bloc cible.</param>
      <param name="item" vsli:raw="The item being offered to the target.">Élément qui est proposé à la cible.</param>
      <typeparam name="TInput" vsli:raw="Specifies the type of data accepted by the target block.">Spécifie le type de données accepté par le bloc cible.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item was accepted by the target block; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'élément a été accepté par le bloc cible ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})">
      <summary vsli:raw="Synchronously receives a value from a specified source.">Reçoit de façon synchrone une valeur d'une source spécifiée.</summary>
      <param name="source" vsli:raw="The source from which to receive the value.">La source à partir de laquelle recevoir la valeur.</param>
      <typeparam name="TOutput" vsli:raw="The type of data contained in the source.">Le type des données contenues dans la source.</typeparam>
      <returns vsli:raw="The received value.">La valeur reçue.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="No item could be received from the source.">Aucun élément n'a pu être accepté par la source.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)">
      <summary vsli:raw="Synchronously receives a value from a specified source and provides a token to cancel the operation.">Reçoit de façon synchrone une valeur d'une source spécifiée et fournit un jeton pour annuler l'opération.</summary>
      <param name="source" vsli:raw="The source from which to receive the value.">La source à partir de laquelle recevoir la valeur.</param>
      <param name="cancellationToken" vsli:raw="The token to use to cancel the receive operation.">Le jeton à utiliser pour annuler l'opération de réception.</param>
      <typeparam name="TOutput" vsli:raw="The type of data contained in the source.">Le type des données contenues dans la source.</typeparam>
      <returns vsli:raw="The received value.">La valeur reçue.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="No item could be received from the source.">Aucun élément n'a pu être accepté par la source.</exception>
      <exception cref="T:System.OperationCanceledException" vsli:raw="The operation was canceled before an item was received from the source.">L'opération a été annulée avant la réception d'un élément depuis la source.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)">
      <summary vsli:raw="Synchronously receives a value from a specified source, observing an optional time-out period.">Reçoit de façon synchrone une valeur d'une source spécifiée, en observant un délai d'attente facultatif.</summary>
      <param name="source" vsli:raw="The source from which to receive the value.">La source à partir de laquelle recevoir la valeur.</param>
      <param name="timeout" vsli:raw="The maximum time interval, in milliseconds, to wait for the synchronous operation to complete, or an interval that represents -1 milliseconds to wait indefinitely.">Intervalle de temps maximum, en millisecondes, à attendre pour que l'exécution synchrone se termine, ou intervalle qui représente -1 milliseconde pour attendre indéfiniment.</param>
      <typeparam name="TOutput" vsli:raw="The type of data contained in the source.">Le type des données contenues dans la source.</typeparam>
      <returns vsli:raw="The received value.">La valeur reçue.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;timeout&quot; /&gt; is a negative number other than -1 milliseconds, which represents an infinite time-out period.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;timeout&quot; /&gt; is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">
        <paramref name="timeout" /> est un nombre négatif autre que -1 milliseconde, qui représente un délai d'attente infini.  
ou 
 <paramref name="timeout" /> est supérieur à <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="No item could be received from the source.">Aucun élément n'a pu être accepté par la source.</exception>
      <exception cref="T:System.TimeoutException" vsli:raw="The specified time-out expired before an item was received from the source.">Le délai d'attente spécifié a expiré avant la réception d'un élément en provenance de la source.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)">
      <summary vsli:raw="Synchronously receives a value from a specified source, providing a token to cancel the operation and observing an optional time-out interval.">Reçoit de façon synchrone une valeur d'une source spécifiée, en fournissant un jeton pour annuler l'opération et en observant un délai d'attente facultatif.</summary>
      <param name="source" vsli:raw="The source from which to receive the value.">La source à partir de laquelle recevoir la valeur.</param>
      <param name="timeout" vsli:raw="The maximum time interval, in milliseconds, to wait for the synchronous operation to complete, or an interval that represents -1 milliseconds to wait indefinitely.">Intervalle de temps maximum, en millisecondes, à attendre pour que l'exécution synchrone se termine, ou intervalle qui représente -1 milliseconde pour attendre indéfiniment.</param>
      <param name="cancellationToken" vsli:raw="The token to use to cancel the receive operation.">Le jeton à utiliser pour annuler l'opération de réception.</param>
      <typeparam name="TOutput" vsli:raw="The type of data contained in the source.">Le type des données contenues dans la source.</typeparam>
      <returns vsli:raw="The received value.">La valeur reçue.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;timeout&quot; /&gt; is a negative number other than -1 milliseconds, which represents an infinite time-out period.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;timeout&quot; /&gt; is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">
        <paramref name="timeout" /> est un nombre négatif autre que -1 milliseconde, qui représente un délai d'attente infini.  

ou - 
<paramref name="timeout" /> est supérieur à <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="No item could be received from the source.">Aucun élément n'a pu être accepté par la source.</exception>
      <exception cref="T:System.TimeoutException" vsli:raw="The specified time-out expired before an item was received from the source.">Le délai d'attente spécifié a expiré avant la réception d'un élément en provenance de la source.</exception>
      <exception cref="T:System.OperationCanceledException" vsli:raw="The operation was canceled before an item was received from the source.">L'opération a été annulée avant la réception d'un élément depuis la source.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})">
      <summary vsli:raw="Asynchronously receives a value from a specified source.">Reçoit de façon asynchrone une valeur d'une source spécifiée.</summary>
      <param name="source" vsli:raw="The source from which to receive the value.">La source à partir de laquelle recevoir la valeur.</param>
      <typeparam name="TOutput" vsli:raw="The type of data contained in the source.">Le type des données contenues dans la source.</typeparam>
      <returns vsli:raw="A task that represents the asynchronous receive operation. When an item value is successfully received from the source, the returned task is completed and its &lt;see cref=&quot;P:System.Threading.Tasks.Task`1.Result&quot; /&gt; returns the received value. If an item value cannot be retrieved because the source is empty and completed , an &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; exception is thrown in the returned task.">Tâche qui représente l'opération de réception asynchrone. Lorsqu'une valeur d'élément est reçue avec succès depuis la source, la tâche retournée est exécutée et son <see cref="P:System.Threading.Tasks.Task`1.Result" /> retourne la valeur reçue. Si la valeur d’un élément ne peut pas être récupérée car la source est vide et terminée, une exception <see cref="T:System.InvalidOperationException" /> est levée dans la tâche retournée.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously receives a value from a specified source and provides a token to cancel the operation.">Accepte de façon asynchrone une valeur d'une source spécifiée et fournit un jeton pour annuler l'opération.</summary>
      <param name="source" vsli:raw="The source from which to receive the value.">La source à partir de laquelle recevoir la valeur.</param>
      <param name="cancellationToken" vsli:raw="The token to use to cancel the receive operation.">Le jeton à utiliser pour annuler l'opération de réception.</param>
      <typeparam name="TOutput" vsli:raw="Specifies the type of data contained in the source.">Spécifie le type de données contenu dans la source.</typeparam>
      <returns vsli:raw="A task that represents the asynchronous receive operation. When a value is successfully received from the source, the returned task is completed and its &lt;see cref=&quot;P:System.Threading.Tasks.Task`1.Result&quot; /&gt; returns the value. If a value cannot be retrieved because cancellation was requested, the returned task is canceled. If the value cannot be retrieved because the source is empty and completed , an &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; exception is thrown in the returned task.">Tâche qui représente l'opération de réception asynchrone. Lorsqu'une valeur est correctement reçue de la source, la tâche retournée est terminée et son <see cref="P:System.Threading.Tasks.Task`1.Result" /> retourne la valeur. Si une valeur ne peut pas être récupérée parce que l'annulation a été demandée, la tâche retournée est annulée. Si la valeur ne peut pas être récupérée car la source est vide et terminée, une exception <see cref="T:System.InvalidOperationException" /> est levée dans la tâche retournée.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)">
      <summary vsli:raw="Asynchronously receives a value from a specified source, observing an optional time-out period.">Reçoit de façon asynchrone une valeur d'une source spécifiée, en observant un délai d'attente facultatif.</summary>
      <param name="source" vsli:raw="The source from which to receive the value.">La source à partir de laquelle recevoir la valeur.</param>
      <param name="timeout" vsli:raw="The maximum time interval, in milliseconds, to wait for the synchronous operation to complete, or an interval that represents -1 milliseconds to wait indefinitely.">Intervalle de temps maximum, en millisecondes, à attendre pour que l'exécution synchrone se termine, ou intervalle qui représente -1 milliseconde pour attendre indéfiniment.</param>
      <typeparam name="TOutput" vsli:raw="The type of data contained in the source.">Le type des données contenues dans la source.</typeparam>
      <returns vsli:raw="A task that represents the asynchronous receive operation. When a value is successfully received from the source, the returned task is completed and its &lt;see cref=&quot;P:System.Threading.Tasks.Task`1.Result&quot; /&gt; returns the value. If a value cannot be retrieved because the time-out expired, the returned task is canceled. If the value cannot be retrieved because the source is empty and completed , an &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; exception is thrown in the returned task.">Tâche qui représente l'opération de réception asynchrone. Lorsqu'une valeur est correctement reçue de la source, la tâche retournée est terminée et son <see cref="P:System.Threading.Tasks.Task`1.Result" /> retourne la valeur. Si une valeur ne peut pas être récupérée car le délai d'attente a expiré, la tâche retournée est annulée. Si la valeur ne peut pas être récupérée car la source est vide et terminée, une exception <see cref="T:System.InvalidOperationException" /> est levée dans la tâche retournée.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;timeout&quot; /&gt; is a negative number other than -1 milliseconds, which represents an infinite time-out period.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;timeout&quot; /&gt; is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">
        <paramref name="timeout" /> est un nombre négatif autre que -1 milliseconde, qui représente un délai d'attente infini.  
ou 
 <paramref name="timeout" /> est supérieur à <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously receives a value from a specified source, providing a token to cancel the operation and observing an optional time-out interval.">Reçoit de façon asynchrone une valeur d'une source spécifiée, en fournissant un jeton pour annuler l'opération et en observant un délai d'attente facultatif.</summary>
      <param name="source" vsli:raw="The source from which to receive the value.">La source à partir de laquelle recevoir la valeur.</param>
      <param name="timeout" vsli:raw="The maximum time interval, in milliseconds, to wait for the synchronous operation to complete, or an interval that represents -1 milliseconds to wait indefinitely.">Intervalle de temps maximum, en millisecondes, à attendre pour que l'exécution synchrone se termine, ou intervalle qui représente -1 milliseconde pour attendre indéfiniment.</param>
      <param name="cancellationToken" vsli:raw="The token which may be used to cancel the receive operation.">Le jeton pouvant être utilisé pour annuler l'opération de réception.</param>
      <typeparam name="TOutput" vsli:raw="The type of data contained in the source.">Le type des données contenues dans la source.</typeparam>
      <returns vsli:raw="A task that represents the asynchronous receive operation. When a value is successfully received from the source, the returned task is completed and its &lt;see cref=&quot;P:System.Threading.Tasks.Task`1.Result&quot; /&gt; returns the value. If a value cannot be retrieved because the time-out expired or cancellation was requested, the returned task is canceled. If the value cannot be retrieved because the source is empty and completed, an &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; exception is thrown in the returned task.">Tâche qui représente l'opération de réception asynchrone. Lorsqu'une valeur est correctement reçue de la source, la tâche retournée est terminée et son <see cref="P:System.Threading.Tasks.Task`1.Result" /> retourne la valeur. Si une valeur ne peut pas être récupérée parce que le délai d'attente a expiré ou l'annulation a été demandée, la tâche retournée est annulée. Si la valeur ne peut pas être récupérée parce que la source est vide et terminée, une exception <see cref="T:System.InvalidOperationException" /> est levée dans la tâche retournée.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;timeout&quot; /&gt; is a negative number other than -1 milliseconds, which represents an infinite time-out period.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;timeout&quot; /&gt; is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">
        <paramref name="timeout" /> est un nombre négatif autre que -1 milliseconde, qui représente un délai d'attente infini.  

ou - 
<paramref name="timeout" /> est supérieur à <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)">
      <summary vsli:raw="Asynchronously offers a message to the target message block, allowing for postponement.">Propose de façon asynchrone un message au bloc de message cible, en autorisant l'ajournement.</summary>
      <param name="target" vsli:raw="The target to which to post the data.">Cible dans laquelle publier les données.</param>
      <param name="item" vsli:raw="The item being offered to the target.">Élément qui est proposé à la cible.</param>
      <typeparam name="TInput" vsli:raw="Specifies the type of the data to post to the target.">Spécifie le type des données à publier sur la cible.</typeparam>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Task`1&quot; /&gt; that represents the asynchronous send. If the target accepts and consumes the offered element during the call to &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)&quot; /&gt;, upon return from the call the resulting &lt;see cref=&quot;T:System.Threading.Tasks.Task`1&quot; /&gt; will be completed and its &lt;see cref=&quot;P:System.Threading.Tasks.Task`1.Result&quot; /&gt; property will return &lt;see langword=&quot;true&quot; /&gt;. If the target declines the offered element during the call, upon return from the call the resulting &lt;see cref=&quot;T:System.Threading.Tasks.Task`1&quot; /&gt; will be completed and its &lt;see cref=&quot;P:System.Threading.Tasks.Task`1.Result&quot; /&gt; property will return &lt;see langword=&quot;false&quot; /&gt;. If the target postpones the offered element, the element will be buffered until such time that the target consumes or releases it, at which point the task will complete, with its &lt;see cref=&quot;P:System.Threading.Tasks.Task`1.Result&quot; /&gt; indicating whether the message was consumed. If the target never attempts to consume or release the message, the returned task will never complete.">
        <see cref="T:System.Threading.Tasks.Task`1" /> qui représente l'envoi asynchrone. Si la cible accepte et consomme l'élément proposé pendant l'appel à <see cref="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)" />, au retour de l'appel la <see cref="T:System.Threading.Tasks.Task`1" /> résultante sera terminée et sa propriété <see cref="P:System.Threading.Tasks.Task`1.Result" /> retournera la valeur <see langword="true" />. Si la cible refuse l'élément proposé pendant l'appel, au retour de l'appel la <see cref="T:System.Threading.Tasks.Task`1" /> résultante sera terminée et sa propriété <see cref="P:System.Threading.Tasks.Task`1.Result" /> retournera la valeur <see langword="false" />. Si la cible diffère l'élément proposé, l'élément sera mis en mémoire tampon jusqu'au moment où la cible le consomme ou le libère. À ce moment-là, la tâche se terminera, avec son <see cref="P:System.Threading.Tasks.Task`1.Result" /> indiquant si le message a été consommé. Si la cible n'essaie jamais de consommer ou de libérer le message, la tâche retournée ne se terminera jamais.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0,System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously offers a message to the target message block, allowing for postponement.">Propose de façon asynchrone un message au bloc de message cible, en autorisant l'ajournement.</summary>
      <param name="target" vsli:raw="The target to which to post the data.">Cible dans laquelle publier les données.</param>
      <param name="item" vsli:raw="The item being offered to the target.">Élément qui est proposé à la cible.</param>
      <param name="cancellationToken" vsli:raw="The cancellation token with which to request cancellation of the send operation.">Jeton d'annulation utilisé pour demander l'annulation de l'opération d'envoi.</param>
      <typeparam name="TInput" vsli:raw="Specifies the type of the data to post to the target.">Spécifie le type des données à publier sur la cible.</typeparam>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Task`1&quot; /&gt; that represents the asynchronous send.  If the target accepts and consumes the offered element during the call to SendAsync, upon return from the call the resulting &lt;see cref=&quot;T:System.Threading.Tasks.Task`1&quot; /&gt; will be completed and its &lt;c&gt;Result&lt;/c&gt; property will return true.  If the target declines the offered element during the call, upon return from the call the resulting &lt;see cref=&quot;T:System.Threading.Tasks.Task`1&quot; /&gt; will be completed and its &lt;c&gt;Result&lt;/c&gt; property will return false. If the target postpones the offered element, the element will be buffered until such time that the target consumes or releases it, at which point the Task will complete, with its &lt;c&gt;Result&lt;/c&gt; indicating whether the message was consumed. If the target never attempts to consume or release the message, the returned task will never complete.  &#xA;  &#xA; If cancellation is requested before the target has successfully consumed the sent data, the returned task will complete in the Canceled state and the data will no longer be available to the target.">
        <see cref="T:System.Threading.Tasks.Task`1" /> qui représente l'envoi asynchrone.  Si la cible accepte et consomme l’élément proposé pendant l’appel à SendAsync, au retour de l’appel la <see cref="T:System.Threading.Tasks.Task`1" /> résultante est terminée et sa propriété <c>Result</c> retourne la valeur true.  Si la cible refuse l’élément proposé pendant l’appel, au retour de l’appel la <see cref="T:System.Threading.Tasks.Task`1" /> résultante est terminée et sa propriété <c>Result</c> retourne la valeur false. Si la cible diffère l’élément proposé, l’élément est mis en mémoire tampon jusqu’au moment où la cible le consomme ou le libère. À ce moment-là, la tâche se termine, avec son <c>Result</c> indiquant si le message a été consommé. Si la cible n'essaie jamais de consommer ou de libérer le message, la tâche retournée ne se terminera jamais.  
Si l'annulation est demandée avant que la cible n'ait consommé avec succès les données envoyées, la tâche retournée se terminera à l'état d'annulation et les données ne seront plus disponibles pour la cible.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The  &lt;paramref name=&quot;target&quot; /&gt; is null (Nothing in Visual Basic).">
        <paramref name="target" /> est Null (Nothing en Visual Basic).</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.TryReceive``1(System.Threading.Tasks.Dataflow.IReceivableSourceBlock{``0},``0@)">
      <summary vsli:raw="Attempts to synchronously receive an item from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">Tente de recevoir de façon synchrone un élément de <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="source" vsli:raw="The source from which to receive.">Source de réception.</param>
      <param name="item" vsli:raw="The item received from the source.">Élément envoyé à partir de la source.</param>
      <typeparam name="TOutput" vsli:raw="Specifies the type of data contained in the source.">Spécifie le type de données contenu dans la source.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an item could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si un élément peut être reçu ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions">
      <summary vsli:raw="Provides options used to configure the processing performed by dataflow blocks.">Fournit les options utilisées pour configurer le traitement exécuté par les blocs de flux de données.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockOptions.#ctor">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowBlockOptions&quot; /&gt;.">Initialise un nouveau <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" />.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.BoundedCapacity">
      <summary vsli:raw="Gets or sets the maximum number of messages that may be buffered by the block.">Obtient ou définit le nombre maximal de messages qui peuvent être mis en mémoire tampon par le bloc.</summary>
      <returns vsli:raw="The maximum number of messages. The default is -1, which indicates an unlimited number of messages.">Le nombre maximal de messages. La valeur par défaut est -1, ce qui indique un nombre illimité de messages.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.CancellationToken">
      <summary vsli:raw="Gets or sets the  &lt;see cref=&quot;T:System.Threading.CancellationToken&quot; /&gt; to monitor for cancellation requests.">Obtient ou définit le <see cref="T:System.Threading.CancellationToken" /> pour lequel il faut surveiller les demandes d’annulation.</summary>
      <returns vsli:raw="The token.">Jeton.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.EnsureOrdered">
      <summary vsli:raw="Gets or sets a value that indicates whether ordered processing should be enforced on a block's handling of messages.">Obtient ou définit une valeur qui indique si le traitement chronologique doit être appliqué sur la gestion d’un bloc de messages.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if ordered processing should be enforced; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default value is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> Si le traitement chronologique doit être appliqué ; Sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.MaxMessagesPerTask">
      <summary vsli:raw="Gets or sets the maximum number of messages that may be processed per task.">Obtient ou définit le nombre maximal de messages qui peuvent être traités par tâche.</summary>
      <returns vsli:raw="The maximum number of messages. The default is -1, which indicates an unlimited number of messages.">Le nombre maximal de messages. La valeur par défaut est -1, ce qui indique un nombre illimité de messages.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.NameFormat">
      <summary vsli:raw="Gets or sets the format string to use when a block is queried for its name.">Obtient ou définit la chaîne de format à utiliser lorsqu’un bloc est interrogé pour son nom.</summary>
      <returns vsli:raw="The format string to use when a block is queried for its name.">La chaîne de format à utiliser lorsqu’un bloc est interrogé pour son nom.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.TaskScheduler">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Threading.Tasks.TaskScheduler&quot; /&gt; to use for scheduling tasks.">Obtient ou définit le <see cref="T:System.Threading.Tasks.TaskScheduler" /> à utiliser pour la planification des tâches.</summary>
      <returns vsli:raw="The task scheduler.">Le Planificateur de tâches.</returns>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowBlockOptions.Unbounded">
      <summary vsli:raw="A constant used to specify an unlimited quantity for  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowBlockOptions&quot; /&gt; members that provide an upper bound. This field is constant.">Constante utilisée pour spécifier une quantité illimitée pour les membres de <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" /> qui fournissent une limite supérieure. Ce champ est constant.</summary>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions">
      <summary vsli:raw="Provides options used to configure a link between dataflow blocks.">Fournit les options utilisées pour configurer un lien entre des blocs de flux de données.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowLinkOptions.#ctor">
      <summary vsli:raw="Initializes the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowLinkOptions&quot; /&gt;.">Initialise la <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" />.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowLinkOptions.Append">
      <summary vsli:raw="Gets or sets whether the link should be appended to the source's list of links, or whether it should be prepended.">Obtient ou définit une valeur indiquant si le lien doit être ajouté à la suite de la liste de liens de la source, ou s’il doit être ajouté au début.</summary>
      <returns vsli:raw="Returns  &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">Retourne <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowLinkOptions.MaxMessages">
      <summary vsli:raw="Gets or sets the maximum number of messages that may be consumed across the link.">Obtient ou définit le nombre maximal de messages pouvant être utilisés sur le lien.</summary>
      <returns vsli:raw="Returns  &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">Retourne <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowLinkOptions.PropagateCompletion">
      <summary vsli:raw="Gets or sets whether the linked target will have completion and faulting notification propagated to it automatically.">Obtient ou définit une valeur indiquant si la cible liée disposera des fonctions de progression et de notification d'erreurs propagées automatiquement à son actif.</summary>
      <returns vsli:raw="Returns  &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">Retourne <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader">
      <summary vsli:raw="Provides a container of data attributes for passing between dataflow blocks.">Fournit un conteneur d'attributs de données pour passer ces attributs de données entre les blocs de flux de données.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.#ctor(System.Int64)">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; with the specified attributes.">Initialise un nouveau <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> avec les attributs spécifiés.</summary>
      <param name="id" vsli:raw="The ID of the message. Must be unique within the originating source block. It does not need to be globally unique.">ID du message. Doit être unique dans le bloc source d'origine. Il ne doit pas nécessairement être global unique.</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.Equals(System.Object)">
      <summary vsli:raw="Checks boxed &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instances for equality by ID.">Contrôle les instances <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> boxed pour l'égalité par ID.</summary>
      <param name="obj" vsli:raw="A boxed &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance.">Instance boxed de <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> .</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the instances are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si les instances sont égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.Equals(System.Threading.Tasks.Dataflow.DataflowMessageHeader)">
      <summary vsli:raw="Checks two  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instances for equality by ID without boxing.">Contrôle deux instances <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> pour l’égalité par ID sans conversion boxing.</summary>
      <param name="other" vsli:raw="Another  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance.">Autre instance de <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the instances are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si les instances sont égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.GetHashCode">
      <summary vsli:raw="Generates a hash code for the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance.">Génère un code de hachage pour l'instance <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />.</summary>
      <returns vsli:raw="The hash code.">Code de hachage.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowMessageHeader.Id">
      <summary vsli:raw="Gets the ID of the message within the source.">Obtient l'ID du message à l'intérieur de la source.</summary>
      <returns vsli:raw="The ID contained in the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance.">ID contenu dans l' <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> instance.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowMessageHeader.IsValid">
      <summary vsli:raw="Gets the validity of the message.">Obtient la validité du message.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the ID of the message is different from 0. &lt;see langword=&quot;false&quot; /&gt; if the ID of the message is 0.">
        <see langword="true" /> si l'ID du message est différente de 0. <see langword="false" /> si l'ID du message est 0.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.op_Equality(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.DataflowMessageHeader)">
      <summary vsli:raw="Checks two  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instances for equality by ID.">Contrôle deux instances <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> pour l’égalité par ID.</summary>
      <param name="left" vsli:raw="A  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance.">Instance de <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />.</param>
      <param name="right" vsli:raw="A  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance.">Instance de <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the instances are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si les instances sont égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.op_Inequality(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.DataflowMessageHeader)">
      <summary vsli:raw="Checks two  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instances for non-equality by ID.">Contrôle deux instances <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> pour la non égalité par ID.</summary>
      <param name="left" vsli:raw="A  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance.">Instance de <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />.</param>
      <param name="right" vsli:raw="A  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance.">Instance de <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the instances are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si les instances ne sont pas égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowMessageStatus">
      <summary vsli:raw="Represents the status of a &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; when passed between dataflow blocks.">Représente l'état d'un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> lorsqu'il est passé entre les blocs de flux de données.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted">
      <summary vsli:raw="Indicates that the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; accepted the message. Once a target has accepted a message, it is wholly owned by the target.">Indique que le <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> a accepté le message. Une fois qu'une cible a reçu un message, il est totalement possédé par celle-ci.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined">
      <summary vsli:raw="Indicates that the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; declined the message. The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; still owns the message.">Indique que le <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> a refusé le message. <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> possède toujours le message.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently">
      <summary vsli:raw="Indicates that the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; declined the message. The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; still owns the message.  &#xA;  &#xA; Additionally, the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; will decline all future messages sent by the source.">Indique que le <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> a refusé le message. <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> possède toujours le message.  
En outre, <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> refuse tous futurs messages envoyés par la source.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable">
      <summary vsli:raw="Indicates that the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; tried to accept the message from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;, but the message was no longer available.">Indique que le <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> a essayé d'accepter le message d'un <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />, mais que le message n'était plus disponible.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed">
      <summary vsli:raw="Indicates that the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; postponed the message for potential consumption at a later time.  &#xA;  &#xA; The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; still owns the message.">Indique que le <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> a différé le message en vue d'une utilisation potentielle ultérieurement.  
<see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> possède toujours le message.</summary>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions">
      <summary vsli:raw="Provides options used to configure the processing performed by dataflow blocks that process each message through the invocation of a user-provided delegate. These are dataflow blocks such as  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ActionBlock`1&quot; /&gt; and  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformBlock`2&quot; /&gt;.">Fournit les options utilisées pour configurer le traitement effectué par les blocs de flux de données qui traitent chaque message via l'appel d'un délégué fourni par l'utilisateur. Il s’agit de blocs de flux de données tels que <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> et <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions.#ctor">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions&quot; /&gt;.">Initialise un nouveau <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" />.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions.MaxDegreeOfParallelism">
      <summary vsli:raw="Gets the maximum number of messages that may be processed by the block concurrently.">Obtient le nombre maximal de messages reçus qui peuvent être traités par le bloc simultanément.</summary>
      <returns vsli:raw="The maximum number of messages.">Nombre maximal de messages.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions.SingleProducerConstrained">
      <summary vsli:raw="Gets whether code using the dataflow block is constrained to one producer at a time.">Obtient une valeur indiquant si le code utilisant le bloc de flux de données est limité à un producteur à la fois.</summary>
      <returns vsli:raw="Returns  &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">Retourne <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions">
      <summary vsli:raw="Provides options used to configure the processing performed by dataflow blocks that group together multiple messages. These are dataflow blocks such as &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.JoinBlock`2&quot; /&gt; and  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BatchBlock`1&quot; /&gt;.">Fournit les options utilisées pour configurer le traitement effectué par les blocs de flux de données qui regroupent plusieurs messages. Il s’agit de blocs de flux de données tels que <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" /> et <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions.#ctor">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions&quot; /&gt;.">Initialise un nouveau <see cref="T:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions" />.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions.Greedy">
      <summary vsli:raw="Gets or sets the Boolean value to use to determine whether to greedily consume offered messages.">Obtient ou définit la valeur booléenne à utiliser pour déterminer si des messages proposés peuvent être utilisés au maximum.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to greedily consume offered messages; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour une consommation maximale des messages transmis ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions.MaxNumberOfGroups">
      <summary vsli:raw="Gets or sets the maximum number of groups that should be generated by the block.">Obtient ou définit le nombre maximal de groupes qui doivent être générés par le bloc.</summary>
      <returns vsli:raw="The maximum number of groups.">Nombre maximal de groupes.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.IDataflowBlock">
      <summary vsli:raw="Represents a dataflow block.">Représente un bloc de flux de données.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.IDataflowBlock.Complete">
      <summary vsli:raw="Signals to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; that it should not accept nor produce any more messages nor consume any more postponed messages.">Signale à <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> qu'il ne doit plus recevoir ni produire de messages ou utiliser des messages différés.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.IDataflowBlock.Completion">
      <summary vsli:raw="Gets a  &lt;see cref=&quot;T:System.Threading.Tasks.Task&quot; /&gt; that represents the asynchronous operation and completion of the dataflow block.">Obtient une <see cref="T:System.Threading.Tasks.Task" /> qui représente l’opération asynchrone et l’achèvement du bloc de flux de données.</summary>
      <returns vsli:raw="The task.">Tâche.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.IDataflowBlock.Fault(System.Exception)">
      <summary vsli:raw="Causes the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; to complete in a  &lt;see cref=&quot;F:System.Threading.Tasks.TaskStatus.Faulted&quot; /&gt; state.">Provoque l’achèvement du <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> à l’état <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.</summary>
      <param name="exception" vsli:raw="The  &lt;see cref=&quot;T:System.Exception&quot; /&gt; that caused the faulting.">
        <see cref="T:System.Exception" /> ayant provoqué l’erreur.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;exception&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="exception" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.IPropagatorBlock`2">
      <summary vsli:raw="Represents a dataflow block that is both a target for data and a source of data.">Représente un bloc de flux de données qui est une cible pour les données et une source de données.</summary>
      <typeparam name="TInput" vsli:raw="Specifies the type of data accepted by the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IPropagatorBlock`2&quot; /&gt;.">Spécifie le type de données accepté par <see cref="T:System.Threading.Tasks.Dataflow.IPropagatorBlock`2" />.</typeparam>
      <typeparam name="TOutput" vsli:raw="Specifies the type of data supplied by the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IPropagatorBlock`2&quot; /&gt;.">Spécifie le type de données fourni par <see cref="T:System.Threading.Tasks.Dataflow.IPropagatorBlock`2" />le.</typeparam>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1">
      <summary vsli:raw="Represents a dataflow block that supports receiving messages without linking.">Représente un bloc de flux de données qui prend en charge la réception des messages sans liaison.</summary>
      <typeparam name="TOutput" vsli:raw="Specifies the type of data supplied by the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">Spécifie le type des données fourni par le <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1.TryReceive(System.Predicate{`0},`0@)">
      <summary vsli:raw="Attempts to synchronously receive an available output item from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">Tente de recevoir de façon synchrone un élément de sortie disponible de <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="filter" vsli:raw="The predicate value must successfully pass in order for it to be received.  &lt;paramref name=&quot;filter&quot; /&gt; may be &lt;see langword=&quot;null&quot; /&gt;, in which case all items will pass.">Attribut qu'une valeur doit passer avec succès pour sa réception.  <paramref name="filter" /> peut être <see langword="null" />, dans ce cas, tous les éléments aboutissent.</param>
      <param name="item" vsli:raw="The item received from the source.">Élément envoyé à partir de la source.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an item could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si un élément peut être reçu ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1.TryReceiveAll(System.Collections.Generic.IList{`0}@)">
      <summary vsli:raw="Attempts to synchronously receive all available items from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">Tente de recevoir de façon synchrone tous les éléments disponibles de <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="items" vsli:raw="The items received from the source.">Éléments reçus de la source.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more items could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si un ou plusieurs éléments peuvent être reçus ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.ISourceBlock`1">
      <summary vsli:raw="Represents a dataflow block that is a source of data.">Représente un bloc de flux de données qui est une source de données.</summary>
      <typeparam name="TOutput" vsli:raw="Specifies the type of data supplied by the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">Spécifie le type de données fourni par <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />le.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to accept and consume a &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; previously offered by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">Appelé par un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> lié pour recevoir et utiliser un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> précédemment proposé par ce <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message being consumed.">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> du message en cours d'utilisation.</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; consuming the message.">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> absorbant le message.</param>
      <param name="messageConsumed" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully consumed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le message a été consommé avec succès ; sinon <see langword="false" />.</param>
      <returns vsli:raw="The value of the consumed message. This may correspond to a different  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance than was previously reserved and passed as the &lt;paramref name=&quot;messageHeader&quot; /&gt; to &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)&quot; /&gt;. The consuming &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; must use the returned value instead of the value passed as &lt;paramref name=&quot;messageValue&quot; /&gt; through &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)&quot; /&gt;.  &#xA;  &#xA; If the message requested is not available, the return value will be null.">Valeur du message consommé. Cela peut correspondre à une instance de <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> différente de celle qui a été précédemment réservée et transmise comme <paramref name="messageHeader" /> à <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />. Le <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> consommateur doit utiliser la valeur retournée au lieu de la valeur passée comme <paramref name="messageValue" /> via <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />.  
Si le message demandé n’est pas disponible, la valeur de retour est Null.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The messageHeader is not valid.">Le messageHeader n’est pas valide.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The target is &lt;see langword=&quot;null&quot; /&gt;.">La cible est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary vsli:raw="Links the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; to the specified  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;.">Lie le <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> au <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> spécifié.</summary>
      <param name="target" vsli:raw="The  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to which to connect this source.">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> auquel connecter cette source.</param>
      <param name="linkOptions" vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowLinkOptions&quot; /&gt; instance that configures the link.">Instance <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> qui configure le lien.</param>
      <returns vsli:raw="An IDisposable that, upon calling Dispose, will unlink the source from the target.">IDisposable qui, en appelant Dispose, dissocie la source de la cible.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;target&quot; /&gt; is null (Nothing in Visual Basic) or  &lt;paramref name=&quot;linkOptions&quot; /&gt; is null (Nothing in Visual Basic).">
        <paramref name="target" /> est Null (Nothing en Visual Basic) ou <paramref name="linkOptions" /> est Null (Nothing en Visual Basic).</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to release a previously reserved &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">Appelé par un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> lié pour libérer un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> précédemment réservé par ce <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the reserved message being released.">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> du message réservé en cours de libération.</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; releasing the message it previously reserved.">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> libérant le message précédemment réservé.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" /> n'est pas valide.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; did not have the message reserved.">La <paramref name="target" /> ne contient pas le message réservé.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to reserve a previously offered &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">Appelé par un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> lié pour réserver un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> précédemment proposé par ce <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message being reserved.">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> du message en cours de réservation.</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; reserving the message.">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> réservant le message.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully reserved; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le message a été réservé avec succès ; sinon <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" /> n'est pas valide.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.ITargetBlock`1">
      <summary vsli:raw="Represents a dataflow block that is a target for data.">Représente un bloc de flux de données qui est une cible pour les données.</summary>
      <typeparam name="TInput" vsli:raw="Specifies the type of data accepted by the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;.">Spécifie le type des données accepté par le <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary vsli:raw="Offers a message to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;, giving the target the opportunity to consume or postpone the message.">Offre un message au <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, donnant à la cible la possibilité d'utiliser ou de différer le message.</summary>
      <param name="messageHeader" vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance that represents the header of the message being offered.">Instance <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> qui représente l'en-tête du message qui est proposé.</param>
      <param name="messageValue" vsli:raw="The value of the message being offered.">Valeur du message proposé.</param>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; offering the message. This may be null.">
        <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> qui transmet le message. Il peut s'agir d'une valeur null.</param>
      <param name="consumeToAccept" vsli:raw="Set to &lt;see langword=&quot;true&quot; /&gt; to instruct the target to call &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)&quot; /&gt; synchronously during the call to &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)&quot; /&gt;, prior to returning &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted&quot; /&gt;, in order to consume the message.">Définit sur <see langword="true" /> pour indiquer à la cible d'appeler <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> de façon synchrone pendant l'appel à <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />, avant de renvoyer <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> pour utiliser le message.</param>
      <returns vsli:raw="The status of the offered message. If the message was accepted by the target, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted&quot; /&gt; is returned, and the source should no longer use the offered message, because it is now owned by the target. If the message was postponed by the target, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed&quot; /&gt; is returned as a notification that the target may later attempt to consume or reserve the message; in the meantime, the source still owns the message and may offer it to other blocks.  &#xA;  &#xA; If the target would have otherwise postponed message, but source was &lt;see langword=&quot;null&quot; /&gt;, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined&quot; /&gt; is instead returned.  &#xA;  &#xA; If the target tried to accept the message but missed it due to the source delivering the message to another target or simply discarding it, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable&quot; /&gt; is returned.  &#xA;  &#xA; If the target chose not to accept the message, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined&quot; /&gt; is returned. If the target chose not to accept the message and will never accept another message from this source, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently&quot; /&gt; is returned.">État du message proposé. Si le message a été accepté par la cible, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> est retourné, et la source ne doit plus utiliser le message envoyé, car elle est désormais la propriété de la cible. Si le message a été différé par la cible, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> est retournée comme notification que la cible peut ensuite essayer d'utiliser ou de réserver un message ; parallèlement, la source possède le message et peut toujours le proposer à d'autres blocs.  
Si la cible avait autrement différé le message alors que la source avait la valeur <see langword="null" />, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> aurait été retourné à la place.  
Si la cible a tenté de recevoir le message mais a échoué en raison de la source fournissant un message à une autre cible ou en l'ignorant simplement, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" /> est retourné.  
Si la cible a choisi de ne pas recevoir le message, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> est retourné. Si la cible a choisi de ne pas recevoir le message et ne recevra jamais un autre message de cette source, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" /> est retourné.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The  &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.  &#xA;  &#xA; -or- &lt;paramref name=&quot;consumeToAccept&quot; /&gt; may only be true if provided with a non-null &lt;paramref name=&quot;source&quot; /&gt;.">
        <paramref name="messageHeader" /> n’est pas valide.  
ou <paramref name="consumeToAccept" /> peut avoir la valeur true uniquement s’il est fourni avec une <paramref name="source" /> non Null.</exception>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.JoinBlock`2">
      <summary vsli:raw="Provides a dataflow block that joins across multiple dataflow sources, not necessarily of the same type, waiting for one item to arrive for each type before they're all released together as a tuple consisting of one item per type.">Fournit un bloc de flux de données qui se connecte à plusieurs sources de flux de données, pas nécessairement du même type, et attend l’arrivée d’un élément pour chaque type avant qu’ils ne soient libérés tous ensemble sous forme de tuple composé d’un élément par type.</summary>
      <typeparam name="T1" vsli:raw="Specifies the type of data accepted by the block's first target.">Spécifie le type de données accepté par la première cible du bloc.</typeparam>
      <typeparam name="T2" vsli:raw="Specifies the type of data accepted by the block's second target.">Spécifie le type de données accepté par la deuxième cible du bloc.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.#ctor">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.JoinBlock`2&quot; /&gt;.">Initialise un nouveau <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.#ctor(System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.JoinBlock`2&quot; /&gt;.">Initialise un nouveau <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" />.</summary>
      <param name="dataflowBlockOptions" vsli:raw="The options with which to configure this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.JoinBlock`2&quot; /&gt;.">Options permettant de configurer ce <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dataflowBlockOptions" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.Complete">
      <summary vsli:raw="Signals to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; that it should not accept nor produce any more messages nor consume any more postponed messages.">Signale à <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> qu'il ne doit plus recevoir ni produire de messages ou utiliser des messages différés.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.Completion">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Threading.Tasks.Task&quot; /&gt; that represents the asynchronous operation and completion of the dataflow block.">Obtient une <see cref="T:System.Threading.Tasks.Task" /> qui représente l'opération asynchrone et l'achèvement du bloc de flux de données.</summary>
      <returns vsli:raw="The task.">Tâche.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1}},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary vsli:raw="Links the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; to the specified  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; .">Lie le <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> au <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> spécifié.</summary>
      <param name="target" vsli:raw="Links the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; to the specified  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; .">Lie le <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> au <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> spécifié.</param>
      <param name="linkOptions" vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowLinkOptions&quot; /&gt; instance that configures the link.">Instance <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> qui configure le lien.</param>
      <returns vsli:raw="An IDisposable that, upon calling Dispose, will unlink the source from the target.">IDisposable qui, en appelant Dispose, dissocie la source de la cible.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; (Nothing in Visual Basic) or  &lt;paramref name=&quot;linkOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; (Nothing in Visual Basic).">
        <paramref name="target" /> est Null (Nothing en Visual Basic) ou <paramref name="linkOptions" /> est Null (Nothing en Visual Basic).</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.OutputCount">
      <summary vsli:raw="Gets the number of output items available to be received from this block.">Obtient le nombre d'éléments de sortie disponibles en provenance de ce bloc.</summary>
      <returns vsli:raw="The number of output items.">Nombre d'éléments de sortie.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary vsli:raw="Causes the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; to complete in a &lt;see cref=&quot;F:System.Threading.Tasks.TaskStatus.Faulted&quot; /&gt; state.">Provoque l'achèvement du <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> à l'état <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.</summary>
      <param name="exception" vsli:raw="The  &lt;see cref=&quot;T:System.Exception&quot; /&gt; that caused the faulting.">
        <see cref="T:System.Exception" /> ayant provoqué l’erreur.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;exception&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="exception" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2}}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1}},System.Boolean@)">
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message that is to be consumed." />
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; for which the message is to be consumed." />
      <param name="messageConsumed" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully consumed. &lt;see langword=&quot;false&quot; /&gt; otherwise." />
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2}}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1}})">
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the reserved message." />
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; that currently holds the reservation." />
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2}}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1}})">
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message that is to be reserved." />
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; for which the message is to be reserved." />
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.Target1">
      <summary vsli:raw="Gets a target that may be used to offer messages of the first type.">Obtient une cible qui peut être utilisée pour offrir des messages du premier type.</summary>
      <returns vsli:raw="The target.">Cible.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.Target2">
      <summary vsli:raw="Gets a target that may be used to offer messages of the second type.">Obtient une cible qui peut être utilisée pour offrir des messages du deuxième type.</summary>
      <returns vsli:raw="The target.">Cible.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.ToString">
      <summary vsli:raw="Returns a string that represents the formatted name of this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">Retourne une chaîne qui représente le nom mis en forme de cette instance de <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</summary>
      <returns vsli:raw="A string that represents the formatted name of this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">Chaîne qui représente le nom mis en forme de cette instance <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.TryReceive(System.Predicate{System.Tuple{`0,`1}},System.Tuple{`0,`1}@)">
      <summary vsli:raw="Attempts to synchronously receive an available output item from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">Tente de recevoir de façon synchrone un élément de sortie disponible de <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="filter" vsli:raw="The predicate value must successfully pass in order for it to be received.  &lt;paramref name=&quot;filter&quot; /&gt; may be &lt;see langword=&quot;null&quot; /&gt;, in which case all items will pass.">Attribut qu'une valeur doit passer avec succès pour sa réception.  <paramref name="filter" /> peut être <see langword="null" />, dans ce cas, tous les éléments aboutissent.</param>
      <param name="item" vsli:raw="The item received from the source.">Élément envoyé à partir de la source.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an item could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si un élément peut être reçu ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{`0,`1}}@)">
      <summary vsli:raw="Attempts to synchronously receive all available items from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">Tente de recevoir de façon synchrone tous les éléments disponibles de <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="items" vsli:raw="The items received from the source.">Éléments reçus de la source.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more items could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si un ou plusieurs éléments peuvent être reçus ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.JoinBlock`3">
      <summary vsli:raw="Provides a dataflow block that joins across multiple dataflow sources, which are not necessarily of the same type, waiting for one item to arrive for each type before they're all released together as a tuple that contains one item per type.">Fournit un bloc de flux de données qui se connecte à plusieurs sources de flux de données, qui ne sont pas nécessairement du même type, et attend l’arrivée d’un élément pour chaque type avant qu’ils ne soient libérés tous ensemble sous forme de tuple contenant un élément par type.</summary>
      <typeparam name="T1" vsli:raw="Specifies the type of data accepted by the block's first target.">Spécifie le type de données accepté par la première cible du bloc.</typeparam>
      <typeparam name="T2" vsli:raw="Specifies the type of data accepted by the block's second target.">Spécifie le type de données accepté par la deuxième cible du bloc.</typeparam>
      <typeparam name="T3" vsli:raw="Specifies the type of data accepted by the block's third target.">Spécifie le type de données accepté par la troisième cible du bloc.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.#ctor">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.JoinBlock`3&quot; /&gt;.">Initialise un nouveau <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`3" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.#ctor(System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.JoinBlock`3&quot; /&gt;.">Initialise un nouveau <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`3" />.</summary>
      <param name="dataflowBlockOptions" vsli:raw="The options with which to configure this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.JoinBlock`2&quot; /&gt;.">Options permettant de configurer ce <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dataflowBlockOptions" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.Complete">
      <summary vsli:raw="Signals to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; that it should not accept nor produce any more messages nor consume any more postponed messages.">Signale à <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> qu'il ne doit plus recevoir ni produire de messages ou utiliser des messages différés.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.Completion">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Threading.Tasks.Task&quot; /&gt; that represents the asynchronous operation and completion of the dataflow block.">Obtient une <see cref="T:System.Threading.Tasks.Task" /> qui représente l'opération asynchrone et l'achèvement du bloc de flux de données.</summary>
      <returns vsli:raw="The task.">Tâche.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1,`2}},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary vsli:raw="Links the   source block to the specified target block.">Lie le bloc source au bloc cible spécifié.</summary>
      <param name="target" vsli:raw="The target block to which to connect this source.">Bloc cible auquel connecter cette source.</param>
      <param name="linkOptions" vsli:raw="An object that configures the link.">Objet qui configure le lien.</param>
      <returns vsli:raw="A disposable object that unlinks the source from the target when its &lt;see cref=&quot;M:System.IDisposable.Dispose&quot; /&gt; method is called.">Objet supprimable qui annule le lien entre la source et la cible quand sa méthode <see cref="M:System.IDisposable.Dispose" /> est appelée.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;linkOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" /> a la valeur <see langword="null" />.  

ou - 
<paramref name="linkOptions" /> est <see langword="null" />.</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.OutputCount">
      <summary vsli:raw="Gets the number of output items available to be received from this block.">Obtient le nombre d'éléments de sortie disponibles en provenance de ce bloc.</summary>
      <returns vsli:raw="The number of output items.">Nombre d'éléments de sortie.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary vsli:raw="Causes the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; to complete in a  &lt;see cref=&quot;F:System.Threading.Tasks.TaskStatus.Faulted&quot; /&gt; state.">Provoque l’achèvement du <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> à l’état <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.</summary>
      <param name="exception" vsli:raw="The  &lt;see cref=&quot;T:System.Exception&quot; /&gt; that caused the faulting.">
        <see cref="T:System.Exception" /> ayant provoqué l’erreur.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;exception&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="exception" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2@T3}}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1,`2}},System.Boolean@)">
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message that is to be consumed." />
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; for which the message is to be consumed." />
      <param name="messageConsumed" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully consumed. &lt;see langword=&quot;false&quot; /&gt; otherwise." />
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2@T3}}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1,`2}})">
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the reserved message." />
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; that currently holds the reservation." />
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2@T3}}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1,`2}})">
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message that is to be reserved." />
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; for which the message is to be reserved." />
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.Target1">
      <summary vsli:raw="Gets a target that may be used to offer messages of the first type.">Obtient une cible qui peut être utilisée pour offrir des messages du premier type.</summary>
      <returns vsli:raw="The target.">Cible.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.Target2">
      <summary vsli:raw="Gets a target that may be used to offer messages of the second type.">Obtient une cible qui peut être utilisée pour offrir des messages du deuxième type.</summary>
      <returns vsli:raw="The target.">Cible.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.Target3">
      <summary vsli:raw="Gets a target that may be used to offer messages of the third type.">Obtient une cible qui peut être utilisée pour offrir des messages du troisième type.</summary>
      <returns vsli:raw="The target.">Cible.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.ToString">
      <summary vsli:raw="Returns a string that represents the formatted name of this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">Retourne une chaîne qui représente le nom mis en forme de cette instance de <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</summary>
      <returns vsli:raw="A string that represents the formatted name of this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">Chaîne qui représente le nom mis en forme de cette instance <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.TryReceive(System.Predicate{System.Tuple{`0,`1,`2}},System.Tuple{`0,`1,`2}@)">
      <summary vsli:raw="Attempts to synchronously receive an available output item from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">Tente de recevoir de façon synchrone un élément de sortie disponible de <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="filter" vsli:raw="The predicate value must successfully pass in order for it to be received.  &lt;paramref name=&quot;filter&quot; /&gt; may be &lt;see langword=&quot;null&quot; /&gt;, in which case all items will pass.">Attribut qu'une valeur doit passer avec succès pour sa réception.  <paramref name="filter" /> peut être <see langword="null" />, dans ce cas, tous les éléments aboutissent.</param>
      <param name="item" vsli:raw="The item received from the source.">Élément envoyé à partir de la source.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an item could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si un élément peut être reçu ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{`0,`1,`2}}@)">
      <summary vsli:raw="Attempts to synchronously receive all available items from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">Tente de recevoir de façon synchrone tous les éléments disponibles de <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="items" vsli:raw="The items received from the source.">Éléments reçus de la source.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more items could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si un ou plusieurs éléments peuvent être reçus ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.TransformBlock`2">
      <summary vsli:raw="Provides a dataflow block that invokes a provided &lt;see cref=&quot;T:System.Func`2&quot; /&gt; delegate for every data element received.">Fournit un bloc de flux de données qui appelle un délégué <see cref="T:System.Func`2" /> fourni pour chaque élément de données reçu.</summary>
      <typeparam name="TInput" vsli:raw="Specifies the type of data received and operated on by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformBlock`2&quot; /&gt;.">Spécifie le type de données reçu et traité par ce <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" />.</typeparam>
      <typeparam name="TOutput" vsli:raw="Specifies the type of data output by this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformBlock`2&quot; /&gt;.">Spécifie le type de sortie de données <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" />de ce.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Func{`0,`1})">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformBlock`2&quot; /&gt; with the specified  &lt;see cref=&quot;T:System.Func`2&quot; /&gt;.">Initialise un nouveau <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> avec le <see cref="T:System.Func`2" /> spécifié.</summary>
      <param name="transform" vsli:raw="The function to invoke with each data element received.">Fonction à appeler à chaque élément de données reçu.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;transform&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="transform" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Func{`0,`1},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformBlock`2&quot; /&gt; with the specified  &lt;see cref=&quot;T:System.Func`2&quot; /&gt; and &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions&quot; /&gt;.">Initialise un nouveau <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> avec les <see cref="T:System.Func`2" /> et <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" /> spécifiés.</summary>
      <param name="transform" vsli:raw="The function to invoke with each data element received.">Fonction à appeler à chaque élément de données reçu.</param>
      <param name="dataflowBlockOptions" vsli:raw="The options with which to configure this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformBlock`2&quot; /&gt;.">Options avec lesquelles configurer ce <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;transform&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="transform" /> a la valeur <see langword="null" />.  

ou - 
<paramref name="dataflowBlockOptions" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{`1}})">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformBlock`2&quot; /&gt; with the specified &lt;see cref=&quot;T:System.Func`2&quot; /&gt;.">Initialise un nouveau <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> avec le <see cref="T:System.Func`2" /> spécifié.</summary>
      <param name="transform" vsli:raw="The function to invoke with each data element received.">Fonction à appeler à chaque élément de données reçu.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;transform&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="transform" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{`1}},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformBlock`2&quot; /&gt; with the specified  &lt;see cref=&quot;T:System.Func`2&quot; /&gt; and &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions&quot; /&gt;.">Initialise un nouveau <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> avec les <see cref="T:System.Func`2" /> et <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" /> spécifiés.</summary>
      <param name="transform" vsli:raw="The function to invoke with each data element received.">Fonction à appeler à chaque élément de données reçu.</param>
      <param name="dataflowBlockOptions" vsli:raw="The options with which to configure this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformBlock`2&quot; /&gt;.">Options avec lesquelles configurer ce <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;transform&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="transform" /> a la valeur <see langword="null" />.  
ou 
<paramref name="dataflowBlockOptions" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.Complete">
      <summary vsli:raw="Signals to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; that it should not accept nor produce any more messages nor consume any more postponed messages.">Signale à <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> qu'il ne doit plus recevoir ni produire de messages ou utiliser des messages différés.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformBlock`2.Completion">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Threading.Tasks.Task&quot; /&gt; that represents the asynchronous operation and completion of the dataflow block.">Obtient une <see cref="T:System.Threading.Tasks.Task" /> qui représente l'opération asynchrone et l'achèvement du bloc de flux de données.</summary>
      <returns vsli:raw="The task.">Tâche.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformBlock`2.InputCount">
      <summary vsli:raw="Gets the number of input items waiting to be processed by this block.">Obtient le nombre d'éléments d'entrée en attente de traitement par ce bloc.</summary>
      <returns vsli:raw="The number of input items.">Nombre d'éléments d'entrée.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary vsli:raw="Links the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; to the specified  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; .">Lie le <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> au <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> spécifié.</summary>
      <param name="target" vsli:raw="The  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to which to connect this source.">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> auquel connecter cette source.</param>
      <param name="linkOptions" vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowLinkOptions&quot; /&gt; instance that configures the link.">Instance <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> qui configure le lien.</param>
      <returns vsli:raw="An IDisposable that, upon calling Dispose, will unlink the source from the target.">IDisposable qui, en appelant Dispose, dissocie la source de la cible.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;target&quot; /&gt; is null (Nothing in Visual Basic) or  &lt;paramref name=&quot;linkOptions&quot; /&gt; is null (Nothing in Visual Basic).">
        <paramref name="target" /> est Null (Nothing en Visual Basic) ou <paramref name="linkOptions" /> est Null (Nothing en Visual Basic).</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformBlock`2.OutputCount">
      <summary vsli:raw="Gets the number of output items available to be received from this block.">Obtient le nombre d'éléments de sortie disponibles en provenance de ce bloc.</summary>
      <returns vsli:raw="The number of output items.">Nombre d'éléments de sortie.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary vsli:raw="Causes the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; to complete in a  &lt;see cref=&quot;F:System.Threading.Tasks.TaskStatus.Faulted&quot; /&gt; state.">Provoque l’achèvement du <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> à l’état <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.</summary>
      <param name="exception" vsli:raw="The &lt;see cref=&quot;T:System.Exception&quot; /&gt; that caused the faulting.">
        <see cref="T:System.Exception" /> ayant provoqué l'erreur.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;exception&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="exception" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Boolean@)">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to accept and consume a &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; previously offered by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">Appelé par un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> lié pour recevoir et utiliser un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> précédemment proposé par ce <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message being consumed.">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> du message en cours d'utilisation.</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; consuming the message.">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> absorbant le message.</param>
      <param name="messageConsumed" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully consumed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le message a été consommé avec succès ; sinon <see langword="false" />.</param>
      <returns vsli:raw="The value of the consumed message. This may correspond to a different &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance than was previously reserved and passed as the &lt;paramref name=&quot;messageHeader&quot; /&gt; to &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)&quot; /&gt;. The consuming &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; must use the returned value instead of the value passed as &lt;paramref name=&quot;messageValue&quot; /&gt; through &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)&quot; /&gt;.  &#xA;  &#xA; If the message requested is not available, the return value will be &lt;see langword=&quot;null&quot; /&gt;.">Valeur du message consommé. Cela peut correspondre à une autre instance <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> qui a été précédemment réservée et transmise comme <paramref name="messageHeader" /> à <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />. Le <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> consommateur doit utiliser la valeur retournée au lieu de la valeur passée comme <paramref name="messageValue" /> via <see cref="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />.  
Si le message demandé n'est pas disponible, la valeur de retour est <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" /> n'est pas valide.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to release a previously reserved &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; by this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">Appelé par un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> lié pour libérer un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> précédemment réservé par ce <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the reserved message being released.">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> du message réservé en cours de libération.</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; releasing the message it previously reserved.">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> libérant le message précédemment réservé.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" /> n'est pas valide.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; did not have the message reserved.">La <paramref name="target" /> ne contient pas le message réservé.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to reserve a previously offered &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; by this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">Appelé par un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> lié pour réserver un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> précédemment proposé par ce <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message being reserved.">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> du message en cours de réservation.</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; reserving the message.">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> réservant le message.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully reserved; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le message a été réservé avec succès ; sinon <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" /> n'est pas valide.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary vsli:raw="Offers a message to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;, giving the target the opportunity to consume or postpone the message.">Offre un message au <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, donnant à la cible la possibilité d'utiliser ou de différer le message.</summary>
      <param name="messageHeader" vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance that represents the header of the message being offered.">Instance <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> qui représente l'en-tête du message qui est proposé.</param>
      <param name="messageValue" vsli:raw="The value of the message being offered.">Valeur du message proposé.</param>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; offering the message. This may be &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> qui transmet le message. Celui-ci peut être <see langword="null" />.</param>
      <param name="consumeToAccept" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the target must call &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)&quot; /&gt; synchronously during the call to &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)&quot; /&gt;, prior to returning &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted&quot; /&gt;, in order to consume the message.">
        <see langword="true" /> si la cible doit appeler <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> de façon synchrone pendant l'appel à <see cref="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />, avant de renvoyer <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> pour utiliser le message.</param>
      <returns vsli:raw="The status of the offered message. If the message was accepted by the target, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted&quot; /&gt; is returned, and the source should no longer use the offered message, because it is now owned by the target. If the message was postponed by the target, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed&quot; /&gt; is returned as a notification that the target may later attempt to consume or reserve the message; in the meantime, the source still owns the message and may offer it to other blocks.  &#xA;  &#xA; If the target would have otherwise postponed but source was &lt;see langword=&quot;null&quot; /&gt;, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined&quot; /&gt; is instead returned.  &#xA;  &#xA; If the target tried to accept the message but missed it due to the source delivering the message to another target or simply discarding it, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable&quot; /&gt; is returned.  &#xA;  &#xA; If the target chose not to accept the message, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined&quot; /&gt; is returned. If the target chose not to accept the message and will never accept another message from this source, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently&quot; /&gt; is returned.">État du message proposé. Si le message a été accepté par la cible, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> est retourné, et la source ne doit plus utiliser le message envoyé, car elle est désormais la propriété de la cible. Si le message a été différé par la cible, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> est retournée comme notification que la cible peut ensuite essayer d'utiliser ou de réserver un message ; parallèlement, la source possède le message et peut toujours le proposer à d'autres blocs.  
Si la cible avait par contre différé mais que la source avait la valeur <see langword="null" />, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> est retourné à la place.  
Si la cible a tenté de recevoir le message mais a échoué en raison de la source fournissant un message à une autre cible ou en l'ignorant simplement, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" /> est retourné.  
Si la cible a choisi de ne pas recevoir le message, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> est retourné. Si la cible a choisi de ne pas recevoir le message et ne recevra jamais un autre message de cette source, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" /> est retourné.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.  &#xA;  &#xA; -or- &lt;paramref name=&quot;consumeToAccept&quot; /&gt; may only be true if provided with a non-null &lt;paramref name=&quot;source&quot; /&gt;.">
        <paramref name="messageHeader" /> n'est pas valide.  
ou <paramref name="consumeToAccept" /> peut avoir la valeur true uniquement s’il est fourni avec une <paramref name="source" /> non Null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.ToString">
      <summary vsli:raw="Returns a string that represents the formatted name of this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">Retourne une chaîne qui représente le nom mis en forme de cette instance de <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</summary>
      <returns vsli:raw="A string that represents the formatted name of this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">Chaîne qui représente le nom mis en forme de cette instance de <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.TryReceive(System.Predicate{`1},`1@)">
      <summary vsli:raw="Attempts to synchronously receive an available output item from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">Tente de recevoir de façon synchrone un élément de sortie disponible de <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="filter" vsli:raw="The predicate value must successfully pass in order for it to be received.  &lt;paramref name=&quot;filter&quot; /&gt; may be &lt;see langword=&quot;null&quot; /&gt;, in which case all items will pass.">Attribut qu'une valeur doit passer avec succès pour sa réception.  <paramref name="filter" /> peut être <see langword="null" />, dans ce cas, tous les éléments aboutissent.</param>
      <param name="item" vsli:raw="The item received from the source.">Élément envoyé à partir de la source.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an item could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si un élément peut être reçu ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.TryReceiveAll(System.Collections.Generic.IList{`1}@)">
      <summary vsli:raw="Attempts to synchronously receive all available items from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">Tente de recevoir de façon synchrone tous les éléments disponibles de <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="items" vsli:raw="The items received from the source.">Éléments reçus de la source.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more items could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si un ou plusieurs éléments peuvent être reçus ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2">
      <summary vsli:raw="Provides a dataflow block that invokes a provided &lt;see cref=&quot;T:System.Func`2&quot; /&gt; delegate for every data element received.">Fournit un bloc de flux de données qui appelle un délégué <see cref="T:System.Func`2" /> fourni pour chaque élément de données reçu.</summary>
      <typeparam name="TInput" vsli:raw="Specifies the type of data received and operated on by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformManyBlock`2&quot; /&gt;.">Spécifie le type de données reçu et traité par ce <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</typeparam>
      <typeparam name="TOutput" vsli:raw="Specifies the type of data output by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformManyBlock`2&quot; /&gt;.">Spécifie le type de données généré par le <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Collections.Generic.IEnumerable{`1}})">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformManyBlock`2&quot; /&gt; with the specified function.">Initialise une nouvelle <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> avec la fonction spécifiée.</summary>
      <param name="transform" vsli:raw="The function to invoke with each data element received. All of the data from the returned &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; will be made available as output from this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformManyBlock`2&quot; /&gt;.">Fonction à appeler à chaque élément de données reçu. Toutes les données retournées de <see cref="T:System.Collections.Generic.IEnumerable`1" /> sont rendues disponibles en tant que sortie de ce <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;transform&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="transform" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Collections.Generic.IEnumerable{`1}},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformManyBlock`2&quot; /&gt; with the specified function and &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions&quot; /&gt;.">Initialise un nouveau <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> avec la fonction et <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" /> spécifiés.</summary>
      <param name="transform" vsli:raw="The function to invoke with each data element received. All of the data from the returned in the &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; will be made available as output from this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformManyBlock`2&quot; /&gt;.">Fonction à appeler à chaque élément de données reçu. Toutes les données retournées de l’élément de manière asynchrone dans <see cref="T:System.Collections.Generic.IEnumerable`1" /> sont rendues disponibles en tant que sortie de ce <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</param>
      <param name="dataflowBlockOptions" vsli:raw="The options with which to configure this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformManyBlock`2&quot; /&gt;.">Options permettant de configurer ce <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;transform&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="transform" /> a la valeur <see langword="null" />.  

ou - 
<paramref name="dataflowBlockOptions" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`1}}})">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformManyBlock`2&quot; /&gt; with the specified function.">Initialise une nouvelle <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> avec la fonction spécifiée.</summary>
      <param name="transform" vsli:raw="The function to invoke with each data element received. All of the data asynchronously returned in the &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; will be made available as output from this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformManyBlock`2&quot; /&gt;.">Fonction à appeler à chaque élément de données reçu. Toutes les données retournées de manière asynchrone dans <see cref="T:System.Collections.Generic.IEnumerable`1" /> sont rendues disponibles en tant que sortie de ce <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;transform&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="transform" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`1}}},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformManyBlock`2&quot; /&gt; with the specified function and &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions&quot; /&gt;.">Initialise un nouveau <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> avec la fonction et <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" /> spécifiés.</summary>
      <param name="transform" vsli:raw="The function to invoke with each data element received. All of the data asynchronously returned in the &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; will be made available as output from this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformManyBlock`2&quot; /&gt;.">Fonction à appeler à chaque élément de données reçu. Toutes les données retournées de manière asynchrone dans <see cref="T:System.Collections.Generic.IEnumerable`1" /> sont rendues disponibles en tant que sortie de ce <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</param>
      <param name="dataflowBlockOptions" vsli:raw="The options with which to configure this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformManyBlock`2&quot; /&gt;.">Options permettant de configurer ce <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;transform&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="transform" /> a la valeur <see langword="null" />.  

ou - 
<paramref name="dataflowBlockOptions" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.Complete">
      <summary vsli:raw="Signals to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; that it should not accept nor produce any more messages nor consume any more postponed messages.">Signale à <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> qu'il ne doit plus recevoir ni produire de messages ou utiliser des messages différés.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.Completion">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Threading.Tasks.Task&quot; /&gt; that represents the asynchronous operation and completion of the dataflow block.">Obtient une <see cref="T:System.Threading.Tasks.Task" /> qui représente l'opération asynchrone et l'achèvement du bloc de flux de données.</summary>
      <returns vsli:raw="The task.">Tâche.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.InputCount">
      <summary vsli:raw="Gets the number of input items waiting to be processed by this block.">Obtient le nombre d'éléments d'entrée en attente de traitement par ce bloc.</summary>
      <returns vsli:raw="The number of input items.">Nombre d'éléments d'entrée.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary vsli:raw="Links the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; to the specified  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; .">Lie le <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> au <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> spécifié.</summary>
      <param name="target" vsli:raw="The  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to which to connect this source.">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> auquel connecter cette source.</param>
      <param name="linkOptions" vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowLinkOptions&quot; /&gt; instance that configures the link.">Instance <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> qui configure le lien.</param>
      <returns vsli:raw="An IDisposable that, upon calling Dispose, will unlink the source from the target.">IDisposable qui, en appelant Dispose, dissocie la source de la cible.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;target&quot; /&gt; is null (Nothing in Visual Basic) or  &lt;paramref name=&quot;linkOptions&quot; /&gt; is null (Nothing in Visual Basic).">
        <paramref name="target" /> est Null (Nothing en Visual Basic) ou <paramref name="linkOptions" /> est Null (Nothing en Visual Basic).</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.OutputCount">
      <summary vsli:raw="Gets the number of output items available to be received from this block.">Obtient le nombre d'éléments de sortie disponibles en provenance de ce bloc.</summary>
      <returns vsli:raw="The number of output items.">Nombre d'éléments de sortie.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary vsli:raw="Causes the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; to complete in a  &lt;see cref=&quot;F:System.Threading.Tasks.TaskStatus.Faulted&quot; /&gt; state.">Provoque l’achèvement du <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> à l’état <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.</summary>
      <param name="exception" vsli:raw="The &lt;see cref=&quot;T:System.Exception&quot; /&gt; that caused the faulting.">
        <see cref="T:System.Exception" /> ayant provoqué l'erreur.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;exception&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="exception" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Boolean@)">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to accept and consume a &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; previously offered by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">Appelé par un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> lié pour recevoir et utiliser un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> précédemment proposé par ce <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message being consumed.">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> du message en cours d'utilisation.</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; consuming the message.">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> absorbant le message.</param>
      <param name="messageConsumed" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully consumed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le message a été consommé avec succès ; sinon <see langword="false" />.</param>
      <returns vsli:raw="The value of the consumed message. This may correspond to a different &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance than was previously reserved and passed as the &lt;paramref name=&quot;messageHeader&quot; /&gt; to &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)&quot; /&gt;. The consuming &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; must use the returned value instead of the value passed as &lt;paramref name=&quot;messageValue&quot; /&gt; through OfferMessage &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)&quot; /&gt;  &#xA;  &#xA; If the message requested is not available, the return value will be &lt;see langword=&quot;null&quot; /&gt;.">Valeur du message consommé. Cela peut correspondre à une autre instance <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> qui a été précédemment réservée et transmise comme <paramref name="messageHeader" /> à <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />. Le <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> consommateur doit utiliser la valeur retournée au lieu de la valeur passée comme <paramref name="messageValue" /> via OfferMessage <see cref="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />  
Si le message demandé n'est pas disponible, la valeur de retour est <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" /> n'est pas valide.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to release a previously reserved &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">Appelé par un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> lié pour libérer un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> précédemment réservé par ce <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the reserved message being released.">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> du message réservé en cours de libération.</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; releasing the message it previously reserved.">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> libérant le message précédemment réservé.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" /> n'est pas valide.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; did not have the message reserved.">La <paramref name="target" /> ne contient pas le message réservé.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to reserve a previously offered &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; by this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">Appelé par un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> lié pour réserver un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> précédemment proposé par ce <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message being reserved.">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> du message en cours de réservation.</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; reserving the message.">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> réservant le message.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully reserved; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le message a été réservé avec succès ; sinon <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" /> n'est pas valide.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary vsli:raw="Offers a message to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;, giving the target the opportunity to consume or postpone the message.">Offre un message au <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, donnant à la cible la possibilité d'utiliser ou de différer le message.</summary>
      <param name="messageHeader" vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance that represents the header of the message being offered.">Instance <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> qui représente l'en-tête du message qui est proposé.</param>
      <param name="messageValue" vsli:raw="The value of the message being offered.">Valeur du message proposé.</param>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; offering the message. This may be &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> qui transmet le message. Celui-ci peut être <see langword="null" />.</param>
      <param name="consumeToAccept" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the target must call &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)&quot; /&gt; synchronously during the call to &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;, prior to returning &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted&quot; /&gt;, in order to consume the message.">
        <see langword="true" /> si la cible doit appeler <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> de façon synchrone pendant l'appel à <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, avant de renvoyer <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> pour utiliser le message.</param>
      <returns vsli:raw="The status of the offered message. If the message was accepted by the target, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted&quot; /&gt; is returned, and the source should no longer use the offered message, as it is now owned by the target. If the message was postponed by the target, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed&quot; /&gt; is returned as a notification that the target may later attempt to consume or reserve the message; in the meantime, the source still owns the message and may offer it to other blocks.  &#xA;  &#xA; If the target would have otherwise postponed but source was &lt;see langword=&quot;null&quot; /&gt;, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined&quot; /&gt; is instead returned.  &#xA;  &#xA; If the target tried to accept the message but missed it due to the source delivering the message to another target or simply discarding it, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable&quot; /&gt; is returned.  &#xA;  &#xA; If the target chose not to accept the message, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined&quot; /&gt; is returned. If the target chose not to accept the message and will never accept another message from this source, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently&quot; /&gt; is returned.">État du message proposé. Si le message a été accepté par la cible, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> est retourné, et la source ne doit plus utiliser le message envoyé, car elle est désormais la propriété de la cible. Si le message a été différé par la cible, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> est retournée comme notification que la cible peut ensuite essayer d'utiliser ou de réserver un message ; parallèlement, la source possède le message et peut toujours le proposer à d'autres blocs.  
Si la cible avait par contre différé mais que la source avait la valeur <see langword="null" />, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> est retourné à la place.  
Si la cible a tenté de recevoir le message mais a échoué en raison de la source fournissant un message à une autre cible ou en l'ignorant simplement, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" /> est retourné.  
Si la cible a choisi de ne pas recevoir le message, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> est retourné. Si la cible a choisi de ne pas recevoir le message et ne recevra jamais un autre message de cette source, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" /> est retourné.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;consumeToAccept&quot; /&gt; may only be true if provided with a non-null &lt;paramref name=&quot;source&quot; /&gt;.">
        <paramref name="messageHeader" /> n'est pas valide.  
ou 
 <paramref name="consumeToAccept" /> peut avoir la valeur true uniquement s'il est fourni avec une <paramref name="source" /> différente de null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.ToString">
      <summary vsli:raw="Returns a string that represents the formatted name of this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">Retourne une chaîne qui représente le nom mis en forme de cette instance de <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</summary>
      <returns vsli:raw="A string that represents the formatted name of this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">Chaîne qui représente le nom mis en forme de cette instance de <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.TryReceive(System.Predicate{`1},`1@)">
      <summary vsli:raw="Attempts to synchronously receive an available output item from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">Tente de recevoir de façon synchrone un élément de sortie disponible de <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="filter" vsli:raw="The predicate value must successfully pass in order for it to be received.  &lt;paramref name=&quot;filter&quot; /&gt; may be &lt;see langword=&quot;null&quot; /&gt;, in which case all items will pass.">Attribut qu'une valeur doit passer avec succès pour sa réception.  <paramref name="filter" /> peut être <see langword="null" />, dans ce cas, tous les éléments aboutissent.</param>
      <param name="item" vsli:raw="The item received from the source.">Élément envoyé à partir de la source.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an item could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si un élément peut être reçu ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.TryReceiveAll(System.Collections.Generic.IList{`1}@)">
      <summary vsli:raw="Attempts to synchronously receive all available items from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">Tente de recevoir de façon synchrone tous les éléments disponibles de <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="items" vsli:raw="The items received from the source.">Éléments reçus de la source.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more items could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si un ou plusieurs éléments peuvent être reçus ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1">
      <summary vsli:raw="Provides a buffer for receiving and storing at most one element in a network of dataflow blocks.">Fournit une mémoire tampon pour recevoir et stocker au plus un élément dans un réseau de blocs de flux de données.</summary>
      <typeparam name="T" vsli:raw="Specifies the type of the data buffered by this dataflow block.">Spécifie le type des données mises en mémoire tampon par ce bloc de flux de données.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.#ctor(System.Func{`0,`0})">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1&quot; /&gt;.">Initialise un nouveau <see cref="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1" />.</summary>
      <param name="cloningFunction" vsli:raw="The function to use to clone the data when offered to other blocks.">Fonction à utiliser pour cloner des données après envoi à d'autres blocs.</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.#ctor(System.Func{`0,`0},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1&quot; /&gt; with the specified  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowBlockOptions&quot; /&gt;.">Initialise un nouveau <see cref="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1" /> avec le <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" /> spécifié.</summary>
      <param name="cloningFunction" vsli:raw="The function to use to clone the data when offered to other blocks.">Fonction à utiliser pour cloner des données après envoi à d'autres blocs.</param>
      <param name="dataflowBlockOptions" vsli:raw="The options with which to configure this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1&quot; /&gt;.">Options permettant de configurer ce <see cref="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dataflowBlockOptions" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.Complete">
      <summary vsli:raw="Signals to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; that it should not accept nor produce any more messages nor consume any more postponed messages.">Signale à <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> qu'il ne doit plus recevoir ni produire de messages ou utiliser des messages différés.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.Completion">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Threading.Tasks.Task&quot; /&gt; that represents the asynchronous operation and completion of the dataflow block.">Obtient une <see cref="T:System.Threading.Tasks.Task" /> qui représente l'opération asynchrone et l'achèvement du bloc de flux de données.</summary>
      <returns vsli:raw="The task.">Tâche.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary vsli:raw="Links the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; to the specified  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; .">Lie le <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> au <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> spécifié.</summary>
      <param name="target" vsli:raw="The  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to which to connect this source.">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> auquel connecter cette source.</param>
      <param name="linkOptions" vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowLinkOptions&quot; /&gt; instance that configures the link.">Instance <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> qui configure le lien.</param>
      <returns vsli:raw="An IDisposable that, upon calling Dispose, will unlink the source from the target.">IDisposable qui, en appelant Dispose, dissocie la source de la cible.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;target&quot; /&gt; is null (Nothing in Visual Basic) or  &lt;paramref name=&quot;linkOptions&quot; /&gt; is null (Nothing in Visual Basic).">
        <paramref name="target" /> est Null (Nothing en Visual Basic) ou <paramref name="linkOptions" /> est Null (Nothing en Visual Basic).</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary vsli:raw="Causes the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; to complete in a &lt;see cref=&quot;F:System.Threading.Tasks.TaskStatus.Faulted&quot; /&gt; state.">Provoque l'achèvement du <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> à l'état <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.</summary>
      <param name="exception" vsli:raw="The  &lt;see cref=&quot;T:System.Exception&quot; /&gt; that caused the faulting.">
        <see cref="T:System.Exception" /> ayant provoqué l’erreur.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;exception&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="exception" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#IReceivableSourceBlock{T}#TryReceiveAll(System.Collections.Generic.IList{`0}@)">
      <summary vsli:raw="Attempts to synchronously receive all available items from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">Tente de recevoir de façon synchrone tous les éléments disponibles de <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="items" vsli:raw="The items received from the source.">Éléments reçus de la source.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more items could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si un ou plusieurs éléments peuvent être reçus ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to accept and consume a &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; previously offered by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">Appelé par un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> lié pour recevoir et utiliser un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> précédemment proposé par ce <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message being consumed.">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> du message en cours d'utilisation.</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; consuming the message.">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> absorbant le message.</param>
      <param name="messageConsumed" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully consumed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le message a été consommé avec succès ; sinon <see langword="false" />.</param>
      <returns vsli:raw="The value of the consumed message. This may correspond to a different  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance than was previously reserved and passed as the &lt;paramref name=&quot;messageHeader&quot; /&gt; to &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)&quot; /&gt;. The consuming &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; must use the returned value instead of the value passed as &lt;paramref name=&quot;messageValue&quot; /&gt; through &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)&quot; /&gt;.  &#xA;  &#xA; If the message requested is not available, the return value will be &lt;see langword=&quot;null&quot; /&gt;.">Valeur du message consommé. Cela peut correspondre à une instance de <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> différente de celle qui a été précédemment réservée et transmise comme <paramref name="messageHeader" /> à <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />. Le <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> consommateur doit utiliser la valeur retournée au lieu de la valeur passée comme <paramref name="messageValue" /> via <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />.  
Si le message demandé n'est pas disponible, la valeur de retour est <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" /> n'est pas valide.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to release a previously reserved &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">Appelé par un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> lié pour libérer un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> précédemment réservé par ce <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the reserved message being released.">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> du message réservé en cours de libération.</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; releasing the message it previously reserved.">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> libérant le message précédemment réservé.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" /> n'est pas valide.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; did not have the message reserved.">La <paramref name="target" /> ne contient pas le message réservé.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to reserve a previously offered &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">Appelé par un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> lié pour réserver un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> précédemment proposé par ce <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message being reserved.">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> du message en cours de réservation.</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; reserving the message.">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> réservant le message.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully reserved; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le message a été réservé avec succès ; sinon <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" /> n'est pas valide.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary vsli:raw="Offers a message to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;, giving the target the opportunity to consume or postpone the message.">Offre un message au <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, donnant à la cible la possibilité d'utiliser ou de différer le message.</summary>
      <param name="messageHeader" vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance that represents the header of the message being offered.">Instance <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> qui représente l'en-tête du message qui est proposé.</param>
      <param name="messageValue" vsli:raw="The value of the message being offered.">Valeur du message proposé.</param>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; offering the message. This may be &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> qui transmet le message. Celui-ci peut être <see langword="null" />.</param>
      <param name="consumeToAccept" vsli:raw="Set to &lt;see langword=&quot;true&quot; /&gt; to instruct the target to call &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)&quot; /&gt; synchronously during the call to &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)&quot; /&gt;, prior to returning &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted&quot; /&gt;, in order to consume the message.">Définit sur <see langword="true" /> pour indiquer à la cible d'appeler <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> de façon synchrone pendant l'appel à <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />, avant de renvoyer <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> pour utiliser le message.</param>
      <returns vsli:raw="The status of the offered message. If the message was accepted by the target, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted&quot; /&gt; is returned, and the source should no longer use the offered message, because it is now owned by the target. If the message was postponed by the target, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed&quot; /&gt; is returned as a notification that the target may later attempt to consume or reserve the message; in the meantime, the source still owns the message and may offer it to other blocks.  &#xA;  &#xA; If the target would have otherwise postponed message, but &lt;paramref name=&quot;source&quot; /&gt; was &lt;see langword=&quot;null&quot; /&gt;, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined&quot; /&gt; is instead returned.  &#xA;  &#xA; If the target tried to accept the message but missed it due to the source delivering the message to another target or simply discarding it, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable&quot; /&gt; is returned.  &#xA;  &#xA; If the target chose not to accept the message, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined&quot; /&gt; is returned. If the target chose not to accept the message and will never accept another message from this source, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently&quot; /&gt; is returned.">État du message proposé. Si le message a été accepté par la cible, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> est retourné, et la source ne doit plus utiliser le message envoyé, car elle est désormais la propriété de la cible. Si le message a été différé par la cible, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> est retournée comme notification que la cible peut ensuite essayer d'utiliser ou de réserver un message ; parallèlement, la source possède le message et peut toujours le proposer à d'autres blocs.  
Si la cible avait par contre un message différé mais que la <paramref name="source" /> avait la valeur <see langword="null" />, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> serait retourné à la place.  
Si la cible a tenté de recevoir le message mais a échoué en raison de la source fournissant un message à une autre cible ou en l'ignorant simplement, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" /> est retourné.  
Si la cible a choisi de ne pas recevoir le message, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> est retourné. Si la cible a choisi de ne pas recevoir le message et ne recevra jamais un autre message de cette source, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" /> est retourné.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The  &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.  &#xA;  &#xA; -or- &lt;paramref name=&quot;consumeToAccept&quot; /&gt; may only be true if provided with a non-null &lt;paramref name=&quot;source&quot; /&gt;.">
        <paramref name="messageHeader" /> n’est pas valide.  
ou <paramref name="consumeToAccept" /> peut avoir la valeur true uniquement s’il est fourni avec une <paramref name="source" /> non Null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.ToString">
      <summary vsli:raw="Returns a string that represents the formatted name of this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">Retourne une chaîne qui représente le nom mis en forme de cette instance de <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</summary>
      <returns vsli:raw="A string that represents the formatted name of this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">Chaîne qui représente le nom mis en forme de cette instance de <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.TryReceive(System.Predicate{`0},`0@)">
      <summary vsli:raw="Attempts to synchronously receive an available output item from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">Tente de recevoir de façon synchrone un élément de sortie disponible de <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="filter" vsli:raw="The predicate value must successfully pass in order for it to be received.  &lt;paramref name=&quot;filter&quot; /&gt; may be &lt;see langword=&quot;null&quot; /&gt;, in which case all items will pass.">Attribut qu'une valeur doit passer avec succès pour sa réception.  <paramref name="filter" /> peut être <see langword="null" />, dans ce cas, tous les éléments aboutissent.</param>
      <param name="item" vsli:raw="The item received from the source.">Élément envoyé à partir de la source.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an item could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si un élément peut être reçu ; sinon, <see langword="false" />.</returns>
    </member>
  </members>
</doc>
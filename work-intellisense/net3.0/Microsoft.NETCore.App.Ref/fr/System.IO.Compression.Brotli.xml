<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.IO.Compression.Brotli</name>
  </assembly>
  <members>
    <member name="T:System.IO.Compression.BrotliDecoder" />
    <member name="M:System.IO.Compression.BrotliDecoder.Decompress(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@,System.Int32@)">
      <param name="source" />
      <param name="destination" />
      <param name="bytesConsumed" />
      <param name="bytesWritten" />
    </member>
    <member name="M:System.IO.Compression.BrotliDecoder.Dispose" />
    <member name="M:System.IO.Compression.BrotliDecoder.TryDecompress(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
      <param name="source" />
      <param name="destination" />
      <param name="bytesWritten" />
    </member>
    <member name="T:System.IO.Compression.BrotliEncoder" />
    <member name="M:System.IO.Compression.BrotliEncoder.#ctor(System.Int32,System.Int32)">
      <param name="quality" />
      <param name="window" />
    </member>
    <member name="M:System.IO.Compression.BrotliEncoder.Compress(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@,System.Int32@,System.Boolean)">
      <param name="source" />
      <param name="destination" />
      <param name="bytesConsumed" />
      <param name="bytesWritten" />
      <param name="isFinalBlock" />
    </member>
    <member name="M:System.IO.Compression.BrotliEncoder.Dispose" />
    <member name="M:System.IO.Compression.BrotliEncoder.Flush(System.Span{System.Byte},System.Int32@)">
      <param name="destination" />
      <param name="bytesWritten" />
    </member>
    <member name="M:System.IO.Compression.BrotliEncoder.GetMaxCompressedLength(System.Int32)">
      <param name="inputSize" />
    </member>
    <member name="M:System.IO.Compression.BrotliEncoder.TryCompress(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
      <param name="source" />
      <param name="destination" />
      <param name="bytesWritten" />
    </member>
    <member name="M:System.IO.Compression.BrotliEncoder.TryCompress(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@,System.Int32,System.Int32)">
      <param name="source" />
      <param name="destination" />
      <param name="bytesWritten" />
      <param name="quality" />
      <param name="window" />
    </member>
    <member name="T:System.IO.Compression.BrotliStream">
      <summary>Fournit les méthodes et les propriétés utilisées pour compresser et décompresser des flux à l’aide de la spécification de format de données Brotli.</summary>
    </member>
    <member name="M:System.IO.Compression.BrotliStream.#ctor(System.IO.Stream,System.IO.Compression.CompressionLevel)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.Compression.BrotliStream" /> à l'aide du flux et du niveau de compression spécifiés.</summary>
      <param name="stream">Flux à compresser.</param>
      <param name="compressionLevel">L'une des valeurs d'énumération qui indique s'il faut mettre l'accent sur la rapidité et l'efficacité de compression en compressant le flux de données.</param>
    </member>
    <member name="M:System.IO.Compression.BrotliStream.#ctor(System.IO.Stream,System.IO.Compression.CompressionLevel,System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.Compression.BrotliStream" /> à l'aide du flux et du niveau de compression spécifiés, et permet éventuellement de laisser le flux ouvert.</summary>
      <param name="stream">Flux à compresser.</param>
      <param name="compressionLevel">L'une des valeurs d'énumération qui indique s'il faut mettre l'accent sur la rapidité et l'efficacité de compression en compressant le flux de données.</param>
      <param name="leaveOpen">
        <see langword="true" /> pour maintenir le flux ouvert après avoir supprimé l'objet <see cref="T:System.IO.Compression.BrotliStream" /> ; sinon, <see langword="false" />.</param>
    </member>
    <member name="M:System.IO.Compression.BrotliStream.#ctor(System.IO.Stream,System.IO.Compression.CompressionMode)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.Compression.BrotliStream" /> à l'aide du flux et du mode de compression spécifiés.</summary>
      <param name="stream">Flux à compresser.</param>
      <param name="mode">L'une des valeurs d'énumération qui indique s'il faut compresser ou décompresser le flux.</param>
    </member>
    <member name="M:System.IO.Compression.BrotliStream.#ctor(System.IO.Stream,System.IO.Compression.CompressionMode,System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.Compression.BrotliStream" /> à l'aide du flux et du mode de compression spécifiés, et permet éventuellement de laisser le flux ouvert.</summary>
      <param name="stream">Flux à compresser.</param>
      <param name="mode">L'une des valeurs d'énumération qui indique s'il faut compresser ou décompresser le flux.</param>
      <param name="leaveOpen" />
    </member>
    <member name="P:System.IO.Compression.BrotliStream.BaseStream">
      <summary>Obtient une référence au flux sous-jacent.</summary>
      <returns>Objet de flux qui représente le flux sous-jacent.</returns>
      <exception cref="T:System.ObjectDisposedException">Le flux sous-jacent est fermé.</exception>
    </member>
    <member name="M:System.IO.Compression.BrotliStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Débute une opération de lecture asynchrone. (Utilisez la méthode <see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /> à la place.)</summary>
      <param name="buffer">Mémoire tampon à partir de laquelle les données doivent être lues.</param>
      <param name="offset">Dans <paramref name="array" />, décalage d'octet à partir duquel commencer la lecture des données à partir du flux.</param>
      <param name="count">Nombre maximal d'octets à lire.</param>
      <param name="asyncCallback">Rappel asynchrone optionnel à appeler lorsque la lecture est terminée.</param>
      <param name="asyncState">Objet fourni par l'utilisateur qui distingue cette requête de lecture asynchrone des autres requêtes.</param>
      <returns>Objet représentant la lecture asynchrone qui pourrait toujours être en attente.</returns>
      <exception cref="T:System.IO.IOException">La méthode a essayé de lire de façon asynchrone au delà de la fin du flux de données, ou une erreur disque s'est produite.</exception>
      <exception cref="T:System.ArgumentException">Un ou plusieurs arguments ne sont pas valides.</exception>
      <exception cref="T:System.ObjectDisposedException">Des méthodes ont été appelées après la fermeture du flux.</exception>
      <exception cref="T:System.NotSupportedException">L’implémentation du <see cref="T:System.IO.Compression.BrotliStream" /> en cours ne prend pas en charge l’opération de lecture.</exception>
      <exception cref="T:System.InvalidOperationException">Cet appel ne peut pas être effectué.</exception>
    </member>
    <member name="M:System.IO.Compression.BrotliStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Débute une opération d'écriture asynchrone. (Utilisez la méthode <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /> à la place.)</summary>
      <param name="buffer">Mémoire tampon à partir de laquelle les données doivent être écrites.</param>
      <param name="offset">Dans <paramref name="array" />, décalage d'octet auquel commencer l'écriture des données à partir du flux.</param>
      <param name="count">Nombre maximal d'octets à écrire.</param>
      <param name="asyncCallback">Rappel asynchrone facultatif à appeler lorsque l'opération d'écriture est terminée.</param>
      <param name="asyncState">Objet fourni par l'utilisateur qui distingue cette requête d'écriture asynchrone des autres requêtes.</param>
      <returns>Objet représentant l'écriture asynchrone qui pourrait toujours être en attente.</returns>
      <exception cref="T:System.IO.IOException">La méthode a essayé d'écrire de façon asynchrone au delà de la fin du flux de données, ou une erreur disque s'est produite.</exception>
      <exception cref="T:System.ArgumentException">Un ou plusieurs arguments ne sont pas valides.</exception>
      <exception cref="T:System.ObjectDisposedException">Des méthodes ont été appelées après la fermeture du flux.</exception>
      <exception cref="T:System.NotSupportedException">L’implémentation du <see cref="T:System.IO.Compression.BrotliStream" /> en cours ne prend pas en charge l’opération d’écriture.</exception>
      <exception cref="T:System.InvalidOperationException">L’opération d’écriture ne peut pas être exécutée car le flux est fermé.</exception>
    </member>
    <member name="P:System.IO.Compression.BrotliStream.CanRead">
      <summary>Obtient une valeur indiquant si le flux prend en charge la lecture pendant la décompression d'un fichier.</summary>
      <returns>
        <see langword="true" /> si la valeur de <see cref="T:System.IO.Compression.CompressionMode" /> est <see langword="Decompress," />, que le flux sous-jacent prend en charge la lecture et qu'il n'est pas fermé ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.IO.Compression.BrotliStream.CanSeek">
      <summary>Obtient une valeur indiquant si le flux prend en charge la recherche.</summary>
      <returns>
        <see langword="false" /> dans tous les cas.</returns>
    </member>
    <member name="P:System.IO.Compression.BrotliStream.CanWrite">
      <summary>Obtient une valeur indiquant si le flux prend en charge l'écriture.</summary>
      <returns>
        <see langword="true" /> si la valeur de <see cref="T:System.IO.Compression.CompressionMode" /> est <see langword="Compress" />, que le flux sous-jacent prend en charge l'écriture et qu'il n'est pas fermé ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.IO.Compression.BrotliStream.DisposeAsync">
      <summary>Libère de façon asynchrone les ressources non managées utilisées par <see cref="T:System.IO.Compression.BrotliStream" />.</summary>
      <returns>Tâche qui représente l’opération de suppression asynchrone.</returns>
    </member>
    <member name="M:System.IO.Compression.BrotliStream.EndRead(System.IAsyncResult)">
      <summary>Attend que la requête asynchrone en attente se termine. (Utilisez la méthode <see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /> à la place.)</summary>
      <param name="asyncResult">Référence à la requête asynchrone en attente à terminer.</param>
      <returns>Nombre d'octets lus à partir du flux, entre zéro (0) et le nombre d'octets demandé. <see cref="T:System.IO.Compression.BrotliStream" /> retourne uniquement 0 à la fin du flux ; sinon, il se bloque jusqu'à ce qu'au moins un octet soit disponible.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> ne provenait pas d’une méthode <see cref="M:System.IO.Compression.BrotliStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> sur le flux en cours.</exception>
      <exception cref="T:System.InvalidOperationException">L’opération de fin ne peut pas être exécutée car le flux est fermé.</exception>
    </member>
    <member name="M:System.IO.Compression.BrotliStream.EndWrite(System.IAsyncResult)">
      <summary>Gère la fin d'une opération d'écriture asynchrone. (Utilisez la méthode <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /> à la place.)</summary>
      <param name="asyncResult">Objet qui représente l'appel asynchrone.</param>
      <exception cref="T:System.InvalidOperationException">Le flux sous-jacent est fermé ou <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.Compression.BrotliStream.Flush">
      <summary>L'implémentation actuelle de cette méthode n'a aucune fonctionnalité.</summary>
    </member>
    <member name="M:System.IO.Compression.BrotliStream.FlushAsync(System.Threading.CancellationToken)">
      <summary>Efface de façon asynchrone toutes les mémoires tampons pour ce flux Brotli, provoque l’écriture des données mises en mémoire tampon sur l’appareil sous-jacent et supervise les demandes d’annulation.</summary>
      <param name="cancellationToken">Jeton pour surveiller les requêtes d'annulation. La valeur par défaut est <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Tâche qui représente l’opération de vidage asynchrone.</returns>
    </member>
    <member name="P:System.IO.Compression.BrotliStream.Length">
      <summary>Cette propriété n'est pas prise en charge et lève toujours <see cref="T:System.NotSupportedException" />.</summary>
      <returns>Valeur Long.</returns>
      <exception cref="T:System.NotSupportedException">Cette propriété n’est pas prise en charge sur ce flux.</exception>
    </member>
    <member name="P:System.IO.Compression.BrotliStream.Position">
      <summary>Cette propriété n'est pas prise en charge et lève toujours <see cref="T:System.NotSupportedException" />.</summary>
      <returns>Valeur Long.</returns>
      <exception cref="T:System.NotSupportedException">Cette propriété n’est pas prise en charge sur ce flux.</exception>
    </member>
    <member name="M:System.IO.Compression.BrotliStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>Lit un certain nombre d'octets décompressés dans le tableau d'octets spécifié.</summary>
      <param name="buffer">Tableau utilisé pour décompresser les octets.</param>
      <param name="offset">Dans <paramref name="buffer" />, décalage d'octet auquel les octets lus seront placés.</param>
      <param name="count">Nombre maximal d'octets décompressés à lire.</param>
      <returns>Nombre d'octets qui ont été décompressés dans le tableau d'octets. Si la fin du flux a été atteinte, zéro ou le nombre d'octets lus est retourné.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> est <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">La valeur <see cref="T:System.IO.Compression.CompressionMode" /> était <see langword="Compress" /> lorsque l’objet a été créé, ou il existe déjà une opération asynchrone active sur ce flux.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> ou <paramref name="count" /> est inférieur à zéro.</exception>
      <exception cref="T:System.ArgumentException">La longueur de <paramref name="buffer" /> moins le point de départ de l’index est inférieur à <paramref name="count" />.</exception>
      <exception cref="T:System.IO.InvalidDataException">Le format des données n’est pas valide.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux sous-jacent est Null ou fermé.</exception>
    </member>
    <member name="M:System.IO.Compression.BrotliStream.Read(System.Span{System.Byte})">
      <summary>Lit une séquence d’octets à partir du flux Brotli actuel dans une étendue d’octets et avance la position dans le flux Brotli du nombre d’octets lus.</summary>
      <param name="buffer">Région de la mémoire. Quand cette méthode est retournée, le contenu de cette région est remplacé par les octets lus dans la source actuelle.</param>
      <returns>Nombre total d'octets lus dans la mémoire tampon. Le nombre d’octets peut être inférieur au nombre d’octets alloués dans la mémoire tampon si ce nombre d’octets n’est pas actuellement disponible, ou égal à zéro (0) si la fin du flux a été atteinte.</returns>
    </member>
    <member name="M:System.IO.Compression.BrotliStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>Lit de façon asynchrone une séquence d’octets dans le flux Brotli actuel, les écrit dans un tableau d’octets en commençant au niveau d’un index spécifié, avance la position dans le flux Brotli du nombre d’octets lus et supervise les demandes d’annulation.</summary>
      <param name="buffer">Mémoire tampon où écrire les données.</param>
      <param name="offset">Dans le <paramref name="buffer" />, décalage d’octet auquel commencer l’écriture des données à partir du flux Brotli.</param>
      <param name="count">Nombre maximal d'octets à lire.</param>
      <param name="cancellationToken">Jeton pour surveiller les requêtes d'annulation. La valeur par défaut est <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Tâche qui représente l’opération de lecture asynchrone, qui wrappe le nombre total d’octets lus dans le <paramref name="buffer" />. La valeur de résultat peut être inférieure au nombre d’octets demandés si le nombre d’octets actuellement disponibles est inférieur au nombre demandé, ou égale à 0 (zéro) si la fin du flux Brotli a été atteinte.</returns>
    </member>
    <member name="M:System.IO.Compression.BrotliStream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)">
      <summary>Lit de façon asynchrone une séquence d’octets dans le flux Brotli actuel, les écrit dans une plage de mémoire d’octets, avance la position dans le flux Brotli du nombre d’octets lus et supervise les demandes d’annulation.</summary>
      <param name="buffer">Région de la mémoire dans laquelle les données doivent être écrites.</param>
      <param name="cancellationToken">Jeton pour surveiller les requêtes d'annulation. La valeur par défaut est <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Tâche qui représente l’opération de lecture asynchrone, qui wrappe le nombre total d’octets lus dans la mémoire tampon. La valeur de résultat peut être inférieure au nombre d’octets alloués dans la mémoire tampon si ce nombre d’octets n’est pas actuellement disponible, ou égale à 0 (zéro) si la fin du flux Brotli a été atteinte.</returns>
    </member>
    <member name="M:System.IO.Compression.BrotliStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>Cette propriété n'est pas prise en charge et lève toujours <see cref="T:System.NotSupportedException" />.</summary>
      <param name="offset">Emplacement dans le flux.</param>
      <param name="origin">Une des valeurs de l'objet <see cref="T:System.IO.SeekOrigin" />.</param>
      <returns>Valeur Long.</returns>
      <exception cref="T:System.NotSupportedException">Cette propriété n’est pas prise en charge sur ce flux.</exception>
    </member>
    <member name="M:System.IO.Compression.BrotliStream.SetLength(System.Int64)">
      <summary>Cette propriété n'est pas prise en charge et lève toujours <see cref="T:System.NotSupportedException" />.</summary>
      <param name="value">Longueur du flux.</param>
    </member>
    <member name="M:System.IO.Compression.BrotliStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Écrit les octets compressés dans le flux sous-jacent à partir du tableau d'octets spécifié.</summary>
      <param name="buffer">Mémoire tampon qui contient les données à compresser.</param>
      <param name="offset">Dans <paramref name="array" />, décalage d'octet à partir duquel les octets seront lus.</param>
      <param name="count">Nombre maximal d'octets à écrire.</param>
      <exception cref="T:System.ObjectDisposedException">L’opération d’écriture ne peut pas être exécutée car le flux est fermé.</exception>
    </member>
    <member name="M:System.IO.Compression.BrotliStream.Write(System.ReadOnlySpan{System.Byte})">
      <summary>Écrit une séquence d’octets dans le flux Brotli actuel à partir d’une étendue d’octets en lecture seule et avance la position actuelle dans ce flux Brotli du nombre d’octets écrits.</summary>
      <param name="buffer">Région de la mémoire. Cette méthode copie le contenu de cette région dans le flux Brotli actuel.</param>
    </member>
    <member name="M:System.IO.Compression.BrotliStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>Écrit de façon asynchrone les octets compressés dans le flux Brotli sous-jacent à partir du tableau d’octets spécifié.</summary>
      <param name="buffer">Mémoire tampon qui contient les données à compresser.</param>
      <param name="offset">Dans le <paramref name="buffer" />, décalage d’octet de base zéro à partir duquel commencer la copie des octets dans le flux Brotli.</param>
      <param name="count">Nombre maximal d'octets à écrire.</param>
      <param name="cancellationToken">Jeton pour surveiller les requêtes d'annulation. La valeur par défaut est <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Tâche qui représente l’opération d’écriture asynchrone.</returns>
    </member>
    <member name="M:System.IO.Compression.BrotliStream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
      <summary>Écrit de façon asynchrone les octets compressés dans le flux Brotli sous-jacent à partir de la plage de mémoire d’octets spécifiée.</summary>
      <param name="buffer">Région de mémoire à partir de laquelle écrire des données.</param>
      <param name="cancellationToken">Jeton pour surveiller les requêtes d'annulation. La valeur par défaut est <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Tâche qui représente l’opération d’écriture asynchrone.</returns>
    </member>
  </members>
</doc>
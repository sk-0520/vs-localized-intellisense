<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Reflection.Emit.ILGeneration</name>
  </assembly>
  <members>
    <member name="T:System.Reflection.Emit.CustomAttributeBuilder">
      <summary vsli:raw="Helps build custom attributes.">Aide à la construction d'attributs personnalisés.</summary>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[])">
      <summary vsli:raw="Initializes an instance of the &lt;see langword=&quot;CustomAttributeBuilder&quot; /&gt; class given the constructor for the custom attribute and the arguments to the constructor.">Initialise une instance de la classe <see langword="CustomAttributeBuilder" /> du constructeur pour l’attribut personnalisé et ses arguments.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">Le constructeur de l’attribut personnalisé.</param>
      <param name="constructorArgs" vsli:raw="The arguments to the constructor of the custom attribute.">Arguments destinés au constructeur de l'attribut personnalisé.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is static or private.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of supplied arguments does not match the number of parameters of the constructor as required by the calling convention of the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of supplied argument does not match the type of the parameter declared in the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; A supplied argument is a reference type other than &lt;see cref=&quot;T:System.String&quot; /&gt; or &lt;see cref=&quot;T:System.Type&quot; /&gt;.">
        <paramref name="con" /> est statique ou privé.  
ou 
Le nombre d’arguments fournis ne correspond pas au nombre de paramètres du constructeur comme requis par la convention d’appel du constructeur.  
ou 
Le type de l’argument fourni ne correspond pas au type du paramètre déclaré dans le constructeur.  

ou - 
Un argument fourni est un type de référence autre que <see cref="T:System.String" /> ou <see cref="T:System.Type" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;constructorArgs&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> ou <paramref name="constructorArgs" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.FieldInfo[],System.Object[])">
      <summary vsli:raw="Initializes an instance of the &lt;see langword=&quot;CustomAttributeBuilder&quot; /&gt; class given the constructor for the custom attribute, the arguments to the constructor, and a set of named field/value pairs.">Initialise une instance de la classe <see langword="CustomAttributeBuilder" /> en fonction du constructeur pour son attribut personnalisé, ses arguments et un ensemble de paires champ/valeur nommé.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">Le constructeur de l’attribut personnalisé.</param>
      <param name="constructorArgs" vsli:raw="The arguments to the constructor of the custom attribute.">Arguments destinés au constructeur de l'attribut personnalisé.</param>
      <param name="namedFields" vsli:raw="Named fields of the custom attribute.">Champs nommés de l'attribut personnalisé.</param>
      <param name="fieldValues" vsli:raw="Values for the named fields of the custom attribute.">Valeurs des champs nommés de l'attribut personnalisé.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The lengths of the &lt;paramref name=&quot;namedFields&quot; /&gt; and &lt;paramref name=&quot;fieldValues&quot; /&gt; arrays are different.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;con&quot; /&gt; is static or private.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of supplied arguments does not match the number of parameters of the constructor as required by the calling convention of the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of supplied argument does not match the type of the parameter declared in the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The types of the field values do not match the types of the named fields.  &#xA;  &#xA; -or-  &#xA;  &#xA; The field does not belong to the same class or base class as the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; A supplied argument or named field is a reference type other than &lt;see cref=&quot;T:System.String&quot; /&gt; or &lt;see cref=&quot;T:System.Type&quot; /&gt;.">La longueur des tableaux <paramref name="namedFields" /> et <paramref name="fieldValues" /> est différente.  

ou - 
<paramref name="con" /> est statique ou privé.  

ou - 
Le nombre d’arguments fournis ne correspond pas au nombre de paramètres du constructeur comme requis par la convention d’appel du constructeur.  

ou - 
Le type de l’argument fourni ne correspond pas au type du paramètre déclaré dans le constructeur.  

ou - 
Les types des valeurs de champs ne correspondent pas aux types des champs nommés.  

ou - 
Le champ n'appartient ni à la même classe ni à la même classe de base que le constructeur.  

ou - 
Un argument fourni ou un champ nommé est un type référence autre que <see cref="T:System.String" /> ou <see cref="T:System.Type" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One of the parameters is &lt;see langword=&quot;null&quot; /&gt;.">L'un des paramètres est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.PropertyInfo[],System.Object[])">
      <summary vsli:raw="Initializes an instance of the &lt;see langword=&quot;CustomAttributeBuilder&quot; /&gt; class given the constructor for the custom attribute, the arguments to the constructor, and a set of named property or value pairs.">Initialise une instance de la classe <see langword="CustomAttributeBuilder" /> en fonction du constructeur pour son attribut personnalisé, ses arguments et un ensemble de propriétés ou de paires de valeur nommé.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">Le constructeur de l’attribut personnalisé.</param>
      <param name="constructorArgs" vsli:raw="The arguments to the constructor of the custom attribute.">Arguments destinés au constructeur de l'attribut personnalisé.</param>
      <param name="namedProperties" vsli:raw="Named properties of the custom attribute.">Propriétés nommées de l'attribut personnalisé.</param>
      <param name="propertyValues" vsli:raw="Values for the named properties of the custom attribute.">Valeurs des propriétés nommées de l'attribut personnalisé.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The lengths of the &lt;paramref name=&quot;namedProperties&quot; /&gt; and &lt;paramref name=&quot;propertyValues&quot; /&gt; arrays are different.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;con&quot; /&gt; is static or private.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of supplied arguments does not match the number of parameters of the constructor as required by the calling convention of the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of supplied argument does not match the type of the parameter declared in the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The types of the property values do not match the types of the named properties.  &#xA;  &#xA; -or-  &#xA;  &#xA; A property has no setter method.  &#xA;  &#xA; -or-  &#xA;  &#xA; The property does not belong to the same class or base class as the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; A supplied argument or named property is a reference type other than &lt;see cref=&quot;T:System.String&quot; /&gt; or &lt;see cref=&quot;T:System.Type&quot; /&gt;.">La longueur des tableaux <paramref name="namedProperties" /> et <paramref name="propertyValues" /> est différente.  
ou 
 <paramref name="con" /> est statique ou privé.  
ou 
Le nombre d’arguments fournis ne correspond pas au nombre de paramètres du constructeur comme requis par la convention d’appel du constructeur.  

ou - 
Le type de l’argument fourni ne correspond pas au type du paramètre déclaré dans le constructeur.  

ou - 
Les types des valeurs de propriétés ne correspondent pas aux types des propriétés nommées.  


ou 
Une propriété n'a pas de méthode accesseur Set.  
ou 
La propriété n'appartient ni à la même classe ni à la même classe de base que le constructeur.  

ou - 
Un argument fourni ou une propriété nommée est un type référence autre que <see cref="T:System.String" /> ou <see cref="T:System.Type" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One of the parameters is &lt;see langword=&quot;null&quot; /&gt;.">L'un des paramètres est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.PropertyInfo[],System.Object[],System.Reflection.FieldInfo[],System.Object[])">
      <summary vsli:raw="Initializes an instance of the &lt;see langword=&quot;CustomAttributeBuilder&quot; /&gt; class given the constructor for the custom attribute, the arguments to the constructor, a set of named property or value pairs, and a set of named field or value pairs.">Initialise une instance de la classe <see langword="CustomAttributeBuilder" /> en fonction du constructeur pour son attribut personnalisé, ses arguments, un ensemble de propriétés nommé ou de paires de valeur et un ensemble de champs nommé ou de paires de valeurs.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">Le constructeur de l’attribut personnalisé.</param>
      <param name="constructorArgs" vsli:raw="The arguments to the constructor of the custom attribute.">Arguments destinés au constructeur de l'attribut personnalisé.</param>
      <param name="namedProperties" vsli:raw="Named properties of the custom attribute.">Propriétés nommées de l'attribut personnalisé.</param>
      <param name="propertyValues" vsli:raw="Values for the named properties of the custom attribute.">Valeurs des propriétés nommées de l'attribut personnalisé.</param>
      <param name="namedFields" vsli:raw="Named fields of the custom attribute.">Champs nommés de l'attribut personnalisé.</param>
      <param name="fieldValues" vsli:raw="Values for the named fields of the custom attribute.">Valeurs des champs nommés de l'attribut personnalisé.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The lengths of the &lt;paramref name=&quot;namedProperties&quot; /&gt; and &lt;paramref name=&quot;propertyValues&quot; /&gt; arrays are different.  &#xA;  &#xA; -or-  &#xA;  &#xA; The lengths of the &lt;paramref name=&quot;namedFields&quot; /&gt; and &lt;paramref name=&quot;fieldValues&quot; /&gt; arrays are different.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;con&quot; /&gt; is static or private.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of supplied arguments does not match the number of parameters of the constructor as required by the calling convention of the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of supplied argument does not match the type of the parameter declared in the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The types of the property values do not match the types of the named properties.  &#xA;  &#xA; -or-  &#xA;  &#xA; The types of the field values do not match the types of the corresponding field types.  &#xA;  &#xA; -or-  &#xA;  &#xA; A property has no setter.  &#xA;  &#xA; -or-  &#xA;  &#xA; The property or field does not belong to the same class or base class as the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; A supplied argument, named property, or named field is a reference type other than &lt;see cref=&quot;T:System.String&quot; /&gt; or &lt;see cref=&quot;T:System.Type&quot; /&gt;.">La longueur des tableaux <paramref name="namedProperties" /> et <paramref name="propertyValues" /> est différente.  

ou - 
La longueur des tableaux <paramref name="namedFields" /> et <paramref name="fieldValues" /> est différente.  

ou - 
<paramref name="con" /> est statique ou privé.  

ou - 
Le nombre d’arguments fournis ne correspond pas au nombre de paramètres du constructeur comme requis par la convention d’appel du constructeur.  

ou - 
Le type de l’argument fourni ne correspond pas au type du paramètre déclaré dans le constructeur.  


ou 
Les types des valeurs de propriétés ne correspondent pas aux types des propriétés nommées.  

ou - 
Les types des valeurs de champs ne correspondent pas aux types des champs.  

ou - 
Une propriété n'a pas d'accesseur Set.  

ou - 
La propriété ou le champ n'appartient ni à la même classe ni à la même classe de base que le constructeur.  


ou 
Un argument fourni, une propriété nommée ou un champ nommé est un type référence autre que <see cref="T:System.String" /> ou <see cref="T:System.Type" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One of the parameters is &lt;see langword=&quot;null&quot; /&gt;.">L'un des paramètres est <see langword="null" />.</exception>
    </member>
    <member name="T:System.Reflection.Emit.ILGenerator">
      <summary vsli:raw="Generates Microsoft intermediate language (MSIL) instructions.">Génère des instructions MSIL (Microsoft Intermediate Language).</summary>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)">
      <summary vsli:raw="Begins a catch block.">Commence un bloc catch.</summary>
      <param name="exceptionType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the exception.">Objet <see cref="T:System.Type" /> représentant l'exception.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The catch block is within a filtered exception.">Le bloc catch se trouve dans une exception filtrée.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;exceptionType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the exception filter block has not returned a value that indicates that finally blocks should be run until this catch block is located.">
        <paramref name="exceptionType" /> est <see langword="null" /> et le bloc de filtre d'exceptions n'a pas retourné de valeur indiquant que l'exécution des blocs finally est requise jusqu'à ce que ce bloc catch soit trouvé.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The Microsoft intermediate language (MSIL) being generated is not currently in an exception block.">Le code MSIL (Microsoft Intermediate Language) en cours de génération ne se trouve pas dans un bloc d'exception actuellement.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock">
      <summary vsli:raw="Begins an exception block for a filtered exception.">Commence un bloc d'exception pour une exception filtrée.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The Microsoft intermediate language (MSIL) being generated is not currently in an exception block.  &#xA;  &#xA; -or-  &#xA;  &#xA; This &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; belongs to a &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt;.">Le code MSIL (Microsoft Intermediate Language) en cours de génération ne se trouve pas dans un bloc d'exception actuellement.  

ou - 
Ce <see cref="T:System.Reflection.Emit.ILGenerator" /> appartient à un <see cref="T:System.Reflection.Emit.DynamicMethod" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginExceptionBlock">
      <summary vsli:raw="Begins an exception block for a non-filtered exception.">Commence un bloc d'exception pour une exception non filtrée.</summary>
      <returns vsli:raw="The label for the end of the block. This will leave you in the correct place to execute finally blocks or to finish the try.">Étiquette pour la fin du bloc. Cela vous positionnera correctement pour exécuter les blocs finally ou pour terminer le bloc try.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginFaultBlock">
      <summary vsli:raw="Begins an exception fault block in the Microsoft intermediate language (MSIL) stream.">Commence un bloc d'erreur d'exception dans le flux MSIL.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The MSIL being generated is not currently in an exception block.  &#xA;  &#xA; -or-  &#xA;  &#xA; This &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; belongs to a &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt;.">Le MSIL qui est généré n'est pas actuellement dans un bloc d'exception.  

ou - 
Ce <see cref="T:System.Reflection.Emit.ILGenerator" /> appartient à un <see cref="T:System.Reflection.Emit.DynamicMethod" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginFinallyBlock">
      <summary vsli:raw="Begins a finally block in the Microsoft intermediate language (MSIL) instruction stream.">Commence un bloc finally dans le flux d'instructions MSIL.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The MSIL being generated is not currently in an exception block.">Le MSIL qui est généré n'est pas actuellement dans un bloc d'exception.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginScope">
      <summary vsli:raw="Begins a lexical scope.">Commence une portée lexicale.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; belongs to a &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt;.">Ce <see cref="T:System.Reflection.Emit.ILGenerator" /> appartient à un <see cref="T:System.Reflection.Emit.DynamicMethod" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)">
      <summary vsli:raw="Declares a local variable of the specified type.">Déclare une variable locale du type spécifié.</summary>
      <param name="localType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type of the local variable.">Objet <see cref="T:System.Type" /> représentant le type de variable locale.</param>
      <returns vsli:raw="The declared local variable.">Variable locale déclarée.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;localType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="localType" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been created by the &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; method.">Le type conteneur a été créé à l'aide de la méthode <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)">
      <summary vsli:raw="Declares a local variable of the specified type, optionally pinning the object referred to by the variable.">Déclare une variable locale du type spécifié, en épinglant éventuellement l'objet auquel la variable fait référence.</summary>
      <param name="localType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type of the local variable.">Objet <see cref="T:System.Type" /> représentant le type de variable locale.</param>
      <param name="pinned" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to pin the object in memory; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour épingler l'objet en mémoire ; sinon, <see langword="false" />.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.LocalBuilder&quot; /&gt; object that represents the local variable.">Objet <see cref="T:System.Reflection.Emit.LocalBuilder" /> qui représente la variable locale.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;localType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="localType" /> est <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been created by the &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; method.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method body of the enclosing method has been created by the &lt;see cref=&quot;M:System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)&quot; /&gt; method.">Le type conteneur a été créé à l'aide de la méthode <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.  
ou 
Le corps de la méthode englobante a été créé par la méthode <see cref="M:System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The method with which this &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; is associated is not represented by a &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt;.">La méthode à laquelle ce <see cref="T:System.Reflection.Emit.ILGenerator" /> est associé n'est pas représentée par <see cref="T:System.Reflection.Emit.MethodBuilder" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.DefineLabel">
      <summary vsli:raw="Declares a new label.">Déclare une nouvelle étiquette.</summary>
      <returns vsli:raw="A new label that can be used as a token for branching.">Nouvelle étiquette qui peut être utilisée comme jeton pour la création de branche.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">
      <summary vsli:raw="Puts the specified instruction onto the stream of instructions.">Place l'instruction spécifiée dans le flux d'instructions.</summary>
      <param name="opcode" vsli:raw="The Microsoft Intermediate Language (MSIL) instruction to be put onto the stream.">Instruction MSIL à placer dans le flux.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)">
      <summary vsli:raw="Puts the specified instruction and character argument onto the Microsoft intermediate language (MSIL) stream of instructions.">Place l'instruction et l'argument en caractères spécifiés dans le flux d'instructions MSIL.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream.">Instruction MSIL à placer dans le flux.</param>
      <param name="arg" vsli:raw="The character argument pushed onto the stream immediately after the instruction.">Argument en caractères faisant l'objet d'un push dans le flux immédiatement après l'instruction.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)">
      <summary vsli:raw="Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.">Place l'instruction et l'argument numérique spécifiés dans le flux d'instructions MSIL.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream. Defined in the &lt;see langword=&quot;OpCodes&quot; /&gt; enumeration.">Instruction MSIL à placer dans le flux. Définie dans l'énumération <see langword="OpCodes" />.</param>
      <param name="arg" vsli:raw="The numerical argument pushed onto the stream immediately after the instruction.">Argument numérique faisant l'objet d'un push dans le flux immédiatement après l'instruction.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">
      <summary vsli:raw="Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.">Place l'instruction et l'argument numérique spécifiés dans le flux d'instructions MSIL.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">Instruction MSIL à émettre dans le flux.</param>
      <param name="arg" vsli:raw="The &lt;see langword=&quot;Int&quot; /&gt; argument pushed onto the stream immediately after the instruction.">Argument <see langword="Int" /> faisant l'objet d'un push dans le flux immédiatement après l'instruction.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)">
      <summary vsli:raw="Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.">Place l'instruction et l'argument numérique spécifiés dans le flux d'instructions MSIL.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream.">Instruction MSIL à placer dans le flux.</param>
      <param name="arg" vsli:raw="The numerical argument pushed onto the stream immediately after the instruction.">Argument numérique faisant l'objet d'un push dans le flux immédiatement après l'instruction.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)">
      <summary vsli:raw="Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.">Place l'instruction et l'argument numérique spécifiés dans le flux d'instructions MSIL.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream.">Instruction MSIL à placer dans le flux.</param>
      <param name="arg" vsli:raw="The numerical argument pushed onto the stream immediately after the instruction.">Argument numérique faisant l'objet d'un push dans le flux immédiatement après l'instruction.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)">
      <summary vsli:raw="Puts the specified instruction and metadata token for the specified constructor onto the Microsoft intermediate language (MSIL) stream of instructions.">Place l'instruction et le jeton de métadonnées spécifiés pour le constructeur donné dans le flux d'instructions MSIL.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">Instruction MSIL à émettre dans le flux.</param>
      <param name="con" vsli:raw="A &lt;see langword=&quot;ConstructorInfo&quot; /&gt; representing a constructor.">
        <see langword="ConstructorInfo" /> qui représente un constructeur.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;. This exception is new in the .NET Framework 4.">
        <paramref name="con" /> est <see langword="null" />. Cette exception est nouvelle dans le .NET Framework 4.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">
      <summary vsli:raw="Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream and leaves space to include a label when fixes are done.">Place l'instruction spécifiée dans le flux MSIL et laisse suffisamment d'espace pour inclure une étiquette lorsque les corrections sont faites.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">Instruction MSIL à émettre dans le flux.</param>
      <param name="label" vsli:raw="The label to which to branch from this location.">Étiquette vers laquelle créer une branche à partir de cet emplacement.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])">
      <summary vsli:raw="Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream and leaves space to include a label when fixes are done.">Place l'instruction spécifiée dans le flux MSIL et laisse suffisamment d'espace pour inclure une étiquette lorsque les corrections sont faites.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">Instruction MSIL à émettre dans le flux.</param>
      <param name="labels" vsli:raw="The array of label objects to which to branch from this location. All of the labels will be used.">Tableau d'objets étiquette vers lesquels créer une branche à partir de cet emplacement. Toutes les étiquettes seront utilisées.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;. This exception is new in the .NET Framework 4.">
        <paramref name="con" /> a la valeur <see langword="null" />. Cette exception est nouvelle dans le .NET Framework 4.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)">
      <summary vsli:raw="Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the index of the given local variable.">Place l'instruction spécifiée dans le flux MSIL, en la faisant suivre de l'index de la variable locale donnée.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">Instruction MSIL à émettre dans le flux.</param>
      <param name="local" vsli:raw="A local variable.">Variable locale.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The parent method of the &lt;paramref name=&quot;local&quot; /&gt; parameter does not match the method associated with this &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt;.">La méthode parente du paramètre <paramref name="local" /> ne correspond pas à la méthode associée à ce <see cref="T:System.Reflection.Emit.ILGenerator" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;local&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="local" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;opcode&quot; /&gt; is a single-byte instruction, and &lt;paramref name=&quot;local&quot; /&gt; represents a local variable with an index greater than &lt;see langword=&quot;Byte.MaxValue&quot; /&gt;.">
        <paramref name="opcode" /> est une instruction à octet unique et <paramref name="local" /> représente une variable locale avec un index supérieur à <see langword="Byte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)">
      <summary vsli:raw="Puts the specified instruction and a signature token onto the Microsoft intermediate language (MSIL) stream of instructions.">Place l'instruction et un jeton de signature spécifiés dans le flux d'instructions MSIL.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">Instruction MSIL à émettre dans le flux.</param>
      <param name="signature" vsli:raw="A helper for constructing a signature token.">Assistance pour la construction d'un jeton de signature.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;signature&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="signature" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">
      <summary vsli:raw="Puts the specified instruction and metadata token for the specified field onto the Microsoft intermediate language (MSIL) stream of instructions.">Place l'instruction et le jeton de métadonnées spécifiés pour le champ donné dans le flux d'instructions MSIL.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">Instruction MSIL à émettre dans le flux.</param>
      <param name="field" vsli:raw="A &lt;see langword=&quot;FieldInfo&quot; /&gt; representing a field.">
        <see langword="FieldInfo" /> qui représente un champ.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">
      <summary vsli:raw="Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given method.">Place l'instruction spécifiée dans le flux MSIL, en la faisant suivre du jeton de métadonnées de la méthode donnée.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">Instruction MSIL à émettre dans le flux.</param>
      <param name="meth" vsli:raw="A &lt;see langword=&quot;MethodInfo&quot; /&gt; representing a method.">
        <see langword="MethodInfo" /> qui représente une méthode.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;meth&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="meth" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;meth&quot; /&gt; is a generic method for which the &lt;see cref=&quot;P:System.Reflection.MethodBase.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="meth" /> est une méthode générique pour laquelle la propriété <see cref="P:System.Reflection.MethodBase.IsGenericMethodDefinition" /> est <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.SByte)">
      <summary vsli:raw="Puts the specified instruction and character argument onto the Microsoft intermediate language (MSIL) stream of instructions.">Place l'instruction et l'argument en caractères spécifiés dans le flux d'instructions MSIL.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream.">Instruction MSIL à placer dans le flux.</param>
      <param name="arg" vsli:raw="The character argument pushed onto the stream immediately after the instruction.">Argument en caractères faisant l'objet d'un push dans le flux immédiatement après l'instruction.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)">
      <summary vsli:raw="Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.">Place l'instruction et l'argument numérique spécifiés dans le flux d'instructions MSIL.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream.">Instruction MSIL à placer dans le flux.</param>
      <param name="arg" vsli:raw="The &lt;see cref=&quot;T:System.Single&quot; /&gt; argument pushed onto the stream immediately after the instruction.">Argument <see langword="Single" /> faisant l'objet d'un push dans le flux immédiatement après l'instruction.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.String)">
      <summary vsli:raw="Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given string.">Place l'instruction spécifiée dans le flux MSIL, en la faisant suivre du jeton de métadonnées de la chaîne donnée.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">Instruction MSIL à émettre dans le flux.</param>
      <param name="str" vsli:raw="The &lt;see langword=&quot;String&quot; /&gt; to be emitted.">
        <see langword="String" /> à émettre.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">
      <summary vsli:raw="Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given type.">Place l'instruction spécifiée dans le flux MSIL, en la faisant suivre du jeton de métadonnées pour le type donné.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream.">Instruction MSIL à placer dans le flux.</param>
      <param name="cls" vsli:raw="A &lt;see langword=&quot;Type&quot; /&gt;.">
        <see langword="Type" />
      </param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;cls&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="cls" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">
      <summary vsli:raw="Puts a &lt;see langword=&quot;call&quot; /&gt; or &lt;see langword=&quot;callvirt&quot; /&gt; instruction onto the Microsoft intermediate language (MSIL) stream to call a &lt;see langword=&quot;varargs&quot; /&gt; method.">Place une instruction <see langword="call" /> ou <see langword="callvirt" /> dans le flux MSIL (Microsoft intermediate language) pour appeler une méthode <see langword="varargs" />.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream. Must be &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Call&quot; /&gt;, &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Callvirt&quot; /&gt;, or &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Newobj&quot; /&gt;.">Instruction MSIL à émettre dans le flux. Doit être <see cref="F:System.Reflection.Emit.OpCodes.Call" />, <see cref="F:System.Reflection.Emit.OpCodes.Callvirt" /> ou <see cref="F:System.Reflection.Emit.OpCodes.Newobj" />.</param>
      <param name="methodInfo" vsli:raw="The &lt;see langword=&quot;varargs&quot; /&gt; method to be called.">Méthode <see langword="varargs" /> à appeler.</param>
      <param name="optionalParameterTypes" vsli:raw="The types of the optional arguments if the method is a &lt;see langword=&quot;varargs&quot; /&gt; method; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">Types des arguments facultatifs si la méthode est <see langword="varargs" /> ; sinon, <see langword="null" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;opcode&quot; /&gt; does not specify a method call.">
        <paramref name="opcode" /> ne spécifie pas un appel de méthode.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;methodInfo&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="methodInfo" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The calling convention for the method is not &lt;see langword=&quot;varargs&quot; /&gt;, but optional parameter types are supplied. This exception is thrown in the .NET Framework versions 1.0 and 1.1, In subsequent versions, no exception is thrown.">La convention d’appel de la méthode n’est pas <see langword="varargs" />, mais des types de paramètres facultatifs sont fournis. Cette exception est levée dans les versions .NET Framework 1.0 et 1.1 ; dans les versions ultérieures, aucune exception n’est levée.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])">
      <summary vsli:raw="Puts a &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Calli&quot; /&gt; instruction onto the Microsoft intermediate language (MSIL) stream, specifying a managed calling convention for the indirect call.">Place une instruction <see cref="F:System.Reflection.Emit.OpCodes.Calli" /> dans le flux MSIL en spécifiant une convention d'appel managée pour l'appel indirect.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream. Must be &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Calli&quot; /&gt;.">Instruction MSIL à émettre dans le flux. Doit être <see cref="F:System.Reflection.Emit.OpCodes.Calli" />.</param>
      <param name="callingConvention" vsli:raw="The managed calling convention to be used.">Convention d'appel managée à utiliser.</param>
      <param name="returnType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the result.">
        <see cref="T:System.Type" /> du résultat.</param>
      <param name="parameterTypes" vsli:raw="The types of the required arguments to the instruction.">Types des arguments requis pour l'instruction.</param>
      <param name="optionalParameterTypes" vsli:raw="The types of the optional arguments for &lt;see langword=&quot;varargs&quot; /&gt; calls.">Types des arguments facultatifs pour les appels <see langword="varargs" />.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;optionalParameterTypes&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt;, but &lt;paramref name=&quot;callingConvention&quot; /&gt; does not include the &lt;see cref=&quot;F:System.Reflection.CallingConventions.VarArgs&quot; /&gt; flag.">
        <paramref name="optionalParameterTypes" /> n'est pas <see langword="null" />, mais <paramref name="callingConvention" /> ne comprend pas l'indicateur <see cref="F:System.Reflection.CallingConventions.VarArgs" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])">
      <summary vsli:raw="Puts a &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Calli&quot; /&gt; instruction onto the Microsoft intermediate language (MSIL) stream, specifying an unmanaged calling convention for the indirect call.">Place une instruction <see cref="F:System.Reflection.Emit.OpCodes.Calli" /> dans le flux MSIL en spécifiant une convention d'appel non managée pour l'appel indirect.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream. Must be &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Calli&quot; /&gt;.">Instruction MSIL à émettre dans le flux. Doit être <see cref="F:System.Reflection.Emit.OpCodes.Calli" />.</param>
      <param name="unmanagedCallConv" vsli:raw="The unmanaged calling convention to be used.">Convention d'appel non managée à utiliser.</param>
      <param name="returnType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the result.">
        <see cref="T:System.Type" /> du résultat.</param>
      <param name="parameterTypes" vsli:raw="The types of the required arguments to the instruction.">Types des arguments requis pour l'instruction.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)">
      <summary vsli:raw="Emits the Microsoft intermediate language (MSIL) necessary to call &lt;see cref=&quot;Overload:System.Console.WriteLine&quot; /&gt; with the given local variable.">Émet le langage MSIL nécessaire pour appeler <see cref="Overload:System.Console.WriteLine" /> avec la variable locale donnée.</summary>
      <param name="localBuilder" vsli:raw="The local variable whose value is to be written to the console.">La variable locale dont la valeur doit être écrite dans la console.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The type of &lt;paramref name=&quot;localBuilder&quot; /&gt; is &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.Emit.EnumBuilder&quot; /&gt;, which are not supported.  &#xA;  &#xA; -or-  &#xA;  &#xA; There is no overload of &lt;see cref=&quot;Overload:System.Console.WriteLine&quot; /&gt; that accepts the type of &lt;paramref name=&quot;localBuilder&quot; /&gt;.">Le type de <paramref name="localBuilder" /> est <see cref="T:System.Reflection.Emit.TypeBuilder" /> ou <see cref="T:System.Reflection.Emit.EnumBuilder" />, qui ne sont pas pris en charge.  
ou 
Aucune surcharge de <see cref="Overload:System.Console.WriteLine" /> n’accepte le type de <paramref name="localBuilder" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;localBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="localBuilder" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)">
      <summary vsli:raw="Emits the Microsoft intermediate language (MSIL) necessary to call &lt;see cref=&quot;Overload:System.Console.WriteLine&quot; /&gt; with the given field.">Émet le code MSIL (Microsoft Intermediate Language) nécessaire pour appeler <see cref="Overload:System.Console.WriteLine" /> avec le champ donné.</summary>
      <param name="fld" vsli:raw="The field whose value is to be written to the console.">Champ dont la valeur est à écrire dans la console.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There is no overload of the &lt;see cref=&quot;Overload:System.Console.WriteLine&quot; /&gt; method that accepts the type of the specified field.">Aucune surcharge de la méthode <see cref="Overload:System.Console.WriteLine" /> n'accepte le type du champ spécifié.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;fld&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="fld" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The type of the field is &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.Emit.EnumBuilder&quot; /&gt;, which are not supported.">Le champ est de type <see cref="T:System.Reflection.Emit.TypeBuilder" /> ou <see cref="T:System.Reflection.Emit.EnumBuilder" />, qui ne sont pas pris en charge.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.String)">
      <summary vsli:raw="Emits the Microsoft intermediate language (MSIL) to call &lt;see cref=&quot;Overload:System.Console.WriteLine&quot; /&gt; with a string.">Émet le code MSIL (Microsoft Intermediate Language) pour appeler <see cref="Overload:System.Console.WriteLine" /> avec une chaîne.</summary>
      <param name="value" vsli:raw="The string to be printed.">Chaîne à imprimer.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EndExceptionBlock">
      <summary vsli:raw="Ends an exception block.">Met fin à un bloc d'exception.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The end exception block occurs in an unexpected place in the code stream.">Le bloc d'exception final se produit à un emplacement inattendu dans le flux de code.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The Microsoft intermediate language (MSIL) being generated is not currently in an exception block.">Le code MSIL (Microsoft Intermediate Language) en cours de génération ne se trouve pas dans un bloc d'exception actuellement.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EndScope">
      <summary vsli:raw="Ends a lexical scope.">Met fin à une portée lexicale.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; belongs to a &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt;.">Ce <see cref="T:System.Reflection.Emit.ILGenerator" /> appartient à un <see cref="T:System.Reflection.Emit.DynamicMethod" />.</exception>
    </member>
    <member name="P:System.Reflection.Emit.ILGenerator.ILOffset">
      <summary vsli:raw="Gets the current offset, in bytes, in the Microsoft intermediate language (MSIL) stream that is being emitted by the &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt;.">Obtient l'offset actuel, en octets, dans le flux de Microsoft Intermediate Language (MSIL) émis par le <see cref="T:System.Reflection.Emit.ILGenerator" />.</summary>
      <returns vsli:raw="The offset in the MSIL stream at which the next instruction will be emitted.">Offset dans le flux MSIL vers lequel l'instruction suivante sera émise.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)">
      <summary vsli:raw="Marks the Microsoft intermediate language (MSIL) stream's current position with the given label.">Marque la position actuelle du flux MSIL avec l'étiquette donnée.</summary>
      <param name="loc" vsli:raw="The label for which to set an index.">Étiquette pour laquelle définir un index.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;loc&quot; /&gt; represents an invalid index into the label array.  &#xA;  &#xA; -or-  &#xA;  &#xA; An index for &lt;paramref name=&quot;loc&quot; /&gt; has already been defined.">
        <paramref name="loc" /> représente un index non valide dans le tableau d'étiquettes.  
ou 
Un index a déjà été défini pour <paramref name="loc" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.ThrowException(System.Type)">
      <summary vsli:raw="Emits an instruction to throw an exception.">Émet une instruction pour la levée d'une exception.</summary>
      <param name="excType" vsli:raw="The class of the type of exception to throw.">Classe du type d'exception à lever.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;excType&quot; /&gt; is not the &lt;see cref=&quot;T:System.Exception&quot; /&gt; class or a derived class of &lt;see cref=&quot;T:System.Exception&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type does not have a parameterless constructor.">
        <paramref name="excType" /> n'est ni la classe <see cref="T:System.Exception" /> ni une classe dérivée de <see cref="T:System.Exception" />.  
ou 
Le type n’a pas de constructeur sans paramètre.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;excType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="excType" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)">
      <summary vsli:raw="Specifies the namespace to be used in evaluating locals and watches for the current active lexical scope.">Spécifie un espace de noms à utiliser pour évaluer les variables locales et observe la portée lexicale active en cours.</summary>
      <param name="usingNamespace" vsli:raw="The namespace to be used in evaluating locals and watches for the current active lexical scope.">Espace de noms à utiliser pour évaluer les variables locales et observer la portée lexicale active en cours.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="Length of &lt;paramref name=&quot;usingNamespace&quot; /&gt; is zero.">La longueur de <paramref name="usingNamespace" /> est égale à zéro.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;usingNamespace&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="usingNamespace" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="This &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; belongs to a &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt;.">Ce <see cref="T:System.Reflection.Emit.ILGenerator" /> appartient à un <see cref="T:System.Reflection.Emit.DynamicMethod" />.</exception>
    </member>
    <member name="T:System.Reflection.Emit.Label">
      <summary vsli:raw="Represents a label in the instruction stream. &lt;see langword=&quot;Label&quot; /&gt; is used in conjunction with the &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; class.">Représente une étiquette dans le flux d'instructions. <see langword="Label" /> est utilisé conjointement à la classe <see cref="T:System.Reflection.Emit.ILGenerator" />.</summary>
    </member>
    <member name="M:System.Reflection.Emit.Label.Equals(System.Object)">
      <summary vsli:raw="Checks if the given object is an instance of &lt;see langword=&quot;Label&quot; /&gt; and is equal to this instance.">Vérifie si l'objet donné est une instance de <see langword="Label" /> et s'il est égal à cette dernière.</summary>
      <param name="obj" vsli:raw="The object to compare with this &lt;see langword=&quot;Label&quot; /&gt; instance.">Objet à comparer à cette instance de <see langword="Label" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is an instance of &lt;see langword=&quot;Label&quot; /&gt; and is equal to this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="obj" /> est une instance de <see langword="Label" /> et s'il est égal à cet objet ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.Label.Equals(System.Reflection.Emit.Label)">
      <summary vsli:raw="Indicates whether the current instance is equal to the specified &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt;.">Détermine si l'instance actuelle est égale à l'objet <see cref="T:System.Reflection.Emit.Label" /> spécifié.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; to compare to the current instance.">
        <see cref="T:System.Reflection.Emit.Label" /> à comparer à l'instance en cours.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of &lt;paramref name=&quot;obj&quot; /&gt; is equal to the value of the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la valeur de <paramref name="obj" /> est égale à la valeur de l'instance actuelle ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.Label.GetHashCode">
      <summary vsli:raw="Generates a hash code for this instance.">Génère un code de hachage pour cette instance.</summary>
      <returns vsli:raw="A hash code for this instance.">Code de hachage de cette instance.</returns>
    </member>
    <member name="M:System.Reflection.Emit.Label.op_Equality(System.Reflection.Emit.Label,System.Reflection.Emit.Label)">
      <summary vsli:raw="Indicates whether two &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; structures are equal.">Indique si deux structures <see cref="T:System.Reflection.Emit.Label" /> sont égales.</summary>
      <param name="a" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; to compare to &lt;paramref name=&quot;b&quot; /&gt;.">
        <see cref="T:System.Reflection.Emit.Label" /> à comparer à <paramref name="b" />.</param>
      <param name="b" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; to compare to &lt;paramref name=&quot;a&quot; /&gt;.">
        <see cref="T:System.Reflection.Emit.Label" /> à comparer à <paramref name="a" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;a&quot; /&gt; is equal to &lt;paramref name=&quot;b&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="a" /> est égal à <paramref name="b" /> ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.Label.op_Inequality(System.Reflection.Emit.Label,System.Reflection.Emit.Label)">
      <summary vsli:raw="Indicates whether two &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; structures are not equal.">Indique si deux structures <see cref="T:System.Reflection.Emit.Label" /> ne sont pas égales.</summary>
      <param name="a" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; to compare to &lt;paramref name=&quot;b&quot; /&gt;.">
        <see cref="T:System.Reflection.Emit.Label" /> à comparer à <paramref name="b" />.</param>
      <param name="b" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; to compare to &lt;paramref name=&quot;a&quot; /&gt;.">
        <see cref="T:System.Reflection.Emit.Label" /> à comparer à <paramref name="a" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;a&quot; /&gt; is not equal to &lt;paramref name=&quot;b&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="a" /> n'est pas égal à <paramref name="b" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Reflection.Emit.LocalBuilder">
      <summary vsli:raw="Represents a local variable within a method or constructor.">Représente une variable locale dans une méthode ou dans un constructeur.</summary>
    </member>
    <member name="P:System.Reflection.Emit.LocalBuilder.IsPinned">
      <summary vsli:raw="Gets a value indicating whether the object referred to by the local variable is pinned in memory.">Obtient une valeur indiquant si l'objet référencé par la variable locale est épinglé en mémoire.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object referred to by the local variable is pinned in memory; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'objet référencé par la variable locale est épinglé en mémoire ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.LocalBuilder.LocalIndex">
      <summary vsli:raw="Gets the zero-based index of the local variable within the method body.">Obtient l'index de base zéro de la variable locale dans le corps de la méthode.</summary>
      <returns vsli:raw="An integer value that represents the order of declaration of the local variable within the method body.">Valeur entière qui représente l'ordre de déclaration de la variable locale dans le corps de la méthode.</returns>
    </member>
    <member name="P:System.Reflection.Emit.LocalBuilder.LocalType">
      <summary vsli:raw="Gets the type of the local variable.">Obtient le type de la variable locale.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the local variable.">
        <see cref="T:System.Type" /> de la variable locale.</returns>
    </member>
    <member name="T:System.Reflection.Emit.ParameterBuilder">
      <summary vsli:raw="Creates or associates parameter information.">Crée ou associe des informations sur les paramètres.</summary>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.Attributes">
      <summary vsli:raw="Retrieves the attributes for this parameter.">Récupère les attributs de ce paramètre.</summary>
      <returns vsli:raw="Read-only. Retrieves the attributes for this parameter.">Lecture seule. Récupère les attributs de ce paramètre.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.IsIn">
      <summary vsli:raw="Retrieves whether this is an input parameter.">Récupère une valeur indiquant s'il s'agit d'un paramètre d'entrée.</summary>
      <returns vsli:raw="Read-only. Retrieves whether this is an input parameter.">Lecture seule. Récupère une valeur indiquant s'il s'agit d'un paramètre d'entrée.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.IsOptional">
      <summary vsli:raw="Retrieves whether this parameter is optional.">Récupère une valeur indiquant si ce paramètre est facultatif.</summary>
      <returns vsli:raw="Read-only. Specifies whether this parameter is optional.">Lecture seule. Spécifie si ce paramètre est facultatif.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.IsOut">
      <summary vsli:raw="Retrieves whether this parameter is an output parameter.">Récupère une valeur indiquant s'il s'agit d'un paramètre de sortie.</summary>
      <returns vsli:raw="Read-only. Retrieves whether this parameter is an output parameter.">Lecture seule. Récupère une valeur indiquant s'il s'agit d'un paramètre de sortie.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.Name">
      <summary vsli:raw="Retrieves the name of this parameter.">Récupère le nom de ce paramètre.</summary>
      <returns vsli:raw="Read-only. Retrieves the name of this parameter.">Lecture seule. Récupère le nom de ce paramètre.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.Position">
      <summary vsli:raw="Retrieves the signature position for this parameter.">Récupère la position de la signature pour ce paramètre.</summary>
      <returns vsli:raw="Read-only. Retrieves the signature position for this parameter.">Lecture seule. Récupère la position de la signature pour ce paramètre.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ParameterBuilder.SetConstant(System.Object)">
      <summary vsli:raw="Sets the default value of the parameter.">Définit la valeur par défaut du paramètre.</summary>
      <param name="defaultValue" vsli:raw="The default value of this parameter.">Valeur par défaut de ce paramètre.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The parameter is not one of the supported types.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of &lt;paramref name=&quot;defaultValue&quot; /&gt; does not match the type of the parameter.  &#xA;  &#xA; -or-  &#xA;  &#xA; The parameter is of type &lt;see cref=&quot;T:System.Object&quot; /&gt; or other reference type, &lt;paramref name=&quot;defaultValue&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt;, and the value cannot be assigned to the reference type.">Le paramètre ne correspond pas à un type pris en charge.  
ou 
Le type de <paramref name="defaultValue" /> ne correspond pas au type du paramètre.  

ou - 
Le paramètre est de type <see cref="T:System.Object" /> ou d'un autre type référence, <paramref name="defaultValue" /> n'est pas <see langword="null" />, et la valeur ne peut pas être assignée au type référence.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Set a custom attribute using a specified custom attribute blob.">Définit un attribut personnalisé à l'aide d'un objet blob d'attribut personnalisé spécifié.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">Le constructeur de l’attribut personnalisé.</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">Objet blob d’octets représentant les attributs.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> ou <paramref name="binaryAttribute" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Set a custom attribute using a custom attribute builder.">Définit un attribut personnalisé à l’aide d’un générateur d’attributs personnalisés.</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to define the custom attribute.">Instance d’une classe d’assistance pour définir l’attribut personnalisé.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> est <see langword="null" />.</exception>
    </member>
    <member name="T:System.Reflection.Emit.SignatureHelper">
      <summary vsli:raw="Provides methods for building signatures.">Fournit des méthodes utilisées pour la création de signatures.</summary>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type)">
      <summary vsli:raw="Adds an argument to the signature.">Ajoute un argument à la signature.</summary>
      <param name="clsArgument" vsli:raw="The type of the argument.">Type de l’argument.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The signature has already been finished.">La signature a déjà été finalisée.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;clsArgument&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="clsArgument" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Boolean)">
      <summary vsli:raw="Adds an argument of the specified type to the signature, specifying whether the argument is pinned.">Ajoute un argument du type spécifié à la signature, en spécifiant s'il doit est épinglé.</summary>
      <param name="argument" vsli:raw="The argument type.">Type de l'argument.</param>
      <param name="pinned" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the argument is pinned; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'argument est épinglé ; sinon, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;argument&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="argument" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Type[],System.Type[])">
      <summary vsli:raw="Adds an argument to the signature, with the specified custom modifiers.">Ajoute un argument à la signature, avec les modificateurs personnalisés spécifiés.</summary>
      <param name="argument" vsli:raw="The argument type.">Type de l'argument.</param>
      <param name="requiredCustomModifiers" vsli:raw="An array of types representing the required custom modifiers for the argument, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the argument has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Tableau des types représentant les modificateurs personnalisés requis pour l'argument, tels que <see cref="T:System.Runtime.CompilerServices.IsConst" /> ou <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. Si l'argument ne possède pas de modificateur personnalisé requis, spécifiez <see langword="null" />.</param>
      <param name="optionalCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers for the argument, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the argument has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Tableau des types représentant les modificateurs personnalisés facultatifs pour l'argument, tels que <see cref="T:System.Runtime.CompilerServices.IsConst" /> ou <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. Si l'argument ne possède pas de modificateur personnalisé facultatif, spécifiez <see langword="null" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;argument&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;requiredCustomModifiers&quot; /&gt; or &lt;paramref name=&quot;optionalCustomModifiers&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="argument" /> a la valeur <see langword="null" />.  

ou - 
Un élément de <paramref name="requiredCustomModifiers" /> est <paramref name="optionalCustomModifiers" /> ou <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The signature has already been finished.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an array type.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an open generic type. That is, the &lt;see cref=&quot;P:System.Type.ContainsGenericParameters&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt; for the custom modifier.">La signature a déjà été finalisée.  

ou - 
Un des modificateurs personnalisés spécifiés est un type de tableau.  

ou 
Un des modificateurs personnalisés spécifiés est un type générique ouvert. Cela signifie que la propriété <see cref="P:System.Type.ContainsGenericParameters" /> est <see langword="true" /> pour le modificateur personnalisé.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArguments(System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Adds a set of arguments to the signature, with the specified custom modifiers.">Ajoute un jeu d'arguments à la signature, avec les modificateurs personnalisés spécifiés.</summary>
      <param name="arguments" vsli:raw="The types of the arguments to be added.">Types des arguments à ajouter.</param>
      <param name="requiredCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding argument, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If a particular argument has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the arguments have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Tableau de tableaux de types. Chaque tableau de types représente les modificateurs personnalisés requis pour l'argument correspondant, tel que <see cref="T:System.Runtime.CompilerServices.IsConst" /> ou <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. Si un argument particulier ne possède pas de modificateur personnalisé requis, spécifiez <see langword="null" /> plutôt qu'un tableau de types. Si aucun des arguments ne possède de modificateur personnalisé requis, spécifiez <see langword="null" /> plutôt qu'un tableau de tableaux.</param>
      <param name="optionalCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding argument, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If a particular argument has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the arguments have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Tableau de tableaux de types. Chaque tableau de types représente les modificateurs personnalisés facultatifs pour l'argument correspondant, tel que <see cref="T:System.Runtime.CompilerServices.IsConst" /> ou <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. Si un argument particulier ne possède pas de modificateur personnalisé facultatif, spécifiez <see langword="null" /> plutôt qu'un tableau de types. Si aucun des arguments ne possède de modificateur personnalisé facultatif, spécifiez <see langword="null" /> plutôt qu'un tableau de tableaux.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="An element of &lt;paramref name=&quot;arguments&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is &lt;see langword=&quot;null&quot; /&gt;. (However, &lt;see langword=&quot;null&quot; /&gt; can be specified for the array of custom modifiers for any argument.)">Un élément de <paramref name="arguments" /> est <see langword="null" />.  

ou - 
Un des modificateurs personnalisés spécifiés est <see langword="null" />. (Toutefois, <see langword="null" /> peut être spécifié pour le tableau de modificateurs personnalisés de tout argument.)</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The signature has already been finished.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an array type.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an open generic type. That is, the &lt;see cref=&quot;P:System.Type.ContainsGenericParameters&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt; for the custom modifier.  &#xA;  &#xA; -or-  &#xA;  &#xA; The size of &lt;paramref name=&quot;requiredCustomModifiers&quot; /&gt; or &lt;paramref name=&quot;optionalCustomModifiers&quot; /&gt; does not equal the size of &lt;paramref name=&quot;arguments&quot; /&gt;.">La signature a déjà été finalisée.  

ou - 
Un des modificateurs personnalisés spécifiés est un type de tableau.  

ou - 
Un des modificateurs personnalisés spécifiés est un type générique ouvert. Cela signifie que la propriété <see cref="P:System.Type.ContainsGenericParameters" /> est <see langword="true" /> pour le modificateur personnalisé.  

ou - 
La taille de <paramref name="requiredCustomModifiers" /> ou <paramref name="optionalCustomModifiers" /> n’est pas égale à la taille de <paramref name="arguments" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddSentinel">
      <summary vsli:raw="Marks the end of a vararg fixed part. This is only used if the caller is creating a vararg signature call site.">Marque la fin d'une partie fixe de vararg. Cela est utilisé uniquement lorsque l'appelant crée un site d'appel de signatures vararg.</summary>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.Equals(System.Object)">
      <summary vsli:raw="Checks if this instance is equal to the given object.">Vérifie si cette instance est égale à l'objet donné.</summary>
      <param name="obj" vsli:raw="The object with which this instance should be compared.">Objet auquel cette instance doit être comparée.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the given object is a &lt;see langword=&quot;SignatureHelper&quot; /&gt; and represents the same signature; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'objet donné est un <see langword="SignatureHelper" /> et s'il représente la même signature ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetFieldSigHelper(System.Reflection.Module)">
      <summary vsli:raw="Returns a signature helper for a field.">Retourne une assistance de signature pour un champ.</summary>
      <param name="mod" vsli:raw="The dynamic module that contains the field for which the &lt;see langword=&quot;SignatureHelper&quot; /&gt; is requested.">Module dynamique qui contient le champ pour lequel <see langword="SignatureHelper" /> est demandé.</param>
      <returns vsli:raw="The &lt;see langword=&quot;SignatureHelper&quot; /&gt; object for a field.">Objet <see langword="SignatureHelper" /> d'un champ.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetHashCode">
      <summary vsli:raw="Creates and returns a hash code for this instance.">Crée et retourne un code de hachage pour cette instance.</summary>
      <returns vsli:raw="The hash code based on the name.">Code de hachage en fonction du nom.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper">
      <summary vsli:raw="Returns a signature helper for a local variable.">Retourne une assistance de signature pour une variable locale.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; for a local variable.">
        <see cref="T:System.Reflection.Emit.SignatureHelper" /> d'une variable locale.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper(System.Reflection.Module)">
      <summary vsli:raw="Returns a signature helper for a local variable.">Retourne une assistance de signature pour une variable locale.</summary>
      <param name="mod" vsli:raw="The dynamic module that contains the local variable for which the &lt;see langword=&quot;SignatureHelper&quot; /&gt; is requested.">Module dynamique qui contient la variable locale pour laquelle <see langword="SignatureHelper" /> est demandé.</param>
      <returns vsli:raw="The &lt;see langword=&quot;SignatureHelper&quot; /&gt; object for a local variable.">Objet <see langword="SignatureHelper" /> d'une variable locale.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.CallingConventions,System.Type)">
      <summary vsli:raw="Returns a signature helper for a method given the method's calling convention and return type.">Retourne une assistance de signature pour une méthode donnée en fonction des conventions d'appel et type de retour de cette dernière.</summary>
      <param name="callingConvention" vsli:raw="The calling convention of the method.">Convention d’appel de la méthode.</param>
      <param name="returnType" vsli:raw="The return type of the method, or &lt;see langword=&quot;null&quot; /&gt; for a void return type (&lt;see langword=&quot;Sub&quot; /&gt; procedure in Visual Basic).">Le type de retour de la méthode, ou <see langword="null" /> pour une procédure (<see langword="Sub" /> avec type de retour void en Visual Basic).</param>
      <returns vsli:raw="The &lt;see langword=&quot;SignatureHelper&quot; /&gt; object for a method.">L’objet <see langword="SignatureHelper" /> pour une méthode.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type)">
      <summary vsli:raw="Returns a signature helper for a method given the method's module, calling convention, and return type.">Retourne une fonction d’assistance de signature pour une méthode en fonction du module de la méthode, de la convention d’appel et du type de retour.</summary>
      <param name="mod" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt; that contains the method for which the &lt;see langword=&quot;SignatureHelper&quot; /&gt; is requested.">Le <see cref="T:System.Reflection.Emit.ModuleBuilder" /> qui contient la méthode pour laquelle la <see langword="SignatureHelper" /> est demandée.</param>
      <param name="callingConvention" vsli:raw="The calling convention of the method.">Convention d’appel de la méthode.</param>
      <param name="returnType" vsli:raw="The return type of the method, or &lt;see langword=&quot;null&quot; /&gt; for a void return type (&lt;see langword=&quot;Sub&quot; /&gt; procedure in Visual Basic).">Le type de retour de la méthode, ou <see langword="null" /> pour une procédure (<see langword="Sub" /> avec type de retour void en Visual Basic).</param>
      <returns vsli:raw="The &lt;see langword=&quot;SignatureHelper&quot; /&gt; object for a method.">L’objet <see langword="SignatureHelper" /> pour une méthode.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mod" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is not a &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;.">
        <paramref name="mod" /> n’est pas un <see cref="T:System.Reflection.Emit.ModuleBuilder" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Type,System.Type[])">
      <summary vsli:raw="Returns a signature helper for a method with a standard calling convention, given the method's module, return type, and argument types.">Retourne une assistance de signature pour une convention d'appel standard, en fonction du module, du type de retour et des types d'arguments de la méthode.</summary>
      <param name="mod" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt; that contains the method for which the &lt;see langword=&quot;SignatureHelper&quot; /&gt; is requested.">Le <see cref="T:System.Reflection.Emit.ModuleBuilder" /> qui contient la méthode pour laquelle la <see langword="SignatureHelper" /> est demandée.</param>
      <param name="returnType" vsli:raw="The return type of the method, or &lt;see langword=&quot;null&quot; /&gt; for a void return type (&lt;see langword=&quot;Sub&quot; /&gt; procedure in Visual Basic).">Le type de retour de la méthode, ou <see langword="null" /> pour une procédure (<see langword="Sub" /> avec type de retour void en Visual Basic).</param>
      <param name="parameterTypes" vsli:raw="The types of the arguments of the method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no arguments.">Types des arguments de la méthode, ou <see langword="null" /> si la méthode ne possède pas d'arguments.</param>
      <returns vsli:raw="The &lt;see langword=&quot;SignatureHelper&quot; /&gt; object for a method.">L’objet <see langword="SignatureHelper" /> pour une méthode.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mod" /> a la valeur <see langword="null" />.  
ou 
Un élément de <paramref name="parameterTypes" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is not a &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;.">
        <paramref name="mod" /> n’est pas un <see cref="T:System.Reflection.Emit.ModuleBuilder" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Returns a signature helper for a property, given the dynamic module that contains the property, the calling convention, the property type, the property arguments, and custom modifiers for the return type and arguments.">Retourne une assistance de signature pour une propriété, en fonction du module dynamique qui contient la propriété, la convention d'appel, le type de propriété, les arguments de la propriété et des modificateurs personnalisés pour le type de retour et les arguments.</summary>
      <param name="mod" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt; that contains the property for which the &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; is requested.">
        <see cref="T:System.Reflection.Emit.ModuleBuilder" /> qui contient la propriété pour laquelle <see cref="T:System.Reflection.Emit.SignatureHelper" /> est demandé.</param>
      <param name="callingConvention" vsli:raw="The calling convention of the property accessors.">Convention d’appel des accesseurs de propriété.</param>
      <param name="returnType" vsli:raw="The property type.">Type de propriété.</param>
      <param name="requiredReturnTypeCustomModifiers" vsli:raw="An array of types representing the required custom modifiers for the return type, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the return type has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Tableau des types représentant les modificateurs personnalisés requis pour le type de retour, tels que <see cref="T:System.Runtime.CompilerServices.IsConst" /> ou <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. Si le type de retour ne possède pas de modificateur personnalisé requis, spécifiez <see langword="null" />.</param>
      <param name="optionalReturnTypeCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers for the return type, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the return type has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Tableau des types représentant les modificateurs personnalisés facultatifs pour le type de retour, tels que <see cref="T:System.Runtime.CompilerServices.IsConst" /> ou <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. Si le type de retour ne possède pas de modificateur personnalisé facultatif, spécifiez <see langword="null" />.</param>
      <param name="parameterTypes" vsli:raw="The types of the property's arguments, or &lt;see langword=&quot;null&quot; /&gt; if the property has no arguments.">Types des arguments de la propriété, ou <see langword="null" /> si la propriété ne possède pas d'argument.</param>
      <param name="requiredParameterTypeCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding argument of the property. If a particular argument has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If the property has no arguments, or if none of the arguments have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Tableau de tableaux de types. Chaque tableau de types représente les modificateurs personnalisés requis pour l'argument correspondant de la propriété. Si un argument particulier ne possède pas de modificateur personnalisé requis, spécifiez <see langword="null" /> plutôt qu'un tableau de types. Si la propriété ne possède pas d'argument, ou si aucun des arguments ne possède de modificateur personnalisé requis, spécifiez <see langword="null" /> plutôt qu'un tableau de tableaux.</param>
      <param name="optionalParameterTypeCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding argument of the property. If a particular argument has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If the property has no arguments, or if none of the arguments have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Tableau de tableaux de types. Chaque tableau de types représente les modificateurs personnalisés facultatifs pour l'argument correspondant de la propriété. Si un argument particulier ne possède pas de modificateur personnalisé facultatif, spécifiez <see langword="null" /> plutôt qu'un tableau de types. Si la propriété ne possède pas d'argument, ou si aucun des arguments ne possède de modificateur personnalisé facultatif, spécifiez <see langword="null" /> plutôt qu'un tableau de tableaux.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; object for a property.">Objet <see cref="T:System.Reflection.Emit.SignatureHelper" /> d'une propriété.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is &lt;see langword=&quot;null&quot; /&gt;. (However, &lt;see langword=&quot;null&quot; /&gt; can be specified for the array of custom modifiers for any argument.)">
        <paramref name="mod" /> est <see langword="null" />.  
ou 
Un élément de <paramref name="parameterTypes" /> est <see langword="null" />.  

ou - 
Un des modificateurs personnalisés spécifiés est <see langword="null" />. (Toutefois, <see langword="null" /> peut être spécifié pour le tableau de modificateurs personnalisés de tout argument.)</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The signature has already been finished.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;mod&quot; /&gt; is not a &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an array type.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an open generic type. That is, the &lt;see cref=&quot;P:System.Type.ContainsGenericParameters&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt; for the custom modifier.  &#xA;  &#xA; -or-  &#xA;  &#xA; The size of &lt;paramref name=&quot;requiredParameterTypeCustomModifiers&quot; /&gt; or &lt;paramref name=&quot;optionalParameterTypeCustomModifiers&quot; /&gt; does not equal the size of &lt;paramref name=&quot;parameterTypes&quot; /&gt;.">La signature a déjà été finalisée.  
ou 
 <paramref name="mod" /> n'est pas un <see cref="T:System.Reflection.Emit.ModuleBuilder" />.  

ou - 
Un des modificateurs personnalisés spécifiés est un type de tableau.  

ou - 
Un des modificateurs personnalisés spécifiés est un type générique ouvert. Cela signifie que la propriété <see cref="P:System.Type.ContainsGenericParameters" /> est <see langword="true" /> pour le modificateur personnalisé.  

ou - 
La taille de <paramref name="requiredParameterTypeCustomModifiers" /> ou <paramref name="optionalParameterTypeCustomModifiers" /> n’est pas égale à la taille de <paramref name="parameterTypes" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[])">
      <summary vsli:raw="Returns a signature helper for a property, given the dynamic module that contains the property, the property type, and the property arguments.">Retourne une assistance de signature pour une propriété, en fonction du module dynamique qui contient la propriété, du type de propriété et des arguments de la propriété.</summary>
      <param name="mod" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt; that contains the property for which the &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; is requested.">
        <see cref="T:System.Reflection.Emit.ModuleBuilder" /> qui contient la propriété pour laquelle <see cref="T:System.Reflection.Emit.SignatureHelper" /> est demandé.</param>
      <param name="returnType" vsli:raw="The property type.">Type de propriété.</param>
      <param name="parameterTypes" vsli:raw="The argument types, or &lt;see langword=&quot;null&quot; /&gt; if the property has no arguments.">Types d'arguments, ou <see langword="null" /> si la propriété ne possède pas d'argument.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; object for a property.">Objet <see cref="T:System.Reflection.Emit.SignatureHelper" /> d'une propriété.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mod" /> est <see langword="null" />.  

ou - 
Un élément de <paramref name="parameterTypes" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is not a &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;.">
        <paramref name="mod" /> n’est pas un <see cref="T:System.Reflection.Emit.ModuleBuilder" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Returns a signature helper for a property, given the dynamic module that contains the property, the property type, the property arguments, and custom modifiers for the return type and arguments.">Retourne une assistance de signature pour une propriété, en fonction du module dynamique qui contient la propriété, du type de propriété, des arguments de la propriété et des modificateurs personnalisés pour le type de retour et les arguments.</summary>
      <param name="mod" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt; that contains the property for which the &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; is requested.">
        <see cref="T:System.Reflection.Emit.ModuleBuilder" /> qui contient la propriété pour laquelle <see cref="T:System.Reflection.Emit.SignatureHelper" /> est demandé.</param>
      <param name="returnType" vsli:raw="The property type.">Type de propriété.</param>
      <param name="requiredReturnTypeCustomModifiers" vsli:raw="An array of types representing the required custom modifiers for the return type, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the return type has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Tableau des types représentant les modificateurs personnalisés requis pour le type de retour, tels que <see cref="T:System.Runtime.CompilerServices.IsConst" /> ou <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. Si le type de retour ne possède pas de modificateur personnalisé requis, spécifiez <see langword="null" />.</param>
      <param name="optionalReturnTypeCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers for the return type, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the return type has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Tableau des types représentant les modificateurs personnalisés facultatifs pour le type de retour, tels que <see cref="T:System.Runtime.CompilerServices.IsConst" /> ou <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. Si le type de retour ne possède pas de modificateur personnalisé facultatif, spécifiez <see langword="null" />.</param>
      <param name="parameterTypes" vsli:raw="The types of the property's arguments, or &lt;see langword=&quot;null&quot; /&gt; if the property has no arguments.">Types des arguments de la propriété, ou <see langword="null" /> si la propriété ne possède pas d'argument.</param>
      <param name="requiredParameterTypeCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding argument of the property. If a particular argument has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If the property has no arguments, or if none of the arguments have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Tableau de tableaux de types. Chaque tableau de types représente les modificateurs personnalisés requis pour l'argument correspondant de la propriété. Si un argument particulier ne possède pas de modificateur personnalisé requis, spécifiez <see langword="null" /> plutôt qu'un tableau de types. Si la propriété ne possède pas d'argument, ou si aucun des arguments ne possède de modificateur personnalisé requis, spécifiez <see langword="null" /> plutôt qu'un tableau de tableaux.</param>
      <param name="optionalParameterTypeCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding argument of the property. If a particular argument has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If the property has no arguments, or if none of the arguments have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Tableau de tableaux de types. Chaque tableau de types représente les modificateurs personnalisés facultatifs pour l'argument correspondant de la propriété. Si un argument particulier ne possède pas de modificateur personnalisé facultatif, spécifiez <see langword="null" /> plutôt qu'un tableau de types. Si la propriété ne possède pas d'argument, ou si aucun des arguments ne possède de modificateur personnalisé facultatif, spécifiez <see langword="null" /> plutôt qu'un tableau de tableaux.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; object for a property.">Objet <see cref="T:System.Reflection.Emit.SignatureHelper" /> d'une propriété.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is &lt;see langword=&quot;null&quot; /&gt;. (However, &lt;see langword=&quot;null&quot; /&gt; can be specified for the array of custom modifiers for any argument.)">
        <paramref name="mod" /> a la valeur <see langword="null" />.  

ou - 
Un élément de <paramref name="parameterTypes" /> est <see langword="null" />.  

ou 
Un des modificateurs personnalisés spécifiés est <see langword="null" />. (Toutefois, <see langword="null" /> peut être spécifié pour le tableau de modificateurs personnalisés de tout argument.)</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The signature has already been finished.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;mod&quot; /&gt; is not a &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an array type.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an open generic type. That is, the &lt;see cref=&quot;P:System.Type.ContainsGenericParameters&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt; for the custom modifier.  &#xA;  &#xA; -or-  &#xA;  &#xA; The size of &lt;paramref name=&quot;requiredParameterTypeCustomModifiers&quot; /&gt; or &lt;paramref name=&quot;optionalParameterTypeCustomModifiers&quot; /&gt; does not equal the size of &lt;paramref name=&quot;parameterTypes&quot; /&gt;.">La signature a déjà été finalisée.  

ou - 
<paramref name="mod" /> n'est pas un <see cref="T:System.Reflection.Emit.ModuleBuilder" />.  

ou - 
Un des modificateurs personnalisés spécifiés est un type de tableau.  


ou 
Un des modificateurs personnalisés spécifiés est un type générique ouvert. Cela signifie que la propriété <see cref="P:System.Type.ContainsGenericParameters" /> est <see langword="true" /> pour le modificateur personnalisé.  

ou - 
La taille de <paramref name="requiredParameterTypeCustomModifiers" /> ou <paramref name="optionalParameterTypeCustomModifiers" /> n’est pas égale à la taille de <paramref name="parameterTypes" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetSignature">
      <summary vsli:raw="Adds the end token to the signature and marks the signature as finished, so no further tokens can be added.">Ajoute le jeton de fin à la signature et marque cette dernière comme terminée ; aucun autre jeton ne peut lui être ajouté.</summary>
      <returns vsli:raw="A byte array made up of the full signature.">Tableau d’octets composé de la signature complète.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.ToString">
      <summary vsli:raw="Returns a string representing the signature arguments.">Retourne une chaîne représentant les arguments de la signature.</summary>
      <returns vsli:raw="A string representing the arguments of this signature.">Chaîne représentant les arguments de cette signature.</returns>
    </member>
  </members>
</doc>
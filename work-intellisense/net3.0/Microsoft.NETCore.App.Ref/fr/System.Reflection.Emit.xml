<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Reflection.Emit</name>
  </assembly>
  <members>
    <member name="T:System.Reflection.Emit.AssemblyBuilder">
      <summary vsli:raw="Defines and represents a dynamic assembly.">Définit et représente un assembly dynamique.</summary>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.CodeBase">
      <summary vsli:raw="Gets the location of the assembly, as specified originally (such as in an &lt;see cref=&quot;T:System.Reflection.AssemblyName&quot; /&gt; object).">Obtient l’emplacement de l’assembly, telle que spécifié à l’origine (par exemple dans un objet <see cref="T:System.Reflection.AssemblyName" />).</summary>
      <returns vsli:raw="The location of the assembly, as specified originally.">Emplacement de l’assembly, tel que spécifié à l’origine.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">Cette méthode n’est pas prise en charge pour l’instant.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">L'appelant n'a pas l'autorisation requise.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)">
      <summary vsli:raw="Defines a dynamic assembly that has the specified name and access rights.">Définit un assembly dynamique avec le nom et les droits d'accès spécifiés.</summary>
      <param name="name" vsli:raw="The name of the assembly.">Nom de l'assembly.</param>
      <param name="access" vsli:raw="The access rights of the assembly.">Droits d'accès de l'assembly.</param>
      <returns vsli:raw="An object that represents the new assembly.">Objet qui représente le nouvel assembly.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
      <summary vsli:raw="Defines a new assembly that has the specified name, access rights, and attributes.">Définit un nouvel assembly avec le nom, les droits d'accès et les attributs spécifiés.</summary>
      <param name="name" vsli:raw="The name of the assembly.">Nom de l'assembly.</param>
      <param name="access" vsli:raw="The access rights of the assembly.">Droits d'accès de l'assembly.</param>
      <param name="assemblyAttributes" vsli:raw="A collection that contains the attributes of the assembly.">Collection qui contient les attributs de l'assembly.</param>
      <returns vsli:raw="An object that represents the new assembly.">Objet qui représente le nouvel assembly.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String)">
      <summary vsli:raw="Defines a named transient dynamic module in this assembly.">Définit un module dynamique transitoire nommé dans cet assembly.</summary>
      <param name="name" vsli:raw="The name of the dynamic module.">Nom du module dynamique.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt; representing the defined dynamic module.">
        <see cref="T:System.Reflection.Emit.ModuleBuilder" /> représentant le module dynamique défini.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; begins with white space.&#xA;&#xA; -or-&#xA;&#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.&#xA;&#xA; -or-&#xA;&#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; is greater than the system-defined maximum length.">
        <paramref name="name" /> commence par un espace blanc.  

ou - 
La longueur de <paramref name="name" /> est égale à zéro.  

ou 
La longueur de <paramref name="name" /> est supérieure à la longueur maximale définie par le système.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> est <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">L'appelant n'a pas l'autorisation requise.</exception>
      <exception cref="T:System.ExecutionEngineException" vsli:raw="The assembly for default symbol writer cannot be loaded.&#xA;&#xA; -or-&#xA;&#xA; The type that implements the default symbol writer interface cannot be found.">L'assembly du writer de symbole par défaut ne peut pas être chargé.  

ou -  

 Le type qui implémente l'interface du writer de symbole par défaut est introuvable.</exception>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.EntryPoint">
      <summary vsli:raw="Returns the entry point of this assembly.">Retourne le point d'entrée de cet assembly.</summary>
      <returns vsli:raw="The entry point of this assembly.">Point d'entrée de cet assembly.</returns>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">L'appelant n'a pas l'autorisation requise.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to the specified object.">Retourne une valeur qui indique si cette instance équivaut à l’objet spécifié.</summary>
      <param name="obj" vsli:raw="An object to compare with this instance, or &lt;see langword=&quot;null&quot; /&gt;.">Objet à comparer à cette instance ou <see langword="null" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="obj" /> est égal au type et à la valeur de cette instance ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.FullName">
      <summary vsli:raw="Gets the display name of the current dynamic assembly.">Obtient le nom complet de l'assembly dynamique actuel.</summary>
      <returns vsli:raw="The display name of the dynamic assembly.">Nom complet de l'assembly dynamique.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes that have been applied to the current &lt;see cref=&quot;T:System.Reflection.Emit.AssemblyBuilder&quot; /&gt;.">Retourne tous les attributs personnalisés qui ont été appliqués au <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> actuel.</summary>
      <param name="inherit" vsli:raw="This argument is ignored for objects of this type.">Cet argument est ignoré pour les objets de ce type.</param>
      <returns vsli:raw="An array that contains the custom attributes; the array is empty if there are no attributes.">Un tableau qui contient les attributs personnalisés ; le tableau est vide s’il n’existe pas d’attributs.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes that have been applied to the current &lt;see cref=&quot;T:System.Reflection.Emit.AssemblyBuilder&quot; /&gt;, and that derive from a specified attribute type.">Retourne tous les attributs personnalisés qui ont été appliqués à l’élément <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> actuel et qui dérivent d’un type d’attribut spécifié.</summary>
      <param name="attributeType" vsli:raw="The base type from which attributes derive.">Type de base duquel dérivent des attributs.</param>
      <param name="inherit" vsli:raw="This argument is ignored for objects of this type.">Cet argument est ignoré pour les objets de ce type.</param>
      <returns vsli:raw="An array that contains the custom attributes that are derived at any level from &lt;paramref name=&quot;attributeType&quot; /&gt;; the array is empty if there are no such attributes.">Tableau qui contient les attributs personnalisés dérivés à tous les niveaux de <paramref name="attributeType" /> ; le tableau est vide si de tels attributs n'existent pas.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="attributeType" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is not a &lt;see cref=&quot;T:System.Type&quot; /&gt; object supplied by the runtime. For example, &lt;paramref name=&quot;attributeType&quot; /&gt; is a &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; object.">
        <paramref name="attributeType" /> n’est pas un objet <see cref="T:System.Type" /> fourni par le runtime. Par exemple, <paramref name="attributeType" /> est un objet <see cref="T:System.Reflection.Emit.TypeBuilder" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetCustomAttributesData">
      <summary vsli:raw="Returns &lt;see cref=&quot;T:System.Reflection.CustomAttributeData&quot; /&gt; objects that contain information about the attributes that have been applied to the current &lt;see cref=&quot;T:System.Reflection.Emit.AssemblyBuilder&quot; /&gt;.">Retourne des objets <see cref="T:System.Reflection.CustomAttributeData" /> qui contiennent des informations sur les attributs appliqués au <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> actuel.</summary>
      <returns vsli:raw="A generic list of &lt;see cref=&quot;T:System.Reflection.CustomAttributeData&quot; /&gt; objects representing data about the attributes that have been applied to the current module.">Liste générique d’objets <see cref="T:System.Reflection.CustomAttributeData" /> représentant des données sur les attributs qui ont été appliqués au module actuel.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule(System.String)">
      <summary vsli:raw="Returns the dynamic module with the specified name.">Retourne le module dynamique avec le nom spécifié.</summary>
      <param name="name" vsli:raw="The name of the requested dynamic module.">Nom du module dynamique demandé.</param>
      <returns vsli:raw="A ModuleBuilder object representing the requested dynamic module.">Objet ModuleBuilder représentant le module dynamique demandé.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.">La longueur de <paramref name="name" /> est égale à zéro.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">L'appelant n'a pas l'autorisation requise.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetExportedTypes">
      <summary vsli:raw="Gets the exported types defined in this assembly.">Obtient les types exportés définis dans cet assembly.</summary>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; containing the exported types defined in this assembly.">Tableau de <see cref="T:System.Type" /> contenant les types exportés définis dans cet assembly.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented.">Cette méthode n’est pas implémentée.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">L'appelant n'a pas l'autorisation requise.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetFile(System.String)">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.IO.FileStream&quot; /&gt; for the specified file in the file table of the manifest of this assembly.">Obtient un <see cref="T:System.IO.FileStream" /> pour le fichier spécifié dans la table de fichiers du manifeste de cet assembly.</summary>
      <param name="name" vsli:raw="The name of the specified file.">Nom du fichier spécifié.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.IO.FileStream&quot; /&gt; for the specified file, or &lt;see langword=&quot;null&quot; /&gt;, if the file is not found.">
        <see cref="T:System.IO.FileStream" /> du fichier spécifié, ou <see langword="null" /> si le fichier est introuvable.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">Cette méthode n’est pas prise en charge pour l’instant.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">L'appelant n'a pas l'autorisation requise.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetFiles(System.Boolean)">
      <summary vsli:raw="Gets the files in the file table of an assembly manifest, specifying whether to include resource modules.">Obtient les fichiers de la table de fichiers d'un manifeste d'assembly, en spécifiant si des modules de ressources doivent être inclus.</summary>
      <param name="getResourceModules" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include resource modules; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour inclure des modules de ressources ; sinon, <see langword="false" />.</param>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.IO.FileStream&quot; /&gt; objects.">Tableau d'objets <see cref="T:System.IO.FileStream" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">Cette méthode n’est pas prise en charge pour l’instant.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">L'appelant n'a pas l'autorisation requise.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retourne le code de hachage de cette instance.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Code de hachage d'un entier signé 32 bits.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetLoadedModules(System.Boolean)">
      <summary vsli:raw="Returns all the loaded modules that are part of this assembly, and optionally includes resource modules.">Retourne tous les modules chargés qui font partie de cet assembly et inclut éventuellement des modules de ressources.</summary>
      <param name="getResourceModules" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include resource modules; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour inclure des modules de ressources ; sinon, <see langword="false" />.</param>
      <returns vsli:raw="The loaded modules that are part of this assembly.">Modules chargés qui font partie de cet assembly.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceInfo(System.String)">
      <summary vsli:raw="Returns information about how the given resource has been persisted.">Retourne des informations sur la manière dont la ressource donnée a été persistante.</summary>
      <param name="resourceName" vsli:raw="The name of the resource.">Nom de la ressource.</param>
      <returns vsli:raw="&lt;see cref=&quot;T:System.Reflection.ManifestResourceInfo&quot; /&gt; populated with information about the resource's topology, or &lt;see langword=&quot;null&quot; /&gt; if the resource is not found.">
        <see cref="T:System.Reflection.ManifestResourceInfo" /> rempli d'informations sur la topologie de la ressource, ou <see langword="null" /> si la ressource est introuvable.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">Cette méthode n’est pas prise en charge pour l’instant.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">L'appelant n'a pas l'autorisation requise.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceNames">
      <summary vsli:raw="Loads the specified manifest resource from this assembly.">Charge la ressource de manifeste spécifiée à partir de cet assembly.</summary>
      <returns vsli:raw="An array of type &lt;see langword=&quot;String&quot; /&gt; containing the names of all the resources.">Tableau de type <see langword="String" /> contenant les noms de toutes les ressources.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported on a dynamic assembly. To get the manifest resource names, use &lt;see cref=&quot;M:System.Reflection.Assembly.GetManifestResourceNames&quot; /&gt;.">Cette méthode n'est pas prise en charge sur un assembly dynamique. Pour obtenir les noms des ressources de manifeste, utilisez <see cref="M:System.Reflection.Assembly.GetManifestResourceNames" />.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">L'appelant n'a pas l'autorisation requise.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream(System.String)">
      <summary vsli:raw="Loads the specified manifest resource from this assembly.">Charge la ressource de manifeste spécifiée à partir de cet assembly.</summary>
      <param name="name" vsli:raw="The name of the manifest resource being requested.">Nom de la ressource de manifeste demandée.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; representing this manifest resource.">
        <see cref="T:System.IO.Stream" /> représentant cette ressource de manifeste.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">Cette méthode n’est pas prise en charge pour l’instant.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">L'appelant n'a pas l'autorisation requise.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream(System.Type,System.String)">
      <summary vsli:raw="Loads the specified manifest resource, scoped by the namespace of the specified type, from this assembly.">Charge la ressource de manifeste spécifiée, dont la portée est définie par l'espace de noms du type déterminé, à partir de cet assembly.</summary>
      <param name="type" vsli:raw="The type whose namespace is used to scope the manifest resource name.">Type dont l'espace de noms définit la portée du nom de la ressource de manifeste.</param>
      <param name="name" vsli:raw="The name of the manifest resource being requested.">Nom de la ressource de manifeste demandée.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; representing this manifest resource.">
        <see cref="T:System.IO.Stream" /> représentant cette ressource de manifeste.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">Cette méthode n’est pas prise en charge pour l’instant.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">L'appelant n'a pas l'autorisation requise.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetModule(System.String)">
      <summary vsli:raw="Gets the specified module in this assembly.">Obtient le module spécifié dans cet assembly.</summary>
      <param name="name" vsli:raw="The name of the requested module.">Nom du module demandé.</param>
      <returns vsli:raw="The module being requested, or &lt;see langword=&quot;null&quot; /&gt; if the module is not found.">Module demandé, ou <see langword="null" /> si le module est introuvable.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetModules(System.Boolean)">
      <summary vsli:raw="Gets all the modules that are part of this assembly, and optionally includes resource modules.">Obtient tous les modules qui font partie de cet assembly et inclut éventuellement des modules de ressources.</summary>
      <param name="getResourceModules" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include resource modules; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour inclure des modules de ressources ; sinon, <see langword="false" />.</param>
      <returns vsli:raw="The modules that are part of this assembly.">Modules qui font partie de cet assembly.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetName(System.Boolean)">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Reflection.AssemblyName&quot; /&gt; that was specified when the current dynamic assembly was created, and sets the code base as specified.">Obtient le <see cref="T:System.Reflection.AssemblyName" /> spécifié lorsque l'assembly dynamique actuel a été créé, puis définit la base de code comme spécifié.</summary>
      <param name="copiedName" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to set the code base to the location of the assembly after it is shadow-copied; &lt;see langword=&quot;false&quot; /&gt; to set the code base to the original location.">
        <see langword="true" /> pour définir la base de code en fonction de l'emplacement de l'assembly après la création d'un cliché instantané de ce dernier ; <see langword="false" /> pour définir la base de code en fonction de l'emplacement d'origine.</param>
      <returns vsli:raw="The name of the dynamic assembly.">Nom de l'assembly dynamique.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetReferencedAssemblies">
      <summary vsli:raw="Gets an incomplete list of &lt;see cref=&quot;T:System.Reflection.AssemblyName&quot; /&gt; objects for the assemblies that are referenced by this &lt;see cref=&quot;T:System.Reflection.Emit.AssemblyBuilder&quot; /&gt;.">Obtient une liste incomplète d'objets <see cref="T:System.Reflection.AssemblyName" /> pour les assemblys référencés par <see cref="T:System.Reflection.Emit.AssemblyBuilder" />.</summary>
      <returns vsli:raw="An array of assembly names for the referenced assemblies. This array is not a complete list.">Tableau de noms d'assemblys pour les assemblys référencés. Ce tableau n'est pas une liste complète.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetSatelliteAssembly(System.Globalization.CultureInfo)">
      <summary vsli:raw="Gets the satellite assembly for the specified culture.">Obtient l'assembly satellite pour la culture spécifiée.</summary>
      <param name="culture" vsli:raw="The specified culture.">Culture spécifiée.</param>
      <returns vsli:raw="The specified satellite assembly.">Assembly satellite spécifié.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;culture&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="culture" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException" vsli:raw="The assembly cannot be found.">L’assembly est introuvable.</exception>
      <exception cref="T:System.IO.FileLoadException" vsli:raw="The satellite assembly with a matching file name was found, but the &lt;see langword=&quot;CultureInfo&quot; /&gt; did not match the one specified.">L’assembly satellite avec un nom de fichier correspondant a été trouvé, mais l’élément <see langword="CultureInfo" /> ne correspondait pas à l’élément spécifié.</exception>
      <exception cref="T:System.BadImageFormatException" vsli:raw="The satellite assembly is not a valid assembly.">L’assembly satellite n’est pas un assembly valide.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetSatelliteAssembly(System.Globalization.CultureInfo,System.Version)">
      <summary vsli:raw="Gets the specified version of the satellite assembly for the specified culture.">Obtient la version spécifiée de l'assembly satellite pour la culture donnée.</summary>
      <param name="culture" vsli:raw="The specified culture.">Culture spécifiée.</param>
      <param name="version" vsli:raw="The version of the satellite assembly.">Version de l'assembly satellite.</param>
      <returns vsli:raw="The specified satellite assembly.">Assembly satellite spécifié.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;culture&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="culture" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileLoadException" vsli:raw="The satellite assembly with a matching file name was found, but the &lt;see langword=&quot;CultureInfo&quot; /&gt; or the version did not match the one specified.">L’assembly satellite avec un nom de fichier correspondant a été trouvé, mais l’élément <see langword="CultureInfo" /> ou la version ne correspondait pas à l’élément spécifié.</exception>
      <exception cref="T:System.IO.FileNotFoundException" vsli:raw="The assembly cannot be found.">L’assembly est introuvable.</exception>
      <exception cref="T:System.BadImageFormatException" vsli:raw="The satellite assembly is not a valid assembly.">L’assembly satellite n’est pas un assembly valide.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetType(System.String,System.Boolean,System.Boolean)">
      <summary vsli:raw="Gets the specified type from the types that have been defined and created in the current &lt;see cref=&quot;T:System.Reflection.Emit.AssemblyBuilder&quot; /&gt;.">Obtient le type spécifié à partir des types définis et créés dans le <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> actuel.</summary>
      <param name="name" vsli:raw="The name of the type to search for.">Nom du type à rechercher.</param>
      <param name="throwOnError" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to throw an exception if the type is not found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour lever une exception si le type est introuvable ; sinon, <see langword="false" />.</param>
      <param name="ignoreCase" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to ignore the case of the type name when searching; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour ignorer la casse du nom de type lors de la recherche ; sinon, <see langword="false" />.</param>
      <returns vsli:raw="The specified type, or &lt;see langword=&quot;null&quot; /&gt; if the type is not found or has not been created yet.">Type spécifié, ou <see langword="null" /> si le type est introuvable ou s'il n'a pas encore été créé.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.GlobalAssemblyCache">
      <summary>Obtient une valeur qui indique si l'assembly a été chargé à partir du Global Assembly Cache.</summary>
      <returns>Toujours <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.HostContext">
      <summary vsli:raw="Gets the host context where the dynamic assembly is being created.">Obtient le contexte hôte où l’assembly dynamique est créé.</summary>
      <returns vsli:raw="A value that indicates the host context where the dynamic assembly is being created.">Valeur qui indique le contexte hôte où l’assembly dynamique est créé.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.ImageRuntimeVersion">
      <summary>Obtient la version du Common Language Runtime (CLR) qui sera enregistré dans le fichier contenant le manifeste.</summary>
      <returns>Chaîne représentant la version du Common Language Runtime.</returns>
      <exception cref="T:System.Security.SecurityException">L'appelant n'a pas l'autorisation requise.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Returns a value that indicates whether one or more instances of the specified attribute type is applied to this member.">Retourne une valeur qui indique si une ou plusieurs instances du type d'attribut spécifié sont appliquées à ce membre.</summary>
      <param name="attributeType" vsli:raw="The type of attribute to test for.">Type d'attribut à tester.</param>
      <param name="inherit" vsli:raw="This argument is ignored for objects of this type.">Cet argument est ignoré pour les objets de ce type.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more instances of &lt;paramref name=&quot;attributeType&quot; /&gt; is applied to this dynamic assembly; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si une ou plusieurs instances de <paramref name="attributeType" /> sont appliquées à cet assembly dynamique ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.IsDynamic">
      <summary vsli:raw="Gets a value that indicates that the current assembly is a dynamic assembly.">Obtient une valeur qui indique que l'assembly actuel est dynamique.</summary>
      <returns vsli:raw="Always &lt;see langword=&quot;true&quot; /&gt;.">Toujours <see langword="true" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.Location">
      <summary vsli:raw="Gets the location, in codebase format, of the loaded file that contains the manifest if it is not shadow-copied.">Obtient l'emplacement, en format code base, du fichier chargé qui contient le manifeste, s'il ne s'agit pas d'un cliché instantané.</summary>
      <returns vsli:raw="The location of the loaded file that contains the manifest. If the loaded file has been shadow-copied, the &lt;see langword=&quot;Location&quot; /&gt; is that of the file before being shadow-copied.">Emplacement du fichier chargé qui contient le manifeste. Si le fichier chargé est un cliché instantané, le <see langword="Location" /> est celui du fichier avant l'exécution du cliché instantané.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">Cette méthode n’est pas prise en charge pour l’instant.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">L'appelant n'a pas l'autorisation requise.</exception>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.ManifestModule">
      <summary vsli:raw="Gets the module in the current &lt;see cref=&quot;T:System.Reflection.Emit.AssemblyBuilder&quot; /&gt; that contains the assembly manifest.">Obtient le module du <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> actuel qui contient le manifeste de l'assembly.</summary>
      <returns vsli:raw="The manifest module.">Module de manifeste.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.ReflectionOnly">
      <summary vsli:raw="Gets a value indicating whether the dynamic assembly is in the reflection-only context.">Obtient une valeur indiquant si l'assembly dynamique est dans le contexte de réflexion uniquement.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dynamic assembly is in the reflection-only context; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'assembly dynamique est dans le contexte de réflexion uniquement ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Set a custom attribute on this assembly using a specified custom attribute blob.">Définit un attribut personnalisé sur cet assembly à l'aide du blob d'attribut personnalisé spécifié.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">Le constructeur de l’attribut personnalisé.</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">Objet blob d’octets représentant les attributs.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> ou <paramref name="binaryAttribute" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">L'appelant n'a pas l'autorisation requise.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is not a &lt;see langword=&quot;RuntimeConstructorInfo&quot; /&gt; object.">
        <paramref name="con" /> n’est pas un objet <see langword="RuntimeConstructorInfo" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Set a custom attribute on this assembly using a custom attribute builder.">Définit un attribut personnalisé sur cet assembly à l'aide d'un générateur d'attributs personnalisés.</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to define the custom attribute.">Instance d’une classe d’assistance pour définir l’attribut personnalisé.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">L'appelant n'a pas l'autorisation requise.</exception>
    </member>
    <member name="T:System.Reflection.Emit.AssemblyBuilderAccess">
      <summary vsli:raw="Defines the access modes for a dynamic assembly.">Définit les modes d'accès d'un assembly dynamique.</summary>
    </member>
    <member name="F:System.Reflection.Emit.AssemblyBuilderAccess.Run">
      <summary vsli:raw="The dynamic assembly can be executed, but not saved.">L'assembly dynamique peut être exécuté, mais pas enregistré.</summary>
    </member>
    <member name="F:System.Reflection.Emit.AssemblyBuilderAccess.RunAndCollect">
      <summary vsli:raw="The dynamic assembly will be automatically unloaded and its memory reclaimed, when it's no longer accessible.">L’assembly dynamique est automatiquement déchargé et sa mémoire libérée, quand il n’est plus accessible.</summary>
    </member>
    <member name="T:System.Reflection.Emit.ConstructorBuilder">
      <summary vsli:raw="Defines and represents a constructor of a dynamic class.">Définit et représente un constructeur de classe dynamique.</summary>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.Attributes">
      <summary vsli:raw="Gets the attributes for this constructor.">Obtient les attributs de ce constructeur.</summary>
      <returns vsli:raw="The attributes for this constructor.">Attributs de ce constructeur.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.CallingConvention">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Reflection.CallingConventions&quot; /&gt; value that depends on whether the declaring type is generic.">Obtient une valeur <see cref="T:System.Reflection.CallingConventions" /> qui varie selon que le type de déclaration est générique ou non.</summary>
      <returns vsli:raw="&lt;see cref=&quot;F:System.Reflection.CallingConventions.HasThis&quot; /&gt; if the declaring type is generic; otherwise, &lt;see cref=&quot;F:System.Reflection.CallingConventions.Standard&quot; /&gt;.">
        <see cref="F:System.Reflection.CallingConventions.HasThis" /> si le type de déclaration est générique ; sinon, <see cref="F:System.Reflection.CallingConventions.Standard" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.DeclaringType">
      <summary vsli:raw="Gets a reference to the &lt;see cref=&quot;T:System.Type&quot; /&gt; object for the type that declares this member.">Obtient une référence à l’objet <see cref="T:System.Type" /> pour le type qui déclare ce membre.</summary>
      <returns vsli:raw="The type that declares this member.">Type qui déclare ce membre.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
      <summary vsli:raw="Defines a parameter of this constructor.">Définit un paramètre pour ce constructeur.</summary>
      <param name="iSequence" vsli:raw="The position of the parameter in the parameter list. Parameters are indexed beginning with the number 1 for the first parameter.">Position du paramètre dans la liste des paramètres. Les paramètres sont indexés en assignant le nombre 1 au premier paramètre.</param>
      <param name="attributes" vsli:raw="The attributes of the parameter.">Attributs du paramètres.</param>
      <param name="strParamName" vsli:raw="The name of the parameter. The name can be the null string.">Nom du paramètre. Le nom peut être la chaîne Null.</param>
      <returns vsli:raw="An object that represents the new parameter of this constructor.">Objet qui représente le nouveau paramètre de ce constructeur.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;iSequence&quot; /&gt; is less than 0 (zero), or it is greater than the number of parameters of the constructor.">
        <paramref name="iSequence" /> est inférieur à 0 (zéro), ou est supérieur au nombre de paramètres du constructeur.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">Le type conteneur a été créé à l’aide de <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes defined for this constructor.">Retourne tous les attributs personnalisés définis pour ce constructeur.</summary>
      <param name="inherit" vsli:raw="Controls inheritance of custom attributes from base classes. This parameter is ignored.">Contrôle l'héritage des attributs personnalisés des classes de base. Ce paramètre est ignoré.</param>
      <returns vsli:raw="An array of objects representing all the custom attributes of the constructor represented by this &lt;see cref=&quot;T:System.Reflection.Emit.ConstructorBuilder&quot; /&gt; instance.">Tableau d’objets représentant tous les attributs personnalisés du constructeur représenté par cette instance <see cref="T:System.Reflection.Emit.ConstructorBuilder" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">Cette méthode n’est pas prise en charge pour l’instant.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Returns the custom attributes identified by the given type.">Retourne les attributs personnalisés identifiés par le type donné.</summary>
      <param name="attributeType" vsli:raw="The custom attribute type.">Type de l'attribut personnalisé.</param>
      <param name="inherit" vsli:raw="Controls inheritance of custom attributes from base classes. This parameter is ignored.">Contrôle l'héritage des attributs personnalisés des classes de base. Ce paramètre est ignoré.</param>
      <returns vsli:raw="An object array that represents the attributes of this constructor.">Tableau d’objets qui représente les attributs de ce constructeur.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">Cette méthode n’est pas prise en charge pour l’instant.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetILGenerator">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; for this constructor.">Obtient un <see cref="T:System.Reflection.Emit.ILGenerator" /> pour ce constructeur.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; object for this constructor.">Objet <see cref="T:System.Reflection.Emit.ILGenerator" /> pour ce constructeur.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The constructor is a parameterless constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The constructor has &lt;see cref=&quot;T:System.Reflection.MethodAttributes&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.MethodImplAttributes&quot; /&gt; flags indicating that it should not have a method body.">Le constructeur est un constructeur sans paramètre.  
ou 
Le constructeur possède des indicateurs <see cref="T:System.Reflection.MethodAttributes" /> ou <see cref="T:System.Reflection.MethodImplAttributes" /> signalant qu'il ne doit pas posséder de corps de méthode.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetILGenerator(System.Int32)">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; object, with the specified MSIL stream size, that can be used to build a method body for this constructor.">Obtient un objet <see cref="T:System.Reflection.Emit.ILGenerator" />, avec la taille du flux MSIL spécifiée, permettant de construire un corps de méthode pour ce constructeur.</summary>
      <param name="streamSize" vsli:raw="The size of the MSIL stream, in bytes.">Taille du flux MSIL en octets.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; for this constructor.">
        <see cref="T:System.Reflection.Emit.ILGenerator" /> pour ce constructeur.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The constructor is a parameterless constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The constructor has &lt;see cref=&quot;T:System.Reflection.MethodAttributes&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.MethodImplAttributes&quot; /&gt; flags indicating that it should not have a method body.">Le constructeur est un constructeur sans paramètre.  
ou 
Le constructeur possède des indicateurs <see cref="T:System.Reflection.MethodAttributes" /> ou <see cref="T:System.Reflection.MethodImplAttributes" /> signalant qu'il ne doit pas posséder de corps de méthode.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetMethodImplementationFlags">
      <summary vsli:raw="Returns the method implementation flags for this constructor.">Retourne les indicateurs d'implémentation de méthodes de ce constructeur.</summary>
      <returns vsli:raw="The method implementation flags for this constructor.">Indicateurs d'implémentation de méthodes de ce constructeur.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetParameters">
      <summary vsli:raw="Returns the parameters of this constructor.">Retourne les paramètres de ce constructeur.</summary>
      <returns vsli:raw="An array that represents the parameters of this constructor.">Tableau qui représente les paramètres de ce constructeur.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has not been called on this constructor's type, in the .NET Framework versions 1.0 and 1.1.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> n'a pas été appelé sur le type de ce constructeur, dans les versions 1.0 et 1.1 du .NET Framework.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has not been called on this constructor's type, in the .NET Framework version 2.0.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> n'a pas été appelé sur le type de ce constructeur, dans la version 2.0 du .NET Framework.</exception>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.InitLocals">
      <summary vsli:raw="Gets or sets whether the local variables in this constructor should be zero-initialized.">Obtient ou définit si les variables locales de ce constructeur doivent être initialisées à zéro.</summary>
      <returns vsli:raw="Read/write. Gets or sets whether the local variables in this constructor should be zero-initialized.">Lecture/écriture. Obtient ou définit si les variables locales de ce constructeur doivent être initialisées à zéro.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary vsli:raw="Dynamically invokes the constructor reflected by this instance with the specified arguments, under the constraints of the specified &lt;see langword=&quot;Binder&quot; /&gt;.">Appelle de manière dynamique le constructeur réfléchi par cette instance avec les arguments spécifiés et les contraintes du <see langword="Binder" /> spécifié.</summary>
      <param name="obj" vsli:raw="The object that needs to be reinitialized.">Objet devant être réinitialisé.</param>
      <param name="invokeAttr" vsli:raw="One of the &lt;see langword=&quot;BindingFlags&quot; /&gt; values that specifies the type of binding that is desired.">Une des valeurs <see langword="BindingFlags" /> qui spécifie le type de liaison requis.</param>
      <param name="binder" vsli:raw="A &lt;see langword=&quot;Binder&quot; /&gt; that defines a set of properties and enables the binding, coercion of argument types, and invocation of members using reflection. If &lt;paramref name=&quot;binder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, then Binder.DefaultBinding is used.">
        <see langword="Binder" /> qui définit un jeu de propriétés et active la liaison, la contrainte des types d'arguments ainsi que l'appel des membres à l'aide de la réflexion. Si <paramref name="binder" /> est <see langword="null" />, Binder.DefaultBinding est utilisé.</param>
      <param name="parameters" vsli:raw="An argument list. This is an array of arguments with the same number, order, and type as the parameters of the constructor to be invoked. If there are no parameters, this should be a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">Liste d’arguments. Il s'agit d'un tableau d'arguments ayant les mêmes nombre, ordre et type que les paramètres du constructeur à appeler. En l'absence de paramètres, la valeur doit être une référence null (<see langword="Nothing" /> en Visual Basic).</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; used to govern the coercion of types. If this is null, the &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; for the current thread is used.">Un <see cref="T:System.Globalization.CultureInfo" /> utilisé pour régir la contrainte de types. Si la valeur est Null, le <see cref="T:System.Globalization.CultureInfo" /> du thread actuel est utilisé.</param>
      <returns vsli:raw="An instance of the class associated with the constructor.">Instance de la classe associée au constructeur.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. You can retrieve the constructor using &lt;see cref=&quot;M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt;.">Cette méthode n’est pas prise en charge pour l’instant. Vous pouvez récupérer le constructeur à l'aide de <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />, puis appeler <see cref="M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" /> sur <see cref="T:System.Reflection.ConstructorInfo" /> retourné.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary vsli:raw="Dynamically invokes the constructor represented by this instance on the given object, passing along the specified parameters, and under the constraints of the given binder.">Appelle dynamiquement le constructeur représenté par cette instance sur l’objet donné, en passant les paramètres spécifiés et en tenant compte des contraintes du binder donné.</summary>
      <param name="invokeAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt;, such as InvokeMethod, NonPublic, and so on.">Il doit s'agir d'un bit indicateur de <see cref="T:System.Reflection.BindingFlags" />, tel qu'InvokeMethod, NonPublic, etc.</param>
      <param name="binder" vsli:raw="An object that enables the binding, coercion of argument types, invocation of members, and retrieval of &lt;see langword=&quot;MemberInfo&quot; /&gt; objects using reflection. If binder is &lt;see langword=&quot;null&quot; /&gt;, the default binder is used. See &lt;see cref=&quot;T:System.Reflection.Binder&quot; /&gt;.">Objet qui active la liaison, la contrainte de types d'arguments, l'appel des membres et la récupération d'objets <see langword="MemberInfo" /> par le biais de la réflexion. Si binder a la valeur <see langword="null" />, le binder par défaut est utilisé. Consultez <see cref="T:System.Reflection.Binder" />.</param>
      <param name="parameters" vsli:raw="An argument list. This is an array of arguments with the same number, order, and type as the parameters of the constructor to be invoked. If there are no parameters this should be &lt;see langword=&quot;null&quot; /&gt;.">Liste d’arguments. Il s'agit d'un tableau d'arguments ayant les mêmes nombre, ordre et type que les paramètres du constructeur à appeler. En l’absence de paramètres, ce paramètre doit être <see langword="null" />.</param>
      <param name="culture" vsli:raw="An instance of &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; used to govern the coercion of types. If this is null, the &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; for the current thread is used. (For example, this is necessary to convert a &lt;see cref=&quot;T:System.String&quot; /&gt; that represents 1000 to a &lt;see cref=&quot;T:System.Double&quot; /&gt; value, since 1000 is represented differently by different cultures.)">Instance de <see cref="T:System.Globalization.CultureInfo" /> utilisée pour régir la contrainte des types. Si la valeur est Null, le <see cref="T:System.Globalization.CultureInfo" /> du thread actuel est utilisé. (Par exemple, cela est nécessaire pour convertir un <see cref="T:System.String" /> représentant 1 000 en valeur <see cref="T:System.Double" />, car 1 000 est représenté de différentes manières, selon la culture.)</param>
      <returns vsli:raw="The value returned by the invoked constructor.">Valeur retournée par le constructeur appelé.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. You can retrieve the constructor using &lt;see cref=&quot;M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt;.">Cette méthode n’est pas prise en charge pour l’instant. Vous pouvez récupérer le constructeur à l'aide de <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />, puis appeler <see cref="M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" /> sur <see cref="T:System.Reflection.ConstructorInfo" /> retourné.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Checks if the specified custom attribute type is defined.">Vérifie si le type d'attribut personnalisé spécifié est défini.</summary>
      <param name="attributeType" vsli:raw="A custom attribute type.">Type d'attribut personnalisé.</param>
      <param name="inherit" vsli:raw="Controls inheritance of custom attributes from base classes. This parameter is ignored.">Contrôle l'héritage des attributs personnalisés des classes de base. Ce paramètre est ignoré.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified custom attribute type is defined; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le type d'attribut personnalisé spécifié est défini ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. You can retrieve the constructor using &lt;see cref=&quot;M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt;.">Cette méthode n’est pas prise en charge pour l’instant. Vous pouvez récupérer le constructeur à l'aide de <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />, puis appeler <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> sur <see cref="T:System.Reflection.ConstructorInfo" /> retourné.</exception>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.MethodHandle">
      <summary vsli:raw="Gets the internal handle for the method. Use this handle to access the underlying metadata handle.">Obtient le handle interne de la méthode. Utilisez ce handle pour accéder au handle de métadonnées sous-jacent.</summary>
      <returns vsli:raw="The internal handle for the method. Use this handle to access the underlying metadata handle.">Handle interne de la méthode. Utilisez ce handle pour accéder au handle de métadonnées sous-jacent.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This property is not supported on this class.">Cette propriété n'est pas prise en charge sur cette classe.</exception>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.Module">
      <summary vsli:raw="Gets the dynamic module in which this constructor is defined.">Obtient le module dynamique dans lequel ce constructeur est défini.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; object that represents the dynamic module in which this constructor is defined.">Objet <see cref="T:System.Reflection.Module" /> représentant le module dynamique dans lequel ce constructeur est défini.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.Name">
      <summary vsli:raw="Retrieves the name of this constructor.">Récupère le nom de ce constructeur.</summary>
      <returns vsli:raw="The name of this constructor.">Nom de ce constructeur.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.ReflectedType">
      <summary vsli:raw="Holds a reference to the &lt;see cref=&quot;T:System.Type&quot; /&gt; object from which this object was obtained.">Contient une référence à l'objet <see cref="T:System.Type" /> à partir duquel cet objet a été obtenu.</summary>
      <returns vsli:raw="The &lt;see langword=&quot;Type&quot; /&gt; object from which this object was obtained.">
        <see langword="Type" /> Objet à partir duquel cet objet a été obtenu.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Set a custom attribute using a specified custom attribute blob.">Définit un attribut personnalisé à l'aide d'un objet blob d'attribut personnalisé spécifié.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">Le constructeur de l’attribut personnalisé.</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">Objet blob d’octets représentant les attributs.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> ou <paramref name="binaryAttribute" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Set a custom attribute using a custom attribute builder.">Définit un attribut personnalisé à l’aide d’un générateur d’attributs personnalisés.</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to define the custom attribute.">Instance d’une classe d’assistance pour définir l’attribut personnalisé.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;customBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="customBuilder" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)">
      <summary vsli:raw="Sets the method implementation flags for this constructor.">Définit les indicateurs d'implémentation de méthodes de ce constructeur.</summary>
      <param name="attributes" vsli:raw="The method implementation flags.">Indicateurs d'implémentation de méthodes.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">Le type conteneur a été créé à l’aide de <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.ToString">
      <summary vsli:raw="Returns this &lt;see cref=&quot;T:System.Reflection.Emit.ConstructorBuilder&quot; /&gt; instance as a &lt;see cref=&quot;T:System.String&quot; /&gt;.">Retourne cette instance de <see cref="T:System.Reflection.Emit.ConstructorBuilder" /> en tant que <see cref="T:System.String" />.</summary>
      <returns vsli:raw="A string containing the name, attributes, and exceptions of this constructor, followed by the current Microsoft intermediate language (MSIL) stream.">Chaîne contenant le nom, les attributs et les exceptions de ce constructeur, suivis du flux MSIL (Microsoft Intermediate Language) actuel.</returns>
    </member>
    <member name="T:System.Reflection.Emit.EnumBuilder">
      <summary vsli:raw="Describes and represents an enumeration type.">Décrit et représente un type énumération.</summary>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Assembly">
      <summary vsli:raw="Retrieves the dynamic assembly that contains this enum definition.">Récupère l'assembly dynamique qui contient cette définition d'enum.</summary>
      <returns vsli:raw="Read-only. The dynamic assembly that contains this enum definition.">Lecture seule. Assembly dynamique qui contient cette définition d'enum.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.AssemblyQualifiedName">
      <summary vsli:raw="Returns the full path of this enum qualified by the display name of the parent assembly.">Retourne le chemin d'accès complet de cet enum, qualifié par le nom d'affichage de l'assembly parent.</summary>
      <returns vsli:raw="Read-only. The full path of this enum qualified by the display name of the parent assembly.">Lecture seule. Chemin d'accès complet de cet enum, qualifié par le nom d'affichage de l'assembly parent.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.BaseType">
      <summary vsli:raw="Returns the parent &lt;see cref=&quot;T:System.Type&quot; /&gt; of this type which is always &lt;see cref=&quot;T:System.Enum&quot; /&gt;.">Retourne le <see cref="T:System.Type" /> parent de ce type qui est toujours <see cref="T:System.Enum" />.</summary>
      <returns vsli:raw="Read-only. The parent &lt;see cref=&quot;T:System.Type&quot; /&gt; of this type.">Lecture seule. <see cref="T:System.Type" /> parent de ce type.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.CreateTypeInfo">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Reflection.TypeInfo&quot; /&gt; object that represents this enumeration.">Obtient un objet <see cref="T:System.Reflection.TypeInfo" /> qui représente cette énumération.</summary>
      <returns vsli:raw="An object that represents this enumeration.">Objet qui représente cette énumération.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.DeclaringType">
      <summary vsli:raw="Returns the type that declared this &lt;see cref=&quot;T:System.Reflection.Emit.EnumBuilder&quot; /&gt;.">Retourne le type ayant déclaré <see cref="T:System.Reflection.Emit.EnumBuilder" />.</summary>
      <returns vsli:raw="Read-only. The type that declared this &lt;see cref=&quot;T:System.Reflection.Emit.EnumBuilder&quot; /&gt;.">Lecture seule. Ce type ayant déclaré <see cref="T:System.Reflection.Emit.EnumBuilder" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.DefineLiteral(System.String,System.Object)">
      <summary vsli:raw="Defines the named static field in an enumeration type with the specified constant value.">Définit le champ statique nommé d'un type énumération à l'aide de la valeur de constante spécifiée.</summary>
      <param name="literalName" vsli:raw="The name of the static field.">Nom du champ statique.</param>
      <param name="literalValue" vsli:raw="The constant value of the literal.">Valeur de constante du littéral.</param>
      <returns vsli:raw="The defined field.">Champ défini.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.FullName">
      <summary vsli:raw="Returns the full path of this enum.">Retourne le chemin d'accès complet de cet enum.</summary>
      <returns vsli:raw="Read-only. The full path of this enum.">Lecture seule. Chemin d'accès complet de cet enum.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetConstructors(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; objects representing the public and non-public constructors defined for this class, as specified.">Retourne un tableau d’objets <see cref="T:System.Reflection.ConstructorInfo" /> représentant les constructeurs publics et non publics définis pour cette classe, comme spécifié.</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Il doit s’agir d’un bit indicateur issu de <see cref="T:System.Reflection.BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="NonPublic" />, etc.</param>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; objects representing the specified constructors defined for this class. If no constructors are defined, an empty array is returned.">Retourne un tableau d’objets <see cref="T:System.Reflection.ConstructorInfo" /> représentant les constructeurs spécifiés définis pour cette classe. Si aucun constructeur n’est défini, un tableau vide est retourné.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Pour l'instant, cette méthode n'est pas prise en charge pour les types incomplets.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes defined for this constructor.">Retourne tous les attributs personnalisés définis pour ce constructeur.</summary>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the attributes.">Spécifie s’il faut rechercher les attributs dans la chaîne d’héritage de ce membre.</param>
      <returns vsli:raw="Returns an array of objects representing all the custom attributes of the constructor represented by this &lt;see cref=&quot;T:System.Reflection.Emit.ConstructorBuilder&quot; /&gt; instance.">Retourne un tableau d'objets représentant tous les attributs personnalisés du constructeur représenté par cette instance de <see cref="T:System.Reflection.Emit.ConstructorBuilder" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Pour l'instant, cette méthode n'est pas prise en charge pour les types incomplets.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Returns the custom attributes identified by the given type.">Retourne les attributs personnalisés identifiés par le type donné.</summary>
      <param name="attributeType" vsli:raw="The &lt;see langword=&quot;Type&quot; /&gt; object to which the custom attributes are applied.">Objet <see langword="Type" /> auquel les attributs personnalisés sont appliqués.</param>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the attributes.">Spécifie s’il faut rechercher les attributs dans la chaîne d’héritage de ce membre.</param>
      <returns vsli:raw="Returns an array of objects representing the attributes of this constructor that are of &lt;see cref=&quot;T:System.Type&quot; /&gt;&lt;paramref name=&quot;attributeType&quot; /&gt;.">Retourne un tableau d’objets représentant les attributs de ce constructeur qui sont de <see cref="T:System.Type" /><paramref name="attributeType" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Pour l'instant, cette méthode n'est pas prise en charge pour les types incomplets.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetElementType">
      <summary vsli:raw="Calling this method always throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">L'appel de cette méthode lève toujours <see cref="T:System.NotSupportedException" />.</summary>
      <returns vsli:raw="This method is not supported. No value is returned.">Cette méthode n'est pas prise en charge. Aucune valeur n'est retournée.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">Cette méthode n’est pas prise en charge pour l’instant.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEnumUnderlyingType">
      <summary vsli:raw="Returns the underlying integer type of the current enumeration, which is set when the enumeration builder is defined.">Retourne le type d'entier sous-jacent de l'énumération actuelle, qui est établi lors de la définition du générateur d'énumérations.</summary>
      <returns vsli:raw="The underlying type.">Type sous-jacent.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the event with the specified name.">Retourne l’événement avec le nom spécifié.</summary>
      <param name="name" vsli:raw="The name of the event to get.">Nom de l'événement à obtenir.</param>
      <param name="bindingAttr" vsli:raw="This invocation attribute. This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Attribut de cet appel. Il doit s’agir d’un bit indicateur issu de <see cref="T:System.Reflection.BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="NonPublic" />, etc.</param>
      <returns vsli:raw="Returns an &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; object representing the event declared or inherited by this type with the specified name. If there are no matches, &lt;see langword=&quot;null&quot; /&gt; is returned.">Retourne un objet <see cref="T:System.Reflection.EventInfo" /> représentant l'événement déclaré ou hérité par ce type avec le nom spécifié. En l'absence de correspondances, <see langword="null" /> est retourné.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Pour l'instant, cette méthode n'est pas prise en charge pour les types incomplets.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEvents">
      <summary vsli:raw="Returns the events for the public events declared or inherited by this type.">Retourne les événements pour les événements publics déclarés ou hérités par ce type.</summary>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; objects representing the public events declared or inherited by this type. An empty array is returned if there are no public events.">Retourne un tableau d’objets <see cref="T:System.Reflection.EventInfo" /> représentant les événements publics déclarés ou hérités par ce type. Un tableau vide est retourné s’il n’existe aucun événement public.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Pour l'instant, cette méthode n'est pas prise en charge pour les types incomplets.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEvents(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the public and non-public events that are declared by this type.">Retourne les événements publics et non publics déclarés par ce type.</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt;, such as &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Il doit s’agir d’un bit indicateur issu de <see cref="T:System.Reflection.BindingFlags" />, comme <see langword="InvokeMethod" />, <see langword="NonPublic" /> et ainsi de suite.</param>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; objects representing the public and non-public events declared or inherited by this type. An empty array is returned if there are no events, as specified.">Retourne un tableau d'objets <see cref="T:System.Reflection.EventInfo" /> représentant les événements publics et non publics déclarés ou hérités par ce type. En l'absence d'événements, un tableau vide est retourné.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Pour l'instant, cette méthode n'est pas prise en charge pour les types incomplets.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the field specified by the given name.">Retourne le champ spécifié par le nom donné.</summary>
      <param name="name" vsli:raw="The name of the field to get.">Nom du champ à obtenir.</param>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Il doit s’agir d’un bit indicateur issu de <see cref="T:System.Reflection.BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="NonPublic" />, etc.</param>
      <returns vsli:raw="Returns the &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt; object representing the field declared or inherited by this type with the specified name and public or non-public modifier. If there are no matches, then null is returned.">Retourne l’objet <see cref="T:System.Reflection.FieldInfo" /> représentant le champ déclaré ou hérité par ce type avec le nom spécifié et le modificateur public ou non public. En l'absence de correspondance, la valeur null est retournée.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Pour l'instant, cette méthode n'est pas prise en charge pour les types incomplets.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the public and non-public fields that are declared by this type.">Retourne les champs publics et non publics déclarés par ce type.</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt;, such as InvokeMethod, NonPublic, and so on.">Il doit s'agir d'un bit indicateur de <see cref="T:System.Reflection.BindingFlags" />, tel qu'InvokeMethod, NonPublic, etc.</param>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt; objects representing the public and non-public fields declared or inherited by this type. An empty array is returned if there are no fields, as specified.">Retourne un tableau d’objets <see cref="T:System.Reflection.FieldInfo" /> représentant les champs publics et non publics déclarés ou hérités par ce type. Un tableau vide est retourné s’il n’existe aucun champ, comme indiqué.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Pour l'instant, cette méthode n'est pas prise en charge pour les types incomplets.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetInterface(System.String,System.Boolean)">
      <summary vsli:raw="Returns the interface implemented (directly or indirectly) by this type, with the specified fully-qualified name.">Retourne l'interface implémentée (directement ou indirectement) par ce type, avec le nom qualifié complet spécifié.</summary>
      <param name="name" vsli:raw="The name of the interface.">Nom de l’interface.</param>
      <param name="ignoreCase" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, the search is case-insensitive. If &lt;see langword=&quot;false&quot; /&gt;, the search is case-sensitive.">Si <see langword="true" />, la recherche ne respecte pas la casse. Si <see langword="false" />, la recherche respecte la casse.</param>
      <returns vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the implemented interface. Returns null if no interface matching name is found.">Retourne un objet <see cref="T:System.Type" /> représentant l’interface implémentée. Retourne null si aucun nom d’interface correspondant n’est trouvé.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Pour l'instant, cette méthode n'est pas prise en charge pour les types incomplets.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetInterfaceMap(System.Type)">
      <summary vsli:raw="Returns an interface mapping for the interface requested.">Retourne un mappage d'interface pour l'interface demandée.</summary>
      <param name="interfaceType" vsli:raw="The type of the interface for which the interface mapping is to be retrieved.">Type de l'interface pour laquelle le mappage d'interface est récupéré.</param>
      <returns vsli:raw="The requested interface mapping.">Mappage de l'interface demandée.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The type does not implement the interface.">Le type n'implémente pas l'interface.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetInterfaces">
      <summary vsli:raw="Returns an array of all the interfaces implemented on this a class and its base classes.">Retourne un tableau de toutes les interfaces implémentées sur cette classe et sur ses classes de base.</summary>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the implemented interfaces. If none are defined, an empty array is returned.">Retourne un tableau d’objets <see cref="T:System.Type" /> représentant les interfaces implémentées. Si aucune interface n’est définie, un tableau vide est retourné.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns all members with the specified name, type, and binding that are declared or inherited by this type.">Retourne tous les membres possédant le nom, le type et la liaison spécifiés qui sont déclarés ou hérités par ce type.</summary>
      <param name="name" vsli:raw="The name of the member.">Nom du membre.</param>
      <param name="type" vsli:raw="The type of member that is to be returned.">Type du membre qui doit être retourné.</param>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Il doit s’agir d’un bit indicateur issu de <see cref="T:System.Reflection.BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="NonPublic" />, etc.</param>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; objects representing the public and non-public members defined on this type if &lt;paramref name=&quot;nonPublic&quot; /&gt; is used; otherwise, only the public members are returned.">Retourne un tableau d’objets <see cref="T:System.Reflection.MemberInfo" /> représentant les membres publics et non publics définis sur ce type si <paramref name="nonPublic" /> est utilisé ; sinon, seuls les membres publics sont retournés.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Pour l'instant, cette méthode n'est pas prise en charge pour les types incomplets.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetMembers(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the specified members declared or inherited by this type.">Retourne les membres spécifiés déclarés ou hérités par ce type.</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Il doit s’agir d’un bit indicateur issu de <see cref="T:System.Reflection.BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="NonPublic" />, etc.</param>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; objects representing the public and non-public members declared or inherited by this type. An empty array is returned if there are no matching members.">Retourne un tableau d’objets <see cref="T:System.Reflection.MemberInfo" /> représentant les membres publics et non publics déclarés ou hérités par ce type. Un tableau vide est retourné s’il n’existe aucun membre correspondant.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Pour l'instant, cette méthode n'est pas prise en charge pour les types incomplets.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns all the public and non-public methods declared or inherited by this type, as specified.">Retourne toutes les méthodes publiques et non publiques déclarées ou héritées par ce type, comme spécifié.</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt;, such as &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Il doit s’agir d’un bit indicateur issu de <see cref="T:System.Reflection.BindingFlags" />, comme <see langword="InvokeMethod" />, <see langword="NonPublic" /> et ainsi de suite.</param>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; objects representing the public and non-public methods defined on this type if &lt;paramref name=&quot;nonPublic&quot; /&gt; is used; otherwise, only the public methods are returned.">Retourne un tableau d’objets <see cref="T:System.Reflection.MethodInfo" /> représentant les méthodes publiques et non publiques définies sur ce type si <paramref name="nonPublic" /> est utilisé ; sinon, seules les méthodes publiques sont retournées.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Pour l'instant, cette méthode n'est pas prise en charge pour les types incomplets.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the specified nested type that is declared by this type.">Retourne le type imbriqué spécifié qui est déclaré par ce type.</summary>
      <param name="name" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the nested type to get.">
        <see cref="T:System.String" /> contenant le nom du type imbriqué à obtenir.</param>
      <param name="bindingAttr" vsli:raw="A bitmask comprised of one or more &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; that specify how the search is conducted.  &#xA;  &#xA; -or-  &#xA;  &#xA; Zero, to conduct a case-sensitive search for public methods.">Masque de bits constitué d'un ou de plusieurs <see cref="T:System.Reflection.BindingFlags" /> spécifiant le mode d'exécution de la recherche.  
ou 
Zéro, pour rechercher les méthodes publiques en respectant la casse.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the nested type that matches the specified requirements, if found; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">Objet <see cref="T:System.Type" /> qui représente le type imbriqué correspondant aux critères spécifiés, s’il est trouvé ; sinon, <see langword="null" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Pour l'instant, cette méthode n'est pas prise en charge pour les types incomplets.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the public and non-public nested types that are declared or inherited by this type.">Retourne les types imbriqués publics et non publics déclarés ou hérités par ce type.</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt;, such as &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Il doit s’agir d’un bit indicateur issu de <see cref="T:System.Reflection.BindingFlags" />, comme <see langword="InvokeMethod" />, <see langword="NonPublic" /> et ainsi de suite.</param>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing all the types nested within the current &lt;see cref=&quot;T:System.Type&quot; /&gt; that match the specified binding constraints.  &#xA;  &#xA; An empty array of type &lt;see cref=&quot;T:System.Type&quot; /&gt;, if no types are nested within the current &lt;see cref=&quot;T:System.Type&quot; /&gt;, or if none of the nested types match the binding constraints.">Tableau d’objets <see cref="T:System.Type" /> représentant tous les types imbriqués dans le <see cref="T:System.Type" /> actuel qui correspondent aux contraintes de liaison spécifiées.  
Tableau vide du type <see cref="T:System.Type" /> si aucun type n’est imbriqué dans le <see cref="T:System.Type" /> actuel ou si aucun des types imbriqués ne correspond aux contraintes de liaison.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Pour l'instant, cette méthode n'est pas prise en charge pour les types incomplets.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetProperties(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns all the public and non-public properties declared or inherited by this type, as specified.">Retourne toutes les propriétés publiques et non publiques déclarées ou héritées par ce type, comme spécifié.</summary>
      <param name="bindingAttr" vsli:raw="This invocation attribute. This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Attribut de cet appel. Il doit s’agir d’un bit indicateur issu de <see cref="T:System.Reflection.BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="NonPublic" />, etc.</param>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; objects representing the public and non-public properties defined on this type if &lt;paramref name=&quot;nonPublic&quot; /&gt; is used; otherwise, only the public properties are returned.">Retourne un tableau d’objets <see cref="T:System.Reflection.PropertyInfo" /> représentant les propriétés publiques et non publiques définies sur ce type si <paramref name="nonPublic" /> est utilisé ; sinon, seules les propriétés publiques sont retournées.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Pour l'instant, cette méthode n'est pas prise en charge pour les types incomplets.</exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.GUID">
      <summary vsli:raw="Returns the GUID of this enum.">Retourne le GUID de cet enum.</summary>
      <returns vsli:raw="Read-only. The GUID of this enum.">Lecture seule. GUID de cet enum.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Pour l'instant, cette méthode n'est pas prise en charge pour les types incomplets.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary vsli:raw="Invokes the specified member. The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the constraints of the specified binder and invocation attributes.">Appelle le membre spécifié. La méthode à appeler doit être accessible et fournir la correspondance la plus spécifique avec la liste d’arguments spécifiée, sous les contraintes des attributs de binder et d’appel spécifiés.</summary>
      <param name="name" vsli:raw="The name of the member to invoke. This can be a constructor, method, property, or field. A suitable invocation attribute must be specified. Note that it is possible to invoke the default member of a class by passing an empty string as the name of the member.">Nom du membre à appeler. Il peut s’agir d’un constructeur, d’une méthode, d’une propriété ou d’un champ. Un attribut d’appel approprié doit être spécifié. Notez qu’il est possible d’appeler le membre par défaut d’une classe en passant une chaîne vide comme nom du membre.</param>
      <param name="invokeAttr" vsli:raw="The invocation attribute. This must be a bit flag from &lt;see langword=&quot;BindingFlags&quot; /&gt;.">Attribut d’appel. Il doit s’agir d’un indicateur de bit issu de <see langword="BindingFlags" />.</param>
      <param name="binder" vsli:raw="An object that enables the binding, coercion of argument types, invocation of members, and retrieval of &lt;see langword=&quot;MemberInfo&quot; /&gt; objects using reflection. If binder is &lt;see langword=&quot;null&quot; /&gt;, the default binder is used. See &lt;see cref=&quot;T:System.Reflection.Binder&quot; /&gt;.">Objet qui active la liaison, la contrainte de types d'arguments, l'appel des membres et la récupération d'objets <see langword="MemberInfo" /> par le biais de la réflexion. Si binder a la valeur <see langword="null" />, le binder par défaut est utilisé. Consultez <see cref="T:System.Reflection.Binder" />.</param>
      <param name="target" vsli:raw="The object on which to invoke the specified member. If the member is static, this parameter is ignored.">Objet sur lequel appeler le membre spécifié. Si le membre est statique, ce paramètre est ignoré.</param>
      <param name="args" vsli:raw="An argument list. This is an array of objects that contains the number, order, and type of the parameters of the member to be invoked. If there are no parameters this should be null.">Liste d’arguments. Il s'agit d'un tableau d'objets qui contient le nombre, l'ordre et le type des paramètres du membre à appeler. En l’absence de paramètres, il doit avoir la valeur null.</param>
      <param name="modifiers" vsli:raw="An array of the same length as &lt;paramref name=&quot;args&quot; /&gt; with elements that represent the attributes associated with the arguments of the member to be invoked. A parameter has attributes associated with it in the metadata. They are used by various interoperability services. See the metadata specs for details such as this.">Tableau de même longueur que <paramref name="args" /> avec des éléments qui représentent les attributs associés aux arguments du membre à appeler. Un paramètre est associé à des attributs dans les métadonnées. Elles sont utilisées par divers services d’interopérabilité. Pour plus de détails, consultez les spécifications des métadonnées.</param>
      <param name="culture" vsli:raw="An instance of &lt;see langword=&quot;CultureInfo&quot; /&gt; used to govern the coercion of types. If this is null, the &lt;see langword=&quot;CultureInfo&quot; /&gt; for the current thread is used. (Note that this is necessary to, for example, convert a string that represents 1000 to a double value, since 1000 is represented differently by different cultures.)">Instance de <see langword="CultureInfo" /> utilisée pour régir la contrainte des types. Si la valeur est null, le <see langword="CultureInfo" /> du thread actuel est utilisé. (Par exemple, ceci est nécessaire pour la conversion d'une chaîne représentant 1000 en valeur double, car 1000 est représenté de différentes manières, selon la culture.)</param>
      <param name="namedParameters" vsli:raw="Each parameter in the &lt;paramref name=&quot;namedParameters&quot; /&gt; array gets the value in the corresponding element in the &lt;paramref name=&quot;args&quot; /&gt; array. If the length of &lt;paramref name=&quot;args&quot; /&gt; is greater than the length of &lt;paramref name=&quot;namedParameters&quot; /&gt;, the remaining argument values are passed in order.">Chaque paramètre dans le tableau <paramref name="namedParameters" /> obtient la valeur de l’élément correspondant dans le tableau <paramref name="args" />. Si la longueur de <paramref name="args" /> est supérieure à la longueur de <paramref name="namedParameters" />, les valeurs d’argument restantes sont passées dans l’ordre.</param>
      <returns vsli:raw="Returns the return value of the invoked member.">Retourne la valeur de retour du membre appelé.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Pour l'instant, cette méthode n'est pas prise en charge pour les types incomplets.</exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.IsByRefLike" />
    <member name="P:System.Reflection.Emit.EnumBuilder.IsConstructedGenericType">
      <summary vsli:raw="Gets a value that indicates whether this object represents a constructed generic type.">Obtient une valeur qui indique si cet objet représente un type générique construit.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object represents a constructed generic type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si cet objet représente un type générique construit ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Checks if the specified custom attribute type is defined.">Vérifie si le type d'attribut personnalisé spécifié est défini.</summary>
      <param name="attributeType" vsli:raw="The &lt;see langword=&quot;Type&quot; /&gt; object to which the custom attributes are applied.">Objet <see langword="Type" /> auquel les attributs personnalisés sont appliqués.</param>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the attributes.">Spécifie s’il faut rechercher les attributs dans la chaîne d’héritage de ce membre.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more instance of &lt;paramref name=&quot;attributeType&quot; /&gt; is defined on this member; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si une ou plusieurs instances de <paramref name="attributeType" /> sont définies sur ce membre ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Pour l'instant, cette méthode n'est pas prise en charge pour les types incomplets.</exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.IsSZArray" />
    <member name="P:System.Reflection.Emit.EnumBuilder.IsTypeDefinition" />
    <member name="P:System.Reflection.Emit.EnumBuilder.IsVariableBoundArray" />
    <member name="M:System.Reflection.Emit.EnumBuilder.MakeArrayType">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing a one-dimensional array of the current type, with a lower bound of zero.">Retourne un objet <see cref="T:System.Type" /> qui représente un tableau unidimensionnel du type actuel, avec une limite inférieure de zéro.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing a one-dimensional array of the current type, with a lower bound of zero.">Objet <see cref="T:System.Type" /> qui représente un tableau unidimensionnel du type actuel, avec une limite inférieure de zéro.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.MakeArrayType(System.Int32)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing an array of the current type, with the specified number of dimensions.">Retourne un objet <see cref="T:System.Type" /> qui représente un tableau du type actuel, avec le nombre spécifié de dimensions.</summary>
      <param name="rank" vsli:raw="The number of dimensions for the array. This number must be less than or equal to 32.">Nombre de dimensions pour le tableau. Ce nombre doit être inférieur ou égal à 32.</param>
      <returns vsli:raw="An object representing an array of the current type, with the specified number of dimensions.">Objet qui représente un tableau du type actuel, avec le nombre spécifié de dimensions.</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;rank&quot; /&gt; is less than 1.">
        <paramref name="rank" /> est inférieur à 1.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.MakeByRefType">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the current type when passed as a ref parameter (ByRef parameter in Visual Basic).">Retourne un objet <see cref="T:System.Type" /> qui représente le type actif quand il est passé en tant que paramètre ref (paramètre ByRef en Visual Basic).</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the current type when passed as a ref parameter (ByRef parameter in Visual Basic).">Objet <see cref="T:System.Type" /> qui représente le type actif quand il est passé en tant que paramètre ref (paramètre ByRef en Visual Basic).</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.MakePointerType">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents a pointer to the current type.">Retourne un objet <see cref="T:System.Type" /> qui représente un pointeur vers le type actuel.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents a pointer to the current type.">Objet <see cref="T:System.Type" /> qui représente un pointeur vers le type actuel.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Module">
      <summary vsli:raw="Retrieves the dynamic module that contains this &lt;see cref=&quot;T:System.Reflection.Emit.EnumBuilder&quot; /&gt; definition.">Récupère le module dynamique qui contient cette définition de type <see cref="T:System.Reflection.Emit.EnumBuilder" />.</summary>
      <returns vsli:raw="Read-only. The dynamic module that contains this &lt;see cref=&quot;T:System.Reflection.Emit.EnumBuilder&quot; /&gt; definition.">Lecture seule. Module dynamique qui contient cette définition de type <see cref="T:System.Reflection.Emit.EnumBuilder" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Name">
      <summary vsli:raw="Returns the name of this enum.">Retourne le nom de cet enum.</summary>
      <returns vsli:raw="Read-only. The name of this enum.">Lecture seule. Nom de cet enum.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Namespace">
      <summary vsli:raw="Returns the namespace of this enum.">Retourne l'espace de noms de cet enum.</summary>
      <returns vsli:raw="Read-only. The namespace of this enum.">Lecture seule. Espace de noms de cet enum.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.ReflectedType">
      <summary vsli:raw="Returns the type that was used to obtain this &lt;see cref=&quot;T:System.Reflection.Emit.EnumBuilder&quot; /&gt;.">Retourne le type utilisé pour obtenir <see cref="T:System.Reflection.Emit.EnumBuilder" />.</summary>
      <returns vsli:raw="Read-only. The type that was used to obtain this &lt;see cref=&quot;T:System.Reflection.Emit.EnumBuilder&quot; /&gt;.">Lecture seule. Type utilisé pour obtenir <see cref="T:System.Reflection.Emit.EnumBuilder" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Sets a custom attribute using a specified custom attribute blob.">Définit un attribut personnalisé à l’aide d’un objet blob d’attribut personnalisé spécifié.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">Le constructeur de l’attribut personnalisé.</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">Objet blob d’octets représentant les attributs.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> ou <paramref name="binaryAttribute" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Sets a custom attribute using a custom attribute builder.">Définit un attribut personnalisé à l'aide d'un générateur d'attributs personnalisés.</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to define the custom attribute.">Instance d’une classe d’assistance pour définir l’attribut personnalisé.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.TypeHandle">
      <summary vsli:raw="Retrieves the internal handle for this enum.">Récupère le handle interne de cet enum.</summary>
      <returns vsli:raw="Read-only. The internal handle for this enum.">Lecture seule. Handle interne de cet enum.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This property is not currently supported.">Cette propriété n'est pas prise en charge actuellement.</exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.UnderlyingField">
      <summary vsli:raw="Returns the underlying field for this enum.">Retourne le champ sous-jacent pour cet enum.</summary>
      <returns vsli:raw="Read-only. The underlying field for this enum.">Lecture seule. Champ sous-jacent pour cet enum.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.UnderlyingSystemType">
      <summary vsli:raw="Returns the underlying system type for this enum.">Retourne le type de système sous-jacent pour cet enum.</summary>
      <returns vsli:raw="Read-only. Returns the underlying system type.">Lecture seule. Retourne le type de système sous-jacent.</returns>
    </member>
    <member name="T:System.Reflection.Emit.EventBuilder">
      <summary vsli:raw="Defines events for a class.">Définit les événements d'une classe.</summary>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.AddOtherMethod(System.Reflection.Emit.MethodBuilder)">
      <summary vsli:raw="Adds one of the &quot;other&quot; methods associated with this event. &quot;Other&quot; methods are methods other than the &quot;on&quot; and &quot;raise&quot; methods associated with an event. This function can be called many times to add as many &quot;other&quot; methods.">Ajoute une des « autres » méthodes associées à cet événement. Les « autres » méthodes sont des méthodes autres que les méthodes « on » et « raise » associées à un événement. Vous pouvez appeler cette fonction plusieurs fois pour ajouter d'« autres » méthodes.</summary>
      <param name="mdBuilder" vsli:raw="A &lt;see langword=&quot;MethodBuilder&quot; /&gt; object that represents the other method.">Objet <see langword="MethodBuilder" /> qui représente l'autre méthode.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mdBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mdBuilder" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">La méthode <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> a été appelée sur le type englobant.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetAddOnMethod(System.Reflection.Emit.MethodBuilder)">
      <summary vsli:raw="Sets the method used to subscribe to this event.">Définit la méthode utilisée pour s'abonner à cet événement.</summary>
      <param name="mdBuilder" vsli:raw="A &lt;see langword=&quot;MethodBuilder&quot; /&gt; object that represents the method used to subscribe to this event.">Objet <see langword="MethodBuilder" /> qui représente la méthode utilisée pour s'abonner à cet événement.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mdBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mdBuilder" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">La méthode <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> a été appelée sur le type englobant.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Set a custom attribute using a specified custom attribute blob.">Définit un attribut personnalisé à l'aide d'un objet blob d'attribut personnalisé spécifié.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">Le constructeur de l’attribut personnalisé.</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">Objet blob d’octets représentant les attributs.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> ou <paramref name="binaryAttribute" /> est <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">La méthode <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> a été appelée sur le type englobant.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Sets a custom attribute using a custom attribute builder.">Définit un attribut personnalisé à l'aide d'un générateur d'attributs personnalisés.</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to describe the custom attribute.">Instance de classe d'assistance servant à décrire l'attribut personnalisé.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> est <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">La méthode <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> a été appelée sur le type englobant.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetRaiseMethod(System.Reflection.Emit.MethodBuilder)">
      <summary vsli:raw="Sets the method used to raise this event.">Définit la méthode utilisée pour déclencher cet événement.</summary>
      <param name="mdBuilder" vsli:raw="A &lt;see langword=&quot;MethodBuilder&quot; /&gt; object that represents the method used to raise this event.">Objet <see langword="MethodBuilder" /> qui représente la méthode utilisée pour déclencher cet événement.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mdBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mdBuilder" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">La méthode <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> a été appelée sur le type englobant.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetRemoveOnMethod(System.Reflection.Emit.MethodBuilder)">
      <summary vsli:raw="Sets the method used to unsubscribe to this event.">Définit la méthode utilisée pour annuler l'abonnement à cet événement.</summary>
      <param name="mdBuilder" vsli:raw="A &lt;see langword=&quot;MethodBuilder&quot; /&gt; object that represents the method used to unsubscribe to this event.">Objet <see langword="MethodBuilder" /> qui représente la méthode utilisée pour annuler l'abonnement à cet événement.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mdBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mdBuilder" /> est <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">La méthode <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> a été appelée sur le type englobant.</exception>
    </member>
    <member name="T:System.Reflection.Emit.FieldBuilder">
      <summary vsli:raw="Defines and represents a field. This class cannot be inherited.">Définit et représente un champ. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.Attributes">
      <summary vsli:raw="Indicates the attributes of this field. This property is read-only.">Indique les attributs de ce champ. Cette propriété est en lecture seule.</summary>
      <returns vsli:raw="The attributes of this field.">Attributs de ce champ.</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.DeclaringType">
      <summary vsli:raw="Indicates a reference to the &lt;see cref=&quot;T:System.Type&quot; /&gt; object for the type that declares this field. This property is read-only.">Indique une référence à l'objet <see cref="T:System.Type" /> pour le type qui déclare ce champ. Cette propriété est en lecture seule.</summary>
      <returns vsli:raw="A reference to the &lt;see cref=&quot;T:System.Type&quot; /&gt; object for the type that declares this field.">Référence à l'objet <see cref="T:System.Type" /> pour le type qui déclare ce champ.</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.FieldHandle">
      <summary vsli:raw="Indicates the internal metadata handle for this field. This property is read-only.">Indique le handle de métadonnées interne de ce champ. Cette propriété est en lecture seule.</summary>
      <returns vsli:raw="The internal metadata handle for this field.">Handle de métadonnées interne de ce champ.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">Cette méthode n'est pas prise en charge.</exception>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.FieldType">
      <summary vsli:raw="Indicates the &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type of this field. This property is read-only.">Indique l'objet <see cref="T:System.Type" /> qui représente le type de ce champ. Cette propriété est en lecture seule.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type of this field.">Objet <see cref="T:System.Type" /> qui représente le type de ce champ.</returns>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes defined for this field.">Retourne tous les attributs personnalisés définis pour ce champ.</summary>
      <param name="inherit" vsli:raw="Controls inheritance of custom attributes from base classes.">Contrôle l'héritage des attributs personnalisés des classes de base.</param>
      <returns vsli:raw="An array of type &lt;see cref=&quot;T:System.Object&quot; /&gt; representing all the custom attributes of the constructor represented by this &lt;see cref=&quot;T:System.Reflection.Emit.FieldBuilder&quot; /&gt; instance.">Tableau de type <see cref="T:System.Object" /> représentant tous les attributs personnalisés du constructeur représenté par cette instance <see cref="T:System.Reflection.Emit.FieldBuilder" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">Cette méthode n'est pas prise en charge.</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes defined for this field identified by the given type.">Retourne tous les attributs personnalisés définis pour ce champ et identifiés par le type donné.</summary>
      <param name="attributeType" vsli:raw="The custom attribute type.">Type de l'attribut personnalisé.</param>
      <param name="inherit" vsli:raw="Controls inheritance of custom attributes from base classes.">Contrôle l'héritage des attributs personnalisés des classes de base.</param>
      <returns vsli:raw="An array of type &lt;see cref=&quot;T:System.Object&quot; /&gt; representing all the custom attributes of the constructor represented by this &lt;see cref=&quot;T:System.Reflection.Emit.FieldBuilder&quot; /&gt; instance.">Tableau de type <see cref="T:System.Object" /> représentant tous les attributs personnalisés du constructeur représenté par cette instance <see cref="T:System.Reflection.Emit.FieldBuilder" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">Cette méthode n'est pas prise en charge.</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.GetValue(System.Object)">
      <summary vsli:raw="Retrieves the value of the field supported by the given object.">Récupère la valeur du champ pris en charge par l'objet donné.</summary>
      <param name="obj" vsli:raw="The object on which to access the field.">Objet sur lequel accéder au champ.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; containing the value of the field reflected by this instance.">
        <see cref="T:System.Object" /> qui contient la valeur du champ réfléchi par cette instance.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">Cette méthode n'est pas prise en charge.</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Indicates whether an attribute having the specified type is defined on a field.">Indique si un attribut doté du type spécifié est défini sur un champ.</summary>
      <param name="attributeType" vsli:raw="The type of the attribute.">Type de l'attribut.</param>
      <param name="inherit" vsli:raw="Controls inheritance of custom attributes from base classes.">Contrôle l'héritage des attributs personnalisés des classes de base.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more instance of &lt;paramref name=&quot;attributeType&quot; /&gt; is defined on this field; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si une ou plusieurs instances de <paramref name="attributeType" /> sont définies sur ce champ ; sinon <see langword="false" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. Retrieve the field using &lt;see cref=&quot;M:System.Type.GetField(System.String,System.Reflection.BindingFlags)&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;.">Cette méthode n’est pas prise en charge pour l’instant. Vous pouvez récupérer le champ à l'aide de <see cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" /> et appeler <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> sur le <see cref="T:System.Reflection.FieldInfo" /> retourné.</exception>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.Module">
      <summary vsli:raw="Gets the module in which the type that contains this field is being defined.">Obtient le module dans lequel le type qui contient ce champ est défini.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; that represents the dynamic module in which this field is being defined.">
        <see cref="T:System.Reflection.Module" /> représentant le module dynamique dans lequel ce champ est défini.</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.Name">
      <summary vsli:raw="Indicates the name of this field. This property is read-only.">Indique le nom de ce champ. Cette propriété est en lecture seule.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of this field.">
        <see cref="T:System.String" /> qui contient le nom de ce champ.</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.ReflectedType">
      <summary vsli:raw="Indicates the reference to the &lt;see cref=&quot;T:System.Type&quot; /&gt; object from which this object was obtained. This property is read-only.">Indique la référence à l'objet <see cref="T:System.Type" /> à partir duquel cet objet a été obtenu. Cette propriété est en lecture seule.</summary>
      <returns vsli:raw="A reference to the &lt;see cref=&quot;T:System.Type&quot; /&gt; object from which this instance was obtained.">Référence à l'objet <see cref="T:System.Type" /> à partir duquel cette instance a été obtenue.</returns>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetConstant(System.Object)">
      <summary vsli:raw="Sets the default value of this field.">Définit la valeur par défaut de ce champ.</summary>
      <param name="defaultValue" vsli:raw="The new default value for this field.">Nouvelle valeur par défaut de ce champ.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">Le type conteneur a été créé à l’aide de <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The field is not one of the supported types.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of &lt;paramref name=&quot;defaultValue&quot; /&gt; does not match the type of the field.  &#xA;  &#xA; -or-  &#xA;  &#xA; The field is of type &lt;see cref=&quot;T:System.Object&quot; /&gt; or other reference type, &lt;paramref name=&quot;defaultValue&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt;, and the value cannot be assigned to the reference type.">Le champ ne correspond pas à un type pris en charge.  
ou 
Le type de <paramref name="defaultValue" /> ne correspond pas au type du champ.  
ou 
Le champ est de type <see cref="T:System.Object" /> ou d'un autre type référence, <paramref name="defaultValue" /> n'est pas <see langword="null" />, et la valeur ne peut pas être assignée au type référence.</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Sets a custom attribute using a specified custom attribute blob.">Définit un attribut personnalisé à l’aide d’un objet blob d’attribut personnalisé spécifié.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">Le constructeur de l’attribut personnalisé.</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">Objet blob d’octets représentant les attributs.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> ou <paramref name="binaryAttribute" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The parent type of this field is complete.">Le type parent de ce champ est complet.</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Sets a custom attribute using a custom attribute builder.">Définit un attribut personnalisé à l'aide d'un générateur d'attributs personnalisés.</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to define the custom attribute.">Instance d’une classe d’assistance pour définir l’attribut personnalisé.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The parent type of this field is complete.">Le type parent de ce champ est complet.</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetOffset(System.Int32)">
      <summary vsli:raw="Specifies the field layout.">Spécifie la disposition du champ.</summary>
      <param name="iOffset" vsli:raw="The offset of the field within the type containing this field.">Offset du champ dans le type contenant ce champ.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">Le type conteneur a été créé à l’aide de <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;iOffset&quot; /&gt; is less than zero.">
        <paramref name="iOffset" /> est inférieur à zéro.</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
      <summary vsli:raw="Sets the value of the field supported by the given object.">Définit la valeur du champ pris en charge par l’objet donné.</summary>
      <param name="obj" vsli:raw="The object on which to access the field.">Objet sur lequel accéder au champ.</param>
      <param name="val" vsli:raw="The value to assign to the field.">La valeur à affecter au champ.</param>
      <param name="invokeAttr" vsli:raw="A member of &lt;see langword=&quot;IBinder&quot; /&gt; that specifies the type of binding that is desired (for example, IBinder.CreateInstance, IBinder.ExactBinding).">Membre de <see langword="IBinder" /> qui spécifie le type de liaison requis (par exemple, IBinder.CreateInstance, IBinder.ExactBinding).</param>
      <param name="binder" vsli:raw="A set of properties and enabling for binding, coercion of argument types, and invocation of members using reflection. If binder is null, then IBinder.DefaultBinding is used.">Ensemble de propriétés et d'activations de la liaison, de la contrainte des types d'arguments et d'appel des membres à l'aide de la réflexion. Si binder est null, Binder.DefaultBinding est utilisé.</param>
      <param name="culture" vsli:raw="The software preferences of a particular culture.">Préférences logicielles d'une culture spécifique.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">Cette méthode n'est pas prise en charge.</exception>
    </member>
    <member name="T:System.Reflection.Emit.GenericTypeParameterBuilder">
      <summary vsli:raw="Defines and creates generic type parameters for dynamically defined generic types and methods. This class cannot be inherited.">Définit et crée des paramètres de type générique pour les types et les méthodes génériques définis dynamiquement. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Assembly">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Reflection.Assembly&quot; /&gt; object representing the dynamic assembly that contains the generic type definition the current type parameter belongs to.">Obtient un objet <see cref="T:System.Reflection.Assembly" /> représentant l'assembly dynamique qui contient la définition de type générique à laquelle appartient le paramètre de type actuel.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Reflection.Assembly&quot; /&gt; object representing the dynamic assembly that contains the generic type definition the current type parameter belongs to.">Objet <see cref="T:System.Reflection.Assembly" /> représentant l'assembly dynamique qui contient la définition de type générique à laquelle appartient le paramètre de type actuel.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.AssemblyQualifiedName">
      <summary vsli:raw="Gets &lt;see langword=&quot;null&quot; /&gt; in all cases.">Obtient <see langword="null" /> dans tous les cas.</summary>
      <returns vsli:raw="A null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic) in all cases.">Référence Null (<see langword="Nothing" /> en Visual Basic) dans tous les cas.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.BaseType">
      <summary vsli:raw="Gets the base type constraint of the current generic type parameter.">Obtient la contrainte de type de base du paramètre de type générique actuel.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the base type constraint of the generic type parameter, or &lt;see langword=&quot;null&quot; /&gt; if the type parameter has no base type constraint.">Objet <see cref="T:System.Type" /> qui représente la contrainte de type de base du paramètre de type générique, ou <see langword="null" /> si le paramètre de type ne possède aucune contrainte de type de base.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters">
      <summary vsli:raw="Gets &lt;see langword=&quot;true&quot; /&gt; in all cases.">Obtient <see langword="true" /> dans tous les cas.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; in all cases.">
        <see langword="true" /> dans tous les cas.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringMethod">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the declaring method, if the current &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; represents a type parameter of a generic method.">Obtient un <see cref="T:System.Reflection.MethodInfo" /> représentant la méthode de déclaration, si le <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> actuel représente un paramètre de type d’une méthode générique.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the declaring method, if the current &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; represents a type parameter of a generic method; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Reflection.MethodInfo" /> représentant la méthode de déclaration, si le <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> actuel représente un paramètre de type d'une méthode générique ; sinon, <see langword="null" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringType">
      <summary vsli:raw="Gets the generic type definition or generic method definition to which the generic type parameter belongs.">Obtient la définition de type générique ou la définition de méthode générique à laquelle appartient le paramètre de type générique.</summary>
      <returns vsli:raw="If the type parameter belongs to a generic type, a &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing that generic type; if the type parameter belongs to a generic method, a &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing that type that declared that generic method.">Si le paramètre de type appartient à un type générique, objet <see cref="T:System.Type" /> représentant ce type générique ; si le paramètre de type appartient à une méthode générique, objet <see cref="T:System.Type" /> représentant le type qui a déclaré cette méthode générique.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.Equals(System.Object)">
      <summary vsli:raw="Tests whether the given object is an instance of &lt;see langword=&quot;EventToken&quot; /&gt; and is equal to the current instance.">Tests si l'objet donné est une instance de <see langword="EventToken" /> et est égal à l'instance actuelle.</summary>
      <param name="o" vsli:raw="The object to be compared with the current instance.">Objet à comparer à l'instance actuelle.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;o&quot; /&gt; is an instance of &lt;see langword=&quot;EventToken&quot; /&gt; and equals the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="o" /> est une instance de <see langword="EventToken" /> et s'il est égal à l'instance en cours ; sinon <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.FullName">
      <summary vsli:raw="Gets &lt;see langword=&quot;null&quot; /&gt; in all cases.">Obtient <see langword="null" /> dans tous les cas.</summary>
      <returns vsli:raw="A null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic) in all cases.">Référence Null (<see langword="Nothing" /> en Visual Basic) dans tous les cas.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterAttributes">
      <summary vsli:raw="Gets a combination of &lt;see cref=&quot;T:System.Reflection.GenericParameterAttributes&quot; /&gt; flags that describe the covariance and special constraints of the current generic type parameter.">Obtient une combinaison d'indicateurs <see cref="T:System.Reflection.GenericParameterAttributes" /> qui décrivent la covariance et des contraintes spéciales du paramètre de type générique actuel.</summary>
      <returns vsli:raw="A bitwise combination of values that describes the covariance and special constraints of the current generic type parameter.">Combinaison d'opérations de bits de valeurs qui décrit la covariance et les contraintes spéciales du paramètre de type générique actuel.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterPosition">
      <summary vsli:raw="Gets the position of the type parameter in the type parameter list of the generic type or method that declared the parameter.">Obtient la position du paramètre de type dans la liste des paramètres de type du type générique ou de la méthode qui a déclaré le paramètre.</summary>
      <returns vsli:raw="The position of the type parameter in the type parameter list of the generic type or method that declared the parameter.">Position du paramètre de type dans la liste des paramètres de type du type générique ou de la méthode qui a déclaré le paramètre.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructors(System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Non pris en charge pour les paramètres de type générique incomplets.</summary>
      <param name="bindingAttr" vsli:raw="Not supported.">Non pris en charge.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Non pris en charge pour les paramètres de type générique incomplets.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">Dans tous les cas.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Non pris en charge pour les paramètres de type générique incomplets.</summary>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the attributes.">Spécifie s’il faut rechercher les attributs dans la chaîne d’héritage de ce membre.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Non pris en charge pour les paramètres de type générique incomplets.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">Dans tous les cas.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Non pris en charge pour les paramètres de type générique incomplets.</summary>
      <param name="attributeType" vsli:raw="The type of attribute to search for. Only attributes that are assignable to this type are returned.">Type d’attribut à rechercher. Seuls les attributs qui peuvent être assignés à ce type sont retournés.</param>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the attributes.">Spécifie s’il faut rechercher les attributs dans la chaîne d’héritage de ce membre.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Non pris en charge pour les paramètres de type générique incomplets.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">Dans tous les cas.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetElementType">
      <summary vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</summary>
      <returns vsli:raw="The type referred to by the current array type, pointer type, or &lt;see langword=&quot;ByRef&quot; /&gt; type; or &lt;see langword=&quot;null&quot; /&gt; if the current type is not an array type, is not a pointer type, and is not passed by reference.">Type auquel fait référence le type de tableau, le type pointeur ou le type <see langword="ByRef" /> en cours ; ou <see langword="null" /> si le type en cours n'est pas un type de tableau, pas un type pointeur et n'est pas passé par référence.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">Dans tous les cas.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Non pris en charge pour les paramètres de type générique incomplets.</summary>
      <param name="name" vsli:raw="Not supported.">Non pris en charge.</param>
      <param name="bindingAttr" vsli:raw="Not supported.">Non pris en charge.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Non pris en charge pour les paramètres de type générique incomplets.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">Dans tous les cas.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Non pris en charge pour les paramètres de type générique incomplets.</summary>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Non pris en charge pour les paramètres de type générique incomplets.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">Dans tous les cas.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents(System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Non pris en charge pour les paramètres de type générique incomplets.</summary>
      <param name="bindingAttr" vsli:raw="Not supported.">Non pris en charge.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Non pris en charge pour les paramètres de type générique incomplets.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">Dans tous les cas.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Non pris en charge pour les paramètres de type générique incomplets.</summary>
      <param name="name" vsli:raw="Not supported.">Non pris en charge.</param>
      <param name="bindingAttr" vsli:raw="Not supported.">Non pris en charge.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Non pris en charge pour les paramètres de type générique incomplets.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">Dans tous les cas.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Non pris en charge pour les paramètres de type générique incomplets.</summary>
      <param name="bindingAttr" vsli:raw="Not supported.">Non pris en charge.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Non pris en charge pour les paramètres de type générique incomplets.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">Dans tous les cas.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericArguments">
      <summary vsli:raw="Not valid for generic type parameters.">Non valide pour les paramètres de type générique.</summary>
      <returns vsli:raw="Not valid for generic type parameters.">Non valide pour les paramètres de type générique.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">Dans tous les cas.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericTypeDefinition">
      <summary vsli:raw="Not valid for generic type parameters.">Non valide pour les paramètres de type générique.</summary>
      <returns vsli:raw="Not valid for generic type parameters.">Non valide pour les paramètres de type générique.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">Dans tous les cas.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetHashCode">
      <summary vsli:raw="Returns a 32-bit integer hash code for the current instance.">Retourne un code de hachage entier 32 bits pour l'instance actuelle.</summary>
      <returns vsli:raw="A 32-bit integer hash code.">Code de hachage entier 32 bits.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterface(System.String,System.Boolean)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Non pris en charge pour les paramètres de type générique incomplets.</summary>
      <param name="name" vsli:raw="The name of the interface.">Nom de l’interface.</param>
      <param name="ignoreCase" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to search without regard for case; &lt;see langword=&quot;false&quot; /&gt; to make a case-sensitive search.">
        <see langword="true" /> pour effectuer une recherche sans respecter la casse ; <see langword="false" /> pour effectuer une recherche en respectant la casse.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Non pris en charge pour les paramètres de type générique incomplets.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">Dans tous les cas.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaceMap(System.Type)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Non pris en charge pour les paramètres de type générique incomplets.</summary>
      <param name="interfaceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the interface type for which the mapping is to be retrieved.">Objet <see cref="T:System.Type" /> qui représente le type d'interface dont le mappage doit être récupéré.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Non pris en charge pour les paramètres de type générique incomplets.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">Dans tous les cas.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaces">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Non pris en charge pour les paramètres de type générique incomplets.</summary>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Non pris en charge pour les paramètres de type générique incomplets.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">Dans tous les cas.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Non pris en charge pour les paramètres de type générique incomplets.</summary>
      <param name="name" vsli:raw="Not supported.">Non pris en charge.</param>
      <param name="type" vsli:raw="Not supported.">Non pris en charge.</param>
      <param name="bindingAttr" vsli:raw="Not supported.">Non pris en charge.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Non pris en charge pour les paramètres de type générique incomplets.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">Dans tous les cas.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMembers(System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Non pris en charge pour les paramètres de type générique incomplets.</summary>
      <param name="bindingAttr" vsli:raw="Not supported.">Non pris en charge.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Non pris en charge pour les paramètres de type générique incomplets.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">Dans tous les cas.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Non pris en charge pour les paramètres de type générique incomplets.</summary>
      <param name="bindingAttr" vsli:raw="Not supported.">Non pris en charge.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Non pris en charge pour les paramètres de type générique incomplets.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">Dans tous les cas.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Non pris en charge pour les paramètres de type générique incomplets.</summary>
      <param name="name" vsli:raw="Not supported.">Non pris en charge.</param>
      <param name="bindingAttr" vsli:raw="Not supported.">Non pris en charge.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Non pris en charge pour les paramètres de type générique incomplets.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">Dans tous les cas.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Non pris en charge pour les paramètres de type générique incomplets.</summary>
      <param name="bindingAttr" vsli:raw="Not supported.">Non pris en charge.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Non pris en charge pour les paramètres de type générique incomplets.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">Dans tous les cas.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetProperties(System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Non pris en charge pour les paramètres de type générique incomplets.</summary>
      <param name="bindingAttr" vsli:raw="Not supported.">Non pris en charge.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Non pris en charge pour les paramètres de type générique incomplets.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">Dans tous les cas.</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.GUID">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Non pris en charge pour les paramètres de type générique incomplets.</summary>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Non pris en charge pour les paramètres de type générique incomplets.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">Dans tous les cas.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Non pris en charge pour les paramètres de type générique incomplets.</summary>
      <param name="name" vsli:raw="Not supported.">Non pris en charge.</param>
      <param name="invokeAttr" vsli:raw="Not supported.">Non pris en charge.</param>
      <param name="binder" vsli:raw="Not supported.">Non pris en charge.</param>
      <param name="target" vsli:raw="Not supported.">Non pris en charge.</param>
      <param name="args" vsli:raw="Not supported.">Non pris en charge.</param>
      <param name="modifiers" vsli:raw="Not supported.">Non pris en charge.</param>
      <param name="culture" vsli:raw="Not supported.">Non pris en charge.</param>
      <param name="namedParameters" vsli:raw="Not supported.">Non pris en charge.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Non pris en charge pour les paramètres de type générique incomplets.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">Dans tous les cas.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Type)">
      <summary vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; exception in all cases.">Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</summary>
      <param name="c" vsli:raw="The object to test.">Objet à tester.</param>
      <returns vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; exception in all cases.">Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">Dans tous les cas.</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsByRefLike" />
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsConstructedGenericType">
      <summary vsli:raw="Gets a value that indicates whether this object represents a constructed generic type.">Obtient une valeur qui indique si cet objet représente un type générique construit.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object represents a constructed generic type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si cet objet représente un type générique construit ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Non pris en charge pour les paramètres de type générique incomplets.</summary>
      <param name="attributeType" vsli:raw="Not supported.">Non pris en charge.</param>
      <param name="inherit" vsli:raw="Not supported.">Non pris en charge.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Non pris en charge pour les paramètres de type générique incomplets.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">Dans tous les cas.</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericParameter">
      <summary vsli:raw="Gets &lt;see langword=&quot;true&quot; /&gt; in all cases.">Obtient <see langword="true" /> dans tous les cas.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; in all cases.">
        <see langword="true" /> dans tous les cas.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericType">
      <summary vsli:raw="Returns &lt;see langword=&quot;false&quot; /&gt; in all cases.">Retourne <see langword="false" /> dans tous les cas.</summary>
      <returns vsli:raw="&lt;see langword=&quot;false&quot; /&gt; in all cases.">
        <see langword="false" /> dans tous les cas.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericTypeDefinition">
      <summary vsli:raw="Gets &lt;see langword=&quot;false&quot; /&gt; in all cases.">Obtient <see langword="false" /> dans tous les cas.</summary>
      <returns vsli:raw="&lt;see langword=&quot;false&quot; /&gt; in all cases.">
        <see langword="false" /> dans tous les cas.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsSubclassOf(System.Type)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Non pris en charge pour les paramètres de type générique incomplets.</summary>
      <param name="c" vsli:raw="Not supported.">Non pris en charge.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Non pris en charge pour les paramètres de type générique incomplets.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">Dans tous les cas.</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsSZArray" />
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsTypeDefinition" />
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsVariableBoundArray" />
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType">
      <summary vsli:raw="Returns the type of a one-dimensional array whose element type is the generic type parameter.">Retourne le type d'un tableau unidimensionnel dont le type d'élément est le paramètre de type générique.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type of a one-dimensional array whose element type is the generic type parameter.">Objet <see cref="T:System.Type" /> représentant le type d'un tableau unidimensionnel dont le type d'élément est le paramètre de type générique.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType(System.Int32)">
      <summary vsli:raw="Returns the type of an array whose element type is the generic type parameter, with the specified number of dimensions.">Retourne le type d'un tableau dont le type d'élément est le paramètre de type générique, avec le nombre spécifié de dimensions.</summary>
      <param name="rank" vsli:raw="The number of dimensions for the array.">Nombre de dimensions pour le tableau.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type of an array whose element type is the generic type parameter, with the specified number of dimensions.">Objet <see cref="T:System.Type" /> représentant le type d'un tableau dont le type d'élément est le paramètre de type générique, avec le nombre spécifié de dimensions.</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;rank&quot; /&gt; is not a valid number of dimensions. For example, its value is less than 1.">
        <paramref name="rank" /> n'est pas un nombre valide de dimensions. Par exemple, sa valeur est inférieure à 1.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the current generic type parameter when passed as a reference parameter.">Retourne un objet <see cref="T:System.Type" /> représentant le paramètre de type générique actuel lorsqu'il est passé en tant que paramètre de référence.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the current generic type parameter when passed as a reference parameter.">Objet <see cref="T:System.Type" /> représentant le paramètre de type générique actuel lorsqu'il est passé en tant que paramètre de référence.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeGenericType(System.Type[])">
      <summary vsli:raw="Not valid for incomplete generic type parameters.">Non valide pour les paramètres de type générique incomplets.</summary>
      <param name="typeArguments" vsli:raw="An array of type arguments.">Tableau d'arguments de type.</param>
      <returns vsli:raw="This method is invalid for incomplete generic type parameters.">Cette méthode n'est pas valide pour les paramètres de type générique incomplets.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">Dans tous les cas.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents a pointer to the current generic type parameter.">Retourne un objet <see cref="T:System.Type" /> représentant un pointeur vers le paramètre de type générique actuel.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents a pointer to the current generic type parameter.">Objet <see cref="T:System.Type" /> représentant un pointeur vers le paramètre de type générique actuel.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Module">
      <summary vsli:raw="Gets the dynamic module that contains the generic type parameter.">Obtient le module dynamique qui contient le paramètre de type générique.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; object that represents the dynamic module that contains the generic type parameter.">Objet <see cref="T:System.Reflection.Module" /> qui représente le module dynamique contenant le paramètre de type générique.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Name">
      <summary vsli:raw="Gets the name of the generic type parameter.">Obtient le nom du paramètre de type générique.</summary>
      <returns vsli:raw="The name of the generic type parameter.">Nom du paramètre de type générique.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Namespace">
      <summary vsli:raw="Gets &lt;see langword=&quot;null&quot; /&gt; in all cases.">Obtient <see langword="null" /> dans tous les cas.</summary>
      <returns vsli:raw="A null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic) in all cases.">Référence Null (<see langword="Nothing" /> en Visual Basic) dans tous les cas.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.ReflectedType">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Type&quot; /&gt; object that was used to obtain the &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt;.">Obtient l'objet <see cref="T:System.Type" /> qui a été utilisé pour obtenir <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object that was used to obtain the &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt;.">Objet <see cref="T:System.Type" /> qui a été utilisé pour obtenir <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint(System.Type)">
      <summary vsli:raw="Sets the base type that a type must inherit in order to be substituted for the type parameter.">Définit le type de base dont un type doit hériter afin d'être substitué au paramètre de type.</summary>
      <param name="baseTypeConstraint" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; that must be inherited by any type that is to be substituted for the type parameter.">
        <see cref="T:System.Type" /> devant être hérité par tout type qui sera substitué au paramètre de type.</param>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Sets a custom attribute using a specified custom attribute blob.">Définit un attribut personnalisé à l’aide d’un objet blob d’attribut personnalisé spécifié.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">Le constructeur de l’attribut personnalisé.</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attribute.">Objet blob d'octets représentant l'attribut.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is a null reference.">
        <paramref name="con" /> a la valeur <see langword="null" />.  

ou - 
<paramref name="binaryAttribute" /> est une référence null.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Set a custom attribute using a custom attribute builder.">Définit un attribut personnalisé à l’aide d’un générateur d’attributs personnalisés.</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class that defines the custom attribute.">Instance de classe d'assistance qui définit l'attribut personnalisé.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;customBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="customBuilder" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)">
      <summary vsli:raw="Sets the variance characteristics and special constraints of the generic parameter, such as the parameterless constructor constraint.">Définit les caractéristiques de variance et les contraintes spéciales du paramètre générique, telles que la contrainte de constructeur sans paramètre.</summary>
      <param name="genericParameterAttributes" vsli:raw="A bitwise combination of &lt;see cref=&quot;T:System.Reflection.GenericParameterAttributes&quot; /&gt; values that represent the variance characteristics and special constraints of the generic type parameter.">Combinaison d'opérations de bits de valeurs <see cref="T:System.Reflection.GenericParameterAttributes" /> représentant les caractéristiques de variance et les contraintes spéciales du paramètre de type générique.</param>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints(System.Type[])">
      <summary vsli:raw="Sets the interfaces a type must implement in order to be substituted for the type parameter.">Définit les interfaces qu'un type doit implémenter pour être substitué au paramètre de type.</summary>
      <param name="interfaceConstraints" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects that represent the interfaces a type must implement in order to be substituted for the type parameter.">Tableau d'objets <see cref="T:System.Type" /> représentant les interfaces qu'un type doit implémenter pour être substitué au paramètre de type.</param>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.ToString">
      <summary vsli:raw="Returns a string representation of the current generic type parameter.">Renvoie une représentation sous forme de chaîne du paramètre de type générique actuel.</summary>
      <returns vsli:raw="A string that contains the name of the generic type parameter.">Chaîne contenant le nom du paramètre de type générique.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.TypeHandle">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Non pris en charge pour les paramètres de type générique incomplets.</summary>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Non pris en charge pour les paramètres de type générique incomplets.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">Dans tous les cas.</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.UnderlyingSystemType">
      <summary vsli:raw="Gets the current generic type parameter.">Obtient le paramètre de type générique actuel.</summary>
      <returns vsli:raw="The current &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; object.">Objet <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> actuel.</returns>
    </member>
    <member name="T:System.Reflection.Emit.MethodBuilder">
      <summary vsli:raw="Defines and represents a method (or constructor) on a dynamic class.">Définit et représente une méthode (ou un constructeur) sur une classe dynamique.</summary>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.Attributes">
      <summary vsli:raw="Retrieves the attributes for this method.">Récupère les attributs de cette méthode.</summary>
      <returns vsli:raw="Read-only. Retrieves the &lt;see langword=&quot;MethodAttributes&quot; /&gt; for this method.">Lecture seule. Récupère les <see langword="MethodAttributes" /> de cette méthode.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.CallingConvention">
      <summary vsli:raw="Returns the calling convention of the method.">Retourne la convention d'appel de la méthode.</summary>
      <returns vsli:raw="Read-only. The calling convention of the method.">Lecture seule. Convention d’appel de la méthode.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ContainsGenericParameters">
      <summary vsli:raw="Not supported for this type.">Non pris en charge pour ce type.</summary>
      <returns vsli:raw="Not supported.">Non pris en charge.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The invoked method is not supported in the base class.">La méthode appelée n’est pas prise en charge dans la classe de base.</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.DeclaringType">
      <summary vsli:raw="Returns the type that declares this method.">Retourne le type qui déclare cette méthode.</summary>
      <returns vsli:raw="Read-only. The type that declares this method.">Lecture seule. Type qui déclare cette méthode.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])">
      <summary vsli:raw="Sets the number of generic type parameters for the current method, specifies their names, and returns an array of &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; objects that can be used to define their constraints.">Définit le nombre de paramètres de type générique pour la méthode actuelle, indique leurs noms et retourne un tableau d'objets <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> qui peuvent être utilisés pour définir leurs contraintes.</summary>
      <param name="names" vsli:raw="An array of strings that represent the names of the generic type parameters.">Tableau de chaînes qui représente les noms des paramètres de type générique.</param>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; objects representing the type parameters of the generic method.">Tableau d'objets <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> qui représentent les paramètres de type de la méthode générique.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Generic type parameters have already been defined for this method.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method has been completed already.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)&quot; /&gt; method has been called for the current method.">Les paramètres de type générique sont déjà définis pour cette méthode.  
ou 
La méthode a déjà été exécutée.  
ou 
La méthode <see cref="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)" /> a été appelée pour la méthode actuelle.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;names&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;names&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="names" /> a la valeur <see langword="null" />.  

ou - 
Un élément de <paramref name="names" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;names&quot; /&gt; is an empty array.">
        <paramref name="names" /> est un tableau vide.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
      <summary vsli:raw="Sets the parameter attributes and the name of a parameter of this method, or of the return value of this method. Returns a ParameterBuilder that can be used to apply custom attributes.">Définit les attributs de paramètre et le nom d’un paramètre de cette méthode, ou de la valeur de retour de cette méthode. Retourne un ParameterBuilder qui peut être utilisé pour appliquer des attributs personnalisés.</summary>
      <param name="position" vsli:raw="The position of the parameter in the parameter list. Parameters are indexed beginning with the number 1 for the first parameter; the number 0 represents the return value of the method.">Position du paramètre dans la liste des paramètres. Les paramètres sont indexés en commençant par le numéro 1 pour le premier paramètre ; le numéro 0 représente la valeur de retour de la méthode.</param>
      <param name="attributes" vsli:raw="The parameter attributes of the parameter.">Attributs du paramètre.</param>
      <param name="strParamName" vsli:raw="The name of the parameter. The name can be the null string.">Nom du paramètre. Le nom peut être la chaîne Null.</param>
      <returns vsli:raw="Returns a &lt;see langword=&quot;ParameterBuilder&quot; /&gt; object that represents a parameter of this method or the return value of this method.">Retourne un objet <see langword="ParameterBuilder" /> qui représente un paramètre de cette méthode ou la valeur de retour de cette méthode.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The method has no parameters.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;position&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;position&quot; /&gt; is greater than the number of the method's parameters.">La méthode n'a pas de paramètre.  

ou - 
<paramref name="position" /> est inférieur à zéro.  

ou - 
<paramref name="position" /> est supérieur au nombre de paramètres de la méthode.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current method, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Le type conteneur a déjà été créé à l’aide de <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.  
ou 
Pour la méthode actuelle, la propriété <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> est <see langword="true" />, mais la propriété <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> est <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.Equals(System.Object)">
      <summary vsli:raw="Determines whether the given object is equal to this instance.">Détermine si l'objet donné est égal à cette instance.</summary>
      <param name="obj" vsli:raw="The object to compare with this &lt;see langword=&quot;MethodBuilder&quot; /&gt; instance.">Objet à comparer à cette instance de <see langword="MethodBuilder" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is an instance of &lt;see langword=&quot;MethodBuilder&quot; /&gt; and is equal to this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="obj" /> est une instance de <see langword="MethodBuilder" /> et s'il est égal à cet objet ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetBaseDefinition">
      <summary vsli:raw="Return the base implementation for a method.">Retourne l'implémentation de base d'une méthode.</summary>
      <returns vsli:raw="The base implementation of this method.">Implémentation de base de cette méthode.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes defined for this method.">Retourne tous les attributs personnalisés définis pour cette méthode.</summary>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the custom attributes.">Spécifie s'il faut rechercher les attributs personnalisés dans la chaîne d'héritage de ce membre.</param>
      <returns vsli:raw="Returns an array of objects representing all the custom attributes of this method.">Retourne un tableau d'objets représentant tous les attributs personnalisés de cette méthode.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. Retrieve the method using &lt;see cref=&quot;M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;.">Cette méthode n’est pas prise en charge pour l’instant. Vous pouvez récupérer la méthode à l'aide de <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />, puis appeler <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> sur les <see cref="T:System.Reflection.MethodInfo" /> retournées.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Returns the custom attributes identified by the given type.">Retourne les attributs personnalisés identifiés par le type donné.</summary>
      <param name="attributeType" vsli:raw="The custom attribute type.">Type de l'attribut personnalisé.</param>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the custom attributes.">Spécifie s'il faut rechercher les attributs personnalisés dans la chaîne d'héritage de ce membre.</param>
      <returns vsli:raw="Returns an array of objects representing the attributes of this method that are of type &lt;paramref name=&quot;attributeType&quot; /&gt;.">Retourne un tableau d'objets représentant les attributs de cette méthode dont le type est <paramref name="attributeType" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. Retrieve the method using &lt;see cref=&quot;M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;.">Cette méthode n’est pas prise en charge pour l’instant. Vous pouvez récupérer la méthode à l'aide de <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />, puis appeler <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> sur les <see cref="T:System.Reflection.MethodInfo" /> retournées.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetGenericArguments">
      <summary vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; objects that represent the type parameters of the method, if it is generic.">Retourne un tableau d'objets <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> qui représentent les paramètres de type de la méthode, si elle est générique.</summary>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; objects representing the type parameters, if the method is generic, or &lt;see langword=&quot;null&quot; /&gt; if the method is not generic.">Tableau d'objets <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> qui représentent les paramètres de type, si la méthode est générique, ou <see langword="null" /> si la méthode n'est pas générique.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetGenericMethodDefinition">
      <summary vsli:raw="Returns this method.">Retourne cette méthode.</summary>
      <returns vsli:raw="The current instance of &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt;.">Instance actuelle de <see cref="T:System.Reflection.Emit.MethodBuilder" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current method is not generic. That is, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property returns &lt;see langword=&quot;false&quot; /&gt;.">La méthode actuelle n'est pas générique. Autrement dit, la propriété <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> retourne <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetHashCode">
      <summary vsli:raw="Gets the hash code for this method.">Obtient le code de hachage de cette méthode.</summary>
      <returns vsli:raw="The hash code for this method.">Code de hachage de cette méthode.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetILGenerator">
      <summary vsli:raw="Returns an &lt;see langword=&quot;ILGenerator&quot; /&gt; for this method with a default Microsoft intermediate language (MSIL) stream size of 64 bytes.">Retourne <see langword="ILGenerator" /> pour cette méthode avec une taille de flux MSIL (Microsoft Intermediate Language) par défaut de 64 octets.</summary>
      <returns vsli:raw="Returns an &lt;see langword=&quot;ILGenerator&quot; /&gt; object for this method.">Retourne un objet <see langword="ILGenerator" /> pour cette méthode.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The method should not have a body because of its &lt;see cref=&quot;T:System.Reflection.MethodAttributes&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.MethodImplAttributes&quot; /&gt; flags, for example because it has the &lt;see cref=&quot;F:System.Reflection.MethodAttributes.PinvokeImpl&quot; /&gt; flag.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method is a generic method, but not a generic method definition. That is, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">La méthode ne doit pas avoir de corps à cause de ses indicateurs <see cref="T:System.Reflection.MethodAttributes" /> ou <see cref="T:System.Reflection.MethodImplAttributes" />, par exemple parce qu'elle est dotée de l'indicateur <see cref="F:System.Reflection.MethodAttributes.PinvokeImpl" />.  

ou - 
La méthode est une méthode générique, mais pas une définition de méthode générique. Autrement dit, la propriété <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> a la valeur <see langword="true" />, mais la propriété <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> a la valeur <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetILGenerator(System.Int32)">
      <summary vsli:raw="Returns an &lt;see langword=&quot;ILGenerator&quot; /&gt; for this method with the specified Microsoft intermediate language (MSIL) stream size.">Retourne un <see langword="ILGenerator" /> pour cette méthode avec la taille de flux MSIL (Microsoft Intermediate Language) spécifiée.</summary>
      <param name="size" vsli:raw="The size of the MSIL stream, in bytes.">Taille du flux MSIL en octets.</param>
      <returns vsli:raw="Returns an &lt;see langword=&quot;ILGenerator&quot; /&gt; object for this method.">Retourne un objet <see langword="ILGenerator" /> pour cette méthode.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The method should not have a body because of its &lt;see cref=&quot;T:System.Reflection.MethodAttributes&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.MethodImplAttributes&quot; /&gt; flags, for example because it has the &lt;see cref=&quot;F:System.Reflection.MethodAttributes.PinvokeImpl&quot; /&gt; flag.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method is a generic method, but not a generic method definition. That is, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">La méthode ne doit pas avoir de corps à cause de ses indicateurs <see cref="T:System.Reflection.MethodAttributes" /> ou <see cref="T:System.Reflection.MethodImplAttributes" />, par exemple parce qu'elle est dotée de l'indicateur <see cref="F:System.Reflection.MethodAttributes.PinvokeImpl" />.  

ou - 
La méthode est une méthode générique, mais pas une définition de méthode générique. Autrement dit, la propriété <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> a la valeur <see langword="true" />, mais la propriété <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> a la valeur <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags">
      <summary vsli:raw="Returns the implementation flags for the method.">Retourne les indicateurs d'implémentation de la méthode.</summary>
      <returns vsli:raw="Returns the implementation flags for the method.">Retourne les indicateurs d'implémentation de la méthode.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetParameters">
      <summary vsli:raw="Returns the parameters of this method.">Retourne les paramètres de cette méthode.</summary>
      <returns vsli:raw="An array of &lt;see langword=&quot;ParameterInfo&quot; /&gt; objects that represent the parameters of the method.">Tableau d'objets <see langword="ParameterInfo" /> représentant les paramètres de la méthode.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. Retrieve the method using &lt;see cref=&quot;M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see langword=&quot;GetParameters&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;.">Cette méthode n’est pas prise en charge pour l’instant. Vous pouvez récupérer la méthode à l'aide de <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />, puis appeler <see langword="GetParameters" /> sur les <see cref="T:System.Reflection.MethodInfo" /> retournées.</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.InitLocals">
      <summary vsli:raw="Gets or sets a Boolean value that specifies whether the local variables in this method are zero initialized. The default value of this property is &lt;see langword=&quot;true&quot; /&gt;.">Obtient ou définit une valeur Boolean qui indique si les variables locales contenues dans cette méthode sont initialisées à zéro. La valeur par défaut de cette propriété est <see langword="true" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the local variables in this method should be zero initialized; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si les variables locales contenues dans cette méthode doivent être initialisées à zéro ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="For the current method, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;. (Get or set.)">Pour la méthode actuelle, la propriété <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> est <see langword="true" />, mais la propriété <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> est <see langword="false" />. (Get ou Set.)</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary vsli:raw="Dynamically invokes the method reflected by this instance on the given object, passing along the specified parameters, and under the constraints of the given binder.">Appelle le constructeur réfléchi de manière dynamique par cette instance sur l'objet donné, et passe les paramètres spécifiés, avec les contraintes du binder donné.</summary>
      <param name="obj" vsli:raw="The object on which to invoke the specified method. If the method is static, this parameter is ignored.">Objet sur lequel la méthode spécifiée doit être appelée. Si la méthode est statique, ce paramètre est ignoré.</param>
      <param name="invokeAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Il doit s’agir d’un bit indicateur issu de <see cref="T:System.Reflection.BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="NonPublic" />, etc.</param>
      <param name="binder" vsli:raw="An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects via reflection. If binder is &lt;see langword=&quot;null&quot; /&gt;, the default binder is used. For more details, see &lt;see cref=&quot;T:System.Reflection.Binder&quot; /&gt;.">Objet qui active la liaison, la contrainte de types d'arguments, l'appel des membres et la récupération d'objets MemberInfo par le biais de la réflexion. Si binder a la valeur <see langword="null" />, le binder par défaut est utilisé. Pour plus d'informations, consultez <see cref="T:System.Reflection.Binder" />.</param>
      <param name="parameters" vsli:raw="An argument list. This is an array of arguments with the same number, order, and type as the parameters of the method to be invoked. If there are no parameters this should be &lt;see langword=&quot;null&quot; /&gt;.">Liste d’arguments. Il s'agit d'un tableau d'arguments ayant les mêmes nombre, ordre et type que les paramètres de la méthode à appeler. En l'absence de paramètres, la valeur est <see langword="null" />.</param>
      <param name="culture" vsli:raw="An instance of &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; used to govern the coercion of types. If this is null, the &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; for the current thread is used. (Note that this is necessary to, for example, convert a &lt;see cref=&quot;T:System.String&quot; /&gt; that represents 1000 to a &lt;see cref=&quot;T:System.Double&quot; /&gt; value, since 1000 is represented differently by different cultures.)">Instance de <see cref="T:System.Globalization.CultureInfo" /> utilisée pour régir la contrainte des types. Si la valeur est Null, le <see cref="T:System.Globalization.CultureInfo" /> du thread actuel est utilisé. (Par exemple, cela est nécessaire pour la conversion d'un <see cref="T:System.String" /> représentant 1000 en une valeur <see cref="T:System.Double" />, car 1000 est représenté de différentes manières selon la culture.</param>
      <returns vsli:raw="Returns an object containing the return value of the invoked method.">Retourne un objet contenant la valeur de retour de la méthode appelée.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. Retrieve the method using &lt;see cref=&quot;M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see cref=&quot;M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;.">Cette méthode n’est pas prise en charge pour l’instant. Vous pouvez récupérer la méthode à l'aide de <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />, puis appeler <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> sur les <see cref="T:System.Reflection.MethodInfo" /> retournées.</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsConstructedGenericMethod" />
    <member name="M:System.Reflection.Emit.MethodBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Checks if the specified custom attribute type is defined.">Vérifie si le type d'attribut personnalisé spécifié est défini.</summary>
      <param name="attributeType" vsli:raw="The custom attribute type.">Type de l'attribut personnalisé.</param>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the custom attributes.">Spécifie s'il faut rechercher les attributs personnalisés dans la chaîne d'héritage de ce membre.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified custom attribute type is defined; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le type d'attribut personnalisé spécifié est défini ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. Retrieve the method using &lt;see cref=&quot;M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;.">Cette méthode n’est pas prise en charge pour l’instant. Vous pouvez récupérer la méthode à l'aide de <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />, puis appeler <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> sur les <see cref="T:System.Reflection.MethodInfo" /> retournées.</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod">
      <summary vsli:raw="Gets a value indicating whether the method is a generic method.">Obtient une valeur indiquant si la méthode est une méthode générique.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method is generic; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la méthode est générique ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition">
      <summary vsli:raw="Gets a value indicating whether the current &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt; object represents the definition of a generic method.">Obtient une valeur qui indique si l'objet <see cref="T:System.Reflection.Emit.MethodBuilder" /> actuel représente la définition d'une méthode générique.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt; object represents the definition of a generic method; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'objet <see cref="T:System.Reflection.Emit.MethodBuilder" /> actuel représente la définition d'une méthode générique ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsSecurityCritical">
      <summary vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</summary>
      <returns vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases. This property is not supported in dynamic assemblies.">Dans tous les cas. Cette propriété n'est pas prise en charge dans les assemblys dynamiques.</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsSecuritySafeCritical">
      <summary vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</summary>
      <returns vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases. This property is not supported in dynamic assemblies.">Dans tous les cas. Cette propriété n'est pas prise en charge dans les assemblys dynamiques.</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsSecurityTransparent">
      <summary vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</summary>
      <returns vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases. This property is not supported in dynamic assemblies.">Dans tous les cas. Cette propriété n'est pas prise en charge dans les assemblys dynamiques.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])">
      <summary vsli:raw="Returns a generic method constructed from the current generic method definition using the specified generic type arguments.">Retourne une méthode générique construite à partir de la définition de méthode générique actuelle à l'aide des arguments de type générique spécifiés.</summary>
      <param name="typeArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects that represent the type arguments for the generic method.">Tableau d'objets <see cref="T:System.Type" /> qui représentent les arguments de type de la méthode générique.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; representing the generic method constructed from the current generic method definition using the specified generic type arguments.">
        <see cref="T:System.Reflection.MethodInfo" /> qui représente la méthode générique construite à partir de la définition de méthode générique actuelle à l'aide des arguments de type générique spécifiés.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.MethodHandle">
      <summary vsli:raw="Retrieves the internal handle for the method. Use this handle to access the underlying metadata handle.">Récupère le handle interne de la méthode. Utilisez ce handle pour accéder au handle de métadonnées sous-jacent.</summary>
      <returns vsli:raw="Read-only. The internal handle for the method. Use this handle to access the underlying metadata handle.">Lecture seule. Handle interne de la méthode. Utilisez ce handle pour accéder au handle de métadonnées sous-jacent.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. Retrieve the method using &lt;see cref=&quot;M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see cref=&quot;P:System.Reflection.MethodBase.MethodHandle&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;.">Cette méthode n’est pas prise en charge pour l’instant. Vous pouvez récupérer la méthode à l'aide de <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />, puis appeler <see cref="P:System.Reflection.MethodBase.MethodHandle" /> sur les <see cref="T:System.Reflection.MethodInfo" /> retournées.</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.Module">
      <summary vsli:raw="Gets the module in which the current method is being defined.">Obtient le module dans lequel la méthode actuelle est définie.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; in which the member represented by the current &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; is being defined.">
        <see cref="T:System.Reflection.Module" /> dans lequel le membre représenté par les <see cref="T:System.Reflection.MemberInfo" /> en cours est défini.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.Name">
      <summary vsli:raw="Retrieves the name of this method.">Récupère le nom de cette méthode.</summary>
      <returns vsli:raw="Read-only. Retrieves a string containing the simple name of this method.">Lecture seule. Récupère une chaîne contenant le nom simple de cette méthode.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReflectedType">
      <summary vsli:raw="Retrieves the class that was used in reflection to obtain this object.">Récupère la classe dont la réflexion a été utilisée pour obtenir cet objet.</summary>
      <returns vsli:raw="Read-only. The type used to obtain this method.">Lecture seule. Type utilisé pour obtenir cette méthode.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReturnParameter">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Reflection.ParameterInfo&quot; /&gt; object that contains information about the return type of the method, such as whether the return type has custom modifiers.">Obtient un objet <see cref="T:System.Reflection.ParameterInfo" /> qui contient des informations relatives au type de retour de la méthode, telles que la présence de modificateurs personnalisés.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.ParameterInfo&quot; /&gt; object that contains information about the return type.">Objet <see cref="T:System.Reflection.ParameterInfo" /> qui contient des informations sur le type de retour.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The declaring type has not been created.">Le type déclarant n'a pas été créé.</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReturnType">
      <summary vsli:raw="Gets the return type of the method represented by this &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt;.">Obtient le type de retour de la méthode représentée par ce <see cref="T:System.Reflection.Emit.MethodBuilder" />.</summary>
      <returns vsli:raw="The return type of the method.">Type de retour de la méthode.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReturnTypeCustomAttributes">
      <summary vsli:raw="Returns the custom attributes of the method's return type.">Retourne les attributs personnalisés du type de retour de la méthode.</summary>
      <returns vsli:raw="Read-only. The custom attributes of the method's return type.">Lecture seule. Attributs personnalisés du type de retour de la méthode.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Sets a custom attribute using a specified custom attribute blob.">Définit un attribut personnalisé à l’aide d’un objet blob d’attribut personnalisé spécifié.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">Le constructeur de l’attribut personnalisé.</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">Objet blob d’octets représentant les attributs.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> ou <paramref name="binaryAttribute" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="For the current method, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Pour la méthode actuelle, la propriété <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> est <see langword="true" />, mais la propriété <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> est <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Sets a custom attribute using a custom attribute builder.">Définit un attribut personnalisé à l'aide d'un générateur d'attributs personnalisés.</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to describe the custom attribute.">Instance de classe d'assistance servant à décrire l'attribut personnalisé.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;customBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="customBuilder" /> est <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="For the current method, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Pour la méthode actuelle, la propriété <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> est <see langword="true" />, mais la propriété <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> est <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)">
      <summary vsli:raw="Sets the implementation flags for this method.">Définit les indicateurs d'implémentation de cette méthode.</summary>
      <param name="attributes" vsli:raw="The implementation flags to set.">Indicateurs d'implémentation à définir.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current method, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Le type conteneur a déjà été créé à l’aide de <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.  

ou - 
Pour la méthode actuelle, la propriété <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> est <see langword="true" />, mais la propriété <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> est <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])">
      <summary vsli:raw="Sets the number and types of parameters for a method.">Définit le nombre et les types de paramètres d'une méthode.</summary>
      <param name="parameterTypes" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the parameter types.">Tableau d'objets <see cref="T:System.Type" /> représentant les types de paramètres.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current method is generic, but is not a generic method definition. That is, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">La méthode actuelle est générique, mais n'est pas une définition de méthode générique. Autrement dit, la propriété <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> a la valeur <see langword="true" />, mais la propriété <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> a la valeur <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)">
      <summary vsli:raw="Sets the return type of the method.">Définit le type de retour de la méthode.</summary>
      <param name="returnType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the return type of the method.">Objet <see cref="T:System.Type" /> qui représente le type de retour de la méthode.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current method is generic, but is not a generic method definition. That is, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">La méthode actuelle est générique, mais n'est pas une définition de méthode générique. Autrement dit, la propriété <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> a la valeur <see langword="true" />, mais la propriété <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> a la valeur <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Sets the method signature, including the return type, the parameter types, and the required and optional custom modifiers of the return type and parameter types.">Définit la signature de la méthode, y compris le type de retour, les types de paramètres et les modificateurs personnalisés requis et facultatifs du type de retour et des types de paramètres.</summary>
      <param name="returnType" vsli:raw="The return type of the method.">Type de retour de la méthode.</param>
      <param name="returnTypeRequiredCustomModifiers" vsli:raw="An array of types representing the required custom modifiers, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;, for the return type of the method. If the return type has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Tableau de types représentant les modificateurs personnalisés requis, tels qu’<see cref="T:System.Runtime.CompilerServices.IsConst" />, pour le type de retour de la méthode. Si le type de retour ne possède pas de modificateur personnalisé requis, spécifiez <see langword="null" />.</param>
      <param name="returnTypeOptionalCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;, for the return type of the method. If the return type has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Tableau de types représentant les modificateurs personnalisés facultatifs, tels qu’<see cref="T:System.Runtime.CompilerServices.IsConst" />, pour le type de retour de la méthode. Si le type de retour ne possède pas de modificateur personnalisé facultatif, spécifiez <see langword="null" />.</param>
      <param name="parameterTypes" vsli:raw="The types of the parameters of the method.">Types des paramètres de la méthode.</param>
      <param name="parameterTypeRequiredCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Tableau de tableaux de types. Chaque tableau de types représente les modificateurs personnalisés obligatoires pour le paramètre correspondant, comme <see cref="T:System.Runtime.CompilerServices.IsConst" />. Si un paramètre particulier ne possède pas de modificateurs personnalisés obligatoires, spécifiez <see langword="null" /> plutôt qu’un tableau de types. Si aucun paramètre ne possède de modificateur personnalisé requis, spécifiez <see langword="null" /> plutôt qu’un tableau de tableaux.</param>
      <param name="parameterTypeOptionalCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Tableau de tableaux de types. Chaque tableau de types représente les modificateurs personnalisés facultatifs pour le paramètre correspondant, comme <see cref="T:System.Runtime.CompilerServices.IsConst" />. Si un paramètre particulier ne possède pas de modificateurs personnalisés facultatifs, spécifiez <see langword="null" /> plutôt qu’un tableau de types. Si aucun paramètre ne possède de modificateur personnalisé facultatif, spécifiez <see langword="null" /> plutôt qu’un tableau de tableaux.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current method is generic, but is not a generic method definition. That is, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">La méthode actuelle est générique, mais n'est pas une définition de méthode générique. Autrement dit, la propriété <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> a la valeur <see langword="true" />, mais la propriété <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> a la valeur <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.ToString">
      <summary vsli:raw="Returns this &lt;see langword=&quot;MethodBuilder&quot; /&gt; instance as a string.">Retourne cette instance de <see langword="MethodBuilder" /> en tant que chaîne.</summary>
      <returns vsli:raw="Returns a string containing the name, attributes, method signature, exceptions, and local signature of this method followed by the current Microsoft intermediate language (MSIL) stream.">Retourne une chaîne contenant le nom, les attributs, la signature de méthode, les exceptions et la signature locale de cette méthode, suivis du flux MSIL (Microsoft Intermediate Language) en cours.</returns>
    </member>
    <member name="T:System.Reflection.Emit.ModuleBuilder">
      <summary vsli:raw="Defines and represents a module in a dynamic assembly.">Définit et représente un module dans un assembly dynamique.</summary>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.Assembly">
      <summary vsli:raw="Gets the dynamic assembly that defined this instance of &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;.">Obtient l'assembly dynamique qui a défini cette instance de <see cref="T:System.Reflection.Emit.ModuleBuilder" />.</summary>
      <returns vsli:raw="The dynamic assembly that defined the current dynamic module.">Assembly dynamique qui a défini le module dynamique actuel.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions">
      <summary vsli:raw="Completes the global function definitions and global data definitions for this dynamic module.">Complète les définitions de fonction globale et les définitions de données globales pour ce module dynamique.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This method was called previously.">Cette méthode a été appelée au préalable.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineEnum(System.String,System.Reflection.TypeAttributes,System.Type)">
      <summary vsli:raw="Defines an enumeration type that is a value type with a single non-static field called &lt;paramref name=&quot;value__&quot; /&gt; of the specified type.">Définit un type d'énumération qui est un type valeur avec un champ non statique unique appelé <paramref name="value__" /> du type spécifié.</summary>
      <param name="name" vsli:raw="The full path of the enumeration type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Chemin d'accès complet du type d'énumération. <paramref name="name" /> ne peut pas contenir de valeurs null imbriquées.</param>
      <param name="visibility" vsli:raw="The type attributes for the enumeration. The attributes are any bits defined by &lt;see cref=&quot;F:System.Reflection.TypeAttributes.VisibilityMask&quot; /&gt;.">Attributs de type pour l'énumération. Un attribut correspond à n'importe quel octet défini par <see cref="F:System.Reflection.TypeAttributes.VisibilityMask" />.</param>
      <param name="underlyingType" vsli:raw="The underlying type for the enumeration. This must be a built-in integer type.">Type sous-jacent pour l'énumération. Ce doit être un type entier intégré.</param>
      <returns vsli:raw="The defined enumeration.">Énumération définie.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="Attributes other than visibility attributes are provided.  &#xA;  &#xA; -or-  &#xA;  &#xA; An enumeration with the given name exists in the parent assembly of this module.  &#xA;  &#xA; -or-  &#xA;  &#xA; The visibility attributes do not match the scope of the enumeration. For example, &lt;see cref=&quot;F:System.Reflection.TypeAttributes.NestedPublic&quot; /&gt; is specified for &lt;paramref name=&quot;visibility&quot; /&gt;, but the enumeration is not a nested type.">Des attributs autres que des attributs de visibilité sont fournis.  

ou - 
Une énumération portant le nom donné existe dans l'assembly parent de ce module.  

ou - 
Les attributs de visibilité ne correspondent pas à la portée de l'énumération. Par exemple, si <see cref="F:System.Reflection.TypeAttributes.NestedPublic" /> est spécifié pour <paramref name="visibility" /> alors que l'énumération n'est pas de type imbriqué.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary vsli:raw="Defines a global method with the specified name, attributes, calling convention, return type, and parameter types.">Définit une méthode globale à l'aide du nom, des attributs, de la convention d'appel, du type de retour et des types de paramètres spécifiés.</summary>
      <param name="name" vsli:raw="The name of the method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Nom de la méthode. <paramref name="name" /> ne peut pas contenir de valeurs null imbriquées.</param>
      <param name="attributes" vsli:raw="The attributes of the method. &lt;paramref name=&quot;attributes&quot; /&gt; must include &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Static&quot; /&gt;.">Attributs de la méthode. <paramref name="attributes" /> doit inclure <see cref="F:System.Reflection.MethodAttributes.Static" />.</param>
      <param name="callingConvention" vsli:raw="The calling convention for the method.">Convention d’appel de la méthode.</param>
      <param name="returnType" vsli:raw="The return type of the method.">Type de retour de la méthode.</param>
      <param name="parameterTypes" vsli:raw="The types of the method's parameters.">Types des paramètres de la méthode.</param>
      <returns vsli:raw="The defined global method.">Méthode globale définie.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The method is not static. That is, &lt;paramref name=&quot;attributes&quot; /&gt; does not include &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Static&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element in the &lt;see cref=&quot;T:System.Type&quot; /&gt; array is &lt;see langword=&quot;null&quot; /&gt;.">La méthode n’est pas statique. C'est-à-dire que <paramref name="attributes" /> n'inclut pas <see cref="F:System.Reflection.MethodAttributes.Static" />.  
ou 
Un élément du tableau <see cref="T:System.Type" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions&quot; /&gt; has been previously called.">
        <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" /> a été appelé précédemment.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Defines a global method with the specified name, attributes, calling convention, return type, custom modifiers for the return type, parameter types, and custom modifiers for the parameter types.">Définit une méthode globale à l'aide du nom, des attributs, de la convention d'appel, du type de retour, des modificateurs personnalisés pour le type de retour, des types de paramètres et des modificateurs personnalisés pour les types de paramètres spécifiés.</summary>
      <param name="name" vsli:raw="The name of the method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded null characters.">Nom de la méthode. <paramref name="name" /> ne peut pas contenir de caractères Null incorporés.</param>
      <param name="attributes" vsli:raw="The attributes of the method. &lt;paramref name=&quot;attributes&quot; /&gt; must include &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Static&quot; /&gt;.">Attributs de la méthode. <paramref name="attributes" /> doit inclure <see cref="F:System.Reflection.MethodAttributes.Static" />.</param>
      <param name="callingConvention" vsli:raw="The calling convention for the method.">Convention d’appel de la méthode.</param>
      <param name="returnType" vsli:raw="The return type of the method.">Type de retour de la méthode.</param>
      <param name="requiredReturnTypeCustomModifiers" vsli:raw="An array of types representing the required custom modifiers for the return type, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the return type has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Tableau des types représentant les modificateurs personnalisés requis pour le type de retour, tels que <see cref="T:System.Runtime.CompilerServices.IsConst" /> ou <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. Si le type de retour ne possède pas de modificateur personnalisé requis, spécifiez <see langword="null" />.</param>
      <param name="optionalReturnTypeCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers for the return type, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the return type has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Tableau des types représentant les modificateurs personnalisés facultatifs pour le type de retour, tels que <see cref="T:System.Runtime.CompilerServices.IsConst" /> ou <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. Si le type de retour ne possède pas de modificateur personnalisé facultatif, spécifiez <see langword="null" />.</param>
      <param name="parameterTypes" vsli:raw="The types of the method's parameters.">Types des paramètres de la méthode.</param>
      <param name="requiredParameterTypeCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter of the global method. If a particular argument has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If the global method has no arguments, or if none of the arguments have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Tableau de tableaux de types. Chaque tableau de types représente les modificateurs personnalisés requis pour le paramètre correspondant de la méthode globale. Si un argument particulier ne possède pas de modificateur personnalisé requis, spécifiez <see langword="null" /> plutôt qu'un tableau de types. Si la méthode globale ne possède pas d'argument, ou si aucun des arguments ne possède de modificateur personnalisé requis, spécifiez <see langword="null" /> plutôt qu'un tableau de tableaux.</param>
      <param name="optionalParameterTypeCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter. If a particular argument has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If the global method has no arguments, or if none of the arguments have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Tableau de tableaux de types. Chaque tableau de types représente les modificateurs personnalisés facultatifs pour le paramètre correspondant. Si un argument particulier ne possède pas de modificateur personnalisé facultatif, spécifiez <see langword="null" /> plutôt qu'un tableau de types. Si la méthode globale ne possède pas d'argument, ou si aucun des arguments ne possède de modificateur personnalisé facultatif, spécifiez <see langword="null" /> plutôt qu'un tableau de tableaux.</param>
      <returns vsli:raw="The defined global method.">Méthode globale définie.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The method is not static. That is, &lt;paramref name=&quot;attributes&quot; /&gt; does not include &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Static&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element in the &lt;see cref=&quot;T:System.Type&quot; /&gt; array is &lt;see langword=&quot;null&quot; /&gt;.">La méthode n’est pas statique. C'est-à-dire que <paramref name="attributes" /> n'inclut pas <see cref="F:System.Reflection.MethodAttributes.Static" />.  

ou - 
Un élément du tableau <see cref="T:System.Type" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> est <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions&quot; /&gt; method has been previously called.">La méthode <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" /> a été appelée au préalable.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])">
      <summary vsli:raw="Defines a global method with the specified name, attributes, return type, and parameter types.">Définit une méthode globale à l'aide du nom, des attributs, du type de retour et des types de paramètres spécifiés.</summary>
      <param name="name" vsli:raw="The name of the method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Nom de la méthode. <paramref name="name" /> ne peut pas contenir de valeurs null imbriquées.</param>
      <param name="attributes" vsli:raw="The attributes of the method. &lt;paramref name=&quot;attributes&quot; /&gt; must include &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Static&quot; /&gt;.">Attributs de la méthode. <paramref name="attributes" /> doit inclure <see cref="F:System.Reflection.MethodAttributes.Static" />.</param>
      <param name="returnType" vsli:raw="The return type of the method.">Type de retour de la méthode.</param>
      <param name="parameterTypes" vsli:raw="The types of the method's parameters.">Types des paramètres de la méthode.</param>
      <returns vsli:raw="The defined global method.">Méthode globale définie.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The method is not static. That is, &lt;paramref name=&quot;attributes&quot; /&gt; does not include &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Static&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; is zero  &#xA;  &#xA; -or-  &#xA;  &#xA; An element in the &lt;see cref=&quot;T:System.Type&quot; /&gt; array is &lt;see langword=&quot;null&quot; /&gt;.">La méthode n’est pas statique. C'est-à-dire que <paramref name="attributes" /> n'inclut pas <see cref="F:System.Reflection.MethodAttributes.Static" />.  
ou 
La longueur de <paramref name="name" /> est égale à zéro. 
ou 
Un élément du tableau <see cref="T:System.Type" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> est <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions&quot; /&gt; has been previously called.">
        <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" /> a été appelé précédemment.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)">
      <summary vsli:raw="Defines an initialized data field in the .sdata section of the portable executable (PE) file.">Définit un champ de données initialisé dans la section .sdata du fichier exécutable portable.</summary>
      <param name="name" vsli:raw="The name used to refer to the data. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Nom utilisé pour faire référence aux données. <paramref name="name" /> ne peut pas contenir de valeurs null imbriquées.</param>
      <param name="data" vsli:raw="The binary large object (BLOB) of data.">Objet BLOB de données.</param>
      <param name="attributes" vsli:raw="The attributes for the field. The default is &lt;see langword=&quot;Static&quot; /&gt;.">Attributs du champ. La valeur par défaut est <see langword="Static" />.</param>
      <returns vsli:raw="A field to reference the data.">Champ pour référencer les données.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The size of &lt;paramref name=&quot;data&quot; /&gt; is less than or equal to zero or greater than or equal to 0x3f0000.">La longueur de <paramref name="name" /> est égale à zéro.  

ou - 
La taille de <paramref name="data" /> est inférieure ou égale à zéro, ou supérieure ou égale à 0x3f0000.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; or &lt;paramref name=&quot;data&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> ou <paramref name="data" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions&quot; /&gt; has been previously called.">
        <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" /> a été appelé précédemment.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod(System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary vsli:raw="Defines a &lt;see langword=&quot;PInvoke&quot; /&gt; method with the specified name, the name of the DLL in which the method is defined, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the &lt;see langword=&quot;PInvoke&quot; /&gt; flags.">Définit une méthode <see langword="PInvoke" /> à l'aide du nom, du nom de la DLL dans laquelle la méthode a été définie, des attributs de la méthode, de la convention d'appel, du type de retour, des types de paramètres et des indicateurs <see langword="PInvoke" /> spécifiés.</summary>
      <param name="name" vsli:raw="The name of the &lt;see langword=&quot;PInvoke&quot; /&gt; method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Nom de la méthode <see langword="PInvoke" />. <paramref name="name" /> ne peut pas contenir de valeurs null imbriquées.</param>
      <param name="dllName" vsli:raw="The name of the DLL in which the &lt;see langword=&quot;PInvoke&quot; /&gt; method is defined.">Nom de la DLL dans laquelle la méthode <see langword="PInvoke" /> est définie.</param>
      <param name="attributes" vsli:raw="The attributes of the method.">Attributs de la méthode.</param>
      <param name="callingConvention" vsli:raw="The method's calling convention.">Convention d’appel de la méthode.</param>
      <param name="returnType" vsli:raw="The method's return type.">Type de retour de la méthode.</param>
      <param name="parameterTypes" vsli:raw="The types of the method's parameters.">Types des paramètres de la méthode.</param>
      <param name="nativeCallConv" vsli:raw="The native calling convention.">Convention d’appel native.</param>
      <param name="nativeCharSet" vsli:raw="The method's native character set.">Jeu de caractères natif de la méthode.</param>
      <returns vsli:raw="The defined &lt;see langword=&quot;PInvoke&quot; /&gt; method.">Méthode <see langword="PInvoke" /> définie.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The method is not static or if the containing type is an interface.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method is abstract.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method was previously defined.">La méthode n'est pas statique ou le type conteneur est une interface.  
 ou  
 La méthode est de type abstract.  

ou -  

 La méthode a déjà été définie.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; or &lt;paramref name=&quot;dllName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> ou <paramref name="dllName" /> est <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;">Le type conteneur a été créé au préalable à l'aide de la méthode <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary vsli:raw="Defines a &lt;see langword=&quot;PInvoke&quot; /&gt; method with the specified name, the name of the DLL in which the method is defined, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the &lt;see langword=&quot;PInvoke&quot; /&gt; flags.">Définit une méthode <see langword="PInvoke" /> à l'aide du nom, du nom de la DLL dans laquelle la méthode a été définie, des attributs de la méthode, de la convention d'appel, du type de retour, des types de paramètres et des indicateurs <see langword="PInvoke" /> spécifiés.</summary>
      <param name="name" vsli:raw="The name of the &lt;see langword=&quot;PInvoke&quot; /&gt; method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Nom de la méthode <see langword="PInvoke" />. <paramref name="name" /> ne peut pas contenir de valeurs null imbriquées.</param>
      <param name="dllName" vsli:raw="The name of the DLL in which the &lt;see langword=&quot;PInvoke&quot; /&gt; method is defined.">Nom de la DLL dans laquelle la méthode <see langword="PInvoke" /> est définie.</param>
      <param name="entryName" vsli:raw="The name of the entry point in the DLL.">Nom du point d’entrée dans la DLL.</param>
      <param name="attributes" vsli:raw="The attributes of the method.">Attributs de la méthode.</param>
      <param name="callingConvention" vsli:raw="The method's calling convention.">Convention d’appel de la méthode.</param>
      <param name="returnType" vsli:raw="The method's return type.">Type de retour de la méthode.</param>
      <param name="parameterTypes" vsli:raw="The types of the method's parameters.">Types des paramètres de la méthode.</param>
      <param name="nativeCallConv" vsli:raw="The native calling convention.">Convention d’appel native.</param>
      <param name="nativeCharSet" vsli:raw="The method's native character set.">Jeu de caractères natif de la méthode.</param>
      <returns vsli:raw="The defined &lt;see langword=&quot;PInvoke&quot; /&gt; method.">Méthode <see langword="PInvoke" /> définie.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The method is not static or if the containing type is an interface or if the method is abstract of if the method was previously defined.">La méthode n'est pas statique, le type conteneur est une interface, la méthode est abstraite ou elle a été définie au préalable.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; or &lt;paramref name=&quot;dllName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> ou <paramref name="dllName" /> est <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;">Le type conteneur a été créé au préalable à l'aide de la méthode <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String)">
      <summary vsli:raw="Constructs a &lt;see langword=&quot;TypeBuilder&quot; /&gt; for a private type with the specified name in this module.">Construit un <see langword="TypeBuilder" /> pour un type privé portant le nom spécifié dans ce module.</summary>
      <param name="name" vsli:raw="The full path of the type, including the namespace. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Chemin d'accès complet du type, espace de noms compris. <paramref name="name" /> ne peut pas contenir de valeurs null imbriquées.</param>
      <returns vsli:raw="A private type with the specified name.">Type privé portant le nom spécifié.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="A type with the given name exists in the parent assembly of this module.  &#xA;  &#xA; -or-  &#xA;  &#xA; Nested type attributes are set on a type that is not nested.">Un type portant le nom donné existe dans l'assembly parent de ce module.  

ou -  

 Des attributs de type imbriqué sont définis sur un type non imbriqué.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes)">
      <summary vsli:raw="Constructs a &lt;see langword=&quot;TypeBuilder&quot; /&gt; given the type name and the type attributes.">Construit un <see langword="TypeBuilder" /> en fonction du nom et des attributs du type.</summary>
      <param name="name" vsli:raw="The full path of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Chemin d'accès complet du type. <paramref name="name" /> ne peut pas contenir de valeurs null imbriquées.</param>
      <param name="attr" vsli:raw="The attributes of the defined type.">Attributs du type défini.</param>
      <returns vsli:raw="A &lt;see langword=&quot;TypeBuilder&quot; /&gt; created with all of the requested attributes.">
        <see langword="TypeBuilder" /> créé avec tous les attributs demandés.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="A type with the given name exists in the parent assembly of this module.  &#xA;  &#xA; -or-  &#xA;  &#xA; Nested type attributes are set on a type that is not nested.">Un type portant le nom donné existe dans l'assembly parent de ce module.  
 ou  
 Des attributs de type imbriqué sont définis sur un type non imbriqué.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type)">
      <summary vsli:raw="Constructs a &lt;see langword=&quot;TypeBuilder&quot; /&gt; given type name, its attributes, and the type that the defined type extends.">Construit un <see langword="TypeBuilder" /> en fonction du nom et des attributs du type, ainsi que du type que le type défini étend.</summary>
      <param name="name" vsli:raw="The full path of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Chemin d'accès complet du type. <paramref name="name" /> ne peut pas contenir de valeurs null imbriquées.</param>
      <param name="attr" vsli:raw="The attribute to be associated with the type.">Attribut à associer au type.</param>
      <param name="parent" vsli:raw="The type that the defined type extends.">Type étendu par le type défini.</param>
      <returns vsli:raw="A &lt;see langword=&quot;TypeBuilder&quot; /&gt; created with all of the requested attributes.">
        <see langword="TypeBuilder" /> créé avec tous les attributs demandés.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="A type with the given name exists in the parent assembly of this module.  &#xA;  &#xA; -or-  &#xA;  &#xA; Nested type attributes are set on a type that is not nested.">Un type portant le nom donné existe dans l'assembly parent de ce module.  

ou -  

 Des attributs de type imbriqué sont définis sur un type non imbriqué.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)">
      <summary vsli:raw="Constructs a &lt;see langword=&quot;TypeBuilder&quot; /&gt; given the type name, the attributes, the type that the defined type extends, and the total size of the type.">Construit un <see langword="TypeBuilder" /> en fonction du nom et des attributs du type, du type étendu par le type défini et de la taille totale du type.</summary>
      <param name="name" vsli:raw="The full path of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Chemin d'accès complet du type. <paramref name="name" /> ne peut pas contenir de valeurs null imbriquées.</param>
      <param name="attr" vsli:raw="The attributes of the defined type.">Attributs du type défini.</param>
      <param name="parent" vsli:raw="The type that the defined type extends.">Type étendu par le type défini.</param>
      <param name="typesize" vsli:raw="The total size of the type.">Taille totale du type.</param>
      <returns vsli:raw="A &lt;see langword=&quot;TypeBuilder&quot; /&gt; object.">Objet <see langword="TypeBuilder" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="A type with the given name exists in the parent assembly of this module.  &#xA;  &#xA; -or-  &#xA;  &#xA; Nested type attributes are set on a type that is not nested.">Un type portant le nom donné existe dans l'assembly parent de ce module.  

ou -  

 Des attributs de type imbriqué sont définis sur un type non imbriqué.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)">
      <summary vsli:raw="Constructs a &lt;see langword=&quot;TypeBuilder&quot; /&gt; given the type name, the attributes, the type that the defined type extends, and the packing size of the type.">Construit un <see langword="TypeBuilder" /> en fonction du nom et des attributs du type, du type étendu par le type défini et de la taille de compactage du type.</summary>
      <param name="name" vsli:raw="The full path of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Chemin d'accès complet du type. <paramref name="name" /> ne peut pas contenir de valeurs null imbriquées.</param>
      <param name="attr" vsli:raw="The attributes of the defined type.">Attributs du type défini.</param>
      <param name="parent" vsli:raw="The type that the defined type extends.">Type étendu par le type défini.</param>
      <param name="packsize" vsli:raw="The packing size of the type.">Taille de compression du type.</param>
      <returns vsli:raw="A &lt;see langword=&quot;TypeBuilder&quot; /&gt; object.">Objet <see langword="TypeBuilder" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="A type with the given name exists in the parent assembly of this module.  &#xA;  &#xA; -or-  &#xA;  &#xA; Nested type attributes are set on a type that is not nested.">Un type portant le nom donné existe dans l'assembly parent de ce module.  

ou -  

 Des attributs de type imbriqué sont définis sur un type non imbriqué.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)">
      <summary vsli:raw="Constructs a &lt;see langword=&quot;TypeBuilder&quot; /&gt; given the type name, attributes, the type that the defined type extends, the packing size of the defined type, and the total size of the defined type.">Construit un <see langword="TypeBuilder" /> en fonction du nom et des attributs du type, du type étendu par le type défini, de la taille de compactage et de la taille totale du type défini.</summary>
      <param name="name" vsli:raw="The full path of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Chemin d'accès complet du type. <paramref name="name" /> ne peut pas contenir de valeurs null imbriquées.</param>
      <param name="attr" vsli:raw="The attributes of the defined type.">Attributs du type défini.</param>
      <param name="parent" vsli:raw="The type that the defined type extends.">Type étendu par le type défini.</param>
      <param name="packingSize" vsli:raw="The packing size of the type.">Taille de compression du type.</param>
      <param name="typesize" vsli:raw="The total size of the type.">Taille totale du type.</param>
      <returns vsli:raw="A &lt;see langword=&quot;TypeBuilder&quot; /&gt; created with all of the requested attributes.">
        <see langword="TypeBuilder" /> créé avec tous les attributs demandés.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="A type with the given name exists in the parent assembly of this module.  &#xA;  &#xA; -or-  &#xA;  &#xA; Nested type attributes are set on a type that is not nested.">Un type portant le nom donné existe dans l'assembly parent de ce module.  
 ou  
 Des attributs de type imbriqué sont définis sur un type non imbriqué.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])">
      <summary vsli:raw="Constructs a &lt;see langword=&quot;TypeBuilder&quot; /&gt; given the type name, attributes, the type that the defined type extends, and the interfaces that the defined type implements.">Construit un <see langword="TypeBuilder" /> en fonction du nom et des attributs du type, du type étendu par le type défini et de l'interface implémentée par le type défini.</summary>
      <param name="name" vsli:raw="The full path of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Chemin d'accès complet du type. <paramref name="name" /> ne peut pas contenir de valeurs null imbriquées.</param>
      <param name="attr" vsli:raw="The attributes to be associated with the type.">Attributs à associer au type.</param>
      <param name="parent" vsli:raw="The type that the defined type extends.">Type étendu par le type défini.</param>
      <param name="interfaces" vsli:raw="The list of interfaces that the type implements.">Liste des interfaces implémentées par le type.</param>
      <returns vsli:raw="A &lt;see langword=&quot;TypeBuilder&quot; /&gt; created with all of the requested attributes.">
        <see langword="TypeBuilder" /> créé avec tous les attributs demandés.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="A type with the given name exists in the parent assembly of this module.  &#xA;  &#xA; -or-  &#xA;  &#xA; Nested type attributes are set on a type that is not nested.">Un type portant le nom donné existe dans l'assembly parent de ce module.  

ou -  

 Des attributs de type imbriqué sont définis sur un type non imbriqué.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)">
      <summary vsli:raw="Defines an uninitialized data field in the .sdata section of the portable executable (PE) file.">Définit un champ de données non initialisé dans la section .sdata du fichier exécutable portable (PE, Portable Executable).</summary>
      <param name="name" vsli:raw="The name used to refer to the data. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Nom utilisé pour faire référence aux données. <paramref name="name" /> ne peut pas contenir des valeurs Null imbriquées.</param>
      <param name="size" vsli:raw="The size of the data field.">Taille du champ de données.</param>
      <param name="attributes" vsli:raw="The attributes for the field.">Attributs du champ.</param>
      <returns vsli:raw="A field to reference the data.">Champ pour référencer les données.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;size&quot; /&gt; is less than or equal to zero, or greater than or equal to 0x003f0000.">La longueur de <paramref name="name" /> est égale à zéro.  

ou - 
<paramref name="size" /> est inférieur ou égal à zéro, ou supérieur ou égal à 0x003f0000.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions&quot; /&gt; has been previously called.">
        <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" /> a été appelé précédemment.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to the specified object.">Retourne une valeur qui indique si cette instance équivaut à l’objet spécifié.</summary>
      <param name="obj" vsli:raw="An object to compare with this instance, or &lt;see langword=&quot;null&quot; /&gt;.">Objet à comparer à cette instance ou <see langword="null" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="obj" /> est égal au type et à la valeur de cette instance ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.FullyQualifiedName">
      <summary vsli:raw="Gets a &lt;see langword=&quot;String&quot; /&gt; representing the fully qualified name and path to this module.">Obtient un <see langword="String" /> représentant le nom et le chemin d'accès complets de ce module.</summary>
      <returns vsli:raw="The fully qualified module name.">Nom qualifié complet du module.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary vsli:raw="Returns the named method on an array class.">Retourne la méthode nommée sur une classe Array.</summary>
      <param name="arrayClass" vsli:raw="An array class.">Classe Array.</param>
      <param name="methodName" vsli:raw="The name of a method on the array class.">Nom d'une méthode sur la classe Array.</param>
      <param name="callingConvention" vsli:raw="The method's calling convention.">Convention d’appel de la méthode.</param>
      <param name="returnType" vsli:raw="The return type of the method.">Type de retour de la méthode.</param>
      <param name="parameterTypes" vsli:raw="The types of the method's parameters.">Types des paramètres de la méthode.</param>
      <returns vsli:raw="The named method on an array class.">Méthode nommée sur une classe Array.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;arrayClass&quot; /&gt; is not an array.">
        <paramref name="arrayClass" /> n'est pas un tableau.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;arrayClass&quot; /&gt; or &lt;paramref name=&quot;methodName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="arrayClass" /> ou <paramref name="methodName" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes that have been applied to the current &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;.">Retourne tous les attributs personnalisés qui ont été appliqués au <see cref="T:System.Reflection.Emit.ModuleBuilder" /> actuel.</summary>
      <param name="inherit" vsli:raw="This argument is ignored for objects of this type.">Cet argument est ignoré pour les objets de ce type.</param>
      <returns vsli:raw="An array that contains the custom attributes; the array is empty if there are no attributes.">Un tableau qui contient les attributs personnalisés ; le tableau est vide s’il n’existe pas d’attributs.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes that have been applied to the current &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;, and that derive from a specified attribute type.">Retourne tous les attributs personnalisés qui ont été appliqués à l’élément <see cref="T:System.Reflection.Emit.ModuleBuilder" /> actuel et qui dérivent d’un type d’attribut spécifié.</summary>
      <param name="attributeType" vsli:raw="The base type from which attributes derive.">Type de base duquel dérivent des attributs.</param>
      <param name="inherit" vsli:raw="This argument is ignored for objects of this type.">Cet argument est ignoré pour les objets de ce type.</param>
      <returns vsli:raw="An array that contains the custom attributes that are derived, at any level, from &lt;paramref name=&quot;attributeType&quot; /&gt;; the array is empty if there are no such attributes.">Tableau qui contient les attributs personnalisés dérivés (à tous les niveaux) de <paramref name="attributeType" /> ; le tableau est vide si de tels attributs n'existent pas.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="attributeType" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is not a &lt;see cref=&quot;T:System.Type&quot; /&gt; object supplied by the runtime. For example, &lt;paramref name=&quot;attributeType&quot; /&gt; is a &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; object.">
        <paramref name="attributeType" /> n’est pas un objet <see cref="T:System.Type" /> fourni par le runtime. Par exemple, <paramref name="attributeType" /> est un objet <see cref="T:System.Reflection.Emit.TypeBuilder" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetCustomAttributesData">
      <summary vsli:raw="Returns information about the attributes that have been applied to the current &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;, expressed as &lt;see cref=&quot;T:System.Reflection.CustomAttributeData&quot; /&gt; objects.">Retourne des informations sur les attributs appliqués au <see cref="T:System.Reflection.Emit.ModuleBuilder" /> actuel, en tant qu'objets <see cref="T:System.Reflection.CustomAttributeData" />.</summary>
      <returns vsli:raw="A generic list of &lt;see cref=&quot;T:System.Reflection.CustomAttributeData&quot; /&gt; objects representing data about the attributes that have been applied to the current module.">Liste générique d’objets <see cref="T:System.Reflection.CustomAttributeData" /> représentant des données sur les attributs qui ont été appliqués au module actuel.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns a module-level field, defined in the .sdata region of the portable executable (PE) file, that has the specified name and binding attributes.">Retourne un champ au niveau du module, défini dans la région .sdata du fichier exécutable portable (PE, Portable Executable) ayant le nom et les attributs de liaison spécifiés.</summary>
      <param name="name" vsli:raw="The field name.">Nom du champ.</param>
      <param name="bindingAttr" vsli:raw="A combination of the &lt;see langword=&quot;BindingFlags&quot; /&gt; bit flags used to control the search.">Combinaison des bits indicateurs <see langword="BindingFlags" /> utilisés pour contrôler la recherche.</param>
      <returns vsli:raw="A field that has the specified name and binding attributes, or &lt;see langword=&quot;null&quot; /&gt; if the field does not exist.">Champ ayant le nom et les attributs de liaison spécifiés, ou <see langword="null" /> si le champ n'existe pas.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;name&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="name" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns all fields defined in the .sdata region of the portable executable (PE) file that match the specified binding flags.">Retourne tous les champs définis dans la région .sdata du fichier exécutable portable (PE) qui correspondent aux indicateurs de liaisons spécifiés.</summary>
      <param name="bindingFlags" vsli:raw="A combination of the &lt;see langword=&quot;BindingFlags&quot; /&gt; bit flags used to control the search.">Combinaison des bits indicateurs <see langword="BindingFlags" /> utilisés pour contrôler la recherche.</param>
      <returns vsli:raw="An array of fields that match the specified flags; the array is empty if no such fields exist.">Tableau des champs qui correspondent aux indicateurs spécifiés ; le tableau est vide si de tels champs n'existent pas.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;name&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="name" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retourne le code de hachage de cette instance.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Code de hachage d'un entier signé 32 bits.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns all the methods that have been defined at the module level for the current &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;, and that match the specified binding flags.">Retourne toutes les méthodes définies au niveau du module pour le <see cref="T:System.Reflection.Emit.ModuleBuilder" /> actuel et qui correspondent aux indicateurs de liaisons spécifiés.</summary>
      <param name="bindingFlags" vsli:raw="A combination of &lt;see langword=&quot;BindingFlags&quot; /&gt; bit flags used to control the search.">Combinaison des bits indicateurs <see langword="BindingFlags" /> utilisés pour contrôler la recherche.</param>
      <returns vsli:raw="An array that contains all the module-level methods that match &lt;paramref name=&quot;bindingFlags&quot; /&gt;.">Tableau qui contient toutes les méthodes au niveau du module correspondant à <paramref name="bindingFlags" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetPEKind(System.Reflection.PortableExecutableKinds@,System.Reflection.ImageFileMachine@)">
      <summary vsli:raw="Gets a pair of values indicating the nature of the code in a module and the platform targeted by the module.">Obtient une paire de valeurs indiquant la nature du code dans un module et la plateforme ciblée par le module.</summary>
      <param name="peKind" vsli:raw="When this method returns, a combination of the &lt;see cref=&quot;T:System.Reflection.PortableExecutableKinds&quot; /&gt; values indicating the nature of the code in the module.">Cette méthode retourne une combinaison des valeurs <see cref="T:System.Reflection.PortableExecutableKinds" /> indiquant la nature du code dans le module.</param>
      <param name="machine" vsli:raw="When this method returns, one of the &lt;see cref=&quot;T:System.Reflection.ImageFileMachine&quot; /&gt; values indicating the platform targeted by the module.">Cette méthode retourne une des valeurs <see cref="T:System.Reflection.ImageFileMachine" /> indiquant la plateforme ciblée par le module.</param>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetType(System.String)">
      <summary vsli:raw="Gets the named type defined in the module.">Obtient le type nommé défini dans le module.</summary>
      <param name="className" vsli:raw="The name of the &lt;see cref=&quot;T:System.Type&quot; /&gt; to get.">Nom du <see cref="T:System.Type" /> à obtenir.</param>
      <returns vsli:raw="The requested type, if the type is defined in this module; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">Type demandé, si le type est défini dans ce module ; sinon, <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="Length of &lt;paramref name=&quot;className&quot; /&gt; is zero or is greater than 1023.">La longueur de <paramref name="className" /> est égale à zéro ou supérieure à 1 023.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;className&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="className" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The requested &lt;see cref=&quot;T:System.Type&quot; /&gt; is non-public and the caller does not have &lt;see cref=&quot;T:System.Security.Permissions.ReflectionPermission&quot; /&gt; to reflect non-public objects outside the current assembly.">Le <see cref="T:System.Type" /> demandé est non public et l'appelant n'a pas <see cref="T:System.Security.Permissions.ReflectionPermission" /> pour réfléchir les objets non publics en dehors de l'assembly en cours.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException" vsli:raw="A class initializer is invoked and throws an exception.">Un initialiseur de classe est appelé et lève une exception.</exception>
      <exception cref="T:System.TypeLoadException" vsli:raw="An error is encountered while loading the &lt;see cref=&quot;T:System.Type&quot; /&gt;.">Une erreur s'est produite pendant le chargement de <see cref="T:System.Type" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetType(System.String,System.Boolean)">
      <summary vsli:raw="Gets the named type defined in the module, optionally ignoring the case of the type name.">Obtient le type nommé défini dans le module en ignorant éventuellement la casse du nom de type.</summary>
      <param name="className" vsli:raw="The name of the &lt;see cref=&quot;T:System.Type&quot; /&gt; to get.">Nom du <see cref="T:System.Type" /> à obtenir.</param>
      <param name="ignoreCase" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, the search is case-insensitive. If &lt;see langword=&quot;false&quot; /&gt;, the search is case-sensitive.">Si <see langword="true" />, la recherche ne respecte pas la casse. Si <see langword="false" />, la recherche respecte la casse.</param>
      <returns vsli:raw="The requested type, if the type is defined in this module; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">Type demandé, si le type est défini dans ce module ; sinon, <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="Length of &lt;paramref name=&quot;className&quot; /&gt; is zero or is greater than 1023.">La longueur de <paramref name="className" /> est égale à zéro ou supérieure à 1 023.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;className&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="className" /> est <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The requested &lt;see cref=&quot;T:System.Type&quot; /&gt; is non-public and the caller does not have &lt;see cref=&quot;T:System.Security.Permissions.ReflectionPermission&quot; /&gt; to reflect non-public objects outside the current assembly.">Le <see cref="T:System.Type" /> demandé est non public et l'appelant n'a pas <see cref="T:System.Security.Permissions.ReflectionPermission" /> pour réfléchir les objets non publics en dehors de l'assembly en cours.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException" vsli:raw="A class initializer is invoked and throws an exception.">Un initialiseur de classe est appelé et lève une exception.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetType(System.String,System.Boolean,System.Boolean)">
      <summary vsli:raw="Gets the named type defined in the module, optionally ignoring the case of the type name. Optionally throws an exception if the type is not found.">Obtient le type nommé défini dans le module en ignorant éventuellement la casse du nom de type. Peut lever une exception, si le type est introuvable.</summary>
      <param name="className" vsli:raw="The name of the &lt;see cref=&quot;T:System.Type&quot; /&gt; to get.">Nom du <see cref="T:System.Type" /> à obtenir.</param>
      <param name="throwOnError" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to throw an exception if the type cannot be found; &lt;see langword=&quot;false&quot; /&gt; to return &lt;see langword=&quot;null&quot; /&gt;.">
        <see langword="true" /> pour lever une exception si le type est introuvable ; <see langword="false" /> pour retourner <see langword="null" />.</param>
      <param name="ignoreCase" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, the search is case-insensitive. If &lt;see langword=&quot;false&quot; /&gt;, the search is case-sensitive.">Si <see langword="true" />, la recherche ne respecte pas la casse. Si <see langword="false" />, la recherche respecte la casse.</param>
      <returns vsli:raw="The specified type, if the type is declared in this module; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">Type spécifié, si le type est déclaré dans ce module ; sinon, <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="Length of &lt;paramref name=&quot;className&quot; /&gt; is zero or is greater than 1023.">La longueur de <paramref name="className" /> est égale à zéro ou supérieure à 1 023.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;className&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="className" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The requested &lt;see cref=&quot;T:System.Type&quot; /&gt; is non-public and the caller does not have &lt;see cref=&quot;T:System.Security.Permissions.ReflectionPermission&quot; /&gt; to reflect non-public objects outside the current assembly.">Le <see cref="T:System.Type" /> demandé est non public et l'appelant n'a pas <see cref="T:System.Security.Permissions.ReflectionPermission" /> pour réfléchir les objets non publics en dehors de l'assembly en cours.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException" vsli:raw="A class initializer is invoked and throws an exception.">Un initialiseur de classe est appelé et lève une exception.</exception>
      <exception cref="T:System.TypeLoadException" vsli:raw="&lt;paramref name=&quot;throwOnError&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt; and the specified type is not found.">
        <paramref name="throwOnError" /> a la valeur <see langword="true" /> et le type spécifié est introuvable.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetTypes">
      <summary vsli:raw="Returns all the classes defined within this module.">Retourne toutes les classes définies dans ce module.</summary>
      <returns vsli:raw="An array that contains the types defined within the module that is reflected by this instance.">Tableau qui contient les types définis dans le module réfléchi par cette instance.</returns>
      <exception cref="T:System.Reflection.ReflectionTypeLoadException" vsli:raw="One or more classes in a module could not be loaded.">Au moins une des classes d’un module n’a pas pu être chargée.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">L'appelant n'a pas l'autorisation requise.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Returns a value that indicates whether the specified attribute type has been applied to this module.">Retourne une valeur qui indique si le type d'attribut spécifié a été appliqué à ce module.</summary>
      <param name="attributeType" vsli:raw="The type of custom attribute to test for.">Type de l'attribut personnalisé à tester.</param>
      <param name="inherit" vsli:raw="This argument is ignored for objects of this type.">Cet argument est ignoré pour les objets de ce type.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more instances of &lt;paramref name=&quot;attributeType&quot; /&gt; have been applied to this module; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si une ou plusieurs instances de <paramref name="attributeType" /> ont été appliquées à ce module ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="attributeType" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is not a &lt;see cref=&quot;T:System.Type&quot; /&gt; object supplied by the runtime. For example, &lt;paramref name=&quot;attributeType&quot; /&gt; is a &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; object.">
        <paramref name="attributeType" /> n’est pas un objet <see cref="T:System.Type" /> fourni par le runtime. Par exemple, <paramref name="attributeType" /> est un objet <see cref="T:System.Reflection.Emit.TypeBuilder" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.IsResource">
      <summary vsli:raw="Gets a value indicating whether the object is a resource.">Obtient une valeur indiquant si l'objet est une ressource.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is a resource; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'objet est une ressource ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.MDStreamVersion">
      <summary vsli:raw="Gets the metadata stream version.">Obtient la version de flux des métadonnées.</summary>
      <returns vsli:raw="A 32-bit integer representing the metadata stream version. The high-order two bytes represent the major version number, and the low-order two bytes represent the minor version number.">Entier 32 bits représentant la version de flux des métadonnées. Les deux octets de poids fort représentent le numéro de la version principale, et les deux octets de poids faible représentent le numéro de la version secondaire.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.MetadataToken">
      <summary vsli:raw="Gets a token that identifies the current dynamic module in metadata.">Obtient un jeton qui identifie le module dynamique actuel dans les métadonnées.</summary>
      <returns vsli:raw="An integer token that identifies the current module in metadata.">Jeton d'entier qui identifie le module actuel dans les métadonnées.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.ModuleVersionId">
      <summary vsli:raw="Gets a universally unique identifier (UUID) that can be used to distinguish between two versions of a module.">Obtient un identificateur unique universel (UUID) qui peut être utilisé pour faire la distinction entre deux versions d’un module.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Guid&quot; /&gt; that can be used to distinguish between two versions of a module.">
        <see cref="T:System.Guid" /> qui peut être utilisé pour faire la distinction entre deux versions d’un module.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.Name">
      <summary vsli:raw="A string that indicates that this is an in-memory module.">Chaîne qui indique qu'il s'agit d'un module en mémoire.</summary>
      <returns vsli:raw="Text that indicates that this is an in-memory module.">Texte qui indique qu'il s'agit d'un module en mémoire.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveField(System.Int32,System.Type[],System.Type[])">
      <summary vsli:raw="Returns the field identified by the specified metadata token, in the context defined by the specified generic type parameters.">Retourne le champ identifié par le jeton de métadonnées spécifié dans le contexte défini par les paramètres de type générique spécifiés.</summary>
      <param name="metadataToken" vsli:raw="A metadata token that identifies a field in the module.">Jeton de métadonnées qui identifie un champ dans le module.</param>
      <param name="genericTypeArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the generic type arguments of the type where the token is in scope, or &lt;see langword=&quot;null&quot; /&gt; if that type is not generic.">Tableau d'objets <see cref="T:System.Type" /> représentant les arguments de type générique du type pour lequel le jeton est dans la portée, ou <see langword="null" /> si ce type n'est pas générique.</param>
      <param name="genericMethodArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the generic type arguments of the method where the token is in scope, or &lt;see langword=&quot;null&quot; /&gt; if that method is not generic.">Tableau d'objets <see cref="T:System.Type" /> représentant les arguments de type générique de la méthode pour laquelle le jeton est dans la portée, ou <see langword="null" /> si cette méthode n'est pas générique.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt; object representing the field that is identified by the specified metadata token.">Objet <see cref="T:System.Reflection.FieldInfo" /> qui représente le champ identifié par le jeton de métadonnées spécifié.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a token for a field in the scope of the current module.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;metadataToken&quot; /&gt; identifies a field whose parent &lt;see langword=&quot;TypeSpec&quot; /&gt; has a signature containing element type &lt;see langword=&quot;var&quot; /&gt; (a type parameter of a generic type) or &lt;see langword=&quot;mvar&quot; /&gt; (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of &lt;paramref name=&quot;genericTypeArguments&quot; /&gt; and &lt;paramref name=&quot;genericMethodArguments&quot; /&gt;.">
        <paramref name="metadataToken" /> n'est pas un jeton de champ dans la portée du module actuel.  
ou 
 <paramref name="metadataToken" /> identifie un champ dont le <see langword="TypeSpec" /> parent a une signature contenant le type d'élément <see langword="var" /> (un paramètre de type d'un type générique) ou <see langword="mvar" /> (un paramètre de type d'une méthode générique), et les arguments de type générique nécessaires n'ont pas été fournis pour <paramref name="genericTypeArguments" /> ou <paramref name="genericMethodArguments" /> (ou pour les deux).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a valid token in the scope of the current module.">
        <paramref name="metadataToken" /> n'est pas un jeton valide dans la portée du module actuel.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveMember(System.Int32,System.Type[],System.Type[])">
      <summary vsli:raw="Returns the type or member identified by the specified metadata token, in the context defined by the specified generic type parameters.">Retourne le type ou le membre identifié par le jeton de métadonnées spécifié dans le contexte défini par les paramètres de type générique spécifiés.</summary>
      <param name="metadataToken" vsli:raw="A metadata token that identifies a type or member in the module.">Jeton de métadonnées qui identifie un type ou un membre dans le module.</param>
      <param name="genericTypeArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the generic type arguments of the type where the token is in scope, or &lt;see langword=&quot;null&quot; /&gt; if that type is not generic.">Tableau d'objets <see cref="T:System.Type" /> représentant les arguments de type générique du type pour lequel le jeton est dans la portée, ou <see langword="null" /> si ce type n'est pas générique.</param>
      <param name="genericMethodArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the generic type arguments of the method where the token is in scope, or &lt;see langword=&quot;null&quot; /&gt; if that method is not generic.">Tableau d'objets <see cref="T:System.Type" /> représentant les arguments de type générique de la méthode pour laquelle le jeton est dans la portée, ou <see langword="null" /> si cette méthode n'est pas générique.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; object representing the type or member that is identified by the specified metadata token.">Objet <see cref="T:System.Reflection.MemberInfo" /> représentant le type ou le membre identifié par le jeton de métadonnées spécifié.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a token for a type or member in the scope of the current module.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;metadataToken&quot; /&gt; is a &lt;see langword=&quot;MethodSpec&quot; /&gt; or &lt;see langword=&quot;TypeSpec&quot; /&gt; whose signature contains element type &lt;see langword=&quot;var&quot; /&gt; (a type parameter of a generic type) or &lt;see langword=&quot;mvar&quot; /&gt; (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of &lt;paramref name=&quot;genericTypeArguments&quot; /&gt; and &lt;paramref name=&quot;genericMethodArguments&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;metadataToken&quot; /&gt; identifies a property or event.">
        <paramref name="metadataToken" /> n'est pas un jeton pour un type ou un membre dans la portée du module actuel.  

ou - 
<paramref name="metadataToken" /> est un <see langword="MethodSpec" /> ou <see langword="TypeSpec" /> dont la signature contient un type d'élément <see langword="var" /> (un paramètre de type d'un type générique) ou <see langword="mvar" /> (un paramètre de type d'une méthode générique), et les arguments de type générique nécessaires n'ont pas été fournis pour <paramref name="genericTypeArguments" /> ou <paramref name="genericMethodArguments" /> (ou pour les deux).  

ou - 
<paramref name="metadataToken" /> identifie une propriété ou un événement.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a valid token in the scope of the current module.">
        <paramref name="metadataToken" /> n'est pas un jeton valide dans la portée du module actuel.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveMethod(System.Int32,System.Type[],System.Type[])">
      <summary vsli:raw="Returns the method or constructor identified by the specified metadata token, in the context defined by the specified generic type parameters.">Retourne la méthode ou le constructeur identifié par le jeton de métadonnées spécifié dans le contexte défini par les paramètres de type générique spécifiés.</summary>
      <param name="metadataToken" vsli:raw="A metadata token that identifies a method or constructor in the module.">Jeton de métadonnées qui identifie une méthode ou un constructeur dans le module.</param>
      <param name="genericTypeArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the generic type arguments of the type where the token is in scope, or &lt;see langword=&quot;null&quot; /&gt; if that type is not generic.">Tableau d'objets <see cref="T:System.Type" /> représentant les arguments de type générique du type pour lequel le jeton est dans la portée, ou <see langword="null" /> si ce type n'est pas générique.</param>
      <param name="genericMethodArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the generic type arguments of the method where the token is in scope, or &lt;see langword=&quot;null&quot; /&gt; if that method is not generic.">Tableau d'objets <see cref="T:System.Type" /> représentant les arguments de type générique de la méthode pour laquelle le jeton est dans la portée, ou <see langword="null" /> si cette méthode n'est pas générique.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodBase&quot; /&gt; object representing the method that is identified by the specified metadata token.">Objet <see cref="T:System.Reflection.MethodBase" /> qui représente la méthode identifiée par le jeton de métadonnées spécifié.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a token for a method or constructor in the scope of the current module.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;metadataToken&quot; /&gt; is a &lt;see langword=&quot;MethodSpec&quot; /&gt; whose signature contains element type &lt;see langword=&quot;var&quot; /&gt; (a type parameter of a generic type) or &lt;see langword=&quot;mvar&quot; /&gt; (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of &lt;paramref name=&quot;genericTypeArguments&quot; /&gt; and &lt;paramref name=&quot;genericMethodArguments&quot; /&gt;.">
        <paramref name="metadataToken" /> n'est pas un jeton pour une méthode ou un constructeur dans la portée du module en cours.  

ou - 
<paramref name="metadataToken" /> est un <see langword="MethodSpec" /> dont la signature contient un type d'élément <see langword="var" /> (un paramètre de type d'un type générique) ou <see langword="mvar" /> (un paramètre de type d'une méthode générique), et les arguments de type générique nécessaires n'ont pas été fournis pour <paramref name="genericTypeArguments" /> ou <paramref name="genericMethodArguments" /> (ou pour les deux).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a valid token in the scope of the current module.">
        <paramref name="metadataToken" /> n'est pas un jeton valide dans la portée du module actuel.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveSignature(System.Int32)">
      <summary vsli:raw="Returns the signature blob identified by a metadata token.">Retourne le blob de signature identifié par un jeton de métadonnées.</summary>
      <param name="metadataToken" vsli:raw="A metadata token that identifies a signature in the module.">Jeton de métadonnées qui identifie une signature dans le module.</param>
      <returns vsli:raw="An array of bytes representing the signature blob.">Tableau d'octets représentant le blob de signature.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a valid &lt;see langword=&quot;MemberRef&quot; /&gt;, &lt;see langword=&quot;MethodDef&quot; /&gt;, &lt;see langword=&quot;TypeSpec&quot; /&gt;, signature, or &lt;see langword=&quot;FieldDef&quot; /&gt; token in the scope of the current module.">
        <paramref name="metadataToken" />n'est pas un <see langword="MemberRef" />, un <see langword="MethodDef" />, un <see langword="TypeSpec" />, une signature ou un jeton <see langword="FieldDef" /> valide dans la portée du module en cours.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a valid token in the scope of the current module.">
        <paramref name="metadataToken" /> n'est pas un jeton valide dans la portée du module actuel.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveString(System.Int32)">
      <summary vsli:raw="Returns the string identified by the specified metadata token.">Retourne la chaîne identifiée par le jeton de métadonnées spécifié.</summary>
      <param name="metadataToken" vsli:raw="A metadata token that identifies a string in the string heap of the module.">Jeton de métadonnées qui identifie une chaîne dans le tas de chaînes du module.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing a string value from the metadata string heap.">
        <see cref="T:System.String" /> contenant une valeur de chaîne du tas de chaînes des métadonnées.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a token for a string in the scope of the current module.">
        <paramref name="metadataToken" /> n'est pas un jeton pour une chaîne dans la portée du module actuel.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a valid token in the scope of the current module.">
        <paramref name="metadataToken" /> n'est pas un jeton valide dans la portée du module actuel.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveType(System.Int32,System.Type[],System.Type[])">
      <summary vsli:raw="Returns the type identified by the specified metadata token, in the context defined by the specified generic type parameters.">Retourne le type identifié par le jeton de métadonnées spécifié dans le contexte défini par les paramètres de type générique spécifiés.</summary>
      <param name="metadataToken" vsli:raw="A metadata token that identifies a type in the module.">Jeton de métadonnées qui identifie un type dans le module.</param>
      <param name="genericTypeArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the generic type arguments of the type where the token is in scope, or &lt;see langword=&quot;null&quot; /&gt; if that type is not generic.">Tableau d'objets <see cref="T:System.Type" /> représentant les arguments de type générique du type pour lequel le jeton est dans la portée, ou <see langword="null" /> si ce type n'est pas générique.</param>
      <param name="genericMethodArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the generic type arguments of the method where the token is in scope, or &lt;see langword=&quot;null&quot; /&gt; if that method is not generic.">Tableau d'objets <see cref="T:System.Type" /> représentant les arguments de type générique de la méthode pour laquelle le jeton est dans la portée, ou <see langword="null" /> si cette méthode n'est pas générique.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the type that is identified by the specified metadata token.">Objet <see cref="T:System.Type" /> qui représente le type identifié par le jeton de métadonnées spécifié.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a token for a type in the scope of the current module.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;metadataToken&quot; /&gt; is a &lt;see langword=&quot;TypeSpec&quot; /&gt; whose signature contains element type &lt;see langword=&quot;var&quot; /&gt; (a type parameter of a generic type) or &lt;see langword=&quot;mvar&quot; /&gt; (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of &lt;paramref name=&quot;genericTypeArguments&quot; /&gt; and &lt;paramref name=&quot;genericMethodArguments&quot; /&gt;.">
        <paramref name="metadataToken" /> n'est pas le jeton d'un type dans la portée du module en cours.  

ou - 
<paramref name="metadataToken" /> est un <see langword="TypeSpec" /> dont la signature contient un type d'élément <see langword="var" /> (un paramètre de type d'un type générique) ou <see langword="mvar" /> (un paramètre de type d'une méthode générique), et les arguments de type générique nécessaires n'ont pas été fournis pour <paramref name="genericTypeArguments" /> ou <paramref name="genericMethodArguments" /> (ou pour les deux).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a valid token in the scope of the current module.">
        <paramref name="metadataToken" /> n'est pas un jeton valide dans la portée du module actuel.</exception>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.ScopeName">
      <summary vsli:raw="Gets a string that represents the name of the dynamic module.">Obtient une chaîne qui représente le nom du module dynamique.</summary>
      <returns vsli:raw="The name of the dynamic module.">Nom du module dynamique.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Applies a custom attribute to this module by using a specified binary large object (BLOB) that represents the attribute.">Applique un attribut personnalisé à ce module à l'aide d'un objet BLOB spécifié qui représente l'attribut.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">Le constructeur de l’attribut personnalisé.</param>
      <param name="binaryAttribute" vsli:raw="A byte BLOB representing the attribute.">Objet BLOB d'octets représentant l'attribut.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> ou <paramref name="binaryAttribute" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Applies a custom attribute to this module by using a custom attribute builder.">Applique un attribut personnalisé à ce module à l'aide d'un générateur d'attributs personnalisés.</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class that specifies the custom attribute to apply.">Instance de classe d'assistance qui spécifie l'attribut personnalisé à appliquer.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;customBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="customBuilder" /> est <see langword="null" />.</exception>
    </member>
    <member name="T:System.Reflection.Emit.PropertyBuilder">
      <summary vsli:raw="Defines the properties for a type.">Définit les propriétés d'un type.</summary>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.AddOtherMethod(System.Reflection.Emit.MethodBuilder)">
      <summary vsli:raw="Adds one of the other methods associated with this property.">Ajoute une des autres méthodes associées à cette propriété.</summary>
      <param name="mdBuilder" vsli:raw="A &lt;see langword=&quot;MethodBuilder&quot; /&gt; object that represents the other method.">Objet <see langword="MethodBuilder" /> qui représente l'autre méthode.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mdBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mdBuilder" /> est <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">La méthode <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> a été appelée sur le type englobant.</exception>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.Attributes">
      <summary vsli:raw="Gets the attributes for this property.">Obtient les attributs de cette propriété.</summary>
      <returns vsli:raw="Attributes of this property.">Attributs de cette propriété.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.CanRead">
      <summary vsli:raw="Gets a value indicating whether the property can be read.">Obtient une valeur indiquant si la propriété peut être lue.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this property can be read; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la propriété peut être lue ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.CanWrite">
      <summary vsli:raw="Gets a value indicating whether the property can be written to.">Obtient une valeur indiquant s'il est possible d'écrire dans la propriété.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this property can be written to; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> s'il est possible d'écrire dans la propriété ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.DeclaringType">
      <summary vsli:raw="Gets the class that declares this member.">Obtient la classe qui déclare ce membre.</summary>
      <returns vsli:raw="The &lt;see langword=&quot;Type&quot; /&gt; object for the class that declares this member.">Objet <see langword="Type" /> de la classe qui déclare ce membre.</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetAccessors(System.Boolean)">
      <summary vsli:raw="Returns an array of the public and non-public &lt;see langword=&quot;get&quot; /&gt; and &lt;see langword=&quot;set&quot; /&gt; accessors on this property.">Retourne un tableau d'accesseurs <see langword="get" /> et <see langword="set" /> publics et non publics sur cette propriété.</summary>
      <param name="nonPublic" vsli:raw="Indicates whether non-public methods should be returned in the &lt;see langword=&quot;MethodInfo&quot; /&gt; array. &lt;see langword=&quot;true&quot; /&gt; if non-public methods are to be included; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Indique si des méthodes non publiques doivent être retournées dans le tableau <see langword="MethodInfo" />. <see langword="true" /> si les méthodes non publiques doivent être incluses ; sinon, <see langword="false" />.</param>
      <returns vsli:raw="An array of type &lt;see langword=&quot;MethodInfo&quot; /&gt; containing the matching public or non-public accessors, or an empty array if matching accessors do not exist on this property.">Tableau de type <see langword="MethodInfo" /> contenant les accesseurs publics ou non publics correspondants ou un tableau vide s'il n'existe aucun accesseur correspondant sur cette propriété.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">Cette méthode n'est pas prise en charge.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Returns an array of all the custom attributes for this property.">Retourne un tableau de tous les attributs personnalisés de cette propriété.</summary>
      <param name="inherit" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, walks up this property's inheritance chain to find the custom attributes.">Si <see langword="true" />, recherche les attributs personnalisés dans la chaîne d'héritage de cette propriété.</param>
      <returns vsli:raw="An array of all the custom attributes.">Tableau de tous les attributs personnalisés.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">Cette méthode n'est pas prise en charge.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Returns an array of custom attributes identified by &lt;see cref=&quot;T:System.Type&quot; /&gt;.">Retourne un tableau des attributs personnalisés identifiés par <see cref="T:System.Type" />.</summary>
      <param name="attributeType" vsli:raw="An array of custom attributes identified by type.">Tableau d'attributs personnalisés identifiés par type.</param>
      <param name="inherit" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, walks up this property's inheritance chain to find the custom attributes.">Si <see langword="true" />, recherche les attributs personnalisés dans la chaîne d'héritage de cette propriété.</param>
      <returns vsli:raw="An array of custom attributes defined on this reflected member, or &lt;see langword=&quot;null&quot; /&gt; if no attributes are defined on this member.">Un tableau d'attributs personnalisés définis sur ce membre réfléchi, ou <see langword="null" /> si aucun attribut n'est défini sur le membre.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">Cette méthode n'est pas prise en charge.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetGetMethod(System.Boolean)">
      <summary vsli:raw="Returns the public and non-public get accessor for this property.">Retourne l'accesseur GET public et non public de cette propriété.</summary>
      <param name="nonPublic" vsli:raw="Indicates whether non-public get accessors should be returned. &lt;see langword=&quot;true&quot; /&gt; if non-public methods are to be included; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Indique si des accesseurs GET non publics doivent être retournés. <see langword="true" /> si les méthodes non publiques doivent être incluses ; sinon, <see langword="false" />.</param>
      <returns vsli:raw="A &lt;see langword=&quot;MethodInfo&quot; /&gt; object representing the get accessor for this property, if &lt;paramref name=&quot;nonPublic&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt;. Returns &lt;see langword=&quot;null&quot; /&gt; if &lt;paramref name=&quot;nonPublic&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt; and the get accessor is non-public, or if &lt;paramref name=&quot;nonPublic&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt; but no get accessors exist.">Objet <see langword="MethodInfo" /> représentant l'accesseur GET de cette propriété si <paramref name="nonPublic" /> est <see langword="true" />. Retourne <see langword="null" /> si <paramref name="nonPublic" /> est <see langword="false" /> et si l'accesseur GET est non public ou si <paramref name="nonPublic" /> est <see langword="true" /> mais qu'il n'existe pas d'accesseur GET.</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetIndexParameters">
      <summary vsli:raw="Returns an array of all the index parameters for the property.">Retourne un tableau de tous les paramètres d'index de la propriété.</summary>
      <returns vsli:raw="An array of type &lt;see langword=&quot;ParameterInfo&quot; /&gt; containing the parameters for the indexes.">Tableau de type <see langword="ParameterInfo" /> contenant les paramètres d'index.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">Cette méthode n'est pas prise en charge.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetSetMethod(System.Boolean)">
      <summary vsli:raw="Returns the set accessor for this property.">Retourne l'accesseur set public de cette propriété.</summary>
      <param name="nonPublic" vsli:raw="Indicates whether the accessor should be returned if it is non-public. &lt;see langword=&quot;true&quot; /&gt; if non-public methods are to be included; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Indique si l’accesseur doit être retourné s’il est non public. <see langword="true" /> si les méthodes non publiques doivent être incluses ; sinon, <see langword="false" />.</param>
      <returns vsli:raw="The property's &lt;see langword=&quot;Set&quot; /&gt; method, or &lt;see langword=&quot;null&quot; /&gt;, as shown in the following table.  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Condition&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; object representing the Set method for this property.&lt;/term&gt;&lt;description&gt; The set accessor is public.  &#xA;  &#xA; &lt;paramref name=&quot;nonPublic&quot; /&gt; is true and non-public methods can be returned.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; null&lt;/term&gt;&lt;description&gt;&lt;paramref name=&quot;nonPublic&quot; /&gt; is true, but the property is read-only.  &#xA;  &#xA; &lt;paramref name=&quot;nonPublic&quot; /&gt; is false and the set accessor is non-public.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">La méthode <see langword="Set" /> de la propriété, ou <see langword="null" />, tel qu'indiqué dans le tableau suivant.  
  Value 
  Condition 
  Objet <see cref="T:System.Reflection.MethodInfo" /> représentant la méthode Set de cette propriété.  

  L’accesseur set est public.  

 <paramref name="nonPublic" /> est true et les méthodes non publiques peuvent être retournées.  

  null 
 <paramref name="nonPublic" /> est true, mais la propriété est en lecture seule.  

 <paramref name="nonPublic" /> a la valeur false et l'accesseur set est non public.</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Object[])">
      <summary vsli:raw="Gets the value of the indexed property by calling the property's getter method.">Obtient la valeur de la propriété indexée en appelant la méthode de l'accesseur GET de la propriété.</summary>
      <param name="obj" vsli:raw="The object whose property value will be returned.">Objet dont la valeur de propriété sera retournée.</param>
      <param name="index" vsli:raw="Optional index values for indexed properties. This value should be &lt;see langword=&quot;null&quot; /&gt; for non-indexed properties.">Valeurs d'index facultatives pour les propriétés indexées. Cette valeur doit être <see langword="null" /> pour les propriétés non indexées.</param>
      <returns vsli:raw="The value of the specified indexed property.">Valeur de la propriété indexée spécifiée.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">Cette méthode n'est pas prise en charge.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary vsli:raw="Gets the value of a property having the specified binding, index, and &lt;see langword=&quot;CultureInfo&quot; /&gt;.">Obtient la valeur d'une propriété ayant la liaison, l'index et le <see langword="CultureInfo" /> spécifiés.</summary>
      <param name="obj" vsli:raw="The object whose property value will be returned.">Objet dont la valeur de propriété sera retournée.</param>
      <param name="invokeAttr" vsli:raw="The invocation attribute. This must be a bit flag from &lt;see langword=&quot;BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;CreateInstance&quot; /&gt;, &lt;see langword=&quot;Static&quot; /&gt;, &lt;see langword=&quot;GetField&quot; /&gt;, &lt;see langword=&quot;SetField&quot; /&gt;, &lt;see langword=&quot;GetProperty&quot; /&gt;, or &lt;see langword=&quot;SetProperty&quot; /&gt;. A suitable invocation attribute must be specified. If a static member is to be invoked, the &lt;see langword=&quot;Static&quot; /&gt; flag of &lt;see langword=&quot;BindingFlags&quot; /&gt; must be set.">Attribut d’appel. Il doit s'agir d'un bit indicateur de <see langword="BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="Static" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" /> ou <see langword="SetProperty" />. Un attribut d’appel approprié doit être spécifié. Si le membre à appeler est statique, l'indicateur <see langword="Static" /> de <see langword="BindingFlags" /> doit être défini.</param>
      <param name="binder" vsli:raw="An object that enables the binding, coercion of argument types, invocation of members, and retrieval of &lt;see langword=&quot;MemberInfo&quot; /&gt; objects using reflection. If &lt;paramref name=&quot;binder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, the default binder is used.">Objet qui active la liaison, la contrainte de types d'arguments, l'appel des membres et la récupération d'objets <see langword="MemberInfo" /> par le biais de la réflexion. Si <paramref name="binder" /> est <see langword="null" />, le binder par défaut est utilisé.</param>
      <param name="index" vsli:raw="Optional index values for indexed properties. This value should be &lt;see langword=&quot;null&quot; /&gt; for non-indexed properties.">Valeurs d'index facultatives pour les propriétés indexées. Cette valeur doit être <see langword="null" /> pour les propriétés non indexées.</param>
      <param name="culture" vsli:raw="The &lt;see langword=&quot;CultureInfo&quot; /&gt; object that represents the culture for which the resource is to be localized. Note that if the resource is not localized for this culture, the &lt;see langword=&quot;CultureInfo.Parent&quot; /&gt; method will be called successively in search of a match. If this value is &lt;see langword=&quot;null&quot; /&gt;, the &lt;see langword=&quot;CultureInfo&quot; /&gt; is obtained from the &lt;see langword=&quot;CultureInfo.CurrentUICulture&quot; /&gt; property.">Objet <see langword="CultureInfo" /> qui représente la culture pour laquelle la ressource doit être localisée. Notez que si la ressource n'est pas localisée pour cette culture, la méthode <see langword="CultureInfo.Parent" /> sera appelée pour rechercher une correspondance. Si cette valeur est <see langword="null" />, <see langword="CultureInfo" /> est obtenu à partir de la propriété <see langword="CultureInfo.CurrentUICulture" />.</param>
      <returns vsli:raw="The property value for &lt;paramref name=&quot;obj&quot; /&gt;.">Valeur de propriété pour <paramref name="obj" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">Cette méthode n'est pas prise en charge.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Indicates whether one or more instance of &lt;paramref name=&quot;attributeType&quot; /&gt; is defined on this property.">Indique si une ou plusieurs instances de <paramref name="attributeType" /> sont définies sur cette propriété.</summary>
      <param name="attributeType" vsli:raw="The &lt;see langword=&quot;Type&quot; /&gt; object to which the custom attributes are applied.">Objet <see langword="Type" /> auquel les attributs personnalisés sont appliqués.</param>
      <param name="inherit" vsli:raw="Specifies whether to walk up this property's inheritance chain to find the custom attributes.">Spécifie s'il faut rechercher les attributs personnalisés dans la chaîne d'héritage de cette propriété.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more instance of &lt;paramref name=&quot;attributeType&quot; /&gt; is defined on this property; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si une ou plusieurs instances de <paramref name="attributeType" /> sont définies sur cette propriété ; sinon <see langword="false" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">Cette méthode n'est pas prise en charge.</exception>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.Module">
      <summary vsli:raw="Gets the module in which the type that declares the current property is being defined.">Obtient le module dans lequel le type qui déclare la propriété actuelle est défini.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; in which the type that declares the current property is defined.">
        <see cref="T:System.Reflection.Module" /> dans lequel le type qui déclare la propriété actuelle est défini.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.Name">
      <summary vsli:raw="Gets the name of this member.">Obtient le nom de ce membre.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of this member.">
        <see cref="T:System.String" /> contenant le nom de ce membre.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.PropertyType">
      <summary vsli:raw="Gets the type of the field of this property.">Obtient le type du champ de cette propriété.</summary>
      <returns vsli:raw="The type of this property.">Type de cette propriété.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.ReflectedType">
      <summary vsli:raw="Gets the class object that was used to obtain this instance of &lt;see langword=&quot;MemberInfo&quot; /&gt;.">Obtient l'objet classe utilisé pour obtenir cette instance de <see langword="MemberInfo" />.</summary>
      <returns vsli:raw="The &lt;see langword=&quot;Type&quot; /&gt; object through which this &lt;see langword=&quot;MemberInfo&quot; /&gt; object was obtained.">Objet <see langword="Type" /> via lequel cet objet <see langword="MemberInfo" /> a été obtenu.</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetConstant(System.Object)">
      <summary vsli:raw="Sets the default value of this property.">Définit la valeur par défaut de cette propriété.</summary>
      <param name="defaultValue" vsli:raw="The default value of this property.">Valeur par défaut de cette propriété.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">La méthode <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> a été appelée sur le type englobant.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The property is not one of the supported types.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of &lt;paramref name=&quot;defaultValue&quot; /&gt; does not match the type of the property.  &#xA;  &#xA; -or-  &#xA;  &#xA; The property is of type &lt;see cref=&quot;T:System.Object&quot; /&gt; or other reference type, &lt;paramref name=&quot;defaultValue&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt;, and the value cannot be assigned to the reference type.">La propriété ne correspond pas à un type pris en charge.  

ou - 
Le type de <paramref name="defaultValue" /> ne correspond pas au type de la propriété.  

ou - 
La propriété est de type <see cref="T:System.Object" /> ou d'un autre type référence, <paramref name="defaultValue" /> n'est pas <see langword="null" /> et la valeur ne peut pas être assignée au type référence.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Set a custom attribute using a specified custom attribute blob.">Définit un attribut personnalisé à l'aide d'un objet blob d'attribut personnalisé spécifié.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">Le constructeur de l’attribut personnalisé.</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">Objet blob d’octets représentant les attributs.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> ou <paramref name="binaryAttribute" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">La méthode <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> a été appelée sur le type englobant.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Set a custom attribute using a custom attribute builder.">Définit un attribut personnalisé à l’aide d’un générateur d’attributs personnalisés.</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to define the custom attribute.">Instance d’une classe d’assistance pour définir l’attribut personnalisé.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;customBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="customBuilder" /> est <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="if &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">si <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> a été appelé sur le type englobant.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetGetMethod(System.Reflection.Emit.MethodBuilder)">
      <summary vsli:raw="Sets the method that gets the property value.">Définit la méthode qui obtient la valeur de la propriété.</summary>
      <param name="mdBuilder" vsli:raw="A &lt;see langword=&quot;MethodBuilder&quot; /&gt; object that represents the method that gets the property value.">Objet <see langword="MethodBuilder" /> qui représente la méthode qui obtient la valeur de la propriété.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mdBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mdBuilder" /> est <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">La méthode <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> a été appelée sur le type englobant.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetSetMethod(System.Reflection.Emit.MethodBuilder)">
      <summary vsli:raw="Sets the method that sets the property value.">Définit la méthode qui définit la valeur de la propriété.</summary>
      <param name="mdBuilder" vsli:raw="A &lt;see langword=&quot;MethodBuilder&quot; /&gt; object that represents the method that sets the property value.">Objet <see langword="MethodBuilder" /> qui représente la méthode qui définit la valeur de la propriété.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mdBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mdBuilder" /> est <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">La méthode <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> a été appelée sur le type englobant.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Object[])">
      <summary vsli:raw="Sets the value of the property with optional index values for index properties.">Définit la valeur de la propriété avec des valeurs d'index facultatives pour les propriétés d'index.</summary>
      <param name="obj" vsli:raw="The object whose property value will be set.">Objet dont la valeur de propriété sera définie.</param>
      <param name="value" vsli:raw="The new value for this property.">Nouvelle valeur de cette propriété.</param>
      <param name="index" vsli:raw="Optional index values for indexed properties. This value should be &lt;see langword=&quot;null&quot; /&gt; for non-indexed properties.">Valeurs d'index facultatives pour les propriétés indexées. Cette valeur doit être <see langword="null" /> pour les propriétés non indexées.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">Cette méthode n'est pas prise en charge.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary vsli:raw="Sets the property value for the given object to the given value.">Assigne la valeur donnée à la propriété de l'objet désigné.</summary>
      <param name="obj" vsli:raw="The object whose property value will be returned.">Objet dont la valeur de propriété sera retournée.</param>
      <param name="value" vsli:raw="The new value for this property.">Nouvelle valeur de cette propriété.</param>
      <param name="invokeAttr" vsli:raw="The invocation attribute. This must be a bit flag from &lt;see langword=&quot;BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;CreateInstance&quot; /&gt;, &lt;see langword=&quot;Static&quot; /&gt;, &lt;see langword=&quot;GetField&quot; /&gt;, &lt;see langword=&quot;SetField&quot; /&gt;, &lt;see langword=&quot;GetProperty&quot; /&gt;, or &lt;see langword=&quot;SetProperty&quot; /&gt;. A suitable invocation attribute must be specified. If a static member is to be invoked, the &lt;see langword=&quot;Static&quot; /&gt; flag of &lt;see langword=&quot;BindingFlags&quot; /&gt; must be set.">Attribut d’appel. Il doit s'agir d'un bit indicateur de <see langword="BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="Static" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" /> ou <see langword="SetProperty" />. Un attribut d’appel approprié doit être spécifié. Si le membre à appeler est statique, l'indicateur <see langword="Static" /> de <see langword="BindingFlags" /> doit être défini.</param>
      <param name="binder" vsli:raw="An object that enables the binding, coercion of argument types, invocation of members, and retrieval of &lt;see langword=&quot;MemberInfo&quot; /&gt; objects using reflection. If &lt;paramref name=&quot;binder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, the default binder is used.">Objet qui active la liaison, la contrainte de types d'arguments, l'appel des membres et la récupération d'objets <see langword="MemberInfo" /> par le biais de la réflexion. Si <paramref name="binder" /> est <see langword="null" />, le binder par défaut est utilisé.</param>
      <param name="index" vsli:raw="Optional index values for indexed properties. This value should be &lt;see langword=&quot;null&quot; /&gt; for non-indexed properties.">Valeurs d'index facultatives pour les propriétés indexées. Cette valeur doit être <see langword="null" /> pour les propriétés non indexées.</param>
      <param name="culture" vsli:raw="The &lt;see langword=&quot;CultureInfo&quot; /&gt; object that represents the culture for which the resource is to be localized. Note that if the resource is not localized for this culture, the &lt;see langword=&quot;CultureInfo.Parent&quot; /&gt; method will be called successively in search of a match. If this value is &lt;see langword=&quot;null&quot; /&gt;, the &lt;see langword=&quot;CultureInfo&quot; /&gt; is obtained from the &lt;see langword=&quot;CultureInfo.CurrentUICulture&quot; /&gt; property.">Objet <see langword="CultureInfo" /> qui représente la culture pour laquelle la ressource doit être localisée. Notez que si la ressource n'est pas localisée pour cette culture, la méthode <see langword="CultureInfo.Parent" /> sera appelée pour rechercher une correspondance. Si cette valeur est <see langword="null" />, <see langword="CultureInfo" /> est obtenu à partir de la propriété <see langword="CultureInfo.CurrentUICulture" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">Cette méthode n'est pas prise en charge.</exception>
    </member>
    <member name="T:System.Reflection.Emit.TypeBuilder">
      <summary vsli:raw="Defines and creates new instances of classes during run time.">Définit et crée des instances de classes pendant l’exécution.</summary>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.AddInterfaceImplementation(System.Type)">
      <summary vsli:raw="Adds an interface that this type implements.">Ajoute une interface implémentée par ce type.</summary>
      <param name="interfaceType" vsli:raw="The interface that this type implements.">Interface implémentée par ce type.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;interfaceType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="interfaceType" /> est <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">Le type a déjà été créé en utilisant <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Assembly">
      <summary vsli:raw="Retrieves the dynamic assembly that contains this type definition.">Récupère l’assembly dynamique qui contient la définition de ce type.</summary>
      <returns vsli:raw="Read-only. Retrieves the dynamic assembly that contains this type definition.">Lecture seule. Récupère l’assembly dynamique qui contient la définition de ce type.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.AssemblyQualifiedName">
      <summary vsli:raw="Returns the full name of this type qualified by the display name of the assembly.">Retourne le nom complet de ce type, qualifié par le nom complet de l'assembly.</summary>
      <returns vsli:raw="Read-only. The full name of this type qualified by the display name of the assembly.">Lecture seule. Nom complet de ce type qualifié par le nom complet de l'assembly.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.BaseType">
      <summary vsli:raw="Retrieves the base type of this type.">Récupère le type de base de ce type.</summary>
      <returns vsli:raw="Read-only. Retrieves the base type of this type.">Lecture seule. Récupère le type de base de ce type.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.CreateType">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Type&quot; /&gt; object for the class. After defining fields and methods on the class, &lt;see langword=&quot;CreateType&quot; /&gt; is called in order to load its &lt;see langword=&quot;Type&quot; /&gt; object.">Crée un objet <see cref="T:System.Type" /> pour la classe. Après avoir défini les champs et les méthodes sur la classe, <see langword="CreateType" /> est appelé pour charger son objet <see langword="Type" />.</summary>
      <returns vsli:raw="Returns the new &lt;see cref=&quot;T:System.Type&quot; /&gt; object for this class.">Retourne le nouvel objet <see cref="T:System.Type" /> pour cette classe.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enclosing type has not been created.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is non-abstract and contains an abstract method.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is not an abstract class or an interface and has a method without a method body.">Le type englobant n’a pas été créé.  
 ou  
 Ce type est non abstrait et contient une méthode abstraite.  
 ou  
 Ce type n’est pas une classe abstraite ni une interface et contient une méthode sans corps de méthode.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The type contains invalid Microsoft intermediate language (MSIL) code.  &#xA;  &#xA; -or-  &#xA;  &#xA; The branch target is specified using a 1-byte offset, but the target is at a distance greater than 127 bytes from the branch.">Le type contient un code MSIL (Microsoft Intermediate Language) non valide.  
 ou  
 La cible de branche est spécifiée à l’aide d’un offset de 1 octet, mais la cible est à une distance supérieure à 127 octets de la branche.</exception>
      <exception cref="T:System.TypeLoadException" vsli:raw="The type cannot be loaded. For example, it contains a &lt;see langword=&quot;static&quot; /&gt; method that has the calling convention &lt;see cref=&quot;F:System.Reflection.CallingConventions.HasThis&quot; /&gt;.">Impossible de charger le type. Par exemple, il contient une méthode <see langword="static" /> avec la convention d’appel <see cref="F:System.Reflection.CallingConventions.HasThis" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.CreateTypeInfo">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Reflection.TypeInfo&quot; /&gt; object that represents this type.">Obtient un objet <see cref="T:System.Reflection.TypeInfo" /> qui représente ce type.</summary>
      <returns vsli:raw="An object that represents this type.">Objet qui représente ce type.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.DeclaringMethod">
      <summary vsli:raw="Gets the method that declared the current generic type parameter.">Obtient la méthode qui a déclaré le paramètre de type générique actuel.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodBase&quot; /&gt; that represents the method that declared the current type, if the current type is a generic type parameter; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Reflection.MethodBase" /> qui représente la méthode qui a déclaré le type actuel, si celui-ci est un paramètre de type générique ; sinon, <see langword="null" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.DeclaringType">
      <summary vsli:raw="Returns the type that declared this type.">Retourne le type qui a déclaré ce type.</summary>
      <returns vsli:raw="Read-only. The type that declared this type.">Lecture seule. Type qui a déclaré ce type.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[])">
      <summary vsli:raw="Adds a new constructor to the type, with the given attributes and signature.">Ajoute un nouveau constructeur au type avec les attributs donnés et la signature.</summary>
      <param name="attributes" vsli:raw="The attributes of the constructor.">Attributs du constructeur.</param>
      <param name="callingConvention" vsli:raw="The calling convention of the constructor.">Convention d’appel du constructeur.</param>
      <param name="parameterTypes" vsli:raw="The parameter types of the constructor.">Types de paramètre du constructeur.</param>
      <returns vsli:raw="The defined constructor.">Constructeur défini.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">Le type a déjà été créé en utilisant <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Adds a new constructor to the type, with the given attributes, signature, and custom modifiers.">Ajoute un nouveau constructeur au type, avec les attributs, la signature et les modificateurs personnalisés donnés.</summary>
      <param name="attributes" vsli:raw="The attributes of the constructor.">Attributs du constructeur.</param>
      <param name="callingConvention" vsli:raw="The calling convention of the constructor.">Convention d’appel du constructeur.</param>
      <param name="parameterTypes" vsli:raw="The parameter types of the constructor.">Types de paramètre du constructeur.</param>
      <param name="requiredCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Tableau de tableaux de types. Chaque tableau de types représente les modificateurs personnalisés obligatoires pour le paramètre correspondant, comme <see cref="T:System.Runtime.CompilerServices.IsConst" />. Si un paramètre particulier ne possède pas de modificateurs personnalisés obligatoires, spécifiez <see langword="null" /> plutôt qu’un tableau de types. Si aucun paramètre ne possède de modificateur personnalisé requis, spécifiez <see langword="null" /> plutôt qu’un tableau de tableaux.</param>
      <param name="optionalCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Tableau de tableaux de types. Chaque tableau de types représente les modificateurs personnalisés facultatifs pour le paramètre correspondant, comme <see cref="T:System.Runtime.CompilerServices.IsConst" />. Si un paramètre particulier ne possède pas de modificateurs personnalisés facultatifs, spécifiez <see langword="null" /> plutôt qu’un tableau de types. Si aucun paramètre ne possède de modificateur personnalisé facultatif, spécifiez <see langword="null" /> plutôt qu’un tableau de tableaux.</param>
      <returns vsli:raw="The defined constructor.">Constructeur défini.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The size of &lt;paramref name=&quot;requiredCustomModifiers&quot; /&gt; or &lt;paramref name=&quot;optionalCustomModifiers&quot; /&gt; does not equal the size of &lt;paramref name=&quot;parameterTypes&quot; /&gt;.">La taille de <paramref name="requiredCustomModifiers" /> ou <paramref name="optionalCustomModifiers" /> n’est pas égale à la taille de <paramref name="parameterTypes" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Le type a déjà été créé en utilisant <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.  

ou - 
Pour le type dynamique actuel, la propriété <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> a la valeur <see langword="true" />, mais la propriété <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> a la valeur <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor(System.Reflection.MethodAttributes)">
      <summary vsli:raw="Defines the parameterless constructor. The constructor defined here will simply call the parameterless constructor of the parent.">Définit le constructeur sans paramètre. Le constructeur défini ici appelle simplement le constructeur sans paramètre du parent.</summary>
      <param name="attributes" vsli:raw="A &lt;see langword=&quot;MethodAttributes&quot; /&gt; object representing the attributes to be applied to the constructor.">Objet <see langword="MethodAttributes" /> représentant les attributs à appliquer au constructeur.</param>
      <returns vsli:raw="Returns the constructor.">Retourne le constructeur.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The parent type (base type) does not have a parameterless constructor.">Le type parent (type de base) n’a pas de constructeur sans paramètre.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Le type a déjà été créé en utilisant <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.  

ou - 
Pour le type dynamique actuel, la propriété <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> a la valeur <see langword="true" />, mais la propriété <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> a la valeur <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineEvent(System.String,System.Reflection.EventAttributes,System.Type)">
      <summary vsli:raw="Adds a new event to the type, with the given name, attributes and event type.">Ajoute un nouvel événement au type avec le nom, les attributs et le type d’événement donnés.</summary>
      <param name="name" vsli:raw="The name of the event. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Nom de l’événement. <paramref name="name" /> ne peut pas contenir de valeurs null imbriquées.</param>
      <param name="attributes" vsli:raw="The attributes of the event.">Attributs de l’événement.</param>
      <param name="eventtype" vsli:raw="The type of the event.">Type de l’événement.</param>
      <returns vsli:raw="The defined event.">Événement défini.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.">La longueur de <paramref name="name" /> est égale à zéro.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;eventtype&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> a la valeur <see langword="null" />.  

ou - 
<paramref name="eventtype" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">Le type a déjà été créé en utilisant <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Reflection.FieldAttributes)">
      <summary vsli:raw="Adds a new field to the type, with the given name, attributes, and field type.">Ajoute un nouveau champ au type avec les nom, attributs et type de champ donnés.</summary>
      <param name="fieldName" vsli:raw="The name of the field. &lt;paramref name=&quot;fieldName&quot; /&gt; cannot contain embedded nulls.">Nom du champ. <paramref name="fieldName" /> ne peut pas contenir de valeurs null imbriquées.</param>
      <param name="type" vsli:raw="The type of the field.">Type du champ</param>
      <param name="attributes" vsli:raw="The attributes of the field.">Attributs du champ.</param>
      <returns vsli:raw="The defined field.">Champ défini.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;fieldName&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;type&quot; /&gt; is System.Void.  &#xA;  &#xA; -or-  &#xA;  &#xA; A total size was specified for the parent class of this field.">La longueur de <paramref name="fieldName" /> est égale à zéro.  
ou 
 <paramref name="type" /> est System.Void.  
ou 
Une taille totale a été spécifiée pour la classe parente de ce champ.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;fieldName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="fieldName" /> est <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">Le type a déjà été créé en utilisant <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Type[],System.Type[],System.Reflection.FieldAttributes)">
      <summary vsli:raw="Adds a new field to the type, with the given name, attributes, field type, and custom modifiers.">Ajoute un nouveau champ au type avec le nom, les attributs, le type de champ et les modificateurs personnalisés donnés.</summary>
      <param name="fieldName" vsli:raw="The name of the field. &lt;paramref name=&quot;fieldName&quot; /&gt; cannot contain embedded nulls.">Nom du champ. <paramref name="fieldName" /> ne peut pas contenir de valeurs null imbriquées.</param>
      <param name="type" vsli:raw="The type of the field.">Type du champ</param>
      <param name="requiredCustomModifiers" vsli:raw="An array of types representing the required custom modifiers for the field, such as &lt;see cref=&quot;T:Microsoft.VisualC.IsConstModifier&quot; /&gt;.">Tableau de types représentant les modificateurs personnalisés pour le champ, tels que <see cref="T:Microsoft.VisualC.IsConstModifier" />.</param>
      <param name="optionalCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers for the field, such as &lt;see cref=&quot;T:Microsoft.VisualC.IsConstModifier&quot; /&gt;.">Tableau de types représentant les modificateurs personnalisés facultatifs pour le champ, tels que <see cref="T:Microsoft.VisualC.IsConstModifier" />.</param>
      <param name="attributes" vsli:raw="The attributes of the field.">Attributs du champ.</param>
      <returns vsli:raw="The defined field.">Champ défini.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;fieldName&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;type&quot; /&gt; is System.Void.  &#xA;  &#xA; -or-  &#xA;  &#xA; A total size was specified for the parent class of this field.">La longueur de <paramref name="fieldName" /> est égale à zéro.  

ou - 
<paramref name="type" /> est System.Void.  

ou 
Une taille totale a été spécifiée pour la classe parente de ce champ.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;fieldName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="fieldName" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">Le type a déjà été créé en utilisant <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineGenericParameters(System.String[])">
      <summary vsli:raw="Defines the generic type parameters for the current type, specifying their number and their names, and returns an array of &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; objects that can be used to set their constraints.">Définit les paramètres de type générique pour le type actuel, en spécifiant leur nombre et leurs noms, et retourne un tableau d’objets <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> pouvant être utilisés pour définir leurs contraintes.</summary>
      <param name="names" vsli:raw="An array of names for the generic type parameters.">Tableau de noms de paramètres de type générique.</param>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; objects that can be used to define the constraints of the generic type parameters for the current type.">Tableau d’objets <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> pouvant être utilisés pour définir les contraintes des paramètres de type générique pour le type actuel.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Generic type parameters have already been defined for this type.">Des paramètres de type générique ont déjà été définis pour ce type.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;names&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;names&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="names" /> a la valeur <see langword="null" />.  

ou - 
Un élément de <paramref name="names" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;names&quot; /&gt; is an empty array.">
        <paramref name="names" /> est un tableau vide.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)">
      <summary vsli:raw="Defines initialized data field in the .sdata section of the portable executable (PE) file.">Définit un champ de données non initialisées dans la section .sdata du fichier exécutable portable (PE).</summary>
      <param name="name" vsli:raw="The name used to refer to the data. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Nom utilisé pour faire référence aux données. <paramref name="name" /> ne peut pas contenir de valeurs null imbriquées.</param>
      <param name="data" vsli:raw="The blob of data.">Objet blob de données.</param>
      <param name="attributes" vsli:raw="The attributes for the field.">Attributs du champ.</param>
      <returns vsli:raw="A field to reference the data.">Champ pour référencer les données.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="Length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The size of the data is less than or equal to zero, or greater than or equal to 0x3f0000.">La longueur de <paramref name="name" /> est égale à zéro.  

ou - 
La taille des données est inférieure ou égale à zéro, ou supérieure ou égale à 0x3f0000.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; or &lt;paramref name=&quot;data&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> ou <paramref name="data" /> est <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been previously called.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> a été appelé précédemment.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes)">
      <summary vsli:raw="Adds a new method to the type, with the specified name and method attributes.">Ajoute une nouvelle méthode au type, avec le nom et les attributs de méthode spécifiés.</summary>
      <param name="name" vsli:raw="The name of the method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Nom de la méthode. <paramref name="name" /> ne peut pas contenir de valeurs null imbriquées.</param>
      <param name="attributes" vsli:raw="The attributes of the method.">Attributs de la méthode.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt; representing the newly defined method.">
        <see cref="T:System.Reflection.Emit.MethodBuilder" /> représentant la méthode récemment définie.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the parent of this method is an interface, and this method is not virtual (&lt;see langword=&quot;Overridable&quot; /&gt; in Visual Basic).">La longueur de <paramref name="name" /> est égale à zéro.  
ou 
Le type du parent de cette méthode est une interface, et cette méthode n’est pas virtuelle (<see langword="Overridable" /> en Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Le type a déjà été créé en utilisant <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.  

ou - 
Pour le type dynamique actuel, la propriété <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> a la valeur <see langword="true" />, mais la propriété <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> a la valeur <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions)">
      <summary vsli:raw="Adds a new method to the type, with the specified name, method attributes, and calling convention.">Ajoute une nouvelle méthode au type, avec le nom, les attributs de méthode et la convention d’appel spécifiés.</summary>
      <param name="name" vsli:raw="The name of the method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Nom de la méthode. <paramref name="name" /> ne peut pas contenir de valeurs null imbriquées.</param>
      <param name="attributes" vsli:raw="The attributes of the method.">Attributs de la méthode.</param>
      <param name="callingConvention" vsli:raw="The calling convention of the method.">Convention d’appel de la méthode.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt; representing the newly defined method.">
        <see cref="T:System.Reflection.Emit.MethodBuilder" /> représentant la méthode récemment définie.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the parent of this method is an interface and this method is not virtual (&lt;see langword=&quot;Overridable&quot; /&gt; in Visual Basic).">La longueur de <paramref name="name" /> est égale à zéro.  

ou - 
Le type du parent de cette méthode est une interface, et cette méthode n’est pas virtuelle (<see langword="Overridable" /> en Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Le type a déjà été créé en utilisant <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.  
ou 
Pour le type dynamique actuel, la propriété <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> a la valeur <see langword="true" />, mais la propriété <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> a la valeur <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary vsli:raw="Adds a new method to the type, with the specified name, method attributes, calling convention, and method signature.">Ajoute une nouvelle méthode au type, avec le nom, les attributs de méthode, la convention d’appel et la signature de méthode spécifiés.</summary>
      <param name="name" vsli:raw="The name of the method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Nom de la méthode. <paramref name="name" /> ne peut pas contenir de valeurs null imbriquées.</param>
      <param name="attributes" vsli:raw="The attributes of the method.">Attributs de la méthode.</param>
      <param name="callingConvention" vsli:raw="The calling convention of the method.">Convention d’appel de la méthode.</param>
      <param name="returnType" vsli:raw="The return type of the method.">Type de retour de la méthode.</param>
      <param name="parameterTypes" vsli:raw="The types of the parameters of the method.">Types des paramètres de la méthode.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt; representing the newly defined method.">
        <see cref="T:System.Reflection.Emit.MethodBuilder" /> représentant la méthode récemment définie.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the parent of this method is an interface, and this method is not virtual (&lt;see langword=&quot;Overridable&quot; /&gt; in Visual Basic).">La longueur de <paramref name="name" /> est égale à zéro.  
ou 
Le type du parent de cette méthode est une interface, et cette méthode n’est pas virtuelle (<see langword="Overridable" /> en Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Le type a déjà été créé en utilisant <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.  

ou - 
Pour le type dynamique actuel, la propriété <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> a la valeur <see langword="true" />, mais la propriété <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> a la valeur <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Adds a new method to the type, with the specified name, method attributes, calling convention, method signature, and custom modifiers.">Ajoute une nouvelle méthode au type avec les nom, attributs de méthode, convention d’appel, signature de méthode et modificateurs personnalisés spécifiés.</summary>
      <param name="name" vsli:raw="The name of the method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Nom de la méthode. <paramref name="name" /> ne peut pas contenir de valeurs null imbriquées.</param>
      <param name="attributes" vsli:raw="The attributes of the method.">Attributs de la méthode.</param>
      <param name="callingConvention" vsli:raw="The calling convention of the method.">Convention d’appel de la méthode.</param>
      <param name="returnType" vsli:raw="The return type of the method.">Type de retour de la méthode.</param>
      <param name="returnTypeRequiredCustomModifiers" vsli:raw="An array of types representing the required custom modifiers, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;, for the return type of the method. If the return type has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Tableau de types représentant les modificateurs personnalisés requis, tels qu’<see cref="T:System.Runtime.CompilerServices.IsConst" />, pour le type de retour de la méthode. Si le type de retour ne possède pas de modificateur personnalisé requis, spécifiez <see langword="null" />.</param>
      <param name="returnTypeOptionalCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;, for the return type of the method. If the return type has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Tableau de types représentant les modificateurs personnalisés facultatifs, tels qu’<see cref="T:System.Runtime.CompilerServices.IsConst" />, pour le type de retour de la méthode. Si le type de retour ne possède pas de modificateur personnalisé facultatif, spécifiez <see langword="null" />.</param>
      <param name="parameterTypes" vsli:raw="The types of the parameters of the method.">Types des paramètres de la méthode.</param>
      <param name="parameterTypeRequiredCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Tableau de tableaux de types. Chaque tableau de types représente les modificateurs personnalisés obligatoires pour le paramètre correspondant, comme <see cref="T:System.Runtime.CompilerServices.IsConst" />. Si un paramètre particulier ne possède pas de modificateurs personnalisés obligatoires, spécifiez <see langword="null" /> plutôt qu’un tableau de types. Si aucun paramètre ne possède de modificateur personnalisé requis, spécifiez <see langword="null" /> plutôt qu’un tableau de tableaux.</param>
      <param name="parameterTypeOptionalCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Tableau de tableaux de types. Chaque tableau de types représente les modificateurs personnalisés facultatifs pour le paramètre correspondant, comme <see cref="T:System.Runtime.CompilerServices.IsConst" />. Si un paramètre particulier ne possède pas de modificateurs personnalisés facultatifs, spécifiez <see langword="null" /> plutôt qu’un tableau de types. Si aucun paramètre ne possède de modificateur personnalisé facultatif, spécifiez <see langword="null" /> plutôt qu’un tableau de tableaux.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt; object representing the newly added method.">Objet <see cref="T:System.Reflection.Emit.MethodBuilder" /> représentant la nouvelle méthode ajoutée.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the parent of this method is an interface, and this method is not virtual (&lt;see langword=&quot;Overridable&quot; /&gt; in Visual Basic).  &#xA;  &#xA; -or-  &#xA;  &#xA; The size of &lt;paramref name=&quot;parameterTypeRequiredCustomModifiers&quot; /&gt; or &lt;paramref name=&quot;parameterTypeOptionalCustomModifiers&quot; /&gt; does not equal the size of &lt;paramref name=&quot;parameterTypes&quot; /&gt;.">La longueur de <paramref name="name" /> est égale à zéro.  
ou 
Le type du parent de cette méthode est une interface, et cette méthode n’est pas virtuelle (<see langword="Overridable" /> en Visual Basic).  

ou - 
La taille de <paramref name="parameterTypeRequiredCustomModifiers" /> ou <paramref name="parameterTypeOptionalCustomModifiers" /> n’est pas égale à la taille de <paramref name="parameterTypes" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Le type a déjà été créé en utilisant <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.  

ou - 
Pour le type dynamique actuel, la propriété <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> a la valeur <see langword="true" />, mais la propriété <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> a la valeur <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])">
      <summary vsli:raw="Adds a new method to the type, with the specified name, method attributes, and method signature.">Ajoute une nouvelle méthode au type, avec le nom, les attributs de méthode et la signature de méthode spécifiés.</summary>
      <param name="name" vsli:raw="The name of the method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Nom de la méthode. <paramref name="name" /> ne peut pas contenir de valeurs null imbriquées.</param>
      <param name="attributes" vsli:raw="The attributes of the method.">Attributs de la méthode.</param>
      <param name="returnType" vsli:raw="The return type of the method.">Type de retour de la méthode.</param>
      <param name="parameterTypes" vsli:raw="The types of the parameters of the method.">Types des paramètres de la méthode.</param>
      <returns vsli:raw="The defined method.">Méthode définie.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the parent of this method is an interface, and this method is not virtual (&lt;see langword=&quot;Overridable&quot; /&gt; in Visual Basic).">La longueur de <paramref name="name" /> est égale à zéro.  
ou 
Le type du parent de cette méthode est une interface, et cette méthode n’est pas virtuelle (<see langword="Overridable" /> en Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Le type a déjà été créé en utilisant <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.  

ou - 
Pour le type dynamique actuel, la propriété <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> a la valeur <see langword="true" />, mais la propriété <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> a la valeur <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethodOverride(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
      <summary vsli:raw="Specifies a given method body that implements a given method declaration, potentially with a different name.">Spécifie un corps de méthode donné qui implémente une déclaration de méthode donnée, éventuellement avec un nom différent.</summary>
      <param name="methodInfoBody" vsli:raw="The method body to be used. This should be a &lt;see langword=&quot;MethodBuilder&quot; /&gt; object.">Corps de méthode à utiliser. Il doit s’agir d’un objet <see langword="MethodBuilder" /> .</param>
      <param name="methodInfoDeclaration" vsli:raw="The method whose declaration is to be used.">Méthode dont la déclaration doit être utilisée.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;methodInfoBody&quot; /&gt; does not belong to this class.">
        <paramref name="methodInfoBody" /> n’appartient pas à cette classe.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;methodInfoBody&quot; /&gt; or &lt;paramref name=&quot;methodInfoDeclaration&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="methodInfoBody" /> ou <paramref name="methodInfoDeclaration" /> est <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The declaring type of &lt;paramref name=&quot;methodInfoBody&quot; /&gt; is not the type represented by this &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt;.">Le type a déjà été créé en utilisant <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.  
ou 
Le type déclarant de <paramref name="methodInfoBody" /> n’est pas le type représenté par ce <see cref="T:System.Reflection.Emit.TypeBuilder" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String)">
      <summary vsli:raw="Defines a nested type, given its name.">Définit un type imbriqué, en fonction de son nom.</summary>
      <param name="name" vsli:raw="The short name of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Nom court du type. <paramref name="name" /> ne peut pas contenir de valeurs null imbriquées.</param>
      <returns vsli:raw="The defined nested type.">Type imbriqué défini.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="Length of &lt;paramref name=&quot;name&quot; /&gt; is zero or greater than 1023.  &#xA;  &#xA; -or-  &#xA;  &#xA; This operation would create a type with a duplicate &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.FullName&quot; /&gt; in the current assembly.">La longueur de <paramref name="name" /> est égale à zéro ou supérieure à 1023.  

ou - 
Cette opération permet de créer un type avec un <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> en double dans l’assembly actuel.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes)">
      <summary vsli:raw="Defines a nested type, given its name and attributes.">Définit un type imbriqué, en fonction de son nom et de ses attributs.</summary>
      <param name="name" vsli:raw="The short name of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Nom court du type. <paramref name="name" /> ne peut pas contenir de valeurs null imbriquées.</param>
      <param name="attr" vsli:raw="The attributes of the type.">Attributs du type.</param>
      <returns vsli:raw="The defined nested type.">Type imbriqué défini.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The nested attribute is not specified.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is sealed.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an array.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an interface, but the nested type is not an interface.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; is zero or greater than 1023.  &#xA;  &#xA; -or-  &#xA;  &#xA; This operation would create a type with a duplicate &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.FullName&quot; /&gt; in the current assembly.">L’attribut imbriqué n’est pas spécifié.  

ou - 
Ce type est scellé.  

ou - 
Ce type est un tableau.  


ou 
Ce type est une interface, mais le type imbriqué n’est pas une interface.  
ou 
La longueur de <paramref name="name" /> est égale à zéro ou supérieure à 1 023.  

ou - 
Cette opération permet de créer un type avec un <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> en double dans l’assembly actuel.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type)">
      <summary vsli:raw="Defines a nested type, given its name, attributes, and the type that it extends.">Définit un type imbriqué, en fonction de son nom, de ses attributs et du type qu’il étend.</summary>
      <param name="name" vsli:raw="The short name of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Nom court du type. <paramref name="name" /> ne peut pas contenir de valeurs null imbriquées.</param>
      <param name="attr" vsli:raw="The attributes of the type.">Attributs du type.</param>
      <param name="parent" vsli:raw="The type that the nested type extends.">Type étendu par le type imbriqué.</param>
      <returns vsli:raw="The defined nested type.">Type imbriqué défini.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The nested attribute is not specified.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is sealed.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an array.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an interface, but the nested type is not an interface.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; is zero or greater than 1023.  &#xA;  &#xA; -or-  &#xA;  &#xA; This operation would create a type with a duplicate &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.FullName&quot; /&gt; in the current assembly.">L’attribut imbriqué n’est pas spécifié.  

ou - 
Ce type est scellé.  

ou 
Ce type est un tableau.  

ou - 
Ce type est une interface, mais le type imbriqué n’est pas une interface.  

ou 
La longueur de <paramref name="name" /> est égale à zéro ou supérieure à 1 023.  
ou 
Cette opération permet de créer un type avec un <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> en double dans l’assembly actuel.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)">
      <summary vsli:raw="Defines a nested type, given its name, attributes, the total size of the type, and the type that it extends.">Définit un type imbriqué, en fonction de son nom, de ses attributs, de la taille totale du type et du type qu’il étend.</summary>
      <param name="name" vsli:raw="The short name of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Nom court du type. <paramref name="name" /> ne peut pas contenir de valeurs null imbriquées.</param>
      <param name="attr" vsli:raw="The attributes of the type.">Attributs du type.</param>
      <param name="parent" vsli:raw="The type that the nested type extends.">Type étendu par le type imbriqué.</param>
      <param name="typeSize" vsli:raw="The total size of the type.">Taille totale du type.</param>
      <returns vsli:raw="The defined nested type.">Type imbriqué défini.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The nested attribute is not specified.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is sealed.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an array.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an interface, but the nested type is not an interface.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; is zero or greater than 1023.  &#xA;  &#xA; -or-  &#xA;  &#xA; This operation would create a type with a duplicate &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.FullName&quot; /&gt; in the current assembly.">L’attribut imbriqué n’est pas spécifié.  

ou - 
Ce type est scellé.  

ou 
Ce type est un tableau.  

ou - 
Ce type est une interface, mais le type imbriqué n’est pas une interface.  

ou 
La longueur de <paramref name="name" /> est égale à zéro ou supérieure à 1 023.  

ou - 
Cette opération permet de créer un type avec un <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> en double dans l’assembly actuel.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)">
      <summary vsli:raw="Defines a nested type, given its name, attributes, the type that it extends, and the packing size.">Définit un type imbriqué, en fonction de son nom, de ses attributs, du type qu’il étend et de la taille de compression.</summary>
      <param name="name" vsli:raw="The short name of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Nom court du type. <paramref name="name" /> ne peut pas contenir de valeurs null imbriquées.</param>
      <param name="attr" vsli:raw="The attributes of the type.">Attributs du type.</param>
      <param name="parent" vsli:raw="The type that the nested type extends.">Type étendu par le type imbriqué.</param>
      <param name="packSize" vsli:raw="The packing size of the type.">Taille de compression du type.</param>
      <returns vsli:raw="The defined nested type.">Type imbriqué défini.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The nested attribute is not specified.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is sealed.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an array.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an interface, but the nested type is not an interface.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; is zero or greater than 1023.  &#xA;  &#xA; -or-  &#xA;  &#xA; This operation would create a type with a duplicate &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.FullName&quot; /&gt; in the current assembly.">L’attribut imbriqué n’est pas spécifié.  
ou 
Ce type est scellé.  
ou 
Ce type est un tableau.  

ou - 
Ce type est une interface, mais le type imbriqué n’est pas une interface.  

ou - 
La longueur de <paramref name="name" /> est égale à zéro ou supérieure à 1 023.  

ou - 
Cette opération permet de créer un type avec un <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> en double dans l’assembly actuel.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)">
      <summary vsli:raw="Defines a nested type, given its name, attributes, size, and the type that it extends.">Définit un type imbriqué, en fonction de ses nom, attributs, taille et du type qu’il étend.</summary>
      <param name="name" vsli:raw="The short name of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded null values.">Nom court du type. <paramref name="name" /> ne peut pas contenir de valeurs null imbriquées.</param>
      <param name="attr" vsli:raw="The attributes of the type.">Attributs du type.</param>
      <param name="parent" vsli:raw="The type that the nested type extends.">Type étendu par le type imbriqué.</param>
      <param name="packSize" vsli:raw="The packing size of the type.">Taille de compression du type.</param>
      <param name="typeSize" vsli:raw="The total size of the type.">Taille totale du type.</param>
      <returns vsli:raw="The defined nested type.">Type imbriqué défini.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])">
      <summary vsli:raw="Defines a nested type, given its name, attributes, the type that it extends, and the interfaces that it implements.">Définit un type imbriqué, en fonction de son nom, de ses attributs, du type qu’il étend et des interfaces qu’il implémente.</summary>
      <param name="name" vsli:raw="The short name of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Nom court du type. <paramref name="name" /> ne peut pas contenir de valeurs null imbriquées.</param>
      <param name="attr" vsli:raw="The attributes of the type.">Attributs du type.</param>
      <param name="parent" vsli:raw="The type that the nested type extends.">Type étendu par le type imbriqué.</param>
      <param name="interfaces" vsli:raw="The interfaces that the nested type implements.">Interfaces implémentées par le type imbriqué.</param>
      <returns vsli:raw="The defined nested type.">Type imbriqué défini.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The nested attribute is not specified.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is sealed.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an array.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an interface, but the nested type is not an interface.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; is zero or greater than 1023.  &#xA;  &#xA; -or-  &#xA;  &#xA; This operation would create a type with a duplicate &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.FullName&quot; /&gt; in the current assembly.">L’attribut imbriqué n’est pas spécifié.  

ou - 
Ce type est scellé.  

ou - 
Ce type est un tableau.  

ou - 
Ce type est une interface, mais le type imbriqué n’est pas une interface.  

ou - 
La longueur de <paramref name="name" /> est égale à zéro ou supérieure à 1 023.  


ou 
Cette opération permet de créer un type avec un <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> en double dans l’assembly actuel.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of the &lt;paramref name=&quot;interfaces&quot; /&gt; array is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> a la valeur <see langword="null" />.  
ou 
Un élément du tableau <paramref name="interfaces" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary vsli:raw="Defines a &lt;see langword=&quot;PInvoke&quot; /&gt; method given its name, the name of the DLL in which the method is defined, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the &lt;see langword=&quot;PInvoke&quot; /&gt; flags.">Définit une méthode <see langword="PInvoke" /> en fonction de son nom, du nom de la DLL dans laquelle elle est définie, des attributs de la méthode, de sa convention d’appel, de son type de retour, des types de ses paramètres et des indicateurs <see langword="PInvoke" />.</summary>
      <param name="name" vsli:raw="The name of the &lt;see langword=&quot;PInvoke&quot; /&gt; method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Nom de la méthode <see langword="PInvoke" />. <paramref name="name" /> ne peut pas contenir de valeurs null imbriquées.</param>
      <param name="dllName" vsli:raw="The name of the DLL in which the &lt;see langword=&quot;PInvoke&quot; /&gt; method is defined.">Nom de la DLL dans laquelle la méthode <see langword="PInvoke" /> est définie.</param>
      <param name="attributes" vsli:raw="The attributes of the method.">Attributs de la méthode.</param>
      <param name="callingConvention" vsli:raw="The method's calling convention.">Convention d’appel de la méthode.</param>
      <param name="returnType" vsli:raw="The method's return type.">Type de retour de la méthode.</param>
      <param name="parameterTypes" vsli:raw="The types of the method's parameters.">Types des paramètres de la méthode.</param>
      <param name="nativeCallConv" vsli:raw="The native calling convention.">Convention d’appel native.</param>
      <param name="nativeCharSet" vsli:raw="The method's native character set.">Jeu de caractères natif de la méthode.</param>
      <returns vsli:raw="The defined &lt;see langword=&quot;PInvoke&quot; /&gt; method.">Méthode <see langword="PInvoke" /> définie.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The method is not static.  &#xA;  &#xA; -or-  &#xA;  &#xA; The parent type is an interface.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method is abstract.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method was previously defined.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; or &lt;paramref name=&quot;dllName&quot; /&gt; is zero.">La méthode n’est pas statique.  
ou 
Le type parent est une interface.  

ou - 
La méthode est de type abstract.  

ou - 
La méthode a déjà été définie.  

ou - 
La longueur de <paramref name="name" /> ou <paramref name="dllName" /> est de zéro.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; or &lt;paramref name=&quot;dllName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> ou <paramref name="dllName" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">Le type conteneur a déjà été créé à l’aide de <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary vsli:raw="Defines a &lt;see langword=&quot;PInvoke&quot; /&gt; method given its name, the name of the DLL in which the method is defined, the name of the entry point, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the &lt;see langword=&quot;PInvoke&quot; /&gt; flags.">Définit une méthode <see langword="PInvoke" /> en fonction de son nom, du nom de la DLL dans laquelle elle est définie, du nom du point d’entrée, des attributs de la méthode, de sa convention d’appel, de son type de retour, des types de ses paramètres et des indicateurs <see langword="PInvoke" />.</summary>
      <param name="name" vsli:raw="The name of the &lt;see langword=&quot;PInvoke&quot; /&gt; method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Nom de la méthode <see langword="PInvoke" />. <paramref name="name" /> ne peut pas contenir de valeurs null imbriquées.</param>
      <param name="dllName" vsli:raw="The name of the DLL in which the &lt;see langword=&quot;PInvoke&quot; /&gt; method is defined.">Nom de la DLL dans laquelle la méthode <see langword="PInvoke" /> est définie.</param>
      <param name="entryName" vsli:raw="The name of the entry point in the DLL.">Nom du point d’entrée dans la DLL.</param>
      <param name="attributes" vsli:raw="The attributes of the method.">Attributs de la méthode.</param>
      <param name="callingConvention" vsli:raw="The method's calling convention.">Convention d’appel de la méthode.</param>
      <param name="returnType" vsli:raw="The method's return type.">Type de retour de la méthode.</param>
      <param name="parameterTypes" vsli:raw="The types of the method's parameters.">Types des paramètres de la méthode.</param>
      <param name="nativeCallConv" vsli:raw="The native calling convention.">Convention d’appel native.</param>
      <param name="nativeCharSet" vsli:raw="The method's native character set.">Jeu de caractères natif de la méthode.</param>
      <returns vsli:raw="The defined &lt;see langword=&quot;PInvoke&quot; /&gt; method.">Méthode <see langword="PInvoke" /> définie.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The method is not static.  &#xA;  &#xA; -or-  &#xA;  &#xA; The parent type is an interface.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method is abstract.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method was previously defined.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of &lt;paramref name=&quot;name&quot; /&gt;, &lt;paramref name=&quot;dllName&quot; /&gt;, or &lt;paramref name=&quot;entryName&quot; /&gt; is zero.">La méthode n’est pas statique.  

ou - 
Le type parent est une interface.  

ou - 
La méthode est de type abstract.  

ou - 
La méthode a déjà été définie.  

ou - 
La longueur de <paramref name="name" />, <paramref name="dllName" /> ou <paramref name="entryName" /> est égale à zéro.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt;, &lt;paramref name=&quot;dllName&quot; /&gt;, or &lt;paramref name=&quot;entryName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" />, <paramref name="dllName" /> ou <paramref name="entryName" /> est <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">Le type conteneur a déjà été créé à l’aide de <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.Type[][],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][])">
      <summary>Définit une méthode <see langword="PInvoke" /> en fonction de son nom, du nom de la DLL dans laquelle elle est définie, du nom du point d’entrée, des attributs de la méthode, de sa convention d’appel, de son type de retour, des types de ses paramètres, des indicateurs <see langword="PInvoke" /> et des modificateurs personnalisés des paramètres et du type de retour.</summary>
      <param name="name">Nom de la méthode <see langword="PInvoke" />. <paramref name="name" /> ne peut pas contenir de valeurs null imbriquées.</param>
      <param name="dllName">Nom de la DLL dans laquelle la méthode <see langword="PInvoke" /> est définie.</param>
      <param name="parameterTypeOptionalCustomModifiers">Tableau de tableaux de types. Chaque tableau de types représente les modificateurs personnalisés facultatifs pour le paramètre correspondant, comme <see cref="T:System.Runtime.CompilerServices.IsConst" />. Si un paramètre particulier ne possède pas de modificateurs personnalisés facultatifs, spécifiez <see langword="null" /> plutôt qu’un tableau de types. Si aucun paramètre ne possède de modificateur personnalisé facultatif, spécifiez <see langword="null" /> plutôt qu’un tableau de tableaux.</param>
      <param name="nativeCallConv">Convention d’appel native.</param>
      <param name="nativeCharSet">Jeu de caractères natif de la méthode.</param>
      <param name="entryName">Nom du point d’entrée dans la DLL.</param>
      <param name="attributes">Attributs de la méthode.</param>
      <param name="callingConvention">Convention d’appel de la méthode.</param>
      <param name="returnType">Type de retour de la méthode.</param>
      <param name="returnTypeRequiredCustomModifiers">Tableau de types représentant les modificateurs personnalisés requis, tels qu’<see cref="T:System.Runtime.CompilerServices.IsConst" />, pour le type de retour de la méthode. Si le type de retour ne possède pas de modificateur personnalisé requis, spécifiez <see langword="null" />.</param>
      <param name="returnTypeOptionalCustomModifiers">Tableau de types représentant les modificateurs personnalisés facultatifs, tels qu’<see cref="T:System.Runtime.CompilerServices.IsConst" />, pour le type de retour de la méthode. Si le type de retour ne possède pas de modificateur personnalisé facultatif, spécifiez <see langword="null" />.</param>
      <param name="parameterTypes">Types des paramètres de la méthode.</param>
      <param name="parameterTypeRequiredCustomModifiers">Tableau de tableaux de types. Chaque tableau de types représente les modificateurs personnalisés obligatoires pour le paramètre correspondant, comme <see cref="T:System.Runtime.CompilerServices.IsConst" />. Si un paramètre particulier ne possède pas de modificateurs personnalisés obligatoires, spécifiez <see langword="null" /> plutôt qu’un tableau de types. Si aucun paramètre ne possède de modificateur personnalisé requis, spécifiez <see langword="null" /> plutôt qu’un tableau de tableaux.</param>
      <returns>
        <see cref="T:System.Reflection.Emit.MethodBuilder" /> représentant la méthode <see langword="PInvoke" /> définie.</returns>
      <exception cref="T:System.ArgumentException">La méthode n’est pas statique.  

ou - 
Le type parent est une interface.  

ou - 
La méthode est de type abstract.  


ou 
La méthode a déjà été définie.  

ou - 
La longueur de <paramref name="name" />, <paramref name="dllName" /> ou <paramref name="entryName" /> est égale à zéro.  

ou - 
La taille de <paramref name="parameterTypeRequiredCustomModifiers" /> ou <paramref name="parameterTypeOptionalCustomModifiers" /> n’est pas égale à la taille de <paramref name="parameterTypes" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />, <paramref name="dllName" /> ou <paramref name="entryName" /> est <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Le type a déjà été créé en utilisant <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.  

ou - 
Pour le type dynamique actuel, la propriété <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> a la valeur <see langword="true" />, mais la propriété <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> a la valeur <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary vsli:raw="Adds a new property to the type, with the given name, attributes, calling convention, and property signature.">Ajoute une nouvelle propriété au type avec le nom, les attributs, la convention d’appel et la signature de propriété spécifiés.</summary>
      <param name="name" vsli:raw="The name of the property. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Nom de la propriété. <paramref name="name" /> ne peut pas contenir de valeurs null imbriquées.</param>
      <param name="attributes" vsli:raw="The attributes of the property.">Attributs de la propriété.</param>
      <param name="callingConvention" vsli:raw="The calling convention of the property accessors.">Convention d’appel des accesseurs de propriété.</param>
      <param name="returnType" vsli:raw="The return type of the property.">Type de retour de la propriété.</param>
      <param name="parameterTypes" vsli:raw="The types of the parameters of the property.">Types des paramètres de la propriété.</param>
      <returns vsli:raw="The defined property.">Propriété définie.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.">La longueur de <paramref name="name" /> est égale à zéro.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; Any of the elements of the &lt;paramref name=&quot;parameterTypes&quot; /&gt; array is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> a la valeur <see langword="null" />.  

ou - 
Un des éléments du tableau <paramref name="parameterTypes" /> est <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">Le type a déjà été créé en utilisant <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Adds a new property to the type, with the given name, calling convention, property signature, and custom modifiers.">Ajoute une nouvelle propriété au type avec le nom, la convention d’appel, la signature de propriété et les modificateurs personnalisés spécifiés.</summary>
      <param name="name" vsli:raw="The name of the property. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Nom de la propriété. <paramref name="name" /> ne peut pas contenir de valeurs null imbriquées.</param>
      <param name="attributes" vsli:raw="The attributes of the property.">Attributs de la propriété.</param>
      <param name="callingConvention" vsli:raw="The calling convention of the property accessors.">Convention d’appel des accesseurs de propriété.</param>
      <param name="returnType" vsli:raw="The return type of the property.">Type de retour de la propriété.</param>
      <param name="returnTypeRequiredCustomModifiers" vsli:raw="An array of types representing the required custom modifiers, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;, for the return type of the property. If the return type has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Tableau de types représentant les modificateurs personnalisés obligatoires, comme <see cref="T:System.Runtime.CompilerServices.IsConst" />, pour le type de retour de la propriété. Si le type de retour ne possède pas de modificateur personnalisé requis, spécifiez <see langword="null" />.</param>
      <param name="returnTypeOptionalCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;, for the return type of the property. If the return type has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Tableau de types représentant les modificateurs personnalisés facultatifs, comme <see cref="T:System.Runtime.CompilerServices.IsConst" />, pour le type de retour de la propriété. Si le type de retour ne possède pas de modificateur personnalisé facultatif, spécifiez <see langword="null" />.</param>
      <param name="parameterTypes" vsli:raw="The types of the parameters of the property.">Types des paramètres de la propriété.</param>
      <param name="parameterTypeRequiredCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Tableau de tableaux de types. Chaque tableau de types représente les modificateurs personnalisés obligatoires pour le paramètre correspondant, comme <see cref="T:System.Runtime.CompilerServices.IsConst" />. Si un paramètre particulier ne possède pas de modificateurs personnalisés obligatoires, spécifiez <see langword="null" /> plutôt qu’un tableau de types. Si aucun paramètre ne possède de modificateur personnalisé requis, spécifiez <see langword="null" /> plutôt qu’un tableau de tableaux.</param>
      <param name="parameterTypeOptionalCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Tableau de tableaux de types. Chaque tableau de types représente les modificateurs personnalisés facultatifs pour le paramètre correspondant, comme <see cref="T:System.Runtime.CompilerServices.IsConst" />. Si un paramètre particulier ne possède pas de modificateurs personnalisés facultatifs, spécifiez <see langword="null" /> plutôt qu’un tableau de types. Si aucun paramètre ne possède de modificateur personnalisé facultatif, spécifiez <see langword="null" /> plutôt qu’un tableau de tableaux.</param>
      <returns vsli:raw="The defined property.">Propriété définie.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.">La longueur de <paramref name="name" /> est égale à zéro.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; Any of the elements of the &lt;paramref name=&quot;parameterTypes&quot; /&gt; array is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> a la valeur <see langword="null" />.  
ou 
Un des éléments du tableau <paramref name="parameterTypes" /> est <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">Le type a déjà été créé en utilisant <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[])">
      <summary vsli:raw="Adds a new property to the type, with the given name and property signature.">Ajoute une nouvelle propriété au type avec le nom et la signature de propriété donnés.</summary>
      <param name="name" vsli:raw="The name of the property. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Nom de la propriété. <paramref name="name" /> ne peut pas contenir de valeurs null imbriquées.</param>
      <param name="attributes" vsli:raw="The attributes of the property.">Attributs de la propriété.</param>
      <param name="returnType" vsli:raw="The return type of the property.">Type de retour de la propriété.</param>
      <param name="parameterTypes" vsli:raw="The types of the parameters of the property.">Types des paramètres de la propriété.</param>
      <returns vsli:raw="The defined property.">Propriété définie.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.">La longueur de <paramref name="name" /> est égale à zéro.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; Any of the elements of the &lt;paramref name=&quot;parameterTypes&quot; /&gt; array is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> a la valeur <see langword="null" />.  
ou 
Un des éléments du tableau <paramref name="parameterTypes" /> est <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">Le type a déjà été créé en utilisant <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Adds a new property to the type, with the given name, property signature, and custom modifiers.">Ajoute une nouvelle propriété au type, avec le nom, la signature de propriété et les modificateurs personnalisés donnés.</summary>
      <param name="name" vsli:raw="The name of the property. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Nom de la propriété. <paramref name="name" /> ne peut pas contenir de valeurs null imbriquées.</param>
      <param name="attributes" vsli:raw="The attributes of the property.">Attributs de la propriété.</param>
      <param name="returnType" vsli:raw="The return type of the property.">Type de retour de la propriété.</param>
      <param name="returnTypeRequiredCustomModifiers" vsli:raw="An array of types representing the required custom modifiers, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;, for the return type of the property. If the return type has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Tableau de types représentant les modificateurs personnalisés obligatoires, comme <see cref="T:System.Runtime.CompilerServices.IsConst" />, pour le type de retour de la propriété. Si le type de retour ne possède pas de modificateur personnalisé requis, spécifiez <see langword="null" />.</param>
      <param name="returnTypeOptionalCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;, for the return type of the property. If the return type has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Tableau de types représentant les modificateurs personnalisés facultatifs, comme <see cref="T:System.Runtime.CompilerServices.IsConst" />, pour le type de retour de la propriété. Si le type de retour ne possède pas de modificateur personnalisé facultatif, spécifiez <see langword="null" />.</param>
      <param name="parameterTypes" vsli:raw="The types of the parameters of the property.">Types des paramètres de la propriété.</param>
      <param name="parameterTypeRequiredCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Tableau de tableaux de types. Chaque tableau de types représente les modificateurs personnalisés obligatoires pour le paramètre correspondant, comme <see cref="T:System.Runtime.CompilerServices.IsConst" />. Si un paramètre particulier ne possède pas de modificateurs personnalisés obligatoires, spécifiez <see langword="null" /> plutôt qu’un tableau de types. Si aucun paramètre ne possède de modificateur personnalisé requis, spécifiez <see langword="null" /> plutôt qu’un tableau de tableaux.</param>
      <param name="parameterTypeOptionalCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Tableau de tableaux de types. Chaque tableau de types représente les modificateurs personnalisés facultatifs pour le paramètre correspondant, comme <see cref="T:System.Runtime.CompilerServices.IsConst" />. Si un paramètre particulier ne possède pas de modificateurs personnalisés facultatifs, spécifiez <see langword="null" /> plutôt qu’un tableau de types. Si aucun paramètre ne possède de modificateur personnalisé facultatif, spécifiez <see langword="null" /> plutôt qu’un tableau de tableaux.</param>
      <returns vsli:raw="The defined property.">Propriété définie.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.">La longueur de <paramref name="name" /> est égale à zéro.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;  &#xA;  &#xA; -or-  &#xA;  &#xA; Any of the elements of the &lt;paramref name=&quot;parameterTypes&quot; /&gt; array is &lt;see langword=&quot;null&quot; /&gt;">
        <paramref name="name" /> a la valeur <see langword="null" />.  

ou - 
Un des éléments du tableau <paramref name="parameterTypes" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">Le type a déjà été créé en utilisant <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineTypeInitializer">
      <summary vsli:raw="Defines the initializer for this type.">Définit l’initialiseur de ce type.</summary>
      <returns vsli:raw="Returns a type initializer.">Retourne un initialiseur de type.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">Le type conteneur a déjà été créé à l’aide de <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)">
      <summary vsli:raw="Defines an uninitialized data field in the &lt;see langword=&quot;.sdata&quot; /&gt; section of the portable executable (PE) file.">Définit un champ de données non initialisé dans la section <see langword=".sdata" /> du fichier exécutable portable (PE).</summary>
      <param name="name" vsli:raw="The name used to refer to the data. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Nom utilisé pour faire référence aux données. <paramref name="name" /> ne peut pas contenir des valeurs Null imbriquées.</param>
      <param name="size" vsli:raw="The size of the data field.">Taille du champ de données.</param>
      <param name="attributes" vsli:raw="The attributes for the field.">Attributs du champ.</param>
      <returns vsli:raw="A field to reference the data.">Champ pour référencer les données.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="Length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;size&quot; /&gt; is less than or equal to zero, or greater than or equal to 0x003f0000.">La longueur de <paramref name="name" /> est égale à zéro.  
ou 
 <paramref name="size" /> est inférieur ou égal à zéro, ou supérieur ou égal à 0x003f0000.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">Le type a déjà été créé en utilisant <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.FullName">
      <summary vsli:raw="Retrieves the full path of this type.">Récupère le chemin complet de ce type.</summary>
      <returns vsli:raw="Read-only. Retrieves the full path of this type.">Lecture seule. Récupère le chemin complet de ce type.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.GenericParameterAttributes">
      <summary vsli:raw="Gets a value that indicates the covariance and special constraints of the current generic type parameter.">Obtient une valeur qui indique la covariance et les contraintes spéciales du paramètre de type générique actuel.</summary>
      <returns vsli:raw="A bitwise combination of &lt;see cref=&quot;T:System.Reflection.GenericParameterAttributes&quot; /&gt; values that describes the covariance and special constraints of the current generic type parameter.">Combinaison d'opérations de bits de valeurs <see cref="T:System.Reflection.GenericParameterAttributes" /> qui décrit la covariance et les contraintes spéciales du paramètre de type générique actuel.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.GenericParameterPosition">
      <summary vsli:raw="Gets the position of a type parameter in the type parameter list of the generic type that declared the parameter.">Obtient la position d’un paramètre de type dans la liste des paramètres de type du type générique qui a déclaré le paramètre.</summary>
      <returns vsli:raw="If the current &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; object represents a generic type parameter, the position of the type parameter in the type parameter list of the generic type that declared the parameter; otherwise, undefined.">Si l’objet courant <see cref="T:System.Reflection.Emit.TypeBuilder" /> représente un paramètre de type générique, la position du paramètre de type dans la liste des paramètres de type du type générique qui a déclaré le paramètre ; sinon, non défini.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetConstructor(System.Type,System.Reflection.ConstructorInfo)">
      <summary vsli:raw="Returns the constructor of the specified constructed generic type that corresponds to the specified constructor of the generic type definition.">Retourne le constructeur du type générique construit spécifié qui correspond au constructeur spécifié de la définition de type générique.</summary>
      <param name="type" vsli:raw="The constructed generic type whose constructor is returned.">Type générique construit dont le constructeur est retourné.</param>
      <param name="constructor" vsli:raw="A constructor on the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;, which specifies which constructor of &lt;paramref name=&quot;type&quot; /&gt; to return.">Constructeur sur la définition de type générique de <paramref name="type" />, qui spécifie le constructeur de <paramref name="type" /> à retourner.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; object that represents the constructor of &lt;paramref name=&quot;type&quot; /&gt; corresponding to &lt;paramref name=&quot;constructor&quot; /&gt;, which specifies a constructor belonging to the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;.">Objet <see cref="T:System.Reflection.ConstructorInfo" /> qui représente le constructeur de <paramref name="type" /> correspondant à <paramref name="constructor" />, qui spécifie un constructeur appartenant à la définition de type générique de <paramref name="type" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; does not represent a generic type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;type&quot; /&gt; is not of type &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The declaring type of &lt;paramref name=&quot;constructor&quot; /&gt; is not a generic type definition.  &#xA;  &#xA; -or-  &#xA;  &#xA; The declaring type of &lt;paramref name=&quot;constructor&quot; /&gt; is not the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;.">
        <paramref name="type" /> ne représente pas un type générique.  
ou 
 <paramref name="type" /> n'est pas de type <see cref="T:System.Reflection.Emit.TypeBuilder" />.  

ou - 
Le type déclarant de <paramref name="constructor" /> n’est pas une définition de type générique.  

ou 
Le type déclarant de <paramref name="constructor" /> n’est pas la définition de type générique de <paramref name="type" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetConstructors(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; objects representing the public and non-public constructors defined for this class, as specified.">Retourne un tableau d’objets <see cref="T:System.Reflection.ConstructorInfo" /> représentant les constructeurs publics et non publics définis pour cette classe, comme spécifié.</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; as in &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Il doit s’agir d’un indicateur de bit issu de <see cref="T:System.Reflection.BindingFlags" />, comme dans <see langword="InvokeMethod" />, <see langword="NonPublic" /> et ainsi de suite.</param>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; objects representing the specified constructors defined for this class. If no constructors are defined, an empty array is returned.">Retourne un tableau d’objets <see cref="T:System.Reflection.ConstructorInfo" /> représentant les constructeurs spécifiés définis pour cette classe. Si aucun constructeur n’est défini, un tableau vide est retourné.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">Cette méthode n’est pas implémentée pour les types incomplets.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes defined for this type.">Retourne tous les attributs personnalisés définis pour ce type.</summary>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the attributes.">Spécifie s’il faut rechercher les attributs dans la chaîne d’héritage de ce membre.</param>
      <returns vsli:raw="Returns an array of objects representing all the custom attributes of this type.">Retourne un tableau d’objets représentant tous les attributs personnalisés de ce type.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported for incomplete types. Retrieve the type using &lt;see cref=&quot;M:System.Type.GetType&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Type&quot; /&gt;.">Cette méthode n’est pas prise en charge pour l’instant pour les types incomplets. Récupérez le type à l’aide de <see cref="M:System.Type.GetType" /> et appelez <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> sur le <see cref="T:System.Type" /> retourné.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes of the current type that are assignable to a specified type.">Retourne tous les attributs personnalisés du type actuel qui peuvent être assignés à un type spécifié.</summary>
      <param name="attributeType" vsli:raw="The type of attribute to search for. Only attributes that are assignable to this type are returned.">Type d’attribut à rechercher. Seuls les attributs qui peuvent être assignés à ce type sont retournés.</param>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the attributes.">Spécifie s’il faut rechercher les attributs dans la chaîne d’héritage de ce membre.</param>
      <returns vsli:raw="An array of custom attributes defined on the current type.">Tableau d’attributs personnalisés définis sur le type actuel.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported for incomplete types. Retrieve the type using &lt;see cref=&quot;M:System.Type.GetType&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Type&quot; /&gt;.">Cette méthode n’est pas prise en charge pour l’instant pour les types incomplets. Récupérez la méthode à l’aide de <see cref="M:System.Type.GetType" /> et appelez <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> sur le <see cref="T:System.Type" />retourné.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="attributeType" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The type must be a type provided by the underlying runtime system.">Le type doit être un type fourni par le système runtime sous-jacent.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetElementType">
      <summary vsli:raw="Calling this method always throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">L'appel de cette méthode lève toujours <see cref="T:System.NotSupportedException" />.</summary>
      <returns vsli:raw="This method is not supported. No value is returned.">Cette méthode n'est pas prise en charge. Aucune valeur n'est retournée.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">Cette méthode n'est pas prise en charge.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the event with the specified name.">Retourne l’événement avec le nom spécifié.</summary>
      <param name="name" vsli:raw="The name of the event to search for.">Nom de l’événement à rechercher.</param>
      <param name="bindingAttr" vsli:raw="A bitwise combination of &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; values that limits the search.">Combinaison de bits de valeurs <see cref="T:System.Reflection.BindingFlags" /> qui limite la recherche.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; object representing the event declared or inherited by this type with the specified name, or &lt;see langword=&quot;null&quot; /&gt; if there are no matches.">Objet <see cref="T:System.Reflection.EventInfo" /> représentant l’événement déclaré ou hérité par ce type avec le nom spécifié, ou <see langword="null" /> s’il n’existe aucune correspondance.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">Cette méthode n’est pas implémentée pour les types incomplets.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetEvents">
      <summary vsli:raw="Returns the public events declared or inherited by this type.">Retourne les événements publics déclarés ou hérités par ce type.</summary>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; objects representing the public events declared or inherited by this type. An empty array is returned if there are no public events.">Retourne un tableau d’objets <see cref="T:System.Reflection.EventInfo" /> représentant les événements publics déclarés ou hérités par ce type. Un tableau vide est retourné s’il n’existe aucun événement public.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">Cette méthode n’est pas implémentée pour les types incomplets.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetEvents(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the public and non-public events that are declared by this type.">Retourne les événements publics et non publics déclarés par ce type.</summary>
      <param name="bindingAttr" vsli:raw="A bitwise combination of &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; values that limits the search.">Combinaison de bits de valeurs <see cref="T:System.Reflection.BindingFlags" /> qui limite la recherche.</param>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; objects representing the events declared or inherited by this type that match the specified binding flags. An empty array is returned if there are no matching events.">Retourne un tableau d’objets <see cref="T:System.Reflection.EventInfo" /> représentant les événements déclarés ou hérités par ce type et correspondant aux indicateurs de liaison spécifiés. Un tableau vide est retourné s’il n’existe aucun événement correspondant.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">Cette méthode n’est pas implémentée pour les types incomplets.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the field specified by the given name.">Retourne le champ spécifié par le nom donné.</summary>
      <param name="name" vsli:raw="The name of the field to get.">Nom du champ à obtenir.</param>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; as in &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Il doit s’agir d’un indicateur de bit issu de <see cref="T:System.Reflection.BindingFlags" />, comme dans <see langword="InvokeMethod" />, <see langword="NonPublic" /> et ainsi de suite.</param>
      <returns vsli:raw="Returns the &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt; object representing the field declared or inherited by this type with the specified name and public or non-public modifier. If there are no matches then &lt;see langword=&quot;null&quot; /&gt; is returned.">Retourne l’objet <see cref="T:System.Reflection.FieldInfo" /> représentant le champ déclaré ou hérité par ce type avec le nom spécifié et le modificateur public ou non public. En l’absence de modèles de correspondance, <see langword="null" /> est retourné.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">Cette méthode n’est pas implémentée pour les types incomplets.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetField(System.Type,System.Reflection.FieldInfo)">
      <summary vsli:raw="Returns the field of the specified constructed generic type that corresponds to the specified field of the generic type definition.">Retourne le champ du type générique construit spécifié qui correspond au champ spécifié de la définition de type générique.</summary>
      <param name="type" vsli:raw="The constructed generic type whose field is returned.">Type générique construit dont la méthode est retournée.</param>
      <param name="field" vsli:raw="A field on the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;, which specifies which field of &lt;paramref name=&quot;type&quot; /&gt; to return.">Champ sur la définition de type générique de <paramref name="type" />, qui spécifie le champ de <paramref name="type" /> à retourner.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt; object that represents the field of &lt;paramref name=&quot;type&quot; /&gt; corresponding to &lt;paramref name=&quot;field&quot; /&gt;, which specifies a field belonging to the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;.">Objet <see cref="T:System.Reflection.FieldInfo" /> qui représente le champ de <paramref name="type" /> correspondant à <paramref name="field" />, qui spécifie un champ appartenant à la définition de type générique de <paramref name="type" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; does not represent a generic type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;type&quot; /&gt; is not of type &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The declaring type of &lt;paramref name=&quot;field&quot; /&gt; is not a generic type definition.  &#xA;  &#xA; -or-  &#xA;  &#xA; The declaring type of &lt;paramref name=&quot;field&quot; /&gt; is not the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;.">
        <paramref name="type" /> ne représente pas un type générique.  

ou - 
<paramref name="type" /> n'est pas de type <see cref="T:System.Reflection.Emit.TypeBuilder" />.  

ou 
Le type déclarant de <paramref name="field" /> n’est pas une définition de type générique.  

ou - 
Le type déclarant de <paramref name="field" /> n’est pas la définition de type générique de <paramref name="type" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the public and non-public fields that are declared by this type.">Retourne les champs publics et non publics déclarés par ce type.</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Il doit s’agir d’un bit indicateur issu de <see cref="T:System.Reflection.BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="NonPublic" />, etc.</param>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt; objects representing the public and non-public fields declared or inherited by this type. An empty array is returned if there are no fields, as specified.">Retourne un tableau d’objets <see cref="T:System.Reflection.FieldInfo" /> représentant les champs publics et non publics déclarés ou hérités par ce type. Un tableau vide est retourné s’il n’existe aucun champ, comme indiqué.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">Cette méthode n’est pas implémentée pour les types incomplets.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetGenericArguments">
      <summary vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the type arguments of a generic type or the type parameters of a generic type definition.">Retourne un tableau d’objets <see cref="T:System.Type" /> qui représentent les arguments de type d’un type générique ou les paramètres de type d’une définition de type générique.</summary>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects. The elements of the array represent the type arguments of a generic type or the type parameters of a generic type definition.">Tableau d'objets <see cref="T:System.Type" />. Les éléments du tableau représentent les arguments de type d’un type générique ou les paramètres de type d’une définition de type générique.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents a generic type definition from which the current type can be obtained.">Retourne un objet <see cref="T:System.Type" /> qui représente une définition de type générique à partir de laquelle le type actuel peut être obtenu.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing a generic type definition from which the current type can be obtained.">Objet <see cref="T:System.Type" /> qui représente une définition de type générique à partir de laquelle le type actuel peut être obtenu.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current type is not generic. That is, &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; returns &lt;see langword=&quot;false&quot; /&gt;.">Le type actuel n’est pas générique. Autrement dit, <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> retourne <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetInterface(System.String,System.Boolean)">
      <summary vsli:raw="Returns the interface implemented (directly or indirectly) by this class with the fully qualified name matching the given interface name.">Retourne l’interface implémentée (directement ou indirectement) par cette classe avec le nom qualifié complet correspondant au nom de l’interface donnée.</summary>
      <param name="name" vsli:raw="The name of the interface.">Nom de l’interface.</param>
      <param name="ignoreCase" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, the search is case-insensitive. If &lt;see langword=&quot;false&quot; /&gt;, the search is case-sensitive.">Si <see langword="true" />, la recherche ne respecte pas la casse. Si <see langword="false" />, la recherche respecte la casse.</param>
      <returns vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the implemented interface. Returns null if no interface matching name is found.">Retourne un objet <see cref="T:System.Type" /> représentant l’interface implémentée. Retourne null si aucun nom d’interface correspondant n’est trouvé.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">Cette méthode n’est pas implémentée pour les types incomplets.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetInterfaceMap(System.Type)">
      <summary vsli:raw="Returns an interface mapping for the requested interface.">Retourne un mappage d’interface pour l’interface demandée.</summary>
      <param name="interfaceType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the interface for which the mapping is to be retrieved.">
        <see cref="T:System.Type" /> de l’interface pour laquelle le mappage doit être récupéré.</param>
      <returns vsli:raw="Returns the requested interface mapping.">Retourne le mappage d’interface demandé.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">Cette méthode n’est pas implémentée pour les types incomplets.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetInterfaces">
      <summary vsli:raw="Returns an array of all the interfaces implemented on this type and its base types.">Retourne un tableau de toutes les interfaces implémentées sur ce type et ses types de base.</summary>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the implemented interfaces. If none are defined, an empty array is returned.">Retourne un tableau d’objets <see cref="T:System.Type" /> représentant les interfaces implémentées. Si aucune interface n’est définie, un tableau vide est retourné.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns all the public and non-public members declared or inherited by this type, as specified.">Retourne tous les membres publics et non publics déclarés ou hérités par ce type, comme indiqué.</summary>
      <param name="name" vsli:raw="The name of the member.">Nom du membre.</param>
      <param name="type" vsli:raw="The type of the member to return.">Type du membre à retourner.</param>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt;, as in &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Il doit s’agir d’un bit indicateur issu de <see cref="T:System.Reflection.BindingFlags" />, comme dans <see langword="InvokeMethod" />, <see langword="NonPublic" />, etc.</param>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; objects representing the public and non-public members defined on this type if &lt;paramref name=&quot;nonPublic&quot; /&gt; is used; otherwise, only the public members are returned.">Retourne un tableau d’objets <see cref="T:System.Reflection.MemberInfo" /> représentant les membres publics et non publics définis sur ce type si <paramref name="nonPublic" /> est utilisé ; sinon, seuls les membres publics sont retournés.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">Cette méthode n’est pas implémentée pour les types incomplets.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMembers(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the members for the public and non-public members declared or inherited by this type.">Retourne les membres publics et non publics déclarés ou hérités par ce type.</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt;, such as &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Il doit s’agir d’un bit indicateur issu de <see cref="T:System.Reflection.BindingFlags" />, comme <see langword="InvokeMethod" />, <see langword="NonPublic" /> et ainsi de suite.</param>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; objects representing the public and non-public members declared or inherited by this type. An empty array is returned if there are no matching members.">Retourne un tableau d’objets <see cref="T:System.Reflection.MemberInfo" /> représentant les membres publics et non publics déclarés ou hérités par ce type. Un tableau vide est retourné s’il n’existe aucun membre correspondant.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">Cette méthode n’est pas implémentée pour les types incomplets.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMethod(System.Type,System.Reflection.MethodInfo)">
      <summary vsli:raw="Returns the method of the specified constructed generic type that corresponds to the specified method of the generic type definition.">Retourne la méthode du type générique construit spécifié qui correspond à la méthode spécifiée de la définition de type générique.</summary>
      <param name="type" vsli:raw="The constructed generic type whose method is returned.">Type générique construit dont la méthode est retournée.</param>
      <param name="method" vsli:raw="A method on the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;, which specifies which method of &lt;paramref name=&quot;type&quot; /&gt; to return.">Méthode sur la définition de type générique de <paramref name="type" />, qui spécifie la méthode de <paramref name="type" /> à retourner.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; object that represents the method of &lt;paramref name=&quot;type&quot; /&gt; corresponding to &lt;paramref name=&quot;method&quot; /&gt;, which specifies a method belonging to the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;.">Objet <see cref="T:System.Reflection.MethodInfo" /> qui représente la méthode de <paramref name="type" /> correspondant à <paramref name="method" />, qui spécifie une méthode appartenant à la définition de type générique de <paramref name="type" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is a generic method that is not a generic method definition.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;type&quot; /&gt; does not represent a generic type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;type&quot; /&gt; is not of type &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The declaring type of &lt;paramref name=&quot;method&quot; /&gt; is not a generic type definition.  &#xA;  &#xA; -or-  &#xA;  &#xA; The declaring type of &lt;paramref name=&quot;method&quot; /&gt; is not the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;.">
        <paramref name="method" /> est une méthode générique qui n’est pas une définition de méthode générique.  

ou - 
<paramref name="type" /> ne représente pas un type générique.  

ou 
 <paramref name="type" /> n'est pas de type <see cref="T:System.Reflection.Emit.TypeBuilder" />.  
ou 
Le type déclarant de <paramref name="method" /> n’est pas une définition de type générique.  

ou - 
Le type déclarant de <paramref name="method" /> n’est pas la définition de type générique de <paramref name="type" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns all the public and non-public methods declared or inherited by this type, as specified.">Retourne toutes les méthodes publiques et non publiques déclarées ou héritées par ce type, comme spécifié.</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; as in &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Il doit s’agir d’un indicateur de bit issu de <see cref="T:System.Reflection.BindingFlags" />, comme dans <see langword="InvokeMethod" />, <see langword="NonPublic" /> et ainsi de suite.</param>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; objects representing the public and non-public methods defined on this type if &lt;paramref name=&quot;nonPublic&quot; /&gt; is used; otherwise, only the public methods are returned.">Retourne un tableau d’objets <see cref="T:System.Reflection.MethodInfo" /> représentant les méthodes publiques et non publiques définies sur ce type si <paramref name="nonPublic" /> est utilisé ; sinon, seules les méthodes publiques sont retournées.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">Cette méthode n’est pas implémentée pour les types incomplets.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the public and non-public nested types that are declared by this type.">Retourne les types imbriqués publics et non publics déclarés par ce type.</summary>
      <param name="name" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the nested type to get.">
        <see cref="T:System.String" /> contenant le nom du type imbriqué à obtenir.</param>
      <param name="bindingAttr" vsli:raw="A bitmask comprised of one or more &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; that specify how the search is conducted.  &#xA;  &#xA; -or-  &#xA;  &#xA; Zero, to conduct a case-sensitive search for public methods.">Masque de bits constitué d'un ou de plusieurs <see cref="T:System.Reflection.BindingFlags" /> spécifiant le mode d'exécution de la recherche.  
ou 
Zéro, pour rechercher les méthodes publiques en respectant la casse.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the nested type that matches the specified requirements, if found; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">Objet <see cref="T:System.Type" /> qui représente le type imbriqué correspondant aux critères spécifiés, s’il est trouvé ; sinon, <see langword="null" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">Cette méthode n’est pas implémentée pour les types incomplets.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the public and non-public nested types that are declared or inherited by this type.">Retourne les types imbriqués publics et non publics déclarés ou hérités par ce type.</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt;, as in &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Il doit s’agir d’un bit indicateur issu de <see cref="T:System.Reflection.BindingFlags" />, comme dans <see langword="InvokeMethod" />, <see langword="NonPublic" />, etc.</param>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing all the types nested within the current &lt;see cref=&quot;T:System.Type&quot; /&gt; that match the specified binding constraints.  &#xA;  &#xA; An empty array of type &lt;see cref=&quot;T:System.Type&quot; /&gt;, if no types are nested within the current &lt;see cref=&quot;T:System.Type&quot; /&gt;, or if none of the nested types match the binding constraints.">Tableau d’objets <see cref="T:System.Type" /> représentant tous les types imbriqués dans le <see cref="T:System.Type" /> actuel qui correspondent aux contraintes de liaison spécifiées.  
Tableau vide du type <see cref="T:System.Type" /> si aucun type n’est imbriqué dans le <see cref="T:System.Type" /> actuel ou si aucun des types imbriqués ne correspond aux contraintes de liaison.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">Cette méthode n’est pas implémentée pour les types incomplets.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetProperties(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns all the public and non-public properties declared or inherited by this type, as specified.">Retourne toutes les propriétés publiques et non publiques déclarées ou héritées par ce type, comme spécifié.</summary>
      <param name="bindingAttr" vsli:raw="This invocation attribute. This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Attribut de cet appel. Il doit s’agir d’un bit indicateur issu de <see cref="T:System.Reflection.BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="NonPublic" />, etc.</param>
      <returns vsli:raw="Returns an array of &lt;see langword=&quot;PropertyInfo&quot; /&gt; objects representing the public and non-public properties defined on this type if &lt;paramref name=&quot;nonPublic&quot; /&gt; is used; otherwise, only the public properties are returned.">Retourne un tableau d’objets <see langword="PropertyInfo" /> représentant les propriétés publiques et non publiques définies sur ce type si <paramref name="nonPublic" /> est utilisé ; sinon, seules les propriétés publiques sont retournées.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">Cette méthode n’est pas implémentée pour les types incomplets.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.GUID">
      <summary vsli:raw="Retrieves the GUID of this type.">Récupère le GUID de ce type.</summary>
      <returns vsli:raw="Read-only. Retrieves the GUID of this type.">Lecture seule. Récupère le GUID de ce type.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported for incomplete types.">Cette méthode n’est pas prise en charge pour l’instant pour les types incomplets.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary vsli:raw="Invokes the specified member. The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the constraints of the specified binder and invocation attributes.">Appelle le membre spécifié. La méthode à appeler doit être accessible et fournir la correspondance la plus spécifique avec la liste d’arguments spécifiée, sous les contraintes des attributs de binder et d’appel spécifiés.</summary>
      <param name="name" vsli:raw="The name of the member to invoke. This can be a constructor, method, property, or field. A suitable invocation attribute must be specified. Note that it is possible to invoke the default member of a class by passing an empty string as the name of the member.">Nom du membre à appeler. Il peut s’agir d’un constructeur, d’une méthode, d’une propriété ou d’un champ. Un attribut d’appel approprié doit être spécifié. Notez qu’il est possible d’appeler le membre par défaut d’une classe en passant une chaîne vide comme nom du membre.</param>
      <param name="invokeAttr" vsli:raw="The invocation attribute. This must be a bit flag from &lt;see langword=&quot;BindingFlags&quot; /&gt;.">Attribut d’appel. Il doit s’agir d’un indicateur de bit issu de <see langword="BindingFlags" />.</param>
      <param name="binder" vsli:raw="An object that enables the binding, coercion of argument types, invocation of members, and retrieval of &lt;see langword=&quot;MemberInfo&quot; /&gt; objects using reflection. If binder is &lt;see langword=&quot;null&quot; /&gt;, the default binder is used. See &lt;see cref=&quot;T:System.Reflection.Binder&quot; /&gt;.">Objet qui active la liaison, la contrainte de types d'arguments, l'appel des membres et la récupération d'objets <see langword="MemberInfo" /> par le biais de la réflexion. Si binder a la valeur <see langword="null" />, le binder par défaut est utilisé. Consultez <see cref="T:System.Reflection.Binder" />.</param>
      <param name="target" vsli:raw="The object on which to invoke the specified member. If the member is static, this parameter is ignored.">Objet sur lequel appeler le membre spécifié. Si le membre est statique, ce paramètre est ignoré.</param>
      <param name="args" vsli:raw="An argument list. This is an array of Objects that contains the number, order, and type of the parameters of the member to be invoked. If there are no parameters this should be null.">Liste d’arguments. Il s’agit d’un tableau d’objets contenant le nombre, l’ordre et le type des paramètres du membre à appeler. En l’absence de paramètres, il doit avoir la valeur null.</param>
      <param name="modifiers" vsli:raw="An array of the same length as &lt;paramref name=&quot;args&quot; /&gt; with elements that represent the attributes associated with the arguments of the member to be invoked. A parameter has attributes associated with it in the metadata. They are used by various interoperability services. See the metadata specs for more details.">Tableau de même longueur que <paramref name="args" /> avec des éléments qui représentent les attributs associés aux arguments du membre à appeler. Un paramètre est associé à des attributs dans les métadonnées. Elles sont utilisées par divers services d’interopérabilité. Pour plus d’informations, consultez les spécifications des métadonnées.</param>
      <param name="culture" vsli:raw="An instance of &lt;see langword=&quot;CultureInfo&quot; /&gt; used to govern the coercion of types. If this is null, the &lt;see langword=&quot;CultureInfo&quot; /&gt; for the current thread is used. (Note that this is necessary to, for example, convert a String that represents 1000 to a Double value, since 1000 is represented differently by different cultures.)">Instance de <see langword="CultureInfo" /> utilisée pour régir la contrainte des types. Si la valeur est null, le <see langword="CultureInfo" /> du thread actuel est utilisé. (Notez que cela est nécessaire pour, par exemple, convertir une chaîne représentant 1000 en valeur double, car 1000 est représenté de différentes manières selon la culture.)</param>
      <param name="namedParameters" vsli:raw="Each parameter in the &lt;paramref name=&quot;namedParameters&quot; /&gt; array gets the value in the corresponding element in the &lt;paramref name=&quot;args&quot; /&gt; array. If the length of &lt;paramref name=&quot;args&quot; /&gt; is greater than the length of &lt;paramref name=&quot;namedParameters&quot; /&gt;, the remaining argument values are passed in order.">Chaque paramètre dans le tableau <paramref name="namedParameters" /> obtient la valeur de l’élément correspondant dans le tableau <paramref name="args" />. Si la longueur de <paramref name="args" /> est supérieure à la longueur de <paramref name="namedParameters" />, les valeurs d’argument restantes sont passées dans l’ordre.</param>
      <returns vsli:raw="Returns the return value of the invoked member.">Retourne la valeur de retour du membre appelé.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported for incomplete types.">Cette méthode n’est pas prise en charge pour l’instant pour les types incomplets.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsAssignableFrom(System.Type)">
      <summary vsli:raw="Gets a value that indicates whether a specified &lt;see cref=&quot;T:System.Type&quot; /&gt; can be assigned to this object.">Obtient une valeur qui indique si un objet <see cref="T:System.Type" /> spécifié peut être affecté à cet objet.</summary>
      <param name="c" vsli:raw="The object to test.">Objet à tester.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;c&quot; /&gt; parameter and the current type represent the same type, or if the current type is in the inheritance hierarchy of &lt;paramref name=&quot;c&quot; /&gt;, or if the current type is an interface that &lt;paramref name=&quot;c&quot; /&gt; supports. &lt;see langword=&quot;false&quot; /&gt; if none of these conditions are valid, or if &lt;paramref name=&quot;c&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <see langword="true" /> si le paramètre <paramref name="c" /> et le type actuel représentent le même type, ou si le type actuel est dans la hiérarchie d’héritage de <paramref name="c" />, ou si le type actuel est une interface prise en charge par <paramref name="c" />. <see langword="false" /> si aucune de ces conditions n’est valide, ou si <paramref name="c" /> est <see langword="null" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsByRefLike" />
    <member name="P:System.Reflection.Emit.TypeBuilder.IsConstructedGenericType">
      <summary vsli:raw="Gets a value that indicates whether this object represents a constructed generic type.">Obtient une valeur qui indique si cet objet représente un type générique construit.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object represents a constructed generic type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si cet objet représente un type générique construit ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsCreated">
      <summary vsli:raw="Returns a value that indicates whether the current dynamic type has been created.">Retourne une valeur qui indique si le type dynamique actuel a été créé.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; method has been called; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la méthode <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> a été appelée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Determines whether a custom attribute is applied to the current type.">Détermine si un attribut personnalisé est appliqué au type actuel.</summary>
      <param name="attributeType" vsli:raw="The type of attribute to search for. Only attributes that are assignable to this type are returned.">Type d’attribut à rechercher. Seuls les attributs qui peuvent être assignés à ce type sont retournés.</param>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the attributes.">Spécifie s’il faut rechercher les attributs dans la chaîne d’héritage de ce membre.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more instances of &lt;paramref name=&quot;attributeType&quot; /&gt;, or an attribute derived from &lt;paramref name=&quot;attributeType&quot; /&gt;, is defined on this type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si une ou plusieurs instances de <paramref name="attributeType" />, ou un attribut dérivé de <paramref name="attributeType" />, sont définis sur ce type ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported for incomplete types. Retrieve the type using &lt;see cref=&quot;M:System.Type.GetType&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Type&quot; /&gt;.">Cette méthode n’est pas prise en charge pour l’instant pour les types incomplets. Récupérez le type à l’aide de <see cref="M:System.Type.GetType" /> et appelez <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> sur le <see cref="T:System.Type" /> retourné.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is not defined.">
        <paramref name="attributeType" /> n’est pas défini.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="attributeType" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsGenericParameter">
      <summary vsli:raw="Gets a value indicating whether the current type is a generic type parameter.">Obtient une valeur indiquant si le type actuel est un paramètre de type générique.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; object represents a generic type parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’objet <see cref="T:System.Reflection.Emit.TypeBuilder" /> actuel représente un paramètre de type générique ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsGenericType">
      <summary vsli:raw="Gets a value indicating whether the current type is a generic type.">Obtient une valeur indiquant si le type actuel est un type générique.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type represented by the current &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; object is generic; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le type représenté par l’objet <see cref="T:System.Reflection.Emit.TypeBuilder" /> actuel est générique ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition">
      <summary vsli:raw="Gets a value indicating whether the current &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; represents a generic type definition from which other generic types can be constructed.">Obtient une valeur qui indique si le <see cref="T:System.Reflection.Emit.TypeBuilder" /> actuel représente une définition de type générique, à partir de laquelle d’autres types génériques peuvent être construits.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; object represents a generic type definition; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si cet objet <see cref="T:System.Reflection.Emit.TypeBuilder" /> représente une définition de type générique ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsSecurityCritical">
      <summary vsli:raw="Gets a value that indicates whether the current type is security-critical or security-safe-critical, and therefore can perform critical operations.">Obtient une valeur qui indique si le type actuel est critique de sécurité (security-critical) ou critique sécurisé (security-safe-critical), et peut donc effectuer des opérations critiques.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current type is security-critical or security-safe-critical; &lt;see langword=&quot;false&quot; /&gt; if it is transparent.">
        <see langword="true" /> si le type actuel est critique de sécurité ou critique sécurisé ; <see langword="false" /> s’il est transparent.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The current dynamic type has not been created by calling the &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; method.">Le type dynamique actuel n’a pas été créé en appelant la méthode <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical">
      <summary vsli:raw="Gets a value that indicates whether the current type is security-safe-critical; that is, whether it can perform critical operations and can be accessed by transparent code.">Obtient une valeur qui indique si le type actuel est critique sécurisé, autrement dit s’il peut effectuer des opérations critiques et s’il est accessible par du code transparent.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current type is security-safe-critical; &lt;see langword=&quot;false&quot; /&gt; if it is security-critical or transparent.">
        <see langword="true" /> si le type actuel est critique sécurisé ; <see langword="false" /> s’il est critique de sécurité ou transparent.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The current dynamic type has not been created by calling the &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; method.">Le type dynamique actuel n’a pas été créé en appelant la méthode <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent">
      <summary vsli:raw="Gets a value that indicates whether the current type is transparent, and therefore cannot perform critical operations.">Obtient une valeur qui indique si le type actuel est transparent et s’il ne peut donc pas effectuer d’opérations critiques.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is security-transparent; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le type est transparent de sécurité ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The current dynamic type has not been created by calling the &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; method.">Le type dynamique actuel n’a pas été créé en appelant la méthode <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsSubclassOf(System.Type)">
      <summary vsli:raw="Determines whether this type is derived from a specified type.">Détermine si ce type est dérivé d’un type spécifié.</summary>
      <param name="c" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that is to be checked.">
        <see cref="T:System.Type" /> à vérifier.</param>
      <returns vsli:raw="Read-only. Returns &lt;see langword=&quot;true&quot; /&gt; if this type is the same as the type &lt;paramref name=&quot;c&quot; /&gt;, or is a subtype of type &lt;paramref name=&quot;c&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Lecture seule. Retourne <see langword="true" /> si ce type est identique au type <paramref name="c" /> ou est un sous-type du type <paramref name="c" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsSZArray" />
    <member name="P:System.Reflection.Emit.TypeBuilder.IsTypeDefinition" />
    <member name="P:System.Reflection.Emit.TypeBuilder.IsVariableBoundArray" />
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeArrayType">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents a one-dimensional array of the current type, with a lower bound of zero.">Retourne un objet <see cref="T:System.Type" /> qui représente un tableau unidimensionnel du type actuel, avec une limite inférieure de zéro.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing a one-dimensional array type whose element type is the current type, with a lower bound of zero.">Objet <see cref="T:System.Type" /> représentant un type de tableau unidimensionnel dont le type d’élément est le type actuel, avec une limite inférieure de zéro.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeArrayType(System.Int32)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents an array of the current type, with the specified number of dimensions.">Retourne un objet <see cref="T:System.Type" /> qui représente un tableau du type actuel, avec le nombre spécifié de dimensions.</summary>
      <param name="rank" vsli:raw="The number of dimensions for the array.">Nombre de dimensions pour le tableau.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents a one-dimensional array of the current type.">Objet <see cref="T:System.Type" /> qui représente un tableau unidimensionnel du type actuel.</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;rank&quot; /&gt; is not a valid array dimension.">
        <paramref name="rank" /> n’est pas une dimension de tableau valide.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeByRefType">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the current type when passed as a &lt;see langword=&quot;ref&quot; /&gt; parameter (&lt;see langword=&quot;ByRef&quot; /&gt; in Visual Basic).">Retourne un objet <see cref="T:System.Type" /> qui représente le type actuel quand il est passé en tant que paramètre <see langword="ref" /> (<see langword="ByRef" /> en Visual Basic).</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the current type when passed as a &lt;see langword=&quot;ref&quot; /&gt; parameter (&lt;see langword=&quot;ByRef&quot; /&gt; in Visual Basic).">Objet <see cref="T:System.Type" /> qui représente le type actuel quand il est passé en tant que paramètre <see langword="ref" /> (<see langword="ByRef" /> en Visual Basic).</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeGenericType(System.Type[])">
      <summary vsli:raw="Substitutes the elements of an array of types for the type parameters of the current generic type definition, and returns the resulting constructed type.">Substitue les éléments d’un tableau de types aux paramètres de type de la définition du type générique actuel et retourne le type construit résultant.</summary>
      <param name="typeArguments" vsli:raw="An array of types to be substituted for the type parameters of the current generic type definition.">Tableau de types à substituer aux paramètres de type de la définition du type générique actuel.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; representing the constructed type formed by substituting the elements of &lt;paramref name=&quot;typeArguments&quot; /&gt; for the type parameters of the current generic type.">
        <see cref="T:System.Type" /> représentant le type construit formé en substituant les éléments de <paramref name="typeArguments" /> pour les paramètres de type du type générique actuel.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current type does not represent the definition of a generic type. That is, &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; returns &lt;see langword=&quot;false&quot; /&gt;.">Le type actuel ne représente pas la définition d’un type générique. Autrement dit, <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> retourne <see langword="false" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;typeArguments&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; Any element of &lt;paramref name=&quot;typeArguments&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="typeArguments" /> a la valeur <see langword="null" />.  

ou - 
Tout élément de <paramref name="typeArguments" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;P:System.Type.Module&quot; /&gt; property of any element of &lt;paramref name=&quot;typeArguments&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Reflection.Module.Assembly&quot; /&gt; property of the module of any element of &lt;paramref name=&quot;typeArguments&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">La propriété <see cref="P:System.Type.Module" /> de n’importe quel élément de <paramref name="typeArguments" /> est <see langword="null" />.  

ou - 
La propriété <see cref="P:System.Reflection.Module.Assembly" /> du module de n’importe quel élément de <paramref name="typeArguments" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakePointerType">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type of an unmanaged pointer to the current type.">Retourne un objet <see cref="T:System.Type" /> qui représente le type d’un pointeur non managé vers le type actuel.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type of an unmanaged pointer to the current type.">Objet <see cref="T:System.Type" /> qui représente le type d’un pointeur non managé vers le type actuel.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Module">
      <summary vsli:raw="Retrieves the dynamic module that contains this type definition.">Récupère le module dynamique qui contient la définition de ce type.</summary>
      <returns vsli:raw="Read-only. Retrieves the dynamic module that contains this type definition.">Lecture seule. Récupère le module dynamique qui contient la définition de ce type.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Name">
      <summary vsli:raw="Retrieves the name of this type.">Récupère le nom de ce type.</summary>
      <returns vsli:raw="Read-only. Retrieves the &lt;see cref=&quot;T:System.String&quot; /&gt; name of this type.">Lecture seule. Récupère le nom <see cref="T:System.String" /> de ce type.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Namespace">
      <summary vsli:raw="Retrieves the namespace where this &lt;see langword=&quot;TypeBuilder&quot; /&gt; is defined.">Récupère l’espace de noms dans lequel ce <see langword="TypeBuilder" /> est défini.</summary>
      <returns vsli:raw="Read-only. Retrieves the namespace where this &lt;see langword=&quot;TypeBuilder&quot; /&gt; is defined.">Lecture seule. Récupère l’espace de noms dans lequel ce <see langword="TypeBuilder" /> est défini.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.PackingSize">
      <summary vsli:raw="Retrieves the packing size of this type.">Récupère la taille de compactage de ce type.</summary>
      <returns vsli:raw="Read-only. Retrieves the packing size of this type.">Lecture seule. Récupère la taille de compactage de ce type.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.ReflectedType">
      <summary vsli:raw="Returns the type that was used to obtain this type.">Retourne le type qui a été utilisé pour obtenir ce type.</summary>
      <returns vsli:raw="Read-only. The type that was used to obtain this type.">Lecture seule. Type qui a été utilisé pour obtenir ce type.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Sets a custom attribute using a specified custom attribute blob.">Définit un attribut personnalisé à l’aide d’un objet blob d’attribut personnalisé spécifié.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">Le constructeur de l’attribut personnalisé.</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">Objet blob d’octets représentant les attributs.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> ou <paramref name="binaryAttribute" /> est <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Pour le type dynamique actuel, la propriété <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> a la valeur <see langword="true" />, mais la propriété <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> a la valeur <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Set a custom attribute using a custom attribute builder.">Définit un attribut personnalisé à l’aide d’un générateur d’attributs personnalisés.</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to define the custom attribute.">Instance d’une classe d’assistance pour définir l’attribut personnalisé.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;customBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="customBuilder" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Pour le type dynamique actuel, la propriété <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> a la valeur <see langword="true" />, mais la propriété <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> a la valeur <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.SetParent(System.Type)">
      <summary vsli:raw="Sets the base type of the type currently under construction.">Définit le type de base du type actuellement en cours d’élaboration.</summary>
      <param name="parent" vsli:raw="The new base type.">Nouveau type de base.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;parent&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the current instance represents an interface whose attributes do not include &lt;see cref=&quot;F:System.Reflection.TypeAttributes.Abstract&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Le type a déjà été créé en utilisant <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.  

ou - 
<paramref name="parent" /> a la valeur <see langword="null" />, et l’instance actuelle représente une interface dont les attributs n’incluent pas <see cref="F:System.Reflection.TypeAttributes.Abstract" />.  

ou 
Pour le type dynamique actuel, la propriété <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> a la valeur <see langword="true" />, mais la propriété <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> a la valeur <see langword="false" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;parent&quot; /&gt; is an interface. This exception condition is new in the .NET Framework version 2.0.">
        <paramref name="parent" /> est une interface. Cette condition d’exception est une nouveauté de .NET Framework version 2.0.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Size">
      <summary vsli:raw="Retrieves the total size of a type.">Récupère la taille totale d’un type.</summary>
      <returns vsli:raw="Read-only. Retrieves this type's total size.">Lecture seule. Récupère la taille totale de ce type.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.ToString">
      <summary vsli:raw="Returns the name of the type excluding the namespace.">Retourne le nom du type sans l’espace de noms.</summary>
      <returns vsli:raw="Read-only. The name of the type excluding the namespace.">Lecture seule. Nom du type sans l’espace de noms.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.TypeHandle">
      <summary vsli:raw="Not supported in dynamic modules.">Non pris en charge dans les modules dynamiques.</summary>
      <returns vsli:raw="Read-only.">Lecture seule.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Not supported in dynamic modules.">Non pris en charge dans les modules dynamiques.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.UnderlyingSystemType">
      <summary vsli:raw="Returns the underlying system type for this &lt;see langword=&quot;TypeBuilder&quot; /&gt;.">Retourne le type de système sous-jacent pour ce <see langword="TypeBuilder" />.</summary>
      <returns vsli:raw="Read-only. Returns the underlying system type.">Lecture seule. Retourne le type de système sous-jacent.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This type is an enumeration, but there is no underlying system type.">Ce type est une énumération, mais il n’y a pas de type de système sous-jacent.</exception>
    </member>
    <member name="F:System.Reflection.Emit.TypeBuilder.UnspecifiedTypeSize">
      <summary vsli:raw="Represents that total size for the type is not specified.">Signifie que la taille totale du type n’est pas spécifiée.</summary>
    </member>
  </members>
</doc>
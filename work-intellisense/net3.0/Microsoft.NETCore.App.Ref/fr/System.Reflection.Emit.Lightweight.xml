<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Reflection.Emit.Lightweight</name>
  </assembly>
  <members>
    <member name="T:System.Reflection.Emit.DynamicILInfo">
      <summary vsli:raw="Provides support for alternative ways to generate the Microsoft intermediate language (MSIL) and metadata for a dynamic method, including methods for creating tokens and for inserting the code, exception handling, and local variable signature blobs.">Fournit la prise en charge d'autres façons de générer le code MSIL (Microsoft Intermediate Language) et les métadonnées d'une méthode dynamique, y compris les méthodes pour créer des jetons et pour insérer le code, la gestion des exceptions et les blobs de signature de variables locales.</summary>
    </member>
    <member name="P:System.Reflection.Emit.DynamicILInfo.DynamicMethod">
      <summary vsli:raw="Gets the dynamic method whose body is generated by the current instance.">Obtient la méthode dynamique dont le corps est généré par l'instance actuelle.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt; object representing the dynamic method for which the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt; object is generating code.">Objet <see cref="T:System.Reflection.Emit.DynamicMethod" /> qui représente la méthode dynamique pour laquelle l'objet <see cref="T:System.Reflection.Emit.DynamicILInfo" /> actuel génère le code.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])">
      <summary vsli:raw="Gets a token, valid in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt;, representing the signature for the associated dynamic method.">Obtient un jeton, valide dans la portée du <see cref="T:System.Reflection.Emit.DynamicILInfo" /> actuel, représentant la signature de la méthode dynamique associée.</summary>
      <param name="signature" vsli:raw="An array that contains the signature.">Tableau qui contient la signature.</param>
      <returns vsli:raw="A token that can be embedded in the metadata and the MSIL stream for the associated dynamic method.">Jeton qui peut être incorporé dans les métadonnées et le flux MSIL de la méthode dynamique associée.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)">
      <summary vsli:raw="Gets a token, valid in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt;, representing a dynamic method to be called from the associated method.">Obtient un jeton, valide dans la portée du <see cref="T:System.Reflection.Emit.DynamicILInfo" /> actuel, représentant une méthode dynamique à appeler par la méthode associée.</summary>
      <param name="method" vsli:raw="The dynamic method to call.">Méthode dynamique à appeler.</param>
      <returns vsli:raw="A token that can be embedded in the MSIL stream for the associated dynamic method, as the target of an MSIL instruction.">Jeton qui peut être incorporé dans le flux MSIL de la méthode dynamique associée, comme cible d'une instruction MSIL.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)">
      <summary vsli:raw="Gets a token, valid in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt;, representing a field to be accessed from the associated dynamic method.">Obtient un jeton, valide dans la portée du <see cref="T:System.Reflection.Emit.DynamicILInfo" /> actuel, représentant un champ accessible à partir de la méthode dynamique associée.</summary>
      <param name="field" vsli:raw="The field to be accessed.">Champ auquel accéder.</param>
      <returns vsli:raw="A token that can be used as the operand of an MSIL instruction that accesses fields, in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt; object.">Jeton qui peut être utilisé comme opérande d'une instruction MSIL qui accède à des champs, dans la portée de l'objet <see cref="T:System.Reflection.Emit.DynamicILInfo" /> actuel.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
      <summary vsli:raw="Gets a token, valid in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt;, representing a field to be accessed from the associated dynamic method; the field is on the specified generic type.">Obtient un jeton, valide dans la portée du <see cref="T:System.Reflection.Emit.DynamicILInfo" /> actuel, représentant un champ accessible à partir de la méthode dynamique associée ; le champ est du type générique spécifié.</summary>
      <param name="field" vsli:raw="The field to be accessed.">Champ auquel accéder.</param>
      <param name="contextType" vsli:raw="The generic type the field belongs to.">Type générique auquel le champ appartient.</param>
      <returns vsli:raw="A token that can be used as the operand of an MSIL instruction that accesses fields in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt; object.">Jeton qui peut être utilisé comme opérande d'une instruction MSIL qui accède à des champs dans la portée de l'objet <see cref="T:System.Reflection.Emit.DynamicILInfo" /> actif.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)">
      <summary vsli:raw="Gets a token, valid in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt;, representing a method to be accessed from the associated dynamic method.">Obtient un jeton, valide dans la portée du <see cref="T:System.Reflection.Emit.DynamicILInfo" /> actuel, représentant une méthode à laquelle accéder à partir de la méthode dynamique associée.</summary>
      <param name="method" vsli:raw="The method to be accessed.">Méthode à laquelle accéder.</param>
      <returns vsli:raw="A token that can be used as the operand of an MSIL instruction that accesses methods, such as &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Call&quot; /&gt; or &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Ldtoken&quot; /&gt;, in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt; object.">Jeton qui peut être utilisé comme opérande d'une instruction MSIL qui accède à des méthodes, telles que <see cref="F:System.Reflection.Emit.OpCodes.Call" /> ou <see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" />, dans la portée de l'objet <see cref="T:System.Reflection.Emit.DynamicILInfo" /> actuel.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)">
      <summary vsli:raw="Gets a token, valid in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt;, representing a method on a generic type.">Obtient un jeton, valide dans la portée du <see cref="T:System.Reflection.Emit.DynamicILInfo" /> actuel, qui représente une méthode sur un type générique.</summary>
      <param name="method" vsli:raw="The method.">Méthode.</param>
      <param name="contextType" vsli:raw="The generic type the method belongs to.">Type générique auquel la méthode appartient.</param>
      <returns vsli:raw="A token that can be used as the operand of an MSIL instruction that accesses methods, such as &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Call&quot; /&gt; or &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Ldtoken&quot; /&gt;, in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt; object.">Jeton qui peut être utilisé comme opérande d'une instruction MSIL qui accède à des méthodes, telles que <see cref="F:System.Reflection.Emit.OpCodes.Call" /> ou <see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" />, dans la portée de l'objet <see cref="T:System.Reflection.Emit.DynamicILInfo" /> actuel.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)">
      <summary vsli:raw="Gets a token, valid in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt;, representing a type to be used in the associated dynamic method.">Obtient un jeton, valide dans la portée du <see cref="T:System.Reflection.Emit.DynamicILInfo" /> actuel, représentant un type à utiliser dans la méthode dynamique associée.</summary>
      <param name="type" vsli:raw="The type to be used.">Type à utiliser.</param>
      <returns vsli:raw="A token that can be used as the operand of an MSIL instruction that requires a type, in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt; object.">Jeton qui peut être utilisé comme opérande d'une instruction MSIL qui nécessite un type, dans la portée de l'objet <see cref="T:System.Reflection.Emit.DynamicILInfo" /> actuel.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)">
      <summary vsli:raw="Gets a token, valid in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt;, representing a string literal to be used in the associated dynamic method.">Obtient un jeton, valide dans la portée du <see cref="T:System.Reflection.Emit.DynamicILInfo" /> actuel, représentant un littéral de chaîne à utiliser dans la méthode dynamique associée.</summary>
      <param name="literal" vsli:raw="The string to be used.">Chaîne à utiliser.</param>
      <returns vsli:raw="A token that can be used as the operand of an MSIL instruction that requires a string, in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt; object.">Jeton qui peut être utilisé comme opérande d'une instruction MSIL qui nécessite une chaîne, dans la portée de l'objet <see cref="T:System.Reflection.Emit.DynamicILInfo" /> actuel.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)">
      <summary vsli:raw="Sets the code body of the associated dynamic method.">Définit le corps du code de la méthode dynamique associée.</summary>
      <param name="code" vsli:raw="A pointer to a byte array containing the MSIL stream.">Pointeur vers un tableau d'octets qui contient le flux MSIL.</param>
      <param name="codeSize" vsli:raw="The number of bytes in the MSIL stream.">Nombre d'octets dans le flux MSIL.</param>
      <param name="maxStackSize" vsli:raw="The maximum number of items on the operand stack when the method is executing.">Nombre maximal d'éléments sur le tas d'opérandes lorsque la méthode s'exécute.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;code&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and &lt;paramref name=&quot;codeSize&quot; /&gt; is greater than 0.">
        <paramref name="code" /> est <see langword="null" /> et  <paramref name="codeSize" /> est supérieur à 0.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;codeSize&quot; /&gt; is less than 0.">
        <paramref name="codeSize" /> est inférieur à 0.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)">
      <summary vsli:raw="Sets the code body of the associated dynamic method.">Définit le corps du code de la méthode dynamique associée.</summary>
      <param name="code" vsli:raw="An array that contains the MSIL stream.">Tableau qui contient le flux MSIL.</param>
      <param name="maxStackSize" vsli:raw="The maximum number of items on the operand stack when the method is executing.">Nombre maximal d'éléments sur le tas d'opérandes lorsque la méthode s'exécute.</param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)">
      <summary vsli:raw="Sets the exception metadata for the associated dynamic method.">Définit les métadonnées d'exception de la méthode dynamique associée.</summary>
      <param name="exceptions" vsli:raw="A pointer to a byte array containing the exception metadata.">Pointeur vers un tableau d'octets qui contient les métadonnées d'exception.</param>
      <param name="exceptionsSize" vsli:raw="The number of bytes of exception metadata.">Nombre d'octets de métadonnées d'exception.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;exceptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and &lt;paramref name=&quot;exceptionSize&quot; /&gt; is greater than 0.">
        <paramref name="exceptions" /> est <see langword="null" /> et  <paramref name="exceptionSize" /> est supérieur à 0.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;exceptionSize&quot; /&gt; is less than 0.">
        <paramref name="exceptionSize" /> est inférieur à 0.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])">
      <summary vsli:raw="Sets the exception metadata for the associated dynamic method.">Définit les métadonnées d'exception de la méthode dynamique associée.</summary>
      <param name="exceptions" vsli:raw="An array that contains the exception metadata.">Tableau qui contient les métadonnées d'exception.</param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)">
      <summary vsli:raw="Sets the local variable signature that describes the layout of local variables for the associated dynamic method.">Définit la signature des variables locales qui décrit la mise en forme des variables locales de la méthode dynamique associée.</summary>
      <param name="localSignature" vsli:raw="An array that contains the layout of local variables for the associated &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt;.">Tableau qui contient la structure des variables locales du <see cref="T:System.Reflection.Emit.DynamicMethod" /> associé.</param>
      <param name="signatureSize" vsli:raw="The number of bytes in the signature.">Nombre d'octets dans la signature.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;localSignature&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and &lt;paramref name=&quot;signatureSize&quot; /&gt; is greater than 0.">
        <paramref name="localSignature" /> est <see langword="null" /> et  <paramref name="signatureSize" /> est supérieur à 0.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;signatureSize&quot; /&gt; is less than 0.">
        <paramref name="signatureSize" /> est inférieur à 0.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])">
      <summary vsli:raw="Sets the local variable signature that describes the layout of local variables for the associated dynamic method.">Définit la signature des variables locales qui décrit la mise en forme des variables locales de la méthode dynamique associée.</summary>
      <param name="localSignature" vsli:raw="An array that contains the layout of local variables for the associated &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt;.">Tableau qui contient la structure des variables locales du <see cref="T:System.Reflection.Emit.DynamicMethod" /> associé.</param>
    </member>
    <member name="T:System.Reflection.Emit.DynamicMethod">
      <summary vsli:raw="Defines and represents a dynamic method that can be compiled, executed, and discarded. Discarded methods are available for garbage collection.">Définit et représente une méthode dynamique qui peut être compilée, exécutée et ignorée. Les méthodes ignorées sont disponibles pour le garbage collection.</summary>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
      <summary vsli:raw="Creates a dynamic method that is global to a module, specifying the method name, attributes, calling convention, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.">Crée une méthode dynamique qui est globale pour un module, en spécifiant le nom de la méthode, les attributs, les conventions d'appel, le type de retour, les types de paramètres, le module et si les contrôles de visibilité juste-à-temps (JIT) doivent être ignorés pour les types et membres auxquels accède le langage Microsoft Intermediate Language (MSIL) de la méthode dynamique.</summary>
      <param name="name" vsli:raw="The name of the dynamic method. This can be a zero-length string, but it cannot be &lt;see langword=&quot;null&quot; /&gt;.">Nom de la méthode dynamique. Il peut s’agir d’une chaîne de longueur nulle, mais pas de <see langword="null" />.</param>
      <param name="attributes" vsli:raw="A bitwise combination of &lt;see cref=&quot;T:System.Reflection.MethodAttributes&quot; /&gt; values that specifies the attributes of the dynamic method. The only combination allowed is &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Public&quot; /&gt; and &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Static&quot; /&gt;.">Combinaison d'opérations de bits de valeurs <see cref="T:System.Reflection.MethodAttributes" /> qui spécifient les attributs de la méthode dynamique. La seule combinaison autorisée est <see cref="F:System.Reflection.MethodAttributes.Public" /> et <see cref="F:System.Reflection.MethodAttributes.Static" />.</param>
      <param name="callingConvention" vsli:raw="The calling convention for the dynamic method. Must be &lt;see cref=&quot;F:System.Reflection.CallingConventions.Standard&quot; /&gt;.">Convention d'appel de la méthode dynamique. Doit être <see cref="F:System.Reflection.CallingConventions.Standard" />.</param>
      <param name="returnType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that specifies the return type of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no return type.">Objet <see cref="T:System.Type" /> qui spécifie le type de retour de la méthode dynamique, ou <see langword="null" /> si la méthode n’a aucun type de retour.</param>
      <param name="parameterTypes" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects specifying the types of the parameters of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no parameters.">Tableau d’objets <see cref="T:System.Type" /> spécifiant les types des paramètres de la méthode dynamique, ou <see langword="null" /> si la méthode ne possède aucun paramètre.</param>
      <param name="m" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; representing the module with which the dynamic method is to be logically associated.">
        <see cref="T:System.Reflection.Module" /> représentant le module auquel la méthode dynamique doit être associée de manière logique.</param>
      <param name="skipVisibility" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour ignorer les contrôles de visibilité JIT sur les types et membres auxquels accède le code MSIL de la méthode dynamique ; sinon, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;T:System.Void&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;m&quot; /&gt; is a module that provides anonymous hosting for dynamic methods.">Un élément de <paramref name="parameterTypes" /> a la valeur <see langword="null" /> ou <see cref="T:System.Void" />.  

ou - 
<paramref name="m" /> est un module qui fournit l'hébergement anonyme pour les méthodes dynamiques.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;m&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> a la valeur <see langword="null" />.  

ou - 
<paramref name="m" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;attributes&quot; /&gt; is a combination of flags other than &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Public&quot; /&gt; and &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Static&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;callingConvention&quot; /&gt; is not &lt;see cref=&quot;F:System.Reflection.CallingConventions.Standard&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;returnType&quot; /&gt; is a type for which &lt;see cref=&quot;P:System.Type.IsByRef&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt;.">
        <paramref name="attributes" /> est une combinaison d'indicateurs autre que <see cref="F:System.Reflection.MethodAttributes.Public" /> et <see cref="F:System.Reflection.MethodAttributes.Static" />.  

ou - 
<paramref name="callingConvention" /> n’est pas un <see cref="F:System.Reflection.CallingConventions.Standard" />.  

ou 
 <paramref name="returnType" /> est un type pour lequel <see cref="P:System.Type.IsByRef" /> retourne <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
      <summary vsli:raw="Creates a dynamic method, specifying the method name, attributes, calling convention, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.">Crée une méthode dynamique, en spécifiant le nom de la méthode, les attributs, la convention d'appel, le type de retour, les types de paramètres, le type auquel la méthode dynamique est associée de manière logique, et si les contrôles de visibilité juste-à-temps (JIT) doivent être ignorés pour les types et membres auxquels accède le langage MSIL de la méthode dynamique.</summary>
      <param name="name" vsli:raw="The name of the dynamic method. This can be a zero-length string, but it cannot be &lt;see langword=&quot;null&quot; /&gt;.">Nom de la méthode dynamique. Il peut s’agir d’une chaîne de longueur nulle, mais pas de <see langword="null" />.</param>
      <param name="attributes" vsli:raw="A bitwise combination of &lt;see cref=&quot;T:System.Reflection.MethodAttributes&quot; /&gt; values that specifies the attributes of the dynamic method. The only combination allowed is &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Public&quot; /&gt; and &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Static&quot; /&gt;.">Combinaison d'opérations de bits de valeurs <see cref="T:System.Reflection.MethodAttributes" /> qui spécifient les attributs de la méthode dynamique. La seule combinaison autorisée est <see cref="F:System.Reflection.MethodAttributes.Public" /> et <see cref="F:System.Reflection.MethodAttributes.Static" />.</param>
      <param name="callingConvention" vsli:raw="The calling convention for the dynamic method. Must be &lt;see cref=&quot;F:System.Reflection.CallingConventions.Standard&quot; /&gt;.">Convention d'appel de la méthode dynamique. Doit être <see cref="F:System.Reflection.CallingConventions.Standard" />.</param>
      <param name="returnType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that specifies the return type of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no return type.">Objet <see cref="T:System.Type" /> qui spécifie le type de retour de la méthode dynamique, ou <see langword="null" /> si la méthode n’a aucun type de retour.</param>
      <param name="parameterTypes" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects specifying the types of the parameters of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no parameters.">Tableau d’objets <see cref="T:System.Type" /> spécifiant les types des paramètres de la méthode dynamique, ou <see langword="null" /> si la méthode ne possède aucun paramètre.</param>
      <param name="owner" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; with which the dynamic method is logically associated. The dynamic method has access to all members of the type.">
        <see cref="T:System.Type" /> auquel la méthode dynamique est associée de manière logique. La méthode dynamique a accès à tous les membres du type.</param>
      <param name="skipVisibility" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour ignorer les contrôles de visibilité JIT sur les types et membres auxquels accède le code MSIL de la méthode dynamique ; sinon, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;T:System.Void&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;owner&quot; /&gt; is an interface, an array, an open generic type, or a type parameter of a generic type or method.">Un élément de <paramref name="parameterTypes" /> a la valeur <see langword="null" /> ou <see cref="T:System.Void" />.  

ou - 
<paramref name="owner" /> est une interface, un tableau, un type générique ouvert ou un paramètre de type d'un type ou d'une méthode générique.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;owner&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> est <see langword="null" />.  

ou - 
<paramref name="owner" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;attributes&quot; /&gt; is a combination of flags other than &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Public&quot; /&gt; and &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Static&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;callingConvention&quot; /&gt; is not &lt;see cref=&quot;F:System.Reflection.CallingConventions.Standard&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;returnType&quot; /&gt; is a type for which &lt;see cref=&quot;P:System.Type.IsByRef&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt;.">
        <paramref name="attributes" /> est une combinaison d'indicateurs autre que <see cref="F:System.Reflection.MethodAttributes.Public" /> et <see cref="F:System.Reflection.MethodAttributes.Static" />.  

ou - 
<paramref name="callingConvention" /> n’est pas un <see cref="F:System.Reflection.CallingConventions.Standard" />.  

ou - 
<paramref name="returnType" /> est un type pour lequel <see cref="P:System.Type.IsByRef" /> retourne <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
      <summary vsli:raw="Initializes an anonymously hosted dynamic method, specifying the method name, return type, and parameter types.">Initialise une méthode dynamique hébergée de manière anonyme, en spécifiant le nom de la méthode, le type de retour et les types de paramètre.</summary>
      <param name="name" vsli:raw="The name of the dynamic method. This can be a zero-length string, but it cannot be &lt;see langword=&quot;null&quot; /&gt;.">Nom de la méthode dynamique. Il peut s’agir d’une chaîne de longueur nulle, mais pas de <see langword="null" />.</param>
      <param name="returnType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that specifies the return type of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no return type.">Objet <see cref="T:System.Type" /> qui spécifie le type de retour de la méthode dynamique, ou <see langword="null" /> si la méthode n’a aucun type de retour.</param>
      <param name="parameterTypes" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects specifying the types of the parameters of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no parameters.">Tableau d’objets <see cref="T:System.Type" /> spécifiant les types des paramètres de la méthode dynamique, ou <see langword="null" /> si la méthode ne possède aucun paramètre.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;T:System.Void&quot; /&gt;.">Un élément de <paramref name="parameterTypes" /> a la valeur <see langword="null" /> ou <see cref="T:System.Void" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> est <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;returnType&quot; /&gt; is a type for which &lt;see cref=&quot;P:System.Type.IsByRef&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt;.">
        <paramref name="returnType" /> est un type pour lequel <see cref="P:System.Type.IsByRef" /> retourne <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
      <summary vsli:raw="Initializes an anonymously hosted dynamic method, specifying the method name, return type, parameter types, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.">Initialise une méthode dynamique hébergée de façon anonyme, en spécifiant le nom de la méthode, le type de retour, les types de paramètre et si les contrôles de visibilité juste-à-temps (JIT) doivent être ignorés pour les types et membres auxquels accède le langage MSIL (Microsoft Intermediate Language) de la méthode dynamique.</summary>
      <param name="name" vsli:raw="The name of the dynamic method. This can be a zero-length string, but it cannot be &lt;see langword=&quot;null&quot; /&gt;.">Nom de la méthode dynamique. Il peut s’agir d’une chaîne de longueur nulle, mais pas de <see langword="null" />.</param>
      <param name="returnType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that specifies the return type of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no return type.">Objet <see cref="T:System.Type" /> qui spécifie le type de retour de la méthode dynamique, ou <see langword="null" /> si la méthode n’a aucun type de retour.</param>
      <param name="parameterTypes" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects specifying the types of the parameters of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no parameters.">Tableau d’objets <see cref="T:System.Type" /> spécifiant les types des paramètres de la méthode dynamique, ou <see langword="null" /> si la méthode ne possède aucun paramètre.</param>
      <param name="restrictedSkipVisibility" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method, with this restriction: the trust level of the assemblies that contain those types and members must be equal to or less than the trust level of the call stack that emits the dynamic method; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour ignorer les contrôles de visibilité juste-à-temps pour les types et membres auxquels accède le langage MSIL de la méthode dynamique, avec cette restriction : le niveau d’approbation des assemblys qui contiennent ces types et membres doit être inférieur ou égal à celui de la pile des appels qui émet la méthode dynamique ; sinon, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;T:System.Void&quot; /&gt;.">Un élément de <paramref name="parameterTypes" /> a la valeur <see langword="null" /> ou <see cref="T:System.Void" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;returnType&quot; /&gt; is a type for which &lt;see cref=&quot;P:System.Type.IsByRef&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt;.">
        <paramref name="returnType" /> est un type pour lequel <see cref="P:System.Type.IsByRef" /> retourne <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
      <summary vsli:raw="Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, and module.">Crée une méthode dynamique qui est globale pour un module, en spécifiant le nom de la méthode, le type de retour, les types de paramètres et le module.</summary>
      <param name="name" vsli:raw="The name of the dynamic method. This can be a zero-length string, but it cannot be &lt;see langword=&quot;null&quot; /&gt;.">Nom de la méthode dynamique. Il peut s’agir d’une chaîne de longueur nulle, mais pas de <see langword="null" />.</param>
      <param name="returnType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that specifies the return type of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no return type.">Objet <see cref="T:System.Type" /> qui spécifie le type de retour de la méthode dynamique, ou <see langword="null" /> si la méthode n’a aucun type de retour.</param>
      <param name="parameterTypes" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects specifying the types of the parameters of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no parameters.">Tableau d’objets <see cref="T:System.Type" /> spécifiant les types des paramètres de la méthode dynamique, ou <see langword="null" /> si la méthode ne possède aucun paramètre.</param>
      <param name="m" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; representing the module with which the dynamic method is to be logically associated.">
        <see cref="T:System.Reflection.Module" /> représentant le module auquel la méthode dynamique doit être associée de manière logique.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;T:System.Void&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;m&quot; /&gt; is a module that provides anonymous hosting for dynamic methods.">Un élément de <paramref name="parameterTypes" /> a la valeur <see langword="null" /> ou <see cref="T:System.Void" />.  

ou - 
<paramref name="m" /> est un module qui fournit l'hébergement anonyme pour les méthodes dynamiques.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;m&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> est <see langword="null" />.  

ou - 
<paramref name="m" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;returnType&quot; /&gt; is a type for which &lt;see cref=&quot;P:System.Type.IsByRef&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt;.">
        <paramref name="returnType" /> est un type pour lequel <see cref="P:System.Type.IsByRef" /> retourne <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
      <summary vsli:raw="Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.">Crée une méthode dynamique qui est globale pour un module, en spécifiant le nom de la méthode, le type de retour, les types de paramètres, le module et si les contrôles de visibilité juste-à-temps (JIT) doivent être ignorés pour les types et membres auxquels accède le langage Microsoft Intermediate Language (MSIL) de la méthode dynamique.</summary>
      <param name="name" vsli:raw="The name of the dynamic method. This can be a zero-length string, but it cannot be &lt;see langword=&quot;null&quot; /&gt;.">Nom de la méthode dynamique. Il peut s’agir d’une chaîne de longueur nulle, mais pas de <see langword="null" />.</param>
      <param name="returnType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that specifies the return type of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no return type.">Objet <see cref="T:System.Type" /> qui spécifie le type de retour de la méthode dynamique, ou <see langword="null" /> si la méthode n’a aucun type de retour.</param>
      <param name="parameterTypes" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects specifying the types of the parameters of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no parameters.">Tableau d’objets <see cref="T:System.Type" /> spécifiant les types des paramètres de la méthode dynamique, ou <see langword="null" /> si la méthode ne possède aucun paramètre.</param>
      <param name="m" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; representing the module with which the dynamic method is to be logically associated.">
        <see cref="T:System.Reflection.Module" /> représentant le module auquel la méthode dynamique doit être associée de manière logique.</param>
      <param name="skipVisibility" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method.">
        <see langword="true" /> pour ignorer les contrôles de visibilité JIT sur les types et membres auxquels accède le code MSIL de la méthode dynamique.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;T:System.Void&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;m&quot; /&gt; is a module that provides anonymous hosting for dynamic methods.">Un élément de <paramref name="parameterTypes" /> a la valeur <see langword="null" /> ou <see cref="T:System.Void" />.  
ou 
 <paramref name="m" /> est un module qui fournit l'hébergement anonyme pour les méthodes dynamiques.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;m&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> est <see langword="null" />.  

ou - 
<paramref name="m" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;returnType&quot; /&gt; is a type for which &lt;see cref=&quot;P:System.Type.IsByRef&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt;.">
        <paramref name="returnType" /> est un type pour lequel <see cref="P:System.Type.IsByRef" /> retourne <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
      <summary vsli:raw="Creates a dynamic method, specifying the method name, return type, parameter types, and the type with which the dynamic method is logically associated.">Crée une méthode dynamique, en spécifiant le nom de la méthode, le type de retour, les types de paramètres et le type auquel la méthode dynamique est associée de manière logique.</summary>
      <param name="name" vsli:raw="The name of the dynamic method. This can be a zero-length string, but it cannot be &lt;see langword=&quot;null&quot; /&gt;.">Nom de la méthode dynamique. Il peut s’agir d’une chaîne de longueur nulle, mais pas de <see langword="null" />.</param>
      <param name="returnType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that specifies the return type of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no return type.">Objet <see cref="T:System.Type" /> qui spécifie le type de retour de la méthode dynamique, ou <see langword="null" /> si la méthode n’a aucun type de retour.</param>
      <param name="parameterTypes" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects specifying the types of the parameters of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no parameters.">Tableau d’objets <see cref="T:System.Type" /> spécifiant les types des paramètres de la méthode dynamique, ou <see langword="null" /> si la méthode ne possède aucun paramètre.</param>
      <param name="owner" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; with which the dynamic method is logically associated. The dynamic method has access to all members of the type.">
        <see cref="T:System.Type" /> auquel la méthode dynamique est associée de manière logique. La méthode dynamique a accès à tous les membres du type.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;T:System.Void&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;owner&quot; /&gt; is an interface, an array, an open generic type, or a type parameter of a generic type or method.">Un élément de <paramref name="parameterTypes" /> a la valeur <see langword="null" /> ou <see cref="T:System.Void" />.  
ou 
 <paramref name="owner" /> est une interface, un tableau, un type générique ouvert ou un paramètre de type d'un type ou d'une méthode générique.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;owner&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> est <see langword="null" />.  

ou - 
<paramref name="owner" /> est <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;returnType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, or is a type for which &lt;see cref=&quot;P:System.Type.IsByRef&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt;.">
        <paramref name="returnType" /> est <see langword="null" /> ou est un type pour lequel <see cref="P:System.Type.IsByRef" /> retourne <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
      <summary vsli:raw="Creates a dynamic method, specifying the method name, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.">Crée une méthode dynamique, en spécifiant le nom de la méthode, le type de retour, les types de paramètres, le type auquel la méthode dynamique est associée de manière logique, et si les contrôles de visibilité juste-à-temps (JIT) doivent être ignorés pour les types et membres auxquels accède le code MSIL de la méthode dynamique.</summary>
      <param name="name" vsli:raw="The name of the dynamic method. This can be a zero-length string, but it cannot be &lt;see langword=&quot;null&quot; /&gt;.">Nom de la méthode dynamique. Il peut s’agir d’une chaîne de longueur nulle, mais pas de <see langword="null" />.</param>
      <param name="returnType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that specifies the return type of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no return type.">Objet <see cref="T:System.Type" /> qui spécifie le type de retour de la méthode dynamique, ou <see langword="null" /> si la méthode n’a aucun type de retour.</param>
      <param name="parameterTypes" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects specifying the types of the parameters of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no parameters.">Tableau d’objets <see cref="T:System.Type" /> spécifiant les types des paramètres de la méthode dynamique, ou <see langword="null" /> si la méthode ne possède aucun paramètre.</param>
      <param name="owner" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; with which the dynamic method is logically associated. The dynamic method has access to all members of the type.">
        <see cref="T:System.Type" /> auquel la méthode dynamique est associée de manière logique. La méthode dynamique a accès à tous les membres du type.</param>
      <param name="skipVisibility" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour ignorer les contrôles de visibilité JIT sur les types et membres auxquels accède le code MSIL de la méthode dynamique ; sinon, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;T:System.Void&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;owner&quot; /&gt; is an interface, an array, an open generic type, or a type parameter of a generic type or method.">Un élément de <paramref name="parameterTypes" /> a la valeur <see langword="null" /> ou <see cref="T:System.Void" />.  

ou - 
<paramref name="owner" /> est une interface, un tableau, un type générique ouvert ou un paramètre de type d'un type ou d'une méthode générique.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;owner&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> a la valeur <see langword="null" />.  

ou - 
<paramref name="owner" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;returnType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, or is a type for which &lt;see cref=&quot;P:System.Type.IsByRef&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt;.">
        <paramref name="returnType" /> est <see langword="null" /> ou est un type pour lequel <see cref="P:System.Type.IsByRef" /> retourne <see langword="true" />.</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Attributes">
      <summary vsli:raw="Gets the attributes specified when the dynamic method was created.">Obtient les attributs spécifiés au moment de la création de la méthode dynamique.</summary>
      <returns vsli:raw="A bitwise combination of the &lt;see cref=&quot;T:System.Reflection.MethodAttributes&quot; /&gt; values representing the attributes for the method.">Combinaison d'opérations de bits des valeurs <see cref="T:System.Reflection.MethodAttributes" /> qui représentent les attributs de la méthode.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.CallingConvention">
      <summary vsli:raw="Gets the calling convention specified when the dynamic method was created.">Obtient la convention d'appel spécifiée au moment de la création de la méthode dynamique.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Reflection.CallingConventions&quot; /&gt; values that indicates the calling convention of the method.">L'une des valeurs <see cref="T:System.Reflection.CallingConventions" /> indiquant la convention d'appel de la méthode.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)">
      <summary vsli:raw="Completes the dynamic method and creates a delegate that can be used to execute it.">Exécute la méthode dynamique et crée un délégué qui peut être utilisé pour l’exécuter.</summary>
      <param name="delegateType" vsli:raw="A delegate type whose signature matches that of the dynamic method.">Type délégué dont la signature correspond à celle de la méthode dynamique.</param>
      <returns vsli:raw="A delegate of the specified type, which can be used to execute the dynamic method.">Délégué du type spécifié qui peut être utilisé pour exécuter la méthode dynamique.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The dynamic method has no method body.">La méthode dynamique ne possède aucun corps de méthode.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;delegateType&quot; /&gt; has the wrong number of parameters or the wrong parameter types.">
        <paramref name="delegateType" /> possède un nombre de paramètres erroné ou des types de paramètres incorrects.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
      <summary vsli:raw="Completes the dynamic method and creates a delegate that can be used to execute it, specifying the delegate type and an object the delegate is bound to.">Exécute la méthode dynamique et crée un délégué qui peut être utilisé pour l'exécuter, en spécifiant le type délégué et un objet auquel le délégué est lié.</summary>
      <param name="delegateType" vsli:raw="A delegate type whose signature matches that of the dynamic method, minus the first parameter.">Type délégué dont la signature correspond à celle de la méthode dynamique, moins le premier paramètre.</param>
      <param name="target" vsli:raw="An object the delegate is bound to. Must be of the same type as the first parameter of the dynamic method.">Objet auquel le délégué est lié. Doit être du même type que le premier paramètre de la méthode dynamique.</param>
      <returns vsli:raw="A delegate of the specified type, which can be used to execute the dynamic method with the specified target object.">Délégué du type spécifié qui peut être utilisé pour exécuter la méthode dynamique avec l'objet cible spécifié.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The dynamic method has no method body.">La méthode dynamique ne possède aucun corps de méthode.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;target&quot; /&gt; is not the same type as the first parameter of the dynamic method, and is not assignable to that type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;delegateType&quot; /&gt; has the wrong number of parameters or the wrong parameter types.">
        <paramref name="target" /> n'est pas du même type que le premier paramètre de la méthode dynamique et ne peut pas être assigné à ce type.  

ou - 
<paramref name="delegateType" /> possède un nombre de paramètres erroné ou des types de paramètres incorrects.</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.DeclaringType">
      <summary vsli:raw="Gets the type that declares the method, which is always &lt;see langword=&quot;null&quot; /&gt; for dynamic methods.">Obtient le type qui déclare la méthode (toujours <see langword="null" /> pour les méthodes dynamiques).</summary>
      <returns vsli:raw="Always &lt;see langword=&quot;null&quot; /&gt;.">Toujours <see langword="null" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
      <summary vsli:raw="Defines a parameter of the dynamic method.">Définit un paramètre de la méthode dynamique.</summary>
      <param name="position" vsli:raw="The position of the parameter in the parameter list. Parameters are indexed beginning with the number 1 for the first parameter.">Position du paramètre dans la liste des paramètres. Les paramètres sont indexés en assignant le nombre 1 au premier paramètre.</param>
      <param name="attributes" vsli:raw="A bitwise combination of &lt;see cref=&quot;T:System.Reflection.ParameterAttributes&quot; /&gt; values that specifies the attributes of the parameter.">Combinaison d'opérations de bits de valeurs <see cref="T:System.Reflection.ParameterAttributes" /> qui spécifient les attributs du paramètre.</param>
      <param name="parameterName" vsli:raw="The name of the parameter. The name can be a zero-length string.">Nom du paramètre. Le nom peut être une chaîne de longueur nulle.</param>
      <returns vsli:raw="Always returns &lt;see langword=&quot;null&quot; /&gt;.">Retourne toujours <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The method has no parameters.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;position&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;position&quot; /&gt; is greater than the number of the method's parameters.">La méthode n'a pas de paramètre.  
ou 
 <paramref name="position" /> est inférieur à 0.  

ou - 
<paramref name="position" /> est supérieur au nombre de paramètres de la méthode.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetBaseDefinition">
      <summary vsli:raw="Returns the base implementation for the method.">Retourne l'implémentation de base de la méthode.</summary>
      <returns vsli:raw="The base implementation of the method.">Implémentation de base de la méthode.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes defined for the method.">Retourne tous les attributs personnalisés définis pour la méthode.</summary>
      <param name="inherit" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to search the method's inheritance chain to find the custom attributes; &lt;see langword=&quot;false&quot; /&gt; to check only the current method.">
        <see langword="true" /> pour rechercher la chaîne d'héritage de la méthode afin de détecter les attributs personnalisés ; <see langword="false" /> pour vérifier uniquement la méthode actuelle.</param>
      <returns vsli:raw="An array of objects representing all the custom attributes of the method.">Tableau d'objets représentant tous les attributs personnalisés de la méthode.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Returns the custom attributes of the specified type that have been applied to the method.">Retourne les attributs personnalisés du type spécifié qui a été appliqué à la méthode.</summary>
      <param name="attributeType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; representing the type of custom attribute to return.">
        <see cref="T:System.Type" /> représentant le type d'attribut personnalisé à retourner.</param>
      <param name="inherit" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to search the method's inheritance chain to find the custom attributes; &lt;see langword=&quot;false&quot; /&gt; to check only the current method.">
        <see langword="true" /> pour rechercher la chaîne d'héritage de la méthode afin de détecter les attributs personnalisés ; <see langword="false" /> pour vérifier uniquement la méthode actuelle.</param>
      <returns vsli:raw="An array of objects representing the attributes of the method that are of type &lt;paramref name=&quot;attributeType&quot; /&gt; or derive from type &lt;paramref name=&quot;attributeType&quot; /&gt;.">Tableau d'objets représentant les attributs de la méthode qui sont de type <paramref name="attributeType" /> ou dérivés du type <paramref name="attributeType" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="attributeType" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt; object that can be used to generate a method body from metadata tokens, scopes, and Microsoft intermediate language (MSIL) streams.">Retourne un objet <see cref="T:System.Reflection.Emit.DynamicILInfo" /> qui peut être utilisé pour générer un corps de méthode à partir de jetons de métadonnées, de portées et de flux MSIL (Microsoft Intermediate Language).</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt; object that can be used to generate a method body from metadata tokens, scopes, and MSIL streams.">Objet <see cref="T:System.Reflection.Emit.DynamicILInfo" /> qui peut être utilisé pour générer un corps de méthode à partir de jetons de métadonnées, de portées et de flux MSIL.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetILGenerator">
      <summary vsli:raw="Returns a Microsoft intermediate language (MSIL) generator for the method with a default MSIL stream size of 64 bytes.">Retourne un générateur MSIL (Microsoft Intermediate Language) pour la méthode, avec une taille de flux MSIL par défaut de 64 octets.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; object for the method.">Objet <see cref="T:System.Reflection.Emit.ILGenerator" /> de la méthode.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)">
      <summary vsli:raw="Returns a Microsoft intermediate language (MSIL) generator for the method with the specified MSIL stream size.">Retourne un générateur MSIL (Microsoft Intermediate Language) pour la méthode, avec la taille de flux MSIL spécifiée.</summary>
      <param name="streamSize" vsli:raw="The size of the MSIL stream, in bytes.">Taille du flux MSIL en octets.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; object for the method, with the specified MSIL stream size.">Objet <see cref="T:System.Reflection.Emit.ILGenerator" /> pour la méthode avec la taille de flux MSIL spécifiée.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags">
      <summary vsli:raw="Returns the implementation flags for the method.">Retourne les indicateurs d'implémentation de la méthode.</summary>
      <returns vsli:raw="A bitwise combination of &lt;see cref=&quot;T:System.Reflection.MethodImplAttributes&quot; /&gt; values representing the implementation flags for the method.">Combinaison d'opérations de bits de valeurs <see cref="T:System.Reflection.MethodImplAttributes" /> qui représentent les indicateurs d'implémentation de la méthode.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetParameters">
      <summary vsli:raw="Returns the parameters of the dynamic method.">Retourne les paramètres de la méthode dynamique.</summary>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Reflection.ParameterInfo&quot; /&gt; objects that represent the parameters of the dynamic method.">Tableau d'objets <see cref="T:System.Reflection.ParameterInfo" /> représentant les paramètres de la méthode dynamique.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.InitLocals">
      <summary vsli:raw="Gets or sets a value indicating whether the local variables in the method are zero-initialized.">Obtient ou définit une valeur qui indique si les variables locales contenues dans la méthode sont initialisées à zéro.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the local variables in the method are zero-initialized; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> si les variables locales contenues dans la méthode sont initialisées à zéro ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary vsli:raw="Invokes the dynamic method using the specified parameters, under the constraints of the specified binder, with the specified culture information.">Appelle la méthode dynamique à l'aide des paramètres spécifiés, sous les contraintes du binder spécifié, avec les informations de culture données.</summary>
      <param name="obj" vsli:raw="This parameter is ignored for dynamic methods, because they are static. Specify &lt;see langword=&quot;null&quot; /&gt;.">Ce paramètre est ignoré pour les méthodes dynamiques, car elles sont statiques. Spécifiez <see langword="null" />.</param>
      <param name="invokeAttr" vsli:raw="A bitwise combination of &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; values.">Combinaison de bits de valeurs <see cref="T:System.Reflection.BindingFlags" />.</param>
      <param name="binder" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Binder&quot; /&gt; object that enables the binding, coercion of argument types, invocation of members, and retrieval of &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; objects through reflection. If &lt;paramref name=&quot;binder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, the default binder is used. For more details, see &lt;see cref=&quot;T:System.Reflection.Binder&quot; /&gt;.">Objet <see cref="T:System.Reflection.Binder" /> qui active la liaison, la contrainte de types d'arguments, l'appel des membres et la récupération d'objets <see cref="T:System.Reflection.MemberInfo" /> par réflexion. Si <paramref name="binder" /> est <see langword="null" />, le binder par défaut est utilisé. Pour plus d'informations, consultez <see cref="T:System.Reflection.Binder" />.</param>
      <param name="parameters" vsli:raw="An argument list. This is an array of arguments with the same number, order, and type as the parameters of the method to be invoked. If there are no parameters this parameter should be &lt;see langword=&quot;null&quot; /&gt;.">Liste d’arguments. Il s'agit d'un tableau d'arguments ayant les mêmes nombre, ordre et type que les paramètres de la méthode à appeler. En l'absence de paramètre, ce paramètre doit avoir la valeur <see langword="null" />.</param>
      <param name="culture" vsli:raw="An instance of &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; used to govern the coercion of types. If this is &lt;see langword=&quot;null&quot; /&gt;, the &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; for the current thread is used. For example, this information is needed to correctly convert a &lt;see cref=&quot;T:System.String&quot; /&gt; that represents 1000 to a &lt;see cref=&quot;T:System.Double&quot; /&gt; value, because 1000 is represented differently by different cultures.">Instance de <see cref="T:System.Globalization.CultureInfo" /> utilisée pour régir la contrainte des types. Si la valeur est <see langword="null" />, le <see cref="T:System.Globalization.CultureInfo" /> du thread actuel est utilisé. Par exemple, cette information est nécessaire pour convertir correctement un <see cref="T:System.String" /> représentant 1 000 en valeur <see cref="T:System.Double" />, car 1 000 est représenté de différentes manières, selon la culture.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Object&quot; /&gt; containing the return value of the invoked method.">
        <see cref="T:System.Object" /> contenant la valeur de retour de la méthode appelée.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;F:System.Reflection.CallingConventions.VarArgs&quot; /&gt; calling convention is not supported.">La conversion d'appel <see cref="F:System.Reflection.CallingConventions.VarArgs" /> n'est pas prise en charge.</exception>
      <exception cref="T:System.Reflection.TargetParameterCountException" vsli:raw="The number of elements in &lt;paramref name=&quot;parameters&quot; /&gt; does not match the number of parameters in the dynamic method.">Le nombre d'éléments dans <paramref name="parameters" /> ne correspond pas au nombre de paramètres contenus dans la méthode dynamique.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The type of one or more elements of &lt;paramref name=&quot;parameters&quot; /&gt; does not match the type of the corresponding parameter of the dynamic method.">Le type d'un ou plusieurs éléments de <paramref name="parameters" /> ne correspond pas au type du paramètre correspondant de la méthode dynamique.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException" vsli:raw="The dynamic method is associated with a module, is not anonymously hosted, and was constructed with &lt;paramref name=&quot;skipVisibility&quot; /&gt; set to &lt;see langword=&quot;false&quot; /&gt;, but the dynamic method accesses members that are not &lt;see langword=&quot;public&quot; /&gt; or &lt;see langword=&quot;internal&quot; /&gt; (&lt;see langword=&quot;Friend&quot; /&gt; in Visual Basic).  &#xA;  &#xA; -or-  &#xA;  &#xA; The dynamic method is anonymously hosted and was constructed with &lt;paramref name=&quot;skipVisibility&quot; /&gt; set to &lt;see langword=&quot;false&quot; /&gt;, but it accesses members that are not &lt;see langword=&quot;public&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The dynamic method contains unverifiable code. See the &quot;Verification&quot; section in Remarks for &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt;.">La méthode dynamique est associée à un module, n'est pas hébergée anonymement et est construite avec le paramètre <paramref name="skipVisibility" /> défini sur <see langword="false" />, mais la méthode dynamique accède aux membres qui ne sont pas <see langword="public" /> ni <see langword="internal" /> (<see langword="Friend" /> en Visual Basic).  

ou - 
La méthode dynamique est hébergée anonymement et a été construite avec le paramètre <paramref name="skipVisibility" /> défini sur <see langword="false" />, mais il accède aux membres qui ne sont pas <see langword="public" />.  

ou - 
La méthode dynamique contient le code non vérifiable. Consultez la section « Vérification » dans la section Notes pour <see cref="T:System.Reflection.Emit.DynamicMethod" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Indicates whether the specified custom attribute type is defined.">Indique si le type d'attribut personnalisé spécifié est défini.</summary>
      <param name="attributeType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; representing the type of custom attribute to search for.">
        <see cref="T:System.Type" /> représentant le type d'attribut personnalisé à rechercher.</param>
      <param name="inherit" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to search the method's inheritance chain to find the custom attributes; &lt;see langword=&quot;false&quot; /&gt; to check only the current method.">
        <see langword="true" /> pour rechercher la chaîne d'héritage de la méthode afin de détecter les attributs personnalisés ; <see langword="false" /> pour vérifier uniquement la méthode actuelle.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified custom attribute type is defined; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le type d'attribut personnalisé spécifié est défini ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
      <summary vsli:raw="Gets a value that indicates whether the current dynamic method is security-critical or security-safe-critical, and therefore can perform critical operations.">Obtient une valeur qui indique si la méthode dynamique actuelle est critique de sécurité (security-critical) ou critique sécurisée (security-safe-critical) et peut par conséquent exécuter des opérations critiques.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current dynamic method is security-critical or security-safe-critical; &lt;see langword=&quot;false&quot; /&gt; if it is transparent.">
        <see langword="true" /> si la méthode dynamique actuelle est critique de sécurité ou critique sécurisée ; <see langword="false" /> si elle est transparente de sécurité (security-transparent).</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The dynamic method doesn't have a method body.">La méthode dynamique n'a pas de corps de méthode.</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
      <summary vsli:raw="Gets a value that indicates whether the current dynamic method is security-safe-critical at the current trust level; that is, whether it can perform critical operations and can be accessed by transparent code.">Obtient une valeur qui indique si la méthode dynamique actuelle est critique sécurisée au niveau de confiance actuel ; autrement dit, si elle peut exécuter des opérations critiques et être accessible par du code transparent.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dynamic method is security-safe-critical at the current trust level; &lt;see langword=&quot;false&quot; /&gt; if it is security-critical or transparent.">
        <see langword="true" /> si la méthode dynamique actuelle est critique sécurisée au niveau de confiance actuel ; <see langword="false" /> si elle est critique de sécurité ou transparente.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The dynamic method doesn't have a method body.">La méthode dynamique n'a pas de corps de méthode.</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
      <summary vsli:raw="Gets a value that indicates whether the current dynamic method is transparent at the current trust level, and therefore cannot perform critical operations.">Obtient une valeur qui indique si la méthode dynamique actuelle est transparente au niveau de confiance actuel et ne peut par conséquent pas exécuter d'opérations critiques.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dynamic method is security-transparent at the current trust level; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la méthode dynamique est transparente de sécurité au niveau de confiance actuel ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The dynamic method doesn't have a method body.">La méthode dynamique n'a pas de corps de méthode.</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.MethodHandle">
      <summary vsli:raw="Not supported for dynamic methods.">Non pris en charge pour les méthodes dynamiques.</summary>
      <returns vsli:raw="Not supported for dynamic methods.">Non pris en charge pour les méthodes dynamiques.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Not allowed for dynamic methods.">Non autorisé pour les méthodes dynamiques.</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Module">
      <summary vsli:raw="Gets the module with which the dynamic method is logically associated.">Obtient le module auquel la méthode dynamique est associée de manière logique.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; with which the current dynamic method is associated.">
        <see cref="T:System.Reflection.Module" /> auquel la méthode dynamique actuelle est associée.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Name">
      <summary vsli:raw="Gets the name of the dynamic method.">Obtient le nom de la méthode dynamique.</summary>
      <returns vsli:raw="The simple name of the method.">Nom simple de la méthode.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReflectedType">
      <summary vsli:raw="Gets the class that was used in reflection to obtain the method.">Obtient la classe qui a été utilisée lors d'une réflexion pour obtenir cette méthode.</summary>
      <returns vsli:raw="Always &lt;see langword=&quot;null&quot; /&gt;.">Toujours <see langword="null" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnParameter">
      <summary vsli:raw="Gets the return parameter of the dynamic method.">Obtient le paramètre de retour de la méthode dynamique.</summary>
      <returns vsli:raw="Always &lt;see langword=&quot;null&quot; /&gt;.">Toujours <see langword="null" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnType">
      <summary vsli:raw="Gets the type of return value for the dynamic method.">Obtient le type de la valeur de retour pour la méthode dynamique.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; representing the type of the return value of the current method; &lt;see cref=&quot;T:System.Void&quot; /&gt; if the method has no return type.">
        <see cref="T:System.Type" /> qui représente le type de la valeur de retour de la méthode actuelle ; <see cref="T:System.Void" /> si la méthode ne possède aucun type de retour.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes">
      <summary vsli:raw="Gets the custom attributes of the return type for the dynamic method.">Obtient les attributs personnalisés du type de retour de la méthode dynamique.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Reflection.ICustomAttributeProvider&quot; /&gt; representing the custom attributes of the return type for the dynamic method.">
        <see cref="T:System.Reflection.ICustomAttributeProvider" /> représentant les attributs personnalisés du type de retour de la méthode dynamique.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.ToString">
      <summary vsli:raw="Returns the signature of the method, represented as a string.">Retourne la signature de la méthode, représentée sous la forme d'une chaîne.</summary>
      <returns vsli:raw="A string representing the method signature.">Chaîne représentant la signature de la méthode.</returns>
    </member>
  </members>
</doc>
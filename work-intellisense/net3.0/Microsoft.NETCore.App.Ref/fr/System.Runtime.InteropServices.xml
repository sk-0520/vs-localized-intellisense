<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Runtime.InteropServices</name>
  </assembly>
  <members>
    <member name="T:System.DataMisalignedException">
      <summary vsli:raw="The exception that is thrown when a unit of data is read from or written to an address that is not a multiple of the data size. This class cannot be inherited.">Exception levée lors de la lecture ou de l'écriture d'une unité de données dans une adresse qui n'est pas un multiple de la taille de données. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.DataMisalignedException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.DataMisalignedException&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.DataMisalignedException" />.</summary>
    </member>
    <member name="M:System.DataMisalignedException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.DataMisalignedException&quot; /&gt; class using the specified error message.">Initialise une nouvelle instance de la classe <see cref="T:System.DataMisalignedException" /> à l'aide du message d'erreur spécifié.</summary>
      <param name="message" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; object that describes the error. The content of &lt;paramref name=&quot;message&quot; /&gt; is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.">Objet <see cref="T:System.String" /> qui décrit l’erreur. Le contenu du <paramref name="message" /> doit être compréhensible pour les utilisateurs. L'appelant de ce constructeur doit vérifier que cette chaîne a été localisée pour la culture en cours du système.</param>
    </member>
    <member name="M:System.DataMisalignedException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.DataMisalignedException&quot; /&gt; class using the specified error message and underlying exception.">Initialise une nouvelle instance de la classe <see cref="T:System.DataMisalignedException" /> à l'aide du message d'erreur spécifié et de l'exception sous-jacente.</summary>
      <param name="message" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; object that describes the error. The content of &lt;paramref name=&quot;message&quot; /&gt; is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.">Objet <see cref="T:System.String" /> qui décrit l’erreur. Le contenu du <paramref name="message" /> doit être compréhensible pour les utilisateurs. L'appelant de ce constructeur doit vérifier que cette chaîne a été localisée pour la culture en cours du système.</param>
      <param name="innerException" vsli:raw="The exception that is the cause of the current &lt;see cref=&quot;T:System.DataMisalignedException&quot; /&gt;. If the &lt;paramref name=&quot;innerException&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">Exception qui constitue la cause de l'actuel <see cref="T:System.DataMisalignedException" />. Si le paramètre <paramref name="innerException" /> n'est pas <see langword="null" />, l'exception actuelle est levée dans un bloc <see langword="catch" /> qui gère l'exception interne.</param>
    </member>
    <member name="T:System.DllNotFoundException">
      <summary vsli:raw="The exception that is thrown when a DLL specified in a DLL import cannot be found.">Exception levée lorsqu'une DLL spécifiée dans une importation de DLL est introuvable.</summary>
    </member>
    <member name="M:System.DllNotFoundException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.DllNotFoundException&quot; /&gt; class with default properties.">Initialise une nouvelle instance de la classe <see cref="T:System.DllNotFoundException" /> avec des propriétés par défaut.</summary>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.DllNotFoundException&quot; /&gt; class with serialized data.">Initialise une nouvelle instance de la classe <see cref="T:System.DllNotFoundException" /> avec des données sérialisées.</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; that holds the serialized object data about the exception being thrown.">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> qui contient les données d'objet sérialisées concernant l'exception levée.</param>
      <param name="context" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; that contains contextual information about the source or destination.">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> qui contient des informations contextuelles relatives à la source ou à la destination.</param>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.DllNotFoundException&quot; /&gt; class with a specified error message.">Initialise une nouvelle instance de la classe <see cref="T:System.DllNotFoundException" /> avec un message d'erreur spécifié.</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">Message d'erreur qui explique la raison de l'exception.</param>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.DllNotFoundException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">Initialise une nouvelle instance de la classe <see cref="T:System.DllNotFoundException" /> avec un message d'erreur spécifié et une référence à l'exception interne ayant provoqué cette exception.</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">Message d'erreur qui explique la raison de l'exception.</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">Exception ayant provoqué l'exception actuelle. Si le paramètre <paramref name="inner" /> n'est pas <see langword="null" />, l'exception actuelle est levée dans un bloc <see langword="catch" /> qui gère l'exception interne.</param>
    </member>
    <member name="T:System.IO.UnmanagedMemoryAccessor">
      <summary vsli:raw="Provides random access to unmanaged blocks of memory from managed code.">Fournit l'accès aléatoire aux blocs non managés de la mémoire à partir du code managé.</summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.IO.UnmanagedMemoryAccessor&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.IO.UnmanagedMemoryAccessor" />.</summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.IO.UnmanagedMemoryAccessor&quot; /&gt; class with a specified buffer, offset, and capacity.">Initialise une nouvelle instance de la classe <see cref="T:System.IO.UnmanagedMemoryAccessor" /> avec une mémoire tampon, un décalage et une capacité spécifiés.</summary>
      <param name="buffer" vsli:raw="The buffer to contain the accessor.">Mémoire tampon devant contenir l’accesseur.</param>
      <param name="offset" vsli:raw="The byte at which to start the accessor.">Octet auquel commencer l’accesseur.</param>
      <param name="capacity" vsli:raw="The size, in bytes, of memory to allocate.">Taille, en octets, de la mémoire à allouer.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; plus &lt;paramref name=&quot;capacity&quot; /&gt; is greater than &lt;paramref name=&quot;buffer&quot; /&gt;.">
        <paramref name="offset" /> plus <paramref name="capacity" /> est supérieur à <paramref name="buffer" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;buffer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; or &lt;paramref name=&quot;capacity&quot; /&gt; is less than zero.">
        <paramref name="offset" /> ou <paramref name="capacity" /> est inférieur à zéro.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; plus &lt;paramref name=&quot;capacity&quot; /&gt; would wrap around the high end of the address space.">
        <paramref name="offset" /> plus <paramref name="capacity" /> encapsuleraient autour de la valeur la plus élevée de l’espace d’adressage.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.IO.UnmanagedMemoryAccessor&quot; /&gt; class with a specified buffer, offset, capacity, and access right.">Initialise une nouvelle instance de la classe <see cref="T:System.IO.UnmanagedMemoryAccessor" /> avec une mémoire tampon, un décalage, une capacité et des droits d'accès spécifiés.</summary>
      <param name="buffer" vsli:raw="The buffer to contain the accessor.">Mémoire tampon devant contenir l’accesseur.</param>
      <param name="offset" vsli:raw="The byte at which to start the accessor.">Octet auquel commencer l’accesseur.</param>
      <param name="capacity" vsli:raw="The size, in bytes, of memory to allocate.">Taille, en octets, de la mémoire à allouer.</param>
      <param name="access" vsli:raw="The type of access allowed to the memory. The default is &lt;see cref=&quot;F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite&quot; /&gt;.">Type d'accès autorisé à la mémoire. La valeur par défaut est <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; plus &lt;paramref name=&quot;capacity&quot; /&gt; is greater than &lt;paramref name=&quot;buffer&quot; /&gt;.">
        <paramref name="offset" /> plus <paramref name="capacity" /> est supérieur à <paramref name="buffer" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;buffer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; or &lt;paramref name=&quot;capacity&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;access&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot; /&gt; enumeration value.">
        <paramref name="offset" /> ou <paramref name="capacity" /> est inférieur à zéro.  

ou - 
<paramref name="access" /> n’est pas une valeur d’énumération <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> valide.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; plus &lt;paramref name=&quot;capacity&quot; /&gt; would wrap around the high end of the address space.">
        <paramref name="offset" /> plus <paramref name="capacity" /> encapsuleraient autour de la valeur la plus élevée de l’espace d’adressage.</exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.CanRead">
      <summary vsli:raw="Determines whether the accessor is readable.">Détermine si l’accesseur est accessible en lecture.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the accessor is readable; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'accesseur est accessible en lecture ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.CanWrite">
      <summary vsli:raw="Determines whether the accessory is writable.">Détermine si l’accesseur est accessible en écriture.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the accessor is writable; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'accesseur est accessible en écriture ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.Capacity">
      <summary vsli:raw="Gets the capacity of the accessor.">Obtient la capacité de l’accesseur.</summary>
      <returns vsli:raw="The capacity of the accessor.">Capacité de l’accesseur.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.IO.UnmanagedMemoryAccessor&quot; /&gt;.">Libère toutes les ressources utilisées par <see cref="T:System.IO.UnmanagedMemoryAccessor" />.</summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.IO.UnmanagedMemoryAccessor&quot; /&gt; and optionally releases the managed resources.">Libère les ressources non managées utilisées par <see cref="T:System.IO.UnmanagedMemoryAccessor" /> et libère éventuellement les ressources managées.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">
        <see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour libérer uniquement les ressources non managées.</param>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary vsli:raw="Sets the initial values for the accessor.">Définit les valeurs initiales de l'accesseur.</summary>
      <param name="buffer" vsli:raw="The buffer to contain the accessor.">Mémoire tampon devant contenir l’accesseur.</param>
      <param name="offset" vsli:raw="The byte at which to start the accessor.">Octet auquel commencer l’accesseur.</param>
      <param name="capacity" vsli:raw="The size, in bytes, of memory to allocate.">Taille, en octets, de la mémoire à allouer.</param>
      <param name="access" vsli:raw="The type of access allowed to the memory. The default is &lt;see cref=&quot;F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite&quot; /&gt;.">Type d'accès autorisé à la mémoire. La valeur par défaut est <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; plus &lt;paramref name=&quot;capacity&quot; /&gt; is greater than &lt;paramref name=&quot;buffer&quot; /&gt;.">
        <paramref name="offset" /> plus <paramref name="capacity" /> est supérieur à <paramref name="buffer" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;buffer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; or &lt;paramref name=&quot;capacity&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;access&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot; /&gt; enumeration value.">
        <paramref name="offset" /> ou <paramref name="capacity" /> est inférieur à zéro.  
ou 
 <paramref name="access" /> n’est pas une valeur d’énumération <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> valide.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; plus &lt;paramref name=&quot;capacity&quot; /&gt; would wrap around the high end of the address space.">
        <paramref name="offset" /> plus <paramref name="capacity" /> encapsuleraient autour de la valeur la plus élevée de l’espace d’adressage.</exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.IsOpen">
      <summary vsli:raw="Determines whether the accessor is currently open by a process.">Détermine si l’accesseur est actuellement ouvert par un processus.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the accessor is open; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'accesseur est ouvert ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Read``1(System.Int64,``0@)">
      <summary vsli:raw="Reads a structure of type &lt;paramref name=&quot;T&quot; /&gt; from the accessor into a provided reference.">Lit une structure de type <paramref name="T" /> de l'accesseur dans une référence fournie.</summary>
      <param name="position" vsli:raw="The position in the accessor at which to begin reading.">Position dans l'accesseur à laquelle la lecture doit commencer.</param>
      <param name="structure" vsli:raw="The structure to contain the read data.">Structure destinée à contenir les données de lecture.</param>
      <typeparam name="T" vsli:raw="The type of structure.">Type de structure.</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read in a structure of type &lt;paramref name=&quot;T&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see langword=&quot;T&quot; /&gt; is a value type that contains one or more reference types.">Il n’y a pas assez d’octets après <paramref name="position" /> pour lire une structure de type <paramref name="T" />.  
ou 
 <see langword="T" /> est un type valeur qui contient un ou plusieurs types référence.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">L’accesseur ne prend pas en charge la lecture.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">L’accesseur a été supprimé.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadArray``1(System.Int64,``0[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads structures of type &lt;paramref name=&quot;T&quot; /&gt; from the accessor into an array of type &lt;paramref name=&quot;T&quot; /&gt;.">Lit les structures de type <paramref name="T" /> de l'accesseur dans un tableau de type <paramref name="T" />.</summary>
      <param name="position" vsli:raw="The number of bytes in the accessor at which to begin reading.">Nombre d'octets dans l'accesseur auquel la lecture doit commencer.</param>
      <param name="array" vsli:raw="The array to contain the structures read from the accessor.">Tableau destiné à contenir les structures lues dans l'accesseur.</param>
      <param name="offset" vsli:raw="The index in &lt;paramref name=&quot;array&quot; /&gt; in which to place the first copied structure.">Dans <paramref name="array" />, index dans lequel placer la première structure copiée.</param>
      <param name="count" vsli:raw="The number of structures of type &lt;c&gt;T&lt;/c&gt; to read from the accessor.">Nombre de structures de type <c>T</c> à lire dans l’accesseur.</param>
      <typeparam name="T" vsli:raw="The type of structure.">Type de structure.</typeparam>
      <returns vsli:raw="The number of structures read into &lt;paramref name=&quot;array&quot; /&gt;. This value can be less than &lt;paramref name=&quot;count&quot; /&gt; if there are fewer structures available, or zero if the end of the accessor is reached.">Nombre de structures lues dans <paramref name="array" />. Cette valeur peut être inférieure à <paramref name="count" /> si moins de structures sont disponibles, ou zéro si la fin de l'accesseur est atteinte.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is not large enough to contain &lt;paramref name=&quot;count&quot; /&gt; of structures (starting from &lt;paramref name=&quot;position&quot; /&gt;).">
        <paramref name="array" /> n’est pas assez grand pour contenir <paramref name="count" /> structures (démarrage à partir de <paramref name="position" />).</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">L’accesseur ne prend pas en charge la lecture.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">L’accesseur a été supprimé.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadBoolean(System.Int64)">
      <summary vsli:raw="Reads a Boolean value from the accessor.">Lit une valeur booléenne de l’accesseur.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">Nombre d’octets dans l’accesseur auquel commencer la lecture.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; or &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> ou <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">Il n’y a pas assez d’octets après <paramref name="position" /> pour lire une valeur.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">L’accesseur ne prend pas en charge la lecture.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">L’accesseur a été supprimé.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadByte(System.Int64)">
      <summary vsli:raw="Reads a byte value from the accessor.">Lit une valeur d'octet dans l'accesseur.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">Nombre d’octets dans l’accesseur auquel commencer la lecture.</param>
      <returns vsli:raw="The value that was read.">Valeur qui a été lue.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">Il n’y a pas assez d’octets après <paramref name="position" /> pour lire une valeur.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">L’accesseur ne prend pas en charge la lecture.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">L’accesseur a été supprimé.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadChar(System.Int64)">
      <summary vsli:raw="Reads a character from the accessor.">Lit un caractère dans l'accesseur.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">Nombre d’octets dans l’accesseur auquel commencer la lecture.</param>
      <returns vsli:raw="The value that was read.">Valeur qui a été lue.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">Il n’y a pas assez d’octets après <paramref name="position" /> pour lire une valeur.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">L’accesseur ne prend pas en charge la lecture.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">L’accesseur a été supprimé.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadDecimal(System.Int64)">
      <summary vsli:raw="Reads a decimal value from the accessor.">Lit une valeur décimale dans l’accesseur.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">Nombre d’octets dans l’accesseur auquel commencer la lecture.</param>
      <returns vsli:raw="The value that was read.">Valeur qui a été lue.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.  &#xA;  &#xA; -or-  &#xA;  &#xA; The decimal to read is invalid.">Il n’y a pas assez d’octets après <paramref name="position" /> pour lire une valeur.  
ou 
Le décimal à lire n’est pas valide.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">L’accesseur ne prend pas en charge la lecture.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">L’accesseur a été supprimé.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadDouble(System.Int64)">
      <summary vsli:raw="Reads a double-precision floating-point value from the accessor.">Lit une valeur à virgule flottante double précision dans l’accesseur.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">Nombre d’octets dans l’accesseur auquel commencer la lecture.</param>
      <returns vsli:raw="The value that was read.">Valeur qui a été lue.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">Il n’y a pas assez d’octets après <paramref name="position" /> pour lire une valeur.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">L’accesseur ne prend pas en charge la lecture.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">L’accesseur a été supprimé.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadInt16(System.Int64)">
      <summary vsli:raw="Reads a 16-bit integer from the accessor.">Lit un entier 16 bits dans l’accesseur.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">Nombre d’octets dans l’accesseur auquel commencer la lecture.</param>
      <returns vsli:raw="The value that was read.">Valeur qui a été lue.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">Il n’y a pas assez d’octets après <paramref name="position" /> pour lire une valeur.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">L’accesseur ne prend pas en charge la lecture.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">L’accesseur a été supprimé.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadInt32(System.Int64)">
      <summary vsli:raw="Reads a 32-bit integer from the accessor.">Lit un entier 32 bits dans l’accesseur.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">Nombre d’octets dans l’accesseur auquel commencer la lecture.</param>
      <returns vsli:raw="The value that was read.">Valeur qui a été lue.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">Il n’y a pas assez d’octets après <paramref name="position" /> pour lire une valeur.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">L’accesseur ne prend pas en charge la lecture.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">L’accesseur a été supprimé.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadInt64(System.Int64)">
      <summary vsli:raw="Reads a 64-bit integer from the accessor.">Lit un entier 64 bits dans l’accesseur.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">Nombre d’octets dans l’accesseur auquel commencer la lecture.</param>
      <returns vsli:raw="The value that was read.">Valeur qui a été lue.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">Il n’y a pas assez d’octets après <paramref name="position" /> pour lire une valeur.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">L’accesseur ne prend pas en charge la lecture.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">L’accesseur a été supprimé.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadSByte(System.Int64)">
      <summary vsli:raw="Reads an 8-bit signed integer from the accessor.">Lit un entier signé 8 bits dans l'accesseur.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">Nombre d’octets dans l’accesseur auquel commencer la lecture.</param>
      <returns vsli:raw="The value that was read.">Valeur qui a été lue.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">Il n’y a pas assez d’octets après <paramref name="position" /> pour lire une valeur.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">L’accesseur ne prend pas en charge la lecture.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">L’accesseur a été supprimé.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadSingle(System.Int64)">
      <summary vsli:raw="Reads a single-precision floating-point value from the accessor.">Lit une valeur à virgule flottante simple précision dans l'accesseur.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">Nombre d’octets dans l’accesseur auquel commencer la lecture.</param>
      <returns vsli:raw="The value that was read.">Valeur qui a été lue.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">Il n’y a pas assez d’octets après <paramref name="position" /> pour lire une valeur.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">L’accesseur ne prend pas en charge la lecture.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">L’accesseur a été supprimé.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadUInt16(System.Int64)">
      <summary vsli:raw="Reads an unsigned 16-bit integer from the accessor.">Lit un entier non signé 16 bits dans l’accesseur.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">Nombre d’octets dans l’accesseur auquel commencer la lecture.</param>
      <returns vsli:raw="The value that was read.">Valeur qui a été lue.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">Il n’y a pas assez d’octets après <paramref name="position" /> pour lire une valeur.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">L’accesseur ne prend pas en charge la lecture.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">L’accesseur a été supprimé.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadUInt32(System.Int64)">
      <summary vsli:raw="Reads an unsigned 32-bit integer from the accessor.">Lit un entier non signé 32 bits dans l’accesseur.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">Nombre d’octets dans l’accesseur auquel commencer la lecture.</param>
      <returns vsli:raw="The value that was read.">Valeur qui a été lue.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">Il n’y a pas assez d’octets après <paramref name="position" /> pour lire une valeur.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">L’accesseur ne prend pas en charge la lecture.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">L’accesseur a été supprimé.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadUInt64(System.Int64)">
      <summary vsli:raw="Reads an unsigned 64-bit integer from the accessor.">Lit un entier non signé 64 bits dans l'accesseur.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">Nombre d’octets dans l’accesseur auquel commencer la lecture.</param>
      <returns vsli:raw="The value that was read.">Valeur qui a été lue.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">Il n’y a pas assez d’octets après <paramref name="position" /> pour lire une valeur.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">L’accesseur ne prend pas en charge la lecture.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">L’accesseur a été supprimé.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Boolean)">
      <summary vsli:raw="Writes a Boolean value into the accessor.">Écrit une valeur booléenne dans l'accesseur.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">Nombre d'octets dans l'accesseur auquel commencer l'écriture.</param>
      <param name="value" vsli:raw="The value to write.">Valeur à écrire.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">Il n’y a pas assez d’octets après <paramref name="position" /> pour écrire une valeur.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">L’accesseur ne prend pas en charge l’écriture.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">L’accesseur a été supprimé.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Byte)">
      <summary vsli:raw="Writes a byte value into the accessor.">Écrit une valeur d’octet dans l’accesseur.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">Nombre d'octets dans l'accesseur auquel commencer l'écriture.</param>
      <param name="value" vsli:raw="The value to write.">Valeur à écrire.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">Il n’y a pas assez d’octets après <paramref name="position" /> pour écrire une valeur.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">L’accesseur ne prend pas en charge l’écriture.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">L’accesseur a été supprimé.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Char)">
      <summary vsli:raw="Writes a character into the accessor.">Écrit un caractère dans l'accesseur.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">Nombre d'octets dans l'accesseur auquel commencer l'écriture.</param>
      <param name="value" vsli:raw="The value to write.">Valeur à écrire.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">Il n’y a pas assez d’octets après <paramref name="position" /> pour écrire une valeur.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">L’accesseur ne prend pas en charge l’écriture.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">L’accesseur a été supprimé.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Decimal)">
      <summary vsli:raw="Writes a decimal value into the accessor.">Écrit une valeur décimale dans l'accesseur.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">Nombre d'octets dans l'accesseur auquel commencer l'écriture.</param>
      <param name="value" vsli:raw="The value to write.">Valeur à écrire.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.  &#xA;  &#xA; -or-  &#xA;  &#xA; The decimal is invalid.">Il n’y a pas assez d’octets après <paramref name="position" /> pour écrire une valeur.  
ou 
Le décimal n’est pas valide.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">L’accesseur ne prend pas en charge l’écriture.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">L’accesseur a été supprimé.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Double)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Double&quot; /&gt; value into the accessor.">Écrit une valeur <see langword="Double" /> dans l'accesseur.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">Nombre d'octets dans l'accesseur auquel commencer l'écriture.</param>
      <param name="value" vsli:raw="The value to write.">Valeur à écrire.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">Il n’y a pas assez d’octets après <paramref name="position" /> pour écrire une valeur.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">L’accesseur ne prend pas en charge l’écriture.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">L’accesseur a été supprimé.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int16)">
      <summary vsli:raw="Writes a 16-bit integer into the accessor.">Écrit un entier 16 bits dans l’accesseur.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">Nombre d'octets dans l'accesseur auquel commencer l'écriture.</param>
      <param name="value" vsli:raw="The value to write.">Valeur à écrire.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">Il n’y a pas assez d’octets après <paramref name="position" /> pour écrire une valeur.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">L’accesseur ne prend pas en charge l’écriture.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">L’accesseur a été supprimé.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int32)">
      <summary vsli:raw="Writes a 32-bit integer into the accessor.">Écrit un entier 32 bits dans l'accesseur.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">Nombre d'octets dans l'accesseur auquel commencer l'écriture.</param>
      <param name="value" vsli:raw="The value to write.">Valeur à écrire.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">Il n’y a pas assez d’octets après <paramref name="position" /> pour écrire une valeur.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">L’accesseur ne prend pas en charge l’écriture.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">L’accesseur a été supprimé.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int64)">
      <summary vsli:raw="Writes a 64-bit integer into the accessor.">Écrit un entier 64 bits dans l’accesseur.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">Nombre d'octets dans l'accesseur auquel commencer l'écriture.</param>
      <param name="value" vsli:raw="The value to write.">Valeur à écrire.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after position to write a value.">Il n’y a pas assez d’octets après la position pour écrire une valeur.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">L’accesseur ne prend pas en charge l’écriture.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">L’accesseur a été supprimé.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.SByte)">
      <summary vsli:raw="Writes an 8-bit integer into the accessor.">Écrit un entier 8 bits dans l’accesseur.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">Nombre d'octets dans l'accesseur auquel commencer l'écriture.</param>
      <param name="value" vsli:raw="The value to write.">Valeur à écrire.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">Il n’y a pas assez d’octets après <paramref name="position" /> pour écrire une valeur.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">L’accesseur ne prend pas en charge l’écriture.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">L’accesseur a été supprimé.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Single)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Single&quot; /&gt; into the accessor.">Écrit <see langword="Single" /> dans l’accesseur.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">Nombre d'octets dans l'accesseur auquel commencer l'écriture.</param>
      <param name="value" vsli:raw="The value to write.">Valeur à écrire.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">Il n’y a pas assez d’octets après <paramref name="position" /> pour écrire une valeur.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">L’accesseur ne prend pas en charge l’écriture.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">L’accesseur a été supprimé.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt16)">
      <summary vsli:raw="Writes an unsigned 16-bit integer into the accessor.">Écrit un entier non signé 16 bits dans l’accesseur.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">Nombre d'octets dans l'accesseur auquel commencer l'écriture.</param>
      <param name="value" vsli:raw="The value to write.">Valeur à écrire.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">Il n’y a pas assez d’octets après <paramref name="position" /> pour écrire une valeur.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">L’accesseur ne prend pas en charge l’écriture.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">L’accesseur a été supprimé.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt32)">
      <summary vsli:raw="Writes an unsigned 32-bit integer into the accessor.">Écrit un entier non signé 32 bits dans l’accesseur.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">Nombre d'octets dans l'accesseur auquel commencer l'écriture.</param>
      <param name="value" vsli:raw="The value to write.">Valeur à écrire.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">Il n’y a pas assez d’octets après <paramref name="position" /> pour écrire une valeur.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">L’accesseur ne prend pas en charge l’écriture.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">L’accesseur a été supprimé.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt64)">
      <summary vsli:raw="Writes an unsigned 64-bit integer into the accessor.">Écrit un entier non signé 64 bits dans l'accesseur.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">Nombre d'octets dans l'accesseur auquel commencer l'écriture.</param>
      <param name="value" vsli:raw="The value to write.">Valeur à écrire.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">Il n’y a pas assez d’octets après <paramref name="position" /> pour écrire une valeur.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">L’accesseur ne prend pas en charge l’écriture.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">L’accesseur a été supprimé.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write``1(System.Int64,``0@)">
      <summary vsli:raw="Writes a structure into the accessor.">Écrit une structure dans l’accesseur.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">Nombre d'octets dans l'accesseur auquel commencer l'écriture.</param>
      <param name="structure" vsli:raw="The structure to write.">Structure à écrire.</param>
      <typeparam name="T" vsli:raw="The type of structure.">Type de structure.</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes in the accessor after &lt;paramref name=&quot;position&quot; /&gt; to write a structure of type &lt;paramref name=&quot;T&quot; /&gt;.">Il n’y a pas assez d’octets dans l’accesseur après <paramref name="position" /> pour écrire une structure de type <paramref name="T" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">L’accesseur ne prend pas en charge l’écriture.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">L’accesseur a été supprimé.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.WriteArray``1(System.Int64,``0[],System.Int32,System.Int32)">
      <summary vsli:raw="Writes structures from an array of type &lt;paramref name=&quot;T&quot; /&gt; into the accessor.">Écrit les structures d’un tableau de type <paramref name="T" /> dans l’accesseur.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">Nombre d'octets dans l'accesseur auquel commencer l'écriture.</param>
      <param name="array" vsli:raw="The array to write into the accessor.">Tableau à écrire dans l’accesseur.</param>
      <param name="offset" vsli:raw="The index in &lt;paramref name=&quot;array&quot; /&gt; to start writing from.">Dans <paramref name="array" />, index à partir duquel commencer l'écriture.</param>
      <param name="count" vsli:raw="The number of structures in &lt;paramref name=&quot;array&quot; /&gt; to write.">Nombre de structures dans <paramref name="array" /> à écrire.</param>
      <typeparam name="T" vsli:raw="The type of structure.">Type de structure.</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes in the accessor after &lt;paramref name=&quot;position&quot; /&gt; to write the number of structures specified by &lt;paramref name=&quot;count&quot; /&gt;.">Il n’y a pas assez d’octets dans l’accesseur après <paramref name="position" /> pour écrire le nombre de structures spécifié par <paramref name="count" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;offset&quot; /&gt; or &lt;paramref name=&quot;count&quot; /&gt; is less than zero.">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.  

ou - 
<paramref name="offset" /> ou <paramref name="count" /> est inférieur à zéro.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">L’accesseur ne prend pas en charge l’écriture.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">L’accesseur a été supprimé.</exception>
    </member>
    <member name="T:System.IO.UnmanagedMemoryStream">
      <summary>Fournit l'accès aux blocs non managés de la mémoire à partir du code managé.</summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.UnmanagedMemoryStream" />.</summary>
      <exception cref="T:System.Security.SecurityException">L’utilisateur ne dispose pas de l’autorisation nécessaire.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.UnmanagedMemoryStream" /> à l'aide de l'emplacement et de la taille de la mémoire spécifiés.</summary>
      <param name="pointer">Pointeur vers un emplacement de la mémoire non managée.</param>
      <param name="length">Longueur de la mémoire à utiliser.</param>
      <exception cref="T:System.Security.SecurityException">L’utilisateur ne dispose pas de l’autorisation nécessaire.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pointer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">La valeur <paramref name="length" /> est inférieure à zéro.  

ou - 
La longueur (<paramref name="length" />) est suffisamment grande pour provoquer un dépassement de capacité.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.UnmanagedMemoryStream" /> à l'aide des valeurs spécifiées pour l'emplacement, la taille et la quantité totale de la mémoire, ainsi que l'accès au fichier.</summary>
      <param name="pointer">Pointeur vers un emplacement de la mémoire non managée.</param>
      <param name="length">Longueur de la mémoire à utiliser.</param>
      <param name="capacity">Quantité totale de mémoire assignée au flux.</param>
      <param name="access">Une des valeurs de <see cref="T:System.IO.FileAccess" />.</param>
      <exception cref="T:System.Security.SecurityException">L’utilisateur ne dispose pas de l’autorisation nécessaire.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pointer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">La valeur <paramref name="length" /> est inférieure à zéro.  

ou - 
La valeur <paramref name="capacity" /> est inférieure à zéro.  

ou 
La valeur <paramref name="length" /> est supérieure à la valeur <paramref name="capacity" />.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.UnmanagedMemoryStream" /> dans une mémoire tampon sécurisée avec un décalage et une longueur spécifiés.</summary>
      <param name="buffer">Mémoire tampon devant contenir le flux de mémoire non managé.</param>
      <param name="offset">Position d'octet dans la mémoire tampon à partir de laquelle commencer le flux de mémoire non managé.</param>
      <param name="length">Longueur du flux de mémoire non managé.</param>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.UnmanagedMemoryStream" /> dans une mémoire tampon sécurisée avec un décalage, une longueur et l'accès au fichier spécifiés.</summary>
      <param name="buffer">Mémoire tampon devant contenir le flux de mémoire non managé.</param>
      <param name="offset">Position d'octet dans la mémoire tampon à partir de laquelle commencer le flux de mémoire non managé.</param>
      <param name="length">Longueur du flux de mémoire non managé.</param>
      <param name="access">Mode d'accès au fichier sur le flux de mémoire non managé.</param>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.CanRead">
      <summary>Obtient une valeur indiquant si un flux prend en charge la lecture.</summary>
      <returns>
        <see langword="false" /> si l'objet a été créé par un constructeur avec un paramètre <paramref name="access" /> qui n'inclut pas la lecture du flux, et si le flux est fermé ; sinon, <see langword="true" />.</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.CanSeek">
      <summary>Obtient une valeur indiquant si un flux prend en charge la recherche.</summary>
      <returns>
        <see langword="false" /> si le flux est fermé ; sinon, <see langword="true" />.</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.CanWrite">
      <summary>Obtient une valeur indiquant si un flux prend en charge l'écriture.</summary>
      <returns>
        <see langword="false" /> si l'objet a été créé par un constructeur avec une valeur de paramètre <paramref name="access" /> prenant en charge l'écriture, s'il a été créé par un constructeur sans paramètres ou si le flux est fermé ; sinon, <see langword="true" />.</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.Capacity">
      <summary>Obtient la longueur de flux (taille) ou la quantité totale de mémoire assignée au flux (capacité).</summary>
      <returns>Taille ou capacité du flux.</returns>
      <exception cref="T:System.ObjectDisposedException">Le flux est fermé.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
      <summary>Libère les ressources non managées utilisées par <see cref="T:System.IO.UnmanagedMemoryStream" /> et libère éventuellement les ressources managées.</summary>
      <param name="disposing">
        <see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour libérer uniquement les ressources non managées.</param>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Flush">
      <summary>Remplace la méthode <see cref="M:System.IO.Stream.Flush" /> afin qu'aucune action ne soit effectuée.</summary>
      <exception cref="T:System.ObjectDisposedException">Le flux est fermé.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.FlushAsync(System.Threading.CancellationToken)">
      <summary>Substitue la méthode <see cref="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)" /> pour que l'opération soit annulée si spécifié, mais sans qu'aucune autre action ne soit effectuée.</summary>
      <param name="cancellationToken">Jeton pour surveiller les requêtes d'annulation. La valeur par défaut est <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Tâche qui représente l’opération de vidage asynchrone.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.UnmanagedMemoryStream" /> à l'aide d'un pointeur vers un emplacement de la mémoire non managée.</summary>
      <param name="pointer">Pointeur vers un emplacement de la mémoire non managée.</param>
      <param name="length">Longueur de la mémoire à utiliser.</param>
      <param name="capacity">Quantité totale de mémoire assignée au flux.</param>
      <param name="access">Une des valeurs de <see cref="T:System.IO.FileAccess" />.</param>
      <exception cref="T:System.Security.SecurityException">L’utilisateur ne dispose pas de l’autorisation nécessaire.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pointer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">La valeur <paramref name="length" /> est inférieure à zéro.  

ou - 
La valeur <paramref name="capacity" /> est inférieure à zéro.  

ou - 
La valeur <paramref name="length" /> est suffisamment grande pour provoquer un dépassement de capacité.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.UnmanagedMemoryStream" /> dans une mémoire tampon sécurisée avec un décalage, une longueur et l'accès au fichier spécifiés.</summary>
      <param name="buffer">Mémoire tampon devant contenir le flux de mémoire non managé.</param>
      <param name="offset">Position d'octet dans la mémoire tampon à partir de laquelle commencer le flux de mémoire non managé.</param>
      <param name="length">Longueur du flux de mémoire non managé.</param>
      <param name="access">Mode d'accès au fichier sur le flux de mémoire non managé.</param>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.Length">
      <summary>Obtient la longueur des données dans un flux.</summary>
      <returns>Longueur des données dans le flux.</returns>
      <exception cref="T:System.ObjectDisposedException">Le flux est fermé.</exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.Position">
      <summary>Obtient ou définit la position actuelle dans un flux.</summary>
      <returns>Position actuelle dans le flux.</returns>
      <exception cref="T:System.ObjectDisposedException">Le flux est fermé.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">La valeur de la position est inférieure à zéro, ou est supérieure à <see cref="F:System.Int32.MaxValue" /> ou aux résultats du dépassement de capacité, au moment de l’ajout au pointeur actuel.</exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.PositionPointer">
      <summary>Obtient ou définit un pointeur d'octet vers un flux basé sur la position actuelle.</summary>
      <returns>Pointeur d'octet.</returns>
      <exception cref="T:System.IndexOutOfRangeException">La position actuelle dépasse la capacité du flux.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">La position est définie comme non valide dans le flux actuel.</exception>
      <exception cref="T:System.IO.IOException">Une valeur inférieure à la position de départ du flux est affectée au pointeur.</exception>
      <exception cref="T:System.NotSupportedException">Le flux a été initialisé pour une utilisation avec <see cref="T:System.Runtime.InteropServices.SafeBuffer" />. La propriété <see cref="P:System.IO.UnmanagedMemoryStream.PositionPointer" /> est uniquement valide pour les flux de données initialisés avec un pointeur <see cref="T:System.Byte" />.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>Lit le nombre d'octets spécifié dans le tableau indiqué.</summary>
      <param name="buffer">Quand cette méthode est retournée, contient le tableau d’octets spécifié dont les valeurs comprises entre <paramref name="offset" /> et (<paramref name="offset" /> + <paramref name="count" /> - 1) sont remplacées par les octets lus dans la source actuelle. Ce paramètre est passé sans être initialisé.</param>
      <param name="offset">Dans <paramref name="buffer" />, décalage d'octet de base zéro auquel commencer le stockage des données lues dans le flux actuel.</param>
      <param name="count">Nombre maximal d'octets à lire à partir du flux actuel.</param>
      <returns>Nombre total d'octets lus dans la mémoire tampon. Le nombre d'octets peut être inférieur au nombre d'octets demandés si ce nombre n'est pas actuellement disponible ou égal à zéro (0) si la fin du flux a été atteinte.</returns>
      <exception cref="T:System.ObjectDisposedException">Le flux est fermé.</exception>
      <exception cref="T:System.NotSupportedException">La mémoire sous-jacente ne prend pas en charge la lecture.  

ou - 
La propriété <see cref="P:System.IO.UnmanagedMemoryStream.CanRead" /> a la valeur <see langword="false" />.</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="offset" /> est inférieur à zéro.  

ou - 
Le paramètre <paramref name="count" /> est inférieur à zéro.</exception>
      <exception cref="T:System.ArgumentException">La longueur du tableau mis en mémoire tampon moins le paramètre <paramref name="offset" /> est inférieure au paramètre <paramref name="count" />.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Read(System.Span{System.Byte})">
      <summary>Lit tous les octets de ce flux de mémoire non managé dans la plage d’octets spécifiée.</summary>
      <param name="destination">Lorsque cette méthode est retournée, cette plage contient tous les octets du flux de mémoire non managé.</param>
      <returns>Nombre total d’octets lus dans la destination.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>Lit de manière asynchrone le nombre d'octets spécifié dans le tableau indiqué.</summary>
      <param name="buffer">Mémoire tampon où écrire les données.</param>
      <param name="offset">Dans <paramref name="buffer" />, décalage d'octet auquel commencer l'écriture des données à partir du flux.</param>
      <param name="count">Nombre maximal d'octets à lire.</param>
      <param name="cancellationToken">Jeton pour surveiller les requêtes d'annulation. La valeur par défaut est <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Tâche qui représente l'opération de lecture asynchrone. La valeur du paramètre <paramref name="TResult" /> contient le nombre total d'octets lus dans la mémoire tampon. La valeur du résultat peut être inférieure au nombre d'octets demandés si le nombre d'octets actuellement disponibles est inférieur au nombre demandé, ou elle peut avoir la valeur 0 (zéro) si la fin du flux a été atteinte.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)">
      <summary>Lit de façon asynchrone les octets du flux de mémoire non managé dans la région de la mémoire.</summary>
      <param name="buffer">Quand la méthode asynchrone se termine, cette région de mémoire contient tous les octets lus dans le flux de mémoire non managé.</param>
      <param name="cancellationToken">Jeton pour surveiller les requêtes d'annulation. La valeur par défaut est <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Tâche qui représente l’opération de lecture asynchrone et wrappe le nombre total d’octets lus dans la mémoire tampon.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.ReadByte">
      <summary>Lit un octet à partir d'un flux et avance d'un octet la position au sein du flux, ou retourne -1 s'il se situe à la fin du flux.</summary>
      <returns>Conversion de type (transtypage) de l'octet non signé en objet <see cref="T:System.Int32" />, ou -1 si la fin du flux a été atteinte.</returns>
      <exception cref="T:System.ObjectDisposedException">Le flux est fermé.</exception>
      <exception cref="T:System.NotSupportedException">La mémoire sous-jacente ne prend pas en charge la lecture.  

ou -

 La position actuelle se situe à la fin du flux.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>Affecte la valeur donnée à la position actuelle du flux.</summary>
      <param name="offset">Point par rapport à <c>origin</c> à partir duquel la recherche doit commencer.</param>
      <param name="loc">Spécifie le début, la fin ou la position actuelle comme point de référence pour<c>origin</c>, en utilisant une valeur de type <see cref="T:System.IO.SeekOrigin" />.</param>
      <returns>Nouvelle position dans le flux.</returns>
      <exception cref="T:System.IO.IOException">Tentative de recherche avant le début du flux.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">La valeur <paramref name="offset" /> dépasse la taille maximale du flux.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="loc" /> n'est pas valide.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux est fermé.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
      <summary>Affecte la valeur spécifiée à la longueur d'un flux.</summary>
      <param name="value">Longueur du flux.</param>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S s’est produite.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux est fermé.</exception>
      <exception cref="T:System.NotSupportedException">La mémoire sous-jacente ne prend pas en charge l’écriture.  

ou - 
Une tentative d’écriture dans le flux a été effectuée, et la propriété <see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /> est <see langword="false" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">La valeur spécifiée (<paramref name="value" />) dépasse la capacité du flux.  

ou - 
La valeur spécifiée (<paramref name="value" />) est négative.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Écrit un bloc d'octets dans le flux actuel en utilisant les données d'une mémoire tampon.</summary>
      <param name="buffer">Tableau d'octets à partir duquel les octets peuvent être copiés vers le flux actuel.</param>
      <param name="offset">Dans la mémoire tampon, offset à partir duquel commence la copie des octets dans le flux actuel.</param>
      <param name="count">Nombre d'octets à écrire dans le flux actuel.</param>
      <exception cref="T:System.ObjectDisposedException">Le flux est fermé.</exception>
      <exception cref="T:System.NotSupportedException">La mémoire sous-jacente ne prend pas en charge l’écriture.  

ou - 
Une tentative d’écriture dans le flux a été effectuée, et la propriété <see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /> est <see langword="false" />.  

ou - 
La valeur <paramref name="count" /> est supérieure à la capacité du flux.  


ou 
La position est à la fin de la capacité du flux.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Un des paramètres spécifiés est inférieur à zéro.</exception>
      <exception cref="T:System.ArgumentException">Le paramètre <paramref name="offset" /> moins la longueur du paramètre <paramref name="buffer" /> est inférieur au paramètre <paramref name="count" />.</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Write(System.ReadOnlySpan{System.Byte})">
      <summary>Écrit un bloc d’octets dans le flux de mémoire non managé actuel à l’aide des données de la plage d’octets fournie.</summary>
      <param name="source">Plage d’octets à partir de laquelle copier les octets dans le flux de mémoire non managé actuel.</param>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>Écrit de façon asynchrone une séquence d'octets dans le flux actuel, avance la position actuelle dans ce flux du nombre d'octets écrits et surveille les demandes d'annulation.</summary>
      <param name="buffer">Mémoire tampon dont sont issues les données à écrire.</param>
      <param name="offset">Dans <paramref name="buffer" />, décalage d'octet de base zéro à partir duquel commencer la copie des octets dans le flux.</param>
      <param name="count">Nombre maximal d'octets à écrire.</param>
      <param name="cancellationToken">Jeton pour surveiller les requêtes d'annulation. La valeur par défaut est <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Tâche qui représente l’opération d’écriture asynchrone.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
      <summary>Écrit de façon asynchrone une plage d’octets dans le flux actuel, avance la position actuelle dans ce flux du nombre d’octets écrits et supervise les demandes d’annulation.</summary>
      <param name="buffer">Mémoire tampon dont sont issues les données à écrire.</param>
      <param name="cancellationToken">Jeton pour surveiller les requêtes d'annulation. La valeur par défaut est <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Tâche qui représente l’opération d’écriture asynchrone.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
      <summary>Écrit un octet à la position actuelle dans le flux de fichier.</summary>
      <param name="value">Valeur d'octet écrite dans le flux.</param>
      <exception cref="T:System.ObjectDisposedException">Le flux est fermé.</exception>
      <exception cref="T:System.NotSupportedException">La mémoire sous-jacente ne prend pas en charge l’écriture.  

ou - 
Une tentative d’écriture dans le flux a été effectuée, et la propriété <see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /> est <see langword="false" />.  

ou 
La position actuelle se situe à la fin de la capacité du flux.</exception>
      <exception cref="T:System.IO.IOException">La valeur fournie (<paramref name="value" />) provoque un dépassement de la capacité maximale du flux.</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.IDispatchConstantAttribute">
      <summary vsli:raw="Indicates that the default value for the attributed field or parameter is an instance of &lt;see cref=&quot;T:System.Runtime.InteropServices.DispatchWrapper&quot; /&gt;, where the &lt;see cref=&quot;P:System.Runtime.InteropServices.DispatchWrapper.WrappedObject&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Indique que la valeur par défaut pour le champ ou paramètre avec attributs est une instance de <see cref="T:System.Runtime.InteropServices.DispatchWrapper" />, où <see cref="P:System.Runtime.InteropServices.DispatchWrapper.WrappedObject" /> est <see langword="null" />.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IDispatchConstantAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.CompilerServices.IDispatchConstantAttribute&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.CompilerServices.IDispatchConstantAttribute" />.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IDispatchConstantAttribute.Value">
      <summary vsli:raw="Gets the &lt;see langword=&quot;IDispatch&quot; /&gt; constant stored in this attribute.">Obtient la constante <see langword="IDispatch" /> stockée dans cet attribut.</summary>
      <returns vsli:raw="The &lt;see langword=&quot;IDispatch&quot; /&gt; constant stored in this attribute. Only &lt;see langword=&quot;null&quot; /&gt; is allowed for an &lt;see langword=&quot;IDispatch&quot; /&gt; constant value.">Constante <see langword="IDispatch" /> stockée dans cet attribut. <see langword="null" /> est la seule valeur autorisée pour une valeur de constante <see langword="IDispatch" />.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IUnknownConstantAttribute">
      <summary vsli:raw="Indicates that the default value for the attributed field or parameter is an instance of &lt;see cref=&quot;T:System.Runtime.InteropServices.UnknownWrapper&quot; /&gt;, where the &lt;see cref=&quot;P:System.Runtime.InteropServices.UnknownWrapper.WrappedObject&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;. This class cannot be inherited.">Indique que la valeur par défaut pour le champ ou paramètre avec attributs est une instance de <see cref="T:System.Runtime.InteropServices.UnknownWrapper" />, où <see cref="P:System.Runtime.InteropServices.UnknownWrapper.WrappedObject" /> est <see langword="null" />. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IUnknownConstantAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.CompilerServices.IUnknownConstantAttribute&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.CompilerServices.IUnknownConstantAttribute" />.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IUnknownConstantAttribute.Value">
      <summary vsli:raw="Gets the &lt;see langword=&quot;IUnknown&quot; /&gt; constant stored in this attribute.">Obtient la constante <see langword="IUnknown" /> stockée dans cet attribut.</summary>
      <returns vsli:raw="The &lt;see langword=&quot;IUnknown&quot; /&gt; constant stored in this attribute. Only &lt;see langword=&quot;null&quot; /&gt; is allowed for an &lt;see langword=&quot;IUnknown&quot; /&gt; constant value.">Constante <see langword="IUnknown" /> stockée dans cet attribut. <see langword="null" /> est la seule valeur autorisée pour une valeur de constante <see langword="IUnknown" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute">
      <summary vsli:raw="Allows an unmanaged method to call a managed method.">Permet à une méthode non managée d’appeler une méthode managée.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ArrayWithOffset">
      <summary vsli:raw="Encapsulates an array and an offset within the specified array.">Encapsule un tableau et un offset dans le tableau spécifié.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.#ctor(System.Object,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; structure.">Initialise une nouvelle instance de la structure <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</summary>
      <param name="array" vsli:raw="A managed array.">Tableau managé.</param>
      <param name="offset" vsli:raw="The offset in bytes, of the element to be passed through platform invoke.">Décalage en octets de l’élément à passer par appel de plateforme.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The array is larger than 2 gigabytes (GB).">La taille du tableau est supérieure à 2 gigaoctets (Go).</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.Equals(System.Object)">
      <summary vsli:raw="Indicates whether the specified object matches the current &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object.">Indique si l’objet spécifié correspond à l’objet <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> actif.</summary>
      <param name="obj" vsli:raw="Object to compare with this instance.">Objet à comparer à cette instance.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object matches this &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’objet correspond à <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.Equals(System.Runtime.InteropServices.ArrayWithOffset)">
      <summary vsli:raw="Indicates whether the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object matches the current instance.">Indique si l’objet <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> spécifié correspond à l’instance active.</summary>
      <param name="obj" vsli:raw="An &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object to compare with this instance.">Objet <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> à comparer à cette instance.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object matches the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’objet <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> spécifié correspond à l’instance active ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetArray">
      <summary vsli:raw="Returns the managed array referenced by this &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt;.">Retourne le tableau managé référencé par ce <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</summary>
      <returns vsli:raw="The managed array this instance references.">Tableau managé référencé par cette instance.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetHashCode">
      <summary vsli:raw="Returns a hash code for this value type.">Retourne un code de hachage pour ce type valeur.</summary>
      <returns vsli:raw="The hash code for this instance.">Code de hachage de cette instance.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetOffset">
      <summary vsli:raw="Returns the offset provided when this &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; was constructed.">Retourne le décalage fourni quand ce <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> a été construit.</summary>
      <returns vsli:raw="The offset for this instance.">Décalage pour cette instance.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.op_Equality(System.Runtime.InteropServices.ArrayWithOffset,System.Runtime.InteropServices.ArrayWithOffset)">
      <summary vsli:raw="Determines whether two specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; objects have the same value.">Détermine si deux objets <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> spécifiés ont la même valeur.</summary>
      <param name="a" vsli:raw="An &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object to compare with the &lt;paramref name=&quot;b&quot; /&gt; parameter.">Objet <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> à comparer au paramètre <paramref name="b" />.</param>
      <param name="b" vsli:raw="An &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object to compare with the &lt;paramref name=&quot;a&quot; /&gt; parameter.">Objet <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> à comparer au paramètre <paramref name="a" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of &lt;paramref name=&quot;a&quot; /&gt; is the same as the value of &lt;paramref name=&quot;b&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la valeur de <paramref name="a" /> est égale à la valeur de <paramref name="b" /> ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.op_Inequality(System.Runtime.InteropServices.ArrayWithOffset,System.Runtime.InteropServices.ArrayWithOffset)">
      <summary vsli:raw="Determines whether two specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; objects no not have the same value.">Détermine si deux objets <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> spécifiés n’ont pas la même valeur.</summary>
      <param name="a" vsli:raw="An &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object to compare with the &lt;paramref name=&quot;b&quot; /&gt; parameter.">Objet <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> à comparer au paramètre <paramref name="b" />.</param>
      <param name="b" vsli:raw="An &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object to compare with the &lt;paramref name=&quot;a&quot; /&gt; parameter.">Objet <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> à comparer au paramètre <paramref name="a" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of &lt;paramref name=&quot;a&quot; /&gt; is not the same as the value of &lt;paramref name=&quot;b&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la valeur de <paramref name="a" /> n’est pas la même que la valeur de <paramref name="b" /> ; sinon <see langword="false" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.AutomationProxyAttribute">
      <summary vsli:raw="Specifies whether the type should be marshaled using the Automation marshaler or a custom proxy and stub.">Indique si le type doit être marshalé en utilisant Automation Marshaler ou un proxy et un stub personnalisés.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.AutomationProxyAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.AutomationProxyAttribute&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.AutomationProxyAttribute" />.</summary>
      <param name="val" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the class should be marshaled using the Automation Marshaler; &lt;see langword=&quot;false&quot; /&gt; if a proxy stub marshaler should be used.">
        <see langword="true" /> si la classe doit être marshalée à l'aide de Automation Marshaler ; <see langword="false" /> si un marshaleur de proxy/stub doit être utilisé.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.AutomationProxyAttribute.Value">
      <summary vsli:raw="Gets a value indicating the type of marshaler to use.">Obtient une valeur indiquant le type de marshaleur à utiliser.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the class should be marshaled using the Automation Marshaler; &lt;see langword=&quot;false&quot; /&gt; if a proxy stub marshaler should be used.">
        <see langword="true" /> si la classe doit être marshalée à l'aide de Automation Marshaler ; <see langword="false" /> si un marshaleur de proxy/stub doit être utilisé.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.BestFitMappingAttribute">
      <summary vsli:raw="Controls whether Unicode characters are converted to the closest matching ANSI characters.">Détermine si les caractères Unicode sont convertis en caractères ANSI équivalents les plus proches.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.BestFitMappingAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.BestFitMappingAttribute&quot; /&gt; class set to the value of the &lt;see cref=&quot;P:System.Runtime.InteropServices.BestFitMappingAttribute.BestFitMapping&quot; /&gt; property.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.BestFitMappingAttribute" /> à laquelle est attribuée la valeur de la propriété <see cref="P:System.Runtime.InteropServices.BestFitMappingAttribute.BestFitMapping" />.</summary>
      <param name="BestFitMapping" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that best-fit mapping is enabled; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> pour indiquer que le mappage ajusté est activé ; sinon <see langword="false" />. La valeur par défaut est <see langword="true" />.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.BestFitMappingAttribute.BestFitMapping">
      <summary vsli:raw="Gets the best-fit mapping behavior when converting Unicode characters to ANSI characters.">Obtient le comportement de mappage ajusté lors de la conversion de caractères Unicode en caractères ANSI.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if best-fit mapping is enabled; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> si le mappage ajusté est activé ; sinon <see langword="false" />. La valeur par défaut est <see langword="true" />.</returns>
    </member>
    <member name="F:System.Runtime.InteropServices.BestFitMappingAttribute.ThrowOnUnmappableChar">
      <summary vsli:raw="Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI '?' character.">Active ou désactive la levée d'une exception sur un caractère Unicode non mappable converti en caractère ANSI '?'.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.BStrWrapper">
      <summary vsli:raw="Marshals data of type &lt;see langword=&quot;VT_BSTR&quot; /&gt; from managed to unmanaged code. This class cannot be inherited.">Marshale des données de type <see langword="VT_BSTR" /> de code managé en code non managé. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.BStrWrapper.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.BStrWrapper&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Object&quot; /&gt; object.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.BStrWrapper" /> avec l'objet <see cref="T:System.Object" /> spécifié.</summary>
      <param name="value" vsli:raw="The object to wrap and marshal as &lt;see langword=&quot;VT_BSTR&quot; /&gt;.">Objet à inclure dans un wrapper et à marshaler en tant que <see langword="VT_BSTR" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.BStrWrapper.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.BStrWrapper&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.String&quot; /&gt; object.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.BStrWrapper" /> avec l'objet <see cref="T:System.String" /> spécifié.</summary>
      <param name="value" vsli:raw="The object to wrap and marshal as &lt;see langword=&quot;VT_BSTR&quot; /&gt;.">Objet à inclure dans un wrapper et à marshaler en tant que <see langword="VT_BSTR" />.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.BStrWrapper.WrappedObject">
      <summary vsli:raw="Gets the wrapped &lt;see cref=&quot;T:System.String&quot; /&gt; object to marshal as type &lt;see langword=&quot;VT_BSTR&quot; /&gt;.">Obtient l'objet <see cref="T:System.String" /> encapsulé à marshaler comme type <see langword="VT_BSTR" />.</summary>
      <returns vsli:raw="The object that is wrapped by &lt;see cref=&quot;T:System.Runtime.InteropServices.BStrWrapper&quot; /&gt;.">Objet inclus dans un wrapper par <see cref="T:System.Runtime.InteropServices.BStrWrapper" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CallingConvention">
      <summary vsli:raw="Specifies the calling convention required to call methods implemented in unmanaged code.">Spécifie la convention d'appel nécessaire pour appeler les méthodes implémentées en code non managé.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.Cdecl">
      <summary vsli:raw="The caller cleans the stack. This enables calling functions with &lt;see langword=&quot;varargs&quot; /&gt;, which makes it appropriate to use for methods that accept a variable number of parameters, such as &lt;see langword=&quot;Printf&quot; /&gt;.">L'appelant nettoie la pile. Cette procédure active les fonctions d'appel avec <see langword="varargs" /> qu'il convient d'utiliser pour les méthodes qui acceptent un nombre variable de paramètres tels que <see langword="Printf" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.FastCall">
      <summary vsli:raw="This calling convention is not supported.">Cette conversion d'appel n'est pas prise en charge.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.StdCall">
      <summary vsli:raw="The callee cleans the stack.">L'appelé nettoie la pile. Il s'agit de la convention par défaut pour appeler les fonctions non managées avec appel de code non managé.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.ThisCall">
      <summary vsli:raw="The first parameter is the &lt;see langword=&quot;this&quot; /&gt; pointer and is stored in register ECX. Other parameters are pushed on the stack. This calling convention is used to call methods on classes exported from an unmanaged DLL.">Le premier paramètre est le pointeur <see langword="this" /> et est stocké dans le Registre ECX. D'autres paramètres font l'objet d'un push sur la pile. Cette convention d'appel est utilisée pour appeler des méthodes sur des classes exportées à partir d'une DLL non managée.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.Winapi">
      <summary vsli:raw="This member is not actually a calling convention, but instead uses the default platform calling convention.">Ce membre n'est pas réellement une convention d'appel mais il utilise en revanche la convention d'appel de code non managé par défaut. Par exemple, sur Windows, le champ par défaut est <see cref="F:System.Runtime.InteropServices.CallingConvention.StdCall" /> et sur Windows CE .NET, il s'agit du champ <see cref="F:System.Runtime.InteropServices.CallingConvention.Cdecl" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
      <summary vsli:raw="Indicates the type of class interface to be generated for a class exposed to COM, if an interface is generated at all.">Indique le type d'interface de classe à générer pour une classe exposée à COM, si une interface est effectivement générée.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Int16)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceType&quot; /&gt; enumeration value.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> avec la valeur d'énumération <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> spécifiée.</summary>
      <param name="classInterfaceType" vsli:raw="Describes the type of interface that is generated for a class.">Décrit le type d'interface qui est généré pour une classe.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Runtime.InteropServices.ClassInterfaceType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceType&quot; /&gt; enumeration member.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> avec le membre de l'énumération <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> spécifié.</summary>
      <param name="classInterfaceType" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceType&quot; /&gt; values that describes the type of interface that is generated for a class.">Une des valeurs <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> qui décrit le type d'interface qui est généré pour une classe.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ClassInterfaceAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceType&quot; /&gt; value that describes which type of interface should be generated for the class.">Obtient la valeur <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> qui décrit le type d'interface qui doit être généré pour la classe.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceType&quot; /&gt; value that describes which type of interface should be generated for the class.">Valeur <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> qui décrit le type d'interface qui doit être généré pour la classe.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ClassInterfaceType">
      <summary vsli:raw="Identifies the type of class interface that is generated for a class.">Identifie le type d'interface de classe qui est généré pour une classe.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch">
      <summary vsli:raw="&lt;para&gt;Indicates that the class only supports late binding for COM clients. A &lt;see langword=&quot;dispinterface&quot; /&gt; for the class is automatically exposed to COM clients on request. The type library produced by Tlbexp.exe (Type Library Exporter) does not contain type information for the &lt;see langword=&quot;dispinterface&quot; /&gt; in order to prevent clients from caching the DISPIDs of the interface. The &lt;see langword=&quot;dispinterface&quot; /&gt; does not exhibit the versioning problems described in &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceAttribute&quot; /&gt; because clients can only late-bind to the interface.&lt;/para&gt;&lt;para&gt;This is the default setting for &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceAttribute&quot; /&gt;.&lt;/para&gt;">Indique que la classe ne prend en charge que la liaison tardive pour des clients COM. Une <see langword="dispinterface" /> pour la classe est automatiquement exposée aux clients COM à la demande. La bibliothèque de types générée par l’outil Tlbexp.exe (exportateur de bibliothèques de types) ne contient pas d’informations de type pour la <see langword="dispinterface" /> afin d’empêcher les clients de mettre en cache les DISPID de l’interface. La <see langword="dispinterface" /> ne présente pas les problèmes de versioning décrits dans <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> car les clients ne peuvent se lier à l'interface que par liaison tardive.
Il s’agit d’un paramètre par défaut pour <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDual">
      <summary vsli:raw="Indicates that a dual class interface is automatically generated for the class and exposed to COM. Type information is produced for the class interface and published in the type library. Using &lt;see langword=&quot;AutoDual&quot; /&gt; is strongly discouraged because of the versioning limitations described in &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceAttribute&quot; /&gt;.">Indique qu'une interface de classe double est automatiquement générée pour la classe et exposée à COM. Les informations de type sont générées pour l'interface de classe et publiées dans la bibliothèque de types. L'utilisation de <see langword="AutoDual" /> est fortement déconseillée en raison des limitations de versioning décrites dans <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.None">
      <summary vsli:raw="&lt;para&gt;Indicates that no class interface is generated for the class. If no interfaces are implemented explicitly, the class can only provide late-bound access through the &lt;see langword=&quot;IDispatch&quot; /&gt; interface. This is the recommended setting for &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceAttribute&quot; /&gt;. Using &lt;see langword=&quot;ClassInterfaceType.None&quot; /&gt; is the only way to expose functionality through interfaces implemented explicitly by the class.&lt;/para&gt;&lt;para&gt;Tlbexp.exe (Type Library Exporter) exposes the first public, COM-visible interface implemented by the class as the default interface of the coclass. In .NET Framework 2.0 and later versions, you can specify the default interface exposed to COM by using the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute&quot; /&gt; attribute. If the class implements no interfaces, the first public, COM-visible interface implemented by a base class becomes the default interface (starting with the most recently derived base class and working backward). Tlbexp.exe exposes &lt;see langword=&quot;_Object&quot; /&gt; as the default interface if neither the class nor its base classes implement interfaces.&lt;/para&gt;">Indique qu'aucune interface de classe n'est générée pour la classe. Si aucune interface n'est explicitement implémentée, la classe ne permet que l'accès par liaison tardive à l'aide de l'interface <see langword="IDispatch" />. Il s'agit du paramètre recommandé pour <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" />. L'utilisation de <see langword="ClassInterfaceType.None" /> est la seule manière d'exposer les fonctionnalités via des interfaces implémentées explicitement par la classe.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CoClassAttribute">
      <summary vsli:raw="Specifies the class identifier of a coclass imported from a type library.">Spécifie l'identificateur de classe d'une coclasse importée à partir d'une bibliothèque de types.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CoClassAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.CoClassAttribute&quot; /&gt; with the class identifier of the original coclass.">Initialise une nouvelle instance de <see cref="T:System.Runtime.InteropServices.CoClassAttribute" /> avec l'identificateur de classe de la coclasse d'origine.</summary>
      <param name="coClass" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that contains the class identifier of the original coclass.">
        <see cref="T:System.Type" /> contenant l'identificateur de classe de la coclasse d'origine.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.CoClassAttribute.CoClass">
      <summary vsli:raw="Gets the class identifier of the original coclass.">Obtient l'identificateur de classe de la coclasse d'origine.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; containing the class identifier of the original coclass.">
        <see cref="T:System.Type" /> contenant l'identificateur de classe de la coclasse d'origine.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComAliasNameAttribute">
      <summary vsli:raw="Indicates the COM alias for a parameter or field type.">Indique l’alias COM pour un type de paramètre ou de champ.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAliasNameAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComAliasNameAttribute&quot; /&gt; class with the alias for the attributed field or parameter.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.ComAliasNameAttribute" /> avec l'alias du champ ou du paramètre avec attributs.</summary>
      <param name="alias" vsli:raw="The alias for the field or parameter as found in the type library when it was imported.">L'alias du champ ou du paramètre tel qu'il figurait dans la bibliothèque de types au moment de son importation.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAliasNameAttribute.Value">
      <summary vsli:raw="Gets the alias for the field or parameter as found in the type library when it was imported.">Obtient l'alias du champ ou du paramètre tel qu'il figurait dans la bibliothèque de types au moment de son importation.</summary>
      <returns vsli:raw="The alias for the field or parameter as found in the type library when it was imported.">L'alias du champ ou du paramètre tel qu'il figurait dans la bibliothèque de types au moment de son importation.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComAwareEventInfo">
      <summary vsli:raw="Permits late-bound registration of an event handler.">Autorise l’inscription à liaison tardive d’un gestionnaire d’événements.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.#ctor(System.Type,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComAwareEventInfo&quot; /&gt; class by using the specified type and a name of the event on the type.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> en utilisant le type spécifié et un nom d’événement sur le type.</summary>
      <param name="type" vsli:raw="The type of object.">Type d’objet.</param>
      <param name="eventName" vsli:raw="The name of an event on &lt;paramref name=&quot;type&quot; /&gt;.">Nom d’un événement sur <paramref name="type" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler(System.Object,System.Delegate)">
      <summary vsli:raw="Attaches an event handler to a COM object.">Joint un gestionnaire d’événements à un objet COM.</summary>
      <param name="target" vsli:raw="The target object that the event delegate should bind to.">Objet cible avec lequel le délégué d’événement doit créer une liaison.</param>
      <param name="handler" vsli:raw="The event delegate.">Délégué d’événement.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Attributes">
      <summary vsli:raw="Gets the attributes for this event.">Obtient les attributs de cet événement.</summary>
      <returns vsli:raw="The read-only attributes for this event.">Attributs en lecture seule de cet événement.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.DeclaringType">
      <summary vsli:raw="Gets the class that declares this member.">Obtient la classe qui déclare ce membre.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object for the class that declares this member.">Objet <see cref="T:System.Type" /> de la classe qui déclare ce membre.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetAddMethod(System.Boolean)">
      <summary vsli:raw="Gets the method that was used to add an event handler delegate to the event source.">Obtient la méthode utilisée pour ajouter un délégué de gestionnaires d’événements à la source de l’événement.</summary>
      <param name="nonPublic" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return non-public methods; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour retourner des méthodes non publiques ; sinon, <see langword="false" />.</param>
      <returns vsli:raw="The method that was used to add an event handler delegate to the event source.">Méthode utilisée pour ajouter un délégué de gestionnaires d’événements à la source de l’événement.</returns>
      <exception cref="T:System.MethodAccessException" vsli:raw="&lt;paramref name=&quot;nonPublic&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt; and the method used to add an event handler delegate is non-public, but the caller does not have permission to reflect on non-public methods.">
        <paramref name="nonPublic" /> est <see langword="true" />, la méthode utilisée pour ajouter un délégué de gestionnaire d’événements est non publique mais l’appelant n’est pas autorisé à refléter les méthodes non publiques.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="When overridden in a derived class, gets an array that contains all the custom attributes that are applied to this member.">En cas de substitution dans une classe dérivée, obtient un tableau qui contient tous les attributs personnalisés appliqués à ce membre.</summary>
      <param name="inherit" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to search this member's inheritance chain to find the attributes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour rechercher la chaîne d’héritage de ce membre afin de trouver les attributs ; sinon, <see langword="false" />.</param>
      <returns vsli:raw="An array that contains all the custom attributes, or an array that has no elements if no attributes were defined.">Tableau contenant tous les attributs personnalisés ou tableau ne contenant aucun élément si aucun attribut n’a été défini.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This member belongs to a type that is loaded into the reflection-only context. See How to: Load Assemblies into the Reflection-Only Context.">Ce membre appartient à un type qui est chargé dans le contexte de réflexion uniquement. Voir Guide pratique pour charger des assemblys dans le contexte de réflexion uniquement.</exception>
      <exception cref="T:System.TypeLoadException" vsli:raw="A custom attribute type cannot be loaded.">Un type d’attribut personnalisé ne peut pas être chargé.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="When overridden in a derived class, gets an array that contains all the custom attributes of the specified type that are applied to this member.">En cas de substitution dans une classe dérivée, obtient un tableau qui contient tous les attributs personnalisés du type spécifié qui sont appliqués à ce membre.</summary>
      <param name="attributeType" vsli:raw="The attribute type to search for. Only attributes that are assignable to this type can be returned.">Type d’attribut à rechercher. Seuls les attributs pouvant être assignés à ce type peuvent être retournés.</param>
      <param name="inherit" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to search this member's inheritance chain to find the attributes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour rechercher la chaîne d’héritage de ce membre afin de trouver les attributs ; sinon, <see langword="false" />.</param>
      <returns vsli:raw="An array that contains all the custom attributes of the specified type, or an array that has no elements if no attributes were defined.">Tableau contenant tous les attributs personnalisés du type spécifié ou tableau ne contenant aucun élément si aucun attribut n’a été défini.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="attributeType" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This member belongs to a type that is loaded into the reflection-only context. See How to: Load Assemblies into the Reflection-Only Context">Ce membre appartient à un type qui est chargé dans le contexte de réflexion uniquement. Voir Guide pratique pour charger des assemblys dans le contexte de réflexion uniquement.</exception>
      <exception cref="T:System.TypeLoadException" vsli:raw="A custom attribute type cannot be loaded.">Un type d’attribut personnalisé ne peut pas être chargé.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributesData">
      <summary vsli:raw="Returns a list of &lt;see cref=&quot;T:System.Reflection.CustomAttributeData&quot; /&gt; objects for the current &lt;see cref=&quot;T:System.Runtime.InteropServices.ComAwareEventInfo&quot; /&gt;.">Retourne une liste d’objets <see cref="T:System.Reflection.CustomAttributeData" /> pour le <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> actif.</summary>
      <returns vsli:raw="A generic list of &lt;see cref=&quot;T:System.Reflection.CustomAttributeData&quot; /&gt; objects representing data about the attributes that have been applied to the current &lt;see cref=&quot;T:System.Runtime.InteropServices.ComAwareEventInfo&quot; /&gt;.">Liste générique d’objets <see cref="T:System.Reflection.CustomAttributeData" /> représentant des données sur les attributs qui ont été appliqués au <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> actif.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetOtherMethods(System.Boolean)">
      <summary vsli:raw="Returns the public or non-public methods that have been associated with an event in metadata.">Retourne les méthodes publiques ou non publiques qui ont été associées à un événement dans les métadonnées.</summary>
      <param name="nonPublic" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include non-public methods; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour inclure les méthodes non publiques ; sinon, <see langword="false" />.</param>
      <returns vsli:raw="An array representing the methods that have been associated with the event in metadata. If there are no such methods, an empty array is returned.">Tableau représentant les méthodes qui ont été associées à l’événement dans les métadonnées. En l’absence de telles méthodes, un tableau vide est retourné.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRaiseMethod(System.Boolean)">
      <summary vsli:raw="When overridden in a derived class, returns the method that was called when the event was raised.">En cas de substitution dans une classe dérivée, retourne la méthode appelée lorsque l’événement a été déclenché.</summary>
      <param name="nonPublic" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return non-public methods; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour retourner des méthodes non publiques ; sinon, <see langword="false" />.</param>
      <returns vsli:raw="The object that was called when the event was raised.">Objet appelé lorsque l’événement a été déclenché.</returns>
      <exception cref="T:System.MethodAccessException" vsli:raw="&lt;paramref name=&quot;nonPublic&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt; and the method used to add an event handler delegate is non-public, but the caller does not have permission to reflect on non-public methods.">
        <paramref name="nonPublic" /> est <see langword="true" />, la méthode utilisée pour ajouter un délégué de gestionnaire d’événements est non publique mais l’appelant n’est pas autorisé à refléter les méthodes non publiques.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRemoveMethod(System.Boolean)">
      <summary vsli:raw="When overridden in a derived class, retrieves the &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; object for removing a method of the event.">En cas de substitution dans une classe dérivée, récupère l’objet <see cref="T:System.Reflection.MethodInfo" /> pour supprimer une méthode de l’événement.</summary>
      <param name="nonPublic" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return non-public methods; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour retourner des méthodes non publiques ; sinon, <see langword="false" />.</param>
      <returns vsli:raw="The method that was used to remove an event handler delegate from the event source.">Méthode utilisée pour supprimer un délégué de gestionnaires d’événements de la source d’événements.</returns>
      <exception cref="T:System.MethodAccessException" vsli:raw="&lt;paramref name=&quot;nonPublic&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt; and the method used to add an event handler delegate is non-public, but the caller does not have permission to reflect on non-public methods.">
        <paramref name="nonPublic" /> est <see langword="true" />, la méthode utilisée pour ajouter un délégué de gestionnaire d’événements est non publique mais l’appelant n’est pas autorisé à refléter les méthodes non publiques.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Indicates whether one or more instances of the specified attribute are applied to this member.">Indique si une ou plusieurs instances de l’attribut spécifié sont appliquées à ce membre.</summary>
      <param name="attributeType" vsli:raw="The attribute type to search for.">Type d’attribut à rechercher.</param>
      <param name="inherit" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to search this member's inheritance chain to find the attributes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour rechercher la chaîne d’héritage de ce membre afin de trouver les attributs ; sinon, <see langword="false" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified attribute has been applied to this member; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’attribut spécifié a été appliqué à ce membre ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.MetadataToken">
      <summary vsli:raw="Gets the metadata token associated with the current &lt;see cref=&quot;T:System.Runtime.InteropServices.ComAwareEventInfo&quot; /&gt; object.">Obtient le jeton de métadonnées associé à l’objet <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> actif.</summary>
      <returns vsli:raw="A 32-bit Integer that represents the metadata token.">Entier 32 bits qui représente le jeton de métadonnées.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Module">
      <summary vsli:raw="Gets the module associated with the current &lt;see cref=&quot;T:System.Runtime.InteropServices.ComAwareEventInfo&quot; /&gt; object.">Obtient le module associé à l’objet <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> actif.</summary>
      <returns vsli:raw="The module associated with the current &lt;see cref=&quot;T:System.Runtime.InteropServices.ComAwareEventInfo&quot; /&gt; object.">Module associé à l’objet en <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> cours.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Name">
      <summary vsli:raw="Gets the name of the current member.">Obtient le nom du membre actuel.</summary>
      <returns vsli:raw="The name of this member.">Nom de ce membre.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.ReflectedType">
      <summary vsli:raw="Gets the class object that was used to initialize this instance.">Obtient l’objet de classe utilisé pour initialiser cette instance.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object that was used to initialize the current object.">Objet <see cref="T:System.Type" /> qui a été utilisé pour initialiser l'objet actif.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)">
      <summary vsli:raw="Detaches an event handler from a COM object.">Détache un gestionnaire d’événements à partir d’un objet COM.</summary>
      <param name="target" vsli:raw="The target object that the event delegate is bound to.">Objet cible auquel le délégué d’événement est lié.</param>
      <param name="handler" vsli:raw="The event delegate.">Délégué d’événement.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The event does not have a public &lt;see langword=&quot;remove&quot; /&gt; accessor.">L’événement ne dispose pas d’un accesseur <see langword="remove" /> public.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The handler that was passed in cannot be used.">Impossible d’utiliser le gestionnaire qui a été transmis.</exception>
      <exception cref="T:System.Reflection.TargetException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt; and the event is not static.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; is not declared on the target.&#xA;&#xA;Note: In .NET for Windows Store apps or the Portable Class Library, catch &lt;see cref=&quot;T:System.Exception&quot; /&gt; instead.">Dans .NET pour les applications du Windows Store ou la Bibliothèque de classes portable, interceptez <see cref="T:System.Exception" /> à la place.  


            

 Le paramètre <paramref name="target" /> a la valeur <see langword="null" /> et l’événement n’est pas statique.  

ou - 
Le <see cref="T:System.Reflection.EventInfo" /> n’est pas déclaré dans la cible.</exception>
      <exception cref="T:System.MethodAccessException" vsli:raw="The caller does not have access permission to the member.&#xA;&#xA;Note: In .NET for Windows Store apps or the Portable Class Library, catch the base class exception, &lt;see cref=&quot;T:System.MemberAccessException&quot; /&gt;, instead.">Dans .NET pour les applications du Windows Store ou la Bibliothèque de classes portable, interceptez l’exception de la classe de base, <see cref="T:System.MemberAccessException" />, à la place.  


            

 L’appelant n’est pas autorisé à accéder au membre.</exception>
    </member>
    <member name="T:System.Runtime.InteropServices.ComCompatibleVersionAttribute">
      <summary vsli:raw="Indicates to a COM client that all classes in the current version of an assembly are compatible with classes in an earlier version of the assembly.">Indique à un client COM que toutes les classes de la version actuelle d'un assembly sont compatibles avec les classes d'une version précédente de l'assembly.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComCompatibleVersionAttribute.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComCompatibleVersionAttribute&quot; /&gt; class with the major version, minor version, build, and revision numbers of the assembly.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.ComCompatibleVersionAttribute" /> avec les numéros de version principale, de version secondaire, de build et de révision de l'assembly.</summary>
      <param name="major" vsli:raw="The major version number of the assembly.">Numéro de version principale de l'assembly.</param>
      <param name="minor" vsli:raw="The minor version number of the assembly.">Numéro de version secondaire de l'assembly.</param>
      <param name="build" vsli:raw="The build number of the assembly.">Numéro de build de l'assembly.</param>
      <param name="revision" vsli:raw="The revision number of the assembly.">Numéro de révision de l'assembly.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.BuildNumber">
      <summary vsli:raw="Gets the build number of the assembly.">Obtient le numéro de build de l'assembly.</summary>
      <returns vsli:raw="The build number of the assembly.">Numéro de build de l'assembly.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.MajorVersion">
      <summary vsli:raw="Gets the major version number of the assembly.">Obtient le numéro de version principale de l'assembly.</summary>
      <returns vsli:raw="The major version number of the assembly.">Numéro de version principale de l'assembly.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.MinorVersion">
      <summary vsli:raw="Gets the minor version number of the assembly.">Obtient le numéro de version secondaire de l'assembly.</summary>
      <returns vsli:raw="The minor version number of the assembly.">Numéro de version secondaire de l'assembly.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.RevisionNumber">
      <summary vsli:raw="Gets the revision number of the assembly.">Obtient le numéro de révision de l'assembly.</summary>
      <returns vsli:raw="The revision number of the assembly.">Numéro de révision de l'assembly.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComConversionLossAttribute">
      <summary vsli:raw="Indicates that information was lost about a class or interface when it was imported from a type library to an assembly.">Indique que des informations se rapportant à une classe ou à une interface ont été perdues lors de l’importation d’une bibliothèque de types vers un assembly.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComConversionLossAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;ComConversionLossAttribute&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see langword="ComConversionLossAttribute" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute">
      <summary vsli:raw="Specifies a default interface to expose to COM. This class cannot be inherited.">Spécifie une interface par défaut à exposer à COM. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComDefaultInterfaceAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Type&quot; /&gt; object as the default interface exposed to COM.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute" /> avec l'objet <see cref="T:System.Type" /> spécifié comme interface par défaut exposée à COM.</summary>
      <param name="defaultInterface" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; value indicating the default interface to expose to COM.">Valeur <see cref="T:System.Type" /> indiquant l'interface par défaut à exposer à COM.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComDefaultInterfaceAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Type&quot; /&gt; object that specifies the default interface to expose to COM.">Obtient l'objet <see cref="T:System.Type" /> qui spécifie l'interface par défaut à exposer à COM.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object that specifies the default interface to expose to COM.">Objet <see cref="T:System.Type" /> qui spécifie l'interface par défaut à exposer à COM.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComEventInterfaceAttribute">
      <summary vsli:raw="Identifies the source interface and the class that implements the methods of the event interface that is generated when a coclass is imported from a COM type library.">Identifie l'interface source et la classe implémentant les méthodes de l'interface d'événement qui est générée quand une coclasse est importée à partir d'une bibliothèque de types COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventInterfaceAttribute.#ctor(System.Type,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComEventInterfaceAttribute&quot; /&gt; class with the source interface and event provider class.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.ComEventInterfaceAttribute" /> avec l'interface source et la classe du fournisseur d'événements.</summary>
      <param name="SourceInterface" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that contains the original source interface from the type library. COM uses this interface to call back to the managed class.">
        <see cref="T:System.Type" /> contenant l'interface source d'origine de la bibliothèque de types. COM utilise cette interface pour rappeler la classe managée.</param>
      <param name="EventProvider" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that contains the class that implements the methods of the event interface.">
        <see cref="T:System.Type" /> qui contient la classe implémentant les méthodes de l'interface d'événement.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComEventInterfaceAttribute.EventProvider">
      <summary vsli:raw="Gets the class that implements the methods of the event interface.">Obtient la classe qui implémente les méthodes de l'interface d'événement.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that contains the class that implements the methods of the event interface.">
        <see cref="T:System.Type" /> qui contient la classe implémentant les méthodes de l'interface d'événement.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComEventInterfaceAttribute.SourceInterface">
      <summary vsli:raw="Gets the original source interface from the type library.">Obtient l'interface source d'origine de la bibliothèque de types.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; containing the source interface.">
        <see cref="T:System.Type" /> contenant l'interface source.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComEventsHelper">
      <summary vsli:raw="Provides methods that enable .NET delegates that handle events to be added and removed from COM objects.">Fournit des méthodes qui permettent d'ajouter à des objets COM, et de supprimer de ces derniers, les délégués .NET Framework qui gèrent des événements.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventsHelper.Combine(System.Object,System.Guid,System.Int32,System.Delegate)">
      <summary vsli:raw="Adds a delegate to the invocation list of events originating from a COM object.">Ajoute un délégué à la liste d'appel des événements provenant d'un objet COM.</summary>
      <param name="rcw" vsli:raw="The COM object that triggers the events the caller would like to respond to.">Objet COM qui déclenche les événements auxquels l'appelant veut répondre.</param>
      <param name="iid" vsli:raw="The identifier of the source interface used by the COM object to trigger events.">Identificateur de l'interface source utilisée par l'objet COM pour déclencher des événements.</param>
      <param name="dispid" vsli:raw="The dispatch identifier of the method on the source interface.">Identificateur de dispatch de la méthode pour l'interface source.</param>
      <param name="d" vsli:raw="The delegate to invoke when the COM event is fired.">Délégué à appeler lorsque l'événement COM est déclenché.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventsHelper.Remove(System.Object,System.Guid,System.Int32,System.Delegate)">
      <summary vsli:raw="Removes a delegate from the invocation list of events originating from a COM object.">Supprime un délégué dans la liste d'appel des événements provenant d'un objet COM.</summary>
      <param name="rcw" vsli:raw="The COM object the delegate is attached to.">Objet COM auquel le délégué est attaché.</param>
      <param name="iid" vsli:raw="The identifier of the source interface used by the COM object to trigger events.">Identificateur de l'interface source utilisée par l'objet COM pour déclencher des événements.</param>
      <param name="dispid" vsli:raw="The dispatch identifier of the method on the source interface.">Identificateur de dispatch de la méthode pour l'interface source.</param>
      <param name="d" vsli:raw="The delegate to remove from the invocation list.">Délégué à supprimer dans la liste d'appel.</param>
      <returns vsli:raw="The delegate that was removed from the invocation list.">Délégué supprimé de la liste d'appel.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.COMException">
      <summary vsli:raw="The exception that is thrown when an unrecognized HRESULT is returned from a COM method call.">Exception levée quand un HRESULT non reconnu est retourné d'un appel de méthode COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.COMException&quot; /&gt; class with default values.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.COMException" /> avec des valeurs par défaut.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.COMException&quot; /&gt; class from serialization data.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.COMException" /> à partir de données de sérialisation.</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that holds the serialized object data.">Objet <see cref="T:System.Runtime.Serialization.SerializationInfo" /> qui contient les données sérialisées de l'objet.</param>
      <param name="context" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; object that supplies the contextual information about the source or destination.">Objet <see cref="T:System.Runtime.Serialization.StreamingContext" /> qui contient des informations contextuelles sur la source ou la destination.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.COMException&quot; /&gt; class with a specified message.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.COMException" /> avec le message spécifié.</summary>
      <param name="message" vsli:raw="The message that indicates the reason for the exception.">Message qui indique la raison de l'exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.COMException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.COMException" /> avec un message d'erreur spécifié et une référence à l'exception interne ayant provoqué cette exception.</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">Message d'erreur qui explique la raison de l'exception.</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">Exception ayant provoqué l'exception actuelle. Si le paramètre <paramref name="inner" /> n'est pas <see langword="null" />, l'exception actuelle est levée dans un bloc <see langword="catch" /> qui gère l'exception interne.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.COMException&quot; /&gt; class with a specified message and error code.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.COMException" /> avec un message et un code d'erreur spécifiés.</summary>
      <param name="message" vsli:raw="The message that indicates the reason the exception occurred.">Message indiquant la raison pour laquelle l'exception s'est produite.</param>
      <param name="errorCode" vsli:raw="The error code (HRESULT) value associated with this exception.">Valeur (HRESULT) du code d'erreur associé à l'exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.ToString">
      <summary vsli:raw="Converts the contents of the exception to a string.">Convertit le contenu de l'exception en chaîne.</summary>
      <returns vsli:raw="A string containing the &lt;see cref=&quot;P:System.Exception.HResult&quot; /&gt;, &lt;see cref=&quot;P:System.Exception.Message&quot; /&gt;, &lt;see cref=&quot;P:System.Exception.InnerException&quot; /&gt;, and &lt;see cref=&quot;P:System.Exception.StackTrace&quot; /&gt; properties of the exception.">Chaîne contenant les propriétés <see cref="P:System.Exception.HResult" />, <see cref="P:System.Exception.Message" />, <see cref="P:System.Exception.InnerException" /> et <see cref="P:System.Exception.StackTrace" /> de l'exception.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComImportAttribute">
      <summary vsli:raw="Indicates that the attributed type was previously defined in COM.">Indique que le type avec attributs a déjà été défini dans COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComImportAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComImportAttribute&quot; /&gt;.">Initialise une nouvelle instance de l'objet <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComInterfaceType">
      <summary vsli:raw="Identifies how to expose an interface to COM.">Identifie comment exposer une interface à COM.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual">
      <summary vsli:raw="Indicates that the interface is exposed to COM as a dual interface, which enables both early and late binding. &lt;see cref=&quot;F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual&quot; /&gt; is the default value.">Indique que l’interface est exposée à COM en tant qu’interface double, ce qui permet à la fois une liaison anticipée et une liaison tardive. <see cref="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual" /> est la valeur par défaut.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIDispatch">
      <summary vsli:raw="Indicates that an interface is exposed to COM as a dispinterface, which enables late binding only.">Indique qu’une interface est exposée à COM en tant qu’interface dispinterface, ce qui permet uniquement une liaison tardive.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIInspectable">
      <summary vsli:raw="Indicates that an interface is exposed to COM as a Windows Runtime interface.">Indique que l’interface est exposée à COM en tant qu’interface Windows Runtime.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown">
      <summary vsli:raw="Indicates that an interface is exposed to COM as an interface that is derived from IUnknown, which enables only early binding.">Indique qu’une interface est exposée à COM en tant qu’interface dérivée de IUnknown, ce qui permet uniquement une liaison anticipée.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComMemberType">
      <summary vsli:raw="Describes the type of a COM member.">Décrit le type d'un membre COM.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.Method">
      <summary vsli:raw="The member is a normal method.">Le membre est une méthode normale.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.PropGet">
      <summary vsli:raw="The member gets properties.">Le membre obtient des propriétés.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.PropSet">
      <summary vsli:raw="The member sets properties.">Le membre définit des propriétés.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComRegisterFunctionAttribute">
      <summary vsli:raw="Specifies the method to call when you register an assembly for use from COM; this enables the execution of user-written code during the registration process.">Spécifie la méthode à appeler quand vous inscrivez un assembly pour utilisation à partir de COM ; cela permet l'exécution de code écrit par l'utilisateur pendant le processus d'inscription.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComRegisterFunctionAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComRegisterFunctionAttribute&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.ComRegisterFunctionAttribute" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute">
      <summary vsli:raw="Identifies a list of interfaces that are exposed as COM event sources for the attributed class.">Identifie une liste d'interfaces qui sont exposées en tant que sources d'événements COM pour la classe avec attributs.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComSourceInterfacesAttribute&quot; /&gt; class with the name of the event source interface.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> avec le nom de l'interface de source d'événements.</summary>
      <param name="sourceInterfaces" vsli:raw="A null-delimited list of fully qualified event source interface names.">Liste délimitée par une valeur null de noms qualifiés complets d'interfaces de source d'événements.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComSourceInterfacesAttribute&quot; /&gt; class with the type to use as a source interface.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> avec le type à utiliser comme interface source.</summary>
      <param name="sourceInterface" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the source interface.">Type <see cref="T:System.Type" /> de l'interface source.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComSourceInterfacesAttribute&quot; /&gt; class with the types to use as source interfaces.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> avec les types à utiliser comme interfaces sources.</summary>
      <param name="sourceInterface1" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the default source interface.">Type <see cref="T:System.Type" /> de l'interface source par défaut.</param>
      <param name="sourceInterface2" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of a source interface.">Type <see cref="T:System.Type" /> d'une interface source.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;ComSourceInterfacesAttribute&quot; /&gt; class with the types to use as source interfaces.">Initialise une nouvelle instance de la classe <see langword="ComSourceInterfacesAttribute" /> avec les types à utiliser comme interfaces sources.</summary>
      <param name="sourceInterface1" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the default source interface.">Type <see cref="T:System.Type" /> de l'interface source par défaut.</param>
      <param name="sourceInterface2" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of a source interface.">Type <see cref="T:System.Type" /> d'une interface source.</param>
      <param name="sourceInterface3" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of a source interface.">Type <see cref="T:System.Type" /> d'une interface source.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type,System.Type,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComSourceInterfacesAttribute&quot; /&gt; class with the types to use as source interfaces.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> avec les types à utiliser comme interfaces sources.</summary>
      <param name="sourceInterface1" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the default source interface.">Type <see cref="T:System.Type" /> de l'interface source par défaut.</param>
      <param name="sourceInterface2" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of a source interface.">Type <see cref="T:System.Type" /> d'une interface source.</param>
      <param name="sourceInterface3" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of a source interface.">Type <see cref="T:System.Type" /> d'une interface source.</param>
      <param name="sourceInterface4" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of a source interface.">Type <see cref="T:System.Type" /> d'une interface source.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComSourceInterfacesAttribute.Value">
      <summary vsli:raw="Gets the fully qualified name of the event source interface.">Obtient le nom qualifié complet de l'interface de source d'événements.</summary>
      <returns vsli:raw="The fully qualified name of the event source interface.">Nom qualifié complet de l'interface de source d'événements.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ADVF">
      <summary vsli:raw="Specifies the requested behavior when setting up an advise sink or a caching connection with an object.">Spécifie le comportement demandé au moment de la configuration d'un récepteur de notifications ou d'une connexion de mise en cache avec un objet.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_DATAONSTOP">
      <summary vsli:raw="For data advisory connections, assures accessibility to data.">Pour les connexions de notifications de données, vérifiez l'accessibilité des données.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_NODATA">
      <summary vsli:raw="For data advisory connections (&lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)&quot; /&gt; or &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)&quot; /&gt;), this flag requests the data object not to send data when it calls &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt;.">Pour les connexions de notifications de données (<see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)" /> ou <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" />), cet indicateur demande à l'objet de données de ne pas envoyer de données lorsqu'il appelle <see cref="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_ONLYONCE">
      <summary vsli:raw="Requests that the object make only one change notification or cache update before deleting the connection.">Demande que l'objet effectue une seule notification de modifications ou mise à jour de cache avant de supprimer la connexion.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_PRIMEFIRST">
      <summary vsli:raw="Requests that the object not wait for the data or view to change before making an initial call to &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt; (for data or view advisory connections) or updating the cache (for cache connections).">Demande que l'objet n'attende pas la modification des données ou de l'affichage pour lancer un appel initial à <see cref="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> (pour les connexions de notifications de données ou d'affichage) ou pour mettre à mettre à jour le cache (pour les connexions de cache).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_FORCEBUILTIN">
      <summary vsli:raw="This value is used by DLL object applications and object handlers that perform the drawing of their objects.">Cette valeur est utilisée par les applications d'objet DLL et les gestionnaires d'objets qui dessinent leurs objets.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_NOHANDLER">
      <summary vsli:raw="Synonym for &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_FORCEBUILTIN&quot; /&gt;, which is used more often.">Synonyme de <see cref="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_FORCEBUILTIN" />, qui est utilisé le plus fréquemment.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_ONSAVE">
      <summary vsli:raw="For cache connections, this flag updates the cached representation only when the object containing the cache is saved.">Pour les connexions de cache, cet indicateur ne met à jour la représentation mise en cache que si l'objet qui contient le cache est enregistré.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.BIND_OPTS">
      <summary vsli:raw="Stores the parameters that are used during a moniker binding operation.">Stocke les paramètres utilisés pendant une opération de liaison de moniker.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.cbStruct">
      <summary vsli:raw="Specifies the size, in bytes, of the &lt;see langword=&quot;BIND_OPTS&quot; /&gt; structure.">Spécifie la taille de la structure <see langword="BIND_OPTS" /> en octets.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.dwTickCountDeadline">
      <summary vsli:raw="Indicates the amount of time (clock time in milliseconds, as returned by the &lt;see langword=&quot;GetTickCount&quot; /&gt; function) that the caller specified to complete the binding operation.">Indique la période (heure de l'horloge en millisecondes, telle que retournée par la fonction <see langword="GetTickCount" />) afin que l'appelant spécifié termine l'opération de liaison.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.grfFlags">
      <summary vsli:raw="Controls aspects of moniker binding operations.">Contrôle les aspects des opérations de liaison de moniker.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.grfMode">
      <summary vsli:raw="Represents flags that should be used when opening the file that contains the object identified by the moniker.">Représente les indicateurs devant être utilisés lors de l'ouverture du fichier qui contient l'objet identifié par le moniker.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.BINDPTR">
      <summary vsli:raw="Contains a pointer to a bound-to &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCDESC&quot; /&gt; structure, &lt;see cref=&quot;T:System.Runtime.InteropServices.VARDESC&quot; /&gt; structure, or an &lt;see langword=&quot;ITypeComp&quot; /&gt; interface.">Contient un pointeur vers une structure <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> liée, une structure <see cref="T:System.Runtime.InteropServices.VARDESC" /> ou une interface <see langword="ITypeComp" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BINDPTR.lpfuncdesc">
      <summary vsli:raw="Represents a pointer to a &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCDESC&quot; /&gt; structure.">Représente un pointeur vers une structure <see cref="T:System.Runtime.InteropServices.FUNCDESC" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BINDPTR.lptcomp">
      <summary vsli:raw="Represents a pointer to an &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.ITypeComp&quot; /&gt; interface.">Représente un pointeur vers une interface <see cref="T:System.Runtime.InteropServices.ComTypes.ITypeComp" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BINDPTR.lpvardesc">
      <summary vsli:raw="Represents a pointer to a &lt;see cref=&quot;T:System.Runtime.InteropServices.VARDESC&quot; /&gt; structure.">Représente un pointeur vers une structure <see cref="T:System.Runtime.InteropServices.VARDESC" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.CALLCONV">
      <summary vsli:raw="Identifies the calling convention used by a method described in a METHODDATA structure.">Identifie la convention d’appel utilisée par une méthode décrite dans une structure METHODDATA.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_CDECL">
      <summary vsli:raw="Indicates that the C declaration (CDECL) calling convention is used for a method.">Indique que la convention d’appel de déclaration C (CDECL) est utilisée pour une méthode.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MACPASCAL">
      <summary vsli:raw="Indicates that the Macintosh Pascal (MACPASCAL) calling convention is used for a method.">Indique que la convention d’appel Macintosh Pascal (MACPASCAL) est utilisée pour une méthode.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MAX">
      <summary vsli:raw="Indicates the end of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.CALLCONV&quot; /&gt; enumeration.">Indique la fin de l’énumération <see cref="T:System.Runtime.InteropServices.ComTypes.CALLCONV" /> .</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MPWCDECL">
      <summary vsli:raw="Indicates that the Macintosh Programmers' Workbench (MPW) CDECL calling convention is used for a method.">Indique que la convention d’appel Macintosh Programmers’ Workbench (MPW) CDECL est utilisée pour une méthode.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MPWPASCAL">
      <summary vsli:raw="Indicates that the Macintosh Programmers' Workbench (MPW) PASCAL calling convention is used for a method.">Indique que la convention d’appel Macintosh Programmers’ Workbench (MPW) PASCAL est utilisée pour une méthode.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MSCPASCAL">
      <summary vsli:raw="Indicates that the MSC Pascal (MSCPASCAL) calling convention is used for a method.">Indique que la convention d’appel MSC Pascal (MSCPASCAL) est utilisée pour une méthode.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_PASCAL">
      <summary vsli:raw="Indicates that the Pascal calling convention is used for a method.">Indique que la convention d’appel Pascal est utilisée pour une méthode.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_RESERVED">
      <summary vsli:raw="This value is reserved for future use.">Cette valeur est réservée à une utilisation ultérieure.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_STDCALL">
      <summary vsli:raw="Indicates that the standard calling convention (STDCALL) is used for a method.">Indique que la convention d’appel standard (STDCALL) est utilisée pour une méthode.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_SYSCALL">
      <summary vsli:raw="Indicates that the standard SYSCALL calling convention is used for a method.">Indique que la convention d’appel SYSCALL standard est utilisée pour une méthode.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.CONNECTDATA">
      <summary vsli:raw="Describes a connection that exists to a given connection point.">Décrit une connexion existante à un point de connexion donnée.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CONNECTDATA.dwCookie">
      <summary vsli:raw="Represents a connection token that is returned from a call to &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)&quot; /&gt;.">Représente un jeton de connexion retourné à partir d'un appel à <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CONNECTDATA.pUnk">
      <summary vsli:raw="Represents a pointer to the &lt;see langword=&quot;IUnknown&quot; /&gt; interface on a connected advisory sink. The caller must call &lt;see langword=&quot;IUnknown::Release&quot; /&gt; on this pointer when the &lt;see langword=&quot;CONNECTDATA&quot; /&gt; structure is no longer needed.">Représente un pointeur vers l'interface <see langword="IUnknown" /> sur un récepteur de notifications connecté. L'appelant doit appeler <see langword="IUnknown::Release" /> sur ce pointeur lorsque la structure <see langword="CONNECTDATA" /> n'est plus nécessaire.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DATADIR">
      <summary vsli:raw="Specifies the direction of the data flow in the &lt;paramref name=&quot;dwDirection&quot; /&gt; parameter of the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)&quot; /&gt; method. This determines the formats that the resulting enumerator can enumerate.">Spécifie la direction du flux de données dans le paramètre <paramref name="dwDirection" /> de la méthode <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)" />. Cela détermine les formats que l'énumérateur résultant peut énumérer.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DATADIR.DATADIR_GET">
      <summary vsli:raw="Requests that &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)&quot; /&gt; supply an enumerator for the formats that can be specified in &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt;.">Demande que <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)" /> fournisse un énumérateur pour les formats pouvant être spécifiés dans <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DATADIR.DATADIR_SET">
      <summary vsli:raw="Requests that &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)&quot; /&gt; supply an enumerator for the formats that can be specified in &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)&quot; /&gt;.">Demande que <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)" /> fournisse un énumérateur pour les formats pouvant être spécifiés dans <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DESCKIND">
      <summary vsli:raw="Identifies the type description being bound to.">Identifie la description de type liée.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_FUNCDESC">
      <summary vsli:raw="Indicates that a &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCDESC&quot; /&gt; structure was returned.">Indique qu'une structure <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> a été retournée.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_IMPLICITAPPOBJ">
      <summary vsli:raw="Indicates that an &lt;see langword=&quot;IMPLICITAPPOBJ&quot; /&gt; was returned.">Indique que <see langword="IMPLICITAPPOBJ" /> a été retourné.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_MAX">
      <summary vsli:raw="Indicates an end-of-enumeration marker.">Indique un marqueur de fin d'énumération.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_NONE">
      <summary vsli:raw="Indicates that no match was found.">Indique qu'aucune correspondance n'a été trouvée.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_TYPECOMP">
      <summary vsli:raw="Indicates that a &lt;see langword=&quot;TYPECOMP&quot; /&gt; was returned.">Indique que <see langword="TYPECOMP" /> a été retourné.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_VARDESC">
      <summary vsli:raw="Indicates that a &lt;see langword=&quot;VARDESC&quot; /&gt; was returned.">Indique que <see langword="VARDESC" /> a été retourné.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DISPPARAMS">
      <summary vsli:raw="Contains the arguments passed to a method or property by &lt;see langword=&quot;IDispatch::Invoke&quot; /&gt;.">Contient les arguments passés à une méthode ou propriété par <see langword="IDispatch::Invoke" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.cArgs">
      <summary vsli:raw="Represents the count of arguments.">Représente le nombre d'arguments.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.cNamedArgs">
      <summary vsli:raw="Represents the count of named arguments.">Représente le nombre d'arguments nommés.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.rgdispidNamedArgs">
      <summary vsli:raw="Represents the dispatch IDs of named arguments.">Représente les ID de dispatch des arguments nommés.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.rgvarg">
      <summary vsli:raw="Represents a reference to the array of arguments.">Représente une référence à un tableau d'arguments.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DVASPECT">
      <summary vsli:raw="Specifies the desired data or view aspect of the object when drawing or getting data.">Spécifie l'aspect des données ou de l'affichage voulu de l'objet pendant le dessin ou l'obtention de données.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_CONTENT">
      <summary vsli:raw="A representation of an object that lets that object be displayed as an embedded object inside a container. This value is typically specified for compound document objects. The presentation can be provided for the screen or printer.">Représentation d'un objet qui permet son affichage en tant qu'objet incorporé dans un conteneur. Cette valeur est généralement spécifiée pour des objets de document composé. La présentation peut être fournie pour l'écran ou l'imprimante.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_DOCPRINT">
      <summary vsli:raw="A representation of an object on the screen as though it were printed to a printer using the Print command from the File menu. The described data may represent a sequence of pages.">Représentation d’un objet à l’écran comme s’il était reproduit sur une imprimante à l’aide de la commande Imprimer du menu Fichier. Les données décrites peuvent représenter une séquence de pages.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_ICON">
      <summary vsli:raw="An iconic representation of an object.">Représentation iconique d'un objet.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_THUMBNAIL">
      <summary vsli:raw="A thumbnail representation of an object that lets that object be displayed in a browsing tool. The thumbnail is approximately a 120 by 120 pixel, 16-color (recommended), device-independent bitmap potentially wrapped in a metafile.">Représentation miniature d'un objet qui permet son affichage dans un outil de navigation. La miniature est une bitmap d'environ 120 x 120 pixels, 16 couleurs (recommandé), indépendant du périphérique éventuellement encapsulé dans un métafichier.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ELEMDESC">
      <summary vsli:raw="Contains the type description and process transfer information for a variable, function, or a function parameter.">Contient la description de type et les informations de transfert de processus pour une variable, une fonction ou un paramètre de fonction.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.desc">
      <summary vsli:raw="Contains information about an element.">Contient des informations sur un élément.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION">
      <summary vsli:raw="Contains information about an element.">Contient des informations sur un élément.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION.idldesc">
      <summary vsli:raw="Contains information for remoting the element.">Contient des informations de communication à distance avec l'élément.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION.paramdesc">
      <summary vsli:raw="Contains information about the parameter.">Contient des informations sur le paramètre.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.tdesc">
      <summary vsli:raw="Identifies the type of the element.">Identifie le type de l'élément.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.EXCEPINFO">
      <summary vsli:raw="Describes the exceptions that occur during &lt;see langword=&quot;IDispatch::Invoke&quot; /&gt;.">Décrit les exceptions qui se produisent pendant <see langword="IDispatch::Invoke" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.bstrDescription">
      <summary vsli:raw="Describes the error intended for the customer.">Décrit l'erreur destinée au client.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.bstrHelpFile">
      <summary vsli:raw="Contains the fully-qualified drive, path, and file name of a Help file that contains more information about the error.">Contient le lecteur, le chemin d'accès et le nom de fichier complets d'un fichier d'aide contenant davantage d'informations sur l'erreur.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.bstrSource">
      <summary vsli:raw="Indicates the name of the source of the exception. Typically, this is an application name.">Indique le nom de la source de l'exception. Généralement, il s'agit d'un nom d'application.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.dwHelpContext">
      <summary vsli:raw="Indicates the Help context ID of the topic within the Help file.">Indique l'ID de contexte d'aide de la rubrique dans le fichier d'aide.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.pfnDeferredFillIn">
      <summary vsli:raw="Represents a pointer to a function that takes an &lt;see cref=&quot;T:System.Runtime.InteropServices.EXCEPINFO&quot; /&gt; structure as an argument and returns an HRESULT value. If deferred fill-in is not desired, this field is set to &lt;see langword=&quot;null&quot; /&gt;.">Représente un pointeur vers une fonction qui accepte une structure <see cref="T:System.Runtime.InteropServices.EXCEPINFO" /> comme argument et retourne une valeur HRESULT. Si un remplissage différé n'est pas souhaité, ce champ a la valeur <see langword="null" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.pvReserved">
      <summary vsli:raw="This field is reserved; it must be set to &lt;see langword=&quot;null&quot; /&gt;.">Ce champ est réservé ; il doit avoir la valeur <see langword="null" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.scode">
      <summary vsli:raw="A return value describing the error.">Valeur de retour décrivant l'erreur.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.wCode">
      <summary vsli:raw="Represents an error code identifying the error.">Représente un code d'erreur identifiant l'erreur.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.wReserved">
      <summary vsli:raw="This field is reserved; it must be set to 0.">Ce champ est réservé ; il doit avoir la valeur 0.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FILETIME">
      <summary vsli:raw="Represents the number of 100-nanosecond intervals since January 1, 1601. This structure is a 64-bit value.">Représente le nombre d'intervalles de 100 nanosecondes depuis le 1er janvier 1601. Cette structure est une valeur 64 bits.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FILETIME.dwHighDateTime">
      <summary vsli:raw="Specifies the high 32 bits of the &lt;see langword=&quot;FILETIME&quot; /&gt;.">Spécifie 32 bits de poids fort de <see langword="FILETIME" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FILETIME.dwLowDateTime">
      <summary vsli:raw="Specifies the low 32 bits of the &lt;see langword=&quot;FILETIME&quot; /&gt;.">Spécifie 32 bits de poids faible de <see langword="FILETIME" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FORMATETC">
      <summary vsli:raw="Represents a generalized Clipboard format.">Représente un format Presse-papiers généralisé.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.cfFormat">
      <summary vsli:raw="Specifies the particular clipboard format of interest.">Spécifie le format Presse-papiers pertinent.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.dwAspect">
      <summary vsli:raw="Specifies one of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.DVASPECT&quot; /&gt; enumeration constants that indicates how much detail should be contained in the rendering.">Spécifie une des constantes d'énumération <see cref="T:System.Runtime.InteropServices.ComTypes.DVASPECT" /> indiquant la quantité de détails qui doit être contenue dans le rendu.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex">
      <summary vsli:raw="Specifies part of the aspect when the data must be split across page boundaries.">Spécifie une partie de l'aspect lorsqu'un saut de page doit être inséré à l'intérieur des données.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.ptd">
      <summary vsli:raw="Specifies a pointer to a &lt;see langword=&quot;DVTARGETDEVICE&quot; /&gt; structure containing information about the target device that the data is being composed for.">Spécifie un pointeur vers une structure <see langword="DVTARGETDEVICE" /> contenant des informations relatives au périphérique cible pour lequel les données sont composées.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.tymed">
      <summary vsli:raw="Specifies one of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.TYMED&quot; /&gt; enumeration constants, which indicates the type of storage medium used to transfer the object's data.">Spécifie l'une des constantes d'énumération <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> qui indiquent le type de support de stockage utilisé pour transférer les données de l'objet.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FUNCDESC">
      <summary vsli:raw="Defines a function description.">Définit une description de fonction.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.callconv">
      <summary vsli:raw="Specifies the calling convention of a function.">Retourne la convention d'appel d'une fonction.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.cParams">
      <summary vsli:raw="Counts the total number of parameters.">Compte le nombre total de paramètres.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.cParamsOpt">
      <summary vsli:raw="Counts the optional parameters.">Compte les paramètres facultatifs.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.cScodes">
      <summary vsli:raw="Counts the permitted return values.">Compte les valeurs de retour permises.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.elemdescFunc">
      <summary vsli:raw="Contains the return type of the function.">Contient le type de retour de la fonction.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.funckind">
      <summary vsli:raw="Specifies whether the function is virtual, static, or dispatch-only.">Spécifie si la fonction est virtuelle, statique ou de répartition uniquement.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.invkind">
      <summary vsli:raw="Specifies the type of a property function.">Spécifie le type d'une fonction de propriété.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.lprgelemdescParam">
      <summary vsli:raw="Indicates the array of &lt;see cref=&quot;F:System.Runtime.InteropServices.ELEMDESC&quot; /&gt;.">Indique la taille de <see cref="F:System.Runtime.InteropServices.FUNCDESC.cParams" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.lprgscode">
      <summary vsli:raw="Stores the count of errors a function can return on a 16-bit system.">Stocke le nombre d'erreurs qu'une fonction peut retourner sur un système 16 bits.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.memid">
      <summary vsli:raw="Identifies the function member ID.">Identifie l'ID d'une fonction membre.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.oVft">
      <summary vsli:raw="Specifies the offset in the VTBL for &lt;see cref=&quot;F:System.Runtime.InteropServices.FUNCKIND.FUNC_VIRTUAL&quot; /&gt;.">Spécifie l'offset dans la VTBL pour <see cref="F:System.Runtime.InteropServices.FUNCKIND.FUNC_VIRTUAL" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.wFuncFlags">
      <summary vsli:raw="Indicates the &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCFLAGS&quot; /&gt; of a function.">Indique le <see cref="T:System.Runtime.InteropServices.FUNCFLAGS" /> d'une fonction.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FUNCFLAGS">
      <summary vsli:raw="Identifies the constants that define the properties of a function.">Identifie les constantes qui définissent les propriétés d'une fonction.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FBINDABLE">
      <summary vsli:raw="The function that supports data binding.">Fonction qui prend en charge la liaison de données.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FDEFAULTBIND">
      <summary vsli:raw="The function that best represents the object. Only one function in a type can have this attribute.">Fonction qui représente le mieux l'objet. Seule une fonction de type peut posséder cet attribut.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FDEFAULTCOLLELEM">
      <summary vsli:raw="Permits an optimization in which the compiler looks for a member named &quot;xyz&quot; on the type of &quot;abc&quot;. If such a member is found, and is flagged as an accessor function for an element of the default collection, a call is generated to that member function. Permitted on members in dispinterfaces and interfaces; not permitted on modules.">Permet une optimisation dans laquelle le compilateur recherche un membre nommé « xyz » sur le type « abc ». Si ce membre est trouvé et s'il est marqué comme fonction d'accesseur pour un élément de la collection par défaut, un appel à cette fonction membre est généré. Autorisé sur les membres dans des dispinterfaces et des interfaces ; non autorisé sur des modules.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FDISPLAYBIND">
      <summary vsli:raw="The function that is displayed to the user as bindable. &lt;see cref=&quot;F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FBINDABLE&quot; /&gt; must also be set.">Fonction qui est affichée à l'utilisateur comme pouvant être liée. Vous devez également définir <see cref="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FBINDABLE" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FHIDDEN">
      <summary vsli:raw="The function should not be displayed to the user, although it exists and is bindable.">La fonction existe et elle peut être liée mais elle ne doit pas être visible à l'utilisateur.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FIMMEDIATEBIND">
      <summary vsli:raw="Mapped as individual bindable properties.">Mappé comme des propriétés individuelles pouvant être liées.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FNONBROWSABLE">
      <summary vsli:raw="The property appears in an object browser, but not in a properties browser.">La propriété est affichée dans un explorateur d'objets, mais pas dans un explorateur de propriétés.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FREPLACEABLE">
      <summary vsli:raw="Tags the interface as having default behaviors.">Marque l’interface comme ayant des comportements par défaut.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FREQUESTEDIT">
      <summary vsli:raw="When set, any call to a method that sets the property results first in a call to &lt;see langword=&quot;IPropertyNotifySink::OnRequestEdit&quot; /&gt;. The implementation of &lt;see langword=&quot;OnRequestEdit&quot; /&gt; determines if the call is allowed to set the property.">Lorsque défini, tout appel à une méthode définissant la propriété résulte d'abord en un appel à <see langword="IPropertyNotifySink::OnRequestEdit" />. L'implémentation de <see langword="OnRequestEdit" /> détermine si l'appel a l'autorisation de définir la propriété.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FRESTRICTED">
      <summary vsli:raw="The function should not be accessible from macro languages. This flag is intended for system-level functions or functions that type browsers should not display.">La fonction ne doit pas être accessible à partir de langages de macro. Cet indicateur est destiné à des fonctions de niveau système ou à des fonctions que les explorateurs de types ne doivent pas afficher.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FSOURCE">
      <summary vsli:raw="The function returns an object that is a source of events.">Cette fonction retourne un objet qui est une source d'événements.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FUIDEFAULT">
      <summary vsli:raw="The type information member is the default member for display in the user interface.">Le membre d'informations de type est le membre par défaut à afficher dans l'interface utilisateur.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FUSESGETLASTERROR">
      <summary vsli:raw="The function supports &lt;see langword=&quot;GetLastError&quot; /&gt;. If an error occurs during the function, the caller can call &lt;see langword=&quot;GetLastError&quot; /&gt; to retrieve the error code.">La fonction prend en charge <see langword="GetLastError" />. Si une erreur se produit pendant la fonction, l'appelant peut appeler <see langword="GetLastError" /> pour récupérer le code d'erreur.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FUNCKIND">
      <summary vsli:raw="Defines how to access a function.">Définit comment accéder à une fonction.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_DISPATCH">
      <summary vsli:raw="The function can be accessed only through &lt;see langword=&quot;IDispatch&quot; /&gt;.">La fonction est accessible uniquement par l'intermédiaire de <see langword="IDispatch" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_NONVIRTUAL">
      <summary vsli:raw="The function is accessed by &lt;see langword=&quot;static&quot; /&gt; address and takes an implicit &lt;see langword=&quot;this&quot; /&gt; pointer.">La fonction est accessible par une adresse <see langword="static" /> et accepte un pointeur <see langword="this" /> implicite.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_PUREVIRTUAL">
      <summary vsli:raw="The function is accessed through the virtual function table (VTBL), and takes an implicit &lt;see langword=&quot;this&quot; /&gt; pointer.">La fonction est accessible par l'intermédiaire de la table de fonctions virtuelles (VTBL, virtual function table) et accepte un pointeur <see langword="this" /> implicite.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_STATIC">
      <summary vsli:raw="The function is accessed by &lt;see langword=&quot;static&quot; /&gt; address and does not take an implicit &lt;see langword=&quot;this&quot; /&gt; pointer.">La fonction est accessible par une adresse <see langword="static" /> et n'accepte pas de pointeur <see langword="this" /> implicite.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_VIRTUAL">
      <summary vsli:raw="The function is accessed in the same way as &lt;see cref=&quot;F:System.Runtime.InteropServices.FUNCKIND.FUNC_PUREVIRTUAL&quot; /&gt;, except the function has an implementation.">La fonction est accessible de la même manière que <see cref="F:System.Runtime.InteropServices.FUNCKIND.FUNC_PUREVIRTUAL" /> sauf qu'elle possède une implémentation.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IAdviseSink">
      <summary vsli:raw="Provides a managed definition of the &lt;see langword=&quot;IAdviseSink&quot; /&gt; interface.">Fournit une définition managée de l'interface <see langword="IAdviseSink" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnClose">
      <summary vsli:raw="Notifies all registered advisory sinks that the object has changed from the running state to the loaded state.  This method is called by a server.">Avertit tous les récepteurs de notifications enregistrés que l'objet n'est plus exécuté, mais simplement chargé.  Cette méthode est appelée par un serveur.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary vsli:raw="Notifies all data objects currently registered advisory sinks that data in the object has changed.">Avertit tous les récepteurs de notifications actuellement enregistré des objets de données que des données contenues dans l'objet ont été modifiées.</summary>
      <param name="format" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt;, passed by reference, which describes the format, target device, rendering, and storage information of the calling data object.">
        <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />, passé par référence, qui décrit les informations sur le format, le périphérique cible, le rendu et le stockage de l'objet de données appelant.</param>
      <param name="stgmedium" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;, passed by reference, which defines the storage medium (global memory, disk file, storage object, stream object, Graphics Device Interface (GDI) object, or undefined) and ownership of that medium for the calling data object.">
        <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" />, passé par référence, qui définit le support de stockage (mémoire globale, fichier sur disque, objet de stockage, objet de flux, l'interface graphique GDI (Graphics Device Interface) ou indéfini) ainsi que la propriété de ce support pour l'objet de données appelant.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnRename(System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary vsli:raw="Notifies all registered advisory sinks that the object has been renamed. This method is called by a server.">Avertit tous les récepteurs de notifications enregistrés que l'objet a été renommé. Cette méthode est appelée par un serveur.</summary>
      <param name="moniker" vsli:raw="A pointer to the &lt;see langword=&quot;IMoniker&quot; /&gt; interface on the new full moniker of the object.">Pointeur vers l'interface <see langword="IMoniker" /> sur le nouveau moniker complet de l'objet.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnSave">
      <summary vsli:raw="Notifies all registered advisory sinks that the object has been saved. This method is called by a server.">Avertit tous les récepteurs de notifications enregistrés que l'objet a été enregistré. Cette méthode est appelée par un serveur.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnViewChange(System.Int32,System.Int32)">
      <summary vsli:raw="Notifies an object's registered advisory sinks that its view has changed. This method is called by a server.">Avertit les récepteurs de notifications enregistrés d'un objet que son affichage a été modifié. Cette méthode est appelée par un serveur.</summary>
      <param name="aspect" vsli:raw="The aspect, or view, of the object. Contains a value taken from the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.DVASPECT&quot; /&gt; enumeration.">Aspect, ou affichage, de l'objet. Contient une valeur extraite de l'énumération <see cref="T:System.Runtime.InteropServices.ComTypes.DVASPECT" />.</param>
      <param name="index" vsli:raw="The portion of the view that has changed. Currently, only -1 is valid.">Partie de l'affichage qui a été modifiée. Actuellement, seule la valeur -1 est valide.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IBindCtx">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IBindCtx&quot; /&gt; interface.">Fournit la définition managée de l'interface <see langword="IBindCtx" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.EnumObjectParam(System.Runtime.InteropServices.ComTypes.IEnumString@)">
      <summary vsli:raw="Enumerates the strings that are the keys of the internally maintained table of contextual object parameters.">Énumère les chaînes correspondant aux clés de la table de paramètres d'objets contextuels mise à jour en interne.</summary>
      <param name="ppenum" vsli:raw="When this method returns, contains a reference to the object parameter enumerator. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une référence à l'énumérateur du paramètre de l'objet. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetBindOptions(System.Runtime.InteropServices.ComTypes.BIND_OPTS@)">
      <summary vsli:raw="Returns the current binding options stored in the current bind context.">Retourne les options de liaison en cours stockées dans le contexte de liaison actuel.</summary>
      <param name="pbindopts" vsli:raw="A pointer to the structure to receive the binding options.">Pointeur vers la structure qui doit recevoir les options de liaison.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetObjectParam(System.String,System.Object@)">
      <summary vsli:raw="Looks up the given key in the internally maintained table of contextual object parameters and returns the corresponding object, if one exists.">Recherche la clé donnée dans la table de paramètres d'objets contextuels mise à jour en interne et retourne l'objet correspondant, s'il existe.</summary>
      <param name="pszKey" vsli:raw="The name of the object to search for.">Nom de l'objet à rechercher.</param>
      <param name="ppunk" vsli:raw="When this method returns, contains the object interface pointer. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient le pointeur d'interface de l'objet. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetRunningObjectTable(System.Runtime.InteropServices.ComTypes.IRunningObjectTable@)">
      <summary vsli:raw="Returns access to the Running Object Table (ROT) relevant to this binding process.">Retourne l'accès à la table ROT (Running Object Table) appropriée pour ce processus de liaison.</summary>
      <param name="pprot" vsli:raw="When this method returns, contains a reference to the Running Object Table (ROT). This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une référence à la table ROT (Running Object Table). Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectBound(System.Object)">
      <summary vsli:raw="Registers the passed object as one of the objects that has been bound during a moniker operation and that should be released when the operation is complete.">Inscrit l'objet passé comme l'un des objets liés durant une opération de moniker et devant être libéré à la fin de l'opération.</summary>
      <param name="punk" vsli:raw="The object to register for release.">Objet à inscrire comme devant être libéré.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectParam(System.String,System.Object)">
      <summary vsli:raw="Registers the specified object pointer under the specified name in the internally maintained table of object pointers.">Inscrit le pointeur d'objet spécifié sous le nom donné dans la table de pointeurs d'objets mise à jour en interne.</summary>
      <param name="pszKey" vsli:raw="The name to register &lt;paramref name=&quot;punk&quot; /&gt; with.">Nom sous lequel inscrire <paramref name="punk" />.</param>
      <param name="punk" vsli:raw="The object to register.">Objet à inscrire.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.ReleaseBoundObjects">
      <summary vsli:raw="Releases all the objects currently registered with the bind context by using the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectBound(System.Object)&quot; /&gt; method.">Libère tous les objets actuellement inscrits dans le contexte de liaison par la méthode <see cref="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectBound(System.Object)" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RevokeObjectBound(System.Object)">
      <summary vsli:raw="Removes the object from the set of registered objects that need to be released.">Supprime l'objet du jeu d'objets inscrits à libérer.</summary>
      <param name="punk" vsli:raw="The object to unregister for release.">Objet dont l'inscription doit être annulée pour sa libération.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RevokeObjectParam(System.String)">
      <summary vsli:raw="Revokes the registration of the object currently found under the specified key in the internally maintained table of contextual object parameters, if that key is currently registered.">Révoque l'inscription de l'objet figurant actuellement sous la clé spécifiée dans la table de paramètres d'objets contextuels mise à jour en interne, si cette clé est inscrite actuellement.</summary>
      <param name="pszKey" vsli:raw="The key to unregister.">Clé dont l'inscription doit être annulée.</param>
      <returns vsli:raw="An &lt;see langword=&quot;S_OK&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value if the specified key was successfully removed from the table; otherwise, an &lt;see langword=&quot;S_FALSE&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value.">Valeur <see langword="S_OK" /><see langword="HRESULT" /> si la clé spécifiée a été supprimée de la table ; sinon, valeur <see langword="S_FALSE" /><see langword="HRESULT" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.SetBindOptions(System.Runtime.InteropServices.ComTypes.BIND_OPTS@)">
      <summary vsli:raw="Stores a block of parameters in the bind context. These parameters will apply to later &lt;see langword=&quot;UCOMIMoniker&quot; /&gt; operations that use this bind context.">Stocke un bloc de paramètres dans le contexte de liaison. Ces paramètres s'appliqueront aux opérations <see langword="UCOMIMoniker" /> ultérieures utilisant ce contexte de liaison.</summary>
      <param name="pbindopts" vsli:raw="The structure containing the binding options to set.">Structure contenant les options de liaison à définir.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IConnectionPoint">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IConnectionPoint&quot; /&gt; interface.">Fournit la définition managée de l'interface <see langword="IConnectionPoint" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)">
      <summary vsli:raw="Establishes an advisory connection between the connection point and the caller's sink object.">Établit une connexion de notifications entre le point de connexion et l'objet récepteur de l'appelant.</summary>
      <param name="pUnkSink" vsli:raw="A reference to the sink to receive calls for the outgoing interface managed by this connection point.">Référence au récepteur qui doit recevoir les appels pour l'interface sortante gérée par ce point de connexion.</param>
      <param name="pdwCookie" vsli:raw="When this method returns, contains the connection cookie. This parameter is passed uninitialized.">Lorsque cette méthode est retournée, contient le cookie de connexion. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.EnumConnections(System.Runtime.InteropServices.ComTypes.IEnumConnections@)">
      <summary vsli:raw="Creates an enumerator object for iteration through the connections that exist to this connection point.">Crée un objet énumérateur pour l'itération par le biais des connexions qui existent avec ce point de connexion.</summary>
      <param name="ppEnum" vsli:raw="When this method returns, contains the newly created enumerator. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient le nouvel énumérateur créé. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.GetConnectionInterface(System.Guid@)">
      <summary vsli:raw="Returns the IID of the outgoing interface managed by this connection point.">Retourne l'IID pour l'interface sortante managée par ce point de connexion.</summary>
      <param name="pIID" vsli:raw="When this parameter returns, contains the IID of the outgoing interface managed by this connection point. This parameter is passed uninitialized.">Lorsque ce paramètre retourne une valeur, contient l'IID de l'interface sortante gérée par ce point de connexion. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.GetConnectionPointContainer(System.Runtime.InteropServices.ComTypes.IConnectionPointContainer@)">
      <summary vsli:raw="Retrieves the &lt;see langword=&quot;IConnectionPointContainer&quot; /&gt; interface pointer to the connectable object that conceptually owns this connection point.">Récupère le pointeur d'interface <see langword="IConnectionPointContainer" /> vers l'objet connectable qui est le propriétaire conceptuel de ce point de connexion.</summary>
      <param name="ppCPC" vsli:raw="When this parameter returns, contains the connectable object's &lt;see langword=&quot;IConnectionPointContainer&quot; /&gt; interface. This parameter is passed uninitialized.">Lorsque ce paramètre retourne une valeur, contient l'interface <see langword="IConnectionPointContainer" /> de l'objet connectable. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Unadvise(System.Int32)">
      <summary vsli:raw="Terminates an advisory connection previously established through the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)&quot; /&gt; method.">Arrête une connexion de notifications précédemment établie par le biais de la méthode <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" />.</summary>
      <param name="dwCookie" vsli:raw="The connection cookie previously returned from the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)&quot; /&gt; method.">Cookie de connexion précédemment retourné par la méthode <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" />.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IConnectionPointContainer&quot; /&gt; interface.">Fournit la définition managée de l'interface <see langword="IConnectionPointContainer" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer.EnumConnectionPoints(System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints@)">
      <summary vsli:raw="Creates an enumerator of all the connection points supported in the connectable object, one connection point per IID.">Crée un énumérateur de tous les points de connexion pris en charge dans l'objet connectable, avec un point de connexion par IID.</summary>
      <param name="ppEnum" vsli:raw="When this method returns, contains the interface pointer of the enumerator. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient le pointeur d'interface de l'énumérateur. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer.FindConnectionPoint(System.Guid@,System.Runtime.InteropServices.ComTypes.IConnectionPoint@)">
      <summary vsli:raw="Asks the connectable object if it has a connection point for a particular IID, and if so, returns the &lt;see langword=&quot;IConnectionPoint&quot; /&gt; interface pointer to that connection point.">Vérifie si l'objet connectable possède un point de connexion pour un IID spécifique et, si tel est le cas, retourne l'interface de pointeur <see langword="IConnectionPoint" /> pour ce point de connexion.</summary>
      <param name="riid" vsli:raw="A reference to the outgoing interface IID whose connection point is being requested.">Référence à l'IID d'interface sortante dont le point de connexion est demandé.</param>
      <param name="ppCP" vsli:raw="When this method returns, contains the connection point that manages the outgoing interface &lt;paramref name=&quot;riid&quot; /&gt;. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient le point de connexion qui gère l'interface sortante <paramref name="riid" />. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IDataObject">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IDataObject&quot; /&gt; interface.">Fournit la définition managée de l'interface <see langword="IDataObject" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)">
      <summary vsli:raw="Creates a connection between a data object and an advisory sink. This method is called by an object that supports an advisory sink and enables the advisory sink to be notified of changes in the object's data.">Crée une connexion entre un objet de données et un récepteur de notifications. Cette méthode est appelée par un objet qui prend en charge un récepteur de notifications et elle lui permet d'être averti des modifications apportées aux données de l'objet.</summary>
      <param name="pFormatetc" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure, passed by reference, that defines the format, target device, aspect, and medium that will be used for future notifications.">Structure <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />, passée par référence, qui définit le format, le périphérique cible, l'aspect et le support qui seront utilisés pour les futures notifications.</param>
      <param name="advf" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.ADVF&quot; /&gt; values that specifies a group of flags for controlling the advisory connection.">L'une des valeurs <see cref="T:System.Runtime.InteropServices.ComTypes.ADVF" /> spécifiant un groupe d'indicateurs pour le contrôle de la connexion de notifications.</param>
      <param name="adviseSink" vsli:raw="A pointer to the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.IAdviseSink&quot; /&gt; interface on the advisory sink that will receive the change notification.">Pointeur vers l'interface <see cref="T:System.Runtime.InteropServices.ComTypes.IAdviseSink" /> sur le récepteur de notifications qui recevra la notification de modifications.</param>
      <param name="connection" vsli:raw="When this method returns, contains a pointer to a DWORD token that identifies this connection. You can use this token later to delete the advisory connection by passing it to &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(System.Int32)&quot; /&gt;. If this value is zero, the connection was not established. This parameter is passed uninitialized.">Cette méthode retourne un pointeur vers un jeton DWORD qui identifie cette connexion. Vous pouvez utiliser ultérieurement ce jeton pour supprimer la connexion de notifications en le passant à <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(System.Int32)" />. Si cette valeur est nulle, la connexion n'a pas été établie. Ce paramètre est passé sans être initialisé.</param>
      <returns vsli:raw="This method supports the standard return values E_INVALIDARG, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following:  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Description&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; S_OK&lt;/term&gt;&lt;description&gt; The advisory connection was created.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; E_NOTIMPL&lt;/term&gt;&lt;description&gt; This method is not implemented on the data object.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_LINDEX&lt;/term&gt;&lt;description&gt; There is an invalid value for &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex&quot; /&gt;; currently, only -1 is supported.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_FORMATETC&lt;/term&gt;&lt;description&gt; There is an invalid value for the &lt;paramref name=&quot;pFormatetc&quot; /&gt; parameter.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; OLE_E_ADVISENOTSUPPORTED&lt;/term&gt;&lt;description&gt; The data object does not support change notification.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">Cette méthode prend en charge les valeurs de retour E_INVALIDARG, E_UNEXPECTED et E_OUTOFMEMORY standard, ainsi que les suivantes : 
  Value 
  Description 
  S_OK 
  La connexion de notifications a été créée.  
  E_NOTIMPL 
  Cette méthode n'est pas implémentée sur l'objet de données.  
  DV_E_LINDEX 
  Il existe une valeur non valide pour <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" /> ; actuellement, seule la valeur -1 est prise en charge.  
  DV_E_FORMATETC 
  Il existe une valeur non valide pour le paramètre <paramref name="pFormatetc" />.  
  OLE_E_ADVISENOTSUPPORTED 
  L'objet de données ne prend pas en charge la notification de modifications.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(System.Int32)">
      <summary vsli:raw="Destroys a notification connection that had been previously established.">Détruit une connexion de notifications qui avait été établie précédemment.</summary>
      <param name="connection" vsli:raw="A DWORD token that specifies the connection to remove. Use the value returned by &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)&quot; /&gt; when the connection was originally established.">Jeton DWORD spécifiant la connexion à supprimer. Utilisez la valeur retournée par <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)" /> quand la connexion a été initialement établie.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumDAdvise(System.Runtime.InteropServices.ComTypes.IEnumSTATDATA@)">
      <summary vsli:raw="Creates an object that can be used to enumerate the current advisory connections.">Crée un objet qui peut être utilisé pour énumérer les connexions de notifications actuelles.</summary>
      <param name="enumAdvise" vsli:raw="When this method returns, contains an &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA&quot; /&gt; that receives the interface pointer to the new enumerator object. If the implementation sets &lt;paramref name=&quot;enumAdvise&quot; /&gt; to &lt;see langword=&quot;null&quot; /&gt;, there are no connections to advisory sinks at this time. This parameter is passed uninitialized.">Cette méthode retourne un <see cref="T:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA" /> qui reçoit le pointeur d'interface vers le nouvel objet énumérateur. Si l'implémentation définit <paramref name="enumAdvise" /> à <see langword="null" />, il n'existe actuellement aucune connexion aux récepteurs de notifications. Ce paramètre est passé sans être initialisé.</param>
      <returns vsli:raw="This method supports the standard return value E_OUTOFMEMORY, as well as the following:  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Description&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; S_OK&lt;/term&gt;&lt;description&gt; The enumerator object is successfully instantiated or there are no connections.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; OLE_E_ADVISENOTSUPPORTED&lt;/term&gt;&lt;description&gt; This object does not support advisory notifications.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">Cette méthode prend en charge la valeur de retour E_OUTOFMEMORY standard, ainsi que les suivantes :  
  Value  

  Description  

  S_OK  

  L'objet énumérateur est instancié avec succès ou il n'existe aucune connexion.  

  OLE_E_ADVISENOTSUPPORTED  

  Cet objet ne prend pas en charge les notifications consultatives.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)">
      <summary vsli:raw="Creates an object for enumerating the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structures for a data object. These structures are used in calls to &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt; or &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)&quot; /&gt;.">Crée un objet pour l'énumération des structures <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> d'un objet de données. Ces structures sont utilisées dans les appels à <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> ou à <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" />.</summary>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.DATADIR&quot; /&gt; values that specifies the direction of the data.">L'une des valeurs <see cref="T:System.Runtime.InteropServices.ComTypes.DATADIR" /> spécifiant la direction des données.</param>
      <returns vsli:raw="This method supports the standard return values E_INVALIDARG and E_OUTOFMEMORY, as well as the following:  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Description&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; S_OK&lt;/term&gt;&lt;description&gt; The enumerator object was successfully created.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; E_NOTIMPL&lt;/term&gt;&lt;description&gt; The direction specified by the &lt;paramref name=&quot;direction&quot; /&gt; parameter is not supported.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; OLE_S_USEREG&lt;/term&gt;&lt;description&gt; Requests that OLE enumerate the formats from the registry.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">Cette méthode prend en charge les valeurs de retour E_INVALIDARG et E_OUTOFMEMORY standard, ainsi que les suivantes : 
  Value 
  Description 
  S_OK 
  L'objet énumérateur a été créé avec succès.  
  E_NOTIMPL 
  La direction spécifiée par le paramètre <paramref name="direction" /> n'est pas prise en charge.  
  OLE_S_USEREG 
  Demande qu'OLE énumère les formats à partir du Registre.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetCanonicalFormatEtc(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)">
      <summary vsli:raw="Provides a standard &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure that is logically equivalent to a more complex structure. Use this method to determine whether two different &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structures would return the same data, removing the need for duplicate rendering.">Fournit une structure <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> standard qui équivaut logiquement à une structure plus complexe. Utilisez cette méthode pour déterminer si deux structures <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> différentes retourneraient les mêmes données, rendant ainsi superflu le rendu en double.</summary>
      <param name="formatIn" vsli:raw="A pointer to a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure, passed by reference, that defines the format, medium, and target device that the caller would like to use to retrieve data in a subsequent call such as &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt;. The &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.TYMED&quot; /&gt; member is not significant in this case and should be ignored.">Pointeur vers une structure <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />, passée par référence, qui définit le format, le support et le périphérique cible que l'appelant souhaite utiliser pour récupérer des données dans un appel suivant, tel que <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />. Le membre <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> n'est pas significatif dans ce cas et doit être ignoré.</param>
      <param name="formatOut" vsli:raw="When this method returns, contains a pointer to a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure that contains the most general information possible for a specific rendering, making it canonically equivalent to &lt;c&gt;formatetcIn&lt;/c&gt;. The caller must allocate this structure and the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetCanonicalFormatEtc(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)&quot; /&gt; method must fill in the data. To retrieve data in a subsequent call such as &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt;, the caller uses the supplied value of &lt;paramref name=&quot;formatOut&quot; /&gt;, unless the value supplied is &lt;see langword=&quot;null&quot; /&gt;. This value is &lt;see langword=&quot;null&quot; /&gt; if the method returns &lt;see langword=&quot;DATA_S_SAMEFORMATETC&quot; /&gt;. The &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.TYMED&quot; /&gt; member is not significant in this case and should be ignored. This parameter is passed uninitialized.">Quand cette méthode retourne une valeur, contient un pointeur vers une structure <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> qui contient les informations les plus générales possibles pour un rendu spécifique, en le rendant canoniquement équivalent à <c>formatetcIn</c>. L'appelant doit allouer cette structure et la méthode <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetCanonicalFormatEtc(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)" /> doit remplir les données. Pour récupérer des données dans un appel suivant, tel que <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />, l'appelant utilise la valeur fournie de <paramref name="formatOut" />, à moins que la valeur fournie ne soit <see langword="null" />. Cette valeur est <see langword="null" /> si la méthode retourne <see langword="DATA_S_SAMEFORMATETC" />. Le membre <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> n'est pas significatif dans ce cas et doit être ignoré. Ce paramètre est passé sans être initialisé.</param>
      <returns vsli:raw="This method supports the standard return values E_INVALIDARG, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following:  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Description&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; S_OK&lt;/term&gt;&lt;description&gt; The returned &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure is different from the one that was passed.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DATA_S_SAMEFORMATETC&lt;/term&gt;&lt;description&gt; The &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structures are the same and &lt;see langword=&quot;null&quot; /&gt; is returned in the &lt;paramref name=&quot;formatOut&quot; /&gt; parameter.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_LINDEX&lt;/term&gt;&lt;description&gt; There is an invalid value for &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex&quot; /&gt;; currently, only -1 is supported.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_FORMATETC&lt;/term&gt;&lt;description&gt; There is an invalid value for the &lt;paramref name=&quot;pFormatetc&quot; /&gt; parameter.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; OLE_E_NOTRUNNING&lt;/term&gt;&lt;description&gt; The application is not running.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">Cette méthode prend en charge les valeurs de retour E_INVALIDARG, E_UNEXPECTED et E_OUTOFMEMORY standard, ainsi que les suivantes : 
  Value 
  Description 
  S_OK 
  La structure <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> retournée est différente de celle qui a été passée.  
  DATA_S_SAMEFORMATETC 
  Les structures <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> sont identiques et la valeur <see langword="null" /> est retournée dans le paramètre <paramref name="formatOut" />.  
  DV_E_LINDEX 
  Il existe une valeur non valide pour <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" /> ; actuellement, seule la valeur -1 est prise en charge.  
  DV_E_FORMATETC 
  Il existe une valeur non valide pour le paramètre <paramref name="pFormatetc" />.  
  OLE_E_NOTRUNNING 
  L'application n'est pas en cours d'exécution.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary vsli:raw="Obtains data from a source data object. The &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt; method, which is called by a data consumer, renders the data described in the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure and transfers it through the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt; structure. The caller then assumes responsibility for releasing the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt; structure.">Obtient des données à partir d'un objet de données source. La méthode <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> qui est appelée par un consommateur de données rend les données décrites dans la structure <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> spécifiée et les transfère par l'intermédiaire de la structure <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> spécifiée. L'appelant est ensuite chargé de libérer la structure <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" />.</summary>
      <param name="format" vsli:raw="A pointer to a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure, passed by reference, that defines the format, medium, and target device to use when passing the data. It is possible to specify more than one medium by using the Boolean OR operator, allowing the method to choose the best medium among those specified.">Pointeur vers une structure <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />, passée par référence, qui définit le format, le support et le périphérique cible à utiliser lors du passage des données. Il est possible de spécifier plusieurs supports à l'aide de l'opérateur booléen OR, en autorisant la méthode à choisir le support le mieux adapté parmi ceux spécifiés.</param>
      <param name="medium" vsli:raw="When this method returns, contains a pointer to the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt; structure that indicates the storage medium containing the returned data through its &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.tymed&quot; /&gt; member, and the responsibility for releasing the medium through the value of its &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member. If &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, the receiver of the medium is responsible for releasing it; otherwise, &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; points to the &lt;see langword=&quot;IUnknown&quot; /&gt; interface on the appropriate object so its &lt;see langword=&quot;Release&quot; /&gt; method can be called. The medium must be allocated and filled in by &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt;. This parameter is passed uninitialized.">Cette méthode retourne un pointeur vers la structure <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> qui indique le support de stockage contenant les données retournées via son membre <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.tymed" />, ainsi que la responsabilité de libérer le support via la valeur de son membre <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" />. Si <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> est <see langword="null" />, le récepteur du support est chargé de le libérer ; sinon, <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> pointe vers l'interface <see langword="IUnknown" /> sur l'objet approprié afin que sa méthode <see langword="Release" /> puisse être appelée. Le support doit être alloué et rempli par <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary vsli:raw="Obtains data from a source data object. This method, which is called by a data consumer, differs from the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt; method in that the caller must allocate and free the specified storage medium.">Obtient des données à partir d'un objet de données source. Cette méthode, qui est appelée par un consommateur de données, diffère de la méthode <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> en ce sens que l'appelant doit allouer et libérer le support de stockage spécifié.</summary>
      <param name="format" vsli:raw="A pointer to a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure, passed by reference, that defines the format, medium, and target device to use when passing the data. Only one medium can be specified in &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.TYMED&quot; /&gt;, and only the following &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.TYMED&quot; /&gt; values are valid: &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTORAGE&quot; /&gt;, &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTREAM&quot; /&gt;, &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_HGLOBAL&quot; /&gt;, or &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_FILE&quot; /&gt;.">Pointeur vers une structure <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />, passée par référence, qui définit le format, le support et le périphérique cible à utiliser lors du passage des données. Un seul support peut être spécifié dans <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" />, et seules les valeurs <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> suivantes sont valides : <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTORAGE" />, <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTREAM" />, <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_HGLOBAL" /> ou <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_FILE" />.</param>
      <param name="medium" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;, passed by reference, that defines the storage medium containing the data being transferred. The medium must be allocated by the caller and filled in by &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt;. The caller must also free the medium. The implementation of this method must always supply a value of &lt;see langword=&quot;null&quot; /&gt; for the &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt; structure that this parameter points to.">
        <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" />, passé par référence, qui définit le support de stockage contenant les données transférées. Le support doit être alloué par l'appelant et rempli par <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />. L'appelant doit également libérer le support. L'implémentation de cette méthode doit toujours fournir une valeur <see langword="null" /> pour le membre <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> de la structure <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> vers lequel ce paramètre pointe.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.QueryGetData(System.Runtime.InteropServices.ComTypes.FORMATETC@)">
      <summary vsli:raw="Determines whether the data object is capable of rendering the data described in the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure. Objects attempting a paste or drop operation can call this method before calling &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt; to get an indication of whether the operation may be successful.">Détermine si l'objet de données est capable de rendre les données décrites dans la structure <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />. Les objets qui tentent une opération de collage ou de déplacement peuvent appeler cette méthode avant d'appeler <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> pour obtenir savoir si l'opération a des chances de réussir.</summary>
      <param name="format" vsli:raw="A pointer to a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure, passed by reference, that defines the format, medium, and target device to use for the query.">Pointeur vers une structure <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />, passée par référence, qui définit le format, le support et le périphérique cible à utiliser pour la requête.</param>
      <returns vsli:raw="This method supports the standard return values E_INVALIDARG, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following:  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Description&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; S_OK&lt;/term&gt;&lt;description&gt; A subsequent call to &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt; would probably be successful.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_LINDEX&lt;/term&gt;&lt;description&gt; An invalid value for &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex&quot; /&gt;; currently, only -1 is supported.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_FORMATETC&lt;/term&gt;&lt;description&gt; An invalid value for the &lt;paramref name=&quot;pFormatetc&quot; /&gt; parameter.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_TYMED&lt;/term&gt;&lt;description&gt; An invalid &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.FORMATETC.tymed&quot; /&gt; value.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_DVASPECT&lt;/term&gt;&lt;description&gt; An invalid &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.FORMATETC.dwAspect&quot; /&gt; value.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; OLE_E_NOTRUNNING&lt;/term&gt;&lt;description&gt; The application is not running.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">Cette méthode prend en charge les valeurs de retour E_INVALIDARG, E_UNEXPECTED et E_OUTOFMEMORY standard, ainsi que les suivantes : 
  Value 
  Description 
  S_OK 
  Un appel ultérieur à <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> réussira probablement.  
  DV_E_LINDEX 
  Valeur non valide pour <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" /> ; actuellement, seule la valeur -1 est prise en charge.  
  DV_E_FORMATETC 
  Valeur non valide pour le paramètre <paramref name="pFormatetc" />.  
  DV_E_TYMED 
  Valeur <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.tymed" /> non valide.  
  DV_E_DVASPECT 
  Valeur <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.dwAspect" /> non valide.  
  OLE_E_NOTRUNNING 
  L'application n'est pas en cours d'exécution.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)">
      <summary vsli:raw="Transfers data to the object that implements this method. This method is called by an object that contains a data source.">Transfère des données vers l'objet qui implémente cette méthode. Cette méthode est appelée par un objet qui contient une source de données.</summary>
      <param name="formatIn" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure, passed by reference, that defines the format used by the data object when interpreting the data contained in the storage medium.">Structure <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />, passée par référence, qui définit le format utilisé par l'objet de données lors de l'interprétation des données contenues dans le support de stockage.</param>
      <param name="medium" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt; structure, passed by reference, that defines the storage medium in which the data is being passed.">Structure <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" />, passée par référence, qui définit le support de stockage dans lequel les données sont passées.</param>
      <param name="release" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to specify that the data object called, which implements &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)&quot; /&gt;, owns the storage medium after the call returns. This means that the data object must free the medium after it has been used by calling the &lt;see langword=&quot;ReleaseStgMedium&quot; /&gt; function. &lt;see langword=&quot;false&quot; /&gt; to specify that the caller retains ownership of the storage medium, and the data object called uses the storage medium for the duration of the call only.">
        <see langword="true" /> pour spécifier que l'objet de données appelé, qui implémente <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" />, possède le support de stockage après le retour d'appel. Cela signifie que l'objet de données doit libérer le support après qu'il a été utilisé en appelant la fonction <see langword="ReleaseStgMedium" />. <see langword="false" /> pour spécifier que l'appelant conserve la propriété du support de stockage, et que l'objet de données appelé n'utilise le support de stockage que pendant la durée de l'appel.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IDLDESC">
      <summary vsli:raw="Contains information needed for transferring a structure element, parameter, or function return value between processes.">Contient les informations nécessaires pour transférer un élément de structure, un paramètre ou une valeur de retour de fonction entre des processus.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLDESC.dwReserved">
      <summary vsli:raw="Reserved; set to &lt;see langword=&quot;null&quot; /&gt;.">Réservé ; a la valeur <see langword="null" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLDESC.wIDLFlags">
      <summary vsli:raw="Indicates an &lt;see cref=&quot;T:System.Runtime.InteropServices.IDLFLAG&quot; /&gt; value describing the type.">Indique une valeur <see cref="T:System.Runtime.InteropServices.IDLFLAG" /> décrivant le type.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IDLFLAG">
      <summary vsli:raw="Describes how to transfer a structure element, parameter, or function return value between processes.">Décrit comment transférer un élément de structure, un paramètre ou une valeur de retour de fonction entre des processus.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FIN">
      <summary vsli:raw="The parameter passes information from the caller to the callee.">Le paramètre passe des informations de l'appelant à l'appelé.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FLCID">
      <summary vsli:raw="The parameter is the local identifier of a client application.">Le paramètre est l'identificateur local d'une application cliente.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FOUT">
      <summary vsli:raw="The parameter returns information from the callee to the caller.">Le paramètre retourne des informations de l'appelé à l'appelant.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FRETVAL">
      <summary vsli:raw="The parameter is the return value of the member.">Le paramètre est la valeur de retour du membre.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_NONE">
      <summary vsli:raw="Does not specify whether the parameter passes or receives information.">Ne spécifie pas si le paramètre passe ou reçoit des informations.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints">
      <summary vsli:raw="Manages the definition of the &lt;see langword=&quot;IEnumConnectionPoints&quot; /&gt; interface.">Gère la définition de l'interface <see langword="IEnumConnectionPoints" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Clone(System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints@)">
      <summary vsli:raw="Creates a new enumerator that contains the same enumeration state as the current one.">Crée un autre énumérateur qui contient le même état d'énumération que l'énumérateur en cours.</summary>
      <param name="ppenum" vsli:raw="When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.">Cette méthode retourne une référence à l'énumérateur créé récemment. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Next(System.Int32,System.Runtime.InteropServices.ComTypes.IConnectionPoint[],System.IntPtr)">
      <summary vsli:raw="Retrieves a specified number of items in the enumeration sequence.">Récupère un nombre spécifié d’éléments dans la séquence d’énumération.</summary>
      <param name="celt" vsli:raw="The number of &lt;see langword=&quot;IConnectionPoint&quot; /&gt; references to return in &lt;paramref name=&quot;rgelt&quot; /&gt;.">Nombre de références <see langword="IConnectionPoint" /> à retourner dans <paramref name="rgelt" />.</param>
      <param name="rgelt" vsli:raw="When this method returns, contains a reference to the enumerated connections. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une référence aux connexions énumérées. Ce paramètre est passé sans être initialisé.</param>
      <param name="pceltFetched" vsli:raw="When this method returns, contains a reference to the actual number of connections enumerated in &lt;paramref name=&quot;rgelt&quot; /&gt;.">Lorsque cette méthode retourne une valeur, contient une référence au nombre réel de connexions énumérées dans <paramref name="rgelt" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the &lt;paramref name=&quot;pceltFetched&quot; /&gt; parameter equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">
        <see langword="S_OK" /> si le paramètre <paramref name="pceltFetched" /> est égal au paramètre <paramref name="celt" /> ; sinon, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Reset">
      <summary vsli:raw="Resets the enumeration sequence to the beginning.">Réinitialise la séquence d'énumération au début.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Skip(System.Int32)">
      <summary vsli:raw="Skips a specified number of items in the enumeration sequence.">Ignore un nombre défini d'éléments dans la séquence d'énumération.</summary>
      <param name="celt" vsli:raw="The number of elements to skip in the enumeration.">Nombre d’éléments à ignorer dans l’énumération.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the number of elements skipped equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">
        <see langword="S_OK" /> si le nombre d'éléments ignorés est égal au paramètre <paramref name="celt" /> ; sinon, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumConnections">
      <summary vsli:raw="Manages the definition of the &lt;see langword=&quot;IEnumConnections&quot; /&gt; interface.">Gère la définition de l'interface <see langword="IEnumConnections" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Clone(System.Runtime.InteropServices.ComTypes.IEnumConnections@)">
      <summary vsli:raw="Creates a new enumerator that contains the same enumeration state as the current one.">Crée un autre énumérateur qui contient le même état d'énumération que l'énumérateur en cours.</summary>
      <param name="ppenum" vsli:raw="When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.">Cette méthode retourne une référence à l'énumérateur créé récemment. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Next(System.Int32,System.Runtime.InteropServices.ComTypes.CONNECTDATA[],System.IntPtr)">
      <summary vsli:raw="Retrieves a specified number of items in the enumeration sequence.">Récupère un nombre spécifié d’éléments dans la séquence d’énumération.</summary>
      <param name="celt" vsli:raw="The number of &lt;see cref=&quot;T:System.Runtime.InteropServices.CONNECTDATA&quot; /&gt; structures to return in &lt;paramref name=&quot;rgelt&quot; /&gt;.">Nombre de structures <see cref="T:System.Runtime.InteropServices.CONNECTDATA" /> à retourner dans <paramref name="rgelt" />.</param>
      <param name="rgelt" vsli:raw="When this method returns, contains a reference to the enumerated connections. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une référence aux connexions énumérées. Ce paramètre est passé sans être initialisé.</param>
      <param name="pceltFetched" vsli:raw="When this method returns, contains a reference to the actual number of connections enumerated in &lt;paramref name=&quot;rgelt&quot; /&gt;.">Lorsque cette méthode retourne une valeur, contient une référence au nombre réel de connexions énumérées dans <paramref name="rgelt" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the &lt;paramref name=&quot;pceltFetched&quot; /&gt; parameter equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">
        <see langword="S_OK" /> si le paramètre <paramref name="pceltFetched" /> est égal au paramètre <paramref name="celt" /> ; sinon, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Reset">
      <summary vsli:raw="Resets the enumeration sequence to the beginning.">Réinitialise la séquence d'énumération au début.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Skip(System.Int32)">
      <summary vsli:raw="Skips a specified number of items in the enumeration sequence.">Ignore un nombre défini d'éléments dans la séquence d'énumération.</summary>
      <param name="celt" vsli:raw="The number of elements to skip in the enumeration.">Nombre d’éléments à ignorer dans l’énumération.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the number of elements skipped equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">
        <see langword="S_OK" /> si le nombre d'éléments ignorés est égal au paramètre <paramref name="celt" /> ; sinon, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IEnumFORMATETC&quot; /&gt; interface.">Fournit la définition managée de l'interface <see langword="IEnumFORMATETC" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Clone(System.Runtime.InteropServices.ComTypes.IEnumFORMATETC@)">
      <summary vsli:raw="Creates a new enumerator that contains the same enumeration state as the current enumerator.">Crée un autre énumérateur qui contient le même état d'énumération que l'énumérateur en cours.</summary>
      <param name="newEnum" vsli:raw="When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.">Cette méthode retourne une référence à l'énumérateur créé récemment. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Next(System.Int32,System.Runtime.InteropServices.ComTypes.FORMATETC[],System.Int32[])">
      <summary vsli:raw="Retrieves a specified number of items in the enumeration sequence.">Récupère un nombre spécifié d’éléments dans la séquence d’énumération.</summary>
      <param name="celt" vsli:raw="The number of &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; references to return in &lt;paramref name=&quot;rgelt&quot; /&gt;.">Nombre de références <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> à retourner dans <paramref name="rgelt" />.</param>
      <param name="rgelt" vsli:raw="When this method returns, contains a reference to the enumerated &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; references. This parameter is passed uninitialized.">Cette méthode retourne une référence aux références <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> énumérés. Ce paramètre est passé sans être initialisé.</param>
      <param name="pceltFetched" vsli:raw="When this method returns, contains a reference to the actual number of references enumerated in &lt;paramref name=&quot;rgelt&quot; /&gt;. This parameter is passed uninitialized.">Cette méthode retourne une référence au nombre réel de références énumérées dans <paramref name="rgelt" />. Ce paramètre est passé sans être initialisé.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the &lt;paramref name=&quot;pceltFetched&quot; /&gt; parameter equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">
        <see langword="S_OK" /> si le paramètre <paramref name="pceltFetched" /> est égal au paramètre <paramref name="celt" /> ; sinon, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Reset">
      <summary vsli:raw="Resets the enumeration sequence to the beginning.">Réinitialise la séquence d'énumération au début.</summary>
      <returns vsli:raw="An HRESULT with the value &lt;see langword=&quot;S_OK&quot; /&gt;.">HRESULT avec la valeur <see langword="S_OK" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Skip(System.Int32)">
      <summary vsli:raw="Skips a specified number of items in the enumeration sequence.">Ignore un nombre défini d'éléments dans la séquence d'énumération.</summary>
      <param name="celt" vsli:raw="The number of elements to skip in the enumeration.">Nombre d’éléments à ignorer dans l’énumération.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the number of elements skipped equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">
        <see langword="S_OK" /> si le nombre d'éléments ignorés est égal au paramètre <paramref name="celt" /> ; sinon, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumMoniker">
      <summary vsli:raw="Manages the definition of the &lt;see langword=&quot;IEnumMoniker&quot; /&gt; interface.">Gère la définition de l'interface <see langword="IEnumMoniker" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Clone(System.Runtime.InteropServices.ComTypes.IEnumMoniker@)">
      <summary vsli:raw="Creates a new enumerator that contains the same enumeration state as the current one.">Crée un autre énumérateur qui contient le même état d'énumération que l'énumérateur en cours.</summary>
      <param name="ppenum" vsli:raw="When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.">Cette méthode retourne une référence à l'énumérateur créé récemment. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Next(System.Int32,System.Runtime.InteropServices.ComTypes.IMoniker[],System.IntPtr)">
      <summary vsli:raw="Retrieves a specified number of items in the enumeration sequence.">Récupère un nombre spécifié d’éléments dans la séquence d’énumération.</summary>
      <param name="celt" vsli:raw="The number of monikers to return in &lt;paramref name=&quot;rgelt&quot; /&gt;.">Nombre de monikers à retourner dans <paramref name="rgelt" />.</param>
      <param name="rgelt" vsli:raw="When this method returns, contains a reference to the enumerated monikers. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une référence aux monikers énumérés. Ce paramètre est passé sans être initialisé.</param>
      <param name="pceltFetched" vsli:raw="When this method returns, contains a reference to the actual number of monikers enumerated in &lt;paramref name=&quot;rgelt&quot; /&gt;.">Lorsque cette méthode retourne une valeur, contient une référence au nombre réel de monikers énumérés dans <paramref name="rgelt" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the &lt;paramref name=&quot;pceltFetched&quot; /&gt; parameter equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">
        <see langword="S_OK" /> si le paramètre <paramref name="pceltFetched" /> est égal au paramètre <paramref name="celt" /> ; sinon, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Reset">
      <summary vsli:raw="Resets the enumeration sequence to the beginning.">Réinitialise la séquence d'énumération au début.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Skip(System.Int32)">
      <summary vsli:raw="Skips a specified number of items in the enumeration sequence.">Ignore un nombre défini d'éléments dans la séquence d'énumération.</summary>
      <param name="celt" vsli:raw="The number of elements to skip in the enumeration.">Nombre d’éléments à ignorer dans l’énumération.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the number of elements skipped equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">
        <see langword="S_OK" /> si le nombre d'éléments ignorés est égal au paramètre <paramref name="celt" /> ; sinon, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IEnumSTATDATA&quot; /&gt; interface.">Fournit la définition managée de l'interface <see langword="IEnumSTATDATA" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Clone(System.Runtime.InteropServices.ComTypes.IEnumSTATDATA@)">
      <summary vsli:raw="Creates a new enumerator that contains the same enumeration state as the current enumerator.">Crée un autre énumérateur qui contient le même état d'énumération que l'énumérateur en cours.</summary>
      <param name="newEnum" vsli:raw="When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.">Cette méthode retourne une référence à l'énumérateur créé récemment. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Next(System.Int32,System.Runtime.InteropServices.ComTypes.STATDATA[],System.Int32[])">
      <summary vsli:raw="Retrieves a specified number of items in the enumeration sequence.">Récupère un nombre spécifié d’éléments dans la séquence d’énumération.</summary>
      <param name="celt" vsli:raw="The number of &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STATDATA&quot; /&gt; references to return in &lt;paramref name=&quot;rgelt&quot; /&gt;.">Nombre de références <see cref="T:System.Runtime.InteropServices.ComTypes.STATDATA" /> à retourner dans <paramref name="rgelt" />.</param>
      <param name="rgelt" vsli:raw="When this method returns, contains a reference to the enumerated &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STATDATA&quot; /&gt; references. This parameter is passed uninitialized.">Cette méthode retourne une référence aux références <see cref="T:System.Runtime.InteropServices.ComTypes.STATDATA" /> énumérés. Ce paramètre est passé sans être initialisé.</param>
      <param name="pceltFetched" vsli:raw="When this parameter returns, contains a reference to the actual number of references enumerated in &lt;paramref name=&quot;rgelt&quot; /&gt;. This parameter is passed uninitialized.">Lorsque ce paramètre est retourné, contient une référence au nombre réel de références énumérées dans <paramref name="rgelt" />. Ce paramètre est passé sans être initialisé.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the &lt;paramref name=&quot;pceltFetched&quot; /&gt; parameter equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">
        <see langword="S_OK" /> si le paramètre <paramref name="pceltFetched" /> est égal au paramètre <paramref name="celt" /> ; sinon, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Reset">
      <summary vsli:raw="Resets the enumeration sequence to the beginning.">Réinitialise la séquence d'énumération au début.</summary>
      <returns vsli:raw="An HRESULT with the value &lt;see langword=&quot;S_OK&quot; /&gt;.">HRESULT avec la valeur <see langword="S_OK" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Skip(System.Int32)">
      <summary vsli:raw="Skips a specified number of items in the enumeration sequence.">Ignore un nombre défini d'éléments dans la séquence d'énumération.</summary>
      <param name="celt" vsli:raw="The number of elements to skip in the enumeration.">Nombre d’éléments à ignorer dans l’énumération.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the number of elements skipped equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">
        <see langword="S_OK" /> si le nombre d'éléments ignorés est égal au paramètre <paramref name="celt" /> ; sinon, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumString">
      <summary vsli:raw="Manages the definition of the &lt;see langword=&quot;IEnumString&quot; /&gt; interface.">Gère la définition de l'interface <see langword="IEnumString" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Clone(System.Runtime.InteropServices.ComTypes.IEnumString@)">
      <summary vsli:raw="Creates a new enumerator that contains the same enumeration state as the current one.">Crée un autre énumérateur qui contient le même état d'énumération que l'énumérateur en cours.</summary>
      <param name="ppenum" vsli:raw="When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.">Cette méthode retourne une référence à l'énumérateur créé récemment. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Next(System.Int32,System.String[],System.IntPtr)">
      <summary vsli:raw="Retrieves a specified number of items in the enumeration sequence.">Récupère un nombre spécifié d’éléments dans la séquence d’énumération.</summary>
      <param name="celt" vsli:raw="The number of strings to return in &lt;paramref name=&quot;rgelt&quot; /&gt;.">Nombre de chaînes à retourner dans <paramref name="rgelt" />.</param>
      <param name="rgelt" vsli:raw="When this method returns, contains a reference to the enumerated strings. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une référence aux chaînes énumérées. Ce paramètre est passé sans être initialisé.</param>
      <param name="pceltFetched" vsli:raw="When this method returns, contains a reference to the actual number of strings enumerated in &lt;paramref name=&quot;rgelt&quot; /&gt;.">Lorsque cette méthode retourne une valeur, contient une référence au nombre réel de chaînes énumérées dans <paramref name="rgelt" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the &lt;paramref name=&quot;pceltFetched&quot; /&gt; parameter equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">
        <see langword="S_OK" /> si le paramètre <paramref name="pceltFetched" /> est égal au paramètre <paramref name="celt" /> ; sinon, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Reset">
      <summary vsli:raw="Resets the enumeration sequence to the beginning.">Réinitialise la séquence d'énumération au début.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Skip(System.Int32)">
      <summary vsli:raw="Skips a specified number of items in the enumeration sequence.">Ignore un nombre défini d'éléments dans la séquence d'énumération.</summary>
      <param name="celt" vsli:raw="The number of elements to skip in the enumeration.">Nombre d’éléments à ignorer dans l’énumération.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the number of elements skipped equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">
        <see langword="S_OK" /> si le nombre d'éléments ignorés est égal au paramètre <paramref name="celt" /> ; sinon, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumVARIANT">
      <summary vsli:raw="Manages the definition of the &lt;see langword=&quot;IEnumVARIANT&quot; /&gt; interface.">Gère la définition de l'interface <see langword="IEnumVARIANT" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Clone">
      <summary vsli:raw="Creates a new enumerator that contains the same enumeration state as the current one.">Crée un autre énumérateur qui contient le même état d'énumération que l'énumérateur en cours.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.IEnumVARIANT&quot; /&gt; reference to the newly created enumerator.">Référence <see cref="T:System.Runtime.InteropServices.ComTypes.IEnumVARIANT" /> à l'énumérateur nouvellement créé.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Next(System.Int32,System.Object[],System.IntPtr)">
      <summary vsli:raw="Retrieves a specified number of items in the enumeration sequence.">Récupère un nombre spécifié d’éléments dans la séquence d’énumération.</summary>
      <param name="celt" vsli:raw="The number of elements to return in &lt;c&gt;rgelt&lt;/c&gt;.">Nombre d’éléments à retourner dans <c>rgelt</c>.</param>
      <param name="rgVar" vsli:raw="When this method returns, contains a reference to the enumerated elements. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une référence aux éléments énumérés. Ce paramètre est passé sans être initialisé.</param>
      <param name="pceltFetched" vsli:raw="When this method returns, contains a reference to the actual number of elements enumerated in &lt;c&gt;rgelt&lt;/c&gt;.">Quand cette méthode retourne une valeur, contient une référence au nombre réel d’éléments énumérés dans <c>rgelt</c>.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the &lt;paramref name=&quot;pceltFetched&quot; /&gt; parameter equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">
        <see langword="S_OK" /> si le paramètre <paramref name="pceltFetched" /> est égal au paramètre <paramref name="celt" /> ; sinon, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Reset">
      <summary vsli:raw="Resets the enumeration sequence to the beginning.">Réinitialise la séquence d'énumération au début.</summary>
      <returns vsli:raw="An HRESULT with the value &lt;see langword=&quot;S_OK&quot; /&gt;.">HRESULT avec la valeur <see langword="S_OK" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Skip(System.Int32)">
      <summary vsli:raw="Skips a specified number of items in the enumeration sequence.">Ignore un nombre défini d'éléments dans la séquence d'énumération.</summary>
      <param name="celt" vsli:raw="The number of elements to skip in the enumeration.">Nombre d’éléments à ignorer dans l’énumération.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the number of elements skipped equals &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">
        <see langword="S_OK" /> si le nombre d’éléments ignorés est égal au paramètre <paramref name="celt" /> ; sinon, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IMoniker">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IMoniker&quot; /&gt; interface, with COM functionality from &lt;see langword=&quot;IPersist&quot; /&gt; and &lt;see langword=&quot;IPersistStream&quot; /&gt;.">Fournit la définition managée de l'interface <see langword="IMoniker" />, avec une fonctionnalité COM provenant de <see langword="IPersist" /> et <see langword="IPersistStream" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.BindToObject(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Guid@,System.Object@)">
      <summary vsli:raw="Uses the moniker to bind to the object that it identifies.">Utilise le moniker pour établir une liaison à l'objet qu'il identifie.</summary>
      <param name="pbc" vsli:raw="A reference to the &lt;see langword=&quot;IBindCtx&quot; /&gt; interface on the bind context object used in this binding operation.">Référence à l'interface <see langword="IBindCtx" /> sur l'objet de contexte de liaison utilisé dans cette opération de liaison.</param>
      <param name="pmkToLeft" vsli:raw="A reference to the moniker to the left of the current moniker, if the moniker is part of a composite moniker.">Référence au moniker à gauche du moniker en cours, si le moniker fait partie d'un moniker composite.</param>
      <param name="riidResult" vsli:raw="The interface identifier (IID) of the interface that the client intends to use to communicate with the object that the moniker identifies.">IID (ID d'interface) de l'interface que le client a l'intention d'utiliser pour communiquer avec l'objet que le moniker identifie.</param>
      <param name="ppvResult" vsli:raw="When this method returns, contains a reference to the interface requested by &lt;paramref name=&quot;riidResult&quot; /&gt;. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une référence à l'interface demandée par <paramref name="riidResult" />. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.BindToStorage(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Guid@,System.Object@)">
      <summary vsli:raw="Retrieves an interface pointer to the storage that contains the object identified by the moniker.">Récupère un pointeur d'interface vers le stockage qui contient l'objet identifié par le moniker.</summary>
      <param name="pbc" vsli:raw="A reference to the &lt;see langword=&quot;IBindCtx&quot; /&gt; interface on the bind context object used during this binding operation.">Référence à l'interface <see langword="IBindCtx" /> sur l'objet de contexte de liaison utilisé dans cette opération de liaison.</param>
      <param name="pmkToLeft" vsli:raw="A reference to the moniker to the left of the current moniker, if the moniker is part of a composite moniker.">Référence au moniker à gauche du moniker en cours, si le moniker fait partie d'un moniker composite.</param>
      <param name="riid" vsli:raw="The interface identifier (IID) of the storage interface requested.">ID d'interface (IID, interface identifier) de l'interface de stockage demandée.</param>
      <param name="ppvObj" vsli:raw="When this method returns, contains a reference to the interface requested by &lt;paramref name=&quot;riid&quot; /&gt;. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une référence à l'interface demandée par <paramref name="riid" />. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.CommonPrefixWith(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary vsli:raw="Creates a new moniker based on the common prefix that this moniker shares with another moniker.">Crée un nouveau moniker basé sur le préfixe commun que ce moniker partage avec un autre moniker.</summary>
      <param name="pmkOther" vsli:raw="A reference to the &lt;see langword=&quot;IMoniker&quot; /&gt; interface on another moniker to compare with the current moniker for a common prefix.">Référence à l'interface <see langword="IMoniker" /> sur un autre moniker à comparer avec le moniker en cours pour identifier un préfixe commun.</param>
      <param name="ppmkPrefix" vsli:raw="When this method returns, contains the moniker that is the common prefix of the current moniker and &lt;paramref name=&quot;pmkOther&quot; /&gt;. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient le moniker qui est le préfixe commun du moniker actuel et de <paramref name="pmkOther" />. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.ComposeWith(System.Runtime.InteropServices.ComTypes.IMoniker,System.Boolean,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary vsli:raw="Combines the current moniker with another moniker, creating a new composite moniker.">Combine le moniker en cours à un autre moniker, créant un nouveau moniker composite.</summary>
      <param name="pmkRight" vsli:raw="A reference to the &lt;see langword=&quot;IMoniker&quot; /&gt; interface on a moniker to append to the end of the current moniker.">Référence à l'interface <see langword="IMoniker" /> sur un moniker à ajouter à la fin du moniker actuel.</param>
      <param name="fOnlyIfNotGeneric" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the caller requires a nongeneric composition. The operation proceeds only if &lt;paramref name=&quot;pmkRight&quot; /&gt; is a moniker class that the current moniker can combine with in some way other than forming a generic composite. &lt;see langword=&quot;false&quot; /&gt; to indicate that the method can create a generic composite if necessary.">
        <see langword="true" /> pour indiquer que l'appelant exige une composition non générique. L'opération ne continue que si <paramref name="pmkRight" /> est une classe de moniker avec laquelle le moniker actuel peut se combiner d'une certaine manière, autrement qu'en constituant un composite générique. <see langword="false" /> pour indiquer que la méthode peut créer un composite générique si nécessaire.</param>
      <param name="ppmkComposite" vsli:raw="When this method returns, contains a reference to the resulting composite moniker. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une référence au moniker composite résultant. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Enum(System.Boolean,System.Runtime.InteropServices.ComTypes.IEnumMoniker@)">
      <summary vsli:raw="Supplies a pointer to an enumerator that can enumerate the components of a composite moniker.">Fournit un pointeur à un énumérateur pouvant énumérer les composants d'un moniker composite.</summary>
      <param name="fForward" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to enumerate the monikers from left to right. &lt;see langword=&quot;false&quot; /&gt; to enumerate from right to left.">
        <see langword="true" /> pour énumérer les monikers de gauche à droite. <see langword="false" /> pour énumérer de droite à gauche.</param>
      <param name="ppenumMoniker" vsli:raw="When this method returns, contains a reference to the enumerator object for the moniker. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une référence à l'objet énumérateur du moniker. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetClassID(System.Guid@)">
      <summary vsli:raw="Retrieves the class identifier (CLSID) of an object.">Récupère le CLSID (identificateur de classe).</summary>
      <param name="pClassID" vsli:raw="When this method returns, contains the CLSID. This parameter is passed uninitialized.">Lorsque cette méthode est retournée, contient le CLSID. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String@)">
      <summary vsli:raw="Gets the display name, which is a user-readable representation of the current moniker.">Obtient le nom complet, qui est une représentation lisible par l'utilisateur du moniker actuel.</summary>
      <param name="pbc" vsli:raw="A reference to the bind context to use in this operation.">Référence au contexte de liaison à utiliser dans cette opération.</param>
      <param name="pmkToLeft" vsli:raw="A reference to the moniker to the left of the current moniker, if the moniker is part of a composite moniker.">Référence au moniker à gauche du moniker en cours, si le moniker fait partie d'un moniker composite.</param>
      <param name="ppszDisplayName" vsli:raw="When this method returns, contains the display name string. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient la chaîne du nom complet. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetSizeMax(System.Int64@)">
      <summary vsli:raw="Returns the size, in bytes, of the stream needed to save the object.">Retourne la taille en octets du flux requis pour enregistrer l'objet.</summary>
      <param name="pcbSize" vsli:raw="When this method returns, contains a &lt;see langword=&quot;long&quot; /&gt; value indicating the size, in bytes, of the stream needed to save this object. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une valeur <see langword="long" /> indiquant la taille en octets du flux requis pour enregistrer cet objet. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetTimeOfLastChange(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.FILETIME@)">
      <summary vsli:raw="Provides a number representing the time that the object identified by the current moniker was last changed.">Fournit un nombre représentant l'heure de la dernière modification de l'objet identifié par le moniker actuel.</summary>
      <param name="pbc" vsli:raw="A reference to the bind context to use in this binding operation.">Référence au contexte de liaison à utiliser dans l'opération de liaison.</param>
      <param name="pmkToLeft" vsli:raw="A reference to the moniker to the left of the current moniker, if the moniker is part of a composite moniker.">Référence au moniker à gauche du moniker en cours, si le moniker fait partie d'un moniker composite.</param>
      <param name="pFileTime" vsli:raw="When this method returns, contains the time of the last change. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient l'heure de la dernière modification. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Hash(System.Int32@)">
      <summary vsli:raw="Calculates a 32-bit integer using the internal state of the moniker.">Calcule un entier 32 bits utilisant l'état interne du moniker.</summary>
      <param name="pdwHash" vsli:raw="When this method returns, contains the hash value for this moniker. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient la valeur de hachage de ce moniker. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Inverse(System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary vsli:raw="Provides a moniker that, when composed to the right of the current moniker or one of similar structure, composes to nothing.">Fournit un moniker qui, lorsqu'il est composé à la droite du moniker actuel ou d'un moniker de structure similaire, produit une composition nulle.</summary>
      <param name="ppmk" vsli:raw="When this method returns, contains a moniker that is the inverse of the current moniker. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient un moniker qui est l'inverse du moniker actuel. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsDirty">
      <summary vsli:raw="Checks the object for changes since it was last saved.">Vérifie si l'objet a subi des modifications depuis son dernier enregistrement.</summary>
      <returns vsli:raw="An &lt;see langword=&quot;S_OK&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value if the object has changed; otherwise, an &lt;see langword=&quot;S_FALSE&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value.">Valeur <see langword="S_OK" /><see langword="HRESULT" /> si l’objet a été modifié ; sinon, valeur <see langword="S_FALSE" /><see langword="HRESULT" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsEqual(System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary vsli:raw="Compares the current moniker with a specified moniker and indicates whether they are identical.">Compare le moniker actuel à un moniker spécifié et indique s'ils sont identiques.</summary>
      <param name="pmkOtherMoniker" vsli:raw="A reference to the moniker to use for comparison.">Référence au moniker à utiliser pour comparaison.</param>
      <returns vsli:raw="An &lt;see langword=&quot;S_OK&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value if the monikers are identical; otherwise, an &lt;see langword=&quot;S_FALSE&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value.">Valeur <see langword="S_OK" /><see langword="HRESULT" /> si les monikers sont identiques ; sinon, valeur <see langword="S_FALSE" /><see langword="HRESULT" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsRunning(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary vsli:raw="Determines whether the object that is identified by the current moniker is currently loaded and running.">Détermine si l'objet qui est identifié par le moniker en cours est actuellement chargé et en service.</summary>
      <param name="pbc" vsli:raw="A reference to the bind context to use in this binding operation.">Référence au contexte de liaison à utiliser dans l'opération de liaison.</param>
      <param name="pmkToLeft" vsli:raw="A reference to the moniker to the left of the current moniker if the current moniker is part of a composite.">Référence au moniker à gauche du moniker en cours, si ce dernier fait partie d'un composite.</param>
      <param name="pmkNewlyRunning" vsli:raw="A reference to the moniker most recently added to the Running Object Table (ROT).">Référence au dernier moniker ajouté à la table ROT (Running Object Table).</param>
      <returns vsli:raw="An &lt;see langword=&quot;S_OK&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value if the moniker is running; an &lt;see langword=&quot;S_FALSE&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value if the moniker is not running; or an &lt;see langword=&quot;E_UNEXPECTED&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value.">Valeur <see langword="S_OK" /><see langword="HRESULT" /> si le moniker est en service ; valeur <see langword="S_FALSE" /><see langword="HRESULT" /> si le moniker n’est pas en service ; ou valeur <see langword="E_UNEXPECTED" /><see langword="HRESULT" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsSystemMoniker(System.Int32@)">
      <summary vsli:raw="Indicates whether this moniker is of one of the system-supplied moniker classes.">Indique si ce moniker correspond à l'une des classes de moniker fournies par le système.</summary>
      <param name="pdwMksys" vsli:raw="When this method returns, contains a pointer to an integer that is one of the values from the &lt;see langword=&quot;MKSYS&quot; /&gt; enumeration, and refers to one of the COM moniker classes. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient un pointeur vers un entier faisant partie des valeurs de l'énumération <see langword="MKSYS" /> et faisant référence à l'une des classes de moniker COM. Ce paramètre est passé sans être initialisé.</param>
      <returns vsli:raw="An &lt;see langword=&quot;S_OK&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value if the moniker is a system moniker; otherwise, an &lt;see langword=&quot;S_FALSE&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value.">Valeur <see langword="S_OK" /><see langword="HRESULT" /> si le moniker est un moniker système ; sinon, valeur <see langword="S_FALSE" /><see langword="HRESULT" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Load(System.Runtime.InteropServices.ComTypes.IStream)">
      <summary vsli:raw="Initializes an object from the stream where it was previously saved.">Initialise un objet à partir du flux ayant été précédemment enregistré.</summary>
      <param name="pStm" vsli:raw="The stream that the object is loaded from.">Flux à partir duquel l'objet est chargé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.ParseDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String,System.Int32@,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary vsli:raw="Reads as many characters of the specified display name as the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IMoniker.ParseDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String,System.Int32@,System.Runtime.InteropServices.ComTypes.IMoniker@)&quot; /&gt; understands and builds a moniker corresponding to the portion read.">Lit autant de caractères du nom complet spécifié que <see cref="M:System.Runtime.InteropServices.ComTypes.IMoniker.ParseDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String,System.Int32@,System.Runtime.InteropServices.ComTypes.IMoniker@)" /> peut interpréter et construit un moniker correspondant à la partie lue.</summary>
      <param name="pbc" vsli:raw="A reference to the bind context to use in this binding operation.">Référence au contexte de liaison à utiliser dans l'opération de liaison.</param>
      <param name="pmkToLeft" vsli:raw="A reference to the moniker that has been built from the display name up to this point.">Référence au moniker qui a été construit à partir du nom complet jusqu'à ce point.</param>
      <param name="pszDisplayName" vsli:raw="A reference to the string containing the remaining display name to parse.">Référence à la chaîne contenant le reste du nom complet à analyser.</param>
      <param name="pchEaten" vsli:raw="When this method returns, contains the number of characters that were consumed in parsing &lt;paramref name=&quot;pszDisplayName&quot; /&gt;. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient le nombre de caractères utilisés pendant l'analyse de <paramref name="pszDisplayName" />. Ce paramètre est passé sans être initialisé.</param>
      <param name="ppmkOut" vsli:raw="When this method returns, contains a reference to the moniker that was built from &lt;paramref name=&quot;pszDisplayName&quot; /&gt;. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une référence au moniker généré à partir de <paramref name="pszDisplayName" />. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Reduce(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Int32,System.Runtime.InteropServices.ComTypes.IMoniker@,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary vsli:raw="Returns a reduced moniker, which is another moniker that refers to the same object as the current moniker but can be bound with equal or greater efficiency.">Retourne un moniker réduit correspondant à un autre moniker qui se réfère au même objet que le moniker actuel, mais peut être lié avec une efficacité équivalente ou supérieure.</summary>
      <param name="pbc" vsli:raw="A reference to the &lt;see langword=&quot;IBindCtx&quot; /&gt; interface on the bind context to use in this binding operation.">Référence à l'interface <see langword="IBindCtx" /> sur le contexte de liaison à utiliser dans cette opération de liaison.</param>
      <param name="dwReduceHowFar" vsli:raw="A value that specifies how far the current moniker should be reduced.">Valeur spécifiant l'importance de la réduction du moniker actuel.</param>
      <param name="ppmkToLeft" vsli:raw="A reference to the moniker to the left of the current moniker.">Référence au moniker à gauche du moniker actuel.</param>
      <param name="ppmkReduced" vsli:raw="When this method returns, contains a reference to the reduced form of the current moniker, which can be &lt;see langword=&quot;null&quot; /&gt; if an error occurs or if the current moniker is reduced to nothing. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une référence à la forme réduite de ce moniker, pouvant être <see langword="null" /> si une erreur se produit ou si le moniker actuel est réduit à une taille nulle. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.RelativePathTo(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary vsli:raw="Supplies a moniker that, when appended to the current moniker (or one with a similar structure), yields the specified moniker.">Fournit un moniker qui, lorsqu'il est ajouté au moniker actuel (ou à un moniker de structure similaire), produit le moniker spécifié.</summary>
      <param name="pmkOther" vsli:raw="A reference to the moniker to which a relative path should be taken.">Référence au moniker vers lequel un chemin relatif doit être pris.</param>
      <param name="ppmkRelPath" vsli:raw="When this method returns, contains a reference to the relative moniker. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une référence au moniker relatif. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Save(System.Runtime.InteropServices.ComTypes.IStream,System.Boolean)">
      <summary vsli:raw="Saves an object to the specified stream.">Enregistre un objet dans le flux spécifié.</summary>
      <param name="pStm" vsli:raw="The stream to which the object is saved.">Flux dans lequel l'objet est enregistré.</param>
      <param name="fClearDirty" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to clear the modified flag after the save is complete; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour désactiver l'indicateur modifié à la fin de l'enregistrement ; sinon, <see langword="false" /></param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS">
      <summary vsli:raw="Defines the attributes of an implemented or inherited interface of a type.">Définit les attributs d'une interface implémentée ou héritée d'un type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FDEFAULT">
      <summary vsli:raw="The interface or dispinterface represents the default for the source or sink.">L'interface ou la dispinterface représente la valeur par défaut de la source ou du récepteur.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FDEFAULTVTABLE">
      <summary vsli:raw="Sinks receive events through the virtual function table (VTBL).">Les récepteurs reçoivent des événements par l'intermédiaire de la table de fonctions virtuelles (VTBL, virtual function table).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FRESTRICTED">
      <summary vsli:raw="The member should not be displayed or programmable by users.">Le membre ne doit pas pouvoir être affiché ou programmé par des utilisateurs.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FSOURCE">
      <summary vsli:raw="This member of a coclass is called rather than implemented.">Ce membre d'une coclasse est appelé et non implémenté.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND">
      <summary vsli:raw="Specifies how to invoke a function by &lt;see langword=&quot;IDispatch::Invoke&quot; /&gt;.">Spécifie la façon d'appeler une fonction par <see langword="IDispatch::Invoke" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_FUNC">
      <summary vsli:raw="The member is called using a normal function invocation syntax.">Le membre est appelé en utilisant une syntaxe d'appel de fonction normale.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_PROPERTYGET">
      <summary vsli:raw="The function is invoked using a normal property access syntax.">La fonction est appelée en utilisant une syntaxe de propriété d'accès normale.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_PROPERTYPUT">
      <summary vsli:raw="The function is invoked using a property value assignment syntax.">La fonction est appelée en utilisant une syntaxe d'assignation de valeur de propriété.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_PROPERTYPUTREF">
      <summary vsli:raw="The function is invoked using a property reference assignment syntax.">La fonction est appelée en utilisant une syntaxe d'assignation de référence de propriété.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IPersistFile">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IPersistFile&quot; /&gt; interface, with functionality from &lt;see langword=&quot;IPersist&quot; /&gt;.">Fournit la définition managée de l'interface <see langword="IPersistFile" />, avec une fonctionnalité provenant de <see langword="IPersist" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.GetClassID(System.Guid@)">
      <summary vsli:raw="Retrieves the class identifier (CLSID) of an object.">Récupère le CLSID (identificateur de classe).</summary>
      <param name="pClassID" vsli:raw="When this method returns, contains a reference to the CLSID. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une référence au CLSID. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.GetCurFile(System.String@)">
      <summary vsli:raw="Retrieves either the absolute path to the current working file of the object or, if there is no current working file, the default file name prompt of the object.">Récupère le chemin d'accès absolu au fichier de travail actuel de l'objet, ou s'il n'y a actuellement pas de fichiers de travail, l'invite du nom de fichier par défaut de l'objet.</summary>
      <param name="ppszFileName" vsli:raw="When this method returns, contains the address of a pointer to a zero-terminated string containing the path for the current file, or the default file name prompt (such as *.txt). This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient l'adresse d'un pointeur vers une chaîne se terminant par zéro contenant le chemin d'accès au fichier en cours, ou l'invite du nom de fichier par défaut (par exemple *.txt). Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.IsDirty">
      <summary vsli:raw="Checks an object for changes since it was last saved to its current file.">Vérifie si l'objet a subi des modifications depuis son dernier enregistrement dans son fichier en cours.</summary>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the file has changed since it was last saved; &lt;see langword=&quot;S_FALSE&quot; /&gt; if the file has not changed since it was last saved.">
        <see langword="S_OK" /> si le fichier a changé depuis son dernier enregistrement ; <see langword="S_FALSE" /> dans le cas contraire.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.Load(System.String,System.Int32)">
      <summary vsli:raw="Opens the specified file and initializes an object from the file contents.">Ouvre le fichier spécifié et initialise un objet à partir du contenu du fichier.</summary>
      <param name="pszFileName" vsli:raw="A zero-terminated string containing the absolute path of the file to open.">Chaîne se terminant par zéro contenant le chemin d'accès absolu au fichier à ouvrir.</param>
      <param name="dwMode" vsli:raw="A combination of values from the &lt;see langword=&quot;STGM&quot; /&gt; enumeration to indicate the access mode in which to open &lt;paramref name=&quot;pszFileName&quot; /&gt;.">Combinaison de valeurs de l'énumération <see langword="STGM" /> servant à indiquer le mode d'accès pour l'ouverture de <paramref name="pszFileName" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.Save(System.String,System.Boolean)">
      <summary vsli:raw="Saves a copy of the object into the specified file.">Enregistre une copie de l'objet dans le fichier spécifié.</summary>
      <param name="pszFileName" vsli:raw="A zero-terminated string containing the absolute path of the file to which the object is saved.">Chaîne se terminant par zéro contenant le chemin d'accès absolu au fichier dans lequel l'objet est enregistré.</param>
      <param name="fRemember" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to used the &lt;paramref name=&quot;pszFileName&quot; /&gt; parameter as the current working file; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour utiliser le paramètre <paramref name="pszFileName" /> comme fichier de travail actuel ; sinon, <see langword="false" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.SaveCompleted(System.String)">
      <summary vsli:raw="Notifies the object that it can write to its file.">Indique à l'objet qu'il peut écrire dans son fichier.</summary>
      <param name="pszFileName" vsli:raw="The absolute path of the file where the object was previously saved.">Le chemin d'accès absolu au fichier dans lequel l'objet a été précédemment enregistré.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IRunningObjectTable">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IRunningObjectTable&quot; /&gt; interface.">Fournit la définition managée de l'interface <see langword="IRunningObjectTable" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.EnumRunning(System.Runtime.InteropServices.ComTypes.IEnumMoniker@)">
      <summary vsli:raw="Enumerates the objects currently registered as running.">Énumère les objets actuellement inscrits comme en cours d'exécution.</summary>
      <param name="ppenumMoniker" vsli:raw="When this method returns, contains the new enumerator for the Running Object Table (ROT). This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient le nouvel énumérateur de la table ROT (Running Object Table). Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.GetObject(System.Runtime.InteropServices.ComTypes.IMoniker,System.Object@)">
      <summary vsli:raw="Returns the registered object if the supplied object name is registered as running.">Retourne l'objet inscrit si le nom d'objet fourni est inscrit comme en cours d'exécution.</summary>
      <param name="pmkObjectName" vsli:raw="A reference to the moniker to search for in the Running Object Table (ROT).">Référence au moniker à rechercher dans la table ROT (Running Object Table).</param>
      <param name="ppunkObject" vsli:raw="When this method returns, contains the requested running object. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient l'objet en cours d'exécution demandé. Ce paramètre est passé sans être initialisé.</param>
      <returns vsli:raw="An &lt;see langword=&quot;HRESULT&quot; /&gt; value that indicates the success or failure of the operation.">Valeur <see langword="HRESULT" /> indiquant le succès ou l'échec de l'opération.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.GetTimeOfLastChange(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.FILETIME@)">
      <summary vsli:raw="Searches for this moniker in the Running Object Table (ROT) and reports the recorded time of change, if present.">Recherche ce moniker dans la table ROT (Running Object Table) et indique l'heure de modification enregistrée, le cas échéant.</summary>
      <param name="pmkObjectName" vsli:raw="A reference to the moniker to search for in the Running Object Table (ROT).">Référence au moniker à rechercher dans la table ROT (Running Object Table).</param>
      <param name="pfiletime" vsli:raw="When this object returns, contains the objects last change time. This parameter is passed uninitialized.">Lorsque cet objet retourne une valeur, contient l'heure de la dernière modification de l'objet. Ce paramètre est passé sans être initialisé.</param>
      <returns vsli:raw="An &lt;see langword=&quot;HRESULT&quot; /&gt; value that indicates the success or failure of the operation.">Valeur <see langword="HRESULT" /> indiquant le succès ou l'échec de l'opération.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.IsRunning(System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary vsli:raw="Determines whether the specified moniker is currently registered in the Running Object Table (ROT).">Détermine si le moniker spécifié est inscrit dans la table ROT (Running Object Table) actuellement.</summary>
      <param name="pmkObjectName" vsli:raw="A reference to the moniker to search for in the Running Object Table (ROT).">Référence au moniker à rechercher dans la table ROT (Running Object Table).</param>
      <returns vsli:raw="An &lt;see langword=&quot;HRESULT&quot; /&gt; value that indicates the success or failure of the operation.">Valeur <see langword="HRESULT" /> indiquant le succès ou l'échec de l'opération.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.NoteChangeTime(System.Int32,System.Runtime.InteropServices.ComTypes.FILETIME@)">
      <summary vsli:raw="Notes the time that a particular object changed so &lt;see langword=&quot;IMoniker::GetTimeOfLastChange&quot; /&gt; can report an appropriate change time.">Consigne l'heure à laquelle un objet spécifique a été modifié pour que <see langword="IMoniker::GetTimeOfLastChange" /> indique l'heure de modification appropriée.</summary>
      <param name="dwRegister" vsli:raw="The Running Object Table (ROT) entry of the changed object.">Entrée de la table ROT (Running Object Table) correspondant à l'objet modifié.</param>
      <param name="pfiletime" vsli:raw="A reference to the object's last change time.">Référence à l'heure de la dernière modification de l'objet.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Register(System.Int32,System.Object,System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary vsli:raw="Registers that the supplied object has entered the running state.">Inscrit que l'objet fourni est en état d'exécution.</summary>
      <param name="grfFlags" vsli:raw="Specifies whether the Running Object Table's (ROT) reference to &lt;paramref name=&quot;punkObject&quot; /&gt; is weak or strong, and controls access to the object through its entry in the ROT.">Spécifie si la référence de la table ROT (Running Object Table) à <paramref name="punkObject" /> est faible ou forte et contrôle l'accès à l'objet via l'entrée correspondante dans la table ROT (Running Object Table).</param>
      <param name="punkObject" vsli:raw="A reference to the object being registered as running.">Référence à l'objet inscrit comme étant en cours d'exécution.</param>
      <param name="pmkObjectName" vsli:raw="A reference to the moniker that identifies &lt;paramref name=&quot;punkObject&quot; /&gt;.">Référence au moniker qui identifie <paramref name="punkObject" />.</param>
      <returns vsli:raw="A value that can be used to identify this ROT entry in subsequent calls to &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Revoke(System.Int32)&quot; /&gt; or &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.NoteChangeTime(System.Int32,System.Runtime.InteropServices.ComTypes.FILETIME@)&quot; /&gt;.">Valeur qui peut être utilisée pour identifier cette entrée de la table ROT (Running Object Table) dans des appels ultérieurs à  <see cref="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Revoke(System.Int32)" /> ou à <see cref="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.NoteChangeTime(System.Int32,System.Runtime.InteropServices.ComTypes.FILETIME@)" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Revoke(System.Int32)">
      <summary vsli:raw="Unregisters the specified object from the Running Object Table (ROT).">Annule l'inscription de l'objet spécifié dans la table ROT (Running Object Table).</summary>
      <param name="dwRegister" vsli:raw="The Running Object Table (ROT) entry to revoke.">Entrée de la table ROT (Running Object Table) à révoquer.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IStream">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IStream&quot; /&gt; interface, with &lt;see langword=&quot;ISequentialStream&quot; /&gt; functionality.">Fournit la définition managée de l'interface <see langword="IStream" />, avec une fonctionnalité <see langword="ISequentialStream" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Clone(System.Runtime.InteropServices.ComTypes.IStream@)">
      <summary vsli:raw="Creates a new stream object with its own seek pointer that references the same bytes as the original stream.">Crée un nouvel objet de flux avec son propre pointeur de recherche référençant les mêmes octets que le flux d'origine.</summary>
      <param name="ppstm" vsli:raw="When this method returns, contains the new stream object. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient le nouvel objet de flux. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Commit(System.Int32)">
      <summary vsli:raw="Ensures that any changes made to a stream object that is open in transacted mode are reflected in the parent storage.">S'assure que toute modification effectuée sur un objet de flux ouvert en mode traité est réfléchie dans le stockage parent.</summary>
      <param name="grfCommitFlags" vsli:raw="A value that controls how the changes for the stream object are committed.">Valeur contrôlant la manière dont les modifications apportées à un objet de flux sont validées.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.CopyTo(System.Runtime.InteropServices.ComTypes.IStream,System.Int64,System.IntPtr,System.IntPtr)">
      <summary vsli:raw="Copies a specified number of bytes from the current seek pointer in the stream to the current seek pointer in another stream.">Copie un nombre d'octets spécifié du pointeur de recherche actif dans le flux à destination du pointeur de recherche actif dans un autre flux.</summary>
      <param name="pstm" vsli:raw="A reference to the destination stream.">Référence au flux de destination.</param>
      <param name="cb" vsli:raw="The number of bytes to copy from the source stream.">Nombre d'octets à copier à partir du flux source.</param>
      <param name="pcbRead" vsli:raw="On successful return, contains the actual number of bytes read from the source.">Après appel réussi de la méthode, contient le nombre réel d'octets lus à partir de la source.</param>
      <param name="pcbWritten" vsli:raw="On successful return, contains the actual number of bytes written to the destination.">Après appel réussi de la méthode, contient le nombre réel d'octets écrits dans la destination.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.LockRegion(System.Int64,System.Int64,System.Int32)">
      <summary vsli:raw="Restricts access to a specified range of bytes in the stream.">Restreint l'accès à une plage d'octets spécifiée dans le flux.</summary>
      <param name="libOffset" vsli:raw="The byte offset for the beginning of the range.">Offset d'octet au début de la plage.</param>
      <param name="cb" vsli:raw="The length of the range, in bytes, to restrict.">Longueur (en octets) de la plage à limiter.</param>
      <param name="dwLockType" vsli:raw="The requested restrictions on accessing the range.">Restrictions demandées pour l'accès à la plage.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Read(System.Byte[],System.Int32,System.IntPtr)">
      <summary vsli:raw="Reads a specified number of bytes from the stream object into memory starting at the current seek pointer.">Lit un nombre d'octets spécifié dans l'objet de flux en mémoire en commençant au pointeur de recherche actif.</summary>
      <param name="pv" vsli:raw="When this method returns, contains the data read from the stream. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient les données lues à partir du flux. Ce paramètre est passé sans être initialisé.</param>
      <param name="cb" vsli:raw="The number of bytes to read from the stream object.">Nombre d'octets à lire à partir de l'objet de flux.</param>
      <param name="pcbRead" vsli:raw="A pointer to a &lt;see langword=&quot;ULONG&quot; /&gt; variable that receives the actual number of bytes read from the stream object.">Pointeur vers une variable <see langword="ULONG" /> qui reçoit le nombre réel d'octets lus à partir de l'objet de flux.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Revert">
      <summary vsli:raw="Discards all changes that have been made to a transacted stream since the last &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IStream.Commit(System.Int32)&quot; /&gt; call.">Abandonne toutes les modifications effectuées sur un flux traité depuis le dernier appel <see cref="M:System.Runtime.InteropServices.ComTypes.IStream.Commit(System.Int32)" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Seek(System.Int64,System.Int32,System.IntPtr)">
      <summary vsli:raw="Changes the seek pointer to a new location relative to the beginning of the stream, to the end of the stream, or to the current seek pointer.">Déplace le pointeur de recherche vers un nouvel emplacement relatif au début, à la fin du flux, ou au pointeur de recherche actif.</summary>
      <param name="dlibMove" vsli:raw="The displacement to add to &lt;paramref name=&quot;dwOrigin&quot; /&gt;.">Déplacement à ajouter à <paramref name="dwOrigin" />.</param>
      <param name="dwOrigin" vsli:raw="The origin of the seek. The origin can be the beginning of the file, the current seek pointer, or the end of the file.">Origine de la recherche. Il peut s'agir du début du fichier, de la position du pointeur de recherche actif ou de la fin du fichier.</param>
      <param name="plibNewPosition" vsli:raw="On successful return, contains the offset of the seek pointer from the beginning of the stream.">Après appel réussi de la méthode, contient l'offset du pointeur à partir du début du flux.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.SetSize(System.Int64)">
      <summary vsli:raw="Changes the size of the stream object.">Modifie la taille de l'objet de flux.</summary>
      <param name="libNewSize" vsli:raw="The new size of the stream as a number of bytes.">Nouvelle taille du flux sous la forme d'un nombre d'octets.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Stat(System.Runtime.InteropServices.ComTypes.STATSTG@,System.Int32)">
      <summary vsli:raw="Retrieves the &lt;see cref=&quot;T:System.Runtime.InteropServices.STATSTG&quot; /&gt; structure for this stream.">Récupère la structure <see cref="T:System.Runtime.InteropServices.STATSTG" /> pour ce flux.</summary>
      <param name="pstatstg" vsli:raw="When this method returns, contains a &lt;see langword=&quot;STATSTG&quot; /&gt; structure that describes this stream object. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une structure <see langword="STATSTG" /> qui décrit cet objet de flux. Ce paramètre est passé sans être initialisé.</param>
      <param name="grfStatFlag" vsli:raw="Members in the &lt;see langword=&quot;STATSTG&quot; /&gt; structure that this method does not return, thus saving some memory allocation operations.">Membres de la structure <see langword="STATSTG" /> que cette méthode ne retourne pas, ce qui évite quelques opérations d'allocation de mémoire.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.UnlockRegion(System.Int64,System.Int64,System.Int32)">
      <summary vsli:raw="Removes the access restriction on a range of bytes previously restricted with the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IStream.LockRegion(System.Int64,System.Int64,System.Int32)&quot; /&gt; method.">Supprime les restrictions d'accès à une plage d'octets dont l'accès a été limité au préalable à l'aide de la méthode <see cref="M:System.Runtime.InteropServices.ComTypes.IStream.LockRegion(System.Int64,System.Int64,System.Int32)" />.</summary>
      <param name="libOffset" vsli:raw="The byte offset for the beginning of the range.">Offset d'octet au début de la plage.</param>
      <param name="cb" vsli:raw="The length, in bytes, of the range to restrict.">Longueur (en octets) de la plage à limiter.</param>
      <param name="dwLockType" vsli:raw="The access restrictions previously placed on the range.">Restrictions d'accès placées au préalable sur la plage.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Write(System.Byte[],System.Int32,System.IntPtr)">
      <summary vsli:raw="Writes a specified number of bytes into the stream object starting at the current seek pointer.">Écrit un nombre d'octets spécifié dans l'objet de flux en commençant au pointeur de recherche actif.</summary>
      <param name="pv" vsli:raw="The buffer to write this stream to.">Mémoire tampon dans laquelle écrire ce flux.</param>
      <param name="cb" vsli:raw="The number of bytes to write to the stream.">Nombre d’octets à écrire dans le flux.</param>
      <param name="pcbWritten" vsli:raw="On successful return, contains the actual number of bytes written to the stream object. If the caller sets this pointer to &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt;, this method does not provide the actual number of bytes written.">Après appel réussi de la méthode, contient le nombre réel d'octets écrits dans l'objet de flux. Si l'appelant affecte la valeur <see cref="F:System.IntPtr.Zero" /> à ce pointeur, cette méthode ne fournit pas le nombre réel d'octets écrits.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeComp">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;ITypeComp&quot; /&gt; interface.">Fournit la définition managée de l'interface <see langword="ITypeComp" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeComp.Bind(System.String,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.ITypeInfo@,System.Runtime.InteropServices.ComTypes.DESCKIND@,System.Runtime.InteropServices.ComTypes.BINDPTR@)">
      <summary vsli:raw="Maps a name to a member of a type, or binds global variables and functions contained in a type library.">Mappe un nom à un membre d'un type, ou lie des variables et des fonctions globales contenues dans une bibliothèque de types.</summary>
      <param name="szName" vsli:raw="The name to bind.">Nom à lier.</param>
      <param name="lHashVal" vsli:raw="A hash value for &lt;paramref name=&quot;szName&quot; /&gt; computed by &lt;see langword=&quot;LHashValOfNameSys&quot; /&gt;.">Valeur de hachage pour <paramref name="szName" /> calculée par <see langword="LHashValOfNameSys" />.</param>
      <param name="wFlags" vsli:raw="A flags word containing one or more of the invoke flags defined in the &lt;see langword=&quot;INVOKEKIND&quot; /&gt; enumeration.">Mot indicateur contenant un ou plusieurs indicateurs d'appel définis dans l'énumération <see langword="INVOKEKIND" />.</param>
      <param name="ppTInfo" vsli:raw="When this method returns, contains a reference to the type description that contains the item to which it is bound, if a &lt;see langword=&quot;FUNCDESC&quot; /&gt; or &lt;see langword=&quot;VARDESC&quot; /&gt; was returned. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une référence à la description de type comprenant l'élément auquel elle est liée, si <see langword="FUNCDESC" /> ou <see langword="VARDESC" /> a été retourné. Ce paramètre est passé sans être initialisé.</param>
      <param name="pDescKind" vsli:raw="When this method returns, contains a reference to a &lt;see langword=&quot;DESCKIND&quot; /&gt; enumerator that indicates whether the name bound-to is a &lt;see langword=&quot;VARDESC&quot; /&gt;, &lt;see langword=&quot;FUNCDESC&quot; /&gt;, or &lt;see langword=&quot;TYPECOMP&quot; /&gt;. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une référence à un énumérateur <see langword="DESCKIND" /> qui indique si le nom lié est <see langword="VARDESC" />, <see langword="FUNCDESC" /> ou <see langword="TYPECOMP" />. Ce paramètre est passé sans être initialisé.</param>
      <param name="pBindPtr" vsli:raw="When this method returns, contains a reference to the bound-to &lt;see langword=&quot;VARDESC&quot; /&gt;, &lt;see langword=&quot;FUNCDESC&quot; /&gt;, or &lt;see langword=&quot;ITypeComp&quot; /&gt; interface. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une référence à l'interface <see langword="VARDESC" />, <see langword="FUNCDESC" /> ou <see langword="ITypeComp" /> liée. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeComp.BindType(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@,System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary vsli:raw="Binds to the type descriptions contained within a type library.">Lie les descriptions de type contenues dans une bibliothèque de types.</summary>
      <param name="szName" vsli:raw="The name to bind.">Nom à lier.</param>
      <param name="lHashVal" vsli:raw="A hash value for &lt;paramref name=&quot;szName&quot; /&gt; determined by &lt;see langword=&quot;LHashValOfNameSys&quot; /&gt;.">Valeur de hachage pour <paramref name="szName" /> déterminée par <see langword="LHashValOfNameSys" />.</param>
      <param name="ppTInfo" vsli:raw="When this method returns, contains a reference to an &lt;see langword=&quot;ITypeInfo&quot; /&gt; of the type to which &lt;paramref name=&quot;szName&quot; /&gt; was bound. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une référence à un <see langword="ITypeInfo" /> du type auquel <paramref name="szName" /> était lié. Ce paramètre est passé sans être initialisé.</param>
      <param name="ppTComp" vsli:raw="When this method returns, contains a reference to an &lt;see langword=&quot;ITypeComp&quot; /&gt; variable. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une référence à une variable <see langword="ITypeComp" />. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeInfo">
      <summary vsli:raw="Provides the managed definition of the Component Automation ITypeInfo interface.">Fournit la définition managée de l’interface ITypeInfo d’automatisation des composants.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.AddressOfMember(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr@)">
      <summary vsli:raw="Retrieves the addresses of static functions or variables, such as those defined in a DLL.">Récupère les adresses de fonctions statiques ou de variables, telles que celles définies dans une DLL.</summary>
      <param name="memid" vsli:raw="The member ID of the &lt;see langword=&quot;static&quot; /&gt; member's address to retrieve.">ID de membre de l'adresse de membre <see langword="static" /> à récupérer.</param>
      <param name="invKind" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.INVOKEKIND&quot; /&gt; values that specifies whether the member is a property, and if so, what kind.">L'une des valeurs <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> qui indique si le membre est une propriété et dans ce cas, de quel type est cette propriété.</param>
      <param name="ppv" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;static&quot; /&gt; member. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une référence au membre <see langword="static" />. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.CreateInstance(System.Object,System.Guid@,System.Object@)">
      <summary vsli:raw="Creates a new instance of a type that describes a component class (coclass).">Crée une nouvelle instance d'un type décrivant une classe Component (coclasse).</summary>
      <param name="pUnkOuter" vsli:raw="The object that acts as the controlling &lt;see langword=&quot;IUnknown&quot; /&gt;.">Objet qui joue le rôle du <see langword="IUnknown" /> contrôleur.</param>
      <param name="riid" vsli:raw="The IID of the interface that the caller uses to communicate with the resulting object.">IID de l'interface utilisée par l'appelant pour communiquer avec l'objet obtenu.</param>
      <param name="ppvObj" vsli:raw="When this method returns, contains a reference to the created object. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une référence à l'objet créé. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetContainingTypeLib(System.Runtime.InteropServices.ComTypes.ITypeLib@,System.Int32@)">
      <summary vsli:raw="Retrieves the type library that contains this type description and its index within that type library.">Récupère la bibliothèque de types qui contient cette description de type ainsi que l'index correspondant dans cette bibliothèque.</summary>
      <param name="ppTLB" vsli:raw="When this method returns, contains a reference to the containing type library. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une référence à la bibliothèque de types conteneur. Ce paramètre est passé sans être initialisé.</param>
      <param name="pIndex" vsli:raw="When this method returns, contains a reference to the index of the type description within the containing type library. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une référence à l'index de la description de type dans la bibliothèque de types conteneur. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetDllEntry(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary vsli:raw="Retrieves a description or specification of an entry point for a function in a DLL.">Récupère une description ou une spécification d'un point d'entrée pour une fonction dans une DLL.</summary>
      <param name="memid" vsli:raw="The ID of the member function whose DLL entry description is to be returned.">ID de la fonction membre dont la description d'entrée de DLL doit être retournée.</param>
      <param name="invKind" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.INVOKEKIND&quot; /&gt; values that specifies the kind of member identified by &lt;paramref name=&quot;memid&quot; /&gt;.">Une des valeurs <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> qui spécifie le type de membre identifié par <paramref name="memid" />.</param>
      <param name="pBstrDllName" vsli:raw="If not &lt;see langword=&quot;null&quot; /&gt;, the function sets &lt;paramref name=&quot;pBstrDllName&quot; /&gt; to a &lt;see langword=&quot;BSTR&quot; /&gt; that contains the name of the DLL.">Si la valeur n'est pas <see langword="null" />, la fonction définit <paramref name="pBstrDllName" /> avec un <see langword="BSTR" /> qui contient le nom de la DLL.</param>
      <param name="pBstrName" vsli:raw="If not &lt;see langword=&quot;null&quot; /&gt;, the function sets &lt;c&gt;lpbstrName&lt;/c&gt; to a &lt;see langword=&quot;BSTR&quot; /&gt; that contains the name of the entry point.">Si la valeur n’est pas <see langword="null" />, la fonction définit <c>lpbstrName</c> avec un <see langword="BSTR" /> qui contient le nom du point d’entrée.</param>
      <param name="pwOrdinal" vsli:raw="If not &lt;see langword=&quot;null&quot; /&gt;, and the function is defined by an ordinal, then &lt;c&gt;lpwOrdinal&lt;/c&gt; is set to point to the ordinal.">Si la valeur n’est pas <see langword="null" /> et que la fonction est définie par un ordinal, <c>lpwOrdinal</c> est défini de manière à pointer vers l’ordinal.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary vsli:raw="Retrieves the documentation string, the complete Help file name and path, and the context ID for the Help topic for a specified type description.">Récupère la chaîne de documentation, le nom et le chemin d'accès complets du fichier d'aide et l'ID de contexte de la rubrique d'aide se rapportant à une description de type spécifiée.</summary>
      <param name="index" vsli:raw="The ID of the member whose documentation is to be returned.">ID du membre dont la documentation doit être retournée.</param>
      <param name="strName" vsli:raw="When this method returns, contains the name of the item method. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient le nom de la méthode de l'élément. Ce paramètre est passé sans être initialisé.</param>
      <param name="strDocString" vsli:raw="When this method returns, contains the documentation string for the specified item. This parameter is passed uninitialized.">Cette méthode retourne la chaîne de documentation pour l'élément spécifié. Ce paramètre est passé sans être initialisé.</param>
      <param name="dwHelpContext" vsli:raw="When this method returns, contains a reference to the Help context associated with the specified item. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une référence au contexte d'aide associé à l'élément spécifié. Ce paramètre est passé sans être initialisé.</param>
      <param name="strHelpFile" vsli:raw="When this method returns, contains the fully qualified name of the Help file. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient le nom qualifié complet du fichier d'aide. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)">
      <summary vsli:raw="Retrieves the &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCDESC&quot; /&gt; structure that contains information about a specified function.">Récupère la structure <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> qui contient des informations sur une fonction spécifiée.</summary>
      <param name="index" vsli:raw="The index of the function description to return.">Index de la description de fonction à retourner.</param>
      <param name="ppFuncDesc" vsli:raw="When this method returns, contains a reference to a &lt;see langword=&quot;FUNCDESC&quot; /&gt; structure that describes the specified function. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une référence à une structure <see langword="FUNCDESC" /> qui décrit la fonction spécifiée. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetIDsOfNames(System.String[],System.Int32,System.Int32[])">
      <summary vsli:raw="Maps between member names and member IDs, and parameter names and parameter IDs.">Effectue un mappage entre les noms et les ID de membres, ainsi qu'entre les noms et les ID de paramètres.</summary>
      <param name="rgszNames" vsli:raw="An array of names to map.">Tableau de noms à mapper.</param>
      <param name="cNames" vsli:raw="The count of names to map.">Nombre de noms à mapper.</param>
      <param name="pMemId" vsli:raw="When this method returns, contains a reference to an array in which name mappings are placed. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une référence à un tableau dans lequel les mappages des noms sont insérés. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetImplTypeFlags(System.Int32,System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS@)">
      <summary vsli:raw="Retrieves the &lt;see cref=&quot;T:System.Runtime.InteropServices.IMPLTYPEFLAGS&quot; /&gt; value for one implemented interface or base interface in a type description.">Récupère la valeur <see cref="T:System.Runtime.InteropServices.IMPLTYPEFLAGS" /> pour une interface implémentée ou une interface de base dans une description de type.</summary>
      <param name="index" vsli:raw="The index of the implemented interface or base interface.">Index de l'interface implémentée ou de l'interface de base.</param>
      <param name="pImplTypeFlags" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;IMPLTYPEFLAGS&quot; /&gt; enumeration. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une référence à l'énumération <see langword="IMPLTYPEFLAGS" />. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetMops(System.Int32,System.String@)">
      <summary vsli:raw="Retrieves marshaling information.">Récupère des informations de marshaling.</summary>
      <param name="memid" vsli:raw="The member ID that indicates which marshaling information is needed.">ID de membre qui indique les informations de marshaling nécessaires.</param>
      <param name="pBstrMops" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;opcode&quot; /&gt; string used in marshaling the fields of the structure described by the referenced type description, or returns &lt;see langword=&quot;null&quot; /&gt; if there is no information to return. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une référence à la chaîne <see langword="opcode" /> utilisée pour marshaler les champs de la structure décrite par la description de type référencée, ou retourne <see langword="null" /> s'il n'y a aucune information à retourner. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetNames(System.Int32,System.String[],System.Int32,System.Int32@)">
      <summary vsli:raw="Retrieves the variable with the specified member ID (or the name of the property or method and its parameters) that corresponds to the specified function ID.">Récupère la variable avec l'ID de membre spécifié (ou le nom de la propriété ou de la méthode et ses paramètres) correspondant à l'ID de fonction spécifié.</summary>
      <param name="memid" vsli:raw="The ID of the member whose name (or names) is to be returned.">ID du membre dont le nom (ou les noms) doit être retourné.</param>
      <param name="rgBstrNames" vsli:raw="When this method returns, contains the name (or names) associated with the member. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient le ou les noms associés au membre. Ce paramètre est passé sans être initialisé.</param>
      <param name="cMaxNames" vsli:raw="The length of the &lt;paramref name=&quot;rgBstrNames&quot; /&gt; array.">Longueur du tableau <paramref name="rgBstrNames" />.</param>
      <param name="pcNames" vsli:raw="When this method returns, contains the number of names in the &lt;paramref name=&quot;rgBstrNames&quot; /&gt; array. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient le nombre de noms contenus dans le tableau <paramref name="rgBstrNames" />. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetRefTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary vsli:raw="Retrieves the referenced type descriptions if a type description references other type descriptions.">Récupère les descriptions de type référencées, si une description de type fait référence à d'autres descriptions de type.</summary>
      <param name="hRef" vsli:raw="A handle to the referenced type description to return.">Handle de la description de type référencée à retourner.</param>
      <param name="ppTI" vsli:raw="When this method returns, contains the referenced type description. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient la description de type référencée. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetRefTypeOfImplType(System.Int32,System.Int32@)">
      <summary vsli:raw="Retrieves the type description of the implemented interface types if a type description describes a COM class.">Récupère la description des types d'interfaces implémentés, si une description de type décrit une classe COM.</summary>
      <param name="index" vsli:raw="The index of the implemented type whose handle is returned.">Index du type implémenté dont le handle est retourné.</param>
      <param name="href" vsli:raw="When this method returns, contains a reference to a handle for the implemented interface. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une référence à un handle pour l'interface implémentée. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)">
      <summary vsli:raw="Retrieves a &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEATTR&quot; /&gt; structure that contains the attributes of the type description.">Récupère une structure <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> qui contient les attributs de la description de type.</summary>
      <param name="ppTypeAttr" vsli:raw="When this method returns, contains a reference to the structure that contains the attributes of this type description. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une référence à la structure qui contient les attributs de cette description de type. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary vsli:raw="Retrieves the &lt;see langword=&quot;ITypeComp&quot; /&gt; interface for the type description, which enables a client compiler to bind to the type description's members.">Récupère l'interface <see langword="ITypeComp" /> pour la description de type qui permet à un compilateur client d'effectuer une liaison avec les membres de la description de type.</summary>
      <param name="ppTComp" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;ITypeComp&quot; /&gt; interface of the containing type library. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une référence à l'interface <see langword="ITypeComp" /> de la bibliothèque de types conteneur. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)">
      <summary vsli:raw="Retrieves a &lt;see langword=&quot;VARDESC&quot; /&gt; structure that describes the specified variable.">Récupère une structure <see langword="VARDESC" /> qui décrit la variable spécifiée.</summary>
      <param name="index" vsli:raw="The index of the variable description to return.">Index de la description de variable à retourner.</param>
      <param name="ppVarDesc" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;VARDESC&quot; /&gt; structure that describes the specified variable. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une référence à la structure <see langword="VARDESC" /> qui décrit la variable spécifiée. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.Invoke(System.Object,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.DISPPARAMS@,System.IntPtr,System.IntPtr,System.Int32@)">
      <summary vsli:raw="Invokes a method, or accesses a property of an object, that implements the interface described by the type description.">Appelle une méthode ou accède à une propriété d'un objet qui implémente l'interface décrite par la description de type.</summary>
      <param name="pvInstance" vsli:raw="A reference to the interface described by this type description.">Référence à l'interface décrite par cette description de type.</param>
      <param name="memid" vsli:raw="A value that identifies the interface member.">Valeur identifiant le membre d'interface.</param>
      <param name="wFlags" vsli:raw="Flags that describe the context of the invoke call.">Indicateurs décrivant le contexte de l'appel Invoke.</param>
      <param name="pDispParams" vsli:raw="A reference to a structure that contains an array of arguments, an array of DISPIDs for named arguments, and counts of the number of elements in each array.">Référence à une structure qui contient un tableau d'arguments, un tableau de DISPID pour des arguments nommés et le nombre d'éléments de chaque tableau.</param>
      <param name="pVarResult" vsli:raw="A reference to the location at which the result is to be stored. If &lt;paramref name=&quot;wFlags&quot; /&gt; specifies &lt;see langword=&quot;DISPATCH_PROPERTYPUT&quot; /&gt; or &lt;see langword=&quot;DISPATCH_PROPERTYPUTREF&quot; /&gt;, &lt;paramref name=&quot;pVarResult&quot; /&gt; is ignored. Set to &lt;see langword=&quot;null&quot; /&gt; if no result is desired.">Référence à l'emplacement où le résultat doit être stocké. Si <paramref name="wFlags" /> spécifie <see langword="DISPATCH_PROPERTYPUT" /> ou <see langword="DISPATCH_PROPERTYPUTREF" />, <paramref name="pVarResult" /> est ignoré. Affectez <see langword="null" /> si aucun résultat n'est requis.</param>
      <param name="pExcepInfo" vsli:raw="A pointer to an exception information structure, which is filled in only if &lt;see langword=&quot;DISP_E_EXCEPTION&quot; /&gt; is returned.">Pointeur vers une structure d'informations d'exception qui est remplie uniquement lorsque <see langword="DISP_E_EXCEPTION" /> est retourné.</param>
      <param name="puArgErr" vsli:raw="If &lt;see langword=&quot;Invoke&quot; /&gt; returns &lt;see langword=&quot;DISP_E_TYPEMISMATCH&quot; /&gt;, &lt;paramref name=&quot;puArgErr&quot; /&gt; indicates the index within &lt;c&gt;rgvarg&lt;/c&gt; of the argument with the incorrect type. If more than one argument returns an error, &lt;paramref name=&quot;puArgErr&quot; /&gt; indicates only the first argument with an error. This parameter is passed uninitialized.">Si <see langword="Invoke" /> retourne <see langword="DISP_E_TYPEMISMATCH" />, <paramref name="puArgErr" /> indique l’index de l’argument <c>rgvarg</c> dont le type est incorrect. Si plusieurs arguments retournent une erreur, <paramref name="puArgErr" /> indique uniquement le premier argument contenant une erreur. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseFuncDesc(System.IntPtr)">
      <summary vsli:raw="Releases a &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCDESC&quot; /&gt; structure previously returned by the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)&quot; /&gt; method.">Libère une structure <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> précédemment retournée par la méthode <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)" />.</summary>
      <param name="pFuncDesc" vsli:raw="A reference to the &lt;see langword=&quot;FUNCDESC&quot; /&gt; structure to release.">Référence à la structure <see langword="FUNCDESC" /> à libérer.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseTypeAttr(System.IntPtr)">
      <summary vsli:raw="Releases a &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEATTR&quot; /&gt; structure previously returned by the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)&quot; /&gt; method.">Libère une structure <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> précédemment retournée par la méthode <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)" />.</summary>
      <param name="pTypeAttr" vsli:raw="A reference to the &lt;see langword=&quot;TYPEATTR&quot; /&gt; structure to release.">Référence à la structure <see langword="TYPEATTR" /> à libérer.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseVarDesc(System.IntPtr)">
      <summary vsli:raw="Releases a &lt;see langword=&quot;VARDESC&quot; /&gt; structure previously returned by the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)&quot; /&gt; method.">Libère une structure <see langword="VARDESC" /> précédemment retournée par la méthode <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)" />.</summary>
      <param name="pVarDesc" vsli:raw="A reference to the &lt;see langword=&quot;VARDESC&quot; /&gt; structure to release.">Référence à la structure <see langword="VARDESC" /> à libérer.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeInfo2">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;ITypeInfo2&quot; /&gt; interface.">Fournit la définition managée de l'interface <see langword="ITypeInfo2" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.AddressOfMember(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr@)">
      <summary vsli:raw="Retrieves the addresses of static functions or variables, such as those defined in a DLL.">Récupère les adresses de fonctions statiques ou de variables, telles que celles définies dans une DLL.</summary>
      <param name="memid" vsli:raw="The member ID of the &lt;see langword=&quot;static&quot; /&gt; member's address to retrieve.">ID de membre de l'adresse de membre <see langword="static" /> à récupérer.</param>
      <param name="invKind" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.INVOKEKIND&quot; /&gt; values that specifies whether the member is a property, and if so, what kind.">L'une des valeurs <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> qui indique si le membre est une propriété et dans ce cas, de quel type est cette propriété.</param>
      <param name="ppv" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;static&quot; /&gt; member. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une référence au membre <see langword="static" />. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.CreateInstance(System.Object,System.Guid@,System.Object@)">
      <summary vsli:raw="Creates a new instance of a type that describes a component class (coclass).">Crée une nouvelle instance d'un type décrivant une classe Component (coclasse).</summary>
      <param name="pUnkOuter" vsli:raw="An object that acts as the controlling &lt;see langword=&quot;IUnknown&quot; /&gt;.">Objet qui joue le rôle du <see langword="IUnknown" /> contrôleur.</param>
      <param name="riid" vsli:raw="The IID of the interface that the caller uses to communicate with the resulting object.">IID de l'interface utilisée par l'appelant pour communiquer avec l'objet obtenu.</param>
      <param name="ppvObj" vsli:raw="When this method returns, contains a reference to the created object. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une référence à l'objet créé. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllCustData(System.IntPtr)">
      <summary vsli:raw="Gets all custom data items for the library.">Obtient tous les éléments de données personnalisés de la bibliothèque.</summary>
      <param name="pCustData" vsli:raw="A pointer to &lt;see langword=&quot;CUSTDATA&quot; /&gt;, which holds all custom data items.">Pointeur vers <see langword="CUSTDATA" /> qui contient tous les éléments de données personnalisés.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllFuncCustData(System.Int32,System.IntPtr)">
      <summary vsli:raw="Gets all custom data from the specified function.">Obtient toutes les données personnalisées de la fonction spécifiée.</summary>
      <param name="index" vsli:raw="The index of the function to get the custom data for.">Index de la fonction pour laquelle obtenir les données personnalisées.</param>
      <param name="pCustData" vsli:raw="A pointer to &lt;see langword=&quot;CUSTDATA&quot; /&gt;, which holds all custom data items.">Pointeur vers <see langword="CUSTDATA" /> qui contient tous les éléments de données personnalisés.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllImplTypeCustData(System.Int32,System.IntPtr)">
      <summary vsli:raw="Gets all custom data for the specified implementation type.">Obtient toutes les données personnalisées pour le type d’implémentation spécifié.</summary>
      <param name="index" vsli:raw="The index of the implementation type for the custom data.">Index de type d’implémentation pour les données personnalisées.</param>
      <param name="pCustData" vsli:raw="A pointer to &lt;see langword=&quot;CUSTDATA&quot; /&gt; which holds all custom data items.">Pointeur vers <see langword="CUSTDATA" /> qui contient tous les éléments de données personnalisés.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllParamCustData(System.Int32,System.Int32,System.IntPtr)">
      <summary vsli:raw="Gets all of the custom data for the specified function parameter.">Obtient toutes les données personnalisées pour le paramètre de fonction spécifiée.</summary>
      <param name="indexFunc" vsli:raw="The index of the function to get the custom data for.">Index de la fonction pour laquelle obtenir les données personnalisées.</param>
      <param name="indexParam" vsli:raw="The index of the parameter of this function to get the custom data for.">Index du paramètre de fonction pour lequel obtenir les données personnalisées.</param>
      <param name="pCustData" vsli:raw="A pointer to &lt;see langword=&quot;CUSTDATA&quot; /&gt;, which holds all custom data items.">Pointeur vers <see langword="CUSTDATA" /> qui contient tous les éléments de données personnalisés.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllVarCustData(System.Int32,System.IntPtr)">
      <summary vsli:raw="Gets the variable for the custom data.">Obtient la variable des données personnalisées.</summary>
      <param name="index" vsli:raw="The index of the variable to get the custom data for.">Index de la variable pour laquelle obtenir les données personnalisées.</param>
      <param name="pCustData" vsli:raw="A pointer to &lt;see langword=&quot;CUSTDATA&quot; /&gt;, which holds all custom data items.">Pointeur vers <see langword="CUSTDATA" /> qui contient tous les éléments de données personnalisés.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetContainingTypeLib(System.Runtime.InteropServices.ComTypes.ITypeLib@,System.Int32@)">
      <summary vsli:raw="Retrieves the type library that contains this type description and its index within that type library.">Récupère la bibliothèque de types qui contient cette description de type ainsi que l'index correspondant dans cette bibliothèque.</summary>
      <param name="ppTLB" vsli:raw="When this method returns, contains a reference to the containing type library. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une référence à la bibliothèque de types conteneur. Ce paramètre est passé sans être initialisé.</param>
      <param name="pIndex" vsli:raw="When this method returns, contains a reference to the index of the type description within the containing type library. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une référence à l'index de la description de type dans la bibliothèque de types conteneur. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetCustData(System.Guid@,System.Object@)">
      <summary vsli:raw="Gets the custom data.">Obtient les données personnalisées.</summary>
      <param name="guid" vsli:raw="The GUID used to identify the data.">GUID utilisé pour identifier les données.</param>
      <param name="pVarVal" vsli:raw="When this method returns, contains an &lt;see langword=&quot;Object&quot; /&gt; that specifies where to put the retrieved data. This parameter is passed uninitialized.">Lorsque cette méthode est retournée, elle contient un objet <see langword="Object" /> qui spécifie l’emplacement auquel placer les données récupérées. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDllEntry(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary vsli:raw="Retrieves a description or specification of an entry point for a function in a DLL.">Récupère une description ou une spécification d'un point d'entrée pour une fonction dans une DLL.</summary>
      <param name="memid" vsli:raw="The ID of the member function whose DLL entry description is to be returned.">ID de la fonction membre dont la description d'entrée de DLL doit être retournée.</param>
      <param name="invKind" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.INVOKEKIND&quot; /&gt; values that specifies the kind of member identified by &lt;paramref name=&quot;memid&quot; /&gt;.">Une des valeurs <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> qui spécifie le type de membre identifié par <paramref name="memid" />.</param>
      <param name="pBstrDllName" vsli:raw="If not &lt;see langword=&quot;null&quot; /&gt;, the function sets &lt;paramref name=&quot;pBstrDllName&quot; /&gt; to a &lt;see langword=&quot;BSTR&quot; /&gt; that contains the name of the DLL.">Si la valeur n'est pas <see langword="null" />, la fonction définit <paramref name="pBstrDllName" /> avec un <see langword="BSTR" /> qui contient le nom de la DLL.</param>
      <param name="pBstrName" vsli:raw="If not &lt;see langword=&quot;null&quot; /&gt;, the function sets &lt;c&gt;lpbstrName&lt;/c&gt; to a &lt;see langword=&quot;BSTR&quot; /&gt; that contains the name of the entry point.">Si la valeur n’est pas <see langword="null" />, la fonction définit <c>lpbstrName</c> avec un <see langword="BSTR" /> qui contient le nom du point d’entrée.</param>
      <param name="pwOrdinal" vsli:raw="If not &lt;see langword=&quot;null&quot; /&gt;, and the function is defined by an ordinal, then &lt;c&gt;lpwOrdinal&lt;/c&gt; is set to point to the ordinal.">Si la valeur n’est pas <see langword="null" /> et que la fonction est définie par un ordinal, <c>lpwOrdinal</c> est défini de manière à pointer vers l’ordinal.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary vsli:raw="Retrieves the documentation string, the complete Help file name and path, and the context ID for the Help topic for a specified type description.">Récupère la chaîne de documentation, le nom et le chemin d'accès complets du fichier d'aide et l'ID de contexte de la rubrique d'aide se rapportant à une description de type spécifiée.</summary>
      <param name="index" vsli:raw="The ID of the member whose documentation is to be returned.">ID du membre dont la documentation doit être retournée.</param>
      <param name="strName" vsli:raw="When this method returns, contains the name of the item method. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient le nom de la méthode de l'élément. Ce paramètre est passé sans être initialisé.</param>
      <param name="strDocString" vsli:raw="When this method returns, contains the documentation string for the specified item. This parameter is passed uninitialized.">Cette méthode retourne la chaîne de documentation pour l'élément spécifié. Ce paramètre est passé sans être initialisé.</param>
      <param name="dwHelpContext" vsli:raw="When this method returns, contains a reference to the Help context associated with the specified item. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une référence au contexte d'aide associé à l'élément spécifié. Ce paramètre est passé sans être initialisé.</param>
      <param name="strHelpFile" vsli:raw="When this method returns, contains the fully qualified name of the Help file. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient le nom qualifié complet du fichier d'aide. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDocumentation2(System.Int32,System.String@,System.Int32@,System.String@)">
      <summary vsli:raw="Retrieves the documentation string, the complete Help file name and path, the localization context to use, and the context ID for the library Help topic in the Help file.">Récupère la chaîne de documentation, le nom et le chemin complets du fichier d'aide, le contexte de localisation à utiliser, et l’ID de contexte pour la rubrique d’aide de la bibliothèque dans le fichier d’aide.</summary>
      <param name="memid" vsli:raw="The member identifier for the type description.">L’identificateur du membre pour le type de description.</param>
      <param name="pbstrHelpString" vsli:raw="When this method returns, contains a &lt;see langword=&quot;BSTR&quot; /&gt; that contains the name of the specified item. If the caller does not need the item name, &lt;paramref name=&quot;pbstrHelpString&quot; /&gt; can be &lt;see langword=&quot;null&quot; /&gt;. This parameter is passed uninitialized.">Cette méthode retourne un objet <see langword="BSTR" /> qui contient le nom de l'élément spécifié. Si l’appelant n’a pas besoin du nom de l’élément, <paramref name="pbstrHelpString" /> peut être <see langword="null" />. Ce paramètre est passé sans être initialisé.</param>
      <param name="pdwHelpStringContext" vsli:raw="When this method returns, contains the Help localization context. If the caller does not need the Help context, &lt;paramref name=&quot;pdwHelpStringContext&quot; /&gt; can be &lt;see langword=&quot;null&quot; /&gt;. This parameter is passed uninitialized.">Quand cette méthode est retournée, contient le contexte de localisation d'aide. Si l’appelant n’a pas besoin du contexte d’aide, <paramref name="pdwHelpStringContext" /> peut être <see langword="null" />. Ce paramètre est passé sans être initialisé.</param>
      <param name="pbstrHelpStringDll" vsli:raw="When this method returns, contains a &lt;see langword=&quot;BSTR&quot; /&gt; that contains the fully qualified name of the file containing the DLL used for the Help file. If the caller does not need the file name, &lt;paramref name=&quot;pbstrHelpStringDll&quot; /&gt; can be &lt;see langword=&quot;null&quot; /&gt;. This parameter is passed uninitialized.">Lorsque cette méthode est retournée, contient un objet <see langword="BSTR" /> incluant le nom qualifié complet du fichier contenant la DLL utilisée pour le fichier d’aide. Si l’appelant n’a pas besoin du nom de fichier, <paramref name="pbstrHelpStringDll" /> peut être <see langword="null" />. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncCustData(System.Int32,System.Guid@,System.Object@)">
      <summary vsli:raw="Gets the custom data from the specified function.">Obtient les données personnalisées à partir de la fonction spécifiée.</summary>
      <param name="index" vsli:raw="The index of the function to get the custom data for.">Index de la fonction pour laquelle obtenir les données personnalisées.</param>
      <param name="guid" vsli:raw="The GUID used to identify the data.">GUID utilisé pour identifier les données.</param>
      <param name="pVarVal" vsli:raw="When this method returns, contains an &lt;see langword=&quot;Object&quot; /&gt; that specified where to put the data. This parameter is passed uninitialized.">Lorsque cette méthode est retournée, elle contient un objet <see langword="Object" /> qui spécifie l’emplacement auquel placer les données. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncDesc(System.Int32,System.IntPtr@)">
      <summary vsli:raw="Retrieves the &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCDESC&quot; /&gt; structure that contains information about a specified function.">Récupère la structure <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> qui contient des informations sur une fonction spécifiée.</summary>
      <param name="index" vsli:raw="The index of the function description to return.">Index de la description de fonction à retourner.</param>
      <param name="ppFuncDesc" vsli:raw="When this method returns, contains a reference to a &lt;see langword=&quot;FUNCDESC&quot; /&gt; structure that describes the specified function. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une référence à une structure <see langword="FUNCDESC" /> qui décrit la fonction spécifiée. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncIndexOfMemId(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.Int32@)">
      <summary vsli:raw="Binds to a specific member based on a known DISPID, where the member name is not known (for example, when binding to a default member).">Lie à un membre spécifique en fonction d’une valeur DISPID connue, lorsque le nom du membre est inconnu (par exemple, lors de la liaison à un membre par défaut).</summary>
      <param name="memid" vsli:raw="The member identifier.">Identificateur du membre.</param>
      <param name="invKind" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.INVOKEKIND&quot; /&gt; values that specifies the kind of member identified by memid.">L’une des valeurs <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> qui spécifient le type de membre identifié par memid.</param>
      <param name="pFuncIndex" vsli:raw="When this method returns, contains an index into the function. This parameter is passed uninitialized.">Lorsque cette méthode est retournée, elle contient un index dans la fonction. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetIDsOfNames(System.String[],System.Int32,System.Int32[])">
      <summary vsli:raw="Maps between member names and member IDs, and parameter names and parameter IDs.">Effectue un mappage entre les noms et les ID de membres, ainsi qu'entre les noms et les ID de paramètres.</summary>
      <param name="rgszNames" vsli:raw="An array of names to map.">Tableau de noms à mapper.</param>
      <param name="cNames" vsli:raw="The count of names to map.">Nombre de noms à mapper.</param>
      <param name="pMemId" vsli:raw="When this method returns, contains a reference to an array in which name mappings are placed. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une référence à un tableau dans lequel les mappages des noms sont insérés. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetImplTypeCustData(System.Int32,System.Guid@,System.Object@)">
      <summary vsli:raw="Gets the implementation type of the custom data.">Obtient le type d'implémentation des données personnalisées.</summary>
      <param name="index" vsli:raw="The index of the implementation type for the custom data.">Index de type d’implémentation pour les données personnalisées.</param>
      <param name="guid" vsli:raw="The GUID used to identify the data.">GUID utilisé pour identifier les données.</param>
      <param name="pVarVal" vsli:raw="When this method returns, contains an &lt;see langword=&quot;Object&quot; /&gt; that specifies where to put the retrieved data. This parameter is passed uninitialized.">Lorsque cette méthode est retournée, elle contient un objet <see langword="Object" /> qui spécifie l’emplacement auquel placer les données récupérées. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetImplTypeFlags(System.Int32,System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS@)">
      <summary vsli:raw="Retrieves the &lt;see cref=&quot;T:System.Runtime.InteropServices.IMPLTYPEFLAGS&quot; /&gt; value for one implemented interface or base interface in a type description.">Récupère la valeur <see cref="T:System.Runtime.InteropServices.IMPLTYPEFLAGS" /> pour une interface implémentée ou une interface de base dans une description de type.</summary>
      <param name="index" vsli:raw="The index of the implemented interface or base interface.">Index de l'interface implémentée ou de l'interface de base.</param>
      <param name="pImplTypeFlags" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;IMPLTYPEFLAGS&quot; /&gt; enumeration. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une référence à l'énumération <see langword="IMPLTYPEFLAGS" />. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetMops(System.Int32,System.String@)">
      <summary vsli:raw="Retrieves marshaling information.">Récupère des informations de marshaling.</summary>
      <param name="memid" vsli:raw="The member ID that indicates which marshaling information is needed.">ID de membre qui indique les informations de marshaling nécessaires.</param>
      <param name="pBstrMops" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;opcode&quot; /&gt; string used in marshaling the fields of the structure described by the referenced type description, or returns &lt;see langword=&quot;null&quot; /&gt; if there is no information to return. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une référence à la chaîne <see langword="opcode" /> utilisée pour marshaler les champs de la structure décrite par la description de type référencée, ou retourne <see langword="null" /> s'il n'y a aucune information à retourner. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetNames(System.Int32,System.String[],System.Int32,System.Int32@)">
      <summary vsli:raw="Retrieves the variable with the specified member ID (or the name of the property or method and its parameters) that corresponds to the specified function ID.">Récupère la variable avec l'ID de membre spécifié (ou le nom de la propriété ou de la méthode et ses paramètres) correspondant à l'ID de fonction spécifié.</summary>
      <param name="memid" vsli:raw="The ID of the member whose name (or names) is to be returned.">ID du membre dont le nom (ou les noms) doit être retourné.</param>
      <param name="rgBstrNames" vsli:raw="When this method returns, contains the name (or names) associated with the member. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient le ou les noms associés au membre. Ce paramètre est passé sans être initialisé.</param>
      <param name="cMaxNames" vsli:raw="The length of the &lt;paramref name=&quot;rgBstrNames&quot; /&gt; array.">Longueur du tableau <paramref name="rgBstrNames" />.</param>
      <param name="pcNames" vsli:raw="When this method returns, contains the number of names in the &lt;paramref name=&quot;rgBstrNames&quot; /&gt; array. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient le nombre de noms contenus dans le tableau <paramref name="rgBstrNames" />. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetParamCustData(System.Int32,System.Int32,System.Guid@,System.Object@)">
      <summary vsli:raw="Gets the specified custom data parameter.">Obtient le paramètre de données personnalisé spécifié.</summary>
      <param name="indexFunc" vsli:raw="The index of the function to get the custom data for.">Index de la fonction pour laquelle obtenir les données personnalisées.</param>
      <param name="indexParam" vsli:raw="The index of the parameter of this function to get the custom data for.">Index du paramètre de fonction pour lequel obtenir les données personnalisées.</param>
      <param name="guid" vsli:raw="The GUID used to identify the data.">GUID utilisé pour identifier les données.</param>
      <param name="pVarVal" vsli:raw="When this method returns, contains an &lt;see langword=&quot;Object&quot; /&gt; that specifies where to put the retrieved data. This parameter is passed uninitialized.">Lorsque cette méthode est retournée, elle contient un objet <see langword="Object" /> qui spécifie l’emplacement auquel placer les données récupérées. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetRefTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary vsli:raw="Retrieves the referenced type descriptions, if a type description references other type descriptions.">Récupère les descriptions de type référencées, si une description de type fait référence à d'autres descriptions de type.</summary>
      <param name="hRef" vsli:raw="A handle to the referenced type description to return.">Handle de la description de type référencée à retourner.</param>
      <param name="ppTI" vsli:raw="When this method returns, contains the referenced type description. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient la description de type référencée. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetRefTypeOfImplType(System.Int32,System.Int32@)">
      <summary vsli:raw="Retrieves the type description of the implemented interface types, if a type description describes a COM class.">Récupère la description des types d'interfaces implémentés, si une description de type décrit une classe COM.</summary>
      <param name="index" vsli:raw="The index of the implemented type whose handle is returned.">Index du type implémenté dont le handle est retourné.</param>
      <param name="href" vsli:raw="When this method returns, contains a reference to a handle for the implemented interface. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une référence à un handle pour l'interface implémentée. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeAttr(System.IntPtr@)">
      <summary vsli:raw="Retrieves a &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEATTR&quot; /&gt; structure that contains the attributes of the type description.">Récupère une structure <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> qui contient les attributs de la description de type.</summary>
      <param name="ppTypeAttr" vsli:raw="When this method returns, contains a reference to the structure that contains the attributes of this type description. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une référence à la structure qui contient les attributs de cette description de type. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary vsli:raw="Retrieves the &lt;see langword=&quot;ITypeComp&quot; /&gt; interface for the type description, which enables a client compiler to bind to the type description's members.">Récupère l'interface <see langword="ITypeComp" /> pour la description de type qui permet à un compilateur client d'effectuer une liaison avec les membres de la description de type.</summary>
      <param name="ppTComp" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;ITypeComp&quot; /&gt; of the containing type library. This parameter is passed uninitialized.">Cette méthode retourne une référence au <see langword="ITypeComp" /> de la bibliothèque de types conteneur. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeFlags(System.Int32@)">
      <summary vsli:raw="Returns the type flags without any allocations. This method returns a &lt;see langword=&quot;DWORD&quot; /&gt; type flag, which expands the type flags without growing the &lt;see langword=&quot;TYPEATTR&quot; /&gt; (type attribute).">Retourne les indicateurs de type sans allocation. Cette méthode retourne un indicateur de type <see langword="DWORD" />, qui développe les indicateurs de type sans augmenter le <see langword="TYPEATTR" /> (attribut de type).</summary>
      <param name="pTypeFlags" vsli:raw="When this method returns, contains a &lt;see langword=&quot;DWORD&quot; /&gt; reference to a &lt;see langword=&quot;TYPEFLAG&quot; /&gt;. This parameter is passed uninitialized.">Cette méthode retourne une référence <see langword="DWORD" /> à un <see langword="TYPEFLAG" />. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeKind(System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary vsli:raw="Returns the &lt;see langword=&quot;TYPEKIND&quot; /&gt; enumeration quickly, without doing any allocations.">Retourne l’énumération <see langword="TYPEKIND" /> rapidement, sans effectuer d’allocation.</summary>
      <param name="pTypeKind" vsli:raw="When this method returns, contains a reference to a &lt;see langword=&quot;TYPEKIND&quot; /&gt; enumeration. This parameter is passed uninitialized.">Cette méthode retourne une référence à une énumération <see langword="TYPEKIND" />. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarCustData(System.Int32,System.Guid@,System.Object@)">
      <summary vsli:raw="Gets the variable for the custom data.">Obtient la variable des données personnalisées.</summary>
      <param name="index" vsli:raw="The index of the variable to get the custom data for.">Index de la variable pour laquelle obtenir les données personnalisées.</param>
      <param name="guid" vsli:raw="The GUID used to identify the data.">GUID utilisé pour identifier les données.</param>
      <param name="pVarVal" vsli:raw="When this method returns, contains an &lt;see langword=&quot;Object&quot; /&gt; that specifies where to put the retrieved data. This parameter is passed uninitialized.">Lorsque cette méthode est retournée, elle contient un objet <see langword="Object" /> qui spécifie l’emplacement auquel placer les données récupérées. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarDesc(System.Int32,System.IntPtr@)">
      <summary vsli:raw="Retrieves a &lt;see langword=&quot;VARDESC&quot; /&gt; structure that describes the specified variable.">Récupère une structure <see langword="VARDESC" /> qui décrit la variable spécifiée.</summary>
      <param name="index" vsli:raw="The index of the variable description to return.">Index de la description de variable à retourner.</param>
      <param name="ppVarDesc" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;VARDESC&quot; /&gt; structure that describes the specified variable. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une référence à la structure <see langword="VARDESC" /> qui décrit la variable spécifiée. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarIndexOfMemId(System.Int32,System.Int32@)">
      <summary vsli:raw="Binds to a specific member based on a known &lt;see langword=&quot;DISPID&quot; /&gt;, where the member name is not known (for example, when binding to a default member).">Lie à un membre spécifique en fonction d’une valeur <see langword="DISPID" /> connue, lorsque le nom du membre est inconnu (par exemple, lors de la liaison à un membre par défaut).</summary>
      <param name="memid" vsli:raw="The member identifier.">Identificateur du membre.</param>
      <param name="pVarIndex" vsli:raw="When this method returns, contains an index of &lt;paramref name=&quot;memid&quot; /&gt;. This parameter is passed uninitialized.">Lorsque cette méthode est retournée, elle contient un index de <paramref name="memid" />. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.Invoke(System.Object,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.DISPPARAMS@,System.IntPtr,System.IntPtr,System.Int32@)">
      <summary vsli:raw="Invokes a method, or accesses a property of an object, that implements the interface described by the type description.">Appelle une méthode ou accède à une propriété d'un objet qui implémente l'interface décrite par la description de type.</summary>
      <param name="pvInstance" vsli:raw="A reference to the interface described by this type description.">Référence à l'interface décrite par cette description de type.</param>
      <param name="memid" vsli:raw="Identifier of the interface member.">Identificateur du membre d'interface.</param>
      <param name="wFlags" vsli:raw="Flags describing the context of the invoke call.">Indicateurs décrivant le contexte de l'appel Invoke.</param>
      <param name="pDispParams" vsli:raw="A reference to a structure that contains an array of arguments, an array of DISPIDs for named arguments, and counts of the number of elements in each array.">Référence à une structure qui contient un tableau d'arguments, un tableau de DISPID pour des arguments nommés et le nombre d'éléments de chaque tableau.</param>
      <param name="pVarResult" vsli:raw="A reference to the location at which the result is to be stored. If &lt;paramref name=&quot;wFlags&quot; /&gt; specifies &lt;see langword=&quot;DISPATCH_PROPERTYPUT&quot; /&gt; or &lt;see langword=&quot;DISPATCH_PROPERTYPUTREF&quot; /&gt;, &lt;paramref name=&quot;pVarResult&quot; /&gt; is ignored. Set to &lt;see langword=&quot;null&quot; /&gt; if no result is desired.">Référence à l'emplacement où le résultat doit être stocké. Si <paramref name="wFlags" /> spécifie <see langword="DISPATCH_PROPERTYPUT" /> ou <see langword="DISPATCH_PROPERTYPUTREF" />, <paramref name="pVarResult" /> est ignoré. Affectez <see langword="null" /> si aucun résultat n'est requis.</param>
      <param name="pExcepInfo" vsli:raw="A pointer to an exception information structure, which is filled in only if &lt;see langword=&quot;DISP_E_EXCEPTION&quot; /&gt; is returned.">Pointeur vers une structure d'informations d'exception qui est remplie uniquement lorsque <see langword="DISP_E_EXCEPTION" /> est retourné.</param>
      <param name="puArgErr" vsli:raw="If &lt;see langword=&quot;Invoke&quot; /&gt; returns &lt;see langword=&quot;DISP_E_TYPEMISMATCH&quot; /&gt;, &lt;paramref name=&quot;puArgErr&quot; /&gt; indicates the index of the argument with incorrect type. If more than one argument returns an error, &lt;paramref name=&quot;puArgErr&quot; /&gt; indicates only the first argument with an error.">Si <see langword="Invoke" /> retourne <see langword="DISP_E_TYPEMISMATCH" />, <paramref name="puArgErr" /> indique l'index de l'argument de type incorrect. Si plusieurs arguments retournent une erreur, <paramref name="puArgErr" /> indique uniquement le premier argument contenant une erreur.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseFuncDesc(System.IntPtr)">
      <summary vsli:raw="Releases a &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCDESC&quot; /&gt; structure previously returned by the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)&quot; /&gt; method.">Libère une structure <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> précédemment retournée par la méthode <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)" />.</summary>
      <param name="pFuncDesc" vsli:raw="A reference to the &lt;see langword=&quot;FUNCDESC&quot; /&gt; structure to release.">Référence à la structure <see langword="FUNCDESC" /> à libérer.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseTypeAttr(System.IntPtr)">
      <summary vsli:raw="Releases a &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEATTR&quot; /&gt; structure previously returned by the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)&quot; /&gt; method.">Libère une structure <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> précédemment retournée par la méthode <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)" />.</summary>
      <param name="pTypeAttr" vsli:raw="A reference to the &lt;see langword=&quot;TYPEATTR&quot; /&gt; structure to release.">Référence à la structure <see langword="TYPEATTR" /> à libérer.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseVarDesc(System.IntPtr)">
      <summary vsli:raw="Releases a &lt;see langword=&quot;VARDESC&quot; /&gt; structure previously returned by the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)&quot; /&gt; method.">Libère une structure <see langword="VARDESC" /> précédemment retournée par la méthode <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)" />.</summary>
      <param name="pVarDesc" vsli:raw="A reference to the &lt;see langword=&quot;VARDESC&quot; /&gt; structure to release.">Référence à la structure <see langword="VARDESC" /> à libérer.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeLib">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;ITypeLib&quot; /&gt; interface.">Fournit la définition managée de l'interface <see langword="ITypeLib" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.FindName(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo[],System.Int32[],System.Int16@)">
      <summary vsli:raw="Finds occurrences of a type description in a type library.">Recherche les occurrences d’une description de type dans une bibliothèque de types.</summary>
      <param name="szNameBuf" vsli:raw="The name to search for. This is an in/out parameter.">Nom à rechercher. Il s'agit d'un paramètre entrée/sortie.</param>
      <param name="lHashVal" vsli:raw="A hash value to speed up the search, computed by the &lt;see langword=&quot;LHashValOfNameSys&quot; /&gt; function. If &lt;paramref name=&quot;lHashVal&quot; /&gt; is 0, a value is computed.">Valeur de hachage servant à accélérer la recherche, calculée par la fonction <see langword="LHashValOfNameSys" />. Si <paramref name="lHashVal" /> est égal à 0, une valeur est calculée.</param>
      <param name="ppTInfo" vsli:raw="When this method returns, contains an array of pointers to the type descriptions that contain the name specified in &lt;paramref name=&quot;szNameBuf&quot; /&gt;. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient un tableau de pointeurs vers les descriptions de types contenant le nom spécifié dans <paramref name="szNameBuf" />. Ce paramètre est passé sans être initialisé.</param>
      <param name="rgMemId" vsli:raw="An array of the &lt;see langword=&quot;MEMBERID&quot; /&gt; 's of the found items; &lt;paramref name=&quot;rgMemId&quot; /&gt; [i] is the &lt;see langword=&quot;MEMBERID&quot; /&gt; that indexes into the type description specified by &lt;paramref name=&quot;ppTInfo&quot; /&gt; [i]. Cannot be &lt;see langword=&quot;null&quot; /&gt;.">Tableau de <see langword="MEMBERID" /> des éléments trouvés ; <paramref name="rgMemId" />[i] est le <see langword="MEMBERID" /> qui indexe dans la description de type spécifiée par <paramref name="ppTInfo" />[i]. Ne peut pas être <see langword="null" />.</param>
      <param name="pcFound" vsli:raw="On entry, indicates how many instances to look for. For example, &lt;paramref name=&quot;pcFound&quot; /&gt; = 1 can be called to find the first occurrence. The search stops when one instance is found.  &#xA;  &#xA; On exit, indicates the number of instances that were found. If the &lt;see langword=&quot;in&quot; /&gt; and &lt;see langword=&quot;out&quot; /&gt; values of &lt;paramref name=&quot;pcFound&quot; /&gt; are identical, there might be more type descriptions that contain the name.">À l’entrée, indique combien d’instances sont à rechercher. Par exemple, <paramref name="pcFound" /> = 1 peut être appelé pour rechercher la première occurrence. La recherche s’interrompt quand une instance est trouvée.  
En quittant, indique le nombre d’instances trouvées. Si les valeurs <see langword="in" /> et <see langword="out" /> de <paramref name="pcFound" /> sont identiques, cela signifie que d'autres descriptions de types peuvent contenir le nom.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary vsli:raw="Retrieves the library's documentation string, the complete Help file name and path, and the context identifier for the library Help topic in the Help file.">Récupère la chaîne de documentation de la bibliothèque, le nom et le chemin complets du fichier d’aide, et l’ID de contexte de la rubrique d’aide de la bibliothèque dans le fichier d’aide.</summary>
      <param name="index" vsli:raw="The index of the type description whose documentation is to be returned.">Index de la description de type dont la documentation doit être retournée.</param>
      <param name="strName" vsli:raw="When this method returns, contains a string that represents the name of the specified item. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une chaîne représentant le nom de l'élément spécifié. Ce paramètre est passé sans être initialisé.</param>
      <param name="strDocString" vsli:raw="When this method returns, contains a string that represents the documentation string for the specified item. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une chaîne qui représente la chaîne de documentation pour l'élément spécifié. Ce paramètre est passé sans être initialisé.</param>
      <param name="dwHelpContext" vsli:raw="When this method returns, contains the Help context identifier associated with the specified item. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient l'identificateur du contexte d'aide associé à l'élément spécifié. Ce paramètre est passé sans être initialisé.</param>
      <param name="strHelpFile" vsli:raw="When this method returns, contains a string that represents the fully qualified name of the Help file. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une chaîne représentant le nom qualifié complet du fichier d'aide. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)">
      <summary vsli:raw="Retrieves the structure that contains the library's attributes.">Récupère la structure qui contient les attributs de la bibliothèque.</summary>
      <param name="ppTLibAttr" vsli:raw="When this method returns, contains a structure that contains the library's attributes. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une structure comprenant les attributs de la bibliothèque. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary vsli:raw="Enables a client compiler to bind to a library's types, variables, constants, and global functions.">Permet à un compilateur client d’effectuer une liaison aux types, variables, constantes et fonctions globales d’une bibliothèque.</summary>
      <param name="ppTComp" vsli:raw="When this method returns, contains an instance of a &lt;see langword=&quot;ITypeComp&quot; /&gt; instance for this &lt;see langword=&quot;ITypeLib&quot; /&gt;. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une instance d'une instance de <see langword="ITypeComp" /> pour ce <see langword="ITypeLib" />. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary vsli:raw="Retrieves the specified type description in the library.">Récupère la description de type spécifiée dans la bibliothèque.</summary>
      <param name="index" vsli:raw="The index of the &lt;see langword=&quot;ITypeInfo&quot; /&gt; interface to return.">Index de l'interface <see langword="ITypeInfo" /> à retourner.</param>
      <param name="ppTI" vsli:raw="When this method returns, contains an &lt;see langword=&quot;ITypeInfo&quot; /&gt; describing the type referenced by &lt;paramref name=&quot;index&quot; /&gt;. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient un <see langword="ITypeInfo" /> décrivant le type référencé par <paramref name="index" />. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoCount">
      <summary vsli:raw="Returns the number of type descriptions in the type library.">Retourne le nombre de descriptions de types de la bibliothèque de types.</summary>
      <returns vsli:raw="The number of type descriptions in the type library.">Nombre de descriptions de types de la bibliothèque de types.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoOfGuid(System.Guid@,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary vsli:raw="Retrieves the type description that corresponds to the specified GUID.">Récupère la description de type qui correspond au GUID spécifié.</summary>
      <param name="guid" vsli:raw="The IID of the interface or CLSID of the class whose type info is requested.">IID de l'interface ou CLSID de la classe dont les informations de type sont demandées.</param>
      <param name="ppTInfo" vsli:raw="When this method returns, contains the requested &lt;see langword=&quot;ITypeInfo&quot; /&gt; interface. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient l'interface <see langword="ITypeInfo" /> demandée. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoType(System.Int32,System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary vsli:raw="Retrieves the type of a type description.">Récupère le type d’une description de type.</summary>
      <param name="index" vsli:raw="The index of the type description within the type library.">Index de la description de type dans la bibliothèque de types.</param>
      <param name="pTKind" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;TYPEKIND&quot; /&gt; enumeration for the type description. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une référence à l'énumération <see langword="TYPEKIND" /> pour la description de type. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.IsName(System.String,System.Int32)">
      <summary vsli:raw="Indicates whether a passed-in string contains the name of a type or member described in the library.">Indique si une chaîne passée contient le nom d’un type ou d’un membre décrit dans la bibliothèque.</summary>
      <param name="szNameBuf" vsli:raw="The string to test. This is an in/out parameter.">Chaîne à tester. Il s'agit d'un paramètre entrée/sortie.</param>
      <param name="lHashVal" vsli:raw="The hash value of &lt;paramref name=&quot;szNameBuf&quot; /&gt;.">Valeur de hachage de <paramref name="szNameBuf" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;szNameBuf&quot; /&gt; was found in the type library; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="szNameBuf" /> a été trouvé dans la bibliothèque de types ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.ReleaseTLibAttr(System.IntPtr)">
      <summary vsli:raw="Releases the &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPELIBATTR&quot; /&gt; structure originally obtained from the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)&quot; /&gt; method.">Libère la structure <see cref="T:System.Runtime.InteropServices.TYPELIBATTR" /> obtenue à l'origine à partir de la méthode <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)" />.</summary>
      <param name="pTLibAttr" vsli:raw="The &lt;see langword=&quot;TLIBATTR&quot; /&gt; structure to release.">Structure <see langword="TLIBATTR" /> à libérer.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeLib2">
      <summary vsli:raw="Provides a managed definition of the &lt;see langword=&quot;ITypeLib2&quot; /&gt; interface.">Fournit une définition managée de l'interface <see langword="ITypeLib2" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.FindName(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo[],System.Int32[],System.Int16@)">
      <summary vsli:raw="Finds occurrences of a type description in a type library.">Recherche les occurrences d’une description de type dans une bibliothèque de types.</summary>
      <param name="szNameBuf" vsli:raw="The name to search for.">Nom à rechercher.</param>
      <param name="lHashVal" vsli:raw="A hash value to speed up the search, computed by the &lt;see langword=&quot;LHashValOfNameSys&quot; /&gt; function. If &lt;paramref name=&quot;lHashVal&quot; /&gt; is 0, a value is computed.">Valeur de hachage servant à accélérer la recherche, calculée par la fonction <see langword="LHashValOfNameSys" />. Si <paramref name="lHashVal" /> est égal à 0, une valeur est calculée.</param>
      <param name="ppTInfo" vsli:raw="When this method returns, contains an array of pointers to the type descriptions that contain the name specified in &lt;paramref name=&quot;szNameBuf&quot; /&gt;. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient un tableau de pointeurs vers les descriptions de types contenant le nom spécifié dans <paramref name="szNameBuf" />. Ce paramètre est passé sans être initialisé.</param>
      <param name="rgMemId" vsli:raw="When this method returns, contains an array of the &lt;see langword=&quot;MEMBERID&quot; /&gt;s of the found items; &lt;paramref name=&quot;rgMemId&quot; /&gt; [i] is the &lt;see langword=&quot;MEMBERID&quot; /&gt; that indexes into the type description specified by &lt;paramref name=&quot;ppTInfo&quot; /&gt; [i]. This parameter cannot be &lt;see langword=&quot;null&quot; /&gt;. This parameter is passed uninitialized.">Cette méthode retourne un tableau de <see langword="MEMBERID" />des éléments trouvés ; <paramref name="rgMemId" /> [i] est le <see langword="MEMBERID" /> qui indexe dans la description de type spécifiée par <paramref name="ppTInfo" /> [i]. Ce paramètre ne peut pas être <see langword="null" />. Ce paramètre est passé sans être initialisé.</param>
      <param name="pcFound" vsli:raw="On entry, a value, passed by reference, that indicates how many instances to look for. For example, &lt;paramref name=&quot;pcFound&quot; /&gt; = 1 can be called to find the first occurrence. The search stops when one instance is found.  &#xA;  &#xA; On exit, indicates the number of instances that were found. If the &lt;see langword=&quot;in&quot; /&gt; and &lt;see langword=&quot;out&quot; /&gt; values of &lt;paramref name=&quot;pcFound&quot; /&gt; are identical, there might be more type descriptions that contain the name.">À l'entrée, valeur passée par référence qui indique le nombre d'instances à rechercher. Par exemple, <paramref name="pcFound" /> = 1 peut être appelé pour rechercher la première occurrence. La recherche s’interrompt quand une instance est trouvée.  
En quittant, indique le nombre d’instances trouvées. Si les valeurs <see langword="in" /> et <see langword="out" /> de <paramref name="pcFound" /> sont identiques, cela signifie que d'autres descriptions de types peuvent contenir le nom.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetAllCustData(System.IntPtr)">
      <summary vsli:raw="Gets all custom data items for the library.">Obtient tous les éléments de données personnalisés de la bibliothèque.</summary>
      <param name="pCustData" vsli:raw="A pointer to &lt;see langword=&quot;CUSTDATA&quot; /&gt;, which holds all custom data items.">Pointeur vers <see langword="CUSTDATA" /> qui contient tous les éléments de données personnalisés.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetCustData(System.Guid@,System.Object@)">
      <summary vsli:raw="Gets the custom data.">Obtient les données personnalisées.</summary>
      <param name="guid" vsli:raw="A &lt;see cref=&quot;T:System.Guid&quot; /&gt; , passed by reference, that is used to identify the data.">
        <see cref="T:System.Guid" />, passé par référence, utilisé pour identifier les données.</param>
      <param name="pVarVal" vsli:raw="When this method returns, contains an object that specifies where to put the retrieved data. This parameter is passed uninitialized.">Lorsque cette méthode est retournée, elle contient un objet qui spécifie l’emplacement auquel placer les données récupérées. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary vsli:raw="Retrieves the library's documentation string, the complete Help file name and path, and the context identifier for the library Help topic in the Help file.">Récupère la chaîne de documentation de la bibliothèque, le nom et le chemin complets du fichier d’aide, et l’ID de contexte de la rubrique d’aide de la bibliothèque dans le fichier d’aide.</summary>
      <param name="index" vsli:raw="An index of the type description whose documentation is to be returned.">Index de la description de type dont la documentation doit être retournée.</param>
      <param name="strName" vsli:raw="When this method returns, contains a string that specifies the name of the specified item. This parameter is passed uninitialized.">Cette méthode retourne une chaîne qui indique le nom de l'élément spécifié. Ce paramètre est passé sans être initialisé.</param>
      <param name="strDocString" vsli:raw="When this method returns, contains the documentation string for the specified item. This parameter is passed uninitialized.">Cette méthode retourne la chaîne de documentation pour l'élément spécifié. Ce paramètre est passé sans être initialisé.</param>
      <param name="dwHelpContext" vsli:raw="When this method returns, contains the Help context identifier associated with the specified item. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient l'identificateur du contexte d'aide associé à l'élément spécifié. Ce paramètre est passé sans être initialisé.</param>
      <param name="strHelpFile" vsli:raw="When this method returns, contains a string that specifies the fully qualified name of the Help file. This parameter is passed uninitialized.">Cette méthode retourne une chaîne qui indique le nom qualifié complet du fichier d'aide. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetDocumentation2(System.Int32,System.String@,System.Int32@,System.String@)">
      <summary vsli:raw="Retrieves the library's documentation string, the complete Help file name and path, the localization context to use, and the context ID for the library Help topic in the Help file.">Récupère la chaîne de documentation de la bibliothèque, le nom de fichier complet et chemin d’accès, le contexte de localisation à utiliser et l’ID de contexte pour la rubrique d’aide de bibliothèque dans le fichier d’aide.</summary>
      <param name="index" vsli:raw="An index of the type description whose documentation is to be returned; if &lt;paramref name=&quot;index&quot; /&gt; is -1, the documentation for the library is returned.">Un index de la description de type dont la documentation doit être retournée ; si <paramref name="index" /> est -1, la documentation de la bibliothèque est retournée.</param>
      <param name="pbstrHelpString" vsli:raw="When this method returns, contains a BSTR that specifies the name of the specified item. If the caller does not need the item name, &lt;paramref name=&quot;pbstrHelpString&quot; /&gt; can be &lt;see langword=&quot;null&quot; /&gt;. This parameter is passed uninitialized.">Cette méthode retourne un BSTR qui spécifie le nom de l’élément spécifié. Si l’appelant n’a pas besoin du nom de l’élément, <paramref name="pbstrHelpString" /> peut être <see langword="null" />. Ce paramètre est passé sans être initialisé.</param>
      <param name="pdwHelpStringContext" vsli:raw="When this method returns, contains the Help localization context. If the caller does not need the Help context, &lt;paramref name=&quot;pdwHelpStringContext&quot; /&gt; can be &lt;see langword=&quot;null&quot; /&gt;. This parameter is passed uninitialized.">Quand cette méthode est retournée, contient le contexte de localisation d'aide. Si l’appelant n’a pas besoin du contexte d’aide, <paramref name="pdwHelpStringContext" /> peut être <see langword="null" />. Ce paramètre est passé sans être initialisé.</param>
      <param name="pbstrHelpStringDll" vsli:raw="When this method returns, contains a BSTR that specifies the fully qualified name of the file containing the DLL used for Help file. If the caller does not need the file name, &lt;paramref name=&quot;pbstrHelpStringDll&quot; /&gt; can be &lt;see langword=&quot;null&quot; /&gt;. This parameter is passed uninitialized.">Cette méthode retourne un BSTR qui spécifie le nom qualifié complet du fichier contenant la DLL utilisée pour le fichier d’aide. Si l’appelant n’a pas besoin du nom de fichier, <paramref name="pbstrHelpStringDll" /> peut être <see langword="null" />. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetLibAttr(System.IntPtr@)">
      <summary vsli:raw="Retrieves the structure that contains the library's attributes.">Récupère la structure qui contient les attributs de la bibliothèque.</summary>
      <param name="ppTLibAttr" vsli:raw="When this method returns, contains a structure that contains the library's attributes. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une structure comprenant les attributs de la bibliothèque. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetLibStatistics(System.IntPtr,System.Int32@)">
      <summary vsli:raw="Returns statistics about a type library that are required for efficient sizing of hash tables.">Retourne des statistiques relatives à une bibliothèque de types qui sont requises pour un dimensionnement efficace des tables de hachage.</summary>
      <param name="pcUniqueNames" vsli:raw="A pointer to a count of unique names. If the caller does not need this information, set to &lt;see langword=&quot;null&quot; /&gt;.">Pointeur vers un nombre de noms uniques. Si l'appelant n'a pas besoin de cette information, affectez-lui la valeur <see langword="null" />.</param>
      <param name="pcchUniqueNames" vsli:raw="When this method returns, contains a pointer to a change in the count of unique names. This parameter is passed uninitialized.">Cette méthode retourne un pointeur vers une modification du nombre de noms uniques. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary vsli:raw="Enables a client compiler to bind to a library's types, variables, constants, and global functions.">Permet à un compilateur client d’effectuer une liaison aux types, variables, constantes et fonctions globales d’une bibliothèque.</summary>
      <param name="ppTComp" vsli:raw="When this method returns, contains an &lt;see langword=&quot;ITypeComp&quot; /&gt; instance for this &lt;see langword=&quot;ITypeLib&quot; /&gt;. This parameter is passed uninitialized.">Cette méthode retourne une instance de <see langword="ITypeComp" /> pour <see langword="ITypeLib" />. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary vsli:raw="Retrieves the specified type description in the library.">Récupère la description de type spécifiée dans la bibliothèque.</summary>
      <param name="index" vsli:raw="An index of the &lt;see langword=&quot;ITypeInfo&quot; /&gt; interface to return.">Index de l'interface <see langword="ITypeInfo" /> à retourner.</param>
      <param name="ppTI" vsli:raw="When this method returns, contains an &lt;see langword=&quot;ITypeInfo&quot; /&gt; describing the type referenced by &lt;paramref name=&quot;index&quot; /&gt;. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient un <see langword="ITypeInfo" /> décrivant le type référencé par <paramref name="index" />. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoCount">
      <summary vsli:raw="Returns the number of type descriptions in the type library.">Retourne le nombre de descriptions de types de la bibliothèque de types.</summary>
      <returns vsli:raw="The number of type descriptions in the type library.">Nombre de descriptions de types de la bibliothèque de types.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoOfGuid(System.Guid@,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary vsli:raw="Retrieves the type description that corresponds to the specified GUID.">Récupère la description de type qui correspond au GUID spécifié.</summary>
      <param name="guid" vsli:raw="The &lt;see cref=&quot;T:System.Guid&quot; /&gt;, passed by reference, that represents the IID of the &lt;see langword=&quot;CLSID&quot; /&gt; interface of the class whose type info is requested.">
        <see cref="T:System.Guid" /> passé par référence, qui représente l'IID de l'interface <see langword="CLSID" /> de la classe dont les informations de type sont demandées.</param>
      <param name="ppTInfo" vsli:raw="When this method returns, contains the requested &lt;see langword=&quot;ITypeInfo&quot; /&gt; interface. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient l'interface <see langword="ITypeInfo" /> demandée. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoType(System.Int32,System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary vsli:raw="Retrieves the type of a type description.">Récupère le type d’une description de type.</summary>
      <param name="index" vsli:raw="The index of the type description within the type library.">Index de la description de type dans la bibliothèque de types.</param>
      <param name="pTKind" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;TYPEKIND&quot; /&gt; enumeration for the type description. This parameter is passed uninitialized.">Lorsque cette méthode retourne une valeur, contient une référence à l'énumération <see langword="TYPEKIND" /> pour la description de type. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.IsName(System.String,System.Int32)">
      <summary vsli:raw="Indicates whether a passed-in string contains the name of a type or member described in the library.">Indique si une chaîne passée contient le nom d’un type ou d’un membre décrit dans la bibliothèque.</summary>
      <param name="szNameBuf" vsli:raw="The string to test.">Chaîne à tester.</param>
      <param name="lHashVal" vsli:raw="The hash value of &lt;paramref name=&quot;szNameBuf&quot; /&gt;.">Valeur de hachage de <paramref name="szNameBuf" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;szNameBuf&quot; /&gt; was found in the type library; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="szNameBuf" /> a été trouvé dans la bibliothèque de types ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.ReleaseTLibAttr(System.IntPtr)">
      <summary vsli:raw="Releases the &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPELIBATTR&quot; /&gt; structure originally obtained from the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)&quot; /&gt; method.">Libère la structure <see cref="T:System.Runtime.InteropServices.TYPELIBATTR" /> obtenue à l'origine à partir de la méthode <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)" />.</summary>
      <param name="pTLibAttr" vsli:raw="The &lt;see langword=&quot;TLIBATTR&quot; /&gt; structure to release.">Structure <see langword="TLIBATTR" /> à libérer.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.LIBFLAGS">
      <summary vsli:raw="Defines flags that apply to type libraries.">Définit les indicateurs applicables aux bibliothèques de types.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FCONTROL">
      <summary vsli:raw="The type library describes controls and should not be displayed in type browsers intended for nonvisual objects.">La bibliothèque de types décrit des contrôles ; elle ne doit pas être affichée dans des explorateurs de types conçus pour des objets non visuels.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FHASDISKIMAGE">
      <summary vsli:raw="The type library exists in a persisted form on disk.">La bibliothèque de types existe sur le disque sous une forme persistante.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FHIDDEN">
      <summary vsli:raw="The type library should not be displayed to users, although its use is not restricted. The type library should be used by controls. Hosts should create a new type library that wraps the control with extended properties.">La bibliothèque de types ne doit pas être visible aux utilisateurs, même lorsque son utilisation n'est pas restreinte. Elle doit être utilisée par des contrôles. Les hôtes doivent créer une nouvelle bibliothèque de types qui encapsule le contrôle avec des propriétés étendues.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FRESTRICTED">
      <summary vsli:raw="The type library is restricted, and should not be displayed to users.">La bibliothèque de types est restreinte et elle ne doit pas être affichée aux utilisateurs.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.PARAMDESC">
      <summary vsli:raw="Contains information about how to transfer a structure element, parameter, or function return value between processes.">Indique comment transférer un élément de structure, un paramètre ou une valeur de retour de fonction entre des processus.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMDESC.lpVarValue">
      <summary vsli:raw="Represents a pointer to a value that is being passed between processes.">Représente un pointeur vers une valeur passée entre des processus.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMDESC.wParamFlags">
      <summary vsli:raw="Represents bitmask values that describe the structure element, parameter, or return value.">Représente des valeurs de masque de bits qui décrivent l'élément de structure, le paramètre ou la valeur de retour.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.PARAMFLAG">
      <summary vsli:raw="Describes how to transfer a structure element, parameter, or function return value between processes.">Décrit comment transférer un élément de structure, un paramètre ou une valeur de retour de fonction entre des processus.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FHASCUSTDATA">
      <summary vsli:raw="The parameter has custom data.">Le paramètre a des données personnalisées.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FHASDEFAULT">
      <summary vsli:raw="The parameter has default behaviors defined.">Le paramètre a des comportements par défaut définis.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FIN">
      <summary vsli:raw="The parameter passes information from the caller to the callee.">Le paramètre passe des informations de l'appelant à l'appelé.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FLCID">
      <summary vsli:raw="The parameter is the local identifier of a client application.">Le paramètre est l'identificateur local d'une application cliente.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FOPT">
      <summary vsli:raw="The parameter is optional.">Le paramètre est facultatif.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FOUT">
      <summary vsli:raw="The parameter returns information from the callee to the caller.">Le paramètre retourne des informations de l'appelé à l'appelant.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FRETVAL">
      <summary vsli:raw="The parameter is the return value of the member.">Le paramètre est la valeur de retour du membre.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_NONE">
      <summary vsli:raw="Does not specify whether the parameter passes or receives information.">Ne spécifie pas si le paramètre passe ou reçoit des informations.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STATDATA">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;STATDATA&quot; /&gt; structure.">Fournit la définition managée de la structure <see langword="STATDATA" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.advf">
      <summary vsli:raw="Represents the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.ADVF&quot; /&gt; enumeration value that determines when the advisory sink is notified of changes in the data.">Représente la valeur d'énumération <see cref="T:System.Runtime.InteropServices.ComTypes.ADVF" /> qui détermine le moment auquel le récepteur de notifications est averti des modifications apportées aux données.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.advSink">
      <summary vsli:raw="Represents the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.IAdviseSink&quot; /&gt; interface that will receive change notifications.">Représente l'interface <see cref="T:System.Runtime.InteropServices.ComTypes.IAdviseSink" /> qui recevra les notifications de modifications.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.connection">
      <summary vsli:raw="Represents the token that uniquely identifies the advisory connection. This token is returned by the method that sets up the advisory connection.">Représente le jeton qui identifie de manière unique la connexion de notifications. Ce jeton est retourné par la méthode qui configure la connexion de notifications.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.formatetc">
      <summary vsli:raw="Represents the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure for the data of interest to the advise sink. The advise sink receives notification of changes to the data specified by this &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure.">Représente la structure <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> des données dignes d'intérêt pour le récepteur de notifications. Le récepteur de notifications est averti des modifications apportées aux données spécifiées par cette structure <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STATSTG">
      <summary vsli:raw="Contains statistical information about an open storage, stream, or byte-array object.">Contient des informations statistiques relatives à un objet de stockage, de flux ou de tableau d'octets ouvert.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.atime">
      <summary vsli:raw="Specifies the last access time for this storage, stream, or byte array.">Spécifie l'heure du dernier accès à ce stockage, flux ou tableau d'octets.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.cbSize">
      <summary vsli:raw="Specifies the size, in bytes, of the stream or byte array.">Spécifie la taille en octets du flux ou du tableau d'octets.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.clsid">
      <summary vsli:raw="Indicates the class identifier for the storage object.">Indique l'identificateur de classe de l'objet de stockage.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.ctime">
      <summary vsli:raw="Indicates the creation time for this storage, stream, or byte array.">Indique l'heure de création de ce stockage, flux ou tableau d'octets.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfLocksSupported">
      <summary vsli:raw="Indicates the types of region locking supported by the stream or byte array.">Indique les types de verrouillage de région pris en charge par le flux ou le tableau d'octets.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfMode">
      <summary vsli:raw="Indicates the access mode that was specified when the object was opened.">Indique le mode d'accès spécifié à l'ouverture de l'objet.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfStateBits">
      <summary vsli:raw="Indicates the current state bits of the storage object (the value most recently set by the &lt;see langword=&quot;IStorage::SetStateBits&quot; /&gt; method).">Indique les bits d'état actuels de l'objet de stockage (la dernière valeur définie par la méthode <see langword="IStorage::SetStateBits" />).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.mtime">
      <summary vsli:raw="Indicates the last modification time for this storage, stream, or byte array.">Indique l'heure de la dernière modification de ce stockage, flux ou tableau d'octets.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.pwcsName">
      <summary vsli:raw="Represents a pointer to a null-terminated string containing the name of the object described by this structure.">Représente un pointeur vers une chaîne se terminant par un caractère null qui contient le nom de l'objet décrit par cette structure.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.reserved">
      <summary vsli:raw="Reserved for future use.">Réservé à un usage ultérieur.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.type">
      <summary vsli:raw="Indicates the type of storage object, which is one of the values from the &lt;see langword=&quot;STGTY&quot; /&gt; enumeration.">Indique le type d'objet de stockage qui est une des valeurs de l'énumération <see langword="STGTY" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;STGMEDIUM&quot; /&gt; structure.">Fournit la définition managée de la structure <see langword="STGMEDIUM" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease">
      <summary vsli:raw="Represents a pointer to an interface instance that allows the sending process to control the way the storage is released when the receiving process calls the &lt;see langword=&quot;ReleaseStgMedium&quot; /&gt; function. If &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, &lt;see langword=&quot;ReleaseStgMedium&quot; /&gt; uses default procedures to release the storage; otherwise, &lt;see langword=&quot;ReleaseStgMedium&quot; /&gt; uses the specified &lt;see langword=&quot;IUnknown&quot; /&gt; interface.">Représente un pointeur vers une instance d'interface permettant au processus émetteur de contrôler la manière dont le stockage est libéré lorsque le processus récepteur appelle la fonction <see langword="ReleaseStgMedium" />. Si <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> est <see langword="null" />, <see langword="ReleaseStgMedium" /> utilise des procédures par défaut pour libérer le stockage ; sinon, <see langword="ReleaseStgMedium" /> utilise l'interface <see langword="IUnknown" /> spécifiée.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.tymed">
      <summary vsli:raw="Specifies the type of storage medium. The marshaling and unmarshaling routines use this value to determine which union member was used. This value must be one of the elements of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.TYMED&quot; /&gt; enumeration.">Spécifie le type de support de stockage. Les routines de marshaling et d'unmarshaling utilisent cette valeur pour déterminer le membre de l'union qui a été utilisé. Cette valeur doit être l'un des éléments de l'énumération <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.unionmember">
      <summary vsli:raw="Represents a handle, string, or interface pointer that the receiving process can use to access the data being transferred.">Représente un handle, une chaîne ou un pointeur d'interface que le processus récepteur peut utiliser pour accéder aux données transférées.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.SYSKIND">
      <summary vsli:raw="Identifies the target operating system platform.">Identifie la plateforme du système d'exploitation cible.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_MAC">
      <summary vsli:raw="The target operating system for the type library is Apple Macintosh. By default, all data fields are aligned on even-byte boundaries.">Le système d'exploitation cible de la bibliothèque de types est Apple Macintosh. Par défaut, tous les champs de données sont alignés sur des limites d'octet pair.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_WIN16">
      <summary vsli:raw="The target operating system for the type library is 16-bit Windows systems. By default, data fields are packed.">Le système d'exploitation cible de la bibliothèque de types est un système Windows 16 bits. Par défaut, les champs de données sont compactés.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_WIN32">
      <summary vsli:raw="The target operating system for the type library is 32-bit Windows systems. By default, data fields are naturally aligned (for example, 2-byte integers are aligned on even-byte boundaries; 4-byte integers are aligned on quad-word boundaries, and so on).">Le système d’exploitation cible de la bibliothèque de types est un système Windows 32 bits. Par défaut, les champs de données sont alignés naturellement (par exemple, un entier sur 2 octets est aligné sur une limite d'octet pair, un entier sur 4 octets est aligné sur une limite de mot quadruple, et ainsi de suite).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_WIN64">
      <summary vsli:raw="The target operating system for the type library is 64-bit Windows systems.">Le système d’exploitation cible de la bibliothèque de types est un système Windows 64 bits.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYMED">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;TYMED&quot; /&gt; structure.">Fournit la définition managée de la structure <see langword="TYMED" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ENHMF">
      <summary vsli:raw="The storage medium is an enhanced metafile. If the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;&lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member is &lt;see langword=&quot;null&quot; /&gt;, the destination process should use &lt;see langword=&quot;DeleteEnhMetaFile&quot; /&gt; to delete the bitmap.">Le support de stockage est un métafichier amélioré. Si le membre <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> a la valeur <see langword="null" />, le processus de destination doit utiliser <see langword="DeleteEnhMetaFile" /> pour supprimer la bitmap.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_FILE">
      <summary vsli:raw="The storage medium is a disk file identified by a path. If the &lt;see langword=&quot;STGMEDIUM&quot; /&gt;&lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member is &lt;see langword=&quot;null&quot; /&gt;, the destination process should use &lt;see langword=&quot;OpenFile&quot; /&gt; to delete the file.">Le support de stockage est un fichier sur disque identifié par un chemin d'accès. Si le membre <see langword="STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> a la valeur <see langword="null" />, le processus de destination doit utiliser <see langword="OpenFile" /> pour supprimer le fichier.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_GDI">
      <summary vsli:raw="The storage medium is a Graphics Device Interface (GDI) component (HBITMAP). If the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;&lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member is &lt;see langword=&quot;null&quot; /&gt;, the destination process should use &lt;see langword=&quot;DeleteObject&quot; /&gt; to delete the bitmap.">Le support de stockage est un composant GDI (Graphics Device Interface) (HBITMAP). Si le membre <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> a la valeur <see langword="null" />, le processus de destination doit utiliser <see langword="DeleteObject" /> pour supprimer la bitmap.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_HGLOBAL">
      <summary vsli:raw="The storage medium is a global memory handle (HGLOBAL). Allocate the global handle with the GMEM_SHARE flag. If the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;&lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member is &lt;see langword=&quot;null&quot; /&gt;, the destination process should use &lt;see langword=&quot;GlobalFree&quot; /&gt; to release the memory.">Le support de stockage est un handle de mémoire globale (HGLOBAL). Allouez le handle global possédant l'indicateur GMEM_SHARE. Si le membre <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> a la valeur <see langword="null" />, le processus de destination doit utiliser <see langword="GlobalFree" /> pour libérer la mémoire.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTORAGE">
      <summary vsli:raw="The storage medium is a storage component identified by an &lt;see langword=&quot;IStorage&quot; /&gt; pointer. The data is in the streams and storages contained by this &lt;see langword=&quot;IStorage&quot; /&gt; instance. If the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;&lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member is not &lt;see langword=&quot;null&quot; /&gt;, the destination process should use &lt;see langword=&quot;IStorage::Release&quot; /&gt; to release the storage component.">Le support de stockage est un composant de stockage identifié par un pointeur <see langword="IStorage" />. Les données se trouvent dans les flux et les stockages contenus dans cette instance de <see langword="IStorage" />. Si le membre <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> n’a pas la valeur <see langword="null" />, le processus de destination doit utiliser <see langword="IStorage::Release" /> pour libérer le composant de stockage.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTREAM">
      <summary vsli:raw="The storage medium is a stream object identified by an &lt;see langword=&quot;IStream&quot; /&gt; pointer. Use &lt;see langword=&quot;ISequentialStream::Read&quot; /&gt; to read the data. If the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;&lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member is not &lt;see langword=&quot;null&quot; /&gt;, the destination process should use &lt;see langword=&quot;IStream::Release&quot; /&gt; to release the stream component.">Le support de stockage est un objet de flux identifié par un pointeur <see langword="IStream" />. Utilisez <see langword="ISequentialStream::Read" /> pour lire les données. Si le membre <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> n’a pas la valeur <see langword="null" />, le processus de destination doit utiliser <see langword="IStream::Release" /> pour libérer le composant de flux.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_MFPICT">
      <summary vsli:raw="The storage medium is a metafile (HMETAFILE). Use the Windows or WIN32 functions to access the metafile's data. If the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;&lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member is &lt;see langword=&quot;null&quot; /&gt;, the destination process should use &lt;see langword=&quot;DeleteMetaFile&quot; /&gt; to delete the bitmap.">Le support de stockage est un métafichier (HMETAFILE). Utilisez les fonctions Windows ou WIN32 pour accéder aux données du métafichier. Si le membre <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> a la valeur <see langword="null" />, le processus de destination doit utiliser <see langword="DeleteMetaFile" /> pour supprimer la bitmap.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_NULL">
      <summary vsli:raw="No data is being passed.">Aucune donnée n'est passée.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEATTR">
      <summary vsli:raw="Contains attributes of a &lt;see langword=&quot;UCOMITypeInfo&quot; /&gt;.">Contient des attributs d'un <see langword="UCOMITypeInfo" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cbAlignment">
      <summary vsli:raw="Specifies the byte alignment for an instance of this type.">Spécifie l'alignement des octets pour une instance de ce type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cbSizeInstance">
      <summary vsli:raw="The size of an instance of this type.">Taille d'une instance de ce type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cbSizeVft">
      <summary vsli:raw="The size of this type's virtual method table (VTBL).">Taille de la table de méthodes virtuelles (VTBL) de ce type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cFuncs">
      <summary vsli:raw="Indicates the number of functions on the interface this structure describes.">Indique le nombre de fonctions sur l'interface décrite par cette structure.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cImplTypes">
      <summary vsli:raw="Indicates the number of implemented interfaces on the interface this structure describes.">Indique le nombre d'interfaces implémentées sur l'interface décrite par cette structure.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cVars">
      <summary vsli:raw="Indicates the number of variables and data fields on the interface described by this structure.">Indique le nombre de variables et de champs de données sur l'interface décrite par cette structure.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.dwReserved">
      <summary vsli:raw="Reserved for future use.">Réservé à un usage ultérieur.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.guid">
      <summary vsli:raw="The GUID of the type information.">GUID des informations de type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.idldescType">
      <summary vsli:raw="IDL attributes of the described type.">Attributs IDL du type décrit.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.lcid">
      <summary vsli:raw="Locale of member names and documentation strings.">Paramètres régionaux des noms de membres et des chaînes de documentation.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.lpstrSchema">
      <summary vsli:raw="Reserved for future use.">Réservé à un usage ultérieur.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.MEMBER_ID_NIL">
      <summary vsli:raw="A constant used with the &lt;see cref=&quot;F:System.Runtime.InteropServices.TYPEATTR.memidConstructor&quot; /&gt; and &lt;see cref=&quot;F:System.Runtime.InteropServices.TYPEATTR.memidDestructor&quot; /&gt; fields.">Constante utilisée avec les champs <see cref="F:System.Runtime.InteropServices.TYPEATTR.memidConstructor" /> et <see cref="F:System.Runtime.InteropServices.TYPEATTR.memidDestructor" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.memidConstructor">
      <summary vsli:raw="ID of constructor, or &lt;see cref=&quot;F:System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL&quot; /&gt; if none.">ID du constructeur ou <see cref="F:System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL" /> en l'absence d'un identificateur.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.memidDestructor">
      <summary vsli:raw="ID of destructor, or &lt;see cref=&quot;F:System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL&quot; /&gt; if none.">ID du destructeur ou <see cref="F:System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL" /> en l'absence d'un identificateur.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.tdescAlias">
      <summary vsli:raw="If &lt;see cref=&quot;F:System.Runtime.InteropServices.TYPEATTR.typekind&quot; /&gt; == &lt;see cref=&quot;F:System.Runtime.InteropServices.TYPEKIND.TKIND_ALIAS&quot; /&gt;, specifies the type for which this type is an alias.">Si <see cref="F:System.Runtime.InteropServices.TYPEATTR.typekind" /> == <see cref="F:System.Runtime.InteropServices.TYPEKIND.TKIND_ALIAS" />, spécifie le type pour lequel ce type est un alias.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.typekind">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEKIND&quot; /&gt; value describing the type this information describes.">Valeur <see cref="T:System.Runtime.InteropServices.TYPEKIND" /> décrivant le type décrit par ces informations.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.wMajorVerNum">
      <summary vsli:raw="Major version number.">Numéro de version principale.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.wMinorVerNum">
      <summary vsli:raw="Minor version number.">Numéro de version secondaire.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.wTypeFlags">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEFLAGS&quot; /&gt; value describing this information.">Valeur <see cref="T:System.Runtime.InteropServices.TYPEFLAGS" /> décrivant ces informations.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEDESC">
      <summary vsli:raw="Describes the type of a variable, return type of a function, or the type of a function parameter.">Décrit le type d’une variable, le type de retour d’une fonction ou le type d’un paramètre de fonction.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEDESC.lpValue">
      <summary vsli:raw="If the variable is &lt;see langword=&quot;VT_SAFEARRAY&quot; /&gt; or &lt;see langword=&quot;VT_PTR&quot; /&gt;, the &lt;see langword=&quot;lpValue&quot; /&gt; field contains a pointer to a &lt;see langword=&quot;TYPEDESC&quot; /&gt; that specifies the element type.">Si la variable est <see langword="VT_SAFEARRAY" /> ou <see langword="VT_PTR" />, le champ <see langword="lpValue" /> contient un pointeur vers un <see langword="TYPEDESC" /> spécifiant le type d'élément.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEDESC.vt">
      <summary vsli:raw="Indicates the variant type for the item described by this &lt;see langword=&quot;TYPEDESC&quot; /&gt;.">Indique le type de variante de l'élément décrit par ce <see langword="TYPEDESC" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEFLAGS">
      <summary vsli:raw="Defines the properties and attributes of a type description.">Définit les propriétés et les attributs d'une description de type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FAGGREGATABLE">
      <summary vsli:raw="The class supports aggregation.">La classe prend en charge l'agrégation.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FAPPOBJECT">
      <summary vsli:raw="A type description that describes an &lt;see langword=&quot;Application&quot; /&gt; object.">Description de type qui décrit un objet <see langword="Application" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FCANCREATE">
      <summary vsli:raw="Instances of the type can be created by &lt;see langword=&quot;ITypeInfo::CreateInstance&quot; /&gt;.">Les instances du type peuvent être créées à l'aide de <see langword="ITypeInfo::CreateInstance" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FCONTROL">
      <summary vsli:raw="The type is a control from which other types will be derived and should not be displayed to users.">Le type est un contrôle à partir duquel les autres types sont dérivés ; il ne doit pas être affiché aux utilisateurs.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FDISPATCHABLE">
      <summary vsli:raw="Indicates that the interface derives from &lt;see langword=&quot;IDispatch&quot; /&gt;, either directly or indirectly. This flag is computed; there is no Object Description Language for the flag.">Indique que l'interface dérive directement ou indirectement de <see langword="IDispatch" />. Cet indicateur est calculé ; il n'existe pas de langage de description d'objet pour celui-ci.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FDUAL">
      <summary vsli:raw="The interface supplies both &lt;see langword=&quot;IDispatch&quot; /&gt; and VTBL binding.">L'interface fournit à la fois une liaison <see langword="IDispatch" /> et VTBL.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FHIDDEN">
      <summary vsli:raw="The type should not be displayed to browsers.">Le type ne doit pas être affiché aux navigateurs.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FLICENSED">
      <summary vsli:raw="The type is licensed.">Le type est sous licence.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FNONEXTENSIBLE">
      <summary vsli:raw="The interface cannot add members at run time.">L'interface ne peut pas ajouter de membres au moment de l'exécution.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FOLEAUTOMATION">
      <summary vsli:raw="The types used in the interface are fully compatible with Automation, including VTBL binding support. Setting dual on an interface sets both this flag and the  &lt;see cref=&quot;F:System.Runtime.InteropServices.TYPEFLAGS.TYPEFLAG_FDUAL&quot; /&gt;. This flag is not allowed on dispinterfaces.">Les types utilisés dans l'interface sont totalement compatibles avec Automation, y compris la prise en charge de la liaison VTBL. Si une interface est de type dual, cet indicateur et <see cref="F:System.Runtime.InteropServices.TYPEFLAGS.TYPEFLAG_FDUAL" /> sont tous les deux définis. Cet indicateur n'est pas autorisé sur les dispinterfaces.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FPREDECLID">
      <summary vsli:raw="The type is predefined. The client application should automatically create a single instance of the object that has this attribute. The name of the variable that points to the object is the same as the class name of the object.">Le type est prédéfini. L'application cliente doit automatiquement créer une instance unique de l'objet doté de cet attribut. Le nom de la variable pointant vers l'objet est identique au nom de classe de l'objet.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FPROXY">
      <summary vsli:raw="Indicates that the interface will be using a proxy/stub dynamic link library. This flag specifies that the type library proxy should not be unregistered when the type library is unregistered.">Indique que l'interface va utiliser une bibliothèque de liens dynamiques proxy/stub. Cet indicateur spécifie que l'inscription du proxy de la bibliothèque de types ne doit pas être annulée lors de l'annulation de l'inscription de la bibliothèque de types.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FREPLACEABLE">
      <summary vsli:raw="The object supports &lt;see langword=&quot;IConnectionPointWithDefault&quot; /&gt;, and has default behaviors.">L'objet prend en charge <see langword="IConnectionPointWithDefault" /> et il a des comportements par défaut.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FRESTRICTED">
      <summary vsli:raw="Should not be accessible from macro languages. This flag is intended for system-level types or types that type browsers should not display.">Ne doit pas être accessible à partir de langages de macro. Cet indicateur est destiné à des types de niveau système ou à des types que les explorateurs de types ne doivent pas afficher.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FREVERSEBIND">
      <summary vsli:raw="Indicates base interfaces should be checked for name resolution before checking children, which is the reverse of the default behavior.">Indique que la résolution de noms doit être vérifiée avant les enfants dans les interfaces de base, ce qui est l'inverse du comportement par défaut.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEKIND">
      <summary vsli:raw="Specifies various types of data and functions.">Spécifie les différents types de données et de fonctions.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_ALIAS">
      <summary vsli:raw="A type that is an alias for another type.">Type qui est un alias d'un autre type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_COCLASS">
      <summary vsli:raw="A set of implemented components interfaces.">Un ensemble d'interfaces de composants implémentés.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_DISPATCH">
      <summary vsli:raw="A set of methods and properties that are accessible through &lt;see langword=&quot;IDispatch::Invoke&quot; /&gt;. By default, dual interfaces return &lt;see langword=&quot;TKIND_DISPATCH&quot; /&gt;.">Ensemble de méthodes et de propriétés accessibles par l'intermédiaire de <see langword="IDispatch::Invoke" />. Par défaut, les interfaces doubles retournent <see langword="TKIND_DISPATCH" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_ENUM">
      <summary vsli:raw="A set of enumerators.">Ensemble d'énumérateurs.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_INTERFACE">
      <summary vsli:raw="A type that has virtual functions, all of which are pure.">Type comportant des fonctions virtuelles, toutes pures.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_MAX">
      <summary vsli:raw="End-of-enumeration marker.">Marqueur de fin d'énumération.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_MODULE">
      <summary vsli:raw="A module that can have only static functions and data (for example, a DLL).">Module pouvant uniquement comporter des fonctions et des données statiques (par exemple, une DLL).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_RECORD">
      <summary vsli:raw="A structure with no methods.">Structure sans méthodes.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_UNION">
      <summary vsli:raw="A union of all members that have an offset of zero.">Union de tous les membres ayant un offset de zéro.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPELIBATTR">
      <summary vsli:raw="Identifies a particular type library and provides localization support for member names.">Identifie une bibliothèque de types particulière et fournit la prise en charge de la localisation des noms de membres.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.guid">
      <summary vsli:raw="Represents a globally unique library ID of a type library.">Représente un identificateur global unique de bibliothèque d'une bibliothèque de types.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.lcid">
      <summary vsli:raw="Represents a locale ID of a type library.">Représente l'ID des paramètres régionaux d'une bibliothèque de types.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.syskind">
      <summary vsli:raw="Represents the target hardware platform of a type library.">Représente la plateforme matérielle cible d'une bibliothèque de types.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.wLibFlags">
      <summary vsli:raw="Represents library flags.">Représente des indicateurs de bibliothèque.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.wMajorVerNum">
      <summary vsli:raw="Represents the major version number of a type library.">Représente le numéro de version principale d'une bibliothèque de types.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.wMinorVerNum">
      <summary vsli:raw="Represents the minor version number of a type library.">Représente le numéro de version secondaire d'une bibliothèque de types.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARDESC">
      <summary vsli:raw="Describes a variable, constant, or data member.">Décrit une variable, une constante ou des données membres.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.desc">
      <summary vsli:raw="Contains information about a variable.">Contient des informations sur une variable.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION">
      <summary vsli:raw="Contains information about a variable.">Contient des informations sur une variable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION.lpvarValue">
      <summary vsli:raw="Describes a symbolic constant.">Décrit une constante symbolique.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION.oInst">
      <summary vsli:raw="Indicates the offset of this variable within the instance.">Indique l'offset de cette variable dans l'instance.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.elemdescVar">
      <summary vsli:raw="Contains the variable type.">Contient le type de variable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.lpstrSchema">
      <summary vsli:raw="This field is reserved for future use.">Ce champ est réservé à une utilisation ultérieure.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.memid">
      <summary vsli:raw="Indicates the member ID of a variable.">Indique l'ID de membre d'une variable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.varkind">
      <summary vsli:raw="Defines how to marshal a variable.">Définit comment marshaler une variable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.wVarFlags">
      <summary vsli:raw="Defines the properties of a variable.">Définit les propriétés d'une variable.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARFLAGS">
      <summary vsli:raw="Identifies the constants that define the properties of a variable.">Identifie les constantes qui définissent les propriétés d'une variable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FBINDABLE">
      <summary vsli:raw="The variable supports data binding.">La variable prend en charge la liaison de données.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FDEFAULTBIND">
      <summary vsli:raw="The variable is the single property that best represents the object. Only one variable in type information can have this attribute.">La variable est la propriété unique qui représente le mieux l’objet. Seule une variable dans les informations de type peut avoir cet attribut.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FDEFAULTCOLLELEM">
      <summary vsli:raw="Permits an optimization in which the compiler looks for a member named &quot;xyz&quot; on the type of &quot;abc&quot;. If such a member is found and is flagged as an accessor function for an element of the default collection, then a call is generated to that member function. Permitted on members in dispinterfaces and interfaces; not permitted on modules.">Permet une optimisation dans laquelle le compilateur recherche un membre nommé « xyz » sur le type « abc ». Si ce membre est trouvé et s’il est marqué comme fonction d’accesseur pour un élément de la collection par défaut, un appel à cette fonction membre est généré. Autorisé sur les membres dans des dispinterfaces et des interfaces ; non autorisé sur des modules.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FDISPLAYBIND">
      <summary vsli:raw="The variable is displayed to the user as bindable. &lt;see cref=&quot;F:System.Runtime.InteropServices.VARFLAGS.VARFLAG_FBINDABLE&quot; /&gt; must also be set.">La variable est affichée à l'utilisateur comme pouvant être liée. Vous devez également définir <see cref="F:System.Runtime.InteropServices.VARFLAGS.VARFLAG_FBINDABLE" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FHIDDEN">
      <summary vsli:raw="The variable should not be displayed to the user in a browser, although it exists and is bindable.">Même si elle existe et peut être liée, la variable ne doit pas être visible pour l'utilisateur dans un explorateur.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FIMMEDIATEBIND">
      <summary vsli:raw="The variable is mapped as individual bindable properties.">La variable est mappée comme propriétés individuelles pouvant être liées.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FNONBROWSABLE">
      <summary vsli:raw="The variable appears in an object browser, but not in a properties browser.">La variable s’affiche dans un explorateur d’objets, mais pas dans un explorateur de propriétés.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FREADONLY">
      <summary vsli:raw="Assignment to the variable should not be allowed.">L’affectation à la variable ne doit pas être autorisée.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FREPLACEABLE">
      <summary vsli:raw="Tags the interface as having default behaviors.">Marque l’interface comme ayant des comportements par défaut.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FREQUESTEDIT">
      <summary vsli:raw="When set, any attempt to directly change the property results in a call to &lt;see langword=&quot;IPropertyNotifySink::OnRequestEdit&quot; /&gt;. The implementation of &lt;see langword=&quot;OnRequestEdit&quot; /&gt; determines if the change is accepted.">Lorsque défini, toute tentative de modification directe de la propriété entraîne un appel à <see langword="IPropertyNotifySink::OnRequestEdit" />. L'implémentation de <see langword="OnRequestEdit" /> détermine si la modification est acceptée.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FRESTRICTED">
      <summary vsli:raw="The variable should not be accessible from macro languages. This flag is intended for system-level variables or variables that you do not want type browsers to display.">La variable ne doit pas être accessible à partir de langages de macro. Cet indicateur est destiné à des variables de niveau système ou à des variables dont vous ne souhaitez pas permettre l'affichage dans des explorateurs.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FSOURCE">
      <summary vsli:raw="The variable returns an object that is a source of events.">La variable retourne un objet qui est une source d’événements.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FUIDEFAULT">
      <summary vsli:raw="The variable is the default display in the user interface.">La variable est l'affichage par défaut dans l'interface utilisateur.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARKIND">
      <summary vsli:raw="Defines the kind of variable.">Définit le type de variable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_CONST">
      <summary vsli:raw="The &lt;see langword=&quot;VARDESC&quot; /&gt; structure describes a symbolic constant. There is no memory associated with it.">La structure <see langword="VARDESC" /> décrit une constante symbolique. Aucune mémoire ne lui est associée.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_DISPATCH">
      <summary vsli:raw="The variable can be accessed only through &lt;see langword=&quot;IDispatch::Invoke&quot; /&gt;.">La variable est accessible uniquement par l'intermédiaire de <see langword="IDispatch::Invoke" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_PERINSTANCE">
      <summary vsli:raw="The variable is a field or member of the type. It exists at a fixed offset within each instance of the type.">La variable est un champ ou un membre du type. Elle existe à un offset fixe au sein de chaque instance du type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_STATIC">
      <summary vsli:raw="There is only one instance of the variable.">Il n'existe qu'une instance de la variable.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute">
      <summary vsli:raw="Specifies the method to call when you unregister an assembly for use from COM; this allows for the execution of user-written code during the unregistration process.">Spécifie la méthode à appeler quand vous annulez l'inscription d'un assembly pour utilisation à partir de COM ; cela permet l'exécution de code écrit par l'utilisateur pendant le processus d'annulation d'inscription.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComUnregisterFunctionAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CurrencyWrapper">
      <summary vsli:raw="Wraps objects the marshaler should marshal as a &lt;see langword=&quot;VT_CY&quot; /&gt;.">Encapsule des objets que le marshaleur doit marshaler comme <see langword="VT_CY" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CurrencyWrapper.#ctor(System.Decimal)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.CurrencyWrapper&quot; /&gt; class with the &lt;see langword=&quot;Decimal&quot; /&gt; to be wrapped and marshaled as type &lt;see langword=&quot;VT_CY&quot; /&gt;.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.CurrencyWrapper" /> avec le <see langword="Decimal" /> à encapsuler et marshaler comme <see langword="VT_CY" /> de type.</summary>
      <param name="obj" vsli:raw="The &lt;see langword=&quot;Decimal&quot; /&gt; to be wrapped and marshaled as &lt;see langword=&quot;VT_CY&quot; /&gt;.">
        <see langword="Decimal" /> à encapsuler et marshaler comme <see langword="VT_CY" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.CurrencyWrapper.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.CurrencyWrapper&quot; /&gt; class with the object containing the &lt;see langword=&quot;Decimal&quot; /&gt; to be wrapped and marshaled as type &lt;see langword=&quot;VT_CY&quot; /&gt;.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.CurrencyWrapper" /> avec l'objet contenant le <see langword="Decimal" /> à encapsuler et marshaler comme <see langword="VT_CY" /> de type.</summary>
      <param name="obj" vsli:raw="The object containing the &lt;see langword=&quot;Decimal&quot; /&gt; to be wrapped and marshaled as &lt;see langword=&quot;VT_CY&quot; /&gt;.">Objet contenant le <see langword="Decimal" /> à encapsuler et marshaler comme <see langword="VT_CY" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;obj&quot; /&gt; parameter is not a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; type.">Le paramètre <paramref name="obj" /> n'est pas un type <see cref="T:System.Decimal" />.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.CurrencyWrapper.WrappedObject">
      <summary vsli:raw="Gets the wrapped object to be marshaled as type &lt;see langword=&quot;VT_CY&quot; /&gt;.">Obtient l'objet encapsulé à marshaler comme <see langword="VT_CY" /> de type.</summary>
      <returns vsli:raw="The wrapped object to be marshaled as type &lt;see langword=&quot;VT_CY&quot; /&gt;.">Objet encapsulé à marshaler comme <see langword="VT_CY" /> de type.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CustomQueryInterfaceMode">
      <summary vsli:raw="Indicates whether the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)&quot; /&gt; method's IUnknown::QueryInterface calls can use the &lt;see cref=&quot;T:System.Runtime.InteropServices.ICustomQueryInterface&quot; /&gt; interface.">Indique si les appels IUnknown::QueryInterface de la méthode <see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)" /> peuvent utiliser l’interface <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceMode.Allow">
      <summary vsli:raw="IUnknown::QueryInterface method calls can use the &lt;see cref=&quot;T:System.Runtime.InteropServices.ICustomQueryInterface&quot; /&gt; interface. When you use this value, the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)&quot; /&gt; method overload functions like the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)&quot; /&gt; overload.">Les appels de méthode IUnknown::QueryInterface peuvent utiliser l’interface <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" />. Lorsque vous utilisez cette valeur, la surcharge de la méthode <see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)" /> fonctionne comme la surcharge de <see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceMode.Ignore">
      <summary vsli:raw="IUnknown::QueryInterface method calls should ignore the &lt;see cref=&quot;T:System.Runtime.InteropServices.ICustomQueryInterface&quot; /&gt; interface.">Les appels de méthode IUnknown::QueryInterface doivent ignorer l’interface <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CustomQueryInterfaceResult">
      <summary vsli:raw="Provides return values for the &lt;see cref=&quot;M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)&quot; /&gt; method.">Fournit des valeurs de retour pour la méthode <see cref="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.Failed">
      <summary vsli:raw="The interface for a specific interface ID is not available. In this case, the returned interface is &lt;see langword=&quot;null&quot; /&gt;. E_NOINTERFACE is returned to the caller of IUnknown::QueryInterface.">L’interface d’un ID d’interface spécifique n’est pas disponible. Dans ce cas, l’interface retournée est <see langword="null" />. E_NOINTERFACE est retourné à l’appelant de IUnknown::QueryInterface.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled">
      <summary vsli:raw="The interface pointer that is returned from the &lt;see cref=&quot;M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)&quot; /&gt; method can be used as the result of IUnknown::QueryInterface.">Le pointeur d’interface retourné par la méthode <see cref="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)" /> peut être utilisé comme résultat de IUnknown::QueryInterface.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled">
      <summary vsli:raw="The custom &lt;see langword=&quot;QueryInterface&quot; /&gt; was not used. Instead, the default implementation of IUnknown::QueryInterface should be used.">Le <see langword="QueryInterface" /> personnalisé n’a pas été utilisé. Au lieu de cela, l’implémentation par défaut de IUnknown::QueryInterface doit être utilisée.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultCharSetAttribute">
      <summary vsli:raw="Specifies the value of the &lt;see cref=&quot;T:System.Runtime.InteropServices.CharSet&quot; /&gt; enumeration. This class cannot be inherited.">Spécifie la valeur de l’énumération <see cref="T:System.Runtime.InteropServices.CharSet" />. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultCharSetAttribute.#ctor(System.Runtime.InteropServices.CharSet)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.DefaultCharSetAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.CharSet&quot; /&gt; value.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.DefaultCharSetAttribute" /> avec la valeur <see cref="T:System.Runtime.InteropServices.CharSet" /> spécifiée.</summary>
      <param name="charSet" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.CharSet&quot; /&gt; values.">Une des valeurs de l'objet <see cref="T:System.Runtime.InteropServices.CharSet" />.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultCharSetAttribute.CharSet">
      <summary vsli:raw="Gets the default value of &lt;see cref=&quot;T:System.Runtime.InteropServices.CharSet&quot; /&gt; for any call to &lt;see cref=&quot;T:System.Runtime.InteropServices.DllImportAttribute&quot; /&gt;.">Obtient la valeur par défaut de <see cref="T:System.Runtime.InteropServices.CharSet" /> pour n’importe quel appel à <see cref="T:System.Runtime.InteropServices.DllImportAttribute" />.</summary>
      <returns vsli:raw="The default value of &lt;see cref=&quot;T:System.Runtime.InteropServices.CharSet&quot; /&gt; for any call to &lt;see cref=&quot;T:System.Runtime.InteropServices.DllImportAttribute&quot; /&gt;.">Valeur par défaut de <see cref="T:System.Runtime.InteropServices.CharSet" /> pour tout appel à <see cref="T:System.Runtime.InteropServices.DllImportAttribute" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute">
      <summary vsli:raw="Specifies the paths that are used to search for DLLs that provide functions for platform invokes.">Spécifie les chemins d'accès qui permettent de rechercher les DLL qui fournissent des fonctionnalités pour les appels de code non managé.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute.#ctor(System.Runtime.InteropServices.DllImportSearchPath)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute&quot; /&gt; class, specifying the paths to use when searching for the targets of platform invokes.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" />, en spécifiant les chemins d'accès à utiliser lors de la recherche des cibles des appels de plateforme.</summary>
      <param name="paths" vsli:raw="A bitwise combination of enumeration values that specify the paths that the &lt;c&gt;LoadLibraryEx&lt;/c&gt; function searches during platform invokes.">Combinaison de bits de valeurs d’énumération qui spécifie les chemins que la fonction <c>LoadLibraryEx</c> recherche lors des appels de code non managé.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute.Paths">
      <summary vsli:raw="Gets a bitwise combination of enumeration values that specify the paths that the &lt;c&gt;LoadLibraryEx&lt;/c&gt; function searches during platform invokes.">Obtient une combinaison de bits de valeurs d’énumération qui spécifie les chemins que la fonction <c>LoadLibraryEx</c> recherche lors des appels de code non managé.</summary>
      <returns vsli:raw="A bitwise combination of enumeration values that specify search paths for platform invokes.">Combinaison d'opérations de bits des valeurs de l'énumération qui spécifient des chemins de recherche pour les appels de code non managé.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultParameterValueAttribute">
      <summary vsli:raw="Sets the default value of a parameter when called from a language that supports default parameters. This class cannot be inherited.">Définit la valeur par défaut d'un paramètre quand il est appelé à partir d'un langage qui prend en charge les paramètres par défaut. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultParameterValueAttribute.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.DefaultParameterValueAttribute&quot; /&gt; class with the default value of a parameter.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.DefaultParameterValueAttribute" /> avec la valeur par défaut d'un paramètre.</summary>
      <param name="value" vsli:raw="An object that represents the default value of a parameter.">Objet qui représente la valeur par défaut d'un paramètre.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultParameterValueAttribute.Value">
      <summary vsli:raw="Gets the default value of a parameter.">Obtient la valeur par défaut d'un paramètre.</summary>
      <returns vsli:raw="An object that represents the default value of a parameter.">Objet qui représente la valeur par défaut d'un paramètre.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DispatchWrapper">
      <summary vsli:raw="Wraps objects the marshaler should marshal as a &lt;see langword=&quot;VT_DISPATCH&quot; /&gt;.">Encapsule des objets que le marshaleur doit marshaler comme <see langword="VT_DISPATCH" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DispatchWrapper.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.DispatchWrapper&quot; /&gt; class with the object being wrapped.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.DispatchWrapper" /> avec l'objet à encapsuler.</summary>
      <param name="obj" vsli:raw="The object to be wrapped and converted to &lt;see cref=&quot;F:System.Runtime.InteropServices.VarEnum.VT_DISPATCH&quot; /&gt;.">Objet à encapsuler et à convertir en <see cref="F:System.Runtime.InteropServices.VarEnum.VT_DISPATCH" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;obj&quot; /&gt; is not a class or an array.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;obj&quot; /&gt; does not support &lt;see langword=&quot;IDispatch&quot; /&gt;.">
        <paramref name="obj" /> n'est ni une classe ni un tableau.  

ou - 
<paramref name="obj" /> ne prend pas en charge <see langword="IDispatch" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;paramref name=&quot;obj&quot; /&gt; parameter was marked with a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComVisibleAttribute&quot; /&gt; attribute that was passed a value of &lt;see langword=&quot;false&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;obj&quot; /&gt; parameter inherits from a type marked with a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComVisibleAttribute&quot; /&gt; attribute that was passed a value of &lt;see langword=&quot;false&quot; /&gt;.">Le paramètre <paramref name="obj" /> a été marqué avec un attribut <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> à qui une valeur <see langword="false" /> a été passée.  

ou - 
Le paramètre <paramref name="obj" /> hérite d'un type marqué avec un attribut <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> à qui une valeur <see langword="false" /> a été passée.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.DispatchWrapper.WrappedObject">
      <summary vsli:raw="Gets the object wrapped by the &lt;see cref=&quot;T:System.Runtime.InteropServices.DispatchWrapper&quot; /&gt;.">Obtient l'objet encapsulé par <see cref="T:System.Runtime.InteropServices.DispatchWrapper" />.</summary>
      <returns vsli:raw="The object wrapped by the &lt;see cref=&quot;T:System.Runtime.InteropServices.DispatchWrapper&quot; /&gt;.">Objet encapsulé par <see cref="T:System.Runtime.InteropServices.DispatchWrapper" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DispIdAttribute">
      <summary vsli:raw="Specifies the COM dispatch identifier (DISPID) of a method, field, or property.">Spécifie l'identificateur de distribution COM (DISPID) d'une méthode, d'un champ ou d'une propriété.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DispIdAttribute.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;DispIdAttribute&quot; /&gt; class with the specified DISPID.">Initialise une nouvelle instance de la classe <see langword="DispIdAttribute" /> avec le DISPID spécifié.</summary>
      <param name="dispId" vsli:raw="The DISPID for the member.">DISPID du membre.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DispIdAttribute.Value">
      <summary vsli:raw="Gets the DISPID for the member.">Obtient le DISPID du membre.</summary>
      <returns vsli:raw="The DISPID for the member.">DISPID du membre.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DllImportAttribute">
      <summary vsli:raw="Indicates that the attributed method is exposed by an unmanaged dynamic-link library (DLL) as a static entry point.">Indique que la méthode avec attributs est exposée par une bibliothèque de liens dynamiques (DLL) non managée comme point d'entrée statique.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.DllImportAttribute&quot; /&gt; class with the name of the DLL containing the method to import.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> avec le nom de la DLL contenant la méthode à importer.</summary>
      <param name="dllName" vsli:raw="The name of the DLL that contains the unmanaged method. In .NET Framework, this can include an assembly display name, if the DLL is included in an assembly.">Nom de la DLL contenant la méthode non managée. Cela peut inclure le nom complet d'un assembly, si la DLL est incluse dans un assembly.</param>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
      <summary vsli:raw="Enables or disables best-fit mapping behavior when converting Unicode characters to ANSI characters.">Active ou désactive le comportement de mappage ajusté lors de la conversion de caractères Unicode en caractères ANSI.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
      <summary vsli:raw="Indicates the calling convention of an entry point.">Indique la convention d'appel d'un point d'entrée.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
      <summary vsli:raw="Indicates how to marshal string parameters to the method and controls name mangling.">Indique comment marshaler les paramètres de chaîne vers la méthode et contrôle la composition des noms.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
      <summary vsli:raw="Indicates the name or ordinal of the DLL entry point to be called.">Indique le nom ou le numéro du point d'entrée de DLL à appeler.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
      <summary vsli:raw="Controls whether the &lt;see cref=&quot;F:System.Runtime.InteropServices.DllImportAttribute.CharSet&quot; /&gt; field causes the common language runtime to search an unmanaged DLL for entry-point names other than the one specified.">Contrôle si le champ <see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" /> déclenche la recherche de noms, par le Common Language Runtime, de points d'entrée autres que celui spécifié dans la DLL non managée.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
      <summary vsli:raw="Indicates whether unmanaged methods that have &lt;see langword=&quot;HRESULT&quot; /&gt; return values are directly translated or whether &lt;see langword=&quot;HRESULT&quot; /&gt; return values are automatically converted to exceptions.">Indique si les méthodes non managées qui ont les valeurs de retour <see langword="HRESULT" /> ou <see langword="retval" /> sont traduites directement ou si les valeurs de retour <see langword="HRESULT" /> ou <see langword="retval" /> sont automatiquement converties en exceptions.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
      <summary vsli:raw="Indicates whether the callee sets an error (&lt;see langword=&quot;SetLastError&quot; /&gt; on Windows or &lt;see langword=&quot;errno&quot; /&gt; on other platforms) before returning from the attributed method.">Indique si l'appelé appelle la fonction API Windows <see langword="SetLastError" /> avant de retourner la valeur à partir de la méthode avec attributs.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
      <summary vsli:raw="Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI &quot;?&quot; character.">Active ou désactive la levée d'une exception sur un caractère Unicode non mappable converti en caractère ANSI "?".</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.DllImportAttribute.Value">
      <summary vsli:raw="Gets the name of the DLL file that contains the entry point.">Obtient le nom du fichier DLL contenant le point d'entrée.</summary>
      <returns vsli:raw="The name of the DLL file that contains the entry point.">Nom du fichier DLL contenant le point d'entrée.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DllImportResolver">
      <summary vsli:raw="Provides a delegate used to resolve native libraries via callback.">Fournit un délégué utilisé pour résoudre des bibliothèques natives via un rappel.</summary>
      <param name="libraryName" vsli:raw="The native library to resolve.">Bibliothèque native à résoudre.</param>
      <param name="assembly" vsli:raw="The assembly requesting the resolution.">Assembly qui demande la résolution.</param>
      <param name="searchPath" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute&quot; /&gt; on the PInvoke, if any. Otherwise, the &lt;see cref=&quot;T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute&quot; /&gt; on the assembly, if any. Otherwise &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" /> sur le PInvoke, le cas échéant. Sinon, <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" /> sur l’assembly, le cas échéant. Sinon, <see langword="null" />.</param>
      <returns vsli:raw="The handle for the loaded native library on success, or &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt; on failure.">Descripteur de la bibliothèque native chargée en cas de réussite, ou <see cref="F:System.IntPtr.Zero" /> en cas d’échec.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DllImportSearchPath">
      <summary vsli:raw="Specifies the paths that are used to search for DLLs that provide functions for platform invokes.">Spécifie les chemins d'accès qui permettent de rechercher les DLL qui fournissent des fonctionnalités pour les appels de code non managé.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.ApplicationDirectory">
      <summary vsli:raw="Include the application directory in the DLL search path.">Inclure le répertoire d'application dans le chemin de recherche de DLL.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory">
      <summary vsli:raw="When searching for assembly dependencies, include the directory that contains the assembly itself, and search that directory first. When used in Native AOT and single-file deployment models, the application's installation directory is considered the &quot;assembly directory&quot; and is searched.">Lors de la recherche de dépendances d'assembly, inclut le répertoire qui contient l'assembly lui-même et commence par rechercher dans ce répertoire. Cette valeur est utilisée par le .NET Framework, avant la transmission des chemins à la fonction Win32 LoadLibraryEx.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior">
      <summary vsli:raw="Search the application directory, and then call the Win32 LoadLibraryEx function with the &lt;c&gt;LOAD_WITH_ALTERED_SEARCH_PATH&lt;/c&gt; flag. This value is ignored if any other value is specified. Operating systems that do not support the &lt;see cref=&quot;T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute&quot; /&gt; attribute use this value, and ignore other values.">Recherche dans le répertoire de l’application, puis appelle la fonction Win32 LoadLibraryEx avec l’indicateur <c>LOAD_WITH_ALTERED_SEARCH_PATH</c>. Cette valeur est ignorée si une autre valeur est spécifiée. Les systèmes d'exploitation qui ne prennent pas en charge l'attribut <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" /> utilisent cette valeur et ignorent d'autres valeurs.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.SafeDirectories">
      <summary vsli:raw="Include the application directory, the &lt;see langword=&quot;%WinDir%\System32&quot; /&gt; directory, and user directories in the DLL search path.">Inclure le répertoire d'application, le répertoire <see langword="%WinDir%\System32" /> et les répertoires utilisateur dans le chemin de recherche de DLL.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.System32">
      <summary vsli:raw="Include the &lt;see langword=&quot;%WinDir%\System32&quot; /&gt; directory in the DLL search path.">Inclure le répertoire <see langword="%WinDir%\System32" /> dans le chemin de recherche de DLL.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.UseDllDirectoryForDependencies">
      <summary vsli:raw="Search for the dependencies of a DLL in the folder where the DLL is located before searching other folders.">Recherche les dépendances d'une DLL dans le dossier où la DLL se trouve avant d'explorer d'autres dossiers.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.UserDirectories">
      <summary vsli:raw="Include any path that was explicitly added to the process-wide search path by using the Win32 &lt;c&gt;AddDllDirectory&lt;/c&gt; function.">Inclure tout chemin qui a été explicitement ajouté au chemin de recherche au niveau du processus à l’aide de la fonction Win32 <c>AddDllDirectory</c>.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ErrorWrapper">
      <summary vsli:raw="Wraps objects the marshaler should marshal as a &lt;see langword=&quot;VT_ERROR&quot; /&gt;.">Encapsule des objets que le marshaleur doit marshaler comme <see langword="VT_ERROR" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ErrorWrapper&quot; /&gt; class with the HRESULT that corresponds to the exception supplied.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> avec le HRESULT correspondant à l'exception spécifiée.</summary>
      <param name="e" vsli:raw="The exception to be converted to an error code.">L'exception à convertir en code d'erreur.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ErrorWrapper&quot; /&gt; class with the HRESULT of the error.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> avec le HRESULT de l'erreur.</summary>
      <param name="errorCode" vsli:raw="The HRESULT of the error.">HRESULT de l'erreur.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ErrorWrapper&quot; /&gt; class with an object containing the HRESULT of the error.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> avec un objet contenant le HRESULT de l'erreur.</summary>
      <param name="errorCode" vsli:raw="The object containing the HRESULT of the error.">Objet contenant le HRESULT de l'erreur.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;errorCode&quot; /&gt; parameter is not an &lt;see cref=&quot;T:System.Int32&quot; /&gt; type.">Le paramètre <paramref name="errorCode" /> n'est pas un type <see cref="T:System.Int32" />.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.ErrorWrapper.ErrorCode">
      <summary vsli:raw="Gets the error code of the wrapper.">Obtient le code d'erreur du wrapper.</summary>
      <returns vsli:raw="The HRESULT of the error.">HRESULT de l'erreur.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.GuidAttribute">
      <summary vsli:raw="Supplies an explicit &lt;see cref=&quot;T:System.Guid&quot; /&gt; when an automatic GUID is undesirable.">Fournit un <see cref="T:System.Guid" /> explicite quand un GUID automatique n’est pas souhaité.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.GuidAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.GuidAttribute&quot; /&gt; class with the specified GUID.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.GuidAttribute" /> avec le GUID spécifié.</summary>
      <param name="guid" vsli:raw="The &lt;see cref=&quot;T:System.Guid&quot; /&gt; to be assigned.">
        <see cref="T:System.Guid" /> à affecter.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.GuidAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Guid&quot; /&gt; of the class.">Obtient le <see cref="T:System.Guid" /> de la classe.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Guid&quot; /&gt; of the class.">
        <see cref="T:System.Guid" /> de la classe.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.HandleCollector">
      <summary vsli:raw="Tracks outstanding handles and forces a garbage collection when the specified threshold is reached.">Effectue le suivi des handles en attente et force un garbage collection quand le seuil spécifié est atteint.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.#ctor(System.String,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleCollector&quot; /&gt; class using a name and a threshold at which to begin handle collection.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.HandleCollector" /> à l'aide d'un nom et d'un seuil auquel commencer la collection de handles.</summary>
      <param name="name" vsli:raw="A name for the collector. This parameter allows you to name collectors that track handle types separately.">Nom du collecteur. Ce paramètre vous permet de nommer des collecteurs qui assurent le suivi des types de handles séparément.</param>
      <param name="initialThreshold" vsli:raw="A value that specifies the point at which collections should begin.">Valeur qui spécifie le point auquel les collections doivent commencer.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;initialThreshold&quot; /&gt; parameter is less than 0.">Le paramètre <paramref name="initialThreshold" /> est inférieur à 0.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.#ctor(System.String,System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleCollector&quot; /&gt; class using a name, a threshold at which to begin handle collection, and a threshold at which handle collection must occur.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.HandleCollector" /> à l'aide d'un nom, d'un seuil auquel commencer la collection de handles et d'un seuil auquel la collection de handles doit avoir lieu.</summary>
      <param name="name" vsli:raw="A name for the collector.  This parameter allows you to name collectors that track handle types separately.">Nom du collecteur.  Ce paramètre vous permet de nommer des collecteurs qui assurent le suivi des types de handles séparément.</param>
      <param name="initialThreshold" vsli:raw="A value that specifies the point at which collections should begin.">Valeur qui spécifie le point auquel les collections doivent commencer.</param>
      <param name="maximumThreshold" vsli:raw="A value that specifies the point at which collections must occur. This should be set to the maximum number of available handles.">Valeur qui spécifie le point auquel les collections doivent avoir lieu. Ce paramètre doit avoir pour valeur le nombre maximal de handles disponibles.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;initialThreshold&quot; /&gt; parameter is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;maximumThreshold&quot; /&gt; parameter is less than 0.">Le paramètre <paramref name="initialThreshold" /> est inférieur à 0.  

ou - 
Le paramètre <paramref name="maximumThreshold" /> est inférieur à 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;maximumThreshold&quot; /&gt; parameter is less than the &lt;paramref name=&quot;initialThreshold&quot; /&gt; parameter.">Le paramètre <paramref name="maximumThreshold" /> est inférieur au paramètre <paramref name="initialThreshold" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.Add">
      <summary vsli:raw="Increments the current handle count.">Incrémente le compte de handle actuel.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Runtime.InteropServices.HandleCollector.Count&quot; /&gt; property is less than 0.">La valeur de la propriété <see cref="P:System.Runtime.InteropServices.HandleCollector.Count" /> est inférieure à 0.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.Count">
      <summary vsli:raw="Gets the number of handles collected.">Obtient le nombre de handles collectés.</summary>
      <returns vsli:raw="The number of handles collected.">Nombre de handles collectés.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.InitialThreshold">
      <summary vsli:raw="Gets a value that specifies the point at which collections should begin.">Obtient une valeur qui spécifie le point auquel les collections doivent commencer.</summary>
      <returns vsli:raw="A value that specifies the point at which collections should begin.">Valeur qui spécifie le point auquel les collections doivent commencer.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.MaximumThreshold">
      <summary vsli:raw="Gets a value that specifies the point at which collections must occur.">Obtient une valeur qui spécifie le point auquel les collections doivent avoir lieu.</summary>
      <returns vsli:raw="A value that specifies the point at which collections must occur.">Valeur qui spécifie le point auquel les collections doivent avoir lieu.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.Name">
      <summary vsli:raw="Gets the name of a &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleCollector&quot; /&gt; object.">Obtient le nom d'un objet <see cref="T:System.Runtime.InteropServices.HandleCollector" />.</summary>
      <returns vsli:raw="This &lt;see cref=&quot;P:System.Runtime.InteropServices.HandleCollector.Name&quot; /&gt; property allows you to name collectors that track handle types separately.">Cette propriété <see cref="P:System.Runtime.InteropServices.HandleCollector.Name" /> vous permet de nommer des collecteurs qui assurent le suivi des types de handles séparément.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.Remove">
      <summary vsli:raw="Decrements the current handle count.">Décrémente le compte de handle actuel.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Runtime.InteropServices.HandleCollector.Count&quot; /&gt; property is less than 0.">La valeur de la propriété <see cref="P:System.Runtime.InteropServices.HandleCollector.Count" /> est inférieure à 0.</exception>
    </member>
    <member name="T:System.Runtime.InteropServices.HandleRef">
      <summary vsli:raw="Wraps a managed object holding a handle to a resource that is passed to unmanaged code using platform invoke.">Inclut dans un wrapper un objet managé contenant un handle vers une ressource transmise au code non managé à l’aide de l’appel de code non managé.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.#ctor(System.Object,System.IntPtr)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleRef&quot; /&gt; class with the object to wrap and a handle to the resource used by unmanaged code.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.HandleRef" /> avec l'objet à encapsuler et un handle vers la ressource utilisée par le code non managé.</summary>
      <param name="wrapper" vsli:raw="A managed object that should not be finalized until the platform invoke call returns.">Objet managé qui ne doit pas être finalisé avant le retour de l'appel de plateforme.</param>
      <param name="handle" vsli:raw="An &lt;see cref=&quot;T:System.IntPtr&quot; /&gt; that indicates a handle to a resource.">
        <see cref="T:System.IntPtr" /> indiquant un handle vers une ressource.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleRef.Handle">
      <summary vsli:raw="Gets the handle to a resource.">Obtient le handle vers une ressource.</summary>
      <returns vsli:raw="The handle to a resource.">Handle vers une ressource.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.op_Explicit(System.Runtime.InteropServices.HandleRef)~System.IntPtr">
      <summary vsli:raw="Returns the handle to a resource of the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleRef&quot; /&gt; object.">Retourne le handle vers une ressource de l'objet <see cref="T:System.Runtime.InteropServices.HandleRef" /> spécifié.</summary>
      <param name="value" vsli:raw="The object that needs a handle.">Objet qui nécessite un handle.</param>
      <returns vsli:raw="The handle to a resource of the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleRef&quot; /&gt; object.">Handle vers une ressource de l'objet <see cref="T:System.Runtime.InteropServices.HandleRef" /> spécifié.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.ToIntPtr(System.Runtime.InteropServices.HandleRef)">
      <summary vsli:raw="Returns the internal integer representation of a &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleRef&quot; /&gt; object.">Retourne la représentation interne sous forme d'entier d'un objet <see cref="T:System.Runtime.InteropServices.HandleRef" />.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleRef&quot; /&gt; object to retrieve an internal integer representation from.">Objet <see cref="T:System.Runtime.InteropServices.HandleRef" /> duquel récupérer une représentation interne sous forme d'entier.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.IntPtr&quot; /&gt; object that represents a &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleRef&quot; /&gt; object.">Objet <see cref="T:System.IntPtr" /> qui représente un objet <see cref="T:System.Runtime.InteropServices.HandleRef" />.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleRef.Wrapper">
      <summary vsli:raw="Gets the object holding the handle to a resource.">Obtient l'objet contenant le handle vers une ressource.</summary>
      <returns vsli:raw="The object holding the handle to a resource.">Objet contenant le handle vers une ressource.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomAdapter">
      <summary vsli:raw="Provides a way for clients to access the actual object, rather than the adapter object handed out by a custom marshaler.">Permet aux clients d’accéder à l’objet réel, plutôt qu’à l’objet adaptateur fourni par un marshaleur personnalisé.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomAdapter.GetUnderlyingObject">
      <summary vsli:raw="Provides access to the underlying object wrapped by a custom marshaler.">Permet d’accéder à l’objet sous-jacent encapsulé par un marshaleur personnalisé.</summary>
      <returns vsli:raw="The object contained by the adapter object.">Objet contenu dans l’objet adaptateur.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomFactory">
      <summary vsli:raw="Enables users to write activation code for managed objects that extend &lt;see cref=&quot;T:System.MarshalByRefObject&quot; /&gt;.">Permet aux utilisateurs d'écrire un code d'activation pour des objets managés qui étendent <see cref="T:System.MarshalByRefObject" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomFactory.CreateInstance(System.Type)">
      <summary vsli:raw="Creates a new instance of the specified type.">Crée une instance du type spécifié.</summary>
      <param name="serverType" vsli:raw="The type to activate.">Type à activer.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.MarshalByRefObject&quot; /&gt; associated with the specified type.">
        <see cref="T:System.MarshalByRefObject" /> associé au type spécifié.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomMarshaler">
      <summary vsli:raw="Provides custom wrappers for handling method calls.">Fournit des wrappers personnalisés permettant de gérer les appels de méthodes.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(System.Object)">
      <summary vsli:raw="Performs necessary cleanup of the managed data when it is no longer needed.">Effectue le nettoyage des données managées quand elles ne sont plus nécessaires.</summary>
      <param name="ManagedObj" vsli:raw="The managed object to be destroyed.">Objet managé à détruire.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(System.IntPtr)">
      <summary vsli:raw="Performs necessary cleanup of the unmanaged data when it is no longer needed.">Effectue le nettoyage des données non managées quand elles ne sont plus nécessaires.</summary>
      <param name="pNativeData" vsli:raw="A pointer to the unmanaged data to be destroyed.">Pointeur vers les données non managées à détruire.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize">
      <summary vsli:raw="Returns the size of the native data to be marshaled.">Retourne la taille des données natives à marshaler.</summary>
      <returns vsli:raw="The size, in bytes, of the native data.">Taille des données natives, en octets.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(System.Object)">
      <summary vsli:raw="Converts the managed data to unmanaged data.">Convertit les données managées en données non managées.</summary>
      <param name="ManagedObj" vsli:raw="The managed object to be converted.">Objet managé à convertir.</param>
      <returns vsli:raw="A pointer to the COM view of the managed object.">Pointeur vers la vue COM de l'objet managé.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(System.IntPtr)">
      <summary vsli:raw="Converts the unmanaged data to managed data.">Convertit les données non managées en données managées.</summary>
      <param name="pNativeData" vsli:raw="A pointer to the unmanaged data to be wrapped.">Pointeur vers les données non managées à encapsuler.</param>
      <returns vsli:raw="An object that represents the managed view of the COM data.">Objet qui représente la vue managée des données COM.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomQueryInterface">
      <summary vsli:raw="Enables developers to provide a custom, managed implementation of the IUnknown::QueryInterface(REFIID riid, void **ppvObject) method.">Permet aux développeurs de fournir une implémentation managée et personnalisée de la méthode IUnknown::QueryInterface(REFIID riid, void **ppvObject).</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)">
      <summary vsli:raw="Returns an interface according to a specified interface ID.">Retourne une interface en fonction de l'ID d'interface spécifié.</summary>
      <param name="iid" vsli:raw="The GUID of the requested interface.">GUID de l'interface demandée.</param>
      <param name="ppv" vsli:raw="A reference to the requested interface, when this method returns.">Référence à l'interface demandée, lorsque cette méthode est retournée.</param>
      <returns vsli:raw="One of the enumeration values that indicates whether a custom implementation of IUnknown::QueryInterface was used.">Une des valeurs d’énumération qui indique si une implémentation personnalisée de IUnknown::QueryInterface a été utilisée.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ImportedFromTypeLibAttribute">
      <summary vsli:raw="Indicates that the types defined within an assembly were originally defined in a type library.">Indique que les types définis dans un assembly ont été définis dans une bibliothèque de types à l'origine.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ImportedFromTypeLibAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ImportedFromTypeLibAttribute&quot; /&gt; class with the name of the original type library file.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.ImportedFromTypeLibAttribute" /> avec le nom du fichier bibliothèque de types d'origine.</summary>
      <param name="tlbFile" vsli:raw="The location of the original type library file.">Emplacement du fichier bibliothèque de types d'origine.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ImportedFromTypeLibAttribute.Value">
      <summary vsli:raw="Gets the name of the original type library file.">Obtient le nom du fichier bibliothèque de types d'origine.</summary>
      <returns vsli:raw="The name of the original type library file.">Nom du fichier bibliothèque de types d'origine.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.InterfaceTypeAttribute">
      <summary vsli:raw="Indicates whether a managed interface is dual, dispatch-only, or &lt;see langword=&quot;IUnknown&quot; /&gt; -only when exposed to COM.">Indique si une interface managée est double, de dispatch uniquement ou <see langword="IUnknown" /> uniquement lorsqu'elle est exposée à COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InterfaceTypeAttribute.#ctor(System.Int16)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.InterfaceTypeAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ComInterfaceType&quot; /&gt; enumeration member.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.InterfaceTypeAttribute" /> avec le membre de l'énumération <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> spécifié.</summary>
      <param name="interfaceType" vsli:raw="Describes how the interface should be exposed to COM clients.">Décrit comment l'interface doit être exposée aux clients COM.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InterfaceTypeAttribute.#ctor(System.Runtime.InteropServices.ComInterfaceType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.InterfaceTypeAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ComInterfaceType&quot; /&gt; enumeration member.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.InterfaceTypeAttribute" /> avec le membre de l'énumération <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> spécifié.</summary>
      <param name="interfaceType" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComInterfaceType&quot; /&gt; values that describes how the interface should be exposed to COM clients.">Une des valeurs <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> qui décrit comment l'interface doit être exposée aux clients COM.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.InterfaceTypeAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComInterfaceType&quot; /&gt; value that describes how the interface should be exposed to COM.">Obtient la valeur <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> qui décrit comment l'interface doit être exposée à COM.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.ComInterfaceType&quot; /&gt; value that describes how the interface should be exposed to COM.">Valeur <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> qui décrit comment l'interface doit être exposée à COM.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.InvalidComObjectException">
      <summary vsli:raw="The exception thrown when an invalid COM object is used.">Exception levée lorsqu'un objet COM non valide est utilisé.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor">
      <summary vsli:raw="Initializes an instance of the &lt;see langword=&quot;InvalidComObjectException&quot; /&gt; with default properties.">Initialise une instance de <see langword="InvalidComObjectException" /> avec les propriétés par défaut.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;COMException&quot; /&gt; class from serialization data.">Initialise une nouvelle instance de la classe <see langword="COMException" /> à partir de données de sérialisation.</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">Objet qui contient les données sérialisées de l'objet.</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">Informations contextuelles sur la source ou la destination.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.String)">
      <summary vsli:raw="Initializes an instance of the &lt;see langword=&quot;InvalidComObjectException&quot; /&gt; with a message.">Initialise une instance de <see langword="InvalidComObjectException" /> avec un message.</summary>
      <param name="message" vsli:raw="The message that indicates the reason for the exception.">Message qui indique la raison de l'exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.InvalidComObjectException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.InvalidComObjectException" /> avec un message d'erreur spécifié et une référence à l'exception interne ayant provoqué cette exception.</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">Message d'erreur qui explique la raison de l'exception.</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">Exception ayant provoqué l'exception actuelle. Si le paramètre <paramref name="inner" /> n'est pas <see langword="null" />, l'exception actuelle est levée dans un bloc <see langword="catch" /> qui gère l'exception interne.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.InvalidOleVariantTypeException">
      <summary vsli:raw="The exception thrown by the marshaler when it encounters an argument of a variant type that can not be marshaled to managed code.">Exception levée par le marshaleur lorsqu'il rencontre un argument dont le type de variante ne peut pas être marshalé en code managé.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;InvalidOleVariantTypeException&quot; /&gt; class with default values.">Initialise une nouvelle instance de la classe <see langword="InvalidOleVariantTypeException" /> avec des valeurs par défaut.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;InvalidOleVariantTypeException&quot; /&gt; class from serialization data.">Initialise une nouvelle instance de la classe <see langword="InvalidOleVariantTypeException" /> à partir de données de sérialisation.</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">Objet qui contient les données sérialisées de l'objet.</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">Informations contextuelles sur la source ou la destination.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;InvalidOleVariantTypeException&quot; /&gt; class with a specified message.">Initialise une nouvelle instance de la classe <see langword="InvalidOleVariantTypeException" /> avec le message spécifié.</summary>
      <param name="message" vsli:raw="The message that indicates the reason for the exception.">Message qui indique la raison de l'exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.InvalidOleVariantTypeException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException" /> avec un message d'erreur spécifié et une référence à l'exception interne ayant provoqué cette exception.</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">Message d'erreur qui explique la raison de l'exception.</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">Exception ayant provoqué l'exception actuelle. Si le paramètre <paramref name="inner" /> n'est pas <see langword="null" />, l'exception actuelle est levée dans un bloc <see langword="catch" /> qui gère l'exception interne.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.LCIDConversionAttribute">
      <summary vsli:raw="Indicates that a method's unmanaged signature expects a locale identifier (LCID) parameter.">Indique que la signature non managée d'une méthode attend un paramètre LCID (Locale Identifier, identificateur de paramètres régionaux).</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.LCIDConversionAttribute.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;LCIDConversionAttribute&quot; /&gt; class with the position of the LCID in the unmanaged signature.">Initialise une nouvelle instance de la classe <see langword="LCIDConversionAttribute" /> avec la position du LCID dans la signature non managée.</summary>
      <param name="lcid" vsli:raw="Indicates the position of the LCID argument in the unmanaged signature, where 0 is the first argument.">Indique la position de l'argument LCID dans la signature non managée, dans laquelle le premier argument est 0.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.LCIDConversionAttribute.Value">
      <summary vsli:raw="Gets the position of the LCID argument in the unmanaged signature.">Obtient la position de l'argument LCID dans la signature non managée.</summary>
      <returns vsli:raw="The position of the LCID argument in the unmanaged signature, where 0 is the first argument.">Position de l'argument LCID dans la signature non managée, dans laquelle le premier argument est 0.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute">
      <summary vsli:raw="Provides support for user customization of interop stubs in managed-to-COM interop scenarios.">Prend en charge la personnalisation par l'utilisateur des stubs d'interopérabilité dans les scénarios COM Interop managés.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.#ctor(System.Type,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute&quot; /&gt; class with the specified class type and method name.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute" /> avec le type de classe et le nom de méthode spécifiés.</summary>
      <param name="classType" vsli:raw="The class that contains the required stub method.">Classe qui contient la méthode stub requise.</param>
      <param name="methodName" vsli:raw="The name of the stub method.">Nom de la méthode stub.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;methodName&quot; /&gt; cannot be found.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method is not static or non-generic.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method's parameter list does not match the expected parameter list for the stub.">
        <paramref name="methodName" /> est introuvable.  
ou 
La méthode n'est pas statique ou non générique.  

ou - 
La liste de paramètres de la méthode ne correspond pas à la liste de paramètres attendue pour le stub.</exception>
      <exception cref="T:System.MethodAccessException" vsli:raw="The interface that contains the managed interop method has no access to the stub method, because the stub method has private or protected accessibility, or because of a security issue.">L'interface qui contient la méthode d'interopérabilité managée n'a aucun accès à la méthode stub, parce que la méthode stub a l'accessibilité privée ou protégée, ou à cause d'un problème de sécurité.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.ClassType">
      <summary vsli:raw="Gets the class that contains the required stub method.">Obtient la classe qui contient la méthode stub requise.</summary>
      <returns vsli:raw="The class that contains the customized interop stub.">Classe qui contient le stub d'interopérabilité personnalisé.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.MethodName">
      <summary vsli:raw="Gets the name of the stub method.">Obtient le nom de la méthode stub.</summary>
      <returns vsli:raw="The name of a customized interop stub.">Nom d'un stub d'interopérabilité personnalisé.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshal">
      <summary vsli:raw="Provides a collection of methods for allocating unmanaged memory, copying unmanaged memory blocks, and converting managed to unmanaged types, as well as other miscellaneous methods used when interacting with unmanaged code.">Fournit une collection de méthodes pour l’allocation de mémoire non managée, la copie de blocs de mémoire non managée et la conversion de types managés en types non managés, ainsi que diverses autres méthodes utilisées lors de l’interaction avec du code non managé.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)">
      <summary vsli:raw="Increments the reference count on the specified interface.">Incrémente le décompte de références sur l'interface spécifiée.</summary>
      <param name="pUnk" vsli:raw="The interface reference count to increment.">Décompte de références d'interface à incrémenter.</param>
      <returns vsli:raw="The new value of the reference count on the &lt;paramref name=&quot;pUnk&quot; /&gt; parameter.">Nouvelle valeur du décompte de références sur le paramètre <paramref name="pUnk" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)">
      <summary vsli:raw="Allocates a block of memory of specified size from the COM task memory allocator.">Alloue un bloc de mémoire de la taille spécifiée à partir de l'allocateur de mémoire de tâche COM.</summary>
      <param name="cb" vsli:raw="The size of the block of memory to be allocated.">Taille du bloc de mémoire à allouer.</param>
      <returns vsli:raw="An integer representing the address of the block of memory allocated. This memory must be released with &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)&quot; /&gt;.">Entier représentant l'adresse du bloc de mémoire alloué. Cette mémoire doit être libérée avec <see cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" />.</returns>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory to satisfy the request.">La mémoire est insuffisante pour répondre à la demande.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)">
      <summary vsli:raw="Allocates memory from the unmanaged memory of the process by using the specified number of bytes.">Alloue de la mémoire à partir de la mémoire non managée du processus à l'aide du nombre d'octets spécifié.</summary>
      <param name="cb" vsli:raw="The required number of bytes in memory.">Nombre d'octets requis en mémoire.</param>
      <returns vsli:raw="A pointer to the newly allocated memory. This memory must be released using the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)&quot; /&gt; method.">Pointeur vers la mémoire nouvellement allouée. Cette mémoire doit être libérée en utilisant la méthode <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" />.</returns>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory to satisfy the request.">La mémoire est insuffisante pour répondre à la demande.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)">
      <summary vsli:raw="Allocates memory from the unmanaged memory of the process by using the pointer to the specified number of bytes.">Alloue de la mémoire à partir de la mémoire non managée du processus à l'aide du pointeur vers le nombre d'octets spécifié.</summary>
      <param name="cb" vsli:raw="The required number of bytes in memory.">Nombre d'octets requis en mémoire.</param>
      <returns vsli:raw="A pointer to the newly allocated memory. This memory must be released using the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)&quot; /&gt; method.">Pointeur vers la mémoire nouvellement allouée. Cette mémoire doit être libérée en utilisant la méthode <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" />.</returns>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory to satisfy the request.">La mémoire est insuffisante pour répondre à la demande.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup">
      <summary vsli:raw="Indicates whether runtime callable wrappers (RCWs) from any context are available for cleanup.">Indique si des wrappers RCW (Runtime Callable Wrapper) d'un contexte quelconque sont disponibles pour le nettoyage.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there are any RCWs available for cleanup; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si des wrappers RCW sont disponibles pour le nettoyage ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.BindToMoniker(System.String)">
      <summary vsli:raw="Gets an interface pointer identified by the specified moniker.">Obtient un pointeur d'interface identifié par le moniker spécifié.</summary>
      <param name="monikerName" vsli:raw="The moniker corresponding to the desired interface pointer.">Moniker correspondant au pointeur d'interface voulu.</param>
      <returns vsli:raw="An object containing a reference to the interface pointer identified by the &lt;paramref name=&quot;monikerName&quot; /&gt; parameter. A moniker is a name, and in this case, the moniker is defined by an interface.">Objet contenant une référence au pointeur d’interface identifié par le paramètre <paramref name="monikerName" />. Un moniker est un nom et dans ce cas, le moniker est défini par une interface.</returns>
      <exception cref="T:System.Runtime.InteropServices.COMException" vsli:raw="An unrecognized HRESULT was returned by the unmanaged &lt;see langword=&quot;BindToMoniker&quot; /&gt; method.">Un HRESULT non reconnu a été retourné par la méthode <see langword="BindToMoniker" /> non managée.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ChangeWrapperHandleStrength(System.Object,System.Boolean)">
      <summary vsli:raw="Changes the strength of an object's COM Callable Wrapper (CCW) handle.">Modifie la force du handle CCW COM Callable Wrapper d’un objet.</summary>
      <param name="otp" vsli:raw="The object whose CCW holds a reference counted handle. The handle is strong if the reference count on the CCW is greater than zero; otherwise, it is weak.">Objet dont le wrapper CCW (COM Callable Wrapper) contient un handle de références comptabilisées. Le handle est fort si le décompte de références sur le wrapper CCW (COM Callable Wrapper) est supérieur à zéro ; sinon, il est faible.</param>
      <param name="fIsWeak" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to change the strength of the handle on the &lt;paramref name=&quot;otp&quot; /&gt; parameter to weak, regardless of its reference count; &lt;see langword=&quot;false&quot; /&gt; to reset the handle strength on &lt;paramref name=&quot;otp&quot; /&gt; to be reference counted.">
        <see langword="true" /> pour changer la force du handle sur le paramètre <paramref name="otp" /> afin de l'affaiblir quel que soit son décompte de références ; <see langword="false" /> afin que la force du handle sur <paramref name="otp" /> soit fonction du décompte de références.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext">
      <summary vsli:raw="Notifies the runtime to clean up all Runtime Callable Wrappers (RCWs) allocated in the current context.">Indique au runtime de nettoyer tous les wrappers RCW Runtime Callable Wrapper alloués dans le contexte actuel.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Byte[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed 8-bit unsigned integer array to an unmanaged memory pointer.">Copie des données d'un tableau d'entiers 8 bits non signés managé et unidimensionnel vers un pointeur mémoire non managé.</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">Tableau unidimensionnel à partir duquel effectuer la copie.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">Index de base zéro dans le tableau source où la copie doit commencer.</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">Pointeur mémoire de destination de la copie.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">Nombre d'éléments de tableau à copier.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are not valid.">
        <paramref name="startIndex" /> et <paramref name="length" /> ne sont pas valides.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" /> ou <paramref name="length" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Char[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed character array to an unmanaged memory pointer.">Copie des données d'un tableau de caractères managé et unidimensionnel vers un pointeur mémoire non managé.</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">Tableau unidimensionnel à partir duquel effectuer la copie.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">Index de base zéro dans le tableau source où la copie doit commencer.</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">Pointeur mémoire de destination de la copie.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">Nombre d'éléments de tableau à copier.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are not valid.">
        <paramref name="startIndex" /> et <paramref name="length" /> ne sont pas valides.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="startIndex" />, <paramref name="destination" /> ou <paramref name="length" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Double[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed double-precision floating-point number array to an unmanaged memory pointer.">Copie des données d'un tableau de nombres à virgule flottante double précision managé et unidimensionnel vers un pointeur mémoire non managé.</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">Tableau unidimensionnel à partir duquel effectuer la copie.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">Index de base zéro dans le tableau source où la copie doit commencer.</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">Pointeur mémoire de destination de la copie.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">Nombre d'éléments de tableau à copier.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are not valid.">
        <paramref name="startIndex" /> et <paramref name="length" /> ne sont pas valides.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" /> ou <paramref name="length" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int16[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed 16-bit signed integer array to an unmanaged memory pointer.">Copie des données à partir d'un tableau d'entiers 16 bits signés managé et unidimensionnel vers un pointeur mémoire non managé.</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">Tableau unidimensionnel à partir duquel effectuer la copie.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">Index de base zéro dans le tableau source où la copie doit commencer.</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">Pointeur mémoire de destination de la copie.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">Nombre d'éléments de tableau à copier.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are not valid.">
        <paramref name="startIndex" /> et <paramref name="length" /> ne sont pas valides.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" /> ou <paramref name="length" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed 32-bit signed integer array to an unmanaged memory pointer.">Copie des données à partir d'un tableau d'entiers 32 bits signés managé et unidimensionnel vers un pointeur mémoire non managé.</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">Tableau unidimensionnel à partir duquel effectuer la copie.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">Index de base zéro dans le tableau source où la copie doit commencer.</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">Pointeur mémoire de destination de la copie.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">Nombre d'éléments de tableau à copier.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are not valid.">
        <paramref name="startIndex" /> et <paramref name="length" /> ne sont pas valides.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="startIndex" /> ou <paramref name="length" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int64[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed 64-bit signed integer array to an unmanaged memory pointer.">Copie des données à partir d'un tableau d'entiers 64 bits signés managé et unidimensionnel vers un pointeur mémoire non managé.</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">Tableau unidimensionnel à partir duquel effectuer la copie.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">Index de base zéro dans le tableau source où la copie doit commencer.</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">Pointeur mémoire de destination de la copie.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">Nombre d'éléments de tableau à copier.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are not valid.">
        <paramref name="startIndex" /> et <paramref name="length" /> ne sont pas valides.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" /> ou <paramref name="length" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed 8-bit unsigned integer array.">Copie des données d'un pointeur mémoire non managé dans un tableau d'entiers 8 bits non signés managé.</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">Pointeur mémoire à partir duquel effectuer la copie.</param>
      <param name="destination" vsli:raw="The array to copy to.">Tableau dans lequel effectuer la copie.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">Index de base zéro dans le tableau de destination où la copie doit commencer.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">Nombre d'éléments de tableau à copier.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> ou <paramref name="length" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Char[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed character array.">Copie des données d'un pointeur mémoire non managé dans un tableau de caractères managé.</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">Pointeur mémoire à partir duquel effectuer la copie.</param>
      <param name="destination" vsli:raw="The array to copy to.">Tableau dans lequel effectuer la copie.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">Index de base zéro dans le tableau de destination où la copie doit commencer.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">Nombre d'éléments de tableau à copier.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> ou <paramref name="length" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Double[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed double-precision floating-point number array.">Copie des données d'un pointeur mémoire non managé dans un tableau de nombres à virgule flottante double précision managé.</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">Pointeur mémoire à partir duquel effectuer la copie.</param>
      <param name="destination" vsli:raw="The array to copy to.">Tableau dans lequel effectuer la copie.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">Index de base zéro dans le tableau de destination où la copie doit commencer.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">Nombre d'éléments de tableau à copier.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> ou <paramref name="length" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int16[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed 16-bit signed integer array.">Copie des données à partir d'un pointeur mémoire non managé vers un tableau d'entiers 16 bits signés managé.</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">Pointeur mémoire à partir duquel effectuer la copie.</param>
      <param name="destination" vsli:raw="The array to copy to.">Tableau dans lequel effectuer la copie.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">Index de base zéro dans le tableau de destination où la copie doit commencer.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">Nombre d'éléments de tableau à copier.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> ou <paramref name="length" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int32[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed 32-bit signed integer array.">Copie des données à partir d'un pointeur mémoire non managé vers un tableau d'entiers 32 bits signés managé.</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">Pointeur mémoire à partir duquel effectuer la copie.</param>
      <param name="destination" vsli:raw="The array to copy to.">Tableau dans lequel effectuer la copie.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">Index de base zéro dans le tableau de destination où la copie doit commencer.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">Nombre d'éléments de tableau à copier.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> ou <paramref name="length" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int64[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed 64-bit signed integer array.">Copie des données à partir d'un pointeur mémoire non managé vers un tableau d'entiers 64 bits signés managé.</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">Pointeur mémoire à partir duquel effectuer la copie.</param>
      <param name="destination" vsli:raw="The array to copy to.">Tableau dans lequel effectuer la copie.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">Index de base zéro dans le tableau de destination où la copie doit commencer.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">Nombre d'éléments de tableau à copier.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> ou <paramref name="length" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.IntPtr[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed &lt;see cref=&quot;T:System.IntPtr&quot; /&gt; array.">Copie des données d’un pointeur mémoire non managé dans un tableau de <see cref="T:System.IntPtr" /> managé.</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">Pointeur mémoire à partir duquel effectuer la copie.</param>
      <param name="destination" vsli:raw="The array to copy to.">Tableau dans lequel effectuer la copie.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">Index de base zéro dans le tableau de destination où la copie doit commencer.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">Nombre d'éléments de tableau à copier.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> ou <paramref name="length" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Single[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed single-precision floating-point number array.">Copie des données d'un pointeur mémoire non managé dans un tableau de nombres à virgule flottante simple précision managé.</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">Pointeur mémoire à partir duquel effectuer la copie.</param>
      <param name="destination" vsli:raw="The array to copy to.">Tableau dans lequel effectuer la copie.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">Index de base zéro dans le tableau de destination où la copie doit commencer.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">Nombre d'éléments de tableau à copier.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> ou <paramref name="length" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed &lt;see cref=&quot;T:System.IntPtr&quot; /&gt; array to an unmanaged memory pointer.">Copie des données d’un tableau de <see cref="T:System.IntPtr" /> managé et unidimensionnel vers un pointeur mémoire non managé.</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">Tableau unidimensionnel à partir duquel effectuer la copie.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">Index de base zéro dans le tableau source où la copie doit commencer.</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">Pointeur mémoire de destination de la copie.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">Nombre d'éléments de tableau à copier.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> ou <paramref name="length" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Single[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed single-precision floating-point number array to an unmanaged memory pointer.">Copie des données d'un tableau de nombres à virgule flottante simple précision managé et unidimensionnel vers un pointeur mémoire non managé.</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">Tableau unidimensionnel à partir duquel effectuer la copie.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">Index de base zéro dans le tableau source où la copie doit commencer.</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">Pointeur mémoire de destination de la copie.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">Nombre d'éléments de tableau à copier.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are not valid.">
        <paramref name="startIndex" /> et <paramref name="length" /> ne sont pas valides.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" /> ou <paramref name="length" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateAggregatedObject(System.IntPtr,System.Object)">
      <summary vsli:raw="Aggregates a managed object with the specified COM object.">Agrège un objet managé avec l'objet COM spécifié.</summary>
      <param name="pOuter" vsli:raw="The outer &lt;see langword=&quot;IUnknown&quot; /&gt; pointer.">Le pointeur <see langword="IUnknown" /> externe.</param>
      <param name="o" vsli:raw="An object to aggregate.">Objet à agréger.</param>
      <returns vsli:raw="The inner &lt;see langword=&quot;IUnknown&quot; /&gt; pointer of the managed object.">Le pointeur <see langword="IUnknown" /> interne de l’objet managé.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; is a Windows Runtime object.">
        <paramref name="o" /> est un objet Windows Runtime.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateAggregatedObject``1(System.IntPtr,``0)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Aggregates a managed object of the specified type with the specified COM object.">[Pris en charge dans le .NET Framework 4.5.1 et versions ultérieures]  
 Agrège un objet managé du type spécifié avec l'objet COM spécifié.</summary>
      <param name="pOuter" vsli:raw="The outer IUnknown pointer.">Pointeur IUnknown externe.</param>
      <param name="o" vsli:raw="The managed object to aggregate.">Objet managé à agréger.</param>
      <typeparam name="T" vsli:raw="The type of the managed object to aggregate.">Type de l'objet managé à agréger.</typeparam>
      <returns vsli:raw="The inner IUnknown pointer of the managed object.">Pointeur IUnknown interne de l’objet managé.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; is a Windows Runtime object.">
        <paramref name="o" /> est un objet Windows Runtime.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateWrapperOfType(System.Object,System.Type)">
      <summary vsli:raw="Wraps the specified COM object in an object of the specified type.">Encapsule l'objet COM spécifié dans un objet du type spécifié.</summary>
      <param name="o" vsli:raw="The object to be wrapped.">L’objet à encapsuler.</param>
      <param name="t" vsli:raw="The type of wrapper to create.">Le type de wrapper à créer.</param>
      <returns vsli:raw="The newly wrapped object that is an instance of the desired type.">Objet récemment encapsulé constituant une instance du type requis.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;t&quot; /&gt; must derive from &lt;see langword=&quot;__ComObject&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;t&quot; /&gt; is a Windows Runtime type.">
        <paramref name="t" /> doit provenir de <see langword="__ComObject" />.  

ou - 
<paramref name="t" /> est un type Windows Runtime.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;t&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="t" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; cannot be converted to the destination type because it does not support all required interfaces.">Impossible de convertir <paramref name="o" /> dans le type de destination, car il ne prend pas en charge toutes les interfaces requises.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateWrapperOfType``2(``0)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Wraps the specified COM object in an object of the specified type.">[Pris en charge dans le .NET Framework 4.5.1 et versions ultérieures]  
 Encapsule l'objet COM spécifié dans un objet du type spécifié.</summary>
      <param name="o" vsli:raw="The object to be wrapped.">L’objet à encapsuler.</param>
      <typeparam name="T" vsli:raw="The type of object to wrap.">Type d'objet à encapsuler.</typeparam>
      <typeparam name="TWrapper" vsli:raw="The type of object to return.">Type d'objet à retourner.</typeparam>
      <returns vsli:raw="The newly wrapped object.">Objet récemment encapsulé.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;typeparamref name=&quot;T&quot; /&gt; must derive from &lt;see langword=&quot;__ComObject&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;typeparamref name=&quot;T&quot; /&gt; is a Windows Runtime type.">
        <typeparamref name="T" /> doit provenir de <see langword="__ComObject" />.  

ou - 
<typeparamref name="T" /> est un type Windows Runtime.</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; cannot be converted to the &lt;paramref name=&quot;TWrapper&quot; /&gt; because it does not support all required interfaces.">
        <paramref name="o" /> ne peut pas être converti dans <paramref name="TWrapper" /> puisqu'il ne prend pas en charge toutes les interfaces requises.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)">
      <summary vsli:raw="Frees all substructures that the specified unmanaged memory block points to.">Libère toutes les sous-structures vers lesquelles pointe le bloc de mémoire non managée spécifié.</summary>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory.">Pointeur vers un bloc de mémoire non managée.</param>
      <param name="structuretype" vsli:raw="Type of a formatted class. This provides the layout information necessary to delete the buffer in the &lt;paramref name=&quot;ptr&quot; /&gt; parameter.">Type d'une classe mise en forme. Ceci fournit les informations relatives à la disposition nécessaires pour supprimer la mémoire tampon dans le paramètre <paramref name="ptr" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;structureType&quot; /&gt; has an automatic layout. Use sequential or explicit instead.">
        <paramref name="structureType" /> possède une disposition automatique. Optez plutôt pour séquentiel ou explicite.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Frees all substructures of a specified type that the specified unmanaged memory block points to.">[Pris en charge dans le .NET Framework 4.5.1 et versions ultérieures]  
 Libère toutes les sous-structures d'un type spécifié vers lesquelles pointe le bloc de mémoire non managé spécifié.</summary>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory.">Pointeur vers un bloc de mémoire non managée.</param>
      <typeparam name="T" vsli:raw="The type of the formatted structure. This provides the layout information necessary to delete the buffer in the &lt;paramref name=&quot;ptr&quot; /&gt; parameter.">Type de la structure mise en forme. Ceci fournit les informations relatives à la disposition nécessaires pour supprimer la mémoire tampon dans le paramètre <paramref name="ptr" />.</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;typeparamref name=&quot;T&quot; /&gt; has an automatic layout. Use sequential or explicit instead.">
        <typeparamref name="T" /> possède une disposition automatique. Optez plutôt pour séquentiel ou explicite.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FinalReleaseComObject(System.Object)">
      <summary vsli:raw="Releases all references to a Runtime Callable Wrapper (RCW) by setting its reference count to 0.">Libère toutes les références à un wrapper RCW Runtime Callable Wrapper en affectant la valeur 0 à son décompte de références.</summary>
      <param name="o" vsli:raw="The RCW to be released.">Wrapper RCW à libérer.</param>
      <returns vsli:raw="The new value of the reference count of the RCW associated with the &lt;paramref name=&quot;o&quot; /&gt; parameter, which is 0 (zero) if the release is successful.">Nouvelle valeur du décompte de références du wrapper RCW associé au paramètre <paramref name="o" />, qui est 0 (zéro) si la libération réussit.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; is not a valid COM object.">
        <paramref name="o" /> n'est pas un objet COM valide.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="o" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeBSTR(System.IntPtr)">
      <summary vsli:raw="Frees a &lt;see langword=&quot;BSTR&quot; /&gt; using the COM SysFreeString function.">Libère un <see langword="BSTR" /> à l’aide de la fonction COM SysFreeString.</summary>
      <param name="ptr" vsli:raw="The address of the BSTR to be freed.">Adresse du BSTR à libérer.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)">
      <summary vsli:raw="Frees a block of memory allocated by the unmanaged COM task memory allocator.">Libère un bloc de mémoire alloué par l'allocateur de mémoire de tâche COM non managé.</summary>
      <param name="ptr" vsli:raw="The address of the memory to be freed.">Adresse de la mémoire à libérer.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)">
      <summary vsli:raw="Frees memory previously allocated from the unmanaged memory of the process.">Libère la mémoire précédemment allouée de la mémoire non managée du processus.</summary>
      <param name="hglobal" vsli:raw="The handle returned by the original matching call to &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)&quot; /&gt;.">Handle retourné par l'appel correspondant d'origine à <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GenerateGuidForType(System.Type)">
      <summary vsli:raw="Returns the globally unique identifier (GUID) for the specified type, or generates a GUID using the algorithm used by the Type Library Exporter (Tlbexp.exe).">Retourne le GUID (identificateur global unique) du type spécifié, ou génère un GUID en utilisant l'algorithme employé par l'exportateur de bibliothèques de types (TlbExp.exe).</summary>
      <param name="type" vsli:raw="The type to generate a GUID for.">Type pour lequel un GUID doit être généré.</param>
      <returns vsli:raw="An identifier for the specified type.">Identificateur du type spécifié.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GenerateProgIdForType(System.Type)">
      <summary vsli:raw="Returns a programmatic identifier (ProgID) for the specified type.">Retourne un ProgID (identificateur programmatique) pour le type spécifié.</summary>
      <param name="type" vsli:raw="The type to get a ProgID for.">Type pour lequel un ProgID doit être obtenu.</param>
      <returns vsli:raw="The ProgID of the specified type.">ProgID pour le type spécifié.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;type&quot; /&gt; parameter is not a class that can be create by COM. The class must be public, have a public parameterless constructor, and be COM visible.">Le paramètre <paramref name="type" /> n'est pas une classe qui peut être créée par COM. La classe doit être publique, disposer d’un constructeur public sans paramètre et être visible par COM.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;type&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="type" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)">
      <summary vsli:raw="Returns a pointer to an IUnknown interface that represents the specified interface on the specified object. Custom query interface access is enabled by default.">Retourne un pointeur vers une interface IUnknown qui représente l’interface spécifiée de l’objet spécifié. L'accès à l'interface de requête personnalisée est activé par défaut.</summary>
      <param name="o" vsli:raw="The object that provides the interface.">Objet qui fournit l'interface.</param>
      <param name="T" vsli:raw="The type of interface that is requested.">Type d'interface demandé.</param>
      <returns vsli:raw="The interface pointer that represents the specified interface for the object.">Pointeur d'interface qui représente l'interface spécifiée de l'objet.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;typeparamref name=&quot;T&quot; /&gt; parameter is not an interface.&#xA;&#xA; -or-&#xA;&#xA; The type is not visible to COM.&#xA;&#xA; -or-&#xA;&#xA; The &lt;typeparamref name=&quot;T&quot; /&gt; parameter is a generic type definition.">Le paramètre <typeparamref name="T" /> n'est pas une interface.  
ou 
Le type n'est pas visible par COM.  

ou - 
Le paramètre <typeparamref name="T" /> est une définition de type générique.</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The &lt;paramref name=&quot;o&quot; /&gt; parameter does not support the requested interface.">Le paramètre <paramref name="o" /> ne prend pas en charge l'interface demandée.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;o&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; The &lt;typeparamref name=&quot;T&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="o" /> a la valeur <see langword="null" />.  

ou - 
Le paramètre <typeparamref name="T" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)">
      <summary vsli:raw="Returns a pointer to an IUnknown interface that represents the specified interface on the specified object. Custom query interface access is controlled by the specified customization mode.">Retourne un pointeur vers une interface IUnknown qui représente l’interface spécifiée de l’objet spécifié. L'accès à l'interface de requête personnalisée est contrôlé par le mode de personnalisation spécifié.</summary>
      <param name="o" vsli:raw="The object that provides the interface.">Objet qui fournit l'interface.</param>
      <param name="T" vsli:raw="The type of interface that is requested.">Type d'interface demandé.</param>
      <param name="mode" vsli:raw="One of the enumeration values that indicates whether to apply an &lt;see langword=&quot;IUnknown::QueryInterface&quot; /&gt; customization that is supplied by an &lt;see cref=&quot;T:System.Runtime.InteropServices.ICustomQueryInterface&quot; /&gt;.">Une des valeurs d'énumération qui indique s'il faut appliquer une personnalisation <see langword="IUnknown::QueryInterface" /> fournie par un <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" />.</param>
      <returns vsli:raw="The interface pointer that represents the interface for the object.">Pointeur d'interface qui représente l'interface de l'objet.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;typeparamref name=&quot;T&quot; /&gt; parameter is not an interface.&#xA;&#xA; -or-&#xA;&#xA; The type is not visible to COM.&#xA;&#xA; -or-&#xA;&#xA; The &lt;typeparamref name=&quot;T&quot; /&gt; parameter is a generic type definition.">Le paramètre <typeparamref name="T" /> n'est pas une interface.  
ou 
Le type n'est pas visible par COM.  

ou - 
Le paramètre <typeparamref name="T" /> est une définition de type générique.</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The object &lt;paramref name=&quot;o&quot; /&gt; does not support the requested interface.">L'objet <paramref name="o" /> ne prend pas en charge l'interface demandée.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;o&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; The &lt;typeparamref name=&quot;T&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="o" /> a la valeur <see langword="null" />.  

ou - 
Le paramètre <typeparamref name="T" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject``2(``0)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Returns a pointer to an IUnknown interface that represents the specified interface on an object of the specified type. Custom query interface access is enabled by default.">[Pris en charge dans le .NET Framework 4.5.1 et versions ultérieures] 
Retourne un pointeur vers une interface IUnknown qui représente l’interface spécifiée d’un objet du type spécifié. L'accès à l'interface de requête personnalisée est activé par défaut.</summary>
      <param name="o" vsli:raw="The object that provides the interface.">Objet qui fournit l'interface.</param>
      <typeparam name="T" vsli:raw="The type of &lt;paramref name=&quot;o&quot; /&gt;.">Type d'élément <paramref name="o" />.</typeparam>
      <typeparam name="TInterface" vsli:raw="The type of interface to return.">Type d'interface à retourner.</typeparam>
      <returns vsli:raw="The interface pointer that represents the &lt;paramref name=&quot;TInterface&quot; /&gt; interface.">Pointeur d'interface qui représente l'interface <paramref name="TInterface" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;TInterface&quot; /&gt; parameter is not an interface.&#xA;&#xA; -or-&#xA;&#xA; The type is not visible to COM.&#xA;&#xA; -or-&#xA;&#xA; The &lt;typeparamref name=&quot;T&quot; /&gt; parameter is an open generic type.">Le paramètre <paramref name="TInterface" /> n'est pas une interface.  

ou - 
Le type n'est pas visible par COM.  

ou - 
Le paramètre <typeparamref name="T" /> est un type générique ouvert.</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The &lt;paramref name=&quot;o&quot; /&gt; parameter does not support the &lt;paramref name=&quot;TInterface&quot; /&gt; interface.">Le paramètre <paramref name="o" /> ne prend pas en charge l'interface <paramref name="TInterface" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;o&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="o" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComObjectData(System.Object,System.Object)">
      <summary vsli:raw="Retrieves data that is referenced by the specified key from the specified COM object.">Récupère des  données référencées par la clé spécifiée à partir de l'objet COM spécifié.</summary>
      <param name="obj" vsli:raw="The COM object that contains the data that you want.">Objet COM qui contient les données souhaitées.</param>
      <param name="key" vsli:raw="The key in the internal hash table of &lt;paramref name=&quot;obj&quot; /&gt; to retrieve the data from.">Clé dans la table de hachage interne de <paramref name="obj" /> dans laquelle récupérer les données.</param>
      <returns vsli:raw="The data represented by the &lt;paramref name=&quot;key&quot; /&gt; parameter in the internal hash table of the &lt;paramref name=&quot;obj&quot; /&gt; parameter.">Données représentées par le paramètre <paramref name="key" /> dans la table de hachage interne du paramètre <paramref name="obj" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;obj&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="obj" /> est <see langword="null" />.  

ou - 
<paramref name="key" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;obj&quot; /&gt; is not a COM object.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;obj&quot; /&gt; is a Windows Runtime object.">
        <paramref name="obj" /> n’est pas un objet COM.  

ou - 
<paramref name="obj" /> est un objet Windows Runtime.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(System.IntPtr,System.Type)">
      <summary vsli:raw="Converts an unmanaged function pointer to a delegate.">Convertit un pointeur fonction non managé en un délégué.</summary>
      <param name="ptr" vsli:raw="The unmanaged function pointer to be converted.">Pointeur vers la fonction non managée à convertir.</param>
      <param name="t" vsli:raw="The type of the delegate to be returned.">Type du délégué à retourner.</param>
      <returns vsli:raw="A delegate instance that can be cast to the appropriate delegate type.">Instance de délégué qui peut être castée en type délégué approprié.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;t&quot; /&gt; parameter is not a delegate or is generic.">Le paramètre <paramref name="t" /> n'est pas un délégué ou est générique.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;ptr&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; The &lt;paramref name=&quot;t&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="ptr" /> a la valeur <see langword="null" />.  

ou - 
Le paramètre <paramref name="t" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer``1(System.IntPtr)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Converts an unmanaged function pointer to a delegate of a specified type.">[Pris en charge dans le .NET Framework 4.5.1 et versions ultérieures]  
 Convertit un pointeur fonction non managé en un délégué d'un type spécifié.</summary>
      <param name="ptr" vsli:raw="The unmanaged function pointer to convert.">Pointeur vers la fonction non managée à convertir.</param>
      <typeparam name="TDelegate" vsli:raw="The type of the delegate to return.">Type de délégué à retourner.</typeparam>
      <returns vsli:raw="A instance of the specified delegate type.">Instance du type délégué spécifié.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;TDelegate&quot; /&gt; generic parameter is not a delegate, or it is an open generic type.">Le paramètre générique <paramref name="TDelegate" /> n'est pas un délégué ou il s'agit d'un type générique ouvert.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;ptr&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="ptr" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetEndComSlot(System.Type)">
      <summary vsli:raw="Retrieves the last slot in the virtual function table (v-table or VTBL) of a type when exposed to COM.">Récupère le dernier emplacement dans la table de fonctions virtuelles (v-table ou VTBL) d'un type en cas d'exposition à COM.</summary>
      <param name="t" vsli:raw="A type that represents an interface or class.">Type qui représente une interface ou une classe.</param>
      <returns vsli:raw="The last VTBL slot of the interface when exposed to COM. If the &lt;paramref name=&quot;t&quot; /&gt; parameter is a class, the returned VTBL slot is the last slot in the interface that is generated from the class.">Dernier emplacement VTBL de l'interface en cas d'exposition à COM. Si le paramètre <paramref name="t" /> est une classe, l'emplacement VTBL retourné est le dernier emplacement dans l'interface qui est générée à partir de la classe.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionCode">
      <summary vsli:raw="Retrieves a code that identifies the type of the exception that occurred.">Récupère un code qui identifie le type de l'exception qui s'est produite.</summary>
      <returns vsli:raw="The type of the exception.">Type de l'exception.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32)">
      <summary vsli:raw="Converts the specified HRESULT error code to a corresponding &lt;see cref=&quot;T:System.Exception&quot; /&gt; object.">Convertit le code d’erreur HRESULT spécifié en objet <see cref="T:System.Exception" /> correspondant.</summary>
      <param name="errorCode" vsli:raw="The HRESULT to be converted.">HRESULT à convertir.</param>
      <returns vsli:raw="An object that represents the converted HRESULT, or &lt;see langword=&quot;null&quot; /&gt; if the HRESULT value doesn't represent an error code (for example, &lt;see langword=&quot;S_OK&quot; /&gt; or &lt;see langword=&quot;S_FALSE&quot; /&gt;).">Objet qui représente le HRESULT converti, ou <see langword="null" /> si la valeur HRESULT ne représente pas un code d’erreur (par exemple, <see langword="S_OK" /> et <see langword="S_FALSE" />).</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32,System.IntPtr)">
      <summary vsli:raw="Converts the specified HRESULT error code to a corresponding &lt;see cref=&quot;T:System.Exception&quot; /&gt; object, with additional error information passed in an IErrorInfo interface for the exception object.">Convertit le code d’erreur HRESULT spécifié en objet <see cref="T:System.Exception" /> correspondant, avec des informations supplémentaires sur l’erreur passées dans une interface IErrorInfo pour l’objet exception.</summary>
      <param name="errorCode" vsli:raw="The HRESULT to be converted.">HRESULT à convertir.</param>
      <param name="errorInfo" vsli:raw="A pointer to the &lt;see langword=&quot;IErrorInfo&quot; /&gt; interface that provides more information about the error. You can specify &lt;c&gt;IntPtr(0)&lt;/c&gt; to use the current &lt;see langword=&quot;IErrorInfo&quot; /&gt; interface, or &lt;c&gt;IntPtr(-1)&lt;/c&gt; to ignore the current &lt;see langword=&quot;IErrorInfo&quot; /&gt; interface and construct the exception just from the error code.">Pointeur vers l’interface <see langword="IErrorInfo" /> qui fournit plus d’informations sur l’erreur. Vous pouvez spécifier <c>IntPtr(0)</c> pour utiliser l’interface <see langword="IErrorInfo" /> actuelle ou <c>IntPtr(-1)</c> pour ignorer l’interface <see langword="IErrorInfo" /> actuelle et construire l’exception uniquement à partir du code d’erreur.</param>
      <returns vsli:raw="An object that represents the converted HRESULT and information obtained from &lt;paramref name=&quot;errorInfo&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if an HRESULT value doesn't represent an error code (for example, &lt;see langword=&quot;S_OK&quot; /&gt; or &lt;see langword=&quot;S_FALSE&quot; /&gt;).">Objet qui représente le HRESULT converti et les informations obtenues de <paramref name="errorInfo" />, ou <see langword="null" /> si la valeur HRESULT ne représente pas un code d’erreur (par exemple, <see langword="S_OK" /> et <see langword="S_FALSE" />).</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionPointers">
      <summary vsli:raw="Retrieves a computer-independent description of an exception, and information about the state that existed for the thread when the exception occurred.">Récupère une description indépendante de l'ordinateur d'une exception, ainsi que des informations sur l'état de l'ordinateur qui existait pour le thread lorsque l'exception s'est produite.</summary>
      <returns vsli:raw="A pointer to an EXCEPTION_POINTERS structure.">Pointeur vers une structure EXCEPTION_POINTERS.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(System.Delegate)">
      <summary vsli:raw="Converts a delegate into a function pointer that is callable from unmanaged code.">Convertit un délégué en pointeur fonction pouvant être appelé à partir du code non managé.</summary>
      <param name="d" vsli:raw="The delegate to be passed to unmanaged code.">Délégué à passer au code non managé.</param>
      <returns vsli:raw="A value that can be passed to unmanaged code, which, in turn, can use it to call the underlying managed delegate.">Valeur qui peut être passée à du code non managé, qui peut à son tour l'utiliser pour appeler le délégué managé sous-jacent.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;d&quot; /&gt; parameter is a generic type definition.">Le paramètre <paramref name="d" /> est une définition de type générique.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;d&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="d" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate``1(``0)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Converts a delegate of a specified type to a function pointer that is callable from unmanaged code.">[Pris en charge dans le .NET Framework 4.5.1 et versions ultérieures]  
 Convertit un délégué d'un type spécifié en pointeur fonction pouvant être appelé à partir du code non managé.</summary>
      <param name="d" vsli:raw="The delegate to be passed to unmanaged code.">Délégué à passer au code non managé.</param>
      <typeparam name="TDelegate" vsli:raw="The type of delegate to convert.">Type de délégué à convertir.</typeparam>
      <returns vsli:raw="A value that can be passed to unmanaged code, which, in turn, can use it to call the underlying managed delegate.">Valeur qui peut être passée à du code non managé, qui peut à son tour l'utiliser pour appeler le délégué managé sous-jacent.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;d&quot; /&gt; parameter is a generic type definition.">Le paramètre <paramref name="d" /> est une définition de type générique.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;d&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="d" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHINSTANCE(System.Reflection.Module)">
      <summary vsli:raw="Returns the instance handle (HINSTANCE) for the specified module.">Retourne le handle d'instance (HINSTANCE) pour le module spécifié.</summary>
      <param name="m" vsli:raw="The module whose HINSTANCE is desired.">Module dont HINSTANCE est souhaité.</param>
      <returns vsli:raw="The HINSTANCE for &lt;paramref name=&quot;m&quot; /&gt;; or -1 if the module does not have an HINSTANCE.">HINSTANCE de <paramref name="m" /> ou -1 si le module n'a pas de HINSTANCE.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;m&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="m" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHRForException(System.Exception)">
      <summary vsli:raw="Converts the specified exception to an HRESULT.">Convertit l'exception spécifiée en HRESULT.</summary>
      <param name="e" vsli:raw="The exception to convert to an HRESULT.">Exception à convertir en HRESULT.</param>
      <returns vsli:raw="The HRESULT mapped to the supplied exception.">HRESULT mappé en l'exception fournie.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error">
      <summary vsli:raw="Returns the HRESULT corresponding to the last error incurred by Win32 code executed using &lt;see cref=&quot;T:System.Runtime.InteropServices.Marshal&quot; /&gt;.">Retourne le HRESULT correspondant à la dernière erreur provoquée par du code Win32 exécuté en utilisant <see cref="T:System.Runtime.InteropServices.Marshal" />.</summary>
      <returns vsli:raw="The HRESULT corresponding to the last Win32 error code.">HRESULT correspondant au dernier code d'erreur Win32.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)">
      <summary vsli:raw="Returns an IDispatch interface from a managed object.">Retourne une interface IDispatch à partir d’un objet managé.</summary>
      <param name="o" vsli:raw="The object whose &lt;see langword=&quot;IDispatch&quot; /&gt; interface is requested.">Objet dont l'interface <see langword="IDispatch" /> est demandée.</param>
      <returns vsli:raw="The &lt;see langword=&quot;IDispatch&quot; /&gt; pointer for the &lt;paramref name=&quot;o&quot; /&gt; parameter.">Pointeur <see langword="IDispatch" /> pour le paramètre <paramref name="o" />.</returns>
      <exception cref="T:System.InvalidCastException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; does not support the requested interface.">
        <paramref name="o" /> ne prend pas en charge l'interface demandée.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)">
      <summary vsli:raw="Returns an IUnknown interface from a managed object.">Retourne une interface IUnknown à partir d’un objet managé.</summary>
      <param name="o" vsli:raw="The object whose &lt;see langword=&quot;IUnknown&quot; /&gt; interface is requested.">Objet dont l'interface <see langword="IUnknown" /> est demandée.</param>
      <returns vsli:raw="The &lt;see langword=&quot;IUnknown&quot; /&gt; pointer for the &lt;paramref name=&quot;o&quot; /&gt; parameter.">Pointeur <see langword="IUnknown" /> pour le paramètre <paramref name="o" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error">
      <summary vsli:raw="Returns the error code returned by the last unmanaged function that was called using platform invoke that has the &lt;see cref=&quot;F:System.Runtime.InteropServices.DllImportAttribute.SetLastError&quot; /&gt; flag set.">Retourne le code d'erreur retourné par la dernière fonction non managée appelée en utilisant l'appel de code non managé dont l'indicateur <see cref="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" /> est activé.</summary>
      <returns vsli:raw="The last error code set by a call to the Win32 SetLastError function.">Dernier code d’erreur défini par un appel à la fonction Win32 SetLastError.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject(System.Object,System.IntPtr)">
      <summary vsli:raw="Converts an object to a COM VARIANT.">Convertit un objet en COM VARIANT.</summary>
      <param name="obj" vsli:raw="The object for which to get a COM VARIANT.">Objet pour lequel obtenir un VARIANT COM.</param>
      <param name="pDstNativeVariant" vsli:raw="A pointer to receive the VARIANT that corresponds to the &lt;paramref name=&quot;obj&quot; /&gt; parameter.">Pointeur devant recevoir le VARIANT et qui correspond au paramètre <paramref name="obj" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;obj&quot; /&gt; parameter is an instance of a generic type.">Le paramètre <paramref name="obj" /> est une instance d’un type générique.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject``1(``0,System.IntPtr)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Converts an object of a specified type to a COM VARIANT.">[Pris en charge dans le .NET Framework 4.5.1 et versions ultérieures]  
 Convertit un objet d’un type spécifié en COM VARIANT.</summary>
      <param name="obj" vsli:raw="The object for which to get a COM VARIANT.">Objet pour lequel obtenir un VARIANT COM.</param>
      <param name="pDstNativeVariant" vsli:raw="A pointer to receive the VARIANT that corresponds to the &lt;paramref name=&quot;obj&quot; /&gt; parameter.">Pointeur devant recevoir le VARIANT et qui correspond au paramètre <paramref name="obj" />.</param>
      <typeparam name="T" vsli:raw="The type of the object to convert.">Type de l’objet à convertir.</typeparam>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)">
      <summary vsli:raw="Returns an instance of a type that represents a COM object by a pointer to its IUnknown interface.">Retourne une instance d’un type qui représente un objet COM par un pointeur vers son interface IUnknown.</summary>
      <param name="pUnk" vsli:raw="A pointer to the &lt;see langword=&quot;IUnknown&quot; /&gt; interface.">Pointeur vers l'interface <see langword="IUnknown" />.</param>
      <returns vsli:raw="An object that represents the specified unmanaged COM object.">Objet qui représente l'objet COM non managé spécifié.</returns>
      <exception cref="">
        <paramref name="pUnk" /> a la valeur <see cref="F:System.IntPtr.Zero" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant(System.IntPtr)">
      <summary vsli:raw="Converts a COM VARIANT to an object.">Convertit COM VARIANT en un objet.</summary>
      <param name="pSrcNativeVariant" vsli:raw="A pointer to a COM VARIANT.">Pointeur vers un VARIANT COM.</param>
      <returns vsli:raw="An object that corresponds to the &lt;paramref name=&quot;pSrcNativeVariant&quot; /&gt; parameter.">Objet qui correspond au paramètre <paramref name="pSrcNativeVariant" />.</returns>
      <exception cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException" vsli:raw="&lt;paramref name=&quot;pSrcNativeVariant&quot; /&gt; is not a valid VARIANT type.">
        <paramref name="pSrcNativeVariant" /> n'est pas un type VARIANT valide.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;pSrcNativeVariant&quot; /&gt; has an unsupported type.">
        <paramref name="pSrcNativeVariant" /> a un type non pris en charge.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant``1(System.IntPtr)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Converts a COM VARIANT to an object of a specified type.">[Pris en charge dans le .NET Framework 4.5.1 et versions ultérieures]  
 Convertit COM VARIANT en un objet de type spécifié.</summary>
      <param name="pSrcNativeVariant" vsli:raw="A pointer to a COM VARIANT.">Pointeur vers un VARIANT COM.</param>
      <typeparam name="T" vsli:raw="The type to which to convert the COM VARIANT.">Type dans lequel convertir COM VARIANT.</typeparam>
      <returns vsli:raw="An object of the specified type that corresponds to the &lt;paramref name=&quot;pSrcNativeVariant&quot; /&gt; parameter.">Objet du type spécifié qui correspond au paramètre <paramref name="pSrcNativeVariant" />.</returns>
      <exception cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException" vsli:raw="&lt;paramref name=&quot;pSrcNativeVariant&quot; /&gt; is not a valid VARIANT type.">
        <paramref name="pSrcNativeVariant" /> n'est pas un type VARIANT valide.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;pSrcNativeVariant&quot; /&gt; has an unsupported type.">
        <paramref name="pSrcNativeVariant" /> a un type non pris en charge.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants(System.IntPtr,System.Int32)">
      <summary vsli:raw="Converts an array of COM VARIANTs to an array of objects.">Convertit un tableau de VARIANT COM en un tableau d’objets.</summary>
      <param name="aSrcNativeVariant" vsli:raw="A pointer to the first element of an array of COM VARIANTs.">Pointeur vers le premier élément d'un tableau de VARIANT COM.</param>
      <param name="cVars" vsli:raw="The count of COM VARIANTs in &lt;paramref name=&quot;aSrcNativeVariant&quot; /&gt;.">Nombre de VARIANT COM dans <paramref name="aSrcNativeVariant" />.</param>
      <returns vsli:raw="An object array that corresponds to &lt;paramref name=&quot;aSrcNativeVariant&quot; /&gt;.">Tableau d'objets qui correspond à <paramref name="aSrcNativeVariant" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;cVars&quot; /&gt; is a negative number.">
        <paramref name="cVars" /> est un nombre négatif.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants``1(System.IntPtr,System.Int32)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Converts an array of COM VARIANTs to an array of a specified type.">[Pris en charge dans le .NET Framework 4.5.1 et versions ultérieures]  
 Convertit un tableau de COM VARIANT en un tableau d'un type spécifié.</summary>
      <param name="aSrcNativeVariant" vsli:raw="A pointer to the first element of an array of COM VARIANTs.">Pointeur vers le premier élément d'un tableau de VARIANT COM.</param>
      <param name="cVars" vsli:raw="The count of COM VARIANTs in &lt;paramref name=&quot;aSrcNativeVariant&quot; /&gt;.">Nombre de VARIANT COM dans <paramref name="aSrcNativeVariant" />.</param>
      <typeparam name="T" vsli:raw="The type of the array to return.">Type de tableau à retourner.</typeparam>
      <returns vsli:raw="An array of &lt;typeparamref name=&quot;T&quot; /&gt; objects that corresponds to &lt;paramref name=&quot;aSrcNativeVariant&quot; /&gt;.">Tableau d'objets <typeparamref name="T" /> qui correspond à <paramref name="aSrcNativeVariant" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;cVars&quot; /&gt; is a negative number.">
        <paramref name="cVars" /> est un nombre négatif.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetStartComSlot(System.Type)">
      <summary vsli:raw="Gets the first slot in the virtual function table (v-table or VTBL) that contains user-defined methods.">Obtient le premier emplacement dans la table de fonctions virtuelles (v-table ou VTBL) contenant des méthodes définies par l'utilisateur.</summary>
      <param name="t" vsli:raw="A type that represents an interface or a class.">Type qui représente une interface ou une classe.</param>
      <returns vsli:raw="The first VTBL slot that contains user-defined methods. The first slot is 3 if the interface is based on IUnknown, and 7 if the interface is based on IDispatch.">Premier emplacement VTBL qui contient des méthodes définies par l'utilisateur. Le premier emplacement est 3 si l’interface est basée sur IUnknown et 7 si l’interface est basée sur IDispatch.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;t&quot; /&gt; is not visible from COM.">
        <paramref name="t" /> n'est pas visible par COM.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown(System.IntPtr,System.Type)">
      <summary vsli:raw="Returns a managed object of a specified type that represents a COM object.">Retourne un objet managé d'un type spécifié qui représente un objet COM.</summary>
      <param name="pUnk" vsli:raw="A pointer to the &lt;see langword=&quot;IUnknown&quot; /&gt; interface of the unmanaged object.">Pointeur vers l’interface <see langword="IUnknown" /> de l’objet non géré.</param>
      <param name="t" vsli:raw="The type of the requested managed class.">Type de la classe managée demandée.</param>
      <returns vsli:raw="An instance of the class corresponding to the &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the requested unmanaged COM object.">Instance de la classe correspondant à l’objet <see cref="T:System.Type" /> qui représente l’objet COM non géré demandé.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;t&quot; /&gt; is not attributed with &lt;see cref=&quot;T:System.Runtime.InteropServices.ComImportAttribute&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;t&quot; /&gt; is a Windows Runtime type.">
        <paramref name="t" /> n’est pas attribué avec <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />.  

ou - 
<paramref name="t" /> est un type Windows Runtime.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypeFromCLSID(System.Guid)">
      <summary vsli:raw="Returns the type associated with the specified class identifier (CLSID).">Retourne le type associé à l'identificateur de classe (CLSID) spécifié.</summary>
      <param name="clsid" vsli:raw="The CLSID of the type to return.">CLSID du type à retourner.</param>
      <returns vsli:raw="&lt;see langword=&quot;System.__ComObject&quot; /&gt; regardless of whether the CLSID is valid.">
        <see langword="System.__ComObject" /> que le CLSID soit valide ou non.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypeInfoName(System.Runtime.InteropServices.ComTypes.ITypeInfo)">
      <summary vsli:raw="Retrieves the name of the type represented by an ITypeInfo object.">Récupère le nom du type représenté par un objet ITypeInfo.</summary>
      <param name="typeInfo" vsli:raw="An object that represents an &lt;see langword=&quot;ITypeInfo&quot; /&gt; pointer.">Objet qui représente un pointeur <see langword="ITypeInfo" />.</param>
      <returns vsli:raw="The name of the type that the &lt;paramref name=&quot;typeInfo&quot; /&gt; parameter points to.">Nom du type vers lequel pointe le paramètre <paramref name="typeInfo" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;typeInfo&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="typeInfo" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown(System.IntPtr)">
      <summary vsli:raw="Creates a unique Runtime Callable Wrapper (RCW) object for a given IUnknown interface.">Crée un objet de wrapper RCW Runtime Callable Wrapper unique pour une interface IUnknown donnée.</summary>
      <param name="unknown" vsli:raw="A managed pointer to an &lt;see langword=&quot;IUnknown&quot; /&gt; interface.">Pointeur managé vers une interface <see langword="IUnknown" />.</param>
      <returns vsli:raw="A unique RCW for the specified &lt;see langword=&quot;IUnknown&quot; /&gt; interface.">Wrapper RCW (Runtime Callable Wrapper) unique pour l'interface <see langword="IUnknown" /> spécifiée.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.IsComObject(System.Object)">
      <summary vsli:raw="Indicates whether a specified object represents a COM object.">Indique si un objet spécifié représente un objet COM.</summary>
      <param name="o" vsli:raw="The object to check.">Objet à vérifier.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;o&quot; /&gt; parameter is a COM type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le paramètre <paramref name="o" /> est un type COM ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="o" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.IsTypeVisibleFromCom(System.Type)">
      <summary vsli:raw="Indicates whether a type is visible to COM clients.">Indique si un type est visible par les clients COM.</summary>
      <param name="t" vsli:raw="The type to check for COM visibility.">Type à vérifier pour la visibilité COM.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is visible to COM; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le type est visible par COM ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.OffsetOf(System.Type,System.String)">
      <summary vsli:raw="Returns the field offset of the unmanaged form of the managed class.">Retourne l'offset de champ de la forme non managée de la classe managée.</summary>
      <param name="t" vsli:raw="A value type or formatted reference type that specifies the managed class. You must apply the &lt;see cref=&quot;T:System.Runtime.InteropServices.StructLayoutAttribute&quot; /&gt; to the class.">Type valeur ou type référence mis en forme qui spécifie la classe managée. Vous devez appliquer l'attribut <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> à la classe.</param>
      <param name="fieldName" vsli:raw="The field within the &lt;paramref name=&quot;t&quot; /&gt; parameter.">Champ dans le paramètre <paramref name="t" />.</param>
      <returns vsli:raw="The offset, in bytes, for the &lt;paramref name=&quot;fieldName&quot; /&gt; parameter within the specified class that is declared by platform invoke.">Offset, en octets, du paramètre <paramref name="fieldName" /> au sein de la classe spécifiée déclarée par l'appel de code non managé.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The class cannot be exported as a structure or the field is nonpublic. Beginning with the .NET Framework version 2.0, the field may be private.">La classe ne peut pas être exportée sous forme de structure ou le champ n'est pas public. À compter de .NET Framework version 2.0, le champ peut être privé.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;t&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="t" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.OffsetOf``1(System.String)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Returns the field offset of the unmanaged form of a specified managed class.">[Pris en charge dans le .NET Framework 4.5.1 et versions ultérieures]  
 Retourne l'offset de champ de la forme non managée d'une classe managée spécifiée.</summary>
      <param name="fieldName" vsli:raw="The name of the field in the &lt;paramref name=&quot;T&quot; /&gt; type.">Nom du champ dans le type <paramref name="T" />.</param>
      <typeparam name="T" vsli:raw="A managed value type or formatted reference type. You must apply the &lt;see cref=&quot;T:System.Runtime.InteropServices.StructLayoutAttribute&quot; /&gt; attribute to the class.">Type valeur managé ou type référence mis en forme. Vous devez appliquer l'attribut <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> à la classe.</typeparam>
      <returns vsli:raw="The offset, in bytes, for the &lt;paramref name=&quot;fieldName&quot; /&gt; parameter within the specified class that is declared by platform invoke.">Offset, en octets, du paramètre <paramref name="fieldName" /> au sein de la classe spécifiée déclarée par l'appel de code non managé.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Prelink(System.Reflection.MethodInfo)">
      <summary vsli:raw="Executes one-time method setup tasks without calling the method.">Exécute les tâches de configuration de méthode effectuées une seule fois sans appeler la méthode.</summary>
      <param name="m" vsli:raw="The method to be checked.">Méthode à vérifier.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;m&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="m" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;m&quot; /&gt; parameter is not a &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; object.">Le paramètre <paramref name="m" /> n'est pas un objet <see cref="T:System.Reflection.MethodInfo" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PrelinkAll(System.Type)">
      <summary vsli:raw="Performs a pre-link check for all methods on a class.">Exécute un contrôle avant l'édition des liens pour toutes les méthodes sur une classe.</summary>
      <param name="c" vsli:raw="The class whose methods are to be checked.">Classe dont les méthodes doivent être vérifiées.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;c&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="c" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)">
      <summary vsli:raw="Copies all characters up to the first null character from an unmanaged ANSI or UTF-8 string to a managed &lt;see cref=&quot;T:System.String&quot; /&gt;, and widens each character to UTF-16.">Copie tous les caractères jusqu'au premier caractère null d'une chaîne ANSI non managée vers un <see cref="T:System.String" /> managé, puis convertit chaque caractère ANSI en Unicode.</summary>
      <param name="ptr" vsli:raw="The address of the first character of the unmanaged string.">Adresse du premier caractère de la chaîne non managée.</param>
      <returns vsli:raw="A managed string that holds a copy of the unmanaged string. If &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, the method returns a null string.">Chaîne managée qui contient une copie de la chaîne ANSI non managée. Si <paramref name="ptr" /> est <see langword="null" />, la méthode retourne une chaîne vide.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr,System.Int32)">
      <summary vsli:raw="Allocates a managed &lt;see cref=&quot;T:System.String&quot; /&gt;, copies a specified number of characters from an unmanaged ANSI or UTF-8 string into it, and widens each character to UTF-16.">Alloue un objet <see cref="T:System.String" /> managé, copie un nombre spécifié de caractères d'une chaîne ANSI non managée dans celui-ci et élargit chaque caractère ANSI au format Unicode.</summary>
      <param name="ptr" vsli:raw="The address of the first character of the unmanaged string.">Adresse du premier caractère de la chaîne non managée.</param>
      <param name="len" vsli:raw="The byte count of the input string to copy.">Nombre d'octets de la chaîne d'entrée à copier.</param>
      <returns vsli:raw="A managed string that holds a copy of the native string if the value of the &lt;paramref name=&quot;ptr&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;; otherwise, this method returns &lt;see langword=&quot;null&quot; /&gt;.">Chaîne managée qui contient une copie de la chaîne ANSI native si la valeur du paramètre <paramref name="ptr" /> n'est pas <see langword="null" /> ; sinon, cette méthode retourne <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;len&quot; /&gt; is less than zero.">
        <paramref name="len" /> est inférieur à zéro.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr)">
      <summary vsli:raw="Allocates a managed &lt;see cref=&quot;T:System.String&quot; /&gt; and copies all characters up to the first null character from a string stored in unmanaged memory into it.">Alloue un objet <see cref="T:System.String" /> managé et copie tous les caractères - jusqu'au premier caractère null - d'une chaîne stockée dans de la mémoire non managée dans cet objet.</summary>
      <param name="ptr" vsli:raw="For Unicode platforms, the address of the first Unicode character.&#xA;&#xA; -or-&#xA;&#xA; For ANSI platforms, the address of the first ANSI character.">Pour les plateformes Unicode, adresse du premier caractère Unicode.  
 ou  
 Pour les plateformes ANSI, adresse du premier caractère ANSI.</param>
      <returns vsli:raw="A managed string that holds a copy of the unmanaged string if the value of the &lt;paramref name=&quot;ptr&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;; otherwise, this method returns &lt;see langword=&quot;null&quot; /&gt;.">Chaîne managée qui contient une copie de la chaîne non managée si la valeur du paramètre <paramref name="ptr" /> n’est pas <see langword="null" /> ; sinon, cette méthode retourne <see langword="null" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr,System.Int32)">
      <summary vsli:raw="Allocates a managed &lt;see cref=&quot;T:System.String&quot; /&gt; and copies the specified number of characters from a string stored in unmanaged memory into it.">Alloue un <see cref="T:System.String" /> managé afin d'y copier le nombre spécifié de caractères d'une chaîne stockée dans la mémoire non managée.</summary>
      <param name="ptr" vsli:raw="For Unicode platforms, the address of the first Unicode character.&#xA;&#xA; -or-&#xA;&#xA; For ANSI platforms, the address of the first ANSI character.">Pour les plateformes Unicode, adresse du premier caractère Unicode.  

ou -  

 Pour les plateformes ANSI, adresse du premier caractère ANSI.</param>
      <param name="len" vsli:raw="The number of characters to copy.">Nombre de caractères à copier.</param>
      <returns vsli:raw="A managed string that holds a copy of the native string if the value of the &lt;paramref name=&quot;ptr&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;; otherwise, this method returns &lt;see langword=&quot;null&quot; /&gt;.">Chaîne managée qui contient une copie de la chaîne native si la valeur du paramètre <paramref name="ptr" /> n'est pas <see langword="null" /> ; sinon, cette méthode retourne <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;len&quot; /&gt; is less than zero.">
        <paramref name="len" /> est inférieur à zéro.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringBSTR(System.IntPtr)">
      <summary vsli:raw="Allocates a managed &lt;see cref=&quot;T:System.String&quot; /&gt; and copies a binary string (BSTR) stored in unmanaged memory into it.">Alloue un <see cref="T:System.String" /> managé pour y copier une chaîne binaire (BSTR) dans la mémoire non managée.</summary>
      <param name="ptr" vsli:raw="The address of the first character of the unmanaged string.">Adresse du premier caractère de la chaîne non managée.</param>
      <returns vsli:raw="A managed string that holds a copy of the unmanaged string.">Chaîne managée qui contient une copie de la chaîne non managée.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; equals &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt;.">
        <paramref name="ptr" /> est égal à <see cref="F:System.IntPtr.Zero" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr)">
      <summary vsli:raw="Allocates a managed &lt;see cref=&quot;T:System.String&quot; /&gt; and copies all characters up to the first null character from an unmanaged Unicode string into it.">Alloue un objet <see cref="T:System.String" /> managé et copie tous les caractères - jusqu'au premier caractère null - d'une chaîne Unicode non managée dans cet objet.</summary>
      <param name="ptr" vsli:raw="The address of the first character of the unmanaged string.">Adresse du premier caractère de la chaîne non managée.</param>
      <returns vsli:raw="A managed string that holds a copy of the unmanaged string if the value of the &lt;paramref name=&quot;ptr&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;; otherwise, this method returns &lt;see langword=&quot;null&quot; /&gt;.">Chaîne managée qui contient une copie de la chaîne non managée si la valeur du paramètre <paramref name="ptr" /> n’est pas <see langword="null" /> ; sinon, cette méthode retourne <see langword="null" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)">
      <summary vsli:raw="Allocates a managed &lt;see cref=&quot;T:System.String&quot; /&gt; and copies a specified number of characters from an unmanaged Unicode string into it.">Alloue un objet <see cref="T:System.String" /> managé et copie un nombre spécifié de caractères d'une chaîne Unicode non managée dans cet objet.</summary>
      <param name="ptr" vsli:raw="The address of the first character of the unmanaged string.">Adresse du premier caractère de la chaîne non managée.</param>
      <param name="len" vsli:raw="The number of Unicode characters to copy.">Nombre de caractères Unicode à copier.</param>
      <returns vsli:raw="A managed string that holds a copy of the unmanaged string if the value of the &lt;paramref name=&quot;ptr&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;; otherwise, this method returns &lt;see langword=&quot;null&quot; /&gt;.">Chaîne managée qui contient une copie de la chaîne non managée si la valeur du paramètre <paramref name="ptr" /> n’est pas <see langword="null" /> ; sinon, cette méthode retourne <see langword="null" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr)">
      <param name="ptr" vsli:raw="The address of the first character of the unmanaged string." />
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr,System.Int32)">
      <param name="ptr" vsli:raw="The address of the first character of the unmanaged string." />
      <param name="byteLen" vsli:raw="The number of bytes to copy." />
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Object)">
      <summary vsli:raw="Marshals data from an unmanaged block of memory to a managed object.">Marshale les données d'un bloc de mémoire non managée dans un objet managé.</summary>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory.">Pointeur vers un bloc de mémoire non managée.</param>
      <param name="structure" vsli:raw="The object to which the data is to be copied. This must be an instance of a formatted class.">Objet dans lequel les données doivent être copiées. Il doit s'agir d'une instance d'une classe mise en forme.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="Structure layout is not sequential or explicit.&#xA;&#xA; -or-&#xA;&#xA; Structure is a boxed value type.">La disposition de structure n'est ni séquentielle ni explicite.  
 ou  
 La structure est un type valeur boxed.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Type)">
      <summary vsli:raw="Marshals data from an unmanaged block of memory to a newly allocated managed object of the specified type.">Marshale, dans un nouvel objet managé alloué du type spécifié, les données d'un bloc de mémoire non managée.</summary>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory.">Pointeur vers un bloc de mémoire non managée.</param>
      <param name="structureType" vsli:raw="The type of object to be created. This object must represent a formatted class or a structure.">Type d'objet à créer. Cet objet doit représenter une classe mise en forme ou une structure.</param>
      <returns vsli:raw="A managed object containing the data pointed to by the &lt;paramref name=&quot;ptr&quot; /&gt; parameter.">Objet managé contenant les données vers lesquelles pointe le paramètre <paramref name="ptr" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;structureType&quot; /&gt; parameter layout is not sequential or explicit.&#xA;&#xA; -or-&#xA;&#xA; The &lt;paramref name=&quot;structureType&quot; /&gt; parameter is a generic type definition.">La disposition du paramètre <paramref name="structureType" /> n'est ni séquentielle ni explicite.  

ou - 
Le paramètre <paramref name="structureType" /> est une définition de type générique.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;structureType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="structureType" /> est <see langword="null" />.</exception>
      <exception cref="T:System.MissingMethodException" vsli:raw="The class specified by &lt;paramref name=&quot;structureType&quot; /&gt; does not have an accessible parameterless constructor.">La classe spécifiée par <paramref name="structureType" /> n’a pas de constructeur sans paramètre accessible.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Marshals data from an unmanaged block of memory to a newly allocated managed object of the type specified by a generic type parameter.">[Pris en charge dans le .NET Framework 4.5.1 et versions ultérieures]  
 Marshale, dans un nouvel objet managé alloué du type spécifié par un paramètre de type générique, les données d'un bloc de mémoire non managée.</summary>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory.">Pointeur vers un bloc de mémoire non managée.</param>
      <typeparam name="T" vsli:raw="The type of the object to which the data is to be copied. This must be a formatted class or a structure.">Type de l'objet dans lequel les données doivent être copiées. Il doit s'agir d'une classe ou d'une structure mise en forme.</typeparam>
      <returns vsli:raw="A managed object that contains the data that the &lt;paramref name=&quot;ptr&quot; /&gt; parameter points to.">Objet managé contenant les données vers lesquelles pointe le paramètre <paramref name="ptr" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The layout of &lt;typeparamref name=&quot;T&quot; /&gt; is not sequential or explicit.">La disposition de <typeparamref name="T" /> n'est ni séquentielle ni explicite.</exception>
      <exception cref="T:System.MissingMethodException" vsli:raw="The class specified by &lt;typeparamref name=&quot;T&quot; /&gt; does not have an accessible parameterless constructor.">La classe spécifiée par <typeparamref name="T" /> n’a pas de constructeur sans paramètre accessible.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr,``0)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Marshals data from an unmanaged block of memory to a managed object of the specified type.">[Pris en charge dans le .NET Framework 4.5.1 et versions ultérieures]  
 Marshale les données d'un bloc de mémoire non managée dans un objet managé d'un type spécifié.</summary>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory.">Pointeur vers un bloc de mémoire non managée.</param>
      <param name="structure" vsli:raw="The object to which the data is to be copied.">Objet dans lequel les données doivent être copiées.</param>
      <typeparam name="T" vsli:raw="The type of &lt;paramref name=&quot;structure&quot; /&gt;. This must be a formatted class.">Type d'élément <paramref name="structure" />. Il doit s'agir d'une classe formatée.</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="Structure layout is not sequential or explicit.">La disposition de structure n'est ni séquentielle ni explicite.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)">
      <summary vsli:raw="Requests a pointer to a specified interface from a COM object.">Demande un pointeur vers une interface spécifiée à partir d'un objet COM.</summary>
      <param name="pUnk" vsli:raw="The interface to be queried.">Interface à interroger.</param>
      <param name="iid" vsli:raw="The interface identifier (IID) of the requested interface.">Identificateur d'interface (IID) de l'interface demandée.</param>
      <param name="ppv" vsli:raw="When this method returns, contains a reference to the returned interface.">Lorsque cette méthode est retournée, contient une référence à l'interface retournée.</param>
      <returns vsli:raw="An HRESULT that indicates the success or failure of the call.">HRESULT indiquant la réussite ou l'échec de l'appel.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr)">
      <summary vsli:raw="Reads a single byte from unmanaged memory.">Lit un octet unique à partir de la mémoire non managée.</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory from which to read.">Adresse de début de lecture dans la mémoire non managée.</param>
      <returns vsli:raw="The byte read from unmanaged memory.">Octet lu dans la mémoire non managée.</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> n'est pas un format reconnu.  

ou - 
<paramref name="ptr" /> a la valeur <see langword="null" />.  

ou 
 <paramref name="ptr" /> n'est pas valide.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr,System.Int32)">
      <summary vsli:raw="Reads a single byte at a given offset (or index) from unmanaged memory.">Lit un seul octet à un offset (ou index) donné dans la mémoire managée.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory from which to read.">Adresse de base dans la mémoire non managée où commencer la lecture.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">Offset d'octet supplémentaire, qui est ajouté au paramètre <paramref name="ptr" /> avant la lecture.</param>
      <returns vsli:raw="The byte read from unmanaged memory at the given offset.">Octet lu dans la mémoire non managée à l'offset donné.</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">L'adresse de base (<paramref name="ptr" />) plus l'octet d'offset (<paramref name="ofs" />) produisent une adresse null ou non valide.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)">
      <summary vsli:raw="Reads a single byte at a given offset (or index) from unmanaged memory.">Lit un seul octet à un offset (ou index) donné dans la mémoire managée.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the source object.">Adresse de base dans la mémoire non managée de l'objet source.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">Offset d'octet supplémentaire, qui est ajouté au paramètre <paramref name="ptr" /> avant la lecture.</param>
      <returns vsli:raw="The byte read from unmanaged memory at the given offset.">Octet lu dans la mémoire non managée à l'offset donné.</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">L'adresse de base (<paramref name="ptr" />) plus l'octet d'offset (<paramref name="ofs" />) produisent une adresse null ou non valide.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> est un objet <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />. Cette méthode n'accepte pas les paramètres <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr)">
      <summary vsli:raw="Reads a 16-bit signed integer from unmanaged memory.">Lit un entier 16 bits signé à partir de la mémoire non managée.</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory from which to read.">Adresse de début de lecture dans la mémoire non managée.</param>
      <returns vsli:raw="The 16-bit signed integer read from unmanaged memory.">Entier signé 16 bits lu dans la mémoire non managée.</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> n'est pas un format reconnu.  

ou - 
<paramref name="ptr" /> a la valeur <see langword="null" />.  

ou - 
<paramref name="ptr" /> n'est pas valide.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr,System.Int32)">
      <summary vsli:raw="Reads a 16-bit signed integer at a given offset from unmanaged memory.">Lit un entier signé 16 bits à un offset donné dans la mémoire non managée.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory from which to read.">Adresse de base dans la mémoire non managée où commencer la lecture.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">Offset d'octet supplémentaire, qui est ajouté au paramètre <paramref name="ptr" /> avant la lecture.</param>
      <returns vsli:raw="The 16-bit signed integer read from unmanaged memory at the given offset.">Entier signé 16 bits lu dans la mémoire non managée à l'offset donné.</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">L'adresse de base (<paramref name="ptr" />) plus l'octet d'offset (<paramref name="ofs" />) produisent une adresse null ou non valide.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.Object,System.Int32)">
      <summary vsli:raw="Reads a 16-bit signed integer at a given offset from unmanaged memory.">Lit un entier signé 16 bits à un offset donné dans la mémoire non managée.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the source object.">Adresse de base dans la mémoire non managée de l'objet source.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">Offset d'octet supplémentaire, qui est ajouté au paramètre <paramref name="ptr" /> avant la lecture.</param>
      <returns vsli:raw="The 16-bit signed integer read from unmanaged memory at the given offset.">Entier signé 16 bits lu dans la mémoire non managée à l'offset donné.</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">L'adresse de base (<paramref name="ptr" />) plus l'octet d'offset (<paramref name="ofs" />) produisent une adresse null ou non valide.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> est un objet <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />. Cette méthode n'accepte pas les paramètres <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr)">
      <summary vsli:raw="Reads a 32-bit signed integer from unmanaged memory.">Lit un entier 32 bits signé à partir de la mémoire non managée.</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory from which to read.">Adresse de début de lecture dans la mémoire non managée.</param>
      <returns vsli:raw="The 32-bit signed integer read from unmanaged memory.">Entier signé 32 bits lu dans la mémoire non managée.</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> n'est pas un format reconnu.  

ou - 
<paramref name="ptr" /> a la valeur <see langword="null" />.  

ou - 
<paramref name="ptr" /> n'est pas valide.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr,System.Int32)">
      <summary vsli:raw="Reads a 32-bit signed integer at a given offset from unmanaged memory.">Lit un entier signé 32 bits à un offset donné dans la mémoire non managée.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory from which to read.">Adresse de base dans la mémoire non managée où commencer la lecture.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">Offset d'octet supplémentaire, qui est ajouté au paramètre <paramref name="ptr" /> avant la lecture.</param>
      <returns vsli:raw="The 32-bit signed integer read from unmanaged memory.">Entier signé 32 bits lu dans la mémoire non managée.</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">L'adresse de base (<paramref name="ptr" />) plus l'octet d'offset (<paramref name="ofs" />) produisent une adresse null ou non valide.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.Object,System.Int32)">
      <summary vsli:raw="Reads a 32-bit signed integer at a given offset from unmanaged memory.">Lit un entier signé 32 bits à un offset donné dans la mémoire non managée.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the source object.">Adresse de base dans la mémoire non managée de l'objet source.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">Offset d'octet supplémentaire, qui est ajouté au paramètre <paramref name="ptr" /> avant la lecture.</param>
      <returns vsli:raw="The 32-bit signed integer read from unmanaged memory at the given offset.">Entier signé 32 bits lu dans la mémoire non managée à l'offset donné.</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">L'adresse de base (<paramref name="ptr" />) plus l'octet d'offset (<paramref name="ofs" />) produisent une adresse null ou non valide.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> est un objet <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />. Cette méthode n'accepte pas les paramètres <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr)">
      <summary vsli:raw="Reads a 64-bit signed integer from unmanaged memory.">Lit un entier 64 bits signé à partir de la mémoire non managée.</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory from which to read.">Adresse de début de lecture dans la mémoire non managée.</param>
      <returns vsli:raw="The 64-bit signed integer read from unmanaged memory.">Entier signé 64 bits lu dans la mémoire non managée.</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> n'est pas un format reconnu.  

ou - 
<paramref name="ptr" /> est <see langword="null" />.  

ou 
 <paramref name="ptr" /> n'est pas valide.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr,System.Int32)">
      <summary vsli:raw="Reads a 64-bit signed integer at a given offset from unmanaged memory.">Lit un entier signé 64 bits à un offset donné dans la mémoire non managée.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory from which to read.">Adresse de base dans la mémoire non managée où commencer la lecture.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">Offset d'octet supplémentaire, qui est ajouté au paramètre <paramref name="ptr" /> avant la lecture.</param>
      <returns vsli:raw="The 64-bit signed integer read from unmanaged memory at the given offset.">Entier signé 64 bits lu dans la mémoire non managée à l'offset donné.</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">L'adresse de base (<paramref name="ptr" />) plus l'octet d'offset (<paramref name="ofs" />) produisent une adresse null ou non valide.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.Object,System.Int32)">
      <summary vsli:raw="Reads a 64-bit signed integer at a given offset from unmanaged memory.">Lit un entier signé 64 bits à un offset donné dans la mémoire non managée.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the source object.">Adresse de base dans la mémoire non managée de l'objet source.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">Offset d'octet supplémentaire, qui est ajouté au paramètre <paramref name="ptr" /> avant la lecture.</param>
      <returns vsli:raw="The 64-bit signed integer read from unmanaged memory at the given offset.">Entier signé 64 bits lu dans la mémoire non managée à l'offset donné.</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">L'adresse de base (<paramref name="ptr" />) plus l'octet d'offset (<paramref name="ofs" />) produisent une adresse null ou non valide.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> est un objet <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />. Cette méthode n'accepte pas les paramètres <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr)">
      <summary vsli:raw="Reads a processor native-sized integer from unmanaged memory.">Lit un entier natif dimensionné par processeur dans la mémoire non managée.</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory from which to read.">Adresse de début de lecture dans la mémoire non managée.</param>
      <returns vsli:raw="The integer read from unmanaged memory. A 32 bit integer is returned on 32 bit machines and a 64 bit integer is returned on 64 bit machines.">Entier lu dans la mémoire non managée. Un entier 32 bits est retourné sur les ordinateurs 32 bits et un entier 64 bits est retourné sur les ordinateurs 64 bits.</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> n'est pas un format reconnu.  

ou - 
<paramref name="ptr" /> a la valeur <see langword="null" />.  

ou - 
<paramref name="ptr" /> n'est pas valide.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr,System.Int32)">
      <summary vsli:raw="Reads a processor native sized integer at a given offset from unmanaged memory.">Lit un entier natif dimensionné par processeur à un offset donné dans la mémoire non managée.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory from which to read.">Adresse de base dans la mémoire non managée où commencer la lecture.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">Offset d'octet supplémentaire, qui est ajouté au paramètre <paramref name="ptr" /> avant la lecture.</param>
      <returns vsli:raw="The integer read from unmanaged memory at the given offset.">Entier lu dans la mémoire non managée à l'offset donné.</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">L'adresse de base (<paramref name="ptr" />) plus l'octet d'offset (<paramref name="ofs" />) produisent une adresse null ou non valide.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.Object,System.Int32)">
      <summary vsli:raw="Reads a processor native sized integer from unmanaged memory.">Lit un entier natif dimensionné par processeur à partir de la mémoire non managée.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the source object.">Adresse de base dans la mémoire non managée de l'objet source.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">Offset d'octet supplémentaire, qui est ajouté au paramètre <paramref name="ptr" /> avant la lecture.</param>
      <returns vsli:raw="The integer read from unmanaged memory at the given offset.">Entier lu dans la mémoire non managée à l'offset donné.</returns>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">L'adresse de base (<paramref name="ptr" />) plus l'octet d'offset (<paramref name="ofs" />) produisent une adresse null ou non valide.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> est un objet <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />. Cette méthode n'accepte pas les paramètres <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem(System.IntPtr,System.Int32)">
      <summary vsli:raw="Resizes a block of memory previously allocated with &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)&quot; /&gt;.">Redimensionne un bloc de mémoire précédemment alloué avec <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)" />.</summary>
      <param name="pv" vsli:raw="A pointer to memory allocated with &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)&quot; /&gt;.">Pointeur vers la mémoire allouée avec <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)" />.</param>
      <param name="cb" vsli:raw="The new size of the allocated block.">Nouvelle taille du bloc alloué.</param>
      <returns vsli:raw="An integer representing the address of the reallocated block of memory. This memory must be released with &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)&quot; /&gt;.">Entier représentant l'adresse du bloc de mémoire réalloué. Cette mémoire doit être libérée avec <see cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" />.</returns>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory to satisfy the request.">La mémoire est insuffisante pour répondre à la demande.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReAllocHGlobal(System.IntPtr,System.IntPtr)">
      <summary vsli:raw="Resizes a block of memory previously allocated with &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)&quot; /&gt;.">Redimensionne un bloc de mémoire précédemment alloué avec <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" />.</summary>
      <param name="pv" vsli:raw="A pointer to memory allocated with &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)&quot; /&gt;.">Pointeur vers la mémoire allouée avec <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" />.</param>
      <param name="cb" vsli:raw="The new size of the allocated block. This is not a pointer; it is the byte count you are requesting, cast to type &lt;see cref=&quot;T:System.IntPtr&quot; /&gt;. If you pass a pointer, it is treated as a size.">Nouvelle taille du bloc alloué. Ce n’est pas un pointeur ; c’est le nombre d’octets que vous demandez, cast vers type <see cref="T:System.IntPtr" />. Si vous passez un pointeur, il est traité comme une taille.</param>
      <returns vsli:raw="A pointer to the reallocated memory. This memory must be released using &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)&quot; /&gt;.">Pointeur vers la mémoire réallouée. Cette mémoire doit être libérée avec <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" />.</returns>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory to satisfy the request.">La mémoire est insuffisante pour répondre à la demande.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)">
      <summary vsli:raw="Decrements the reference count on the specified interface.">Décrémente le décompte de références sur l'interface spécifiée.</summary>
      <param name="pUnk" vsli:raw="The interface to release.">Interface à libérer.</param>
      <returns vsli:raw="The new value of the reference count on the interface specified by the &lt;paramref name=&quot;pUnk&quot; /&gt; parameter.">Nouvelle valeur du décompte de références sur l'interface spécifiée par le paramètre <paramref name="pUnk" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReleaseComObject(System.Object)">
      <summary vsli:raw="Decrements the reference count of the Runtime Callable Wrapper (RCW) associated with the specified COM object.">Décrémente le décompte de références du wrapper RCW Runtime Callable Wrapper associé à l’objet COM indiqué.</summary>
      <param name="o" vsli:raw="The COM object to release.">Objet COM à libérer.</param>
      <returns vsli:raw="The new value of the reference count of the RCW associated with &lt;paramref name=&quot;o&quot; /&gt;. This value is typically zero since the RCW keeps just one reference to the wrapped COM object regardless of the number of managed clients calling it.">Nouvelle valeur du décompte de références du wrapper RCW (Runtime Callable Wrapper) associé à <paramref name="o" />. Cette valeur est généralement zéro puisque le wrapper RCW (Runtime Callable Wrapper) ne conserve qu'une seule référence à l'objet COM inclus dans un wrapper indépendamment du nombre de clients managés qui l'appellent.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; is not a valid COM object.">
        <paramref name="o" /> n'est pas un objet COM valide.</exception>
      <exception cref="T:System.NullReferenceException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="o" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)">
      <summary vsli:raw="Allocates an unmanaged binary string (BSTR) and copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object into it.">Alloue une chaîne binaire (BSTR) non managée et y copie le contenu d’un objet <see cref="T:System.Security.SecureString" /> managé.</summary>
      <param name="s" vsli:raw="The managed object to copy.">Objet managé à copier.</param>
      <returns vsli:raw="The address, in unmanaged memory, where the &lt;paramref name=&quot;s&quot; /&gt; parameter was copied to, or 0 if a null object was supplied.">Adresse, dans la mémoire non managée, où le paramètre <paramref name="s" /> a été copié, ou 0 si un objet null a été fourni.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="s" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">L’ordinateur actuel n’exécute pas Windows 2000 Service Pack 3 ou une version ultérieure.</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">Il n’y a pas suffisamment de mémoire disponible.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object to a block of memory allocated from the unmanaged COM task allocator.">Copie le contenu d’un objet <see cref="T:System.Security.SecureString" /> managé dans un bloc de mémoire alloué à partir de l’allocateur de tâche COM non managé.</summary>
      <param name="s" vsli:raw="The managed object to copy.">Objet managé à copier.</param>
      <returns vsli:raw="The address, in unmanaged memory, where the &lt;paramref name=&quot;s&quot; /&gt; parameter was copied to, or 0 if a null object was supplied.">Adresse, dans la mémoire non managée, où le paramètre <paramref name="s" /> a été copié, ou 0 si un objet null a été fourni.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="s" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">L’ordinateur actuel n’exécute pas Windows 2000 Service Pack 3 ou une version ultérieure.</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">Il n’y a pas suffisamment de mémoire disponible.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object to a block of memory allocated from the unmanaged COM task allocator.">Copie le contenu d’un objet <see cref="T:System.Security.SecureString" /> managé dans un bloc de mémoire alloué à partir de l’allocateur de tâche COM non managé.</summary>
      <param name="s" vsli:raw="The managed object to copy.">Objet managé à copier.</param>
      <returns vsli:raw="The address, in unmanaged memory, where the &lt;paramref name=&quot;s&quot; /&gt; parameter was copied to, or 0 if a null object was supplied.">Adresse, dans la mémoire non managée, où le paramètre <paramref name="s" /> a été copié, ou 0 si un objet null a été fourni.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="s" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">L’ordinateur actuel n’exécute pas Windows 2000 Service Pack 3 ou une version ultérieure.</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">Il n’y a pas suffisamment de mémoire disponible.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; into unmanaged memory, converting into ANSI format as it copies.">Copie le contenu d’un objet <see cref="T:System.Security.SecureString" /> managé dans la mémoire non managée, avec conversion au format ANSI pendant la copie.</summary>
      <param name="s" vsli:raw="The managed object to copy.">Objet managé à copier.</param>
      <returns vsli:raw="The address, in unmanaged memory, to where the &lt;paramref name=&quot;s&quot; /&gt; parameter was copied, or 0 if a null object was supplied.">Adresse (dans la mémoire non managée) où le paramètre <paramref name="s" /> a été copié, ou 0 si un objet null a été fourni.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="s" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">L’ordinateur actuel n’exécute pas Windows 2000 Service Pack 3 ou une version ultérieure.</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">Il n’y a pas suffisamment de mémoire disponible.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object into unmanaged memory.">Copie le contenu d’un objet <see cref="T:System.Security.SecureString" /> managé dans la mémoire non managée.</summary>
      <param name="s" vsli:raw="The managed object to copy.">Objet managé à copier.</param>
      <returns vsli:raw="The address, in unmanaged memory, where &lt;paramref name=&quot;s&quot; /&gt; was copied, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is a &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object whose length is 0.">Adresse, dans la mémoire non managée, où <paramref name="s" /> a été copié, ou 0 si <paramref name="s" /> est un objet <see cref="T:System.Security.SecureString" /> dont la longueur est 0.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="s" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">L’ordinateur actuel n’exécute pas Windows 2000 Service Pack 3 ou une version ultérieure.</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">Il n’y a pas suffisamment de mémoire disponible.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SetComObjectData(System.Object,System.Object,System.Object)">
      <summary vsli:raw="Sets data referenced by the specified key in the specified COM object.">Définit des données référencées par la clé spécifiée dans l'objet COM spécifié.</summary>
      <param name="obj" vsli:raw="The COM object in which to store the data.">Objet COM dans lequel stocker les données.</param>
      <param name="key" vsli:raw="The key in the internal hash table of the COM object in which to store the data.">Clé dans la table de hachage interne de l'objet COM dans lequel stocker les données.</param>
      <param name="data" vsli:raw="The data to set.">Données à définir.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the data was set successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si les données ont été correctement définies ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;obj&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="obj" /> a la valeur <see langword="null" />.  

ou - 
<paramref name="key" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;obj&quot; /&gt; is not a COM object.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;obj&quot; /&gt; is a Windows Runtime object.">
        <paramref name="obj" /> n’est pas un objet COM.  

ou - 
<paramref name="obj" /> est un objet Windows Runtime.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Object)">
      <summary vsli:raw="Returns the unmanaged size of an object in bytes.">Retourne la taille non managée d'un objet en octets.</summary>
      <param name="structure" vsli:raw="The object whose size is to be returned.">Objet dont la taille doit être retournée.</param>
      <returns vsli:raw="The size of the specified object in unmanaged code.">Taille de l'objet spécifié dans le code non managé.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;structure&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="structure" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Type)">
      <summary vsli:raw="Returns the size of an unmanaged type in bytes.">Retourne la taille d'un type non managé en octets.</summary>
      <param name="t" vsli:raw="The type whose size is to be returned.">Type dont la taille doit être retournée.</param>
      <returns vsli:raw="The size of the specified type in unmanaged code.">Taille du type spécifié dans le code non managé.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;t&quot; /&gt; parameter is a generic type definition.">Le paramètre <paramref name="t" /> est une définition de type générique.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;t&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="t" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf``1">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Returns the size of an unmanaged type in bytes.">[Pris en charge dans le .NET Framework 4.5.1 et versions ultérieures]  
 Retourne la taille d'un type non managé en octets.</summary>
      <typeparam name="T" vsli:raw="The type whose size is to be returned.">Type dont la taille doit être retournée.</typeparam>
      <returns vsli:raw="The size, in bytes, of the type that is specified by the &lt;typeparamref name=&quot;T&quot; /&gt; generic type parameter.">Taille, en octets, du type spécifié par le paramètre de type générique <typeparamref name="T" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf``1(``0)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Returns the unmanaged size of an object of a specified type in bytes.">[Pris en charge dans le .NET Framework 4.5.1 et versions ultérieures]  
 Retourne la taille non managée en octets d'un objet d'un type spécifié.</summary>
      <param name="structure" vsli:raw="The object whose size is to be returned.">Objet dont la taille doit être retournée.</param>
      <typeparam name="T" vsli:raw="The type of the &lt;paramref name=&quot;structure&quot; /&gt; parameter.">Type du paramètre <paramref name="structure" />.</typeparam>
      <returns vsli:raw="The size, in bytes, of the specified object in unmanaged code.">Taille, en octets, de l'objet spécifié dans le code non managé.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;structure&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="structure" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToBSTR(System.String)">
      <summary vsli:raw="Allocates a BSTR and copies the contents of a managed &lt;see cref=&quot;T:System.String&quot; /&gt; into it.">Alloue une chaîne BSTR pour y copier le contenu d’un <see cref="T:System.String" /> managé.</summary>
      <param name="s" vsli:raw="The managed string to be copied.">Chaîne managée à copier.</param>
      <returns vsli:raw="An unmanaged pointer to the &lt;see langword=&quot;BSTR&quot; /&gt;, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is null.">Pointeur non managé vers le <see langword="BSTR" /> ou 0 si <paramref name="s" /> a la valeur null.</returns>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">Il n’y a pas suffisamment de mémoire disponible.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The length for &lt;paramref name=&quot;s&quot; /&gt; is out of range.">La longueur de <paramref name="s" /> est hors limites.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.String&quot; /&gt; to a block of memory allocated from the unmanaged COM task allocator.">Copie le contenu d'un <see cref="T:System.String" /> managé dans un bloc de mémoire alloué à partir de l'allocateur de tâche COM non managé.</summary>
      <param name="s" vsli:raw="A managed string to be copied.">Chaîne managée à copier.</param>
      <returns vsli:raw="An integer representing a pointer to the block of memory allocated for the string, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Entier représentant un pointeur vers le bloc de mémoire alloué pour la chaîne, ou 0 si <paramref name="s" /> est <see langword="null" />.</returns>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">Il n’y a pas suffisamment de mémoire disponible.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter exceeds the maximum length allowed by the operating system.">Le paramètre <paramref name="s" /> dépasse la longueur maximale autorisée par le système d'exploitation.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto(System.String)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.String&quot; /&gt; to a block of memory allocated from the unmanaged COM task allocator.">Copie le contenu d'un <see cref="T:System.String" /> managé dans un bloc de mémoire alloué à partir de l'allocateur de tâche COM non managé.</summary>
      <param name="s" vsli:raw="A managed string to be copied.">Chaîne managée à copier.</param>
      <returns vsli:raw="The allocated memory block, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Bloc de mémoire alloué, ou 0 si <paramref name="s" /> est <see langword="null" />.</returns>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">Il n’y a pas suffisamment de mémoire disponible.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The length for &lt;paramref name=&quot;s&quot; /&gt; is out of range.">La longueur de <paramref name="s" /> est hors limites.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni(System.String)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.String&quot; /&gt; to a block of memory allocated from the unmanaged COM task allocator.">Copie le contenu d'un <see cref="T:System.String" /> managé dans un bloc de mémoire alloué à partir de l'allocateur de tâche COM non managé.</summary>
      <param name="s" vsli:raw="A managed string to be copied.">Chaîne managée à copier.</param>
      <returns vsli:raw="An integer representing a pointer to the block of memory allocated for the string, or 0 if s is &lt;see langword=&quot;null&quot; /&gt;.">Entier représentant un pointeur vers le bloc de mémoire alloué pour la chaîne, ou 0 si s est <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter exceeds the maximum length allowed by the operating system.">Le paramètre <paramref name="s" /> dépasse la longueur maximale autorisée par le système d'exploitation.</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">Il n’y a pas suffisamment de mémoire disponible.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUTF8(System.String)">
      <param name="s" vsli:raw="A managed string to be copied." />
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.String&quot; /&gt; into unmanaged memory, converting into ANSI format as it copies.">Copie le contenu d’un objet <see cref="T:System.String" /> managé dans la mémoire non managée, avec conversion au format ANSI pendant la copie.</summary>
      <param name="s" vsli:raw="A managed string to be copied.">Chaîne managée à copier.</param>
      <returns vsli:raw="The address, in unmanaged memory, to where &lt;paramref name=&quot;s&quot; /&gt; was copied, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Adresse, dans la mémoire non managée, où <paramref name="s" /> a été copié, ou 0 si <paramref name="s" /> est <see langword="null" />.</returns>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">Il n’y a pas suffisamment de mémoire disponible.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter exceeds the maximum length allowed by the operating system.">Le paramètre <paramref name="s" /> dépasse la longueur maximale autorisée par le système d'exploitation.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto(System.String)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.String&quot; /&gt; into unmanaged memory, converting into ANSI format if required.">Copie le contenu d'un objet <see cref="T:System.String" /> managé dans la mémoire non managée, avec conversion au format ANSI le cas échéant.</summary>
      <param name="s" vsli:raw="A managed string to be copied.">Chaîne managée à copier.</param>
      <returns vsli:raw="The address, in unmanaged memory, to where the string was copied, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Adresse, dans la mémoire non managée, où la chaîne a été copiée, ou 0 si <paramref name="s" /> est <see langword="null" />.</returns>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">Il n’y a pas suffisamment de mémoire disponible.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalUni(System.String)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.String&quot; /&gt; into unmanaged memory.">Copie le contenu d'un objet <see cref="T:System.String" /> managé dans la mémoire non managée.</summary>
      <param name="s" vsli:raw="A managed string to be copied.">Chaîne managée à copier.</param>
      <returns vsli:raw="The address, in unmanaged memory, to where the &lt;paramref name=&quot;s&quot; /&gt; was copied, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Adresse, dans la mémoire non managée, où <paramref name="s" /> a été copié, ou 0 si <paramref name="s" /> est <see langword="null" />.</returns>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="The method could not allocate enough native heap memory.">La méthode n'a pas pu allouer suffisamment de mémoire de tas natif.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter exceeds the maximum length allowed by the operating system.">Le paramètre <paramref name="s" /> dépasse la longueur maximale autorisée par le système d'exploitation.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StructureToPtr(System.Object,System.IntPtr,System.Boolean)">
      <summary vsli:raw="Marshals data from a managed object to an unmanaged block of memory.">Marshale les données d’un objet managé dans un bloc de mémoire non managée.</summary>
      <param name="structure" vsli:raw="A managed object that holds the data to be marshaled. This object must be a structure or an instance of a formatted class.">Objet managé contenant les données à marshaler. Cet objet doit être une structure ou une instance d'une classe mise en forme.</param>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory, which must be allocated before this method is called.">Pointeur vers un bloc de mémoire non managée qui doit être alloué avant l'appel de cette méthode.</param>
      <param name="fDeleteOld" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to call the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)&quot; /&gt; method on the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before this method copies the data. The block must contain valid data. Note that passing &lt;see langword=&quot;false&quot; /&gt; when the memory block already contains data can lead to a memory leak.">
        <see langword="true" /> pour appeler la méthode <see cref="M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)" /> sur le paramètre <paramref name="ptr" /> avant que cette méthode copie les données. Le bloc doit contenir des données valides. Notez que passer <see langword="false" /> lorsque le bloc de mémoire contient déjà des données peut entraîner une fuite de mémoire.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;structure&quot; /&gt; is a reference type that is not a formatted class.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;structure&quot; /&gt; is an instance of a generic type (in the .NET Framework 4.5 and earlier versions only).">
        <paramref name="structure" /> est un type référence qui n’est pas une classe mise en forme.  

ou - 
<paramref name="structure" /> est une instance d’un type générique (dans le .NET Framework 4.5 et les versions antérieures uniquement).</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StructureToPtr``1(``0,System.IntPtr,System.Boolean)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Marshals data from a managed object of a specified type to an unmanaged block of memory.">[Pris en charge dans le .NET Framework 4.5.1 et versions ultérieures]  
 Marshale les données d'un objet managé d'un type spécifié dans un bloc de mémoire non managée.</summary>
      <param name="structure" vsli:raw="A managed object that holds the data to be marshaled. The object must be a structure or an instance of a formatted class.">Objet managé contenant les données à marshaler. L'objet doit être une structure ou une instance d'une classe mise en forme.</param>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory, which must be allocated before this method is called.">Pointeur vers un bloc de mémoire non managée qui doit être alloué avant l'appel de cette méthode.</param>
      <param name="fDeleteOld" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to call the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)&quot; /&gt; method on the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before this method copies the data. The block must contain valid data. Note that passing &lt;see langword=&quot;false&quot; /&gt; when the memory block already contains data can lead to a memory leak.">
        <see langword="true" /> pour appeler la méthode <see cref="M:System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)" /> sur le paramètre <paramref name="ptr" /> avant que cette méthode copie les données. Le bloc doit contenir des données valides. Notez que passer <see langword="false" /> lorsque le bloc de mémoire contient déjà des données peut entraîner une fuite de mémoire.</param>
      <typeparam name="T" vsli:raw="The type of the managed object.">Type de l'objet managé.</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;structure&quot; /&gt; is a reference type that is not a formatted class.">
        <paramref name="structure" /> est un type référence qui n’est pas une classe mise en forme.</exception>
    </member>
    <member name="F:System.Runtime.InteropServices.Marshal.SystemDefaultCharSize">
      <summary vsli:raw="Represents the default character size on the system; the default is 2 for Unicode systems and 1 for ANSI systems. This field is read-only.">Représente la taille de caractère par défaut dans le système ; il s'agit de la valeur 2 pour les systèmes Unicode et de la valeur 1 pour les systèmes ANSI. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize">
      <summary vsli:raw="Represents the maximum size of a double byte character set (DBCS) size, in bytes, for the current operating system. This field is read-only.">Représente la taille maximale, en octets, d'un jeu de caractères à deux octets (DBSC) pour le système d'exploitation actuel. Ce champ est en lecture seule.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32)">
      <summary vsli:raw="Throws an exception with a specific failure HRESULT value.">Lève une exception avec une valeur HRESULT d'échec spécifique.</summary>
      <param name="errorCode" vsli:raw="The HRESULT corresponding to the desired exception.">HRESULT correspondant à l'exception souhaitée.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)">
      <summary vsli:raw="Throws an exception with a specific failure HRESULT, based on the specified IErrorInfo interface.">Lève une exception avec un HRESULT d’échec spécifique, en fonction de l’interface IErrorInfo.aspx spécifiée.</summary>
      <param name="errorCode" vsli:raw="The HRESULT corresponding to the desired exception.">HRESULT correspondant à l'exception souhaitée.</param>
      <param name="errorInfo" vsli:raw="A pointer to the IErrorInfo interface that provides more information about the error. You can specify &lt;c&gt;IntPtr(0)&lt;/c&gt; to use the current IErrorInfo interface, or &lt;c&gt;IntPtr(-1)&lt;/c&gt; to ignore the current IErrorInfo interface and construct the exception just from the error code.">Pointeur vers l’interface IErrorInfo qui fournit plus d’informations sur l’erreur. Spécifiez <c>IntPtr(0)</c> pour utiliser l’interface IErrorInfo actuelle ou <c>IntPtr(-1)</c> pour ignorer l’interface IErrorInfo actuelle et construire l’exception uniquement à partir du code d’erreur.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement(System.Array,System.Int32)">
      <summary vsli:raw="Gets the address of the element at the specified index inside the specified array.">Obtient l'adresse de l'élément à l'index spécifié dans le tableau spécifié.</summary>
      <param name="arr" vsli:raw="The array that contains the desired element.">Tableau qui contient l'élément souhaité.</param>
      <param name="index" vsli:raw="The index in the &lt;paramref name=&quot;arr&quot; /&gt; parameter of the desired element.">Index dans le paramètre <paramref name="arr" /> de l'élément souhaité.</param>
      <returns vsli:raw="The address of &lt;paramref name=&quot;index&quot; /&gt; inside &lt;paramref name=&quot;arr&quot; /&gt;.">Adresse de <paramref name="index" /> dans <paramref name="arr" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement``1(``0[],System.Int32)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Gets the address of the element at the specified index in an array of a specified type.">[Pris en charge dans le .NET Framework 4.5.1 et versions ultérieures]  
 Obtient l'adresse de l'élément à l'index spécifié dans un tableau du type spécifié.</summary>
      <param name="arr" vsli:raw="The array that contains the desired element.">Tableau qui contient l'élément souhaité.</param>
      <param name="index" vsli:raw="The index of the desired element in the &lt;paramref name=&quot;arr&quot; /&gt; array.">Index de l'élément souhaité dans le tableau <paramref name="arr" />.</param>
      <typeparam name="T" vsli:raw="The type of the array.">Type de tableau.</typeparam>
      <returns vsli:raw="The address of &lt;paramref name=&quot;index&quot; /&gt; in &lt;paramref name=&quot;arr&quot; /&gt;.">Adresse de <paramref name="index" /> dans <paramref name="arr" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Byte)">
      <summary vsli:raw="Writes a single byte value to unmanaged memory.">Écrit une valeur d'octet unique dans la mémoire non managée.</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory to write to.">Adresse où écrire dans la mémoire non managée.</param>
      <param name="val" vsli:raw="The value to write.">Valeur à écrire.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> n'est pas un format reconnu.  

ou - 
<paramref name="ptr" /> est <see langword="null" />.  

ou 
 <paramref name="ptr" /> n'est pas valide.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)">
      <summary vsli:raw="Writes a single byte value to unmanaged memory at a specified offset.">Écrit une valeur d'octet unique dans la mémoire non managée à l'offset spécifié.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory to write to.">Adresse de base où écrire dans la mémoire non managée.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">Offset d'octet supplémentaire, qui est ajouté au paramètre <paramref name="ptr" /> avant l'écriture.</param>
      <param name="val" vsli:raw="The value to write.">Valeur à écrire.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">L'adresse de base (<paramref name="ptr" />) plus l'octet d'offset (<paramref name="ofs" />) produisent une adresse null ou non valide.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.Object,System.Int32,System.Byte)">
      <summary vsli:raw="Writes a single byte value to unmanaged memory at a specified offset.">Écrit une valeur d'octet unique dans la mémoire non managée à l'offset spécifié.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the target object.">Adresse de base dans la mémoire non managée de l'objet cible.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">Offset d'octet supplémentaire, qui est ajouté au paramètre <paramref name="ptr" /> avant l'écriture.</param>
      <param name="val" vsli:raw="The value to write.">Valeur à écrire.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">L'adresse de base (<paramref name="ptr" />) plus l'octet d'offset (<paramref name="ofs" />) produisent une adresse null ou non valide.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> est un objet <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />. Cette méthode n'accepte pas les paramètres <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Char)">
      <summary vsli:raw="Writes a character as a 16-bit integer value to unmanaged memory.">Écrit un caractère en tant que valeur entière 16 bits dans la mémoire non managée.</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory to write to.">Adresse où écrire dans la mémoire non managée.</param>
      <param name="val" vsli:raw="The value to write.">Valeur à écrire.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> n'est pas un format reconnu.  

ou - 
<paramref name="ptr" /> est <see langword="null" />.  

ou - 
<paramref name="ptr" /> n'est pas valide.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int16)">
      <summary vsli:raw="Writes a 16-bit integer value to unmanaged memory.">Écrit une valeur entière 16 bits dans la mémoire non managée.</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory to write to.">Adresse où écrire dans la mémoire non managée.</param>
      <param name="val" vsli:raw="The value to write.">Valeur à écrire.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> n'est pas un format reconnu.  

ou - 
<paramref name="ptr" /> a la valeur <see langword="null" />.  

ou - 
<paramref name="ptr" /> n'est pas valide.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Char)">
      <summary vsli:raw="Writes a 16-bit signed integer value to unmanaged memory at a specified offset.">Écrit une valeur entière signée 16 bits dans la mémoire non managée à un offset spécifié.</summary>
      <param name="ptr" vsli:raw="The base address in the native heap to write to.">Adresse de base où écrire dans le tas natif.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">Offset d'octet supplémentaire, qui est ajouté au paramètre <paramref name="ptr" /> avant l'écriture.</param>
      <param name="val" vsli:raw="The value to write.">Valeur à écrire.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">L'adresse de base (<paramref name="ptr" />) plus l'octet d'offset (<paramref name="ofs" />) produisent une adresse null ou non valide.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Int16)">
      <summary vsli:raw="Writes a 16-bit signed integer value into unmanaged memory at a specified offset.">Écrit une valeur entière signée 16 bits dans la mémoire non managée à l'offset spécifié.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory to write to.">Adresse de base où écrire dans la mémoire non managée.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">Offset d'octet supplémentaire, qui est ajouté au paramètre <paramref name="ptr" /> avant l'écriture.</param>
      <param name="val" vsli:raw="The value to write.">Valeur à écrire.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">L'adresse de base (<paramref name="ptr" />) plus l'octet d'offset (<paramref name="ofs" />) produisent une adresse null ou non valide.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Char)">
      <summary vsli:raw="Writes a 16-bit signed integer value to unmanaged memory at a specified offset.">Écrit une valeur entière signée 16 bits dans la mémoire non managée à un offset spécifié.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the target object.">Adresse de base dans la mémoire non managée de l'objet cible.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">Offset d'octet supplémentaire, qui est ajouté au paramètre <paramref name="ptr" /> avant l'écriture.</param>
      <param name="val" vsli:raw="The value to write.">Valeur à écrire.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">L'adresse de base (<paramref name="ptr" />) plus l'octet d'offset (<paramref name="ofs" />) produisent une adresse null ou non valide.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> est un objet <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />. Cette méthode n'accepte pas les paramètres <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Int16)">
      <summary vsli:raw="Writes a 16-bit signed integer value to unmanaged memory at a specified offset.">Écrit une valeur entière signée 16 bits dans la mémoire non managée à un offset spécifié.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the target object.">Adresse de base dans la mémoire non managée de l'objet cible.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">Offset d'octet supplémentaire, qui est ajouté au paramètre <paramref name="ptr" /> avant l'écriture.</param>
      <param name="val" vsli:raw="The value to write.">Valeur à écrire.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">L'adresse de base (<paramref name="ptr" />) plus l'octet d'offset (<paramref name="ofs" />) produisent une adresse null ou non valide.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> est un objet <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />. Cette méthode n'accepte pas les paramètres <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32)">
      <summary vsli:raw="Writes a 32-bit signed integer value to unmanaged memory.">Écrit une valeur d'entier 32 bits signé dans la mémoire non managée.</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory to write to.">Adresse où écrire dans la mémoire non managée.</param>
      <param name="val" vsli:raw="The value to write.">Valeur à écrire.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> n'est pas un format reconnu.  
ou 
 <paramref name="ptr" /> a la valeur <see langword="null" />.  
ou 
 <paramref name="ptr" /> n'est pas valide.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32,System.Int32)">
      <summary vsli:raw="Writes a 32-bit signed integer value into unmanaged memory at a specified offset.">Écrit une valeur entière signée 32 bits dans la mémoire non managée à l'offset spécifié.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory to write to.">Adresse de base où écrire dans la mémoire non managée.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">Offset d'octet supplémentaire, qui est ajouté au paramètre <paramref name="ptr" /> avant l'écriture.</param>
      <param name="val" vsli:raw="The value to write.">Valeur à écrire.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">L'adresse de base (<paramref name="ptr" />) plus l'octet d'offset (<paramref name="ofs" />) produisent une adresse null ou non valide.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.Object,System.Int32,System.Int32)">
      <summary vsli:raw="Writes a 32-bit signed integer value to unmanaged memory at a specified offset.">Écrit une valeur entière signée 32 bits dans la mémoire non managée à un offset spécifié.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the target object.">Adresse de base dans la mémoire non managée de l'objet cible.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">Offset d'octet supplémentaire, qui est ajouté au paramètre <paramref name="ptr" /> avant l'écriture.</param>
      <param name="val" vsli:raw="The value to write.">Valeur à écrire.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">L'adresse de base (<paramref name="ptr" />) plus l'octet d'offset (<paramref name="ofs" />) produisent une adresse null ou non valide.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> est un objet <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />. Cette méthode n'accepte pas les paramètres <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int32,System.Int64)">
      <summary vsli:raw="Writes a 64-bit signed integer value to unmanaged memory at a specified offset.">Écrit une valeur entière signée 64 bits dans la mémoire non managée à un offset spécifié.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory to write.">Adresse de base de la mémoire non managée à écrire.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">Offset d'octet supplémentaire, qui est ajouté au paramètre <paramref name="ptr" /> avant l'écriture.</param>
      <param name="val" vsli:raw="The value to write.">Valeur à écrire.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">L'adresse de base (<paramref name="ptr" />) plus l'octet d'offset (<paramref name="ofs" />) produisent une adresse null ou non valide.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int64)">
      <summary vsli:raw="Writes a 64-bit signed integer value to unmanaged memory.">Écrit une valeur d'entier 64 bits signé dans la mémoire non managée.</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory to write to.">Adresse où écrire dans la mémoire non managée.</param>
      <param name="val" vsli:raw="The value to write.">Valeur à écrire.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> n'est pas un format reconnu.  

ou - 
<paramref name="ptr" /> est <see langword="null" />.  

ou 
 <paramref name="ptr" /> n'est pas valide.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.Object,System.Int32,System.Int64)">
      <summary vsli:raw="Writes a 64-bit signed integer value to unmanaged memory at a specified offset.">Écrit une valeur entière signée 64 bits dans la mémoire non managée à un offset spécifié.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the target object.">Adresse de base dans la mémoire non managée de l'objet cible.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">Offset d'octet supplémentaire, qui est ajouté au paramètre <paramref name="ptr" /> avant l'écriture.</param>
      <param name="val" vsli:raw="The value to write.">Valeur à écrire.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">L'adresse de base (<paramref name="ptr" />) plus l'octet d'offset (<paramref name="ofs" />) produisent une adresse null ou non valide.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> est un objet <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />. Cette méthode n'accepte pas les paramètres <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.Int32,System.IntPtr)">
      <summary vsli:raw="Writes a processor native-sized integer value to unmanaged memory at a specified offset.">Écrit une valeur entière native dimensionnée par processeur dans la mémoire non managée à l'offset spécifié.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory to write to.">Adresse de base où écrire dans la mémoire non managée.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">Offset d'octet supplémentaire, qui est ajouté au paramètre <paramref name="ptr" /> avant l'écriture.</param>
      <param name="val" vsli:raw="The value to write.">Valeur à écrire.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">L'adresse de base (<paramref name="ptr" />) plus l'octet d'offset (<paramref name="ofs" />) produisent une adresse null ou non valide.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.IntPtr)">
      <summary vsli:raw="Writes a processor native sized integer value into unmanaged memory.">Écrit une valeur entière native dimensionnée par processeur dans la mémoire non managée.</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory to write to.">Adresse où écrire dans la mémoire non managée.</param>
      <param name="val" vsli:raw="The value to write.">Valeur à écrire.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> n'est pas un format reconnu.  

ou - 
<paramref name="ptr" /> est <see langword="null" />.  

ou - 
<paramref name="ptr" /> n'est pas valide.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.Object,System.Int32,System.IntPtr)">
      <summary vsli:raw="Writes a processor native sized integer value to unmanaged memory.">Écrit une valeur entière native dimensionnée par processeur dans la mémoire non managée.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the target object.">Adresse de base dans la mémoire non managée de l'objet cible.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">Offset d'octet supplémentaire, qui est ajouté au paramètre <paramref name="ptr" /> avant l'écriture.</param>
      <param name="val" vsli:raw="The value to write.">Valeur à écrire.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">L'adresse de base (<paramref name="ptr" />) plus l'octet d'offset (<paramref name="ofs" />) produisent une adresse null ou non valide.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> est un objet <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />. Cette méthode n'accepte pas les paramètres <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR(System.IntPtr)">
      <summary vsli:raw="Frees a BSTR pointer that was allocated using the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)&quot; /&gt; method.">Libère un pointeur BSTR qui a été alloué à l’aide de la méthode <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)" />.</summary>
      <param name="s" vsli:raw="The address of the &lt;see langword=&quot;BSTR&quot; /&gt; to free.">Adresse du pointeur <see langword="BSTR" /> à libérer.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi(System.IntPtr)">
      <summary vsli:raw="Frees an unmanaged string pointer that was allocated using the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)&quot; /&gt; method.">Libère un pointeur de chaîne non managé qui a été alloué à l'aide de la méthode <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)" />.</summary>
      <param name="s" vsli:raw="The address of the unmanaged string to free.">Adresse de la chaîne non managée à libérer.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode(System.IntPtr)">
      <summary vsli:raw="Frees an unmanaged string pointer that was allocated using the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)&quot; /&gt; method.">Libère un pointeur de chaîne non managé qui a été alloué à l'aide de la méthode <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)" />.</summary>
      <param name="s" vsli:raw="The address of the unmanaged string to free.">Adresse de la chaîne non managée à libérer.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUTF8(System.IntPtr)">
      <param name="s" vsli:raw="The address of the unmanaged string to free." />
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi(System.IntPtr)">
      <summary vsli:raw="Frees an unmanaged string pointer that was allocated using the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)&quot; /&gt; method.">Libère un pointeur de chaîne non managé qui a été alloué à l'aide de la méthode <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)" />.</summary>
      <param name="s" vsli:raw="The address of the unmanaged string to free.">Adresse de la chaîne non managée à libérer.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode(System.IntPtr)">
      <summary vsli:raw="Frees an unmanaged string pointer that was allocated using the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)&quot; /&gt; method.">Libère un pointeur de chaîne non managé qui a été alloué à l'aide de la méthode <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)" />.</summary>
      <param name="s" vsli:raw="The address of the unmanaged string to free.">Adresse de la chaîne non managée à libérer.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.MarshalAsAttribute">
      <summary vsli:raw="Indicates how to marshal the data between managed and unmanaged code.">Indique comment marshaler les données entre du code managé et du code non managé.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Int16)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.MarshalAsAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.UnmanagedType&quot; /&gt; value.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> avec la valeur <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> spécifiée.</summary>
      <param name="unmanagedType" vsli:raw="The value the data is to be marshaled as.">Valeur sous laquelle les données doivent être marshalées.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.MarshalAsAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.UnmanagedType&quot; /&gt; enumeration member.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> avec le membre de l'énumération <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> spécifié.</summary>
      <param name="unmanagedType" vsli:raw="The value the data is to be marshaled as.">Valeur sous laquelle les données doivent être marshalées.</param>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType">
      <summary vsli:raw="Specifies the element type of the unmanaged &lt;see cref=&quot;F:System.Runtime.InteropServices.UnmanagedType.LPArray&quot; /&gt; or &lt;see cref=&quot;F:System.Runtime.InteropServices.UnmanagedType.ByValArray&quot; /&gt;.">Spécifie le type d'élément des champs <see cref="F:System.Runtime.InteropServices.UnmanagedType.LPArray" /> ou <see cref="F:System.Runtime.InteropServices.UnmanagedType.ByValArray" /> managés.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.IidParameterIndex">
      <summary vsli:raw="Specifies the parameter index of the unmanaged &lt;see langword=&quot;iid_is&quot; /&gt; attribute used by COM.">Spécifie l'index de paramètre de l'attribut <see langword="iid_is" /> non managé utilisé par COM.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie">
      <summary vsli:raw="Provides additional information to a custom marshaler.">Fournit des informations supplémentaires à un marshaleur personnalisé.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType">
      <summary vsli:raw="Specifies the fully qualified name of a custom marshaler.">Spécifie le nom qualifié complet d'un marshaleur personnalisé.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef">
      <summary vsli:raw="Implements &lt;see cref=&quot;F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&quot; /&gt; as a type.">Implémente <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType" /> en tant que type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArraySubType">
      <summary vsli:raw="Indicates the element type of the &lt;see cref=&quot;F:System.Runtime.InteropServices.UnmanagedType.SafeArray&quot; /&gt;.">Indique le type d'élément de <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArrayUserDefinedSubType">
      <summary vsli:raw="Indicates the user-defined element type of the &lt;see cref=&quot;F:System.Runtime.InteropServices.UnmanagedType.SafeArray&quot; /&gt;.">Indique le type d'élément défini par l'utilisateur de <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst">
      <summary vsli:raw="Indicates the number of elements in the fixed-length array or the number of characters (not bytes) in a string to import.">Indique le nombre d'éléments dans le tableau de longueur fixe ou le nombre de caractères (non d'octets) dans une chaîne à importer.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex">
      <summary vsli:raw="Indicates the zero-based parameter that contains the count of array elements, similar to &lt;see langword=&quot;size_is&quot; /&gt; in COM.">Indique le paramètre de base zéro qui contient le nombre d'éléments de tableau, semblable à <see langword="size_is" /> dans COM.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.MarshalAsAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Runtime.InteropServices.UnmanagedType&quot; /&gt; value the data is to be marshaled as.">Obtient la valeur <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> sous laquelle les données doivent être marshalées.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.UnmanagedType&quot; /&gt; value the data is to be marshaled as.">Valeur <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> sous laquelle les données doivent être marshalées.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.MarshalDirectiveException">
      <summary vsli:raw="The exception that is thrown by the marshaler when it encounters a &lt;see cref=&quot;T:System.Runtime.InteropServices.MarshalAsAttribute&quot; /&gt; it does not support.">Exception qui est levée par le marshaleur quand il rencontre un <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> qu'il ne prend pas en charge.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;MarshalDirectiveException&quot; /&gt; class with default properties.">Initialise une nouvelle instance de la classe <see langword="MarshalDirectiveException" /> avec des propriétés par défaut.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;MarshalDirectiveException&quot; /&gt; class from serialization data.">Initialise une nouvelle instance de la classe <see langword="MarshalDirectiveException" /> à partir de données de sérialisation.</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">Objet qui contient les données sérialisées de l'objet.</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">Informations contextuelles sur la source ou la destination.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;MarshalDirectiveException&quot; /&gt; class with a specified error message.">Initialise une nouvelle instance de la classe <see langword="MarshalDirectiveException" /> avec un message d'erreur spécifié.</summary>
      <param name="message" vsli:raw="The error message that specifies the reason for the exception.">Message d'erreur qui spécifie la raison de l'exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.MarshalDirectiveException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.MarshalDirectiveException" /> avec un message d'erreur spécifié et une référence à l'exception interne ayant provoqué cette exception.</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">Message d'erreur qui explique la raison de l'exception.</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">Exception ayant provoqué l'exception actuelle. Si le paramètre <paramref name="inner" /> n'est pas <see langword="null" />, l'exception actuelle est levée dans un bloc <see langword="catch" /> qui gère l'exception interne.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.NativeLibrary">
      <summary vsli:raw="Provides APIs for managing native libraries.">Fournit des API pour la gestion des bibliothèques natives.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.Free(System.IntPtr)">
      <summary vsli:raw="Frees a loaded library with the specified OS handle, or takes no action if the input handle is &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt;.">Libère un descripteur donné de la bibliothèque chargée, ou n’effectue aucune action si le descripteur en entrée est <see cref="F:System.IntPtr.Zero" />.</summary>
      <param name="handle" vsli:raw="The native library OS handle to be freed.">Le descripteur de la bibliothèque native à libérer.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.GetExport(System.IntPtr,System.String)">
      <summary vsli:raw="Gets the address of an exported symbol.">Obtient l’adresse d’un symbole exporté.</summary>
      <param name="handle" vsli:raw="The native library OS handle.">Descripteur de la bibliothèque native.</param>
      <param name="name" vsli:raw="The name of the exported symbol.">Nom du symbole exporté.</param>
      <returns vsli:raw="The address of the symbol.">Adresse du symbole.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;handle&quot; /&gt; is &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt; or &lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="handle" /> ou <paramref name="name" /> est <see langword="null" />.</exception>
      <exception cref="T:System.EntryPointNotFoundException" vsli:raw="The symbol is not found.">Le symbole est introuvable.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.Load(System.String)">
      <summary vsli:raw="Provides a simple API for loading a native library that wraps the OS loader and uses default flags.">Fournit une API simple pour le chargement d’une bibliothèque native qui encapsule le chargeur du système d’exploitation et utilise des indicateurs par défaut.</summary>
      <param name="libraryPath" vsli:raw="The name of the native library to be loaded.">Nom de la bibliothèque native à charger.</param>
      <returns vsli:raw="The OS handle for the loaded native library.">Le descripteur de la bibliothèque native chargée.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;libraryPath&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="libraryPath" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.DllNotFoundException" vsli:raw="The library can't be found.">La bibliothèque est introuvable.</exception>
      <exception cref="T:System.BadImageFormatException" vsli:raw="The library is not valid.">La bibliothèque n’est pas valide.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.Load(System.String,System.Reflection.Assembly,System.Nullable{System.Runtime.InteropServices.DllImportSearchPath})">
      <summary vsli:raw="Provides a high-level API for loading a native library.">Fournit une API de haut niveau pour le chargement d’une bibliothèque native.</summary>
      <param name="libraryName" vsli:raw="The name of the native library to be loaded.">Nom de la bibliothèque native à charger.</param>
      <param name="assembly" vsli:raw="The assembly loading the native library.">Assembly chargeant la bibliothèque native.</param>
      <param name="searchPath" vsli:raw="The search path.">Chemin de recherche.</param>
      <returns vsli:raw="The OS handle for the loaded library.">Descripteur de la bibliothèque chargée.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;libraryName&quot; /&gt; or &lt;paramref name=&quot;assembly&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="libraryName" /> ou <paramref name="assembly" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;assembly&quot; /&gt; is not a &lt;see langword=&quot;RuntimeAssembly&quot; /&gt;.">
        <paramref name="assembly" /> n’est pas un <see langword="RuntimeAssembly" />.</exception>
      <exception cref="T:System.DllNotFoundException" vsli:raw="The library can't be found.">La bibliothèque est introuvable.</exception>
      <exception cref="T:System.BadImageFormatException" vsli:raw="The library is not valid.">La bibliothèque n’est pas valide.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.SetDllImportResolver(System.Reflection.Assembly,System.Runtime.InteropServices.DllImportResolver)">
      <summary vsli:raw="Sets a callback for resolving native library imports from an assembly.">Définit un rappel pour la résolution des importations de bibliothèque native à partir d’un assembly.</summary>
      <param name="assembly" vsli:raw="The assembly for which the resolver is registered.">Assembly pour lequel le résolveur est inscrit.</param>
      <param name="resolver" vsli:raw="The resolver callback to register.">Rappel du résolveur à inscrire.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;assembly&quot; /&gt; or &lt;paramref name=&quot;resolver&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="assembly" /> ou paramref name="resolver" /&gt; est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A resolver is already set for this assembly.">Un résolveur est déjà défini pour cet assembly.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.TryGetExport(System.IntPtr,System.String,System.IntPtr@)">
      <summary vsli:raw="Gets the address of an exported symbol and returns a value that indicates whether the method call succeeded.">Obtient l’adresse d’un symbole exporté et retourne une valeur qui indique si l’appel de méthode a réussi.</summary>
      <param name="handle" vsli:raw="The native library OS handle.">Descripteur de la bibliothèque native.</param>
      <param name="name" vsli:raw="The name of the exported symbol.">Nom du symbole exporté.</param>
      <param name="address" vsli:raw="When the method returns, contains the symbol address, if it exists.">Quand la méthode retourne, contient l’adresse du symbole, s’il existe.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the address of the exported symbol was found successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la méthode a retourné correctement ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;handle&quot; /&gt; is &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt; or &lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="handle" /> ou <paramref name="name" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.TryLoad(System.String,System.IntPtr@)">
      <summary vsli:raw="Provides a simple API for loading a native library and returns a value that indicates whether the operation succeeded.">Fournit une API simple pour le chargement d’une bibliothèque native et retourne une valeur qui indique si l’opération a réussi.</summary>
      <param name="libraryPath" vsli:raw="The name of the native library to be loaded.">Nom de la bibliothèque native à charger.</param>
      <param name="handle" vsli:raw="When the method returns, the OS handle of the loaded native library.">Quand la méthode retourne, le descripteur de la bibliothèque native chargée.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the native library was loaded successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la bibliothèque native a été chargée correctement ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;libraryPath&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="libraryPath" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.TryLoad(System.String,System.Reflection.Assembly,System.Nullable{System.Runtime.InteropServices.DllImportSearchPath},System.IntPtr@)">
      <summary vsli:raw="Provides a high-level API that loads a native library and returns a value that indicates whether the operation succeeded.">Fournit une API de haut niveau qui charge une bibliothèque native et retourne une valeur qui indique si l’opération a réussi.</summary>
      <param name="libraryName" vsli:raw="The name of the native library to be loaded.">Nom de la bibliothèque native à charger.</param>
      <param name="assembly" vsli:raw="The assembly loading the native library.">Assembly chargeant la bibliothèque native.</param>
      <param name="searchPath" vsli:raw="The search path.">Chemin de recherche.</param>
      <param name="handle" vsli:raw="When the method returns, the OS handle of the loaded native library.">Quand la méthode retourne, le descripteur de la bibliothèque native chargée.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the native library was loaded successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’opération de chargement a réussi ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;libraryPath&quot; /&gt; or &lt;paramref name=&quot;assembly&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="libraryPath" /> ou <paramref name="assembly" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;assembly&quot; /&gt; is not a &lt;see langword=&quot;RuntimeAssembly&quot; /&gt;.">
        <paramref name="assembly" /> n’est pas un <see langword="RuntimeAssembly" />.</exception>
    </member>
    <member name="T:System.Runtime.InteropServices.OptionalAttribute">
      <summary vsli:raw="Indicates that a parameter is optional.">Indique qu'un paramètre est facultatif.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.OptionalAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;OptionalAttribute&quot; /&gt; class with default values.">Initialise une nouvelle instance de la classe <see langword="OptionalAttribute" /> avec des valeurs par défaut.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.PreserveSigAttribute">
      <summary vsli:raw="Indicates that the HRESULT signature transformation that takes place during COM interop calls should be suppressed.">Indique que la transformation de signature HRESULT ou <see langword="retval" /> qui a lieu durant les appels COM Interop doit être supprimée.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.PreserveSigAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.PreserveSigAttribute&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.PreserveSigAttribute" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute">
      <summary vsli:raw="Indicates that the attributed assembly is a primary interop assembly.">Indique que l'assembly avec attributs est un assembly PIA (Primary Interop Assembly).</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.#ctor(System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute&quot; /&gt; class with the major and minor version numbers of the type library for which this assembly is the primary interop assembly.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute" /> avec les numéros de versions principale et secondaire de la bibliothèque de types pour laquelle l'assembly est l'assembly PIA (Primary Interop Assembly).</summary>
      <param name="major" vsli:raw="The major version of the type library for which this assembly is the primary interop assembly.">Version principale de la bibliothèque de types pour laquelle cet assembly est l'assembly PIA (Primary Interop Assembly).</param>
      <param name="minor" vsli:raw="The minor version of the type library for which this assembly is the primary interop assembly.">Version secondaire de la bibliothèque de types pour laquelle cet assembly est l'assembly PIA (Primary Interop Assembly).</param>
    </member>
    <member name="P:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.MajorVersion">
      <summary vsli:raw="Gets the major version number of the type library for which this assembly is the primary interop assembly.">Obtient le numéro de version principale de la bibliothèque de types pour laquelle cet assembly est l'assembly PIA (Primary Interop Assembly).</summary>
      <returns vsli:raw="The major version number of the type library for which this assembly is the primary interop assembly.">Numéro de version principale de la bibliothèque de types pour laquelle cet assembly est l'assembly PIA (Primary Interop Assembly).</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.MinorVersion">
      <summary vsli:raw="Gets the minor version number of the type library for which this assembly is the primary interop assembly.">Obtient le numéro de version secondaire de la bibliothèque de types pour laquelle cet assembly est l'assembly PIA (Primary Interop Assembly).</summary>
      <returns vsli:raw="The minor version number of the type library for which this assembly is the primary interop assembly.">Numéro de version secondaire de la bibliothèque de types pour laquelle cet assembly est l'assembly PIA (Primary Interop Assembly).</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ProgIdAttribute">
      <summary vsli:raw="Allows the user to specify the ProgID of a class.">Permet à l'utilisateur de spécifier le ProgID d'une classe.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ProgIdAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;ProgIdAttribute&quot; /&gt; with the specified ProgID.">Initialise une nouvelle instance de <see langword="ProgIdAttribute" /> avec le ProgID spécifié.</summary>
      <param name="progId" vsli:raw="The ProgID to be assigned to the class.">ProgID à assigner à la classe.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ProgIdAttribute.Value">
      <summary vsli:raw="Gets the ProgID of the class.">Obtient le ProgID de la classe.</summary>
      <returns vsli:raw="The ProgID of the class.">ProgID de la classe.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.RuntimeEnvironment">
      <summary vsli:raw="Provides a collection of &lt;see langword=&quot;static&quot; /&gt; methods that return information about the common language runtime environment.">Fournit une collection de méthodes <see langword="static" /> qui retournent des informations sur l’environnement du Common Language Runtime.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.FromGlobalAccessCache(System.Reflection.Assembly)">
      <summary vsli:raw="Tests whether the specified assembly is loaded in the global assembly cache.">Teste si l’assembly spécifié est chargé dans le Global Assembly Cache.</summary>
      <param name="a" vsli:raw="The assembly to test.">Assembly à tester.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the assembly is loaded in the global assembly cache; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l’assembly est chargé dans le Global Assembly Cache ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeDirectory">
      <summary vsli:raw="Returns the directory where the common language runtime is installed.">Retourne le répertoire d’installation du Common Language Runtime.</summary>
      <returns vsli:raw="A string that contains the path to the directory where the common language runtime is installed.">Chaîne qui contient le chemin du répertoire d’installation du Common Language Runtime.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeInterfaceAsIntPtr(System.Guid,System.Guid)">
      <summary vsli:raw="Returns the specified interface on the specified class.">Retourne l’interface spécifiée pour la classe spécifiée.</summary>
      <param name="clsid" vsli:raw="The identifier for the desired class.">Identificateur de la classe souhaitée.</param>
      <param name="riid" vsli:raw="The identifier for the desired interface.">Identificateur de l’interface souhaitée.</param>
      <returns vsli:raw="An unmanaged pointer to the requested interface.">Pointeur non managé vers l’interface demandée.</returns>
      <exception cref="T:System.Runtime.InteropServices.COMException" vsli:raw="IUnknown::QueryInterface failure.">Échec de IUnknown::QueryInterface.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeInterfaceAsObject(System.Guid,System.Guid)">
      <summary vsli:raw="Returns an instance of a type that represents a COM object by a pointer to its &lt;see langword=&quot;IUnknown&quot; /&gt; interface.">Retourne une instance d’un type qui représente un objet COM par un pointeur vers son interface <see langword="IUnknown" />.</summary>
      <param name="clsid" vsli:raw="The identifier for the desired class.">Identificateur de la classe souhaitée.</param>
      <param name="riid" vsli:raw="The identifier for the desired interface.">Identificateur de l’interface souhaitée.</param>
      <returns vsli:raw="An object that represents the specified unmanaged COM object.">Objet qui représente l'objet COM non managé spécifié.</returns>
      <exception cref="T:System.Runtime.InteropServices.COMException" vsli:raw="IUnknown::QueryInterface failure.">Échec de IUnknown::QueryInterface.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetSystemVersion">
      <summary vsli:raw="Gets the version number of the common language runtime that's running the current process.">Obtient le numéro de version du Common Language Runtime qui exécute le processus actif.</summary>
      <returns vsli:raw="A string containing the version number of the common language runtime.">Chaîne contenant le numéro de version du Common Language Runtime.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.RuntimeEnvironment.SystemConfigurationFile">
      <summary vsli:raw="Gets the path to the system configuration file.">Obtient le chemin du fichier de configuration système.</summary>
      <returns vsli:raw="The path to the system configuration file.">Chemin d'accès au fichier de configuration système.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeArrayRankMismatchException">
      <summary vsli:raw="The exception thrown when the rank of an incoming &lt;see langword=&quot;SAFEARRAY&quot; /&gt; does not match the rank specified in the managed signature.">Exception levée lorsque le rang d'un <see langword="SAFEARRAY" /> entrant ne correspond pas au rang spécifié dans la signature managée.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;SafeArrayTypeMismatchException&quot; /&gt; class with default values.">Initialise une nouvelle instance de la classe <see langword="SafeArrayTypeMismatchException" /> avec des valeurs par défaut.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;SafeArrayTypeMismatchException&quot; /&gt; class from serialization data.">Initialise une nouvelle instance de la classe <see langword="SafeArrayTypeMismatchException" /> à partir de données de sérialisation.</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">Objet qui contient les données sérialisées de l'objet.</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">Informations contextuelles sur la source ou la destination.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;SafeArrayRankMismatchException&quot; /&gt; class with the specified message.">Initialise une nouvelle instance de la classe <see langword="SafeArrayRankMismatchException" /> avec le message spécifié.</summary>
      <param name="message" vsli:raw="The message that indicates the reason for the exception.">Message qui indique la raison de l'exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.SafeArrayRankMismatchException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.SafeArrayRankMismatchException" /> avec un message d'erreur spécifié et une référence à l'exception interne ayant provoqué cette exception.</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">Message d'erreur qui explique la raison de l'exception.</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">Exception ayant provoqué l'exception actuelle. Si le paramètre <paramref name="inner" /> n'est pas <see langword="null" />, l'exception actuelle est levée dans un bloc <see langword="catch" /> qui gère l'exception interne.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeArrayTypeMismatchException">
      <summary vsli:raw="The exception thrown when the type of the incoming &lt;see langword=&quot;SAFEARRAY&quot; /&gt; does not match the type specified in the managed signature.">Exception levée lorsque le type du <see langword="SAFEARRAY" /> entrant ne correspond pas au type spécifié dans la signature managée.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;SafeArrayTypeMismatchException&quot; /&gt; class with default values.">Initialise une nouvelle instance de la classe <see langword="SafeArrayTypeMismatchException" /> avec des valeurs par défaut.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;SafeArrayTypeMismatchException&quot; /&gt; class from serialization data.">Initialise une nouvelle instance de la classe <see langword="SafeArrayTypeMismatchException" /> à partir de données de sérialisation.</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">Objet qui contient les données sérialisées de l'objet.</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">Informations contextuelles sur la source ou la destination.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;SafeArrayTypeMismatchException&quot; /&gt; class with the specified message.">Initialise une nouvelle instance de la classe <see langword="SafeArrayTypeMismatchException" /> avec le message spécifié.</summary>
      <param name="message" vsli:raw="The message that indicates the reason for the exception.">Message qui indique la raison de l'exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.SafeArrayTypeMismatchException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.SafeArrayTypeMismatchException" /> avec un message d'erreur spécifié et une référence à l'exception interne ayant provoqué cette exception.</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">Message d'erreur qui explique la raison de l'exception.</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">Exception ayant provoqué l'exception actuelle. Si le paramètre <paramref name="inner" /> n'est pas <see langword="null" />, l'exception actuelle est levée dans un bloc <see langword="catch" /> qui gère l'exception interne.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeBuffer">
      <summary>Fournit une mémoire tampon contrôlée qui peut être utilisée pour la lecture et l'écriture. Toute tentative d'accès à la mémoire en dehors de la mémoire tampon contrôlée (sous-utilisation et dépassement) entraîne la levée d'exceptions.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.#ctor(System.Boolean)">
      <summary>Crée une instance de la classe <see cref="T:System.Runtime.InteropServices.SafeBuffer" /> et spécifie si le handle de tampon doit être libéré de manière fiable.</summary>
      <param name="ownsHandle">
        <see langword="true" /> pour libérer de manière fiable le handle pendant la phase de finalisation ; sinon, <see langword="false" /> pour empêcher une libération fiable (déconseillé).</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)">
      <summary>Obtient un pointeur à partir d'un objet <see cref="T:System.Runtime.InteropServices.SafeBuffer" /> pour un bloc de mémoire.</summary>
      <param name="pointer">Pointeur d'octet, passé par référence, pour recevoir le pointeur à partir de l'objet <see cref="T:System.Runtime.InteropServices.SafeBuffer" />. Vous devez affecter la valeur <see langword="null" /> à ce pointeur avant d'appeler cette méthode.</param>
      <exception cref="T:System.InvalidOperationException">La méthode <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> n'a pas été appelée.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.SafeBuffer.ByteLength">
      <summary>Obtient la taille du tampon, en octets.</summary>
      <returns>Nombre d'octets dans le tampon de mémoire.</returns>
      <exception cref="T:System.InvalidOperationException">La méthode <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> n'a pas été appelée.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)">
      <summary>Spécifie la taille d'allocation du tampon de mémoire à l'aide du nombre spécifié d'éléments et de la taille des éléments. Vous devez appeler cette méthode avant d'utiliser l'instance <see cref="T:System.Runtime.InteropServices.SafeBuffer" />.</summary>
      <param name="numElements">Nombre d'éléments contenus dans la mémoire tampon.</param>
      <param name="sizeOfEachElement">Taille de chaque élément dans le tampon.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="numElements" /> est inférieur à zéro.  
ou 
 <paramref name="sizeOfEachElement" /> est inférieur à zéro.  

ou - 
<paramref name="numElements" /> multiplié par <paramref name="sizeOfEachElement" /> est supérieur à l'espace d'adressage disponible.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)">
      <summary>Définit la taille d'allocation de la région de mémoire en octets. Vous devez appeler cette méthode avant d'utiliser l'instance <see cref="T:System.Runtime.InteropServices.SafeBuffer" />.</summary>
      <param name="numBytes">Nombre d'octets dans la mémoire tampon.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="numBytes" /> est inférieur à zéro.  

ou - 
<paramref name="numBytes" /> est supérieur à l'espace d'adressage disponible.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Initialize``1(System.UInt32)">
      <summary>Définit la taille d'allocation de la région de mémoire en spécifiant le nombre de types valeur. Vous devez appeler cette méthode avant d'utiliser l'instance <see cref="T:System.Runtime.InteropServices.SafeBuffer" />.</summary>
      <param name="numElements">Nombre d'éléments du type valeur pour lequel il faut allouer de la mémoire.</param>
      <typeparam name="T">Type valeur pour lequel il faut allouer de la mémoire.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="numElements" /> est inférieur à zéro.  
ou 
 <paramref name="numElements" /> multiplié par la taille de chaque élément est supérieur à l'espace d'adressage disponible.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)">
      <summary>Lit un type valeur dans la mémoire à l'offset spécifié.</summary>
      <param name="byteOffset">Emplacement à partir duquel le type valeur doit être lu. Vous devrez peut-être tenir compte des problèmes d'alignement.</param>
      <typeparam name="T">Type valeur à lire.</typeparam>
      <returns>Type valeur lu dans la mémoire.</returns>
      <exception cref="T:System.InvalidOperationException">La méthode <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> n'a pas été appelée.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
      <summary>Lit le nombre spécifié de types valeur dans la mémoire à partir de l'offset indiqué, puis les écrit dans un tableau à partir de l'index indiqué.</summary>
      <param name="byteOffset">Emplacement de démarrage de la lecture.</param>
      <param name="array">Tableau de sortie où écrire.</param>
      <param name="index">Emplacement de démarrage de l'écriture dans le tableau de sortie.</param>
      <param name="count">Nombre de types valeur à lire dans le tableau d'entrée et à écrire dans le tableau de sortie.</param>
      <typeparam name="T">Type valeur à lire.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> est inférieur à zéro.  
ou 
 <paramref name="count" /> est inférieur à zéro.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">La longueur du tableau moins l'index est inférieure à <paramref name="count" />.</exception>
      <exception cref="T:System.InvalidOperationException">La méthode <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> n'a pas été appelée.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.ReleasePointer">
      <summary>Libère un pointeur obtenu par la méthode <see cref="M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)" />.</summary>
      <exception cref="T:System.InvalidOperationException">La méthode <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> n'a pas été appelée.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)">
      <summary>Écrit un type valeur dans la mémoire à l'emplacement donné.</summary>
      <param name="byteOffset">Emplacement où démarrer l'écriture. Vous devrez peut-être tenir compte des problèmes d'alignement.</param>
      <param name="value">Valeur à écrire.</param>
      <typeparam name="T">Type valeur à écrire.</typeparam>
      <exception cref="T:System.InvalidOperationException">La méthode <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> n'a pas été appelée.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
      <summary>Écrit le nombre spécifié de types valeur dans un emplacement de mémoire en lisant les octets qui commencent à partir de l'emplacement spécifié dans le tableau d'entrée.</summary>
      <param name="byteOffset">Emplacement où écrire dans la mémoire.</param>
      <param name="array">Tableau d'entrée.</param>
      <param name="index">Offset de démarrage de la lecture dans le tableau.</param>
      <param name="count">Nombre de types valeur à écrire.</param>
      <typeparam name="T">Type valeur à écrire.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> ou <paramref name="count" /> est inférieur à zéro.</exception>
      <exception cref="T:System.ArgumentException">La longueur du tableau d'entrée moins <paramref name="index" /> est inférieure à <paramref name="count" />.</exception>
      <exception cref="T:System.InvalidOperationException">La méthode <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> n'a pas été appelée.</exception>
    </member>
    <member name="T:System.Runtime.InteropServices.SEHException">
      <summary vsli:raw="Represents structured exception handling (SEH) errors.">Représente des erreurs SEH (Structured Exception Handling).</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.SEHException&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.SEHException" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.SEHException&quot; /&gt; class from serialization data.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.SEHException" /> à partir de données de sérialisation.</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">Objet qui contient les données sérialisées de l'objet.</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">Informations contextuelles sur la source ou la destination.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.SEHException&quot; /&gt; class with a specified message.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.SEHException" /> avec le message spécifié.</summary>
      <param name="message" vsli:raw="The message that indicates the reason for the exception.">Message qui indique la raison de l'exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.SEHException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.SEHException" /> avec un message d'erreur spécifié et une référence à l'exception interne ayant provoqué cette exception.</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">Message d'erreur qui explique la raison de l'exception.</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">Exception ayant provoqué l'exception actuelle. Si le paramètre <paramref name="inner" /> n'est pas <see langword="null" />, l'exception actuelle est levée dans un bloc <see langword="catch" /> qui gère l'exception interne.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.CanResume">
      <summary vsli:raw="Indicates whether the exception can be recovered from, and whether the code can continue from the point at which the exception was thrown.">Indique si l'exception est récupérable et si l'exécution du code peut se poursuivre à partir de l'emplacement où l'exception a été levée.</summary>
      <returns vsli:raw="Always &lt;see langword=&quot;false&quot; /&gt;, because resumable exceptions are not implemented.">Toujours <see langword="false" />, car les exceptions susceptibles d'être récupérées ne sont pas implémentées.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.StandardOleMarshalObject">
      <summary vsli:raw="Replaces the standard common language runtime (CLR) free-threaded marshaler with the standard OLE STA marshaler.">Remplace le marshaleur libre de threads (FTM) standard du Common Language Runtime par le marshaleur STA OLE standard.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.StandardOleMarshalObject.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.StandardOleMarshalObject&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.StandardOleMarshalObject" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeIdentifierAttribute">
      <summary vsli:raw="Provides support for type equivalence.">Prend en charge l'équivalence de type.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor">
      <summary vsli:raw="Creates a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeIdentifierAttribute&quot; /&gt; class.">Crée une instance de la classe <see cref="T:System.Runtime.InteropServices.TypeIdentifierAttribute" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)">
      <summary vsli:raw="Creates a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeIdentifierAttribute&quot; /&gt; class with the specified scope and identifier.">Crée une instance de la classe <see cref="T:System.Runtime.InteropServices.TypeIdentifierAttribute" /> avec la portée et l'identificateur spécifiés.</summary>
      <param name="scope" vsli:raw="The first type equivalence string.">Première chaîne d'équivalence de type.</param>
      <param name="identifier" vsli:raw="The second type equivalence string.">Seconde chaîne d'équivalence de type.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeIdentifierAttribute.Identifier">
      <summary vsli:raw="Gets the value of the &lt;paramref name=&quot;identifier&quot; /&gt; parameter that was passed to the &lt;see cref=&quot;M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)&quot; /&gt; constructor.">Obtient la valeur du paramètre <paramref name="identifier" /> passé au constructeur <see cref="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)" />.</summary>
      <returns vsli:raw="The value of the constructor's &lt;paramref name=&quot;identifier&quot; /&gt; parameter.">Valeur du paramètre <paramref name="identifier" /> du constructeur.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeIdentifierAttribute.Scope">
      <summary vsli:raw="Gets the value of the &lt;paramref name=&quot;scope&quot; /&gt; parameter that was passed to the &lt;see cref=&quot;M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)&quot; /&gt; constructor.">Obtient la valeur du paramètre <paramref name="scope" /> passé au constructeur <see cref="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)" />.</summary>
      <returns vsli:raw="The value of the constructor's &lt;paramref name=&quot;scope&quot; /&gt; parameter.">Valeur du paramètre <paramref name="scope" /> du constructeur.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibFuncAttribute">
      <summary vsli:raw="Contains the &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCFLAGS&quot; /&gt; that were originally imported for this method from the COM type library.">Contient les <see cref="T:System.Runtime.InteropServices.FUNCFLAGS" /> importés à l'origine pour cette méthode à partir de la bibliothèque de types COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibFuncAttribute.#ctor(System.Int16)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;TypeLibFuncAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibFuncFlags&quot; /&gt; value.">Initialise une nouvelle instance de la classe <see langword="TypeLibFuncAttribute" /> avec la valeur <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> spécifiée.</summary>
      <param name="flags" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibFuncFlags&quot; /&gt; value for the attributed method as found in the type library it was imported from.">Valeur <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> de la méthode avec attributs, telle qu'elle figure dans la bibliothèque de types à partir de laquelle elle a été importée.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibFuncAttribute.#ctor(System.Runtime.InteropServices.TypeLibFuncFlags)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;TypeLibFuncAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibFuncFlags&quot; /&gt; value.">Initialise une nouvelle instance de la classe <see langword="TypeLibFuncAttribute" /> avec la valeur <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> spécifiée.</summary>
      <param name="flags" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibFuncFlags&quot; /&gt; value for the attributed method as found in the type library it was imported from.">Valeur <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> de la méthode avec attributs, telle qu'elle figure dans la bibliothèque de types à partir de laquelle elle a été importée.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibFuncAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibFuncFlags&quot; /&gt; value for this method.">Obtient la valeur <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> de cette méthode.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibFuncFlags&quot; /&gt; value for this method.">Valeur <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> de cette méthode.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibFuncFlags">
      <summary vsli:raw="Describes the original settings of the &lt;see langword=&quot;FUNCFLAGS&quot; /&gt; in the COM type library from where this method was imported.">Décrit les paramètres d'origine de <see langword="FUNCFLAGS" /> dans la bibliothèque de types COM à partir de l'endroit où cette méthode a été importée.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FBindable">
      <summary vsli:raw="The function that supports data binding.">Fonction qui prend en charge la liaison de données.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FDefaultBind">
      <summary vsli:raw="The function that best represents the object. Only one function in a type information can have this attribute.">Fonction qui représente le mieux l'objet. Seule une fonction d'informations de type peut avoir cet attribut.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FDefaultCollelem">
      <summary vsli:raw="Permits an optimization in which the compiler looks for a member named &quot;xyz&quot; on the type &quot;abc&quot;. If such a member is found and is flagged as an accessor function for an element of the default collection, then a call is generated to that member function.">Permet une optimisation dans laquelle le compilateur recherche un membre nommé « xyz » sur le type « abc ». Si ce membre est trouvé et s’il est marqué comme fonction d’accesseur pour un élément de la collection par défaut, un appel à cette fonction membre est généré.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FDisplayBind">
      <summary vsli:raw="The function that is displayed to the user as bindable. &lt;see cref=&quot;F:System.Runtime.InteropServices.TypeLibFuncFlags.FBindable&quot; /&gt; must also be set.">Fonction qui est affichée à l'utilisateur comme pouvant être liée. Vous devez également définir <see cref="F:System.Runtime.InteropServices.TypeLibFuncFlags.FBindable" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FHidden">
      <summary vsli:raw="The function should not be displayed to the user, although it exists and is bindable.">La fonction existe et elle peut être liée mais elle ne doit pas être visible à l'utilisateur.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FImmediateBind">
      <summary vsli:raw="The function is mapped as individual bindable properties.">La fonction est mappée comme des propriétés individuelles pouvant être liées.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FNonBrowsable">
      <summary vsli:raw="The property appears in an object browser, but not in a properties browser.">La propriété est affichée dans un explorateur d'objets, mais pas dans un explorateur de propriétés.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FReplaceable">
      <summary vsli:raw="Tags the interface as having default behaviors.">Marque l’interface comme ayant des comportements par défaut.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FRequestEdit">
      <summary vsli:raw="When set, any call to a method that sets the property results first in a call to &lt;see langword=&quot;IPropertyNotifySink::OnRequestEdit&quot; /&gt;.">Lorsque défini, tout appel à une méthode définissant la propriété résulte d'abord en un appel à <see langword="IPropertyNotifySink::OnRequestEdit" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FRestricted">
      <summary vsli:raw="This flag is intended for system-level functions or functions that type browsers should not display.">Cet indicateur est destiné à des fonctions de niveau système ou à des fonctions que les explorateurs de types ne doivent pas afficher.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FSource">
      <summary vsli:raw="The function returns an object that is a source of events.">Cette fonction retourne un objet qui est une source d'événements.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FUiDefault">
      <summary vsli:raw="The type information member is the default member for display in the user interface.">Le membre d'informations de type est le membre par défaut à afficher dans l'interface utilisateur.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FUsesGetLastError">
      <summary vsli:raw="The function supports &lt;see langword=&quot;GetLastError&quot; /&gt;.">La fonction prend en charge <see langword="GetLastError" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibImportClassAttribute">
      <summary vsli:raw="Specifies which &lt;see cref=&quot;T:System.Type&quot; /&gt; exclusively uses an interface. This class cannot be inherited.">Spécifie le <see cref="T:System.Type" /> qui utilise une interface en mode exclusif. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibImportClassAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibImportClassAttribute&quot; /&gt; class specifying the &lt;see cref=&quot;T:System.Type&quot; /&gt; that exclusively uses an interface.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.TypeLibImportClassAttribute" /> en spécifiant le <see cref="T:System.Type" /> qui utilise une interface en mode exclusif.</summary>
      <param name="importClass" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object that exclusively uses an interface.">Objet <see cref="T:System.Type" /> qui utilise une interface en mode exclusif.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibImportClassAttribute.Value">
      <summary vsli:raw="Gets the name of a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that exclusively uses an interface.">Obtient le nom d'un objet <see cref="T:System.Type" /> qui utilise une interface en mode exclusif.</summary>
      <returns vsli:raw="The name of a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that exclusively uses an interface.">Nom d'un objet <see cref="T:System.Type" /> qui utilise une interface en mode exclusif.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibTypeAttribute">
      <summary vsli:raw="Contains the &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEFLAGS&quot; /&gt; that were originally imported for this type from the COM type library.">Contient les <see cref="T:System.Runtime.InteropServices.TYPEFLAGS" /> importés à l’origine pour ce type depuis la bibliothèque de types COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibTypeAttribute.#ctor(System.Int16)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;TypeLibTypeAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibTypeFlags&quot; /&gt; value.">Initialise une nouvelle instance de la classe <see langword="TypeLibTypeAttribute" /> avec la valeur <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> spécifiée.</summary>
      <param name="flags" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibTypeFlags&quot; /&gt; value for the attributed type as found in the type library it was imported from.">Valeur de <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> pour le type avec attributs, telle qu’elle figure dans la bibliothèque de types d’où il a été importé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibTypeAttribute.#ctor(System.Runtime.InteropServices.TypeLibTypeFlags)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;TypeLibTypeAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibTypeFlags&quot; /&gt; value.">Initialise une nouvelle instance de la classe <see langword="TypeLibTypeAttribute" /> avec la valeur <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> spécifiée.</summary>
      <param name="flags" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibTypeFlags&quot; /&gt; value for the attributed type as found in the type library it was imported from.">Valeur de <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> pour le type avec attributs, telle qu’elle figure dans la bibliothèque de types d’où il a été importé.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibTypeAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibTypeFlags&quot; /&gt; value for this type.">Obtient la valeur de <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> pour ce type.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibTypeFlags&quot; /&gt; value for this type.">Valeur <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> de ce type.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibTypeFlags">
      <summary vsli:raw="Describes the original settings of the &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEFLAGS&quot; /&gt; in the COM type library from which the type was imported.">Décrit les paramètres d'origine de <see cref="T:System.Runtime.InteropServices.TYPEFLAGS" /> dans la bibliothèque de types COM à partir de l'endroit où ce type a été importé.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FAggregatable">
      <summary vsli:raw="The class supports aggregation.">La classe prend en charge l'agrégation.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FAppObject">
      <summary vsli:raw="A type description that describes an &lt;see langword=&quot;Application&quot; /&gt; object.">Description de type qui décrit un objet <see langword="Application" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FCanCreate">
      <summary vsli:raw="Instances of the type can be created by &lt;see langword=&quot;ITypeInfo::CreateInstance&quot; /&gt;.">Les instances du type peuvent être créées à l'aide de <see langword="ITypeInfo::CreateInstance" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FControl">
      <summary vsli:raw="The type is a control from which other types will be derived, and should not be displayed to users.">Le type est un contrôle à partir duquel les autres types sont dérivés ; il ne doit pas être affiché aux utilisateurs.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FDispatchable">
      <summary vsli:raw="Indicates that the interface derives from &lt;see langword=&quot;IDispatch&quot; /&gt;, either directly or indirectly.">Indique que l'interface dérive directement ou indirectement de <see langword="IDispatch" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FDual">
      <summary vsli:raw="The interface supplies both &lt;see langword=&quot;IDispatch&quot; /&gt; and V-table binding.">L'interface fournit à la fois une liaison <see langword="IDispatch" /> et une liaison par vtable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FHidden">
      <summary vsli:raw="The type should not be displayed to browsers.">Le type ne doit pas être affiché aux navigateurs.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FLicensed">
      <summary vsli:raw="The type is licensed.">Le type est sous licence.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FNonExtensible">
      <summary vsli:raw="The interface cannot add members at run time.">L'interface ne peut pas ajouter de membres au moment de l'exécution.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FOleAutomation">
      <summary vsli:raw="The types used in the interface are fully compatible with Automation, including vtable binding support.">Les types utilisés dans l'interface sont totalement compatibles avec Automation, y compris la prise en charge de la liaison par vtable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FPreDeclId">
      <summary vsli:raw="The type is predefined. The client application should automatically create a single instance of the object that has this attribute. The name of the variable that points to the object is the same as the class name of the object.">Le type est prédéfini. L'application cliente doit automatiquement créer une instance unique de l'objet doté de cet attribut. Le nom de la variable pointant vers l'objet est identique au nom de classe de l'objet.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FReplaceable">
      <summary vsli:raw="The object supports &lt;see langword=&quot;IConnectionPointWithDefault&quot; /&gt;, and has default behaviors.">L'objet prend en charge <see langword="IConnectionPointWithDefault" /> et il a des comportements par défaut.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FRestricted">
      <summary vsli:raw="This flag is intended for system-level types or types that type browsers should not display.">Cet indicateur est destiné à des types de niveau système ou à des types que les explorateurs de types ne doivent pas afficher.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FReverseBind">
      <summary vsli:raw="Indicates base interfaces should be checked for name resolution before checking child interfaces. This is the reverse of the default behavior.">Indique que les interfaces de base doivent être testées pour la résolution de noms avant de le faire pour les interfaces enfants. Il s'agit du comportement inverse au comportement par défaut.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibVarAttribute">
      <summary vsli:raw="Contains the &lt;see cref=&quot;T:System.Runtime.InteropServices.VARFLAGS&quot; /&gt; that were originally imported for this field from the COM type library.">Contient les <see cref="T:System.Runtime.InteropServices.VARFLAGS" /> importés à l'origine pour ce champ à partir de la bibliothèque de types COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibVarAttribute.#ctor(System.Int16)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarFlags&quot; /&gt; value.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.TypeLibVarAttribute" /> avec la valeur <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> spécifiée.</summary>
      <param name="flags" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarFlags&quot; /&gt; value for the attributed field as found in the type library it was imported from.">Valeur <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> du champ avec attributs, telle qu'elle figure dans la bibliothèque de types à partir de laquelle il a été importé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibVarAttribute.#ctor(System.Runtime.InteropServices.TypeLibVarFlags)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarFlags&quot; /&gt; value.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.TypeLibVarAttribute" /> avec la valeur <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> spécifiée.</summary>
      <param name="flags" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarFlags&quot; /&gt; value for the attributed field as found in the type library it was imported from.">Valeur <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> du champ avec attributs, telle qu'elle figure dans la bibliothèque de types à partir de laquelle il a été importé.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibVarAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarFlags&quot; /&gt; value for this field.">Obtient la valeur <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> pour ce champ.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarFlags&quot; /&gt; value for this field.">Valeur <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> de ce champ.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibVarFlags">
      <summary vsli:raw="Describes the original settings of the &lt;see cref=&quot;T:System.Runtime.InteropServices.VARFLAGS&quot; /&gt; in the COM type library from which the variable was imported.">Décrit les paramètres d’origine de <see cref="T:System.Runtime.InteropServices.VARFLAGS" /> dans la bibliothèque de types COM d’où cette variable a été importée.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FBindable">
      <summary vsli:raw="The variable supports data binding.">La variable prend en charge la liaison de données.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FDefaultBind">
      <summary vsli:raw="The variable is the single property that best represents the object. Only one variable in a type info can have this value.">La variable est la propriété unique qui représente le mieux l’objet. Une seule variable dans les informations de type peut avoir cette valeur.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FDefaultCollelem">
      <summary vsli:raw="Permits an optimization in which the compiler looks for a member named &quot;xyz&quot; on the type &quot;abc&quot;. If such a member is found and is flagged as an accessor function for an element of the default collection, then a call is generated to that member function.">Permet une optimisation dans laquelle le compilateur recherche un membre nommé « xyz » sur le type « abc ». Si ce membre est trouvé et s’il est marqué comme fonction d’accesseur pour un élément de la collection par défaut, un appel à cette fonction membre est généré.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FDisplayBind">
      <summary vsli:raw="The variable is displayed as bindable. &lt;see cref=&quot;F:System.Runtime.InteropServices.TypeLibVarFlags.FBindable&quot; /&gt; must also be set.">La variable est affichée comme pouvant être liée. Vous devez également définir <see cref="F:System.Runtime.InteropServices.TypeLibVarFlags.FBindable" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FHidden">
      <summary vsli:raw="The variable should not be displayed in a browser, though it exists and is bindable.">La variable ne doit pas être affichée dans un navigateur, même si elle existe et peut être liée.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FImmediateBind">
      <summary vsli:raw="The variable is mapped as individual bindable properties.">La variable est mappée comme propriétés individuelles pouvant être liées.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FNonBrowsable">
      <summary vsli:raw="The variable appears in an object browser, but not in a properties browser.">La variable s’affiche dans un explorateur d’objets, mais pas dans un explorateur de propriétés.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FReadOnly">
      <summary vsli:raw="Assignment to the variable should not be allowed.">L’affectation à la variable ne doit pas être autorisée.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FReplaceable">
      <summary vsli:raw="Tags the interface as having default behaviors.">Marque l’interface comme ayant des comportements par défaut.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FRequestEdit">
      <summary vsli:raw="Indicates that the property supports the COM &lt;see langword=&quot;OnRequestEdit&quot; /&gt; notification.">Indique que la propriété prend en charge la notification <see langword="OnRequestEdit" /> COM.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FRestricted">
      <summary vsli:raw="This flag is intended for system-level functions or functions that type browsers should not display.">Cet indicateur est destiné à des fonctions de niveau système ou à des fonctions que les explorateurs de types ne doivent pas afficher.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FSource">
      <summary vsli:raw="The variable returns an object that is a source of events.">La variable retourne un objet qui est une source d’événements.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FUiDefault">
      <summary vsli:raw="The default display in the user interface.">L’affichage par défaut dans l’interface utilisateur.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibVersionAttribute">
      <summary vsli:raw="Specifies the version number of an exported type library.">Spécifie le numéro de version d'une bibliothèque de types exportée.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibVersionAttribute.#ctor(System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVersionAttribute&quot; /&gt; class with the major and minor version numbers of the type library.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.TypeLibVersionAttribute" /> avec les numéros de version principale et secondaire de la bibliothèque de types.</summary>
      <param name="major" vsli:raw="The major version number of the type library.">Numéro de version principale de la bibliothèque de types.</param>
      <param name="minor" vsli:raw="The minor version number of the type library.">Numéro de version secondaire de la bibliothèque de types.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibVersionAttribute.MajorVersion">
      <summary vsli:raw="Gets the major version number of the type library.">Obtient le numéro de version principale de la bibliothèque de types.</summary>
      <returns vsli:raw="The major version number of the type library.">Numéro de version principale de la bibliothèque de types.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibVersionAttribute.MinorVersion">
      <summary vsli:raw="Gets the minor version number of the type library.">Obtient le numéro de version secondaire de la bibliothèque de types.</summary>
      <returns vsli:raw="The minor version number of the type library.">Numéro de version secondaire de la bibliothèque de types.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.UnknownWrapper">
      <summary vsli:raw="Wraps objects the marshaler should marshal as a &lt;see langword=&quot;VT_UNKNOWN&quot; /&gt;.">Encapsule des objets que le marshaleur doit marshaler comme <see langword="VT_UNKNOWN" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UnknownWrapper.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.UnknownWrapper&quot; /&gt; class with the object to be wrapped.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.UnknownWrapper" /> avec l'objet à encapsuler.</summary>
      <param name="obj" vsli:raw="The object being wrapped.">Objet à encapsuler.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.UnknownWrapper.WrappedObject">
      <summary vsli:raw="Gets the object contained by this wrapper.">Obtient l'objet contenu dans ce wrapper.</summary>
      <returns vsli:raw="The wrapped object.">Objet encapsulé.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute">
      <summary vsli:raw="Controls the marshaling behavior of a delegate signature passed as an unmanaged function pointer to or from unmanaged code. This class cannot be inherited.">Contrôle le comportement de marshaling d'une signature de délégué passée comme pointeur de fonction non managée vers ou depuis du code non managé. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.#ctor(System.Runtime.InteropServices.CallingConvention)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute&quot; /&gt; class with the specified calling convention.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute" /> avec la convention d'appel spécifiée.</summary>
      <param name="callingConvention" vsli:raw="The specified calling convention.">Convention d'appel spécifiée.</param>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.BestFitMapping">
      <summary vsli:raw="Enables or disables best-fit mapping behavior when converting Unicode characters to ANSI characters.">Active ou désactive le comportement de mappage ajusté lors de la conversion de caractères Unicode en caractères ANSI.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.CallingConvention">
      <summary vsli:raw="Gets the value of the calling convention.">Obtient la valeur de la convention d'appel.</summary>
      <returns vsli:raw="The value of the calling convention specified by the &lt;see cref=&quot;M:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.#ctor(System.Runtime.InteropServices.CallingConvention)&quot; /&gt; constructor.">Valeur de la convention d'appel spécifiée par le constructeur <see cref="M:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.#ctor(System.Runtime.InteropServices.CallingConvention)" />.</returns>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.CharSet">
      <summary vsli:raw="Indicates how to marshal string parameters to the method, and controls name mangling.">Indique comment marshaler les paramètres de chaîne vers la méthode et contrôle la composition des noms.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.SetLastError">
      <summary vsli:raw="Indicates whether the callee calls the &lt;see langword=&quot;SetLastError&quot; /&gt; Windows API function before returning from the attributed method.">Indique si l'appelé appelle la fonction API Windows <see langword="SetLastError" /> avant de retourner la valeur à partir de la méthode avec attributs.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.ThrowOnUnmappableChar">
      <summary vsli:raw="Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI &quot;?&quot; character.">Active ou désactive la levée d'une exception sur un caractère Unicode non mappable converti en caractère ANSI "?".</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.UnmanagedType">
      <summary>Indique comment marshaler les paramètres ou les champs en code non managé.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.AnsiBStr">
      <summary>Chaîne de caractères ANSI sur un octet, préfixée par sa longueur. Vous pouvez utiliser ce membre sur le type de données <see cref="T:System.String" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.AsAny">
      <summary>Type dynamique qui détermine le type d’un objet au moment de l’exécution et marshale l’objet comme ce type. Ce membre est valide pour les méthodes d'appel de plateforme uniquement.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Bool">
      <summary>Valeur booléenne sur 4 octets (<see langword="true" /> != 0, <see langword="false" /> = 0). Il s'agit du type BOOL Win32.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.BStr">
      <summary>Chaîne de caractères Unicode sur deux octets, préfixée par sa longueur. Vous pouvez utiliser ce membre, qui est la chaîne par défaut dans COM, sur le type de données <see cref="T:System.String" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.ByValArray">
      <summary>Quand la propriété <see cref="P:System.Runtime.InteropServices.MarshalAsAttribute.Value" /> a la valeur <see langword="ByValArray" />, le champ <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" /> doit être défini pour indiquer le nombre d'éléments dans le tableau. Le champ <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType" /> peut éventuellement contenir le <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> des éléments du tableau, quand les types de chaîne doivent être différenciés. Vous pouvez utiliser ce <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> uniquement sur un tableau dont les éléments apparaissent sous la forme de champs dans une structure.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.ByValTStr">
      <summary>Utilisé pour des tableaux de caractères de longueur fixe inline affichés dans une structure. Les types <see langword="ByValTStr" /> se comportent comme des chaînes de style C de taille fixe à l’intérieur d’une structure (par exemple, <c>char s[5]</c>). Le type de caractère utilisé avec <see langword="ByValTStr" /> est déterminé par l'argument <see cref="T:System.Runtime.InteropServices.CharSet" /> de l'attribut <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> appliqué à la structure conteneur. Utilisez toujours le champ <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" /> pour indiquer la taille du tableau.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Currency">
      <summary>Type de devise. Utilisé sur un <see cref="T:System.Decimal" /> pour marshaler la valeur décimale en tant que type de devise COM, au lieu d'un <see langword="Decimal" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler">
      <summary>Spécifie la classe de marshaleur personnalisé dans le cas d'une utilisation avec le champ <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType" /> ou <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef" />. Le champ <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie" /> permet de passer des informations supplémentaires au marshaleur personnalisé. Vous pouvez utiliser ce membre sur n'importe quel type de référence. Ce membre est valide pour les paramètres et valeurs de retour uniquement. Il ne peut pas être utilisé sur les champs.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Error">
      <summary>Type natif associé à <see cref="F:System.Runtime.InteropServices.UnmanagedType.I4" /> ou à <see cref="F:System.Runtime.InteropServices.UnmanagedType.U4" /> et qui entraîne l'exportation du paramètre en tant que HRESULT dans la bibliothèque de types exportée.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.FunctionPtr">
      <summary>Entier pouvant être utilisé comme pointeur fonction de type C. Vous pouvez utiliser ce membre sur un type de données <see cref="T:System.Delegate" /> ou sur un type qui hérite d'un <see cref="T:System.Delegate" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.HString">
      <summary>Chaîne Windows Runtime. Vous pouvez utiliser ce membre sur le type de données <see cref="T:System.String" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I1">
      <summary>Entier signé sur 1 octet. Vous pouvez utiliser ce membre pour transformer une valeur booléenne en valeur <see langword="bool" /> sur 1 octet de type C (<see langword="true" /> = 1, <see langword="false" /> = 0).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I2">
      <summary>Entier signé sur 2 octets.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I4">
      <summary>Entier signé sur 4 octets.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I8">
      <summary>Entier signé sur 8 octets.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IDispatch">
      <summary>Pointeur <see langword="IDispatch" /> COM (<see langword="Object" /> dans Microsoft Visual Basic 6.0).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IInspectable">
      <summary>Pointeur d'interface Windows Runtime. Vous pouvez utiliser ce membre sur le type de données <see cref="T:System.Object" /> .</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Interface">
      <summary>Pointeur d'interface COM. Le <see cref="T:System.Guid" /> de l'interface est obtenu à partir des métadonnées de classe. Utilisez ce membre pour spécifier le type exact d'interface ou le type d'interface par défaut si vous l'appliquez à une classe. Ce membre produit le même comportement que <see cref="F:System.Runtime.InteropServices.UnmanagedType.IUnknown" /> quand vous l'appliquez au type de données <see cref="T:System.Object" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IUnknown">
      <summary>Pointeur <see langword="IUnknown" /> COM. Vous pouvez utiliser ce membre sur le type de données <see cref="T:System.Object" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPArray">
      <summary>Pointeur vers le premier élément d'un tableau de style C. Lors du marshaling du code managé au code non managé, la longueur du tableau est déterminée par la longueur du tableau managé. Lors du marshaling du code non managé au code managé, la longueur du tableau est déterminée par les champs <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" /> et <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex" />, suivis éventuellement par le type non managé des éléments du tableau quand les types de chaîne doivent être différenciés.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPStr">
      <summary>Chaîne de caractères ANSI sur un octet. Vous pouvez utiliser ce membre sur les types de données <see cref="T:System.String" /> et <see cref="T:System.Text.StringBuilder" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPStruct">
      <summary>Pointeur vers une structure de type C que vous utilisez pour marshaler les classes mises en forme managées. Ce membre est valide pour les méthodes d'appel de plateforme uniquement.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPTStr">
      <summary>Une chaîne de caractères dépendante de la plateforme : ANSI sous Windows 98 et Unicode sous Windows NT et Windows XP. Cette valeur est uniquement prise en charge pour un appel de code non managé uniquement, elle ne l'est pas pour COM Interop, l'exportation d'une chaîne de type <see langword="LPTStr" /> n'étant pas prise en charge.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPUTF8Str">
      <summary>Pointeur vers une chaîne encodée en UTF-8.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPWStr">
      <summary>Chaîne de caractères Unicode se terminant par null sur 2 octets. Vous ne pouvez pas utiliser la valeur <see langword="LPWStr" /> avec une chaîne non managée, sauf si la chaîne a été créée à l’aide de la fonction <see langword="CoTaskMemAlloc" /> non managée.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.R4">
      <summary>Nombre à virgule flottante sur 4 octets.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.R8">
      <summary>Nombre à virgule flottante sur 8 octets.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SafeArray">
      <summary>Un <see langword="SafeArray" /> est un tableau autodescriptif qui inclut le type, le rang et les limites des données de tableau associées. Vous pouvez utiliser ce membre avec le champ <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArraySubType" /> pour substituer le type d'élément par défaut.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Struct">
      <summary>VARIANT utilisé pour marshaler des classes et des types de valeur mis en forme managés.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SysInt">
      <summary>Un entier signé dépendant de la plateforme : 4 octets sous Windows 32 bits, 8 octets sous Windows 64 bits.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SysUInt">
      <summary>Un entier non signé dépendant de la plateforme : 4 octets sous Windows 32 bits, 8 octets sous Windows 64 bits.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.TBStr">
      <summary>Une chaîne <see langword="char" /> préfixée par sa longueur et dépendante de la plateforme : ANSI sous Windows 98, Unicode sous Windows NT. Ce membre similaire à BSTR est rarement utilisé.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U1">
      <summary>Entier non signé sur 1 octet.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U2">
      <summary>Entier non signé sur 2 octets.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U4">
      <summary>Entier non signé sur 4 octets.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U8">
      <summary>Entier non signé sur 8 octets.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.VariantBool">
      <summary>Type VARIANT_BOOL sur 2 octets défini par OLE (<see langword="true" /> = -1, <see langword="false" /> = 0).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.VBByRefStr">
      <summary>Valeur qui permet à Visual Basic de changer une chaîne en code non managé et de répercuter les résultats dans du code managé. Cette valeur est uniquement prise en charge pour l'appel de code non managé.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.VarEnum">
      <summary vsli:raw="Indicates how to marshal the array elements when an array is marshaled from managed to unmanaged code as a &lt;see cref=&quot;F:System.Runtime.InteropServices.UnmanagedType.SafeArray&quot; /&gt;.">Indique comment marshaler les éléments de tableau lorsqu'un tableau est marshalé de code managé en code non managé sous la forme de <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_ARRAY">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;SAFEARRAY&quot; /&gt; pointer.">Indique un pointeur <see langword="SAFEARRAY" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BLOB">
      <summary vsli:raw="Indicates length prefixed bytes.">Indique des octets préfixés par leur longueur.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BLOB_OBJECT">
      <summary vsli:raw="Indicates that a blob contains an object.">Indique qu'un blob contient un objet.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BOOL">
      <summary vsli:raw="Indicates a Boolean value.">Indique une valeur Boolean.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BSTR">
      <summary vsli:raw="Indicates a BSTR string.">Indique une chaîne BSTR.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BYREF">
      <summary vsli:raw="Indicates that a value is a reference.">Indique qu'une valeur est une référence.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CARRAY">
      <summary vsli:raw="Indicates a C style array.">Indique un tableau de style C.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CF">
      <summary vsli:raw="Indicates the clipboard format.">Indique le format du Presse-papiers.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CLSID">
      <summary vsli:raw="Indicates a class ID.">Indique un ID de classe.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CY">
      <summary vsli:raw="Indicates a currency value.">Indique une valeur monétaire.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DATE">
      <summary vsli:raw="Indicates a DATE value.">Indique une valeur DATE.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DECIMAL">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;decimal&quot; /&gt; value.">Indique une valeur <see langword="decimal" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DISPATCH">
      <summary vsli:raw="Indicates an &lt;see langword=&quot;IDispatch&quot; /&gt; pointer.">Indique un pointeur <see langword="IDispatch" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_EMPTY">
      <summary vsli:raw="Indicates that a value was not specified.">Indique qu'une valeur n'a pas été spécifiée.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_ERROR">
      <summary vsli:raw="Indicates an SCODE.">Indique un SCODE.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_FILETIME">
      <summary vsli:raw="Indicates a FILETIME value.">Indique une valeur FILETIME.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_HRESULT">
      <summary vsli:raw="Indicates an HRESULT.">Indique un HRESULT.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I1">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;char&quot; /&gt; value.">Indique une valeur <see langword="char" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I2">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;short&quot; /&gt; integer.">Indique un entier <see langword="short" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I4">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;long&quot; /&gt; integer.">Indique un entier <see langword="long" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I8">
      <summary vsli:raw="Indicates a 64-bit integer.">Indique un entier 64 bits.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_INT">
      <summary vsli:raw="Indicates an integer value.">Indique une valeur entière.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_LPSTR">
      <summary vsli:raw="Indicates a null-terminated string.">Indique une chaîne terminée par le caractère NULL.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_LPWSTR">
      <summary vsli:raw="Indicates a wide string terminated by &lt;see langword=&quot;null&quot; /&gt;.">Indique une chaîne large terminée par <see langword="null" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_NULL">
      <summary vsli:raw="Indicates a null value, similar to a null value in SQL.">Indique une valeur null, similaire à une valeur null dans SQL.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_PTR">
      <summary vsli:raw="Indicates a pointer type.">Indique un type de pointeur.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_R4">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;float&quot; /&gt; value.">Indique une valeur <see langword="float" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_R8">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;double&quot; /&gt; value.">Indique une valeur <see langword="double" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_RECORD">
      <summary vsli:raw="Indicates a user defined type.">Indique un type défini par l'utilisateur.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_SAFEARRAY">
      <summary vsli:raw="Indicates a SAFEARRAY. Not valid in a VARIANT.">Indique un SAFEARRAY. Non valide dans un VARIANT.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STORAGE">
      <summary vsli:raw="Indicates that the name of a storage follows.">Indique que le nom d'un stockage suit.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STORED_OBJECT">
      <summary vsli:raw="Indicates that a storage contains an object.">Indique qu'un stockage contient un objet.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STREAM">
      <summary vsli:raw="Indicates that the name of a stream follows.">Indique que le nom d'un flux suit</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STREAMED_OBJECT">
      <summary vsli:raw="Indicates that a stream contains an object.">Indique qu'un flux contient un objet.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI1">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;byte&quot; /&gt;.">Indique <see langword="byte" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI2">
      <summary vsli:raw="Indicates an &lt;see langword=&quot;unsigned&quot; /&gt;&lt;see langword=&quot;short&quot; /&gt;.">Indique un <see langword="unsigned" /><see langword="short" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI4">
      <summary vsli:raw="Indicates an &lt;see langword=&quot;unsigned&quot; /&gt;&lt;see langword=&quot;long&quot; /&gt;.">Indique un <see langword="unsigned" /><see langword="long" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI8">
      <summary vsli:raw="Indicates an 64-bit unsigned integer.">Indique un entier non signé 64 bits.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UINT">
      <summary vsli:raw="Indicates an &lt;see langword=&quot;unsigned&quot; /&gt; integer value.">Indique une valeur entière <see langword="unsigned" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UNKNOWN">
      <summary vsli:raw="Indicates an &lt;see langword=&quot;IUnknown&quot; /&gt; pointer.">Indique un pointeur <see langword="IUnknown" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_USERDEFINED">
      <summary vsli:raw="Indicates a user defined type.">Indique un type défini par l'utilisateur.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VARIANT">
      <summary vsli:raw="Indicates a VARIANT &lt;see langword=&quot;far&quot; /&gt; pointer.">Indique un pointeur VARIANT <see langword="far" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VECTOR">
      <summary vsli:raw="Indicates a simple, counted array.">Indique un tableau à nombre d'éléments simple.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VOID">
      <summary vsli:raw="Indicates a C style &lt;see langword=&quot;void&quot; /&gt;.">Indique un <see langword="void" /> de style C.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.VariantWrapper">
      <summary vsli:raw="Marshals data of type &lt;see langword=&quot;VT_VARIANT | VT_BYREF&quot; /&gt; from managed to unmanaged code. This class cannot be inherited.">Marshale des données de type <see langword="VT_VARIANT | VT_BYREF" /> de code managé en code non managé. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.VariantWrapper.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.VariantWrapper&quot; /&gt; class for the specified &lt;see cref=&quot;T:System.Object&quot; /&gt; parameter.">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> pour le paramètre <see cref="T:System.Object" /> spécifié.</summary>
      <param name="obj" vsli:raw="The object to marshal.">Objet à marshaler.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.VariantWrapper.WrappedObject">
      <summary vsli:raw="Gets the object wrapped by the &lt;see cref=&quot;T:System.Runtime.InteropServices.VariantWrapper&quot; /&gt; object.">Obtient l'objet encapsulé par l'objet <see cref="T:System.Runtime.InteropServices.VariantWrapper" />.</summary>
      <returns vsli:raw="The object wrapped by the &lt;see cref=&quot;T:System.Runtime.InteropServices.VariantWrapper&quot; /&gt; object.">Objet encapsulé par l'objet <see cref="T:System.Runtime.InteropServices.VariantWrapper" />.</returns>
    </member>
    <member name="T:System.Security.SecureString">
      <summary vsli:raw="Represents text that should be kept confidential, such as by deleting it from computer memory when no longer needed. This class cannot be inherited.">Représente le texte qui doit rester confidentiel, par exemple en le supprimant de la mémoire de l'ordinateur quand il n'est plus nécessaire. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.Security.SecureString.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.Security.SecureString" />.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException" vsli:raw="An error occurred while protecting or unprotecting the value of this instance.">Une erreur s’est produite au moment de la protection ou de l’annulation de la protection de la valeur de cette instance.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="This operation is not supported on this platform.">Cette opération n’est pas prise en charge sur cette plateforme.</exception>
    </member>
    <member name="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; class from a subarray of &lt;see cref=&quot;T:System.Char&quot; /&gt; objects.  &#xA;  &#xA; This constructor is not CLS-compliant. The CLS-compliant alternative is &lt;see cref=&quot;M:System.Security.SecureString.#ctor&quot; /&gt;.">Initialise une nouvelle instance de la classe <see cref="T:System.Security.SecureString" /> à partir d'un sous-tableau d'objets <see cref="T:System.Char" />.  
Ce constructeur n’est pas conforme CLS. L’alternative conforme CLS est <see cref="M:System.Security.SecureString.#ctor" />.</summary>
      <param name="value" vsli:raw="A pointer to an array of &lt;see cref=&quot;T:System.Char&quot; /&gt; objects.">Pointeur vers un tableau d'objets <see cref="T:System.Char" />.</param>
      <param name="length" vsli:raw="The number of elements of &lt;paramref name=&quot;value&quot; /&gt; to include in the new instance.">Nombre d'éléments de <paramref name="value" /> à inclure dans la nouvelle instance.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;length&quot; /&gt; is less than zero or greater than 65,536.">
        <paramref name="length" /> est inférieur à 0 ou supérieur à 65 536.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException" vsli:raw="An error occurred while protecting or unprotecting the value of this secure string.">Une erreur s’est produite lors de la protection ou de l’annulation de la protection de la valeur de cette chaîne sécurisée.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="This operation is not supported on this platform.">Cette opération n’est pas prise en charge sur cette plateforme.</exception>
    </member>
    <member name="M:System.Security.SecureString.AppendChar(System.Char)">
      <summary vsli:raw="Appends a character to the end of the current secure string.">Ajoute un caractère à la fin de la chaîne sécurisée actuelle.</summary>
      <param name="c" vsli:raw="A character to append to this secure string.">Caractère à ajouter à cette chaîne sécurisée.</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">Cette chaîne sécurisée a déjà été supprimée.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This secure string is read-only.">Cette chaîne sécurisée est en lecture seule.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="Performing this operation would make the length of this secure string greater than 65,536 characters.">L’exécution de cette opération rendrait la longueur de cette chaîne sécurisée supérieure à 65 536 caractères.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException" vsli:raw="An error occurred while protecting or unprotecting the value of this secure string.">Une erreur s’est produite lors de la protection ou de l’annulation de la protection de la valeur de cette chaîne sécurisée.</exception>
    </member>
    <member name="M:System.Security.SecureString.Clear">
      <summary vsli:raw="Deletes the value of the current secure string.">Supprime la valeur de la chaîne sécurisée actuelle.</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">Cette chaîne sécurisée a déjà été supprimée.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This secure string is read-only.">Cette chaîne sécurisée est en lecture seule.</exception>
    </member>
    <member name="M:System.Security.SecureString.Copy">
      <summary vsli:raw="Creates a copy of the current secure string.">Crée une copie de la chaîne sécurisée actuelle.</summary>
      <returns vsli:raw="A duplicate of this secure string.">Doublon de cette chaîne sécurisée.</returns>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">Cette chaîne sécurisée a déjà été supprimée.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException" vsli:raw="An error occurred while protecting or unprotecting the value of this secure string.">Une erreur s’est produite lors de la protection ou de l’annulation de la protection de la valeur de cette chaîne sécurisée.</exception>
    </member>
    <member name="M:System.Security.SecureString.Dispose">
      <summary vsli:raw="Releases all resources used by the current &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object.">Libère toutes les ressources utilisées par l’objet <see cref="T:System.Security.SecureString" /> actuel.</summary>
    </member>
    <member name="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)">
      <summary vsli:raw="Inserts a character in this secure string at the specified index position.">Insère un caractère dans cette chaîne sécurisée à la position d'index spécifiée.</summary>
      <param name="index" vsli:raw="The index position where parameter &lt;paramref name=&quot;c&quot; /&gt; is inserted.">Position d'index à laquelle le paramètre <paramref name="c" /> est inséré.</param>
      <param name="c" vsli:raw="The character to insert.">Caractère à insérer.</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">Cette chaîne sécurisée a déjà été supprimée.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This secure string is read-only.">Cette chaîne sécurisée est en lecture seule.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero, or greater than the length of this secure string.  &#xA;  &#xA; -or-  &#xA;  &#xA; Performing this operation would make the length of this secure string greater than 65,536 characters.">
        <paramref name="index" /> est inférieur à zéro ou supérieur à la longueur de cette chaîne sécurisée.  

ou - 
L’exécution de cette opération rendrait la longueur de cette chaîne sécurisée supérieure à 65 536 caractères.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException" vsli:raw="An error occurred while protecting or unprotecting the value of this secure string.">Une erreur s’est produite lors de la protection ou de l’annulation de la protection de la valeur de cette chaîne sécurisée.</exception>
    </member>
    <member name="M:System.Security.SecureString.IsReadOnly">
      <summary vsli:raw="Indicates whether this secure string is marked read-only.">Indique si cette chaîne sécurisée est en lecture seule.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this secure string is marked read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si cette chaîne sécurisée est en lecture seule ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">Cette chaîne sécurisée a déjà été supprimée.</exception>
    </member>
    <member name="P:System.Security.SecureString.Length">
      <summary vsli:raw="Gets the number of characters in the current secure string.">Obtient le nombre de caractères dans la chaîne sécurisée actuelle.</summary>
      <returns vsli:raw="The number of &lt;see cref=&quot;T:System.Char&quot; /&gt; objects in this secure string.">Nombre d'objets <see cref="T:System.Char" /> de cette chaîne sécurisée.</returns>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">Cette chaîne sécurisée a déjà été supprimée.</exception>
    </member>
    <member name="M:System.Security.SecureString.MakeReadOnly">
      <summary vsli:raw="Makes the text value of this secure string read-only.">Met en lecture seule la valeur texte de cette chaîne sécurisée.</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">Cette chaîne sécurisée a déjà été supprimée.</exception>
    </member>
    <member name="M:System.Security.SecureString.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the character at the specified index position from this secure string.">Supprime de cette chaîne sécurisée le caractère situé à la position d'index spécifiée.</summary>
      <param name="index" vsli:raw="The index position of a character in this secure string.">Position d'index d'un caractère dans cette chaîne sécurisée.</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">Cette chaîne sécurisée a déjà été supprimée.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This secure string is read-only.">Cette chaîne sécurisée est en lecture seule.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero, or greater than or equal to the length of this secure string.">
        <paramref name="index" /> est inférieur à zéro, ou encore supérieur ou égal à la longueur de cette chaîne sécurisée.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException" vsli:raw="An error occurred while protecting or unprotecting the value of this secure string.">Une erreur s’est produite lors de la protection ou de l’annulation de la protection de la valeur de cette chaîne sécurisée.</exception>
    </member>
    <member name="M:System.Security.SecureString.SetAt(System.Int32,System.Char)">
      <summary vsli:raw="Replaces the existing character at the specified index position with another character.">Remplace le caractère existant à la position d'index spécifiée par un autre caractère.</summary>
      <param name="index" vsli:raw="The index position of an existing character in this secure string.">Position d'index d'un caractère existant dans cette chaîne sécurisée.</param>
      <param name="c" vsli:raw="A character that replaces the existing character.">Caractère qui remplace le caractère existant.</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">Cette chaîne sécurisée a déjà été supprimée.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This secure string is read-only.">Cette chaîne sécurisée est en lecture seule.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero, or greater than or equal to the length of this secure string.">
        <paramref name="index" /> est inférieur à zéro, ou encore supérieur ou égal à la longueur de cette chaîne sécurisée.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException" vsli:raw="An error occurred while protecting or unprotecting the value of this secure string.">Une erreur s’est produite lors de la protection ou de l’annulation de la protection de la valeur de cette chaîne sécurisée.</exception>
    </member>
    <member name="T:System.Security.SecureStringMarshal">
      <summary vsli:raw="Provides a collection of methods for allocating unmanaged memory and copying unmanaged memory blocks.">Fournit une collection de méthodes pour l’allocation de mémoire non managée et la copie de blocs de mémoire non managée.</summary>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object to a block of memory allocated from the unmanaged COM task allocator.">Copie le contenu d’un objet <see cref="T:System.Security.SecureString" /> managé dans un bloc de mémoire alloué à partir de l’allocateur de tâche COM non managé.</summary>
      <param name="s" vsli:raw="The managed object to copy.">Objet managé à copier.</param>
      <returns vsli:raw="The address, in unmanaged memory, where the &lt;paramref name=&quot;s&quot; /&gt; parameter was copied to, or 0 if a null object was supplied.">Adresse, dans la mémoire non managée, où le paramètre <paramref name="s" /> a été copié, ou 0 si un objet null a été fourni.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="s" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">L’ordinateur actuel n’exécute pas Windows 2000 Service Pack 3 ou une version ultérieure.</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">Il n’y a pas suffisamment de mémoire disponible.</exception>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object to a block of memory allocated from the unmanaged COM task allocator.">Copie le contenu d’un objet <see cref="T:System.Security.SecureString" /> managé dans un bloc de mémoire alloué à partir de l’allocateur de tâche COM non managé.</summary>
      <param name="s" vsli:raw="The managed object to copy.">Objet managé à copier.</param>
      <returns vsli:raw="The address, in unmanaged memory, where the &lt;paramref name=&quot;s&quot; /&gt; parameter was copied to, or 0 if a null object was supplied.">Adresse, dans la mémoire non managée, où le paramètre <paramref name="s" /> a été copié, ou 0 si un objet null a été fourni.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="s" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">L’ordinateur actuel n’exécute pas Windows 2000 Service Pack 3 ou une version ultérieure.</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">Il n’y a pas suffisamment de mémoire disponible.</exception>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; into unmanaged memory, converting into ANSI format as it copies.">Copie le contenu d’un objet <see cref="T:System.Security.SecureString" /> managé dans la mémoire non managée, avec conversion au format ANSI pendant la copie.</summary>
      <param name="s" vsli:raw="The managed object to copy.">Objet managé à copier.</param>
      <returns vsli:raw="The address, in unmanaged memory, to where the &lt;paramref name=&quot;s&quot; /&gt; parameter was copied, or 0 if a null object was supplied.">Adresse (dans la mémoire non managée) où le paramètre <paramref name="s" /> a été copié, ou 0 si un objet null a été fourni.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="s" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">L’ordinateur actuel n’exécute pas Windows 2000 Service Pack 3 ou une version ultérieure.</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">Il n’y a pas suffisamment de mémoire disponible.</exception>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object into unmanaged memory.">Copie le contenu d’un objet <see cref="T:System.Security.SecureString" /> managé dans la mémoire non managée.</summary>
      <param name="s" vsli:raw="The managed object to copy.">Objet managé à copier.</param>
      <returns vsli:raw="The address, in unmanaged memory, where &lt;paramref name=&quot;s&quot; /&gt; was copied, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is a &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object whose length is 0.">Adresse, dans la mémoire non managée, où <paramref name="s" /> a été copié, ou 0 si <paramref name="s" /> est un objet <see cref="T:System.Security.SecureString" /> dont la longueur est 0.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="s" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">L’ordinateur actuel n’exécute pas Windows 2000 Service Pack 3 ou une version ultérieure.</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">Il n’y a pas suffisamment de mémoire disponible.</exception>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime.Extensions</name>
  </assembly>
  <members>
    <member name="T:System.AppDomain">
      <summary>Représente un domaine d'application qui est un environnement isolé dans lequel s'exécutent les applications. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.AppDomain.AppendPrivatePath(System.String)">
      <summary>Ajoute le nom de répertoire spécifié à la liste des chemins d’accès privée.</summary>
      <param name="path">Nom du répertoire à ajouter au chemin d’accès privé.</param>
      <exception cref="T:System.AppDomainUnloadedException">L’opération est tentée sur un domaine d’application non chargé.</exception>
    </member>
    <member name="M:System.AppDomain.ApplyPolicy(System.String)">
      <summary>Retourne le nom complet d'assembly une fois que la stratégie a été appliquée.</summary>
      <param name="assemblyName">Nom complet d'assembly, sous la forme fournie par la propriété <see cref="P:System.Reflection.Assembly.FullName" />.</param>
      <returns>Chaîne qui contient le nom complet d'assembly une fois que la stratégie a été appliquée.</returns>
    </member>
    <member name="E:System.AppDomain.AssemblyLoad">
      <summary>Se produit quand un assembly est chargé.</summary>
    </member>
    <member name="E:System.AppDomain.AssemblyResolve">
      <summary>Se produit quand la résolution d'un assembly échoue.</summary>
    </member>
    <member name="P:System.AppDomain.BaseDirectory">
      <summary>Obtient le répertoire de base qu'utilise le programme de résolution d'assembly pour détecter les assemblys.</summary>
      <returns>Répertoire de base utilisé par le programme de résolution d'assembly pour détecter les assemblys.</returns>
      <exception cref="T:System.AppDomainUnloadedException">L’opération est tentée sur un domaine d’application non chargé.</exception>
    </member>
    <member name="M:System.AppDomain.ClearPrivatePath">
      <summary>Rétablit la chaîne vide ("") comme valeur du chemin d’accès qui spécifie l’emplacement des assemblys privés.</summary>
      <exception cref="T:System.AppDomainUnloadedException">L’opération est tentée sur un domaine d’application non chargé.</exception>
    </member>
    <member name="M:System.AppDomain.ClearShadowCopyPath">
      <summary>Rétablit la chaîne vide ("") comme valeur de la liste des répertoires contenant des clichés instantanés d'assemblys.</summary>
      <exception cref="T:System.AppDomainUnloadedException">L’opération est tentée sur un domaine d’application non chargé.</exception>
    </member>
    <member name="M:System.AppDomain.CreateDomain(System.String)">
      <summary>Crée un domaine d'application portant le nom spécifié.</summary>
      <param name="friendlyName">Nom convivial du domaine.</param>
      <returns>Domaine d'application nouvellement créé.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="friendlyName" /> est <see langword="null" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Méthode non prise en charge sur .NET Core.</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstance(System.String,System.String)">
      <summary>Crée une instance du type spécifié défini dans l'assembly déterminé.</summary>
      <param name="assemblyName">Nom complet de l'assembly. Consultez <see cref="P:System.Reflection.Assembly.FullName" />.</param>
      <param name="typeName">Nom qualifié complet du type demandé, y compris l'espace de noms mais pas l'assembly, tel qu'il est retourné par la propriété <see cref="P:System.Type.FullName" />.</param>
      <returns>Objet qui est un wrapper de la nouvelle instance spécifiée par <paramref name="typeName" />. La valeur de retour doit être désencapsulée pour accéder à l'objet réel.</returns>
      <exception cref="T:System.AppDomainUnloadedException">L’opération est tentée sur un domaine d’application non chargé.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> ou <paramref name="typeName" /> est <see langword="null" />.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> n’est pas un assembly valide.  
ou 
La version 2.0 ou ultérieure du Common Language Runtime est actuellement chargée et <paramref name="assemblyName" /> a été compilé avec une version ultérieure.</exception>
      <exception cref="T:System.IO.FileLoadException">Un assembly ou un module a été chargé à deux reprises avec deux preuves différentes.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyName" /> est introuvable.</exception>
      <exception cref="T:System.MethodAccessException">L’appelant n’est pas autorisé à appeler ce constructeur.</exception>
      <exception cref="T:System.MissingMethodException">Aucun constructeur public correspondant n’a été trouvé.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typename" /> est introuvable dans <paramref name="assemblyName" />.</exception>
      <exception cref="T:System.NullReferenceException">L’instance est <see langword="null" />.</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
      <summary>Crée une instance du type spécifié défini dans l'assembly déterminé. Les paramètres spécifient un binder, des indicateurs de liaisons, des arguments de constructeur, les informations spécifiques à la culture utilisées pour interpréter les arguments et des attributs d'activation facultatifs.</summary>
      <param name="assemblyName">Nom complet de l'assembly. Consultez <see cref="P:System.Reflection.Assembly.FullName" />.</param>
      <param name="typeName">Nom qualifié complet du type demandé, y compris l'espace de noms mais pas l'assembly, tel qu'il est retourné par la propriété <see cref="P:System.Type.FullName" />.</param>
      <param name="ignoreCase">Valeur bouléenne spécifiant s'il convient d'effectuer ou non une recherche qui respecte la casse.</param>
      <param name="bindingAttr">Combinaison de zéro ou plusieurs bits indicateurs qui affectent la recherche du constructeur <paramref name="typeName" />. Si <paramref name="bindingAttr" /> a la valeur zéro, une recherche de constructeurs publics qui respecte la casse est effectuée.</param>
      <param name="binder">Objet qui active la liaison, la contrainte de types d'arguments, l'appel des membres et la récupération d'objets <see cref="T:System.Reflection.MemberInfo" /> par le biais de la réflexion. Si <paramref name="binder" /> est null, le binder par défaut est utilisé.</param>
      <param name="args">Arguments à passer au constructeur. Ce tableau d'arguments doit posséder les mêmes nombre, ordre et type que les paramètres du constructeur à appeler. Si vous souhaitez utiliser le constructeur sans paramètre, <paramref name="args" /> doit être un tableau vide ou Null.</param>
      <param name="culture">Informations propres à la culture qui définissent la contrainte de <paramref name="args" /> pour les types formels déclarés du constructeur <paramref name="typeName" />. Si <paramref name="culture" /> est <see langword="null" />, le <see cref="T:System.Globalization.CultureInfo" /> du thread actuel est utilisé.</param>
      <param name="activationAttributes">Tableau à un ou plusieurs attributs pouvant participer à l'activation. En général, tableau contenant un seul objet <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> qui spécifie l'URL nécessaire pour activer un objet distant.  
Ce paramètre est lié aux objets activés par le client. L'activation des clients est une technologie héritée qui est conservée pour la compatibilité descendante, mais elle n'est pas recommandée pour un nouveau développement. Les applications distribuées doivent à la place utiliser Windows Communication Foundation.</param>
      <returns>Objet qui est un wrapper de la nouvelle instance spécifiée par <paramref name="typeName" />. La valeur de retour doit être désencapsulée pour accéder à l'objet réel.</returns>
      <exception cref="T:System.AppDomainUnloadedException">L’opération est tentée sur un domaine d’application non chargé.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> ou <paramref name="typeName" /> est <see langword="null" />.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> n’est pas un assembly valide.  

ou - 
<paramref name="assemblyName" /> a été compilé avec une version du Common Language Runtime ultérieure à la version actuellement chargée.</exception>
      <exception cref="T:System.IO.FileLoadException">Un assembly ou un module a été chargé à deux reprises avec deux preuves différentes.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyName" /> est introuvable.</exception>
      <exception cref="T:System.MethodAccessException">L’appelant n’est pas autorisé à appeler ce constructeur.</exception>
      <exception cref="T:System.MissingMethodException">Aucun constructeur correspondant n’a été trouvé.</exception>
      <exception cref="T:System.NotSupportedException">L’appelant ne peut pas fournir d’attributs d’activation pour un objet qui n’hérite pas de <see cref="T:System.MarshalByRefObject" />.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typename" /> est introuvable dans <paramref name="assemblyName" />.</exception>
      <exception cref="T:System.NullReferenceException">L’instance est <see langword="null" />.</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstance(System.String,System.String,System.Object[])">
      <summary>Crée une instance du type spécifié défini dans l'assembly déterminé. Un paramètre spécifie un tableau d'attributs d'activation.</summary>
      <param name="assemblyName">Nom complet de l'assembly. Consultez <see cref="P:System.Reflection.Assembly.FullName" />.</param>
      <param name="typeName">Nom qualifié complet du type demandé, y compris l'espace de noms mais pas l'assembly, tel qu'il est retourné par la propriété <see cref="P:System.Type.FullName" />.</param>
      <param name="activationAttributes">Tableau à un ou plusieurs attributs pouvant participer à l'activation. En général, tableau contenant un seul objet <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> qui spécifie l'URL nécessaire pour activer un objet distant.  
Ce paramètre concerne les objets activés par le client. L’activation par le client est une technologie héritée qui a été conservée pour la compatibilité descendante. Toutefois, elle n’est pas recommandée pour les nouveaux développements. Les applications distribuées doivent à la place utiliser Windows Communication Foundation.</param>
      <returns>Objet qui est un wrapper de la nouvelle instance spécifiée par <paramref name="typeName" />. La valeur de retour doit être désencapsulée pour accéder à l'objet réel.</returns>
      <exception cref="T:System.AppDomainUnloadedException">L’opération est tentée sur un domaine d’application non chargé.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> ou <paramref name="typeName" /> est <see langword="null" />.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> n’est pas un assembly valide.  

ou - 
La version 2.0 ou ultérieure du Common Language Runtime est actuellement chargée et <paramref name="assemblyName" /> a été compilé avec une version ultérieure.</exception>
      <exception cref="T:System.IO.FileLoadException">Un assembly ou un module a été chargé à deux reprises avec deux preuves différentes.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyName" /> est introuvable.</exception>
      <exception cref="T:System.MethodAccessException">L’appelant n’est pas autorisé à appeler ce constructeur.</exception>
      <exception cref="T:System.MissingMethodException">Aucun constructeur public correspondant n’a été trouvé.</exception>
      <exception cref="T:System.NotSupportedException">L’appelant ne peut pas fournir d’attributs d’activation pour un objet qui n’hérite pas de <see cref="T:System.MarshalByRefObject" />.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typename" /> est introuvable dans <paramref name="assemblyName" />.</exception>
      <exception cref="T:System.NullReferenceException">L’instance est <see langword="null" />.</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String)">
      <summary>Crée une instance du type spécifié. Les paramètres spécifient l'assembly dans lequel le type est défini et le nom du type.</summary>
      <param name="assemblyName">Nom complet de l'assembly. Consultez <see cref="P:System.Reflection.Assembly.FullName" />.</param>
      <param name="typeName">Nom qualifié complet du type demandé, y compris l'espace de noms mais pas l'assembly, tel qu'il est retourné par la propriété <see cref="P:System.Type.FullName" />.</param>
      <returns>Instance de l'objet spécifié par <paramref name="typeName" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> ou <paramref name="typeName" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.MissingMethodException">Aucun constructeur public correspondant n’a été trouvé.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typename" /> est introuvable dans <paramref name="assemblyName" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyName" /> est introuvable.</exception>
      <exception cref="T:System.MethodAccessException">L’appelant n’est pas autorisé à appeler ce constructeur.</exception>
      <exception cref="T:System.AppDomainUnloadedException">L’opération est tentée sur un domaine d’application non chargé.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> n’est pas un assembly valide.  

ou - 
La version 2.0 ou ultérieure du Common Language Runtime est actuellement chargée et <paramref name="assemblyName" /> a été compilé avec une version ultérieure.</exception>
      <exception cref="T:System.IO.FileLoadException">Un assembly ou un module a été chargé à deux reprises avec deux preuves différentes.</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
      <summary>Crée une instance du type spécifié défini dans l’assembly spécifié, en indiquant si la casse du nom de type est ignorée ; les attributs de liaison et le binder utilisés pour sélectionner le type à créer ; les arguments du constructeur ; la culture et les attributs d’activation.</summary>
      <param name="assemblyName">Nom complet de l'assembly. Consultez <see cref="P:System.Reflection.Assembly.FullName" />.</param>
      <param name="typeName">Nom qualifié complet du type demandé, y compris l'espace de noms mais pas l'assembly, tel qu'il est retourné par la propriété <see cref="P:System.Type.FullName" />.</param>
      <param name="ignoreCase">Valeur bouléenne spécifiant s'il convient d'effectuer ou non une recherche qui respecte la casse.</param>
      <param name="bindingAttr">Combinaison de zéro ou plusieurs bits indicateurs qui affectent la recherche du constructeur <paramref name="typeName" />. Si <paramref name="bindingAttr" /> a la valeur zéro, une recherche de constructeurs publics qui respecte la casse est effectuée.</param>
      <param name="binder">Objet qui active la liaison, la contrainte de types d'arguments, l'appel des membres et la récupération d'objets <see cref="T:System.Reflection.MemberInfo" /> par le biais de la réflexion. Si <paramref name="binder" /> est null, le binder par défaut est utilisé.</param>
      <param name="args">Arguments à passer au constructeur. Ce tableau d'arguments doit posséder les mêmes nombre, ordre et type que les paramètres du constructeur à appeler. Si vous souhaitez utiliser le constructeur sans paramètre, <paramref name="args" /> doit être un tableau vide ou Null.</param>
      <param name="culture">Objet propre à la culture utilisé pour régir la contrainte de types. Si <paramref name="culture" /> est <see langword="null" />, le <see langword="CultureInfo" /> du thread actuel est utilisé.</param>
      <param name="activationAttributes">Tableau à un ou plusieurs attributs pouvant participer à l'activation. Généralement, tableau qui contient un seul objet <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" />. qui spécifie l'URL nécessaire pour activer un objet distant.  
Ce paramètre est lié aux objets activés par le client. L'activation des clients est une technologie héritée qui est conservée pour la compatibilité descendante, mais elle n'est pas recommandée pour un nouveau développement. Les applications distribuées doivent à la place utiliser Windows Communication Foundation.</param>
      <returns>Instance de l'objet spécifié par <paramref name="typeName" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> ou <paramref name="typeName" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.MissingMethodException">Aucun constructeur correspondant n’a été trouvé.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typename" /> est introuvable dans <paramref name="assemblyName" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyName" /> est introuvable.</exception>
      <exception cref="T:System.MethodAccessException">L’appelant n’est pas autorisé à appeler ce constructeur.</exception>
      <exception cref="T:System.NotSupportedException">L’appelant ne peut pas fournir d’attributs d’activation pour un objet qui n’hérite pas de <see cref="T:System.MarshalByRefObject" />.</exception>
      <exception cref="T:System.AppDomainUnloadedException">L’opération est tentée sur un domaine d’application non chargé.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> n’est pas un assembly valide.  

ou - 
<paramref name="assemblyName" /> a été compilé avec une version du Common Language Runtime ultérieure à la version actuellement chargée.</exception>
      <exception cref="T:System.IO.FileLoadException">Un assembly ou un module a été chargé à deux reprises avec deux preuves différentes.</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Object[])">
      <summary>Crée une instance du type spécifié. Les paramètres spécifient l'assembly dans lequel le type est défini, le nom du type et un tableau d'attributs d'activation.</summary>
      <param name="assemblyName">Nom complet de l'assembly. Consultez <see cref="P:System.Reflection.Assembly.FullName" />.</param>
      <param name="typeName">Nom qualifié complet du type demandé, y compris l'espace de noms mais pas l'assembly, tel qu'il est retourné par la propriété <see cref="P:System.Type.FullName" />.</param>
      <param name="activationAttributes">Tableau à un ou plusieurs attributs pouvant participer à l'activation. En général, tableau contenant un seul objet <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> qui spécifie l'URL nécessaire pour activer un objet distant.  
Ce paramètre concerne les objets activés par le client. L’activation par le client est une technologie héritée qui a été conservée pour la compatibilité descendante. Toutefois, elle n’est pas recommandée pour les nouveaux développements. Les applications distribuées doivent à la place utiliser Windows Communication Foundation.</param>
      <returns>Instance de l'objet spécifié par <paramref name="typeName" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> ou <paramref name="typeName" /> est <see langword="null" />.</exception>
      <exception cref="T:System.MissingMethodException">Aucun constructeur public correspondant n’a été trouvé.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typename" /> est introuvable dans <paramref name="assemblyName" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyName" /> est introuvable.</exception>
      <exception cref="T:System.MethodAccessException">L’appelant n’est pas autorisé à appeler ce constructeur.</exception>
      <exception cref="T:System.NotSupportedException">L’appelant ne peut pas fournir d’attributs d’activation pour un objet qui n’hérite pas de <see cref="T:System.MarshalByRefObject" />.</exception>
      <exception cref="T:System.AppDomainUnloadedException">L’opération est tentée sur un domaine d’application non chargé.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> n’est pas un assembly valide.  
ou 
La version 2.0 ou ultérieure du Common Language Runtime est actuellement chargée et <paramref name="assemblyName" /> a été compilé avec une version ultérieure.</exception>
      <exception cref="T:System.IO.FileLoadException">Un assembly ou un module a été chargé à deux reprises avec deux preuves différentes.</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
      <summary>Crée une instance du type spécifié défini dans le fichier d'assembly déterminé.</summary>
      <param name="assemblyFile">Nom, y compris le chemin d'accès, d'un fichier qui contient un assembly définissant le type demandé. L'assembly est chargé à l'aide de la méthode <see cref="M:System.Reflection.Assembly.LoadFrom(System.String)" /> .</param>
      <param name="typeName">Nom qualifié complet du type demandé, y compris l'espace de noms mais pas l'assembly, tel qu'il est retourné par la propriété <see cref="P:System.Type.FullName" />.</param>
      <returns>Objet qui est un wrapper de la nouvelle instance, ou <see langword="null" /> si <paramref name="typeName" /> est introuvable. La valeur de retour doit être désencapsulée pour accéder à l'objet réel.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> a la valeur <see langword="null" />.  

ou - 
<paramref name="typeName" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyFile" /> est introuvable.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typeName" /> est introuvable dans <paramref name="assemblyFile" />.</exception>
      <exception cref="T:System.AppDomainUnloadedException">L’opération est tentée sur un domaine d’application non chargé.</exception>
      <exception cref="T:System.MissingMethodException">Aucun constructeur sans paramètre public n'a été trouvé.</exception>
      <exception cref="T:System.MethodAccessException">L’appelant n’a pas les autorisations suffisantes pour appeler ce constructeur.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> n’est pas un assembly valide.  

ou - 
La version 2.0 ou ultérieure du Common Language Runtime est actuellement chargée et <paramref name="assemblyFile" /> a été compilé avec une version ultérieure.</exception>
      <exception cref="T:System.IO.FileLoadException">Un assembly ou un module a été chargé à deux reprises avec deux preuves différentes.</exception>
      <exception cref="T:System.NullReferenceException">L’instance est <see langword="null" />.</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
      <summary>Crée une instance du type spécifié défini dans le fichier d'assembly déterminé.</summary>
      <param name="assemblyFile">Nom, y compris le chemin d'accès, d'un fichier qui contient un assembly définissant le type demandé. L'assembly est chargé à l'aide de la méthode <see cref="M:System.Reflection.Assembly.LoadFrom(System.String)" /> .</param>
      <param name="typeName">Nom qualifié complet du type demandé, y compris l'espace de noms mais pas l'assembly, tel qu'il est retourné par la propriété <see cref="P:System.Type.FullName" />.</param>
      <param name="ignoreCase">Valeur bouléenne spécifiant s'il convient d'effectuer ou non une recherche qui respecte la casse.</param>
      <param name="bindingAttr">Combinaison de zéro ou plusieurs bits indicateurs qui affectent la recherche du constructeur <paramref name="typeName" />. Si <paramref name="bindingAttr" /> a la valeur zéro, une recherche de constructeurs publics qui respecte la casse est effectuée.</param>
      <param name="binder">Objet qui active la liaison, la contrainte de types d'arguments, l'appel des membres et la récupération d'objets <see cref="T:System.Reflection.MemberInfo" /> par la réflexion. Si <paramref name="binder" /> est null, le binder par défaut est utilisé.</param>
      <param name="args">Arguments à passer au constructeur. Ce tableau d'arguments doit posséder les mêmes nombre, ordre et type que les paramètres du constructeur à appeler. Si vous souhaitez utiliser le constructeur sans paramètre, <paramref name="args" /> doit être un tableau vide ou Null.</param>
      <param name="culture">Informations propres à la culture qui définissent la contrainte de <paramref name="args" /> pour les types formels déclarés du constructeur <paramref name="typeName" />. Si <paramref name="culture" /> est <see langword="null" />, le <see cref="T:System.Globalization.CultureInfo" /> du thread actuel est utilisé.</param>
      <param name="activationAttributes">Tableau à un ou plusieurs attributs pouvant participer à l'activation. En général, tableau contenant un seul objet <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> qui spécifie l'URL nécessaire pour activer un objet distant.  
Ce paramètre est lié aux objets activés par le client. L'activation des clients est une technologie héritée qui est conservée pour la compatibilité descendante, mais elle n'est pas recommandée pour un nouveau développement. Les applications distribuées doivent à la place utiliser Windows Communication Foundation.</param>
      <returns>Objet qui est un wrapper de la nouvelle instance, ou <see langword="null" /> si <paramref name="typeName" /> est introuvable. La valeur de retour doit être désencapsulée pour accéder à l'objet réel.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> a la valeur <see langword="null" />.  

ou - 
<paramref name="typeName" /> est <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">L’appelant ne peut pas fournir d’attributs d’activation pour un objet qui n’hérite pas de <see cref="T:System.MarshalByRefObject" />.</exception>
      <exception cref="T:System.AppDomainUnloadedException">L’opération est tentée sur un domaine d’application non chargé.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyFile" /> est introuvable.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typeName" /> est introuvable dans <paramref name="assemblyFile" />.</exception>
      <exception cref="T:System.MissingMethodException">Aucun constructeur public correspondant n’a été trouvé.</exception>
      <exception cref="T:System.MethodAccessException">L’appelant n’a pas les autorisations suffisantes pour appeler ce constructeur.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> n’est pas un assembly valide.  

ou - 
<paramref name="assemblyFile" /> a été compilé avec une version du Common Language Runtime ultérieure à la version actuellement chargée.</exception>
      <exception cref="T:System.IO.FileLoadException">Un assembly ou un module a été chargé à deux reprises avec deux preuves différentes.</exception>
      <exception cref="T:System.NullReferenceException">L’instance est <see langword="null" />.</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Object[])">
      <summary>Crée une instance du type spécifié défini dans le fichier d'assembly déterminé.</summary>
      <param name="assemblyFile">Nom, y compris le chemin d'accès, d'un fichier qui contient un assembly définissant le type demandé. L'assembly est chargé à l'aide de la méthode <see cref="M:System.Reflection.Assembly.LoadFrom(System.String)" /> .</param>
      <param name="typeName">Nom qualifié complet du type demandé, y compris l'espace de noms mais pas l'assembly, tel qu'il est retourné par la propriété <see cref="P:System.Type.FullName" />.</param>
      <param name="activationAttributes">Tableau à un ou plusieurs attributs pouvant participer à l'activation. En général, tableau contenant un seul objet <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> qui spécifie l'URL nécessaire pour activer un objet distant.  
Ce paramètre concerne les objets activés par le client. L’activation par le client est une technologie héritée qui a été conservée pour la compatibilité descendante. Toutefois, elle n’est pas recommandée pour les nouveaux développements. Les applications distribuées doivent à la place utiliser Windows Communication Foundation.</param>
      <returns>Objet qui est un wrapper de la nouvelle instance, ou <see langword="null" /> si <paramref name="typeName" /> est introuvable. La valeur de retour doit être désencapsulée pour accéder à l'objet réel.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyFile" /> est introuvable.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typeName" /> est introuvable dans <paramref name="assemblyFile" />.</exception>
      <exception cref="T:System.MethodAccessException">L’appelant n’a pas les autorisations suffisantes pour appeler ce constructeur.</exception>
      <exception cref="T:System.MissingMethodException">Aucun constructeur public correspondant n’a été trouvé.</exception>
      <exception cref="T:System.NotSupportedException">L’appelant ne peut pas fournir d’attributs d’activation pour un objet qui n’hérite pas de <see cref="T:System.MarshalByRefObject" />.</exception>
      <exception cref="T:System.AppDomainUnloadedException">L’opération est tentée sur un domaine d’application non chargé.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> n’est pas un assembly valide.  
ou 
La version 2.0 ou ultérieure du Common Language Runtime est actuellement chargée et <paramref name="assemblyFile" /> a été compilé avec une version ultérieure.</exception>
      <exception cref="T:System.IO.FileLoadException">Un assembly ou un module a été chargé à deux reprises avec deux preuves différentes.</exception>
      <exception cref="T:System.NullReferenceException">L’instance est <see langword="null" />.</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String)">
      <summary>Crée une instance du type spécifié défini dans le fichier d'assembly déterminé.</summary>
      <param name="assemblyName">Nom de fichier et chemin d’accès à l’assembly qui définit le type demandé.</param>
      <param name="typeName">Nom qualifié complet du type demandé, y compris l'espace de noms mais pas l'assembly, tel qu'il est retourné par la propriété <see cref="P:System.Type.FullName" />.</param>
      <returns>L'objet demandé, ou <see langword="null" /> si <paramref name="typeName" /> est introuvable.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> a la valeur <see langword="null" />.  

ou - 
<paramref name="typeName" /> est <see langword="null" />.</exception>
      <exception cref="T:System.AppDomainUnloadedException">L’opération est tentée sur un domaine d’application non chargé.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyName" /> est introuvable.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typeName" /> est introuvable dans <paramref name="assemblyName" />.</exception>
      <exception cref="T:System.MissingMethodException">Aucun constructeur sans paramètre public n'a été trouvé.</exception>
      <exception cref="T:System.MethodAccessException">L’appelant n’a pas les autorisations suffisantes pour appeler ce constructeur.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> n’est pas un assembly valide.  
ou 
La version 2.0 ou ultérieure du Common Language Runtime est actuellement chargée et <paramref name="assemblyName" /> a été compilé avec une version ultérieure.</exception>
      <exception cref="T:System.IO.FileLoadException">Un assembly ou un module a été chargé à deux reprises avec deux preuves différentes.</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
      <summary>Crée une instance du type spécifié défini dans le fichier d’assembly spécifié, en indiquant si la casse du nom de type est ignorée ; les attributs de liaison et le binder utilisés pour sélectionner le type à créer ; les arguments du constructeur ; la culture et les attributs d’activation.</summary>
      <param name="assemblyFile">Nom de fichier et chemin d’accès à l’assembly qui définit le type demandé.</param>
      <param name="typeName">Nom qualifié complet du type demandé, y compris l'espace de noms mais pas l'assembly, tel qu'il est retourné par la propriété <see cref="P:System.Type.FullName" />.</param>
      <param name="ignoreCase">Valeur bouléenne spécifiant s'il convient d'effectuer ou non une recherche qui respecte la casse.</param>
      <param name="bindingAttr">Combinaison de zéro ou plusieurs bits indicateurs qui affectent la recherche du constructeur <paramref name="typeName" />. Si <paramref name="bindingAttr" /> a la valeur zéro, une recherche de constructeurs publics qui respecte la casse est effectuée.</param>
      <param name="binder">Objet qui active la liaison, la contrainte de types d'arguments, l'appel des membres et la récupération d'objets <see cref="T:System.Reflection.MemberInfo" /> par la réflexion. Si <paramref name="binder" /> est null, le binder par défaut est utilisé.</param>
      <param name="args">Arguments à passer au constructeur. Ce tableau d'arguments doit posséder les mêmes nombre, ordre et type que les paramètres du constructeur à appeler. Si vous souhaitez utiliser le constructeur sans paramètre, <paramref name="args" /> doit être un tableau vide ou Null.</param>
      <param name="culture">Informations propres à la culture qui définissent la contrainte de <paramref name="args" /> pour les types formels déclarés du constructeur <paramref name="typeName" />. Si <paramref name="culture" /> est <see langword="null" />, le <see cref="T:System.Globalization.CultureInfo" /> du thread actuel est utilisé.</param>
      <param name="activationAttributes">Tableau à un ou plusieurs attributs pouvant participer à l'activation. En général, tableau contenant un seul objet <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> qui spécifie l'URL nécessaire pour activer un objet distant.  
Ce paramètre est lié aux objets activés par le client. L'activation des clients est une technologie héritée qui est conservée pour la compatibilité descendante, mais elle n'est pas recommandée pour un nouveau développement. Les applications distribuées doivent à la place utiliser Windows Communication Foundation.</param>
      <returns>L'objet demandé, ou <see langword="null" /> si <paramref name="typeName" /> est introuvable.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> est <see langword="null" />.  

ou - 
<paramref name="typeName" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">L’appelant ne peut pas fournir d’attributs d’activation pour un objet qui n’hérite pas de <see cref="T:System.MarshalByRefObject" />.</exception>
      <exception cref="T:System.AppDomainUnloadedException">L’opération est tentée sur un domaine d’application non chargé.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyName" /> est introuvable.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typeName" /> est introuvable dans <paramref name="assemblyName" />.</exception>
      <exception cref="T:System.MissingMethodException">Aucun constructeur public correspondant n’a été trouvé.</exception>
      <exception cref="T:System.MethodAccessException">L’appelant n’a pas les autorisations suffisantes pour appeler ce constructeur.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> n’est pas un assembly valide.  

ou - 
<paramref name="assemblyName" /> a été compilé avec une version du Common Language Runtime ultérieure à la version actuellement chargée.</exception>
      <exception cref="T:System.IO.FileLoadException">Un assembly ou un module a été chargé à deux reprises avec deux preuves différentes.</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Object[])">
      <summary>Crée une instance du type spécifié défini dans le fichier d'assembly déterminé.</summary>
      <param name="assemblyName">Nom de fichier et chemin d’accès à l’assembly qui définit le type demandé.</param>
      <param name="typeName">Nom qualifié complet du type demandé, y compris l'espace de noms mais pas l'assembly (consultez la propriété <see cref="P:System.Type.FullName" />).</param>
      <param name="activationAttributes">Tableau à un ou plusieurs attributs pouvant participer à l'activation. En général, tableau contenant un seul objet <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> qui spécifie l'URL nécessaire pour activer un objet distant.  
Ce paramètre concerne les objets activés par le client. L’activation par le client est une technologie héritée qui a été conservée pour la compatibilité descendante. Toutefois, elle n’est pas recommandée pour les nouveaux développements. Les applications distribuées doivent à la place utiliser Windows Communication Foundation.</param>
      <returns>L'objet demandé, ou <see langword="null" /> si <paramref name="typeName" /> est introuvable.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> est <see langword="null" />.  

ou - 
<paramref name="typeName" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">L’appelant ne peut pas fournir d’attributs d’activation pour un objet qui n’hérite pas de <see cref="T:System.MarshalByRefObject" />.</exception>
      <exception cref="T:System.AppDomainUnloadedException">L’opération est tentée sur un domaine d’application non chargé.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyName" /> est introuvable.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typeName" /> est introuvable dans <paramref name="assemblyName" />.</exception>
      <exception cref="T:System.MissingMethodException">Aucun constructeur sans paramètre public n'a été trouvé.</exception>
      <exception cref="T:System.MethodAccessException">L’appelant n’a pas les autorisations suffisantes pour appeler ce constructeur.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> n’est pas un assembly valide.  
ou 
La version 2.0 ou ultérieure du Common Language Runtime est actuellement chargée et <paramref name="assemblyName" /> a été compilé avec une version ultérieure.</exception>
      <exception cref="T:System.IO.FileLoadException">Un assembly ou un module a été chargé à deux reprises avec deux preuves différentes.</exception>
    </member>
    <member name="P:System.AppDomain.CurrentDomain">
      <summary>Obtient le domaine d'application actuel pour le <see cref="T:System.Threading.Thread" /> actuel.</summary>
      <returns>Domaine d'application actuel.</returns>
    </member>
    <member name="E:System.AppDomain.DomainUnload">
      <summary>Se produit quand <see cref="T:System.AppDomain" /> est sur le point d'être déchargé.</summary>
    </member>
    <member name="P:System.AppDomain.DynamicDirectory">
      <summary>Obtient le répertoire utilisé par le programme de résolution d'assembly pour détecter les assemblys créés de manière dynamique.</summary>
      <returns>Répertoire utilisé par le programme de résolution d'assembly pour détecter les assemblys créés de manière dynamique.</returns>
      <exception cref="T:System.AppDomainUnloadedException">L’opération est tentée sur un domaine d’application non chargé.</exception>
    </member>
    <member name="M:System.AppDomain.ExecuteAssembly(System.String)">
      <summary>Exécute l'assembly contenu dans le fichier spécifié.</summary>
      <param name="assemblyFile">Nom du fichier contenant l'assembly à exécuter.</param>
      <returns>Valeur retournée par le point d'entrée de l'assembly.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyFile" /> est introuvable.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> n’est pas un assembly valide.  
ou 
La version 2.0 ou ultérieure du common language runtime est actuellement chargée et <paramref name="assemblyFile" /> a été compilé avec une version ultérieure.</exception>
      <exception cref="T:System.AppDomainUnloadedException">L’opération est tentée sur un domaine d’application non chargé.</exception>
      <exception cref="T:System.IO.FileLoadException">Un assembly ou un module a été chargé à deux reprises avec deux preuves différentes.</exception>
      <exception cref="T:System.MissingMethodException">L’assembly spécifié n’a aucun point d’entrée.</exception>
    </member>
    <member name="M:System.AppDomain.ExecuteAssembly(System.String,System.String[])">
      <summary>Exécute l’assembly contenu dans le fichier spécifié à l’aide des arguments spécifiés.</summary>
      <param name="assemblyFile">Nom du fichier contenant l'assembly à exécuter.</param>
      <param name="args">Arguments pour le point d'entrée de l'assembly.</param>
      <returns>Valeur qui est retournée par le point d'entrée de l'assembly.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyFile" /> est introuvable.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> n’est pas un assembly valide.  

ou - 
<paramref name="assemblyFile" /> a été compilé avec une version du Common Language Runtime ultérieure à la version actuellement chargée.</exception>
      <exception cref="T:System.AppDomainUnloadedException">L’opération est tentée sur un domaine d’application non chargé.</exception>
      <exception cref="T:System.IO.FileLoadException">Un assembly ou un module a été chargé à deux reprises avec deux preuves différentes.</exception>
      <exception cref="T:System.MissingMethodException">L’assembly spécifié n’a aucun point d’entrée.</exception>
    </member>
    <member name="M:System.AppDomain.ExecuteAssembly(System.String,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
      <summary>Exécute l’assembly contenu dans le fichier spécifié à l’aide des arguments, de la valeur et de l’algorithme de hachage spécifiés.</summary>
      <param name="assemblyFile">Nom du fichier contenant l'assembly à exécuter.</param>
      <param name="args">Arguments pour le point d'entrée de l'assembly.</param>
      <param name="hashValue">Représente la valeur du code de hachage calculé.</param>
      <param name="hashAlgorithm">Représente l'algorithme de hachage utilisé par le manifeste d'assembly.</param>
      <returns>Valeur qui est retournée par le point d'entrée de l'assembly.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyFile" /> est introuvable.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> n’est pas un assembly valide.  

ou - 
<paramref name="assemblyFile" /> a été compilé avec une version du Common Language Runtime ultérieure à la version actuellement chargée.</exception>
      <exception cref="T:System.AppDomainUnloadedException">L’opération est tentée sur un domaine d’application non chargé.</exception>
      <exception cref="T:System.IO.FileLoadException">Un assembly ou un module a été chargé à deux reprises avec deux preuves différentes.</exception>
      <exception cref="T:System.MissingMethodException">L’assembly spécifié n’a aucun point d’entrée.</exception>
    </member>
    <member name="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.String[])">
      <summary>Exécute l’assembly à partir d’un <see cref="T:System.Reflection.AssemblyName" />, à l’aide des arguments spécifiés.</summary>
      <param name="assemblyName">Objet <see cref="T:System.Reflection.AssemblyName" /> représentant le nom de l'assembly.</param>
      <param name="args">Arguments de ligne de commande à passer au moment du démarrage du processus.</param>
      <returns>Valeur qui est retournée par le point d'entrée de l'assembly.</returns>
      <exception cref="T:System.IO.FileNotFoundException">L’assembly spécifié par <paramref name="assemblyName" /> est introuvable.</exception>
      <exception cref="T:System.IO.FileLoadException">L’assembly spécifié par <paramref name="assemblyName" /> a été trouvé, mais ne peut pas être chargé.</exception>
      <exception cref="T:System.BadImageFormatException">L’assembly spécifié par <paramref name="assemblyName" /> n’est pas un assembly valide.  

ou - 
<paramref name="assemblyName" /> a été compilé avec une version du Common Language Runtime ultérieure à la version actuellement chargée.</exception>
      <exception cref="T:System.AppDomainUnloadedException">L’opération est tentée sur un domaine d’application non chargé.</exception>
      <exception cref="T:System.MissingMethodException">L’assembly spécifié n’a aucun point d’entrée.</exception>
    </member>
    <member name="M:System.AppDomain.ExecuteAssemblyByName(System.String)">
      <summary>Charge un assembly en fonction de son nom complet.</summary>
      <param name="assemblyName">Nom complet de l'assembly. Consultez <see cref="P:System.Reflection.Assembly.FullName" />.</param>
      <returns>Valeur retournée par le point d'entrée de l'assembly.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">L’assembly spécifié par <paramref name="assemblyName" /> est introuvable.</exception>
      <exception cref="T:System.BadImageFormatException">L’assembly spécifié par <paramref name="assemblyName" /> n’est pas un assembly valide.  

ou - 
La version 2.0 ou ultérieure du common language runtime est actuellement chargée et <paramref name="assemblyName" /> a été compilé avec une version ultérieure.</exception>
      <exception cref="T:System.AppDomainUnloadedException">L’opération est tentée sur un domaine d’application non chargé.</exception>
      <exception cref="T:System.IO.FileLoadException">L’assembly spécifié par <paramref name="assemblyName" /> a été trouvé, mais ne peut pas être chargé.</exception>
      <exception cref="T:System.MissingMethodException">L’assembly spécifié n’a aucun point d’entrée.</exception>
    </member>
    <member name="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.String[])">
      <summary>Exécute l'assembly en fonction de son nom complet, à l'aide des arguments spécifiés.</summary>
      <param name="assemblyName">Nom complet de l'assembly. Consultez <see cref="P:System.Reflection.Assembly.FullName" />.</param>
      <param name="args">Arguments de ligne de commande à passer au moment du démarrage du processus.</param>
      <returns>Valeur qui est retournée par le point d'entrée de l'assembly.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">L’assembly spécifié par <paramref name="assemblyName" /> est introuvable.</exception>
      <exception cref="T:System.IO.FileLoadException">L’assembly spécifié par <paramref name="assemblyName" /> a été trouvé, mais ne peut pas être chargé.</exception>
      <exception cref="T:System.BadImageFormatException">L’assembly spécifié par <paramref name="assemblyName" /> n’est pas un assembly valide.  

ou - 
<paramref name="assemblyName" /> a été compilé avec une version du Common Language Runtime ultérieure à la version actuellement chargée.</exception>
      <exception cref="T:System.AppDomainUnloadedException">L’opération est tentée sur un domaine d’application non chargé.</exception>
      <exception cref="T:System.MissingMethodException">L’assembly spécifié n’a aucun point d’entrée.</exception>
    </member>
    <member name="E:System.AppDomain.FirstChanceException">
      <summary>Se produit quand une exception est levée dans le code managé, avant que l'exécution ne recherche un gestionnaire d'exceptions dans la pile des appels du domaine d'application.</summary>
    </member>
    <member name="P:System.AppDomain.FriendlyName">
      <summary>Obtient le nom convivial de ce domaine d'application.</summary>
      <returns>Nom convivial de ce domaine d'application.</returns>
      <exception cref="T:System.AppDomainUnloadedException">L’opération est tentée sur un domaine d’application non chargé.</exception>
    </member>
    <member name="M:System.AppDomain.GetAssemblies">
      <summary>Obtient les assemblys qui ont été chargés dans le contexte d'exécution de ce domaine d'application.</summary>
      <returns>Tableau d'assemblys de ce domaine d'application.</returns>
      <exception cref="T:System.AppDomainUnloadedException">L’opération est tentée sur un domaine d’application non chargé.</exception>
    </member>
    <member name="M:System.AppDomain.GetCurrentThreadId">
      <summary>Obtient l'identificateur du thread actuel.</summary>
      <returns>Entier signé 32 bits qui correspond à l'identificateur du thread actuel.</returns>
    </member>
    <member name="M:System.AppDomain.GetData(System.String)">
      <summary>Obtient la valeur stockée dans le domaine d'application actuel pour le nom spécifié.</summary>
      <param name="name">Nom d'une propriété de domaine d'application prédéfinie ou nom d'une propriété de domaine d'application que vous avez définie.</param>
      <returns>Valeur de la propriété <paramref name="name" />, ou <see langword="null" /> si elle n'existe pas.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.AppDomainUnloadedException">L’opération est tentée sur un domaine d’application non chargé.</exception>
    </member>
    <member name="P:System.AppDomain.Id">
      <summary>Obtient un entier qui identifie de façon unique le domaine d'application au sein du processus.</summary>
      <returns>Entier qui identifie le domaine d'application.</returns>
    </member>
    <member name="M:System.AppDomain.IsCompatibilitySwitchSet(System.String)">
      <summary>Obtient une valeur booléenne Nullable qui indique si les commutateurs de compatibilité sont définis, et si tel est le cas, si le commutateur de compatibilité spécifié est défini.</summary>
      <param name="value">Commutateur de compatibilité à tester.</param>
      <returns>Une référence null (<see langword="Nothing" /> en Visual Basic) si aucun commutateur de compatibilité n'est défini ; sinon, une valeur booléenne qui indique si le commutateur de compatibilité spécifié par <paramref name="value" /> est défini.</returns>
    </member>
    <member name="M:System.AppDomain.IsDefaultAppDomain">
      <summary>Retourne une valeur qui indique si le domaine d'application est le domaine d'application par défaut du processus.</summary>
      <returns>
        <see langword="true" /> si l'objet <see cref="T:System.AppDomain" /> en cours représente le domaine d'application par défaut du processus ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.AppDomain.IsFinalizingForUnload">
      <summary>Indique si le déchargement de ce domaine d'application est en cours et si les objets qu'il contient sont en cours de finalisation par le Common Language Runtime.</summary>
      <returns>
        <see langword="true" /> si le déchargement du domaine d'application est en cours et que le Common Language Runtime a commencé à appeler les finaliseurs ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.AppDomain.IsFullyTrusted">
      <summary>Obtient une valeur qui indique si les assemblys chargés dans le domaine d'application actuel s'exécutent avec la confiance totale.</summary>
      <returns>
        <see langword="true" /> si les assemblys chargés dans le domaine d'application actuel s'exécutent avec la confiance totale ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.AppDomain.IsHomogenous">
      <summary>Obtient une valeur qui indique si le domaine d'application actuel dispose d'un jeu d'autorisations accordé à tous les assemblys chargés dans le domaine d'application.</summary>
      <returns>
        <see langword="true" /> si le domaine d'application actuel dispose d'un jeu d'autorisations homogène ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.AppDomain.Load(System.Byte[])">
      <summary>Charge <see cref="T:System.Reflection.Assembly" /> avec l'image au format COFF (Common Object File Format) contenant un <see cref="T:System.Reflection.Assembly" /> émis.</summary>
      <param name="rawAssembly">Tableau de type <see langword="byte" /> qui est une image au format COFF contenant un assembly émis.</param>
      <returns>Assembly chargé.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rawAssembly" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="rawAssembly" /> n’est pas un assembly valide.  

ou - 
La version 2.0 ou ultérieure du common language runtime est actuellement chargée et <paramref name="rawAssembly" /> a été compilé avec une version ultérieure.</exception>
      <exception cref="T:System.AppDomainUnloadedException">L’opération est tentée sur un domaine d’application non chargé.</exception>
      <exception cref="T:System.IO.FileLoadException">Un assembly ou un module a été chargé à deux reprises avec deux preuves différentes.</exception>
    </member>
    <member name="M:System.AppDomain.Load(System.Byte[],System.Byte[])">
      <summary>Charge <see cref="T:System.Reflection.Assembly" /> avec l'image au format COFF (Common Object File Format) contenant un <see cref="T:System.Reflection.Assembly" /> émis. Les octets bruts représentant les symboles de <see cref="T:System.Reflection.Assembly" /> sont également chargés.</summary>
      <param name="rawAssembly">Tableau de type <see langword="byte" /> qui est une image au format COFF contenant un assembly émis.</param>
      <param name="rawSymbolStore">Tableau de type <see langword="byte" /> contenant les octets bruts représentant les symboles de l'assembly.</param>
      <returns>Assembly chargé.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rawAssembly" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="rawAssembly" /> n’est pas un assembly valide.  

ou - 
La version 2.0 ou ultérieure du common language runtime est actuellement chargée et <paramref name="rawAssembly" /> a été compilé avec une version ultérieure.</exception>
      <exception cref="T:System.AppDomainUnloadedException">L’opération est tentée sur un domaine d’application non chargé.</exception>
      <exception cref="T:System.IO.FileLoadException">Un assembly ou un module a été chargé à deux reprises avec deux preuves différentes.</exception>
    </member>
    <member name="M:System.AppDomain.Load(System.Reflection.AssemblyName)">
      <summary>Charge <see cref="T:System.Reflection.Assembly" /> en fonction de son <see cref="T:System.Reflection.AssemblyName" />.</summary>
      <param name="assemblyRef">Objet qui décrit l'assembly à charger.</param>
      <returns>Assembly chargé.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyRef" /> est <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyRef" /> est introuvable.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyRef" /> n’est pas un assembly valide.  

ou - 
La version 2.0 ou ultérieure du common language runtime est actuellement chargée et <paramref name="assemblyRef" /> a été compilé avec une version ultérieure.</exception>
      <exception cref="T:System.AppDomainUnloadedException">L’opération est tentée sur un domaine d’application non chargé.</exception>
      <exception cref="T:System.IO.FileLoadException">Un assembly ou un module a été chargé à deux reprises avec deux preuves différentes.</exception>
    </member>
    <member name="M:System.AppDomain.Load(System.String)">
      <summary>Charge <see cref="T:System.Reflection.Assembly" /> en fonction de son nom complet.</summary>
      <param name="assemblyString">Nom complet de l'assembly. Consultez <see cref="P:System.Reflection.Assembly.FullName" />.</param>
      <returns>Assembly chargé.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyString" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyString" /> est introuvable.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyString" /> n’est pas un assembly valide.  
ou 
La version 2.0 ou ultérieure du common language runtime est actuellement chargée et <paramref name="assemblyString" /> a été compilé avec une version ultérieure.</exception>
      <exception cref="T:System.AppDomainUnloadedException">L’opération est tentée sur un domaine d’application non chargé.</exception>
      <exception cref="T:System.IO.FileLoadException">Un assembly ou un module a été chargé à deux reprises avec deux preuves différentes.</exception>
    </member>
    <member name="P:System.AppDomain.MonitoringIsEnabled">
      <summary>Obtient ou définit une valeur qui indique si l'analyse de la mémoire et du processeur des domaines d'application est activée pour le processus actuel. Quand l'analyse a été activée pour un processus, elle ne peut plus être désactivée.</summary>
      <returns>
        <see langword="true" /> si l'analyse est activée ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">Le processus actif a tenté d’affecter la valeur <see langword="false" /> à cette propriété.</exception>
    </member>
    <member name="P:System.AppDomain.MonitoringSurvivedMemorySize">
      <summary>Obtient le nombre d’octets qui ont survécu à la dernière collection et qui sont référencés par le domaine d’application actuel.</summary>
      <returns>Nombre d'octets survivants.</returns>
      <exception cref="T:System.InvalidOperationException">La propriété <see langword="static" /> (<see langword="Shared" /> en Visual Basic) <see cref="P:System.AppDomain.MonitoringIsEnabled" /> est définie sur <see langword="false" />.</exception>
    </member>
    <member name="P:System.AppDomain.MonitoringSurvivedProcessMemorySize">
      <summary>Obtient le nombre total d'octets qui ont survécu à la dernière collection pour tous les domaines d'application dans le processus.</summary>
      <returns>Nombre total d'octets survivants pour le processus.</returns>
      <exception cref="T:System.InvalidOperationException">La propriété <see langword="static" /> (<see langword="Shared" /> en Visual Basic) <see cref="P:System.AppDomain.MonitoringIsEnabled" /> est définie sur <see langword="false" />.</exception>
    </member>
    <member name="P:System.AppDomain.MonitoringTotalAllocatedMemorySize">
      <summary>Obtient la taille totale, en octets, de toutes les allocations de mémoire effectuées par le domaine d'application depuis sa création, sans soustraire la mémoire collectée.</summary>
      <returns>Taille totale de toutes les allocations de mémoire.</returns>
      <exception cref="T:System.InvalidOperationException">La propriété <see langword="static" /> (<see langword="Shared" /> en Visual Basic) <see cref="P:System.AppDomain.MonitoringIsEnabled" /> est définie sur <see langword="false" />.</exception>
    </member>
    <member name="P:System.AppDomain.MonitoringTotalProcessorTime">
      <summary>Obtient le temps processeur total utilisé par tous les threads pendant leur exécution dans le domaine d'application actuel, depuis le démarrage du processus.</summary>
      <returns>Temps processeur total pour le domaine d'application actuel.</returns>
      <exception cref="T:System.InvalidOperationException">La propriété <see langword="static" /> (<see langword="Shared" /> en Visual Basic) <see cref="P:System.AppDomain.MonitoringIsEnabled" /> est définie sur <see langword="false" />.</exception>
    </member>
    <member name="P:System.AppDomain.PermissionSet">
      <summary>Obtient le jeu d'autorisations d'un domaine d'application en mode bac à sable (sandbox).</summary>
      <returns>Jeu d'autorisations du domaine d'application en mode bac à sable (sandbox).</returns>
    </member>
    <member name="E:System.AppDomain.ProcessExit">
      <summary>Se produit quand le processus parent du domaine d'application par défaut s'arrête.</summary>
    </member>
    <member name="E:System.AppDomain.ReflectionOnlyAssemblyResolve">
      <summary>Se produit quand la résolution d'un assembly échoue dans le contexte de réflexion uniquement.</summary>
    </member>
    <member name="M:System.AppDomain.ReflectionOnlyGetAssemblies">
      <summary>Retourne les assemblys qui ont été chargés dans le contexte de réflexion uniquement du domaine d'application.</summary>
      <returns>Tableau d'objets <see cref="T:System.Reflection.Assembly" /> qui représentent les assemblys chargés dans le contexte de réflexion uniquement du domaine d'application.</returns>
      <exception cref="T:System.AppDomainUnloadedException">Une tentative d'opération est en cours sur un domaine d'application non chargé.</exception>
    </member>
    <member name="P:System.AppDomain.RelativeSearchPath">
      <summary>Obtient le chemin d'accès sous le répertoire de base où le programme de résolution d'assembly doit détecter les assemblys privés.</summary>
      <returns>Chemin d’accès sous le répertoire de base où le programme de résolution d’assembly doit détecter les assemblys privés.</returns>
      <exception cref="T:System.AppDomainUnloadedException">L’opération est tentée sur un domaine d’application non chargé.</exception>
    </member>
    <member name="E:System.AppDomain.ResourceResolve">
      <summary>Se produit quand la résolution d’une ressource échoue car la ressource n’est pas une ressource liée ou incorporée valide de l’assembly.</summary>
    </member>
    <member name="M:System.AppDomain.SetCachePath(System.String)">
      <summary>Définit le chemin d'accès du répertoire spécifié comme emplacement pour les clichés instantanés des assemblys.</summary>
      <param name="path">Chemin d’accès qualifié complet à l’emplacement des clichés instantanés.</param>
      <exception cref="T:System.AppDomainUnloadedException">L’opération est tentée sur un domaine d’application non chargé.</exception>
    </member>
    <member name="M:System.AppDomain.SetData(System.String,System.Object)">
      <summary>Assigne la valeur spécifiée à la propriété du domaine d'application spécifié.</summary>
      <param name="name">Nom d'une propriété de domaine d'application définie par l'utilisateur à créer ou à changer.</param>
      <param name="data">Valeur de la propriété.</param>
      <exception cref="T:System.AppDomainUnloadedException">L’opération est tentée sur un domaine d’application non chargé.</exception>
    </member>
    <member name="M:System.AppDomain.SetDynamicBase(System.String)">
      <summary>Définit le chemin de répertoire spécifié comme répertoire de base des sous-répertoires dans lesquels sont stockés les fichiers générés de manière dynamique et à partir desquels ils sont accessibles.</summary>
      <param name="path">Chemin qualifié complet qui est le répertoire de base des sous-répertoires où sont stockés les assemblys dynamiques.</param>
      <exception cref="T:System.AppDomainUnloadedException">L’opération est tentée sur un domaine d’application non chargé.</exception>
    </member>
    <member name="M:System.AppDomain.SetPrincipalPolicy(System.Security.Principal.PrincipalPolicy)">
      <summary>Spécifie la façon dont les objets Principal et Identity doivent être attachés à un thread si celui-ci tente d'établir une liaison vers un principal au moment de l'exécution dans ce domaine d'application.</summary>
      <param name="policy">L'une des valeurs de <see cref="T:System.Security.Principal.PrincipalPolicy" /> qui spécifie le type de l'objet principal à joindre aux threads.</param>
      <exception cref="T:System.AppDomainUnloadedException">L’opération est tentée sur un domaine d’application non chargé.</exception>
    </member>
    <member name="M:System.AppDomain.SetShadowCopyFiles">
      <summary>Active les clichés instantanés.</summary>
      <exception cref="T:System.AppDomainUnloadedException">L’opération est tentée sur un domaine d’application non chargé.</exception>
    </member>
    <member name="M:System.AppDomain.SetShadowCopyPath(System.String)">
      <summary>Définit le chemin d’accès du répertoire spécifié comme emplacement pour les clichés instantanés des assemblys.</summary>
      <param name="path">Liste de noms de répertoires, où chaque nom est séparé par un point-virgule.</param>
      <exception cref="T:System.AppDomainUnloadedException">L’opération est tentée sur un domaine d’application non chargé.</exception>
    </member>
    <member name="M:System.AppDomain.SetThreadPrincipal(System.Security.Principal.IPrincipal)">
      <summary>Définit l'objet Principal par défaut à attacher aux threads si ceux-ci tentent d'établir une liaison vers un principal au moment de l'exécution dans ce domaine d'application.</summary>
      <param name="principal">Objet Principal à attacher aux threads.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="principal" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Security.Policy.PolicyException">L'entité de sécurité du thread a déjà été définie.</exception>
      <exception cref="T:System.AppDomainUnloadedException">L’opération est tentée sur un domaine d’application non chargé.</exception>
    </member>
    <member name="P:System.AppDomain.SetupInformation">
      <summary>Obtient les informations de configuration du domaine d'application pour cette instance.</summary>
      <returns>Informations d'initialisation du domaine d'application.</returns>
      <exception cref="T:System.AppDomainUnloadedException">L’opération est tentée sur un domaine d’application non chargé.</exception>
    </member>
    <member name="P:System.AppDomain.ShadowCopyFiles">
      <summary>Obtient une indication précisant si le domaine d'application est configuré pour effectuer un cliché instantané des fichiers.</summary>
      <returns>
        <see langword="true" /> si le domaine d'application est configuré pour effectuer un cliché instantané des fichiers ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.AppDomainUnloadedException">L’opération est tentée sur un domaine d’application non chargé.</exception>
    </member>
    <member name="M:System.AppDomain.ToString">
      <summary>Obtient une représentation sous forme de chaîne qui inclut le nom convivial du domaine d'application et les stratégies de contexte.</summary>
      <returns>Chaîne formée en concaténant la chaîne littérale « Nom : », le nom convivial du domaine d'application, et les représentations sous forme de chaîne des stratégies de contexte ou la chaîne « Aucune stratégie de contexte ».</returns>
      <exception cref="T:System.AppDomainUnloadedException">Le domaine d'application représenté par le <see cref="T:System.AppDomain" /> en cours a été déchargé.</exception>
    </member>
    <member name="E:System.AppDomain.TypeResolve">
      <summary>Se produit quand la résolution d'un type échoue.</summary>
    </member>
    <member name="E:System.AppDomain.UnhandledException">
      <summary>Se produit quand une exception n'est pas interceptée.</summary>
    </member>
    <member name="M:System.AppDomain.Unload(System.AppDomain)">
      <summary>Décharge le domaine d'application spécifié.</summary>
      <param name="domain">Domaine d'application à décharger.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="domain" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.CannotUnloadAppDomainException">Le <paramref name="domain" /> n'a pas pu être déchargé.</exception>
      <exception cref="T:System.Exception">Une erreur s'est produite pendant le processus de déchargement.</exception>
    </member>
    <member name="T:System.AppDomainSetup">
      <summary>Représente des informations sur les liaisons d'assemblys qui peuvent être ajoutées à une instance de <see cref="T:System.AppDomain" />.</summary>
    </member>
    <member name="P:System.AppDomainSetup.ApplicationBase">
      <summary>Obtient ou définit le nom du répertoire contenant l'application.</summary>
      <returns>Nom du répertoire de base de l'application.</returns>
    </member>
    <member name="P:System.AppDomainSetup.TargetFrameworkName">
      <summary>Obtient ou définit une chaîne qui spécifie la version et le profil cibles de .NET Framework pour le domaine d'application, dans un format qui peut être analysé par le constructeur <see cref="M:System.Runtime.Versioning.FrameworkName.#ctor(System.String)" /> .</summary>
      <returns>Version et profil cibles de .NET Framework.</returns>
    </member>
    <member name="T:System.AppDomainUnloadedException">
      <summary>Exception levée lors d'une tentative d'accès à un domaine d'application non chargé.</summary>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.AppDomainUnloadedException" />.</summary>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.AppDomainUnloadedException" /> avec des données sérialisées.</summary>
      <param name="info">Objet qui contient les données sérialisées de l'objet.</param>
      <param name="context">Informations contextuelles sur la source ou la destination.</param>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.AppDomainUnloadedException" /> avec un message d'erreur spécifié.</summary>
      <param name="message">Message décrivant l'erreur.</param>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.AppDomainUnloadedException" /> avec un message d'erreur spécifié et une référence à l'exception interne ayant provoqué cette exception.</summary>
      <param name="message">Message décrivant l'erreur.</param>
      <param name="innerException">Exception ayant provoqué l'exception actuelle. Si le paramètre <paramref name="innerException" /> n'est pas une référence null, l'exception actuelle est levée dans un bloc <see langword="catch" /> qui gère l'exception interne.</param>
    </member>
    <member name="T:System.ApplicationId">
      <summary>Contient les informations permettant d'identifier de manière unique une application basée sur un manifeste. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ApplicationId.#ctor(System.Byte[],System.String,System.Version,System.String,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ApplicationId" />.</summary>
      <param name="publicKeyToken">Tableau d'octets représentant les données brutes de la clé publique.</param>
      <param name="name">Nom de l'application.</param>
      <param name="version">Objet <see cref="T:System.Version" /> qui spécifie la version de l'application.</param>
      <param name="processorArchitecture">Architecture du processeur de l'application.</param>
      <param name="culture">Culture de l'application.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> a la valeur <see langword="null" />.  

ou - 
<paramref name="version" /> est <see langword="null" />.  

ou - 
<paramref name="publicKeyToken" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> est une chaîne vide.</exception>
    </member>
    <member name="M:System.ApplicationId.Copy">
      <summary>Crée et retourne une copie identique de l'identité de l'application actuelle.</summary>
      <returns>Objet <see cref="T:System.ApplicationId" /> qui représente une copie exacte de l'original.</returns>
    </member>
    <member name="P:System.ApplicationId.Culture">
      <summary>Obtient une chaîne représentant les informations de culture pour l'application.</summary>
      <returns>Informations de culture pour l'application.</returns>
    </member>
    <member name="M:System.ApplicationId.Equals(System.Object)">
      <summary>Détermine si l'objet <see cref="T:System.ApplicationId" /> spécifié est équivalent à <see cref="T:System.ApplicationId" /> en cours.</summary>
      <param name="o">Objet <see cref="T:System.ApplicationId" /> à comparer au <see cref="T:System.ApplicationId" /> en cours.</param>
      <returns>
        <see langword="true" /> si l'objet <see cref="T:System.ApplicationId" /> spécifié est équivalent à l'objet <see cref="T:System.ApplicationId" /> actuel ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ApplicationId.GetHashCode">
      <summary>Obtient le code de hachage de l'identité de l'application actuelle.</summary>
      <returns>Code de hachage de l'identité de l'application actuelle.</returns>
    </member>
    <member name="P:System.ApplicationId.Name">
      <summary>Obtient le nom de l'application.</summary>
      <returns>Nom de l'application.</returns>
    </member>
    <member name="P:System.ApplicationId.ProcessorArchitecture">
      <summary>Obtient l'architecture du processeur cible pour l'application.</summary>
      <returns>Architecture du processeur de l'application.</returns>
    </member>
    <member name="P:System.ApplicationId.PublicKeyToken">
      <summary>Obtient le jeton de clé publique pour l'application.</summary>
      <returns>Tableau d'octets contenant le jeton de clé publique de l'application.</returns>
    </member>
    <member name="M:System.ApplicationId.ToString">
      <summary>Crée et retourne une représentation sous forme de chaîne de l'identité de l'application.</summary>
      <returns>Représentation sous forme de chaîne de l'identité de l'application.</returns>
    </member>
    <member name="P:System.ApplicationId.Version">
      <summary>Obtient la version de l'application.</summary>
      <returns>
        <see cref="T:System.Version" /> qui spécifie la version de l'application.</returns>
    </member>
    <member name="T:System.AssemblyLoadEventArgs">
      <summary>Fournit des données pour l'événement <see cref="E:System.AppDomain.AssemblyLoad" />.</summary>
    </member>
    <member name="M:System.AssemblyLoadEventArgs.#ctor(System.Reflection.Assembly)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.AssemblyLoadEventArgs" /> à l'aide du <see cref="T:System.Reflection.Assembly" /> spécifié.</summary>
      <param name="loadedAssembly">Instance qui représente l'assembly actuellement chargé.</param>
    </member>
    <member name="P:System.AssemblyLoadEventArgs.LoadedAssembly">
      <summary>Obtient <see cref="T:System.Reflection.Assembly" />, qui représente l'assembly actuellement chargé.</summary>
      <returns>Instance de <see cref="T:System.Reflection.Assembly" />, qui représente l'assembly actuellement chargé.</returns>
    </member>
    <member name="T:System.AssemblyLoadEventHandler">
      <summary>Représente la méthode qui gère l'événement <see cref="E:System.AppDomain.AssemblyLoad" /> de <see cref="T:System.AppDomain" />.</summary>
      <param name="sender">Source de l'événement.</param>
      <param name="args">
        <see cref="T:System.AssemblyLoadEventArgs" /> qui contient les données d'événement.</param>
    </member>
    <member name="T:System.Base64FormattingOptions">
      <summary>Spécifie si les méthodes <see cref="Overload:System.Convert.ToBase64CharArray" /> et <see cref="Overload:System.Convert.ToBase64String" /> appropriées insèrent des sauts de ligne dans leur résultat.</summary>
    </member>
    <member name="F:System.Base64FormattingOptions.InsertLineBreaks">
      <summary>Insère des sauts de ligne tous les 76 caractères dans la représentation sous forme de chaîne.</summary>
    </member>
    <member name="F:System.Base64FormattingOptions.None">
      <summary>N'insère pas de saut de ligne tous les 76 caractères dans la représentation sous forme de chaîne.</summary>
    </member>
    <member name="T:System.BitConverter">
      <summary>Convertit des types de données de base en un tableau d'octets, et un tableau d'octets en types de données de base.</summary>
    </member>
    <member name="M:System.BitConverter.DoubleToInt64Bits(System.Double)">
      <summary>Convertit le nombre à virgule flottante double précision spécifié en entier 64 bits signé.</summary>
      <param name="value">Nombre à convertir.</param>
      <returns>Entier 64 bits signé dont la valeur équivaut à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Boolean)">
      <summary>Retourne la valeur booléenne spécifiée sous la forme d’un tableau d’octets.</summary>
      <param name="value">Valeur Boolean.</param>
      <returns>Tableau d’octets de longueur 1.</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Char)">
      <summary>Retourne la valeur du caractère Unicode spécifié sous la forme d'un tableau d'octets.</summary>
      <param name="value">Caractère à convertir.</param>
      <returns>Tableau d’octets de longueur 2.</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Double)">
      <summary>Retourne la valeur à virgule flottante double précision spécifiée sous la forme d'un tableau d'octets.</summary>
      <param name="value">Nombre à convertir.</param>
      <returns>Tableau d’octets de longueur 8.</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Int16)">
      <summary>Retourne la valeur de l'entier 16 bits signé spécifié sous la forme d'un tableau d'octets.</summary>
      <param name="value">Nombre à convertir.</param>
      <returns>Tableau d’octets de longueur 2.</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Int32)">
      <summary>Retourne la valeur de l’entier 32 bits signé spécifié sous la forme d’un tableau d’octets.</summary>
      <param name="value">Nombre à convertir.</param>
      <returns>Tableau d’octets de longueur 4.</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Int64)">
      <summary>Retourne la valeur de l’entier signé 64 bits spécifié en tant que tableau d’octets.</summary>
      <param name="value">Nombre à convertir.</param>
      <returns>Tableau d’octets de longueur 8.</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Single)">
      <summary>Retourne la valeur à virgule flottante simple précision spécifiée sous la forme d'un tableau d'octets.</summary>
      <param name="value">Nombre à convertir.</param>
      <returns>Tableau d’octets de longueur 4.</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.UInt16)">
      <summary>Retourne la valeur de l'entier 16 bits non signé spécifié sous la forme d'un tableau d'octets.</summary>
      <param name="value">Nombre à convertir.</param>
      <returns>Tableau d’octets de longueur 2.</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.UInt32)">
      <summary>Retourne la valeur de l’entier 32 bits non signé spécifié sous la forme d’un tableau d’octets.</summary>
      <param name="value">Nombre à convertir.</param>
      <returns>Tableau d’octets de longueur 4.</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.UInt64)">
      <summary>Retourne la valeur de l’entier 64 bits non signé spécifié sous la forme d’un tableau d’octets.</summary>
      <param name="value">Nombre à convertir.</param>
      <returns>Tableau d’octets de longueur 8.</returns>
    </member>
    <member name="M:System.BitConverter.Int32BitsToSingle(System.Int32)">
      <param name="value" />
    </member>
    <member name="M:System.BitConverter.Int64BitsToDouble(System.Int64)">
      <summary>Convertit l'entier 64 bits signé spécifié en nombre à virgule flottante double précision.</summary>
      <param name="value">Nombre à convertir.</param>
      <returns>Nombre à virgule flottante double précision dont la valeur équivaut à <paramref name="value" />.</returns>
    </member>
    <member name="F:System.BitConverter.IsLittleEndian">
      <summary>Indique l’ordre d’octet (« endianness ») dans lequel les données sont stockées dans cette architecture d’ordinateur.</summary>
    </member>
    <member name="M:System.BitConverter.SingleToInt32Bits(System.Single)">
      <param name="value" />
    </member>
    <member name="M:System.BitConverter.ToBoolean(System.Byte[],System.Int32)">
      <summary>Retourne une valeur booléenne convertie à partir de l’octet, à une position spécifiée d’un tableau d’octets.</summary>
      <param name="value">Tableau d'octets.</param>
      <param name="startIndex">Index de l’octet compris dans <paramref name="value" />.</param>
      <returns>
        <see langword="true" /> si l'octet situé à <paramref name="startIndex" /> dans <paramref name="value" /> est différent de zéro ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> est inférieur à zéro ou supérieur à la longueur de <paramref name="value" /> moins 1.</exception>
    </member>
    <member name="M:System.BitConverter.ToBoolean(System.ReadOnlySpan{System.Byte})">
      <param name="value" />
    </member>
    <member name="M:System.BitConverter.ToChar(System.Byte[],System.Int32)">
      <summary>Retourne un caractère Unicode converti à partir de deux octets à une position spécifiée dans un tableau d'octets.</summary>
      <param name="value">Tableau.</param>
      <param name="startIndex">Position de départ dans <paramref name="value" />.</param>
      <returns>Caractère composé de deux octets, à partir de <paramref name="startIndex" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> est égal à la longueur de <paramref name="value" /> moins 1.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> est inférieur à zéro ou supérieur à la longueur de <paramref name="value" /> moins 1.</exception>
    </member>
    <member name="M:System.BitConverter.ToChar(System.ReadOnlySpan{System.Byte})">
      <param name="value" />
    </member>
    <member name="M:System.BitConverter.ToDouble(System.Byte[],System.Int32)">
      <summary>Retourne un nombre à virgule flottante double précision converti à partir de huit octets à une position spécifiée dans un tableau d'octets.</summary>
      <param name="value">Tableau d'octets.</param>
      <param name="startIndex">Position de départ dans <paramref name="value" />.</param>
      <returns>Nombre à virgule flottante double précision composé de huit octets, à partir de <paramref name="startIndex" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> est supérieur ou égal à la longueur de <paramref name="value" /> moins 7, et inférieur ou égal à la longueur de <paramref name="value" /> moins 1.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> est inférieur à zéro ou supérieur à la longueur de <paramref name="value" /> moins 1.</exception>
    </member>
    <member name="M:System.BitConverter.ToDouble(System.ReadOnlySpan{System.Byte})">
      <param name="value" />
    </member>
    <member name="M:System.BitConverter.ToInt16(System.Byte[],System.Int32)">
      <summary>Retourne un entier 16 bits signé converti à partir de deux octets à une position spécifiée dans un tableau d'octets.</summary>
      <param name="value">Tableau d'octets.</param>
      <param name="startIndex">Position de départ dans <paramref name="value" />.</param>
      <returns>Entier 16 bits signé composé de deux octets, à partir de <paramref name="startIndex" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> est égal à la longueur de <paramref name="value" /> moins 1.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> est inférieur à zéro ou supérieur à la longueur de <paramref name="value" /> moins 1.</exception>
    </member>
    <member name="M:System.BitConverter.ToInt16(System.ReadOnlySpan{System.Byte})">
      <param name="value" />
    </member>
    <member name="M:System.BitConverter.ToInt32(System.Byte[],System.Int32)">
      <summary>Retourne un entier 32 bits signé converti à partir de quatre octets à une position spécifiée dans un tableau d'octets.</summary>
      <param name="value">Tableau d'octets.</param>
      <param name="startIndex">Position de départ dans <paramref name="value" />.</param>
      <returns>Entier 32 bits signé composé de quatre octets, à partir de <paramref name="startIndex" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> est supérieur ou égal à la longueur de <paramref name="value" /> moins 3, et inférieur ou égal à la longueur de <paramref name="value" /> moins 1.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> est inférieur à zéro ou supérieur à la longueur de <paramref name="value" /> moins 1.</exception>
    </member>
    <member name="M:System.BitConverter.ToInt32(System.ReadOnlySpan{System.Byte})">
      <param name="value" />
    </member>
    <member name="M:System.BitConverter.ToInt64(System.Byte[],System.Int32)">
      <summary>Retourne un entier 64 bits signé converti à partir de huit octets à une position spécifiée dans un tableau d'octets.</summary>
      <param name="value">Tableau d'octets.</param>
      <param name="startIndex">Position de départ dans <paramref name="value" />.</param>
      <returns>Entier 64 bits signé composé de huit octets, à partir de <paramref name="startIndex" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> est supérieur ou égal à la longueur de <paramref name="value" /> moins 7, et inférieur ou égal à la longueur de <paramref name="value" /> moins 1.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> est inférieur à zéro ou supérieur à la longueur de <paramref name="value" /> moins 1.</exception>
    </member>
    <member name="M:System.BitConverter.ToInt64(System.ReadOnlySpan{System.Byte})">
      <param name="value" />
    </member>
    <member name="M:System.BitConverter.ToSingle(System.Byte[],System.Int32)">
      <summary>Retourne un nombre à virgule flottante simple précision converti à partir de quatre octets à une position spécifiée dans un tableau d'octets.</summary>
      <param name="value">Tableau d'octets.</param>
      <param name="startIndex">Position de départ dans <paramref name="value" />.</param>
      <returns>Nombre à virgule flottante simple précision composé de quatre octets, à partir de <paramref name="startIndex" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> est supérieur ou égal à la longueur de <paramref name="value" /> moins 3, et inférieur ou égal à la longueur de <paramref name="value" /> moins 1.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> est inférieur à zéro ou supérieur à la longueur de <paramref name="value" /> moins 1.</exception>
    </member>
    <member name="M:System.BitConverter.ToSingle(System.ReadOnlySpan{System.Byte})">
      <param name="value" />
    </member>
    <member name="M:System.BitConverter.ToString(System.Byte[])">
      <summary>Convertit la valeur numérique de chaque élément contenu dans un tableau d'octets spécifié en sa représentation sous forme de chaîne hexadécimale équivalente.</summary>
      <param name="value">Tableau d'octets.</param>
      <returns>Une chaîne qui contient des paires hexadécimales séparées par des tirets, où chaque paire représente l'élément correspondant dans <paramref name="value" /> ; par exemple, "7F-2C-4A-00".</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.BitConverter.ToString(System.Byte[],System.Int32)">
      <summary>Convertit la valeur numérique de chaque élément contenu dans un sous-tableau d'octets spécifié en sa représentation sous forme de chaîne hexadécimale équivalente.</summary>
      <param name="value">Tableau d'octets.</param>
      <param name="startIndex">Position de départ dans <paramref name="value" />.</param>
      <returns>Une chaîne qui contient des paires hexadécimales séparées par des tirets, où chaque paire représente l'élément correspondant dans un sous-tableau de <paramref name="value" /> ; par exemple, "7F-2C-4A-00".</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> est inférieur à zéro ou supérieur à la longueur de <paramref name="value" /> moins 1.</exception>
    </member>
    <member name="M:System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
      <summary>Convertit la valeur numérique de chaque élément contenu dans un sous-tableau d'octets spécifié en sa représentation sous forme de chaîne hexadécimale équivalente.</summary>
      <param name="value">Tableau d'octets.</param>
      <param name="startIndex">Position de départ dans <paramref name="value" />.</param>
      <param name="length">Nombre d'éléments de tableau de <paramref name="value" /> à convertir.</param>
      <returns>Une chaîne qui contient des paires hexadécimales séparées par des tirets, où chaque paire représente l'élément correspondant dans un sous-tableau de <paramref name="value" /> ; par exemple, "7F-2C-4A-00".</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> ou <paramref name="length" /> est inférieur à zéro.  

ou - 
<paramref name="startIndex" /> est supérieur à zéro et supérieur ou égal à la longueur de <paramref name="value" />.</exception>
      <exception cref="T:System.ArgumentException">La combinaison de <paramref name="startIndex" /> et de <paramref name="length" /> ne spécifie pas de position dans <paramref name="value" /> ; en d'autres termes, le paramètre <paramref name="startIndex" /> est supérieur à la longueur de <paramref name="value" /> moins le paramètre <paramref name="length" />.</exception>
    </member>
    <member name="M:System.BitConverter.ToUInt16(System.Byte[],System.Int32)">
      <summary>Retourne un entier 16 bits non signé converti à partir de deux octets à une position spécifiée dans un tableau d'octets.</summary>
      <param name="value">Tableau d'octets.</param>
      <param name="startIndex">Position de départ dans <paramref name="value" />.</param>
      <returns>Entier 16 bits non signé composé de deux octets, à partir de <paramref name="startIndex" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> est égal à la longueur de <paramref name="value" /> moins 1.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> est inférieur à zéro ou supérieur à la longueur de <paramref name="value" /> moins 1.</exception>
    </member>
    <member name="M:System.BitConverter.ToUInt16(System.ReadOnlySpan{System.Byte})">
      <param name="value" />
    </member>
    <member name="M:System.BitConverter.ToUInt32(System.Byte[],System.Int32)">
      <summary>Retourne un entier 32 bits non signé converti à partir de quatre octets à une position spécifiée dans un tableau d'octets.</summary>
      <param name="value">Tableau d'octets.</param>
      <param name="startIndex">Position de départ dans <paramref name="value" />.</param>
      <returns>Entier 32 bits non signé composé de quatre octets, à partir de <paramref name="startIndex" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> est supérieur ou égal à la longueur de <paramref name="value" /> moins 3, et inférieur ou égal à la longueur de <paramref name="value" /> moins 1.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> est inférieur à zéro ou supérieur à la longueur de <paramref name="value" /> moins 1.</exception>
    </member>
    <member name="M:System.BitConverter.ToUInt32(System.ReadOnlySpan{System.Byte})">
      <param name="value" />
    </member>
    <member name="M:System.BitConverter.ToUInt64(System.Byte[],System.Int32)">
      <summary>Retourne un entier 64 bits non signé converti à partir de huit octets à une position spécifiée dans un tableau d'octets.</summary>
      <param name="value">Tableau d'octets.</param>
      <param name="startIndex">Position de départ dans <paramref name="value" />.</param>
      <returns>Entier 64 bits non signé composé de huit octets, à partir de <paramref name="startIndex" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> est supérieur ou égal à la longueur de <paramref name="value" /> moins 7, et inférieur ou égal à la longueur de <paramref name="value" /> moins 1.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> est inférieur à zéro ou supérieur à la longueur de <paramref name="value" /> moins 1.</exception>
    </member>
    <member name="M:System.BitConverter.ToUInt64(System.ReadOnlySpan{System.Byte})">
      <param name="value" />
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Boolean)">
      <param name="destination" />
      <param name="value" />
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Char)">
      <param name="destination" />
      <param name="value" />
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Double)">
      <param name="destination" />
      <param name="value" />
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Int16)">
      <param name="destination" />
      <param name="value" />
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Int32)">
      <param name="destination" />
      <param name="value" />
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Int64)">
      <param name="destination" />
      <param name="value" />
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Single)">
      <param name="destination" />
      <param name="value" />
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.UInt16)">
      <param name="destination" />
      <param name="value" />
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.UInt32)">
      <param name="destination" />
      <param name="value" />
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.UInt64)">
      <param name="destination" />
      <param name="value" />
    </member>
    <member name="T:System.CannotUnloadAppDomainException">
      <summary>Exception levée lors de l’échec d’une tentative de déchargement d’un domaine d’application.</summary>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CannotUnloadAppDomainException" />.</summary>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CannotUnloadAppDomainException" /> à partir de données sérialisées.</summary>
      <param name="info">Objet qui contient les données sérialisées de l'objet.</param>
      <param name="context">Informations contextuelles sur la source ou la destination.</param>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CannotUnloadAppDomainException" /> avec un message d'erreur spécifié.</summary>
      <param name="message">
        <see cref="T:System.String" /> qui décrit l'erreur.</param>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CannotUnloadAppDomainException" /> avec un message d'erreur spécifié et une référence à l'exception interne ayant provoqué cette exception.</summary>
      <param name="message">Message d'erreur qui explique la raison de l'exception.</param>
      <param name="innerException">Exception ayant provoqué l'exception actuelle. Si le paramètre <paramref name="innerException" /> n'est pas une référence null (<see langword="Nothing" /> en Visual Basic), l'exception actuelle est levée dans un bloc <see langword="catch" /> qui gère l'exception interne.</param>
    </member>
    <member name="T:System.CodeDom.Compiler.IndentedTextWriter">
      <summary>Fournit un writer de texte qui peut mettre en retrait de nouvelles lignes par un jeton de chaîne de tabulation.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.#ctor(System.IO.TextWriter)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.Compiler.IndentedTextWriter" /> avec le writer de texte spécifié et la chaîne de tabulation par défaut.</summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> à utiliser pour la sortie.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.#ctor(System.IO.TextWriter,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.Compiler.IndentedTextWriter" /> avec le writer de texte et la chaîne de tabulation spécifiés.</summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> à utiliser pour la sortie.</param>
      <param name="tabString">Chaîne de tabulation à utiliser pour la mise en retrait.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Close">
      <summary>Ferme le document en cours d'écriture.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.IndentedTextWriter.DefaultTabString">
      <summary>Spécifie la chaîne de tabulation par défaut. Ce champ est constant.</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.IndentedTextWriter.Encoding">
      <summary>Obtient l'encodage à utiliser pour le writer de texte.</summary>
      <returns>
        <see cref="T:System.Text.Encoding" /> qui indique l'encodage à utiliser pour le writer de texte.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Flush">
      <summary>Vide le flux.</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.IndentedTextWriter.Indent">
      <summary>Obtient ou définit le nombre d'espaces à mettre en retrait.</summary>
      <returns>Nombre d'espaces à mettre en retrait.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.IndentedTextWriter.InnerWriter">
      <summary>Obtient le <see cref="T:System.IO.TextWriter" /> à utiliser.</summary>
      <returns>
        <see cref="T:System.IO.TextWriter" /> à utiliser.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.IndentedTextWriter.NewLine">
      <summary>Obtient ou définit le caractère de nouvelle ligne à utiliser.</summary>
      <returns>Caractère de nouvelle ligne à utiliser.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.OutputTabs">
      <summary>Génère une chaîne de tabulation pour chaque niveau de mise en retrait défini par la propriété <see cref="P:System.CodeDom.Compiler.IndentedTextWriter.Indent" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Boolean)">
      <summary>Écrit dans le flux de texte la représentation textuelle d'une valeur booléenne.</summary>
      <param name="value">Valeur booléenne à écrire.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Char)">
      <summary>Écrit un caractère dans le flux de texte.</summary>
      <param name="value">Caractère à écrire.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Char[])">
      <summary>Écrit un tableau de caractères dans le flux de texte.</summary>
      <param name="buffer">Tableau de caractères à écrire.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>Écrit un sous-tableau de caractères dans le flux de texte.</summary>
      <param name="buffer">Tableau de caractères à partir duquel les données doivent être écrites.</param>
      <param name="index">Index de début dans la mémoire tampon.</param>
      <param name="count">Nombre de caractères à écrire.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Double)">
      <summary>Écrit dans le flux de texte la représentation textuelle d'une valeur de type Double.</summary>
      <param name="value">
        <see langword="double" /> à écrire.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Int32)">
      <summary>Écrit dans le flux de texte la représentation textuelle d'un nombre entier.</summary>
      <param name="value">Entier à écrire.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Int64)">
      <summary>Écrit dans le flux de texte la représentation textuelle d'un nombre entier 8 octets.</summary>
      <param name="value">Entier 8 octets à écrire.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Object)">
      <summary>Écrit dans le flux de texte la représentation textuelle d'un objet.</summary>
      <param name="value">Objet à écrire.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Single)">
      <summary>Écrit dans le flux de texte la représentation textuelle d'une valeur de type Single.</summary>
      <param name="value">
        <see langword="single" /> à écrire.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.String)">
      <summary>Écrit la chaîne spécifiée dans le flux de texte.</summary>
      <param name="s">Chaîne à écrire.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.String,System.Object)">
      <summary>Écrit une chaîne mise en forme, en utilisant la sémantique spécifiée.</summary>
      <param name="format">Chaîne de mise en forme.</param>
      <param name="arg0">Objet à écrire dans la chaîne mise en forme.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.String,System.Object,System.Object)">
      <summary>Écrit une chaîne mise en forme, en utilisant la sémantique spécifiée.</summary>
      <param name="format">Chaîne de mise en forme à utiliser.</param>
      <param name="arg0">Premier objet à écrire dans la chaîne mise en forme.</param>
      <param name="arg1">Deuxième objet à écrire dans la chaîne mise en forme.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.String,System.Object[])">
      <summary>Écrit une chaîne mise en forme, en utilisant la sémantique spécifiée.</summary>
      <param name="format">Chaîne de mise en forme à utiliser.</param>
      <param name="arg">Tableau d'arguments à utiliser en sortie.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine">
      <summary>Écrit un terminateur de ligne.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Boolean)">
      <summary>Écrit dans le flux de texte la représentation textuelle d'une valeur booléenne, suivie d'un terminateur de ligne.</summary>
      <param name="value">Valeur booléenne à écrire.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Char)">
      <summary>Écrit un caractère, suivi d'un terminateur de ligne, dans le flux de texte.</summary>
      <param name="value">Caractère à écrire.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Char[])">
      <summary>Écrit un tableau de caractères, suivi d'un terminateur de ligne, dans le flux de texte.</summary>
      <param name="buffer">Tableau de caractères à écrire.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
      <summary>Écrit un sous-tableau de caractères, suivi d'un terminateur de ligne, dans le flux de texte.</summary>
      <param name="buffer">Tableau de caractères à partir duquel les données doivent être écrites.</param>
      <param name="index">Index de début dans la mémoire tampon.</param>
      <param name="count">Nombre de caractères à écrire.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Double)">
      <summary>Écrit dans le flux de texte la représentation textuelle d'une valeur Double, suivie d'un terminateur de ligne.</summary>
      <param name="value">
        <see langword="double" /> à écrire.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Int32)">
      <summary>Écrit dans le flux de texte la représentation textuelle d'un entier, suivie d'un terminateur de ligne.</summary>
      <param name="value">Entier à écrire.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Int64)">
      <summary>Écrit dans le flux de texte la représentation textuelle d'un entier 8 octets, suivie d'un terminateur de ligne.</summary>
      <param name="value">Entier 8 octets à écrire.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Object)">
      <summary>Écrit dans le flux de texte la représentation textuelle d'un objet, suivie d'un terminateur de ligne.</summary>
      <param name="value">Objet à écrire.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Single)">
      <summary>Écrit dans le flux de texte la représentation textuelle d'une valeur Single, suivie d'un terminateur de ligne.</summary>
      <param name="value">
        <see langword="single" /> à écrire.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String)">
      <summary>Écrit la chaîne spécifiée, suivie d'un terminateur de ligne, dans le flux de texte.</summary>
      <param name="s">Chaîne à écrire.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String,System.Object)">
      <summary>Écrit une chaîne mise en forme, suivie d'un terminateur de ligne, avec les sémantiques spécifiées.</summary>
      <param name="format">Chaîne de mise en forme.</param>
      <param name="arg0">Objet à écrire dans la chaîne mise en forme.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String,System.Object,System.Object)">
      <summary>Écrit une chaîne mise en forme, suivie d'un terminateur de ligne, avec les sémantiques spécifiées.</summary>
      <param name="format">Chaîne de mise en forme à utiliser.</param>
      <param name="arg0">Premier objet à écrire dans la chaîne mise en forme.</param>
      <param name="arg1">Deuxième objet à écrire dans la chaîne mise en forme.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String,System.Object[])">
      <summary>Écrit une chaîne mise en forme, suivie d'un terminateur de ligne, avec les sémantiques spécifiées.</summary>
      <param name="format">Chaîne de mise en forme à utiliser.</param>
      <param name="arg">Tableau d'arguments à utiliser en sortie.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.UInt32)">
      <summary>Écrit dans le flux de texte la représentation textuelle d'une valeur UInt32, suivie d'un terminateur de ligne.</summary>
      <param name="value">UInt32 à exporter.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLineNoTabs(System.String)">
      <summary>Écrit la chaîne spécifiée dans une ligne sans tabulation.</summary>
      <param name="s">Chaîne à écrire.</param>
    </member>
    <member name="T:System.Collections.ArrayList">
      <summary>Implémente l’interface <see cref="T:System.Collections.IList" /> à l’aide d’un tableau dont la taille est augmentée de manière dynamique au besoin.</summary>
    </member>
    <member name="M:System.Collections.ArrayList.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Collections.ArrayList" /> qui est vide et possède la capacité initiale par défaut.</summary>
    </member>
    <member name="M:System.Collections.ArrayList.#ctor(System.Collections.ICollection)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Collections.ArrayList" /> qui contient des éléments copiés à partir de la collection spécifiée et qui possède la capacité initiale correspondant au nombre d'éléments copiés.</summary>
      <param name="c">
        <see cref="T:System.Collections.ICollection" /> dont les éléments sont copiés dans la nouvelle liste.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="c" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.#ctor(System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Collections.ArrayList" /> qui est vide et a la capacité initiale spécifiée.</summary>
      <param name="capacity">Nombre d'éléments que la nouvelle liste peut initialement stocker.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> est inférieur à zéro.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Adapter(System.Collections.IList)">
      <summary>Crée un wrapper <see cref="T:System.Collections.ArrayList" /> pour un <see cref="T:System.Collections.IList" /> spécifique.</summary>
      <param name="list">Élément <see cref="T:System.Collections.IList" /> à inclure dans un wrapper.</param>
      <returns>Wrapper <see cref="T:System.Collections.ArrayList" /> autour de <see cref="T:System.Collections.IList" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Add(System.Object)">
      <summary>Ajoute un objet à la fin de la <see cref="T:System.Collections.ArrayList" />.</summary>
      <param name="value">
        <see cref="T:System.Object" /> à ajouter à la fin de <see cref="T:System.Collections.ArrayList" />. La valeur peut être <see langword="null" />.</param>
      <returns>Index <see cref="T:System.Collections.ArrayList" /> auquel <paramref name="value" /> a été ajouté.</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> est en lecture seule.  

ou - 
<see cref="T:System.Collections.ArrayList" /> est de taille fixe.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)">
      <summary>Ajoute les éléments de <see cref="T:System.Collections.ICollection" /> à la fin de <see cref="T:System.Collections.ArrayList" />.</summary>
      <param name="c">
        <see cref="T:System.Collections.ICollection" /> dont les éléments doivent être ajoutés à la fin de <see cref="T:System.Collections.ArrayList" />. La collection elle-même ne peut pas avoir la valeur <see langword="null" />, mais elle peut contenir des éléments qui ont la valeur <see langword="null" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="c" /> est <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> est en lecture seule.  

ou - 
<see cref="T:System.Collections.ArrayList" /> est de taille fixe.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
      <summary>Recherche un élément utilisant le comparateur spécifié dans une plage d'éléments du <see cref="T:System.Collections.ArrayList" /> trié et retourne l'index de base zéro de l'élément.</summary>
      <param name="index">Index de début de base zéro de la plage dans laquelle effectuer la recherche.</param>
      <param name="count">Longueur de la plage dans laquelle effectuer la recherche.</param>
      <param name="value">
        <see cref="T:System.Object" /> à rechercher. La valeur peut être <see langword="null" />.</param>
      <param name="comparer">Implémentation de <see cref="T:System.Collections.IComparer" /> à utiliser pendant la comparaison d'éléments.  

ou - 
<see langword="null" /> pour utiliser le comparateur par défaut qui correspond à l’implémentation <see cref="T:System.IComparable" /> de chaque élément.</param>
      <returns>Index de base zéro de <paramref name="value" /> dans le <see cref="T:System.Collections.ArrayList" /> trié, si <paramref name="value" /> existe ; sinon, un nombre négatif qui est le complément de bits de l’index de l’élément suivant supérieur à <paramref name="value" /> ou, s’il n’existe aucun élément supérieur, le complément de bits de <see cref="P:System.Collections.ArrayList.Count" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> et <paramref name="count" /> ne désignent pas une plage valide dans <see cref="T:System.Collections.ArrayList" />.  

ou - 
<paramref name="comparer" /> a la valeur <see langword="null" /> et ni <paramref name="value" />, ni les éléments de <see cref="T:System.Collections.ArrayList" /> n’implémentent l’interface <see cref="T:System.IComparable" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> a la valeur <see langword="null" /> et <paramref name="value" /> n’est pas du même type que les éléments de <see cref="T:System.Collections.ArrayList" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> est inférieur à zéro.  

ou - 
<paramref name="count" /> est inférieur à zéro.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.BinarySearch(System.Object)">
      <summary>Recherche un élément utilisant le comparateur par défaut dans le <see cref="T:System.Collections.ArrayList" /> entièrement trié et retourne l'index de base zéro de l'élément.</summary>
      <param name="value">
        <see cref="T:System.Object" /> à rechercher. La valeur peut être <see langword="null" />.</param>
      <returns>Index de base zéro de <paramref name="value" /> dans le <see cref="T:System.Collections.ArrayList" /> trié, si <paramref name="value" /> existe ; sinon, un nombre négatif qui est le complément de bits de l’index de l’élément suivant supérieur à <paramref name="value" /> ou, s’il n’existe aucun élément supérieur, le complément de bits de <see cref="P:System.Collections.ArrayList.Count" />.</returns>
      <exception cref="T:System.ArgumentException">Ni <paramref name="value" /> ni les éléments d’<see cref="T:System.Collections.ArrayList" /> n’implémentent l’interface <see cref="T:System.IComparable" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> n’est pas du même type que les éléments de l’<see cref="T:System.Collections.ArrayList" />.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)">
      <summary>Recherche un élément utilisant le comparateur spécifié dans le <see cref="T:System.Collections.ArrayList" /> entièrement trié et retourne l'index de base zéro de l'élément.</summary>
      <param name="value">
        <see cref="T:System.Object" /> à rechercher. La valeur peut être <see langword="null" />.</param>
      <param name="comparer">Implémentation de <see cref="T:System.Collections.IComparer" /> à utiliser pendant la comparaison d'éléments.  

ou - 
<see langword="null" /> pour utiliser le comparateur par défaut qui correspond à l’implémentation <see cref="T:System.IComparable" /> de chaque élément.</param>
      <returns>Index de base zéro de <paramref name="value" /> dans le <see cref="T:System.Collections.ArrayList" /> trié, si <paramref name="value" /> existe ; sinon, un nombre négatif qui est le complément de bits de l’index de l’élément suivant supérieur à <paramref name="value" /> ou, s’il n’existe aucun élément supérieur, le complément de bits de <see cref="P:System.Collections.ArrayList.Count" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparer" /> est <see langword="null" />, et ni <paramref name="value" /> ni les éléments de <see cref="T:System.Collections.ArrayList" /> n’implémentent l’interface <see cref="T:System.IComparable" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> est <see langword="null" />, et <paramref name="value" /> n’est pas du même type que les éléments de <see cref="T:System.Collections.ArrayList" />.</exception>
    </member>
    <member name="P:System.Collections.ArrayList.Capacity">
      <summary>Obtient ou définit le nombre d'éléments que <see cref="T:System.Collections.ArrayList" /> peut contenir.</summary>
      <returns>Nombre initial d'éléments que <see cref="T:System.Collections.ArrayList" /> peut contenir.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">La valeur affectée à <see cref="P:System.Collections.ArrayList.Capacity" /> est inférieure à <see cref="P:System.Collections.ArrayList.Count" />.</exception>
      <exception cref="T:System.OutOfMemoryException">Il n’y a pas assez de mémoire disponible sur le système.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Clear">
      <summary>Supprime tous les éléments de <see cref="T:System.Collections.ArrayList" />.</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> est en lecture seule.  

ou - 
<see cref="T:System.Collections.ArrayList" /> est de taille fixe.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Clone">
      <summary>Crée une copie superficielle de <see cref="T:System.Collections.ArrayList" />.</summary>
      <returns>Copie superficielle de <see cref="T:System.Collections.ArrayList" />.</returns>
    </member>
    <member name="M:System.Collections.ArrayList.Contains(System.Object)">
      <summary>Détermine si le <see cref="T:System.Collections.ArrayList" /> contient un élément.</summary>
      <param name="item">
        <see cref="T:System.Object" /> à rechercher dans <see cref="T:System.Collections.ArrayList" />. La valeur peut être <see langword="null" />.</param>
      <returns>
        <see langword="true" /> si <paramref name="item" /> existe dans <see cref="T:System.Collections.ArrayList" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.ArrayList.CopyTo(System.Array)">
      <summary>Copie l’ensemble de <see cref="T:System.Collections.ArrayList" /> dans un <see cref="T:System.Array" /> compatible unidimensionnel en commençant au début du tableau cible.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensionnel qui constitue la destination des éléments copiés à partir de <see cref="T:System.Collections.ArrayList" />. <see cref="T:System.Array" /> doit avoir une indexation de base zéro.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> est multidimensionnel.  
ou 
Le nombre d’éléments du <see cref="T:System.Collections.ArrayList" /> source est supérieur au nombre d’éléments que la destination <paramref name="array" /> peut contenir.</exception>
      <exception cref="T:System.InvalidCastException">Le type du <see cref="T:System.Collections.ArrayList" /> source ne peut pas être converti automatiquement en type du <paramref name="array" /> de destination.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.CopyTo(System.Array,System.Int32)">
      <summary>Copie l'ensemble de l'objet <see cref="T:System.Collections.ArrayList" /> vers un objet <see cref="T:System.Array" /> unidimensionnel compatible, en commençant à l'index spécifié du tableau cible.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensionnel qui constitue la destination des éléments copiés à partir de <see cref="T:System.Collections.ArrayList" />. <see cref="T:System.Array" /> doit avoir une indexation de base zéro.</param>
      <param name="arrayIndex">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> est inférieur à zéro.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> est multidimensionnel.  

ou - 
Le nombre d’éléments dans le <see cref="T:System.Collections.ArrayList" /> source est supérieur à la quantité d’espace disponible entre <paramref name="arrayIndex" /> et la fin du <paramref name="array" /> de destination.</exception>
      <exception cref="T:System.InvalidCastException">Le type du <see cref="T:System.Collections.ArrayList" /> source ne peut pas être converti automatiquement en type du <paramref name="array" /> de destination.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)">
      <summary>Copie une plage d’éléments de <see cref="T:System.Collections.ArrayList" /> vers un <see cref="T:System.Array" /> unidimensionnel compatible, en commençant à l’index spécifié du tableau cible.</summary>
      <param name="index">Index de base zéro dans le <see cref="T:System.Collections.ArrayList" /> source au niveau duquel la copie commence.</param>
      <param name="array">
        <see cref="T:System.Array" /> unidimensionnel qui constitue la destination des éléments copiés à partir de <see cref="T:System.Collections.ArrayList" />. <see cref="T:System.Array" /> doit avoir une indexation de base zéro.</param>
      <param name="arrayIndex">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
      <param name="count">Nombre d'éléments à copier.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> est inférieur à zéro.  
ou 
 <paramref name="arrayIndex" /> est inférieur à zéro.  
ou 
 <paramref name="count" /> est inférieur à zéro.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> est multidimensionnel.  

ou - 
<paramref name="index" /> est supérieur ou égal au <see cref="P:System.Collections.ArrayList.Count" /> du <see cref="T:System.Collections.ArrayList" /> source.  

ou 
Le nombre d’éléments entre <paramref name="index" /> et la fin du <see cref="T:System.Collections.ArrayList" /> source est supérieur à l’espace disponible entre <paramref name="arrayIndex" /> et la fin du <paramref name="array" /> de destination.</exception>
      <exception cref="T:System.InvalidCastException">Le type du <see cref="T:System.Collections.ArrayList" /> source ne peut pas être converti automatiquement en type du <paramref name="array" /> de destination.</exception>
    </member>
    <member name="P:System.Collections.ArrayList.Count">
      <summary>Obtient le nombre d’éléments réellement contenus dans <see cref="T:System.Collections.ArrayList" />.</summary>
      <returns>Nombre d’éléments réellement contenus dans <see cref="T:System.Collections.ArrayList" />.</returns>
    </member>
    <member name="M:System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)">
      <summary>Retourne un wrapper <see cref="T:System.Collections.ArrayList" /> de taille fixe.</summary>
      <param name="list">Élément <see cref="T:System.Collections.ArrayList" /> à inclure dans un wrapper.</param>
      <returns>Wrapper <see cref="T:System.Collections.ArrayList" /> de taille fixe.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.FixedSize(System.Collections.IList)">
      <summary>Retourne un wrapper <see cref="T:System.Collections.IList" /> de taille fixe.</summary>
      <param name="list">Élément <see cref="T:System.Collections.IList" /> à inclure dans un wrapper.</param>
      <returns>Wrapper <see cref="T:System.Collections.IList" /> de taille fixe.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.GetEnumerator">
      <summary>Retourne un énumérateur pour le <see cref="T:System.Collections.ArrayList" /> entier.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> pour l’intégralité de <see cref="T:System.Collections.ArrayList" />.</returns>
    </member>
    <member name="M:System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)">
      <summary>Retourne un énumérateur pour une plage d’éléments d’<see cref="T:System.Collections.ArrayList" />.</summary>
      <param name="index">Index de début de base zéro de la section <see cref="T:System.Collections.ArrayList" /> à laquelle l’énumérateur devrait se référer.</param>
      <param name="count">Nombre d’éléments dans la section <see cref="T:System.Collections.ArrayList" /> à laquelle l’énumérateur devrait se référer.</param>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> pour la plage d’éléments spécifiée d’<see cref="T:System.Collections.ArrayList" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> est inférieur à zéro.  
ou 
 <paramref name="count" /> est inférieur à zéro.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> et <paramref name="count" /> ne spécifient pas une plage valide dans le <see cref="T:System.Collections.ArrayList" />.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.GetRange(System.Int32,System.Int32)">
      <summary>Retourne un <see cref="T:System.Collections.ArrayList" /> qui représente un sous-ensemble des éléments du <see cref="T:System.Collections.ArrayList" /> source.</summary>
      <param name="index">Index de base zéro <see cref="T:System.Collections.ArrayList" /> où débute la plage.</param>
      <param name="count">Nombre d'éléments dans la plage.</param>
      <returns>
        <see cref="T:System.Collections.ArrayList" /> qui représente un sous-ensemble des éléments dans le <see cref="T:System.Collections.ArrayList" /> source.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> est inférieur à zéro.  

ou - 
<paramref name="count" /> est inférieur à zéro.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> et <paramref name="count" /> ne désignent pas une plage d’éléments valide du <see cref="T:System.Collections.ArrayList" />.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.IndexOf(System.Object)">
      <summary>Recherche le <see cref="T:System.Object" /> spécifié et retourne l’index de base zéro de la première occurrence dans l’ensemble du <see cref="T:System.Collections.ArrayList" />.</summary>
      <param name="value">
        <see cref="T:System.Object" /> à rechercher dans <see cref="T:System.Collections.ArrayList" />. La valeur peut être <see langword="null" />.</param>
      <returns>Index de base zéro de la première occurrence de <paramref name="value" /> dans l'ensemble du <see cref="T:System.Collections.ArrayList" />, s'il existe ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32)">
      <summary>Recherche le <see cref="T:System.Object" /> spécifié et retourne l’index de base zéro de la première occurrence au sein de la plage d’éléments du <see cref="T:System.Collections.ArrayList" /> qui s’étend de l’index spécifié jusqu’au dernier élément.</summary>
      <param name="value">
        <see cref="T:System.Object" /> à rechercher dans <see cref="T:System.Collections.ArrayList" />. La valeur peut être <see langword="null" />.</param>
      <param name="startIndex">Index de début de base zéro de la recherche. 0 (zéro) est valide dans une liste vide.</param>
      <returns>Index de base zéro de la première occurrence de <paramref name="value" /> trouvée dans la plage d’éléments de <see cref="T:System.Collections.ArrayList" /> qui s’étend de <paramref name="startIndex" /> jusqu’au dernier élément, le cas échéant ; sinon, -1.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> est en dehors de la plage d’index valides pour <see cref="T:System.Collections.ArrayList" />.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)">
      <summary>Recherche le <see cref="T:System.Object" /> spécifié et retourne l’index de base zéro de la première occurrence dans la plage d’éléments de <see cref="T:System.Collections.ArrayList" /> qui commence à l’index spécifié et qui contient le nombre d’éléments spécifié.</summary>
      <param name="value">
        <see cref="T:System.Object" /> à rechercher dans <see cref="T:System.Collections.ArrayList" />. La valeur peut être <see langword="null" />.</param>
      <param name="startIndex">Index de début de base zéro de la recherche. 0 (zéro) est valide dans une liste vide.</param>
      <param name="count">Nombre d'éléments contenus dans la section où la recherche doit être effectuée.</param>
      <returns>Index de base zéro de la première occurrence de <paramref name="value" /> trouvée dans la plage d’éléments de <see cref="T:System.Collections.ArrayList" /> qui commence à <paramref name="startIndex" /> et contient le nombre <paramref name="count" /> d’éléments, le cas échéant ; sinon, -1.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> est en dehors de la plage d’index valides pour <see cref="T:System.Collections.ArrayList" />.  

ou - 
<paramref name="count" /> est inférieur à zéro.  

ou - 
<paramref name="startIndex" /> et <paramref name="count" /> ne spécifient pas une section valide dans <see cref="T:System.Collections.ArrayList" />.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Insert(System.Int32,System.Object)">
      <summary>Insère un élément dans la classe <see cref="T:System.Collections.ArrayList" /> au niveau de l'index spécifié.</summary>
      <param name="index">Index de base zéro au niveau duquel <paramref name="value" /> doit être inséré.</param>
      <param name="value">
        <see cref="T:System.Object" /> à insérer. La valeur peut être <see langword="null" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> est inférieur à zéro.  

ou - 
<paramref name="index" /> est supérieur à <see cref="P:System.Collections.ArrayList.Count" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> est en lecture seule.  

ou - 
<see cref="T:System.Collections.ArrayList" /> est de taille fixe.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)">
      <summary>Insère les éléments d'une collection dans <see cref="T:System.Collections.ArrayList" /> au niveau de l'index spécifié.</summary>
      <param name="index">Index de base zéro au niveau duquel les nouveaux éléments devraient être insérés.</param>
      <param name="c">
        <see cref="T:System.Collections.ICollection" /> dont les éléments doivent être insérés dans <see cref="T:System.Collections.ArrayList" />. La collection elle-même ne peut pas avoir la valeur <see langword="null" />, mais elle peut contenir des éléments qui ont la valeur <see langword="null" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="c" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> est inférieur à zéro.  
ou 
 <paramref name="index" /> est supérieur à <see cref="P:System.Collections.ArrayList.Count" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> est en lecture seule.  
ou 
<see cref="T:System.Collections.ArrayList" /> est de taille fixe.</exception>
    </member>
    <member name="P:System.Collections.ArrayList.IsFixedSize">
      <summary>Obtient une valeur indiquant si <see cref="T:System.Collections.ArrayList" /> est de taille fixe.</summary>
      <returns>
        <see langword="true" /> si <see cref="T:System.Collections.ArrayList" /> est de taille fixe ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.ArrayList.IsReadOnly">
      <summary>Obtient une valeur indiquant si <see cref="T:System.Collections.ArrayList" /> est en lecture seule.</summary>
      <returns>
        <see langword="true" /> si <see cref="T:System.Collections.ArrayList" /> est en lecture seule ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.ArrayList.IsSynchronized">
      <summary>Obtient une valeur indiquant si l'accès à <see cref="T:System.Collections.ArrayList" /> est synchronisé (thread-safe).</summary>
      <returns>
        <see langword="true" /> si l'accès à <see cref="T:System.Collections.ArrayList" /> est synchronisé (thread-safe) ; sinon <see langword="false" />. La valeur par défaut est <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.ArrayList.Item(System.Int32)">
      <summary>Obtient ou définit l'élément au niveau de l'index spécifié.</summary>
      <param name="index">Index de base zéro de l'élément à obtenir ou à définir.</param>
      <returns>Élément au niveau de l'index spécifié.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> est inférieur à zéro.  

ou - 
<paramref name="index" /> est supérieur ou égal à <see cref="P:System.Collections.ArrayList.Count" />.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.LastIndexOf(System.Object)">
      <summary>Recherche le <see cref="T:System.Object" /> spécifié et retourne l’index de base zéro de la dernière occurrence dans l’ensemble du <see cref="T:System.Collections.ArrayList" />.</summary>
      <param name="value">
        <see cref="T:System.Object" /> à rechercher dans <see cref="T:System.Collections.ArrayList" />. La valeur peut être <see langword="null" />.</param>
      <returns>Index de base zéro de la dernière occurrence de <paramref name="value" /> trouvée dans l’ensemble de <see cref="T:System.Collections.ArrayList" />, le cas échéant ; sinon, -1.</returns>
    </member>
    <member name="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)">
      <summary>Recherche le <see cref="T:System.Object" /> spécifié et retourne l’index de base zéro de la dernière occurrence dans la plage d’éléments de l’<see cref="T:System.Collections.ArrayList" /> qui s’étend du premier élément à l’index spécifié.</summary>
      <param name="value">
        <see cref="T:System.Object" /> à rechercher dans <see cref="T:System.Collections.ArrayList" />. La valeur peut être <see langword="null" />.</param>
      <param name="startIndex">Index de début de base zéro de la recherche vers le haut.</param>
      <returns>Index de base zéro de la dernière occurrence de <paramref name="value" /> trouvée dans la plage d’éléments d’<see cref="T:System.Collections.ArrayList" /> qui s’étend du premier élément à <paramref name="startIndex" />, le cas échéant ; sinon, -1.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> est en dehors de la plage d’index valides pour <see cref="T:System.Collections.ArrayList" />.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)">
      <summary>Recherche le <see cref="T:System.Object" /> spécifié et retourne l’index de base zéro de la dernière occurrence dans la plage d’éléments de <see cref="T:System.Collections.ArrayList" /> qui contient le nombre spécifié d’éléments et se termine à l’index spécifié.</summary>
      <param name="value">
        <see cref="T:System.Object" /> à rechercher dans <see cref="T:System.Collections.ArrayList" />. La valeur peut être <see langword="null" />.</param>
      <param name="startIndex">Index de début de base zéro de la recherche vers le haut.</param>
      <param name="count">Nombre d'éléments contenus dans la section où la recherche doit être effectuée.</param>
      <returns>Index de base zéro de la dernière occurrence de <paramref name="value" /> trouvée dans la plage d’éléments de <see cref="T:System.Collections.ArrayList" /> qui contient le nombre <paramref name="count" /> d’éléments et se termine à <paramref name="startIndex" />, le cas échéant ; sinon, -1.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> est en dehors de la plage d’index valides pour <see cref="T:System.Collections.ArrayList" />.  

ou - 
<paramref name="count" /> est inférieur à zéro.  

ou - 
<paramref name="startIndex" /> et <paramref name="count" /> ne spécifient pas une section valide dans <see cref="T:System.Collections.ArrayList" />.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)">
      <summary>Retourne un wrapper <see cref="T:System.Collections.ArrayList" /> en lecture seule.</summary>
      <param name="list">Élément <see cref="T:System.Collections.ArrayList" /> à inclure dans un wrapper.</param>
      <returns>Wrapper <see cref="T:System.Collections.ArrayList" /> en lecture seule autour de <paramref name="list" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.ReadOnly(System.Collections.IList)">
      <summary>Retourne un wrapper <see cref="T:System.Collections.IList" /> en lecture seule.</summary>
      <param name="list">Élément <see cref="T:System.Collections.IList" /> à inclure dans un wrapper.</param>
      <returns>Wrapper <see cref="T:System.Collections.IList" /> en lecture seule autour de <paramref name="list" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Remove(System.Object)">
      <summary>Supprime la première occurrence d'un objet spécifique de <see cref="T:System.Collections.ArrayList" />.</summary>
      <param name="obj">
        <see cref="T:System.Object" /> à supprimer de <see cref="T:System.Collections.ArrayList" />. La valeur peut être <see langword="null" />.</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> est en lecture seule.  

ou - 
<see cref="T:System.Collections.ArrayList" /> est de taille fixe.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.RemoveAt(System.Int32)">
      <summary>Supprime l'élément au niveau de l'index spécifié de <see cref="T:System.Collections.ArrayList" />.</summary>
      <param name="index">Index de base zéro de l'élément à supprimer.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> est inférieur à zéro.  

ou - 
<paramref name="index" /> est supérieur ou égal à <see cref="P:System.Collections.ArrayList.Count" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> est en lecture seule.  

ou - 
<see cref="T:System.Collections.ArrayList" /> est de taille fixe.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)">
      <summary>Supprime une plage d'éléments de <see cref="T:System.Collections.ArrayList" />.</summary>
      <param name="index">Index de début de base zéro de la plage d'éléments à supprimer.</param>
      <param name="count">Nombre d'éléments à supprimer.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> est inférieur à zéro.  

ou - 
<paramref name="count" /> est inférieur à zéro.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> et <paramref name="count" /> ne désignent pas une plage d’éléments valide du <see cref="T:System.Collections.ArrayList" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> est en lecture seule.  
ou 
<see cref="T:System.Collections.ArrayList" /> est de taille fixe.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Repeat(System.Object,System.Int32)">
      <summary>Retourne un <see cref="T:System.Collections.ArrayList" /> dont les éléments sont des copies de la valeur spécifiée.</summary>
      <param name="value">
        <see cref="T:System.Object" /> à copier plusieurs fois dans le nouveau <see cref="T:System.Collections.ArrayList" />. La valeur peut être <see langword="null" />.</param>
      <param name="count">Nombre de fois où <paramref name="value" /> doit être copié.</param>
      <returns>
        <see cref="T:System.Collections.ArrayList" /> avec un nombre <paramref name="count" /> d’éléments, qui sont tous des copies de <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> est inférieur à zéro.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Reverse">
      <summary>Inverse l'ordre des éléments dans l'ensemble de <see cref="T:System.Collections.ArrayList" />.</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> est en lecture seule.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Reverse(System.Int32,System.Int32)">
      <summary>Inverse l'ordre des éléments dans la plage spécifiée.</summary>
      <param name="index">Index de début de base zéro de la plage à inverser.</param>
      <param name="count">Nombre d'éléments à inverser dans la plage.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> est inférieur à zéro.  

ou - 
<paramref name="count" /> est inférieur à zéro.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> et <paramref name="count" /> ne désignent pas une plage d’éléments valide du <see cref="T:System.Collections.ArrayList" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> est en lecture seule.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)">
      <summary>Copie les éléments d’une collection par-dessus une plage d’éléments dans <see cref="T:System.Collections.ArrayList" />.</summary>
      <param name="index">Index <see cref="T:System.Collections.ArrayList" /> de base zéro à partir duquel commencer la copie des éléments de <paramref name="c" />.</param>
      <param name="c">
        <see cref="T:System.Collections.ICollection" /> dont les éléments doivent être copiés dans <see cref="T:System.Collections.ArrayList" />. La collection elle-même ne peut pas avoir la valeur <see langword="null" />, mais elle peut contenir des éléments qui ont la valeur <see langword="null" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> est inférieur à zéro.  
ou 
 <paramref name="index" /> plus le nombre d’éléments dans <paramref name="c" /> est supérieur à <see cref="P:System.Collections.ArrayList.Count" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="c" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> est en lecture seule.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Sort">
      <summary>Trie les éléments dans l’intégralité de <see cref="T:System.Collections.ArrayList" />.</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> est en lecture seule.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Sort(System.Collections.IComparer)">
      <summary>Trie les éléments dans l'ensemble de <see cref="T:System.Collections.ArrayList" /> à l'aide du comparateur spécifié.</summary>
      <param name="comparer">Implémentation de <see cref="T:System.Collections.IComparer" /> à utiliser pendant la comparaison d'éléments.  

ou - 
Référence null (<see langword="Nothing" /> en Visual Basic) pour utiliser l’implémentation <see cref="T:System.IComparable" /> de chaque élément.</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> est en lecture seule.</exception>
      <exception cref="T:System.InvalidOperationException">Une erreur s’est produite pendant la comparaison de deux éléments.</exception>
      <exception cref="T:System.ArgumentException">
        <see langword="null" /> est passé pour <paramref name="comparer" />, et les éléments de la liste n’implémentent pas <see cref="T:System.IComparable" />.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)">
      <summary>Trie les éléments dans une plage d'éléments de <see cref="T:System.Collections.ArrayList" /> à l'aide du comparateur spécifié.</summary>
      <param name="index">Index de début de base zéro de la plage à trier.</param>
      <param name="count">Longueur de la plage à trier.</param>
      <param name="comparer">Implémentation de <see cref="T:System.Collections.IComparer" /> à utiliser pendant la comparaison d'éléments.  

ou - 
Référence null (<see langword="Nothing" /> en Visual Basic) pour utiliser l’implémentation <see cref="T:System.IComparable" /> de chaque élément.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> est inférieur à zéro.  

ou - 
<paramref name="count" /> est inférieur à zéro.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> et <paramref name="count" /> ne spécifient pas une plage valide dans le <see cref="T:System.Collections.ArrayList" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> est en lecture seule.</exception>
      <exception cref="T:System.InvalidOperationException">Une erreur s’est produite pendant la comparaison de deux éléments.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)">
      <summary>Retourne un wrapper <see cref="T:System.Collections.ArrayList" /> qui est synchronisé (thread-safe).</summary>
      <param name="list">
        <see cref="T:System.Collections.ArrayList" /> à synchroniser.</param>
      <returns>Wrapper <see cref="T:System.Collections.ArrayList" /> synchronisé (thread-safe).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Synchronized(System.Collections.IList)">
      <summary>Retourne un wrapper <see cref="T:System.Collections.IList" /> qui est synchronisé (thread-safe).</summary>
      <param name="list">
        <see cref="T:System.Collections.IList" /> à synchroniser.</param>
      <returns>Wrapper <see cref="T:System.Collections.IList" /> synchronisé (thread-safe).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="P:System.Collections.ArrayList.SyncRoot">
      <summary>Obtient un objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ArrayList" />.</summary>
      <returns>Objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ArrayList" />.</returns>
    </member>
    <member name="M:System.Collections.ArrayList.ToArray">
      <summary>Copie les éléments de <see cref="T:System.Collections.ArrayList" /> dans un nouveau tableau <see cref="T:System.Object" />.</summary>
      <returns>Tableau <see cref="T:System.Object" /> contenant les copies des éléments de <see cref="T:System.Collections.ArrayList" />.</returns>
    </member>
    <member name="M:System.Collections.ArrayList.ToArray(System.Type)">
      <summary>Copie les éléments de <see cref="T:System.Collections.ArrayList" /> vers un nouveau tableau du type d'élément spécifié.</summary>
      <param name="type">Élément <see cref="T:System.Type" /> du tableau de destination dans lequel créer et copier des éléments.</param>
      <returns>Tableau du type d'élément spécifié contenant des copies des éléments de <see cref="T:System.Collections.ArrayList" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidCastException">Le cast automatique du type du <see cref="T:System.Collections.ArrayList" /> source en type spécifié est impossible.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.TrimToSize">
      <summary>Définit la capacité au nombre réel d'éléments dans <see cref="T:System.Collections.ArrayList" />.</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> est en lecture seule.  

ou - 
<see cref="T:System.Collections.ArrayList" /> est de taille fixe.</exception>
    </member>
    <member name="T:System.Collections.Comparer">
      <summary>Compare deux objets pour contrôler leur équivalence, en respectant la casse.</summary>
    </member>
    <member name="M:System.Collections.Comparer.#ctor(System.Globalization.CultureInfo)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Comparer" /> à l'aide du <see cref="T:System.Globalization.CultureInfo" /> spécifié.</summary>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> à utiliser pour le nouveau <see cref="T:System.Collections.Comparer" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Comparer.Compare(System.Object,System.Object)">
      <summary>Exécute une comparaison avec respect de la casse de deux objets du même type et retourne une valeur indiquant si l'un est inférieur, égal ou supérieur à l'autre.</summary>
      <param name="a">Premier objet à comparer.</param>
      <param name="b">Deuxième objet à comparer.</param>
      <returns>Entier signé qui indique les valeurs relatives de <paramref name="a" /> et <paramref name="b" />, comme indiqué dans le tableau suivant.  
  Value 
  Signification 
  Inférieure à zéro 
 <paramref name="a" /> est inférieur à <paramref name="b" />.  

  Zéro 
 <paramref name="a" /> est égal à <paramref name="b" />.  

  Supérieure à zéro 
 <paramref name="a" /> est supérieur à <paramref name="b" />.</returns>
      <exception cref="T:System.ArgumentException">Ni <paramref name="a" /> ni <paramref name="b" /> n'implémente l'interface <see cref="T:System.IComparable" />.  
ou 
 <paramref name="a" /> et <paramref name="b" /> sont de types différents et aucun d'entre eux ne peut effectuer de comparaisons avec l'autre.</exception>
    </member>
    <member name="F:System.Collections.Comparer.Default">
      <summary>Représente une instance de <see cref="T:System.Collections.Comparer" /> associée au <see cref="P:System.Threading.Thread.CurrentCulture" /> du thread en cours. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.Collections.Comparer.DefaultInvariant">
      <summary>Représente une instance de <see cref="T:System.Collections.Comparer" /> associée à <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />. Ce champ est en lecture seule.</summary>
    </member>
    <member name="M:System.Collections.Comparer.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Remplit un objet <see cref="T:System.Runtime.Serialization.SerializationInfo" /> avec les données requises pour la sérialisation.</summary>
      <param name="info">Objet à remplir avec des données.</param>
      <param name="context">Informations de contexte sur la source ou la destination de la sérialisation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> est <see langword="null" />.</exception>
    </member>
    <member name="T:System.Collections.Hashtable">
      <summary>Représente une collection de paires clé/valeur qui sont organisées en fonction du code de hachage de la clé.</summary>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor">
      <summary>Initialise une nouvelle instance vide de la classe <see cref="T:System.Collections.Hashtable" /> à l'aide de la capacité initiale, du facteur de charge, du fournisseur de codes de hachage et du comparateur par défaut.</summary>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Hashtable" /> en copiant les éléments du dictionnaire spécifié vers le nouvel objet <see cref="T:System.Collections.Hashtable" />. Le nouvel objet <see cref="T:System.Collections.Hashtable" /> a une capacité initiale égale au nombre d'éléments copiés et utilise le facteur de charge, le fournisseur de codes de hachage et le comparateur par défaut.</summary>
      <param name="d">Objet <see cref="T:System.Collections.IDictionary" /> à copier vers un nouvel objet <see cref="T:System.Collections.Hashtable" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Hashtable" /> en copiant les éléments du dictionnaire spécifié vers un nouvel objet <see cref="T:System.Collections.Hashtable" />. Le nouvel objet <see cref="T:System.Collections.Hashtable" /> a une capacité initiale égale au nombre d'éléments copiés et utilise le facteur de charge par défaut et l'objet <see cref="T:System.Collections.IEqualityComparer" /> spécifié.</summary>
      <param name="d">Objet <see cref="T:System.Collections.IDictionary" /> à copier vers un nouvel objet <see cref="T:System.Collections.Hashtable" />.</param>
      <param name="equalityComparer">Objet <see cref="T:System.Collections.IEqualityComparer" /> qui définit le fournisseur de code de hachage et le comparateur à utiliser avec <see cref="T:System.Collections.Hashtable" />.  

ou - 
<see langword="null" /> pour utiliser le fournisseur de code de hachage par défaut et le comparateur par défaut. Le fournisseur de code de hachage par défaut est l'implémentation de <see cref="M:System.Object.GetHashCode" /> de chaque clé et le comparateur par défaut est l'implémentation de <see cref="M:System.Object.Equals(System.Object)" /> de chaque clé.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Hashtable" /> en copiant les éléments du dictionnaire spécifié vers le nouvel objet <see cref="T:System.Collections.Hashtable" />. Le nouvel objet <see cref="T:System.Collections.Hashtable" /> a une capacité initiale égale au nombre d'éléments copiés et utilise le facteur de charge par défaut et le fournisseur de codes de hachage et le comparateur spécifiés. Cette API est obsolète. Pour obtenir une alternative, consultez <see cref="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)" />.</summary>
      <param name="d">Objet <see cref="T:System.Collections.IDictionary" /> à copier vers un nouvel objet <see cref="T:System.Collections.Hashtable" />.</param>
      <param name="hcp">Objet <see cref="T:System.Collections.IHashCodeProvider" /> qui fournit les codes de hachage pour toutes les clés dans <see cref="T:System.Collections.Hashtable" />.  

ou - 
<see langword="null" /> pour utiliser le fournisseur de code de hachage par défaut, qui est l'implémentation de chaque clé de <see cref="M:System.Object.GetHashCode" />.</param>
      <param name="comparer">Objet <see cref="T:System.Collections.IComparer" /> à utiliser pour déterminer si deux clés sont égales.  

ou - 
<see langword="null" /> pour utiliser le comparateur par défaut, qui est l'implémentation de chaque clé de <see cref="M:System.Object.Equals(System.Object)" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Hashtable" /> en copiant les éléments du dictionnaire spécifié vers le nouvel objet <see cref="T:System.Collections.Hashtable" />. Le nouvel objet <see cref="T:System.Collections.Hashtable" /> a une capacité initiale égale au nombre d'éléments copiés et utilise le facteur de charge spécifié et le fournisseur de codes de hachage et le comparateur par défaut.</summary>
      <param name="d">Objet <see cref="T:System.Collections.IDictionary" /> à copier vers un nouvel objet <see cref="T:System.Collections.Hashtable" />.</param>
      <param name="loadFactor">Nombre dans la plage comprise entre 0,1 et 1,0 qui est multiplié par la valeur par défaut qui fournit les meilleures performances. Le résultat est le ratio maximal d'éléments par compartiment.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="loadFactor" /> est inférieur à 0,1.  

ou - 
<paramref name="loadFactor" /> est supérieur à 1,0.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IEqualityComparer)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Hashtable" /> en copiant les éléments du dictionnaire spécifié vers le nouvel objet <see cref="T:System.Collections.Hashtable" />. Le nouvel objet <see cref="T:System.Collections.Hashtable" /> a une capacité initiale égale au nombre d'éléments copiés et utilise le facteur de charge et l'objet <see cref="T:System.Collections.IEqualityComparer" /> spécifiés.</summary>
      <param name="d">Objet <see cref="T:System.Collections.IDictionary" /> à copier vers un nouvel objet <see cref="T:System.Collections.Hashtable" />.</param>
      <param name="loadFactor">Nombre dans la plage comprise entre 0,1 et 1,0 qui est multiplié par la valeur par défaut qui fournit les meilleures performances. Le résultat est le ratio maximal d'éléments par compartiment.</param>
      <param name="equalityComparer">Objet <see cref="T:System.Collections.IEqualityComparer" /> qui définit le fournisseur de code de hachage et le comparateur à utiliser avec <see cref="T:System.Collections.Hashtable" />.  

ou - 
<see langword="null" /> pour utiliser le fournisseur de code de hachage par défaut et le comparateur par défaut. Le fournisseur de code de hachage par défaut est l'implémentation de <see cref="M:System.Object.GetHashCode" /> de chaque clé et le comparateur par défaut est l'implémentation de <see cref="M:System.Object.Equals(System.Object)" /> de chaque clé.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="loadFactor" /> est inférieur à 0,1.  
ou 
 <paramref name="loadFactor" /> est supérieur à 1,0.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Collections.Hashtable" /> en copiant les éléments du dictionnaire spécifié vers le nouvel objet <see cref="T:System.Collections.Hashtable" />. Le nouvel objet <see cref="T:System.Collections.Hashtable" /> a une capacité initiale égale au nombre d'éléments copiés et utilise le facteur de charge, le fournisseur de codes de hachage et le comparateur spécifiés.</summary>
      <param name="d">Objet <see cref="T:System.Collections.IDictionary" /> à copier vers un nouvel objet <see cref="T:System.Collections.Hashtable" />.</param>
      <param name="loadFactor">Nombre dans la plage comprise entre 0,1 et 1,0 qui est multiplié par la valeur par défaut qui fournit les meilleures performances. Le résultat est le ratio maximal d'éléments par compartiment.</param>
      <param name="hcp">Objet <see cref="T:System.Collections.IHashCodeProvider" /> qui fournit les codes de hachage pour toutes les clés dans <see cref="T:System.Collections.Hashtable" />.  

ou - 
<see langword="null" /> pour utiliser le fournisseur de code de hachage par défaut, qui est l'implémentation de chaque clé de <see cref="M:System.Object.GetHashCode" />.</param>
      <param name="comparer">Objet <see cref="T:System.Collections.IComparer" /> à utiliser pour déterminer si deux clés sont égales.  
ou 
 <see langword="null" /> pour utiliser le comparateur par défaut, qui est l'implémentation de chaque clé de <see cref="M:System.Object.Equals(System.Object)" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="loadFactor" /> est inférieur à 0,1.  

ou - 
<paramref name="loadFactor" /> est supérieur à 1,0.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IEqualityComparer)">
      <summary>Initialise une nouvelle instance vide de la classe <see cref="T:System.Collections.Hashtable" /> à l'aide de la capacité initiale et du facteur de charge par défaut, et de l'objet <see cref="T:System.Collections.IEqualityComparer" /> spécifié.</summary>
      <param name="equalityComparer">Objet <see cref="T:System.Collections.IEqualityComparer" /> qui définit le fournisseur de code de hachage et le comparateur à utiliser avec l'objet <see cref="T:System.Collections.Hashtable" />.  
ou 
 <see langword="null" /> pour utiliser le fournisseur de code de hachage par défaut et le comparateur par défaut. Le fournisseur de code de hachage par défaut est l'implémentation de <see cref="M:System.Object.GetHashCode" /> de chaque clé et le comparateur par défaut est l'implémentation de <see cref="M:System.Object.Equals(System.Object)" /> de chaque clé.</param>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>Initialise une nouvelle instance vide de la classe <see cref="T:System.Collections.Hashtable" /> à l'aide de la capacité initiale et du facteur de charge par défaut, et du fournisseur de codes de hachage et du comparateur spécifiés.</summary>
      <param name="hcp">Objet <see cref="T:System.Collections.IHashCodeProvider" /> qui fournit les codes de hachage pour toutes les clés dans l'objet <see cref="T:System.Collections.Hashtable" />.  
ou 
 <see langword="null" /> pour utiliser le fournisseur de code de hachage par défaut, qui est l'implémentation de chaque clé de <see cref="M:System.Object.GetHashCode" />.</param>
      <param name="comparer">Objet <see cref="T:System.Collections.IComparer" /> à utiliser pour déterminer si deux clés sont égales.  

ou - 
<see langword="null" /> pour utiliser le comparateur par défaut, qui est l'implémentation de chaque clé de <see cref="M:System.Object.Equals(System.Object)" />.</param>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32)">
      <summary>Initialise une nouvelle instance vide de la classe <see cref="T:System.Collections.Hashtable" /> à l'aide de la capacité initiale spécifiée et du facteur de charge, du fournisseur de codes de hachage et du comparateur par défaut.</summary>
      <param name="capacity">Nombre approximatif d'éléments que l'objet <see cref="T:System.Collections.Hashtable" /> peut contenir initialement.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> est inférieur à zéro.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IEqualityComparer)">
      <summary>Initialise une nouvelle instance vide de la classe <see cref="T:System.Collections.Hashtable" /> à l'aide de l'objet <see cref="T:System.Collections.IEqualityComparer" /> et de la capacité initiale spécifiés et du facteur de charge par défaut.</summary>
      <param name="capacity">Nombre approximatif d'éléments que l'objet <see cref="T:System.Collections.Hashtable" /> peut contenir initialement.</param>
      <param name="equalityComparer">Objet <see cref="T:System.Collections.IEqualityComparer" /> qui définit le fournisseur de code de hachage et le comparateur à utiliser avec <see cref="T:System.Collections.Hashtable" />.  

ou - 
<see langword="null" /> pour utiliser le fournisseur de code de hachage par défaut et le comparateur par défaut. Le fournisseur de code de hachage par défaut est l'implémentation de <see cref="M:System.Object.GetHashCode" /> de chaque clé et le comparateur par défaut est l'implémentation de <see cref="M:System.Object.Equals(System.Object)" /> de chaque clé.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> est inférieur à zéro.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>Initialise une nouvelle instance vide de la classe <see cref="T:System.Collections.Hashtable" /> à l'aide de la capacité initiale, du fournisseur de codes de hachage, du comparateur et du facteur de charge par défaut.</summary>
      <param name="capacity">Nombre approximatif d'éléments que l'objet <see cref="T:System.Collections.Hashtable" /> peut contenir initialement.</param>
      <param name="hcp">Objet <see cref="T:System.Collections.IHashCodeProvider" /> qui fournit les codes de hachage pour toutes les clés dans <see cref="T:System.Collections.Hashtable" />.  
ou 
 <see langword="null" /> pour utiliser le fournisseur de code de hachage par défaut, qui est l'implémentation de chaque clé de <see cref="M:System.Object.GetHashCode" />.</param>
      <param name="comparer">Objet <see cref="T:System.Collections.IComparer" /> à utiliser pour déterminer si deux clés sont égales.  
ou 
 <see langword="null" /> pour utiliser le comparateur par défaut, qui est l'implémentation de chaque clé de <see cref="M:System.Object.Equals(System.Object)" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> est inférieur à zéro.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32,System.Single)">
      <summary>Initialise une nouvelle instance vide de la classe <see cref="T:System.Collections.Hashtable" /> à l'aide de la capacité initiale et du facteur de charge spécifiés, et du fournisseur de codes de hachage et du comparateur par défaut.</summary>
      <param name="capacity">Nombre approximatif d'éléments que l'objet <see cref="T:System.Collections.Hashtable" /> peut contenir initialement.</param>
      <param name="loadFactor">Nombre dans la plage comprise entre 0,1 et 1,0 qui est multiplié par la valeur par défaut qui fournit les meilleures performances. Le résultat est le ratio maximal d'éléments par compartiment.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> est inférieur à zéro.  

ou - 
<paramref name="loadFactor" /> est inférieur à 0,1.  

ou - 
<paramref name="loadFactor" /> est supérieur à 1,0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="capacity" /> provoque un dépassement de capacité.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IEqualityComparer)">
      <summary>Initialise une nouvelle instance vide de la classe <see cref="T:System.Collections.Hashtable" /> à l'aide de la capacité initiale, du facteur de charge et de l'objet <see cref="T:System.Collections.IEqualityComparer" /> spécifiés.</summary>
      <param name="capacity">Nombre approximatif d'éléments que l'objet <see cref="T:System.Collections.Hashtable" /> peut contenir initialement.</param>
      <param name="loadFactor">Nombre dans la plage comprise entre 0,1 et 1,0 qui est multiplié par la valeur par défaut qui fournit les meilleures performances. Le résultat est le ratio maximal d'éléments par compartiment.</param>
      <param name="equalityComparer">Objet <see cref="T:System.Collections.IEqualityComparer" /> qui définit le fournisseur de code de hachage et le comparateur à utiliser avec <see cref="T:System.Collections.Hashtable" />.  

ou - 
<see langword="null" /> pour utiliser le fournisseur de code de hachage par défaut et le comparateur par défaut. Le fournisseur de code de hachage par défaut est l'implémentation de <see cref="M:System.Object.GetHashCode" /> de chaque clé et le comparateur par défaut est l'implémentation de <see cref="M:System.Object.Equals(System.Object)" /> de chaque clé.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> est inférieur à zéro.  

ou - 
<paramref name="loadFactor" /> est inférieur à 0,1.  

ou - 
<paramref name="loadFactor" /> est supérieur à 1,0.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>Initialise une nouvelle instance vide de la classe <see cref="T:System.Collections.Hashtable" /> à l'aide de la capacité initiale, du facteur de charge, du fournisseur de codes de hachage et du comparateur spécifiés.</summary>
      <param name="capacity">Nombre approximatif d'éléments que l'objet <see cref="T:System.Collections.Hashtable" /> peut contenir initialement.</param>
      <param name="loadFactor">Nombre dans la plage comprise entre 0,1 et 1,0 qui est multiplié par la valeur par défaut qui fournit les meilleures performances. Le résultat est le ratio maximal d'éléments par compartiment.</param>
      <param name="hcp">Objet <see cref="T:System.Collections.IHashCodeProvider" /> qui fournit les codes de hachage pour toutes les clés dans <see cref="T:System.Collections.Hashtable" />.  

ou - 
<see langword="null" /> pour utiliser le fournisseur de code de hachage par défaut, qui est l'implémentation de chaque clé de <see cref="M:System.Object.GetHashCode" />.</param>
      <param name="comparer">Objet <see cref="T:System.Collections.IComparer" /> à utiliser pour déterminer si deux clés sont égales.  
ou 
 <see langword="null" /> pour utiliser le comparateur par défaut, qui est l'implémentation de chaque clé de <see cref="M:System.Object.Equals(System.Object)" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> est inférieur à zéro.  
ou 
 <paramref name="loadFactor" /> est inférieur à 0,1.  
ou 
 <paramref name="loadFactor" /> est supérieur à 1,0.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialise une nouvelle instance vide de la classe <see cref="T:System.Collections.Hashtable" /> qui est sérialisable à l’aide des objets<see cref="T:System.Runtime.Serialization.SerializationInfo" /> et <see cref="T:System.Runtime.Serialization.StreamingContext" /> spécifiés.</summary>
      <param name="info">Objet <see cref="T:System.Runtime.Serialization.SerializationInfo" /> contenant les informations nécessaires pour sérialiser <see cref="T:System.Collections.Hashtable" />.</param>
      <param name="context">Objet <see cref="T:System.Runtime.Serialization.StreamingContext" /> contenant la source et la destination du flux sérialisé associé à <see cref="T:System.Collections.Hashtable" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.Add(System.Object,System.Object)">
      <summary>Ajoute un élément avec la clé et la valeur spécifiées dans <see cref="T:System.Collections.Hashtable" />.</summary>
      <param name="key">Clé de l'élément à ajouter.</param>
      <param name="value">Valeur de l'élément à ajouter. La valeur peut être <see langword="null" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Un élément possédant la même clé existe déjà dans <see cref="T:System.Collections.Hashtable" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Hashtable" /> est en lecture seule.  

ou - 
<see cref="T:System.Collections.Hashtable" /> est de taille fixe.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.Clear">
      <summary>Supprime tous les éléments de <see cref="T:System.Collections.Hashtable" />.</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Hashtable" /> est en lecture seule.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.Clone">
      <summary>Crée une copie superficielle de <see cref="T:System.Collections.Hashtable" />.</summary>
      <returns>Copie superficielle de <see cref="T:System.Collections.Hashtable" />.</returns>
    </member>
    <member name="P:System.Collections.Hashtable.comparer">
      <summary>Obtient ou définit le <see cref="T:System.Collections.IComparer" /> à utiliser pour <see cref="T:System.Collections.Hashtable" />.</summary>
      <returns>
        <see cref="T:System.Collections.IComparer" /> à utiliser pour <see cref="T:System.Collections.Hashtable" />.</returns>
      <exception cref="T:System.ArgumentException">La propriété a une valeur, mais la table de hachage a été créée à l'aide d'un <see cref="T:System.Collections.IEqualityComparer" />.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.Contains(System.Object)">
      <summary>Détermine si <see cref="T:System.Collections.Hashtable" /> contient une clé spécifique.</summary>
      <param name="key">Clé à rechercher dans <see cref="T:System.Collections.Hashtable" />.</param>
      <returns>
        <see langword="true" /> si <see cref="T:System.Collections.Hashtable" /> contient un élément correspondant à la clé spécifiée ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.ContainsKey(System.Object)">
      <summary>Détermine si <see cref="T:System.Collections.Hashtable" /> contient une clé spécifique.</summary>
      <param name="key">Clé à rechercher dans <see cref="T:System.Collections.Hashtable" />.</param>
      <returns>
        <see langword="true" /> si <see cref="T:System.Collections.Hashtable" /> contient un élément correspondant à la clé spécifiée ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.ContainsValue(System.Object)">
      <summary>Détermine si <see cref="T:System.Collections.Hashtable" /> contient une valeur spécifique.</summary>
      <param name="value">Valeur à trouver dans <see cref="T:System.Collections.Hashtable" />. La valeur peut être <see langword="null" />.</param>
      <returns>
        <see langword="true" /> si <see cref="T:System.Collections.Hashtable" /> contient un élément avec le <paramref name="value" /> spécifié ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Hashtable.CopyTo(System.Array,System.Int32)">
      <summary>Copie les éléments <see cref="T:System.Collections.Hashtable" /> dans une instance de <see cref="T:System.Array" /> unidimensionnelle à l'index spécifié.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensionnel qui constitue la destination des objets <see cref="T:System.Collections.DictionaryEntry" /> copiés à partir de <see cref="T:System.Collections.Hashtable" />. <see cref="T:System.Array" /> doit avoir une indexation de base zéro.</param>
      <param name="arrayIndex">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> est inférieur à zéro.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> est multidimensionnel.  
ou 
Le nombre d’éléments dans le <see cref="T:System.Collections.Hashtable" /> source est supérieur à la quantité d’espace disponible entre <paramref name="arrayIndex" /> et la fin du <paramref name="array" /> de destination.</exception>
      <exception cref="T:System.InvalidCastException">Le type du <see cref="T:System.Collections.Hashtable" /> source ne peut pas être converti automatiquement en type du <paramref name="array" /> de destination.</exception>
    </member>
    <member name="P:System.Collections.Hashtable.Count">
      <summary>Obtient le nombre de paires clé/valeur contenues dans <see cref="T:System.Collections.Hashtable" />.</summary>
      <returns>Nombre de paires clé/valeur contenues dans <see cref="T:System.Collections.Hashtable" />.</returns>
    </member>
    <member name="P:System.Collections.Hashtable.EqualityComparer">
      <summary>Obtient le <see cref="T:System.Collections.IEqualityComparer" /> à utiliser pour <see cref="T:System.Collections.Hashtable" />.</summary>
      <returns>
        <see cref="T:System.Collections.IEqualityComparer" /> à utiliser pour <see cref="T:System.Collections.Hashtable" />.</returns>
      <exception cref="T:System.ArgumentException">La propriété a une valeur, mais la table de hachage a été créée à l'aide d'un <see cref="T:System.Collections.IHashCodeProvider" /> et d'un <see cref="T:System.Collections.IComparer" />.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.GetEnumerator">
      <summary>Retourne un <see cref="T:System.Collections.IDictionaryEnumerator" /> qui itère au sein de <see cref="T:System.Collections.Hashtable" />.</summary>
      <returns>
        <see cref="T:System.Collections.IDictionaryEnumerator" /> pour <see cref="T:System.Collections.Hashtable" />.</returns>
    </member>
    <member name="M:System.Collections.Hashtable.GetHash(System.Object)">
      <summary>Retourne le code de hachage pour la clé spécifiée.</summary>
      <param name="key">
        <see cref="T:System.Object" /> pour lequel un code de hachage doit être retourné.</param>
      <returns>Code de hachage pour <paramref name="key" />.</returns>
      <exception cref="T:System.NullReferenceException">
        <paramref name="key" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Implémente l'interface <see cref="T:System.Runtime.Serialization.ISerializable" /> et retourne les données requises pour sérialiser <see cref="T:System.Collections.Hashtable" />.</summary>
      <param name="info">Objet <see cref="T:System.Runtime.Serialization.SerializationInfo" /> contenant les informations nécessaires pour sérialiser <see cref="T:System.Collections.Hashtable" />.</param>
      <param name="context">Objet <see cref="T:System.Runtime.Serialization.StreamingContext" /> contenant la source et la destination du flux sérialisé associé à <see cref="T:System.Collections.Hashtable" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">La collection a été modifiée.</exception>
    </member>
    <member name="P:System.Collections.Hashtable.hcp">
      <summary>Obtient ou définit l'objet qui peut dispenser des codes de hachage.</summary>
      <returns>Objet qui peut dispenser des codes de hachage.</returns>
      <exception cref="T:System.ArgumentException">La propriété a une valeur, mais la table de hachage a été créée à l'aide d'un <see cref="T:System.Collections.IEqualityComparer" />.</exception>
    </member>
    <member name="P:System.Collections.Hashtable.IsFixedSize">
      <summary>Obtient une valeur indiquant si <see cref="T:System.Collections.Hashtable" /> est de taille fixe.</summary>
      <returns>
        <see langword="true" /> si <see cref="T:System.Collections.Hashtable" /> est de taille fixe ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Hashtable.IsReadOnly">
      <summary>Obtient une valeur indiquant si <see cref="T:System.Collections.Hashtable" /> est en lecture seule.</summary>
      <returns>
        <see langword="true" /> si <see cref="T:System.Collections.Hashtable" /> est en lecture seule ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Hashtable.IsSynchronized">
      <summary>Obtient une valeur indiquant si l'accès à <see cref="T:System.Collections.Hashtable" /> est synchronisé (thread-safe).</summary>
      <returns>
        <see langword="true" /> si l'accès à <see cref="T:System.Collections.Hashtable" /> est synchronisé (thread-safe) ; sinon <see langword="false" />. La valeur par défaut est <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Hashtable.Item(System.Object)">
      <summary>Obtient ou définit la valeur associée à la clé spécifiée.</summary>
      <param name="key">Clé dont la valeur doit être obtenue ou définie.</param>
      <returns>Valeur associée à la clé spécifiée. Si la clé spécifiée est introuvable, la tentative d'obtention retourne <see langword="null" /> et la tentative de définition crée un nouvel élément avec la clé spécifiée.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">La propriété est définie et <see cref="T:System.Collections.Hashtable" /> est en lecture seule.  

ou - 
La propriété est définie, <paramref name="key" /> n’existe pas dans la collection et <see cref="T:System.Collections.Hashtable" /> a une taille fixe.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.KeyEquals(System.Object,System.Object)">
      <summary>Compare un <see cref="T:System.Object" /> spécifique avec une clé spécifique dans <see cref="T:System.Collections.Hashtable" />.</summary>
      <param name="item">
        <see cref="T:System.Object" /> à comparer à <paramref name="key" />.</param>
      <param name="key">Clé de <see cref="T:System.Collections.Hashtable" /> à comparer à <paramref name="item" />.</param>
      <returns>
        <see langword="true" /> si <paramref name="item" /> et <paramref name="key" /> sont égales ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> a la valeur <see langword="null" />.  

ou - 
<paramref name="key" /> est <see langword="null" />.</exception>
    </member>
    <member name="P:System.Collections.Hashtable.Keys">
      <summary>Obtient <see cref="T:System.Collections.ICollection" /> contenant les clés de <see cref="T:System.Collections.Hashtable" />.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> contenant les clés de <see cref="T:System.Collections.Hashtable" />.</returns>
    </member>
    <member name="M:System.Collections.Hashtable.OnDeserialization(System.Object)">
      <summary>Implémente l’interface <see cref="T:System.Runtime.Serialization.ISerializable" /> et déclenche l’événement de désérialisation une fois la désérialisation terminée.</summary>
      <param name="sender">Source de l'événement de désérialisation.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">L'objet <see cref="T:System.Runtime.Serialization.SerializationInfo" /> associé au <see cref="T:System.Collections.Hashtable" /> en cours n'est pas valide.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.Remove(System.Object)">
      <summary>Supprime l'élément avec la clé spécifiée d'<see cref="T:System.Collections.Hashtable" />.</summary>
      <param name="key">Clé de l'élément à supprimer.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> est <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Hashtable" /> est en lecture seule.  

ou - 
<see cref="T:System.Collections.Hashtable" /> est de taille fixe.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)">
      <summary>Retourne un wrapper synchronisé (thread-safe) pour <see cref="T:System.Collections.Hashtable" />.</summary>
      <param name="table">
        <see cref="T:System.Collections.Hashtable" /> à synchroniser.</param>
      <returns>Wrapper synchronisé (thread-safe) pour <see cref="T:System.Collections.Hashtable" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="table" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="P:System.Collections.Hashtable.SyncRoot">
      <summary>Obtient un objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.Hashtable" />.</summary>
      <returns>Objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.Hashtable" />.</returns>
    </member>
    <member name="M:System.Collections.Hashtable.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein d’une collection.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> qui peut être utilisé pour itérer au sein de la collection.</returns>
    </member>
    <member name="P:System.Collections.Hashtable.Values">
      <summary>Obtient <see cref="T:System.Collections.ICollection" /> contenant les valeurs de <see cref="T:System.Collections.Hashtable" />.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> contenant les valeurs de <see cref="T:System.Collections.Hashtable" />.</returns>
    </member>
    <member name="T:System.Collections.IHashCodeProvider">
      <summary>Fournit un code de hachage pour un objet, à l'aide d'une fonction de hachage personnalisée.</summary>
    </member>
    <member name="M:System.Collections.IHashCodeProvider.GetHashCode(System.Object)">
      <summary>Retourne un code de hachage pour l'objet spécifié.</summary>
      <param name="obj">
        <see cref="T:System.Object" /> pour lequel un code de hachage doit être retourné.</param>
      <returns>Code de hachage pour l'objet spécifié.</returns>
      <exception cref="T:System.ArgumentNullException">Le type de <paramref name="obj" /> est un type référence et <paramref name="obj" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="T:System.ContextBoundObject">
      <summary>Définit la classe de base pour toutes les classes liées au contexte.</summary>
    </member>
    <member name="M:System.ContextBoundObject.#ctor">
      <summary>Instancie une instance de la classe <see cref="T:System.ContextBoundObject" />.</summary>
    </member>
    <member name="T:System.ContextMarshalException">
      <summary>Exception levée en cas d’échec d’une tentative de marshaling d’un objet sur une limite de contexte.</summary>
    </member>
    <member name="M:System.ContextMarshalException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ContextMarshalException" /> avec des propriétés par défaut.</summary>
    </member>
    <member name="M:System.ContextMarshalException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ContextMarshalException" /> avec des données sérialisées.</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> qui contient les données d'objet sérialisées concernant l'exception levée.</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> qui contient des informations contextuelles relatives à la source ou à la destination.</param>
    </member>
    <member name="M:System.ContextMarshalException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ContextMarshalException" /> avec un message d'erreur spécifié.</summary>
      <param name="message">Message d'erreur qui explique la raison de l'exception.</param>
    </member>
    <member name="M:System.ContextMarshalException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ContextMarshalException" /> avec un message d'erreur spécifié et une référence à l'exception interne ayant provoqué cette exception.</summary>
      <param name="message">Message d'erreur qui explique la raison de l'exception.</param>
      <param name="inner">Exception ayant provoqué l'exception actuelle. Si le paramètre <paramref name="inner" /> n'est pas <see langword="null" />, l'exception actuelle est levée dans un bloc <see langword="catch" /> qui gère l'exception interne.</param>
    </member>
    <member name="T:System.ContextStaticAttribute">
      <summary>Indique que la valeur d’un champ statique est unique pour un contexte particulier.</summary>
    </member>
    <member name="M:System.ContextStaticAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ContextStaticAttribute" />.</summary>
    </member>
    <member name="T:System.Convert">
      <summary>Convertit un type de données de base en un autre type de données de base.</summary>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.Type)">
      <summary>Retourne un objet du type spécifié dont la valeur est équivalente à celle de l'objet spécifié.</summary>
      <param name="value">Objet qui implémente l'interface <see cref="T:System.IConvertible" />.</param>
      <param name="conversionType">Type d'objet à retourner.</param>
      <returns>Objet dont le type est <paramref name="conversionType" /> et dont la valeur équivaut à <paramref name="value" />.  
ou 
Référence null (<see langword="Nothing" /> en Visual Basic), si <paramref name="value" /> est <see langword="null" /> et <paramref name="conversionType" /> n'est pas un type de valeur.</returns>
      <exception cref="T:System.InvalidCastException">Cette conversion n'est pas prise en charge.  

ou - 
<paramref name="value" /> est <see langword="null" /> et <paramref name="conversionType" /> est un type valeur.  

ou - 
<paramref name="value" /> n’implémente pas l’interface <see cref="T:System.IConvertible" /> .</exception>
      <exception cref="T:System.FormatException">Le format de <paramref name="value" /> n’est pas reconnu par <paramref name="conversionType" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> représente un nombre qui est en dehors de la plage de <paramref name="conversionType" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="conversionType" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
      <summary>Retourne un objet du type spécifié dont la valeur est équivalente à celle de l'objet spécifié. Un paramètre fournit des informations de mise en forme propres à la culture.</summary>
      <param name="value">Objet qui implémente l'interface <see cref="T:System.IConvertible" />.</param>
      <param name="conversionType">Type d'objet à retourner.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
      <returns>Objet dont le type est <paramref name="conversionType" /> et dont la valeur équivaut à <paramref name="value" />.  
ou 
 <paramref name="value" />, si le <see cref="T:System.Type" /> de <paramref name="value" /> et <paramref name="conversionType" /> sont égaux.  
ou 
Référence null (<see langword="Nothing" /> en Visual Basic), si <paramref name="value" /> est <see langword="null" /> et <paramref name="conversionType" /> n'est pas un type de valeur.</returns>
      <exception cref="T:System.InvalidCastException">Cette conversion n'est pas prise en charge.  

ou - 
<paramref name="value" /> est <see langword="null" /> et <paramref name="conversionType" /> est un type valeur.  

ou - 
<paramref name="value" /> n’implémente pas l’interface <see cref="T:System.IConvertible" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’est pas dans un format pour le <paramref name="conversionType" /> reconnu par <paramref name="provider" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> représente un nombre qui est en dehors de la plage du <paramref name="conversionType" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="conversionType" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
      <summary>Retourne un objet du type spécifié dont la valeur est équivalente à celle de l'objet spécifié.</summary>
      <param name="value">Objet qui implémente l'interface <see cref="T:System.IConvertible" />.</param>
      <param name="typeCode">Type d'objet à retourner.</param>
      <returns>Objet dont le type sous-jacent est <paramref name="typeCode" /> et dont la valeur équivaut à <paramref name="value" />.  

ou - 
Référence null (<see langword="Nothing" /> en Visual Basic), si <paramref name="value" /> est <see langword="null" /> et <paramref name="typeCode" /> est <see cref="F:System.TypeCode.Empty" />, <see cref="F:System.TypeCode.String" />, ou <see cref="F:System.TypeCode.Object" />.</returns>
      <exception cref="T:System.InvalidCastException">Cette conversion n'est pas prise en charge.  
ou 
 <paramref name="value" /> est <see langword="null" />, et <paramref name="typeCode" /> spécifie un type valeur.  

ou - 
<paramref name="value" /> n’implémente pas l’interface <see cref="T:System.IConvertible" />.</exception>
      <exception cref="T:System.FormatException">le format de <paramref name="value" /> n’est pas reconnu par le type <paramref name="typeCode" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> représente un nombre qui est en dehors de la plage du type <paramref name="typeCode" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeCode" /> n'est pas valide.</exception>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
      <summary>Retourne un objet du type spécifié dont la valeur est équivalente à celle de l'objet spécifié. Un paramètre fournit des informations de mise en forme propres à la culture.</summary>
      <param name="value">Objet qui implémente l'interface <see cref="T:System.IConvertible" />.</param>
      <param name="typeCode">Type d'objet à retourner.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
      <returns>Objet dont le type sous-jacent est <paramref name="typeCode" /> et dont la valeur équivaut à <paramref name="value" />.  

ou - 
Référence null (<see langword="Nothing" /> en Visual Basic), si <paramref name="value" /> est <see langword="null" /> et <paramref name="typeCode" /> est <see cref="F:System.TypeCode.Empty" />, <see cref="F:System.TypeCode.String" />, ou <see cref="F:System.TypeCode.Object" />.</returns>
      <exception cref="T:System.InvalidCastException">Cette conversion n'est pas prise en charge.  

ou - 
<paramref name="value" /> est <see langword="null" />, et <paramref name="typeCode" /> spécifie un type valeur.  

ou - 
<paramref name="value" /> n’implémente pas l’interface <see cref="T:System.IConvertible" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’est pas dans un format pour le type <paramref name="typeCode" /> reconnu par <paramref name="provider" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> représente un nombre qui est en dehors de la plage du type <paramref name="typeCode" /> .</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeCode" /> n'est pas valide.</exception>
    </member>
    <member name="F:System.Convert.DBNull">
      <summary>Constante qui représente une colonne de base de données sans données, c'est-à-dire une base de données de valeur null.</summary>
    </member>
    <member name="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
      <summary>Convertit un sous-ensemble d'un tableau de caractères Unicode, qui encode les données binaires en chiffres base 64, en un tableau équivalent d'entiers non signés 8 bits. Des paramètres spécifient le sous-ensemble du tableau d'entrée et le nombre d'éléments à convertir.</summary>
      <param name="inArray">Tableau de caractères Unicode.</param>
      <param name="offset">Position au sein de <paramref name="inArray" />.</param>
      <param name="length">Nombre d'éléments de <paramref name="inArray" /> à convertir.</param>
      <returns>Tableau d'entiers non signés 8 bits équivalent aux éléments <paramref name="length" /> situés à la position <paramref name="offset" /> dans <paramref name="inArray" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> ou <paramref name="length" /> est inférieur à 0.  

ou - 
<paramref name="offset" /> plus <paramref name="length" /> indique une position qui n’appartient pas à <paramref name="inArray" />.</exception>
      <exception cref="T:System.FormatException">La longueur de <paramref name="inArray" />, en ignorant les espaces blancs, n’est pas zéro ou un multiple de 4.  

ou - 
Le format de <paramref name="inArray" /> n’est pas valide. <paramref name="inArray" /> contient un caractère non-Base 64, plus de deux caractères de remplissage ou un caractère différent d’un espace blanc parmi les caractères de remplissage.</exception>
    </member>
    <member name="M:System.Convert.FromBase64String(System.String)">
      <summary>Convertit la chaîne spécifiée, qui encode les données binaires en chiffres base 64, en tableau équivalent d'entiers non signés 8 bits.</summary>
      <param name="s">Chaîne à convertir.</param>
      <returns>Tableau d'entiers non signés 8 bits équivalent à <paramref name="s" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> est <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">La longueur de <paramref name="s" />, en ignorant les espaces blancs, n’est pas zéro ou un multiple de 4.  
ou 
Le format de <paramref name="s" /> n’est pas valide. <paramref name="s" /> contient un caractère qui n’est pas de base 64, plus de deux caractères de remplissage ou un caractère différent d’un espace blanc parmi les caractères de remplissage.</exception>
    </member>
    <member name="M:System.Convert.GetTypeCode(System.Object)">
      <summary>Retourne le <see cref="T:System.TypeCode" /> de l'objet spécifié.</summary>
      <param name="value">Objet qui implémente l'interface <see cref="T:System.IConvertible" />.</param>
      <returns>
        <see cref="T:System.TypeCode" /> de <paramref name="value" />, ou <see cref="F:System.TypeCode.Empty" /> si <paramref name="value" /> est <see langword="null" />.</returns>
    </member>
    <member name="M:System.Convert.IsDBNull(System.Object)">
      <summary>Retourne une indication précisant si l'objet spécifié est de type <see cref="T:System.DBNull" />.</summary>
      <param name="value">Objet.</param>
      <returns>
        <see langword="true" /> si <paramref name="value" /> est de type <see cref="T:System.DBNull" />, sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>Convertit un sous-ensemble d'un tableau d'entiers non signés 8 bits en sous-ensemble équivalent d'un tableau de caractères Unicode encodé en chiffres base 64. Des paramètres spécifient les sous-ensembles en tant qu'offsets des tableaux d'entrée et de sortie ainsi que le nombre d'éléments du tableau d'entrée à convertir.</summary>
      <param name="inArray">Tableau d'entrée d'entiers non signés 8 bits.</param>
      <param name="offsetIn">Position au sein de <paramref name="inArray" />.</param>
      <param name="length">Nombre d'éléments de <paramref name="inArray" /> à convertir.</param>
      <param name="outArray">Tableau de sortie de caractères Unicode.</param>
      <param name="offsetOut">Position au sein de <paramref name="outArray" />.</param>
      <returns>Entier 32 bits signé contenant le nombre d'octets dans <paramref name="outArray" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> ou <paramref name="outArray" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offsetIn" />, <paramref name="offsetOut" /> ou <paramref name="length" /> est un nombre négatif.  

ou - 
<paramref name="offsetIn" /> plus <paramref name="length" /> est supérieur à la longueur d’<paramref name="inArray" />.  

ou 
 <paramref name="offsetOut" /> plus le nombre d’éléments à retourner est supérieur à la longueur d’<paramref name="outArray" />.</exception>
    </member>
    <member name="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
      <summary>Convertit un sous-ensemble d'un tableau d'entiers non signés 8 bits en sous-ensemble équivalent d'un tableau de caractères Unicode encodé en chiffres base 64. Des paramètres spécifient les sous-ensembles en tant qu'offsets des tableaux d'entrée et de sortie, le nombre d'éléments du tableau d'entrée à convertir et indiquent si des sauts de ligne sont insérés dans le tableau de sortie.</summary>
      <param name="inArray">Tableau d'entrée d'entiers non signés 8 bits.</param>
      <param name="offsetIn">Position au sein de <paramref name="inArray" />.</param>
      <param name="length">Nombre d'éléments de <paramref name="inArray" /> à convertir.</param>
      <param name="outArray">Tableau de sortie de caractères Unicode.</param>
      <param name="offsetOut">Position au sein de <paramref name="outArray" />.</param>
      <param name="options">
        <see cref="F:System.Base64FormattingOptions.InsertLineBreaks" /> pour insérer un saut de ligne tous les 76 caractères, ou <see cref="F:System.Base64FormattingOptions.None" /> pour ne pas insérer de sauts de ligne.</param>
      <returns>Entier 32 bits signé contenant le nombre d'octets dans <paramref name="outArray" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> ou <paramref name="outArray" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offsetIn" />, <paramref name="offsetOut" /> ou <paramref name="length" /> est un nombre négatif.  

ou - 
<paramref name="offsetIn" /> plus <paramref name="length" /> est supérieur à la longueur d’<paramref name="inArray" />.  

ou - 
<paramref name="offsetOut" /> plus le nombre d’éléments à retourner est supérieur à la longueur de <paramref name="outArray" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> n’est pas une valeur de <see cref="T:System.Base64FormattingOptions" /> valide.</exception>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[])">
      <summary>Convertit un tableau d'entiers non signés 8 bits en sa représentation sous forme de chaîne équivalente, encodée en chiffres base 64.</summary>
      <param name="inArray">Tableau d'entiers non signés 8 bits.</param>
      <returns>Représentation sous forme de chaîne en base 64 du contenu de <paramref name="inArray" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
      <summary>Convertit un tableau d'entiers non signés 8 bits en sa représentation sous forme de chaîne équivalente, encodée en chiffres base 64. Un paramètre spécifie s'il faut insérer des sauts de ligne dans la valeur de retour.</summary>
      <param name="inArray">Tableau d'entiers non signés 8 bits.</param>
      <param name="options">
        <see cref="F:System.Base64FormattingOptions.InsertLineBreaks" /> pour insérer un saut de ligne tous les 76 caractères, ou <see cref="F:System.Base64FormattingOptions.None" /> pour ne pas insérer de sauts de ligne.</param>
      <returns>Représentation sous forme de chaîne en base 64 des éléments de <paramref name="inArray" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> n’est pas une valeur de <see cref="T:System.Base64FormattingOptions" /> valide.</exception>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
      <summary>Convertit un sous-ensemble d'un tableau d'entiers non signés 8 bits en sa représentation sous forme de chaîne équivalente, encodée en chiffres base 64. Des paramètres spécifient le sous-ensemble en tant qu'offset du tableau d'entrée et le nombre d'éléments du tableau à convertir.</summary>
      <param name="inArray">Tableau d'entiers non signés 8 bits.</param>
      <param name="offset">Offset dans <paramref name="inArray" />.</param>
      <param name="length">Nombre d'éléments de <paramref name="inArray" /> à convertir.</param>
      <returns>Représentation sous forme de chaîne, en base 64, des éléments <paramref name="length" /> de <paramref name="inArray" />, en commençant à la position <paramref name="offset" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> ou <paramref name="length" /> est un nombre négatif.  
ou 
 <paramref name="offset" /> plus <paramref name="length" /> est supérieur à la longueur d’<paramref name="inArray" />.</exception>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
      <summary>Convertit un sous-ensemble d'un tableau d'entiers non signés 8 bits en sa représentation sous forme de chaîne équivalente, encodée en chiffres base 64. Des paramètres spécifient le sous-ensemble en tant qu'offset du tableau d'entrée, le nombre d'éléments du tableau à convertir et indiquent s'il faut insérer des sauts de ligne dans la valeur de retour.</summary>
      <param name="inArray">Tableau d'entiers non signés 8 bits.</param>
      <param name="offset">Offset dans <paramref name="inArray" />.</param>
      <param name="length">Nombre d'éléments de <paramref name="inArray" /> à convertir.</param>
      <param name="options">
        <see cref="F:System.Base64FormattingOptions.InsertLineBreaks" /> pour insérer un saut de ligne tous les 76 caractères, ou <see cref="F:System.Base64FormattingOptions.None" /> pour ne pas insérer de sauts de ligne.</param>
      <returns>Représentation sous forme de chaîne, en base 64, des éléments <paramref name="length" /> de <paramref name="inArray" />, en commençant à la position <paramref name="offset" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> ou <paramref name="length" /> est un nombre négatif.  

ou - 
<paramref name="offset" /> plus <paramref name="length" /> est supérieur à la longueur d’<paramref name="inArray" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> n’est pas une valeur de <see cref="T:System.Base64FormattingOptions" /> valide.</exception>
    </member>
    <member name="M:System.Convert.ToBase64String(System.ReadOnlySpan{System.Byte},System.Base64FormattingOptions)">
      <param name="bytes" />
      <param name="options" />
    </member>
    <member name="M:System.Convert.ToBoolean(System.Boolean)">
      <summary>Retourne la valeur booléenne spécifiée. Aucune conversion n'est effectuée.</summary>
      <param name="value">Valeur booléenne à retourner.</param>
      <returns>
        <paramref name="value" /> est retourné sans modification.</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Byte)">
      <summary>Convertit la valeur de l'entier non signé 8 bits spécifié en valeur booléenne équivalente.</summary>
      <param name="value">Entier non signé 8 bits à convertir.</param>
      <returns>
        <see langword="true" /> si <paramref name="value" /> est différent de zéro ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Char)">
      <summary>L'appel de cette méthode lève toujours <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Caractère Unicode à convertir.</param>
      <returns>Cette conversion n'est pas prise en charge. Aucune valeur n'est retournée.</returns>
      <exception cref="T:System.InvalidCastException">Cette conversion n'est pas prise en charge.</exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.DateTime)">
      <summary>L'appel de cette méthode lève toujours <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Valeur de date et heure à convertir.</param>
      <returns>Cette conversion n'est pas prise en charge. Aucune valeur n'est retournée.</returns>
      <exception cref="T:System.InvalidCastException">Cette conversion n'est pas prise en charge.</exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Decimal)">
      <summary>Convertit la valeur du nombre décimal spécifié en valeur booléenne équivalente.</summary>
      <param name="value">Nombre à convertir.</param>
      <returns>
        <see langword="true" /> si <paramref name="value" /> est différent de zéro ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Double)">
      <summary>Convertit la valeur du nombre à virgule flottante double précision spécifié en valeur booléenne équivalente.</summary>
      <param name="value">Nombre à virgule flottante double précision à convertir.</param>
      <returns>
        <see langword="true" /> si <paramref name="value" /> est différent de zéro ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Int16)">
      <summary>Convertit la valeur de l'entier signé 16 bits spécifié en valeur booléenne équivalente.</summary>
      <param name="value">Entier signé 16 bits à convertir.</param>
      <returns>
        <see langword="true" /> si <paramref name="value" /> est différent de zéro ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Int32)">
      <summary>Convertit la valeur de l'entier signé 32 bits spécifié en valeur booléenne équivalente.</summary>
      <param name="value">Entier signé 32 bits à convertir.</param>
      <returns>
        <see langword="true" /> si <paramref name="value" /> est différent de zéro ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Int64)">
      <summary>Convertit la valeur de l'entier signé 64 bits spécifié en valeur booléenne équivalente.</summary>
      <param name="value">Entier signé 64 bits à convertir.</param>
      <returns>
        <see langword="true" /> si <paramref name="value" /> est différent de zéro ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Object)">
      <summary>Convertit la valeur d'un objet spécifié en valeur booléenne équivalente.</summary>
      <param name="value">Objet qui implémente l'interface <see cref="T:System.IConvertible" /> ou <see langword="null" />.</param>
      <returns>
        <see langword="true" /> ou <see langword="false" />, qui reflète la valeur retournée en appelant la méthode <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" /> pour le type sous-jacent de <paramref name="value" />. Si <paramref name="value" /> est <see langword="null" />, la méthode retourne <see langword="false" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> est une chaîne qui n’est pas égale à <see cref="F:System.Boolean.TrueString" /> ou <see cref="F:System.Boolean.FalseString" />.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> n’implémente pas l’interface <see cref="T:System.IConvertible" />.  

ou - 
La conversion de <paramref name="value" /> en un <see cref="T:System.Boolean" /> n’est pas prise en charge.</exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)">
      <summary>Convertit la valeur de l'objet spécifié en valeur booléenne équivalente à l'aide des informations de mise en forme spécifiées propres à la culture.</summary>
      <param name="value">Objet qui implémente l'interface <see cref="T:System.IConvertible" /> ou <see langword="null" />.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
      <returns>
        <see langword="true" /> ou <see langword="false" />, qui reflète la valeur retournée en appelant la méthode <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" /> pour le type sous-jacent de <paramref name="value" />. Si <paramref name="value" /> est <see langword="null" />, la méthode retourne <see langword="false" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> est une chaîne qui n’est pas égale à <see cref="F:System.Boolean.TrueString" /> ou <see cref="F:System.Boolean.FalseString" />.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> n’implémente pas l’interface <see cref="T:System.IConvertible" />.  

ou - 
La conversion de <paramref name="value" /> en un <see cref="T:System.Boolean" /> n’est pas prise en charge.</exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.SByte)">
      <summary>Convertit la valeur de l'entier signé 8 bits spécifié en valeur booléenne équivalente.</summary>
      <param name="value">Entier signé 8 bits à convertir.</param>
      <returns>
        <see langword="true" /> si <paramref name="value" /> est différent de zéro ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Single)">
      <summary>Convertit la valeur du nombre à virgule flottante simple précision spécifié en valeur booléenne équivalente.</summary>
      <param name="value">Nombre à virgule flottante simple précision à convertir.</param>
      <returns>
        <see langword="true" /> si <paramref name="value" /> est différent de zéro ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.String)">
      <summary>Convertit la représentation sous forme de chaîne spécifiée d'une valeur logique en son équivalent booléen.</summary>
      <param name="value">Chaîne qui contient la valeur de <see cref="F:System.Boolean.TrueString" /> ou de <see cref="F:System.Boolean.FalseString" />.</param>
      <returns>
        <see langword="true" /> si <paramref name="value" /> équivaut à <see cref="F:System.Boolean.TrueString" /> ou <see langword="false" /> si <paramref name="value" /> équivaut à <see cref="F:System.Boolean.FalseString" /> ou <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’est pas égal à <see cref="F:System.Boolean.TrueString" /> ou <see cref="F:System.Boolean.FalseString" />.</exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.String,System.IFormatProvider)">
      <summary>Convertit la représentation sous forme de chaîne spécifiée d'une valeur logique en son équivalent booléen à l'aide des informations de mise en forme spécifiées propres à la culture.</summary>
      <param name="value">Chaîne qui contient la valeur de <see cref="F:System.Boolean.TrueString" /> ou de <see cref="F:System.Boolean.FalseString" />.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture. Ce paramètre est ignoré.</param>
      <returns>
        <see langword="true" /> si <paramref name="value" /> équivaut à <see cref="F:System.Boolean.TrueString" /> ou <see langword="false" /> si <paramref name="value" /> équivaut à <see cref="F:System.Boolean.FalseString" /> ou <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’est pas égal à <see cref="F:System.Boolean.TrueString" /> ou <see cref="F:System.Boolean.FalseString" />.</exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.UInt16)">
      <summary>Convertit la valeur de l'entier non signé 16 bits spécifié en valeur booléenne équivalente.</summary>
      <param name="value">Entier non signé 16 bits à convertir.</param>
      <returns>
        <see langword="true" /> si <paramref name="value" /> est différent de zéro ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.UInt32)">
      <summary>Convertit la valeur de l'entier non signé 32 bits spécifié en valeur booléenne équivalente.</summary>
      <param name="value">Entier non signé 32 bits à convertir.</param>
      <returns>
        <see langword="true" /> si <paramref name="value" /> est différent de zéro ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.UInt64)">
      <summary>Convertit la valeur de l'entier non signé 64 bits spécifié en valeur booléenne équivalente.</summary>
      <param name="value">Entier non signé 64 bits à convertir.</param>
      <returns>
        <see langword="true" /> si <paramref name="value" /> est différent de zéro ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Convert.ToByte(System.Boolean)">
      <summary>Convertit la valeur booléenne spécifiée en entier non signé 8 bits équivalent.</summary>
      <param name="value">Valeur booléenne à convertir.</param>
      <returns>Chiffre 1, si <paramref name="value" /> est <see langword="true" /> ; sinon, 0.</returns>
    </member>
    <member name="M:System.Convert.ToByte(System.Byte)">
      <summary>Retourne l'entier non signé 8 bits spécifié. Aucune conversion n'est effectuée.</summary>
      <param name="value">Entier non signé 8 bits à retourner.</param>
      <returns>
        <paramref name="value" /> est retourné sans modification.</returns>
    </member>
    <member name="M:System.Convert.ToByte(System.Char)">
      <summary>Convertit la valeur du caractère Unicode spécifié en entier non signé 8 bits équivalent.</summary>
      <param name="value">Caractère Unicode à convertir.</param>
      <returns>Entier non signé 8 bits équivalent à <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> représente un nombre supérieur à <see cref="F:System.Byte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.DateTime)">
      <summary>L'appel de cette méthode lève toujours <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Valeur de date et heure à convertir.</param>
      <returns>Cette conversion n'est pas prise en charge. Aucune valeur n'est retournée.</returns>
      <exception cref="T:System.InvalidCastException">Cette conversion n'est pas prise en charge.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Decimal)">
      <summary>Convertit la valeur du nombre décimal spécifié en entier non signé 8 bits équivalent.</summary>
      <param name="value">Nombre à convertir.</param>
      <returns>
        <paramref name="value" />, arrondi à l’entier non signé 8 bits le plus proche. Si <paramref name="value" /> se trouve entre deux nombres entiers, le nombre pair est retourné (par exemple, 4,5 est converti en 4 et 5,5 en 6).</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est supérieur à <see cref="F:System.Byte.MaxValue" /> ou inférieur à <see cref="F:System.Byte.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Double)">
      <summary>Convertit la valeur du nombre à virgule flottante double précision spécifié en entier non signé 8 bits équivalent.</summary>
      <param name="value">Nombre à virgule flottante double précision à convertir.</param>
      <returns>
        <paramref name="value" />, arrondi à l’entier non signé 8 bits le plus proche. Si <paramref name="value" /> se trouve entre deux nombres entiers, le nombre pair est retourné (par exemple, 4,5 est converti en 4 et 5,5 en 6).</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est supérieur à <see cref="F:System.Byte.MaxValue" /> ou inférieur à <see cref="F:System.Byte.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Int16)">
      <summary>Convertit la valeur de l'entier signé 16 bits spécifié en entier non signé 8 bits équivalent.</summary>
      <param name="value">Entier signé 16 bits à convertir.</param>
      <returns>Entier non signé 8 bits équivalent à <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est inférieur à <see cref="F:System.Byte.MinValue" /> ou supérieur à <see cref="F:System.Byte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Int32)">
      <summary>Convertit la valeur de l'entier signé 32 bits spécifié en entier non signé 8 bits équivalent.</summary>
      <param name="value">Entier signé 32 bits à convertir.</param>
      <returns>Entier non signé 8 bits équivalent à <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est inférieur à <see cref="F:System.Byte.MinValue" /> ou supérieur à <see cref="F:System.Byte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Int64)">
      <summary>Convertit la valeur de l'entier signé 64 bits spécifié en entier non signé 8 bits équivalent.</summary>
      <param name="value">Entier signé 64 bits à convertir.</param>
      <returns>Entier non signé 8 bits équivalent à <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est inférieur à <see cref="F:System.Byte.MinValue" /> ou supérieur à <see cref="F:System.Byte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Object)">
      <summary>Convertit la valeur de l'objet spécifié en entier non signé 8 bits.</summary>
      <param name="value">Objet qui implémente l'interface <see cref="T:System.IConvertible" /> ou <see langword="null" />.</param>
      <returns>Entier non signé 8 bits équivalent à <paramref name="value" />, ou zéro si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’a pas le format de propriété pour une valeur <see cref="T:System.Byte" />.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> n’implémente pas <see cref="T:System.IConvertible" />.  

ou - 
La conversion de <paramref name="value" /> en type <see cref="T:System.Byte" /> n’est pas prise en charge.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> représente un nombre qui est inférieur à <see cref="F:System.Byte.MinValue" /> ou supérieur à <see cref="F:System.Byte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Object,System.IFormatProvider)">
      <summary>Convertit la valeur de l'objet spécifié en entier non signé 8 bits à l'aide des informations de mise en forme spécifiées propres à la culture.</summary>
      <param name="value">Objet qui implémente l'interface <see cref="T:System.IConvertible" />.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
      <returns>Entier non signé 8 bits équivalent à <paramref name="value" />, ou zéro si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’a pas le format de propriété pour une valeur <see cref="T:System.Byte" />.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> n’implémente pas <see cref="T:System.IConvertible" />.  
ou 
La conversion de <paramref name="value" /> en type <see cref="T:System.Byte" /> n’est pas prise en charge.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> représente un nombre qui est inférieur à <see cref="F:System.Byte.MinValue" /> ou supérieur à <see cref="F:System.Byte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.SByte)">
      <summary>Convertit la valeur de l'entier signé 8 bits spécifié en entier non signé 8 bits équivalent.</summary>
      <param name="value">Entier signé 8 bits à convertir.</param>
      <returns>Entier non signé 8 bits équivalent à <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est inférieur à <see cref="F:System.Byte.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Single)">
      <summary>Convertit la valeur du nombre à virgule flottante simple précision spécifié en entier non signé 8 bits équivalent.</summary>
      <param name="value">Nombre à virgule flottante simple précision.</param>
      <returns>
        <paramref name="value" />, arrondi à l’entier non signé 8 bits le plus proche. Si <paramref name="value" /> se trouve entre deux nombres entiers, le nombre pair est retourné (par exemple, 4,5 est converti en 4 et 5,5 en 6).</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est supérieur à <see cref="F:System.Byte.MaxValue" /> ou inférieur à <see cref="F:System.Byte.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.String)">
      <summary>Convertit la représentation sous forme de chaîne spécifiée d'un nombre en entier non signé 8 bits équivalent.</summary>
      <param name="value">Chaîne contenant le nombre à convertir.</param>
      <returns>Entier non signé 8 bits équivalent à <paramref name="value" />, ou zéro si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’est pas constitué d’un signe facultatif suivi d’une séquence de chiffres (0 à 9).</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> représente un nombre qui est inférieur à <see cref="F:System.Byte.MinValue" /> ou supérieur à <see cref="F:System.Byte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.String,System.IFormatProvider)">
      <summary>Convertit la représentation sous forme de chaîne spécifiée d'un nombre en entier non signé 8 bits équivalent à l'aide des informations de mise en forme spécifiées propres à la culture.</summary>
      <param name="value">Chaîne contenant le nombre à convertir.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
      <returns>Entier non signé 8 bits équivalent à <paramref name="value" />, ou zéro si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’est pas constitué d’un signe facultatif suivi d’une séquence de chiffres (0 à 9).</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> représente un nombre qui est inférieur à <see cref="F:System.Byte.MinValue" /> ou supérieur à <see cref="F:System.Byte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.String,System.Int32)">
      <summary>Convertit la représentation sous forme de chaîne d'un nombre dans une base spécifiée en entier non signé 8 bits équivalent.</summary>
      <param name="value">Chaîne contenant le nombre à convertir.</param>
      <param name="fromBase">Base du nombre figurant dans <paramref name="value" />, qui doit correspondre à 2, 8, 10 ou 16.</param>
      <returns>Entier non signé 8 bits équivalent au nombre dans <paramref name="value" />, ou 0 (zéro) si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> n’a pas la valeur 2, 8, 10 ou 16.  

ou - 
<paramref name="value" />, qui représente un nombre non signé autre qu’en base 10, est préfixé avec un signe négatif.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> est <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> contient un caractère qui n’est pas un chiffre valide dans la base spécifiée par <paramref name="fromBase" />. Le message d’exception indique qu’il n’y a pas de chiffres à convertir si le premier caractère dans <paramref name="value" /> n’est pas valide ; sinon, le message indique que <paramref name="value" /> contient des caractères de fin non valides.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />, qui représente un nombre non signé en base 10, est préfixé avec un signe négatif.  

ou - 
<paramref name="value" /> représente un nombre qui est inférieur à <see cref="F:System.Byte.MinValue" /> ou supérieur à <see cref="F:System.Byte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.UInt16)">
      <summary>Convertit la valeur de l'entier non signé 16 bits spécifié en entier non signé 8 bits équivalent.</summary>
      <param name="value">Entier non signé 16 bits à convertir.</param>
      <returns>Entier non signé 8 bits équivalent à <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est supérieur à <see cref="F:System.Byte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.UInt32)">
      <summary>Convertit la valeur de l'entier 32 bits non signé spécifié en un entier 8 bits non signé équivalent.</summary>
      <param name="value">Entier non signé 32 bits à convertir.</param>
      <returns>Entier non signé 8 bits équivalent à <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est supérieur à <see cref="F:System.Byte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.UInt64)">
      <summary>Convertit la valeur de l'entier 64 bits non signé spécifié en un entier 8 bits non signé équivalent.</summary>
      <param name="value">Entier non signé 64 bits à convertir.</param>
      <returns>Entier non signé 8 bits équivalent à <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est supérieur à <see cref="F:System.Byte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Boolean)">
      <summary>L'appel de cette méthode lève toujours <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Valeur booléenne à convertir.</param>
      <returns>Cette conversion n'est pas prise en charge. Aucune valeur n'est retournée.</returns>
      <exception cref="T:System.InvalidCastException">Cette conversion n'est pas prise en charge.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Byte)">
      <summary>Convertit la valeur de l'entier non signé 8 bits spécifié en son caractère Unicode équivalent.</summary>
      <param name="value">Entier non signé 8 bits à convertir.</param>
      <returns>Caractère Unicode équivalent à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToChar(System.Char)">
      <summary>Retourne la valeur du caractère Unicode spécifiée. Aucune conversion n'est effectuée.</summary>
      <param name="value">Caractère Unicode à retourner.</param>
      <returns>
        <paramref name="value" /> est retourné sans modification.</returns>
    </member>
    <member name="M:System.Convert.ToChar(System.DateTime)">
      <summary>L'appel de cette méthode lève toujours <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Valeur de date et heure à convertir.</param>
      <returns>Cette conversion n'est pas prise en charge. Aucune valeur n'est retournée.</returns>
      <exception cref="T:System.InvalidCastException">Cette conversion n'est pas prise en charge.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Decimal)">
      <summary>L'appel de cette méthode lève toujours <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Nombre décimal à convertir.</param>
      <returns>Cette conversion n'est pas prise en charge. Aucune valeur n'est retournée.</returns>
      <exception cref="T:System.InvalidCastException">Cette conversion n'est pas prise en charge.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Double)">
      <summary>L'appel de cette méthode lève toujours <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Nombre à virgule flottante double précision à convertir.</param>
      <returns>Cette conversion n'est pas prise en charge. Aucune valeur n'est retournée.</returns>
      <exception cref="T:System.InvalidCastException">Cette conversion n'est pas prise en charge.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Int16)">
      <summary>Convertit la valeur de l'entier signé 16 bits spécifié en son caractère Unicode équivalent.</summary>
      <param name="value">Entier signé 16 bits à convertir.</param>
      <returns>Caractère Unicode équivalent à <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est inférieur à <see cref="F:System.Char.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Int32)">
      <summary>Convertit la valeur de l'entier signé 32 bits spécifié en son caractère Unicode équivalent.</summary>
      <param name="value">Entier signé 32 bits à convertir.</param>
      <returns>Caractère Unicode équivalent à <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est inférieur à <see cref="F:System.Char.MinValue" /> ou supérieur à <see cref="F:System.Char.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Int64)">
      <summary>Convertit la valeur de l'entier signé 64 bits spécifié en son caractère Unicode équivalent.</summary>
      <param name="value">Entier signé 64 bits à convertir.</param>
      <returns>Caractère Unicode équivalent à <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est inférieur à <see cref="F:System.Char.MinValue" /> ou supérieur à <see cref="F:System.Char.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Object)">
      <summary>Convertit la valeur de l'objet spécifié en caractère Unicode.</summary>
      <param name="value">Objet qui implémente l'interface <see cref="T:System.IConvertible" />.</param>
      <returns>Caractère Unicode équivalent à value, ou <see cref="F:System.Char.MinValue" /> si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> est une chaîne null.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> n’implémente pas l’interface <see cref="T:System.IConvertible" />.  
ou 
La conversion de <paramref name="value" /> en un <see cref="T:System.Char" /> n’est pas prise en charge.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est inférieur à <see cref="F:System.Char.MinValue" /> ou supérieur à <see cref="F:System.Char.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Object,System.IFormatProvider)">
      <summary>Convertit la valeur de l'objet spécifié en son caractère Unicode équivalent à l'aide des informations de mise en forme spécifiées propres à la culture.</summary>
      <param name="value">Objet qui implémente l'interface <see cref="T:System.IConvertible" />.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
      <returns>Caractère Unicode équivalent à <paramref name="value" />, ou <see cref="F:System.Char.MinValue" /> si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> est une chaîne null.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> n’implémente pas l’interface <see cref="T:System.IConvertible" />.  

ou - 
La conversion de <paramref name="value" /> en un <see cref="T:System.Char" /> n’est pas prise en charge.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est inférieur à <see cref="F:System.Char.MinValue" /> ou supérieur à <see cref="F:System.Char.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.SByte)">
      <summary>Convertit la valeur de l'entier signé 8 bits spécifié en son caractère Unicode équivalent.</summary>
      <param name="value">Entier signé 8 bits à convertir.</param>
      <returns>Caractère Unicode équivalent à <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est inférieur à <see cref="F:System.Char.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Single)">
      <summary>L'appel de cette méthode lève toujours <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Nombre à virgule flottante simple précision à convertir.</param>
      <returns>Cette conversion n'est pas prise en charge. Aucune valeur n'est retournée.</returns>
      <exception cref="T:System.InvalidCastException">Cette conversion n'est pas prise en charge.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.String)">
      <summary>Convertit le premier caractère d'une chaîne spécifiée en caractère Unicode.</summary>
      <param name="value">Chaîne de longueur 1.</param>
      <returns>Caractère Unicode qui est équivalent au premier et unique caractère de <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">La longueur de <paramref name="value" /> n’est pas égale à 1.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.String,System.IFormatProvider)">
      <summary>Convertit le premier caractère d'une chaîne spécifiée en caractère Unicode à l'aide des informations de mise en forme spécifiées propres à la culture.</summary>
      <param name="value">Chaîne de longueur 1 ou <see langword="null" />.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture. Ce paramètre est ignoré.</param>
      <returns>Caractère Unicode qui est équivalent au premier et unique caractère de <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> est <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">La longueur de <paramref name="value" /> n’est pas égale à 1.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.UInt16)">
      <summary>Convertit la valeur de l'entier non signé 16 bits spécifié en son caractère Unicode équivalent.</summary>
      <param name="value">Entier non signé 16 bits à convertir.</param>
      <returns>Caractère Unicode équivalent à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToChar(System.UInt32)">
      <summary>Convertit la valeur de l'entier non signé 32 bits spécifié en son caractère Unicode équivalent.</summary>
      <param name="value">Entier non signé 32 bits à convertir.</param>
      <returns>Caractère Unicode équivalent à <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est supérieur à <see cref="F:System.Char.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.UInt64)">
      <summary>Convertit la valeur de l'entier non signé 64 bits spécifié en son caractère Unicode équivalent.</summary>
      <param name="value">Entier non signé 64 bits à convertir.</param>
      <returns>Caractère Unicode équivalent à <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est supérieur à <see cref="F:System.Char.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Boolean)">
      <summary>L'appel de cette méthode lève toujours <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Valeur booléenne à convertir.</param>
      <returns>Cette conversion n'est pas prise en charge. Aucune valeur n'est retournée.</returns>
      <exception cref="T:System.InvalidCastException">Cette conversion n'est pas prise en charge.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Byte)">
      <summary>L'appel de cette méthode lève toujours <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Entier non signé 8 bits à convertir.</param>
      <returns>Cette conversion n'est pas prise en charge. Aucune valeur n'est retournée.</returns>
      <exception cref="T:System.InvalidCastException">Cette conversion n'est pas prise en charge.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Char)">
      <summary>L'appel de cette méthode lève toujours <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Caractère Unicode à convertir.</param>
      <returns>Cette conversion n'est pas prise en charge. Aucune valeur n'est retournée.</returns>
      <exception cref="T:System.InvalidCastException">Cette conversion n'est pas prise en charge.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.DateTime)">
      <summary>Retourne l'objet <see cref="T:System.DateTime" /> spécifié. Aucune conversion n'est effectuée.</summary>
      <param name="value">Valeur de date et heure.</param>
      <returns>
        <paramref name="value" /> est retourné sans modification.</returns>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Decimal)">
      <summary>L'appel de cette méthode lève toujours <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Nombre à convertir.</param>
      <returns>Cette conversion n'est pas prise en charge. Aucune valeur n'est retournée.</returns>
      <exception cref="T:System.InvalidCastException">Cette conversion n'est pas prise en charge.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Double)">
      <summary>L'appel de cette méthode lève toujours <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Valeur à virgule flottante double précision à convertir.</param>
      <returns>Cette conversion n'est pas prise en charge. Aucune valeur n'est retournée.</returns>
      <exception cref="T:System.InvalidCastException">Cette conversion n'est pas prise en charge.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Int16)">
      <summary>L'appel de cette méthode lève toujours <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Entier signé 16 bits à convertir.</param>
      <returns>Cette conversion n'est pas prise en charge. Aucune valeur n'est retournée.</returns>
      <exception cref="T:System.InvalidCastException">Cette conversion n'est pas prise en charge.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Int32)">
      <summary>L'appel de cette méthode lève toujours <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Entier signé 32 bits à convertir.</param>
      <returns>Cette conversion n'est pas prise en charge. Aucune valeur n'est retournée.</returns>
      <exception cref="T:System.InvalidCastException">Cette conversion n'est pas prise en charge.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Int64)">
      <summary>L'appel de cette méthode lève toujours <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Entier signé 64 bits à convertir.</param>
      <returns>Cette conversion n'est pas prise en charge. Aucune valeur n'est retournée.</returns>
      <exception cref="T:System.InvalidCastException">Cette conversion n'est pas prise en charge.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Object)">
      <summary>Convertit la valeur de l'objet spécifié en objet <see cref="T:System.DateTime" />.</summary>
      <param name="value">Objet qui implémente l'interface <see cref="T:System.IConvertible" /> ou <see langword="null" />.</param>
      <returns>Équivalent de date et heure de la valeur de <paramref name="value" /> ou équivalent de date et heure de <see cref="F:System.DateTime.MinValue" /> si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’est pas une valeur date et heure valide.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> n’implémente pas l’interface <see cref="T:System.IConvertible" />.  

ou - 
La conversion n’est pas prise en charge.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)">
      <summary>Convertit la valeur de l'objet spécifié en objet <see cref="T:System.DateTime" /> à l'aide des informations de mise en forme spécifiées propres à la culture.</summary>
      <param name="value">Objet qui implémente l'interface <see cref="T:System.IConvertible" />.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
      <returns>Équivalent de date et heure de la valeur de <paramref name="value" /> ou équivalent de date et heure de <see cref="F:System.DateTime.MinValue" /> si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’est pas une valeur date et heure valide.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> n’implémente pas l’interface <see cref="T:System.IConvertible" />.  
ou 
La conversion n’est pas prise en charge.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.SByte)">
      <summary>L'appel de cette méthode lève toujours <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Entier signé 8 bits à convertir.</param>
      <returns>Cette conversion n'est pas prise en charge. Aucune valeur n'est retournée.</returns>
      <exception cref="T:System.InvalidCastException">Cette conversion n'est pas prise en charge.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Single)">
      <summary>L'appel de cette méthode lève toujours <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Valeur à virgule flottante simple précision à convertir.</param>
      <returns>Cette conversion n'est pas prise en charge. Aucune valeur n'est retournée.</returns>
      <exception cref="T:System.InvalidCastException">Cette conversion n'est pas prise en charge.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.String)">
      <summary>Convertit la représentation sous forme de chaîne spécifiée d'une valeur de date et heure en valeur de date et heure équivalente.</summary>
      <param name="value">Représentation sous forme de chaîne d'une valeur de date et heure.</param>
      <returns>Équivalent de date et heure de la valeur de <paramref name="value" /> ou équivalent de date et heure de <see cref="F:System.DateTime.MinValue" /> si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’est pas une chaîne de date et heure au format correct.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.String,System.IFormatProvider)">
      <summary>Convertit la représentation sous forme de chaîne spécifiée d'un nombre en valeur équivalente de date et heure à l'aide des informations de mise en forme spécifiées propres à la culture.</summary>
      <param name="value">Chaîne contenant une date et une heure à convertir.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
      <returns>Équivalent de date et heure de la valeur de <paramref name="value" /> ou équivalent de date et heure de <see cref="F:System.DateTime.MinValue" /> si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’est pas une chaîne de date et heure au format correct.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.UInt16)">
      <summary>L'appel de cette méthode lève toujours <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Entier non signé 16 bits à convertir.</param>
      <returns>Cette conversion n'est pas prise en charge. Aucune valeur n'est retournée.</returns>
      <exception cref="T:System.InvalidCastException">Cette conversion n'est pas prise en charge.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.UInt32)">
      <summary>L'appel de cette méthode lève toujours <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Entier non signé 32 bits à convertir.</param>
      <returns>Cette conversion n'est pas prise en charge. Aucune valeur n'est retournée.</returns>
      <exception cref="T:System.InvalidCastException">Cette conversion n'est pas prise en charge.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.UInt64)">
      <summary>L'appel de cette méthode lève toujours <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Entier non signé 64 bits à convertir.</param>
      <returns>Cette conversion n'est pas prise en charge. Aucune valeur n'est retournée.</returns>
      <exception cref="T:System.InvalidCastException">Cette conversion n'est pas prise en charge.</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Boolean)">
      <summary>Convertit la valeur booléenne spécifiée en nombre décimal équivalent.</summary>
      <param name="value">Valeur booléenne à convertir.</param>
      <returns>Chiffre 1, si <paramref name="value" /> est <see langword="true" /> ; sinon, 0.</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Byte)">
      <summary>Convertit la valeur de l'entier non signé 8 bits spécifié en nombre décimal équivalent.</summary>
      <param name="value">Entier non signé 8 bits à convertir.</param>
      <returns>Nombre décimal qui est équivalent à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Char)">
      <summary>L'appel de cette méthode lève toujours <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Caractère Unicode à convertir.</param>
      <returns>Cette conversion n'est pas prise en charge. Aucune valeur n'est retournée.</returns>
      <exception cref="T:System.InvalidCastException">Cette conversion n'est pas prise en charge.</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.DateTime)">
      <summary>L'appel de cette méthode lève toujours <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Valeur de date et heure à convertir.</param>
      <returns>Cette conversion n'est pas prise en charge. Aucune valeur n'est retournée.</returns>
      <exception cref="T:System.InvalidCastException">Cette conversion n'est pas prise en charge.</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Decimal)">
      <summary>Retourne le nombre décimal spécifié. Aucune conversion n'est effectuée.</summary>
      <param name="value">Nombre décimal.</param>
      <returns>
        <paramref name="value" /> est retourné sans modification.</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Double)">
      <summary>Convertit la valeur du nombre à virgule flottante double précision spécifié en nombre décimal équivalent.</summary>
      <param name="value">Nombre à virgule flottante double précision à convertir.</param>
      <returns>Nombre décimal équivalent à <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est supérieur à <see cref="F:System.Decimal.MaxValue" /> ou inférieur à <see cref="F:System.Decimal.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Int16)">
      <summary>Convertit la valeur de l'entier signé 16 bits spécifié en nombre décimal équivalent.</summary>
      <param name="value">Entier signé 16 bits à convertir.</param>
      <returns>Nombre décimal équivalent à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Int32)">
      <summary>Convertit la valeur de l'entier signé 32 bits spécifié en nombre décimal équivalent.</summary>
      <param name="value">Entier signé 32 bits à convertir.</param>
      <returns>Nombre décimal équivalent à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Int64)">
      <summary>Convertit la valeur de l'entier signé 64 bits spécifié en nombre décimal équivalent.</summary>
      <param name="value">Entier signé 64 bits à convertir.</param>
      <returns>Nombre décimal équivalent à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Object)">
      <summary>Convertit la valeur de l'objet spécifié en nombre décimal équivalent.</summary>
      <param name="value">Objet qui implémente l'interface <see cref="T:System.IConvertible" /> ou <see langword="null" />.</param>
      <returns>Nombre décimal qui est équivalent à <paramref name="value" />, ou 0 (zéro) si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’a pas un format approprié pour un type <see cref="T:System.Decimal" />.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> n’implémente pas l’interface <see cref="T:System.IConvertible" />.  

ou - 
La conversion n’est pas prise en charge.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> représente un nombre qui est inférieur à <see cref="F:System.Decimal.MinValue" /> ou supérieur à <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)">
      <summary>Convertit la valeur de l'objet spécifié en nombre décimal équivalent à l'aide des informations de mise en forme spécifiées propres à la culture.</summary>
      <param name="value">Objet qui implémente l'interface <see cref="T:System.IConvertible" />.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
      <returns>Nombre décimal qui est équivalent à <paramref name="value" />, ou 0 (zéro) si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’a pas un format approprié pour un type <see cref="T:System.Decimal" />.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> n’implémente pas l’interface <see cref="T:System.IConvertible" />.  

ou - 
La conversion n’est pas prise en charge.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> représente un nombre qui est inférieur à <see cref="F:System.Decimal.MinValue" /> ou supérieur à <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.SByte)">
      <summary>Convertit la valeur de l'entier signé 8 bits spécifié en nombre décimal équivalent.</summary>
      <param name="value">Entier signé 8 bits à convertir.</param>
      <returns>Nombre décimal équivalent à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Single)">
      <summary>Convertit la valeur du nombre à virgule flottante simple précision spécifié en nombre décimal équivalent.</summary>
      <param name="value">Nombre à virgule flottante simple précision à convertir.</param>
      <returns>Nombre décimal équivalent à <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est supérieur à <see cref="F:System.Decimal.MaxValue" /> ou inférieur à <see cref="F:System.Decimal.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.String)">
      <summary>Convertit la représentation sous forme de chaîne spécifiée d'un nombre en nombre décimal équivalent.</summary>
      <param name="value">Chaîne contenant un nombre à convertir.</param>
      <returns>Nombre décimal qui est équivalent au nombre dans <paramref name="value" />, ou 0 (zéro) si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’est pas un nombre exprimé dans un format valide.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> représente un nombre qui est inférieur à <see cref="F:System.Decimal.MinValue" /> ou supérieur à <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.String,System.IFormatProvider)">
      <summary>Convertit la représentation sous forme de chaîne spécifiée d'un nombre en nombre décimal équivalent à l'aide des informations de mise en forme spécifiées propres à la culture.</summary>
      <param name="value">Chaîne contenant un nombre à convertir.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
      <returns>Nombre décimal qui est équivalent au nombre dans <paramref name="value" />, ou 0 (zéro) si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’est pas un nombre exprimé dans un format valide.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> représente un nombre qui est inférieur à <see cref="F:System.Decimal.MinValue" /> ou supérieur à <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.UInt16)">
      <summary>Convertit la valeur de l'entier non signé 16 bits spécifié en nombre décimal équivalent.</summary>
      <param name="value">Entier non signé 16 bits à convertir.</param>
      <returns>Nombre décimal qui est équivalent à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.UInt32)">
      <summary>Convertit la valeur de l'entier non signé 32 bits spécifié en nombre décimal équivalent.</summary>
      <param name="value">Entier non signé 32 bits à convertir.</param>
      <returns>Nombre décimal équivalent à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.UInt64)">
      <summary>Convertit la valeur de l'entier non signé 64 bits spécifié en nombre décimal équivalent.</summary>
      <param name="value">Entier non signé 64 bits à convertir.</param>
      <returns>Nombre décimal équivalent à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Boolean)">
      <summary>Convertit la valeur booléenne spécifiée en nombre à virgule flottante double précision équivalent.</summary>
      <param name="value">Valeur booléenne à convertir.</param>
      <returns>Chiffre 1, si <paramref name="value" /> est <see langword="true" /> ; sinon, 0.</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Byte)">
      <summary>Convertit la valeur de l'entier non signé 8 bits spécifié en nombre à virgule flottante double précision équivalent.</summary>
      <param name="value">Entier non signé 8 bits à convertir.</param>
      <returns>Nombre à virgule flottante double précision équivalent à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Char)">
      <summary>L'appel de cette méthode lève toujours <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Caractère Unicode à convertir.</param>
      <returns>Cette conversion n'est pas prise en charge. Aucune valeur n'est retournée.</returns>
      <exception cref="T:System.InvalidCastException">Cette conversion n'est pas prise en charge.</exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.DateTime)">
      <summary>L'appel de cette méthode lève toujours <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Valeur de date et heure à convertir.</param>
      <returns>Cette conversion n'est pas prise en charge. Aucune valeur n'est retournée.</returns>
      <exception cref="T:System.InvalidCastException">Cette conversion n'est pas prise en charge.</exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.Decimal)">
      <summary>Convertit la valeur du nombre décimal spécifié en nombre à virgule flottante double précision équivalent.</summary>
      <param name="value">Nombre décimal à convertir.</param>
      <returns>Nombre à virgule flottante double précision équivalent à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Double)">
      <summary>Retourne le nombre à virgule flottante double précision spécifié. Aucune conversion n'est effectuée.</summary>
      <param name="value">Nombre à virgule flottante double précision à retourner.</param>
      <returns>
        <paramref name="value" /> est retourné sans modification.</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Int16)">
      <summary>Convertit la valeur de l'entier signé 16 bits spécifié en nombre à virgule flottante double précision équivalent.</summary>
      <param name="value">Entier signé 16 bits à convertir.</param>
      <returns>Nombre à virgule flottante double précision équivalent à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Int32)">
      <summary>Convertit la valeur de l'entier signé 32 bits spécifié en nombre à virgule flottante double précision équivalent.</summary>
      <param name="value">Entier signé 32 bits à convertir.</param>
      <returns>Nombre à virgule flottante double précision équivalent à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Int64)">
      <summary>Convertit la valeur de l'entier signé 64 bits spécifié en nombre à virgule flottante double précision équivalent.</summary>
      <param name="value">Entier signé 64 bits à convertir.</param>
      <returns>Nombre à virgule flottante double précision équivalent à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Object)">
      <summary>Convertit la valeur de l'objet spécifié en nombre à virgule flottante double précision.</summary>
      <param name="value">Objet qui implémente l'interface <see cref="T:System.IConvertible" /> ou <see langword="null" />.</param>
      <returns>Nombre à virgule flottante double précision qui est équivalent à <paramref name="value" />, ou zéro si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’a pas un format approprié pour un type <see cref="T:System.Double" />.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> n’implémente pas l’interface <see cref="T:System.IConvertible" />.  
ou 
La conversion n’est pas prise en charge.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> représente un nombre qui est inférieur à <see cref="F:System.Double.MinValue" /> ou supérieur à <see cref="F:System.Double.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)">
      <summary>Convertit la valeur de l'objet spécifié en nombre à virgule flottante double précision à l'aide des informations de mise en forme spécifiées propres à la culture.</summary>
      <param name="value">Objet qui implémente l'interface <see cref="T:System.IConvertible" />.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
      <returns>Nombre à virgule flottante double précision qui est équivalent à <paramref name="value" />, ou zéro si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’a pas un format approprié pour un type <see cref="T:System.Double" />.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> n’implémente pas l’interface <see cref="T:System.IConvertible" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> représente un nombre qui est inférieur à <see cref="F:System.Double.MinValue" /> ou supérieur à <see cref="F:System.Double.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.SByte)">
      <summary>Convertit la valeur de l'entier signé 8 bits spécifié en nombre à virgule flottante double précision équivalent.</summary>
      <param name="value">Entier signé 8 bits à convertir.</param>
      <returns>Entier signé 8 bits équivalent à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Single)">
      <summary>Convertit la valeur du nombre à virgule flottante simple précision spécifié en nombre à virgule flottante double précision équivalent.</summary>
      <param name="value">Nombre à virgule flottante simple précision.</param>
      <returns>Nombre à virgule flottante double précision équivalent à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.String)">
      <summary>Convertit la représentation sous forme de chaîne spécifiée d'un nombre en nombre à virgule flottante double précision équivalent.</summary>
      <param name="value">Chaîne contenant le nombre à convertir.</param>
      <returns>Nombre à virgule flottante double précision qui est équivalent au nombre dans <paramref name="value" />, ou 0 (zéro) si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’est pas un nombre exprimé dans un format valide.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> représente un nombre qui est inférieur à <see cref="F:System.Double.MinValue" /> ou supérieur à <see cref="F:System.Double.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.String,System.IFormatProvider)">
      <summary>Convertit la représentation sous forme de chaîne spécifiée d'un nombre en nombre à virgule flottante double précision équivalent à l'aide des informations de mise en forme spécifiées propres à la culture.</summary>
      <param name="value">Chaîne contenant le nombre à convertir.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
      <returns>Nombre à virgule flottante double précision qui est équivalent au nombre dans <paramref name="value" />, ou 0 (zéro) si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’est pas un nombre exprimé dans un format valide.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> représente un nombre qui est inférieur à <see cref="F:System.Double.MinValue" /> ou supérieur à <see cref="F:System.Double.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.UInt16)">
      <summary>Convertit la valeur de l'entier non signé 16 bits spécifié en nombre à virgule flottante double précision équivalent.</summary>
      <param name="value">Entier non signé 16 bits à convertir.</param>
      <returns>Nombre à virgule flottante double précision équivalent à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.UInt32)">
      <summary>Convertit la valeur de l'entier non signé 32 bits spécifié en nombre à virgule flottante double précision équivalent.</summary>
      <param name="value">Entier non signé 32 bits à convertir.</param>
      <returns>Nombre à virgule flottante double précision équivalent à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.UInt64)">
      <summary>Convertit la valeur de l'entier non signé 64 bits spécifié en nombre à virgule flottante double précision équivalent.</summary>
      <param name="value">Entier non signé 64 bits à convertir.</param>
      <returns>Nombre à virgule flottante double précision équivalent à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Boolean)">
      <summary>Convertit la valeur booléenne spécifiée en entier signé 16 bits équivalent.</summary>
      <param name="value">Valeur booléenne à convertir.</param>
      <returns>Chiffre 1, si <paramref name="value" /> est <see langword="true" /> ; sinon, 0.</returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Byte)">
      <summary>Convertit la valeur de l'entier non signé 8 bits spécifié en entier signé 16 bits équivalent.</summary>
      <param name="value">Entier non signé 8 bits à convertir.</param>
      <returns>Entier signé 16 bits équivalent à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Char)">
      <summary>Convertit la valeur du caractère Unicode spécifié en entier signé 16 bits équivalent.</summary>
      <param name="value">Caractère Unicode à convertir.</param>
      <returns>Entier signé 16 bits équivalent à <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est supérieur à <see cref="F:System.Int16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.DateTime)">
      <summary>L'appel de cette méthode lève toujours <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Valeur de date et heure à convertir.</param>
      <returns>Cette conversion n'est pas prise en charge. Aucune valeur n'est retournée.</returns>
      <exception cref="T:System.InvalidCastException">Cette conversion n'est pas prise en charge.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Decimal)">
      <summary>Convertit la valeur du nombre décimal spécifié en entier signé 16 bits équivalent.</summary>
      <param name="value">Nombre décimal à convertir.</param>
      <returns>
        <paramref name="value" />, arrondi à l’entier signé 16 bits le plus proche. Si <paramref name="value" /> se trouve entre deux nombres entiers, le nombre pair est retourné (par exemple, 4,5 est converti en 4 et 5,5 en 6).</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est supérieur à <see cref="F:System.Int16.MaxValue" /> ou inférieur à <see cref="F:System.Int16.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Double)">
      <summary>Convertit la valeur du nombre à virgule flottante double précision spécifié en entier signé 16 bits équivalent.</summary>
      <param name="value">Nombre à virgule flottante double précision à convertir.</param>
      <returns>
        <paramref name="value" />, arrondi à l’entier signé 16 bits le plus proche. Si <paramref name="value" /> se trouve entre deux nombres entiers, le nombre pair est retourné (par exemple, 4,5 est converti en 4 et 5,5 en 6).</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est supérieur à <see cref="F:System.Int16.MaxValue" /> ou inférieur à <see cref="F:System.Int16.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Int16)">
      <summary>Retourne l'entier signé 16 bits spécifié. Aucune conversion n'est effectuée.</summary>
      <param name="value">Entier signé 16 bits à retourner.</param>
      <returns>
        <paramref name="value" /> est retourné sans modification.</returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Int32)">
      <summary>Convertit la valeur de l'entier 32 bits signé spécifié en un entier 16 bits signé équivalent.</summary>
      <param name="value">Entier signé 32 bits à convertir.</param>
      <returns>Entier signé 16 bits équivalent à <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est supérieur à <see cref="F:System.Int16.MaxValue" /> ou inférieur à <see cref="F:System.Int16.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Int64)">
      <summary>Convertit la valeur de l'entier 64 bits signé spécifié en un entier 16 bits signé équivalent.</summary>
      <param name="value">Entier signé 64 bits à convertir.</param>
      <returns>Entier signé 16 bits équivalent à <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est supérieur à <see cref="F:System.Int16.MaxValue" /> ou inférieur à <see cref="F:System.Int16.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Object)">
      <summary>Convertit la valeur de l'objet spécifié en entier signé 16 bits.</summary>
      <param name="value">Objet qui implémente l'interface <see cref="T:System.IConvertible" /> ou <see langword="null" />.</param>
      <returns>Entier signé 16 bits équivalent à <paramref name="value" />, ou zéro si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’a pas un format approprié pour un type <see cref="T:System.Int16" />.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> n’implémente pas l’interface <see cref="T:System.IConvertible" />.  

ou - 
La conversion n’est pas prise en charge.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> représente un nombre qui est inférieur à <see cref="F:System.Int16.MinValue" /> ou supérieur à <see cref="F:System.Int16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Object,System.IFormatProvider)">
      <summary>Convertit la valeur de l'objet spécifié en entier signé 16 bits à l'aide des informations de mise en forme spécifiées propres à la culture.</summary>
      <param name="value">Objet qui implémente l'interface <see cref="T:System.IConvertible" />.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
      <returns>Entier signé 16 bits équivalent à <paramref name="value" />, ou zéro si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’a pas un format approprié pour un type <see cref="T:System.Int16" />.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> n’implémente pas <see cref="T:System.IConvertible" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> représente un nombre qui est inférieur à <see cref="F:System.Int16.MinValue" /> ou supérieur à <see cref="F:System.Int16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.SByte)">
      <summary>Convertit la valeur de l'entier signé 8 bits spécifié en entier signé 16 bits équivalent.</summary>
      <param name="value">Entier signé 8 bits à convertir.</param>
      <returns>Entier signé 8 bits équivalent à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Single)">
      <summary>Convertit la valeur du nombre à virgule flottante simple précision spécifié en entier signé 16 bits équivalent.</summary>
      <param name="value">Nombre à virgule flottante simple précision à convertir.</param>
      <returns>
        <paramref name="value" />, arrondi à l’entier signé 16 bits le plus proche. Si <paramref name="value" /> se trouve entre deux nombres entiers, le nombre pair est retourné (par exemple, 4,5 est converti en 4 et 5,5 en 6).</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est supérieur à <see cref="F:System.Int16.MaxValue" /> ou inférieur à <see cref="F:System.Int16.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.String)">
      <summary>Convertit la représentation sous forme de chaîne spécifiée d'un nombre en entier signé 16 bits équivalent.</summary>
      <param name="value">Chaîne contenant le nombre à convertir.</param>
      <returns>Entier signé 16 bits équivalent au nombre dans <paramref name="value" />, ou 0 (zéro) si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’est pas constitué d’un signe facultatif suivi d’une séquence de chiffres (0 à 9).</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> représente un nombre qui est inférieur à <see cref="F:System.Int16.MinValue" /> ou supérieur à <see cref="F:System.Int16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.String,System.IFormatProvider)">
      <summary>Convertit la représentation sous forme de chaîne spécifiée d'un nombre en entier signé 16 bits équivalent à l'aide des informations de mise en forme spécifiées propres à la culture.</summary>
      <param name="value">Chaîne contenant le nombre à convertir.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
      <returns>Entier signé 16 bits équivalent au nombre dans <paramref name="value" />, ou 0 (zéro) si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’est pas constitué d’un signe facultatif suivi d’une séquence de chiffres (0 à 9).</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> représente un nombre qui est inférieur à <see cref="F:System.Int16.MinValue" /> ou supérieur à <see cref="F:System.Int16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.String,System.Int32)">
      <summary>Convertit la représentation sous forme de chaîne d'un nombre dans une base spécifiée en entier signé 16 bits équivalent.</summary>
      <param name="value">Chaîne contenant le nombre à convertir.</param>
      <param name="fromBase">Base du nombre figurant dans <paramref name="value" />, qui doit correspondre à 2, 8, 10 ou 16.</param>
      <returns>Entier signé 16 bits équivalent au nombre dans <paramref name="value" />, ou 0 (zéro) si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> n’a pas la valeur 2, 8, 10 ou 16.  

ou - 
<paramref name="value" />, qui représente un nombre signé autre qu’en base 10, est préfixé avec un signe négatif.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> a la valeur <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> contient un caractère qui n’est pas un chiffre valide dans la base spécifiée par <paramref name="fromBase" />. Le message d’exception indique qu’il n’y a pas de chiffres à convertir si le premier caractère dans <paramref name="value" /> n’est pas valide ; sinon, le message indique que <paramref name="value" /> contient des caractères de fin non valides.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />, qui représente un nombre signé autre qu’en base 10, est préfixé avec un signe négatif.  

ou - 
<paramref name="value" /> représente un nombre qui est inférieur à <see cref="F:System.Int16.MinValue" /> ou supérieur à <see cref="F:System.Int16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.UInt16)">
      <summary>Convertit la valeur de l'entier non signé 16 bits spécifié en entier signé 16 bits équivalent.</summary>
      <param name="value">Entier non signé 16 bits à convertir.</param>
      <returns>Entier signé 16 bits équivalent à <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est supérieur à <see cref="F:System.Int16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.UInt32)">
      <summary>Convertit la valeur de l'entier non signé 32 bits spécifié en entier signé 16 bits équivalent.</summary>
      <param name="value">Entier non signé 32 bits à convertir.</param>
      <returns>Entier signé 16 bits équivalent à <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est supérieur à <see cref="F:System.Int16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.UInt64)">
      <summary>Convertit la valeur de l'entier non signé 64 bits spécifié en entier signé 16 bits équivalent.</summary>
      <param name="value">Entier non signé 64 bits à convertir.</param>
      <returns>Entier signé 16 bits équivalent à <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est supérieur à <see cref="F:System.Int16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Boolean)">
      <summary>Convertit la valeur booléenne spécifiée en entier signé 32 bits équivalent.</summary>
      <param name="value">Valeur booléenne à convertir.</param>
      <returns>Chiffre 1, si <paramref name="value" /> est <see langword="true" /> ; sinon, 0.</returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Byte)">
      <summary>Convertit la valeur de l'entier non signé 8 bits spécifié en entier signé 32 bits équivalent.</summary>
      <param name="value">Entier non signé 8 bits à convertir.</param>
      <returns>Entier signé 32 bits équivalent à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Char)">
      <summary>Convertit la valeur du caractère Unicode spécifié en entier signé 32 bits équivalent.</summary>
      <param name="value">Caractère Unicode à convertir.</param>
      <returns>Entier signé 32 bits équivalent à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.DateTime)">
      <summary>L'appel de cette méthode lève toujours <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Valeur de date et heure à convertir.</param>
      <returns>Cette conversion n'est pas prise en charge. Aucune valeur n'est retournée.</returns>
      <exception cref="T:System.InvalidCastException">Cette conversion n'est pas prise en charge.</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Decimal)">
      <summary>Convertit la valeur du nombre décimal spécifié en entier signé 32 bits équivalent.</summary>
      <param name="value">Nombre décimal à convertir.</param>
      <returns>
        <paramref name="value" />, arrondi à l’entier signé 32 bits le plus proche. Si <paramref name="value" /> se trouve entre deux nombres entiers, le nombre pair est retourné (par exemple, 4,5 est converti en 4 et 5,5 en 6).</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est supérieur à <see cref="F:System.Int32.MaxValue" /> ou inférieur à <see cref="F:System.Int32.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Double)">
      <summary>Convertit la valeur du nombre à virgule flottante double précision spécifié en entier signé 32 bits équivalent.</summary>
      <param name="value">Nombre à virgule flottante double précision à convertir.</param>
      <returns>
        <paramref name="value" />, arrondi à l’entier signé 32 bits le plus proche. Si <paramref name="value" /> se trouve entre deux nombres entiers, le nombre pair est retourné (par exemple, 4,5 est converti en 4 et 5,5 en 6).</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est supérieur à <see cref="F:System.Int32.MaxValue" /> ou inférieur à <see cref="F:System.Int32.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Int16)">
      <summary>Convertit la valeur de l'entier 16 bits signé spécifié en un entier 32 bits signé équivalent.</summary>
      <param name="value">Entier signé 16 bits à convertir.</param>
      <returns>Entier signé 32 bits équivalent à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Int32)">
      <summary>Retourne l'entier signé 32 bits spécifié. Aucune conversion n'est effectuée.</summary>
      <param name="value">Entier signé 32 bits à retourner.</param>
      <returns>
        <paramref name="value" /> est retourné sans modification.</returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Int64)">
      <summary>Convertit la valeur de l'entier 64 bits signé spécifié en un entier 32 bits signé équivalent.</summary>
      <param name="value">Entier signé 64 bits à convertir.</param>
      <returns>Entier signé 32 bits équivalent à <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est supérieur à <see cref="F:System.Int32.MaxValue" /> ou inférieur à <see cref="F:System.Int32.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Object)">
      <summary>Convertit la valeur de l'objet spécifié en entier signé 32 bits.</summary>
      <param name="value">Objet qui implémente l'interface <see cref="T:System.IConvertible" /> ou <see langword="null" />.</param>
      <returns>Entier signé 32 bits équivalent à <paramref name="value" />, ou zéro si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’a pas un format approprié.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> n’implémente pas l’interface <see cref="T:System.IConvertible" />.  

ou - 
La conversion n’est pas prise en charge.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> représente un nombre qui est inférieur à <see cref="F:System.Int32.MinValue" /> ou supérieur à <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Object,System.IFormatProvider)">
      <summary>Convertit la valeur de l'objet spécifié en entier signé 32 bits à l'aide des informations de mise en forme spécifiées propres à la culture.</summary>
      <param name="value">Objet qui implémente l'interface <see cref="T:System.IConvertible" />.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
      <returns>Entier signé 32 bits équivalent à <paramref name="value" />, ou zéro si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’a pas un format approprié.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> n’implémente pas <see cref="T:System.IConvertible" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> représente un nombre qui est inférieur à <see cref="F:System.Int32.MinValue" /> ou supérieur à <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.SByte)">
      <summary>Convertit la valeur de l'entier signé 8 bits spécifié en entier signé 32 bits équivalent.</summary>
      <param name="value">Entier signé 8 bits à convertir.</param>
      <returns>Entier signé 8 bits équivalent à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Single)">
      <summary>Convertit la valeur du nombre à virgule flottante simple précision spécifié en entier signé 32 bits équivalent.</summary>
      <param name="value">Nombre à virgule flottante simple précision à convertir.</param>
      <returns>
        <paramref name="value" />, arrondi à l’entier signé 32 bits le plus proche. Si <paramref name="value" /> se trouve entre deux nombres entiers, le nombre pair est retourné (par exemple, 4,5 est converti en 4 et 5,5 en 6).</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est supérieur à <see cref="F:System.Int32.MaxValue" /> ou inférieur à <see cref="F:System.Int32.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.String)">
      <summary>Convertit la représentation sous forme de chaîne spécifiée d'un nombre en entier signé 32 bits équivalent.</summary>
      <param name="value">Chaîne contenant le nombre à convertir.</param>
      <returns>Entier signé 32 bits équivalent au nombre dans <paramref name="value" />, ou 0 (zéro) si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’est pas constitué d’un signe facultatif suivi d’une séquence de chiffres (0 à 9).</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> représente un nombre qui est inférieur à <see cref="F:System.Int32.MinValue" /> ou supérieur à <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.String,System.IFormatProvider)">
      <summary>Convertit la représentation sous forme de chaîne spécifiée d'un nombre en entier signé 32 bits équivalent à l'aide des informations de mise en forme spécifiées propres à la culture.</summary>
      <param name="value">Chaîne contenant le nombre à convertir.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
      <returns>Entier signé 32 bits équivalent au nombre dans <paramref name="value" />, ou 0 (zéro) si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’est pas constitué d’un signe facultatif suivi d’une séquence de chiffres (0 à 9).</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> représente un nombre qui est inférieur à <see cref="F:System.Int32.MinValue" /> ou supérieur à <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.String,System.Int32)">
      <summary>Convertit la représentation sous forme de chaîne d'un nombre dans une base spécifiée en entier signé 32 bits équivalent.</summary>
      <param name="value">Chaîne contenant le nombre à convertir.</param>
      <param name="fromBase">Base du nombre figurant dans <paramref name="value" />, qui doit correspondre à 2, 8, 10 ou 16.</param>
      <returns>Entier signé 32 bits équivalent au nombre dans <paramref name="value" />, ou 0 (zéro) si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> n’a pas la valeur 2, 8, 10 ou 16.  

ou - 
<paramref name="value" />, qui représente un nombre signé autre qu’en base 10, est préfixé avec un signe négatif.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> est <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> contient un caractère qui n’est pas un chiffre valide dans la base spécifiée par <paramref name="fromBase" />. Le message d’exception indique qu’il n’y a pas de chiffres à convertir si le premier caractère dans <paramref name="value" /> n’est pas valide ; sinon, le message indique que <paramref name="value" /> contient des caractères de fin non valides.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />, qui représente un nombre signé autre qu’en base 10, est préfixé avec un signe négatif.  
ou 
 <paramref name="value" /> représente un nombre qui est inférieur à <see cref="F:System.Int32.MinValue" /> ou supérieur à <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.UInt16)">
      <summary>Convertit la valeur de l'entier non signé 16 bits spécifié en entier signé 32 bits équivalent.</summary>
      <param name="value">Entier non signé 16 bits à convertir.</param>
      <returns>Entier signé 32 bits équivalent à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.UInt32)">
      <summary>Convertit la valeur de l'entier non signé 32 bits spécifié en entier signé 32 bits équivalent.</summary>
      <param name="value">Entier non signé 32 bits à convertir.</param>
      <returns>Entier signé 32 bits équivalent à <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est supérieur à <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.UInt64)">
      <summary>Convertit la valeur de l'entier non signé 64 bits spécifié en entier signé 32 bits équivalent.</summary>
      <param name="value">Entier non signé 64 bits à convertir.</param>
      <returns>Entier signé 32 bits équivalent à <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est supérieur à <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Boolean)">
      <summary>Convertit la valeur booléenne spécifiée en entier signé 64 bits équivalent.</summary>
      <param name="value">Valeur booléenne à convertir.</param>
      <returns>Chiffre 1, si <paramref name="value" /> est <see langword="true" /> ; sinon, 0.</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Byte)">
      <summary>Convertit la valeur de l'entier non signé 8 bits spécifié en entier signé 64 bits équivalent.</summary>
      <param name="value">Entier non signé 8 bits à convertir.</param>
      <returns>Entier signé 64 bits équivalent à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Char)">
      <summary>Convertit la valeur du caractère Unicode spécifié en entier signé 64 bits équivalent.</summary>
      <param name="value">Caractère Unicode à convertir.</param>
      <returns>Entier signé 64 bits équivalent à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.DateTime)">
      <summary>L'appel de cette méthode lève toujours <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Valeur de date et heure à convertir.</param>
      <returns>Cette conversion n'est pas prise en charge. Aucune valeur n'est retournée.</returns>
      <exception cref="T:System.InvalidCastException">Cette conversion n'est pas prise en charge.</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Decimal)">
      <summary>Convertit la valeur du nombre décimal spécifié en entier signé 64 bits équivalent.</summary>
      <param name="value">Nombre décimal à convertir.</param>
      <returns>
        <paramref name="value" />, arrondi à l’entier signé 64 bits le plus proche. Si <paramref name="value" /> se trouve entre deux nombres entiers, le nombre pair est retourné (par exemple, 4,5 est converti en 4 et 5,5 en 6).</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est supérieur à <see cref="F:System.Int64.MaxValue" /> ou inférieur à <see cref="F:System.Int64.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Double)">
      <summary>Convertit la valeur du nombre à virgule flottante double précision spécifié en entier signé 64 bits équivalent.</summary>
      <param name="value">Nombre à virgule flottante double précision à convertir.</param>
      <returns>
        <paramref name="value" />, arrondi à l’entier signé 64 bits le plus proche. Si <paramref name="value" /> se trouve entre deux nombres entiers, le nombre pair est retourné (par exemple, 4,5 est converti en 4 et 5,5 en 6).</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est supérieur à <see cref="F:System.Int64.MaxValue" /> ou inférieur à <see cref="F:System.Int64.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Int16)">
      <summary>Convertit la valeur de l'entier 16 bits signé spécifié en un entier 64 bits signé équivalent.</summary>
      <param name="value">Entier signé 16 bits à convertir.</param>
      <returns>Entier signé 64 bits équivalent à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Int32)">
      <summary>Convertit la valeur de l'entier 32 bits signé spécifié en un entier 64 bits signé équivalent.</summary>
      <param name="value">Entier signé 32 bits à convertir.</param>
      <returns>Entier signé 64 bits équivalent à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Int64)">
      <summary>Retourne l'entier signé 64 bits spécifié. Aucune conversion n'est effectuée.</summary>
      <param name="value">Entier signé 64 bits.</param>
      <returns>
        <paramref name="value" /> est retourné sans modification.</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Object)">
      <summary>Convertit la valeur de l'objet spécifié en entier signé 64 bits.</summary>
      <param name="value">Objet qui implémente l'interface <see cref="T:System.IConvertible" /> ou <see langword="null" />.</param>
      <returns>Entier signé 64 bits équivalent à <paramref name="value" />, ou zéro si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’a pas un format approprié.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> n’implémente pas l’interface <see cref="T:System.IConvertible" />.  
ou 
La conversion n’est pas prise en charge.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> représente un nombre qui est inférieur à <see cref="F:System.Int64.MinValue" /> ou supérieur à <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
      <summary>Convertit la valeur de l'objet spécifié en entier signé 64 bits à l'aide des informations de mise en forme spécifiées propres à la culture.</summary>
      <param name="value">Objet qui implémente l'interface <see cref="T:System.IConvertible" />.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
      <returns>Entier signé 64 bits équivalent à <paramref name="value" />, ou zéro si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’a pas un format approprié.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> n’implémente pas l’interface <see cref="T:System.IConvertible" />.  

ou - 
La conversion n’est pas prise en charge.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> représente un nombre qui est inférieur à <see cref="F:System.Int64.MinValue" /> ou supérieur à <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.SByte)">
      <summary>Convertit la valeur de l'entier signé 8 bits spécifié en entier signé 64 bits équivalent.</summary>
      <param name="value">Entier signé 8 bits à convertir.</param>
      <returns>Entier signé 64 bits équivalent à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Single)">
      <summary>Convertit la valeur du nombre à virgule flottante simple précision spécifié en entier signé 64 bits équivalent.</summary>
      <param name="value">Nombre à virgule flottante simple précision à convertir.</param>
      <returns>
        <paramref name="value" />, arrondi à l’entier signé 64 bits le plus proche. Si <paramref name="value" /> se trouve entre deux nombres entiers, le nombre pair est retourné (par exemple, 4,5 est converti en 4 et 5,5 en 6).</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est supérieur à <see cref="F:System.Int64.MaxValue" /> ou inférieur à <see cref="F:System.Int64.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.String)">
      <summary>Convertit la représentation sous forme de chaîne spécifiée d'un nombre en entier signé 64 bits équivalent.</summary>
      <param name="value">Chaîne contenant un nombre à convertir.</param>
      <returns>Entier signé 64 bits équivalent au nombre dans <paramref name="value" />, ou 0 (zéro) si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’est pas constitué d’un signe facultatif suivi d’une séquence de chiffres (0 à 9).</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> représente un nombre qui est inférieur à <see cref="F:System.Int64.MinValue" /> ou supérieur à <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.String,System.IFormatProvider)">
      <summary>Convertit la représentation sous forme de chaîne spécifiée d'un nombre en entier signé 64 bits équivalent à l'aide des informations de mise en forme spécifiées propres à la culture.</summary>
      <param name="value">Chaîne contenant le nombre à convertir.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
      <returns>Entier signé 64 bits équivalent au nombre dans <paramref name="value" />, ou 0 (zéro) si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’est pas constitué d’un signe facultatif suivi d’une séquence de chiffres (0 à 9).</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> représente un nombre qui est inférieur à <see cref="F:System.Int64.MinValue" /> ou supérieur à <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.String,System.Int32)">
      <summary>Convertit la représentation sous forme de chaîne d'un nombre dans une base spécifiée en entier signé 64 bits équivalent.</summary>
      <param name="value">Chaîne contenant le nombre à convertir.</param>
      <param name="fromBase">Base du nombre figurant dans <paramref name="value" />, qui doit correspondre à 2, 8, 10 ou 16.</param>
      <returns>Entier signé 64 bits équivalent au nombre dans <paramref name="value" />, ou 0 (zéro) si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> n’a pas la valeur 2, 8, 10 ou 16.  
ou 
 <paramref name="value" />, qui représente un nombre signé autre qu’en base 10, est préfixé avec un signe négatif.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> a la valeur <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> contient un caractère qui n’est pas un chiffre valide dans la base spécifiée par <paramref name="fromBase" />. Le message d’exception indique qu’il n’y a pas de chiffres à convertir si le premier caractère dans <paramref name="value" /> n’est pas valide ; sinon, le message indique que <paramref name="value" /> contient des caractères de fin non valides.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />, qui représente un nombre signé autre qu’en base 10, est préfixé avec un signe négatif.  

ou - 
<paramref name="value" /> représente un nombre qui est inférieur à <see cref="F:System.Int64.MinValue" /> ou supérieur à <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.UInt16)">
      <summary>Convertit la valeur de l'entier non signé 16 bits spécifié en entier signé 64 bits équivalent.</summary>
      <param name="value">Entier non signé 16 bits à convertir.</param>
      <returns>Entier signé 64 bits équivalent à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.UInt32)">
      <summary>Convertit la valeur de l'entier non signé 32 bits spécifié en entier signé 64 bits équivalent.</summary>
      <param name="value">Entier non signé 32 bits à convertir.</param>
      <returns>Entier signé 64 bits équivalent à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.UInt64)">
      <summary>Convertit la valeur de l'entier non signé 64 bits spécifié en entier signé 64 bits équivalent.</summary>
      <param name="value">Entier non signé 64 bits à convertir.</param>
      <returns>Entier signé 64 bits équivalent à <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est supérieur à <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Boolean)">
      <summary>Convertit la valeur booléenne spécifiée en entier signé 8 bits équivalent.</summary>
      <param name="value">Valeur booléenne à convertir.</param>
      <returns>Chiffre 1, si <paramref name="value" /> est <see langword="true" /> ; sinon, 0.</returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.Byte)">
      <summary>Convertit la valeur de l'entier non signé 8 bits spécifié en entier signé 8 bits équivalent.</summary>
      <param name="value">Entier non signé 8 bits à convertir.</param>
      <returns>Entier signé 8 bits équivalent à <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est supérieur à <see cref="F:System.SByte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Char)">
      <summary>Convertit la valeur du caractère Unicode spécifié en entier signé 8 bits équivalent.</summary>
      <param name="value">Caractère Unicode à convertir.</param>
      <returns>Entier signé 8 bits équivalent à <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est supérieur à <see cref="F:System.SByte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.DateTime)">
      <summary>L'appel de cette méthode lève toujours <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Valeur de date et heure à convertir.</param>
      <returns>Cette conversion n'est pas prise en charge. Aucune valeur n'est retournée.</returns>
      <exception cref="T:System.InvalidCastException">Cette conversion n'est pas prise en charge.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Decimal)">
      <summary>Convertit la valeur du nombre décimal spécifié en entier signé 8 bits équivalent.</summary>
      <param name="value">Nombre décimal à convertir.</param>
      <returns>
        <paramref name="value" />, arrondi à l’entier signé 8 bits le plus proche. Si <paramref name="value" /> se trouve entre deux nombres entiers, le nombre pair est retourné (par exemple, 4,5 est converti en 4 et 5,5 en 6).</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est supérieur à <see cref="F:System.SByte.MaxValue" /> ou inférieur à <see cref="F:System.SByte.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Double)">
      <summary>Convertit la valeur du nombre à virgule flottante double précision spécifié en entier signé 8 bits équivalent.</summary>
      <param name="value">Nombre à virgule flottante double précision à convertir.</param>
      <returns>
        <paramref name="value" />, arrondi à l’entier signé 8 bits le plus proche. Si <paramref name="value" /> se trouve entre deux nombres entiers, le nombre pair est retourné (par exemple, 4,5 est converti en 4 et 5,5 en 6).</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est supérieur à <see cref="F:System.SByte.MaxValue" /> ou inférieur à <see cref="F:System.SByte.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Int16)">
      <summary>Convertit la valeur de l'entier signé 16 bits spécifié en entier signé 8 bits équivalent.</summary>
      <param name="value">Entier signé 16 bits à convertir.</param>
      <returns>Entier signé 8 bits équivalent à <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est supérieur à <see cref="F:System.SByte.MaxValue" /> ou inférieur à <see cref="F:System.SByte.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Int32)">
      <summary>Convertit la valeur de l'entier signé 32 bits spécifié en entier signé 8 bits équivalent.</summary>
      <param name="value">Entier signé 32 bits à convertir.</param>
      <returns>Entier signé 8 bits équivalent à <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est supérieur à <see cref="F:System.SByte.MaxValue" /> ou inférieur à <see cref="F:System.SByte.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Int64)">
      <summary>Convertit la valeur de l'entier 64 bits signé spécifié en un entier 8 bits signé équivalent.</summary>
      <param name="value">Entier signé 64 bits à convertir.</param>
      <returns>Entier signé 8 bits équivalent à <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est supérieur à <see cref="F:System.SByte.MaxValue" /> ou inférieur à <see cref="F:System.SByte.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Object)">
      <summary>Convertit la valeur de l'objet spécifié en entier signé 8 bits.</summary>
      <param name="value">Objet qui implémente l'interface <see cref="T:System.IConvertible" /> ou <see langword="null" />.</param>
      <returns>Entier signé 8 bits équivalent à <paramref name="value" />, ou zéro si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’a pas un format approprié.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> n’implémente pas l’interface <see cref="T:System.IConvertible" />.  
ou 
La conversion n’est pas prise en charge.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> représente un nombre qui est inférieur à <see cref="F:System.SByte.MinValue" /> ou supérieur à <see cref="F:System.SByte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
      <summary>Convertit la valeur de l'objet spécifié en entier signé 8 bits à l'aide des informations de mise en forme spécifiées propres à la culture.</summary>
      <param name="value">Objet qui implémente l'interface <see cref="T:System.IConvertible" />.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
      <returns>Entier signé 8 bits équivalent à <paramref name="value" />, ou zéro si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’a pas un format approprié.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> n’implémente pas l’interface <see cref="T:System.IConvertible" />.  

ou - 
La conversion n’est pas prise en charge.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> représente un nombre qui est inférieur à <see cref="F:System.SByte.MinValue" /> ou supérieur à <see cref="F:System.SByte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.SByte)">
      <summary>Retourne l'entier signé 8 bits spécifié. Aucune conversion n'est effectuée.</summary>
      <param name="value">Entier signé 8 bits à retourner.</param>
      <returns>
        <paramref name="value" /> est retourné sans modification.</returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.Single)">
      <summary>Convertit la valeur du nombre à virgule flottante simple précision spécifié en entier signé 8 bits équivalent.</summary>
      <param name="value">Nombre à virgule flottante simple précision à convertir.</param>
      <returns>
        <paramref name="value" />, arrondi à l’entier signé 8 bits le plus proche. Si <paramref name="value" /> se trouve entre deux nombres entiers, le nombre pair est retourné (par exemple, 4,5 est converti en 4 et 5,5 en 6).</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est supérieur à <see cref="F:System.SByte.MaxValue" /> ou inférieur à <see cref="F:System.SByte.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.String)">
      <summary>Convertit la représentation sous forme de chaîne spécifiée d'un nombre en entier signé 8 bits équivalent.</summary>
      <param name="value">Chaîne contenant le nombre à convertir.</param>
      <returns>Entier signé 8 bits équivalent au nombre dans <paramref name="value" />, ou 0 (zéro) si value est <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’est pas constitué d’un signe facultatif suivi d’une séquence de chiffres (0 à 9).</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> représente un nombre qui est inférieur à <see cref="F:System.SByte.MinValue" /> ou supérieur à <see cref="F:System.SByte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.String,System.IFormatProvider)">
      <summary>Convertit la représentation sous forme de chaîne spécifiée d'un nombre en entier signé 8 bits équivalent à l'aide des informations de mise en forme spécifiées propres à la culture.</summary>
      <param name="value">Chaîne contenant le nombre à convertir.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
      <returns>Entier signé 8 bits équivalent à <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’est pas constitué d’un signe facultatif suivi d’une séquence de chiffres (0 à 9).</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> représente un nombre qui est inférieur à <see cref="F:System.SByte.MinValue" /> ou supérieur à <see cref="F:System.SByte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.String,System.Int32)">
      <summary>Convertit la représentation sous forme de chaîne d'un nombre dans une base spécifiée en entier signé 8 bits équivalent.</summary>
      <param name="value">Chaîne contenant le nombre à convertir.</param>
      <param name="fromBase">Base du nombre figurant dans <paramref name="value" />, qui doit correspondre à 2, 8, 10 ou 16.</param>
      <returns>Entier signé 8 bits équivalent au nombre dans <paramref name="value" />, ou 0 (zéro) si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> n’a pas la valeur 2, 8, 10 ou 16.  

ou - 
<paramref name="value" />, qui représente un nombre signé autre qu’en base 10, est préfixé avec un signe négatif.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> est <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> contient un caractère qui n’est pas un chiffre valide dans la base spécifiée par <paramref name="fromBase" />. Le message d’exception indique qu’il n’y a pas de chiffres à convertir si le premier caractère dans <paramref name="value" /> n’est pas valide ; sinon, le message indique que <paramref name="value" /> contient des caractères de fin non valides.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />, qui représente un nombre signé autre qu’en base 10, est préfixé avec un signe négatif.  

ou - 
<paramref name="value" /> représente un nombre qui est inférieur à <see cref="F:System.SByte.MinValue" /> ou supérieur à <see cref="F:System.SByte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.UInt16)">
      <summary>Convertit la valeur de l'entier non signé 16 bits spécifié en entier signé 8 bits équivalent.</summary>
      <param name="value">Entier non signé 16 bits à convertir.</param>
      <returns>Entier signé 8 bits équivalent à <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est supérieur à <see cref="F:System.SByte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.UInt32)">
      <summary>Convertit la valeur de l'entier non signé 32 bits spécifié en entier signé 8 bits équivalent.</summary>
      <param name="value">Entier non signé 32 bits à convertir.</param>
      <returns>Entier signé 8 bits équivalent à <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est supérieur à <see cref="F:System.SByte.MaxValue" /> ou inférieur à <see cref="F:System.SByte.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.UInt64)">
      <summary>Convertit la valeur de l'entier non signé 64 bits spécifié en entier signé 8 bits équivalent.</summary>
      <param name="value">Entier non signé 64 bits à convertir.</param>
      <returns>Entier signé 8 bits équivalent à <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est supérieur à <see cref="F:System.SByte.MaxValue" /> ou inférieur à <see cref="F:System.SByte.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.Boolean)">
      <summary>Convertit la valeur booléenne spécifiée en nombre à virgule flottante simple précision équivalent.</summary>
      <param name="value">Valeur booléenne à convertir.</param>
      <returns>Chiffre 1, si <paramref name="value" /> est <see langword="true" /> ; sinon, 0.</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Byte)">
      <summary>Convertit la valeur de l'entier non signé 8 bits spécifié en nombre à virgule flottante simple précision équivalent.</summary>
      <param name="value">Entier non signé 8 bits à convertir.</param>
      <returns>Nombre à virgule flottante simple précision équivalent à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Char)">
      <summary>L'appel de cette méthode lève toujours <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Caractère Unicode à convertir.</param>
      <returns>Cette conversion n'est pas prise en charge. Aucune valeur n'est retournée.</returns>
      <exception cref="T:System.InvalidCastException">Cette conversion n'est pas prise en charge.</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.DateTime)">
      <summary>L'appel de cette méthode lève toujours <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Valeur de date et heure à convertir.</param>
      <returns>Cette conversion n'est pas prise en charge. Aucune valeur n'est retournée.</returns>
      <exception cref="T:System.InvalidCastException">Cette conversion n'est pas prise en charge.</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.Decimal)">
      <summary>Convertit la valeur du nombre décimal spécifié en nombre à virgule flottante simple précision équivalent.</summary>
      <param name="value">Nombre décimal à convertir.</param>
      <returns>Nombre à virgule flottante simple précision équivalent à <paramref name="value" />.  
 <paramref name="value" /> est arrondi selon le principe d’arrondi au plus proche. Par exemple, lorsqu'elle est arrondie à deux décimales, la valeur 2,345 devient 2,34 et la valeur 2,355 devient 2,36.</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Double)">
      <summary>Convertit la valeur du nombre à virgule flottante double précision spécifié en nombre à virgule flottante simple précision équivalent.</summary>
      <param name="value">Nombre à virgule flottante double précision à convertir.</param>
      <returns>Nombre à virgule flottante simple précision équivalent à <paramref name="value" />.  
 <paramref name="value" /> est arrondi selon le principe d’arrondi au plus proche. Par exemple, lorsqu'elle est arrondie à deux décimales, la valeur 2,345 devient 2,34 et la valeur 2,355 devient 2,36.</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Int16)">
      <summary>Convertit la valeur de l'entier signé 16 bits spécifié en nombre à virgule flottante simple précision équivalent.</summary>
      <param name="value">Entier signé 16 bits à convertir.</param>
      <returns>Nombre à virgule flottante simple précision équivalent à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Int32)">
      <summary>Convertit la valeur de l'entier signé 32 bits spécifié en nombre à virgule flottante simple précision équivalent.</summary>
      <param name="value">Entier signé 32 bits à convertir.</param>
      <returns>Nombre à virgule flottante simple précision équivalent à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Int64)">
      <summary>Convertit la valeur de l'entier signé 64 bits spécifié en nombre à virgule flottante simple précision équivalent.</summary>
      <param name="value">Entier signé 64 bits à convertir.</param>
      <returns>Nombre à virgule flottante simple précision équivalent à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Object)">
      <summary>Convertit la valeur de l'objet spécifié en nombre à virgule flottante simple précision.</summary>
      <param name="value">Objet qui implémente l'interface <see cref="T:System.IConvertible" /> ou <see langword="null" />.</param>
      <returns>Nombre à virgule flottante simple précision qui est équivalent à <paramref name="value" />, ou zéro si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’a pas un format approprié.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> n’implémente pas l’interface <see cref="T:System.IConvertible" />.  
ou 
La conversion n’est pas prise en charge.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> représente un nombre qui est inférieur à <see cref="F:System.Single.MinValue" /> ou supérieur à <see cref="F:System.Single.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.Object,System.IFormatProvider)">
      <summary>Convertit la valeur de l'objet spécifié en nombre à virgule flottante simple précision à l'aide des informations de mise en forme spécifiées propres à la culture.</summary>
      <param name="value">Objet qui implémente l'interface <see cref="T:System.IConvertible" />.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
      <returns>Nombre à virgule flottante simple précision qui est équivalent à <paramref name="value" />, ou zéro si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’a pas un format approprié.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> n’implémente pas <see cref="T:System.IConvertible" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> représente un nombre qui est inférieur à <see cref="F:System.Single.MinValue" /> ou supérieur à <see cref="F:System.Single.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.SByte)">
      <summary>Convertit la valeur de l'entier signé 8 bits spécifié en nombre à virgule flottante simple précision équivalent.</summary>
      <param name="value">Entier signé 8 bits à convertir.</param>
      <returns>Entier signé 8 bits équivalent à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Single)">
      <summary>Retourne le nombre à virgule flottante simple précision spécifié. Aucune conversion n'est effectuée.</summary>
      <param name="value">Nombre à virgule flottante simple précision à retourner.</param>
      <returns>
        <paramref name="value" /> est retourné sans modification.</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.String)">
      <summary>Convertit la représentation sous forme de chaîne spécifiée d'un nombre en nombre à virgule flottante simple précision équivalent.</summary>
      <param name="value">Chaîne contenant le nombre à convertir.</param>
      <returns>Nombre à virgule flottante simple précision qui est équivalent au nombre dans <paramref name="value" />, ou 0 (zéro) si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’est pas un nombre exprimé dans un format valide.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> représente un nombre qui est inférieur à <see cref="F:System.Single.MinValue" /> ou supérieur à <see cref="F:System.Single.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.String,System.IFormatProvider)">
      <summary>Convertit la représentation sous forme de chaîne spécifiée d'un nombre en nombre à virgule flottante simple précision équivalent à l'aide des informations de mise en forme spécifiées propres à la culture.</summary>
      <param name="value">Chaîne contenant le nombre à convertir.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
      <returns>Nombre à virgule flottante simple précision qui est équivalent au nombre dans <paramref name="value" />, ou 0 (zéro) si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’est pas un nombre exprimé dans un format valide.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> représente un nombre qui est inférieur à <see cref="F:System.Single.MinValue" /> ou supérieur à <see cref="F:System.Single.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.UInt16)">
      <summary>Convertit la valeur de l'entier non signé 16 bits spécifié en nombre à virgule flottante simple précision équivalent.</summary>
      <param name="value">Entier non signé 16 bits à convertir.</param>
      <returns>Nombre à virgule flottante simple précision équivalent à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.UInt32)">
      <summary>Convertit la valeur de l'entier non signé 32 bits spécifié en nombre à virgule flottante simple précision équivalent.</summary>
      <param name="value">Entier non signé 32 bits à convertir.</param>
      <returns>Nombre à virgule flottante simple précision équivalent à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.UInt64)">
      <summary>Convertit la valeur de l'entier non signé 64 bits spécifié en nombre à virgule flottante simple précision équivalent.</summary>
      <param name="value">Entier non signé 64 bits à convertir.</param>
      <returns>Nombre à virgule flottante simple précision équivalent à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Boolean)">
      <summary>Convertit la valeur booléenne spécifiée en sa représentation sous forme de chaîne équivalente.</summary>
      <param name="value">Valeur booléenne à convertir.</param>
      <returns>Représentation sous forme de chaîne de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Boolean,System.IFormatProvider)">
      <summary>Convertit la valeur booléenne spécifiée en sa représentation sous forme de chaîne équivalente.</summary>
      <param name="value">Valeur booléenne à convertir.</param>
      <param name="provider">Instance d'un objet. Ce paramètre est ignoré.</param>
      <returns>Représentation sous forme de chaîne de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Byte)">
      <summary>Convertit la valeur de l'entier non signé 8 bits spécifié en sa représentation sous forme de chaîne équivalente.</summary>
      <param name="value">Entier non signé 8 bits à convertir.</param>
      <returns>Représentation sous forme de chaîne de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Byte,System.IFormatProvider)">
      <summary>Convertit la valeur de l'entier non signé 8 bits spécifié en sa représentation sous forme de chaîne équivalente à l'aide des informations de mise en forme spécifiées propres à la culture.</summary>
      <param name="value">Entier non signé 8 bits à convertir.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
      <returns>Représentation sous forme de chaîne de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Byte,System.Int32)">
      <summary>Convertit la valeur d'un entier non signé 8 bits en sa représentation sous forme de chaîne équivalente dans une base spécifiée.</summary>
      <param name="value">Entier non signé 8 bits à convertir.</param>
      <param name="toBase">Base de la valeur de retour, qui doit être 2, 8, 10 ou 16.</param>
      <returns>Représentation sous forme de chaîne de <paramref name="value" /> en base <paramref name="toBase" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="toBase" /> n’a pas la valeur 2, 8, 10 ou 16.</exception>
    </member>
    <member name="M:System.Convert.ToString(System.Char)">
      <summary>Convertit la valeur du caractère Unicode spécifié en sa représentation sous forme de chaîne équivalente.</summary>
      <param name="value">Caractère Unicode à convertir.</param>
      <returns>Représentation sous forme de chaîne de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Char,System.IFormatProvider)">
      <summary>Convertit la valeur du caractère Unicode spécifié en sa représentation sous forme de chaîne équivalente à l'aide des informations de mise en forme spécifiées propres à la culture.</summary>
      <param name="value">Caractère Unicode à convertir.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture. Ce paramètre est ignoré.</param>
      <returns>Représentation sous forme de chaîne de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.DateTime)">
      <summary>Convertit la valeur du <see cref="T:System.DateTime" /> spécifié en sa représentation sous forme de chaîne équivalente.</summary>
      <param name="value">Valeur de date et heure à convertir.</param>
      <returns>Représentation sous forme de chaîne de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.DateTime,System.IFormatProvider)">
      <summary>Convertit la valeur du <see cref="T:System.DateTime" /> spécifié en sa représentation sous forme de chaîne équivalente à l'aide des informations de mise en forme spécifiées propres à la culture.</summary>
      <param name="value">Valeur de date et heure à convertir.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
      <returns>Représentation sous forme de chaîne de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Decimal)">
      <summary>Convertit la valeur du nombre décimal spécifié en sa représentation sous forme de chaîne équivalente.</summary>
      <param name="value">Nombre décimal à convertir.</param>
      <returns>Représentation sous forme de chaîne de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Decimal,System.IFormatProvider)">
      <summary>Convertit la valeur du nombre décimal spécifié en sa représentation sous forme de chaîne équivalente à l'aide des informations de mise en forme spécifiées propres à la culture.</summary>
      <param name="value">Nombre décimal à convertir.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
      <returns>Représentation sous forme de chaîne de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Double)">
      <summary>Convertit la valeur du nombre à virgule flottante double précision spécifié en sa représentation sous forme de chaîne équivalente.</summary>
      <param name="value">Nombre à virgule flottante double précision à convertir.</param>
      <returns>Représentation sous forme de chaîne de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Double,System.IFormatProvider)">
      <summary>Convertit la valeur du nombre à virgule flottante double précision spécifié en sa représentation sous forme de chaîne équivalente.</summary>
      <param name="value">Nombre à virgule flottante double précision à convertir.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
      <returns>Représentation sous forme de chaîne de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int16)">
      <summary>Convertit la valeur de l'entier signé 16 bits spécifié en sa représentation sous forme de chaîne équivalente.</summary>
      <param name="value">Entier signé 16 bits à convertir.</param>
      <returns>Représentation sous forme de chaîne de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int16,System.IFormatProvider)">
      <summary>Convertit la valeur de l'entier signé 16 bits spécifié en sa représentation sous forme de chaîne équivalente à l'aide des informations de mise en forme spécifiées propres à la culture.</summary>
      <param name="value">Entier signé 16 bits à convertir.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
      <returns>Représentation sous forme de chaîne de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int16,System.Int32)">
      <summary>Convertit la valeur d'un entier signé 16 bits en sa représentation sous forme de chaîne équivalente dans une base spécifiée.</summary>
      <param name="value">Entier signé 16 bits à convertir.</param>
      <param name="toBase">Base de la valeur de retour, qui doit être 2, 8, 10 ou 16.</param>
      <returns>Représentation sous forme de chaîne de <paramref name="value" /> en base <paramref name="toBase" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="toBase" /> n’a pas la valeur 2, 8, 10 ou 16.</exception>
    </member>
    <member name="M:System.Convert.ToString(System.Int32)">
      <summary>Convertit la valeur de l'entier signé 32 bits spécifié en sa représentation sous forme de chaîne équivalente.</summary>
      <param name="value">Entier signé 32 bits à convertir.</param>
      <returns>Représentation sous forme de chaîne de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int32,System.IFormatProvider)">
      <summary>Convertit la valeur de l'entier signé 32 bits spécifié en sa représentation sous forme de chaîne équivalente à l'aide des informations de mise en forme spécifiées propres à la culture.</summary>
      <param name="value">Entier signé 32 bits à convertir.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
      <returns>Représentation sous forme de chaîne de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int32,System.Int32)">
      <summary>Convertit la valeur d'un entier signé 32 bits en sa représentation sous forme de chaîne équivalente dans une base spécifiée.</summary>
      <param name="value">Entier signé 32 bits à convertir.</param>
      <param name="toBase">Base de la valeur de retour, qui doit être 2, 8, 10 ou 16.</param>
      <returns>Représentation sous forme de chaîne de <paramref name="value" /> en base <paramref name="toBase" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="toBase" /> n’a pas la valeur 2, 8, 10 ou 16.</exception>
    </member>
    <member name="M:System.Convert.ToString(System.Int64)">
      <summary>Convertit la valeur de l'entier signé 64 bits spécifié en sa représentation sous forme de chaîne équivalente.</summary>
      <param name="value">Entier signé 64 bits à convertir.</param>
      <returns>Représentation sous forme de chaîne de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int64,System.IFormatProvider)">
      <summary>Convertit la valeur de l'entier signé 64 bits spécifié en sa représentation sous forme de chaîne équivalente à l'aide des informations de mise en forme spécifiées propres à la culture.</summary>
      <param name="value">Entier signé 64 bits à convertir.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
      <returns>Représentation sous forme de chaîne de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int64,System.Int32)">
      <summary>Convertit la valeur d'un entier signé 64 bits en sa représentation sous forme de chaîne équivalente dans une base spécifiée.</summary>
      <param name="value">Entier signé 64 bits à convertir.</param>
      <param name="toBase">Base de la valeur de retour, qui doit être 2, 8, 10 ou 16.</param>
      <returns>Représentation sous forme de chaîne de <paramref name="value" /> en base <paramref name="toBase" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="toBase" /> n’a pas la valeur 2, 8, 10 ou 16.</exception>
    </member>
    <member name="M:System.Convert.ToString(System.Object)">
      <summary>Convertit la valeur de l'objet spécifié en sa représentation sous forme de chaîne équivalente.</summary>
      <param name="value">Objet qui fournit la valeur à convertir, ou <see langword="null" />.</param>
      <returns>Représentation sous forme de chaîne de <paramref name="value" /> ou <see cref="F:System.String.Empty" /> si <paramref name="value" /> est <see langword="null" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
      <summary>Convertit la valeur de l'objet spécifié en représentation sous forme de chaîne équivalente à l'aide des informations de mise en forme spécifiées propres à la culture.</summary>
      <param name="value">Objet qui fournit la valeur à convertir, ou <see langword="null" />.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
      <returns>La représentation sous forme de chaîne de <paramref name="value" />, ou <see cref="F:System.String.Empty" /> si la valeur <paramref name="value" /> est un objet dont la valeur est <see langword="null" />. Si <paramref name="value" /> est <see langword="null" />, la méthode retourne <see langword="null" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.SByte)">
      <summary>Convertit la valeur de l'entier signé 8 bits spécifié en sa représentation sous forme de chaîne équivalente.</summary>
      <param name="value">Entier signé 8 bits à convertir.</param>
      <returns>Représentation sous forme de chaîne de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.SByte,System.IFormatProvider)">
      <summary>Convertit la valeur de l'entier signé 8 bits spécifié en sa représentation sous forme de chaîne équivalente à l'aide des informations de mise en forme spécifiées propres à la culture.</summary>
      <param name="value">Entier signé 8 bits à convertir.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
      <returns>Représentation sous forme de chaîne de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Single)">
      <summary>Convertit la valeur du nombre à virgule flottante simple précision spécifié en sa représentation sous forme de chaîne équivalente.</summary>
      <param name="value">Nombre à virgule flottante simple précision à convertir.</param>
      <returns>Représentation sous forme de chaîne de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Single,System.IFormatProvider)">
      <summary>Convertit la valeur du nombre à virgule flottante simple précision spécifié en sa représentation sous forme de chaîne équivalente à l'aide des informations de mise en forme spécifiées propres à la culture.</summary>
      <param name="value">Nombre à virgule flottante simple précision à convertir.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
      <returns>Représentation sous forme de chaîne de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.String)">
      <summary>Retourne l'instance de chaîne spécifiée. Aucune conversion n'est effectuée.</summary>
      <param name="value">Chaîne à retourner.</param>
      <returns>
        <paramref name="value" /> est retourné sans modification.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.String,System.IFormatProvider)">
      <summary>Retourne l'instance de chaîne spécifiée. Aucune conversion n'est effectuée.</summary>
      <param name="value">Chaîne à retourner.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture. Ce paramètre est ignoré.</param>
      <returns>
        <paramref name="value" /> est retourné sans modification.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt16)">
      <summary>Convertit la valeur de l'entier non signé 16 bits spécifié en sa représentation sous forme de chaîne équivalente.</summary>
      <param name="value">Entier non signé 16 bits à convertir.</param>
      <returns>Représentation sous forme de chaîne de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt16,System.IFormatProvider)">
      <summary>Convertit la valeur de l'entier non signé 16 bits spécifié en sa représentation sous forme de chaîne équivalente à l'aide des informations de mise en forme spécifiées propres à la culture.</summary>
      <param name="value">Entier non signé 16 bits à convertir.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
      <returns>Représentation sous forme de chaîne de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt32)">
      <summary>Convertit la valeur de l'entier non signé 32 bits spécifié en sa représentation sous forme de chaîne équivalente.</summary>
      <param name="value">Entier non signé 32 bits à convertir.</param>
      <returns>Représentation sous forme de chaîne de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt32,System.IFormatProvider)">
      <summary>Convertit la valeur de l'entier non signé 32 bits spécifié en sa représentation sous forme de chaîne équivalente à l'aide des informations de mise en forme spécifiées propres à la culture.</summary>
      <param name="value">Entier non signé 32 bits à convertir.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
      <returns>Représentation sous forme de chaîne de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt64)">
      <summary>Convertit la valeur de l'entier non signé 64 bits spécifié en sa représentation sous forme de chaîne équivalente.</summary>
      <param name="value">Entier non signé 64 bits à convertir.</param>
      <returns>Représentation sous forme de chaîne de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt64,System.IFormatProvider)">
      <summary>Convertit la valeur de l'entier non signé 64 bits spécifié en sa représentation sous forme de chaîne équivalente à l'aide des informations de mise en forme spécifiées propres à la culture.</summary>
      <param name="value">Entier non signé 64 bits à convertir.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
      <returns>Représentation sous forme de chaîne de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Boolean)">
      <summary>Convertit la valeur booléenne spécifiée en entier non signé 16 bits équivalent.</summary>
      <param name="value">Valeur booléenne à convertir.</param>
      <returns>Chiffre 1, si <paramref name="value" /> est <see langword="true" /> ; sinon, 0.</returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Byte)">
      <summary>Convertit la valeur de l'entier non signé 8 bits spécifié en l'entier non signé 16 bits équivalent.</summary>
      <param name="value">Entier non signé 8 bits à convertir.</param>
      <returns>Entier non signé 16 bits équivalent à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Char)">
      <summary>Convertit la valeur du caractère Unicode spécifié en entier non signé 16 bits équivalent.</summary>
      <param name="value">Caractère Unicode à convertir.</param>
      <returns>Entier non signé 16 bits équivalent à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.DateTime)">
      <summary>L'appel de cette méthode lève toujours <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Valeur de date et heure à convertir.</param>
      <returns>Cette conversion n'est pas prise en charge. Aucune valeur n'est retournée.</returns>
      <exception cref="T:System.InvalidCastException">Cette conversion n'est pas prise en charge.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Decimal)">
      <summary>Convertit la valeur du nombre décimal spécifié en entier non signé 16 bits équivalent.</summary>
      <param name="value">Nombre décimal à convertir.</param>
      <returns>
        <paramref name="value" />, arrondi à l’entier non signé 16 bits le plus proche. Si <paramref name="value" /> se trouve entre deux nombres entiers, le nombre pair est retourné (par exemple, 4,5 est converti en 4 et 5,5 en 6).</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est inférieur à 0 ou supérieur à <see cref="F:System.UInt16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Double)">
      <summary>Convertit la valeur du nombre à virgule flottante double précision spécifié en entier non signé 16 bits équivalent.</summary>
      <param name="value">Nombre à virgule flottante double précision à convertir.</param>
      <returns>
        <paramref name="value" />, arrondi à l’entier non signé 16 bits le plus proche. Si <paramref name="value" /> se trouve entre deux nombres entiers, le nombre pair est retourné (par exemple, 4,5 est converti en 4 et 5,5 en 6).</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est inférieur à 0 ou supérieur à <see cref="F:System.UInt16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Int16)">
      <summary>Convertit la valeur de l'entier signé 16 bits spécifié en entier non signé 16 bits équivalent.</summary>
      <param name="value">Entier signé 16 bits à convertir.</param>
      <returns>Entier non signé 16 bits équivalent à <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est inférieur à zéro.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Int32)">
      <summary>Convertit la valeur de l'entier signé 32 bits spécifié en entier non signé 16 bits équivalent.</summary>
      <param name="value">Entier signé 32 bits à convertir.</param>
      <returns>Entier non signé 16 bits équivalent à <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est inférieur à 0 ou supérieur à <see cref="F:System.UInt16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Int64)">
      <summary>Convertit la valeur de l'entier signé 64 bits spécifié en entier non signé 16 bits équivalent.</summary>
      <param name="value">Entier signé 64 bits à convertir.</param>
      <returns>Entier non signé 16 bits équivalent à <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est inférieur à 0 ou supérieur à <see cref="F:System.UInt16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Object)">
      <summary>Convertit la valeur de l'objet spécifié en entier non signé 16 bits.</summary>
      <param name="value">Objet qui implémente l'interface <see cref="T:System.IConvertible" /> ou <see langword="null" />.</param>
      <returns>Entier non signé 16 bits équivalent à <paramref name="value" />, ou zéro si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’a pas un format approprié.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> n’implémente pas l’interface <see cref="T:System.IConvertible" />.  

ou - 
La conversion n’est pas prise en charge.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> représente un nombre qui est inférieur à <see cref="F:System.UInt16.MinValue" /> ou supérieur à <see cref="F:System.UInt16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)">
      <summary>Convertit la valeur de l'objet spécifié en entier non signé 16 bits à l'aide des informations de mise en forme spécifiées propres à la culture.</summary>
      <param name="value">Objet qui implémente l'interface <see cref="T:System.IConvertible" />.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
      <returns>Entier non signé 16 bits équivalent à <paramref name="value" />, ou zéro si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’a pas un format approprié.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> n’implémente pas l’interface <see cref="T:System.IConvertible" />.  

ou - 
La conversion n’est pas prise en charge.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> représente un nombre qui est inférieur à <see cref="F:System.UInt16.MinValue" /> ou supérieur à <see cref="F:System.UInt16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.SByte)">
      <summary>Convertit la valeur de l'entier signé 8 bits spécifié en entier non signé 16 bits équivalent.</summary>
      <param name="value">Entier signé 8 bits à convertir.</param>
      <returns>Entier non signé 16 bits équivalent à <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est inférieur à zéro.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Single)">
      <summary>Convertit la valeur du nombre à virgule flottante simple précision spécifié en entier non signé 16 bits équivalent.</summary>
      <param name="value">Nombre à virgule flottante simple précision à convertir.</param>
      <returns>
        <paramref name="value" />, arrondi à l’entier non signé 16 bits le plus proche. Si <paramref name="value" /> se trouve entre deux nombres entiers, le nombre pair est retourné (par exemple, 4,5 est converti en 4 et 5,5 en 6).</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est inférieur à 0 ou supérieur à <see cref="F:System.UInt16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.String)">
      <summary>Convertit la représentation sous forme de chaîne spécifiée d'un nombre en entier non signé 16 bits équivalent.</summary>
      <param name="value">Chaîne contenant le nombre à convertir.</param>
      <returns>Entier non signé 16 bits équivalent au nombre dans <paramref name="value" />, ou 0 (zéro) si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’est pas constitué d’un signe facultatif suivi d’une séquence de chiffres (0 à 9).</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> représente un nombre qui est inférieur à <see cref="F:System.UInt16.MinValue" /> ou supérieur à <see cref="F:System.UInt16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.String,System.IFormatProvider)">
      <summary>Convertit la représentation sous forme de chaîne spécifiée d'un nombre en entier non signé 16 bits équivalent à l'aide des informations de mise en forme spécifiées propres à la culture.</summary>
      <param name="value">Chaîne contenant le nombre à convertir.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
      <returns>Entier non signé 16 bits équivalent au nombre dans <paramref name="value" />, ou 0 (zéro) si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’est pas constitué d’un signe facultatif suivi d’une séquence de chiffres (0 à 9).</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> représente un nombre qui est inférieur à <see cref="F:System.UInt16.MinValue" /> ou supérieur à <see cref="F:System.UInt16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.String,System.Int32)">
      <summary>Convertit la représentation sous forme de chaîne d'un nombre dans une base spécifiée en entier non signé 16 bits équivalent.</summary>
      <param name="value">Chaîne contenant le nombre à convertir.</param>
      <param name="fromBase">Base du nombre figurant dans <paramref name="value" />, qui doit correspondre à 2, 8, 10 ou 16.</param>
      <returns>Entier non signé 16 bits équivalent au nombre dans <paramref name="value" />, ou 0 (zéro) si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> n’a pas la valeur 2, 8, 10 ou 16.  

ou - 
<paramref name="value" />, qui représente un nombre non signé autre qu’en base 10, est préfixé avec un signe négatif.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> a la valeur <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> contient un caractère qui n’est pas un chiffre valide dans la base spécifiée par <paramref name="fromBase" />. Le message d’exception indique qu’il n’y a pas de chiffres à convertir si le premier caractère dans <paramref name="value" /> n’est pas valide ; sinon, le message indique que <paramref name="value" /> contient des caractères de fin non valides.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />, qui représente un nombre non signé autre qu’en base 10, est préfixé avec un signe négatif.  
ou 
 <paramref name="value" /> représente un nombre qui est inférieur à <see cref="F:System.UInt16.MinValue" /> ou supérieur à <see cref="F:System.UInt16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.UInt16)">
      <summary>Retourne l'entier non signé 16 bits spécifié. Aucune conversion n'est effectuée.</summary>
      <param name="value">Entier non signé 16 bits à retourner.</param>
      <returns>
        <paramref name="value" /> est retourné sans modification.</returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.UInt32)">
      <summary>Convertit la valeur de l'entier non signé 32 bits spécifié en entier non signé 16 bits équivalent.</summary>
      <param name="value">Entier non signé 32 bits à convertir.</param>
      <returns>Entier non signé 16 bits équivalent à <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est supérieur à <see cref="F:System.UInt16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.UInt64)">
      <summary>Convertit la valeur de l'entier non signé 64 bits spécifié en entier non signé 16 bits équivalent.</summary>
      <param name="value">Entier non signé 64 bits à convertir.</param>
      <returns>Entier non signé 16 bits équivalent à <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est supérieur à <see cref="F:System.UInt16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Boolean)">
      <summary>Convertit la valeur booléenne spécifiée en entier non signé 32 bits équivalent.</summary>
      <param name="value">Valeur booléenne à convertir.</param>
      <returns>Chiffre 1, si <paramref name="value" /> est <see langword="true" /> ; sinon, 0.</returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Byte)">
      <summary>Convertit la valeur de l'entier non signé 8 bits spécifié en l'entier non signé 32 bits équivalent.</summary>
      <param name="value">Entier non signé 8 bits à convertir.</param>
      <returns>Entier non signé 32 bits équivalent à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Char)">
      <summary>Convertit la valeur du caractère Unicode spécifié en entier non signé 32 bits équivalent.</summary>
      <param name="value">Caractère Unicode à convertir.</param>
      <returns>Entier non signé 32 bits équivalent à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.DateTime)">
      <summary>L'appel de cette méthode lève toujours <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Valeur de date et heure à convertir.</param>
      <returns>Cette conversion n'est pas prise en charge. Aucune valeur n'est retournée.</returns>
      <exception cref="T:System.InvalidCastException">Cette conversion n'est pas prise en charge.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Decimal)">
      <summary>Convertit la valeur du nombre décimal spécifié en entier non signé 32 bits équivalent.</summary>
      <param name="value">Nombre décimal à convertir.</param>
      <returns>
        <paramref name="value" />, arrondi à l’entier non signé 32 bits le plus proche. Si <paramref name="value" /> se trouve entre deux nombres entiers, le nombre pair est retourné (par exemple, 4,5 est converti en 4 et 5,5 en 6).</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est inférieur à 0 ou supérieur à <see cref="F:System.UInt32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Double)">
      <summary>Convertit la valeur du nombre à virgule flottante double précision spécifié en entier non signé 32 bits équivalent.</summary>
      <param name="value">Nombre à virgule flottante double précision à convertir.</param>
      <returns>
        <paramref name="value" />, arrondi à l’entier non signé 32 bits le plus proche. Si <paramref name="value" /> se trouve entre deux nombres entiers, le nombre pair est retourné (par exemple, 4,5 est converti en 4 et 5,5 en 6).</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est inférieur à 0 ou supérieur à <see cref="F:System.UInt32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Int16)">
      <summary>Convertit la valeur de l'entier signé 16 bits spécifié en entier non signé 32 bits équivalent.</summary>
      <param name="value">Entier signé 16 bits à convertir.</param>
      <returns>Entier non signé 32 bits équivalent à <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est inférieur à zéro.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Int32)">
      <summary>Convertit la valeur de l'entier signé 32 bits spécifié en entier non signé 32 bits équivalent.</summary>
      <param name="value">Entier signé 32 bits à convertir.</param>
      <returns>Entier non signé 32 bits équivalent à <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est inférieur à zéro.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Int64)">
      <summary>Convertit la valeur de l'entier signé 64 bits spécifié en entier non signé 32 bits équivalent.</summary>
      <param name="value">Entier signé 64 bits à convertir.</param>
      <returns>Entier non signé 32 bits équivalent à <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est inférieur à 0 ou supérieur à <see cref="F:System.UInt32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Object)">
      <summary>Convertit la valeur de l'objet spécifié en entier non signé 32 bits.</summary>
      <param name="value">Objet qui implémente l'interface <see cref="T:System.IConvertible" /> ou <see langword="null" />.</param>
      <returns>Entier non signé 32 bits équivalent à <paramref name="value" />, ou 0 (zéro) si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’a pas un format approprié.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> n’implémente pas l’interface <see cref="T:System.IConvertible" />.  

ou - 
La conversion n’est pas prise en charge.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> représente un nombre qui est inférieur à <see cref="F:System.UInt32.MinValue" /> ou supérieur à <see cref="F:System.UInt32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)">
      <summary>Convertit la valeur de l'objet spécifié en entier non signé 32 bits à l'aide des informations de mise en forme spécifiées propres à la culture.</summary>
      <param name="value">Objet qui implémente l'interface <see cref="T:System.IConvertible" />.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
      <returns>Entier non signé 32 bits équivalent à <paramref name="value" />, ou zéro si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’a pas un format approprié.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> n’implémente pas l’interface <see cref="T:System.IConvertible" />.  
ou 
La conversion n’est pas prise en charge.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> représente un nombre qui est inférieur à <see cref="F:System.UInt32.MinValue" /> ou supérieur à <see cref="F:System.UInt32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.SByte)">
      <summary>Convertit la valeur de l'entier signé 8 bits spécifié en entier non signé 32 bits équivalent.</summary>
      <param name="value">Entier signé 8 bits à convertir.</param>
      <returns>Entier non signé 32 bits équivalent à <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est inférieur à zéro.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Single)">
      <summary>Convertit la valeur du nombre à virgule flottante simple précision spécifié en entier non signé 32 bits équivalent.</summary>
      <param name="value">Nombre à virgule flottante simple précision à convertir.</param>
      <returns>
        <paramref name="value" />, arrondi à l’entier non signé 32 bits le plus proche. Si <paramref name="value" /> se trouve entre deux nombres entiers, le nombre pair est retourné (par exemple, 4,5 est converti en 4 et 5,5 en 6).</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est inférieur à 0 ou supérieur à <see cref="F:System.UInt32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.String)">
      <summary>Convertit la représentation sous forme de chaîne spécifiée d'un nombre en entier non signé 32 bits équivalent.</summary>
      <param name="value">Chaîne contenant le nombre à convertir.</param>
      <returns>Entier non signé 32 bits équivalent au nombre dans <paramref name="value" />, ou 0 (zéro) si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’est pas constitué d’un signe facultatif suivi d’une séquence de chiffres (0 à 9).</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> représente un nombre qui est inférieur à <see cref="F:System.UInt32.MinValue" /> ou supérieur à <see cref="F:System.UInt32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.String,System.IFormatProvider)">
      <summary>Convertit la représentation sous forme de chaîne spécifiée d'un nombre en entier non signé 32 bits équivalent à l'aide des informations de mise en forme spécifiées propres à la culture.</summary>
      <param name="value">Chaîne contenant le nombre à convertir.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
      <returns>Entier non signé 32 bits équivalent au nombre dans <paramref name="value" />, ou 0 (zéro) si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’est pas constitué d’un signe facultatif suivi d’une séquence de chiffres (0 à 9).</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> représente un nombre qui est inférieur à <see cref="F:System.UInt32.MinValue" /> ou supérieur à <see cref="F:System.UInt32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.String,System.Int32)">
      <summary>Convertit la représentation sous forme de chaîne d'un nombre dans une base spécifiée en entier non signé 32 bits équivalent.</summary>
      <param name="value">Chaîne contenant le nombre à convertir.</param>
      <param name="fromBase">Base du nombre figurant dans <paramref name="value" />, qui doit correspondre à 2, 8, 10 ou 16.</param>
      <returns>Entier non signé 32 bits équivalent au nombre dans <paramref name="value" />, ou 0 (zéro) si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> n’a pas la valeur 2, 8, 10 ou 16.  

ou - 
<paramref name="value" />, qui représente un nombre non signé autre qu’en base 10, est préfixé avec un signe négatif.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> est <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> contient un caractère qui n’est pas un chiffre valide dans la base spécifiée par <paramref name="fromBase" />. Le message d’exception indique qu’il n’y a pas de chiffres à convertir si le premier caractère dans <paramref name="value" /> n’est pas valide ; sinon, le message indique que <paramref name="value" /> contient des caractères de fin non valides.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />, qui représente un nombre non signé autre qu’en base 10, est préfixé avec un signe négatif.  

ou - 
<paramref name="value" /> représente un nombre qui est inférieur à <see cref="F:System.UInt32.MinValue" /> ou supérieur à <see cref="F:System.UInt32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.UInt16)">
      <summary>Convertit la valeur de l'entier non signé 16 bits spécifié en l'entier non signé 32 bits équivalent.</summary>
      <param name="value">Entier non signé 16 bits à convertir.</param>
      <returns>Entier non signé 32 bits équivalent à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.UInt32)">
      <summary>Retourne l'entier non signé 32 bits spécifié. Aucune conversion n'est effectuée.</summary>
      <param name="value">Entier non signé 32 bits à retourner.</param>
      <returns>
        <paramref name="value" /> est retourné sans modification.</returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.UInt64)">
      <summary>Convertit la valeur de l'entier non signé 64 bits spécifié en un entier non signé 32 bits équivalent.</summary>
      <param name="value">Entier non signé 64 bits à convertir.</param>
      <returns>Entier non signé 32 bits équivalent à <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est supérieur à <see cref="F:System.UInt32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Boolean)">
      <summary>Convertit la valeur booléenne spécifiée en entier non signé 64 bits équivalent.</summary>
      <param name="value">Valeur booléenne à convertir.</param>
      <returns>Chiffre 1, si <paramref name="value" /> est <see langword="true" /> ; sinon, 0.</returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Byte)">
      <summary>Convertit la valeur de l'entier non signé 8 bits spécifié en l'entier non signé 64 bits équivalent.</summary>
      <param name="value">Entier non signé 8 bits à convertir.</param>
      <returns>Entier signé 64 bits équivalent à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Char)">
      <summary>Convertit la valeur du caractère Unicode spécifié en entier non signé 64 bits équivalent.</summary>
      <param name="value">Caractère Unicode à convertir.</param>
      <returns>Entier non signé 64 bits équivalent à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.DateTime)">
      <summary>L'appel de cette méthode lève toujours <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Valeur de date et heure à convertir.</param>
      <returns>Cette conversion n'est pas prise en charge. Aucune valeur n'est retournée.</returns>
      <exception cref="T:System.InvalidCastException">Cette conversion n'est pas prise en charge.</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Decimal)">
      <summary>Convertit la valeur du nombre décimal spécifié en entier non signé 64 bits équivalent.</summary>
      <param name="value">Nombre décimal à convertir.</param>
      <returns>
        <paramref name="value" />, arrondi à l’entier non signé 64 bits le plus proche. Si <paramref name="value" /> se trouve entre deux nombres entiers, le nombre pair est retourné (par exemple, 4,5 est converti en 4 et 5,5 en 6).</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est inférieur à 0 ou supérieur à <see cref="F:System.UInt64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Double)">
      <summary>Convertit la valeur du nombre à virgule flottante double précision spécifié en entier non signé 64 bits équivalent.</summary>
      <param name="value">Nombre à virgule flottante double précision à convertir.</param>
      <returns>
        <paramref name="value" />, arrondi à l’entier non signé 64 bits le plus proche. Si <paramref name="value" /> se trouve entre deux nombres entiers, le nombre pair est retourné (par exemple, 4,5 est converti en 4 et 5,5 en 6).</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est inférieur à 0 ou supérieur à <see cref="F:System.UInt64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Int16)">
      <summary>Convertit la valeur de l'entier signé 16 bits spécifié en entier non signé 64 bits équivalent.</summary>
      <param name="value">Entier signé 16 bits à convertir.</param>
      <returns>Entier non signé 64 bits équivalent à <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est inférieur à zéro.</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Int32)">
      <summary>Convertit la valeur de l'entier signé 32 bits spécifié en entier non signé 64 bits équivalent.</summary>
      <param name="value">Entier signé 32 bits à convertir.</param>
      <returns>Entier non signé 64 bits équivalent à <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est inférieur à zéro.</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Int64)">
      <summary>Convertit la valeur de l'entier signé 64 bits spécifié en entier non signé 64 bits équivalent.</summary>
      <param name="value">Entier signé 64 bits à convertir.</param>
      <returns>Entier non signé 64 bits équivalent à <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est inférieur à zéro.</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Object)">
      <summary>Convertit la valeur de l'objet spécifié en entier non signé 64 bits.</summary>
      <param name="value">Objet qui implémente l'interface <see cref="T:System.IConvertible" /> ou <see langword="null" />.</param>
      <returns>Entier non signé 64 bits équivalent à <paramref name="value" />, ou zéro si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’a pas un format approprié.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> n’implémente pas l’interface <see cref="T:System.IConvertible" />.  
ou 
La conversion n’est pas prise en charge.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> représente un nombre qui est inférieur à <see cref="F:System.UInt64.MinValue" /> ou supérieur à <see cref="F:System.UInt64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)">
      <summary>Convertit la valeur de l'objet spécifié en entier non signé 64 bits à l'aide des informations de mise en forme spécifiées propres à la culture.</summary>
      <param name="value">Objet qui implémente l'interface <see cref="T:System.IConvertible" />.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
      <returns>Entier non signé 64 bits équivalent à <paramref name="value" />, ou zéro si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’a pas un format approprié.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> n’implémente pas l’interface <see cref="T:System.IConvertible" />.  
ou 
La conversion n’est pas prise en charge.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> représente un nombre qui est inférieur à <see cref="F:System.UInt64.MinValue" /> ou supérieur à <see cref="F:System.UInt64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.SByte)">
      <summary>Convertit la valeur de l'entier signé 8 bits spécifié en entier non signé 64 bits équivalent.</summary>
      <param name="value">Entier signé 8 bits à convertir.</param>
      <returns>Entier non signé 64 bits équivalent à <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est inférieur à zéro.</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Single)">
      <summary>Convertit la valeur du nombre à virgule flottante simple précision spécifié en entier non signé 64 bits équivalent.</summary>
      <param name="value">Nombre à virgule flottante simple précision à convertir.</param>
      <returns>
        <paramref name="value" />, arrondi à l’entier non signé 64 bits le plus proche. Si <paramref name="value" /> se trouve entre deux nombres entiers, le nombre pair est retourné (par exemple, 4,5 est converti en 4 et 5,5 en 6).</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est inférieur à 0 ou supérieur à <see cref="F:System.UInt64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.String)">
      <summary>Convertit la représentation sous forme de chaîne spécifiée d'un nombre en entier non signé 64 bits équivalent.</summary>
      <param name="value">Chaîne contenant le nombre à convertir.</param>
      <returns>Entier signé 64 bits équivalent au nombre dans <paramref name="value" />, ou 0 (zéro) si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’est pas constitué d’un signe facultatif suivi d’une séquence de chiffres (0 à 9).</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> représente un nombre qui est inférieur à <see cref="F:System.UInt64.MinValue" /> ou supérieur à <see cref="F:System.UInt64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.String,System.IFormatProvider)">
      <summary>Convertit la représentation sous forme de chaîne spécifiée d'un nombre en entier non signé 64 bits équivalent à l'aide des informations de mise en forme spécifiées propres à la culture.</summary>
      <param name="value">Chaîne contenant le nombre à convertir.</param>
      <param name="provider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
      <returns>Entier non signé 64 bits équivalent au nombre dans <paramref name="value" />, ou 0 (zéro) si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> n’est pas constitué d’un signe facultatif suivi d’une séquence de chiffres (0 à 9).</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> représente un nombre qui est inférieur à <see cref="F:System.UInt64.MinValue" /> ou supérieur à <see cref="F:System.UInt64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.String,System.Int32)">
      <summary>Convertit la représentation sous forme de chaîne d'un nombre dans une base spécifiée en entier non signé 64 bits équivalent.</summary>
      <param name="value">Chaîne contenant le nombre à convertir.</param>
      <param name="fromBase">Base du nombre figurant dans <paramref name="value" />, qui doit correspondre à 2, 8, 10 ou 16.</param>
      <returns>Entier non signé 64 bits équivalent au nombre dans <paramref name="value" />, ou 0 (zéro) si <paramref name="value" /> est <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> n’a pas la valeur 2, 8, 10 ou 16.  

ou - 
<paramref name="value" />, qui représente un nombre non signé autre qu’en base 10, est préfixé avec un signe négatif.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> a la valeur <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> contient un caractère qui n’est pas un chiffre valide dans la base spécifiée par <paramref name="fromBase" />. Le message d’exception indique qu’il n’y a pas de chiffres à convertir si le premier caractère dans <paramref name="value" /> n’est pas valide ; sinon, le message indique que <paramref name="value" /> contient des caractères de fin non valides.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />, qui représente un nombre non signé autre qu’en base 10, est préfixé avec un signe négatif.  

ou - 
<paramref name="value" /> représente un nombre qui est inférieur à <see cref="F:System.UInt64.MinValue" /> ou supérieur à <see cref="F:System.UInt64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.UInt16)">
      <summary>Convertit la valeur de l'entier non signé 16 bits spécifié en l'entier non signé 64 bits équivalent.</summary>
      <param name="value">Entier non signé 16 bits à convertir.</param>
      <returns>Entier non signé 64 bits équivalent à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.UInt32)">
      <summary>Convertit la valeur de l'entier 32 bits non signé spécifié en un entier 64 bits non signé équivalent.</summary>
      <param name="value">Entier non signé 32 bits à convertir.</param>
      <returns>Entier non signé 64 bits équivalent à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.UInt64)">
      <summary>Retourne l'entier non signé 64 bits spécifié. Aucune conversion n'est effectuée.</summary>
      <param name="value">Entier non signé 64 bits à retourner.</param>
      <returns>
        <paramref name="value" /> est retourné sans modification.</returns>
    </member>
    <member name="M:System.Convert.TryFromBase64Chars(System.ReadOnlySpan{System.Char},System.Span{System.Byte},System.Int32@)">
      <param name="chars" />
      <param name="bytes" />
      <param name="bytesWritten" />
    </member>
    <member name="M:System.Convert.TryFromBase64String(System.String,System.Span{System.Byte},System.Int32@)">
      <param name="s" />
      <param name="bytes" />
      <param name="bytesWritten" />
    </member>
    <member name="M:System.Convert.TryToBase64Chars(System.ReadOnlySpan{System.Byte},System.Span{System.Char},System.Int32@,System.Base64FormattingOptions)">
      <param name="bytes" />
      <param name="chars" />
      <param name="charsWritten" />
      <param name="options" />
    </member>
    <member name="T:System.Diagnostics.Stopwatch">
      <summary>Fournit un jeu de méthodes et de propriétés que vous pouvez utiliser pour mesurer le temps écoulé précisément.</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.Stopwatch" />.</summary>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.Elapsed">
      <summary>Obtient le temps total écoulé mesuré par l'instance actuelle.</summary>
      <returns>
        <see cref="T:System.TimeSpan" /> en lecture seule qui représente le temps total écoulé mesuré par l'instance actuelle.</returns>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds">
      <summary>Obtient le temps total écoulé mesuré par l'instance actuelle, en millisecondes.</summary>
      <returns>Entier long en lecture seule qui représente le nombre total de millisecondes mesuré par l'instance actuelle.</returns>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.ElapsedTicks">
      <summary>Obtient le temps total écoulé mesuré par l'instance actuelle, en graduations de minuterie.</summary>
      <returns>Entier long en lecture seule qui représente le nombre total de graduations de minuterie mesuré par l'instance actuelle.</returns>
    </member>
    <member name="F:System.Diagnostics.Stopwatch.Frequency">
      <summary>Obtient la fréquence de la minuterie en nombre de graduations par seconde. Ce champ est en lecture seule.</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.GetTimestamp">
      <summary>Obtient le nombre actuel de graduations dans le mécanisme de minuterie.</summary>
      <returns>Entier long qui représente la valeur du compteur de graduations du mécanisme de minuterie sous-jacent.</returns>
    </member>
    <member name="F:System.Diagnostics.Stopwatch.IsHighResolution">
      <summary>Indique si la minuterie est basée sur un compteur de performance haute résolution. Ce champ est en lecture seule.</summary>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.IsRunning">
      <summary>Obtient une valeur indiquant si la minuterie <see cref="T:System.Diagnostics.Stopwatch" /> s'exécute.</summary>
      <returns>
        <see langword="true" /> si l'instance <see cref="T:System.Diagnostics.Stopwatch" /> est en cours d'exécution et en train de mesurer le temps écoulé pour un intervalle ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Reset">
      <summary>Arrête la mesure d'intervalle de temps et remet le temps écoulé à zéro.</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Restart">
      <summary>Arrête la mesure d'intervalle de temps, réinitialise le temps écoulé sur zéro puis commence à le mesurer.</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Start">
      <summary>Démarre ou reprend la mesure du temps écoulé pour un intervalle.</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.StartNew">
      <summary>Initialise une nouvelle instance <see cref="T:System.Diagnostics.Stopwatch" />, affecte une valeur de zéro à la propriété de temps écoulé et commence à mesurer le temps écoulé.</summary>
      <returns>
        <see cref="T:System.Diagnostics.Stopwatch" /> qui vient de commencer à mesurer le temps écoulé.</returns>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Stop">
      <summary>Cesse de mesurer le temps écoulé pour un intervalle.</summary>
    </member>
    <member name="T:System.Environment">
      <summary>Fournit des informations concernant l'environnement et la plateforme actuels, ainsi que des moyens pour les manipuler. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="P:System.Environment.CommandLine">
      <summary>Obtient la ligne de commande pour ce processus.</summary>
      <returns>Chaîne contenant les arguments de la ligne de commande.</returns>
    </member>
    <member name="P:System.Environment.CurrentDirectory">
      <summary>Obtient ou définit le chemin qualifié complet du répertoire de travail actif.</summary>
      <returns>Chaîne contenant un chemin d'accès au répertoire.</returns>
      <exception cref="T:System.ArgumentException">Tentative de définition d’une chaîne vide ("").</exception>
      <exception cref="T:System.ArgumentNullException">Tentative de définition de la valeur <see langword="null." /></exception>
      <exception cref="T:System.IO.IOException">Une erreur d'E/S s'est produite.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">Tentative de définition d’un chemin local qui est introuvable.</exception>
      <exception cref="T:System.Security.SecurityException">L’appelant n’a pas l’autorisation requise.</exception>
    </member>
    <member name="P:System.Environment.CurrentManagedThreadId">
      <summary>Obtient un identificateur unique pour le thread managé actuel.</summary>
      <returns>Entier représentant un identificateur unique pour ce thread managé.</returns>
    </member>
    <member name="M:System.Environment.Exit(System.Int32)">
      <summary>Termine ce processus et retourne un code de sortie au système d’exploitation.</summary>
      <param name="exitCode">Code de sortie à retourner au système d’exploitation. Utilisez 0 (zéro) pour indiquer que le processus s'est terminé correctement.</param>
      <exception cref="T:System.Security.SecurityException">L’appelant ne dispose pas d’autorisations de sécurité suffisantes pour effectuer cette fonction.</exception>
    </member>
    <member name="P:System.Environment.ExitCode">
      <summary>Obtient ou définit le code de sortie du processus.</summary>
      <returns>Entier signé 32 bits contenant le code de sortie. La valeur par défaut est 0 (zéro), qui indique que le processus s'est terminé correctement.</returns>
    </member>
    <member name="M:System.Environment.ExpandEnvironmentVariables(System.String)">
      <summary>Remplace le nom de chaque variable d'environnement incorporée dans la chaîne spécifiée par la chaîne équivalente de la valeur de la variable, puis retourne la chaîne qui en résulte.</summary>
      <param name="name">Chaîne contenant les noms d'aucune ou plusieurs variables d'environnement. Chaque variable d'environnement est citée avec le signe de pourcentage (%).</param>
      <returns>Chaîne avec chaque variable d'environnement remplacée par sa valeur.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Environment.FailFast(System.String)">
      <summary>Met immédiatement fin à un processus après avoir écrit un message dans le journal des événements des applications Windows, puis inclut le message dans le rapport d'erreurs à Microsoft.</summary>
      <param name="message">Message qui explique pourquoi le processus s'est terminé, ou <see langword="null" /> si aucune explication n'est fournie.</param>
    </member>
    <member name="M:System.Environment.FailFast(System.String,System.Exception)">
      <summary>Met immédiatement fin à un processus après avoir écrit un message dans le journal des événements des applications Windows, puis inclut le message et les informations sur les exceptions dans le rapport d'erreurs à Microsoft.</summary>
      <param name="message">Message qui explique pourquoi le processus s'est terminé, ou <see langword="null" /> si aucune explication n'est fournie.</param>
      <param name="exception">Exception qui représente l'erreur à l'origine de l'arrêt. Il s'agit en général de l'exception dans un bloc <see langword="catch" />.</param>
    </member>
    <member name="M:System.Environment.GetCommandLineArgs">
      <summary>Retourne un tableau de chaînes contenant les arguments de la ligne de commande pour le processus en cours.</summary>
      <returns>Un tableau de chaînes où chaque élément contient un argument de ligne de commande. Le premier élément est le nom du fichier exécutable et les éventuels éléments suivants contiennent les arguments de la ligne de commande restants.</returns>
      <exception cref="T:System.NotSupportedException">Le système ne prend pas en charge les arguments de ligne de commande.</exception>
    </member>
    <member name="M:System.Environment.GetEnvironmentVariable(System.String)">
      <summary>Récupère la valeur d'une variable d'environnement du processus en cours.</summary>
      <param name="variable">Nom de la variable d'environnement.</param>
      <returns>La valeur de la variable d'environnement spécifiée par <paramref name="variable" />, ou <see langword="null" /> si la variable d'environnement n'est pas trouvée.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variable" /> est <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException">L’appelant n’a pas l’autorisation nécessaire pour effectuer cette opération.</exception>
    </member>
    <member name="M:System.Environment.GetEnvironmentVariable(System.String,System.EnvironmentVariableTarget)">
      <summary>Récupère la valeur d'une variable d'environnement du processus en cours ou de la clé de Registre du système d'exploitation Windows pour l'utilisateur ou l'ordinateur local actuel.</summary>
      <param name="variable">Nom d'une variable d'environnement.</param>
      <param name="target">Une des valeurs de <see cref="T:System.EnvironmentVariableTarget" />. Seule la valeur <see cref="F:System.EnvironmentVariableTarget.Process" /> est prise en charge avec .NET Core exécuté sur les systèmes basés sur Unix.</param>
      <returns>La valeur de la variable d'environnement spécifiée par les paramètres <paramref name="variable" /> et <paramref name="target" />, ou <see langword="null" /> si la variable d'environnement n'est pas trouvée.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variable" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> n’est pas une valeur de <see cref="T:System.EnvironmentVariableTarget" /> valide.</exception>
      <exception cref="T:System.Security.SecurityException">L’appelant n’a pas l’autorisation nécessaire pour effectuer cette opération.</exception>
    </member>
    <member name="M:System.Environment.GetEnvironmentVariables">
      <summary>Récupère tous les noms des variables d'environnement et leurs valeurs à partir du processus en cours.</summary>
      <returns>Dictionnaire qui contient tous les noms des variables d'environnement et leurs valeurs ; sinon, un dictionnaire vide si aucune variable d'environnement n'est trouvée.</returns>
      <exception cref="T:System.Security.SecurityException">L’appelant n’a pas l’autorisation nécessaire pour effectuer cette opération.</exception>
      <exception cref="T:System.OutOfMemoryException">La mémoire tampon est insuffisante.</exception>
    </member>
    <member name="M:System.Environment.GetEnvironmentVariables(System.EnvironmentVariableTarget)">
      <summary>Récupère tous les noms des variables d'environnement et leurs valeurs à partir du processus en cours, ou depuis la clé de Registre du système d'exploitation Windows pour l'utilisateur ou l'ordinateur local actuel.</summary>
      <param name="target">Une des valeurs de <see cref="T:System.EnvironmentVariableTarget" />. Seule la valeur  est prise en charge avec .NET Core exécuté sur les systèmes basés sur Unix.</param>
      <returns>Dictionnaire qui contient tous les noms des variables d'environnement et leurs valeurs à partir de la source spécifiée par le paramètre <paramref name="target" /> ; sinon, un dictionnaire vide si aucune variable d'environnement n'est trouvée.</returns>
      <exception cref="T:System.Security.SecurityException">L’appelant n’a pas l’autorisation nécessaire pour effectuer cette opération pour la valeur spécifiée de <paramref name="target" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> contient une valeur non conforme.</exception>
    </member>
    <member name="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder)">
      <summary>Obtient le chemin d'accès au dossier spécial du système identifié par l'énumération spécifiée.</summary>
      <param name="folder">Une des valeurs d’énumération identifiant un dossier spécial du système.</param>
      <returns>Chemin d'accès au dossier spécial du système spécifié, si ce dossier existe physiquement sur votre ordinateur ; sinon, chaîne vide ("").  
 Un dossier n'existe pas physiquement s'il n'a pas été créé par le système d'exploitation, si le dossier existant a été supprimé ou s'il s'agit d'un dossier virtuel, tel que « Poste de travail », auquel ne correspond aucun chemin d'accès physique.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="folder" /> n’est pas membre de <see cref="T:System.Environment.SpecialFolder" /></exception>
      <exception cref="T:System.PlatformNotSupportedException">La plateforme actuelle n’est pas prise en charge.</exception>
    </member>
    <member name="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder,System.Environment.SpecialFolderOption)">
      <summary>Obtient le chemin d'accès au dossier spécial du système identifié par l'énumération spécifiée et utilise une option spécifiée pour l'accès aux dossiers spéciaux.</summary>
      <param name="folder">Une des valeurs d’énumération identifiant un dossier spécial du système.</param>
      <param name="option">Une des valeurs d’énumération spécifiant les options à utiliser pour accéder à un dossier spécial.</param>
      <returns>Chemin d'accès au dossier spécial du système spécifié, si ce dossier existe physiquement sur votre ordinateur ; sinon, chaîne vide ("").  
 Un dossier n'existe pas physiquement s'il n'a pas été créé par le système d'exploitation, si le dossier existant a été supprimé ou s'il s'agit d'un dossier virtuel, tel que « Poste de travail », auquel ne correspond aucun chemin d'accès physique.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="folder" /> n’est pas membre de <see cref="T:System.Environment.SpecialFolder" />

ou -

<paramref name="options" /> n’est pas membre de <see cref="T:System.Environment.SpecialFolderOption" /></exception>
      <exception cref="T:System.PlatformNotSupportedException">La plateforme actuelle n’est pas prise en charge.</exception>
    </member>
    <member name="M:System.Environment.GetLogicalDrives">
      <summary>Retourne un tableau de chaînes contenant les noms des lecteurs logiques de l'ordinateur actuel.</summary>
      <returns>Tableau de chaînes où chaque élément contient le nom d'un lecteur logique. Par exemple, si le disque dur de l’ordinateur est le premier lecteur logique, le premier élément retourné est « C:\ ».</returns>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
      <exception cref="T:System.Security.SecurityException">L’appelant n’a pas les autorisations requises.</exception>
    </member>
    <member name="P:System.Environment.HasShutdownStarted">
      <summary>Obtient une valeur indiquant si le déchargement du domaine d'application actuel est en cours ou si le Common Language Runtime s'arrête.</summary>
      <returns>
        <see langword="true" />Si le domaine d’application actuel est déchargé ou si le CLR s’arrête; Sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Environment.Is64BitOperatingSystem">
      <summary>Détermine si le système d'exploitation actuel est un système d'exploitation 64 bits.</summary>
      <returns>
        <see langword="true" /> s'il s'agit d'un système d'exploitation 64 bits ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Environment.Is64BitProcess">
      <summary>Détermine si le processus actuel est un processus 64 bits.</summary>
      <returns>
        <see langword="true" /> s'il s'agit d'un processus 64 bits ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Environment.MachineName">
      <summary>Obtient le nom NetBIOS de cet ordinateur local.</summary>
      <returns>Chaîne contenant le nom de cet ordinateur.</returns>
      <exception cref="T:System.InvalidOperationException">Impossible d’obtenir le nom de cet ordinateur.</exception>
    </member>
    <member name="P:System.Environment.NewLine">
      <summary>Obtient la chaîne de saut de ligne définie pour cet environnement.</summary>
      <returns>Chaîne contenant « \r\n » pour les plateformes non-Unix, ou une chaîne contenant « \n » pour les plateformes Unix.</returns>
    </member>
    <member name="P:System.Environment.OSVersion">
      <summary>Obtient un objet <see cref="T:System.OperatingSystem" /> qui contient l'identificateur et le numéro de version de la plateforme actuelle.</summary>
      <returns>Objet qui contient l'identificateur et le numéro de version de la plateforme.</returns>
      <exception cref="T:System.InvalidOperationException">Cette propriété n’a pas pu obtenir la version du système.  

ou - 
L’identificateur de plateforme obtenu n’est pas membre de <see cref="T:System.PlatformID" />.</exception>
    </member>
    <member name="P:System.Environment.ProcessorCount">
      <summary>Obtient le nombre de processeurs de l'ordinateur actuel.</summary>
      <returns>Entier signé 32 bits qui spécifie le nombre de processeurs de l'ordinateur actuel. Il n'y a pas de valeur par défaut. Si l'ordinateur actuel contient plusieurs groupes de processeurs, cette propriété retourne le nombre de processeurs logiques disponibles pour le Common Language Runtime (CLR).</returns>
    </member>
    <member name="M:System.Environment.SetEnvironmentVariable(System.String,System.String)">
      <summary>Crée, modifie ou supprime une variable d'environnement stockée dans le processus en cours.</summary>
      <param name="variable">Nom d'une variable d'environnement.</param>
      <param name="value">Valeur à assigner à <paramref name="variable" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variable" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="variable" /> contient une chaîne de longueur nulle, un caractère zéro hexadécimal initial (0x00) ou un signe égal (« = »).  

ou - 
La longueur de <paramref name="variable" /> ou <paramref name="value" /> est supérieure ou égale à 32 767 caractères.  

ou - 
Une erreur s’est produite lors de l’exécution de cette opération.</exception>
      <exception cref="T:System.Security.SecurityException">L’appelant n’a pas l’autorisation nécessaire pour effectuer cette opération.</exception>
    </member>
    <member name="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
      <summary>Crée, modifie ou supprime une variable d'environnement stockée dans le processus en cours ou dans la clé de Registre du système d'exploitation Windows réservée pour l'utilisateur ou l'ordinateur local actuel.</summary>
      <param name="variable">Nom d'une variable d'environnement.</param>
      <param name="value">Valeur à assigner à <paramref name="variable" />.</param>
      <param name="target">Une des valeurs d'énumération qui spécifie l'emplacement de la variable d'environnement.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variable" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="variable" /> contient une chaîne de longueur nulle, un caractère zéro hexadécimal initial (0x00) ou un signe égal (« = »).  

ou - 
La longueur de <paramref name="variable" /> est supérieure ou égale à 32 767 caractères.  

ou 
 <paramref name="target" /> n’est pas membre de l’énumération <see cref="T:System.EnvironmentVariableTarget" /> .  

ou - 
<paramref name="target" /> est <see cref="F:System.EnvironmentVariableTarget.Machine" /> ou <see cref="F:System.EnvironmentVariableTarget.User" />, et la longueur de <paramref name="variable" /> est supérieure ou égale à 255.  

ou - 
<paramref name="target" /> est <see cref="F:System.EnvironmentVariableTarget.Process" /> , et la longueur de <paramref name="value" /> est supérieure ou égale à 32 767 caractères.  

ou - 
Une erreur s’est produite lors de l’exécution de cette opération.</exception>
      <exception cref="T:System.Security.SecurityException">L’appelant n’a pas l’autorisation nécessaire pour effectuer cette opération.</exception>
    </member>
    <member name="T:System.Environment.SpecialFolder">
      <summary>Spécifie les constantes énumérées utilisées pour récupérer les chemins d'accès des dossiers système spéciaux.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.AdminTools">
      <summary>Répertoire de système de fichiers utilisé pour stocker des outils d'administration pour un utilisateur donné. La console MMC (Microsoft Management Console) enregistrera les consoles personnalisées dans ce répertoire et se déplacera avec l'utilisateur. Ajouté dans .NET Framework 4.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.ApplicationData">
      <summary>Répertoire servant de référentiel commun pour les données spécifiques à l'application qui sont utilisées par l'utilisateur itinérant actuel. Un utilisateur itinérant travaille sur plusieurs ordinateurs au sein d'un réseau. Le profil d'un utilisateur itinérant est conservé sur un serveur du réseau, et il est chargé sur un système lorsque l'utilisateur se connecte.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CDBurning">
      <summary>Répertoire du système de fichiers qui agit en tant que zone de transit pour les fichiers qui attendent d'être écrits sur un CD. Ajouté dans .NET Framework 4.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonAdminTools">
      <summary>Répertoire du système de fichiers qui contient des outils d'administration pour tous les utilisateurs de l'ordinateur. Ajouté dans .NET Framework 4.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonApplicationData">
      <summary>Répertoire servant de référentiel commun pour les données spécifiques à l'application qui sont utilisées par tous les utilisateurs.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonDesktopDirectory">
      <summary>Répertoire du système de fichiers qui contient des fichiers et des dossiers qui s'affichent sur le Bureau pour tous les utilisateurs. Ce dossier spécial est valide uniquement pour les systèmes Windows NT. Ajouté dans .NET Framework 4.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonDocuments">
      <summary>Répertoire du système de fichiers qui contient des documents qui sont communs à tous les utilisateurs. Ce dossier spécial est valide pour les systèmes Windows NT, Windows 95 et Windows 98 sur lesquels le fichier Shfolder.dll est installé. Ajouté dans .NET Framework 4.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonMusic">
      <summary>Répertoire du système de fichiers qui sert de référentiel pour les fichiers audio communs à tous les utilisateurs. Ajouté dans .NET Framework 4.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonOemLinks">
      <summary>Cette valeur est reconnue dans Windows Vista pour la compatibilité descendante, mais le dossier spécial lui-même n’est plus utilisé. Ajouté dans .NET Framework 4.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonPictures">
      <summary>Répertoire du système de fichiers qui sert de référentiel pour les fichiers image communs à tous les utilisateurs. Ajouté dans .NET Framework 4.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonProgramFiles">
      <summary>Répertoire contenant les composants partagés par toutes les applications.  
Pour obtenir le répertoire de fichiers de programmes communs sur un système non x86, utilisez le membre <see cref="F:System.Environment.SpecialFolder.ProgramFilesX86" />.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonProgramFilesX86">
      <summary>Dossier Program Files. Ajouté dans .NET Framework 4.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonPrograms">
      <summary>Dossier destiné aux composants partagés par plusieurs applications. Ce dossier spécial est uniquement valide pour les systèmes Windows NT, Windows 2000 et Windows XP. Ajouté dans .NET Framework 4.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonStartMenu">
      <summary>Répertoire du système de fichiers qui contient les programmes et dossiers qui s’affichent dans le menu Démarrer pour tous les utilisateurs. Ce dossier spécial est valide uniquement pour les systèmes Windows NT. Ajouté dans .NET Framework 4.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonStartup">
      <summary>Répertoire du système de fichiers qui contient les programmes qui s’affichent dans le dossier Démarrage pour tous les utilisateurs. Ce dossier spécial est valide uniquement pour les systèmes Windows NT. Ajouté dans .NET Framework 4.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonTemplates">
      <summary>Répertoire du système de fichiers qui contient les modèles qui sont disponibles pour tous les utilisateurs. Ce dossier spécial est valide uniquement pour les systèmes Windows NT.  Ajouté dans .NET Framework 4.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonVideos">
      <summary>Répertoire du système de fichiers qui sert de référentiel pour les fichiers vidéo communs à tous les utilisateurs. Ajouté dans .NET Framework 4.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Cookies">
      <summary>Répertoire servant de référentiel commun pour les cookies Internet.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Desktop">
      <summary>Bureau logique, plutôt que l'emplacement physique du système de fichiers.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.DesktopDirectory">
      <summary>Répertoire utilisé pour le stockage physique des objets de fichiers figurant sur le Bureau. Ne confondez pas ce répertoire avec le dossier Bureau proprement dit, qui est un dossier virtuel.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Favorites">
      <summary>Répertoire servant de référentiel commun pour les éléments favoris de l'utilisateur.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Fonts">
      <summary>Dossier virtuel qui contient des polices. Ajouté dans .NET Framework 4.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.History">
      <summary>Répertoire servant de référentiel commun pour les éléments de l'Historique Internet.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.InternetCache">
      <summary>Répertoire servant de référentiel commun pour les fichiers temporaires Internet.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.LocalApplicationData">
      <summary>Répertoire servant de référentiel commun pour les données spécifiques à l'application utilisées par l'utilisateur non itinérant actuel.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.LocalizedResources">
      <summary>Répertoire du système de fichiers qui contient des données de ressource localisées. Ajouté dans .NET Framework 4.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyComputer">
      <summary>Dossier Poste de travail. Lorsqu'il est transmis à la méthode <see langword="Environment.GetFolderPath" />, le membre d'énumération <see langword="MyComputer" /> renvoie toujours la chaîne vide ("") car aucun chemin n'est défini pour le dossier Poste de travail.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyDocuments">
      <summary>Dossier Mes documents. Ce membre équivaut à <see cref="F:System.Environment.SpecialFolder.Personal" />.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyMusic">
      <summary>Dossier Ma musique.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyPictures">
      <summary>Dossier Mes images.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyVideos">
      <summary>Répertoire du système de fichiers qui sert de référentiel pour les vidéos qui appartiennent à un utilisateur.  Ajouté dans .NET Framework 4.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.NetworkShortcuts">
      <summary>Répertoire du système de fichiers qui contient les objets de lien qui peuvent exister dans le dossier virtuel Favoris réseau. Ajouté dans .NET Framework 4.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Personal">
      <summary>Répertoire servant de référentiel commun pour les documents.  Ce membre équivaut à <see cref="F:System.Environment.SpecialFolder.MyDocuments" />.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.PrinterShortcuts">
      <summary>Répertoire du système de fichiers qui contient les objets de lien qui peuvent exister dans le dossier virtuel Imprimantes. Ajouté dans .NET Framework 4.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.ProgramFiles">
      <summary>Répertoire contenant les fichiers de programmes.  
Sur un système non x86, la transmission de <see cref="F:System.Environment.SpecialFolder.ProgramFiles" /> à la méthode <see cref="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder)" /> retourne le chemin d'accès des programmes non x86. Pour obtenir le répertoire de fichiers de programmes sur un système non x86, utilisez le membre <see cref="F:System.Environment.SpecialFolder.ProgramFilesX86" />.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.ProgramFilesX86">
      <summary>Dossier Program Files x86. Ajouté dans .NET Framework 4.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Programs">
      <summary>Répertoire contenant les groupes de programmes de l'utilisateur.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Recent">
      <summary>Répertoire contenant les derniers documents utilisés par l'utilisateur.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Resources">
      <summary>Répertoire du système de fichiers qui contient des données de ressource. Ajouté dans .NET Framework 4.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.SendTo">
      <summary>Répertoire contenant les éléments du menu Envoyer vers.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.StartMenu">
      <summary>Répertoire contenant les éléments du menu Démarrer.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Startup">
      <summary>Répertoire correspondant au groupe de programmes Démarrer de l'utilisateur. Le système démarre ces programmes chaque fois qu'un utilisateur se connecte ou démarre Windows.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.System">
      <summary>Répertoire Système.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.SystemX86">
      <summary>Dossier Système Windows. Ajouté dans .NET Framework 4.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Templates">
      <summary>Répertoire servant de référentiel commun pour les modèles de documents.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.UserProfile">
      <summary>Dossier du profil utilisateur. Les applications ne doivent pas créer de fichiers ou de dossiers à ce niveau ; elles doivent placer leurs données sous les emplacements spécifiés par <see cref="F:System.Environment.SpecialFolder.ApplicationData" />. Ajouté dans .NET Framework 4.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Windows">
      <summary>Répertoire Windows ou SYSROOT. Correspond aux variables d'environnement %windir% ou % SYSTEMROOT%. Ajouté dans .NET Framework 4.</summary>
    </member>
    <member name="T:System.Environment.SpecialFolderOption">
      <summary>Spécifie les options à utiliser pour l'obtention du chemin d'accès à un dossier spécial.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolderOption.Create">
      <summary>Le chemin d'accès au dossier est créé s'il n'existe pas déjà.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolderOption.DoNotVerify">
      <summary>Le chemin d'accès au dossier est retourné sans vérifier si le chemin d'accès existe. Si le dossier se trouve sur un réseau, la spécification de cette option peut réduire le délai d'attente.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolderOption.None">
      <summary>Le chemin d'accès au dossier est vérifié. Si le dossier existe, le chemin d'accès est retourné. Si le dossier n'existe pas, une chaîne vide ("") est retournée. Il s'agit du comportement par défaut.</summary>
    </member>
    <member name="P:System.Environment.StackTrace">
      <summary>Obtient les informations actuelles sur la trace de la pile.</summary>
      <returns>Chaîne contenant les informations de trace de la pile. Cette valeur peut être <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="P:System.Environment.SystemDirectory">
      <summary>Obtient le chemin qualifié complet du répertoire du système.</summary>
      <returns>Chaîne contenant un chemin d'accès au répertoire.</returns>
    </member>
    <member name="P:System.Environment.SystemPageSize">
      <summary>Obtient le nombre d'octets figurant dans la page mémoire du système d'exploitation.</summary>
      <returns>Nombre d'octets dans la page de mémoire système.</returns>
    </member>
    <member name="P:System.Environment.TickCount">
      <summary>Obtient le nombre de millisecondes écoulées depuis le démarrage du système.</summary>
      <returns>Entier signé 32 bits contenant la durée écoulée en millisecondes depuis le dernier démarrage de l'ordinateur.</returns>
    </member>
    <member name="P:System.Environment.TickCount64">
      <summary>Obtient le nombre de millisecondes écoulées depuis le démarrage du système.</summary>
      <returns>Millisecondes écoulées depuis le démarrage du système.</returns>
    </member>
    <member name="P:System.Environment.UserDomainName">
      <summary>Obtient le nom de domaine réseau associé à l'utilisateur actuel.</summary>
      <returns>Nom de domaine réseau associé à l'utilisateur actuel.</returns>
      <exception cref="T:System.PlatformNotSupportedException">Le système d’exploitation ne prend pas en charge la récupération du nom de domaine réseau.</exception>
      <exception cref="T:System.InvalidOperationException">Impossible de récupérer le nom de domaine réseau.</exception>
    </member>
    <member name="P:System.Environment.UserInteractive">
      <summary>Obtient une valeur indiquant si le processus en cours est exécuté en mode interactif avec l'utilisateur.</summary>
      <returns>
        <see langword="true" /> si le processus en cours est exécuté en mode interactif avec l'utilisateur ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Environment.UserName">
      <summary>Obtient le nom d’utilisateur de la personne qui est actuellement connectée au système d’exploitation.</summary>
      <returns>Nom d’utilisateur de la personne qui est connectée au système d’exploitation.</returns>
    </member>
    <member name="P:System.Environment.Version">
      <summary>Obtient un objet <see cref="T:System.Version" /> décrivant le numéro principal, le numéro secondaire, le numéro de build et le numéro de révision du Common Language Runtime.</summary>
      <returns>Objet qui affiche la version du Common Language Runtime.</returns>
    </member>
    <member name="P:System.Environment.WorkingSet">
      <summary>Obtient la quantité de mémoire physique mappée au contexte du processus.</summary>
      <returns>Entier signé 64 bits contenant le nombre d'octets de mémoire physique mappée au contexte du processus.</returns>
    </member>
    <member name="T:System.EnvironmentVariableTarget">
      <summary>Spécifie l'emplacement où une variable d'environnement est stockée ou récupérée lors d'une opération de définition (set) ou d'obtention (get).</summary>
    </member>
    <member name="F:System.EnvironmentVariableTarget.Machine">
      <summary>La variable d'environnement est stockée ou récupérée à partir de la clé <see langword="HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\Environment" /> de la base de registres du système d'exploitation Windows. Cette valeur doit être utilisée sur des implémentations de .NET exécutées sur des systèmes Windows uniquement.</summary>
    </member>
    <member name="F:System.EnvironmentVariableTarget.Process">
      <summary>La variable d'environnement est stockée ou récupérée à partir du bloc environnement associé au processus en cours.</summary>
    </member>
    <member name="F:System.EnvironmentVariableTarget.User">
      <summary>La variable d'environnement est stockée ou récupérée à partir de la clé <see langword="HKEY_CURRENT_USER\Environment" /> de la base de registres du système d'exploitation Windows. Cette valeur doit être utilisée sur des implémentations de .NET exécutées sur des systèmes Windows uniquement.</summary>
    </member>
    <member name="T:System.Globalization.GlobalizationExtensions">
      <summary>Fournit des méthodes d’extension associées à la globalisation.</summary>
    </member>
    <member name="M:System.Globalization.GlobalizationExtensions.GetStringComparer(System.Globalization.CompareInfo,System.Globalization.CompareOptions)">
      <summary>Retourne un objet <see cref="T:System.StringComparer" /> basé sur les règles de comparaison de chaînes sensible à la culture d’un objet <see cref="T:System.Globalization.CompareInfo" /> spécifié.</summary>
      <param name="compareInfo">Objet qui prend en charge la comparaison de chaînes sensible à la culture.</param>
      <param name="options">Valeur qui définit le mode de comparaison des chaînes. <paramref name="options" /> est la valeur d’énumération <see cref="F:System.Globalization.CompareOptions.Ordinal" />, la valeur d’énumération <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> ou une combinaison au niveau du bit d’une ou plusieurs des valeurs suivantes : <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> et <see cref="F:System.Globalization.CompareOptions.StringSort" />.</param>
      <returns>Objet qui peut être utilisé pour effectuer des comparaisons de chaînes.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="compareInfo" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> n'est pas valide.</exception>
    </member>
    <member name="T:System.IO.BinaryReader">
      <summary>Lit les types de données primitifs sous forme de valeurs binaires avec un encodage spécifique.</summary>
    </member>
    <member name="M:System.IO.BinaryReader.#ctor(System.IO.Stream)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.BinaryReader" /> en fonction du flux spécifié et à l'aide de l'encodage UTF-8.</summary>
      <param name="input">Flux d'entrée.</param>
      <exception cref="T:System.ArgumentException">Le flux ne prend pas en charge l’écriture, il est <see langword="null" /> ou bien il est déjà fermé.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.BinaryReader" /> en fonction du flux et l'encodage de caractères spécifiés.</summary>
      <param name="input">Flux d'entrée.</param>
      <param name="encoding">Encodage des caractères à utiliser.</param>
      <exception cref="T:System.ArgumentException">Le flux ne prend pas en charge l’écriture, il est <see langword="null" /> ou bien il est déjà fermé.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="encoding" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.BinaryReader" /> en fonction du flux et de l'encodage de caractères spécifiés, et permet éventuellement de laisser le flux ouvert.</summary>
      <param name="input">Flux d'entrée.</param>
      <param name="encoding">Encodage des caractères à utiliser.</param>
      <param name="leaveOpen">
        <see langword="true" /> pour maintenir le flux ouvert après avoir supprimé l'objet <see cref="T:System.IO.BinaryReader" /> ; sinon, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException">Le flux ne prend pas en charge l’écriture, il est <see langword="null" /> ou bien il est déjà fermé.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="encoding" /> ou <paramref name="input" /> est <see langword="null" />.</exception>
    </member>
    <member name="P:System.IO.BinaryReader.BaseStream">
      <summary>Expose l'accès au flux sous-jacent de l'élément <see cref="T:System.IO.BinaryReader" />.</summary>
      <returns>Flux sous-jacent associé à l'élément <see langword="BinaryReader" />.</returns>
    </member>
    <member name="M:System.IO.BinaryReader.Close">
      <summary>Ferme le lecteur actuel et le flux sous-jacent.</summary>
    </member>
    <member name="M:System.IO.BinaryReader.Dispose">
      <summary>Libère toutes les ressources utilisées par l'instance actuelle de la classe <see cref="T:System.IO.BinaryReader" />.</summary>
    </member>
    <member name="M:System.IO.BinaryReader.Dispose(System.Boolean)">
      <summary>Libère les ressources non managées utilisées par la classe <see cref="T:System.IO.BinaryReader" /> et libère éventuellement les ressources managées.</summary>
      <param name="disposing">
        <see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour libérer uniquement les ressources non managées.</param>
    </member>
    <member name="M:System.IO.BinaryReader.FillBuffer(System.Int32)">
      <summary>Remplit la mémoire tampon interne avec le nombre spécifié d'octets lus à partir du flux.</summary>
      <param name="numBytes">Nombre d'octets à lire.</param>
      <exception cref="T:System.IO.EndOfStreamException">La fin du flux est atteinte avant que <paramref name="numBytes" /> n’ait pu être lu.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="numBytes" /> demandé est plus grand que la taille de la mémoire tampon interne.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.PeekChar">
      <summary>Retourne le prochain caractère disponible et n'avance pas la position de caractère ou d'octet.</summary>
      <returns>Prochain caractère disponible, ou -1 si aucun caractère n'est disponible ou si le flux ne prend pas en charge la recherche.</returns>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
      <exception cref="T:System.ArgumentException">Le caractère actuel ne peut pas être décodé dans la mémoire tampon de caractères interne à l’aide du <see cref="T:System.Text.Encoding" /> sélectionné pour le flux de données.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read">
      <summary>Lit les caractères du flux sous-jacent et avance la position actuelle du flux conformément à la valeur <see langword="Encoding" /> utilisée et au caractère spécifique en cours de lecture dans le flux.</summary>
      <returns>Caractère suivant du flux d'entrée, ou -1 si aucun caractère n'est actuellement disponible.</returns>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux est fermé.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>Lit le nombre spécifié d'octets dans le flux, en commençant à un point spécifié dans le tableau d'octets.</summary>
      <param name="buffer">Mémoire tampon dans laquelle lire les données.</param>
      <param name="index">Point de départ, dans la mémoire tampon, à partir duquel commencer la lecture de la mémoire tampon.</param>
      <param name="count">Nombre d'octets à lire.</param>
      <returns>Nombre d'octets lus dans <paramref name="buffer" />. Ce total peut être inférieur au nombre d'octets demandé si ce nombre d'octets n'est pas disponible, ou il peut être égal à zéro si la fin du flux est atteinte.</returns>
      <exception cref="T:System.ArgumentException">La longueur de la mémoire tampon moins <paramref name="index" /> est inférieure à <paramref name="count" />.  

ou - 
Le nombre de caractères décodés à lire est supérieur à <paramref name="count" />. Cela peut arriver si un décodeur Unicode retourne des caractères de secours ou une paire de substitution.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> ou <paramref name="count" /> est un nombre négatif.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>Lit le nombre spécifié de caractères du flux, en commençant à un point spécifié dans le tableau de caractères.</summary>
      <param name="buffer">Mémoire tampon dans laquelle lire les données.</param>
      <param name="index">Point de départ, dans la mémoire tampon, à partir duquel commencer la lecture de la mémoire tampon.</param>
      <param name="count">Nombre de caractères à lire.</param>
      <returns>Nombre total de caractères lus dans la mémoire tampon. Ce total peut être inférieur au nombre de caractères demandé si ce nombre de caractères n'est pas disponible actuellement, ou il peut être égal à zéro si la fin du flux est atteinte.</returns>
      <exception cref="T:System.ArgumentException">La longueur de la mémoire tampon moins <paramref name="index" /> est inférieure à <paramref name="count" />.  
ou 
Le nombre de caractères décodés à lire est supérieur à <paramref name="count" />. Cela peut arriver si un décodeur Unicode retourne des caractères de secours ou une paire de substitution.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> ou <paramref name="count" /> est un nombre négatif.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read(System.Span{System.Byte})">
      <param name="buffer" />
    </member>
    <member name="M:System.IO.BinaryReader.Read(System.Span{System.Char})">
      <param name="buffer" />
    </member>
    <member name="M:System.IO.BinaryReader.Read7BitEncodedInt">
      <summary>Lit un entier 32 bits au format compressé.</summary>
      <returns>Entier 32 bits au format compressé.</returns>
      <exception cref="T:System.IO.EndOfStreamException">La fin du flux est atteinte.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
      <exception cref="T:System.FormatException">Le flux est endommagé.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadBoolean">
      <summary>Lit une valeur <see langword="Boolean" /> à partir du flux actuel et avance la position actuelle du flux d'un octet.</summary>
      <returns>
        <see langword="true" /> si l'octet est différent de zéro ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.IO.EndOfStreamException">La fin du flux est atteinte.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadByte">
      <summary>Lit l'octet suivant du flux actuel et avance la position actuelle du flux d'un octet.</summary>
      <returns>Octet suivant lu dans le flux actuel.</returns>
      <exception cref="T:System.IO.EndOfStreamException">La fin du flux est atteinte.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
      <summary>Lit le nombre spécifié d'octets du flux actuel dans un tableau d'octets et avance la position actuelle de ce nombre d'octets.</summary>
      <param name="count">Nombre d'octets à lire. Cette valeur doit être 0 ou un nombre non négatif, sinon une exception se produit.</param>
      <returns>Tableau d'octets contenant les données lues dans le flux sous-jacent. Cette valeur peut être inférieure au nombre d'octets demandé si la fin du flux est atteinte.</returns>
      <exception cref="T:System.ArgumentException">Le nombre de caractères décodés à lire est supérieur à <paramref name="count" />. Cela peut arriver si un décodeur Unicode retourne des caractères de secours ou une paire de substitution.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux est fermé.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> est un nombre négatif.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadChar">
      <summary>Lit le caractère suivant dans le flux actuel et avance la position actuelle du flux conformément à la valeur <see langword="Encoding" /> utilisée et du caractère spécifique en cours de lecture dans le flux.</summary>
      <returns>Caractère lu dans le flux actuel.</returns>
      <exception cref="T:System.IO.EndOfStreamException">La fin du flux est atteinte.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
      <exception cref="T:System.ArgumentException">Un caractère de substitution a été lu.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadChars(System.Int32)">
      <summary>Lit le nombre spécifié de caractères dans le flux actuel, retourne les données dans un tableau de caractères et avance la position actuelle conformément à la valeur <see langword="Encoding" /> utilisée et au caractère spécifique en cours de lecture dans le flux.</summary>
      <param name="count">Nombre de caractères à lire.</param>
      <returns>Tableau de caractères contenant des données lues dans le flux sous-jacent. Cette valeur peut être inférieure au nombre de caractères demandés si la fin du flux est atteinte.</returns>
      <exception cref="T:System.ArgumentException">Le nombre de caractères décodés à lire est supérieur à <paramref name="count" />. Cela peut arriver si un décodeur Unicode retourne des caractères de secours ou une paire de substitution.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> est un nombre négatif.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadDecimal">
      <summary>Lit une valeur décimale dans le flux actuel et avance la position actuelle du flux de 16 octets.</summary>
      <returns>Valeur décimale lue dans le flux actuel.</returns>
      <exception cref="T:System.IO.EndOfStreamException">La fin du flux est atteinte.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadDouble">
      <summary>Lit une valeur à virgule flottante de 8 octets dans le flux actuel et avance la position actuelle du flux de huit octets.</summary>
      <returns>Valeur à virgule flottante de 8 octets lue dans le flux actuel.</returns>
      <exception cref="T:System.IO.EndOfStreamException">La fin du flux est atteinte.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadInt16">
      <summary>Lit un entier signé de 2 octets dans le flux actuel et avance la position actuelle du flux de deux octets.</summary>
      <returns>Entier signé de 2 octets lu dans le flux actuel.</returns>
      <exception cref="T:System.IO.EndOfStreamException">La fin du flux est atteinte.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadInt32">
      <summary>Lit un entier signé de 4 octets dans le flux actuel et avance la position actuelle du flux de quatre octets.</summary>
      <returns>Entier signé de 4 octets lu dans le flux actuel.</returns>
      <exception cref="T:System.IO.EndOfStreamException">La fin du flux est atteinte.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadInt64">
      <summary>Lit un entier signé de 8 octets dans le flux actuel et avance la position actuelle du flux de huit octets.</summary>
      <returns>Entier signé de 8 octets lu dans le flux actuel.</returns>
      <exception cref="T:System.IO.EndOfStreamException">La fin du flux est atteinte.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadSByte">
      <summary>Lit un octet signé dans ce flux et avance la position actuelle du flux d'un octet.</summary>
      <returns>Octet signé lu dans le flux actuel.</returns>
      <exception cref="T:System.IO.EndOfStreamException">La fin du flux est atteinte.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadSingle">
      <summary>Lit une valeur à virgule flottante de 4 octets dans le flux actuel et avance la position actuelle du flux de quatre octets.</summary>
      <returns>Valeur à virgule flottante de 4 octets lue dans le flux actuel.</returns>
      <exception cref="T:System.IO.EndOfStreamException">La fin du flux est atteinte.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadString">
      <summary>Lit une chaîne dans le flux actuel. La chaîne est précédée de la longueur, encodée sous la forme d'un entier de sept bits à la fois.</summary>
      <returns>Chaîne en cours de lecture.</returns>
      <exception cref="T:System.IO.EndOfStreamException">La fin du flux est atteinte.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadUInt16">
      <summary>Lit un entier non signé de 2 octets dans le flux actuel à l'aide de l’encodage Little Endian et avance la position du flux de deux octets.</summary>
      <returns>Entier non signé de 2 octets lu dans ce flux.</returns>
      <exception cref="T:System.IO.EndOfStreamException">La fin du flux est atteinte.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadUInt32">
      <summary>Lit un entier non signé de 4 octets dans le flux actuel et avance la position du flux de quatre octets.</summary>
      <returns>Entier non signé de 4 octets lu dans ce flux.</returns>
      <exception cref="T:System.IO.EndOfStreamException">La fin du flux est atteinte.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadUInt64">
      <summary>Lit un entier non signé de 8 octets dans le flux actuel et avance la position du flux de huit octets.</summary>
      <returns>Entier non signé de 8 octets lu dans ce flux.</returns>
      <exception cref="T:System.IO.EndOfStreamException">La fin du flux est atteinte.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux est fermé.</exception>
    </member>
    <member name="T:System.IO.BinaryWriter">
      <summary>Écrit des types primitifs en binaire dans un flux et prend en charge l'écriture de chaînes dans un encodage spécifique.</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.BinaryWriter" /> qui écrit dans un flux.</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.#ctor(System.IO.Stream)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.BinaryWriter" /> en fonction du flux spécifié et à l'aide de l'encodage UTF-8.</summary>
      <param name="output">Flux de sortie.</param>
      <exception cref="T:System.ArgumentException">Le flux ne prend pas en charge l’écriture ou bien il est déjà fermé.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" /> construit par défaut est <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.BinaryWriter" /> en fonction du flux et l'encodage de caractères spécifiés.</summary>
      <param name="output">Flux de sortie.</param>
      <param name="encoding">Encodage des caractères à utiliser.</param>
      <exception cref="T:System.ArgumentException">Le flux ne prend pas en charge l’écriture ou bien il est déjà fermé.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" /> ou <paramref name="encoding" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.BinaryWriter" /> en fonction du flux et de l'encodage de caractères spécifiés, et permet éventuellement de laisser le flux ouvert.</summary>
      <param name="output">Flux de sortie.</param>
      <param name="encoding">Encodage des caractères à utiliser.</param>
      <param name="leaveOpen">
        <see langword="true" /> pour maintenir le flux ouvert après avoir supprimé l'objet <see cref="T:System.IO.BinaryWriter" /> ; sinon, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException">Le flux ne prend pas en charge l’écriture ou bien il est déjà fermé.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" /> ou <paramref name="encoding" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="P:System.IO.BinaryWriter.BaseStream">
      <summary>Obtient le flux sous-jacent de <see cref="T:System.IO.BinaryWriter" />.</summary>
      <returns>Flux sous-jacent associé à l'élément <see langword="BinaryWriter" />.</returns>
    </member>
    <member name="M:System.IO.BinaryWriter.Close">
      <summary>Ferme le <see cref="T:System.IO.BinaryWriter" /> actuel et le flux sous-jacent.</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.Dispose">
      <summary>Libère toutes les ressources utilisées par l'instance actuelle de la classe <see cref="T:System.IO.BinaryWriter" />.</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.Dispose(System.Boolean)">
      <summary>Libère les ressources non managées utilisées par <see cref="T:System.IO.BinaryWriter" /> et libère éventuellement les ressources managées.</summary>
      <param name="disposing">
        <see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour libérer uniquement les ressources non managées.</param>
    </member>
    <member name="M:System.IO.BinaryWriter.DisposeAsync">
      <summary>Libère de façon asynchrone toutes les ressources utilisées par l’instance actuelle de la classe <see cref="T:System.IO.BinaryWriter" />.</summary>
      <returns>Tâche qui représente l’opération de suppression asynchrone.</returns>
    </member>
    <member name="M:System.IO.BinaryWriter.Flush">
      <summary>Efface toutes les mémoires tampons pour le writer actuel et provoque l'écriture des données mises en mémoire tampon sur l'appareil sous-jacent.</summary>
    </member>
    <member name="F:System.IO.BinaryWriter.Null">
      <summary>Spécifie <see cref="T:System.IO.BinaryWriter" /> sans magasin de sauvegarde.</summary>
    </member>
    <member name="F:System.IO.BinaryWriter.OutStream">
      <summary>Contient le flux sous-jacent.</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.Seek(System.Int32,System.IO.SeekOrigin)">
      <summary>Définit la position dans le flux actuel.</summary>
      <param name="offset">Offset d'octet par rapport à <paramref name="origin" />.</param>
      <param name="origin">Champ de <see cref="T:System.IO.SeekOrigin" /> indiquant le point de référence à partir duquel la nouvelle position doit être obtenue.</param>
      <returns>Position dans le flux actuel.</returns>
      <exception cref="T:System.IO.IOException">Le pointeur de fichier a été déplacé vers un emplacement non valide.</exception>
      <exception cref="T:System.ArgumentException">La valeur <see cref="T:System.IO.SeekOrigin" /> n’est pas valide.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Boolean)">
      <summary>Écrit une valeur <see langword="Boolean" /> de 1 octet dans le flux actuel, 0 représentant <see langword="false" /> et 1 représentant <see langword="true" />.</summary>
      <param name="value">Valeur <see langword="Boolean" /> à écrire (0 ou 1).</param>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux est fermé.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Byte)">
      <summary>Écrit un octet non signé dans le flux actuel et avance la position du flux d’un octet.</summary>
      <param name="value">Octet non signé à écrire.</param>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux est fermé.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Byte[])">
      <summary>Écrit un tableau d’octets dans le flux sous-jacent.</summary>
      <param name="buffer">Tableau d’octets contenant les données à écrire.</param>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux est fermé.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Écrit une zone d’un tableau d’octets dans le flux actuel.</summary>
      <param name="buffer">Tableau d’octets contenant les données à écrire.</param>
      <param name="index">Index du premier octet à lire dans <paramref name="buffer" /> et à écrire dans le flux.</param>
      <param name="count">Nombre d’octets à lire dans <paramref name="buffer" /> et à écrire dans le flux.</param>
      <exception cref="T:System.ArgumentException">La longueur de la mémoire tampon moins <paramref name="index" /> est inférieure à <paramref name="count" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> ou <paramref name="count" /> est un nombre négatif.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux est fermé.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Char)">
      <summary>Écrit un caractère Unicode dans le flux actuel et avance la position actuelle du flux en fonction du <see langword="Encoding" /> utilisé et des caractères spécifiques en cours d’écriture dans le flux.</summary>
      <param name="ch">Caractère Unicode de non-substitution à écrire.</param>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux est fermé.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ch" /> est un caractère de substitution unique.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Char[])">
      <summary>Écrit un tableau de caractères dans le flux actuel et avance la position actuelle du flux en fonction du <see langword="Encoding" /> utilisé et des caractères spécifiques en cours d’écriture dans le flux.</summary>
      <param name="chars">Tableau de caractères contenant les données à écrire.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> construit par défaut est <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>Écrit dans le flux actuel une section d’un tableau de caractères et avance la position actuelle du flux en fonction du <see langword="Encoding" /> utilisé et éventuellement des caractères spécifiques écrits.</summary>
      <param name="chars">Tableau de caractères contenant les données à écrire.</param>
      <param name="index">Index du premier caractère à lire dans <paramref name="chars" /> et à écrire dans le flux.</param>
      <param name="count">Nombre de caractères à lire dans <paramref name="chars" /> et à écrire dans le flux.</param>
      <exception cref="T:System.ArgumentException">La longueur de la mémoire tampon moins <paramref name="index" /> est inférieure à <paramref name="count" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> ou <paramref name="count" /> est un nombre négatif.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux est fermé.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Decimal)">
      <summary>Écrit une valeur décimale dans le flux actuel et avance la position du flux de 16 octets.</summary>
      <param name="value">Valeur décimale à écrire.</param>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux est fermé.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Double)">
      <summary>Écrit une valeur à virgule flottante de 8 octets dans le flux actuel et avance la position du flux de 8 octets.</summary>
      <param name="value">Valeur à virgule flottante de 8 octets à écrire.</param>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux est fermé.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Int16)">
      <summary>Écrit un entier signé de 2 octets dans le flux actuel et avance la position du flux de 2 octets.</summary>
      <param name="value">Entier signé de 2 octets à écrire.</param>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux est fermé.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Int32)">
      <summary>Écrit un entier signé de 4 octets dans le flux actuel et avance la position du flux de 4 octets.</summary>
      <param name="value">Entier signé de 4 octets à écrire.</param>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux est fermé.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Int64)">
      <summary>Écrit un entier signé de 8 octets dans le flux actuel et avance la position du flux de 8 octets.</summary>
      <param name="value">Entier signé de 8 octets à écrire.</param>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux est fermé.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.ReadOnlySpan{System.Byte})">
      <summary>Écrit une plage d’octets dans le flux actuel.</summary>
      <param name="buffer">Plage d’octets à écrire.</param>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.ReadOnlySpan{System.Char})">
      <summary>Écrit une plage de caractères dans le flux actuel et avance la position actuelle du flux en fonction du <see langword="Encoding" /> utilisé et éventuellement des caractères spécifiques écrits dans le flux.</summary>
      <param name="chars">Plage de caractères à écrire.</param>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.SByte)">
      <summary>Écrit un octet signé dans le flux actuel et avance la position du flux d’un octet.</summary>
      <param name="value">Octet signé à écrire.</param>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux est fermé.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Single)">
      <summary>Écrit une valeur à virgule flottante de 4 octets dans le flux actuel et avance la position du flux de 4 octets.</summary>
      <param name="value">Valeur à virgule flottante de 4 octets à écrire.</param>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux est fermé.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.String)">
      <summary>Écrit dans ce flux une chaîne préfixée par sa longueur dans l’encodage actuel de <see cref="T:System.IO.BinaryWriter" /> et avance la position actuelle du flux en fonction de l’encodage utilisé et des caractères spécifiques écrits dans le flux.</summary>
      <param name="value">Valeur à écrire.</param>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux est fermé.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.UInt16)">
      <summary>Écrit un entier non signé de 2 octets dans le flux actuel et avance la position du flux de 2 octets.</summary>
      <param name="value">Entier non signé de 2 octets à écrire.</param>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux est fermé.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.UInt32)">
      <summary>Écrit un entier non signé de 4 octets dans le flux actuel et avance la position du flux de 4 octets.</summary>
      <param name="value">Entier non signé de 4 octets à écrire.</param>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux est fermé.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.UInt64)">
      <summary>Écrit un entier non signé de 8 octets dans le flux actuel et avance la position du flux de 8 octets.</summary>
      <param name="value">Entier non signé de 8 octets à écrire.</param>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux est fermé.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write7BitEncodedInt(System.Int32)">
      <summary>Écrit un nombre entier 32 bits dans un format compressé.</summary>
      <param name="value">Entier 32 bits à écrire.</param>
      <exception cref="T:System.IO.EndOfStreamException">La fin du flux est atteinte.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux est fermé.</exception>
      <exception cref="T:System.IO.IOException">Le flux est fermé.</exception>
    </member>
    <member name="T:System.IO.BufferedStream">
      <summary>Ajoute une couche de mise en mémoire tampon aux opérations de lecture et d’écriture sur un autre flux. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.IO.BufferedStream.#ctor(System.IO.Stream)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.BufferedStream" />, avec une taille de mémoire tampon par défaut égale à 4 096 octets.</summary>
      <param name="stream">Flux actuel.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.BufferedStream.#ctor(System.IO.Stream,System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.BufferedStream" /> avec la taille de mémoire tampon spécifiée.</summary>
      <param name="stream">Flux actuel.</param>
      <param name="bufferSize">Taille de la mémoire tampon en octets.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> est un nombre négatif.</exception>
    </member>
    <member name="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Débute une opération de lecture asynchrone. (Utilisez <see cref="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /> à la place.)</summary>
      <param name="buffer">Mémoire tampon dans laquelle lire les données.buffer</param>
      <param name="offset">Dans <paramref name="buffer" />, décalage d'octet auquel commencer l'écriture des données lues dans le flux.</param>
      <param name="count">Nombre maximal d'octets à lire.</param>
      <param name="callback">Rappel asynchrone facultatif, à appeler quand la lecture est terminée.</param>
      <param name="state">Objet fourni par l'utilisateur qui distingue cette requête de lecture asynchrone des autres requêtes.</param>
      <returns>Objet représentant la lecture asynchrone qui pourrait toujours être en attente.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> ou <paramref name="count" /> est un nombre négatif.</exception>
      <exception cref="T:System.IO.IOException">A tenté une lecture asynchrone au-delà de la fin du fichier du flux.</exception>
      <exception cref="T:System.ArgumentException">La longueur de la mémoire tampon moins <paramref name="offset" /> est inférieure à <paramref name="count" />.</exception>
      <exception cref="T:System.NotSupportedException">Le flux actuel ne prend pas en charge l’opération de lecture.</exception>
    </member>
    <member name="M:System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Débute une opération d'écriture asynchrone. (Utilisez <see cref="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /> à la place.)</summary>
      <param name="buffer">Mémoire tampon qui contient les données à écrire dans le flux actuel.</param>
      <param name="offset">Dans <paramref name="buffer" />, décalage d'octet de base zéro auquel commencer la copie des octets dans le flux actuel.</param>
      <param name="count">Nombre maximal d'octets à écrire.</param>
      <param name="callback">Méthode à appeler quand l'opération d'écriture asynchrone est terminée.</param>
      <param name="state">Objet fourni par l'utilisateur qui distingue cette requête d'écriture asynchrone des autres requêtes.</param>
      <returns>Objet qui référence l’écriture asynchrone qui pourrait toujours être en attente.</returns>
      <exception cref="T:System.ArgumentException">La longueur de <paramref name="buffer" /> moins <paramref name="offset" /> est inférieure à <paramref name="count" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> ou <paramref name="count" /> est un nombre négatif.</exception>
      <exception cref="T:System.NotSupportedException">Le flux ne prend pas en charge l'écriture.</exception>
    </member>
    <member name="P:System.IO.BufferedStream.BufferSize">
      <summary>Obtient la taille de la mémoire tampon en octets pour ce flux mis en mémoire tampon.</summary>
      <returns>Entier représentant la taille de la mémoire tampon en octets.</returns>
    </member>
    <member name="P:System.IO.BufferedStream.CanRead">
      <summary>Obtient une valeur indiquant si le flux actuel prend en charge la lecture.</summary>
      <returns>
        <see langword="true" /> si le flux prend en charge la lecture ; <see langword="false" /> si le flux est fermé ou a été ouvert avec un accès en écriture seule.</returns>
    </member>
    <member name="P:System.IO.BufferedStream.CanSeek">
      <summary>Obtient une valeur indiquant si le flux actuel prend en charge la recherche.</summary>
      <returns>
        <see langword="true" /> si le flux prend en charge la recherche ; <see langword="false" /> si le flux est fermé ou s'il a été construit à partir d'un handle de système d'exploitation tel qu'un canal ou une sortie console.</returns>
    </member>
    <member name="P:System.IO.BufferedStream.CanWrite">
      <summary>Obtient une valeur indiquant si le flux actuel prend en charge l'écriture.</summary>
      <returns>
        <see langword="true" /> si le flux prend en charge l'écriture ; <see langword="false" /> si le flux est fermé ou a été ouvert avec un accès en lecture seule.</returns>
    </member>
    <member name="M:System.IO.BufferedStream.CopyTo(System.IO.Stream,System.Int32)">
      <summary>Lit les octets du flux mis en mémoire tampon actuel et les écrit dans un autre flux.</summary>
      <param name="destination">Flux vers lequel le contenu du flux mis en mémoire tampon actuel sera copié.</param>
      <param name="bufferSize">Taille de la mémoire tampon. Cette valeur doit être supérieure à zéro. La taille par défaut est 81920.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> est négatif ou égal à zéro.</exception>
      <exception cref="T:System.NotSupportedException">Le flux actuel ne prend pas en charge la lecture.

ou -

<paramref name="destination" /> ne prend pas en charge l’écriture.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux actuel ou de <paramref name="destination" /> a été fermé avant l’appel de la méthode <see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" />.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d'E/S s'est produite.</exception>
    </member>
    <member name="M:System.IO.BufferedStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
      <summary>Lit de façon asynchrone les octets du flux mis en mémoire tampon actuel et les écrit dans un autre flux, en utilisant une taille de mémoire tampon et d’un jeton d’annulation spécifiés.</summary>
      <param name="destination">Flux vers lequel le contenu du flux mis en mémoire tampon actuel sera copié.</param>
      <param name="bufferSize">Taille en octets de la mémoire tampon. Cette valeur doit être supérieure à zéro. La taille par défaut est 81 920.</param>
      <param name="cancellationToken">Jeton pour surveiller les requêtes d'annulation. La valeur par défaut est <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Tâche qui représente l’opération de copie asynchrone.</returns>
    </member>
    <member name="M:System.IO.BufferedStream.DisposeAsync">
      <summary>Libère de façon asynchrone les ressources non managées utilisées par le flux mis en mémoire tampon.</summary>
      <returns>Tâche qui représente l’opération de suppression asynchrone.</returns>
    </member>
    <member name="M:System.IO.BufferedStream.EndRead(System.IAsyncResult)">
      <summary>Attend que l'opération de lecture asynchrone en attente se termine. (Utilisez <see cref="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /> à la place.)</summary>
      <param name="asyncResult">Référence à la requête asynchrone en attente qu'il faut attendre.</param>
      <returns>Nombre d'octets lus à partir du flux, entre zéro (0) et le nombre d'octets demandé. Les flux retournent uniquement 0 à la fin du flux, sinon ils devraient être bloqués jusqu’à ce qu’au moins 1 octet soit disponible.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Cet objet <see cref="T:System.IAsyncResult" /> n’a pas été créé en appelant <see cref="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> sur cette classe.</exception>
    </member>
    <member name="M:System.IO.BufferedStream.EndWrite(System.IAsyncResult)">
      <summary>Termine une opération d'écriture asynchrone et se bloque jusqu'à la fin de l'opération d'E/S. (Utilisez <see cref="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /> à la place.)</summary>
      <param name="asyncResult">Requête asynchrone en attente.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Cet objet <see cref="T:System.IAsyncResult" /> n’a pas été créé en appelant <see cref="M:System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> sur cette classe.</exception>
    </member>
    <member name="M:System.IO.BufferedStream.Flush">
      <summary>Efface toutes les mémoires tampons pour ce flux et provoque l’écriture des données mises en mémoire tampon sur l’appareil sous-jacent.</summary>
      <exception cref="T:System.ObjectDisposedException">Le flux a été supprimé.</exception>
      <exception cref="T:System.IO.IOException">La source de données ou le référentiel n’est pas ouvert.</exception>
    </member>
    <member name="M:System.IO.BufferedStream.FlushAsync(System.Threading.CancellationToken)">
      <summary>Efface de façon asynchrone toutes les mémoires tampons pour ce flux, provoque l'écriture des données mises en mémoire tampon sur l'appareil sous-jacent et surveille les requêtes d'annulation.</summary>
      <param name="cancellationToken">Jeton pour surveiller les requêtes d'annulation.</param>
      <returns>Tâche qui représente l’opération de vidage asynchrone.</returns>
      <exception cref="T:System.ObjectDisposedException">Le flux a été supprimé.</exception>
    </member>
    <member name="P:System.IO.BufferedStream.Length">
      <summary>Obtient la longueur du flux en octets.</summary>
      <returns>Longueur du flux en octets.</returns>
      <exception cref="T:System.IO.IOException">Le flux sous-jacent est <see langword="null" /> ou fermé.</exception>
      <exception cref="T:System.NotSupportedException">Le flux ne prend pas en charge la recherche.</exception>
      <exception cref="T:System.ObjectDisposedException">Des méthodes ont été appelées après la fermeture du flux.</exception>
    </member>
    <member name="P:System.IO.BufferedStream.Position">
      <summary>Obtient la position dans le flux actuel.</summary>
      <returns>Position dans le flux en cours.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">La valeur passée à <see cref="M:System.IO.BufferedStream.Seek(System.Int64,System.IO.SeekOrigin)" /> est négative.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S s’est produite, telle que la fermeture du flux.</exception>
      <exception cref="T:System.NotSupportedException">Le flux ne prend pas en charge la recherche.</exception>
      <exception cref="T:System.ObjectDisposedException">Des méthodes ont été appelées après la fermeture du flux.</exception>
    </member>
    <member name="M:System.IO.BufferedStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>Copie les octets du flux actuel figurant dans la mémoire tampon dans un tableau.</summary>
      <param name="array">Mémoire tampon dans laquelle les octets sont copiés.</param>
      <param name="offset">Dans la mémoire tampon, offset d’octet à partir duquel commence la lecture des octets.</param>
      <param name="count">Nombre d'octets à lire.</param>
      <returns>Nombre total d’octets lus dans <paramref name="array" />. Le total peut être inférieur au nombre d’octets demandé si ce nombre n’est pas actuellement disponible, ou il peut être égal à 0 si la fin du flux a été atteinte avant la lecture des données.</returns>
      <exception cref="T:System.ArgumentException">La longueur de <paramref name="array" /> moins <paramref name="offset" /> est inférieure à <paramref name="count" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> ou <paramref name="count" /> est un nombre négatif.</exception>
      <exception cref="T:System.IO.IOException">Le flux n’est pas ouvert ou bien il est <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Le flux ne prend pas en charge la lecture.</exception>
      <exception cref="T:System.ObjectDisposedException">Des méthodes ont été appelées après la fermeture du flux.</exception>
    </member>
    <member name="M:System.IO.BufferedStream.Read(System.Span{System.Byte})">
      <summary>Copie les octets depuis le flux mis en mémoire tampon actuel dans une plage d’octets et avance la position dans ce flux du nombre d’octets lus.</summary>
      <param name="destination">Région de la mémoire. Quand cette méthode est retournée, le contenu de cette région est remplacé par les octets lus dans la source actuelle.</param>
      <returns>Nombre total d'octets lus dans la mémoire tampon. Le nombre d’octets peut être inférieur au nombre d’octets alloués dans la mémoire tampon si ce nombre d’octets n’est pas actuellement disponible, ou égal à zéro (0) si la fin du flux a été atteinte.</returns>
    </member>
    <member name="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>Lit de façon asynchrone une séquence d'octets dans le flux actuel, avance la position dans le flux du nombre d'octets lus et surveille les demandes d'annulation.</summary>
      <param name="buffer">Mémoire tampon où écrire les données.</param>
      <param name="offset">Dans <paramref name="buffer" />, décalage d'octet auquel commencer l'écriture des données à partir du flux.</param>
      <param name="count">Nombre maximal d'octets à lire.</param>
      <param name="cancellationToken">Jeton pour surveiller les requêtes d'annulation.</param>
      <returns>Tâche qui représente l'opération de lecture asynchrone. La valeur du paramètre <paramref name="TResult" /> contient le nombre total d'octets lus dans la mémoire tampon. La valeur du résultat peut être inférieure au nombre d'octets demandés si le nombre d'octets actuellement disponibles est inférieur au nombre demandé, ou elle peut avoir la valeur 0 (zéro) si la fin du flux a été atteinte.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> ou <paramref name="count" /> est un nombre négatif.</exception>
      <exception cref="T:System.ArgumentException">La somme de <paramref name="offset" /> et <paramref name="count" /> est supérieure à la longueur de la mémoire tampon.</exception>
      <exception cref="T:System.NotSupportedException">Le flux ne prend pas en charge la lecture.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux a été supprimé.</exception>
      <exception cref="T:System.InvalidOperationException">Le flux est actuellement utilisé par une opération de lecture antérieure.</exception>
    </member>
    <member name="M:System.IO.BufferedStream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)">
      <summary>Lit de façon asynchrone une séquence d’octets dans le flux mis en mémoire tampon actuel et avance la position dans ce flux du nombre d’octets lus.</summary>
      <param name="buffer">Région de la mémoire dans laquelle les données doivent être écrites.</param>
      <param name="cancellationToken">Jeton pour surveiller les requêtes d'annulation. La valeur par défaut est <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Tâche qui représente l'opération de lecture asynchrone. La valeur de sa propriété <see cref="P:System.Threading.Tasks.ValueTask`1.Result" /> contient le nombre total d’octets lus dans la mémoire tampon. La valeur de résultat peut être inférieure au nombre d’octets alloués dans la mémoire tampon si ce nombre d’octets n’est pas actuellement disponible, ou égale à 0 (zéro) si la fin du flux a été atteinte.</returns>
    </member>
    <member name="M:System.IO.BufferedStream.ReadByte">
      <summary>Lit un octet dans le flux sous-jacent et retourne un octet casté en <see langword="int" />, ou retourne -1 en cas de lecture à partir de la fin du flux.</summary>
      <returns>Octet casté en <see langword="int" /> ou en -1 en cas de lecture à partir de la fin du flux.</returns>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S s’est produite, telle que la fermeture du flux.</exception>
      <exception cref="T:System.NotSupportedException">Le flux ne prend pas en charge la lecture.</exception>
      <exception cref="T:System.ObjectDisposedException">Des méthodes ont été appelées après la fermeture du flux.</exception>
    </member>
    <member name="M:System.IO.BufferedStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>Définit la position dans le flux actuel mis en mémoire tampon.</summary>
      <param name="offset">Offset d'octet par rapport à <paramref name="origin" />.</param>
      <param name="origin">Valeur de type <see cref="T:System.IO.SeekOrigin" /> indiquant le point de référence à partir duquel la nouvelle position est obtenue.</param>
      <returns>Nouvelle position dans le flux actuel mis en mémoire tampon.</returns>
      <exception cref="T:System.IO.IOException">Le flux n’est pas ouvert ou bien il est <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Le flux ne prend pas en charge la recherche.</exception>
      <exception cref="T:System.ObjectDisposedException">Des méthodes ont été appelées après la fermeture du flux.</exception>
    </member>
    <member name="M:System.IO.BufferedStream.SetLength(System.Int64)">
      <summary>Définit la longueur du flux mis en mémoire tampon.</summary>
      <param name="value">Entier indiquant la longueur (en octets) requise pour le flux actuel mis en mémoire tampon.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> est un nombre négatif.</exception>
      <exception cref="T:System.IO.IOException">Le flux n’est pas ouvert ou bien il est <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Le flux ne prend pas en charge l’écriture et la recherche.</exception>
      <exception cref="T:System.ObjectDisposedException">Des méthodes ont été appelées après la fermeture du flux.</exception>
    </member>
    <member name="P:System.IO.BufferedStream.UnderlyingStream">
      <summary>Obtient l’instance <see cref="T:System.IO.Stream" /> sous-jacente pour ce flux mis en mémoire tampon.</summary>
      <returns>Instance de flux sous-jacente.</returns>
    </member>
    <member name="M:System.IO.BufferedStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Copie les octets dans le flux mis en mémoire tampon et avance la position actuelle dans ce flux du nombre d’octets écrits.</summary>
      <param name="array">Tableau d'octets à partir duquel <paramref name="count" /> octets sont copiés vers le flux en cours mis en mémoire tampon.</param>
      <param name="offset">Dans la mémoire tampon, offset à partir duquel commence la copie des octets dans le flux actuel mis en mémoire tampon.</param>
      <param name="count">Nombre d’octets à écrire dans le flux actuel mis en mémoire tampon.</param>
      <exception cref="T:System.ArgumentException">La longueur de <paramref name="array" /> moins <paramref name="offset" /> est inférieure à <paramref name="count" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> ou <paramref name="count" /> est un nombre négatif.</exception>
      <exception cref="T:System.IO.IOException">Le flux est fermé ou <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Le flux ne prend pas en charge l'écriture.</exception>
      <exception cref="T:System.ObjectDisposedException">Des méthodes ont été appelées après la fermeture du flux.</exception>
    </member>
    <member name="M:System.IO.BufferedStream.Write(System.ReadOnlySpan{System.Byte})">
      <summary>Écrit une séquence d’octets dans le flux mis en mémoire tampon actuel et avance la position actuelle dans ce flux du nombre d’octets écrits.</summary>
      <param name="buffer">Région de la mémoire. Cette méthode copie le contenu de cette région dans le flux mis en mémoire tampon actuel.</param>
    </member>
    <member name="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>Écrit de façon asynchrone une séquence d'octets dans le flux actuel, avance la position actuelle dans ce flux du nombre d'octets écrits et surveille les demandes d'annulation.</summary>
      <param name="buffer">Mémoire tampon dont sont issues les données à écrire.</param>
      <param name="offset">Dans <paramref name="buffer" />, décalage d'octet de base zéro à partir duquel commencer la copie des octets dans le flux.</param>
      <param name="count">Nombre maximal d'octets à écrire.</param>
      <param name="cancellationToken">Jeton pour surveiller les requêtes d'annulation.</param>
      <returns>Tâche qui représente l’opération d’écriture asynchrone.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> ou <paramref name="count" /> est un nombre négatif.</exception>
      <exception cref="T:System.ArgumentException">La somme de <paramref name="offset" /> et <paramref name="count" /> est supérieure à la longueur de la mémoire tampon.</exception>
      <exception cref="T:System.NotSupportedException">Le flux ne prend pas en charge l'écriture.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux a été supprimé.</exception>
      <exception cref="T:System.InvalidOperationException">Le flux est actuellement utilisé par une opération d’écriture précédente.</exception>
    </member>
    <member name="M:System.IO.BufferedStream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
      <summary>Écrit de façon asynchrone une séquence d’octets dans le flux mis en mémoire tampon actuel, avance la position actuelle dans ce flux du nombre d’octets écrits et supervise les demandes d’annulation.</summary>
      <param name="buffer">Région de la mémoire dont sont issues les données à écrire.</param>
      <param name="cancellationToken">Jeton pour surveiller les requêtes d'annulation. La valeur par défaut est <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Tâche qui représente l’opération d’écriture asynchrone.</returns>
    </member>
    <member name="M:System.IO.BufferedStream.WriteByte(System.Byte)">
      <summary>Écrit un octet à la position actuelle dans le flux mis en mémoire tampon.</summary>
      <param name="value">Octet à écrire dans le flux.</param>
      <exception cref="T:System.NotSupportedException">Le flux ne prend pas en charge l'écriture.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Des méthodes ont été appelées après la fermeture du flux.</exception>
    </member>
    <member name="T:System.IO.EndOfStreamException">
      <summary>Exception levée en cas de tentative de lecture au-delà de la fin du flux.</summary>
    </member>
    <member name="M:System.IO.EndOfStreamException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.EndOfStreamException" /> dont la chaîne de message correspond à un message fourni par le système et HRESULT équivaut à COR_E_ENDOFSTREAM.</summary>
    </member>
    <member name="M:System.IO.EndOfStreamException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.EndOfStreamException" /> avec les informations de sérialisation et de contexte spécifiées.</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> qui contient les données d'objet sérialisées concernant l'exception levée.</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> qui contient des informations contextuelles relatives à la source ou à la destination.</param>
    </member>
    <member name="M:System.IO.EndOfStreamException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.EndOfStreamException" /> dont la chaîne de message correspond à <paramref name="message" /> et HRESULT équivaut à COR_E_ENDOFSTREAM.</summary>
      <param name="message">Chaîne qui décrit l'erreur. Le contenu du <paramref name="message" /> doit être compréhensible pour les utilisateurs. L'appelant de ce constructeur doit vérifier que cette chaîne a été localisée pour la culture en cours du système.</param>
    </member>
    <member name="M:System.IO.EndOfStreamException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.EndOfStreamException" /> avec un message d'erreur spécifié et une référence à l'exception interne ayant provoqué cette exception.</summary>
      <param name="message">Chaîne qui décrit l'erreur. Le contenu du <paramref name="message" /> doit être compréhensible pour les utilisateurs. L'appelant de ce constructeur doit vérifier que cette chaîne a été localisée pour la culture en cours du système.</param>
      <param name="innerException">Exception ayant provoqué l'exception actuelle. Si le paramètre <paramref name="innerException" /> n'est pas <see langword="null" />, l'exception actuelle est levée dans un bloc <see langword="catch" /> qui gère l'exception interne.</param>
    </member>
    <member name="T:System.IO.InvalidDataException">
      <summary>Exception qui est levée lorsque le format d'un flux de données n'est pas valide.</summary>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.InvalidDataException" />.</summary>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.InvalidDataException" /> avec un message d'erreur spécifié.</summary>
      <param name="message">Message d'erreur qui explique la raison de l'exception.</param>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.InvalidDataException" /> avec une référence à l’exception interne qui est la cause de cette exception.</summary>
      <param name="message">Message d'erreur qui explique la raison de l'exception.</param>
      <param name="innerException">Exception ayant provoqué l'exception actuelle. Si le paramètre <paramref name="innerException" /> n'est pas <see langword="null" />, l'exception actuelle est levée dans un bloc <see langword="catch" /> qui gère l'exception interne.</param>
    </member>
    <member name="T:System.IO.MemoryStream">
      <summary>Crée un flux ayant pour mémoire un magasin de sauvegarde.</summary>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.MemoryStream" /> avec une capacité extensible initialisée à la valeur zéro.</summary>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[])">
      <summary>Initialise une nouvelle instance non redimensionnable de la classe <see cref="T:System.IO.MemoryStream" /> en fonction du tableau d'octets spécifié.</summary>
      <param name="buffer">Tableau d'octets non signés à partir duquel créer le flux actuel.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Boolean)">
      <summary>Initialise une nouvelle instance non redimensionnable de la classe <see cref="T:System.IO.MemoryStream" /> en fonction du tableau d'octets spécifié, avec la propriété <see cref="P:System.IO.MemoryStream.CanWrite" /> spécifiée.</summary>
      <param name="buffer">Tableau d'octets non signés à partir duquel créer ce flux.</param>
      <param name="writable">Définition de la propriété <see cref="P:System.IO.MemoryStream.CanWrite" />, qui détermine si le flux prend en charge l'écriture.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32)">
      <summary>Initialise une nouvelle instance non redimensionnable de la classe <see cref="T:System.IO.MemoryStream" /> en fonction de la région (index) spécifiée d'un tableau d'octets.</summary>
      <param name="buffer">Tableau d'octets non signés à partir duquel créer ce flux.</param>
      <param name="index">Index de <paramref name="buffer" /> à partir duquel commence le flux.</param>
      <param name="count">Longueur du flux en octets.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> ou <paramref name="count" /> est inférieur à zéro.</exception>
      <exception cref="T:System.ArgumentException">La longueur de la mémoire tampon moins <paramref name="index" /> est inférieure à <paramref name="count" />.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)">
      <summary>Initialise une nouvelle instance non redimensionnable de la classe <see cref="T:System.IO.MemoryStream" /> en fonction de la région spécifiée d'un tableau d'octets, avec la propriété <see cref="P:System.IO.MemoryStream.CanWrite" /> spécifiée.</summary>
      <param name="buffer">Tableau d'octets non signés à partir duquel créer ce flux.</param>
      <param name="index">Index de <paramref name="buffer" /> à partir duquel commence le flux.</param>
      <param name="count">Longueur du flux en octets.</param>
      <param name="writable">Définition de la propriété <see cref="P:System.IO.MemoryStream.CanWrite" />, qui détermine si le flux prend en charge l'écriture.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> ou <paramref name="count" /> est négatif.</exception>
      <exception cref="T:System.ArgumentException">La longueur de la mémoire tampon moins <paramref name="index" /> est inférieure à <paramref name="count" />.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.MemoryStream" /> en fonction de la région spécifiée d'un tableau d'octets, avec la propriété <see cref="P:System.IO.MemoryStream.CanWrite" /> spécifiée et la possibilité d'appeler <see cref="M:System.IO.MemoryStream.GetBuffer" />, comme spécifié.</summary>
      <param name="buffer">Tableau d'octets non signés à partir duquel créer ce flux.</param>
      <param name="index">Index de <paramref name="buffer" /> à partir duquel commence le flux.</param>
      <param name="count">Longueur du flux en octets.</param>
      <param name="writable">Définition de la propriété <see cref="P:System.IO.MemoryStream.CanWrite" />, qui détermine si le flux prend en charge l'écriture.</param>
      <param name="publiclyVisible">
        <see langword="true" /> pour activer <see cref="M:System.IO.MemoryStream.GetBuffer" />, qui retourne le tableau d'octets non signés à partir duquel le flux a été créé ; sinon <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> ou <paramref name="count" /> est un nombre négatif.</exception>
      <exception cref="T:System.ArgumentException">La longueur de la mémoire tampon moins <paramref name="index" /> est inférieure à <paramref name="count" />.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.MemoryStream" /> avec une capacité extensible initialisée à la valeur spécifiée.</summary>
      <param name="capacity">Taille initiale du tableau interne, en octets.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> est un nombre négatif.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <param name="buffer" />
      <param name="offset" />
      <param name="count" />
      <param name="callback" />
      <param name="state" />
    </member>
    <member name="M:System.IO.MemoryStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <param name="buffer" />
      <param name="offset" />
      <param name="count" />
      <param name="callback" />
      <param name="state" />
    </member>
    <member name="P:System.IO.MemoryStream.CanRead">
      <summary>Obtient une valeur indiquant si le flux actuel prend en charge la lecture.</summary>
      <returns>
        <see langword="true" /> si le flux est ouvert.</returns>
    </member>
    <member name="P:System.IO.MemoryStream.CanSeek">
      <summary>Obtient une valeur indiquant si le flux actuel prend en charge la recherche.</summary>
      <returns>
        <see langword="true" /> si le flux est ouvert.</returns>
    </member>
    <member name="P:System.IO.MemoryStream.CanWrite">
      <summary>Obtient une valeur indiquant si le flux actuel prend en charge l'écriture.</summary>
      <returns>
        <see langword="true" /> si le flux prend en charge l'écriture ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.IO.MemoryStream.Capacity">
      <summary>Obtient ou définit le nombre d'octets alloués à ce flux.</summary>
      <returns>Longueur de la portion de la mémoire tampon qui peut être utilisée pour le flux.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">La capacité définie est négative ou inférieure à la longueur actuelle du flux.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux actuel est fermé.</exception>
      <exception cref="T:System.NotSupportedException">
        <see langword="set" /> est appelé sur un flux dont la capacité ne peut pas être modifiée.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.CopyTo(System.IO.Stream,System.Int32)">
      <param name="destination" />
      <param name="bufferSize" />
    </member>
    <member name="M:System.IO.MemoryStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
      <summary>Lit de façon asynchrone tous les octets du flux actuel et les écrit dans un autre flux, à l'aide d'une taille de mémoire tampon et d'un jeton d'annulation spécifiés.</summary>
      <param name="destination">Flux vers lequel le contenu du flux actuel sera copié.</param>
      <param name="bufferSize">Taille en octets de la mémoire tampon. Cette valeur doit être supérieure à zéro.</param>
      <param name="cancellationToken">Jeton pour surveiller les requêtes d'annulation.</param>
      <returns>Tâche qui représente l’opération de copie asynchrone.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="buffersize" /> est négatif ou égal à zéro.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux de données actuel ou le flux de données de destination est supprimé.</exception>
      <exception cref="T:System.NotSupportedException">Le flux de données actuel ne prend pas en charge la lecture, ou le flux de données de destination ne prend pas en charge l’écriture.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.Dispose(System.Boolean)">
      <summary>Libère les ressources non managées utilisées par la classe <see cref="T:System.IO.MemoryStream" /> et libère éventuellement les ressources managées.</summary>
      <param name="disposing">
        <see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour libérer uniquement les ressources non managées.</param>
    </member>
    <member name="M:System.IO.MemoryStream.EndRead(System.IAsyncResult)">
      <param name="asyncResult" />
    </member>
    <member name="M:System.IO.MemoryStream.EndWrite(System.IAsyncResult)">
      <param name="asyncResult" />
    </member>
    <member name="M:System.IO.MemoryStream.Flush">
      <summary>Remplace la méthode <see cref="M:System.IO.Stream.Flush" /> afin qu'aucune action ne soit effectuée.</summary>
    </member>
    <member name="M:System.IO.MemoryStream.FlushAsync(System.Threading.CancellationToken)">
      <summary>Efface de façon asynchrone toutes les mémoires tampons du flux et surveille les demandes d'annulation.</summary>
      <param name="cancellationToken">Jeton pour surveiller les requêtes d'annulation.</param>
      <returns>Tâche qui représente l’opération de vidage asynchrone.</returns>
      <exception cref="T:System.ObjectDisposedException">Le flux a été supprimé.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.GetBuffer">
      <summary>Retourne le tableau d'octets non signés à partir duquel ce flux a été créé.</summary>
      <returns>Tableau d'octets à partir duquel ce flux a été créé, ou le tableau sous-jacent si aucun tableau d'octets n'a été fourni au constructeur <see cref="T:System.IO.MemoryStream" /> pendant la construction de l'instance actuelle.</returns>
      <exception cref="T:System.UnauthorizedAccessException">L’instance <see langword="MemoryStream" /> n’a pas été créée avec une mémoire tampon visible publiquement.</exception>
    </member>
    <member name="P:System.IO.MemoryStream.Length">
      <summary>Obtient la longueur du flux en octets.</summary>
      <returns>Longueur du flux en octets.</returns>
      <exception cref="T:System.ObjectDisposedException">Le flux est fermé.</exception>
    </member>
    <member name="P:System.IO.MemoryStream.Position">
      <summary>Obtient ou définit la position actuelle dans le flux.</summary>
      <returns>Position actuelle dans le flux.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">La position correspond à une valeur négative ou à une valeur supérieure à <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux est fermé.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>Lit un bloc d'octets à partir du flux actuel et écrit les données dans une mémoire tampon.</summary>
      <param name="buffer">Quand cette méthode est retournée, contient le tableau d’octets spécifié dont les valeurs comprises entre <paramref name="offset" /> et (<paramref name="offset" /> + <paramref name="count" /> - 1) sont remplacées par les caractères lus dans le flux actuel.</param>
      <param name="offset">Dans <paramref name="buffer" />, offset d'octet de base zéro d'où commencer le stockage des données à partir du flux actuel.</param>
      <param name="count">Nombre maximal d'octets à lire.</param>
      <returns>Nombre total d'octets écrits dans la mémoire tampon. Ce total peut être inférieur au nombre d'octets demandé si ce nombre n'est pas actuellement disponible, ou égal à zéro si la fin du flux a été atteinte avant la lecture d'un octet.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> ou <paramref name="count" /> est un nombre négatif.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> soustrait de la longueur de la mémoire tampon est inférieur à <paramref name="count" />.</exception>
      <exception cref="T:System.ObjectDisposedException">L’instance du flux actuel est fermée.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.Read(System.Span{System.Byte})">
      <param name="destination" />
    </member>
    <member name="M:System.IO.MemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>Lit de façon asynchrone une séquence d'octets dans le flux actuel, avance la position dans le flux du nombre d'octets lus et surveille les demandes d'annulation.</summary>
      <param name="buffer">Mémoire tampon où écrire les données.</param>
      <param name="offset">Dans <paramref name="buffer" />, décalage d'octet auquel commencer l'écriture des données à partir du flux.</param>
      <param name="count">Nombre maximal d'octets à lire.</param>
      <param name="cancellationToken">Jeton pour surveiller les requêtes d'annulation. La valeur par défaut est <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Tâche qui représente l'opération de lecture asynchrone. La valeur du paramètre <paramref name="TResult" /> contient le nombre total d'octets lus dans la mémoire tampon. La valeur du résultat peut être inférieure au nombre d'octets demandés si le nombre d'octets actuellement disponibles est inférieur au nombre demandé, ou elle peut avoir la valeur 0 (zéro) si la fin du flux a été atteinte.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> ou <paramref name="count" /> est un nombre négatif.</exception>
      <exception cref="T:System.ArgumentException">La somme de <paramref name="offset" /> et <paramref name="count" /> est supérieure à la longueur de la mémoire tampon.</exception>
      <exception cref="T:System.NotSupportedException">Le flux ne prend pas en charge la lecture.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux a été supprimé.</exception>
      <exception cref="T:System.InvalidOperationException">Le flux est actuellement utilisé par une opération de lecture antérieure.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)">
      <param name="destination" />
      <param name="cancellationToken" />
    </member>
    <member name="M:System.IO.MemoryStream.ReadByte">
      <summary>Lit un octet à partir du flux actuel.</summary>
      <returns>Octet casté en <see cref="T:System.Int32" /> ou en -1 si la fin du flux est atteinte.</returns>
      <exception cref="T:System.ObjectDisposedException">L’instance du flux actuel est fermée.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>Assigne la position dans le flux actuel à la valeur spécifiée.</summary>
      <param name="offset">Nouvelle position dans le flux. Elle est fonction du paramètre <paramref name="loc" /> et peut être positive ou négative.</param>
      <param name="loc">Valeur de type <see cref="T:System.IO.SeekOrigin" /> qui sert de point de référence de la recherche.</param>
      <returns>Nouvelle position dans le flux, calculée en associant le point de référence initial et l'offset.</returns>
      <exception cref="T:System.IO.IOException">Tentative de recherche avant le début du flux.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> est supérieur à <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.ArgumentException">Un <see cref="T:System.IO.SeekOrigin" /> n’est pas valide.  

ou - 
<paramref name="offset" /> a entraîné un débordement arithmétique.</exception>
      <exception cref="T:System.ObjectDisposedException">L’instance du flux actuel est fermée.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.SetLength(System.Int64)">
      <summary>Assigne la longueur du flux actuel à la valeur spécifiée.</summary>
      <param name="value">La valeur à assigner à la longueur.</param>
      <exception cref="T:System.NotSupportedException">Le flux actuel n’est pas redimensionnable et <paramref name="value" /> est supérieur à la capacité actuelle.  

ou - 
Le flux actuel ne prend pas en charge l’écriture.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> est négatif ou supérieur à la longueur maximale de <see cref="T:System.IO.MemoryStream" />, où la longueur maximale est (<see cref="F:System.Int32.MaxValue" /> - origine), et l’origine est l’index dans la mémoire tampon sous-jacente auquel commence le flux.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.ToArray">
      <summary>Écrit le contenu du flux dans un tableau d'octets, quelle que soit la propriété <see cref="P:System.IO.MemoryStream.Position" />.</summary>
      <returns>Nouveau tableau d'octets.</returns>
    </member>
    <member name="M:System.IO.MemoryStream.TryGetBuffer(System.ArraySegment{System.Byte}@)">
      <summary>Retourne le tableau d'octets non signés à partir duquel ce flux a été créé. La valeur de retour indique si la conversion a réussi.</summary>
      <param name="buffer">Segment de tableau d’octets à partir duquel ce flux a été créé.</param>
      <returns>
        <see langword="true" /> si la conversion a réussi ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Écrit un bloc d'octets dans le flux actuel en utilisant des données lues dans une mémoire tampon.</summary>
      <param name="buffer">Mémoire tampon dont sont issues les données à écrire.</param>
      <param name="offset">Dans <paramref name="buffer" />, décalage d'octet de base zéro auquel commencer la copie des octets dans le flux actuel.</param>
      <param name="count">Nombre maximal d'octets à écrire.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Le flux ne prend pas en charge l'écriture. Pour plus d’informations, consultez <see cref="P:System.IO.Stream.CanWrite" />.  

ou - 
La position actuelle est à moins de <paramref name="count" /> octets de la fin du flux et la capacité ne peut pas être modifiée.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> soustrait de la longueur de la mémoire tampon est inférieur à <paramref name="count" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> ou <paramref name="count" /> est négatif.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
      <exception cref="T:System.ObjectDisposedException">L’instance du flux actuel est fermée.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.Write(System.ReadOnlySpan{System.Byte})">
      <param name="source" />
    </member>
    <member name="M:System.IO.MemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>Écrit de façon asynchrone une séquence d'octets dans le flux actuel, avance la position actuelle dans ce flux du nombre d'octets écrits et surveille les demandes d'annulation.</summary>
      <param name="buffer">Mémoire tampon dont sont issues les données à écrire.</param>
      <param name="offset">Dans <paramref name="buffer" />, décalage d'octet de base zéro à partir duquel commencer la copie des octets dans le flux.</param>
      <param name="count">Nombre maximal d'octets à écrire.</param>
      <param name="cancellationToken">Jeton pour surveiller les requêtes d'annulation. La valeur par défaut est <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Tâche qui représente l’opération d’écriture asynchrone.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> ou <paramref name="count" /> est un nombre négatif.</exception>
      <exception cref="T:System.ArgumentException">La somme de <paramref name="offset" /> et <paramref name="count" /> est supérieure à la longueur de la mémoire tampon.</exception>
      <exception cref="T:System.NotSupportedException">Le flux ne prend pas en charge l'écriture.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux a été supprimé.</exception>
      <exception cref="T:System.InvalidOperationException">Le flux est actuellement utilisé par une opération d’écriture précédente.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
      <param name="source" />
      <param name="cancellationToken" />
    </member>
    <member name="M:System.IO.MemoryStream.WriteByte(System.Byte)">
      <summary>Écrit un octet à la position actuelle dans le flux actuel.</summary>
      <param name="value">Octet à écrire.</param>
      <exception cref="T:System.NotSupportedException">Le flux ne prend pas en charge l'écriture. Pour plus d’informations, consultez <see cref="P:System.IO.Stream.CanWrite" />.  

ou - 
La position actuelle est à la fin du flux et la capacité ne peut pas être modifiée.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux actuel est fermé.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.WriteTo(System.IO.Stream)">
      <summary>Écrit le contenu complet de ce flux de mémoire dans un autre flux.</summary>
      <param name="stream">Flux dans lequel écrire ce flux de mémoire.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux en cours ou le flux cible est fermé.</exception>
    </member>
    <member name="T:System.IO.Path">
      <summary>Effectue des opérations sur des instances de <see cref="T:System.String" /> qui contiennent des informations relatives au chemin d'accès d'un fichier ou d'un répertoire. Ces opérations sont effectuées différemment selon la plateforme.</summary>
    </member>
    <member name="F:System.IO.Path.AltDirectorySeparatorChar">
      <summary>Fournit un caractère de remplacement spécifique à la plateforme, utilisé pour séparer les niveaux de répertoire dans une chaîne de chemin d'accès qui reflète une organisation de système de fichiers hiérarchique.</summary>
    </member>
    <member name="M:System.IO.Path.ChangeExtension(System.String,System.String)">
      <summary>Modifie l'extension d'une chaîne de chemin d'accès.</summary>
      <param name="path">Informations relatives au chemin d’accès à modifier. Le chemin d'accès ne peut contenir aucun des caractères définis dans <see cref="M:System.IO.Path.GetInvalidPathChars" />.</param>
      <param name="extension">Nouvelle extension (avec ou sans point de début). Spécifiez <see langword="null" /> pour supprimer une extension existante de <paramref name="path" />.</param>
      <returns>Informations relatives au chemin d'accès modifiées.  
Sur les plateformes de bureau Windows, si <paramref name="path" /> est <see langword="null" /> ou est une chaîne vide (""), les informations relatives au chemin d’accès sont retournées inchangées. Si <paramref name="extension" /> est <see langword="null" />, la chaîne retournée contient le chemin d'accès spécifié avec l'extension supprimée. Si <paramref name="path" /> ne possède pas d’extension et si <paramref name="extension" /> n’est pas <see langword="null" />, la chaîne du chemin d’accès retournée contient <paramref name="extension" />, ajouté à la fin de <paramref name="path" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> contient un ou plusieurs caractères non valides définis dans <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
    </member>
    <member name="M:System.IO.Path.Combine(System.String,System.String)">
      <summary>Combine deux chaînes en un chemin d’accès.</summary>
      <param name="path1">Premier chemin d'accès à combiner.</param>
      <param name="path2">Deuxième chemin d'accès à combiner.</param>
      <returns>Chemins d'accès combinés. Si un des chemins d'accès spécifiés est une chaîne de longueur zéro, cette méthode retourne l'autre chemin d'accès. Si <paramref name="path2" /> contient un chemin d’accès absolu, cette méthode retourne <paramref name="path2" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path1" /> ou <paramref name="path2" /> contient un ou plusieurs caractères non valides définis dans <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path1" /> ou <paramref name="path2" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.Path.Combine(System.String,System.String,System.String)">
      <summary>Combine trois chaînes en un chemin d'accès.</summary>
      <param name="path1">Premier chemin d'accès à combiner.</param>
      <param name="path2">Deuxième chemin d'accès à combiner.</param>
      <param name="path3">Troisième chemin d'accès à combiner.</param>
      <returns>Chemins d'accès combinés.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path1" />, <paramref name="path2" /> ou <paramref name="path3" /> contient un ou plusieurs caractères non valides définis dans <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path1" />, <paramref name="path2" /> ou <paramref name="path3" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.Path.Combine(System.String,System.String,System.String,System.String)">
      <summary>Combine quatre chaînes en un chemin d'accès.</summary>
      <param name="path1">Premier chemin d'accès à combiner.</param>
      <param name="path2">Deuxième chemin d'accès à combiner.</param>
      <param name="path3">Troisième chemin d'accès à combiner.</param>
      <param name="path4">Quatrième chemin d'accès à combiner.</param>
      <returns>Chemins d'accès combinés.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path1" />, <paramref name="path2" />, <paramref name="path3" /> ou <paramref name="path4" /> contient un ou plusieurs caractères non valides définis dans <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path1" />, <paramref name="path2" />, <paramref name="path3" /> ou <paramref name="path4" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.Path.Combine(System.String[])">
      <summary>Combine un tableau de chaînes en un chemin d’accès.</summary>
      <param name="paths">Tableau de parties du chemin d’accès.</param>
      <returns>Chemins d'accès combinés.</returns>
      <exception cref="T:System.ArgumentException">L’une des chaînes du tableau contient un ou plusieurs des caractères non valides définis dans <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
      <exception cref="T:System.ArgumentNullException">L’une des chaînes du tableau est <see langword="null" />.</exception>
    </member>
    <member name="F:System.IO.Path.DirectorySeparatorChar">
      <summary>Fournit un caractère spécifique à la plateforme, utilisé pour séparer les niveaux de répertoire dans une chaîne de chemin d'accès qui reflète une organisation de système de fichiers hiérarchique.</summary>
    </member>
    <member name="M:System.IO.Path.EndsInDirectorySeparator(System.ReadOnlySpan{System.Char})">
      <summary>Retourne une valeur qui indique si le chemin d’accès, spécifié sous la forme d’une étendue en lecture seule, se termine par un séparateur de répertoire.</summary>
      <param name="path">Chemin d’accès à analyser.</param>
      <returns>
        <see langword="true" /> si le chemin d’accès se termine par un séparateur de répertoire ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.IO.Path.EndsInDirectorySeparator(System.String)">
      <summary>Retourne une valeur qui indique si le chemin d’accès spécifié se termine par un séparateur de répertoire.</summary>
      <param name="path">Chemin d’accès à analyser.</param>
      <returns>
        <see langword="true" /> si le chemin d’accès se termine par un séparateur de répertoire ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.IO.Path.GetDirectoryName(System.ReadOnlySpan{System.Char})">
      <summary>Renvoie les informations relatives au répertoire pour le chemin spécifié représenté par une étendue de caractères.</summary>
      <param name="path">Chemin d’accès à partir duquel récupérer les informations de répertoire.</param>
      <returns>Informations relatives au répertoire pour <paramref name="path" />, ou une étendue vide si <paramref name="path" /> correspond à <see langword="null" />, à une étendue vide ou à une racine (telle que , C: ou \serveur\partage).</returns>
    </member>
    <member name="M:System.IO.Path.GetDirectoryName(System.String)">
      <summary>Retourne les informations relatives au répertoire pour la chaîne de chemin d’accès spécifiée.</summary>
      <param name="path">Chemin d’accès d’un fichier ou d’un répertoire.</param>
      <returns>Informations relatives au répertoire pour <paramref name="path" />, ou <see langword="null" /> si <paramref name="path" /> indique un répertoire racine ou est null. Retourne un élément <see cref="F:System.String.Empty" /> si <paramref name="path" /> ne contient pas d'informations relatives au répertoire.</returns>
      <exception cref="T:System.ArgumentException">Le paramètre <paramref name="path" /> est vide, contient seulement des espaces blancs ou contient des caractères non valides.</exception>
      <exception cref="T:System.IO.PathTooLongException">Dans .NET pour les applications du Windows Store ou la Bibliothèque de classes portable, interceptez l’exception de la classe de base, <see cref="T:System.IO.IOException" />, à la place.  


            

 Le paramètre <paramref name="path" /> est plus long que la longueur maximale définie par le système.</exception>
    </member>
    <member name="M:System.IO.Path.GetExtension(System.ReadOnlySpan{System.Char})">
      <summary>Renvoie l'extension d'un chemin d'accès de fichier représenté par une étendue de caractères en lecture seule.</summary>
      <param name="path">Chemin d'accès de fichier à partir duquel vous pouvez obtenir l'extension.</param>
      <returns>Extension du chemin d'accès spécifié (point « . » compris), ou <see cref="P:System.ReadOnlySpan`1.Empty" /> ou si <paramref name="path" /> ne comporte pas d'informations d'extension.</returns>
    </member>
    <member name="M:System.IO.Path.GetExtension(System.String)">
      <summary>Retourne l’extension (y compris le point ".") de la chaîne du chemin d'accès spécifié.</summary>
      <param name="path">Chaîne de chemin d’accès pour laquelle obtenir l’extension.</param>
      <returns>Extension du chemin d’accès spécifié (y compris le point ".") ou <see langword="null" /> ou <see cref="F:System.String.Empty" />. Si <paramref name="path" /> est <see langword="null" />, <see cref="M:System.IO.Path.GetExtension(System.String)" /> retourne <see langword="null" />. Si <paramref name="path" /> ne contient pas d’informations relatives à l’extension, <see cref="M:System.IO.Path.GetExtension(System.String)" /> retourne <see cref="F:System.String.Empty" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> contient un ou plusieurs caractères non valides définis dans <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
    </member>
    <member name="M:System.IO.Path.GetFileName(System.ReadOnlySpan{System.Char})">
      <summary>Renvoie le nom et l'extension d'un chemin de fichier représenté par une étendue de caractères en lecture seule.</summary>
      <param name="path">Étendue en lecture seule contenant le chemin d'accès à partir duquel vous pouvez obtenir le nom et l'extension du fichier.</param>
      <returns>Caractères situés après le dernier caractère de séparation du répertoire dans <paramref name="path" />.</returns>
    </member>
    <member name="M:System.IO.Path.GetFileName(System.String)">
      <summary>Retourne le nom et l’extension de fichier de la chaîne de chemin d’accès spécifiée.</summary>
      <param name="path">Chaîne de chemin d'accès à partir de laquelle obtenir le nom et l'extension de fichier.</param>
      <returns>Caractères situés après le dernier caractère de séparation du répertoire dans <paramref name="path" />. Si le dernier caractère de <paramref name="path" /> est un caractère de séparation de répertoire ou de volume, cette méthode retourne <see cref="F:System.String.Empty" />. Si <paramref name="path" /> est <see langword="null" />, cette méthode retourne <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> contient un ou plusieurs caractères non valides définis dans <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
    </member>
    <member name="M:System.IO.Path.GetFileNameWithoutExtension(System.ReadOnlySpan{System.Char})">
      <summary>Renvoie le nom de fichier sans l'extension d'un chemin d'accès de fichier représenté par une étendue de caractères en lecture seule.</summary>
      <param name="path">Étendue en lecture seule contenant le chemin d'accès à partir duquel vous pouvez obtenir le nom de fichier sans l'extension.</param>
      <returns>Caractères de l'étendue en lecture seule renvoyés par <see cref="M:System.IO.Path.GetFileName(System.ReadOnlySpan{System.Char})" />, moins le dernier point (.) et tous les caractères qui le suivent.</returns>
    </member>
    <member name="M:System.IO.Path.GetFileNameWithoutExtension(System.String)">
      <summary>Retourne le nom de fichier de la chaîne de chemin d'accès spécifiée sans l'extension.</summary>
      <param name="path">Chemin d’accès au fichier.</param>
      <returns>Chaîne retournée par <see cref="M:System.IO.Path.GetFileName(System.ReadOnlySpan{System.Char})" />, moins le dernier point (.) et tous les caractères après celui-ci.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> contient un ou plusieurs caractères non valides définis dans <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
    </member>
    <member name="M:System.IO.Path.GetFullPath(System.String)">
      <summary>Retourne le chemin d'accès absolu de la chaîne de chemin d'accès spécifiée.</summary>
      <param name="path">Fichier ou répertoire pour lequel obtenir les informations sur le chemin d’accès absolu.</param>
      <returns>Emplacement qualifié complet de <paramref name="path" />, par exemple « C:\MonFichier.txt ».</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> est une chaîne de longueur nulle, ne contient que des espaces blancs ou contient un ou plusieurs des caractères non valides définis par <see cref="M:System.IO.Path.GetInvalidPathChars" />.  

ou - 
Le système n’a pas pu récupérer le chemin d’accès absolu.</exception>
      <exception cref="T:System.Security.SecurityException">L’appelant n’a pas les autorisations requises.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> est <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> contient un caractère deux-points (« : ») qui ne fait pas partie d’un identificateur de volume (par exemple, « c:\ »).</exception>
      <exception cref="T:System.IO.PathTooLongException">Le chemin et/ou le nom de fichier spécifiés dépassent la longueur maximale définie par le système.</exception>
    </member>
    <member name="M:System.IO.Path.GetFullPath(System.String,System.String)">
      <summary>Renvoie un chemin d'accès complet à partir d'un chemin de base complet et d'un chemin relatif.</summary>
      <param name="path">Chemin d'accès relatif à concaténer au sein de <paramref name="basePath" />.</param>
      <param name="basePath">Début d'un chemin d'accès complet.</param>
      <returns>Chemin d'accès complet.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> ou <paramref name="basePath" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="basePath" /> n'est pas un chemin d'accès complet.

ou -

<paramref name="path" /> ou <paramref name="basePath" /> contient des caractères de chemin non valides, tels que U+0000.</exception>
    </member>
    <member name="M:System.IO.Path.GetInvalidFileNameChars">
      <summary>Obtient un tableau contenant les caractères qui ne sont pas autorisés dans les noms de fichiers.</summary>
      <returns>Tableau contenant les caractères qui ne sont pas autorisés dans les noms de fichiers.</returns>
    </member>
    <member name="M:System.IO.Path.GetInvalidPathChars">
      <summary>Obtient un tableau contenant les caractères qui ne sont pas autorisés dans les noms de chemins d'accès.</summary>
      <returns>Tableau contenant les caractères qui ne sont pas autorisés dans les noms de chemins d'accès.</returns>
    </member>
    <member name="M:System.IO.Path.GetPathRoot(System.ReadOnlySpan{System.Char})">
      <summary>Obtient les informations du répertoire racine à partir du chemin d’accès contenu dans l’étendue de caractères spécifiée.</summary>
      <param name="path">Chemin d'accès à partir duquel obtenir les informations relatives au répertoire racine.</param>
      <returns>Étendue de caractères qui contient le répertoire racine de path.</returns>
    </member>
    <member name="M:System.IO.Path.GetPathRoot(System.String)">
      <summary>Obtient les informations relatives au répertoire racine du chemin d’accès spécifié.</summary>
      <param name="path">Chemin d'accès à partir duquel obtenir les informations relatives au répertoire racine.</param>
      <returns>Répertoire racine de <paramref name="path" />, ou <see langword="null" /> si <paramref name="path" /> est <see langword="null" />, ou une chaîne vide si <paramref name="path" /> ne contient pas d’informations relatives au répertoire racine.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> contient un ou plusieurs caractères non valides définis dans <see cref="M:System.IO.Path.GetInvalidPathChars" />.  
ou 
 <see cref="F:System.String.Empty" /> a été passé à <paramref name="path" />.</exception>
    </member>
    <member name="M:System.IO.Path.GetRandomFileName">
      <summary>Retourne un nom de dossier ou de fichier aléatoire.</summary>
      <returns>Nom de dossier ou de fichier aléatoire.</returns>
    </member>
    <member name="M:System.IO.Path.GetRelativePath(System.String,System.String)">
      <summary>Renvoie un chemin d'accès relatif d'un chemin à un autre.</summary>
      <param name="relativeTo">Chemin d'accès source auquel le résultat doit être relatif. Ce chemin d'accès est toujours considéré comme un répertoire.</param>
      <param name="path">Chemin d'accès de destination.</param>
      <returns>Chemin d'accès relatif, ou <paramref name="path" /> si les chemins ne partagent pas la même racine.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relativeTo" /> ou <paramref name="path" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.Path.GetTempFileName">
      <summary>Crée un fichier temporaire de zéro octet nommé de façon univoque sur le disque et retourne le chemin d’accès complet de ce fichier.</summary>
      <returns>Chemin d'accès complet du fichier temporaire.</returns>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit, par exemple si aucun nom de fichier temporaire unique n’est disponible.  
ou
 Cette méthode n’a pas pu créer un fichier temporaire.</exception>
    </member>
    <member name="M:System.IO.Path.GetTempPath">
      <summary>Retourne le chemin d’accès du dossier temporaire de l’utilisateur actuel.</summary>
      <returns>Chemin d’accès au dossier temporaire, se terminant par une barre oblique inverse.</returns>
      <exception cref="T:System.Security.SecurityException">L’appelant n’a pas les autorisations requises.</exception>
    </member>
    <member name="M:System.IO.Path.HasExtension(System.ReadOnlySpan{System.Char})">
      <summary>Détermine si le chemin d'accès représenté par l'étendue de caractères spécifiée comprend une extension de nom de fichier.</summary>
      <param name="path">Chemin d'accès où rechercher une extension.</param>
      <returns>
        <see langword="true" /> si les caractères qui suivent le dernier caractère de séparation de répertoire ou le dernier séparateur de volume du chemin d'accès incluent un point (« . ») suivi d'un ou plusieurs caractères ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.IO.Path.HasExtension(System.String)">
      <summary>Détermine si un chemin d'accès inclut une extension de nom de fichier.</summary>
      <param name="path">Chemin d'accès où rechercher une extension.</param>
      <returns>
        <see langword="true" /> si les caractères qui suivent le dernier séparateur de répertoire (\\ ou /) ou le dernier séparateur de volume (:) dans le chemin d’accès incluent un point (.) suivi d’un ou plusieurs caractères ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> contient un ou plusieurs caractères non valides définis dans <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
    </member>
    <member name="F:System.IO.Path.InvalidPathChars">
      <summary>Fournit un tableau de caractères (spécifique à la plateforme) qui ne peuvent pas être spécifiés dans des arguments de chaîne de chemin d’accès passés aux membres de la classe <see cref="T:System.IO.Path" />.</summary>
    </member>
    <member name="M:System.IO.Path.IsPathFullyQualified(System.ReadOnlySpan{System.Char})">
      <summary>Renvoie une valeur qui indique si le chemin d'accès de fichier représenté par l'étendue de caractères spécifiée est fixé sur un lecteur ou un chemin d'accès UNC spécifique.</summary>
      <param name="path">Chemin d'accès de fichier.</param>
      <returns>
        <see langword="true" /> si le chemin d'accès est fixé sur un lecteur ou chemin d'accès UNC spécifique ; <see langword="false" /> si le chemin d'accès est relatif au lecteur ou au répertoire de travail actuel.</returns>
    </member>
    <member name="M:System.IO.Path.IsPathFullyQualified(System.String)">
      <summary>Renvoie une valeur qui indique si le chemin d'accès du fichier spécifié est fixé sur un lecteur ou un chemin d'accès UNC spécifique.</summary>
      <param name="path">Chemin d'accès de fichier.</param>
      <returns>
        <see langword="true" /> si le chemin d'accès est fixé sur un lecteur ou chemin d'accès UNC spécifique ; <see langword="false" /> si le chemin d'accès est relatif au lecteur ou au répertoire de travail actuel.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.Path.IsPathRooted(System.ReadOnlySpan{System.Char})">
      <summary>Renvoie une valeur indiquant si l'étendue de caractères spécifiée qui représente un chemin de fichier contient une racine.</summary>
      <param name="path">Chemin d’accès à tester.</param>
      <returns>
        <see langword="true" /> si <paramref name="path" /> contient une racine ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.IO.Path.IsPathRooted(System.String)">
      <summary>Renvoie une valeur indiquant si la chaîne de chemin d'accès spécifiée contient une racine.</summary>
      <param name="path">Chemin d’accès à tester.</param>
      <returns>
        <see langword="true" /> si <paramref name="path" /> contient une racine ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> contient un ou plusieurs caractères non valides définis dans <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
    </member>
    <member name="M:System.IO.Path.Join(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>Concatène deux composants de chemin d'accès en un seul chemin.</summary>
      <param name="path1">Étendue de caractères contenant le premier chemin d'accès à joindre.</param>
      <param name="path2">Étendue de caractères contenant le deuxième chemin d'accès à joindre.</param>
      <returns>Chemins d'accès combinés.</returns>
    </member>
    <member name="M:System.IO.Path.Join(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>Concatène trois composants de chemin d'accès en un seul chemin.</summary>
      <param name="path1">Étendue de caractères contenant le premier chemin d'accès à joindre.</param>
      <param name="path2">Étendue de caractères contenant le deuxième chemin d'accès à joindre.</param>
      <param name="path3">Étendue de caractères contenant le troisième chemin d'accès à joindre.</param>
      <returns>Chemin concaténé.</returns>
    </member>
    <member name="M:System.IO.Path.Join(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>Concatène quatre composants de chemin dans un seul chemin.</summary>
      <param name="path1">Étendue de caractères contenant le premier chemin d'accès à joindre.</param>
      <param name="path2">Étendue de caractères contenant le deuxième chemin d'accès à joindre.</param>
      <param name="path3">Étendue de caractères contenant le troisième chemin d'accès à joindre.</param>
      <param name="path4">Étendue de caractères contenant le quatrième chemin à joindre.</param>
      <returns>Chemin concaténé.</returns>
    </member>
    <member name="M:System.IO.Path.Join(System.String,System.String)">
      <summary>Concatène deux chemins dans un seul chemin.</summary>
      <param name="path1">Premier chemin à joindre.</param>
      <param name="path2">Second chemin à joindre.</param>
      <returns>Chemin concaténé.</returns>
    </member>
    <member name="M:System.IO.Path.Join(System.String,System.String,System.String)">
      <summary>Concatène trois chemins dans un seul chemin.</summary>
      <param name="path1">Premier chemin à joindre.</param>
      <param name="path2">Second chemin à joindre.</param>
      <param name="path3">Troisième chemin à joindre.</param>
      <returns>Chemin concaténé.</returns>
    </member>
    <member name="M:System.IO.Path.Join(System.String,System.String,System.String,System.String)">
      <summary>Concatène quatre chemins dans un seul chemin.</summary>
      <param name="path1">Premier chemin à joindre.</param>
      <param name="path2">Second chemin à joindre.</param>
      <param name="path3">Troisième chemin à joindre.</param>
      <param name="path4">Quatrième chemin à joindre.</param>
      <returns>Chemin concaténé.</returns>
    </member>
    <member name="M:System.IO.Path.Join(System.String[])">
      <summary>Concatène un tableau de chemins dans un seul chemin.</summary>
      <param name="paths">Tableau de chemins.</param>
      <returns>Chemin concaténé.</returns>
    </member>
    <member name="F:System.IO.Path.PathSeparator">
      <summary>Caractère de séparation spécifique à la plateforme, utilisé pour séparer les chaînes de chemin d'accès dans les variables d'environnement.</summary>
    </member>
    <member name="M:System.IO.Path.TrimEndingDirectorySeparator(System.ReadOnlySpan{System.Char})">
      <summary>Supprime un séparateur de répertoire de fin au-delà de la racine du chemin d’accès spécifié.</summary>
      <param name="path">Chemin d’accès à découper.</param>
      <returns>
        <paramref name="path" /> sans séparateurs de répertoire de fin.</returns>
    </member>
    <member name="M:System.IO.Path.TrimEndingDirectorySeparator(System.String)">
      <summary>Supprime un séparateur de répertoire de fin au-delà de la racine du chemin d’accès spécifié.</summary>
      <param name="path">Chemin d’accès à découper.</param>
      <returns>
        <paramref name="path" /> sans séparateurs de répertoire de fin.</returns>
    </member>
    <member name="M:System.IO.Path.TryJoin(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Int32@)">
      <summary>Tente de concaténer deux composants de chemin d'accès au sein d'une seule étendue de caractères préallouée, et renvoie une valeur indiquant si l'opération est un succès.</summary>
      <param name="path1">Étendue de caractères contenant le premier chemin d'accès à joindre.</param>
      <param name="path2">Étendue de caractères contenant le deuxième chemin d'accès à joindre.</param>
      <param name="path3">Étendue de caractères contenant le troisième chemin d'accès à joindre.</param>
      <param name="destination">Étendue de caractères permettant de contenir le chemin d'accès concaténé.</param>
      <param name="charsWritten">Lorsque la méthode renvoie une valeur qui indique le nombre de caractères écrits dans le <paramref name="destination" />.</param>
      <returns>
        <see langword="true" /> si l’opération de concaténation réussit ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.IO.Path.TryJoin(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Int32@)">
      <summary>Tente de concaténer deux composants de chemin d'accès au sein d'une seule étendue de caractères préallouée, et renvoie une valeur indiquant si l'opération est un succès.</summary>
      <param name="path1">Étendue de caractères contenant le premier chemin d'accès à joindre.</param>
      <param name="path2">Étendue de caractères contenant le deuxième chemin d'accès à joindre.</param>
      <param name="destination">Étendue de caractères permettant de contenir le chemin d'accès concaténé.</param>
      <param name="charsWritten">Lorsque la méthode renvoie une valeur qui indique le nombre de caractères écrits dans le <paramref name="destination" />.</param>
      <returns>
        <see langword="true" /> si l’opération de concaténation réussit ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="F:System.IO.Path.VolumeSeparatorChar">
      <summary>Fournit un caractère de séparation de volume spécifique à la plateforme.</summary>
    </member>
    <member name="T:System.IO.StreamReader">
      <summary>Implémente <see cref="T:System.IO.TextReader" /> qui lit les caractères à partir d'un flux d'octets dans un encodage particulier.</summary>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.StreamReader" /> pour le flux spécifié.</summary>
      <param name="stream">Flux à lire.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> ne prend pas en charge la lecture.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.StreamReader" /> pour le flux spécifié, avec l'option de détection de la marque d'ordre d'octet spécifiée.</summary>
      <param name="stream">Flux à lire.</param>
      <param name="detectEncodingFromByteOrderMarks">Indique s'il faut rechercher les marques d'ordre des octets au début du fichier.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> ne prend pas en charge la lecture.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.StreamReader" /> pour le flux spécifié, avec l'encodage de caractères spécifié.</summary>
      <param name="stream">Flux à lire.</param>
      <param name="encoding">Encodage des caractères à utiliser.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> ne prend pas en charge la lecture.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> ou <paramref name="encoding" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.StreamReader" /> pour le flux spécifié, avec l'encodage de caractères spécifiés et l'option de détection de la marque d'ordre d'octet.</summary>
      <param name="stream">Flux à lire.</param>
      <param name="encoding">Encodage des caractères à utiliser.</param>
      <param name="detectEncodingFromByteOrderMarks">Indique s'il faut rechercher les marques d'ordre des octets au début du fichier.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> ne prend pas en charge la lecture.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> ou <paramref name="encoding" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.StreamReader" /> pour le flux spécifié, avec l'encodage de caractères spécifiés, l'option de détection de la marque d'ordre d'octet, et la taille de la mémoire tampon.</summary>
      <param name="stream">Flux à lire.</param>
      <param name="encoding">Encodage des caractères à utiliser.</param>
      <param name="detectEncodingFromByteOrderMarks">Indique s'il faut rechercher les marques d'ordre des octets au début du fichier.</param>
      <param name="bufferSize">Taille de mémoire tampon minimale.</param>
      <exception cref="T:System.ArgumentException">Le flux ne prend pas en charge la lecture.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> ou <paramref name="encoding" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> est inférieur ou égal à zéro.</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32,System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.StreamReader" /> pour le flux spécifié en fonction de l'encodage de caractères, de l'option de détection de la marque d'ordre d'octet et de la taille de la mémoire tampon spécifiés, et permet éventuellement de laisser le flux ouvert.</summary>
      <param name="stream">Flux de données à lire.</param>
      <param name="encoding">Encodage des caractères à utiliser.</param>
      <param name="detectEncodingFromByteOrderMarks">
        <see langword="true" /> pour rechercher les marques d'ordre d'octet au début du fichier ; sinon, <see langword="false" />.</param>
      <param name="bufferSize">Taille de mémoire tampon minimale.</param>
      <param name="leaveOpen">
        <see langword="true" /> pour maintenir le flux ouvert après avoir supprimé l'objet <see cref="T:System.IO.StreamReader" /> ; sinon, <see langword="false" />.</param>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.StreamReader" /> pour le nom de fichier spécifié.</summary>
      <param name="path">Chemin d'accès complet au fichier à lire.</param>
      <exception cref="T:System.ArgumentException">Le <paramref name="path" /> est une chaîne vide ("").</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">Impossible de trouver le fichier.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">Le chemin spécifié n’est pas valide, par exemple si l’emplacement est un lecteur non mappé.</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> comprend une syntaxe incorrecte ou non valide pour le nom de fichier, le nom de répertoire ou le nom de volume.</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.StreamReader" /> pour le nom de fichier spécifié, avec l'option de détection de la marque d'ordre d'octet.</summary>
      <param name="path">Chemin d'accès complet au fichier à lire.</param>
      <param name="detectEncodingFromByteOrderMarks">Indique s'il faut rechercher les marques d'ordre des octets au début du fichier.</param>
      <exception cref="T:System.ArgumentException">Le <paramref name="path" /> est une chaîne vide ("").</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> est <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">Impossible de trouver le fichier.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">Le chemin spécifié n’est pas valide, par exemple si l’emplacement est un lecteur non mappé.</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> comprend une syntaxe incorrecte ou non valide pour le nom de fichier, le nom de répertoire ou le nom de volume.</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Text.Encoding)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.StreamReader" /> pour le nom de fichier spécifié, avec l'encodage de caractères spécifié.</summary>
      <param name="path">Chemin d'accès complet au fichier à lire.</param>
      <param name="encoding">Encodage des caractères à utiliser.</param>
      <exception cref="T:System.ArgumentException">Le <paramref name="path" /> est une chaîne vide ("").</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> ou <paramref name="encoding" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">Impossible de trouver le fichier.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">Le chemin spécifié n’est pas valide, par exemple si l’emplacement est un lecteur non mappé.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> comprend une syntaxe incorrecte ou non valide pour le nom de fichier, le nom de répertoire ou le nom de volume.</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Text.Encoding,System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.StreamReader" /> pour le nom de fichier spécifié, avec l'encodage de caractères spécifiés et l'option de détection de la marque d'ordre d'octet.</summary>
      <param name="path">Chemin d'accès complet au fichier à lire.</param>
      <param name="encoding">Encodage des caractères à utiliser.</param>
      <param name="detectEncodingFromByteOrderMarks">Indique s'il faut rechercher les marques d'ordre des octets au début du fichier.</param>
      <exception cref="T:System.ArgumentException">Le <paramref name="path" /> est une chaîne vide ("").</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> ou <paramref name="encoding" /> est <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">Impossible de trouver le fichier.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">Le chemin spécifié n’est pas valide, par exemple si l’emplacement est un lecteur non mappé.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> comprend une syntaxe incorrecte ou non valide pour le nom de fichier, le nom de répertoire ou le nom de volume.</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Text.Encoding,System.Boolean,System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.StreamReader" /> pour le nom de fichier spécifié, avec l'encodage de caractères spécifiés, l'option de détection de la marque d'ordre d'octet, et la taille de la mémoire tampon.</summary>
      <param name="path">Chemin d'accès complet au fichier à lire.</param>
      <param name="encoding">Encodage des caractères à utiliser.</param>
      <param name="detectEncodingFromByteOrderMarks">Indique s'il faut rechercher les marques d'ordre des octets au début du fichier.</param>
      <param name="bufferSize">Taille de mémoire tampon minimale, en nombre de caractères 16 bits.</param>
      <exception cref="T:System.ArgumentException">Le <paramref name="path" /> est une chaîne vide ("").</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> ou <paramref name="encoding" /> est <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">Impossible de trouver le fichier.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">Le chemin spécifié n’est pas valide, par exemple si l’emplacement est un lecteur non mappé.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> comprend une syntaxe incorrecte ou non valide pour le nom de fichier, le nom de répertoire ou le nom de volume.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="buffersize" /> est inférieur ou égal à zéro.</exception>
    </member>
    <member name="P:System.IO.StreamReader.BaseStream">
      <summary>Retourne le flux sous-jacent.</summary>
      <returns>Flux sous-jacent.</returns>
    </member>
    <member name="M:System.IO.StreamReader.Close">
      <summary>Ferme l'objet <see cref="T:System.IO.StreamReader" /> et le flux sous-jacent, et libère toutes les ressources système associées au lecteur.</summary>
    </member>
    <member name="P:System.IO.StreamReader.CurrentEncoding">
      <summary>Obtient l'encodage de caractères actuel utilisé par l'objet <see cref="T:System.IO.StreamReader" /> actuel.</summary>
      <returns>Encodage des caractères actuel utilisé par le lecteur en cours. La valeur peut être différente après le premier appel à toute méthode <see cref="Overload:System.IO.StreamReader.Read" /> de <see cref="T:System.IO.StreamReader" />, car la détection automatique de l'encodage n'est effectuée qu'au premier appel à une méthode <see cref="Overload:System.IO.StreamReader.Read" />.</returns>
    </member>
    <member name="M:System.IO.StreamReader.DiscardBufferedData">
      <summary>Efface la mémoire tampon interne.</summary>
    </member>
    <member name="M:System.IO.StreamReader.Dispose(System.Boolean)">
      <summary>Ferme le flux sous-jacent, libère les ressources non managées utilisées par <see cref="T:System.IO.StreamReader" /> et libère éventuellement les ressources managées.</summary>
      <param name="disposing">
        <see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour libérer uniquement les ressources non managées.</param>
    </member>
    <member name="P:System.IO.StreamReader.EndOfStream">
      <summary>Obtient une valeur qui indique si la position actuelle du flux se trouve à la fin du flux.</summary>
      <returns>
        <see langword="true" /> si la position actuelle du flux se trouve à la fin du flux ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.ObjectDisposedException">Le flux sous-jacent a été supprimé.</exception>
    </member>
    <member name="F:System.IO.StreamReader.Null">
      <summary>Objet <see cref="T:System.IO.StreamReader" /> autour d'un flux vide.</summary>
    </member>
    <member name="M:System.IO.StreamReader.Peek">
      <summary>Retourne le prochain caractère disponible, mais ne le consomme pas.</summary>
      <returns>Entier représentant le prochain caractère à lire, ou -1 s'il n'y a aucun caractère à lire ou si le flux ne prend pas en charge la recherche.</returns>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
    </member>
    <member name="M:System.IO.StreamReader.Read">
      <summary>Lit le caractère suivant à partir du flux d'entrée et avance la position d'1 caractère.</summary>
      <returns>Caractère suivant du flux d'entrée, représenté sous la forme d'un objet <see cref="T:System.Int32" /> ou -1 s'il n'y a plus de caractère disponible.</returns>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
    </member>
    <member name="M:System.IO.StreamReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>Lit un nombre maximum de caractères spécifié du flux de données actuel dans une mémoire tampon, en commençant à l'index spécifié.</summary>
      <param name="buffer">Quand cette méthode est retournée, contient le tableau de caractères spécifié dont les valeurs comprises entre <paramref name="index" /> et (<c>index + count - 1</c>) sont remplacées par les caractères lus dans la source actuelle.</param>
      <param name="index">Index de <paramref name="buffer" /> à partir duquel commencer l'écriture.</param>
      <param name="count">Nombre maximal de caractères à lire.</param>
      <returns>Le nombre de caractères qui ont été lus ou 0 si c'est la fin du flux et qu'aucune donnée n'a été lue. Le nombre sera inférieur ou égal au paramètre <paramref name="count" />, selon les données disponibles dans le flux.</returns>
      <exception cref="T:System.ArgumentException">La longueur de la mémoire tampon moins <paramref name="index" /> est inférieure à <paramref name="count" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> ou <paramref name="count" /> est un nombre négatif.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d'E/S, telle que la fermeture du flux, se produit.</exception>
    </member>
    <member name="M:System.IO.StreamReader.Read(System.Span{System.Char})">
      <param name="buffer" />
    </member>
    <member name="M:System.IO.StreamReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
      <summary>Lit un nombre maximal spécifié de caractères dans le flux actuel de manière asynchrone, et écrit les données dans une mémoire tampon, en commençant à l'index spécifié.</summary>
      <param name="buffer">Quand cette méthode est retournée, contient le tableau de caractères spécifié dont les valeurs comprises entre <paramref name="index" /> et (<paramref name="index" /> + <paramref name="count" /> - 1) sont remplacées par les caractères lus dans la source actuelle.</param>
      <param name="index">Position dans <paramref name="buffer" /> à partir de laquelle commencer l'écriture.</param>
      <param name="count">Nombre maximal de caractères à lire. Si la fin du flux est atteinte avant que le nombre de caractères spécifié soit écrit dans la mémoire tampon, la méthode en cours se termine.</param>
      <returns>Tâche qui représente l'opération de lecture asynchrone. La valeur du paramètre <paramref name="TResult" /> contient le nombre total de caractères lus dans la mémoire tampon. La valeur du résultat peut être inférieure au nombre de caractères demandés si le nombre de caractères actuellement disponibles est inférieur au nombre demandé, ou elle peut avoir la valeur 0 (zéro) si la fin du flux a été atteinte.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> ou <paramref name="count" /> est un nombre négatif.</exception>
      <exception cref="T:System.ArgumentException">La somme de <paramref name="index" /> et <paramref name="count" /> est supérieure à la longueur de la mémoire tampon.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux a été supprimé.</exception>
      <exception cref="T:System.InvalidOperationException">Le lecteur est actuellement utilisé par une opération de lecture antérieure.</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadAsync(System.Memory{System.Char},System.Threading.CancellationToken)">
      <param name="buffer" />
      <param name="cancellationToken" />
    </member>
    <member name="M:System.IO.StreamReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
      <summary>Lit un nombre maximal spécifié de caractères à partir du flux actuel et écrit les données dans une mémoire tampon, en commençant à l'index spécifié.</summary>
      <param name="buffer">Quand cette méthode est retournée, contient le tableau de caractères spécifié dont les valeurs comprises entre <paramref name="index" /> et (<c>index + count - 1</c>) sont remplacées par les caractères lus dans la source actuelle.</param>
      <param name="index">Position dans <paramref name="buffer" /> à partir de laquelle commencer l'écriture.</param>
      <param name="count">Nombre maximal de caractères à lire.</param>
      <returns>Nombre de caractères lus. Le nombre sera inférieur ou égal à <paramref name="count" />, selon que tous les caractères d'entrée ont été lus.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">La longueur de la mémoire tampon moins <paramref name="index" /> est inférieure à <paramref name="count" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> ou <paramref name="count" /> est un nombre négatif.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.IO.StreamReader" /> est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d'E/S s'est produite.</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadBlock(System.Span{System.Char})">
      <param name="buffer" />
    </member>
    <member name="M:System.IO.StreamReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
      <summary>Lit un nombre maximal spécifié de caractères dans le flux actuel de manière asynchrone, et écrit les données dans une mémoire tampon, en commençant à l'index spécifié.</summary>
      <param name="buffer">Quand cette méthode est retournée, contient le tableau de caractères spécifié dont les valeurs comprises entre <paramref name="index" /> et (<paramref name="index" /> + <paramref name="count" /> - 1) sont remplacées par les caractères lus dans la source actuelle.</param>
      <param name="index">Position dans <paramref name="buffer" /> à partir de laquelle commencer l'écriture.</param>
      <param name="count">Nombre maximal de caractères à lire. Si la fin du flux est atteinte avant que le nombre de caractères spécifié soit écrit dans la mémoire tampon, la méthode se termine.</param>
      <returns>Tâche qui représente l'opération de lecture asynchrone. La valeur du paramètre <paramref name="TResult" /> contient le nombre total de caractères lus dans la mémoire tampon. La valeur du résultat peut être inférieure au nombre de caractères demandés si le nombre de caractères actuellement disponibles est inférieur au nombre demandé, ou elle peut avoir la valeur 0 (zéro) si la fin du flux a été atteinte.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> ou <paramref name="count" /> est un nombre négatif.</exception>
      <exception cref="T:System.ArgumentException">La somme de <paramref name="index" /> et <paramref name="count" /> est supérieure à la longueur de la mémoire tampon.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux a été supprimé.</exception>
      <exception cref="T:System.InvalidOperationException">Le lecteur est actuellement utilisé par une opération de lecture antérieure.</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadBlockAsync(System.Memory{System.Char},System.Threading.CancellationToken)">
      <param name="buffer" />
      <param name="cancellationToken" />
    </member>
    <member name="M:System.IO.StreamReader.ReadLine">
      <summary>Lit une ligne de caractères à partir du flux en cours et retourne les données sous forme de chaîne.</summary>
      <returns>La ligne suivante du flux d'entrée ou <see langword="null" /> si la fin du flux d'entrée est atteinte.</returns>
      <exception cref="T:System.OutOfMemoryException">La mémoire est insuffisante pour allouer une mémoire tampon à la chaîne retournée.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadLineAsync">
      <summary>Lit une ligne de caractères de manière asynchrone à partir du flux en cours et retourne les données sous forme de chaîne.</summary>
      <returns>Tâche qui représente l'opération de lecture asynchrone. La valeur du paramètre <paramref name="TResult" /> contient la ligne suivante du flux de données, ou a la valeur <see langword="null" /> si tous les caractères ont été lus.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Le nombre de caractères dans la ligne suivante est supérieur à <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux a été supprimé.</exception>
      <exception cref="T:System.InvalidOperationException">Le lecteur est actuellement utilisé par une opération de lecture antérieure.</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadToEnd">
      <summary>Lit tous les caractères entre la position actuelle et la fin du flux.</summary>
      <returns>Le reste du flux comme une chaîne, de la position actuelle jusqu'à la fin. Si la position actuelle est à la fin du flux, retourne une chaîne vide ("").</returns>
      <exception cref="T:System.OutOfMemoryException">La mémoire est insuffisante pour allouer une mémoire tampon à la chaîne retournée.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadToEndAsync">
      <summary>Lit tous les caractères entre la position actuelle et la fin du flux de manière asynchrone, puis les retourne sous la forme d'une chaîne.</summary>
      <returns>Tâche qui représente l'opération de lecture asynchrone. La valeur du paramètre <paramref name="TResult" /> contient une chaîne composée des caractères de la position actuelle jusqu'à la fin du flux de données.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Le nombre de caractères est supérieur à <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux a été supprimé.</exception>
      <exception cref="T:System.InvalidOperationException">Le lecteur est actuellement utilisé par une opération de lecture antérieure.</exception>
    </member>
    <member name="T:System.IO.StreamWriter">
      <summary>Implémente <see cref="T:System.IO.TextWriter" /> pour écrire les caractères dans un flux selon un encodage particulier.</summary>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.StreamWriter" /> pour le flux spécifié, à l’aide de l’encodage UTF-8 et de la taille de la mémoire tampon par défaut.</summary>
      <param name="stream">Le flux dans lequel écrire.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> n’est pas accessible en écriture.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.StreamWriter" /> pour le flux spécifié, à l’aide de l’encodage spécifié et de la taille de mémoire tampon par défaut.</summary>
      <param name="stream">Le flux dans lequel écrire.</param>
      <param name="encoding">Encodage des caractères à utiliser.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> ou <paramref name="encoding" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> n’est pas accessible en écriture.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.StreamWriter" /> pour le flux spécifié, à l’aide de l’encodage et de la taille de mémoire tampon spécifiés.</summary>
      <param name="stream">Le flux dans lequel écrire.</param>
      <param name="encoding">Encodage des caractères à utiliser.</param>
      <param name="bufferSize">Taille de la mémoire tampon en octets.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> ou <paramref name="encoding" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> est un nombre négatif.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> n’est pas accessible en écriture.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32,System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.StreamWriter" /> pour le flux spécifié, à l’aide de l’encodage et de la taille de mémoire tampon spécifiés, et permet éventuellement de laisser le flux ouvert.</summary>
      <param name="stream">Le flux dans lequel écrire.</param>
      <param name="encoding">Encodage des caractères à utiliser.</param>
      <param name="bufferSize">Taille de la mémoire tampon en octets.</param>
      <param name="leaveOpen">
        <see langword="true" /> pour maintenir le flux ouvert après avoir supprimé l'objet <see cref="T:System.IO.StreamWriter" /> ; sinon, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> ou <paramref name="encoding" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> est un nombre négatif.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> n’est pas accessible en écriture.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.StreamWriter" /> pour le fichier spécifié, à l’aide de l’encodage et de la taille de la mémoire tampon par défaut.</summary>
      <param name="path">Chemin d’accès complet du fichier dans lequel écrire. <paramref name="path" /> peut être un nom de fichier.</param>
      <exception cref="T:System.UnauthorizedAccessException">Accès refusé.</exception>
      <exception cref="T:System.ArgumentException">Le <paramref name="path" /> est une chaîne vide ("").  

ou - 
<paramref name="path" /> contient le nom d’un périphérique système (com1, com2, etc.).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> est <see langword="null" />.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">Le chemin spécifié n’est pas valide (par exemple, il est sur un lecteur non mappé).</exception>
      <exception cref="T:System.IO.PathTooLongException">Le chemin et/ou le nom de fichier spécifiés dépassent la longueur maximale définie par le système.</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> comprend une syntaxe incorrecte ou non valide pour les noms de fichiers, les noms de répertoires ou les noms de volumes.</exception>
      <exception cref="T:System.Security.SecurityException">L'appelant n'a pas l'autorisation requise.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String,System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.StreamWriter" /> pour le fichier spécifié, à l’aide de l’encodage et de la taille de la mémoire tampon par défaut. Si le fichier existe, il peut être remplacé ou recevoir des ajouts. Si le fichier n'existe pas, ce constructeur crée un nouveau fichier.</summary>
      <param name="path">Chemin d’accès complet du fichier dans lequel écrire.</param>
      <param name="append">
        <see langword="true" /> pour ajouter des données au fichier ; <see langword="false" /> pour remplacer le contenu du fichier. Si le fichier spécifié n'existe pas, ce paramètre n'a aucun effet, et le constructeur crée un fichier.</param>
      <exception cref="T:System.UnauthorizedAccessException">Accès refusé.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> est vide.  

ou - 
<paramref name="path" /> contient le nom d’un périphérique système (com1, com2, etc.).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">Le chemin spécifié n’est pas valide (par exemple, il est sur un lecteur non mappé).</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> comprend une syntaxe incorrecte ou non valide pour les noms de fichiers, les noms de répertoires ou les noms de volumes.</exception>
      <exception cref="T:System.IO.PathTooLongException">Le chemin et/ou le nom de fichier spécifiés dépassent la longueur maximale définie par le système.</exception>
      <exception cref="T:System.Security.SecurityException">L'appelant n'a pas l'autorisation requise.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String,System.Boolean,System.Text.Encoding)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.StreamWriter" /> pour le fichier spécifié, à l’aide de l’encodage spécifié et de la taille de la mémoire tampon par défaut. Si le fichier existe, il peut être remplacé ou recevoir des ajouts. Si le fichier n'existe pas, ce constructeur crée un nouveau fichier.</summary>
      <param name="path">Chemin d’accès complet du fichier dans lequel écrire.</param>
      <param name="append">
        <see langword="true" /> pour ajouter des données au fichier ; <see langword="false" /> pour remplacer le contenu du fichier. Si le fichier spécifié n'existe pas, ce paramètre n'a aucun effet, et le constructeur crée un fichier.</param>
      <param name="encoding">Encodage des caractères à utiliser.</param>
      <exception cref="T:System.UnauthorizedAccessException">Accès refusé.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> est vide.  

ou - 
<paramref name="path" /> contient le nom d’un périphérique système (com1, com2, etc.).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> est <see langword="null" />.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">Le chemin spécifié n’est pas valide (par exemple, il est sur un lecteur non mappé).</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> comprend une syntaxe incorrecte ou non valide pour les noms de fichiers, les noms de répertoires ou les noms de volumes.</exception>
      <exception cref="T:System.IO.PathTooLongException">Le chemin et/ou le nom de fichier spécifiés dépassent la longueur maximale définie par le système.</exception>
      <exception cref="T:System.Security.SecurityException">L'appelant n'a pas l'autorisation requise.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String,System.Boolean,System.Text.Encoding,System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.StreamWriter" /> pour le fichier spécifié sur le chemin spécifié, à l’aide de l’encodage et de la taille de mémoire tampon spécifiés. Si le fichier existe, il peut être remplacé ou recevoir des ajouts. Si le fichier n'existe pas, ce constructeur crée un nouveau fichier.</summary>
      <param name="path">Chemin d’accès complet du fichier dans lequel écrire.</param>
      <param name="append">
        <see langword="true" /> pour ajouter des données au fichier ; <see langword="false" /> pour remplacer le contenu du fichier. Si le fichier spécifié n'existe pas, ce paramètre n'a aucun effet, et le constructeur crée un fichier.</param>
      <param name="encoding">Encodage des caractères à utiliser.</param>
      <param name="bufferSize">Taille de la mémoire tampon en octets.</param>
      <exception cref="T:System.ArgumentException">Le <paramref name="path" /> est une chaîne vide ("").  
ou 
 <paramref name="path" /> contient le nom d’un périphérique système (com1, com2, etc.).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> ou <paramref name="encoding" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> est un nombre négatif.</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> comprend une syntaxe incorrecte ou non valide pour les noms de fichiers, les noms de répertoires ou les noms de volumes.</exception>
      <exception cref="T:System.Security.SecurityException">L'appelant n'a pas l'autorisation requise.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Accès refusé.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">Le chemin spécifié n’est pas valide (par exemple, il est sur un lecteur non mappé).</exception>
      <exception cref="T:System.IO.PathTooLongException">Le chemin et/ou le nom de fichier spécifiés dépassent la longueur maximale définie par le système.</exception>
    </member>
    <member name="P:System.IO.StreamWriter.AutoFlush">
      <summary>Obtient ou définit une valeur indiquant si <see cref="T:System.IO.StreamWriter" /> vide sa mémoire tampon vers le flux sous-jacent après chaque appel à <see cref="M:System.IO.StreamWriter.Write(System.Char)" />.</summary>
      <returns>
        <see langword="true" /> pour forcer <see cref="T:System.IO.StreamWriter" /> à vider sa mémoire tampon ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.IO.StreamWriter.BaseStream">
      <summary>Obtient le flux sous-jacent qui sert d'interface avec un magasin de sauvegarde.</summary>
      <returns>Flux dans lequel ce <see langword="StreamWriter" /> écrit.</returns>
    </member>
    <member name="M:System.IO.StreamWriter.Close">
      <summary>Ferme l’objet <see langword="StreamWriter" /> actuel et le flux sous-jacent.</summary>
      <exception cref="T:System.Text.EncoderFallbackException">L’encodage actuel ne prend pas en charge l’affichage de la moitié d’une paire de substitution Unicode.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.Dispose(System.Boolean)">
      <summary>Entraîne l’écriture des données en mémoire tampon dans le flux sous-jacent, libère les ressources non managées utilisées par le <see cref="T:System.IO.StreamWriter" /> et libère éventuellement les ressources managées.</summary>
      <param name="disposing">
        <see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour libérer uniquement les ressources non managées.</param>
      <exception cref="T:System.Text.EncoderFallbackException">L’encodage actuel ne prend pas en charge l’affichage de la moitié d’une paire de substitution Unicode.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.DisposeAsync">
      <summary>Écrit de façon asynchrone les données mises en mémoire tampon dans le flux sous-jacent et libère les ressources non gérées utilisées par <see cref="T:System.IO.StreamWriter" />.</summary>
      <returns>Tâche qui représente l’opération de suppression asynchrone.</returns>
    </member>
    <member name="P:System.IO.StreamWriter.Encoding">
      <summary>Obtient le <see cref="T:System.Text.Encoding" /> dans lequel la sortie est écrite.</summary>
      <returns>
        <see cref="T:System.Text.Encoding" /> spécifié dans le constructeur pour l'instance actuelle, ou <see cref="T:System.Text.UTF8Encoding" /> si aucun encodage n'est spécifié.</returns>
    </member>
    <member name="M:System.IO.StreamWriter.Flush">
      <summary>Efface toutes les mémoires tampons pour le writer actuel et provoque l'écriture des données mises en mémoire tampon dans le flux sous-jacent.</summary>
      <exception cref="T:System.ObjectDisposedException">Le writer actuel est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S s’est produite.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">L’encodage actuel ne prend pas en charge l’affichage de la moitié d’une paire de substitution Unicode.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.FlushAsync">
      <summary>Efface toutes les mémoires tampons pour ce flux de manière asynchrone et provoque l'écriture des données mises en mémoire tampon sur le périphérique sous-jacent.</summary>
      <returns>Tâche qui représente l’opération de vidage asynchrone.</returns>
      <exception cref="T:System.ObjectDisposedException">Le flux a été supprimé.</exception>
    </member>
    <member name="F:System.IO.StreamWriter.Null">
      <summary>Fournit un élément <see langword="StreamWriter" /> sans magasin de stockage dans lequel il est possible d'écrire, mais pas de lire.</summary>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.Char)">
      <summary>Écrit un caractère dans le flux.</summary>
      <param name="value">Caractère à écrire dans le flux.</param>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> a la valeur true ou la mémoire tampon de <see cref="T:System.IO.StreamWriter" /> est saturée, et le writer actuel est fermé.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> a la valeur true ou la mémoire tampon de <see cref="T:System.IO.StreamWriter" /> est saturée, et le contenu de la mémoire tampon ne peut pas être écrit dans le flux de taille fixe sous-jacent, car <see cref="T:System.IO.StreamWriter" /> se trouve à la fin du flux.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.Char[])">
      <summary>Écrit un tableau de caractères dans le flux.</summary>
      <param name="buffer">Tableau de caractères contenant les données à écrire. Si <paramref name="buffer" /> a la valeur <see langword="null" />, rien n'est écrit.</param>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> a la valeur true ou la mémoire tampon de <see cref="T:System.IO.StreamWriter" /> est saturée, et le writer actuel est fermé.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> a la valeur true ou la mémoire tampon de <see cref="T:System.IO.StreamWriter" /> est saturée, et le contenu de la mémoire tampon ne peut pas être écrit dans le flux de taille fixe sous-jacent, car <see cref="T:System.IO.StreamWriter" /> se trouve à la fin du flux.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>Écrit un sous-tableau de caractères dans le flux.</summary>
      <param name="buffer">Tableau de caractères contenant les données à écrire.</param>
      <param name="index">Position du caractère dans la mémoire tampon à laquelle commencer la lecture des données.</param>
      <param name="count">Nombre maximal de caractères à écrire.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">La longueur de la mémoire tampon moins <paramref name="index" /> est inférieure à <paramref name="count" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> ou <paramref name="count" /> est un nombre négatif.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> a la valeur true ou la mémoire tampon de <see cref="T:System.IO.StreamWriter" /> est saturée, et le writer actuel est fermé.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> a la valeur true ou la mémoire tampon de <see cref="T:System.IO.StreamWriter" /> est saturée, et le contenu de la mémoire tampon ne peut pas être écrit dans le flux de taille fixe sous-jacent, car <see cref="T:System.IO.StreamWriter" /> se trouve à la fin du flux.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.ReadOnlySpan{System.Char})">
      <summary>Écrit une plage de caractères dans le flux.</summary>
      <param name="buffer">Plage de caractères à écrire.</param>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.String)">
      <summary>Écrit une chaîne dans le flux.</summary>
      <param name="value">Chaîne à écrire dans le flux. Si <paramref name="value" /> a la valeur null, rien n'est écrit.</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> a la valeur true ou la mémoire tampon de <see cref="T:System.IO.StreamWriter" /> est saturée, et le writer actuel est fermé.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> a la valeur true ou la mémoire tampon de <see cref="T:System.IO.StreamWriter" /> est saturée, et le contenu de la mémoire tampon ne peut pas être écrit dans le flux de taille fixe sous-jacent, car <see cref="T:System.IO.StreamWriter" /> se trouve à la fin du flux.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.String,System.Object)">
      <summary>Écrit une chaîne mise en forme dans le flux, en utilisant la même sémantique que la méthode <see cref="M:System.String.Format(System.String,System.Object)" />.</summary>
      <param name="format">Chaîne de format composite.</param>
      <param name="arg0">Objet à mettre en forme et à écrire.</param>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.String,System.Object,System.Object)">
      <summary>Écrit une chaîne mise en forme dans le flux, en utilisant la même sémantique que la méthode <see cref="M:System.String.Format(System.String,System.Object,System.Object)" />.</summary>
      <param name="format">Chaîne de format composite.</param>
      <param name="arg0">Premier objet à mettre en forme et à écrire.</param>
      <param name="arg1">Deuxième objet à mettre en forme et à écrire.</param>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.String,System.Object,System.Object,System.Object)">
      <summary>Écrit une chaîne mise en forme dans le flux, en utilisant la même sémantique que la méthode <see cref="M:System.String.Format(System.String,System.Object,System.Object,System.Object)" />.</summary>
      <param name="format">Chaîne de format composite.</param>
      <param name="arg0">Premier objet à mettre en forme et à écrire.</param>
      <param name="arg1">Deuxième objet à mettre en forme et à écrire.</param>
      <param name="arg2">Troisième objet à mettre en forme et à écrire.</param>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.String,System.Object[])">
      <summary>Écrit une chaîne mise en forme dans le flux, en utilisant la même sémantique que la méthode <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="format">Chaîne de format composite.</param>
      <param name="arg">Tableau d'objets contenant aucun, un ou plusieurs objets à mettre en forme et à écrire.</param>
    </member>
    <member name="M:System.IO.StreamWriter.WriteAsync(System.Char)">
      <summary>Écrit de façon asynchrone un caractère dans le flux.</summary>
      <param name="value">Caractère à écrire dans le flux.</param>
      <returns>Tâche qui représente l’opération d’écriture asynchrone.</returns>
      <exception cref="T:System.ObjectDisposedException">Le writer de flux est supprimé.</exception>
      <exception cref="T:System.InvalidOperationException">Le writer du flux est actuellement utilisé par une opération d’écriture précédente.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteAsync(System.Char[],System.Int32,System.Int32)">
      <summary>Écrit de façon asynchrone un sous-tableau de caractères dans le flux.</summary>
      <param name="buffer">Tableau de caractères contenant les données à écrire.</param>
      <param name="index">Position du caractère dans la mémoire tampon à laquelle commencer la lecture des données.</param>
      <param name="count">Nombre maximal de caractères à écrire.</param>
      <returns>Tâche qui représente l’opération d’écriture asynchrone.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> plus <paramref name="count" /> est supérieur à la longueur de la mémoire tampon.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> ou <paramref name="count" /> est un nombre négatif.</exception>
      <exception cref="T:System.ObjectDisposedException">Le writer de flux est supprimé.</exception>
      <exception cref="T:System.InvalidOperationException">Le writer du flux est actuellement utilisé par une opération d’écriture précédente.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)">
      <summary>Écrit de façon asynchrone une zone de mémoire de caractères dans le flux.</summary>
      <param name="buffer">Zone de mémoire de caractères à écrire dans le flux.</param>
      <param name="cancellationToken">Jeton pour surveiller les requêtes d'annulation. La valeur par défaut est <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Tâche qui représente l’opération d’écriture asynchrone.</returns>
    </member>
    <member name="M:System.IO.StreamWriter.WriteAsync(System.String)">
      <summary>Écrit de façon asynchrone une chaîne dans le flux.</summary>
      <param name="value">Chaîne à écrire dans le flux. Si <paramref name="value" /> a la valeur <see langword="null" />, rien n'est écrit.</param>
      <returns>Tâche qui représente l’opération d’écriture asynchrone.</returns>
      <exception cref="T:System.ObjectDisposedException">Le writer de flux est supprimé.</exception>
      <exception cref="T:System.InvalidOperationException">Le writer du flux est actuellement utilisé par une opération d’écriture précédente.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLine(System.ReadOnlySpan{System.Char})">
      <summary>Écrit la représentation sous forme de texte d’une plage de caractères dans le flux, suivie d’une marque de fin de ligne.</summary>
      <param name="buffer">Plage de caractères à écrire dans le flux.</param>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLine(System.String)">
      <summary>Écrit une chaîne dans le flux, suivie d’une marque de fin de ligne.</summary>
      <param name="value">Chaîne à écrire. Si <paramref name="value" /> a la valeur <see langword="null" />, seule la marque de fin de ligne est écrite.</param>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLine(System.String,System.Object)">
      <summary>Écrit une chaîne mise en forme et une nouvelle ligne dans le flux, en utilisant la même sémantique que la méthode <see cref="M:System.String.Format(System.String,System.Object)" />.</summary>
      <param name="format">Chaîne de format composite.</param>
      <param name="arg0">Objet à mettre en forme et à écrire.</param>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLine(System.String,System.Object,System.Object)">
      <summary>Écrit une chaîne mise en forme et une nouvelle ligne dans le flux, en utilisant la même sémantique que la méthode <see cref="M:System.String.Format(System.String,System.Object,System.Object)" />.</summary>
      <param name="format">Chaîne de format composite.</param>
      <param name="arg0">Premier objet à mettre en forme et à écrire.</param>
      <param name="arg1">Deuxième objet à mettre en forme et à écrire.</param>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLine(System.String,System.Object,System.Object,System.Object)">
      <summary>Écrit une chaîne mise en forme et une nouvelle ligne dans le flux, en utilisant la même sémantique que <see cref="M:System.String.Format(System.String,System.Object)" />.</summary>
      <param name="format">Chaîne de format composite.</param>
      <param name="arg0">Premier objet à mettre en forme et à écrire.</param>
      <param name="arg1">Deuxième objet à mettre en forme et à écrire.</param>
      <param name="arg2">Troisième objet à mettre en forme et à écrire.</param>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLine(System.String,System.Object[])">
      <summary>Écrit une chaîne mise en forme et une nouvelle ligne dans le flux, en utilisant la même sémantique que <see cref="M:System.String.Format(System.String,System.Object)" />.</summary>
      <param name="format">Chaîne de format composite.</param>
      <param name="arg">Tableau d'objets contenant aucun, un ou plusieurs objets à mettre en forme et à écrire.</param>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLineAsync">
      <summary>Écrit de façon asynchrone une marque de fin de ligne dans le flux.</summary>
      <returns>Tâche qui représente l’opération d’écriture asynchrone.</returns>
      <exception cref="T:System.ObjectDisposedException">Le writer de flux est supprimé.</exception>
      <exception cref="T:System.InvalidOperationException">Le writer du flux est actuellement utilisé par une opération d’écriture précédente.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLineAsync(System.Char)">
      <summary>Écrit de façon asynchrone un caractère dans le flux, suivi d’une marque de fin de ligne.</summary>
      <param name="value">Caractère à écrire dans le flux.</param>
      <returns>Tâche qui représente l’opération d’écriture asynchrone.</returns>
      <exception cref="T:System.ObjectDisposedException">Le writer de flux est supprimé.</exception>
      <exception cref="T:System.InvalidOperationException">Le writer du flux est actuellement utilisé par une opération d’écriture précédente.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)">
      <summary>Écrit de façon asynchrone un sous-tableau de caractères dans le flux, suivi d’une marque de fin de ligne.</summary>
      <param name="buffer">Tableau de caractères à partir duquel les données doivent être écrites.</param>
      <param name="index">Position du caractère dans la mémoire tampon à laquelle commencer la lecture des données.</param>
      <param name="count">Nombre maximal de caractères à écrire.</param>
      <returns>Tâche qui représente l’opération d’écriture asynchrone.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> plus <paramref name="count" /> est supérieur à la longueur de la mémoire tampon.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> ou <paramref name="count" /> est un nombre négatif.</exception>
      <exception cref="T:System.ObjectDisposedException">Le writer de flux est supprimé.</exception>
      <exception cref="T:System.InvalidOperationException">Le writer du flux est actuellement utilisé par une opération d’écriture précédente.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLineAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)">
      <summary>Écrit de façon asynchrone la représentation sous forme de texte d’une zone de mémoire de caractères dans le flux, suivie d’une marque de fin de ligne.</summary>
      <param name="buffer">Zone de mémoire de caractères à écrire dans le flux.</param>
      <param name="cancellationToken">Jeton pour surveiller les requêtes d'annulation. La valeur par défaut est <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Tâche qui représente l’opération d’écriture asynchrone.</returns>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLineAsync(System.String)">
      <summary>Écrit de façon asynchrone une chaîne dans le flux, suivie d’une marque de fin de ligne.</summary>
      <param name="value">Chaîne à écrire. Si la valeur est <see langword="null" />, seul une marque de fin de ligne est écrite.</param>
      <returns>Tâche qui représente l’opération d’écriture asynchrone.</returns>
      <exception cref="T:System.ObjectDisposedException">Le writer de flux est supprimé.</exception>
      <exception cref="T:System.InvalidOperationException">Le writer du flux est actuellement utilisé par une opération d’écriture précédente.</exception>
    </member>
    <member name="T:System.IO.StringReader">
      <summary>Implémente <see cref="T:System.IO.TextReader" /> qui lit une chaîne.</summary>
    </member>
    <member name="M:System.IO.StringReader.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.StringReader" /> qui lit la chaîne spécifiée.</summary>
      <param name="s">Chaîne à laquelle <see cref="T:System.IO.StringReader" /> doit être initialisé.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="s" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.StringReader.Close">
      <summary>Ferme <see cref="T:System.IO.StringReader" />.</summary>
    </member>
    <member name="M:System.IO.StringReader.Dispose(System.Boolean)">
      <summary>Libère les ressources non managées utilisées par <see cref="T:System.IO.StringReader" /> et libère éventuellement les ressources managées.</summary>
      <param name="disposing">
        <see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour libérer uniquement les ressources non managées.</param>
    </member>
    <member name="M:System.IO.StringReader.Peek">
      <summary>Retourne le prochain caractère disponible, mais ne le consomme pas.</summary>
      <returns>Entier représentant le prochain caractère à lire, ou -1 si plus aucun caractère n’est disponible ou si le flux ne prend pas en charge la recherche.</returns>
      <exception cref="T:System.ObjectDisposedException">Le lecteur actuel est fermé.</exception>
    </member>
    <member name="M:System.IO.StringReader.Read">
      <summary>Lit le caractère suivant dans la chaîne d’entrée et avance sa position d’un caractère.</summary>
      <returns>Caractère suivant de la chaîne sous-jacente, ou -1 si plus aucun caractère n’est disponible.</returns>
      <exception cref="T:System.ObjectDisposedException">Le lecteur actuel est fermé.</exception>
    </member>
    <member name="M:System.IO.StringReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>Lit un bloc de caractères dans la chaîne d’entrée et avance la position du caractère de <paramref name="count" />.</summary>
      <param name="buffer">Quand cette méthode est retournée, contient le tableau de caractères spécifié dont les valeurs comprises entre <paramref name="index" /> et (<paramref name="index" /> + <paramref name="count" /> - 1) sont remplacées par les caractères lus dans la source actuelle.</param>
      <param name="index">Index de début dans la mémoire tampon.</param>
      <param name="count">Nombre de caractères à lire.</param>
      <returns>Nombre total de caractères lus dans la mémoire tampon. Cela peut être inférieur au nombre de caractères demandé si ce nombre n’est pas actuellement disponible, ou égal à zéro si la fin de la chaîne sous-jacente a été atteinte.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">La longueur de la mémoire tampon moins <paramref name="index" /> est inférieure à <paramref name="count" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> ou <paramref name="count" /> est un nombre négatif.</exception>
      <exception cref="T:System.ObjectDisposedException">Le lecteur actuel est fermé.</exception>
    </member>
    <member name="M:System.IO.StringReader.Read(System.Span{System.Char})">
      <param name="buffer" />
    </member>
    <member name="M:System.IO.StringReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
      <summary>Lit un nombre maximal spécifié de caractères à partir de la chaîne actuelle de manière asynchrone, et écrit les données dans une mémoire tampon, en commençant à l’index spécifié.</summary>
      <param name="buffer">Quand cette méthode est retournée, contient le tableau de caractères spécifié dont les valeurs comprises entre <paramref name="index" /> et (<paramref name="index" /> + <paramref name="count" /> - 1) sont remplacées par les caractères lus dans la source actuelle.</param>
      <param name="index">Position dans <paramref name="buffer" /> à partir de laquelle commencer l'écriture.</param>
      <param name="count">Nombre maximal de caractères à lire. Si la fin de la chaîne est atteinte avant que le nombre de caractères spécifié soit écrit dans la mémoire tampon, la méthode est retournée.</param>
      <returns>Tâche qui représente l'opération de lecture asynchrone. La valeur du paramètre <paramref name="TResult" /> contient le nombre total d'octets lus dans la mémoire tampon. La valeur de résultat peut être inférieure au nombre d’octets demandés si le nombre d’octets actuellement disponibles est inférieur au nombre demandé, ou elle peut avoir la valeur 0 (zéro) si la fin de la chaîne a été atteinte.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> ou <paramref name="count" /> est un nombre négatif.</exception>
      <exception cref="T:System.ArgumentException">La somme de <paramref name="index" /> et <paramref name="count" /> est supérieure à la longueur de la mémoire tampon.</exception>
      <exception cref="T:System.ObjectDisposedException">Le lecteur de chaîne a été supprimé.</exception>
      <exception cref="T:System.InvalidOperationException">Le lecteur est actuellement utilisé par une opération de lecture antérieure.</exception>
    </member>
    <member name="M:System.IO.StringReader.ReadAsync(System.Memory{System.Char},System.Threading.CancellationToken)">
      <param name="buffer" />
      <param name="cancellationToken" />
    </member>
    <member name="M:System.IO.StringReader.ReadBlock(System.Span{System.Char})">
      <param name="buffer" />
    </member>
    <member name="M:System.IO.StringReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
      <summary>Lit un nombre maximal spécifié de caractères à partir de la chaîne actuelle de manière asynchrone, et écrit les données dans une mémoire tampon, en commençant à l’index spécifié.</summary>
      <param name="buffer">Quand cette méthode est retournée, contient le tableau de caractères spécifié dont les valeurs comprises entre <paramref name="index" /> et (<paramref name="index" /> + <paramref name="count" /> - 1) sont remplacées par les caractères lus dans la source actuelle.</param>
      <param name="index">Position dans <paramref name="buffer" /> à partir de laquelle commencer l'écriture.</param>
      <param name="count">Nombre maximal de caractères à lire. Si la fin de la chaîne est atteinte avant que le nombre de caractères spécifié soit écrit dans la mémoire tampon, la méthode est retournée.</param>
      <returns>Tâche qui représente l'opération de lecture asynchrone. La valeur du paramètre <paramref name="TResult" /> contient le nombre total d'octets lus dans la mémoire tampon. La valeur de résultat peut être inférieure au nombre d’octets demandés si le nombre d’octets actuellement disponibles est inférieur au nombre demandé, ou elle peut avoir la valeur 0 (zéro) si la fin de la chaîne a été atteinte.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> ou <paramref name="count" /> est un nombre négatif.</exception>
      <exception cref="T:System.ArgumentException">La somme de <paramref name="index" /> et <paramref name="count" /> est supérieure à la longueur de la mémoire tampon.</exception>
      <exception cref="T:System.ObjectDisposedException">Le lecteur de chaîne a été supprimé.</exception>
      <exception cref="T:System.InvalidOperationException">Le lecteur est actuellement utilisé par une opération de lecture antérieure.</exception>
    </member>
    <member name="M:System.IO.StringReader.ReadBlockAsync(System.Memory{System.Char},System.Threading.CancellationToken)">
      <param name="buffer" />
      <param name="cancellationToken" />
    </member>
    <member name="M:System.IO.StringReader.ReadLine">
      <summary>Lit une ligne de caractères à partir de la chaîne en cours et retourne les données sous forme de chaîne.</summary>
      <returns>Ligne suivante dans la chaîne actuelle ou <see langword="null" /> si la fin de la chaîne est atteinte.</returns>
      <exception cref="T:System.ObjectDisposedException">Le lecteur actuel est fermé.</exception>
      <exception cref="T:System.OutOfMemoryException">La mémoire est insuffisante pour allouer une mémoire tampon à la chaîne retournée.</exception>
    </member>
    <member name="M:System.IO.StringReader.ReadLineAsync">
      <summary>Lit une ligne de caractères de manière asynchrone à partir de la chaîne en cours et retourne les données sous forme de chaîne.</summary>
      <returns>Tâche qui représente l'opération de lecture asynchrone. La valeur du paramètre <paramref name="TResult" /> contient la ligne suivante issue du lecteur de chaîne, ou a la valeur <see langword="null" /> si tous les caractères ont été lus.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Le nombre de caractères dans la ligne suivante est supérieur à <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le lecteur de chaîne a été supprimé.</exception>
      <exception cref="T:System.InvalidOperationException">Le lecteur est actuellement utilisé par une opération de lecture antérieure.</exception>
    </member>
    <member name="M:System.IO.StringReader.ReadToEnd">
      <summary>Lit tous les caractères entre la position actuelle et la fin de la chaîne, puis les retourne sous la forme d’une chaîne unique.</summary>
      <returns>Contenu à partir de la position actuelle jusqu’à la fin du flux sous-jacent.</returns>
      <exception cref="T:System.OutOfMemoryException">La mémoire est insuffisante pour allouer une mémoire tampon à la chaîne retournée.</exception>
      <exception cref="T:System.ObjectDisposedException">Le lecteur actuel est fermé.</exception>
    </member>
    <member name="M:System.IO.StringReader.ReadToEndAsync">
      <summary>Lit tous les caractères entre la position actuelle et la fin de la chaîne de manière asynchrone, puis les retourne sous la forme d’une chaîne unique.</summary>
      <returns>Tâche qui représente l'opération de lecture asynchrone. La valeur du paramètre <paramref name="TResult" /> contient une chaîne composée des caractères de la position actuelle jusqu’à la fin de la chaîne.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Le nombre de caractères est supérieur à <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le lecteur de chaîne a été supprimé.</exception>
      <exception cref="T:System.InvalidOperationException">Le lecteur est actuellement utilisé par une opération de lecture antérieure.</exception>
    </member>
    <member name="T:System.IO.StringWriter">
      <summary>Implémente un <see cref="T:System.IO.TextWriter" /> pour écrire des informations dans une chaîne. Les informations sont stockées dans un <see cref="T:System.Text.StringBuilder" /> sous-jacent.</summary>
    </member>
    <member name="M:System.IO.StringWriter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.StringWriter" />.</summary>
    </member>
    <member name="M:System.IO.StringWriter.#ctor(System.IFormatProvider)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.StringWriter" /> avec le contrôle de format spécifié.</summary>
      <param name="formatProvider">Objet <see cref="T:System.IFormatProvider" /> qui contrôle la mise en forme.</param>
    </member>
    <member name="M:System.IO.StringWriter.#ctor(System.Text.StringBuilder)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.StringWriter" /> qui écrit dans le <see cref="T:System.Text.StringBuilder" /> spécifié.</summary>
      <param name="sb">Objet <see cref="T:System.Text.StringBuilder" /> dans lequel écrire.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sb" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.StringWriter.#ctor(System.Text.StringBuilder,System.IFormatProvider)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.StringWriter" /> qui écrit dans le <see cref="T:System.Text.StringBuilder" /> spécifié et qui possède le fournisseur de format spécifié.</summary>
      <param name="sb">Objet <see cref="T:System.Text.StringBuilder" /> dans lequel écrire.</param>
      <param name="formatProvider">Objet <see cref="T:System.IFormatProvider" /> qui contrôle la mise en forme.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sb" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.StringWriter.Close">
      <summary>Ferme le <see cref="T:System.IO.StringWriter" /> actuel et le flux sous-jacent.</summary>
    </member>
    <member name="M:System.IO.StringWriter.Dispose(System.Boolean)">
      <summary>Libère les ressources non managées utilisées par <see cref="T:System.IO.StringWriter" /> et libère éventuellement les ressources managées.</summary>
      <param name="disposing">
        <see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour libérer uniquement les ressources non managées.</param>
    </member>
    <member name="P:System.IO.StringWriter.Encoding">
      <summary>Obtient le <see cref="T:System.Text.Encoding" /> dans lequel la sortie est écrite.</summary>
      <returns>
        <see langword="Encoding" /> dans lequel la sortie est écrite.</returns>
    </member>
    <member name="M:System.IO.StringWriter.FlushAsync">
      <summary>Efface de façon asynchrone toutes les mémoires tampons pour le writer actuel et provoque l'écriture des données mises en mémoire tampon sur l'appareil sous-jacent.</summary>
      <returns>Tâche qui représente l’opération de vidage asynchrone.</returns>
    </member>
    <member name="M:System.IO.StringWriter.GetStringBuilder">
      <summary>Retourne l’élément <see cref="T:System.Text.StringBuilder" /> sous-jacent.</summary>
      <returns>L'élément <see langword="StringBuilder" /> sous-jacent.</returns>
    </member>
    <member name="M:System.IO.StringWriter.ToString">
      <summary>Retourne une chaîne contenant les caractères écrits sur le <see langword="StringWriter" /> actuel jusqu’à présent.</summary>
      <returns>Chaîne contenant les caractères écrits sur le <see langword="StringWriter" /> actuel.</returns>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.Char)">
      <summary>Écrit un caractère dans la chaîne.</summary>
      <param name="value">Caractère à écrire.</param>
      <exception cref="T:System.ObjectDisposedException">Le writer est fermé.</exception>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>Écrit un sous-tableau de caractères dans la chaîne.</summary>
      <param name="buffer">Tableau de caractères à partir duquel les données doivent être écrites.</param>
      <param name="index">Position dans la mémoire tampon à laquelle commencer la lecture des données.</param>
      <param name="count">Nombre maximal de caractères à écrire.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> ou <paramref name="count" /> est un nombre négatif.</exception>
      <exception cref="T:System.ArgumentException">(<paramref name="index" /> + <paramref name="count" />)&gt; <paramref name="buffer" />. <see langword="Length" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le writer est fermé.</exception>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.ReadOnlySpan{System.Char})">
      <summary>Écrit la représentation sous forme de chaîne d’une plage de caractères dans la chaîne actuelle.</summary>
      <param name="buffer">Plage de caractères à écrire dans la chaîne.</param>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.String)">
      <summary>Écrit une chaîne dans la chaîne actuelle.</summary>
      <param name="value">Chaîne à écrire.</param>
      <exception cref="T:System.ObjectDisposedException">Le writer est fermé.</exception>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.Text.StringBuilder)">
      <summary>Écrit la représentation sous forme de chaîne d’un générateur de chaîne dans la chaîne actuelle.</summary>
      <param name="value">Générateur de chaînes à écrire dans la chaîne.</param>
    </member>
    <member name="M:System.IO.StringWriter.WriteAsync(System.Char)">
      <summary>Écrit un caractère dans la chaîne de façon asynchrone.</summary>
      <param name="value">Caractère à écrire dans la chaîne.</param>
      <returns>Tâche qui représente l’opération d’écriture asynchrone.</returns>
      <exception cref="T:System.ObjectDisposedException">Le writer de chaîne est supprimé.</exception>
      <exception cref="T:System.InvalidOperationException">Le writer de chaîne est actuellement utilisé par une opération d'écriture précédente.</exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteAsync(System.Char[],System.Int32,System.Int32)">
      <summary>Écrit un sous-tableau de caractères dans la chaîne de façon asynchrone.</summary>
      <param name="buffer">Tableau de caractères à partir duquel les données doivent être écrites.</param>
      <param name="index">Position dans la mémoire tampon à laquelle commencer la lecture des données.</param>
      <param name="count">Nombre maximal de caractères à écrire.</param>
      <returns>Tâche qui représente l’opération d’écriture asynchrone.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> plus <paramref name="count" /> est supérieur à la longueur de la mémoire tampon.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> ou <paramref name="count" /> est un nombre négatif.</exception>
      <exception cref="T:System.ObjectDisposedException">Le writer de chaîne est supprimé.</exception>
      <exception cref="T:System.InvalidOperationException">Le writer de chaîne est actuellement utilisé par une opération d'écriture précédente.</exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)">
      <summary>Écrit de façon asynchrone une zone de mémoire de caractères dans la chaîne.</summary>
      <param name="buffer">Zone de mémoire de caractères à écrire dans la chaîne.</param>
      <param name="cancellationToken">Jeton pour surveiller les requêtes d'annulation. La valeur par défaut est <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Tâche qui représente l’opération d’écriture asynchrone.</returns>
    </member>
    <member name="M:System.IO.StringWriter.WriteAsync(System.String)">
      <summary>Écrit une chaîne dans la chaîne actuelle de façon asynchrone.</summary>
      <param name="value">Chaîne à écrire. Si <paramref name="value" /> a la valeur <see langword="null" />, rien n'est écrit dans le flux de texte.</param>
      <returns>Tâche qui représente l’opération d’écriture asynchrone.</returns>
      <exception cref="T:System.ObjectDisposedException">Le writer de chaîne est supprimé.</exception>
      <exception cref="T:System.InvalidOperationException">Le writer de chaîne est actuellement utilisé par une opération d'écriture précédente.</exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteAsync(System.Text.StringBuilder,System.Threading.CancellationToken)">
      <summary>Écrit de façon asynchrone la représentation sous forme de texte d’un générateur de chaîne dans la chaîne.</summary>
      <param name="value">Générateur de chaînes à écrire dans la chaîne.</param>
      <param name="cancellationToken">Jeton pour surveiller les requêtes d'annulation. La valeur par défaut est <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Tâche qui représente l’opération d’écriture asynchrone.</returns>
    </member>
    <member name="M:System.IO.StringWriter.WriteLine(System.ReadOnlySpan{System.Char})">
      <summary>Écrit la représentation sous forme de texte d’une plage de caractères dans la chaîne, suivie d’une marque de fin de ligne.</summary>
      <param name="buffer">Plage de caractères à écrire dans la chaîne.</param>
    </member>
    <member name="M:System.IO.StringWriter.WriteLine(System.Text.StringBuilder)">
      <summary>Écrit la représentation sous forme de texte d’un générateur de chaîne dans la chaîne, suivie d’une marque de fin de ligne.</summary>
      <param name="value">Chaîne, sous la forme d’un générateur de chaîne, à écrire dans la chaîne.</param>
    </member>
    <member name="M:System.IO.StringWriter.WriteLineAsync(System.Char)">
      <summary>Écrit de façon asynchrone un caractère dans la chaîne, suivi d’une marque de fin de ligne.</summary>
      <param name="value">Caractère à écrire dans la chaîne.</param>
      <returns>Tâche qui représente l’opération d’écriture asynchrone.</returns>
      <exception cref="T:System.ObjectDisposedException">Le writer de chaîne est supprimé.</exception>
      <exception cref="T:System.InvalidOperationException">Le writer de chaîne est actuellement utilisé par une opération d'écriture précédente.</exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)">
      <summary>Écrit de façon asynchrone un sous-tableau de caractères dans la chaîne, suivi d’une marque de fin de ligne.</summary>
      <param name="buffer">Tableau de caractères à partir duquel les données doivent être écrites.</param>
      <param name="index">Position dans la mémoire tampon à laquelle commencer la lecture des données.</param>
      <param name="count">Nombre maximal de caractères à écrire.</param>
      <returns>Tâche qui représente l’opération d’écriture asynchrone.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> plus <paramref name="count" /> est supérieur à la longueur de la mémoire tampon.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> ou <paramref name="count" /> est un nombre négatif.</exception>
      <exception cref="T:System.ObjectDisposedException">Le writer de chaîne est supprimé.</exception>
      <exception cref="T:System.InvalidOperationException">Le writer de chaîne est actuellement utilisé par une opération d'écriture précédente.</exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteLineAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)">
      <summary>Écrit de façon asynchrone la représentation sous forme de chaîne de la zone de mémoire de caractères dans la chaîne actuelle, suivie d’une marque de fin de ligne.</summary>
      <param name="buffer">Zone de mémoire de caractères à écrire dans la chaîne.</param>
      <param name="cancellationToken">Jeton pour surveiller les requêtes d'annulation. La valeur par défaut est <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Tâche qui représente l’opération d’écriture asynchrone.</returns>
    </member>
    <member name="M:System.IO.StringWriter.WriteLineAsync(System.String)">
      <summary>Écrit de façon asynchrone une chaîne dans la chaîne actuelle, suivie d’une marque de fin de ligne.</summary>
      <param name="value">Chaîne à écrire. Si la valeur est <see langword="null" />, seul une marque de fin de ligne est écrite.</param>
      <returns>Tâche qui représente l’opération d’écriture asynchrone.</returns>
      <exception cref="T:System.ObjectDisposedException">Le writer de chaîne est supprimé.</exception>
      <exception cref="T:System.InvalidOperationException">Le writer de chaîne est actuellement utilisé par une opération d'écriture précédente.</exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteLineAsync(System.Text.StringBuilder,System.Threading.CancellationToken)">
      <summary>Écrit de façon asynchrone la représentation sous forme de chaîne du générateur de chaîne dans la chaîne actuelle, suivie d’une marque de fin de ligne.</summary>
      <param name="value">Générateur de chaînes à écrire dans la chaîne.</param>
      <param name="cancellationToken">Jeton pour surveiller les requêtes d'annulation. La valeur par défaut est <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Tâche qui représente l’opération d’écriture asynchrone.</returns>
    </member>
    <member name="T:System.IO.TextReader">
      <summary>Représente un lecteur capable de lire une série séquentielle de caractères.</summary>
    </member>
    <member name="M:System.IO.TextReader.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.TextReader" />.</summary>
    </member>
    <member name="M:System.IO.TextReader.Close">
      <summary>Ferme le <see cref="T:System.IO.TextReader" /> et libère toutes les ressources système associées au <see langword="TextReader" />.</summary>
    </member>
    <member name="M:System.IO.TextReader.Dispose">
      <summary>Libère toutes les ressources utilisées par l'objet <see cref="T:System.IO.TextReader" />.</summary>
    </member>
    <member name="M:System.IO.TextReader.Dispose(System.Boolean)">
      <summary>Libère les ressources non managées utilisées par <see cref="T:System.IO.TextReader" /> et libère éventuellement les ressources managées.</summary>
      <param name="disposing">
        <see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour ne libérer que les ressources non managées.</param>
    </member>
    <member name="F:System.IO.TextReader.Null">
      <summary>Fournit un <see langword="TextReader" /> sans données à lire.</summary>
    </member>
    <member name="M:System.IO.TextReader.Peek">
      <summary>Lit le caractère suivant sans modifier l'état du lecteur ou la source du caractère. Retourne le prochain caractère disponible sans le lire réellement à partir du flux lecteur.</summary>
      <returns>Entier représentant le prochain caractère à lire, ou -1 si plus aucun caractère n'est disponible ou si le lecteur ne prend pas en charge la recherche.</returns>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.IO.TextReader" /> est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
    </member>
    <member name="M:System.IO.TextReader.Read">
      <summary>Lit le caractère suivant à partir du lecteur de texte et avance la position d'un caractère.</summary>
      <returns>Caractère suivant du lecteur de texte ou -1 s'il n'y a plus de caractères disponibles. L'implémentation par défaut retourne -1.</returns>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.IO.TextReader" /> est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
    </member>
    <member name="M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>Lit un nombre maximal spécifié de caractères à partir du lecteur actuel et écrit les données dans une mémoire tampon, en commençant à l'index spécifié.</summary>
      <param name="buffer">Quand cette méthode est retournée, contient le tableau de caractères spécifié dont les valeurs comprises entre <paramref name="index" /> et (<paramref name="index" /> + <paramref name="count" /> - 1) sont remplacées par les caractères lus dans la source actuelle.</param>
      <param name="index">Position dans <paramref name="buffer" /> à partir de laquelle commencer l'écriture.</param>
      <param name="count">Nombre maximal de caractères à lire. Si la fin du lecteur est atteinte avant que le nombre de caractères spécifié soit lu dans la mémoire tampon, la méthode est retournée.</param>
      <returns>Nombre de caractères lus. Le nombre sera inférieur ou égal à <paramref name="count" />, selon les données disponibles dans le lecteur. Cette méthode retourne zéro si elle est appelée alors qu'il ne reste aucun caractère à lire.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">La longueur de la mémoire tampon moins <paramref name="index" /> est inférieure à <paramref name="count" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> ou <paramref name="count" /> est un nombre négatif.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.IO.TextReader" /> est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
    </member>
    <member name="M:System.IO.TextReader.Read(System.Span{System.Char})">
      <param name="buffer" />
    </member>
    <member name="M:System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
      <summary>Lit de façon asynchrone un nombre maximal de caractères spécifié dans le lecteur de texte actuel et écrit les données dans une mémoire tampon, en commençant à l'index spécifié.</summary>
      <param name="buffer">Quand cette méthode est retournée, contient le tableau de caractères spécifié dont les valeurs comprises entre <paramref name="index" /> et (<paramref name="index" /> + <paramref name="count" /> - 1) sont remplacées par les caractères lus dans la source actuelle.</param>
      <param name="index">Position dans <paramref name="buffer" /> à partir de laquelle commencer l'écriture.</param>
      <param name="count">Nombre maximal de caractères à lire. Si la fin du texte est atteinte avant que le nombre de caractères spécifié soit lu dans la mémoire tampon, la méthode en cours est retournée.</param>
      <returns>Tâche qui représente l'opération de lecture asynchrone. La valeur du paramètre <paramref name="TResult" /> contient le nombre total d'octets lus dans la mémoire tampon. La valeur de résultat peut être inférieure au nombre d'octets demandés si le nombre d'octets actuellement disponibles est inférieur au nombre demandé, ou elle peut avoir la valeur 0 (zéro) si la fin du texte a été atteinte.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> ou <paramref name="count" /> est un nombre négatif.</exception>
      <exception cref="T:System.ArgumentException">La somme de <paramref name="index" /> et <paramref name="count" /> est supérieure à la longueur de la mémoire tampon.</exception>
      <exception cref="T:System.ObjectDisposedException">Le lecteur de texte a été supprimé.</exception>
      <exception cref="T:System.InvalidOperationException">Le lecteur est actuellement utilisé par une opération de lecture antérieure.</exception>
    </member>
    <member name="M:System.IO.TextReader.ReadAsync(System.Memory{System.Char},System.Threading.CancellationToken)">
      <param name="buffer" />
      <param name="cancellationToken" />
    </member>
    <member name="M:System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
      <summary>Lit un nombre maximal spécifié de caractères à partir du lecteur de texte actuel et écrit les données dans une mémoire tampon, en commençant à l'index spécifié.</summary>
      <param name="buffer">Lorsque cette méthode est retournée, ce paramètre contient le tableau de caractères spécifié dont les valeurs comprises entre <paramref name="index" /> et (<paramref name="index" /> + <paramref name="count" /> -1) sont remplacées par les caractères lus dans la source actuelle.</param>
      <param name="index">Position dans <paramref name="buffer" /> à partir de laquelle commencer l'écriture.</param>
      <param name="count">Nombre maximal de caractères à lire.</param>
      <returns>Nombre de caractères lus. Le nombre sera inférieur ou égal à <paramref name="count" />, selon que tous les caractères d'entrée ont été lus.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">La longueur de la mémoire tampon moins <paramref name="index" /> est inférieure à <paramref name="count" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> ou <paramref name="count" /> est un nombre négatif.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.IO.TextReader" /> est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
    </member>
    <member name="M:System.IO.TextReader.ReadBlock(System.Span{System.Char})">
      <param name="buffer" />
    </member>
    <member name="M:System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
      <summary>Lit de façon asynchrone un nombre maximal de caractères spécifié dans le lecteur de texte actuel et écrit les données dans une mémoire tampon, en commençant à l'index spécifié.</summary>
      <param name="buffer">Quand cette méthode est retournée, contient le tableau de caractères spécifié dont les valeurs comprises entre <paramref name="index" /> et (<paramref name="index" /> + <paramref name="count" /> - 1) sont remplacées par les caractères lus dans la source actuelle.</param>
      <param name="index">Position dans <paramref name="buffer" /> à partir de laquelle commencer l'écriture.</param>
      <param name="count">Nombre maximal de caractères à lire. Si la fin du texte est atteinte avant que le nombre de caractères spécifié soit lu dans la mémoire tampon, la méthode en cours est retournée.</param>
      <returns>Tâche qui représente l'opération de lecture asynchrone. La valeur du paramètre <paramref name="TResult" /> contient le nombre total d'octets lus dans la mémoire tampon. La valeur de résultat peut être inférieure au nombre d'octets demandés si le nombre d'octets actuellement disponibles est inférieur au nombre demandé, ou elle peut avoir la valeur 0 (zéro) si la fin du texte a été atteinte.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> ou <paramref name="count" /> est un nombre négatif.</exception>
      <exception cref="T:System.ArgumentException">La somme de <paramref name="index" /> et <paramref name="count" /> est supérieure à la longueur de la mémoire tampon.</exception>
      <exception cref="T:System.ObjectDisposedException">Le lecteur de texte a été supprimé.</exception>
      <exception cref="T:System.InvalidOperationException">Le lecteur est actuellement utilisé par une opération de lecture antérieure.</exception>
    </member>
    <member name="M:System.IO.TextReader.ReadBlockAsync(System.Memory{System.Char},System.Threading.CancellationToken)">
      <param name="buffer" />
      <param name="cancellationToken" />
    </member>
    <member name="M:System.IO.TextReader.ReadLine">
      <summary>Lit une ligne de caractères à partir du lecteur de texte et retourne les données sous forme de chaîne.</summary>
      <returns>La ligne suivante du lecteur ou <see langword="null" /> si tous les caractères ont été lus.</returns>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
      <exception cref="T:System.OutOfMemoryException">La mémoire est insuffisante pour allouer une mémoire tampon à la chaîne retournée.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.IO.TextReader" /> est fermé.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Le nombre de caractères dans la ligne suivante est supérieur à <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.IO.TextReader.ReadLineAsync">
      <summary>Lit une ligne de caractères de manière asynchrone et retourne les données sous forme de chaîne.</summary>
      <returns>Tâche qui représente l'opération de lecture asynchrone. La valeur du paramètre <paramref name="TResult" /> contient la ligne suivante issue du lecteur de texte, ou a la valeur <see langword="null" /> si tous les caractères ont été lus.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Le nombre de caractères dans la ligne suivante est supérieur à <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le lecteur de texte a été supprimé.</exception>
      <exception cref="T:System.InvalidOperationException">Le lecteur est actuellement utilisé par une opération de lecture antérieure.</exception>
    </member>
    <member name="M:System.IO.TextReader.ReadToEnd">
      <summary>Lit tous les caractères entre la position actuelle et la fin du lecteur de texte, puis les retourne sous forme d'une chaîne.</summary>
      <returns>Chaîne contenant tous les caractères entre la position actuelle et la fin du lecteur de texte.</returns>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.IO.TextReader" /> est fermé.</exception>
      <exception cref="T:System.OutOfMemoryException">La mémoire est insuffisante pour allouer une mémoire tampon à la chaîne retournée.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Le nombre de caractères dans la ligne suivante est supérieur à <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.IO.TextReader.ReadToEndAsync">
      <summary>Lit tous les caractères entre la position actuelle et la fin du lecteur de texte de manière asynchrone, puis les retourne sous la forme d'une chaîne.</summary>
      <returns>Tâche qui représente l'opération de lecture asynchrone. La valeur du paramètre <paramref name="TResult" /> contient une chaîne composée des caractères de la position actuelle jusqu'à la fin du flux du lecteur de texte.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Le nombre de caractères est supérieur à <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le lecteur de texte a été supprimé.</exception>
      <exception cref="T:System.InvalidOperationException">Le lecteur est actuellement utilisé par une opération de lecture antérieure.</exception>
    </member>
    <member name="M:System.IO.TextReader.Synchronized(System.IO.TextReader)">
      <summary>Crée un wrapper thread-safe autour du <see langword="TextReader" /> spécifié.</summary>
      <param name="reader">
        <see langword="TextReader" /> à synchroniser.</param>
      <returns>
        <see cref="T:System.IO.TextReader" /> thread-safe.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="T:System.IO.TextWriter">
      <summary>Représente un writer capable d'écrire une série de caractères séquentiels. Cette classe est abstraite.</summary>
    </member>
    <member name="M:System.IO.TextWriter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.TextWriter" />.</summary>
    </member>
    <member name="M:System.IO.TextWriter.#ctor(System.IFormatProvider)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.TextWriter" /> avec le fournisseur de format spécifié.</summary>
      <param name="formatProvider">Objet <see cref="T:System.IFormatProvider" /> qui contrôle la mise en forme.</param>
    </member>
    <member name="M:System.IO.TextWriter.Close">
      <summary>Ferme le writer actuel et libère toutes les ressources système qui lui sont associées.</summary>
    </member>
    <member name="F:System.IO.TextWriter.CoreNewLine">
      <summary>Stocke les caractères de saut de ligne utilisés pour ce <see langword="TextWriter" />.</summary>
    </member>
    <member name="M:System.IO.TextWriter.Dispose">
      <summary>Libère toutes les ressources utilisées par l'objet <see cref="T:System.IO.TextWriter" />.</summary>
    </member>
    <member name="M:System.IO.TextWriter.Dispose(System.Boolean)">
      <summary>Libère les ressources non managées utilisées par <see cref="T:System.IO.TextWriter" /> et libère éventuellement les ressources managées.</summary>
      <param name="disposing">
        <see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour ne libérer que les ressources non managées.</param>
    </member>
    <member name="M:System.IO.TextWriter.DisposeAsync">
      <summary>Libère de façon asynchrone toutes les ressources utilisées par l’objet <see cref="T:System.IO.TextWriter" />.</summary>
      <returns>Tâche qui représente l’opération de suppression asynchrone.</returns>
    </member>
    <member name="P:System.IO.TextWriter.Encoding">
      <summary>En cas de substitution dans une classe dérivée, retourne l'encodage de caractères dans lequel la sortie est écrite.</summary>
      <returns>Encodage de caractères dans lequel la sortie est écrite.</returns>
    </member>
    <member name="M:System.IO.TextWriter.Flush">
      <summary>Efface toutes les mémoires tampons pour le writer actuel et provoque l'écriture des données mises en mémoire tampon sur l'appareil sous-jacent.</summary>
    </member>
    <member name="M:System.IO.TextWriter.FlushAsync">
      <summary>Efface de façon asynchrone toutes les mémoires tampons pour le writer actuel et provoque l'écriture des données mises en mémoire tampon sur l'appareil sous-jacent.</summary>
      <returns>Tâche qui représente l’opération de vidage asynchrone.</returns>
      <exception cref="T:System.ObjectDisposedException">Le writer de texte est supprimé.</exception>
      <exception cref="T:System.InvalidOperationException">Le writer est actuellement utilisé par une opération d'écriture précédente.</exception>
    </member>
    <member name="P:System.IO.TextWriter.FormatProvider">
      <summary>Obtient un objet qui contrôle la mise en forme.</summary>
      <returns>Objet <see cref="T:System.IFormatProvider" /> pour une culture spécifique, ou mise en forme de la culture actuelle si aucune autre culture n'est spécifiée.</returns>
    </member>
    <member name="P:System.IO.TextWriter.NewLine">
      <summary>Obtient ou définit la chaîne de marque de fin de ligne utilisée pour le <see langword="TextWriter" /> actuel.</summary>
      <returns>Chaîne de marque de fin de ligne pour le <see langword="TextWriter" /> actuel.</returns>
    </member>
    <member name="F:System.IO.TextWriter.Null">
      <summary>Fournit un élément <see langword="TextWriter" /> sans magasin de stockage dans lequel il est possible d'écrire, mais pas de lire.</summary>
    </member>
    <member name="M:System.IO.TextWriter.Synchronized(System.IO.TextWriter)">
      <summary>Crée un wrapper thread-safe autour du <see langword="TextWriter" /> spécifié.</summary>
      <param name="writer">
        <see langword="TextWriter" /> à synchroniser.</param>
      <returns>Wrapper thread-safe.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Boolean)">
      <summary>Écrit la représentation sous forme de texte d’une valeur <see langword="Boolean" /> dans le flux de texte.</summary>
      <param name="value">La valeur <see langword="Boolean" /> à écrire.</param>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.IO.TextWriter" /> est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Char)">
      <summary>Écrit un caractère dans le flux de texte.</summary>
      <param name="value">Caractère à écrire dans le flux de texte.</param>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.IO.TextWriter" /> est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Char[])">
      <summary>Écrit un tableau de caractères dans le flux de texte.</summary>
      <param name="buffer">Tableau de caractères à écrire dans le flux de texte.</param>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.IO.TextWriter" /> est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>Écrit un sous-tableau de caractères dans le flux de texte.</summary>
      <param name="buffer">Tableau de caractères à partir duquel les données doivent être écrites.</param>
      <param name="index">Position du caractère dans la mémoire tampon à laquelle commencer la récupération des données.</param>
      <param name="count">Nombre de caractères à écrire.</param>
      <exception cref="T:System.ArgumentException">La longueur de la mémoire tampon moins <paramref name="index" /> est inférieure à <paramref name="count" />.</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> ou <paramref name="count" /> est un nombre négatif.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.IO.TextWriter" /> est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Decimal)">
      <summary>Écrit la représentation sous forme de texte d’une valeur décimale dans le flux de texte.</summary>
      <param name="value">Valeur décimale à écrire.</param>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.IO.TextWriter" /> est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Double)">
      <summary>Écrit la représentation sous forme de texte d’une valeur à virgule flottante de 8 octets dans le flux de texte.</summary>
      <param name="value">Valeur à virgule flottante de 8 octets à écrire.</param>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.IO.TextWriter" /> est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Int32)">
      <summary>Écrit la représentation sous forme de texte d’un entier signé de 4 octets dans le flux de texte.</summary>
      <param name="value">Entier signé de 4 octets à écrire.</param>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.IO.TextWriter" /> est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Int64)">
      <summary>Écrit la représentation sous forme de texte d’un entier signé de 8 octets dans le flux de texte.</summary>
      <param name="value">Entier signé de 8 octets à écrire.</param>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.IO.TextWriter" /> est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Object)">
      <summary>Écrit la représentation sous forme de texte d’un objet dans le flux de texte en appelant la méthode <see langword="ToString" /> sur cet objet.</summary>
      <param name="value">Objet à écrire.</param>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.IO.TextWriter" /> est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.ReadOnlySpan{System.Char})">
      <summary>Écrit une plage de caractères dans le flux de texte.</summary>
      <param name="buffer">Plage de caractères à écrire.</param>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Single)">
      <summary>Écrit la représentation sous forme de texte d’une valeur à virgule flottante de 4 octets dans le flux de texte.</summary>
      <param name="value">Valeur à virgule flottante de 4 octets à écrire.</param>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.IO.TextWriter" /> est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String)">
      <summary>Écrit une chaîne dans le flux de texte.</summary>
      <param name="value">Chaîne à écrire.</param>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.IO.TextWriter" /> est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String,System.Object)">
      <summary>Écrit une chaîne mise en forme dans le flux de texte, en utilisant la même sémantique que la méthode <see cref="M:System.String.Format(System.String,System.Object)" />.</summary>
      <param name="format">Chaîne de format composite.</param>
      <param name="arg0">Objet à mettre en forme et à écrire.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.IO.TextWriter" /> est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> n'est pas une chaîne de format composite.  
ou 
L'index d'un élément de format est inférieur à 0 (zéro) ou supérieur ou égal au nombre d'objets à mettre en forme (qui, pour cette surcharge de méthode, s'élève à un).</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String,System.Object,System.Object)">
      <summary>Écrit une chaîne mise en forme dans le flux de texte, en utilisant la même sémantique que la méthode <see cref="M:System.String.Format(System.String,System.Object,System.Object)" />.</summary>
      <param name="format">Chaîne de format composite.</param>
      <param name="arg0">Premier objet à mettre en forme et à écrire.</param>
      <param name="arg1">Deuxième objet à mettre en forme et à écrire.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.IO.TextWriter" /> est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> n'est pas une chaîne de format composite.  

ou - 
L'index d'un élément de format est inférieur à 0 (zéro) ou supérieur ou égal au nombre d'objets à mettre en forme (qui, pour cette surcharge de méthode, s'élève à deux).</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String,System.Object,System.Object,System.Object)">
      <summary>Écrit une chaîne mise en forme dans le flux de texte, en utilisant la même sémantique que la méthode <see cref="M:System.String.Format(System.String,System.Object,System.Object,System.Object)" />.</summary>
      <param name="format">Chaîne de format composite.</param>
      <param name="arg0">Premier objet à mettre en forme et à écrire.</param>
      <param name="arg1">Deuxième objet à mettre en forme et à écrire.</param>
      <param name="arg2">Troisième objet à mettre en forme et à écrire.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.IO.TextWriter" /> est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> n'est pas une chaîne de format composite.  

ou - 
L'index d'un élément de format est inférieur à 0 (zéro) ou supérieur ou égal au nombre d'objets à mettre en forme (qui, pour cette surcharge de méthode, s'élève à trois).</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String,System.Object[])">
      <summary>Écrit une chaîne mise en forme dans le flux de texte, en utilisant la même sémantique que la méthode <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="format">Chaîne de format composite.</param>
      <param name="arg">Tableau d'objets contenant aucun, un ou plusieurs objets à mettre en forme et à écrire.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> ou <paramref name="arg" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.IO.TextWriter" /> est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> n'est pas une chaîne de format composite.  

ou - 
L’index d’un élément de format est inférieur à 0 (zéro), ou supérieur ou égal à la longueur du tableau <paramref name="arg" />.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Text.StringBuilder)">
      <summary>Écrit un générateur de chaîne dans le flux de texte.</summary>
      <param name="value">Chaîne, sous la forme d’un générateur de chaîne, à écrire dans le flux de texte.</param>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.UInt32)">
      <summary>Écrit la représentation sous forme de texte d’un entier non signé de 4 octets dans le flux de texte.</summary>
      <param name="value">Entier non signé de 4 octets à écrire.</param>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.IO.TextWriter" /> est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.UInt64)">
      <summary>Écrit la représentation sous forme de texte d’un entier non signé de 8 octets dans le flux de texte.</summary>
      <param name="value">Entier non signé de 8 octets à écrire.</param>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.IO.TextWriter" /> est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteAsync(System.Char)">
      <summary>Écrit de façon asynchrone un caractère dans le flux de texte.</summary>
      <param name="value">Caractère à écrire dans le flux de texte.</param>
      <returns>Tâche qui représente l’opération d’écriture asynchrone.</returns>
      <exception cref="T:System.ObjectDisposedException">Le writer de texte est supprimé.</exception>
      <exception cref="T:System.InvalidOperationException">Le writer de texte est actuellement utilisé par une opération d'écriture précédente.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteAsync(System.Char[])">
      <summary>Écrit de façon asynchrone un tableau de caractères dans le flux de texte.</summary>
      <param name="buffer">Tableau de caractères à écrire dans le flux de texte. Si <paramref name="buffer" /> a la valeur <see langword="null" />, rien n'est écrit.</param>
      <returns>Tâche qui représente l’opération d’écriture asynchrone.</returns>
      <exception cref="T:System.ObjectDisposedException">Le writer de texte est supprimé.</exception>
      <exception cref="T:System.InvalidOperationException">Le writer de texte est actuellement utilisé par une opération d'écriture précédente.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteAsync(System.Char[],System.Int32,System.Int32)">
      <summary>Écrit de façon asynchrone un sous-tableau de caractères dans le flux de texte.</summary>
      <param name="buffer">Tableau de caractères à partir duquel les données doivent être écrites.</param>
      <param name="index">Position du caractère dans la mémoire tampon à laquelle commencer la récupération des données.</param>
      <param name="count">Nombre de caractères à écrire.</param>
      <returns>Tâche qui représente l’opération d’écriture asynchrone.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> plus <paramref name="count" /> est supérieur à la longueur de la mémoire tampon.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> ou <paramref name="count" /> est un nombre négatif.</exception>
      <exception cref="T:System.ObjectDisposedException">Le writer de texte est supprimé.</exception>
      <exception cref="T:System.InvalidOperationException">Le writer de texte est actuellement utilisé par une opération d'écriture précédente.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)">
      <summary>Écrit de façon asynchrone une zone de mémoire de caractères dans le flux de texte.</summary>
      <param name="buffer">Zone de mémoire de caractères à écrire dans le flux de texte.</param>
      <param name="cancellationToken">Jeton pour surveiller les requêtes d'annulation. La valeur par défaut est <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Tâche qui représente l’opération d’écriture asynchrone.</returns>
    </member>
    <member name="M:System.IO.TextWriter.WriteAsync(System.String)">
      <summary>Écrit de façon asynchrone une chaîne dans le flux de texte.</summary>
      <param name="value">Chaîne à écrire. Si <paramref name="value" /> a la valeur <see langword="null" />, rien n'est écrit dans le flux de texte.</param>
      <returns>Tâche qui représente l’opération d’écriture asynchrone.</returns>
      <exception cref="T:System.ObjectDisposedException">Le writer de texte est supprimé.</exception>
      <exception cref="T:System.InvalidOperationException">Le writer de texte est actuellement utilisé par une opération d'écriture précédente.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteAsync(System.Text.StringBuilder,System.Threading.CancellationToken)">
      <summary>Écrit de façon asynchrone un générateur de chaîne dans le flux de texte.</summary>
      <param name="value">Chaîne, sous la forme d’un générateur de chaîne, à écrire dans le flux de texte.</param>
      <param name="cancellationToken">Jeton pour surveiller les requêtes d'annulation. La valeur par défaut est <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Tâche qui représente l’opération d’écriture asynchrone.</returns>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine">
      <summary>Écrit une marque de fin de ligne dans le flux de texte.</summary>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.IO.TextWriter" /> est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Boolean)">
      <summary>Écrit la représentation sous forme de texte d’une valeur <see langword="Boolean" /> dans le flux de texte, suivie d’une marque de fin de ligne.</summary>
      <param name="value">La valeur <see langword="Boolean" /> à écrire.</param>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.IO.TextWriter" /> est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Char)">
      <summary>Écrit un caractère dans le flux de texte, suivi d’une marque de fin de ligne.</summary>
      <param name="value">Caractère à écrire dans le flux de texte.</param>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.IO.TextWriter" /> est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Char[])">
      <summary>Écrit un tableau de caractères suivi d’une marque de fin de ligne dans le flux de texte.</summary>
      <param name="buffer">Tableau de caractères dans lequel sont lues des données.</param>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.IO.TextWriter" /> est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
      <summary>Écrit un sous-tableau de caractères dans le flux de texte, suivi d’une marque de fin de ligne.</summary>
      <param name="buffer">Tableau de caractères dans lequel sont lues des données.</param>
      <param name="index">Dans <paramref name="buffer" />, position de caractère à laquelle commencer la lecture des données.</param>
      <param name="count">Nombre maximal de caractères à écrire.</param>
      <exception cref="T:System.ArgumentException">La longueur de la mémoire tampon moins <paramref name="index" /> est inférieure à <paramref name="count" />.</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> ou <paramref name="count" /> est un nombre négatif.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.IO.TextWriter" /> est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Decimal)">
      <summary>Écrit la représentation sous forme de texte d’une valeur décimale dans le flux de texte, suivie d’une marque de fin de ligne.</summary>
      <param name="value">Valeur décimale à écrire.</param>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.IO.TextWriter" /> est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Double)">
      <summary>Écrit la représentation textuelle d’une valeur à virgule flottante de 8 octets suivie d’une marque de fin de ligne dans le flux de texte.</summary>
      <param name="value">Valeur à virgule flottante de 8 octets à écrire.</param>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.IO.TextWriter" /> est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Int32)">
      <summary>Écrit la représentation textuelle d’un entier signé de 4 octets suivie d’une marque de fin de ligne dans le flux de texte.</summary>
      <param name="value">Entier signé de 4 octets à écrire.</param>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.IO.TextWriter" /> est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Int64)">
      <summary>Écrit la représentation sous forme de texte d’un entier signé de 8 octets suivie d’une marque de fin de ligne dans le flux de texte.</summary>
      <param name="value">Entier signé de 8 octets à écrire.</param>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.IO.TextWriter" /> est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Object)">
      <summary>Écrit la représentation sous forme de texte d’un objet dans le flux de texte, en appelant la méthode <see langword="ToString" /> sur cet objet, suivie d’une marque de fin de ligne.</summary>
      <param name="value">Objet à écrire. Si <paramref name="value" /> a la valeur <see langword="null" />, seule la marque de fin de ligne est écrite.</param>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.IO.TextWriter" /> est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.ReadOnlySpan{System.Char})">
      <summary>Écrit la représentation sous forme de texte d’une plage de caractères dans le flux de texte, suivie d’une marque de fin de ligne.</summary>
      <param name="buffer">Valeur de la plage de caractères à écrire dans le flux de texte.</param>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Single)">
      <summary>Écrit la représentation sous forme de texte d’une valeur à virgule flottante de 4 octets suivie d’une marque de fin de ligne dans le flux de texte.</summary>
      <param name="value">Valeur à virgule flottante de 4 octets à écrire.</param>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.IO.TextWriter" /> est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String)">
      <summary>Écrit une chaîne suivie d’une marque de fin de ligne dans le flux de texte.</summary>
      <param name="value">Chaîne à écrire. Si <paramref name="value" /> a la valeur <see langword="null" />, seule la marque de fin de ligne est écrite.</param>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.IO.TextWriter" /> est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object)">
      <summary>Écrit une chaîne mise en forme et une nouvelle ligne dans le flux de texte, en utilisant la même sémantique que la méthode <see cref="M:System.String.Format(System.String,System.Object)" />.</summary>
      <param name="format">Chaîne de format composite.</param>
      <param name="arg0">Objet à mettre en forme et à écrire.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.IO.TextWriter" /> est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> n'est pas une chaîne de format composite.  

ou - 
L'index d'un élément de format est inférieur à 0 (zéro) ou supérieur ou égal au nombre d'objets à mettre en forme (qui, pour cette surcharge de méthode, s'élève à un).</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object)">
      <summary>Écrit une chaîne mise en forme et une nouvelle ligne dans le flux de texte, en utilisant la même sémantique que la méthode <see cref="M:System.String.Format(System.String,System.Object,System.Object)" />.</summary>
      <param name="format">Chaîne de format composite.</param>
      <param name="arg0">Premier objet à mettre en forme et à écrire.</param>
      <param name="arg1">Deuxième objet à mettre en forme et à écrire.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.IO.TextWriter" /> est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> n'est pas une chaîne de format composite.  
ou 
L'index d'un élément de format est inférieur à 0 (zéro) ou supérieur ou égal au nombre d'objets à mettre en forme (qui, pour cette surcharge de méthode, s'élève à deux).</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object,System.Object)">
      <summary>Écrit une chaîne mise en forme et une nouvelle ligne dans le flux de texte, en utilisant la même sémantique que <see cref="M:System.String.Format(System.String,System.Object)" />.</summary>
      <param name="format">Chaîne de format composite.</param>
      <param name="arg0">Premier objet à mettre en forme et à écrire.</param>
      <param name="arg1">Deuxième objet à mettre en forme et à écrire.</param>
      <param name="arg2">Troisième objet à mettre en forme et à écrire.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.IO.TextWriter" /> est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> n'est pas une chaîne de format composite.  
ou 
L'index d'un élément de format est inférieur à 0 (zéro) ou supérieur ou égal au nombre d'objets à mettre en forme (qui, pour cette surcharge de méthode, s'élève à trois).</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object[])">
      <summary>Écrit une chaîne mise en forme et une nouvelle ligne dans le flux de texte, en utilisant la même sémantique que <see cref="M:System.String.Format(System.String,System.Object)" />.</summary>
      <param name="format">Chaîne de format composite.</param>
      <param name="arg">Tableau d'objets contenant aucun, un ou plusieurs objets à mettre en forme et à écrire.</param>
      <exception cref="T:System.ArgumentNullException">Une chaîne ou un objet est passé en tant que <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.IO.TextWriter" /> est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> n'est pas une chaîne de format composite.  

ou - 
L’index d’un élément de format est inférieur à 0 (zéro), ou supérieur ou égal à la longueur du tableau <paramref name="arg" />.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Text.StringBuilder)">
      <summary>Écrit la représentation sous forme de texte d’un générateur de chaîne dans le flux de texte, suivie d’une marque de fin de ligne.</summary>
      <param name="value">Chaîne, sous la forme d’un générateur de chaîne, à écrire dans le flux de texte.</param>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.UInt32)">
      <summary>Écrit la représentation sous forme de texte d’un entier non signé de 4 octets suivie d’une marque de fin de ligne dans le flux de texte.</summary>
      <param name="value">Entier non signé de 4 octets à écrire.</param>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.IO.TextWriter" /> est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.UInt64)">
      <summary>Écrit la représentation sous forme de texte d’un entier non signé de 8 octets suivie d’une marque de fin de ligne dans le flux de texte.</summary>
      <param name="value">Entier non signé de 8 octets à écrire.</param>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.IO.TextWriter" /> est fermé.</exception>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync">
      <summary>Écrit de façon asynchrone une marque de fin de ligne dans le flux de texte.</summary>
      <returns>Tâche qui représente l’opération d’écriture asynchrone.</returns>
      <exception cref="T:System.ObjectDisposedException">Le writer de texte est supprimé.</exception>
      <exception cref="T:System.InvalidOperationException">Le writer de texte est actuellement utilisé par une opération d'écriture précédente.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync(System.Char)">
      <summary>Écrit de façon asynchrone un caractère dans le flux de texte, suivi d’une marque de fin de ligne.</summary>
      <param name="value">Caractère à écrire dans le flux de texte.</param>
      <returns>Tâche qui représente l’opération d’écriture asynchrone.</returns>
      <exception cref="T:System.ObjectDisposedException">Le writer de texte est supprimé.</exception>
      <exception cref="T:System.InvalidOperationException">Le writer de texte est actuellement utilisé par une opération d'écriture précédente.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync(System.Char[])">
      <summary>Écrit de façon asynchrone un tableau de caractères suivi d’une marque de fin de ligne dans le flux de texte.</summary>
      <param name="buffer">Tableau de caractères à écrire dans le flux de texte. Si le tableau de caractères a la valeur <see langword="null" />, seul la marque de fin de ligne est écrite.</param>
      <returns>Tâche qui représente l’opération d’écriture asynchrone.</returns>
      <exception cref="T:System.ObjectDisposedException">Le writer de texte est supprimé.</exception>
      <exception cref="T:System.InvalidOperationException">Le writer de texte est actuellement utilisé par une opération d'écriture précédente.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)">
      <summary>Écrit de façon asynchrone un sous-tableau de caractères dans le flux de texte, suivi d’une marque de fin de ligne.</summary>
      <param name="buffer">Tableau de caractères à partir duquel les données doivent être écrites.</param>
      <param name="index">Position du caractère dans la mémoire tampon à laquelle commencer la récupération des données.</param>
      <param name="count">Nombre de caractères à écrire.</param>
      <returns>Tâche qui représente l’opération d’écriture asynchrone.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> plus <paramref name="count" /> est supérieur à la longueur de la mémoire tampon.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> ou <paramref name="count" /> est un nombre négatif.</exception>
      <exception cref="T:System.ObjectDisposedException">Le writer de texte est supprimé.</exception>
      <exception cref="T:System.InvalidOperationException">Le writer de texte est actuellement utilisé par une opération d'écriture précédente.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)">
      <summary>Écrit de façon asynchrone la représentation sous forme de texte d’une zone de mémoire de caractères dans le flux de texte, suivie d’une marque de fin de ligne.</summary>
      <param name="buffer">Zone de mémoire de caractères à écrire dans le flux de texte.</param>
      <param name="cancellationToken">Jeton pour surveiller les requêtes d'annulation. La valeur par défaut est <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Tâche qui représente l’opération d’écriture asynchrone.</returns>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync(System.String)">
      <summary>Écrit de façon asynchrone une chaîne dans le flux de texte, suivie d’une marque de fin de ligne.</summary>
      <param name="value">Chaîne à écrire. Si la valeur est <see langword="null" />, seul une marque de fin de ligne est écrite.</param>
      <returns>Tâche qui représente l’opération d’écriture asynchrone.</returns>
      <exception cref="T:System.ObjectDisposedException">Le writer de texte est supprimé.</exception>
      <exception cref="T:System.InvalidOperationException">Le writer de texte est actuellement utilisé par une opération d'écriture précédente.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync(System.Text.StringBuilder,System.Threading.CancellationToken)">
      <summary>Écrit de façon asynchrone la représentation sous forme de texte d’un générateur de chaîne dans le flux de texte, suivie d’une marque de fin de ligne.</summary>
      <param name="value">Chaîne, sous la forme d’un générateur de chaîne, à écrire dans le flux de texte.</param>
      <param name="cancellationToken">Jeton pour surveiller les requêtes d'annulation. La valeur par défaut est <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Tâche qui représente l’opération d’écriture asynchrone.</returns>
    </member>
    <member name="T:System.LoaderOptimization">
      <summary>Énumération utilisée avec la classe <see cref="T:System.LoaderOptimizationAttribute" /> pour spécifier les optimisations du chargeur pour un exécutable.</summary>
    </member>
    <member name="F:System.LoaderOptimization.DisallowBindings">
      <summary>Ignoré par le Common Language Runtime.</summary>
    </member>
    <member name="F:System.LoaderOptimization.DomainMask">
      <summary>Ne pas utiliser. Ce masque sélectionne les valeurs de domaine, en filtrant l'indicateur <see cref="F:System.LoaderOptimization.DisallowBindings" /> inutilisé.</summary>
    </member>
    <member name="F:System.LoaderOptimization.MultiDomain">
      <summary>Indique que l'application aura probablement plusieurs domaines qui utilisent le même code et que le chargeur doit partager des ressources internes maximales entre domaines d'application.</summary>
    </member>
    <member name="F:System.LoaderOptimization.MultiDomainHost">
      <summary>Indique que l'application hébergera probablement du code unique dans plusieurs domaines et que le chargeur doit partager des ressources entre domaines d'application uniquement pour des assemblys (avec nom fort) globalement disponibles qui ont été ajoutés au Global Assembly Cache.</summary>
    </member>
    <member name="F:System.LoaderOptimization.NotSpecified">
      <summary>Indique qu'aucune optimisation de partage des ressources internes n'est spécifiée. Si le domaine par défaut ou l'interface d'hébergement a spécifié une optimisation, le chargeur utilise alors celle-ci ; sinon, le chargeur utilise <see cref="F:System.LoaderOptimization.SingleDomain" />.</summary>
    </member>
    <member name="F:System.LoaderOptimization.SingleDomain">
      <summary>Indique que l'application aura probablement un domaine unique et que le chargeur ne doit pas partager de ressources internes entre domaines d'application.</summary>
    </member>
    <member name="T:System.LoaderOptimizationAttribute">
      <summary>Utilisé pour définir la stratégie d'optimisation du chargeur par défaut pour la méthode principale d'une application exécutable.</summary>
    </member>
    <member name="M:System.LoaderOptimizationAttribute.#ctor(System.Byte)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.LoaderOptimizationAttribute" /> avec la valeur spécifiée.</summary>
      <param name="value">Valeur équivalente à une constante <see cref="T:System.LoaderOptimization" />.</param>
    </member>
    <member name="M:System.LoaderOptimizationAttribute.#ctor(System.LoaderOptimization)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.LoaderOptimizationAttribute" /> avec la valeur spécifiée.</summary>
      <param name="value">Constante <see cref="T:System.LoaderOptimization" />.</param>
    </member>
    <member name="P:System.LoaderOptimizationAttribute.Value">
      <summary>Obtient la valeur <see cref="T:System.LoaderOptimization" /> actuelle pour cette instance.</summary>
      <returns>Constante <see cref="T:System.LoaderOptimization" />.</returns>
    </member>
    <member name="T:System.Math">
      <summary>Fournit des constantes et des méthodes statiques pour des fonctions trigonométriques, logarithmiques et d'autres fonctions mathématiques courantes.</summary>
    </member>
    <member name="M:System.Math.Abs(System.Decimal)">
      <summary>Retourne la valeur absolue d'un nombre <see cref="T:System.Decimal" />.</summary>
      <param name="value">Nombre qui est supérieur ou égal à <see cref="F:System.Decimal.MinValue" />, mais inférieur ou égal à <see cref="F:System.Decimal.MaxValue" />.</param>
      <returns>Nombre décimal x, tel que 0 ≤ x ≤<see cref="F:System.Decimal.MaxValue" />.</returns>
    </member>
    <member name="M:System.Math.Abs(System.Double)">
      <summary>Retourne la valeur absolue d'un nombre à virgule flottante double précision.</summary>
      <param name="value">Nombre qui est supérieur ou égal à <see cref="F:System.Double.MinValue" />, mais inférieur ou égal à <see cref="F:System.Double.MaxValue" />.</param>
      <returns>Nombre à virgule flottante double précision x, tel que 0 ≤ x ≤<see cref="F:System.Double.MaxValue" />.</returns>
    </member>
    <member name="M:System.Math.Abs(System.Int16)">
      <summary>Retourne la valeur absolue d'un entier signé 16 bits.</summary>
      <param name="value">Nombre qui est supérieur à <see cref="F:System.Int16.MinValue" />, mais inférieur ou égal à <see cref="F:System.Int16.MaxValue" />.</param>
      <returns>Entier signé 16 bits x, tel que 0 ≤ x ≤<see cref="F:System.Int16.MaxValue" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est égal à <see cref="F:System.Int16.MinValue" />.</exception>
    </member>
    <member name="M:System.Math.Abs(System.Int32)">
      <summary>Retourne la valeur absolue d'un entier signé 32 bits.</summary>
      <param name="value">Nombre qui est supérieur à <see cref="F:System.Int32.MinValue" />, mais inférieur ou égal à <see cref="F:System.Int32.MaxValue" />.</param>
      <returns>Entier signé 32 bits x, tel que 0 ≤ x ≤<see cref="F:System.Int32.MaxValue" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est égal à <see cref="F:System.Int32.MinValue" />.</exception>
    </member>
    <member name="M:System.Math.Abs(System.Int64)">
      <summary>Retourne la valeur absolue d'un entier signé 64 bits.</summary>
      <param name="value">Nombre qui est supérieur à <see cref="F:System.Int64.MinValue" />, mais inférieur ou égal à <see cref="F:System.Int64.MaxValue" />.</param>
      <returns>Entier signé 64 bits x, tel que 0 ≤ x ≤<see cref="F:System.Int64.MaxValue" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est égal à <see cref="F:System.Int64.MinValue" />.</exception>
    </member>
    <member name="M:System.Math.Abs(System.SByte)">
      <summary>Retourne la valeur absolue d'un entier signé 8 bits.</summary>
      <param name="value">Nombre qui est supérieur à <see cref="F:System.SByte.MinValue" />, mais inférieur ou égal à <see cref="F:System.SByte.MaxValue" />.</param>
      <returns>Entier signé 8 bits x, tel que 0 ≤ x ≤<see cref="F:System.SByte.MaxValue" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> est égal à <see cref="F:System.SByte.MinValue" />.</exception>
    </member>
    <member name="M:System.Math.Abs(System.Single)">
      <summary>Retourne la valeur absolue d'un nombre à virgule flottante simple précision.</summary>
      <param name="value">Nombre qui est supérieur ou égal à <see cref="F:System.Single.MinValue" />, mais inférieur ou égal à <see cref="F:System.Single.MaxValue" />.</param>
      <returns>Nombre à virgule flottante simple précision x, tel que 0 ≤ x ≤<see cref="F:System.Single.MaxValue" />.</returns>
    </member>
    <member name="M:System.Math.Acos(System.Double)">
      <summary>Retourne l'angle dont le cosinus est le nombre spécifié.</summary>
      <param name="d">Nombre représentant un cosinus, où <paramref name="d" /> doit être supérieur ou égal à -1, mais inférieur ou égal à 1.</param>
      <returns>Angle θ mesuré en radians, tel que 0 ≤θ≤π 

ou - 
<see cref="F:System.Double.NaN" /> si <paramref name="d" /> &lt; -1 ou <paramref name="d" /> &gt; 1 ou <paramref name="d" /> est égal à <see cref="F:System.Double.NaN" />.</returns>
    </member>
    <member name="M:System.Math.Acosh(System.Double)">
      <summary>Retourne l'angle dont le cosinus hyperbolique est le nombre spécifié.</summary>
      <param name="d">Nombre représentant un cosinus hyperbolique, où <paramref name="d" /> doit être supérieur ou égal à 1, mais inférieur ou égal à <see cref="F:System.Double.PositiveInfinity" />.</param>
      <returns>Angle θ mesuré en radians, tel que 0 ≤ θ ≤ ∞.  

ou - 
<see cref="F:System.Double.NaN" /> si <paramref name="d" /> &lt; 1, ou si <paramref name="d" /> est égal à <see cref="F:System.Double.NaN" />.</returns>
    </member>
    <member name="M:System.Math.Asin(System.Double)">
      <summary>Retourne l'angle dont le sinus est le nombre spécifié.</summary>
      <param name="d">Nombre représentant un sinus, où <paramref name="d" /> doit être supérieur ou égal à -1, mais inférieur ou égal à 1.</param>
      <returns>Angle θ mesuré en radians, tel que -π/2 ≤θ≤π/2 
ou 
 <see cref="F:System.Double.NaN" /> si <paramref name="d" /> &lt; -1 ou <paramref name="d" /> &gt; 1 ou <paramref name="d" /> est égal à <see cref="F:System.Double.NaN" />.</returns>
    </member>
    <member name="M:System.Math.Asinh(System.Double)">
      <summary>Retourne l’angle dont le sinus hyperbolique est le nombre spécifié.</summary>
      <param name="d">Nombre représentant un sinus hyperbolique, où <paramref name="d" /> doit être supérieur ou égal à <see cref="F:System.Double.NegativeInfinity" />, mais inférieur ou égal à <see cref="F:System.Double.PositiveInfinity" />.</param>
      <returns>Angle θ mesuré en radians, tel que -∞ &lt; θ ≤-1, or 1 ≤ θ &lt; ∞. 

ou - 
<see cref="F:System.Double.NaN" /> si <paramref name="d" /> est égal à <see cref="F:System.Double.NaN" />.</returns>
    </member>
    <member name="M:System.Math.Atan(System.Double)">
      <summary>Retourne l'angle dont la tangente est le nombre spécifié.</summary>
      <param name="d">Nombre représentant une tangente.</param>
      <returns>Angle θ mesuré en radians, tel que -π/2 ≤θ≤π/2.  

ou - 
<see cref="F:System.Double.NaN" /> si <paramref name="d" /> est égal à <see cref="F:System.Double.NaN" />, -π/2 arrondi à la double précision (-1,5707963267949) si <paramref name="d" /> est égal à <see cref="F:System.Double.NegativeInfinity" />, ou π/2 arrondi à la double précision (1,5707963267949) si <paramref name="d" /> est égal à <see cref="F:System.Double.PositiveInfinity" />.</returns>
    </member>
    <member name="M:System.Math.Atan2(System.Double,System.Double)">
      <summary>Retourne l'angle dont la tangente est le quotient de deux nombres spécifiés.</summary>
      <param name="y">Coordonnée y d'un point.</param>
      <param name="x">Coordonnée x d'un point.</param>
      <returns>Angle θ mesuré en radians, tel que -π≤θ≤π, et tan(θ) = <paramref name="y" /> / <paramref name="x" />, où (<paramref name="x" />, <paramref name="y" />) est un point du plan cartésien. Observez ce qui suit : 

Pour (<paramref name="x" />, <paramref name="y" />) dans le quadrant 1, 0 &lt; θ &lt; π/2.  

Pour (<paramref name="x" />, <paramref name="y" />) dans le quadrant 2, π/2 &lt; θ≤π.  

Pour (<paramref name="x" />, <paramref name="y" />) dans le quadrant 3, -π &lt; θ &lt; -π/2.  

Pour (<paramref name="x" />, <paramref name="y" />) dans le quadrant 4, -π/2 &lt; θ &lt; 0.  


La valeur de retour des points situés aux limites des quadrants est la suivante : 

Si y est égal à 0 et si x n’est pas négatif, alors θ = 0.  

Si y est égal à 0 et si x est négatif, alors θ = π.  

Si y est positif et x est égal à 0, alors θ = π/2.  

Si y est négatif et si x est égal à 0, alors θ = -π/2.  

Si y est égal à 0 et si x est égal à 0, alors θ = 0.  


Si <paramref name="x" /> ou <paramref name="y" /> est <see cref="F:System.Double.NaN" />, ou si <paramref name="x" /> et <paramref name="y" /> sont <see cref="F:System.Double.PositiveInfinity" /> ou <see cref="F:System.Double.NegativeInfinity" />, la méthode retourne <see cref="F:System.Double.NaN" />.</returns>
    </member>
    <member name="M:System.Math.Atanh(System.Double)">
      <summary>Retourne l’angle dont la tangente hyperbolique est le nombre spécifié.</summary>
      <param name="d">Nombre représentant une tangente hyperbolique, où <paramref name="d" /> doit être supérieur ou égal à -1, mais inférieur ou égal à 1.</param>
      <returns>Angle θ mesuré en radians, tel que -∞ &lt; θ &lt; -1, ou 1 &lt; θ &lt; ∞. 

ou - 
<see cref="F:System.Double.NaN" /> si <paramref name="d" /> &lt; -1 ou <paramref name="d" /> &gt; 1 ou <paramref name="d" /> est égal à <see cref="F:System.Double.NaN" />.</returns>
    </member>
    <member name="M:System.Math.BigMul(System.Int32,System.Int32)">
      <summary>Génère le produit intégral de deux nombres 32 bits.</summary>
      <param name="a">Premier nombre à multiplier.</param>
      <param name="b">Second nombre à multiplier.</param>
      <returns>Nombre contenant le produit des nombres spécifiés</returns>
    </member>
    <member name="M:System.Math.BitDecrement(System.Double)">
      <summary>Retourne la plus petite valeur suivante qui est inférieure à <paramref name="x" />.</summary>
      <param name="x">Valeur à décrémenter.</param>
      <returns>Plus petite valeur suivante qui est inférieure à <paramref name="x" />.  

ou - 
<see cref="F:System.Double.NegativeInfinity" /> si <paramref name="x" /> est égal à <see cref="F:System.Double.NegativeInfinity" />.

ou 
 <see cref="F:System.Double.NaN" /> si <paramref name="x" /> est égal à <see cref="F:System.Double.NaN" />.</returns>
    </member>
    <member name="M:System.Math.BitIncrement(System.Double)">
      <summary>Retourne la plus grande valeur suivante qui est supérieure à <paramref name="x" />.</summary>
      <param name="x">Valeur à incrémenter.</param>
      <returns>Plus grande valeur suivante qui est supérieure à <paramref name="x" />.  
ou 
 <see cref="F:System.Double.PositiveInfinity" /> si <paramref name="x" /> est égal à <see cref="F:System.Double.PositiveInfinity" />.

ou - 
<see cref="F:System.Double.NaN" /> si <paramref name="x" /> est égal à <see cref="F:System.Double.NaN" />.</returns>
    </member>
    <member name="M:System.Math.Cbrt(System.Double)">
      <summary>Retourne la racine cubique d’un nombre spécifié.</summary>
      <param name="d">Nombre dont la racine cubique doit être recherchée.</param>
      <returns>Racine cubique de <paramref name="d" />.  

ou - 
<see cref="F:System.Double.NaN" /> si <paramref name="x" /> est égal à <see cref="F:System.Double.NaN" />.</returns>
    </member>
    <member name="M:System.Math.Ceiling(System.Decimal)">
      <summary>Retourne la plus petite valeur intégrale supérieure ou égale au nombre décimal spécifié.</summary>
      <param name="d">Nombre décimal.</param>
      <returns>Plus petite valeur intégrale qui est supérieure ou égale à <paramref name="d" />. Notez que cette méthode retourne un objet <see cref="T:System.Decimal" /> plutôt qu'un type intégral.</returns>
    </member>
    <member name="M:System.Math.Ceiling(System.Double)">
      <summary>Retourne la plus petite valeur intégrale supérieure ou égale au nombre à virgule flottante double précision spécifié.</summary>
      <param name="a">Nombre à virgule flottante double précision.</param>
      <returns>Plus petite valeur intégrale qui est supérieure ou égale à <paramref name="a" />. Si <paramref name="a" /> est égal à <see cref="F:System.Double.NaN" />, à <see cref="F:System.Double.NegativeInfinity" /> ou à <see cref="F:System.Double.PositiveInfinity" />, cette valeur est retournée. Notez que cette méthode retourne un objet <see cref="T:System.Double" /> plutôt qu'un type intégral.</returns>
    </member>
    <member name="M:System.Math.Clamp(System.Byte,System.Byte,System.Byte)">
      <summary>Retourne <paramref name="value" />, valeur limitée à la plage inclusive <paramref name="min" />-<paramref name="max" />.</summary>
      <param name="value">Valeur à limiter.</param>
      <param name="min">Limite inférieure du résultat.</param>
      <param name="max">Limite supérieure du résultat.</param>
      <returns>
        <paramref name="value" /> si <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />.  

ou - 
<paramref name="min" /> si <paramref name="value" /> &lt; <paramref name="min" />.

ou - 
<paramref name="max" /> si <paramref name="max" /> &lt; <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Math.Clamp(System.Decimal,System.Decimal,System.Decimal)">
      <summary>Retourne <paramref name="value" />, valeur limitée à la plage inclusive <paramref name="min" />-<paramref name="max" />.</summary>
      <param name="value">Valeur à limiter.</param>
      <param name="min">Limite inférieure du résultat.</param>
      <param name="max">Limite supérieure du résultat.</param>
      <returns>
        <paramref name="value" /> si <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />.
ou 
 <paramref name="min" /> si <paramref name="value" /> &lt;<paramref name="min" />.

ou - 
<paramref name="max" /> si <paramref name="max" /> &lt; <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Math.Clamp(System.Double,System.Double,System.Double)">
      <summary>Retourne <paramref name="value" />, valeur limitée à la plage inclusive <paramref name="min" />-<paramref name="max" />.</summary>
      <param name="value">Valeur à limiter.</param>
      <param name="min">Limite inférieure du résultat.</param>
      <param name="max">Limite supérieure du résultat.</param>
      <returns>
        <paramref name="value" /> si <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />.
ou 
 <paramref name="min" /> si <paramref name="value" /> &lt; <paramref name="min" />.

ou - 
<paramref name="max" /> si <paramref name="max" /> &lt; <paramref name="value" />.`` 
ou - 
<see cref="F:System.Double.NaN" /> si <paramref name="value" /> est égal à <see cref="F:System.Double.NaN" />.</returns>
    </member>
    <member name="M:System.Math.Clamp(System.Int16,System.Int16,System.Int16)">
      <summary>Retourne <paramref name="value" />, valeur limitée à la plage inclusive <paramref name="min" />-<paramref name="max" />.</summary>
      <param name="value">Valeur à limiter.</param>
      <param name="min">Limite inférieure du résultat.</param>
      <param name="max">Limite supérieure du résultat.</param>
      <returns>
        <paramref name="value" /> si <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />.
ou 
 <paramref name="min" /> si <paramref name="value" /> &lt; <paramref name="min" />.

ou - 
<paramref name="max" /> si <paramref name="max" /> &lt; <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Math.Clamp(System.Int32,System.Int32,System.Int32)">
      <summary>Retourne <paramref name="value" />, valeur limitée à la plage inclusive <paramref name="min" />-<paramref name="max" />.</summary>
      <param name="value">Valeur à limiter.</param>
      <param name="min">Limite inférieure du résultat.</param>
      <param name="max">Limite supérieure du résultat.</param>
      <returns>
        <paramref name="value" /> si <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />.
ou 
 <paramref name="min" /> si <paramref name="value" /> &lt; <paramref name="min" />.

ou - 
<paramref name="max" /> si <paramref name="max" /> &lt; <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Math.Clamp(System.Int64,System.Int64,System.Int64)">
      <summary>Retourne <paramref name="value" />, valeur limitée à la plage inclusive <paramref name="min" />-<paramref name="max" />.</summary>
      <param name="value">Valeur à limiter.</param>
      <param name="min">Limite inférieure du résultat.</param>
      <param name="max">Limite supérieure du résultat.</param>
      <returns>
        <paramref name="value" /> si <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />.

ou - 
<paramref name="min" /> si <paramref name="value" /> &lt; <paramref name="min" />.

ou - 
<paramref name="max" /> si <paramref name="max" /> &lt; <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Math.Clamp(System.SByte,System.SByte,System.SByte)">
      <summary>Retourne <paramref name="value" />, valeur limitée à la plage inclusive <paramref name="min" />-<paramref name="max" />.</summary>
      <param name="value">Valeur à limiter.</param>
      <param name="min">Limite inférieure du résultat.</param>
      <param name="max">Limite supérieure du résultat.</param>
      <returns>
        <paramref name="value" /> si <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />.
ou 
 <paramref name="min" /> si <paramref name="value" /> &lt; <paramref name="min" />.

ou - 
<paramref name="max" /> si <paramref name="max" /> &lt; <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Math.Clamp(System.Single,System.Single,System.Single)">
      <summary>Retourne <paramref name="value" />, valeur limitée à la plage inclusive <paramref name="min" />-<paramref name="max" />.</summary>
      <param name="value">Valeur à limiter.</param>
      <param name="min">Limite inférieure du résultat.</param>
      <param name="max">Limite supérieure du résultat.</param>
      <returns>
        <paramref name="value" /> si <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />.  
ou 
 <paramref name="min" /> si <paramref name="value" /> &lt; <paramref name="min" />.

ou - 
<paramref name="max" /> si <paramref name="max" /> &lt; <paramref name="value" />.

ou - 
<see cref="F:System.Single.NaN" /> si <paramref name="value" /> est égal à <see cref="F:System.Single.NaN" />.</returns>
    </member>
    <member name="M:System.Math.Clamp(System.UInt16,System.UInt16,System.UInt16)">
      <summary>Retourne <paramref name="value" />, valeur limitée à la plage inclusive <paramref name="min" />-<paramref name="max" />.</summary>
      <param name="value">Valeur à limiter.</param>
      <param name="min">Limite inférieure du résultat.</param>
      <param name="max">Limite supérieure du résultat.</param>
      <returns>
        <paramref name="value" /> si <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />.  

ou - 
<paramref name="min" /> si <paramref name="value" /> &lt; <paramref name="min" />.

ou - 
<paramref name="max" /> si <paramref name="max" /> &lt; <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Math.Clamp(System.UInt32,System.UInt32,System.UInt32)">
      <summary>Retourne <paramref name="value" />, valeur limitée à la plage inclusive <paramref name="min" />-<paramref name="max" />.</summary>
      <param name="value">Valeur à limiter.</param>
      <param name="min">Limite inférieure du résultat.</param>
      <param name="max">Limite supérieure du résultat.</param>
      <returns>
        <paramref name="value" /> si <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />.  
ou 
 <paramref name="min" /> si <paramref name="value" /> &lt; <paramref name="min" />.

ou - 
<paramref name="max" /> si <paramref name="max" /> &lt; <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Math.Clamp(System.UInt64,System.UInt64,System.UInt64)">
      <summary>Retourne <paramref name="value" />, valeur limitée à la plage inclusive <paramref name="min" />-<paramref name="max" />.</summary>
      <param name="value">Valeur à limiter.</param>
      <param name="min">Limite inférieure du résultat.</param>
      <param name="max">Limite supérieure du résultat.</param>
      <returns>
        <paramref name="value" /> si <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />.
ou 
 <paramref name="min" /> si <paramref name="value" /> &lt; <paramref name="min" />.

ou - 
<paramref name="max" /> si <paramref name="max" /> &lt; <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Math.CopySign(System.Double,System.Double)">
      <summary>Retourne une valeur d’amplitude <paramref name="x" /> et de signe <paramref name="y" />.</summary>
      <param name="x">Nombre dont l’amplitude est utilisée dans le résultat.</param>
      <param name="y">Nombre dont le signe est utilisé dans le résultat.</param>
      <returns>Valeur d’amplitude <paramref name="x" /> et de signe <paramref name="y" />.</returns>
    </member>
    <member name="M:System.Math.Cos(System.Double)">
      <summary>Retourne le cosinus de l'angle spécifié.</summary>
      <param name="d">Angle, mesuré en radians.</param>
      <returns>Cosinus de <paramref name="d" />. Si <paramref name="d" /> est égal à <see cref="F:System.Double.NaN" />, à <see cref="F:System.Double.NegativeInfinity" /> ou à <see cref="F:System.Double.PositiveInfinity" />, cette méthode retourne <see cref="F:System.Double.NaN" />.</returns>
    </member>
    <member name="M:System.Math.Cosh(System.Double)">
      <summary>Retourne le cosinus hyperbolique de l'angle spécifié.</summary>
      <param name="value">Angle, mesuré en radians.</param>
      <returns>Cosinus hyperbolique de <paramref name="value" />. Si <paramref name="value" /> est égal à <see cref="F:System.Double.NegativeInfinity" /> ou <see cref="F:System.Double.PositiveInfinity" />, <see cref="F:System.Double.PositiveInfinity" /> est retourné. Si <paramref name="value" /> est égal à <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" /> est retourné.</returns>
    </member>
    <member name="M:System.Math.DivRem(System.Int32,System.Int32,System.Int32@)">
      <summary>Calcule le quotient de deux entiers signés 32 bits et retourne également le reste dans un paramètre de sortie.</summary>
      <param name="a">Dividende.</param>
      <param name="b">Diviseur.</param>
      <param name="result">Reste.</param>
      <returns>Quotient des nombres spécifiés.</returns>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="b" /> est égal à zéro.</exception>
    </member>
    <member name="M:System.Math.DivRem(System.Int64,System.Int64,System.Int64@)">
      <summary>Calcule le quotient de deux entiers signés 64 bits et retourne également le reste dans un paramètre de sortie.</summary>
      <param name="a">Dividende.</param>
      <param name="b">Diviseur.</param>
      <param name="result">Reste.</param>
      <returns>Quotient des nombres spécifiés.</returns>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="b" /> est égal à zéro.</exception>
    </member>
    <member name="F:System.Math.E">
      <summary>Représente la base logarithmique naturelle spécifiée par la constante <see langword="e" />.</summary>
    </member>
    <member name="M:System.Math.Exp(System.Double)">
      <summary>Retourne <see langword="e" /> élevé à la puissance spécifiée.</summary>
      <param name="d">Nombre spécifiant une puissance.</param>
      <returns>Nombre <see langword="e" /> élevé à la puissance <paramref name="d" />. Si <paramref name="d" /> est égal à <see cref="F:System.Double.NaN" /> ou <see cref="F:System.Double.PositiveInfinity" />, cette valeur est retournée. Si <paramref name="d" /> est égal à <see cref="F:System.Double.NegativeInfinity" />, 0 est retourné.</returns>
    </member>
    <member name="M:System.Math.Floor(System.Decimal)">
      <summary>Retourne la valeur du plus grand entier inférieur ou égal au nombre décimal spécifié.</summary>
      <param name="d">Nombre décimal.</param>
      <returns>Valeur du plus grand entier inférieur ou égal à <paramref name="d" />.  Notez que la méthode retourne une valeur intégrale de type <see cref="T:System.Decimal" />.</returns>
    </member>
    <member name="M:System.Math.Floor(System.Double)">
      <summary>Retourne la valeur du plus grand entier inférieur ou égal au nombre à virgule flottante double précision spécifié.</summary>
      <param name="d">Nombre à virgule flottante double précision.</param>
      <returns>Valeur du plus grand entier inférieur ou égal à <paramref name="d" />. Si <paramref name="d" /> est égal à <see cref="F:System.Double.NaN" />, à <see cref="F:System.Double.NegativeInfinity" /> ou à <see cref="F:System.Double.PositiveInfinity" />, cette valeur est retournée.</returns>
    </member>
    <member name="M:System.Math.FusedMultiplyAdd(System.Double,System.Double,System.Double)">
      <summary>Retourne (x * y) + z, arrondi en une seule opération ternaire.</summary>
      <param name="x">Nombre à multiplier avec <paramref name="y" />.</param>
      <param name="y">Nombre à multiplier avec <paramref name="x" />.</param>
      <param name="z">Nombre à ajouter au résultat de la multiplication de <paramref name="x" /> par <paramref name="y" />.</param>
      <returns>(x * y) + z, arrondi en une seule opération ternaire.</returns>
    </member>
    <member name="M:System.Math.IEEERemainder(System.Double,System.Double)">
      <summary>Retourne le reste de la division d'un nombre spécifié par un autre.</summary>
      <param name="x">Dividende.</param>
      <param name="y">Diviseur.</param>
      <returns>Nombre égal à <paramref name="x" /> - (<paramref name="y" /> Q), où Q est le quotient de <paramref name="x" /> / <paramref name="y" /> arrondi à l’entier le plus proche (si <paramref name="x" /> / <paramref name="y" /> se trouve à égale distance de deux entiers, l’entier pair est retourné).  
Si <paramref name="x" /> - (<paramref name="y" /> Q) est égal à zéro, la valeur retournée est +0 si <paramref name="x" /> est positif, ou -0 si <paramref name="x" /> est négatif.  
Si <paramref name="y" /> = 0, <see cref="F:System.Double.NaN" /> est retourné.</returns>
    </member>
    <member name="M:System.Math.ILogB(System.Double)">
      <summary>Retourne le logarithme entier de base 2 d’un nombre spécifié.</summary>
      <param name="x">Nombre dont le logarithme doit être recherché.</param>
      <returns>Une des valeurs du tableau suivant.  
 Paramètre <paramref name="x" /> 
  Valeur de retour 
  Par défaut 
  Logarithme entier de base 2 de <paramref name="x" />, c’est-à-dire (int)log2(<paramref name="x" />).  

  Zéro 
 <see cref="F:System.Int32.MinValue" /> Égal à <see cref="F:System.Double.NaN" /> ou <see cref="F:System.Double.PositiveInfinity" /> ou <see cref="F:System.Double.NegativeInfinity" /><see cref="F:System.Int32.MaxValue" /></returns>
    </member>
    <member name="M:System.Math.Log(System.Double)">
      <summary>Retourne le logarithme naturel (base <see langword="e" />) d'un nombre spécifié.</summary>
      <param name="d">Nombre dont le logarithme doit être recherché.</param>
      <returns>Une des valeurs du tableau suivant.  
 Paramètre <paramref name="d" /> 
  Valeur de retour 
  Positif 
  Logarithme naturel de <paramref name="d" />, à savoir ln <paramref name="d" /> ou log e <paramref name="d" /> Zéro 
 <see cref="F:System.Double.NegativeInfinity" /> Négatif 
 <see cref="F:System.Double.NaN" /> Égal à <see cref="F:System.Double.NaN" /><see cref="F:System.Double.NaN" /> Égal à <see cref="F:System.Double.PositiveInfinity" /><see cref="F:System.Double.PositiveInfinity" /></returns>
    </member>
    <member name="M:System.Math.Log(System.Double,System.Double)">
      <summary>Retourne le logarithme d'un nombre spécifié dans une base spécifiée.</summary>
      <param name="a">Nombre dont le logarithme doit être recherché.</param>
      <param name="newBase">Base du logarithme.</param>
      <returns>Une des valeurs du tableau suivant. (+Infini indique <see cref="F:System.Double.PositiveInfinity" />, -Infini indique <see cref="F:System.Double.NegativeInfinity" /> et NaN indique <see cref="F:System.Double.NaN" />.) 
 <paramref name="a" /><paramref name="newBase" /> Valeur de retour 
 <paramref name="a" />&gt; 0 
  (0 &lt;<paramref name="newBase" />&lt; 1) -ou-(<paramref name="newBase" />&gt; 1) 
  lognewBase(a) 
 <paramref name="a" />&lt; 0 
  (toute valeur) 
  NaN 
  (toute valeur) 
 <paramref name="newBase" />&lt; 0 
  NaN 
 <paramref name="a" /> != 1 
 <paramref name="newBase" /> = 0 
  NaN 
 <paramref name="a" /> != 1 
 <paramref name="newBase" /> = +Infinity 
  NaN 
 <paramref name="a" /> = NaN 
  (toute valeur) 
  NaN 
  (toute valeur) 
 <paramref name="newBase" /> = NaN 
  NaN 
  (toute valeur) 
 <paramref name="newBase" /> = 1 
  NaN 
 <paramref name="a" /> = 0 
  0 &lt;<paramref name="newBase" />&lt; 1 
  +Infini 
 <paramref name="a" /> = 0 
 <paramref name="newBase" />&gt; 1 
  -Infini 
 <paramref name="a" /> =  +Infini 
  0 &lt;<paramref name="newBase" />&lt; 1 
  -Infini 
 <paramref name="a" /> =  +Infini 
 <paramref name="newBase" />&gt; 1 
  +Infini 
 <paramref name="a" /> = 1 
 <paramref name="newBase" /> = 0 
  0 
 <paramref name="a" /> = 1 
 <paramref name="newBase" /> = +Infinity 
  0</returns>
    </member>
    <member name="M:System.Math.Log10(System.Double)">
      <summary>Retourne le logarithme de base 10 d'un nombre spécifié.</summary>
      <param name="d">Nombre dont le logarithme doit être recherché.</param>
      <returns>Une des valeurs du tableau suivant.  
 Paramètre <paramref name="d" /> 
  Valeur de retour 
  Positif 
  Logarithme de base 10 de <paramref name="d" />, à savoir log 10<paramref name="d" />.  

  Zéro 
 <see cref="F:System.Double.NegativeInfinity" /> Négatif 
 <see cref="F:System.Double.NaN" /> Égal à <see cref="F:System.Double.NaN" /><see cref="F:System.Double.NaN" /> Égal à <see cref="F:System.Double.PositiveInfinity" /><see cref="F:System.Double.PositiveInfinity" /></returns>
    </member>
    <member name="M:System.Math.Log2(System.Double)">
      <summary>Retourne le logarithme de base 2 d’un nombre spécifié.</summary>
      <param name="x">Nombre dont le logarithme doit être recherché.</param>
      <returns>Une des valeurs du tableau suivant.  
 Paramètre <paramref name="x" /> 
  Valeur de retour 
  Positif 
  Logarithme de base 2 de <paramref name="x" />, à savoir log 2<paramref name="x" />.  

  Zéro 
 <see cref="F:System.Double.NegativeInfinity" /> Négatif 
 <see cref="F:System.Double.NaN" /> Égal à <see cref="F:System.Double.NaN" /><see cref="F:System.Double.NaN" /> Égal à <see cref="F:System.Double.PositiveInfinity" /><see cref="F:System.Double.PositiveInfinity" /></returns>
    </member>
    <member name="M:System.Math.Max(System.Byte,System.Byte)">
      <summary>Retourne le plus grand de deux entiers non signés 8 bits.</summary>
      <param name="val1">Premier des deux entiers non signés 8 bits à comparer.</param>
      <param name="val2">Second des deux entiers non signés 8 bits à comparer.</param>
      <returns>Paramètre <paramref name="val1" /> ou <paramref name="val2" /> (selon celui qui est le plus grand).</returns>
    </member>
    <member name="M:System.Math.Max(System.Decimal,System.Decimal)">
      <summary>Retourne le plus grand de deux nombres décimaux.</summary>
      <param name="val1">Premier des deux nombres décimaux à comparer.</param>
      <param name="val2">Second des deux nombres décimaux à comparer.</param>
      <returns>Paramètre <paramref name="val1" /> ou <paramref name="val2" /> (selon celui qui est le plus grand).</returns>
    </member>
    <member name="M:System.Math.Max(System.Double,System.Double)">
      <summary>Retourne le plus grand de deux nombres à virgule flottante double précision.</summary>
      <param name="val1">Premier des deux nombres à virgule flottante double précision à comparer.</param>
      <param name="val2">Second des deux nombres à virgule flottante double précision à comparer.</param>
      <returns>Paramètre <paramref name="val1" /> ou <paramref name="val2" /> (selon celui qui est le plus grand). Si <paramref name="val1" />, <paramref name="val2" /> ou <paramref name="val1" /> et <paramref name="val2" /> sont égaux à <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" /> est retourné.</returns>
    </member>
    <member name="M:System.Math.Max(System.Int16,System.Int16)">
      <summary>Retourne le plus grand de deux entiers signés 16 bits.</summary>
      <param name="val1">Premier des deux entiers signés 16 bits à comparer.</param>
      <param name="val2">Second des deux entiers signés 16 bits à comparer.</param>
      <returns>Paramètre <paramref name="val1" /> ou <paramref name="val2" /> (selon celui qui est le plus grand).</returns>
    </member>
    <member name="M:System.Math.Max(System.Int32,System.Int32)">
      <summary>Retourne le plus grand de deux entiers signés 32 bits.</summary>
      <param name="val1">Premier des deux entiers signés 32 bits à comparer.</param>
      <param name="val2">Second des deux entiers signés 32 bits à comparer.</param>
      <returns>Paramètre <paramref name="val1" /> ou <paramref name="val2" /> (selon celui qui est le plus grand).</returns>
    </member>
    <member name="M:System.Math.Max(System.Int64,System.Int64)">
      <summary>Retourne le plus grand de deux entiers signés 64 bits.</summary>
      <param name="val1">Premier des deux entiers signés 64 bits à comparer.</param>
      <param name="val2">Second des deux entiers signés 64 bits à comparer.</param>
      <returns>Paramètre <paramref name="val1" /> ou <paramref name="val2" /> (selon celui qui est le plus grand).</returns>
    </member>
    <member name="M:System.Math.Max(System.SByte,System.SByte)">
      <summary>Retourne le plus grand de deux entiers signés 8 bits.</summary>
      <param name="val1">Premier des deux entiers signés 8 bits à comparer.</param>
      <param name="val2">Second des deux entiers signés 8 bits à comparer.</param>
      <returns>Paramètre <paramref name="val1" /> ou <paramref name="val2" /> (selon celui qui est le plus grand).</returns>
    </member>
    <member name="M:System.Math.Max(System.Single,System.Single)">
      <summary>Retourne le plus grand de deux nombres à virgule flottante simple précision.</summary>
      <param name="val1">Premier des deux nombres à virgule flottante simple précision à comparer.</param>
      <param name="val2">Second des deux nombres à virgule flottante simple précision à comparer.</param>
      <returns>Paramètre <paramref name="val1" /> ou <paramref name="val2" /> (selon celui qui est le plus grand). Si <paramref name="val1" /> ou <paramref name="val2" />, ou <paramref name="val1" /> et <paramref name="val2" /> sont égaux à <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> est retourné.</returns>
    </member>
    <member name="M:System.Math.Max(System.UInt16,System.UInt16)">
      <summary>Retourne le plus grand de deux entiers non signés 16 bits.</summary>
      <param name="val1">Premier des deux entiers non signés 16 bits à comparer.</param>
      <param name="val2">Second des deux entiers non signés 16 bits à comparer.</param>
      <returns>Paramètre <paramref name="val1" /> ou <paramref name="val2" /> (selon celui qui est le plus grand).</returns>
    </member>
    <member name="M:System.Math.Max(System.UInt32,System.UInt32)">
      <summary>Retourne le plus grand de deux entiers non signés 32 bits.</summary>
      <param name="val1">Premier des deux entiers non signés 32 bits à comparer.</param>
      <param name="val2">Second des deux entiers non signés 32 bits à comparer.</param>
      <returns>Paramètre <paramref name="val1" /> ou <paramref name="val2" /> (selon celui qui est le plus grand).</returns>
    </member>
    <member name="M:System.Math.Max(System.UInt64,System.UInt64)">
      <summary>Retourne le plus grand de deux entiers non signés 64 bits.</summary>
      <param name="val1">Premier des deux entiers non signés 64 bits à comparer.</param>
      <param name="val2">Second des deux entiers non signés 64 bits à comparer.</param>
      <returns>Paramètre <paramref name="val1" /> ou <paramref name="val2" /> (selon celui qui est le plus grand).</returns>
    </member>
    <member name="M:System.Math.MaxMagnitude(System.Double,System.Double)">
      <summary>Retourne la plus grande amplitude de deux nombres à virgule flottante double précision.</summary>
      <param name="x">Premier des deux nombres à virgule flottante double précision à comparer.</param>
      <param name="y">Second des deux nombres à virgule flottante double précision à comparer.</param>
      <returns>Paramètre <paramref name="x" /> ou <paramref name="y" />, selon celui qui a la plus grande amplitude. Si <paramref name="x" /> ou <paramref name="y" />, ou <paramref name="x" /> et <paramref name="y" /> sont égaux à <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" /> est retourné.</returns>
    </member>
    <member name="M:System.Math.Min(System.Byte,System.Byte)">
      <summary>Retourne le plus petit de deux entiers non signés 8 bits.</summary>
      <param name="val1">Premier des deux entiers non signés 8 bits à comparer.</param>
      <param name="val2">Second des deux entiers non signés 8 bits à comparer.</param>
      <returns>Paramètre <paramref name="val1" /> ou <paramref name="val2" /> (selon celui qui est le plus petit).</returns>
    </member>
    <member name="M:System.Math.Min(System.Decimal,System.Decimal)">
      <summary>Retourne le plus petit de deux nombres décimaux.</summary>
      <param name="val1">Premier des deux nombres décimaux à comparer.</param>
      <param name="val2">Second des deux nombres décimaux à comparer.</param>
      <returns>Paramètre <paramref name="val1" /> ou <paramref name="val2" /> (selon celui qui est le plus petit).</returns>
    </member>
    <member name="M:System.Math.Min(System.Double,System.Double)">
      <summary>Retourne le plus petit de deux nombres à virgule flottante double précision.</summary>
      <param name="val1">Premier des deux nombres à virgule flottante double précision à comparer.</param>
      <param name="val2">Second des deux nombres à virgule flottante double précision à comparer.</param>
      <returns>Paramètre <paramref name="val1" /> ou <paramref name="val2" /> (selon celui qui est le plus petit). Si <paramref name="val1" />, <paramref name="val2" /> ou <paramref name="val1" /> et <paramref name="val2" /> sont égaux à <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" /> est retourné.</returns>
    </member>
    <member name="M:System.Math.Min(System.Int16,System.Int16)">
      <summary>Retourne le plus petit de deux entiers signés 16 bits.</summary>
      <param name="val1">Premier des deux entiers signés 16 bits à comparer.</param>
      <param name="val2">Second des deux entiers signés 16 bits à comparer.</param>
      <returns>Paramètre <paramref name="val1" /> ou <paramref name="val2" /> (selon celui qui est le plus petit).</returns>
    </member>
    <member name="M:System.Math.Min(System.Int32,System.Int32)">
      <summary>Retourne le plus petit de deux entiers signés 32 bits.</summary>
      <param name="val1">Premier des deux entiers signés 32 bits à comparer.</param>
      <param name="val2">Second des deux entiers signés 32 bits à comparer.</param>
      <returns>Paramètre <paramref name="val1" /> ou <paramref name="val2" /> (selon celui qui est le plus petit).</returns>
    </member>
    <member name="M:System.Math.Min(System.Int64,System.Int64)">
      <summary>Retourne le plus petit de deux entiers signés 64 bits.</summary>
      <param name="val1">Premier des deux entiers signés 64 bits à comparer.</param>
      <param name="val2">Second des deux entiers signés 64 bits à comparer.</param>
      <returns>Paramètre <paramref name="val1" /> ou <paramref name="val2" /> (selon celui qui est le plus petit).</returns>
    </member>
    <member name="M:System.Math.Min(System.SByte,System.SByte)">
      <summary>Retourne le plus petit de deux entiers signés 8 bits.</summary>
      <param name="val1">Premier des deux entiers signés 8 bits à comparer.</param>
      <param name="val2">Second des deux entiers signés 8 bits à comparer.</param>
      <returns>Paramètre <paramref name="val1" /> ou <paramref name="val2" /> (selon celui qui est le plus petit).</returns>
    </member>
    <member name="M:System.Math.Min(System.Single,System.Single)">
      <summary>Retourne le plus petit de deux nombres à virgule flottante simple précision.</summary>
      <param name="val1">Premier des deux nombres à virgule flottante simple précision à comparer.</param>
      <param name="val2">Second des deux nombres à virgule flottante simple précision à comparer.</param>
      <returns>Paramètre <paramref name="val1" /> ou <paramref name="val2" /> (selon celui qui est le plus petit). Si <paramref name="val1" />, <paramref name="val2" /> ou <paramref name="val1" /> et <paramref name="val2" /> sont égaux à <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> est retourné.</returns>
    </member>
    <member name="M:System.Math.Min(System.UInt16,System.UInt16)">
      <summary>Retourne le plus petit de deux entiers non signés 16 bits.</summary>
      <param name="val1">Premier des deux entiers non signés 16 bits à comparer.</param>
      <param name="val2">Second des deux entiers non signés 16 bits à comparer.</param>
      <returns>Paramètre <paramref name="val1" /> ou <paramref name="val2" /> (selon celui qui est le plus petit).</returns>
    </member>
    <member name="M:System.Math.Min(System.UInt32,System.UInt32)">
      <summary>Retourne le plus petit de deux entiers non signés 32 bits.</summary>
      <param name="val1">Premier des deux entiers non signés 32 bits à comparer.</param>
      <param name="val2">Second des deux entiers non signés 32 bits à comparer.</param>
      <returns>Paramètre <paramref name="val1" /> ou <paramref name="val2" /> (selon celui qui est le plus petit).</returns>
    </member>
    <member name="M:System.Math.Min(System.UInt64,System.UInt64)">
      <summary>Retourne le plus petit de deux entiers non signés 64 bits.</summary>
      <param name="val1">Premier des deux entiers non signés 64 bits à comparer.</param>
      <param name="val2">Second des deux entiers non signés 64 bits à comparer.</param>
      <returns>Paramètre <paramref name="val1" /> ou <paramref name="val2" /> (selon celui qui est le plus petit).</returns>
    </member>
    <member name="M:System.Math.MinMagnitude(System.Double,System.Double)">
      <summary>Retourne la plus petite amplitude de deux nombres à virgule flottante double précision.</summary>
      <param name="x">Premier des deux nombres à virgule flottante double précision à comparer.</param>
      <param name="y">Second des deux nombres à virgule flottante double précision à comparer.</param>
      <returns>Paramètre <paramref name="x" /> ou <paramref name="y" />, selon celui qui a la plus petite amplitude. Si <paramref name="x" /> ou <paramref name="y" />, ou <paramref name="x" /> et <paramref name="y" /> sont égaux à <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" /> est retourné.</returns>
    </member>
    <member name="F:System.Math.PI">
      <summary>Représente le rapport de la circonférence d’un cercle à son diamètre, spécifié par la constante π.</summary>
    </member>
    <member name="M:System.Math.Pow(System.Double,System.Double)">
      <summary>Retourne un nombre spécifié élevé à la puissance spécifiée.</summary>
      <param name="x">Nombre à virgule flottante double précision à élever à une puissance.</param>
      <param name="y">Nombre à virgule flottante double précision. qui spécifie une puissance.</param>
      <returns>Nombre <paramref name="x" /> élevé à la puissance <paramref name="y" />.</returns>
    </member>
    <member name="M:System.Math.Round(System.Decimal)">
      <summary>Arrondit une valeur décimale au nombre entier le plus proche, et les valeurs médianes au nombre pair le plus proche.</summary>
      <param name="d">Nombre décimal à arrondir.</param>
      <returns>Le nombre entier le plus proche du paramètre <paramref name="d" />. Si le composant fractionnaire de <paramref name="d" /> se trouve à égale distance de deux entiers, l'un pair et l'autre impair, le nombre pair est retourné. Notez que cette méthode retourne un objet <see cref="T:System.Decimal" /> plutôt qu'un type intégral.</returns>
      <exception cref="T:System.OverflowException">Le résultat est à l'extérieur de la plage d'un <see cref="T:System.Decimal" />.</exception>
    </member>
    <member name="M:System.Math.Round(System.Decimal,System.Int32)">
      <summary>Arrondit une valeur décimale au nombre de chiffres fractionnaires spécifié, et les valeurs médianes au nombre pair le plus proche.</summary>
      <param name="d">Nombre décimal à arrondir.</param>
      <param name="decimals">Nombre de décimales de la valeur de retour.</param>
      <returns>Nombre le plus proche de <paramref name="d" /> contenant un nombre de chiffres fractionnaires égal à <paramref name="decimals" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="decimals" /> est inférieur à 0 ou supérieur à 28.</exception>
      <exception cref="T:System.OverflowException">Le résultat est à l'extérieur de la plage d'un <see cref="T:System.Decimal" />.</exception>
    </member>
    <member name="M:System.Math.Round(System.Decimal,System.Int32,System.MidpointRounding)">
      <summary>Arrondit une valeur décimale au nombre de chiffres fractionnaires spécifié, et utilise la convention d’arrondi spécifiée pour les valeurs médianes.</summary>
      <param name="d">Nombre décimal à arrondir.</param>
      <param name="decimals">Nombre de décimales de la valeur de retour.</param>
      <param name="mode">Spécification sur la façon d'arrondir <paramref name="d" /> s'il se trouve à mi-chemin entre deux nombres.</param>
      <returns>Nombre le plus proche de <paramref name="d" /> contenant un nombre de chiffres fractionnaires égal à <paramref name="decimals" />. Si <paramref name="d" /> a moins de chiffres fractionnaires que <paramref name="decimals" />, <paramref name="d" /> est retourné sans modification.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="decimals" /> est inférieur à 0 ou supérieur à 28.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> n’est pas une valeur valide de <see cref="T:System.MidpointRounding" />.</exception>
      <exception cref="T:System.OverflowException">Le résultat est à l'extérieur de la plage d'un <see cref="T:System.Decimal" />.</exception>
    </member>
    <member name="M:System.Math.Round(System.Decimal,System.MidpointRounding)">
      <summary>Arrondit une valeur décimale au nombre entier le plus proche, et utilise la convention d’arrondi spécifiée pour les valeurs médianes.</summary>
      <param name="d">Nombre décimal à arrondir.</param>
      <param name="mode">Spécification sur la façon d'arrondir <paramref name="d" /> s'il se trouve à mi-chemin entre deux nombres.</param>
      <returns>Entier le plus proche de <paramref name="d" />. Si <paramref name="d" /> se trouve à égale distance de deux nombres, l'un pair et l'autre impair, <paramref name="mode" /> détermine le nombre qui sera retourné. Notez que cette méthode retourne un objet <see cref="T:System.Decimal" /> plutôt qu'un type intégral.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> n’est pas une valeur valide de <see cref="T:System.MidpointRounding" />.</exception>
      <exception cref="T:System.OverflowException">Le résultat est à l'extérieur de la plage d'un <see cref="T:System.Decimal" />.</exception>
    </member>
    <member name="M:System.Math.Round(System.Double)">
      <summary>Arrondit un nombre à virgule flottante double précision au nombre entier le plus proche, et les valeurs médianes au nombre pair le plus proche.</summary>
      <param name="a">Nombre à virgule flottante double précision à arrondir.</param>
      <returns>Entier le plus proche de <paramref name="a" />. Si le composant fractionnaire de <paramref name="a" /> se trouve à égale distance de deux entiers, l'un pair et l'autre impair, le nombre pair est retourné. Notez que cette méthode retourne un objet <see cref="T:System.Double" /> plutôt qu'un type intégral.</returns>
    </member>
    <member name="M:System.Math.Round(System.Double,System.Int32)">
      <summary>Arrondit un nombre à virgule flottante double précision au nombre de chiffres fractionnaires spécifié, et les valeurs médianes au nombre pair le plus proche.</summary>
      <param name="value">Nombre à virgule flottante double précision à arrondir.</param>
      <param name="digits">Nombre de chiffres fractionnaires de la valeur de retour.</param>
      <returns>Nombre le plus proche de <paramref name="value" /> contenant un nombre de chiffres fractionnaires égal à <paramref name="digits" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="digits" /> est inférieur à 0 ou supérieur à 15.</exception>
    </member>
    <member name="M:System.Math.Round(System.Double,System.Int32,System.MidpointRounding)">
      <summary>Arrondit un nombre à virgule flottante double précision au nombre de chiffres fractionnaires spécifié, et utilise la convention d’arrondi spécifiée pour les valeurs médianes.</summary>
      <param name="value">Nombre à virgule flottante double précision à arrondir.</param>
      <param name="digits">Nombre de chiffres fractionnaires de la valeur de retour.</param>
      <param name="mode">Spécification sur la façon d'arrondir <paramref name="value" /> s'il se trouve à mi-chemin entre deux nombres.</param>
      <returns>Nombre le plus proche de <paramref name="value" /> contenant un nombre de chiffres fractionnaires égal à <paramref name="digits" />. Si <paramref name="value" /> a moins de chiffres fractionnaires que <paramref name="digits" />, <paramref name="value" /> est retourné sans modification.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="digits" /> est inférieur à 0 ou supérieur à 15.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> n’est pas une valeur valide de <see cref="T:System.MidpointRounding" />.</exception>
    </member>
    <member name="M:System.Math.Round(System.Double,System.MidpointRounding)">
      <summary>Arrondit un nombre à virgule flottante double précision au nombre entier le plus proche, et utilise la convention d’arrondi spécifiée pour les valeurs médianes.</summary>
      <param name="value">Nombre à virgule flottante double précision à arrondir.</param>
      <param name="mode">Spécification sur la façon d'arrondir <paramref name="value" /> s'il se trouve à mi-chemin entre deux nombres.</param>
      <returns>Entier le plus proche de <paramref name="value" />. Si <paramref name="value" /> se trouve à égale distance de deux entiers, l'un pair et l'autre impair, <paramref name="mode" /> détermine le nombre qui sera retourné. Notez que cette méthode retourne un objet <see cref="T:System.Double" /> plutôt qu'un type intégral.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> n’est pas une valeur valide de <see cref="T:System.MidpointRounding" />.</exception>
    </member>
    <member name="M:System.Math.ScaleB(System.Double,System.Int32)">
      <summary>Retourne x * 2 ^ n calculé efficacement.</summary>
      <param name="x">Nombre à virgule flottante simple précision qui spécifie la valeur de base.</param>
      <param name="n">Nombre à virgule flottante simple précision qui spécifie la puissance.</param>
      <returns>x * 2 ^ n calculé efficacement.</returns>
    </member>
    <member name="M:System.Math.Sign(System.Decimal)">
      <summary>Retourne un entier qui indique le signe d’un nombre décimal.</summary>
      <param name="value">Nombre décimal signé.</param>
      <returns>Nombre qui indique le signe de <paramref name="value" />, comme indiqué dans le tableau suivant.  
  Valeur de retour 
  Signification 
  -1 
 <paramref name="value" /> est inférieur à zéro.  

  0 
 <paramref name="value" /> est égal à zéro.  

  1 
 <paramref name="value" /> est supérieur à zéro.</returns>
    </member>
    <member name="M:System.Math.Sign(System.Double)">
      <summary>Retourne un entier qui indique le signe d’un nombre à virgule flottante double précision.</summary>
      <param name="value">Nombre signé.</param>
      <returns>Nombre qui indique le signe de <paramref name="value" />, comme indiqué dans le tableau suivant.  
  Valeur de retour 
  Signification 
  -1 
 <paramref name="value" /> est inférieur à zéro.  

  0 
 <paramref name="value" /> est égal à zéro.  

  1 
 <paramref name="value" /> est supérieur à zéro.</returns>
      <exception cref="T:System.ArithmeticException">
        <paramref name="value" /> est égal à <see cref="F:System.Double.NaN" />.</exception>
    </member>
    <member name="M:System.Math.Sign(System.Int16)">
      <summary>Retourne un entier qui indique le signe d’un entier signé 16 bits.</summary>
      <param name="value">Nombre signé.</param>
      <returns>Nombre qui indique le signe de <paramref name="value" />, comme indiqué dans le tableau suivant.  
  Valeur de retour 
  Signification 
  -1 
 <paramref name="value" /> est inférieur à zéro.  

  0 
 <paramref name="value" /> est égal à zéro.  

  1 
 <paramref name="value" /> est supérieur à zéro.</returns>
    </member>
    <member name="M:System.Math.Sign(System.Int32)">
      <summary>Retourne un entier qui indique le signe d’un entier signé 32 bits.</summary>
      <param name="value">Nombre signé.</param>
      <returns>Nombre qui indique le signe de <paramref name="value" />, comme indiqué dans le tableau suivant.  
  Valeur de retour 
  Signification 
  -1 
 <paramref name="value" /> est inférieur à zéro.  

  0 
 <paramref name="value" /> est égal à zéro.  

  1 
 <paramref name="value" /> est supérieur à zéro.</returns>
    </member>
    <member name="M:System.Math.Sign(System.Int64)">
      <summary>Retourne un entier qui indique le signe d’un entier signé 64 bits.</summary>
      <param name="value">Nombre signé.</param>
      <returns>Nombre qui indique le signe de <paramref name="value" />, comme indiqué dans le tableau suivant.  
  Valeur de retour 
  Signification 
  -1 
 <paramref name="value" /> est inférieur à zéro.  

  0 
 <paramref name="value" /> est égal à zéro.  

  1 
 <paramref name="value" /> est supérieur à zéro.</returns>
    </member>
    <member name="M:System.Math.Sign(System.SByte)">
      <summary>Retourne un entier qui indique le signe d’un entier signé 8 bits.</summary>
      <param name="value">Nombre signé.</param>
      <returns>Nombre qui indique le signe de <paramref name="value" />, comme indiqué dans le tableau suivant.  
  Valeur de retour 
  Signification 
  -1 
 <paramref name="value" /> est inférieur à zéro.  

  0 
 <paramref name="value" /> est égal à zéro.  

  1 
 <paramref name="value" /> est supérieur à zéro.</returns>
    </member>
    <member name="M:System.Math.Sign(System.Single)">
      <summary>Retourne un entier qui indique le signe d’un nombre à virgule flottante simple précision.</summary>
      <param name="value">Nombre signé.</param>
      <returns>Nombre qui indique le signe de <paramref name="value" />, comme indiqué dans le tableau suivant.  
  Valeur de retour 
  Signification 
  -1 
 <paramref name="value" /> est inférieur à zéro.  

  0 
 <paramref name="value" /> est égal à zéro.  

  1 
 <paramref name="value" /> est supérieur à zéro.</returns>
      <exception cref="T:System.ArithmeticException">
        <paramref name="value" /> est égal à <see cref="F:System.Single.NaN" />.</exception>
    </member>
    <member name="M:System.Math.Sin(System.Double)">
      <summary>Retourne le sinus de l'angle spécifié.</summary>
      <param name="a">Angle, mesuré en radians.</param>
      <returns>Sinus de <paramref name="a" />. Si <paramref name="a" /> est égal à <see cref="F:System.Double.NaN" />, à <see cref="F:System.Double.NegativeInfinity" /> ou à <see cref="F:System.Double.PositiveInfinity" />, cette méthode retourne <see cref="F:System.Double.NaN" />.</returns>
    </member>
    <member name="M:System.Math.Sinh(System.Double)">
      <summary>Retourne le sinus hyperbolique de l'angle spécifié.</summary>
      <param name="value">Angle, mesuré en radians.</param>
      <returns>Sinus hyperbolique de <paramref name="value" />. Si <paramref name="value" /> est égal à <see cref="F:System.Double.NegativeInfinity" />, <see cref="F:System.Double.PositiveInfinity" /> ou <see cref="F:System.Double.NaN" />, cette méthode retourne un <see cref="T:System.Double" /> égal à <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Math.Sqrt(System.Double)">
      <summary>Retourne la racine carrée d'un nombre spécifié.</summary>
      <param name="d">Nombre dont la racine carrée doit être recherchée.</param>
      <returns>Une des valeurs du tableau suivant.  
 Paramètre <paramref name="d" /> 
  Valeur de retour 
  Zéro, ou une valeur positive 
  Racine carrée positive de <paramref name="d" />.  

  Négatif 
 <see cref="F:System.Double.NaN" /> Est égal à<see cref="F:System.Double.NaN" />.<see cref="F:System.Double.NaN" /> Est égal à<see cref="F:System.Double.PositiveInfinity" />.<see cref="F:System.Double.PositiveInfinity" /></returns>
    </member>
    <member name="M:System.Math.Tan(System.Double)">
      <summary>Retourne la tangente de l'angle spécifié.</summary>
      <param name="a">Angle, mesuré en radians.</param>
      <returns>Tangente de <paramref name="a" />. Si <paramref name="a" /> est égal à <see cref="F:System.Double.NaN" />, à <see cref="F:System.Double.NegativeInfinity" /> ou à <see cref="F:System.Double.PositiveInfinity" />, cette méthode retourne <see cref="F:System.Double.NaN" />.</returns>
    </member>
    <member name="M:System.Math.Tanh(System.Double)">
      <summary>Retourne la tangente hyperbolique de l'angle spécifié.</summary>
      <param name="value">Angle, mesuré en radians.</param>
      <returns>Tangente hyperbolique de <paramref name="value" />. Si <paramref name="value" /> est égal à <see cref="F:System.Double.NegativeInfinity" />, cette méthode retourne -1. Si la valeur est égale à <see cref="F:System.Double.PositiveInfinity" />, cette méthode retourne 1. Si <paramref name="value" /> est égal à <see cref="F:System.Double.NaN" />, cette méthode retourne <see cref="F:System.Double.NaN" />.</returns>
    </member>
    <member name="M:System.Math.Truncate(System.Decimal)">
      <summary>Calcule la partie entière d'un nombre décimal spécifié.</summary>
      <param name="d">Nombre à tronquer.</param>
      <returns>Partie entière de <paramref name="d" />, c'est-à-dire le nombre qui reste après avoir ignoré tous les chiffres fractionnaires.</returns>
    </member>
    <member name="M:System.Math.Truncate(System.Double)">
      <summary>Calcule la partie entière d'un nombre à virgule flottante double précision spécifié.</summary>
      <param name="d">Nombre à tronquer.</param>
      <returns>Partie entière de <paramref name="d" />, c'est-à-dire le nombre qui reste après avoir ignoré tous les chiffres fractionnaires, ou l'une des valeurs indiquées dans le tableau suivant.  
 <paramref name="d" /> Valeur de retour 
 <see cref="F:System.Double.NaN" /><see cref="F:System.Double.NaN" /><see cref="F:System.Double.NegativeInfinity" /><see cref="F:System.Double.NegativeInfinity" /><see cref="F:System.Double.PositiveInfinity" /><see cref="F:System.Double.PositiveInfinity" /></returns>
    </member>
    <member name="T:System.MathF">
      <summary>Fournit des constantes et des méthodes statiques pour des fonctions trigonométriques, logarithmiques et d'autres fonctions mathématiques courantes.</summary>
    </member>
    <member name="M:System.MathF.Abs(System.Single)">
      <summary>Retourne la valeur absolue d'un nombre à virgule flottante simple précision.</summary>
      <param name="x">Nombre qui est supérieur ou égal à <see cref="F:System.Single.MinValue" />, mais inférieur ou égal à <see cref="F:System.Single.MaxValue" />.</param>
      <returns>Nombre à virgule flottante simple précision x, tel que 0 ≤ x ≤ <see cref="F:System.Single.MaxValue" />.</returns>
    </member>
    <member name="M:System.MathF.Acos(System.Single)">
      <summary>Retourne l'angle dont le cosinus est le nombre spécifié.</summary>
      <param name="x">Nombre représentant un cosinus, où <paramref name="x" /> doit être supérieur ou égal à -1, mais inférieur ou égal à 1.</param>
      <returns>Angle θ mesuré en radians, tel que 0 ≤ θ ≤ π.
ou 
 <see cref="F:System.Single.NaN" /> si <paramref name="x" /> &lt; -1 ou <paramref name="x" /> &gt; 1 ou <paramref name="x" /> est égal à <see cref="F:System.Single.NaN" />.</returns>
    </member>
    <member name="M:System.MathF.Acosh(System.Single)">
      <summary>Retourne l'angle dont le cosinus hyperbolique est le nombre spécifié.</summary>
      <param name="x">Nombre représentant un cosinus hyperbolique, où <paramref name="x" /> doit être supérieur ou égal à 1, mais inférieur ou égal à <see cref="F:System.Single.PositiveInfinity" />.</param>
      <returns>Angle θ mesuré en radians, tel que 0 ≤ θ ≤ ∞.

ou - 
<see cref="F:System.Single.NaN" /> si <paramref name="x" /> &lt; 1, ou si <paramref name="x" /> est égal à <see cref="F:System.Single.NaN" />.</returns>
    </member>
    <member name="M:System.MathF.Asin(System.Single)">
      <summary>Retourne l'angle dont le sinus est le nombre spécifié.</summary>
      <param name="x">Nombre représentant un sinus, où <paramref name="x" /> doit être supérieur ou égal à -1, mais inférieur ou égal à 1.</param>
      <returns>Angle θ mesuré en radians, tel que -π/2 ≤ θ ≤ π/2.

ou - 
<see cref="F:System.Single.NaN" /> si <paramref name="x" /> &lt; -1 ou <paramref name="x" /> &gt; 1 ou <paramref name="x" /> est égal à <see cref="F:System.Single.NaN" />.</returns>
    </member>
    <member name="M:System.MathF.Asinh(System.Single)">
      <summary>Retourne l’angle dont le sinus hyperbolique est le nombre spécifié.</summary>
      <param name="x">Nombre représentant un sinus hyperbolique, où <paramref name="x" /> doit être supérieur ou égal à <see cref="F:System.Single.NegativeInfinity" />, mais inférieur ou égal à <see cref="F:System.Single.PositiveInfinity" />.</param>
      <returns>Angle θ mesuré en radians, tel que -∞ &lt; θ ≤ -1, ou 1 ≤ θ &lt; ∞. 
ou 
 <see cref="F:System.Single.NaN" /> si <paramref name="x" /> est égal à <see cref="F:System.Single.NaN" />.</returns>
    </member>
    <member name="M:System.MathF.Atan(System.Single)">
      <summary>Retourne l'angle dont la tangente est le nombre spécifié.</summary>
      <param name="x">Nombre représentant une tangente.</param>
      <returns>Angle θ mesuré en radians, tel que -π/2 ≤ θ ≤ π/2.  

ou - 
<see cref="F:System.Single.NaN" /> si <paramref name="x" /> est égal à <see cref="F:System.Single.NaN" />, -π/2 arrondi à la double précision (-1,5707963267949) si <paramref name="x" /> est égal à <see cref="F:System.Single.NegativeInfinity" />, ou π/2 arrondi à la double précision (1,5707963267949) si <paramref name="x" /> est égal à <see cref="F:System.Single.PositiveInfinity" />.</returns>
    </member>
    <member name="M:System.MathF.Atan2(System.Single,System.Single)">
      <summary>Retourne l'angle dont la tangente est le quotient de deux nombres spécifiés.</summary>
      <param name="y">Coordonnée y d'un point.</param>
      <param name="x">Coordonnée x d'un point.</param>
      <returns>Angle θ mesuré en radians, tel que -π ≤ θ ≤ π, et tan(θ) = <paramref name="y" /> / <paramref name="x" />, où (<paramref name="x" />, <paramref name="y" />) est un point du plan cartésien. Observez ce qui suit : 

Pour (<paramref name="x" />, <paramref name="y" />) dans le quadrant 1, 0 &lt; θ &lt; π/2.  

Pour (<paramref name="x" />, <paramref name="y" />) dans le quadrant 2, π/2 &lt; θ ≤ π.  

Pour (<paramref name="x" />, <paramref name="y" />) dans le quadrant 3, -π &lt; θ &lt; -π/2.  

Pour (<paramref name="x" />, <paramref name="y" />) dans le quadrant 4, -π/2 &lt; θ &lt; 0.  


La valeur de retour des points situés aux limites des quadrants est la suivante : 

Si y est égal à 0 et si x n’est pas négatif, alors θ = 0.  

Si y est égal à 0 et si x est négatif, alors θ = π.  

Si y est positif et x est égal à 0, alors θ = π/2.  

Si y est négatif et si x est égal à 0, alors θ = -π/2.  

Si y est égal à 0 et si x est égal à 0, alors θ = 0.  


Si <paramref name="x" /> ou <paramref name="y" /> est <see cref="F:System.Single.NaN" />, ou si <paramref name="x" /> et <paramref name="y" /> sont <see cref="F:System.Single.PositiveInfinity" /> ou <see cref="F:System.Single.NegativeInfinity" />, la méthode retourne <see cref="F:System.Single.NaN" />.</returns>
    </member>
    <member name="M:System.MathF.Atanh(System.Single)">
      <summary>Retourne l’angle dont la tangente hyperbolique est le nombre spécifié.</summary>
      <param name="x">Nombre représentant une tangente hyperbolique, où <paramref name="x" /> doit être supérieur ou égal à -1, mais inférieur ou égal à 1.</param>
      <returns>Angle θ mesuré en radians, tel que -∞ &lt; θ &lt;-1, ou 1 &lt; θ &lt; ∞.  

ou - 
<see cref="F:System.Single.NaN" /> si <paramref name="x" /> &lt; -1 ou <paramref name="x" /> &gt; 1 ou <paramref name="x" /> est égal à <see cref="F:System.Single.NaN" />.</returns>
    </member>
    <member name="M:System.MathF.BitDecrement(System.Single)">
      <summary>Retourne la plus petite valeur suivante qui est inférieure à <paramref name="x" />.</summary>
      <param name="x">Valeur à décrémenter.</param>
      <returns>Plus petite valeur suivante qui est inférieure à <paramref name="x" />.

ou - 
<see cref="F:System.Single.NegativeInfinity" /> si <paramref name="x" /> est égal à <see cref="F:System.Single.NegativeInfinity" />.

ou 
 <see cref="F:System.Single.NaN" /> si <paramref name="x" /> est égal à <see cref="F:System.Single.NaN" />.</returns>
    </member>
    <member name="M:System.MathF.BitIncrement(System.Single)">
      <summary>Retourne la plus grande valeur suivante qui est supérieure à <paramref name="x" />.</summary>
      <param name="x">Valeur à incrémenter.</param>
      <returns>Plus grande valeur suivante qui est supérieure à <paramref name="x" />.
ou 
 <see cref="F:System.Single.PositiveInfinity" /> si <paramref name="x" /> est égal à <see cref="F:System.Single.PositiveInfinity" />.

ou - 
<see cref="F:System.Single.NaN" /> si <paramref name="x" /> est égal à <see cref="F:System.Single.NaN" />.</returns>
    </member>
    <member name="M:System.MathF.Cbrt(System.Single)">
      <summary>Retourne la racine cubique d’un nombre spécifié.</summary>
      <param name="x">Nombre dont la racine cubique doit être recherchée.</param>
      <returns>Racine cubique de <paramref name="x" />.
ou 
 <see cref="F:System.Single.NaN" /> si <paramref name="x" /> est égal à <see cref="F:System.Single.NaN" />.</returns>
    </member>
    <member name="M:System.MathF.Ceiling(System.Single)">
      <summary>Retourne la plus petite valeur intégrale supérieure ou égale au nombre à virgule flottante simple précision spécifié.</summary>
      <param name="x">Nombre à virgule flottante simple précision.</param>
      <returns>Plus petite valeur intégrale qui est supérieure ou égale à <paramref name="x" />. Si <paramref name="x" /> est égal à <see cref="F:System.Single.NaN" />, à <see cref="F:System.Single.NegativeInfinity" /> ou à <see cref="F:System.Single.PositiveInfinity" />, cette valeur est retournée. Notez que cette méthode retourne un objet <see cref="T:System.Single" /> plutôt qu'un type intégral.</returns>
    </member>
    <member name="M:System.MathF.CopySign(System.Single,System.Single)">
      <summary>Retourne une valeur d’amplitude <paramref name="x" /> et de signe <paramref name="y" />.</summary>
      <param name="x">Nombre dont l’amplitude est utilisée dans le résultat.</param>
      <param name="y">Nombre dont le signe est utilisé dans le résultat.</param>
      <returns>Valeur d’amplitude <paramref name="x" /> et de signe <paramref name="y" />.</returns>
    </member>
    <member name="M:System.MathF.Cos(System.Single)">
      <summary>Retourne le cosinus de l'angle spécifié.</summary>
      <param name="x">Angle, mesuré en radians.</param>
      <returns>Cosinus de <paramref name="x" />. Si <paramref name="x" /> est égal à <see cref="F:System.Single.NaN" />, à <see cref="F:System.Single.NegativeInfinity" /> ou à <see cref="F:System.Single.PositiveInfinity" />, cette méthode retourne <see cref="F:System.Single.NaN" />.</returns>
    </member>
    <member name="M:System.MathF.Cosh(System.Single)">
      <summary>Retourne le cosinus hyperbolique de l'angle spécifié.</summary>
      <param name="x">Angle, mesuré en radians.</param>
      <returns>Cosinus hyperbolique de <paramref name="x" />. Si <paramref name="x" /> est égal à <see cref="F:System.Single.NegativeInfinity" /> ou <see cref="F:System.Single.PositiveInfinity" />, <see cref="F:System.Single.PositiveInfinity" /> est retourné. Si <paramref name="x" /> est égal à <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> est retourné.</returns>
    </member>
    <member name="F:System.MathF.E">
      <summary>Représente la base logarithmique naturelle spécifiée par la constante <see langword="e" />.</summary>
    </member>
    <member name="M:System.MathF.Exp(System.Single)">
      <summary>Retourne <see langword="e" /> élevé à la puissance spécifiée.</summary>
      <param name="x">Nombre spécifiant une puissance.</param>
      <returns>Nombre <see langword="e" /> élevé à la puissance <paramref name="x" />. Si <paramref name="x" /> est égal à <see cref="F:System.Single.NaN" /> ou <see cref="F:System.Single.PositiveInfinity" />, cette valeur est retournée. Si <paramref name="x" /> est égal à <see cref="F:System.Single.NegativeInfinity" />, 0 est retourné.</returns>
    </member>
    <member name="M:System.MathF.Floor(System.Single)">
      <summary>Retourne la plus grande valeur intégrale inférieure ou égale au nombre à virgule flottante simple précision spécifié.</summary>
      <param name="x">Nombre à virgule flottante simple précision.</param>
      <returns>Valeur du plus grand entier inférieur ou égal à <paramref name="x" />. Si <paramref name="x" /> est égal à <see cref="F:System.Single.NaN" />, à <see cref="F:System.Single.NegativeInfinity" /> ou à <see cref="F:System.Single.PositiveInfinity" />, cette valeur est retournée.</returns>
    </member>
    <member name="M:System.MathF.FusedMultiplyAdd(System.Single,System.Single,System.Single)">
      <summary>Retourne (x * y) + z, arrondi en une seule opération ternaire.</summary>
      <param name="x">Nombre à multiplier avec <paramref name="y" />.</param>
      <param name="y">Nombre à multiplier avec <paramref name="x" />.</param>
      <param name="z">Nombre à ajouter au résultat de la multiplication de <paramref name="x" /> par <paramref name="y" />.</param>
      <returns>(x * y) + z, arrondi en une seule opération ternaire.</returns>
    </member>
    <member name="M:System.MathF.IEEERemainder(System.Single,System.Single)">
      <summary>Retourne le reste de la division d'un nombre spécifié par un autre.</summary>
      <param name="x">Dividende.</param>
      <param name="y">Diviseur.</param>
      <returns>Nombre égal à <paramref name="x" /> - (<paramref name="y" /> Q), où Q est le quotient de <paramref name="x" /> / <paramref name="y" /> arrondi à l’entier le plus proche (si <paramref name="x" /> / <paramref name="y" /> se trouve à égale distance de deux entiers, l’entier pair est retourné).  
Si <paramref name="x" /> - (<paramref name="y" /> Q) est égal à zéro, la valeur retournée est +0 si <paramref name="x" /> est positif, ou -0 si <paramref name="x" /> est négatif.  
Si <paramref name="y" /> = 0, <see cref="F:System.Single.NaN" /> est retourné.</returns>
    </member>
    <member name="M:System.MathF.ILogB(System.Single)">
      <summary>Retourne le logarithme entier de base 2 d’un nombre spécifié.</summary>
      <param name="x">Nombre dont le logarithme doit être recherché.</param>
      <returns>Une des valeurs du tableau suivant.  
 Paramètre <paramref name="x" /> 
  Valeur de retour 
  Par défaut 
  Logarithme entier de base 2 de <paramref name="x" />, c’est-à-dire (int)log2(<paramref name="x" />).  

  Zéro 
 <see cref="F:System.Int32.MinValue" /> Égal à <see cref="F:System.Single.NaN" /> ou <see cref="F:System.Single.PositiveInfinity" /> ou <see cref="F:System.Single.NegativeInfinity" /><see cref="F:System.Int32.MaxValue" /></returns>
    </member>
    <member name="M:System.MathF.Log(System.Single)">
      <summary>Retourne le logarithme naturel (base <see langword="e" />) d'un nombre spécifié.</summary>
      <param name="x">Nombre dont le logarithme doit être recherché.</param>
      <returns>Une des valeurs du tableau suivant.  
 Paramètre <paramref name="x" /> 
  Valeur de retour 
  Positif 
  Logarithme naturel de <paramref name="x" />, à savoir ln <paramref name="x" /> ou log e <paramref name="x" /> Zéro 
 <see cref="F:System.Single.NegativeInfinity" /> Négatif 
 <see cref="F:System.Single.NaN" /> Égal à <see cref="F:System.Single.NaN" /><see cref="F:System.Single.NaN" /> Égal à <see cref="F:System.Single.PositiveInfinity" /><see cref="F:System.Single.PositiveInfinity" /></returns>
    </member>
    <member name="M:System.MathF.Log(System.Single,System.Single)">
      <summary>Retourne le logarithme d'un nombre spécifié dans une base spécifiée.</summary>
      <param name="x">Nombre dont le logarithme doit être recherché.</param>
      <param name="y">Base.</param>
      <returns>Une des valeurs du tableau suivant. (+Infini indique <see cref="F:System.Single.PositiveInfinity" />, -Infini indique <see cref="F:System.Single.NegativeInfinity" /> et NaN indique <see cref="F:System.Single.NaN" />.) 
 <paramref name="x" /><paramref name="newBase" /> Valeur de retour 
 <paramref name="x" />&gt; 0 
  (0 &lt;<paramref name="newBase" />&lt; 1) -ou-(<paramref name="newBase" />&gt; 1) 
  lognewBase(a) 
 <paramref name="x" />&lt; 0 
  (toute valeur) 
  NaN 
  (toute valeur) 
 <paramref name="newBase" />&lt; 0 
  NaN 
 <paramref name="x" /> != 1 
 <paramref name="newBase" /> = 0 
  NaN 
 <paramref name="x" /> != 1 
 <paramref name="newBase" /> = +Infinity 
  NaN 
 <paramref name="x" /> = NaN 
  (toute valeur) 
  NaN 
  (toute valeur) 
 <paramref name="newBase" /> = NaN 
  NaN 
  (toute valeur) 
 <paramref name="newBase" /> = 1 
  NaN 
 <paramref name="x" /> = 0 
  0 &lt;<paramref name="newBase" />&lt; 1 
  +Infini 
 <paramref name="x" /> = 0 
 <paramref name="newBase" />&gt; 1 
  -Infini 
 <paramref name="x" /> =  +Infini 
  0 &lt;<paramref name="newBase" />&lt; 1 
  -Infini 
 <paramref name="x" /> =  +Infini 
 <paramref name="newBase" />&gt; 1 
  +Infini 
 <paramref name="x" /> = 1 
 <paramref name="newBase" /> = 0 
  0 
 <paramref name="x" /> = 1 
 <paramref name="newBase" /> = +Infinity 
  0</returns>
    </member>
    <member name="M:System.MathF.Log10(System.Single)">
      <summary>Retourne le logarithme de base 10 d'un nombre spécifié.</summary>
      <param name="x">Nombre dont le logarithme doit être recherché.</param>
      <returns>Une des valeurs du tableau suivant.  
 Paramètre <paramref name="x" /> 
  Valeur de retour 
  Positif 
  Logarithme de base 10 de <paramref name="x" />, à savoir log 10<paramref name="x" />.  

  Zéro 
 <see cref="F:System.Single.NegativeInfinity" /> Négatif 
 <see cref="F:System.Single.NaN" /> Égal à <see cref="F:System.Single.NaN" /><see cref="F:System.Single.NaN" /> Égal à <see cref="F:System.Single.PositiveInfinity" /><see cref="F:System.Single.PositiveInfinity" /></returns>
    </member>
    <member name="M:System.MathF.Log2(System.Single)">
      <summary>Retourne le logarithme de base 2 d’un nombre spécifié.</summary>
      <param name="x">Nombre dont le logarithme doit être recherché.</param>
      <returns>Une des valeurs du tableau suivant.  
 Paramètre <paramref name="x" /> 
  Valeur de retour 
  Positif 
  Logarithme de base 2 de <paramref name="x" />, à savoir log 2<paramref name="x" />.  

  Zéro 
 <see cref="F:System.Single.NegativeInfinity" /> Négatif 
 <see cref="F:System.Single.NaN" /> Égal à <see cref="F:System.Single.NaN" /><see cref="F:System.Single.NaN" /> Égal à <see cref="F:System.Single.PositiveInfinity" /><see cref="F:System.Single.PositiveInfinity" /></returns>
    </member>
    <member name="M:System.MathF.Max(System.Single,System.Single)">
      <summary>Retourne le plus grand de deux nombres à virgule flottante simple précision.</summary>
      <param name="x">Premier des deux nombres à virgule flottante simple précision à comparer.</param>
      <param name="y">Second des deux nombres à virgule flottante simple précision à comparer.</param>
      <returns>Paramètre <paramref name="x" /> ou <paramref name="y" /> (selon celui qui est le plus grand). Si <paramref name="x" /> ou <paramref name="y" />, ou <paramref name="x" /> et <paramref name="y" /> sont égaux à <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> est retourné.</returns>
    </member>
    <member name="M:System.MathF.MaxMagnitude(System.Single,System.Single)">
      <summary>Retourne la plus grande amplitude de deux nombres à virgule flottante simple précision.</summary>
      <param name="x">Premier des deux nombres à virgule flottante simple précision à comparer.</param>
      <param name="y">Second des deux nombres à virgule flottante simple précision à comparer.</param>
      <returns>Paramètre <paramref name="x" /> ou <paramref name="y" />, selon celui qui a la plus grande amplitude. Si <paramref name="x" /> ou <paramref name="y" />, ou <paramref name="x" /> et <paramref name="y" /> sont égaux à <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> est retourné.</returns>
    </member>
    <member name="M:System.MathF.Min(System.Single,System.Single)">
      <summary>Retourne le plus petit de deux nombres à virgule flottante simple précision.</summary>
      <param name="x">Premier des deux nombres à virgule flottante simple précision à comparer.</param>
      <param name="y">Second des deux nombres à virgule flottante simple précision à comparer.</param>
      <returns>Paramètre <paramref name="x" /> ou <paramref name="y" /> (selon celui qui est le plus petit). Si <paramref name="x" />, <paramref name="y" /> ou <paramref name="x" /> et <paramref name="y" /> sont égaux à <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> est retourné.</returns>
    </member>
    <member name="M:System.MathF.MinMagnitude(System.Single,System.Single)">
      <summary>Retourne la plus petite amplitude de deux nombres à virgule flottante simple précision.</summary>
      <param name="x">Premier des deux nombres à virgule flottante simple précision à comparer.</param>
      <param name="y">Second des deux nombres à virgule flottante simple précision à comparer.</param>
      <returns>Paramètre <paramref name="x" /> ou <paramref name="y" />, selon celui qui a la plus petite amplitude. Si <paramref name="x" /> ou <paramref name="y" />, ou <paramref name="x" /> et <paramref name="y" /> sont égaux à <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> est retourné.</returns>
    </member>
    <member name="F:System.MathF.PI">
      <summary>Représente le rapport de la circonférence d’un cercle à son diamètre, spécifié par la constante π.</summary>
    </member>
    <member name="M:System.MathF.Pow(System.Single,System.Single)">
      <summary>Retourne un nombre spécifié élevé à la puissance spécifiée.</summary>
      <param name="x">Nombre à virgule flottante simple précision à élever à une puissance.</param>
      <param name="y">Nombre à virgule flottante simple précision qui spécifie une puissance.</param>
      <returns>Nombre <paramref name="x" /> élevé à la puissance <paramref name="y" />.</returns>
    </member>
    <member name="M:System.MathF.Round(System.Single)">
      <summary>Arrondit un nombre à virgule flottante simple précision au nombre entier le plus proche, et les valeurs médianes au nombre pair le plus proche.</summary>
      <param name="x">Nombre à virgule flottante simple précision à arrondir.</param>
      <returns>Entier le plus proche de <paramref name="x" />. Si le composant fractionnaire de <paramref name="x" /> se trouve à égale distance de deux entiers, l'un pair et l'autre impair, le nombre pair est retourné. Notez que cette méthode retourne un objet <see cref="T:System.Single" /> plutôt qu'un type intégral.</returns>
    </member>
    <member name="M:System.MathF.Round(System.Single,System.Int32)">
      <summary>Arrondit un nombre à virgule flottante simple précision au nombre de chiffres fractionnaires spécifié, et les valeurs médianes au nombre pair le plus proche.</summary>
      <param name="x">Nombre à virgule flottante simple précision à arrondir.</param>
      <param name="digits">Nombre de chiffres fractionnaires de la valeur de retour.</param>
      <returns>Nombre le plus proche de <paramref name="x" /> contenant un nombre de chiffres fractionnaires égal à <paramref name="digits" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="digits" /> est inférieur à 0 ou supérieur à 6.</exception>
    </member>
    <member name="M:System.MathF.Round(System.Single,System.Int32,System.MidpointRounding)">
      <summary>Arrondit un nombre à virgule flottante simple précision au nombre de chiffres fractionnaires spécifié, et utilise la convention d’arrondi spécifiée pour les valeurs médianes.</summary>
      <param name="x">Nombre à virgule flottante simple précision à arrondir.</param>
      <param name="digits">Nombre de chiffres fractionnaires de la valeur de retour.</param>
      <param name="mode">Spécification sur la façon d'arrondir <paramref name="x" /> s'il se trouve à mi-chemin entre deux nombres.</param>
      <returns>Nombre le plus proche de <paramref name="x" /> contenant un nombre de chiffres fractionnaires égal à <paramref name="digits" />. Si <paramref name="x" /> a moins de chiffres fractionnaires que <paramref name="digits" />, <paramref name="x" /> est retourné sans modification.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="digits" /> est inférieur à 0 ou supérieur à 6.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> n’est pas une valeur valide de <see cref="T:System.MidpointRounding" />.</exception>
    </member>
    <member name="M:System.MathF.Round(System.Single,System.MidpointRounding)">
      <summary>Arrondit un nombre à virgule flottante simple précision au nombre entier le plus proche, et utilise la convention d’arrondi spécifiée pour les valeurs médianes.</summary>
      <param name="x">Nombre à virgule flottante simple précision à arrondir.</param>
      <param name="mode">Spécification sur la façon d'arrondir <paramref name="x" /> s'il se trouve à mi-chemin entre deux nombres.</param>
      <returns>Entier le plus proche de <paramref name="x" />. Si <paramref name="x" /> se trouve à égale distance de deux entiers, l'un pair et l'autre impair, <paramref name="mode" /> détermine le nombre qui sera retourné. Notez que cette méthode retourne un objet <see cref="T:System.Single" /> plutôt qu'un type intégral.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> n’est pas une valeur valide de <see cref="T:System.MidpointRounding" />.</exception>
    </member>
    <member name="M:System.MathF.ScaleB(System.Single,System.Int32)">
      <summary>Retourne x * 2 ^ n calculé efficacement.</summary>
      <param name="x">Nombre à virgule flottante simple précision qui spécifie la valeur de base.</param>
      <param name="n">Nombre à virgule flottante simple précision qui spécifie la puissance.</param>
      <returns>x * 2 ^ n calculé efficacement.</returns>
    </member>
    <member name="M:System.MathF.Sign(System.Single)">
      <summary>Retourne un entier qui indique le signe d’un nombre à virgule flottante simple précision.</summary>
      <param name="x">Nombre signé.</param>
      <returns>Nombre qui indique le signe de <paramref name="x" />, comme indiqué dans le tableau suivant.  
  Valeur de retour 
  Signification 
  -1 
 <paramref name="x" /> est inférieur à zéro.  

  0 
 <paramref name="x" /> est égal à zéro.  

  1 
 <paramref name="x" /> est supérieur à zéro.</returns>
      <exception cref="T:System.ArithmeticException">
        <paramref name="x" /> est égal à <see cref="F:System.Single.NaN" />.</exception>
    </member>
    <member name="M:System.MathF.Sin(System.Single)">
      <summary>Retourne le sinus de l'angle spécifié.</summary>
      <param name="x">Angle, mesuré en radians.</param>
      <returns>Sinus de <paramref name="x" />. Si <paramref name="x" /> est égal à <see cref="F:System.Single.NaN" />, à <see cref="F:System.Single.NegativeInfinity" /> ou à <see cref="F:System.Single.PositiveInfinity" />, cette méthode retourne <see cref="F:System.Single.NaN" />.</returns>
    </member>
    <member name="M:System.MathF.Sinh(System.Single)">
      <summary>Retourne le sinus hyperbolique de l'angle spécifié.</summary>
      <param name="x">Angle, mesuré en radians.</param>
      <returns>Sinus hyperbolique de <paramref name="x" />. Si <paramref name="x" /> est égal à <see cref="F:System.Single.NegativeInfinity" />, <see cref="F:System.Single.PositiveInfinity" /> ou <see cref="F:System.Single.NaN" />, cette méthode retourne un <see cref="T:System.Single" /> égal à <paramref name="x" />.</returns>
    </member>
    <member name="M:System.MathF.Sqrt(System.Single)">
      <summary>Retourne la racine carrée d'un nombre spécifié.</summary>
      <param name="x">Nombre dont la racine carrée doit être recherchée.</param>
      <returns>Une des valeurs du tableau suivant.  
 Paramètre <paramref name="x" /> 
  Valeur de retour 
  Zéro, ou une valeur positive 
  Racine carrée positive de <paramref name="x" />.  

  Négatif 
 <see cref="F:System.Single.NaN" /> Est égal à<see cref="F:System.Single.NaN" />.<see cref="F:System.Single.NaN" /> Est égal à<see cref="F:System.Single.PositiveInfinity" />.<see cref="F:System.Single.PositiveInfinity" /></returns>
    </member>
    <member name="M:System.MathF.Tan(System.Single)">
      <summary>Retourne la tangente de l'angle spécifié.</summary>
      <param name="x">Angle, mesuré en radians.</param>
      <returns>Tangente de <paramref name="x" />. Si <paramref name="x" /> est égal à <see cref="F:System.Single.NaN" />, à <see cref="F:System.Single.NegativeInfinity" /> ou à <see cref="F:System.Single.PositiveInfinity" />, cette méthode retourne <see cref="F:System.Single.NaN" />.</returns>
    </member>
    <member name="M:System.MathF.Tanh(System.Single)">
      <summary>Retourne la tangente hyperbolique de l'angle spécifié.</summary>
      <param name="x">Angle, mesuré en radians.</param>
      <returns>Tangente hyperbolique de <paramref name="x" />. Si <paramref name="x" /> est égal à <see cref="F:System.Single.NegativeInfinity" />, cette méthode retourne -1. Si la valeur est égale à <see cref="F:System.Single.PositiveInfinity" />, cette méthode retourne 1. Si <paramref name="x" /> est égal à <see cref="F:System.Single.NaN" />, cette méthode retourne <see cref="F:System.Single.NaN" />.</returns>
    </member>
    <member name="M:System.MathF.Truncate(System.Single)">
      <summary>Calcule la partie entière d'un nombre à virgule flottante simple précision spécifié.</summary>
      <param name="x">Nombre à tronquer.</param>
      <returns>Partie entière de <paramref name="x" />, c'est-à-dire le nombre qui reste après avoir ignoré tous les chiffres fractionnaires, ou l'une des valeurs indiquées dans le tableau suivant.  
 <paramref name="x" /> Valeur de retour 
 <see cref="F:System.Single.NaN" /><see cref="F:System.Single.NaN" /><see cref="F:System.Single.NegativeInfinity" /><see cref="F:System.Single.NegativeInfinity" /><see cref="F:System.Single.PositiveInfinity" /><see cref="F:System.Single.PositiveInfinity" /></returns>
    </member>
    <member name="T:System.Net.WebUtility">
      <summary>Fournit des méthodes de codage et décodage d'URL pendant le traitement des requêtes web.</summary>
    </member>
    <member name="M:System.Net.WebUtility.HtmlDecode(System.String)">
      <summary>Convertit une chaîne qui a été encodée en HTML en vue d’une transmission HTML dans une chaîne décodée.</summary>
      <param name="value">Chaîne à décoder.</param>
      <returns>Chaîne décodée.</returns>
    </member>
    <member name="M:System.Net.WebUtility.HtmlDecode(System.String,System.IO.TextWriter)">
      <summary>Convertit une chaîne qui a été encodée en HTML en chaîne décodée et envoie la chaîne décodée à un flux de sortie <see cref="T:System.IO.TextWriter" /> .</summary>
      <param name="value">Chaîne à décoder.</param>
      <param name="output">Flux <see cref="T:System.IO.TextWriter" /> de sortie.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="output" /> ne peut pas être <see langword="null" /> si le paramètre <paramref name="value" /> n'est pas  <see langword="null" />.</exception>
    </member>
    <member name="M:System.Net.WebUtility.HtmlEncode(System.String)">
      <summary>Convertit une chaîne en une chaîne encodée au format HTML.</summary>
      <param name="value">Chaîne à encoder.</param>
      <returns>Chaîne encodée.</returns>
    </member>
    <member name="M:System.Net.WebUtility.HtmlEncode(System.String,System.IO.TextWriter)">
      <summary>Convertit une chaîne en une chaîne encodée au format HTML, et retourne la sortie en tant que flux de sortie <see cref="T:System.IO.TextWriter" />.</summary>
      <param name="value">Chaîne à encoder.</param>
      <param name="output">Flux de sortie <see cref="T:System.IO.TextWriter" />.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="output" /> ne peut pas être <see langword="null" /> si le paramètre <paramref name="value" /> n'est pas  <see langword="null" />.</exception>
    </member>
    <member name="M:System.Net.WebUtility.UrlDecode(System.String)">
      <summary>Convertit en chaîne décodée une chaîne qui a été encodée pour une transmission dans une URL.</summary>
      <param name="encodedValue">Chaîne encodée en URL à décoder.</param>
      <returns>Chaîne décodée.</returns>
    </member>
    <member name="M:System.Net.WebUtility.UrlDecodeToBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>Convertit un tableau d'octets encodé qui a été encodé pour être transmis dans une URL dans un tableau d'octets décodé.</summary>
      <param name="encodedValue">Tableau <see cref="T:System.Byte" /> encodé en URL à décoder.</param>
      <param name="offset">Offset, en octets, depuis le début du tableau <see cref="T:System.Byte" /> à décoder.</param>
      <param name="count">Nombre, en octets, à décoder depuis le tableau <see cref="T:System.Byte" />.</param>
      <returns>Tableau décodé <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:System.Net.WebUtility.UrlEncode(System.String)">
      <summary>Convertit une chaîne de texte en chaîne encodée en URL.</summary>
      <param name="value">Texte à encoder en URL.</param>
      <returns>Chaîne encodée en URL.</returns>
    </member>
    <member name="M:System.Net.WebUtility.UrlEncodeToBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>Convertit un tableau d'octets en tableau d'octets encodé URL.</summary>
      <param name="value">Tableau <see cref="T:System.Byte" /> à encoder au format URL.</param>
      <param name="offset">Offset, en octets, depuis le début du tableau <see cref="T:System.Byte" /> à encoder.</param>
      <param name="count">Nombre, en octets, à encoder depuis le tableau <see cref="T:System.Byte" />.</param>
      <returns>Tableau <see cref="T:System.Byte" /> encodé.</returns>
    </member>
    <member name="T:System.Numerics.BitOperations">
      <summary>Fournit des méthodes utilitaires pour les opérations de rotation de bits intrinsèques. Les méthodes utilisent des intrinsèques matériels lorsqu’ils sont disponibles sur la plateforme sous-jacente. Dans le cas contraire, elles utilisent des logiciels de secours optimisés.</summary>
    </member>
    <member name="M:System.Numerics.BitOperations.LeadingZeroCount(System.UInt32)">
      <summary>Compte le nombre de bits avec un zéro de début dans un masque d’entier 32 bits non signé.</summary>
      <param name="value">Masque.</param>
      <returns>Nombre de bits avec un zéro de début dans un masque.</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.LeadingZeroCount(System.UInt64)">
      <summary>Compte le nombre de bits avec un zéro de début dans un masque d’entier 64 bits non signé.</summary>
      <param name="value">Masque.</param>
      <returns>Nombre de bits avec un zéro de début dans un masque.</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.Log2(System.UInt32)">
      <summary>Retourne le journal (plancher) d’entiers de la valeur spécifiée, base 2.</summary>
      <param name="value">Nombre à partir duquel obtenir le logarithme.</param>
      <returns>Journal de la valeur spécifiée, base 2.</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.Log2(System.UInt64)">
      <summary>Retourne le journal (plancher) d’entiers de la valeur spécifiée, base 2.</summary>
      <param name="value">Nombre à partir duquel obtenir le logarithme.</param>
      <returns>Journal de la valeur spécifiée, base 2.</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.PopCount(System.UInt32)">
      <summary>Retourne le nombre de remplissages (nombre d’ensemble de bits) d’un masque.</summary>
      <param name="value">Masque.</param>
      <returns>Nombre de remplissages d’un masque.</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.PopCount(System.UInt64)">
      <summary>Retourne le nombre de remplissages (nombre d’ensemble de bits) d’un masque d’entier 64 bits non signé.</summary>
      <param name="value">Masque.</param>
      <returns>Nombre de remplissages du masque.</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.RotateLeft(System.UInt32,System.Int32)">
      <summary>Effectue la rotation de la valeur spécifiée vers la gauche par le nombre spécifié de bits.</summary>
      <param name="value">Valeur qui doit faire l’objet d’une rotation.</param>
      <param name="offset">Nombre de bits selon lequel effectuer la rotation. Toute valeur en dehors de la plage [0..31] est traitée comme congruence mod 32.</param>
      <returns>Valeur ayant fait l'objet d'une rotation.</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.RotateLeft(System.UInt64,System.Int32)">
      <summary>Effectue la rotation de la valeur spécifiée vers la gauche par le nombre spécifié de bits.</summary>
      <param name="value">Valeur qui doit faire l’objet d’une rotation.</param>
      <param name="offset">Nombre de bits selon lequel effectuer la rotation. Toute valeur en dehors de la plage [0..63] est traitée comme congruence mod 64.</param>
      <returns>Valeur ayant fait l'objet d'une rotation.</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.RotateRight(System.UInt32,System.Int32)">
      <summary>Effectue la rotation de la valeur spécifiée vers la droite par le nombre spécifié de bits.</summary>
      <param name="value">Valeur qui doit faire l’objet d’une rotation.</param>
      <param name="offset">Nombre de bits selon lequel effectuer la rotation. Toute valeur en dehors de la plage [0..31] est traitée comme congruence mod 32.</param>
      <returns>Valeur ayant fait l'objet d'une rotation.</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.RotateRight(System.UInt64,System.Int32)">
      <summary>Effectue la rotation de la valeur spécifiée vers la droite par le nombre spécifié de bits.</summary>
      <param name="value">Valeur qui doit faire l’objet d’une rotation.</param>
      <param name="offset">Nombre de bits selon lequel effectuer la rotation. Toute valeur en dehors de la plage [0..63] est traitée comme congruence mod 64.</param>
      <returns>Valeur ayant fait l'objet d'une rotation.</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.TrailingZeroCount(System.Int32)">
      <summary>Compte le nombre de bits avec un zéro de fin dans un masque de valeur d’entier 32 bits.</summary>
      <param name="value">Masque.</param>
      <returns>Nombre de bits avec un zéro de fin dans la valeur d’entier.</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.TrailingZeroCount(System.Int64)">
      <summary>Compte le nombre de bits avec un zéro de fin dans un masque de valeur d’entier 64 bits.</summary>
      <param name="value">Masque.</param>
      <returns>Nombre de bits avec un zéro de fin dans le masque.</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.TrailingZeroCount(System.UInt32)">
      <summary>Compte le nombre de bits avec un zéro de fin dans un masque de valeur d’entier 32 bits non signé.</summary>
      <param name="value">Masque.</param>
      <returns>Nombre de bits avec un zéro de fin dans le masque.</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.TrailingZeroCount(System.UInt64)">
      <summary>Compte le nombre de bits avec un zéro de fin dans un masque de valeur d’entier 64 bits non signé.</summary>
      <param name="value">Masque.</param>
      <returns>Nombre de bits avec un zéro de fin dans le masque.</returns>
    </member>
    <member name="T:System.OperatingSystem">
      <summary>Représente des informations relatives à un système d'exploitation, telles que l'identificateur de version et de plateforme. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.OperatingSystem.#ctor(System.PlatformID,System.Version)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.OperatingSystem" /> avec la valeur de l'identificateur de plateforme spécifié et l'objet de version.</summary>
      <param name="platform">Une des valeurs de <see cref="T:System.PlatformID" /> qui indique la plateforme du système d'exploitation.</param>
      <param name="version">Objet <see cref="T:System.Version" /> indiquant la version du système d'exploitation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="platform" /> n'est pas une valeur d'énumération <see cref="T:System.PlatformID" />.</exception>
    </member>
    <member name="M:System.OperatingSystem.Clone">
      <summary>Crée un objet <see cref="T:System.OperatingSystem" /> identique à cette instance.</summary>
      <returns>Objet <see cref="T:System.OperatingSystem" /> représentant une copie de cette instance.</returns>
    </member>
    <member name="M:System.OperatingSystem.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Remplit un objet <see cref="T:System.Runtime.Serialization.SerializationInfo" /> des données nécessaires à la désérialisation de cette instance.</summary>
      <param name="info">Objet à remplir avec des informations de sérialisation.</param>
      <param name="context">Emplacement de stockage et de récupération des données sérialisées. Réservé à un usage ultérieur.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> est <see langword="null" />.</exception>
    </member>
    <member name="P:System.OperatingSystem.Platform">
      <summary>Obtient une valeur d'énumération <see cref="T:System.PlatformID" /> qui identifie la plateforme du système d'exploitation.</summary>
      <returns>Une des valeurs de <see cref="T:System.PlatformID" />.</returns>
    </member>
    <member name="P:System.OperatingSystem.ServicePack">
      <summary>Obtient la version de Service Pack représentée par cet objet <see cref="T:System.OperatingSystem" />.</summary>
      <returns>Version de Service Pack, si les Service Packs sont pris en charge et que l'un d'eux au moins est installé ; sinon, une chaîne vide ("").</returns>
    </member>
    <member name="M:System.OperatingSystem.ToString">
      <summary>Convertit la valeur de cet objet <see cref="T:System.OperatingSystem" /> en sa représentation sous forme de chaîne équivalente.</summary>
      <returns>Représentation sous forme de chaîne des valeurs retournée par les propriétés <see cref="P:System.OperatingSystem.Platform" />, <see cref="P:System.OperatingSystem.Version" /> et <see cref="P:System.OperatingSystem.ServicePack" />.</returns>
    </member>
    <member name="P:System.OperatingSystem.Version">
      <summary>Obtient un objet <see cref="T:System.Version" /> qui identifie le système d'exploitation.</summary>
      <returns>Objet <see cref="T:System.Version" /> qui décrit les numéros de version principale, version secondaire, build et révision du système d'exploitation.</returns>
    </member>
    <member name="P:System.OperatingSystem.VersionString">
      <summary>Obtient la représentation sous forme de chaîne concaténée de l'identificateur de la plateforme, de la version et du Service Pack actuellement actuellement installés sur le système d'exploitation.</summary>
      <returns>Représentation sous forme de chaîne des valeurs retournée par les propriétés <see cref="P:System.OperatingSystem.Platform" />, <see cref="P:System.OperatingSystem.Version" /> et <see cref="P:System.OperatingSystem.ServicePack" />.</returns>
    </member>
    <member name="T:System.PlatformID">
      <summary>Identifie le système d'exploitation, ou la plateforme, pris en charge par un assembly.</summary>
    </member>
    <member name="F:System.PlatformID.MacOSX">
      <summary>Le système d'exploitation est Macintosh. Cette valeur a été retournée par Silverlight. Sur .NET Core, son remplacement est Unix.</summary>
    </member>
    <member name="F:System.PlatformID.Unix">
      <summary>Le système d'exploitation est Unix.</summary>
    </member>
    <member name="F:System.PlatformID.Win32NT">
      <summary>Le système d'exploitation est Windows NT (ou version ultérieure).</summary>
    </member>
    <member name="F:System.PlatformID.Win32S">
      <summary>Le système d'exploitation est Win32s. Cette valeur n'est plus utilisée.</summary>
    </member>
    <member name="F:System.PlatformID.Win32Windows">
      <summary>Le système d'exploitation est Windows 95 ou Windows 98. Cette valeur n'est plus utilisée.</summary>
    </member>
    <member name="F:System.PlatformID.WinCE">
      <summary>Le système d'exploitation est Windows CE. Cette valeur n'est plus utilisée.</summary>
    </member>
    <member name="F:System.PlatformID.Xbox">
      <summary>La plateforme de développement est Xbox 360. Cette valeur n'est plus utilisée.</summary>
    </member>
    <member name="T:System.Progress`1">
      <summary>Fournit un <see cref="T:System.IProgress`1" /> qui appelle des rappels pour chaque valeur de progression signalée.</summary>
      <typeparam name="T">Spécifie le type de la valeur de rapport progression.</typeparam>
    </member>
    <member name="M:System.Progress`1.#ctor">
      <summary>Initialise l'objet <see cref="T:System.Progress`1" />.</summary>
    </member>
    <member name="M:System.Progress`1.#ctor(System.Action{`0})">
      <summary>Initialise l'objet <see cref="T:System.Progress`1" /> avec le rappel spécifié.</summary>
      <param name="handler">Gestionnaire à appeler pour chaque valeur de progression signalée. Ce gestionnaire est appelé en plus de tous les délégués inscrits auprès de l'événement <see cref="E:System.Progress`1.ProgressChanged" />. Selon l'instance <see cref="T:System.Threading.SynchronizationContext" /> capturée par <see cref="T:System.Progress`1" /> lors de la construction, il est possible que cette instance du gestionnaire puisse être appelée simultanément avec elle-même.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> est <see langword="null" /> (<see langword="Nothing" /> en Visual Basic).</exception>
    </member>
    <member name="M:System.Progress`1.OnReport(`0)">
      <summary>Signale une modification de progression.</summary>
      <param name="value">Valeur de la progression mise à jour.</param>
    </member>
    <member name="E:System.Progress`1.ProgressChanged">
      <summary>Déclenché pour chaque valeur de progression signalée.</summary>
    </member>
    <member name="M:System.Progress`1.System#IProgress{T}#Report(`0)">
      <summary>Signale une modification de progression.</summary>
      <param name="value">Valeur de la progression mise à jour.</param>
    </member>
    <member name="T:System.Random">
      <summary>Représente un générateur de nombres pseudo-aléatoires. Il s’agit d’un périphérique qui produit une séquence de nombres conformes à certaines exigences statistiques liées à l’aspect aléatoire.</summary>
    </member>
    <member name="M:System.Random.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Random" />, à l'aide d'une valeur initiale par défaut qui est fonction du temps.</summary>
    </member>
    <member name="M:System.Random.#ctor(System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Random" /> à l'aide de la valeur initiale spécifiée.</summary>
      <param name="Seed">Nombre utilisé pour calculer la valeur de départ de la séquence de nombres pseudo-aléatoires. Si un nombre négatif est spécifié, la valeur absolue du nombre est utilisée.</param>
    </member>
    <member name="M:System.Random.Next">
      <summary>Retourne un nombre aléatoire entier non négatif.</summary>
      <returns>Entier signé 32 bits supérieur ou égal à 0 et inférieur à <see cref="F:System.Int32.MaxValue" />.</returns>
    </member>
    <member name="M:System.Random.Next(System.Int32)">
      <summary>Retourne un nombre aléatoire entier non négatif, inférieur au nombre maximal spécifié.</summary>
      <param name="maxValue">Limite supérieure (exclusive) du nombre aléatoire à générer. <paramref name="maxValue" /> doit être supérieur ou égal à 0.</param>
      <returns>Entier signé 32 bits supérieur ou égal à 0 et inférieur à <paramref name="maxValue" />, autrement dit la plage des valeurs de retour inclut généralement 0, mais pas <paramref name="maxValue" />. Toutefois, si <paramref name="maxValue" /> est égal à 0, <paramref name="maxValue" /> est retourné.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxValue" /> est inférieur à 0.</exception>
    </member>
    <member name="M:System.Random.Next(System.Int32,System.Int32)">
      <summary>Retourne un entier aléatoire qui se trouve dans une plage spécifiée.</summary>
      <param name="minValue">Limite inférieure (incluse) du nombre aléatoire retourné.</param>
      <param name="maxValue">Limite supérieure (exclusive) du nombre aléatoire retourné. <paramref name="maxValue" /> doit être supérieur ou égal à <paramref name="minValue" />.</param>
      <returns>Entier signé 32 bits supérieur ou égal à <paramref name="minValue" /> et inférieur à <paramref name="maxValue" /> ; autrement dit, la plage des valeurs de retour inclut <paramref name="minValue" /> mais pas <paramref name="maxValue" />. Si <paramref name="minValue" /> est égal à <paramref name="maxValue" />, <paramref name="minValue" /> est retourné.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="minValue" /> est supérieur à <paramref name="maxValue" />.</exception>
    </member>
    <member name="M:System.Random.NextBytes(System.Byte[])">
      <summary>Remplit les éléments d'un tableau d'octets spécifié à l'aide de nombres aléatoires.</summary>
      <param name="buffer">Tableau d'octets contenant des nombres aléatoires.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Random.NextBytes(System.Span{System.Byte})">
      <param name="buffer" />
    </member>
    <member name="M:System.Random.NextDouble">
      <summary>Retourne un nombre aléatoire à virgule flottante supérieur ou égal à 0,0 et inférieur à 1,0.</summary>
      <returns>Nombre à virgule flottante double précision supérieur ou égal à 0,0 et inférieur à 1,0.</returns>
    </member>
    <member name="M:System.Random.Sample">
      <summary>Retourne un nombre aléatoire en virgule flottante compris entre 0,0 et 1,0.</summary>
      <returns>Nombre à virgule flottante double précision supérieur ou égal à 0,0 et inférieur à 1,0.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyNameProxy">
      <summary>Fournit une version distante du <see langword="AssemblyName" />.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyNameProxy.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Reflection.AssemblyNameProxy" />.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyNameProxy.GetAssemblyName(System.String)">
      <summary>Obtient le <see langword="AssemblyName" /> d'un fichier donné.</summary>
      <param name="assemblyFile">Fichier d'assembly pour lequel obtenir <see langword="AssemblyName" />.</param>
      <returns>Objet <see langword="AssemblyName" /> représentant le fichier donné.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyFile" /> est vide.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyFile" /> est introuvable.</exception>
      <exception cref="T:System.Security.SecurityException">L'appelant n'a pas l'autorisation requise.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> n’est pas un assembly valide.</exception>
    </member>
    <member name="T:System.ResolveEventHandler">
      <summary>Représente une méthode qui gère l'événement <see cref="E:System.AppDomain.TypeResolve" />, <see cref="E:System.AppDomain.ResourceResolve" /> ou <see cref="E:System.AppDomain.AssemblyResolve" /> d'un <see cref="T:System.AppDomain" />.</summary>
      <param name="sender">Source de l'événement.</param>
      <param name="args">Données d'événement.</param>
      <returns>Assembly qui résout le type, l'assembly ou la ressource ; ou <see langword="null" /> si l'assembly ne peut pas être résolu.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.SwitchExpressionException">
      <summary>Indique qu’une expression de commutateur qui n’était pas exhaustive n’a pas réussi à établir une correspondance avec son entrée au moment de l’exécution. L’exception contient éventuellement un objet représentant la valeur sans correspondance.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.SwitchExpressionException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.CompilerServices.SwitchExpressionException" />.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.SwitchExpressionException.#ctor(System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.CompilerServices.SwitchExpressionException" /> avec un message d'erreur spécifié et une référence à l'exception interne ayant provoqué cette exception.</summary>
      <param name="innerException">Exception ayant provoqué l'exception actuelle. Si le paramètre <paramref name="innerException" /> n'est pas <see langword="null" />, l'exception actuelle est levée dans un bloc <see langword="catch" /> qui gère l'exception interne.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.SwitchExpressionException.#ctor(System.Object)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.CompilerServices.SwitchExpressionException" /> avec une valeur de commutateur sans correspondance.</summary>
      <param name="unmatchedValue">Valeur de commutateur qui ne correspond à aucun cas de commutateur.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.SwitchExpressionException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.CompilerServices.SwitchExpressionException" /> avec le message spécifié.</summary>
      <param name="message">Message à afficher à l'utilisateur final.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.SwitchExpressionException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.CompilerServices.SwitchExpressionException" /> avec la description détaillée spécifiée et l'exception spécifiée.</summary>
      <param name="message">Message à afficher à l'utilisateur final.</param>
      <param name="innerException">Référence à l'exception interne à l'origine de cette exception.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.SwitchExpressionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Affecte le nom de paramètre et des informations complémentaires concernant l'exception à <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</summary>
      <param name="info">Stocke les données utilisées pour sérialiser ou désérialiser l'objet que <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" /> sérialisait ou désérialisait.</param>
      <param name="context">Décrit la source et la destination du flux ayant généré l'exception, ainsi qu'un moyen pour la sérialisation de conserver ce contexte et un contexte supplémentaire défini par l'appelant.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.SwitchExpressionException.Message">
      <summary>Obtient le message de l'exception.</summary>
      <returns>Chaîne du message complet.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.SwitchExpressionException.UnmatchedValue">
      <summary>Obtient la valeur sans correspondance associée à l’exception.</summary>
      <returns>Valeur sans correspondance à l’origine de l’exception.</returns>
    </member>
    <member name="T:System.Runtime.ProfileOptimization">
      <summary>Améliore les performances de démarrage des domaines d'application dans les applications qui requièrent le compilateur juste-à-temps (JIT) lors de la compilation d'arrière-plan des méthodes susceptibles d'être exécutées, en fonction des profils créés lors des compilations précédentes.</summary>
    </member>
    <member name="M:System.Runtime.ProfileOptimization.SetProfileRoot(System.String)">
      <summary>Active le profilage d'optimisation pour le domaine d'application actif, et définit le dossier dans lequel les fichiers de profils d'optimisation sont enregistrés. Sur les ordinateurs à cœur unique, la méthode est ignorée.</summary>
      <param name="directoryPath">Chemin d'accès complet au dossier dans lequel les fichiers de profil sont enregistrés pour le domaine d'application en cours.</param>
    </member>
    <member name="M:System.Runtime.ProfileOptimization.StartProfile(System.String)">
      <summary>Démarre la compilation juste-à-temps (JIT) des méthodes qui ont été précédemment enregistrées dans le fichier de profil spécifié, sur un thread d'arrière-plan. Démarre le processus d'enregistrement de l'utilisation de méthode actuelle, qui remplace ultérieurement le fichier de profil spécifié.</summary>
      <param name="profile">Nom de fichier du profil à utiliser.</param>
    </member>
    <member name="T:System.Runtime.Versioning.ComponentGuaranteesAttribute">
      <summary>Définit la garantie de compatibilité d'un composant, d'un type ou d'un membre de type qui s'étend sur plusieurs versions.</summary>
    </member>
    <member name="M:System.Runtime.Versioning.ComponentGuaranteesAttribute.#ctor(System.Runtime.Versioning.ComponentGuaranteesOptions)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.Versioning.ComponentGuaranteesAttribute" /> avec une valeur qui indique le niveau de compatibilité garanti d'une bibliothèque, d'un type ou d'un membre entre plusieurs versions.</summary>
      <param name="guarantees">Une des valeurs d'énumération qui spécifie le niveau de compatibilité garanti entre plusieurs versions.</param>
    </member>
    <member name="P:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees">
      <summary>Obtient une valeur qui indique le niveau de compatibilité garanti d'une bibliothèque, d'un type ou d'un membre de type qui s'étend sur plusieurs versions.</summary>
      <returns>Une des valeurs d'énumération qui spécifie le niveau de compatibilité garanti entre plusieurs versions.</returns>
    </member>
    <member name="T:System.Runtime.Versioning.ComponentGuaranteesOptions">
      <summary>Décrit la garantie de compatibilité d'un composant, d'un type ou d'un membre de type qui s'étend sur plusieurs versions.</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange">
      <summary>Le développeur promet la compatibilité d'échange entre plusieurs versions pour le type. Les consommateurs du type peuvent s'attendre à une compatibilité entre les futures versions et peuvent utiliser ce type dans toutes leurs interfaces. Les problèmes de contrôles de version ne peuvent pas être résolus par une exécution côte à côte.</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ComponentGuaranteesOptions.None">
      <summary>Le développeur ne garantit pas la compatibilité entre les versions. Les consommateurs du composant, du type ou du membre peuvent s'attendre à ce que les futures versions arrêtent le client existant.</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ComponentGuaranteesOptions.SideBySide">
      <summary>Le fonctionnement du composant a été testé lorsque plusieurs versions de l'assembly sont chargées dans le même domaine d'application. Les futures versions peuvent empêcher la compatibilité. Toutefois, lorsque de telles modifications empêchant la compatibilité sont apportées, l'ancienne version n'est pas modifiée et continue d'exister parallèlement à la nouvelle.</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable">
      <summary>Le développeur promet une compatibilité stable entre les versions. Les consommateurs du type peuvent s'attendre à ce que les futures versions n'arrêtent pas le client existant. Toutefois, si cela se produit alors que le client n'a pas utilisé le type dans ses interfaces, l'exécution côte à côte peut éventuellement résoudre le problème.</summary>
    </member>
    <member name="T:System.Runtime.Versioning.FrameworkName">
      <summary>Représente le nom d'une version du .NET Framework.</summary>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.Versioning.FrameworkName" /> à partir d'une chaîne qui contient les informations de version du .NET Framework.</summary>
      <param name="frameworkName">Chaîne qui contient les informations de version du .NET Framework.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="frameworkName" /> a la valeur <see cref="F:System.String.Empty" />.  

ou - 
<paramref name="frameworkName" /> est constitué de moins de deux composants ou de plus de trois composants.  

ou 
 <paramref name="frameworkName" /> n'inclut pas un numéro de version principale et secondaire.  
ou 
 <paramref name="frameworkName" /> n’inclut pas un numéro de version valide.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="frameworkName" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.#ctor(System.String,System.Version)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.Versioning.FrameworkName" /> à partir d'une chaîne et d'un objet <see cref="T:System.Version" /> qui identifient la version du .NET Framework.</summary>
      <param name="identifier">Chaîne qui identifie la version du .NET Framework.</param>
      <param name="version">Objet qui contient les informations de version du .NET Framework.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="identifier" /> a la valeur <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="identifier" /> a la valeur <see langword="null" />.  

ou - 
<paramref name="version" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.#ctor(System.String,System.Version,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.Versioning.FrameworkName" /> à partir d'une chaîne, d'un objet <see cref="T:System.Version" /> qui identifie la version du .NET Framework et d'un nom de profil.</summary>
      <param name="identifier">Chaîne qui identifie la version du .NET Framework.</param>
      <param name="version">Objet qui contient les informations de version du .NET Framework.</param>
      <param name="profile">Nom de profil.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="identifier" /> est <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="identifier" /> a la valeur <see langword="null" />.  

ou - 
<paramref name="version" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.Equals(System.Object)">
      <summary>Retourne une valeur qui indique si cette instance de <see cref="T:System.Runtime.Versioning.FrameworkName" /> représente la même version du .NET Framework qu'un objet spécifique.</summary>
      <param name="obj">Objet à comparer avec l'instance actuelle.</param>
      <returns>
        <see langword="true" /> si chaque composant de l'objet <see cref="T:System.Runtime.Versioning.FrameworkName" /> actif coïncide avec le composant correspondant de <paramref name="obj" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.Equals(System.Runtime.Versioning.FrameworkName)">
      <summary>Retourne une valeur qui indique si cette instance de <see cref="T:System.Runtime.Versioning.FrameworkName" /> représente la même version du .NET Framework qu'une instance spécifique de <see cref="T:System.Runtime.Versioning.FrameworkName" />.</summary>
      <param name="other">Objet à comparer avec l'instance actuelle.</param>
      <returns>
        <see langword="true" /> si chaque composant de l'objet <see cref="T:System.Runtime.Versioning.FrameworkName" /> actif coïncide avec le composant correspondant de <paramref name="other" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Runtime.Versioning.FrameworkName.FullName">
      <summary>Obtient le nom complet de cet objet <see cref="T:System.Runtime.Versioning.FrameworkName" />.</summary>
      <returns>Nom complet de cet objet <see cref="T:System.Runtime.Versioning.FrameworkName" />.</returns>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.GetHashCode">
      <summary>Retourne le code de hachage pour l'objet <see cref="T:System.Runtime.Versioning.FrameworkName" />.</summary>
      <returns>Entier signé 32 bits qui représente le code de hachage de cette instance.</returns>
    </member>
    <member name="P:System.Runtime.Versioning.FrameworkName.Identifier">
      <summary>Obtient l'identificateur de cet objet <see cref="T:System.Runtime.Versioning.FrameworkName" />.</summary>
      <returns>Identificateur de cet objet <see cref="T:System.Runtime.Versioning.FrameworkName" />.</returns>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.op_Equality(System.Runtime.Versioning.FrameworkName,System.Runtime.Versioning.FrameworkName)">
      <summary>Retourne une valeur qui indique si deux objets <see cref="T:System.Runtime.Versioning.FrameworkName" /> représentent la même version du .NET Framework.</summary>
      <param name="left">Premier objet à comparer.</param>
      <param name="right">Deuxième objet à comparer.</param>
      <returns>
        <see langword="true" /> si les paramètres <paramref name="left" /> et <paramref name="right" /> représentent la même version du .NET Framework ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.op_Inequality(System.Runtime.Versioning.FrameworkName,System.Runtime.Versioning.FrameworkName)">
      <summary>Retourne une valeur qui indique si deux objets <see cref="T:System.Runtime.Versioning.FrameworkName" /> représentent des versions différentes du .NET Framework.</summary>
      <param name="left">Premier objet à comparer.</param>
      <param name="right">Deuxième objet à comparer.</param>
      <returns>
        <see langword="true" /> si les paramètres <paramref name="left" /> et <paramref name="right" /> représentent des versions différentes du .NET Framework ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Runtime.Versioning.FrameworkName.Profile">
      <summary>Obtient le nom de profil de cet objet <see cref="T:System.Runtime.Versioning.FrameworkName" />.</summary>
      <returns>Nom de profil de cet objet <see cref="T:System.Runtime.Versioning.FrameworkName" />.</returns>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.ToString">
      <summary>Retourne la représentation sous forme de chaîne de cet objet <see cref="T:System.Runtime.Versioning.FrameworkName" />.</summary>
      <returns>Chaîne qui représente cet objet <see cref="T:System.Runtime.Versioning.FrameworkName" />.</returns>
    </member>
    <member name="P:System.Runtime.Versioning.FrameworkName.Version">
      <summary>Obtient la version de cet objet <see cref="T:System.Runtime.Versioning.FrameworkName" />.</summary>
      <returns>Objet qui contient des informations de version sur cet objet <see cref="T:System.Runtime.Versioning.FrameworkName" />.</returns>
    </member>
    <member name="T:System.Runtime.Versioning.ResourceConsumptionAttribute">
      <summary>Spécifie la ressource consommée par le membre d'une classe. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.Runtime.Versioning.ResourceConsumptionAttribute.#ctor(System.Runtime.Versioning.ResourceScope)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.Versioning.ResourceConsumptionAttribute" /> spécifiant la portée de la ressource consommée.</summary>
      <param name="resourceScope">
        <see cref="T:System.Runtime.Versioning.ResourceScope" /> de la ressource consommée.</param>
    </member>
    <member name="M:System.Runtime.Versioning.ResourceConsumptionAttribute.#ctor(System.Runtime.Versioning.ResourceScope,System.Runtime.Versioning.ResourceScope)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.Versioning.ResourceConsumptionAttribute" /> spécifiant la portée de la ressource consommée et la portée sur la manière dont elle est consommée.</summary>
      <param name="resourceScope">
        <see cref="T:System.Runtime.Versioning.ResourceScope" /> de la ressource consommée.</param>
      <param name="consumptionScope">
        <see cref="T:System.Runtime.Versioning.ResourceScope" /> utilisé par ce membre.</param>
    </member>
    <member name="P:System.Runtime.Versioning.ResourceConsumptionAttribute.ConsumptionScope">
      <summary>Obtient la portée de consommation pour ce membre.</summary>
      <returns>Objet <see cref="T:System.Runtime.Versioning.ResourceScope" /> spécifiant la portée de ressource utilisée par ce membre.</returns>
    </member>
    <member name="P:System.Runtime.Versioning.ResourceConsumptionAttribute.ResourceScope">
      <summary>Obtient la portée de ressource pour la ressource consommée.</summary>
      <returns>Objet <see cref="T:System.Runtime.Versioning.ResourceScope" /> spécifiant la portée de ressource du membre consommé.</returns>
    </member>
    <member name="T:System.Runtime.Versioning.ResourceExposureAttribute">
      <summary>Spécifie l'exposition des ressources pour un membre d'une classe. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.Runtime.Versioning.ResourceExposureAttribute.#ctor(System.Runtime.Versioning.ResourceScope)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.Versioning.ResourceExposureAttribute" /> avec le niveau d'exposition spécifié.</summary>
      <param name="exposureLevel">Portée de la ressource.</param>
    </member>
    <member name="P:System.Runtime.Versioning.ResourceExposureAttribute.ResourceExposureLevel">
      <summary>Obtient la portée de l'exposition de ressources.</summary>
      <returns>Objet <see cref="T:System.Runtime.Versioning.ResourceScope" />.</returns>
    </member>
    <member name="T:System.Runtime.Versioning.ResourceScope">
      <summary>Identifie la portée d'une ressource pouvant être partagée.</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.AppDomain">
      <summary>L'état est partagé par des objets dans un <see cref="T:System.AppDomain" />.</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.Assembly">
      <summary>La ressource est visible à une portée d'assembly.</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.Library">
      <summary>L'état est partagé par des objets dans une bibliothèque.</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.Machine">
      <summary>L'état est partagé par des objets dans l'ordinateur.</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.None">
      <summary>Il n'y a aucun état partagé.</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.Private">
      <summary>La ressource est visible uniquement au type.</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.Process">
      <summary>L'état est partagé dans un processus.</summary>
    </member>
    <member name="T:System.Runtime.Versioning.VersioningHelper">
      <summary>Fournit des méthodes pour aider les développeurs à écrire du code à version sécurisée. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.Runtime.Versioning.VersioningHelper.MakeVersionSafeName(System.String,System.Runtime.Versioning.ResourceScope,System.Runtime.Versioning.ResourceScope)">
      <summary>Retourne un nom de version sécurisée en fonction du nom de la ressource spécifié et de la source de consommation de ressources prévue.</summary>
      <param name="name">Nom de la ressource.</param>
      <param name="from">Portée de la ressource.</param>
      <param name="to">Portée de consommation de ressources souhaitée.</param>
      <returns>Nom de version sécurisée.</returns>
    </member>
    <member name="M:System.Runtime.Versioning.VersioningHelper.MakeVersionSafeName(System.String,System.Runtime.Versioning.ResourceScope,System.Runtime.Versioning.ResourceScope,System.Type)">
      <summary>Retourne un nom de version sécurisée en fonction du nom de ressource spécifié, de la portée de consommation de ressources prévue et du type utilisant la ressource.</summary>
      <param name="name">Nom de la ressource.</param>
      <param name="from">Début de la plage de portée.</param>
      <param name="to">Fin de la plage de portée.</param>
      <param name="type">
        <see cref="T:System.Type" /> de la ressource.</param>
      <returns>Nom de version sécurisée.</returns>
      <exception cref="T:System.ArgumentException">Les valeurs pour <paramref name="from" /> et <paramref name="to" /> ne sont pas valides. Le type de ressource dans l'énumération <see cref="T:System.Runtime.Versioning.ResourceScope" /> va d'un type de ressource plus restrictif à un type de ressource plus général.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> est <see langword="null" />.</exception>
    </member>
    <member name="T:System.Security.IPermission">
      <summary>Définit les méthodes implémentées par les types d'autorisation.</summary>
    </member>
    <member name="M:System.Security.IPermission.Copy">
      <summary>Crée et retourne une copie identique de l’autorisation actuelle.</summary>
      <returns>Copie de l’autorisation actuelle.</returns>
    </member>
    <member name="M:System.Security.IPermission.Demand">
      <summary>Lève une <see cref="T:System.Security.SecurityException" /> au moment de l'exécution si les conditions de sécurité ne sont pas réunies.</summary>
    </member>
    <member name="M:System.Security.IPermission.Intersect(System.Security.IPermission)">
      <summary>Crée et retourne une autorisation qui constitue l’intersection entre l’autorisation actuelle et l’autorisation spécifiée.</summary>
      <param name="target">Autorisation à croiser avec l’autorisation actuelle. Elle doit être du même type que l’autorisation actuelle.</param>
      <returns>Nouvelle autorisation qui représente l’intersection entre l’autorisation actuelle et l’autorisation spécifiée. Cette nouvelle autorisation est <see langword="null" /> si l’intersection est vide.</returns>
      <exception cref="T:System.ArgumentException">Le paramètre <paramref name="target" /> n'est pas <see langword="null" /> et n'est pas une instance de la même classe que l'autorisation en cours.</exception>
    </member>
    <member name="M:System.Security.IPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Détermine si l’autorisation actuelle est un sous-ensemble de l’autorisation spécifiée.</summary>
      <param name="target">Autorisation qui doit être testée pour la relation de sous-ensemble. Cette autorisation doit être du même type que l’autorisation actuelle.</param>
      <returns>
        <see langword="true" /> si l’autorisation actuelle est un sous-ensemble de l’autorisation spécifiée ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">Le paramètre <paramref name="target" /> n’a pas la valeur <see langword="null" /> et n’est pas du même type que l’autorisation actuelle.</exception>
    </member>
    <member name="M:System.Security.IPermission.Union(System.Security.IPermission)">
      <summary>Crée une autorisation qui est l’union de l’autorisation actuelle et de l’autorisation spécifiée.</summary>
      <param name="target">Autorisation à combiner avec l’autorisation actuelle. Elle doit être du même type que l’autorisation actuelle.</param>
      <returns>Nouvelle autorisation qui représente l’union de l’autorisation actuelle et de l’autorisation spécifiée.</returns>
      <exception cref="T:System.ArgumentException">Le paramètre <paramref name="target" /> n’a pas la valeur <see langword="null" /> et n’est pas du même type que l’autorisation actuelle.</exception>
    </member>
    <member name="T:System.Security.ISecurityEncodable">
      <summary>Définit les méthodes qui convertissent l'état de l'objet d'autorisation vers et à partir d'une représentation XML de l'élément.</summary>
    </member>
    <member name="M:System.Security.ISecurityEncodable.FromXml(System.Security.SecurityElement)">
      <summary>Reconstruit un objet de sécurité avec un état spécifié à partir d’un encodage XML.</summary>
      <param name="e">Encodage XML à utiliser pour reconstruire l’objet de sécurité.</param>
    </member>
    <member name="M:System.Security.ISecurityEncodable.ToXml">
      <summary>Crée un codage XML de l’objet de sécurité et de son état actuel.</summary>
      <returns>Encodage XML de l’objet de sécurité, y compris les informations d’état éventuelles.</returns>
    </member>
    <member name="T:System.Security.IStackWalk">
      <summary>Gère le parcours de pile qui détermine si tous les appelants dans la pile des appels ont les autorisations nécessaires pour accéder à une ressource protégée.</summary>
    </member>
    <member name="M:System.Security.IStackWalk.Assert">
      <summary>Déclare que le code appelant peut accéder à la ressource identifiée par l’objet d’autorisation actuel, même si les appelants situés plus haut dans la pile n’ont pas reçu l’autorisation d’accéder à la ressource.</summary>
      <exception cref="T:System.Security.SecurityException">Le code appelant n’a pas <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" />.</exception>
    </member>
    <member name="M:System.Security.IStackWalk.Demand">
      <summary>Au moment de l'exécution, détermine si tous les appelants qui sont plus haut dans la pile des appels ont reçu l'autorisation spécifiée par l'objet d'autorisation en cours.</summary>
      <exception cref="T:System.Security.SecurityException">Un appelant qui est plus haut dans la pile des appels n'a pas reçu l'autorisation spécifiée par l'objet d'autorisation en cours.  

ou - 
Un appelant de la pile des appels a appelé <see cref="M:System.Security.IStackWalk.Deny" /> sur l'objet d'autorisation en cours.</exception>
    </member>
    <member name="M:System.Security.IStackWalk.Deny">
      <summary>Entraîne l'échec de chaque <see cref="M:System.Security.IStackWalk.Demand" /> pour l'objet en cours qui passe par le code appelant.</summary>
    </member>
    <member name="M:System.Security.IStackWalk.PermitOnly">
      <summary>Entraîne l'échec de chaque <see cref="M:System.Security.IStackWalk.Demand" /> pour tous les objets excepté celui en cours qui passe par le code appelant, même si des autorisations d'accès à d'autres ressources ont été attribuées au code qui plus haut dans la pile des appels.</summary>
    </member>
    <member name="T:System.Security.Permissions.CodeAccessSecurityAttribute">
      <summary>Spécifie la classe d'attributs de base pour la sécurité d'accès du code.</summary>
    </member>
    <member name="M:System.Security.Permissions.CodeAccessSecurityAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Security.Permissions.CodeAccessSecurityAttribute" /> avec le <see cref="T:System.Security.Permissions.SecurityAction" /> spécifié.</summary>
      <param name="action">Une des valeurs de l'objet <see cref="T:System.Security.Permissions.SecurityAction" />.</param>
    </member>
    <member name="T:System.Security.Permissions.PermissionState">
      <summary>Spécifie si une autorisation doit avoir un accès total ou nul aux ressources au moment de la création.</summary>
    </member>
    <member name="F:System.Security.Permissions.PermissionState.None">
      <summary>Aucun accès à la ressource protégée par l'autorisation.</summary>
    </member>
    <member name="F:System.Security.Permissions.PermissionState.Unrestricted">
      <summary>Accès complet à la ressource protégée par l'autorisation.</summary>
    </member>
    <member name="T:System.Security.Permissions.SecurityAction">
      <summary>Spécifie les actions de sécurité qui peuvent être effectuées à l’aide de la sécurité déclarative.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.Assert">
      <summary>Le code appelant peut accéder à la ressource identifiée par l’objet d’autorisation actuel, même si les appelants figurant plus haut dans la pile ne disposent pas de l’autorisation d’accéder à la ressource (consultez Utilisation de la méthode Assert).</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.Demand">
      <summary>Tous les appelants figurant plus haut dans la pile des appels doivent disposer de l’autorisation spécifiée par l’objet d’autorisation actuel.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.Deny">
      <summary>La possibilité d’accéder à la ressource spécifiée par l’objet d’autorisation actuel est refusée aux appelants, même s’ils disposent de l’autorisation d’y accéder (consultez Utilisation de la méthode Deny).</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.InheritanceDemand">
      <summary>La classe dérivée qui hérite de la classe ou qui substitue une méthode doit avoir reçu l'autorisation spécifiée.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.LinkDemand">
      <summary>L’appelant immédiat doit avoir reçu l’autorisation spécifiée. À ne pas utiliser dans .NET Framework 4. Pour un niveau de confiance totale, utilisez plutôt <see cref="T:System.Security.SecurityCriticalAttribute" /> ; pour un niveau de confiance partielle, utilisez <see cref="F:System.Security.Permissions.SecurityAction.Demand" />.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.PermitOnly">
      <summary>Seules les ressources spécifiées par l’objet d’autorisation sont accessibles, même si le code a reçu l’autorisation d’accéder à d’autres ressources.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.RequestMinimum">
      <summary>Requête des autorisations minimales pour que le code s’exécute. Cette action ne peut être utilisée que dans la portée de l’assembly.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.RequestOptional">
      <summary>Requête d’autorisations supplémentaires et facultatives (non requises pour l’exécution). Cette requête refuse implicitement toutes les autres autorisations qui ne sont pas spécifiquement demandées. Cette action ne peut être utilisée que dans la portée de l’assembly.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.RequestRefuse">
      <summary>Requête pour que les autorisations qui peuvent être utilisées abusivement ne soient pas accordées au code appelant. Cette action ne peut être utilisée que dans la portée de l’assembly.</summary>
    </member>
    <member name="T:System.Security.Permissions.SecurityAttribute">
      <summary>Spécifie la classe d'attributs de base pour la sécurité déclarative dont <see cref="T:System.Security.Permissions.CodeAccessSecurityAttribute" /> est dérivé.</summary>
    </member>
    <member name="M:System.Security.Permissions.SecurityAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Security.Permissions.SecurityAttribute" /> avec le <see cref="T:System.Security.Permissions.SecurityAction" /> spécifié.</summary>
      <param name="action">Une des valeurs de <see cref="T:System.Security.Permissions.SecurityAction" />.</param>
    </member>
    <member name="P:System.Security.Permissions.SecurityAttribute.Action">
      <summary>Obtient ou définit une action de sécurité.</summary>
      <returns>Une des valeurs de <see cref="T:System.Security.Permissions.SecurityAction" />.</returns>
    </member>
    <member name="M:System.Security.Permissions.SecurityAttribute.CreatePermission">
      <summary>En cas de substitution dans une classe dérivée, crée un objet d’autorisation qui peut ensuite être sérialisé au format binaire et stocké de manière permanente avec <see cref="T:System.Security.Permissions.SecurityAction" /> dans les métadonnées d’un assembly.</summary>
      <returns>Objet d’autorisation sérialisable.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityAttribute.Unrestricted">
      <summary>Obtient ou définit une valeur indiquant si l'autorisation complète (sans restriction) d'accès à la ressource protégée par l'attribut est déclarée.</summary>
      <returns>
        <see langword="true" /> si l'autorisation complète à la ressource protégée est déclarée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Security.Permissions.SecurityPermissionAttribute">
      <summary>Permet d’appliquer les actions de sécurité de <see cref="T:System.Security.Permissions.SecurityPermission" /> au code à l’aide de la sécurité déclarative. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.Security.Permissions.SecurityPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Security.Permissions.SecurityPermissionAttribute" /> avec le <see cref="T:System.Security.Permissions.SecurityAction" /> spécifié.</summary>
      <param name="action">Une des valeurs de <see cref="T:System.Security.Permissions.SecurityAction" />.</param>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.Assertion">
      <summary>Obtient ou définit une valeur qui indique si l’autorisation d’affirmer que tous les appelants de ce code ont l’autorisation nécessaire pour l’opération est déclarée.</summary>
      <returns>
        <see langword="true" /> si l’autorisation d’assertion est déclarée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.BindingRedirects">
      <summary>Obtient ou définit une valeur qui indique si le code est autorisé à effectuer une redirection de liaison dans le fichier de configuration d’application.</summary>
      <returns>
        <see langword="true" /> si le code peut effectuer des redirections de liaison ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlAppDomain">
      <summary>Obtient ou définit une valeur qui indique si l’autorisation de manipuler le <see cref="T:System.AppDomain" /> est déclarée.</summary>
      <returns>
        <see langword="true" /> si l’autorisation de manipuler le <see cref="T:System.AppDomain" /> est déclarée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlDomainPolicy">
      <summary>Obtient ou définit une valeur indiquant si l’autorisation de modifier et de manipuler la stratégie de sécurité de domaine est déclarée.</summary>
      <returns>
        <see langword="true" /> si l’autorisation de modification ou de manipulation de la stratégie de sécurité d’un domaine d’application est déclarée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlEvidence">
      <summary>Obtient ou définit une valeur indiquant si l’autorisation de modifier et de manipuler les preuves est déclarée.</summary>
      <returns>
        <see langword="true" /> si la possibilité de modifier et de manipuler les preuves est déclarée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlPolicy">
      <summary>Obtient ou définit une valeur indiquant si l'autorisation de voir et de manipuler une stratégie de sécurité est déclarée.</summary>
      <returns>
        <see langword="true" /> si l'autorisation de manipuler une stratégie de sécurité est déclarée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlPrincipal">
      <summary>Obtient ou définit une valeur qui indique si l’autorisation de manipuler le principal actuel est déclarée.</summary>
      <returns>
        <see langword="true" /> si l’autorisation de manipuler le principal actuel est déclarée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlThread">
      <summary>Obtient ou définit une valeur qui indique si l’autorisation de manipuler les threads est déclarée.</summary>
      <returns>
        <see langword="true" /> si l’autorisation de manipuler les threads est déclarée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Permissions.SecurityPermissionAttribute.CreatePermission">
      <summary>Crée et retourne un nouveau <see cref="T:System.Security.Permissions.SecurityPermission" />.</summary>
      <returns>
        <see cref="T:System.Security.Permissions.SecurityPermission" /> qui correspond à cet attribut.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.Execution">
      <summary>Obtient ou définit une valeur indiquant si l'autorisation d'exécution du code est déclarée.</summary>
      <returns>
        <see langword="true" /> si l'autorisation d'exécution du code est déclarée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.Flags">
      <summary>Obtient ou définit tous les indicateurs d'autorisation comprenant les autorisations <see cref="T:System.Security.Permissions.SecurityPermission" />.</summary>
      <returns>Une ou plusieurs des valeurs <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /> combinées à l’aide d’une opération OR au niveau du bit.</returns>
      <exception cref="T:System.ArgumentException">Une tentative d'affecter une valeur non valide à cette propriété est effectuée. Pour connaître les valeurs valides, consultez <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /> .</exception>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.Infrastructure">
      <summary>Obtient ou définit une valeur indiquant si le code peut s'intégrer à l'infrastructure du Common Language Runtime, tel qu'ajouter des récepteurs Remoting Context, Envoy et Dynamic.</summary>
      <returns>
        <see langword="true" /> si du code peut s'intégrer à l'infrastructure du Common Language Runtime ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.RemotingConfiguration">
      <summary>Obtient ou définit une valeur indiquant si du code peut configurer des canaux et des types de communication à distance.</summary>
      <returns>
        <see langword="true" /> si du code peut configurer des canaux et des types de communication à distance ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.SerializationFormatter">
      <summary>Obtient ou définit une valeur indiquant si du code peut utiliser un formateur de sérialisation pour sérialiser ou désérialiser un objet.</summary>
      <returns>
        <see langword="true" /> si du code peut utiliser un formateur de sérialisation pour sérialiser ou désérialiser un objet ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.SkipVerification">
      <summary>Obtient ou définit une valeur indiquant si l'autorisation d'ignorer la vérification du code est déclarée.</summary>
      <returns>
        <see langword="true" /> si l'autorisation d'ignorer la vérification du code est déclarée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode">
      <summary>Obtient ou définit une valeur indiquant si l'autorisation d'appel du code non managé est déclarée.</summary>
      <returns>
        <see langword="true" /> si l'autorisation d'appel du code non managé est déclarée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Security.Permissions.SecurityPermissionFlag">
      <summary>Spécifie des indicateurs d'accès pour l'objet d'autorisation de sécurité.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.AllFlags">
      <summary>État sans restriction de l'autorisation.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.Assertion">
      <summary>Possibilité de déclarer que tous les appelants de ce code ont l'autorisation requise pour l'opération.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.BindingRedirects">
      <summary>Autorisation d'effectuer une redirection de liaison explicite dans le fichier de configuration de l'application. Elle inclut la redirection des assemblys du .NET Framework qui ont été unifiés ainsi que d'autres assemblys ne faisant  pas partie du .NET Framework.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlAppDomain">
      <summary>Possibilité de créer et manipuler un <see cref="T:System.AppDomain" />.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlDomainPolicy">
      <summary>Possibilité de spécifier une stratégie de domaine.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence">
      <summary>Possibilité de fournir une preuve, notamment de modifier la preuve fournie par le Common Language Runtime.
Il s’agit d’une autorisation puissante qui ne peut être octroyée qu’à un code hautement fiable.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy">
      <summary>Possibilité d'afficher et de modifier la stratégie.
Il s’agit d’une autorisation puissante qui ne peut être octroyée qu’à un code hautement fiable.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal">
      <summary>Possibilité de manipuler l'objet Principal</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread">
      <summary>Possibilité d'utiliser certaines opérations avancées sur les threads.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.Execution">
      <summary>Autorisation d'exécution du code. Sans cette autorisation, le code managé ne peut pas s'exécuter.
Cet indicateur n’a aucun effet lorsqu’il est utilisé dynamiquement avec les modificateurs de pile comme <see cref="M:System.Security.CodeAccessPermission.Deny" />, <see cref="M:System.Security.CodeAccessPermission.Assert" />, et <see cref="M:System.Security.CodeAccessPermission.PermitOnly" />.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.Infrastructure">
      <summary>Autorisation d'assembler du code dans l'infrastructure du Common Language Runtime, par exemple en ajoutant Remoting Context Sinks, Envoy Sinks et Dynamic Sinks.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.NoFlags">
      <summary>Aucun accès de sécurité.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration">
      <summary>Autorisation de configurer des canaux et des types de communication à distance.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter">
      <summary>Possibilité de fournir des services de sérialisation. Utilisée par les formateurs de sérialisation.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.SkipVerification">
      <summary>Possibilité d'omettre la vérification du code dans cet assembly. Le code qui n'est pas vérifiable peut être exécuté si cette autorisation est accordée.
Il s’agit d’une autorisation puissante qui ne peut être octroyée qu’à un code hautement fiable.
Cet indicateur n’a aucun effet lorsqu’il est utilisé dynamiquement avec les modificateurs de pile comme <see cref="M:System.Security.CodeAccessPermission.Deny" />, <see cref="M:System.Security.CodeAccessPermission.Assert" />, et <see cref="M:System.Security.CodeAccessPermission.PermitOnly" />.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode">
      <summary>Possibilité d'appeler du code non managé.
 Étant donné que le code non managé permet potentiellement d’ignorer d’autres autorisations, il s’agit d’une autorisation dangereuse qui ne doit être octroyée qu’au code hautement fiable. Il est utilisé pour les applications telles que l’appel de code natif à l’aide de PInvoke ou à l’aide de COM interop.</summary>
    </member>
    <member name="T:System.Security.PermissionSet">
      <summary>Représente une collection qui peut contenir de nombreux types d’autorisations différents.</summary>
    </member>
    <member name="M:System.Security.PermissionSet.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Security.PermissionSet" /> avec le <see cref="T:System.Security.Permissions.PermissionState" /> spécifié.</summary>
      <param name="state">Une des valeurs d’énumération qui spécifie l’accès du jeu d’autorisations aux ressources.</param>
      <exception cref="T:System.ArgumentException">Le paramètre <paramref name="state" /> n’est pas une valeur <see cref="T:System.Security.Permissions.PermissionState" /> valide.</exception>
    </member>
    <member name="M:System.Security.PermissionSet.#ctor(System.Security.PermissionSet)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Security.PermissionSet" /> avec des valeurs initiales provenant du paramètre <paramref name="permSet" />.</summary>
      <param name="permSet">Jeu duquel récupérer la valeur de la nouvelle classe <see cref="T:System.Security.PermissionSet" />, ou <see langword="null" /> pour créer une classe <see cref="T:System.Security.PermissionSet" /> vide.</param>
    </member>
    <member name="M:System.Security.PermissionSet.AddPermission(System.Security.IPermission)">
      <summary>Ajoute une autorisation spécifiée à l’élément <see cref="T:System.Security.PermissionSet" />.</summary>
      <param name="perm">Autorisation à ajouter.</param>
      <returns>Union de l’autorisation ajoutée et de toute autorisation du même type qui existe déjà dans l’élément <see cref="T:System.Security.PermissionSet" />.</returns>
      <exception cref="T:System.InvalidOperationException">La méthode est appelée depuis un <see cref="T:System.Security.ReadOnlyPermissionSet" />.</exception>
    </member>
    <member name="M:System.Security.PermissionSet.AddPermissionImpl(System.Security.IPermission)">
      <summary>Ajoute une autorisation spécifiée à l’élément <see cref="T:System.Security.PermissionSet" />.</summary>
      <param name="perm">Autorisation à ajouter.</param>
      <returns>Union de l’autorisation ajoutée et de toute autorisation du même type qui existe déjà dans l’élément <see cref="T:System.Security.PermissionSet" />, ou <see langword="null" /> si <paramref name="perm" /> est <see langword="null" />.</returns>
      <exception cref="T:System.InvalidOperationException">La méthode est appelée depuis un <see cref="T:System.Security.ReadOnlyPermissionSet" />.</exception>
    </member>
    <member name="M:System.Security.PermissionSet.Assert">
      <summary>Déclare que le code appelant peut accéder à la ressource protégée par une demande d’autorisation via le code qui appelle cette méthode, même si les appelants situés plus haut dans la pile n’ont pas reçu l’autorisation d’accéder à la ressource. L’utilisation de <see cref="M:System.Security.PermissionSet.Assert" /> permet de créer des failles de sécurité.</summary>
      <exception cref="T:System.Security.SecurityException">L’instance <see cref="T:System.Security.PermissionSet" /> déclarée n’a pas été octroyée au code d’assertion.  
ou 
Il existe déjà un <see cref="M:System.Security.PermissionSet.Assert" /> actif pour l’image actuelle.</exception>
    </member>
    <member name="M:System.Security.PermissionSet.ContainsNonCodeAccessPermissions">
      <summary>Obtient une valeur indiquant si <see cref="T:System.Security.PermissionSet" /> contient des autorisations qui ne sont pas dérivées de <see cref="T:System.Security.CodeAccessPermission" />.</summary>
      <returns>
        <see langword="true" /> si <see cref="T:System.Security.PermissionSet" /> contient des autorisations qui ne sont pas dérivées de <see cref="T:System.Security.CodeAccessPermission" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.ConvertPermissionSet(System.String,System.Byte[],System.String)">
      <summary>Convertit un objet <see cref="T:System.Security.PermissionSet" /> encodé d’un format d’encodage XML vers un autre.</summary>
      <param name="inFormat">Chaîne représentant un des formats d’encodage suivants : ASCII, Unicode ou binaire. Les valeurs possibles sont « XMLASCII » ou « XML », « XMLUNICODE » et « BINARY ».</param>
      <param name="inData">Jeu d’autorisations encodé en XML.</param>
      <param name="outFormat">Chaîne représentant un des formats d’encodage suivants : ASCII, Unicode ou binaire. Les valeurs possibles sont « XMLASCII » ou « XML », « XMLUNICODE » et « BINARY ».</param>
      <returns>Jeu d’autorisations chiffré selon le format de sortie spécifié.</returns>
      <exception cref="T:System.NotImplementedException">Dans tous les cas.</exception>
    </member>
    <member name="M:System.Security.PermissionSet.Copy">
      <summary>Crée une copie de l'objet <see cref="T:System.Security.PermissionSet" />.</summary>
      <returns>Copie de <see cref="T:System.Security.PermissionSet" />.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.CopyTo(System.Array,System.Int32)">
      <summary>Copie les objets d’autorisation du jeu à l’emplacement indiqué dans un <see cref="T:System.Array" />.</summary>
      <param name="array">Tableau destinataire de la copie.</param>
      <param name="index">Position dans le tableau à laquelle doit commencer la copie (base zéro).</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Le paramètre <paramref name="array" /> possède plusieurs dimensions.</exception>
      <exception cref="T:System.IndexOutOfRangeException">Le paramètre <paramref name="index" /> est en dehors de la plage du paramètre <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Security.PermissionSet.Count">
      <summary>Obtient le nombre d’objets d’autorisation contenus dans le jeu d’autorisations.</summary>
      <returns>Nombre d’objets d’autorisation contenus dans le <see cref="T:System.Security.PermissionSet" />.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.Demand">
      <summary>Force une <see cref="T:System.Security.SecurityException" /> au moment de l’exécution si les premiers appelants de la pile des appels n’ont pas reçu les autorisations spécifiées par l’instance actuelle.</summary>
      <exception cref="T:System.Security.SecurityException">Un appelant de la chaîne d’appel ne dispose pas de l’autorisation requise.</exception>
    </member>
    <member name="M:System.Security.PermissionSet.Deny">
      <summary>Entraîne l’échec de tout <see cref="M:System.Security.PermissionSet.Demand" /> qui passe par le code appelant pour une autorisation qui possède une intersection avec une autorisation d’un type contenu dans le <see cref="T:System.Security.PermissionSet" /> actuel.</summary>
      <exception cref="T:System.Security.SecurityException">Un appel précédent à <see cref="M:System.Security.PermissionSet.Deny" /> a déjà limité les autorisations pour le frame de pile actuel.</exception>
    </member>
    <member name="M:System.Security.PermissionSet.Equals(System.Object)">
      <summary>Détermine si l’objet <see cref="T:System.Security.PermissionSet" /> ou <see cref="T:System.Security.NamedPermissionSet" /> spécifié est égal au <see cref="T:System.Security.PermissionSet" /> actuel.</summary>
      <param name="o">Objet à comparer au <see cref="T:System.Security.PermissionSet" /> actif.</param>
      <returns>
        <see langword="true" /> si l'objet spécifié est égal à l'objet <see cref="T:System.Security.PermissionSet" /> actuel ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.FromXml(System.Security.SecurityElement)">
      <summary>Reconstruit un objet de sécurité avec un état spécifié à partir d’un encodage XML.</summary>
      <param name="et">Encodage XML à utiliser pour reconstruire l’objet de sécurité.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="et" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Le paramètre <paramref name="et" /> n’est pas un élément d’autorisation valide.  

ou - 
Le numéro de version du paramètre <paramref name="et" /> n’est pas pris en charge.</exception>
    </member>
    <member name="M:System.Security.PermissionSet.GetEnumerator">
      <summary>Retourne un énumérateur pour les autorisations de l’ensemble.</summary>
      <returns>Objet énumérateur pour les autorisations de l’ensemble.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.GetEnumeratorImpl">
      <summary>Retourne un énumérateur pour les autorisations de l’ensemble.</summary>
      <returns>Objet énumérateur pour les autorisations de l’ensemble.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.GetHashCode">
      <summary>Obtient un code de hachage pour l’objet <see cref="T:System.Security.PermissionSet" /> qui peut être utilisé dans des structures de données et des algorithmes de hachage, comme une table de hachage.</summary>
      <returns>Code de hachage pour l’objet <see cref="T:System.Security.PermissionSet" /> actuel.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.GetPermission(System.Type)">
      <summary>Obtient un objet d’autorisation du type spécifié, s’il existe dans le jeu.</summary>
      <param name="permClass">Type de l’objet d’autorisation souhaité.</param>
      <returns>Copie de l’objet d’autorisation du type spécifié par le paramètre <paramref name="permClass" /> contenu dans le <see cref="T:System.Security.PermissionSet" />, ou <see langword="null" /> s’il n’en n’existe aucune.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.GetPermissionImpl(System.Type)">
      <summary>Obtient un objet d’autorisation du type spécifié, s’il existe dans le jeu.</summary>
      <param name="permClass">Type de l’objet d’autorisation.</param>
      <returns>Une copie de l’objet d’autorisation, du type spécifié par le paramètre <paramref name="permClass" />, contenu dans le <see cref="T:System.Security.PermissionSet" />, ou <see langword="null" /> s’il n’en n’existe aucun.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.Intersect(System.Security.PermissionSet)">
      <summary>Crée et retourne un un jeu d’autorisations qui est l’intersection entre le <see cref="T:System.Security.PermissionSet" /> actuel et le <see cref="T:System.Security.PermissionSet" /> spécifié.</summary>
      <param name="other">Jeu d’autorisations à croiser avec le <see cref="T:System.Security.PermissionSet" /> actuel.</param>
      <returns>Jeu d’autorisations qui représente l’intersection entre le <see cref="T:System.Security.PermissionSet" /> actuel et la cible spécifiée. Cet objet est <see langword="null" /> si l’intersection est vide.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.IsEmpty">
      <summary>Obtient une valeur indiquant si le <see cref="T:System.Security.PermissionSet" /> est vide.</summary>
      <returns>
        <see langword="true" /> si le <see cref="T:System.Security.PermissionSet" /> est vide ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.PermissionSet.IsReadOnly">
      <summary>Obtient une valeur indiquant si la collection est en lecture seule.</summary>
      <returns>Toujours <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.IsSubsetOf(System.Security.PermissionSet)">
      <summary>Détermine si le <see cref="T:System.Security.PermissionSet" /> en cours est un sous-ensemble du <see cref="T:System.Security.PermissionSet" /> spécifié.</summary>
      <param name="target">Jeu d’autorisations à tester pour la relation de sous-ensemble. Ce doit être un <see cref="T:System.Security.PermissionSet" /> ou un <see cref="T:System.Security.NamedPermissionSet" />.</param>
      <returns>
        <see langword="true" /> si le <see cref="T:System.Security.PermissionSet" /> actuel est une partie du paramètre <paramref name="target" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.PermissionSet.IsSynchronized">
      <summary>Obtient une valeur indiquant si la collection est garantie thread-safe.</summary>
      <returns>Toujours <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.IsUnrestricted">
      <summary>Détermine si <see cref="T:System.Security.PermissionSet" /> a la valeur <see langword="Unrestricted" />.</summary>
      <returns>
        <see langword="true" /> si <see cref="T:System.Security.PermissionSet" /> a la valeur <see langword="Unrestricted" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.PermitOnly">
      <summary>Provoque l’échec d’un <see cref="M:System.Security.PermissionSet.Demand" /> qui passe par le code appelant pour tout <see cref="T:System.Security.PermissionSet" /> qui n’est pas une partie du <see cref="T:System.Security.PermissionSet" /> actif.</summary>
    </member>
    <member name="M:System.Security.PermissionSet.RemovePermission(System.Type)">
      <summary>Supprime du jeu une autorisation d’un certain type.</summary>
      <param name="permClass">Type d’autorisation à supprimer.</param>
      <returns>Autorisation supprimée du jeu.</returns>
      <exception cref="T:System.InvalidOperationException">La méthode est appelée depuis un <see cref="T:System.Security.ReadOnlyPermissionSet" />.</exception>
    </member>
    <member name="M:System.Security.PermissionSet.RemovePermissionImpl(System.Type)">
      <summary>Supprime du jeu une autorisation d’un certain type.</summary>
      <param name="permClass">Type de l’autorisation à supprimer.</param>
      <returns>Autorisation supprimée du jeu.</returns>
      <exception cref="T:System.InvalidOperationException">La méthode est appelée depuis un <see cref="T:System.Security.ReadOnlyPermissionSet" />.</exception>
    </member>
    <member name="M:System.Security.PermissionSet.RevertAssert">
      <summary>Entraîne la suppression définitive de tout <see cref="M:System.Security.CodeAccessPermission.Assert" /> antérieur pour le frame actuel.</summary>
      <exception cref="T:System.InvalidOperationException">Il n’existe pas d’<see cref="M:System.Security.CodeAccessPermission.Assert" /> antérieur pour le frame actuel.</exception>
    </member>
    <member name="M:System.Security.PermissionSet.SetPermission(System.Security.IPermission)">
      <summary>Définit une autorisation sur <see cref="T:System.Security.PermissionSet" />, en remplaçant toute autorisation existante du même type.</summary>
      <param name="perm">Autorisation à définir.</param>
      <returns>Autorisation définie.</returns>
      <exception cref="T:System.InvalidOperationException">La méthode est appelée depuis un <see cref="T:System.Security.ReadOnlyPermissionSet" />.</exception>
    </member>
    <member name="M:System.Security.PermissionSet.SetPermissionImpl(System.Security.IPermission)">
      <summary>Définit une autorisation sur <see cref="T:System.Security.PermissionSet" />, en remplaçant toute autorisation existante du même type.</summary>
      <param name="perm">Autorisation à définir.</param>
      <returns>Autorisation définie.</returns>
      <exception cref="T:System.InvalidOperationException">La méthode est appelée depuis un <see cref="T:System.Security.ReadOnlyPermissionSet" />.</exception>
    </member>
    <member name="P:System.Security.PermissionSet.SyncRoot">
      <summary>Obtient l’objet racine de la collection actuelle.</summary>
      <returns>Objet racine de la collection actuelle.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>S'exécute une fois que le graphique d'objets est complètement désérialisé.</summary>
      <param name="sender">Objet qui a initié le rappel. La fonctionnalité pour ce paramètre n'est pas implémentée actuellement.</param>
    </member>
    <member name="M:System.Security.PermissionSet.ToString">
      <summary>Retourne une représentation sous forme de chaîne de <see cref="T:System.Security.PermissionSet" />.</summary>
      <returns>Représentation de <see cref="T:System.Security.PermissionSet" />.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.ToXml">
      <summary>Crée un codage XML de l’objet de sécurité et de son état actuel.</summary>
      <returns>Encodage XML de l’objet de sécurité, y compris les informations d’état éventuelles.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.Union(System.Security.PermissionSet)">
      <summary>Crée un <see cref="T:System.Security.PermissionSet" /> qui est l’union du <see cref="T:System.Security.PermissionSet" /> actuel et du <see cref="T:System.Security.PermissionSet" /> spécifié.</summary>
      <param name="other">Autorisation définie pour former l’union avec le <see cref="T:System.Security.PermissionSet" /> actuel.</param>
      <returns>Nouveau jeu d’autorisations qui représente l’union entre le <see cref="T:System.Security.PermissionSet" /> actuel et le <see cref="T:System.Security.PermissionSet" /> spécifié.</returns>
    </member>
    <member name="T:System.Security.SecurityElement">
      <summary>Représente le modèle d’objet XML pour l’encodage des objets de sécurité. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.Security.SecurityElement.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Security.SecurityElement" /> avec la balise spécifiée.</summary>
      <param name="tag">Nom de balise d'un élément XML.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="tag" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Le paramètre <paramref name="tag" /> n'est pas valide dans XML.</exception>
    </member>
    <member name="M:System.Security.SecurityElement.#ctor(System.String,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Security.SecurityElement" /> avec la balise et le texte spécifiés.</summary>
      <param name="tag">Nom de balise de l'élément XML.</param>
      <param name="text">Texte contenu dans l'élément.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="tag" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" /> ou <paramref name="text" /> ne sont pas des paramètres valides dans XML.</exception>
    </member>
    <member name="M:System.Security.SecurityElement.AddAttribute(System.String,System.String)">
      <summary>Ajoute un attribut nom/valeur à un élément XML.</summary>
      <param name="name">Nom de l'attribut.</param>
      <param name="value">Valeur de l'attribut.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="name" /> ou <paramref name="value" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> ou <paramref name="value" /> ne sont pas des paramètres valides dans XML.  
ou 
Un attribut portant le nom spécifié par le paramètre <paramref name="name" /> existe déjà.</exception>
    </member>
    <member name="M:System.Security.SecurityElement.AddChild(System.Security.SecurityElement)">
      <summary>Ajoute un élément enfant à l'élément XML.</summary>
      <param name="child">Élément enfant à ajouter.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="child" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.SecurityElement.Attribute(System.String)">
      <summary>Recherche un attribut par nom dans un élément XML.</summary>
      <param name="name">Nom de l'attribut à rechercher.</param>
      <returns>Valeur associée à l'attribut nommé, ou <see langword="null" /> s'il n'existe aucun attribut avec <paramref name="name" />.</returns>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="name" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="P:System.Security.SecurityElement.Attributes">
      <summary>Obtient ou définit les attributs d'un élément XML en tant que paires de nom/valeur.</summary>
      <returns>Objet <see cref="T:System.Collections.Hashtable" /> pour les valeurs d'attributs de l'élément XML.</returns>
      <exception cref="T:System.InvalidCastException">Le nom ou la valeur de l'objet <see cref="T:System.Collections.Hashtable" /> n'est pas valide.</exception>
      <exception cref="T:System.ArgumentException">Le nom n'est pas un nom d'attribut XML valide.</exception>
    </member>
    <member name="P:System.Security.SecurityElement.Children">
      <summary>Obtient ou définit le tableau des éléments enfants de l'élément XML.</summary>
      <returns>Les éléments enfants classés de l'élément XML en tant qu'éléments de sécurité.</returns>
      <exception cref="T:System.ArgumentException">Un enfant du nœud parent XML est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.SecurityElement.Copy">
      <summary>Crée et retourne une copie identique de l'objet <see cref="T:System.Security.SecurityElement" /> en cours.</summary>
      <returns>Copie de l'objet <see cref="T:System.Security.SecurityElement" /> actuel.</returns>
    </member>
    <member name="M:System.Security.SecurityElement.Equal(System.Security.SecurityElement)">
      <summary>Compare si deux objets éléments XML sont égaux.</summary>
      <param name="other">Objet élément XML auquel comparer l'objet élément XML en cours.</param>
      <returns>
        <see langword="true" /> si la balise, les noms et les valeurs d'attributs, les éléments enfants et les champs de texte de l'élément XML en cours sont identiques aux éléments correspondants dans le paramètre <paramref name="other" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.SecurityElement.Escape(System.String)">
      <summary>Remplace les caractères XML non valides dans une chaîne par leur équivalent XML valide.</summary>
      <param name="str">Chaîne dans laquelle ignorer les caractères non valides.</param>
      <returns>Chaîne d'entrée avec les caractères non valides remplacés.</returns>
    </member>
    <member name="M:System.Security.SecurityElement.FromString(System.String)">
      <summary>Crée un élément de sécurité à partir d’une chaîne codée en XML.</summary>
      <param name="xml">La chaîne codée en XML à partir de laquelle créer l’élément de sécurité.</param>
      <returns>Un élément <see cref="T:System.Security.SecurityElement" /> créé à partir de la chaîne XML.</returns>
      <exception cref="T:System.Security.XmlSyntaxException">
        <paramref name="xml" /> contient un ou plusieurs caractères de guillemet simple.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xml" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.SecurityElement.IsValidAttributeName(System.String)">
      <summary>Détermine si une chaîne est un nom d'attribut valide.</summary>
      <param name="name">Nom d'attribut dont la validité doit être vérifiée.</param>
      <returns>
        <see langword="true" /> si le paramètre <paramref name="name" /> est un nom d'attribut XML valide ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.SecurityElement.IsValidAttributeValue(System.String)">
      <summary>Détermine si une chaîne est une valeur d'attribut valide.</summary>
      <param name="value">Valeur d'attribut dont la validité doit être vérifiée.</param>
      <returns>
        <see langword="true" /> si le paramètre <paramref name="value" /> est une valeur d'attribut XML valide ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.SecurityElement.IsValidTag(System.String)">
      <summary>Détermine si une chaîne est une balise valide.</summary>
      <param name="tag">Balise dont la validité doit être vérifiée.</param>
      <returns>
        <see langword="true" /> si le paramètre <paramref name="tag" /> est une balise XML valide ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.SecurityElement.IsValidText(System.String)">
      <summary>Détermine si une chaîne correspond à du texte valide dans un élément XML.</summary>
      <param name="text">Texte dont la validité doit être vérifiée.</param>
      <returns>
        <see langword="true" /> si le paramètre <paramref name="text" /> est un élément texte XML valide ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.SecurityElement.SearchForChildByTag(System.String)">
      <summary>Recherche un enfant par son nom de balise.</summary>
      <param name="tag">Balise à rechercher dans les éléments enfants.</param>
      <returns>Premier élément enfant XML ayant la valeur de balise spécifiée, ou <see langword="null" /> s'il n'existe aucun élément enfant doté de la balise <paramref name="tag" />.</returns>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="tag" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.SecurityElement.SearchForTextOfTag(System.String)">
      <summary>Recherche un enfant par son nom de balise et retourne le texte qu'il contient.</summary>
      <param name="tag">Balise à rechercher dans les éléments enfants.</param>
      <returns>Texte contenu dans le premier élément enfant avec la valeur de balise spécifiée.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tag" /> est <see langword="null" />.</exception>
    </member>
    <member name="P:System.Security.SecurityElement.Tag">
      <summary>Obtient ou définit le nom de balise d'un élément XML.</summary>
      <returns>Nom de balise d'un élément XML.</returns>
      <exception cref="T:System.ArgumentNullException">La balise est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">La balise n'est pas valide dans XML.</exception>
    </member>
    <member name="P:System.Security.SecurityElement.Text">
      <summary>Obtient ou définit le texte d'un élément XML.</summary>
      <returns>Valeur du texte d'un élément XML.</returns>
      <exception cref="T:System.ArgumentException">Le texte n'est pas valide dans XML.</exception>
    </member>
    <member name="M:System.Security.SecurityElement.ToString">
      <summary>Produit une représentation sous forme de chaîne d'un élément XML et les attributs, éléments enfants et texte qui la composent.</summary>
      <returns>Élément XML et son contenu.</returns>
    </member>
    <member name="T:System.StringComparer">
      <summary>Représente une opération de comparaison de chaînes qui utilise des règles de tri spécifiques basées sur la casse et la culture ou des règles de comparaison ordinale.</summary>
    </member>
    <member name="M:System.StringComparer.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.StringComparer" />.</summary>
    </member>
    <member name="M:System.StringComparer.Compare(System.Object,System.Object)">
      <summary>En cas de substitution dans une classe dérivée, compare deux objets et retourne une indication de leur ordre de tri relatif.</summary>
      <param name="x">Objet à comparer à <paramref name="y" />.</param>
      <param name="y">Objet à comparer à <paramref name="x" />.</param>
      <returns>Entier signé qui indique les valeurs relatives de <paramref name="x" /> et <paramref name="y" />, comme indiqué dans le tableau suivant.  
  Value 
  Signification 
  Inférieure à zéro 
 <paramref name="x" /> précède <paramref name="y" /> dans l’ordre de tri.  

- ou - 
 <paramref name="x" /> a la valeur <see langword="null" /> et <paramref name="y" /> n'a pas la valeur <see langword="null" />.  

  Zéro 
 <paramref name="x" /> est égal à <paramref name="y" />.  

- ou - 
 <paramref name="x" /> et <paramref name="y" /> ont la valeur <see langword="null" />.  

  Supérieure à zéro 
 <paramref name="x" /> suit <paramref name="y" /> dans l'ordre de tri.  

- ou - 
 <paramref name="y" /> a la valeur <see langword="null" /> et <paramref name="x" /> n'a pas la valeur <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">Ni <paramref name="x" /> ni <paramref name="y" /> n'est un objet <see cref="T:System.String" /> et ni <paramref name="x" /> ni <paramref name="y" /> n'implémente l'interface <see cref="T:System.IComparable" />.</exception>
    </member>
    <member name="M:System.StringComparer.Compare(System.String,System.String)">
      <summary>En cas de substitution dans une classe dérivée, compare deux chaînes et retourne une indication de leur ordre de tri relatif.</summary>
      <param name="x">Chaîne à comparer à <paramref name="y" />.</param>
      <param name="y">Chaîne à comparer à <paramref name="x" />.</param>
      <returns>Entier signé qui indique les valeurs relatives de <paramref name="x" /> et <paramref name="y" />, comme indiqué dans le tableau suivant.  
  Value 
  Signification 
  Inférieure à zéro 
 <paramref name="x" /> précède <paramref name="y" /> dans l'ordre de tri.  

- ou - 
 <paramref name="x" /> a la valeur <see langword="null" /> et <paramref name="y" /> n'a pas la valeur <see langword="null" />.  

  Zéro 
 <paramref name="x" /> est égal à <paramref name="y" />.  

- ou - 
 <paramref name="x" /> et <paramref name="y" /> ont la valeur <see langword="null" />.  

  Supérieure à zéro 
 <paramref name="x" /> suit <paramref name="y" /> dans l'ordre de tri.  

- ou - 
 <paramref name="y" /> a la valeur <see langword="null" /> et <paramref name="x" /> n'a pas la valeur <see langword="null" />.</returns>
    </member>
    <member name="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)">
      <summary>Crée un objet <see cref="T:System.StringComparer" /> qui compare des chaînes d'après les règles d'une culture spécifiée.</summary>
      <param name="culture">Culture dont les règles linguistiques servent à effectuer une comparaison de chaînes.</param>
      <param name="ignoreCase">
        <see langword="true" /> pour spécifier que les opérations de comparaison ne doivent pas respecter la casse ; <see langword="false" /> pour spécifier que les opérations de comparaison doivent respecter la casse.</param>
      <returns>Un nouvel objet <see cref="T:System.StringComparer" /> qui effectue des comparaisons de chaînes d'après les règles de comparaison utilisées par le paramètre <paramref name="culture" /> et la règle de casse spécifiée par le paramètre <paramref name="ignoreCase" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
      <param name="culture" />
      <param name="options" />
    </member>
    <member name="P:System.StringComparer.CurrentCulture">
      <summary>Obtient un objet <see cref="T:System.StringComparer" /> qui exécute une comparaison de chaînes respectant la casse à l'aide des règles de comparaison de mots de la culture actuelle.</summary>
      <returns>Nouvel objet <see cref="T:System.StringComparer" />.</returns>
    </member>
    <member name="P:System.StringComparer.CurrentCultureIgnoreCase">
      <summary>Obtient un objet <see cref="T:System.StringComparer" /> qui effectue des comparaisons de chaînes ne respectant pas la casse à l'aide des règles de comparaison de mots de la culture actuelle.</summary>
      <returns>Nouvel objet pour la comparaison de chaînes.</returns>
    </member>
    <member name="M:System.StringComparer.Equals(System.Object,System.Object)">
      <summary>En cas de substitution dans une classe dérivée, indique si deux objets sont égaux.</summary>
      <param name="x">Objet à comparer à <paramref name="y" />.</param>
      <param name="y">Objet à comparer à <paramref name="x" />.</param>
      <returns>
        <see langword="true" /> si <paramref name="x" /> et <paramref name="y" /> font référence au même objet ou <paramref name="x" /> et <paramref name="y" /> sont le même type d’objet et que ces objets sont égaux ou <paramref name="x" /> et <paramref name="y" /> ont la valeur <see langword="null" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.StringComparer.Equals(System.String,System.String)">
      <summary>En cas de substitution dans une classe dérivée, indique si deux chaînes sont égales.</summary>
      <param name="x">Chaîne à comparer à <paramref name="y" />.</param>
      <param name="y">Chaîne à comparer à <paramref name="x" />.</param>
      <returns>
        <see langword="true" /> si <paramref name="x" /> et <paramref name="y" /> font référence au même objet ou <paramref name="x" /> et <paramref name="y" /> sont égaux ou <paramref name="x" /> et <paramref name="y" /> ont la valeur <see langword="null" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.StringComparer.FromComparison(System.StringComparison)">
      <param name="comparisonType" />
    </member>
    <member name="M:System.StringComparer.GetHashCode(System.Object)">
      <summary>En cas de substitution dans une classe dérivée, obtient le code de hachage pour l'objet spécifié.</summary>
      <param name="obj">Objet.</param>
      <returns>Code de hachage signé de 32 bits calculé à partir de la valeur du paramètre <paramref name="obj" />.</returns>
      <exception cref="T:System.ArgumentException">La mémoire disponible n'est pas suffisante pour allouer de la mémoire tampon nécessaire pour calculer le code de hachage.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.StringComparer.GetHashCode(System.String)">
      <summary>En cas de substitution dans une classe dérivée, obtient le code de hachage pour la chaîne spécifiée.</summary>
      <param name="obj">Chaîne.</param>
      <returns>Code de hachage signé de 32 bits calculé à partir de la valeur du paramètre <paramref name="obj" />.</returns>
      <exception cref="T:System.ArgumentException">La mémoire disponible n'est pas suffisante pour allouer de la mémoire tampon nécessaire pour calculer le code de hachage.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> est <see langword="null" />.</exception>
    </member>
    <member name="P:System.StringComparer.InvariantCulture">
      <summary>Obtient un objet <see cref="T:System.StringComparer" /> qui exécute une comparaison de chaînes respectant la casse à l'aide des règles de comparaison de mots de la culture indifférente.</summary>
      <returns>Nouvel objet <see cref="T:System.StringComparer" />.</returns>
    </member>
    <member name="P:System.StringComparer.InvariantCultureIgnoreCase">
      <summary>Obtient un objet <see cref="T:System.StringComparer" /> qui exécute une comparaison de chaînes ne respectant pas la casse à l'aide des règles de comparaison de mots de la culture indifférente.</summary>
      <returns>Nouvel objet <see cref="T:System.StringComparer" />.</returns>
    </member>
    <member name="P:System.StringComparer.Ordinal">
      <summary>Obtient un objet <see cref="T:System.StringComparer" /> qui effectue une comparaison de chaînes ordinale respectant la casse.</summary>
      <returns>Objet <see cref="T:System.StringComparer" />.</returns>
    </member>
    <member name="P:System.StringComparer.OrdinalIgnoreCase">
      <summary>Obtient un objet <see cref="T:System.StringComparer" /> qui effectue une comparaison de chaînes ordinale ne respectant pas la casse.</summary>
      <returns>Objet <see cref="T:System.StringComparer" />.</returns>
    </member>
    <member name="T:System.StringNormalizationExtensions">
      <summary>Fournit des méthodes d’extension pour utiliser la normalisation des chaînes.</summary>
    </member>
    <member name="M:System.StringNormalizationExtensions.IsNormalized(System.String)">
      <summary>Indique si la chaîne spécifiée figure dans un formulaire de normalisation Unicode C.</summary>
      <param name="value">Chaîne.</param>
      <returns>
        <see langword="true" /> si <paramref name="value" /> figure dans un formulaire de normalisation C ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> contient des caractères Unicode non valides.</exception>
    </member>
    <member name="M:System.StringNormalizationExtensions.IsNormalized(System.String,System.Text.NormalizationForm)">
      <summary>Indique si une chaîne figure dans un formulaire de normalisation Unicode spécifié.</summary>
      <param name="value">Chaîne.</param>
      <param name="normalizationForm">Formulaire de normalisation Unicode.</param>
      <returns>
        <see langword="true" /> si <paramref name="value" /> figure dans un formulaire de normalisation <paramref name="normalizationForm" /> ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> contient des caractères Unicode non valides.</exception>
    </member>
    <member name="M:System.StringNormalizationExtensions.Normalize(System.String)">
      <summary>Normalise une chaîne en un formulaire de normalisation C Unicode.</summary>
      <param name="value">Chaîne à normaliser.</param>
      <returns>Nouvelle chaîne dont la valeur textuelle est identique à <paramref name="value" />, mais dont la représentation binaire se trouve dans un formulaire de normalisation C Unicode.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> contient des caractères Unicode non valides.</exception>
    </member>
    <member name="M:System.StringNormalizationExtensions.Normalize(System.String,System.Text.NormalizationForm)">
      <summary>Normalise une chaîne au formulaire de normalisation Unicode spécifié.</summary>
      <param name="value">Chaîne à normaliser.</param>
      <param name="normalizationForm">Formulaire de normalisation Unicode.</param>
      <returns>Nouvelle chaîne dont la valeur textuelle est identique à <paramref name="value" />, mais dont la représentation binaire est dans un formulaire de normalisation <paramref name="normalizationForm" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> contient des caractères Unicode non valides.</exception>
    </member>
    <member name="T:System.UriBuilder">
      <summary>Fournit un constructeur personnalisé pour les URI (uniform resource identifier) et les modifie pour la classe <see cref="T:System.Uri" />.</summary>
    </member>
    <member name="M:System.UriBuilder.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.UriBuilder" />.</summary>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.UriBuilder" /> avec l'URI spécifié.</summary>
      <param name="uri">Chaîne d’URI.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.UriFormatException">Dans .NET pour les applications du Windows Store ou la Bibliothèque de classes portable, interceptez l’exception de la classe de base, <see cref="T:System.FormatException" />, à la place.  

          
          <paramref name="uri" /> est une chaîne de longueur nulle ou contient uniquement des espaces.  

ou - 
La routine d’analyse a détecté un schéma dans un formulaire non valide.  

ou - 
L’analyseur a détecté plus de deux barres obliques consécutives dans un URI qui n’utilise pas le schéma « file ».  


ou 
 <paramref name="uri" /> n'est pas un URI valide.</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.UriBuilder" /> avec le schéma et l'hôte spécifiés.</summary>
      <param name="schemeName">Protocole d'accès à Internet.</param>
      <param name="hostName">Nom de domaine de type DNS ou adresse IP.</param>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.UriBuilder" /> avec le schéma, l'hôte et le port spécifiés.</summary>
      <param name="scheme">Protocole d'accès à Internet.</param>
      <param name="host">Nom de domaine de type DNS ou adresse IP.</param>
      <param name="portNumber">Numéro de port IP pour le service.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="portNumber" /> est inférieur à -1 ou supérieur à 65 535.</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.UriBuilder" /> avec le schéma, l'hôte, le numéro de port et le chemin d'accès spécifiés.</summary>
      <param name="scheme">Protocole d'accès à Internet.</param>
      <param name="host">Nom de domaine de type DNS ou adresse IP.</param>
      <param name="port">Numéro de port IP pour le service.</param>
      <param name="pathValue">Chemin d'accès à la ressource Internet.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> est inférieur à -1 ou supérieur à 65 535.</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32,System.String,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.UriBuilder" /> avec le schéma, l'hôte, le numéro de port, le chemin d'accès et la chaîne de requête spécifiés.</summary>
      <param name="scheme">Protocole d'accès à Internet.</param>
      <param name="host">Nom de domaine de type DNS ou adresse IP.</param>
      <param name="port">Numéro de port IP pour le service.</param>
      <param name="path">Chemin d'accès à la ressource Internet.</param>
      <param name="extraValue">Chaîne de requête ou identificateur de fragment.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="extraValue" /> n'est ni <see langword="null" />, ni <see cref="F:System.String.Empty" />. Un identificateur de fragment valide ne commence pas par un symbole dièse (#), une chaîne de requête valide ne commence pas par un point d'interrogation (?).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> est inférieur à -1 ou supérieur à 65 535.</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.Uri)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.UriBuilder" /> avec l'instance <see cref="T:System.Uri" /> spécifiée.</summary>
      <param name="uri">Instance de la classe <see cref="T:System.Uri" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.UriBuilder.Equals(System.Object)">
      <summary>Compare l'égalité d'une instance <see cref="T:System.Uri" /> existante au contenu de <see cref="T:System.UriBuilder" />.</summary>
      <param name="rparam">Objet à comparer à l'instance actuelle.</param>
      <returns>
        <see langword="true" /> si <paramref name="rparam" /> représente le même <see cref="T:System.Uri" /> que le <see cref="T:System.Uri" /> construit par cette instance de <see cref="T:System.UriBuilder" /> ; sinon <see langword="false" />.</returns>
    </member>
    <member name="P:System.UriBuilder.Fragment">
      <summary>Obtient ou définit la partie fragment de l'identificateur URI.</summary>
      <returns>Partie fragment de l'identificateur URI. L'identificateur du fragment (« # ») est ajouté au début du fragment.</returns>
    </member>
    <member name="M:System.UriBuilder.GetHashCode">
      <summary>Retourne le code de hachage pour l'identificateur URI.</summary>
      <returns>Code de hachage généré pour l'identificateur URI.</returns>
    </member>
    <member name="P:System.UriBuilder.Host">
      <summary>Obtient ou définit le nom de l'hôte DNS (Domain Name System) ou l'adresse IP d'un serveur.</summary>
      <returns>Nom de l'hôte DNS ou adresse IP du serveur.</returns>
    </member>
    <member name="P:System.UriBuilder.Password">
      <summary>Obtient ou définit le mot de passe associé à l'utilisateur qui accède à l'URI.</summary>
      <returns>Mot de passe de l'utilisateur qui accède à l'URI.</returns>
    </member>
    <member name="P:System.UriBuilder.Path">
      <summary>Obtient ou définit le chemin d'accès à la ressource référencée par l'identificateur URI.</summary>
      <returns>Chemin d'accès à la ressource référencée par l'identificateur URI.</returns>
    </member>
    <member name="P:System.UriBuilder.Port">
      <summary>Obtient ou définit le numéro de port de l'identificateur URI.</summary>
      <returns>Numéro de port de l'identificateur URI.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Le port ne peut pas avoir de valeur inférieure à -1 ou supérieure à 65 535.</exception>
    </member>
    <member name="P:System.UriBuilder.Query">
      <summary>Obtient ou définit les informations de requête incluses dans l'identificateur URI.</summary>
      <returns>Informations de requête incluses dans l'identificateur URI.</returns>
    </member>
    <member name="P:System.UriBuilder.Scheme">
      <summary>Obtient ou définit le nom de schéma de l'identificateur URI.</summary>
      <returns>Schéma de l'identificateur URI.</returns>
      <exception cref="T:System.ArgumentException">Le schéma ne peut pas avoir pour valeur un nom de schéma non valide.</exception>
    </member>
    <member name="M:System.UriBuilder.ToString">
      <summary>Retourne la chaîne d’affichage pour l’instance de <see cref="T:System.UriBuilder" /> spécifiée.</summary>
      <returns>Chaîne qui contient la chaîne d’affichage sans séquence d’échappement de <see cref="T:System.UriBuilder" />.</returns>
      <exception cref="T:System.UriFormatException">Dans .NET pour les applications du Windows Store ou la Bibliothèque de classes portable, interceptez l’exception de la classe de base, <see cref="T:System.FormatException" />, à la place.  


            

 L’instance de <see cref="T:System.UriBuilder" /> possède un mot de passe incorrect.</exception>
    </member>
    <member name="P:System.UriBuilder.Uri">
      <summary>Obtient l’instance <see cref="T:System.Uri" /> créée par l’instance <see cref="T:System.UriBuilder" /> spécifiée.</summary>
      <returns>
        <see cref="T:System.Uri" /> contenant l’URI créée par le <see cref="T:System.UriBuilder" />.</returns>
      <exception cref="T:System.UriFormatException">Dans .NET pour les applications du Windows Store ou la Bibliothèque de classes portable, interceptez l’exception de la classe de base, <see cref="T:System.FormatException" />, à la place.  


            

 L’URI construite par les propriétés <see cref="T:System.UriBuilder" /> n’est pas valide.</exception>
    </member>
    <member name="P:System.UriBuilder.UserName">
      <summary>Nom d'utilisateur associé à l'utilisateur qui accède à l'URI.</summary>
      <returns>Nom de l'utilisateur qui accède à l'URI.</returns>
    </member>
  </members>
</doc>
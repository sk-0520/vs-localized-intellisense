<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Diagnostics.Contracts</name>
  </assembly>
  <members>
    <member name="T:System.Diagnostics.Contracts.Contract">
      <summary vsli:raw="Contains static methods for representing program contracts such as preconditions, postconditions, and object invariants.">Contient des méthodes statiques pour représenter des contrats de programme tels que conditions préalables, post-conditions et invariants objet.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean)">
      <summary vsli:raw="Checks for a condition; if the condition is &lt;see langword=&quot;false&quot; /&gt;, follows the escalation policy set for the analyzer.">Vérifie une condition ; si la condition est <see langword="false" />, suit la stratégie d'escalade définie pour l'analyseur.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">Expression conditionnelle à tester.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)">
      <summary vsli:raw="Checks for a condition; if the condition is &lt;see langword=&quot;false&quot; /&gt;, follows the escalation policy set by the analyzer and displays the specified message.">Vérifie une condition ; si la condition est <see langword="false" />, suit la stratégie d'escalade définie par l'analyseur et affiche le message spécifié.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">Expression conditionnelle à tester.</param>
      <param name="userMessage" vsli:raw="A message to display if the condition is not met.">Message à afficher si la condition n'est pas remplie.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean)">
      <summary vsli:raw="Instructs code analysis tools to assume that the specified condition is &lt;see langword=&quot;true&quot; /&gt;, even if it cannot be statically proven to always be &lt;see langword=&quot;true&quot; /&gt;.">Fait en sorte que les outils d'analyse du code supposent que la condition spécifiée est <see langword="true" />, même s'il ne peut pas être prouvé statiquement qu'elle est toujours <see langword="true" />.</summary>
      <param name="condition" vsli:raw="The conditional expression to assume &lt;see langword=&quot;true&quot; /&gt;.">Expression conditionnelle à supposer comme <see langword="true" />.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean,System.String)">
      <summary vsli:raw="Instructs code analysis tools to assume that a condition is &lt;see langword=&quot;true&quot; /&gt;, even if it cannot be statically proven to always be &lt;see langword=&quot;true&quot; /&gt;, and displays a message if the assumption fails.">Fait en sorte que les outils d'analyse du code supposent qu'une condition est <see langword="true" />, même s'il ne peut pas être prouvé statiquement qu'elle est toujours <see langword="true" />, et affiche un message si l'hypothèse échoue.</summary>
      <param name="condition" vsli:raw="The conditional expression to assume &lt;see langword=&quot;true&quot; /&gt;.">Expression conditionnelle à supposer comme <see langword="true" />.</param>
      <param name="userMessage" vsli:raw="The message to post if the assumption fails.">Message à envoyer si l'hypothèse échoue.</param>
    </member>
    <member name="E:System.Diagnostics.Contracts.Contract.ContractFailed">
      <summary vsli:raw="Occurs when a contract fails.">Se produit quand un contrat échoue.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.EndContractBlock">
      <summary vsli:raw="Marks the end of the contract section when a method's contracts contain only preconditions in the &lt;see langword=&quot;if&quot; /&gt;-&lt;see langword=&quot;then&quot; /&gt;-&lt;see langword=&quot;throw&quot; /&gt; form.">Marque la fin de la section de contrat quand les contrats d’une méthode contiennent uniquement des conditions préalables sous la forme <see langword="if" />-<see langword="then" />-<see langword="throw" />.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)">
      <summary vsli:raw="Specifies a postcondition contract for the enclosing method or property.">Spécifie un contrat de post-condition pour la méthode englobante ou la propriété.</summary>
      <param name="condition" vsli:raw="The conditional expression to test. The expression may include &lt;see cref=&quot;M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)&quot; /&gt;, &lt;see cref=&quot;M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)&quot; /&gt;, and &lt;see cref=&quot;M:System.Diagnostics.Contracts.Contract.Result``1&quot; /&gt; values.">Expression conditionnelle à tester. L'expression peut inclure des valeurs <see cref="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)" />, <see cref="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)" /> et <see cref="M:System.Diagnostics.Contracts.Contract.Result``1" />.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)">
      <summary vsli:raw="Specifies a postcondition contract for a provided exit condition and a message to display if the condition is &lt;see langword=&quot;false&quot; /&gt;.">Spécifie un contrat de post-condition pour une condition de sortie fournie et un message à afficher si la condition est <see langword="false" />.</summary>
      <param name="condition" vsli:raw="The conditional expression to test. The expression may include &lt;see cref=&quot;M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)&quot; /&gt; and &lt;see cref=&quot;M:System.Diagnostics.Contracts.Contract.Result``1&quot; /&gt; values.">Expression conditionnelle à tester. L'expression peut inclure des valeurs <see cref="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)" /> et <see cref="M:System.Diagnostics.Contracts.Contract.Result``1" />.</param>
      <param name="userMessage" vsli:raw="The message to display if the expression is not &lt;see langword=&quot;true&quot; /&gt;.">Message à afficher si l'expression n'est pas <see langword="true" />.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean)">
      <summary vsli:raw="Specifies a postcondition contract for the enclosing method or property, based on the provided exception and condition.">Spécifie un contrat de post-condition pour la méthode englobante ou la propriété en fonction de l'exception et de la condition fournies.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">Expression conditionnelle à tester.</param>
      <typeparam name="TException" vsli:raw="The type of exception that invokes the postcondition check.">Type d'exception qui appelle la vérification de post-condition.</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)">
      <summary vsli:raw="Specifies a postcondition contract and a message to display if the condition is &lt;see langword=&quot;false&quot; /&gt; for the enclosing method or property, based on the provided exception and condition.">Spécifie un contrat de post-condition et un message à afficher si la condition est <see langword="false" /> pour la méthode englobante ou la propriété, en fonction de l'exception et de la condition fournies.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">Expression conditionnelle à tester.</param>
      <param name="userMessage" vsli:raw="The message to display if the expression is &lt;see langword=&quot;false&quot; /&gt;.">Message à afficher si l'expression est <see langword="false" />.</param>
      <typeparam name="TException" vsli:raw="The type of exception that invokes the postcondition check.">Type d'exception qui appelle la vérification de post-condition.</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})">
      <summary vsli:raw="Determines whether a specified test is true for any integer within a range of integers.">Détermine si un test spécifié a la valeur True pour un entier figurant dans une plage d'entiers.</summary>
      <param name="fromInclusive" vsli:raw="The first integer to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">Premier entier à passer à <paramref name="predicate" />.</param>
      <param name="toExclusive" vsli:raw="One more than the last integer to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">Dernier entier à passer à <paramref name="predicate" /> plus un.</param>
      <param name="predicate" vsli:raw="The function to evaluate for any value of the integer in the specified range.">Fonction à évaluer pour une valeur de l'entier de la plage spécifiée.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;predicate&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt; for any integer starting from &lt;paramref name=&quot;fromInclusive&quot; /&gt; to &lt;paramref name=&quot;toExclusive&quot; /&gt; - 1.">
        <see langword="true" /> si <paramref name="predicate" /> retourne la valeur <see langword="true" /> pour tout entier à partir de <paramref name="fromInclusive" /> jusqu'à <paramref name="toExclusive" /> -1.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="predicate" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;toExclusive&quot; /&gt; is less than &lt;paramref name=&quot;fromInclusive&quot; /&gt;.">
        <paramref name="toExclusive" /> est inférieur à <paramref name="fromInclusive" />.</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
      <summary vsli:raw="Determines whether an element within a collection of elements exists within a function.">Détermine si un élément dans une collection d'éléments existe dans une fonction.</summary>
      <param name="collection" vsli:raw="The collection from which elements of type &lt;c&gt;T&lt;/c&gt; will be drawn to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">Collection à partir de laquelle des éléments de type <c>T</c> seront extraits afin d’être passés à <paramref name="predicate" />.</param>
      <param name="predicate" vsli:raw="The function to evaluate for an element in &lt;paramref name=&quot;collection&quot; /&gt;.">Fonction à évaluer pour un élément dans <paramref name="collection" />.</param>
      <typeparam name="T" vsli:raw="The type that is contained in &lt;paramref name=&quot;collection&quot; /&gt;.">Type contenu dans <paramref name="collection" />.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if and only if &lt;paramref name=&quot;predicate&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt; for any element of type &lt;paramref name=&quot;T&quot; /&gt; in &lt;paramref name=&quot;collection&quot; /&gt;.">
        <see langword="true" /> si et uniquement si <paramref name="predicate" /> retourne la valeur <see langword="true" /> pour tout élément de type <paramref name="T" /> dans <paramref name="collection" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> ou <paramref name="predicate" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})">
      <summary vsli:raw="Determines whether a particular condition is valid for all integers in a specified range.">Détermine si une condition particulière est valide pour tous les entiers d'une étendue spécifiée.</summary>
      <param name="fromInclusive" vsli:raw="The first integer to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">Premier entier à passer à <paramref name="predicate" />.</param>
      <param name="toExclusive" vsli:raw="One more than the last integer to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">Dernier entier à passer à <paramref name="predicate" /> plus un.</param>
      <param name="predicate" vsli:raw="The function to evaluate for the existence of the integers in the specified range.">Fonction à évaluer pour l'existence des entiers dans la plage spécifiée.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;predicate&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt; for all integers starting from &lt;paramref name=&quot;fromInclusive&quot; /&gt; to &lt;paramref name=&quot;toExclusive&quot; /&gt; - 1.">
        <see langword="true" /> si <paramref name="predicate" /> retourne la valeur <see langword="true" /> pour tous les entiers à partir de <paramref name="fromInclusive" /> jusqu'à <paramref name="toExclusive" /> -1.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="predicate" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;toExclusive&quot; /&gt; is less than &lt;paramref name=&quot;fromInclusive&quot; /&gt;.">
        <paramref name="toExclusive" /> est inférieur à <paramref name="fromInclusive" />.</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
      <summary vsli:raw="Determines whether all the elements in a collection exist within a function.">Détermine si tous les éléments dans une collection existent dans une fonction.</summary>
      <param name="collection" vsli:raw="The collection from which elements of type &lt;c&gt;T&lt;/c&gt; will be drawn to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">Collection à partir de laquelle des éléments de type <c>T</c> seront extraits afin d’être passés à <paramref name="predicate" />.</param>
      <param name="predicate" vsli:raw="The function to evaluate for the existence of all the elements in &lt;paramref name=&quot;collection&quot; /&gt;.">Fonction à évaluer pour l'existence de tous les éléments dans <paramref name="collection" />.</param>
      <typeparam name="T" vsli:raw="The type that is contained in &lt;paramref name=&quot;collection&quot; /&gt;.">Type contenu dans <paramref name="collection" />.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if and only if &lt;paramref name=&quot;predicate&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt; for all elements of type &lt;paramref name=&quot;T&quot; /&gt; in &lt;paramref name=&quot;collection&quot; /&gt;.">
        <see langword="true" /> si et uniquement si <paramref name="predicate" /> retourne la valeur <see langword="true" /> pour tous les éléments de type <paramref name="T" /> dans <paramref name="collection" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> ou <paramref name="predicate" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)">
      <summary vsli:raw="Specifies an invariant contract for the enclosing method or property.">Spécifie un contrat indifférent pour la méthode englobante ou la propriété.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">Expression conditionnelle à tester.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)">
      <summary vsli:raw="Specifies an invariant contract for the enclosing method or property, and displays a message if the condition for the contract fails.">Spécifie un contrat indifférent préalable pour la méthode englobante ou la propriété, et affiche un message si la condition pour le contrat échoue.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">Expression conditionnelle à tester.</param>
      <param name="userMessage" vsli:raw="The message to display if the condition is &lt;see langword=&quot;false&quot; /&gt;.">Message à afficher si la condition est <see langword="false" />.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)">
      <summary vsli:raw="Represents values as they were at the start of a method or property.">Représente les valeurs telles qu'elles étaient au démarrage d'une méthode ou d'une propriété.</summary>
      <param name="value" vsli:raw="The value to represent (field or parameter).">Valeur à représenter (champ ou paramètre).</param>
      <typeparam name="T" vsli:raw="The type of value.">Type de valeur.</typeparam>
      <returns vsli:raw="The value of the parameter or field at the start of a method or property.">Valeur du paramètre ou champ au démarrage d'une méthode ou propriété.</returns>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean)">
      <summary vsli:raw="Specifies a precondition contract for the enclosing method or property.">Spécifie un contrat de condition préalable pour la méthode englobante ou la propriété.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">Expression conditionnelle à tester.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)">
      <summary vsli:raw="Specifies a precondition contract for the enclosing method or property, and displays a message if the condition for the contract fails.">Spécifie un contrat de condition préalable pour la méthode englobante ou la propriété, et affiche un message si la condition pour le contrat échoue.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">Expression conditionnelle à tester.</param>
      <param name="userMessage" vsli:raw="The message to display if the condition is &lt;see langword=&quot;false&quot; /&gt;.">Message à afficher si la condition est <see langword="false" />.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)">
      <summary vsli:raw="Specifies a precondition contract for the enclosing method or property, and throws an exception if the condition for the contract fails.">Spécifie un contrat de condition préalable pour la méthode englobante ou la propriété, et lève une exception si la condition pour le contrat échoue.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">Expression conditionnelle à tester.</param>
      <typeparam name="TException" vsli:raw="The exception to throw if the condition is &lt;see langword=&quot;false&quot; /&gt;.">Exception à lever si la condition est <see langword="false" />.</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)">
      <summary vsli:raw="Specifies a precondition contract for the enclosing method or property, and throws an exception with the provided message if the condition for the contract fails.">Spécifie un contrat de condition préalable pour la méthode englobante ou la propriété, et lève une exception avec le message fourni si la condition pour le contrat échoue.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">Expression conditionnelle à tester.</param>
      <param name="userMessage" vsli:raw="The message to display if the condition is &lt;see langword=&quot;false&quot; /&gt;.">Message à afficher si la condition est <see langword="false" />.</param>
      <typeparam name="TException" vsli:raw="The exception to throw if the condition is &lt;see langword=&quot;false&quot; /&gt;.">Exception à lever si la condition est <see langword="false" />.</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Result``1">
      <summary vsli:raw="Represents the return value of a method or property.">Représente la valeur de retour d'une méthode ou propriété.</summary>
      <typeparam name="T" vsli:raw="Type of return value of the enclosing method or property.">Type de valeur de retour de la méthode englobante ou propriété.</typeparam>
      <returns vsli:raw="Return value of the enclosing method or property.">Valeur de retour de la méthode englobante ou propriété.</returns>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)">
      <summary vsli:raw="Represents the final (output) value of an &lt;see langword=&quot;out&quot; /&gt; parameter when returning from a method.">Représente la valeur finale (sortie) d'un paramètre <see langword="out" /> lors du retour d'une méthode.</summary>
      <param name="value" vsli:raw="The &lt;see langword=&quot;out&quot; /&gt; parameter.">Paramètre <see langword="out" />.</param>
      <typeparam name="T" vsli:raw="The type of the &lt;see langword=&quot;out&quot; /&gt; parameter.">Type du paramètre <see langword="out" />.</typeparam>
      <returns vsli:raw="The output value of the &lt;see langword=&quot;out&quot; /&gt; parameter.">Valeur de sortie du paramètre <see langword="out" />.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractAbbreviatorAttribute">
      <summary vsli:raw="Defines abbreviations that you can use in place of the full contract syntax.">Définit des abréviations que vous pouvez utiliser à la place de la syntaxe complète de contrat.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractAbbreviatorAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractAbbreviatorAttribute&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.Contracts.ContractAbbreviatorAttribute" />.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute">
      <summary vsli:raw="Enables the factoring of legacy &lt;see langword=&quot;if-then-throw&quot; /&gt; code into separate methods for reuse, and provides full control over thrown exceptions and arguments.">Active la factorisation du code <see langword="if-then-throw" /> hérité dans des méthodes distinctes pour la réutilisation, et fournit un contrôle total sur les exceptions et les arguments levés.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute" />.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractClassAttribute">
      <summary vsli:raw="Specifies that a separate type contains the code contracts for this type.">Spécifie qu'un type séparé contient les contrats de code pour ce type.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractClassAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractClassAttribute&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.Contracts.ContractClassAttribute" />.</summary>
      <param name="typeContainingContracts" vsli:raw="The type that contains the code contracts for this type.">Type qui contient les contrats de code pour ce type.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractClassAttribute.TypeContainingContracts">
      <summary vsli:raw="Gets the type that contains the code contracts for this type.">Obtient le type qui contient les contrats de code pour ce type.</summary>
      <returns vsli:raw="The type that contains the code contracts for this type.">Type qui contient les contrats de code pour ce type.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractClassForAttribute">
      <summary vsli:raw="Specifies that a class is a contract for a type.">Spécifie qu'une classe est un contrat pour un type.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractClassForAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractClassForAttribute&quot; /&gt; class, specifying the type the current class is a contract for.">Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.Contracts.ContractClassForAttribute" />, en spécifiant le type pour lequel la classe actuelle est un contrat.</summary>
      <param name="typeContractsAreFor" vsli:raw="The type the current class is a contract for.">Type pour lequel la classe actuelle est un contrat.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractClassForAttribute.TypeContractsAreFor">
      <summary vsli:raw="Gets the type that this code contract applies to.">Obtient le type auquel ce contrat de code s'applique.</summary>
      <returns vsli:raw="The type that this contract applies to.">Type auquel ce contrat s'applique.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractFailedEventArgs">
      <summary vsli:raw="Provides methods and data for the &lt;see cref=&quot;E:System.Diagnostics.Contracts.Contract.ContractFailed&quot; /&gt; event.">Fournit des méthodes et des données pour l'événement <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" />.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractFailedEventArgs.#ctor(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.Exception)">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.Diagnostics.Contracts.Contract.ContractFailed&quot; /&gt; event.">Fournit des données pour l'événement <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" />.</summary>
      <param name="failureKind" vsli:raw="One of the enumeration values that specifies the contract that failed.">Une des valeurs d'énumération qui spécifie le contrat ayant échoué.</param>
      <param name="message" vsli:raw="The message for the event.">Message pour l'événement.</param>
      <param name="condition" vsli:raw="The condition for the event.">Condition de l'événement.</param>
      <param name="originalException" vsli:raw="The exception that caused the event.">Exception ayant provoqué l'événement.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Condition">
      <summary vsli:raw="Gets the condition for the failure of the contract.">Obtient la condition de l'échec du contrat.</summary>
      <returns vsli:raw="The condition for the failure.">Condition de l'échec.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.FailureKind">
      <summary vsli:raw="Gets the type of contract that failed.">Obtient le type de contrat ayant échoué.</summary>
      <returns vsli:raw="One of the enumeration values that specifies the type of contract that failed.">Une des valeurs d'énumération qui spécifie le type de contrat ayant échoué.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Handled">
      <summary vsli:raw="Indicates whether the &lt;see cref=&quot;E:System.Diagnostics.Contracts.Contract.ContractFailed&quot; /&gt; event has been handled.">Indique si l'événement <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" /> a été géré.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the event has been handled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'événement a été géré ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Message">
      <summary vsli:raw="Gets the message that describes the &lt;see cref=&quot;E:System.Diagnostics.Contracts.Contract.ContractFailed&quot; /&gt; event.">Obtient le message qui décrit l'événement <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" />.</summary>
      <returns vsli:raw="The message that describes the event.">Message qui décrit l'événement.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.OriginalException">
      <summary vsli:raw="Gets the original exception that caused the &lt;see cref=&quot;E:System.Diagnostics.Contracts.Contract.ContractFailed&quot; /&gt; event.">Obtient l'exception d'origine ayant provoqué l'événement <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" />.</summary>
      <returns vsli:raw="The exception that caused the event.">Exception ayant provoqué l'événement.</returns>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractFailedEventArgs.SetHandled">
      <summary vsli:raw="Sets the &lt;see cref=&quot;P:System.Diagnostics.Contracts.ContractFailedEventArgs.Handled&quot; /&gt; property to &lt;see langword=&quot;true&quot; /&gt;.">Affecte la valeur <see cref="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Handled" /> à la propriété <see langword="true" />.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractFailedEventArgs.SetUnwind">
      <summary vsli:raw="Sets the &lt;see cref=&quot;P:System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind&quot; /&gt; property to &lt;see langword=&quot;true&quot; /&gt;.">Affecte la valeur <see cref="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind" /> à la propriété <see langword="true" />.</summary>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind">
      <summary vsli:raw="Indicates whether the code contract escalation policy should be applied.">Indique si la stratégie d'escalade de contrat de code doit être appliquée.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to apply the escalation policy; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour appliquer la stratégie d'escalade ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractFailureKind">
      <summary vsli:raw="Specifies the type of contract that failed.">Spécifie le type de contrat qui a échoué.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Assert">
      <summary vsli:raw="An &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.Assert&quot; /&gt; contract failed.">Un contrat <see cref="Overload:System.Diagnostics.Contracts.Contract.Assert" /> a échoué.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Assume">
      <summary vsli:raw="An &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.Assume&quot; /&gt; contract failed.">Un contrat <see cref="Overload:System.Diagnostics.Contracts.Contract.Assume" /> a échoué.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Invariant">
      <summary vsli:raw="An &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.Invariant&quot; /&gt; contract failed.">Un contrat <see cref="Overload:System.Diagnostics.Contracts.Contract.Invariant" /> a échoué.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Postcondition">
      <summary vsli:raw="An &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.Ensures&quot; /&gt; contract failed.">Un contrat <see cref="Overload:System.Diagnostics.Contracts.Contract.Ensures" /> a échoué.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.PostconditionOnException">
      <summary vsli:raw="An &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.EnsuresOnThrow&quot; /&gt; contract failed.">Un contrat <see cref="Overload:System.Diagnostics.Contracts.Contract.EnsuresOnThrow" /> a échoué.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Precondition">
      <summary vsli:raw="A &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.Requires&quot; /&gt; contract failed.">Un contrat <see cref="Overload:System.Diagnostics.Contracts.Contract.Requires" /> a échoué.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractInvariantMethodAttribute">
      <summary vsli:raw="Marks a method as being the invariant method for a class.">Marque une méthode comme étant la méthode indifférente pour une classe.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractInvariantMethodAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractInvariantMethodAttribute&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.Contracts.ContractInvariantMethodAttribute" />.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractOptionAttribute">
      <summary vsli:raw="Enables you to set contract and tool options at assembly, type, or method granularity.">Permet de définir un contrat et des options d'outil pour la granularité d'assembly, de type ou de méthode.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractOptionAttribute.#ctor(System.String,System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractOptionAttribute&quot; /&gt; class by using the provided category, setting, and enable/disable value.">Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.Contracts.ContractOptionAttribute" /> à l'aide de la catégorie, du paramètre et de la valeur activer/désactiver fournis.</summary>
      <param name="category" vsli:raw="The category for the option to be set.">Catégorie de l'option à définir.</param>
      <param name="setting" vsli:raw="The option setting.">Paramètre de l'option.</param>
      <param name="enabled" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to enable the option; &lt;see langword=&quot;false&quot; /&gt; to disable the option.">
        <see langword="true" /> pour activer l'option ; <see langword="false" /> pour désactiver l'option.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractOptionAttribute.#ctor(System.String,System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractOptionAttribute&quot; /&gt; class by using the provided category, setting, and value.">Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.Contracts.ContractOptionAttribute" /> à l'aide de la catégorie, du paramètre et de la valeur fournis.</summary>
      <param name="category" vsli:raw="The category of the option to be set.">Catégorie de l'option à définir.</param>
      <param name="setting" vsli:raw="The option setting.">Paramètre de l'option.</param>
      <param name="value" vsli:raw="The value for the setting.">Valeur pour le paramètre.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Category">
      <summary vsli:raw="Gets the category of the option.">Obtient la catégorie de l'option.</summary>
      <returns vsli:raw="The category of the option.">Catégorie de l'option.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Enabled">
      <summary vsli:raw="Determines if an option is enabled.">Détermine si une option est activée.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the option is enabled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'option est activée ; sinon <see langword="false" />.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Setting">
      <summary vsli:raw="Gets the setting for the option.">Obtient le paramètre pour l'option.</summary>
      <returns vsli:raw="The setting for the option.">Paramètre de l'option.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Value">
      <summary vsli:raw="Gets the value for the option.">Obtient la valeur pour l'option.</summary>
      <returns vsli:raw="The value for the option.">Valeur de l'option.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute">
      <summary vsli:raw="Specifies that a field can be used in method contracts when the field has less visibility than the method.">Spécifie qu'un champ peut être utilisé dans les contrats de méthode lorsque le champ a moins de visibilité que la méthode.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute" />.</summary>
      <param name="name" vsli:raw="The property name to apply to the field.">Nom de la propriété à appliquer au champ.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute.Name">
      <summary vsli:raw="Gets the property name to be applied to the field.">Obtient le nom de la propriété à appliquer au champ.</summary>
      <returns vsli:raw="The property name to be applied to the field.">Nom de la propriété à appliquer au champ.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute">
      <summary vsli:raw="Specifies that an assembly is a reference assembly that contains contracts.">Spécifie qu'un assembly est un assembly de référence qui contient des contrats.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute" />.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute">
      <summary vsli:raw="Identifies a member that has no run-time behavior.">Identifie un membre qui n'a aucun comportement au moment de l'exécution.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute" />.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractVerificationAttribute">
      <summary vsli:raw="Instructs analysis tools to assume the correctness of an assembly, type, or member without performing static verification.">Indique aux outils d'analyse de considérer qu'un assembly, un type ou un membre est correct sans exécuter de vérification statique.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractVerificationAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractVerificationAttribute&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.Contracts.ContractVerificationAttribute" />.</summary>
      <param name="value" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to require verification; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour imposer la vérification ; sinon, <see langword="false" />.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractVerificationAttribute.Value">
      <summary vsli:raw="Gets the value that indicates whether to verify the contract of the target.">Obtient la valeur qui indique s'il faut vérifier le contrat de la cible.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if verification is required; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la vérification est requise ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.PureAttribute">
      <summary vsli:raw="Indicates that a type or method is pure, that is, it does not make any visible state changes.">Indique qu'un type ou une méthode est pur(e), autrement dit qu'il ou elle n'apporte pas de modifications d'état visibles.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.PureAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.PureAttribute&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.Contracts.PureAttribute" />.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ContractHelper">
      <summary vsli:raw="Provides methods that the binary rewriter uses to handle contract failures.">Fournit des méthodes que le module de réécriture binaire utilise pour gérer les échecs de contrats.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ContractHelper.RaiseContractFailedEvent(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.Exception)">
      <summary vsli:raw="Used by the binary rewriter to activate the default failure behavior.">Utilisé par le module de réécriture binaire pour activer le comportement d'échec par défaut.</summary>
      <param name="failureKind" vsli:raw="One of the enumeration values that specifies the type of failure.">L'une des valeurs d'énumération qui spécifie le type d'échec.</param>
      <param name="userMessage" vsli:raw="Additional user information.">Informations utilisateur supplémentaires.</param>
      <param name="conditionText" vsli:raw="The description of the condition that caused the failure.">Description de la condition ayant provoqué l'échec.</param>
      <param name="innerException" vsli:raw="The inner exception that caused the current exception.">Exception interne ayant provoqué l'exception actuelle.</param>
      <returns vsli:raw="A null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic) if the event was handled and should not trigger a failure; otherwise, returns the localized failure message.">Référence null (<see langword="Nothing" /> en Visual Basic) si l'événement a été géré et qu'il ne doit pas déclencher d'échec ; sinon, retourne le message d'échec localisé.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;failureKind&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractFailureKind&quot; /&gt; value.">
        <paramref name="failureKind" /> n’est pas une valeur de <see cref="T:System.Diagnostics.Contracts.ContractFailureKind" /> valide.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ContractHelper.TriggerFailure(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.String,System.Exception)">
      <summary vsli:raw="Triggers the default failure behavior.">Déclenche le comportement d'échec par défaut.</summary>
      <param name="kind" vsli:raw="One of the enumeration values that specifies the type of failure.">L'une des valeurs d'énumération qui spécifie le type d'échec.</param>
      <param name="displayMessage" vsli:raw="The message to display.">Message à afficher.</param>
      <param name="userMessage" vsli:raw="Additional user information.">Informations utilisateur supplémentaires.</param>
      <param name="conditionText" vsli:raw="The description of the condition that caused the failure.">Description de la condition ayant provoqué l'échec.</param>
      <param name="innerException" vsli:raw="The inner exception that caused the current exception.">Exception interne ayant provoqué l'exception actuelle.</param>
    </member>
  </members>
</doc>